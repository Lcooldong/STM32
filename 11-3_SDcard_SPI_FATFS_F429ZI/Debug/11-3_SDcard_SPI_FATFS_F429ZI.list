
11-3_SDcard_SPI_FATFS_F429ZI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009af4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008d4  08009ca4  08009ca4  00019ca4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a578  0800a578  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  0800a578  0800a578  0001a578  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a580  0800a580  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a580  0800a580  0001a580  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a584  0800a584  0001a584  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800a588  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020088  2**0
                  CONTENTS
 10 .bss          000044e8  20000088  20000088  00020088  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004570  20004570  00020088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001caa4  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003ab5  00000000  00000000  0003cb5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013d0  00000000  00000000  00040618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001248  00000000  00000000  000419e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000272f7  00000000  00000000  00042c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a619  00000000  00000000  00069f27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000df238  00000000  00000000  00084540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00163778  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005be0  00000000  00000000  001637cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000088 	.word	0x20000088
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08009c8c 	.word	0x08009c8c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000008c 	.word	0x2000008c
 80001ec:	08009c8c 	.word	0x08009c8c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_dmul>:
 80002a0:	b570      	push	{r4, r5, r6, lr}
 80002a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80002a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80002aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002ae:	bf1d      	ittte	ne
 80002b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002b4:	ea94 0f0c 	teqne	r4, ip
 80002b8:	ea95 0f0c 	teqne	r5, ip
 80002bc:	f000 f8de 	bleq	800047c <__aeabi_dmul+0x1dc>
 80002c0:	442c      	add	r4, r5
 80002c2:	ea81 0603 	eor.w	r6, r1, r3
 80002c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002d2:	bf18      	it	ne
 80002d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002e0:	d038      	beq.n	8000354 <__aeabi_dmul+0xb4>
 80002e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002e6:	f04f 0500 	mov.w	r5, #0
 80002ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002f6:	f04f 0600 	mov.w	r6, #0
 80002fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002fe:	f09c 0f00 	teq	ip, #0
 8000302:	bf18      	it	ne
 8000304:	f04e 0e01 	orrne.w	lr, lr, #1
 8000308:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800030c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000310:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000314:	d204      	bcs.n	8000320 <__aeabi_dmul+0x80>
 8000316:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800031a:	416d      	adcs	r5, r5
 800031c:	eb46 0606 	adc.w	r6, r6, r6
 8000320:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000324:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000328:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800032c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000330:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000334:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000338:	bf88      	it	hi
 800033a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800033e:	d81e      	bhi.n	800037e <__aeabi_dmul+0xde>
 8000340:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	bd70      	pop	{r4, r5, r6, pc}
 8000354:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000358:	ea46 0101 	orr.w	r1, r6, r1
 800035c:	ea40 0002 	orr.w	r0, r0, r2
 8000360:	ea81 0103 	eor.w	r1, r1, r3
 8000364:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000368:	bfc2      	ittt	gt
 800036a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800036e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000372:	bd70      	popgt	{r4, r5, r6, pc}
 8000374:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000378:	f04f 0e00 	mov.w	lr, #0
 800037c:	3c01      	subs	r4, #1
 800037e:	f300 80ab 	bgt.w	80004d8 <__aeabi_dmul+0x238>
 8000382:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000386:	bfde      	ittt	le
 8000388:	2000      	movle	r0, #0
 800038a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800038e:	bd70      	pople	{r4, r5, r6, pc}
 8000390:	f1c4 0400 	rsb	r4, r4, #0
 8000394:	3c20      	subs	r4, #32
 8000396:	da35      	bge.n	8000404 <__aeabi_dmul+0x164>
 8000398:	340c      	adds	r4, #12
 800039a:	dc1b      	bgt.n	80003d4 <__aeabi_dmul+0x134>
 800039c:	f104 0414 	add.w	r4, r4, #20
 80003a0:	f1c4 0520 	rsb	r5, r4, #32
 80003a4:	fa00 f305 	lsl.w	r3, r0, r5
 80003a8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ac:	fa01 f205 	lsl.w	r2, r1, r5
 80003b0:	ea40 0002 	orr.w	r0, r0, r2
 80003b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c0:	fa21 f604 	lsr.w	r6, r1, r4
 80003c4:	eb42 0106 	adc.w	r1, r2, r6
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 040c 	rsb	r4, r4, #12
 80003d8:	f1c4 0520 	rsb	r5, r4, #32
 80003dc:	fa00 f304 	lsl.w	r3, r0, r4
 80003e0:	fa20 f005 	lsr.w	r0, r0, r5
 80003e4:	fa01 f204 	lsl.w	r2, r1, r4
 80003e8:	ea40 0002 	orr.w	r0, r0, r2
 80003ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003f4:	f141 0100 	adc.w	r1, r1, #0
 80003f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003fc:	bf08      	it	eq
 80003fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000402:	bd70      	pop	{r4, r5, r6, pc}
 8000404:	f1c4 0520 	rsb	r5, r4, #32
 8000408:	fa00 f205 	lsl.w	r2, r0, r5
 800040c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000410:	fa20 f304 	lsr.w	r3, r0, r4
 8000414:	fa01 f205 	lsl.w	r2, r1, r5
 8000418:	ea43 0302 	orr.w	r3, r3, r2
 800041c:	fa21 f004 	lsr.w	r0, r1, r4
 8000420:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000424:	fa21 f204 	lsr.w	r2, r1, r4
 8000428:	ea20 0002 	bic.w	r0, r0, r2
 800042c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000430:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000434:	bf08      	it	eq
 8000436:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800043a:	bd70      	pop	{r4, r5, r6, pc}
 800043c:	f094 0f00 	teq	r4, #0
 8000440:	d10f      	bne.n	8000462 <__aeabi_dmul+0x1c2>
 8000442:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000446:	0040      	lsls	r0, r0, #1
 8000448:	eb41 0101 	adc.w	r1, r1, r1
 800044c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3c01      	subeq	r4, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1a6>
 8000456:	ea41 0106 	orr.w	r1, r1, r6
 800045a:	f095 0f00 	teq	r5, #0
 800045e:	bf18      	it	ne
 8000460:	4770      	bxne	lr
 8000462:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000466:	0052      	lsls	r2, r2, #1
 8000468:	eb43 0303 	adc.w	r3, r3, r3
 800046c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000470:	bf08      	it	eq
 8000472:	3d01      	subeq	r5, #1
 8000474:	d0f7      	beq.n	8000466 <__aeabi_dmul+0x1c6>
 8000476:	ea43 0306 	orr.w	r3, r3, r6
 800047a:	4770      	bx	lr
 800047c:	ea94 0f0c 	teq	r4, ip
 8000480:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000484:	bf18      	it	ne
 8000486:	ea95 0f0c 	teqne	r5, ip
 800048a:	d00c      	beq.n	80004a6 <__aeabi_dmul+0x206>
 800048c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000490:	bf18      	it	ne
 8000492:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000496:	d1d1      	bne.n	800043c <__aeabi_dmul+0x19c>
 8000498:	ea81 0103 	eor.w	r1, r1, r3
 800049c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004a0:	f04f 0000 	mov.w	r0, #0
 80004a4:	bd70      	pop	{r4, r5, r6, pc}
 80004a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004aa:	bf06      	itte	eq
 80004ac:	4610      	moveq	r0, r2
 80004ae:	4619      	moveq	r1, r3
 80004b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004b4:	d019      	beq.n	80004ea <__aeabi_dmul+0x24a>
 80004b6:	ea94 0f0c 	teq	r4, ip
 80004ba:	d102      	bne.n	80004c2 <__aeabi_dmul+0x222>
 80004bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004c0:	d113      	bne.n	80004ea <__aeabi_dmul+0x24a>
 80004c2:	ea95 0f0c 	teq	r5, ip
 80004c6:	d105      	bne.n	80004d4 <__aeabi_dmul+0x234>
 80004c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004cc:	bf1c      	itt	ne
 80004ce:	4610      	movne	r0, r2
 80004d0:	4619      	movne	r1, r3
 80004d2:	d10a      	bne.n	80004ea <__aeabi_dmul+0x24a>
 80004d4:	ea81 0103 	eor.w	r1, r1, r3
 80004d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd70      	pop	{r4, r5, r6, pc}
 80004ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004f2:	bd70      	pop	{r4, r5, r6, pc}

080004f4 <__aeabi_drsub>:
 80004f4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e002      	b.n	8000500 <__adddf3>
 80004fa:	bf00      	nop

080004fc <__aeabi_dsub>:
 80004fc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000500 <__adddf3>:
 8000500:	b530      	push	{r4, r5, lr}
 8000502:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000506:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800050a:	ea94 0f05 	teq	r4, r5
 800050e:	bf08      	it	eq
 8000510:	ea90 0f02 	teqeq	r0, r2
 8000514:	bf1f      	itttt	ne
 8000516:	ea54 0c00 	orrsne.w	ip, r4, r0
 800051a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800051e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000522:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000526:	f000 80e2 	beq.w	80006ee <__adddf3+0x1ee>
 800052a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800052e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000532:	bfb8      	it	lt
 8000534:	426d      	neglt	r5, r5
 8000536:	dd0c      	ble.n	8000552 <__adddf3+0x52>
 8000538:	442c      	add	r4, r5
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	ea82 0000 	eor.w	r0, r2, r0
 8000546:	ea83 0101 	eor.w	r1, r3, r1
 800054a:	ea80 0202 	eor.w	r2, r0, r2
 800054e:	ea81 0303 	eor.w	r3, r1, r3
 8000552:	2d36      	cmp	r5, #54	; 0x36
 8000554:	bf88      	it	hi
 8000556:	bd30      	pophi	{r4, r5, pc}
 8000558:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800055c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000560:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000564:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000568:	d002      	beq.n	8000570 <__adddf3+0x70>
 800056a:	4240      	negs	r0, r0
 800056c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000570:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000574:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000578:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800057c:	d002      	beq.n	8000584 <__adddf3+0x84>
 800057e:	4252      	negs	r2, r2
 8000580:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000584:	ea94 0f05 	teq	r4, r5
 8000588:	f000 80a7 	beq.w	80006da <__adddf3+0x1da>
 800058c:	f1a4 0401 	sub.w	r4, r4, #1
 8000590:	f1d5 0e20 	rsbs	lr, r5, #32
 8000594:	db0d      	blt.n	80005b2 <__adddf3+0xb2>
 8000596:	fa02 fc0e 	lsl.w	ip, r2, lr
 800059a:	fa22 f205 	lsr.w	r2, r2, r5
 800059e:	1880      	adds	r0, r0, r2
 80005a0:	f141 0100 	adc.w	r1, r1, #0
 80005a4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005a8:	1880      	adds	r0, r0, r2
 80005aa:	fa43 f305 	asr.w	r3, r3, r5
 80005ae:	4159      	adcs	r1, r3
 80005b0:	e00e      	b.n	80005d0 <__adddf3+0xd0>
 80005b2:	f1a5 0520 	sub.w	r5, r5, #32
 80005b6:	f10e 0e20 	add.w	lr, lr, #32
 80005ba:	2a01      	cmp	r2, #1
 80005bc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005c0:	bf28      	it	cs
 80005c2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005c6:	fa43 f305 	asr.w	r3, r3, r5
 80005ca:	18c0      	adds	r0, r0, r3
 80005cc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	d507      	bpl.n	80005e6 <__adddf3+0xe6>
 80005d6:	f04f 0e00 	mov.w	lr, #0
 80005da:	f1dc 0c00 	rsbs	ip, ip, #0
 80005de:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005e2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005e6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ea:	d31b      	bcc.n	8000624 <__adddf3+0x124>
 80005ec:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005f0:	d30c      	bcc.n	800060c <__adddf3+0x10c>
 80005f2:	0849      	lsrs	r1, r1, #1
 80005f4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005f8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005fc:	f104 0401 	add.w	r4, r4, #1
 8000600:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000604:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000608:	f080 809a 	bcs.w	8000740 <__adddf3+0x240>
 800060c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000610:	bf08      	it	eq
 8000612:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000616:	f150 0000 	adcs.w	r0, r0, #0
 800061a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061e:	ea41 0105 	orr.w	r1, r1, r5
 8000622:	bd30      	pop	{r4, r5, pc}
 8000624:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000628:	4140      	adcs	r0, r0
 800062a:	eb41 0101 	adc.w	r1, r1, r1
 800062e:	3c01      	subs	r4, #1
 8000630:	bf28      	it	cs
 8000632:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000636:	d2e9      	bcs.n	800060c <__adddf3+0x10c>
 8000638:	f091 0f00 	teq	r1, #0
 800063c:	bf04      	itt	eq
 800063e:	4601      	moveq	r1, r0
 8000640:	2000      	moveq	r0, #0
 8000642:	fab1 f381 	clz	r3, r1
 8000646:	bf08      	it	eq
 8000648:	3320      	addeq	r3, #32
 800064a:	f1a3 030b 	sub.w	r3, r3, #11
 800064e:	f1b3 0220 	subs.w	r2, r3, #32
 8000652:	da0c      	bge.n	800066e <__adddf3+0x16e>
 8000654:	320c      	adds	r2, #12
 8000656:	dd08      	ble.n	800066a <__adddf3+0x16a>
 8000658:	f102 0c14 	add.w	ip, r2, #20
 800065c:	f1c2 020c 	rsb	r2, r2, #12
 8000660:	fa01 f00c 	lsl.w	r0, r1, ip
 8000664:	fa21 f102 	lsr.w	r1, r1, r2
 8000668:	e00c      	b.n	8000684 <__adddf3+0x184>
 800066a:	f102 0214 	add.w	r2, r2, #20
 800066e:	bfd8      	it	le
 8000670:	f1c2 0c20 	rsble	ip, r2, #32
 8000674:	fa01 f102 	lsl.w	r1, r1, r2
 8000678:	fa20 fc0c 	lsr.w	ip, r0, ip
 800067c:	bfdc      	itt	le
 800067e:	ea41 010c 	orrle.w	r1, r1, ip
 8000682:	4090      	lslle	r0, r2
 8000684:	1ae4      	subs	r4, r4, r3
 8000686:	bfa2      	ittt	ge
 8000688:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800068c:	4329      	orrge	r1, r5
 800068e:	bd30      	popge	{r4, r5, pc}
 8000690:	ea6f 0404 	mvn.w	r4, r4
 8000694:	3c1f      	subs	r4, #31
 8000696:	da1c      	bge.n	80006d2 <__adddf3+0x1d2>
 8000698:	340c      	adds	r4, #12
 800069a:	dc0e      	bgt.n	80006ba <__adddf3+0x1ba>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0220 	rsb	r2, r4, #32
 80006a4:	fa20 f004 	lsr.w	r0, r0, r4
 80006a8:	fa01 f302 	lsl.w	r3, r1, r2
 80006ac:	ea40 0003 	orr.w	r0, r0, r3
 80006b0:	fa21 f304 	lsr.w	r3, r1, r4
 80006b4:	ea45 0103 	orr.w	r1, r5, r3
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f1c4 040c 	rsb	r4, r4, #12
 80006be:	f1c4 0220 	rsb	r2, r4, #32
 80006c2:	fa20 f002 	lsr.w	r0, r0, r2
 80006c6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ca:	ea40 0003 	orr.w	r0, r0, r3
 80006ce:	4629      	mov	r1, r5
 80006d0:	bd30      	pop	{r4, r5, pc}
 80006d2:	fa21 f004 	lsr.w	r0, r1, r4
 80006d6:	4629      	mov	r1, r5
 80006d8:	bd30      	pop	{r4, r5, pc}
 80006da:	f094 0f00 	teq	r4, #0
 80006de:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006e2:	bf06      	itte	eq
 80006e4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006e8:	3401      	addeq	r4, #1
 80006ea:	3d01      	subne	r5, #1
 80006ec:	e74e      	b.n	800058c <__adddf3+0x8c>
 80006ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006f2:	bf18      	it	ne
 80006f4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006f8:	d029      	beq.n	800074e <__adddf3+0x24e>
 80006fa:	ea94 0f05 	teq	r4, r5
 80006fe:	bf08      	it	eq
 8000700:	ea90 0f02 	teqeq	r0, r2
 8000704:	d005      	beq.n	8000712 <__adddf3+0x212>
 8000706:	ea54 0c00 	orrs.w	ip, r4, r0
 800070a:	bf04      	itt	eq
 800070c:	4619      	moveq	r1, r3
 800070e:	4610      	moveq	r0, r2
 8000710:	bd30      	pop	{r4, r5, pc}
 8000712:	ea91 0f03 	teq	r1, r3
 8000716:	bf1e      	ittt	ne
 8000718:	2100      	movne	r1, #0
 800071a:	2000      	movne	r0, #0
 800071c:	bd30      	popne	{r4, r5, pc}
 800071e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000722:	d105      	bne.n	8000730 <__adddf3+0x230>
 8000724:	0040      	lsls	r0, r0, #1
 8000726:	4149      	adcs	r1, r1
 8000728:	bf28      	it	cs
 800072a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800072e:	bd30      	pop	{r4, r5, pc}
 8000730:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000734:	bf3c      	itt	cc
 8000736:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800073a:	bd30      	popcc	{r4, r5, pc}
 800073c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000740:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000744:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd30      	pop	{r4, r5, pc}
 800074e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000752:	bf1a      	itte	ne
 8000754:	4619      	movne	r1, r3
 8000756:	4610      	movne	r0, r2
 8000758:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800075c:	bf1c      	itt	ne
 800075e:	460b      	movne	r3, r1
 8000760:	4602      	movne	r2, r0
 8000762:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000766:	bf06      	itte	eq
 8000768:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800076c:	ea91 0f03 	teqeq	r1, r3
 8000770:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000774:	bd30      	pop	{r4, r5, pc}
 8000776:	bf00      	nop

08000778 <__aeabi_ui2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f04f 0500 	mov.w	r5, #0
 8000790:	f04f 0100 	mov.w	r1, #0
 8000794:	e750      	b.n	8000638 <__adddf3+0x138>
 8000796:	bf00      	nop

08000798 <__aeabi_i2d>:
 8000798:	f090 0f00 	teq	r0, #0
 800079c:	bf04      	itt	eq
 800079e:	2100      	moveq	r1, #0
 80007a0:	4770      	bxeq	lr
 80007a2:	b530      	push	{r4, r5, lr}
 80007a4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007a8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007ac:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007b0:	bf48      	it	mi
 80007b2:	4240      	negmi	r0, r0
 80007b4:	f04f 0100 	mov.w	r1, #0
 80007b8:	e73e      	b.n	8000638 <__adddf3+0x138>
 80007ba:	bf00      	nop

080007bc <__aeabi_f2d>:
 80007bc:	0042      	lsls	r2, r0, #1
 80007be:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007c2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007c6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ca:	bf1f      	itttt	ne
 80007cc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007d0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007d4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007d8:	4770      	bxne	lr
 80007da:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007de:	bf08      	it	eq
 80007e0:	4770      	bxeq	lr
 80007e2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007e6:	bf04      	itt	eq
 80007e8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007ec:	4770      	bxeq	lr
 80007ee:	b530      	push	{r4, r5, lr}
 80007f0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007fc:	e71c      	b.n	8000638 <__adddf3+0x138>
 80007fe:	bf00      	nop

08000800 <__aeabi_ul2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f04f 0500 	mov.w	r5, #0
 800080e:	e00a      	b.n	8000826 <__aeabi_l2d+0x16>

08000810 <__aeabi_l2d>:
 8000810:	ea50 0201 	orrs.w	r2, r0, r1
 8000814:	bf08      	it	eq
 8000816:	4770      	bxeq	lr
 8000818:	b530      	push	{r4, r5, lr}
 800081a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800081e:	d502      	bpl.n	8000826 <__aeabi_l2d+0x16>
 8000820:	4240      	negs	r0, r0
 8000822:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000826:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800082a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800082e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000832:	f43f aed8 	beq.w	80005e6 <__adddf3+0xe6>
 8000836:	f04f 0203 	mov.w	r2, #3
 800083a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800083e:	bf18      	it	ne
 8000840:	3203      	addne	r2, #3
 8000842:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000846:	bf18      	it	ne
 8000848:	3203      	addne	r2, #3
 800084a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800084e:	f1c2 0320 	rsb	r3, r2, #32
 8000852:	fa00 fc03 	lsl.w	ip, r0, r3
 8000856:	fa20 f002 	lsr.w	r0, r0, r2
 800085a:	fa01 fe03 	lsl.w	lr, r1, r3
 800085e:	ea40 000e 	orr.w	r0, r0, lr
 8000862:	fa21 f102 	lsr.w	r1, r1, r2
 8000866:	4414      	add	r4, r2
 8000868:	e6bd      	b.n	80005e6 <__adddf3+0xe6>
 800086a:	bf00      	nop

0800086c <__aeabi_d2uiz>:
 800086c:	004a      	lsls	r2, r1, #1
 800086e:	d211      	bcs.n	8000894 <__aeabi_d2uiz+0x28>
 8000870:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000874:	d211      	bcs.n	800089a <__aeabi_d2uiz+0x2e>
 8000876:	d50d      	bpl.n	8000894 <__aeabi_d2uiz+0x28>
 8000878:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800087c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000880:	d40e      	bmi.n	80008a0 <__aeabi_d2uiz+0x34>
 8000882:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000886:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800088a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800088e:	fa23 f002 	lsr.w	r0, r3, r2
 8000892:	4770      	bx	lr
 8000894:	f04f 0000 	mov.w	r0, #0
 8000898:	4770      	bx	lr
 800089a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800089e:	d102      	bne.n	80008a6 <__aeabi_d2uiz+0x3a>
 80008a0:	f04f 30ff 	mov.w	r0, #4294967295
 80008a4:	4770      	bx	lr
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	4770      	bx	lr

080008ac <__aeabi_uldivmod>:
 80008ac:	b953      	cbnz	r3, 80008c4 <__aeabi_uldivmod+0x18>
 80008ae:	b94a      	cbnz	r2, 80008c4 <__aeabi_uldivmod+0x18>
 80008b0:	2900      	cmp	r1, #0
 80008b2:	bf08      	it	eq
 80008b4:	2800      	cmpeq	r0, #0
 80008b6:	bf1c      	itt	ne
 80008b8:	f04f 31ff 	movne.w	r1, #4294967295
 80008bc:	f04f 30ff 	movne.w	r0, #4294967295
 80008c0:	f000 b96e 	b.w	8000ba0 <__aeabi_idiv0>
 80008c4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008c8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008cc:	f000 f806 	bl	80008dc <__udivmoddi4>
 80008d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008d8:	b004      	add	sp, #16
 80008da:	4770      	bx	lr

080008dc <__udivmoddi4>:
 80008dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008e0:	9d08      	ldr	r5, [sp, #32]
 80008e2:	4604      	mov	r4, r0
 80008e4:	468c      	mov	ip, r1
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	f040 8083 	bne.w	80009f2 <__udivmoddi4+0x116>
 80008ec:	428a      	cmp	r2, r1
 80008ee:	4617      	mov	r7, r2
 80008f0:	d947      	bls.n	8000982 <__udivmoddi4+0xa6>
 80008f2:	fab2 f282 	clz	r2, r2
 80008f6:	b142      	cbz	r2, 800090a <__udivmoddi4+0x2e>
 80008f8:	f1c2 0020 	rsb	r0, r2, #32
 80008fc:	fa24 f000 	lsr.w	r0, r4, r0
 8000900:	4091      	lsls	r1, r2
 8000902:	4097      	lsls	r7, r2
 8000904:	ea40 0c01 	orr.w	ip, r0, r1
 8000908:	4094      	lsls	r4, r2
 800090a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800090e:	0c23      	lsrs	r3, r4, #16
 8000910:	fbbc f6f8 	udiv	r6, ip, r8
 8000914:	fa1f fe87 	uxth.w	lr, r7
 8000918:	fb08 c116 	mls	r1, r8, r6, ip
 800091c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000920:	fb06 f10e 	mul.w	r1, r6, lr
 8000924:	4299      	cmp	r1, r3
 8000926:	d909      	bls.n	800093c <__udivmoddi4+0x60>
 8000928:	18fb      	adds	r3, r7, r3
 800092a:	f106 30ff 	add.w	r0, r6, #4294967295
 800092e:	f080 8119 	bcs.w	8000b64 <__udivmoddi4+0x288>
 8000932:	4299      	cmp	r1, r3
 8000934:	f240 8116 	bls.w	8000b64 <__udivmoddi4+0x288>
 8000938:	3e02      	subs	r6, #2
 800093a:	443b      	add	r3, r7
 800093c:	1a5b      	subs	r3, r3, r1
 800093e:	b2a4      	uxth	r4, r4
 8000940:	fbb3 f0f8 	udiv	r0, r3, r8
 8000944:	fb08 3310 	mls	r3, r8, r0, r3
 8000948:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800094c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000950:	45a6      	cmp	lr, r4
 8000952:	d909      	bls.n	8000968 <__udivmoddi4+0x8c>
 8000954:	193c      	adds	r4, r7, r4
 8000956:	f100 33ff 	add.w	r3, r0, #4294967295
 800095a:	f080 8105 	bcs.w	8000b68 <__udivmoddi4+0x28c>
 800095e:	45a6      	cmp	lr, r4
 8000960:	f240 8102 	bls.w	8000b68 <__udivmoddi4+0x28c>
 8000964:	3802      	subs	r0, #2
 8000966:	443c      	add	r4, r7
 8000968:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800096c:	eba4 040e 	sub.w	r4, r4, lr
 8000970:	2600      	movs	r6, #0
 8000972:	b11d      	cbz	r5, 800097c <__udivmoddi4+0xa0>
 8000974:	40d4      	lsrs	r4, r2
 8000976:	2300      	movs	r3, #0
 8000978:	e9c5 4300 	strd	r4, r3, [r5]
 800097c:	4631      	mov	r1, r6
 800097e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000982:	b902      	cbnz	r2, 8000986 <__udivmoddi4+0xaa>
 8000984:	deff      	udf	#255	; 0xff
 8000986:	fab2 f282 	clz	r2, r2
 800098a:	2a00      	cmp	r2, #0
 800098c:	d150      	bne.n	8000a30 <__udivmoddi4+0x154>
 800098e:	1bcb      	subs	r3, r1, r7
 8000990:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000994:	fa1f f887 	uxth.w	r8, r7
 8000998:	2601      	movs	r6, #1
 800099a:	fbb3 fcfe 	udiv	ip, r3, lr
 800099e:	0c21      	lsrs	r1, r4, #16
 80009a0:	fb0e 331c 	mls	r3, lr, ip, r3
 80009a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80009a8:	fb08 f30c 	mul.w	r3, r8, ip
 80009ac:	428b      	cmp	r3, r1
 80009ae:	d907      	bls.n	80009c0 <__udivmoddi4+0xe4>
 80009b0:	1879      	adds	r1, r7, r1
 80009b2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80009b6:	d202      	bcs.n	80009be <__udivmoddi4+0xe2>
 80009b8:	428b      	cmp	r3, r1
 80009ba:	f200 80e9 	bhi.w	8000b90 <__udivmoddi4+0x2b4>
 80009be:	4684      	mov	ip, r0
 80009c0:	1ac9      	subs	r1, r1, r3
 80009c2:	b2a3      	uxth	r3, r4
 80009c4:	fbb1 f0fe 	udiv	r0, r1, lr
 80009c8:	fb0e 1110 	mls	r1, lr, r0, r1
 80009cc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80009d0:	fb08 f800 	mul.w	r8, r8, r0
 80009d4:	45a0      	cmp	r8, r4
 80009d6:	d907      	bls.n	80009e8 <__udivmoddi4+0x10c>
 80009d8:	193c      	adds	r4, r7, r4
 80009da:	f100 33ff 	add.w	r3, r0, #4294967295
 80009de:	d202      	bcs.n	80009e6 <__udivmoddi4+0x10a>
 80009e0:	45a0      	cmp	r8, r4
 80009e2:	f200 80d9 	bhi.w	8000b98 <__udivmoddi4+0x2bc>
 80009e6:	4618      	mov	r0, r3
 80009e8:	eba4 0408 	sub.w	r4, r4, r8
 80009ec:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80009f0:	e7bf      	b.n	8000972 <__udivmoddi4+0x96>
 80009f2:	428b      	cmp	r3, r1
 80009f4:	d909      	bls.n	8000a0a <__udivmoddi4+0x12e>
 80009f6:	2d00      	cmp	r5, #0
 80009f8:	f000 80b1 	beq.w	8000b5e <__udivmoddi4+0x282>
 80009fc:	2600      	movs	r6, #0
 80009fe:	e9c5 0100 	strd	r0, r1, [r5]
 8000a02:	4630      	mov	r0, r6
 8000a04:	4631      	mov	r1, r6
 8000a06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a0a:	fab3 f683 	clz	r6, r3
 8000a0e:	2e00      	cmp	r6, #0
 8000a10:	d14a      	bne.n	8000aa8 <__udivmoddi4+0x1cc>
 8000a12:	428b      	cmp	r3, r1
 8000a14:	d302      	bcc.n	8000a1c <__udivmoddi4+0x140>
 8000a16:	4282      	cmp	r2, r0
 8000a18:	f200 80b8 	bhi.w	8000b8c <__udivmoddi4+0x2b0>
 8000a1c:	1a84      	subs	r4, r0, r2
 8000a1e:	eb61 0103 	sbc.w	r1, r1, r3
 8000a22:	2001      	movs	r0, #1
 8000a24:	468c      	mov	ip, r1
 8000a26:	2d00      	cmp	r5, #0
 8000a28:	d0a8      	beq.n	800097c <__udivmoddi4+0xa0>
 8000a2a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000a2e:	e7a5      	b.n	800097c <__udivmoddi4+0xa0>
 8000a30:	f1c2 0320 	rsb	r3, r2, #32
 8000a34:	fa20 f603 	lsr.w	r6, r0, r3
 8000a38:	4097      	lsls	r7, r2
 8000a3a:	fa01 f002 	lsl.w	r0, r1, r2
 8000a3e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a42:	40d9      	lsrs	r1, r3
 8000a44:	4330      	orrs	r0, r6
 8000a46:	0c03      	lsrs	r3, r0, #16
 8000a48:	fbb1 f6fe 	udiv	r6, r1, lr
 8000a4c:	fa1f f887 	uxth.w	r8, r7
 8000a50:	fb0e 1116 	mls	r1, lr, r6, r1
 8000a54:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a58:	fb06 f108 	mul.w	r1, r6, r8
 8000a5c:	4299      	cmp	r1, r3
 8000a5e:	fa04 f402 	lsl.w	r4, r4, r2
 8000a62:	d909      	bls.n	8000a78 <__udivmoddi4+0x19c>
 8000a64:	18fb      	adds	r3, r7, r3
 8000a66:	f106 3cff 	add.w	ip, r6, #4294967295
 8000a6a:	f080 808d 	bcs.w	8000b88 <__udivmoddi4+0x2ac>
 8000a6e:	4299      	cmp	r1, r3
 8000a70:	f240 808a 	bls.w	8000b88 <__udivmoddi4+0x2ac>
 8000a74:	3e02      	subs	r6, #2
 8000a76:	443b      	add	r3, r7
 8000a78:	1a5b      	subs	r3, r3, r1
 8000a7a:	b281      	uxth	r1, r0
 8000a7c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a80:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a88:	fb00 f308 	mul.w	r3, r0, r8
 8000a8c:	428b      	cmp	r3, r1
 8000a8e:	d907      	bls.n	8000aa0 <__udivmoddi4+0x1c4>
 8000a90:	1879      	adds	r1, r7, r1
 8000a92:	f100 3cff 	add.w	ip, r0, #4294967295
 8000a96:	d273      	bcs.n	8000b80 <__udivmoddi4+0x2a4>
 8000a98:	428b      	cmp	r3, r1
 8000a9a:	d971      	bls.n	8000b80 <__udivmoddi4+0x2a4>
 8000a9c:	3802      	subs	r0, #2
 8000a9e:	4439      	add	r1, r7
 8000aa0:	1acb      	subs	r3, r1, r3
 8000aa2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000aa6:	e778      	b.n	800099a <__udivmoddi4+0xbe>
 8000aa8:	f1c6 0c20 	rsb	ip, r6, #32
 8000aac:	fa03 f406 	lsl.w	r4, r3, r6
 8000ab0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000ab4:	431c      	orrs	r4, r3
 8000ab6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000aba:	fa01 f306 	lsl.w	r3, r1, r6
 8000abe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000ac2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ac6:	431f      	orrs	r7, r3
 8000ac8:	0c3b      	lsrs	r3, r7, #16
 8000aca:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ace:	fa1f f884 	uxth.w	r8, r4
 8000ad2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ad6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000ada:	fb09 fa08 	mul.w	sl, r9, r8
 8000ade:	458a      	cmp	sl, r1
 8000ae0:	fa02 f206 	lsl.w	r2, r2, r6
 8000ae4:	fa00 f306 	lsl.w	r3, r0, r6
 8000ae8:	d908      	bls.n	8000afc <__udivmoddi4+0x220>
 8000aea:	1861      	adds	r1, r4, r1
 8000aec:	f109 30ff 	add.w	r0, r9, #4294967295
 8000af0:	d248      	bcs.n	8000b84 <__udivmoddi4+0x2a8>
 8000af2:	458a      	cmp	sl, r1
 8000af4:	d946      	bls.n	8000b84 <__udivmoddi4+0x2a8>
 8000af6:	f1a9 0902 	sub.w	r9, r9, #2
 8000afa:	4421      	add	r1, r4
 8000afc:	eba1 010a 	sub.w	r1, r1, sl
 8000b00:	b2bf      	uxth	r7, r7
 8000b02:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b06:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b0a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000b0e:	fb00 f808 	mul.w	r8, r0, r8
 8000b12:	45b8      	cmp	r8, r7
 8000b14:	d907      	bls.n	8000b26 <__udivmoddi4+0x24a>
 8000b16:	19e7      	adds	r7, r4, r7
 8000b18:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b1c:	d22e      	bcs.n	8000b7c <__udivmoddi4+0x2a0>
 8000b1e:	45b8      	cmp	r8, r7
 8000b20:	d92c      	bls.n	8000b7c <__udivmoddi4+0x2a0>
 8000b22:	3802      	subs	r0, #2
 8000b24:	4427      	add	r7, r4
 8000b26:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000b2a:	eba7 0708 	sub.w	r7, r7, r8
 8000b2e:	fba0 8902 	umull	r8, r9, r0, r2
 8000b32:	454f      	cmp	r7, r9
 8000b34:	46c6      	mov	lr, r8
 8000b36:	4649      	mov	r1, r9
 8000b38:	d31a      	bcc.n	8000b70 <__udivmoddi4+0x294>
 8000b3a:	d017      	beq.n	8000b6c <__udivmoddi4+0x290>
 8000b3c:	b15d      	cbz	r5, 8000b56 <__udivmoddi4+0x27a>
 8000b3e:	ebb3 020e 	subs.w	r2, r3, lr
 8000b42:	eb67 0701 	sbc.w	r7, r7, r1
 8000b46:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000b4a:	40f2      	lsrs	r2, r6
 8000b4c:	ea4c 0202 	orr.w	r2, ip, r2
 8000b50:	40f7      	lsrs	r7, r6
 8000b52:	e9c5 2700 	strd	r2, r7, [r5]
 8000b56:	2600      	movs	r6, #0
 8000b58:	4631      	mov	r1, r6
 8000b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b5e:	462e      	mov	r6, r5
 8000b60:	4628      	mov	r0, r5
 8000b62:	e70b      	b.n	800097c <__udivmoddi4+0xa0>
 8000b64:	4606      	mov	r6, r0
 8000b66:	e6e9      	b.n	800093c <__udivmoddi4+0x60>
 8000b68:	4618      	mov	r0, r3
 8000b6a:	e6fd      	b.n	8000968 <__udivmoddi4+0x8c>
 8000b6c:	4543      	cmp	r3, r8
 8000b6e:	d2e5      	bcs.n	8000b3c <__udivmoddi4+0x260>
 8000b70:	ebb8 0e02 	subs.w	lr, r8, r2
 8000b74:	eb69 0104 	sbc.w	r1, r9, r4
 8000b78:	3801      	subs	r0, #1
 8000b7a:	e7df      	b.n	8000b3c <__udivmoddi4+0x260>
 8000b7c:	4608      	mov	r0, r1
 8000b7e:	e7d2      	b.n	8000b26 <__udivmoddi4+0x24a>
 8000b80:	4660      	mov	r0, ip
 8000b82:	e78d      	b.n	8000aa0 <__udivmoddi4+0x1c4>
 8000b84:	4681      	mov	r9, r0
 8000b86:	e7b9      	b.n	8000afc <__udivmoddi4+0x220>
 8000b88:	4666      	mov	r6, ip
 8000b8a:	e775      	b.n	8000a78 <__udivmoddi4+0x19c>
 8000b8c:	4630      	mov	r0, r6
 8000b8e:	e74a      	b.n	8000a26 <__udivmoddi4+0x14a>
 8000b90:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b94:	4439      	add	r1, r7
 8000b96:	e713      	b.n	80009c0 <__udivmoddi4+0xe4>
 8000b98:	3802      	subs	r0, #2
 8000b9a:	443c      	add	r4, r7
 8000b9c:	e724      	b.n	80009e8 <__udivmoddi4+0x10c>
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_idiv0>:
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop

08000ba4 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000ba8:	2200      	movs	r2, #0
 8000baa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bae:	4804      	ldr	r0, [pc, #16]	; (8000bc0 <SELECT+0x1c>)
 8000bb0:	f001 ff42 	bl	8002a38 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000bb4:	2001      	movs	r0, #1
 8000bb6:	f001 fba7 	bl	8002308 <HAL_Delay>
}
 8000bba:	bf00      	nop
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	40020c00 	.word	0x40020c00

08000bc4 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000bc8:	2201      	movs	r2, #1
 8000bca:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bce:	4804      	ldr	r0, [pc, #16]	; (8000be0 <DESELECT+0x1c>)
 8000bd0:	f001 ff32 	bl	8002a38 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000bd4:	2001      	movs	r0, #1
 8000bd6:	f001 fb97 	bl	8002308 <HAL_Delay>
}
 8000bda:	bf00      	nop
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	40020c00 	.word	0x40020c00

08000be4 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	4603      	mov	r3, r0
 8000bec:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000bee:	bf00      	nop
 8000bf0:	4b08      	ldr	r3, [pc, #32]	; (8000c14 <SPI_TxByte+0x30>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	689b      	ldr	r3, [r3, #8]
 8000bf6:	f003 0302 	and.w	r3, r3, #2
 8000bfa:	2b02      	cmp	r3, #2
 8000bfc:	d1f8      	bne.n	8000bf0 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000bfe:	1df9      	adds	r1, r7, #7
 8000c00:	2364      	movs	r3, #100	; 0x64
 8000c02:	2201      	movs	r2, #1
 8000c04:	4803      	ldr	r0, [pc, #12]	; (8000c14 <SPI_TxByte+0x30>)
 8000c06:	f002 fcb0 	bl	800356a <HAL_SPI_Transmit>
}
 8000c0a:	bf00      	nop
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	200002f4 	.word	0x200002f4

08000c18 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
 8000c20:	460b      	mov	r3, r1
 8000c22:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000c24:	bf00      	nop
 8000c26:	4b08      	ldr	r3, [pc, #32]	; (8000c48 <SPI_TxBuffer+0x30>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	689b      	ldr	r3, [r3, #8]
 8000c2c:	f003 0302 	and.w	r3, r3, #2
 8000c30:	2b02      	cmp	r3, #2
 8000c32:	d1f8      	bne.n	8000c26 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000c34:	887a      	ldrh	r2, [r7, #2]
 8000c36:	2364      	movs	r3, #100	; 0x64
 8000c38:	6879      	ldr	r1, [r7, #4]
 8000c3a:	4803      	ldr	r0, [pc, #12]	; (8000c48 <SPI_TxBuffer+0x30>)
 8000c3c:	f002 fc95 	bl	800356a <HAL_SPI_Transmit>
}
 8000c40:	bf00      	nop
 8000c42:	3708      	adds	r7, #8
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	200002f4 	.word	0x200002f4

08000c4c <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b084      	sub	sp, #16
 8000c50:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8000c52:	23ff      	movs	r3, #255	; 0xff
 8000c54:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000c56:	bf00      	nop
 8000c58:	4b09      	ldr	r3, [pc, #36]	; (8000c80 <SPI_RxByte+0x34>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	689b      	ldr	r3, [r3, #8]
 8000c5e:	f003 0302 	and.w	r3, r3, #2
 8000c62:	2b02      	cmp	r3, #2
 8000c64:	d1f8      	bne.n	8000c58 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000c66:	1dba      	adds	r2, r7, #6
 8000c68:	1df9      	adds	r1, r7, #7
 8000c6a:	2364      	movs	r3, #100	; 0x64
 8000c6c:	9300      	str	r3, [sp, #0]
 8000c6e:	2301      	movs	r3, #1
 8000c70:	4803      	ldr	r0, [pc, #12]	; (8000c80 <SPI_RxByte+0x34>)
 8000c72:	f002 fdb6 	bl	80037e2 <HAL_SPI_TransmitReceive>

	return data;
 8000c76:	79bb      	ldrb	r3, [r7, #6]
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	3708      	adds	r7, #8
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	200002f4 	.word	0x200002f4

08000c84 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8000c8c:	f7ff ffde 	bl	8000c4c <SPI_RxByte>
 8000c90:	4603      	mov	r3, r0
 8000c92:	461a      	mov	r2, r3
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	701a      	strb	r2, [r3, #0]
}
 8000c98:	bf00      	nop
 8000c9a:	3708      	adds	r7, #8
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}

08000ca0 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8000ca6:	4b0a      	ldr	r3, [pc, #40]	; (8000cd0 <SD_ReadyWait+0x30>)
 8000ca8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000cac:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8000cae:	f7ff ffcd 	bl	8000c4c <SPI_RxByte>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8000cb6:	79fb      	ldrb	r3, [r7, #7]
 8000cb8:	2bff      	cmp	r3, #255	; 0xff
 8000cba:	d003      	beq.n	8000cc4 <SD_ReadyWait+0x24>
 8000cbc:	4b04      	ldr	r3, [pc, #16]	; (8000cd0 <SD_ReadyWait+0x30>)
 8000cbe:	881b      	ldrh	r3, [r3, #0]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d1f4      	bne.n	8000cae <SD_ReadyWait+0xe>

	return res;
 8000cc4:	79fb      	ldrb	r3, [r7, #7]
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	200002ec 	.word	0x200002ec

08000cd4 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b084      	sub	sp, #16
 8000cd8:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8000cda:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000cde:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8000ce0:	f7ff ff70 	bl	8000bc4 <DESELECT>
	for(int i = 0; i < 10; i++)
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	60bb      	str	r3, [r7, #8]
 8000ce8:	e005      	b.n	8000cf6 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8000cea:	20ff      	movs	r0, #255	; 0xff
 8000cec:	f7ff ff7a 	bl	8000be4 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	3301      	adds	r3, #1
 8000cf4:	60bb      	str	r3, [r7, #8]
 8000cf6:	68bb      	ldr	r3, [r7, #8]
 8000cf8:	2b09      	cmp	r3, #9
 8000cfa:	ddf6      	ble.n	8000cea <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8000cfc:	f7ff ff52 	bl	8000ba4 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8000d00:	2340      	movs	r3, #64	; 0x40
 8000d02:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8000d04:	2300      	movs	r3, #0
 8000d06:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8000d10:	2300      	movs	r3, #0
 8000d12:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8000d14:	2395      	movs	r3, #149	; 0x95
 8000d16:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8000d18:	463b      	mov	r3, r7
 8000d1a:	2106      	movs	r1, #6
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f7ff ff7b 	bl	8000c18 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8000d22:	e002      	b.n	8000d2a <SD_PowerOn+0x56>
	{
		cnt--;
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	3b01      	subs	r3, #1
 8000d28:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8000d2a:	f7ff ff8f 	bl	8000c4c <SPI_RxByte>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b01      	cmp	r3, #1
 8000d32:	d002      	beq.n	8000d3a <SD_PowerOn+0x66>
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d1f4      	bne.n	8000d24 <SD_PowerOn+0x50>
	}

	DESELECT();
 8000d3a:	f7ff ff43 	bl	8000bc4 <DESELECT>
	SPI_TxByte(0XFF);
 8000d3e:	20ff      	movs	r0, #255	; 0xff
 8000d40:	f7ff ff50 	bl	8000be4 <SPI_TxByte>

	PowerFlag = 1;
 8000d44:	4b03      	ldr	r3, [pc, #12]	; (8000d54 <SD_PowerOn+0x80>)
 8000d46:	2201      	movs	r2, #1
 8000d48:	701a      	strb	r2, [r3, #0]
}
 8000d4a:	bf00      	nop
 8000d4c:	3710      	adds	r7, #16
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	200000a5 	.word	0x200000a5

08000d58 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000d5c:	4b03      	ldr	r3, [pc, #12]	; (8000d6c <SD_PowerOff+0x14>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	701a      	strb	r2, [r3, #0]
}
 8000d62:	bf00      	nop
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr
 8000d6c:	200000a5 	.word	0x200000a5

08000d70 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
	return PowerFlag;
 8000d74:	4b03      	ldr	r3, [pc, #12]	; (8000d84 <SD_CheckPower+0x14>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	200000a5 	.word	0x200000a5

08000d88 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b084      	sub	sp, #16
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
 8000d90:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8000d92:	4b13      	ldr	r3, [pc, #76]	; (8000de0 <SD_RxDataBlock+0x58>)
 8000d94:	22c8      	movs	r2, #200	; 0xc8
 8000d96:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8000d98:	f7ff ff58 	bl	8000c4c <SPI_RxByte>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8000da0:	7bfb      	ldrb	r3, [r7, #15]
 8000da2:	2bff      	cmp	r3, #255	; 0xff
 8000da4:	d103      	bne.n	8000dae <SD_RxDataBlock+0x26>
 8000da6:	4b0e      	ldr	r3, [pc, #56]	; (8000de0 <SD_RxDataBlock+0x58>)
 8000da8:	881b      	ldrh	r3, [r3, #0]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d1f4      	bne.n	8000d98 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8000dae:	7bfb      	ldrb	r3, [r7, #15]
 8000db0:	2bfe      	cmp	r3, #254	; 0xfe
 8000db2:	d001      	beq.n	8000db8 <SD_RxDataBlock+0x30>
 8000db4:	2300      	movs	r3, #0
 8000db6:	e00f      	b.n	8000dd8 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	1c5a      	adds	r2, r3, #1
 8000dbc:	607a      	str	r2, [r7, #4]
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f7ff ff60 	bl	8000c84 <SPI_RxBytePtr>
	} while(len--);
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	1e5a      	subs	r2, r3, #1
 8000dc8:	603a      	str	r2, [r7, #0]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d1f4      	bne.n	8000db8 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 8000dce:	f7ff ff3d 	bl	8000c4c <SPI_RxByte>
	SPI_RxByte();
 8000dd2:	f7ff ff3b 	bl	8000c4c <SPI_RxByte>

	return TRUE;
 8000dd6:	2301      	movs	r3, #1
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	3710      	adds	r7, #16
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	200002ee 	.word	0x200002ee

08000de4 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b084      	sub	sp, #16
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
 8000dec:	460b      	mov	r3, r1
 8000dee:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8000df0:	2300      	movs	r3, #0
 8000df2:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8000df4:	f7ff ff54 	bl	8000ca0 <SD_ReadyWait>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2bff      	cmp	r3, #255	; 0xff
 8000dfc:	d001      	beq.n	8000e02 <SD_TxDataBlock+0x1e>
 8000dfe:	2300      	movs	r3, #0
 8000e00:	e02f      	b.n	8000e62 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8000e02:	78fb      	ldrb	r3, [r7, #3]
 8000e04:	4618      	mov	r0, r3
 8000e06:	f7ff feed 	bl	8000be4 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8000e0a:	78fb      	ldrb	r3, [r7, #3]
 8000e0c:	2bfd      	cmp	r3, #253	; 0xfd
 8000e0e:	d020      	beq.n	8000e52 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8000e10:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e14:	6878      	ldr	r0, [r7, #4]
 8000e16:	f7ff feff 	bl	8000c18 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8000e1a:	f7ff ff17 	bl	8000c4c <SPI_RxByte>
		SPI_RxByte();
 8000e1e:	f7ff ff15 	bl	8000c4c <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8000e22:	e00b      	b.n	8000e3c <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8000e24:	f7ff ff12 	bl	8000c4c <SPI_RxByte>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8000e2c:	7bfb      	ldrb	r3, [r7, #15]
 8000e2e:	f003 031f 	and.w	r3, r3, #31
 8000e32:	2b05      	cmp	r3, #5
 8000e34:	d006      	beq.n	8000e44 <SD_TxDataBlock+0x60>
			i++;
 8000e36:	7bbb      	ldrb	r3, [r7, #14]
 8000e38:	3301      	adds	r3, #1
 8000e3a:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8000e3c:	7bbb      	ldrb	r3, [r7, #14]
 8000e3e:	2b40      	cmp	r3, #64	; 0x40
 8000e40:	d9f0      	bls.n	8000e24 <SD_TxDataBlock+0x40>
 8000e42:	e000      	b.n	8000e46 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8000e44:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8000e46:	bf00      	nop
 8000e48:	f7ff ff00 	bl	8000c4c <SPI_RxByte>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d0fa      	beq.n	8000e48 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8000e52:	7bfb      	ldrb	r3, [r7, #15]
 8000e54:	f003 031f 	and.w	r3, r3, #31
 8000e58:	2b05      	cmp	r3, #5
 8000e5a:	d101      	bne.n	8000e60 <SD_TxDataBlock+0x7c>
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	e000      	b.n	8000e62 <SD_TxDataBlock+0x7e>

	return FALSE;
 8000e60:	2300      	movs	r3, #0
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	3710      	adds	r7, #16
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}

08000e6a <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8000e6a:	b580      	push	{r7, lr}
 8000e6c:	b084      	sub	sp, #16
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	4603      	mov	r3, r0
 8000e72:	6039      	str	r1, [r7, #0]
 8000e74:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8000e76:	f7ff ff13 	bl	8000ca0 <SD_ReadyWait>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2bff      	cmp	r3, #255	; 0xff
 8000e7e:	d001      	beq.n	8000e84 <SD_SendCmd+0x1a>
 8000e80:	23ff      	movs	r3, #255	; 0xff
 8000e82:	e042      	b.n	8000f0a <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8000e84:	79fb      	ldrb	r3, [r7, #7]
 8000e86:	4618      	mov	r0, r3
 8000e88:	f7ff feac 	bl	8000be4 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	0e1b      	lsrs	r3, r3, #24
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	4618      	mov	r0, r3
 8000e94:	f7ff fea6 	bl	8000be4 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	0c1b      	lsrs	r3, r3, #16
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f7ff fea0 	bl	8000be4 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	0a1b      	lsrs	r3, r3, #8
 8000ea8:	b2db      	uxtb	r3, r3
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f7ff fe9a 	bl	8000be4 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f7ff fe95 	bl	8000be4 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8000eba:	79fb      	ldrb	r3, [r7, #7]
 8000ebc:	2b40      	cmp	r3, #64	; 0x40
 8000ebe:	d102      	bne.n	8000ec6 <SD_SendCmd+0x5c>
 8000ec0:	2395      	movs	r3, #149	; 0x95
 8000ec2:	73fb      	strb	r3, [r7, #15]
 8000ec4:	e007      	b.n	8000ed6 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8000ec6:	79fb      	ldrb	r3, [r7, #7]
 8000ec8:	2b48      	cmp	r3, #72	; 0x48
 8000eca:	d102      	bne.n	8000ed2 <SD_SendCmd+0x68>
 8000ecc:	2387      	movs	r3, #135	; 0x87
 8000ece:	73fb      	strb	r3, [r7, #15]
 8000ed0:	e001      	b.n	8000ed6 <SD_SendCmd+0x6c>
	else crc = 1;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8000ed6:	7bfb      	ldrb	r3, [r7, #15]
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f7ff fe83 	bl	8000be4 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8000ede:	79fb      	ldrb	r3, [r7, #7]
 8000ee0:	2b4c      	cmp	r3, #76	; 0x4c
 8000ee2:	d101      	bne.n	8000ee8 <SD_SendCmd+0x7e>
 8000ee4:	f7ff feb2 	bl	8000c4c <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8000ee8:	230a      	movs	r3, #10
 8000eea:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8000eec:	f7ff feae 	bl	8000c4c <SPI_RxByte>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8000ef4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	da05      	bge.n	8000f08 <SD_SendCmd+0x9e>
 8000efc:	7bbb      	ldrb	r3, [r7, #14]
 8000efe:	3b01      	subs	r3, #1
 8000f00:	73bb      	strb	r3, [r7, #14]
 8000f02:	7bbb      	ldrb	r3, [r7, #14]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d1f1      	bne.n	8000eec <SD_SendCmd+0x82>

	return res;
 8000f08:	7b7b      	ldrb	r3, [r7, #13]
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3710      	adds	r7, #16
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
	...

08000f14 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8000f14:	b590      	push	{r4, r7, lr}
 8000f16:	b085      	sub	sp, #20
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8000f1e:	79fb      	ldrb	r3, [r7, #7]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <SD_disk_initialize+0x14>
 8000f24:	2301      	movs	r3, #1
 8000f26:	e0d1      	b.n	80010cc <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8000f28:	4b6a      	ldr	r3, [pc, #424]	; (80010d4 <SD_disk_initialize+0x1c0>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	f003 0302 	and.w	r3, r3, #2
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d003      	beq.n	8000f3e <SD_disk_initialize+0x2a>
 8000f36:	4b67      	ldr	r3, [pc, #412]	; (80010d4 <SD_disk_initialize+0x1c0>)
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	e0c6      	b.n	80010cc <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 8000f3e:	f7ff fec9 	bl	8000cd4 <SD_PowerOn>

	/* slave select */
	SELECT();
 8000f42:	f7ff fe2f 	bl	8000ba4 <SELECT>

	/* check disk type */
	type = 0;
 8000f46:	2300      	movs	r3, #0
 8000f48:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	2040      	movs	r0, #64	; 0x40
 8000f4e:	f7ff ff8c 	bl	8000e6a <SD_SendCmd>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b01      	cmp	r3, #1
 8000f56:	f040 80a1 	bne.w	800109c <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8000f5a:	4b5f      	ldr	r3, [pc, #380]	; (80010d8 <SD_disk_initialize+0x1c4>)
 8000f5c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f60:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000f62:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000f66:	2048      	movs	r0, #72	; 0x48
 8000f68:	f7ff ff7f 	bl	8000e6a <SD_SendCmd>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b01      	cmp	r3, #1
 8000f70:	d155      	bne.n	800101e <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8000f72:	2300      	movs	r3, #0
 8000f74:	73fb      	strb	r3, [r7, #15]
 8000f76:	e00c      	b.n	8000f92 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8000f78:	7bfc      	ldrb	r4, [r7, #15]
 8000f7a:	f7ff fe67 	bl	8000c4c <SPI_RxByte>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	461a      	mov	r2, r3
 8000f82:	f107 0310 	add.w	r3, r7, #16
 8000f86:	4423      	add	r3, r4
 8000f88:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8000f8c:	7bfb      	ldrb	r3, [r7, #15]
 8000f8e:	3301      	adds	r3, #1
 8000f90:	73fb      	strb	r3, [r7, #15]
 8000f92:	7bfb      	ldrb	r3, [r7, #15]
 8000f94:	2b03      	cmp	r3, #3
 8000f96:	d9ef      	bls.n	8000f78 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000f98:	7abb      	ldrb	r3, [r7, #10]
 8000f9a:	2b01      	cmp	r3, #1
 8000f9c:	d17e      	bne.n	800109c <SD_disk_initialize+0x188>
 8000f9e:	7afb      	ldrb	r3, [r7, #11]
 8000fa0:	2baa      	cmp	r3, #170	; 0xaa
 8000fa2:	d17b      	bne.n	800109c <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	2077      	movs	r0, #119	; 0x77
 8000fa8:	f7ff ff5f 	bl	8000e6a <SD_SendCmd>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b01      	cmp	r3, #1
 8000fb0:	d807      	bhi.n	8000fc2 <SD_disk_initialize+0xae>
 8000fb2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000fb6:	2069      	movs	r0, #105	; 0x69
 8000fb8:	f7ff ff57 	bl	8000e6a <SD_SendCmd>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d004      	beq.n	8000fcc <SD_disk_initialize+0xb8>
				} while (Timer1);
 8000fc2:	4b45      	ldr	r3, [pc, #276]	; (80010d8 <SD_disk_initialize+0x1c4>)
 8000fc4:	881b      	ldrh	r3, [r3, #0]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d1ec      	bne.n	8000fa4 <SD_disk_initialize+0x90>
 8000fca:	e000      	b.n	8000fce <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000fcc:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000fce:	4b42      	ldr	r3, [pc, #264]	; (80010d8 <SD_disk_initialize+0x1c4>)
 8000fd0:	881b      	ldrh	r3, [r3, #0]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d062      	beq.n	800109c <SD_disk_initialize+0x188>
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	207a      	movs	r0, #122	; 0x7a
 8000fda:	f7ff ff46 	bl	8000e6a <SD_SendCmd>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d15b      	bne.n	800109c <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	73fb      	strb	r3, [r7, #15]
 8000fe8:	e00c      	b.n	8001004 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 8000fea:	7bfc      	ldrb	r4, [r7, #15]
 8000fec:	f7ff fe2e 	bl	8000c4c <SPI_RxByte>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	f107 0310 	add.w	r3, r7, #16
 8000ff8:	4423      	add	r3, r4
 8000ffa:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8000ffe:	7bfb      	ldrb	r3, [r7, #15]
 8001000:	3301      	adds	r3, #1
 8001002:	73fb      	strb	r3, [r7, #15]
 8001004:	7bfb      	ldrb	r3, [r7, #15]
 8001006:	2b03      	cmp	r3, #3
 8001008:	d9ef      	bls.n	8000fea <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 800100a:	7a3b      	ldrb	r3, [r7, #8]
 800100c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <SD_disk_initialize+0x104>
 8001014:	230c      	movs	r3, #12
 8001016:	e000      	b.n	800101a <SD_disk_initialize+0x106>
 8001018:	2304      	movs	r3, #4
 800101a:	73bb      	strb	r3, [r7, #14]
 800101c:	e03e      	b.n	800109c <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 800101e:	2100      	movs	r1, #0
 8001020:	2077      	movs	r0, #119	; 0x77
 8001022:	f7ff ff22 	bl	8000e6a <SD_SendCmd>
 8001026:	4603      	mov	r3, r0
 8001028:	2b01      	cmp	r3, #1
 800102a:	d808      	bhi.n	800103e <SD_disk_initialize+0x12a>
 800102c:	2100      	movs	r1, #0
 800102e:	2069      	movs	r0, #105	; 0x69
 8001030:	f7ff ff1b 	bl	8000e6a <SD_SendCmd>
 8001034:	4603      	mov	r3, r0
 8001036:	2b01      	cmp	r3, #1
 8001038:	d801      	bhi.n	800103e <SD_disk_initialize+0x12a>
 800103a:	2302      	movs	r3, #2
 800103c:	e000      	b.n	8001040 <SD_disk_initialize+0x12c>
 800103e:	2301      	movs	r3, #1
 8001040:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8001042:	7bbb      	ldrb	r3, [r7, #14]
 8001044:	2b02      	cmp	r3, #2
 8001046:	d10e      	bne.n	8001066 <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8001048:	2100      	movs	r1, #0
 800104a:	2077      	movs	r0, #119	; 0x77
 800104c:	f7ff ff0d 	bl	8000e6a <SD_SendCmd>
 8001050:	4603      	mov	r3, r0
 8001052:	2b01      	cmp	r3, #1
 8001054:	d80e      	bhi.n	8001074 <SD_disk_initialize+0x160>
 8001056:	2100      	movs	r1, #0
 8001058:	2069      	movs	r0, #105	; 0x69
 800105a:	f7ff ff06 	bl	8000e6a <SD_SendCmd>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d107      	bne.n	8001074 <SD_disk_initialize+0x160>
 8001064:	e00c      	b.n	8001080 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001066:	2100      	movs	r1, #0
 8001068:	2041      	movs	r0, #65	; 0x41
 800106a:	f7ff fefe 	bl	8000e6a <SD_SendCmd>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d004      	beq.n	800107e <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8001074:	4b18      	ldr	r3, [pc, #96]	; (80010d8 <SD_disk_initialize+0x1c4>)
 8001076:	881b      	ldrh	r3, [r3, #0]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d1e2      	bne.n	8001042 <SD_disk_initialize+0x12e>
 800107c:	e000      	b.n	8001080 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800107e:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8001080:	4b15      	ldr	r3, [pc, #84]	; (80010d8 <SD_disk_initialize+0x1c4>)
 8001082:	881b      	ldrh	r3, [r3, #0]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d007      	beq.n	8001098 <SD_disk_initialize+0x184>
 8001088:	f44f 7100 	mov.w	r1, #512	; 0x200
 800108c:	2050      	movs	r0, #80	; 0x50
 800108e:	f7ff feec 	bl	8000e6a <SD_SendCmd>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <SD_disk_initialize+0x188>
 8001098:	2300      	movs	r3, #0
 800109a:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 800109c:	4a0f      	ldr	r2, [pc, #60]	; (80010dc <SD_disk_initialize+0x1c8>)
 800109e:	7bbb      	ldrb	r3, [r7, #14]
 80010a0:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 80010a2:	f7ff fd8f 	bl	8000bc4 <DESELECT>
	SPI_RxByte();
 80010a6:	f7ff fdd1 	bl	8000c4c <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 80010aa:	7bbb      	ldrb	r3, [r7, #14]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d008      	beq.n	80010c2 <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 80010b0:	4b08      	ldr	r3, [pc, #32]	; (80010d4 <SD_disk_initialize+0x1c0>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	f023 0301 	bic.w	r3, r3, #1
 80010ba:	b2da      	uxtb	r2, r3
 80010bc:	4b05      	ldr	r3, [pc, #20]	; (80010d4 <SD_disk_initialize+0x1c0>)
 80010be:	701a      	strb	r2, [r3, #0]
 80010c0:	e001      	b.n	80010c6 <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 80010c2:	f7ff fe49 	bl	8000d58 <SD_PowerOff>
	}

	return Stat;
 80010c6:	4b03      	ldr	r3, [pc, #12]	; (80010d4 <SD_disk_initialize+0x1c0>)
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	b2db      	uxtb	r3, r3
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3714      	adds	r7, #20
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd90      	pop	{r4, r7, pc}
 80010d4:	20000000 	.word	0x20000000
 80010d8:	200002ee 	.word	0x200002ee
 80010dc:	200000a4 	.word	0x200000a4

080010e0 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 80010ea:	79fb      	ldrb	r3, [r7, #7]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <SD_disk_status+0x14>
 80010f0:	2301      	movs	r3, #1
 80010f2:	e002      	b.n	80010fa <SD_disk_status+0x1a>
	return Stat;
 80010f4:	4b04      	ldr	r3, [pc, #16]	; (8001108 <SD_disk_status+0x28>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	b2db      	uxtb	r3, r3
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	370c      	adds	r7, #12
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	20000000 	.word	0x20000000

0800110c <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
 8001112:	60b9      	str	r1, [r7, #8]
 8001114:	607a      	str	r2, [r7, #4]
 8001116:	603b      	str	r3, [r7, #0]
 8001118:	4603      	mov	r3, r0
 800111a:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 800111c:	7bfb      	ldrb	r3, [r7, #15]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d102      	bne.n	8001128 <SD_disk_read+0x1c>
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d101      	bne.n	800112c <SD_disk_read+0x20>
 8001128:	2304      	movs	r3, #4
 800112a:	e051      	b.n	80011d0 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 800112c:	4b2a      	ldr	r3, [pc, #168]	; (80011d8 <SD_disk_read+0xcc>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	b2db      	uxtb	r3, r3
 8001132:	f003 0301 	and.w	r3, r3, #1
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <SD_disk_read+0x32>
 800113a:	2303      	movs	r3, #3
 800113c:	e048      	b.n	80011d0 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 800113e:	4b27      	ldr	r3, [pc, #156]	; (80011dc <SD_disk_read+0xd0>)
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	f003 0304 	and.w	r3, r3, #4
 8001146:	2b00      	cmp	r3, #0
 8001148:	d102      	bne.n	8001150 <SD_disk_read+0x44>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	025b      	lsls	r3, r3, #9
 800114e:	607b      	str	r3, [r7, #4]

	SELECT();
 8001150:	f7ff fd28 	bl	8000ba4 <SELECT>

	if (count == 1)
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	2b01      	cmp	r3, #1
 8001158:	d111      	bne.n	800117e <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 800115a:	6879      	ldr	r1, [r7, #4]
 800115c:	2051      	movs	r0, #81	; 0x51
 800115e:	f7ff fe84 	bl	8000e6a <SD_SendCmd>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d129      	bne.n	80011bc <SD_disk_read+0xb0>
 8001168:	f44f 7100 	mov.w	r1, #512	; 0x200
 800116c:	68b8      	ldr	r0, [r7, #8]
 800116e:	f7ff fe0b 	bl	8000d88 <SD_RxDataBlock>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d021      	beq.n	80011bc <SD_disk_read+0xb0>
 8001178:	2300      	movs	r3, #0
 800117a:	603b      	str	r3, [r7, #0]
 800117c:	e01e      	b.n	80011bc <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 800117e:	6879      	ldr	r1, [r7, #4]
 8001180:	2052      	movs	r0, #82	; 0x52
 8001182:	f7ff fe72 	bl	8000e6a <SD_SendCmd>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d117      	bne.n	80011bc <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 800118c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001190:	68b8      	ldr	r0, [r7, #8]
 8001192:	f7ff fdf9 	bl	8000d88 <SD_RxDataBlock>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d00a      	beq.n	80011b2 <SD_disk_read+0xa6>
				buff += 512;
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80011a2:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	3b01      	subs	r3, #1
 80011a8:	603b      	str	r3, [r7, #0]
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d1ed      	bne.n	800118c <SD_disk_read+0x80>
 80011b0:	e000      	b.n	80011b4 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 80011b2:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 80011b4:	2100      	movs	r1, #0
 80011b6:	204c      	movs	r0, #76	; 0x4c
 80011b8:	f7ff fe57 	bl	8000e6a <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 80011bc:	f7ff fd02 	bl	8000bc4 <DESELECT>
	SPI_RxByte();
 80011c0:	f7ff fd44 	bl	8000c4c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	bf14      	ite	ne
 80011ca:	2301      	movne	r3, #1
 80011cc:	2300      	moveq	r3, #0
 80011ce:	b2db      	uxtb	r3, r3
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	3710      	adds	r7, #16
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	20000000 	.word	0x20000000
 80011dc:	200000a4 	.word	0x200000a4

080011e0 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	60b9      	str	r1, [r7, #8]
 80011e8:	607a      	str	r2, [r7, #4]
 80011ea:	603b      	str	r3, [r7, #0]
 80011ec:	4603      	mov	r3, r0
 80011ee:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80011f0:	7bfb      	ldrb	r3, [r7, #15]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d102      	bne.n	80011fc <SD_disk_write+0x1c>
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d101      	bne.n	8001200 <SD_disk_write+0x20>
 80011fc:	2304      	movs	r3, #4
 80011fe:	e06b      	b.n	80012d8 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001200:	4b37      	ldr	r3, [pc, #220]	; (80012e0 <SD_disk_write+0x100>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	b2db      	uxtb	r3, r3
 8001206:	f003 0301 	and.w	r3, r3, #1
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <SD_disk_write+0x32>
 800120e:	2303      	movs	r3, #3
 8001210:	e062      	b.n	80012d8 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8001212:	4b33      	ldr	r3, [pc, #204]	; (80012e0 <SD_disk_write+0x100>)
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	b2db      	uxtb	r3, r3
 8001218:	f003 0304 	and.w	r3, r3, #4
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <SD_disk_write+0x44>
 8001220:	2302      	movs	r3, #2
 8001222:	e059      	b.n	80012d8 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001224:	4b2f      	ldr	r3, [pc, #188]	; (80012e4 <SD_disk_write+0x104>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	f003 0304 	and.w	r3, r3, #4
 800122c:	2b00      	cmp	r3, #0
 800122e:	d102      	bne.n	8001236 <SD_disk_write+0x56>
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	025b      	lsls	r3, r3, #9
 8001234:	607b      	str	r3, [r7, #4]

	SELECT();
 8001236:	f7ff fcb5 	bl	8000ba4 <SELECT>

	if (count == 1)
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	2b01      	cmp	r3, #1
 800123e:	d110      	bne.n	8001262 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001240:	6879      	ldr	r1, [r7, #4]
 8001242:	2058      	movs	r0, #88	; 0x58
 8001244:	f7ff fe11 	bl	8000e6a <SD_SendCmd>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d13a      	bne.n	80012c4 <SD_disk_write+0xe4>
 800124e:	21fe      	movs	r1, #254	; 0xfe
 8001250:	68b8      	ldr	r0, [r7, #8]
 8001252:	f7ff fdc7 	bl	8000de4 <SD_TxDataBlock>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d033      	beq.n	80012c4 <SD_disk_write+0xe4>
			count = 0;
 800125c:	2300      	movs	r3, #0
 800125e:	603b      	str	r3, [r7, #0]
 8001260:	e030      	b.n	80012c4 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8001262:	4b20      	ldr	r3, [pc, #128]	; (80012e4 <SD_disk_write+0x104>)
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	f003 0302 	and.w	r3, r3, #2
 800126a:	2b00      	cmp	r3, #0
 800126c:	d007      	beq.n	800127e <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 800126e:	2100      	movs	r1, #0
 8001270:	2077      	movs	r0, #119	; 0x77
 8001272:	f7ff fdfa 	bl	8000e6a <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8001276:	6839      	ldr	r1, [r7, #0]
 8001278:	2057      	movs	r0, #87	; 0x57
 800127a:	f7ff fdf6 	bl	8000e6a <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 800127e:	6879      	ldr	r1, [r7, #4]
 8001280:	2059      	movs	r0, #89	; 0x59
 8001282:	f7ff fdf2 	bl	8000e6a <SD_SendCmd>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d11b      	bne.n	80012c4 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 800128c:	21fc      	movs	r1, #252	; 0xfc
 800128e:	68b8      	ldr	r0, [r7, #8]
 8001290:	f7ff fda8 	bl	8000de4 <SD_TxDataBlock>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d00a      	beq.n	80012b0 <SD_disk_write+0xd0>
				buff += 512;
 800129a:	68bb      	ldr	r3, [r7, #8]
 800129c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80012a0:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	3b01      	subs	r3, #1
 80012a6:	603b      	str	r3, [r7, #0]
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d1ee      	bne.n	800128c <SD_disk_write+0xac>
 80012ae:	e000      	b.n	80012b2 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80012b0:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 80012b2:	21fd      	movs	r1, #253	; 0xfd
 80012b4:	2000      	movs	r0, #0
 80012b6:	f7ff fd95 	bl	8000de4 <SD_TxDataBlock>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d101      	bne.n	80012c4 <SD_disk_write+0xe4>
			{
				count = 1;
 80012c0:	2301      	movs	r3, #1
 80012c2:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 80012c4:	f7ff fc7e 	bl	8000bc4 <DESELECT>
	SPI_RxByte();
 80012c8:	f7ff fcc0 	bl	8000c4c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	bf14      	ite	ne
 80012d2:	2301      	movne	r3, #1
 80012d4:	2300      	moveq	r3, #0
 80012d6:	b2db      	uxtb	r3, r3
}
 80012d8:	4618      	mov	r0, r3
 80012da:	3710      	adds	r7, #16
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	20000000 	.word	0x20000000
 80012e4:	200000a4 	.word	0x200000a4

080012e8 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 80012e8:	b590      	push	{r4, r7, lr}
 80012ea:	b08b      	sub	sp, #44	; 0x2c
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4603      	mov	r3, r0
 80012f0:	603a      	str	r2, [r7, #0]
 80012f2:	71fb      	strb	r3, [r7, #7]
 80012f4:	460b      	mov	r3, r1
 80012f6:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 80012fc:	79fb      	ldrb	r3, [r7, #7]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <SD_disk_ioctl+0x1e>
 8001302:	2304      	movs	r3, #4
 8001304:	e115      	b.n	8001532 <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 800130c:	79bb      	ldrb	r3, [r7, #6]
 800130e:	2b05      	cmp	r3, #5
 8001310:	d124      	bne.n	800135c <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8001312:	6a3b      	ldr	r3, [r7, #32]
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	2b02      	cmp	r3, #2
 8001318:	d012      	beq.n	8001340 <SD_disk_ioctl+0x58>
 800131a:	2b02      	cmp	r3, #2
 800131c:	dc1a      	bgt.n	8001354 <SD_disk_ioctl+0x6c>
 800131e:	2b00      	cmp	r3, #0
 8001320:	d002      	beq.n	8001328 <SD_disk_ioctl+0x40>
 8001322:	2b01      	cmp	r3, #1
 8001324:	d006      	beq.n	8001334 <SD_disk_ioctl+0x4c>
 8001326:	e015      	b.n	8001354 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8001328:	f7ff fd16 	bl	8000d58 <SD_PowerOff>
			res = RES_OK;
 800132c:	2300      	movs	r3, #0
 800132e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001332:	e0fc      	b.n	800152e <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8001334:	f7ff fcce 	bl	8000cd4 <SD_PowerOn>
			res = RES_OK;
 8001338:	2300      	movs	r3, #0
 800133a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800133e:	e0f6      	b.n	800152e <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8001340:	6a3b      	ldr	r3, [r7, #32]
 8001342:	1c5c      	adds	r4, r3, #1
 8001344:	f7ff fd14 	bl	8000d70 <SD_CheckPower>
 8001348:	4603      	mov	r3, r0
 800134a:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 800134c:	2300      	movs	r3, #0
 800134e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001352:	e0ec      	b.n	800152e <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8001354:	2304      	movs	r3, #4
 8001356:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800135a:	e0e8      	b.n	800152e <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 800135c:	4b77      	ldr	r3, [pc, #476]	; (800153c <SD_disk_ioctl+0x254>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	b2db      	uxtb	r3, r3
 8001362:	f003 0301 	and.w	r3, r3, #1
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <SD_disk_ioctl+0x86>
 800136a:	2303      	movs	r3, #3
 800136c:	e0e1      	b.n	8001532 <SD_disk_ioctl+0x24a>

		SELECT();
 800136e:	f7ff fc19 	bl	8000ba4 <SELECT>

		switch (ctrl)
 8001372:	79bb      	ldrb	r3, [r7, #6]
 8001374:	2b0d      	cmp	r3, #13
 8001376:	f200 80cb 	bhi.w	8001510 <SD_disk_ioctl+0x228>
 800137a:	a201      	add	r2, pc, #4	; (adr r2, 8001380 <SD_disk_ioctl+0x98>)
 800137c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001380:	0800147b 	.word	0x0800147b
 8001384:	080013b9 	.word	0x080013b9
 8001388:	0800146b 	.word	0x0800146b
 800138c:	08001511 	.word	0x08001511
 8001390:	08001511 	.word	0x08001511
 8001394:	08001511 	.word	0x08001511
 8001398:	08001511 	.word	0x08001511
 800139c:	08001511 	.word	0x08001511
 80013a0:	08001511 	.word	0x08001511
 80013a4:	08001511 	.word	0x08001511
 80013a8:	08001511 	.word	0x08001511
 80013ac:	0800148d 	.word	0x0800148d
 80013b0:	080014b1 	.word	0x080014b1
 80013b4:	080014d5 	.word	0x080014d5
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80013b8:	2100      	movs	r1, #0
 80013ba:	2049      	movs	r0, #73	; 0x49
 80013bc:	f7ff fd55 	bl	8000e6a <SD_SendCmd>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	f040 80a8 	bne.w	8001518 <SD_disk_ioctl+0x230>
 80013c8:	f107 030c 	add.w	r3, r7, #12
 80013cc:	2110      	movs	r1, #16
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7ff fcda 	bl	8000d88 <SD_RxDataBlock>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	f000 809e 	beq.w	8001518 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 80013dc:	7b3b      	ldrb	r3, [r7, #12]
 80013de:	099b      	lsrs	r3, r3, #6
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d10e      	bne.n	8001404 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80013e6:	7d7b      	ldrb	r3, [r7, #21]
 80013e8:	b29a      	uxth	r2, r3
 80013ea:	7d3b      	ldrb	r3, [r7, #20]
 80013ec:	b29b      	uxth	r3, r3
 80013ee:	021b      	lsls	r3, r3, #8
 80013f0:	b29b      	uxth	r3, r3
 80013f2:	4413      	add	r3, r2
 80013f4:	b29b      	uxth	r3, r3
 80013f6:	3301      	adds	r3, #1
 80013f8:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 80013fa:	8bfb      	ldrh	r3, [r7, #30]
 80013fc:	029a      	lsls	r2, r3, #10
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	601a      	str	r2, [r3, #0]
 8001402:	e02e      	b.n	8001462 <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001404:	7c7b      	ldrb	r3, [r7, #17]
 8001406:	f003 030f 	and.w	r3, r3, #15
 800140a:	b2da      	uxtb	r2, r3
 800140c:	7dbb      	ldrb	r3, [r7, #22]
 800140e:	09db      	lsrs	r3, r3, #7
 8001410:	b2db      	uxtb	r3, r3
 8001412:	4413      	add	r3, r2
 8001414:	b2da      	uxtb	r2, r3
 8001416:	7d7b      	ldrb	r3, [r7, #21]
 8001418:	005b      	lsls	r3, r3, #1
 800141a:	b2db      	uxtb	r3, r3
 800141c:	f003 0306 	and.w	r3, r3, #6
 8001420:	b2db      	uxtb	r3, r3
 8001422:	4413      	add	r3, r2
 8001424:	b2db      	uxtb	r3, r3
 8001426:	3302      	adds	r3, #2
 8001428:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 800142c:	7d3b      	ldrb	r3, [r7, #20]
 800142e:	099b      	lsrs	r3, r3, #6
 8001430:	b2db      	uxtb	r3, r3
 8001432:	b29a      	uxth	r2, r3
 8001434:	7cfb      	ldrb	r3, [r7, #19]
 8001436:	b29b      	uxth	r3, r3
 8001438:	009b      	lsls	r3, r3, #2
 800143a:	b29b      	uxth	r3, r3
 800143c:	4413      	add	r3, r2
 800143e:	b29a      	uxth	r2, r3
 8001440:	7cbb      	ldrb	r3, [r7, #18]
 8001442:	029b      	lsls	r3, r3, #10
 8001444:	b29b      	uxth	r3, r3
 8001446:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800144a:	b29b      	uxth	r3, r3
 800144c:	4413      	add	r3, r2
 800144e:	b29b      	uxth	r3, r3
 8001450:	3301      	adds	r3, #1
 8001452:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8001454:	8bfa      	ldrh	r2, [r7, #30]
 8001456:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800145a:	3b09      	subs	r3, #9
 800145c:	409a      	lsls	r2, r3
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8001462:	2300      	movs	r3, #0
 8001464:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8001468:	e056      	b.n	8001518 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001470:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8001472:	2300      	movs	r3, #0
 8001474:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001478:	e055      	b.n	8001526 <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 800147a:	f7ff fc11 	bl	8000ca0 <SD_ReadyWait>
 800147e:	4603      	mov	r3, r0
 8001480:	2bff      	cmp	r3, #255	; 0xff
 8001482:	d14b      	bne.n	800151c <SD_disk_ioctl+0x234>
 8001484:	2300      	movs	r3, #0
 8001486:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800148a:	e047      	b.n	800151c <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 800148c:	2100      	movs	r1, #0
 800148e:	2049      	movs	r0, #73	; 0x49
 8001490:	f7ff fceb 	bl	8000e6a <SD_SendCmd>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d142      	bne.n	8001520 <SD_disk_ioctl+0x238>
 800149a:	2110      	movs	r1, #16
 800149c:	6a38      	ldr	r0, [r7, #32]
 800149e:	f7ff fc73 	bl	8000d88 <SD_RxDataBlock>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d03b      	beq.n	8001520 <SD_disk_ioctl+0x238>
 80014a8:	2300      	movs	r3, #0
 80014aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80014ae:	e037      	b.n	8001520 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80014b0:	2100      	movs	r1, #0
 80014b2:	204a      	movs	r0, #74	; 0x4a
 80014b4:	f7ff fcd9 	bl	8000e6a <SD_SendCmd>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d132      	bne.n	8001524 <SD_disk_ioctl+0x23c>
 80014be:	2110      	movs	r1, #16
 80014c0:	6a38      	ldr	r0, [r7, #32]
 80014c2:	f7ff fc61 	bl	8000d88 <SD_RxDataBlock>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d02b      	beq.n	8001524 <SD_disk_ioctl+0x23c>
 80014cc:	2300      	movs	r3, #0
 80014ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80014d2:	e027      	b.n	8001524 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 80014d4:	2100      	movs	r1, #0
 80014d6:	207a      	movs	r0, #122	; 0x7a
 80014d8:	f7ff fcc7 	bl	8000e6a <SD_SendCmd>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d116      	bne.n	8001510 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 80014e2:	2300      	movs	r3, #0
 80014e4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80014e8:	e00b      	b.n	8001502 <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 80014ea:	6a3c      	ldr	r4, [r7, #32]
 80014ec:	1c63      	adds	r3, r4, #1
 80014ee:	623b      	str	r3, [r7, #32]
 80014f0:	f7ff fbac 	bl	8000c4c <SPI_RxByte>
 80014f4:	4603      	mov	r3, r0
 80014f6:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 80014f8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80014fc:	3301      	adds	r3, #1
 80014fe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001502:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001506:	2b03      	cmp	r3, #3
 8001508:	d9ef      	bls.n	80014ea <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 800150a:	2300      	movs	r3, #0
 800150c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8001510:	2304      	movs	r3, #4
 8001512:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001516:	e006      	b.n	8001526 <SD_disk_ioctl+0x23e>
			break;
 8001518:	bf00      	nop
 800151a:	e004      	b.n	8001526 <SD_disk_ioctl+0x23e>
			break;
 800151c:	bf00      	nop
 800151e:	e002      	b.n	8001526 <SD_disk_ioctl+0x23e>
			break;
 8001520:	bf00      	nop
 8001522:	e000      	b.n	8001526 <SD_disk_ioctl+0x23e>
			break;
 8001524:	bf00      	nop
		}

		DESELECT();
 8001526:	f7ff fb4d 	bl	8000bc4 <DESELECT>
		SPI_RxByte();
 800152a:	f7ff fb8f 	bl	8000c4c <SPI_RxByte>
	}

	return res;
 800152e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001532:	4618      	mov	r0, r3
 8001534:	372c      	adds	r7, #44	; 0x2c
 8001536:	46bd      	mov	sp, r7
 8001538:	bd90      	pop	{r4, r7, pc}
 800153a:	bf00      	nop
 800153c:	20000000 	.word	0x20000000

08001540 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b088      	sub	sp, #32
 8001544:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001546:	f107 030c 	add.w	r3, r7, #12
 800154a:	2200      	movs	r2, #0
 800154c:	601a      	str	r2, [r3, #0]
 800154e:	605a      	str	r2, [r3, #4]
 8001550:	609a      	str	r2, [r3, #8]
 8001552:	60da      	str	r2, [r3, #12]
 8001554:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001556:	2300      	movs	r3, #0
 8001558:	60bb      	str	r3, [r7, #8]
 800155a:	4b35      	ldr	r3, [pc, #212]	; (8001630 <MX_GPIO_Init+0xf0>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155e:	4a34      	ldr	r2, [pc, #208]	; (8001630 <MX_GPIO_Init+0xf0>)
 8001560:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001564:	6313      	str	r3, [r2, #48]	; 0x30
 8001566:	4b32      	ldr	r3, [pc, #200]	; (8001630 <MX_GPIO_Init+0xf0>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800156e:	60bb      	str	r3, [r7, #8]
 8001570:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001572:	2300      	movs	r3, #0
 8001574:	607b      	str	r3, [r7, #4]
 8001576:	4b2e      	ldr	r3, [pc, #184]	; (8001630 <MX_GPIO_Init+0xf0>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157a:	4a2d      	ldr	r2, [pc, #180]	; (8001630 <MX_GPIO_Init+0xf0>)
 800157c:	f043 0302 	orr.w	r3, r3, #2
 8001580:	6313      	str	r3, [r2, #48]	; 0x30
 8001582:	4b2b      	ldr	r3, [pc, #172]	; (8001630 <MX_GPIO_Init+0xf0>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001586:	f003 0302 	and.w	r3, r3, #2
 800158a:	607b      	str	r3, [r7, #4]
 800158c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800158e:	2300      	movs	r3, #0
 8001590:	603b      	str	r3, [r7, #0]
 8001592:	4b27      	ldr	r3, [pc, #156]	; (8001630 <MX_GPIO_Init+0xf0>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001596:	4a26      	ldr	r2, [pc, #152]	; (8001630 <MX_GPIO_Init+0xf0>)
 8001598:	f043 0308 	orr.w	r3, r3, #8
 800159c:	6313      	str	r3, [r2, #48]	; 0x30
 800159e:	4b24      	ldr	r3, [pc, #144]	; (8001630 <MX_GPIO_Init+0xf0>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a2:	f003 0308 	and.w	r3, r3, #8
 80015a6:	603b      	str	r3, [r7, #0]
 80015a8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 80015aa:	2201      	movs	r2, #1
 80015ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015b0:	4820      	ldr	r0, [pc, #128]	; (8001634 <MX_GPIO_Init+0xf4>)
 80015b2:	f001 fa41 	bl	8002a38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80015b6:	2200      	movs	r2, #0
 80015b8:	2180      	movs	r1, #128	; 0x80
 80015ba:	481f      	ldr	r0, [pc, #124]	; (8001638 <MX_GPIO_Init+0xf8>)
 80015bc:	f001 fa3c 	bl	8002a38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 80015c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015c6:	2301      	movs	r3, #1
 80015c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ca:	2300      	movs	r3, #0
 80015cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80015ce:	2301      	movs	r3, #1
 80015d0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 80015d2:	f107 030c 	add.w	r3, r7, #12
 80015d6:	4619      	mov	r1, r3
 80015d8:	4816      	ldr	r0, [pc, #88]	; (8001634 <MX_GPIO_Init+0xf4>)
 80015da:	f001 f869 	bl	80026b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80015de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015e4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80015e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015ea:	2301      	movs	r3, #1
 80015ec:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015ee:	f107 030c 	add.w	r3, r7, #12
 80015f2:	4619      	mov	r1, r3
 80015f4:	480f      	ldr	r0, [pc, #60]	; (8001634 <MX_GPIO_Init+0xf4>)
 80015f6:	f001 f85b 	bl	80026b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80015fa:	2380      	movs	r3, #128	; 0x80
 80015fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015fe:	2301      	movs	r3, #1
 8001600:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001602:	2300      	movs	r3, #0
 8001604:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001606:	2300      	movs	r3, #0
 8001608:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800160a:	f107 030c 	add.w	r3, r7, #12
 800160e:	4619      	mov	r1, r3
 8001610:	4809      	ldr	r0, [pc, #36]	; (8001638 <MX_GPIO_Init+0xf8>)
 8001612:	f001 f84d 	bl	80026b0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001616:	2200      	movs	r2, #0
 8001618:	2100      	movs	r1, #0
 800161a:	2028      	movs	r0, #40	; 0x28
 800161c:	f000 ff73 	bl	8002506 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001620:	2028      	movs	r0, #40	; 0x28
 8001622:	f000 ff8c 	bl	800253e <HAL_NVIC_EnableIRQ>

}
 8001626:	bf00      	nop
 8001628:	3720      	adds	r7, #32
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	40023800 	.word	0x40023800
 8001634:	40020c00 	.word	0x40020c00
 8001638:	40020400 	.word	0x40020400

0800163c <_write>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
int _write(int file, char* p, int len)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	60f8      	str	r0, [r7, #12]
 8001644:	60b9      	str	r1, [r7, #8]
 8001646:	607a      	str	r2, [r7, #4]
	if(HAL_UART_Transmit(&huart3, (uint8_t*)p, len, 10)==HAL_OK) return len;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	b29a      	uxth	r2, r3
 800164c:	230a      	movs	r3, #10
 800164e:	68b9      	ldr	r1, [r7, #8]
 8001650:	4806      	ldr	r0, [pc, #24]	; (800166c <_write+0x30>)
 8001652:	f002 fe3a 	bl	80042ca <HAL_UART_Transmit>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d101      	bne.n	8001660 <_write+0x24>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	e000      	b.n	8001662 <_write+0x26>
	else return 0;
 8001660:	2300      	movs	r3, #0
}
 8001662:	4618      	mov	r0, r3
 8001664:	3710      	adds	r7, #16
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	200024a8 	.word	0x200024a8

08001670 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001670:	b590      	push	{r4, r7, lr}
 8001672:	b087      	sub	sp, #28
 8001674:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001676:	f000 fdd5 	bl	8002224 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800167a:	f000 f839 	bl	80016f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800167e:	f7ff ff5f 	bl	8001540 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001682:	f000 fd2b 	bl	80020dc <MX_USART3_UART_Init>
  MX_FATFS_Init();
 8001686:	f003 fd3b 	bl	8005100 <MX_FATFS_Init>
  MX_SPI2_Init();
 800168a:	f000 fb29 	bl	8001ce0 <MX_SPI2_Init>
  MX_TIM7_Init();
 800168e:	f000 fcc7 	bl	8002020 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */


  /* Wait for SD module reset */
  HAL_Delay(1000);
 8001692:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001696:	f000 fe37 	bl	8002308 <HAL_Delay>
  //saveFile();
  printf("-----------Start_Program------------\r\n");
 800169a:	4811      	ldr	r0, [pc, #68]	; (80016e0 <main+0x70>)
 800169c:	f007 f9de 	bl	8008a5c <puts>
  MountSD();
 80016a0:	f000 f896 	bl	80017d0 <MountSD>
  CheckSize();
 80016a4:	f000 f930 	bl	8001908 <CheckSize>
  char* fileName = "log-file.txt";
 80016a8:	4b0e      	ldr	r3, [pc, #56]	; (80016e4 <main+0x74>)
 80016aa:	617b      	str	r3, [r7, #20]
  OpenFile(fileName);
 80016ac:	6978      	ldr	r0, [r7, #20]
 80016ae:	f000 f8d5 	bl	800185c <OpenFile>
  char text[20] = "Write and Read!";
 80016b2:	4b0d      	ldr	r3, [pc, #52]	; (80016e8 <main+0x78>)
 80016b4:	463c      	mov	r4, r7
 80016b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80016bc:	2300      	movs	r3, #0
 80016be:	613b      	str	r3, [r7, #16]

  WriteFile(text);
 80016c0:	463b      	mov	r3, r7
 80016c2:	4618      	mov	r0, r3
 80016c4:	f000 f996 	bl	80019f4 <WriteFile>
  //CloseFile();

  ReadFile(fileName);
 80016c8:	6978      	ldr	r0, [r7, #20]
 80016ca:	f000 fa1b 	bl	8001b04 <ReadFile>
  CloseFile();
 80016ce:	f000 f8f3 	bl	80018b8 <CloseFile>
  UnMountSD();
 80016d2:	f000 f8a3 	bl	800181c <UnMountSD>
  printf("------------End_Program-------------\r\n");
 80016d6:	4805      	ldr	r0, [pc, #20]	; (80016ec <main+0x7c>)
 80016d8:	f007 f9c0 	bl	8008a5c <puts>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80016dc:	e7fe      	b.n	80016dc <main+0x6c>
 80016de:	bf00      	nop
 80016e0:	08009ca4 	.word	0x08009ca4
 80016e4:	08009ccc 	.word	0x08009ccc
 80016e8:	08009d04 	.word	0x08009d04
 80016ec:	08009cdc 	.word	0x08009cdc

080016f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b094      	sub	sp, #80	; 0x50
 80016f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016f6:	f107 0320 	add.w	r3, r7, #32
 80016fa:	2230      	movs	r2, #48	; 0x30
 80016fc:	2100      	movs	r1, #0
 80016fe:	4618      	mov	r0, r3
 8001700:	f007 f91e 	bl	8008940 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001704:	f107 030c 	add.w	r3, r7, #12
 8001708:	2200      	movs	r2, #0
 800170a:	601a      	str	r2, [r3, #0]
 800170c:	605a      	str	r2, [r3, #4]
 800170e:	609a      	str	r2, [r3, #8]
 8001710:	60da      	str	r2, [r3, #12]
 8001712:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001714:	2300      	movs	r3, #0
 8001716:	60bb      	str	r3, [r7, #8]
 8001718:	4b2b      	ldr	r3, [pc, #172]	; (80017c8 <SystemClock_Config+0xd8>)
 800171a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171c:	4a2a      	ldr	r2, [pc, #168]	; (80017c8 <SystemClock_Config+0xd8>)
 800171e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001722:	6413      	str	r3, [r2, #64]	; 0x40
 8001724:	4b28      	ldr	r3, [pc, #160]	; (80017c8 <SystemClock_Config+0xd8>)
 8001726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001728:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800172c:	60bb      	str	r3, [r7, #8]
 800172e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001730:	2300      	movs	r3, #0
 8001732:	607b      	str	r3, [r7, #4]
 8001734:	4b25      	ldr	r3, [pc, #148]	; (80017cc <SystemClock_Config+0xdc>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a24      	ldr	r2, [pc, #144]	; (80017cc <SystemClock_Config+0xdc>)
 800173a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800173e:	6013      	str	r3, [r2, #0]
 8001740:	4b22      	ldr	r3, [pc, #136]	; (80017cc <SystemClock_Config+0xdc>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001748:	607b      	str	r3, [r7, #4]
 800174a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800174c:	2301      	movs	r3, #1
 800174e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001750:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001754:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001756:	2302      	movs	r3, #2
 8001758:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800175a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800175e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001760:	2304      	movs	r3, #4
 8001762:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001764:	23b4      	movs	r3, #180	; 0xb4
 8001766:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001768:	2302      	movs	r3, #2
 800176a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800176c:	2308      	movs	r3, #8
 800176e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001770:	f107 0320 	add.w	r3, r7, #32
 8001774:	4618      	mov	r0, r3
 8001776:	f001 f9fb 	bl	8002b70 <HAL_RCC_OscConfig>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001780:	f000 faa8 	bl	8001cd4 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001784:	f001 f9a4 	bl	8002ad0 <HAL_PWREx_EnableOverDrive>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800178e:	f000 faa1 	bl	8001cd4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001792:	230f      	movs	r3, #15
 8001794:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001796:	2302      	movs	r3, #2
 8001798:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800179a:	2300      	movs	r3, #0
 800179c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800179e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80017a2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80017a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017a8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80017aa:	f107 030c 	add.w	r3, r7, #12
 80017ae:	2105      	movs	r1, #5
 80017b0:	4618      	mov	r0, r3
 80017b2:	f001 fc55 	bl	8003060 <HAL_RCC_ClockConfig>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80017bc:	f000 fa8a 	bl	8001cd4 <Error_Handler>
  }
}
 80017c0:	bf00      	nop
 80017c2:	3750      	adds	r7, #80	; 0x50
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	40023800 	.word	0x40023800
 80017cc:	40007000 	.word	0x40007000

080017d0 <MountSD>:

/* USER CODE BEGIN 4 */

void MountSD(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
	fres = f_mount(&fs, "", 0);
 80017d4:	2200      	movs	r2, #0
 80017d6:	490c      	ldr	r1, [pc, #48]	; (8001808 <MountSD+0x38>)
 80017d8:	480c      	ldr	r0, [pc, #48]	; (800180c <MountSD+0x3c>)
 80017da:	f005 fedf 	bl	800759c <f_mount>
 80017de:	4603      	mov	r3, r0
 80017e0:	461a      	mov	r2, r3
 80017e2:	4b0b      	ldr	r3, [pc, #44]	; (8001810 <MountSD+0x40>)
 80017e4:	701a      	strb	r2, [r3, #0]
	if (fres == FR_OK) {
 80017e6:	4b0a      	ldr	r3, [pc, #40]	; (8001810 <MountSD+0x40>)
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d103      	bne.n	80017f6 <MountSD+0x26>
		printf("Micro SD card is mounted successfully!\r\n");
 80017ee:	4809      	ldr	r0, [pc, #36]	; (8001814 <MountSD+0x44>)
 80017f0:	f007 f934 	bl	8008a5c <puts>
	} else if (fres != FR_OK) {
		printf("Micro SD card's mount error!\r\n");
	}
}
 80017f4:	e006      	b.n	8001804 <MountSD+0x34>
	} else if (fres != FR_OK) {
 80017f6:	4b06      	ldr	r3, [pc, #24]	; (8001810 <MountSD+0x40>)
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d002      	beq.n	8001804 <MountSD+0x34>
		printf("Micro SD card's mount error!\r\n");
 80017fe:	4806      	ldr	r0, [pc, #24]	; (8001818 <MountSD+0x48>)
 8001800:	f007 f92c 	bl	8008a5c <puts>
}
 8001804:	bf00      	nop
 8001806:	bd80      	pop	{r7, pc}
 8001808:	08009d18 	.word	0x08009d18
 800180c:	2000034c 	.word	0x2000034c
 8001810:	2000142e 	.word	0x2000142e
 8001814:	08009d1c 	.word	0x08009d1c
 8001818:	08009d44 	.word	0x08009d44

0800181c <UnMountSD>:

void UnMountSD(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
	f_mount(NULL, "", 1);
 8001820:	2201      	movs	r2, #1
 8001822:	490a      	ldr	r1, [pc, #40]	; (800184c <UnMountSD+0x30>)
 8001824:	2000      	movs	r0, #0
 8001826:	f005 feb9 	bl	800759c <f_mount>
	if (fres == FR_OK) {
 800182a:	4b09      	ldr	r3, [pc, #36]	; (8001850 <UnMountSD+0x34>)
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d103      	bne.n	800183a <UnMountSD+0x1e>
		printf("The Micro SD card is unmounted!\r\n");
 8001832:	4808      	ldr	r0, [pc, #32]	; (8001854 <UnMountSD+0x38>)
 8001834:	f007 f912 	bl	8008a5c <puts>
	} else if (fres != FR_OK) {
		printf("The Micro SD was not unmounted!\r\n");
	}
}
 8001838:	e006      	b.n	8001848 <UnMountSD+0x2c>
	} else if (fres != FR_OK) {
 800183a:	4b05      	ldr	r3, [pc, #20]	; (8001850 <UnMountSD+0x34>)
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d002      	beq.n	8001848 <UnMountSD+0x2c>
		printf("The Micro SD was not unmounted!\r\n");
 8001842:	4805      	ldr	r0, [pc, #20]	; (8001858 <UnMountSD+0x3c>)
 8001844:	f007 f90a 	bl	8008a5c <puts>
}
 8001848:	bf00      	nop
 800184a:	bd80      	pop	{r7, pc}
 800184c:	08009d18 	.word	0x08009d18
 8001850:	2000142e 	.word	0x2000142e
 8001854:	08009d64 	.word	0x08009d64
 8001858:	08009d88 	.word	0x08009d88

0800185c <OpenFile>:

void OpenFile(char* fileName)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
	fres = f_open(&fil, fileName, FA_OPEN_APPEND | FA_WRITE | FA_READ);
 8001864:	2233      	movs	r2, #51	; 0x33
 8001866:	6879      	ldr	r1, [r7, #4]
 8001868:	480e      	ldr	r0, [pc, #56]	; (80018a4 <OpenFile+0x48>)
 800186a:	f005 fedd 	bl	8007628 <f_open>
 800186e:	4603      	mov	r3, r0
 8001870:	461a      	mov	r2, r3
 8001872:	4b0d      	ldr	r3, [pc, #52]	; (80018a8 <OpenFile+0x4c>)
 8001874:	701a      	strb	r2, [r3, #0]
	if (fres == FR_OK) {
 8001876:	4b0c      	ldr	r3, [pc, #48]	; (80018a8 <OpenFile+0x4c>)
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d103      	bne.n	8001886 <OpenFile+0x2a>
		printf("File opened for reading and writing!\r\n");
 800187e:	480b      	ldr	r0, [pc, #44]	; (80018ac <OpenFile+0x50>)
 8001880:	f007 f8ec 	bl	8008a5c <puts>
 8001884:	e006      	b.n	8001894 <OpenFile+0x38>
	} else if (fres != FR_OK) {
 8001886:	4b08      	ldr	r3, [pc, #32]	; (80018a8 <OpenFile+0x4c>)
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d002      	beq.n	8001894 <OpenFile+0x38>
		printf("File was not opened for reading and writing!\r\n");
 800188e:	4808      	ldr	r0, [pc, #32]	; (80018b0 <OpenFile+0x54>)
 8001890:	f007 f8e4 	bl	8008a5c <puts>
	}

	closedFlag = 0;
 8001894:	4b07      	ldr	r3, [pc, #28]	; (80018b4 <OpenFile+0x58>)
 8001896:	2200      	movs	r2, #0
 8001898:	701a      	strb	r2, [r3, #0]
}
 800189a:	bf00      	nop
 800189c:	3708      	adds	r7, #8
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	20001430 	.word	0x20001430
 80018a8:	2000142e 	.word	0x2000142e
 80018ac:	08009dac 	.word	0x08009dac
 80018b0:	08009dd4 	.word	0x08009dd4
 80018b4:	200000a6 	.word	0x200000a6

080018b8 <CloseFile>:

void CloseFile(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
	fres = f_close(&fil);
 80018bc:	480d      	ldr	r0, [pc, #52]	; (80018f4 <CloseFile+0x3c>)
 80018be:	f006 fbf0 	bl	80080a2 <f_close>
 80018c2:	4603      	mov	r3, r0
 80018c4:	461a      	mov	r2, r3
 80018c6:	4b0c      	ldr	r3, [pc, #48]	; (80018f8 <CloseFile+0x40>)
 80018c8:	701a      	strb	r2, [r3, #0]
	if (fres == FR_OK) {
 80018ca:	4b0b      	ldr	r3, [pc, #44]	; (80018f8 <CloseFile+0x40>)
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d103      	bne.n	80018da <CloseFile+0x22>
		printf("The file is closed.\r\n");
 80018d2:	480a      	ldr	r0, [pc, #40]	; (80018fc <CloseFile+0x44>)
 80018d4:	f007 f8c2 	bl	8008a5c <puts>
 80018d8:	e006      	b.n	80018e8 <CloseFile+0x30>
	} else if (fres != FR_OK) {
 80018da:	4b07      	ldr	r3, [pc, #28]	; (80018f8 <CloseFile+0x40>)
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d002      	beq.n	80018e8 <CloseFile+0x30>
		printf("The file was not closed.\r\n");
 80018e2:	4807      	ldr	r0, [pc, #28]	; (8001900 <CloseFile+0x48>)
 80018e4:	f007 f8ba 	bl	8008a5c <puts>
	}

	closedFlag = 1;
 80018e8:	4b06      	ldr	r3, [pc, #24]	; (8001904 <CloseFile+0x4c>)
 80018ea:	2201      	movs	r2, #1
 80018ec:	701a      	strb	r2, [r3, #0]
}
 80018ee:	bf00      	nop
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	20001430 	.word	0x20001430
 80018f8:	2000142e 	.word	0x2000142e
 80018fc:	08009e04 	.word	0x08009e04
 8001900:	08009e1c 	.word	0x08009e1c
 8001904:	200000a6 	.word	0x200000a6

08001908 <CheckSize>:

void CheckSize(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b09a      	sub	sp, #104	; 0x68
 800190c:	af00      	add	r7, sp, #0

	fres = f_getfree("", &fre_clust, &pfs);
 800190e:	4a2e      	ldr	r2, [pc, #184]	; (80019c8 <CheckSize+0xc0>)
 8001910:	492e      	ldr	r1, [pc, #184]	; (80019cc <CheckSize+0xc4>)
 8001912:	482f      	ldr	r0, [pc, #188]	; (80019d0 <CheckSize+0xc8>)
 8001914:	f006 fe13 	bl	800853e <f_getfree>
 8001918:	4603      	mov	r3, r0
 800191a:	461a      	mov	r2, r3
 800191c:	4b2d      	ldr	r3, [pc, #180]	; (80019d4 <CheckSize+0xcc>)
 800191e:	701a      	strb	r2, [r3, #0]
	totalSpace = (uint32_t) ((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8001920:	4b29      	ldr	r3, [pc, #164]	; (80019c8 <CheckSize+0xc0>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	69db      	ldr	r3, [r3, #28]
 8001926:	3b02      	subs	r3, #2
 8001928:	4a27      	ldr	r2, [pc, #156]	; (80019c8 <CheckSize+0xc0>)
 800192a:	6812      	ldr	r2, [r2, #0]
 800192c:	8952      	ldrh	r2, [r2, #10]
 800192e:	fb02 f303 	mul.w	r3, r2, r3
 8001932:	4618      	mov	r0, r3
 8001934:	f7fe ff20 	bl	8000778 <__aeabi_ui2d>
 8001938:	f04f 0200 	mov.w	r2, #0
 800193c:	4b26      	ldr	r3, [pc, #152]	; (80019d8 <CheckSize+0xd0>)
 800193e:	f7fe fcaf 	bl	80002a0 <__aeabi_dmul>
 8001942:	4602      	mov	r2, r0
 8001944:	460b      	mov	r3, r1
 8001946:	4610      	mov	r0, r2
 8001948:	4619      	mov	r1, r3
 800194a:	f7fe ff8f 	bl	800086c <__aeabi_d2uiz>
 800194e:	4603      	mov	r3, r0
 8001950:	4a22      	ldr	r2, [pc, #136]	; (80019dc <CheckSize+0xd4>)
 8001952:	6013      	str	r3, [r2, #0]
	freeSpace = (uint32_t) (fre_clust * pfs->csize * 0.5);
 8001954:	4b1c      	ldr	r3, [pc, #112]	; (80019c8 <CheckSize+0xc0>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	895b      	ldrh	r3, [r3, #10]
 800195a:	461a      	mov	r2, r3
 800195c:	4b1b      	ldr	r3, [pc, #108]	; (80019cc <CheckSize+0xc4>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	fb03 f302 	mul.w	r3, r3, r2
 8001964:	4618      	mov	r0, r3
 8001966:	f7fe ff07 	bl	8000778 <__aeabi_ui2d>
 800196a:	f04f 0200 	mov.w	r2, #0
 800196e:	4b1a      	ldr	r3, [pc, #104]	; (80019d8 <CheckSize+0xd0>)
 8001970:	f7fe fc96 	bl	80002a0 <__aeabi_dmul>
 8001974:	4602      	mov	r2, r0
 8001976:	460b      	mov	r3, r1
 8001978:	4610      	mov	r0, r2
 800197a:	4619      	mov	r1, r3
 800197c:	f7fe ff76 	bl	800086c <__aeabi_d2uiz>
 8001980:	4603      	mov	r3, r0
 8001982:	4a17      	ldr	r2, [pc, #92]	; (80019e0 <CheckSize+0xd8>)
 8001984:	6013      	str	r3, [r2, #0]
	char mSz[100];
	sprintf(mSz, "%lu", freeSpace);	// lu
 8001986:	4b16      	ldr	r3, [pc, #88]	; (80019e0 <CheckSize+0xd8>)
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	1d3b      	adds	r3, r7, #4
 800198c:	4915      	ldr	r1, [pc, #84]	; (80019e4 <CheckSize+0xdc>)
 800198e:	4618      	mov	r0, r3
 8001990:	f007 f86c 	bl	8008a6c <siprintf>
	if (fres == FR_OK) {
 8001994:	4b0f      	ldr	r3, [pc, #60]	; (80019d4 <CheckSize+0xcc>)
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d10a      	bne.n	80019b2 <CheckSize+0xaa>
		printf("The free space is: ");
 800199c:	4812      	ldr	r0, [pc, #72]	; (80019e8 <CheckSize+0xe0>)
 800199e:	f006 ffd7 	bl	8008950 <iprintf>
		printf(mSz);
 80019a2:	1d3b      	adds	r3, r7, #4
 80019a4:	4618      	mov	r0, r3
 80019a6:	f006 ffd3 	bl	8008950 <iprintf>
		printf("\r\n");
 80019aa:	4810      	ldr	r0, [pc, #64]	; (80019ec <CheckSize+0xe4>)
 80019ac:	f007 f856 	bl	8008a5c <puts>
	} else if (fres != FR_OK) {
		printf("The free space could not be determined!\r\n");
	}
}
 80019b0:	e006      	b.n	80019c0 <CheckSize+0xb8>
	} else if (fres != FR_OK) {
 80019b2:	4b08      	ldr	r3, [pc, #32]	; (80019d4 <CheckSize+0xcc>)
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d002      	beq.n	80019c0 <CheckSize+0xb8>
		printf("The free space could not be determined!\r\n");
 80019ba:	480d      	ldr	r0, [pc, #52]	; (80019f0 <CheckSize+0xe8>)
 80019bc:	f007 f84e 	bl	8008a5c <puts>
}
 80019c0:	bf00      	nop
 80019c2:	3768      	adds	r7, #104	; 0x68
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	200013f8 	.word	0x200013f8
 80019cc:	200002f0 	.word	0x200002f0
 80019d0:	08009d18 	.word	0x08009d18
 80019d4:	2000142e 	.word	0x2000142e
 80019d8:	3fe00000 	.word	0x3fe00000
 80019dc:	20001384 	.word	0x20001384
 80019e0:	200013f4 	.word	0x200013f4
 80019e4:	08009e38 	.word	0x08009e38
 80019e8:	08009e3c 	.word	0x08009e3c
 80019ec:	08009e50 	.word	0x08009e50
 80019f0:	08009e54 	.word	0x08009e54

080019f4 <WriteFile>:

void WriteFile(char* text)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b086      	sub	sp, #24
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
	fres = f_lseek(&fil, 0);	// move cursor to initial position
 80019fc:	2100      	movs	r1, #0
 80019fe:	4836      	ldr	r0, [pc, #216]	; (8001ad8 <WriteFile+0xe4>)
 8001a00:	f006 fb79 	bl	80080f6 <f_lseek>
 8001a04:	4603      	mov	r3, r0
 8001a06:	461a      	mov	r2, r3
 8001a08:	4b34      	ldr	r3, [pc, #208]	; (8001adc <WriteFile+0xe8>)
 8001a0a:	701a      	strb	r2, [r3, #0]
	if (fres != FR_OK){
 8001a0c:	4b33      	ldr	r3, [pc, #204]	; (8001adc <WriteFile+0xe8>)
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d002      	beq.n	8001a1a <WriteFile+0x26>
		printf("Can't move to initial position\r\n");
 8001a14:	4832      	ldr	r0, [pc, #200]	; (8001ae0 <WriteFile+0xec>)
 8001a16:	f007 f821 	bl	8008a5c <puts>
#endif

////////////////////////f_write////////////////////////////////

#ifdef FWRITE
	sprintf((char*)buffer, "%s\r\n", text);
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	4931      	ldr	r1, [pc, #196]	; (8001ae4 <WriteFile+0xf0>)
 8001a1e:	4832      	ldr	r0, [pc, #200]	; (8001ae8 <WriteFile+0xf4>)
 8001a20:	f007 f824 	bl	8008a6c <siprintf>
	uint16_t length = (uint16_t)strlen(text);	    // + \r\n
 8001a24:	6878      	ldr	r0, [r7, #4]
 8001a26:	f7fe fbe3 	bl	80001f0 <strlen>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	82fb      	strh	r3, [r7, #22]
	int cnt = 0;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	613b      	str	r3, [r7, #16]
	while(buffer[cnt] != 0)
 8001a32:	e015      	b.n	8001a60 <WriteFile+0x6c>
	{
		if (buffer[cnt] == '\r') length++;
 8001a34:	4a2c      	ldr	r2, [pc, #176]	; (8001ae8 <WriteFile+0xf4>)
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	4413      	add	r3, r2
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	2b0d      	cmp	r3, #13
 8001a3e:	d103      	bne.n	8001a48 <WriteFile+0x54>
 8001a40:	8afb      	ldrh	r3, [r7, #22]
 8001a42:	3301      	adds	r3, #1
 8001a44:	82fb      	strh	r3, [r7, #22]
 8001a46:	e008      	b.n	8001a5a <WriteFile+0x66>
		else if(buffer[cnt] == '\n') length++;
 8001a48:	4a27      	ldr	r2, [pc, #156]	; (8001ae8 <WriteFile+0xf4>)
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	4413      	add	r3, r2
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	2b0a      	cmp	r3, #10
 8001a52:	d102      	bne.n	8001a5a <WriteFile+0x66>
 8001a54:	8afb      	ldrh	r3, [r7, #22]
 8001a56:	3301      	adds	r3, #1
 8001a58:	82fb      	strh	r3, [r7, #22]
		cnt++;
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	3301      	adds	r3, #1
 8001a5e:	613b      	str	r3, [r7, #16]
	while(buffer[cnt] != 0)
 8001a60:	4a21      	ldr	r2, [pc, #132]	; (8001ae8 <WriteFile+0xf4>)
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	4413      	add	r3, r2
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d1e3      	bne.n	8001a34 <WriteFile+0x40>
	}
	//uint16_t length = (uint16_t)strlen(text) + 1;
	//uint16_t length = (uint16_t)strlen(text) + 2;
	printf("length : %d\r\n", length);
 8001a6c:	8afb      	ldrh	r3, [r7, #22]
 8001a6e:	4619      	mov	r1, r3
 8001a70:	481e      	ldr	r0, [pc, #120]	; (8001aec <WriteFile+0xf8>)
 8001a72:	f006 ff6d 	bl	8008950 <iprintf>

	for (uint8_t i = 0; i < 3; i++) {
 8001a76:	2300      	movs	r3, #0
 8001a78:	73fb      	strb	r3, [r7, #15]
 8001a7a:	e00c      	b.n	8001a96 <WriteFile+0xa2>
		fres = f_write(&fil, buffer, length, (void*)&bw);
 8001a7c:	8afa      	ldrh	r2, [r7, #22]
 8001a7e:	4b1c      	ldr	r3, [pc, #112]	; (8001af0 <WriteFile+0xfc>)
 8001a80:	4919      	ldr	r1, [pc, #100]	; (8001ae8 <WriteFile+0xf4>)
 8001a82:	4815      	ldr	r0, [pc, #84]	; (8001ad8 <WriteFile+0xe4>)
 8001a84:	f006 f8fb 	bl	8007c7e <f_write>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	4b13      	ldr	r3, [pc, #76]	; (8001adc <WriteFile+0xe8>)
 8001a8e:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < 3; i++) {
 8001a90:	7bfb      	ldrb	r3, [r7, #15]
 8001a92:	3301      	adds	r3, #1
 8001a94:	73fb      	strb	r3, [r7, #15]
 8001a96:	7bfb      	ldrb	r3, [r7, #15]
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	d9ef      	bls.n	8001a7c <WriteFile+0x88>
	}


	//fres = f_write(&fil, buffer, sizeof(buffer), (void*)&bw);
	if(fres == FR_OK)
 8001a9c:	4b0f      	ldr	r3, [pc, #60]	; (8001adc <WriteFile+0xe8>)
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d10e      	bne.n	8001ac2 <WriteFile+0xce>
	{
		printf("Writing Complete\r\n");
 8001aa4:	4813      	ldr	r0, [pc, #76]	; (8001af4 <WriteFile+0x100>)
 8001aa6:	f006 ffd9 	bl	8008a5c <puts>
		sprintf((char*)str, "%3d bytes Write", (int)bw);
 8001aaa:	4b11      	ldr	r3, [pc, #68]	; (8001af0 <WriteFile+0xfc>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	461a      	mov	r2, r3
 8001ab0:	4911      	ldr	r1, [pc, #68]	; (8001af8 <WriteFile+0x104>)
 8001ab2:	4812      	ldr	r0, [pc, #72]	; (8001afc <WriteFile+0x108>)
 8001ab4:	f006 ffda 	bl	8008a6c <siprintf>
		printf("%s\r\n", str);
 8001ab8:	4910      	ldr	r1, [pc, #64]	; (8001afc <WriteFile+0x108>)
 8001aba:	480a      	ldr	r0, [pc, #40]	; (8001ae4 <WriteFile+0xf0>)
 8001abc:	f006 ff48 	bl	8008950 <iprintf>
		printf("Writing failed\r\n");
	}

#endif

}
 8001ac0:	e006      	b.n	8001ad0 <WriteFile+0xdc>
	else if(fres != FR_OK)
 8001ac2:	4b06      	ldr	r3, [pc, #24]	; (8001adc <WriteFile+0xe8>)
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d002      	beq.n	8001ad0 <WriteFile+0xdc>
		printf("Writing failed\r\n");
 8001aca:	480d      	ldr	r0, [pc, #52]	; (8001b00 <WriteFile+0x10c>)
 8001acc:	f006 ffc6 	bl	8008a5c <puts>
}
 8001ad0:	bf00      	nop
 8001ad2:	3718      	adds	r7, #24
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	20001430 	.word	0x20001430
 8001adc:	2000142e 	.word	0x2000142e
 8001ae0:	08009e80 	.word	0x08009e80
 8001ae4:	08009ea0 	.word	0x08009ea0
 8001ae8:	2000138c 	.word	0x2000138c
 8001aec:	08009ea8 	.word	0x08009ea8
 8001af0:	200013f0 	.word	0x200013f0
 8001af4:	08009eb8 	.word	0x08009eb8
 8001af8:	08009ecc 	.word	0x08009ecc
 8001afc:	200013fc 	.word	0x200013fc
 8001b00:	08009edc 	.word	0x08009edc

08001b04 <ReadFile>:

void ReadFile(char* fileName)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b09c      	sub	sp, #112	; 0x70
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
	if (closedFlag == 0) CloseFile();
 8001b0c:	4b2d      	ldr	r3, [pc, #180]	; (8001bc4 <ReadFile+0xc0>)
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d101      	bne.n	8001b1a <ReadFile+0x16>
 8001b16:	f7ff fecf 	bl	80018b8 <CloseFile>

	fres = f_open(&fil, fileName, FA_READ);
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	6879      	ldr	r1, [r7, #4]
 8001b1e:	482a      	ldr	r0, [pc, #168]	; (8001bc8 <ReadFile+0xc4>)
 8001b20:	f005 fd82 	bl	8007628 <f_open>
 8001b24:	4603      	mov	r3, r0
 8001b26:	461a      	mov	r2, r3
 8001b28:	4b28      	ldr	r3, [pc, #160]	; (8001bcc <ReadFile+0xc8>)
 8001b2a:	701a      	strb	r2, [r3, #0]
	if (fres == FR_OK) {
 8001b2c:	4b27      	ldr	r3, [pc, #156]	; (8001bcc <ReadFile+0xc8>)
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d103      	bne.n	8001b3c <ReadFile+0x38>
		printf("File opened for reading.\r\n");
 8001b34:	4826      	ldr	r0, [pc, #152]	; (8001bd0 <ReadFile+0xcc>)
 8001b36:	f006 ff91 	bl	8008a5c <puts>
 8001b3a:	e006      	b.n	8001b4a <ReadFile+0x46>
	} else if (fres != FR_OK) {
 8001b3c:	4b23      	ldr	r3, [pc, #140]	; (8001bcc <ReadFile+0xc8>)
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d002      	beq.n	8001b4a <ReadFile+0x46>
		printf("File was not opened for reading!\r\n");
 8001b44:	4823      	ldr	r0, [pc, #140]	; (8001bd4 <ReadFile+0xd0>)
 8001b46:	f006 ff89 	bl	8008a5c <puts>
#endif

//////////////////////////f_read//////////////////////////////////

#ifdef FREAD
	fres = f_read(&fil, buffer, sizeof(buffer), (void*)&br);	// read util NULL
 8001b4a:	4b23      	ldr	r3, [pc, #140]	; (8001bd8 <ReadFile+0xd4>)
 8001b4c:	2264      	movs	r2, #100	; 0x64
 8001b4e:	4923      	ldr	r1, [pc, #140]	; (8001bdc <ReadFile+0xd8>)
 8001b50:	481d      	ldr	r0, [pc, #116]	; (8001bc8 <ReadFile+0xc4>)
 8001b52:	f005 ff35 	bl	80079c0 <f_read>
 8001b56:	4603      	mov	r3, r0
 8001b58:	461a      	mov	r2, r3
 8001b5a:	4b1c      	ldr	r3, [pc, #112]	; (8001bcc <ReadFile+0xc8>)
 8001b5c:	701a      	strb	r2, [r3, #0]
	char mRd[100];
	if (fres == FR_OK)
 8001b5e:	4b1b      	ldr	r3, [pc, #108]	; (8001bcc <ReadFile+0xc8>)
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d11e      	bne.n	8001ba4 <ReadFile+0xa0>
	{
		sprintf((char*)mRd, "%s", buffer);
 8001b66:	f107 030c 	add.w	r3, r7, #12
 8001b6a:	4a1c      	ldr	r2, [pc, #112]	; (8001bdc <ReadFile+0xd8>)
 8001b6c:	491c      	ldr	r1, [pc, #112]	; (8001be0 <ReadFile+0xdc>)
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f006 ff7c 	bl	8008a6c <siprintf>
		printf("\r\n-----------READING_TEXT----------\r\n");
 8001b74:	481b      	ldr	r0, [pc, #108]	; (8001be4 <ReadFile+0xe0>)
 8001b76:	f006 ff71 	bl	8008a5c <puts>
		printf("%s", mRd);	// already existed \r\n
 8001b7a:	f107 030c 	add.w	r3, r7, #12
 8001b7e:	4619      	mov	r1, r3
 8001b80:	4817      	ldr	r0, [pc, #92]	; (8001be0 <ReadFile+0xdc>)
 8001b82:	f006 fee5 	bl	8008950 <iprintf>
		printf("\r\n-----------READING_TEXT----------\r\n");
 8001b86:	4817      	ldr	r0, [pc, #92]	; (8001be4 <ReadFile+0xe0>)
 8001b88:	f006 ff68 	bl	8008a5c <puts>
		sprintf((char*)str, "%3d bytes Read", (int)br);
 8001b8c:	4b12      	ldr	r3, [pc, #72]	; (8001bd8 <ReadFile+0xd4>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	461a      	mov	r2, r3
 8001b92:	4915      	ldr	r1, [pc, #84]	; (8001be8 <ReadFile+0xe4>)
 8001b94:	4815      	ldr	r0, [pc, #84]	; (8001bec <ReadFile+0xe8>)
 8001b96:	f006 ff69 	bl	8008a6c <siprintf>
		printf("%s\r\n", str);
 8001b9a:	4914      	ldr	r1, [pc, #80]	; (8001bec <ReadFile+0xe8>)
 8001b9c:	4814      	ldr	r0, [pc, #80]	; (8001bf0 <ReadFile+0xec>)
 8001b9e:	f006 fed7 	bl	8008950 <iprintf>
	{
		printf("Can't read~!\r\n");
	}
#endif

}
 8001ba2:	e00a      	b.n	8001bba <ReadFile+0xb6>
	else if (fres != FR_OK || br == 0)
 8001ba4:	4b09      	ldr	r3, [pc, #36]	; (8001bcc <ReadFile+0xc8>)
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d103      	bne.n	8001bb4 <ReadFile+0xb0>
 8001bac:	4b0a      	ldr	r3, [pc, #40]	; (8001bd8 <ReadFile+0xd4>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d102      	bne.n	8001bba <ReadFile+0xb6>
		printf("Can't read~!\r\n");
 8001bb4:	480f      	ldr	r0, [pc, #60]	; (8001bf4 <ReadFile+0xf0>)
 8001bb6:	f006 ff51 	bl	8008a5c <puts>
}
 8001bba:	bf00      	nop
 8001bbc:	3770      	adds	r7, #112	; 0x70
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	200000a6 	.word	0x200000a6
 8001bc8:	20001430 	.word	0x20001430
 8001bcc:	2000142e 	.word	0x2000142e
 8001bd0:	08009eec 	.word	0x08009eec
 8001bd4:	08009f08 	.word	0x08009f08
 8001bd8:	20001388 	.word	0x20001388
 8001bdc:	2000138c 	.word	0x2000138c
 8001be0:	08009f2c 	.word	0x08009f2c
 8001be4:	08009f30 	.word	0x08009f30
 8001be8:	08009f58 	.word	0x08009f58
 8001bec:	200013fc 	.word	0x200013fc
 8001bf0:	08009ea0 	.word	0x08009ea0
 8001bf4:	08009f68 	.word	0x08009f68

08001bf8 <SDtest>:
		printf("The Micro SD was not unmounted!\r\n");
	}
}

void SDtest(void)
{
 8001bf8:	b590      	push	{r4, r7, lr}
 8001bfa:	b087      	sub	sp, #28
 8001bfc:	af00      	add	r7, sp, #0
	HAL_Delay(1000);
 8001bfe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c02:	f000 fb81 	bl	8002308 <HAL_Delay>
	printf("-----------Start_Program------------\r\n");
 8001c06:	4813      	ldr	r0, [pc, #76]	; (8001c54 <SDtest+0x5c>)
 8001c08:	f006 ff28 	bl	8008a5c <puts>
	MountSD();
 8001c0c:	f7ff fde0 	bl	80017d0 <MountSD>
	CheckSize();
 8001c10:	f7ff fe7a 	bl	8001908 <CheckSize>
	char* fileName = "log-file1.txt";
 8001c14:	4b10      	ldr	r3, [pc, #64]	; (8001c58 <SDtest+0x60>)
 8001c16:	617b      	str	r3, [r7, #20]
	OpenFile(fileName);
 8001c18:	6978      	ldr	r0, [r7, #20]
 8001c1a:	f7ff fe1f 	bl	800185c <OpenFile>
	char text[20] = "Write and Read!";
 8001c1e:	4b0f      	ldr	r3, [pc, #60]	; (8001c5c <SDtest+0x64>)
 8001c20:	463c      	mov	r4, r7
 8001c22:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c24:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001c28:	2300      	movs	r3, #0
 8001c2a:	613b      	str	r3, [r7, #16]

	WriteFile(text);
 8001c2c:	463b      	mov	r3, r7
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f7ff fee0 	bl	80019f4 <WriteFile>
	CloseFile();
 8001c34:	f7ff fe40 	bl	80018b8 <CloseFile>

	ReadFile(fileName);
 8001c38:	6978      	ldr	r0, [r7, #20]
 8001c3a:	f7ff ff63 	bl	8001b04 <ReadFile>
	CloseFile();
 8001c3e:	f7ff fe3b 	bl	80018b8 <CloseFile>
	UnMountSD();
 8001c42:	f7ff fdeb 	bl	800181c <UnMountSD>
	printf("------------End_Program-------------\r\n");
 8001c46:	4806      	ldr	r0, [pc, #24]	; (8001c60 <SDtest+0x68>)
 8001c48:	f006 ff08 	bl	8008a5c <puts>
}
 8001c4c:	bf00      	nop
 8001c4e:	371c      	adds	r7, #28
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd90      	pop	{r4, r7, pc}
 8001c54:	08009ca4 	.word	0x08009ca4
 8001c58:	0800a020 	.word	0x0800a020
 8001c5c:	08009d04 	.word	0x08009d04
 8001c60:	08009cdc 	.word	0x08009cdc

08001c64 <HAL_GPIO_EXTI_Callback>:
	}
	/* USER CODE END Error_Handler_Debug */
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	80fb      	strh	r3, [r7, #6]

	static uint32_t temp;
	if(GPIO_Pin == GPIO_PIN_10)	// PIN_3 Pressed
 8001c6e:	88fb      	ldrh	r3, [r7, #6]
 8001c70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c74:	d11f      	bne.n	8001cb6 <HAL_GPIO_EXTI_Callback+0x52>
	{
		if(HAL_GetTick() - temp > 100){
 8001c76:	f000 fb3b 	bl	80022f0 <HAL_GetTick>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	4b10      	ldr	r3, [pc, #64]	; (8001cc0 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	2b64      	cmp	r3, #100	; 0x64
 8001c84:	d909      	bls.n	8001c9a <HAL_GPIO_EXTI_Callback+0x36>
			printf("%s\r\n", "PIN_10 Pressed");
 8001c86:	490f      	ldr	r1, [pc, #60]	; (8001cc4 <HAL_GPIO_EXTI_Callback+0x60>)
 8001c88:	480f      	ldr	r0, [pc, #60]	; (8001cc8 <HAL_GPIO_EXTI_Callback+0x64>)
 8001c8a:	f006 fe61 	bl	8008950 <iprintf>
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8001c8e:	2180      	movs	r1, #128	; 0x80
 8001c90:	480e      	ldr	r0, [pc, #56]	; (8001ccc <HAL_GPIO_EXTI_Callback+0x68>)
 8001c92:	f000 feea 	bl	8002a6a <HAL_GPIO_TogglePin>
			SDtest();
 8001c96:	f7ff ffaf 	bl	8001bf8 <SDtest>
		}

		//while(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_3) == GPIO_PIN_RESET);
		while(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_10) == GPIO_PIN_RESET){
 8001c9a:	bf00      	nop
 8001c9c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ca0:	480b      	ldr	r0, [pc, #44]	; (8001cd0 <HAL_GPIO_EXTI_Callback+0x6c>)
 8001ca2:	f000 feb1 	bl	8002a08 <HAL_GPIO_ReadPin>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d0f7      	beq.n	8001c9c <HAL_GPIO_EXTI_Callback+0x38>
			//printf("%s\r\n", "wait for reset");
		}	// button -> 0
		temp = HAL_GetTick();	// check last time
 8001cac:	f000 fb20 	bl	80022f0 <HAL_GetTick>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	4a03      	ldr	r2, [pc, #12]	; (8001cc0 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001cb4:	6013      	str	r3, [r2, #0]
	}



}
 8001cb6:	bf00      	nop
 8001cb8:	3708      	adds	r7, #8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	200000a8 	.word	0x200000a8
 8001cc4:	0800a030 	.word	0x0800a030
 8001cc8:	08009ea0 	.word	0x08009ea0
 8001ccc:	40020400 	.word	0x40020400
 8001cd0:	40020c00 	.word	0x40020c00

08001cd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cd8:	b672      	cpsid	i
}
 8001cda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cdc:	e7fe      	b.n	8001cdc <Error_Handler+0x8>
	...

08001ce0 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001ce4:	4b17      	ldr	r3, [pc, #92]	; (8001d44 <MX_SPI2_Init+0x64>)
 8001ce6:	4a18      	ldr	r2, [pc, #96]	; (8001d48 <MX_SPI2_Init+0x68>)
 8001ce8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001cea:	4b16      	ldr	r3, [pc, #88]	; (8001d44 <MX_SPI2_Init+0x64>)
 8001cec:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001cf0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001cf2:	4b14      	ldr	r3, [pc, #80]	; (8001d44 <MX_SPI2_Init+0x64>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001cf8:	4b12      	ldr	r3, [pc, #72]	; (8001d44 <MX_SPI2_Init+0x64>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001cfe:	4b11      	ldr	r3, [pc, #68]	; (8001d44 <MX_SPI2_Init+0x64>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d04:	4b0f      	ldr	r3, [pc, #60]	; (8001d44 <MX_SPI2_Init+0x64>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001d0a:	4b0e      	ldr	r3, [pc, #56]	; (8001d44 <MX_SPI2_Init+0x64>)
 8001d0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d10:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001d12:	4b0c      	ldr	r3, [pc, #48]	; (8001d44 <MX_SPI2_Init+0x64>)
 8001d14:	2208      	movs	r2, #8
 8001d16:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d18:	4b0a      	ldr	r3, [pc, #40]	; (8001d44 <MX_SPI2_Init+0x64>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d1e:	4b09      	ldr	r3, [pc, #36]	; (8001d44 <MX_SPI2_Init+0x64>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d24:	4b07      	ldr	r3, [pc, #28]	; (8001d44 <MX_SPI2_Init+0x64>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001d2a:	4b06      	ldr	r3, [pc, #24]	; (8001d44 <MX_SPI2_Init+0x64>)
 8001d2c:	220a      	movs	r2, #10
 8001d2e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001d30:	4804      	ldr	r0, [pc, #16]	; (8001d44 <MX_SPI2_Init+0x64>)
 8001d32:	f001 fb91 	bl	8003458 <HAL_SPI_Init>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d001      	beq.n	8001d40 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001d3c:	f7ff ffca 	bl	8001cd4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001d40:	bf00      	nop
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	200002f4 	.word	0x200002f4
 8001d48:	40003800 	.word	0x40003800

08001d4c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b08a      	sub	sp, #40	; 0x28
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d54:	f107 0314 	add.w	r3, r7, #20
 8001d58:	2200      	movs	r2, #0
 8001d5a:	601a      	str	r2, [r3, #0]
 8001d5c:	605a      	str	r2, [r3, #4]
 8001d5e:	609a      	str	r2, [r3, #8]
 8001d60:	60da      	str	r2, [r3, #12]
 8001d62:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a19      	ldr	r2, [pc, #100]	; (8001dd0 <HAL_SPI_MspInit+0x84>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d12c      	bne.n	8001dc8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001d6e:	2300      	movs	r3, #0
 8001d70:	613b      	str	r3, [r7, #16]
 8001d72:	4b18      	ldr	r3, [pc, #96]	; (8001dd4 <HAL_SPI_MspInit+0x88>)
 8001d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d76:	4a17      	ldr	r2, [pc, #92]	; (8001dd4 <HAL_SPI_MspInit+0x88>)
 8001d78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d7c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d7e:	4b15      	ldr	r3, [pc, #84]	; (8001dd4 <HAL_SPI_MspInit+0x88>)
 8001d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d86:	613b      	str	r3, [r7, #16]
 8001d88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	60fb      	str	r3, [r7, #12]
 8001d8e:	4b11      	ldr	r3, [pc, #68]	; (8001dd4 <HAL_SPI_MspInit+0x88>)
 8001d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d92:	4a10      	ldr	r2, [pc, #64]	; (8001dd4 <HAL_SPI_MspInit+0x88>)
 8001d94:	f043 0302 	orr.w	r3, r3, #2
 8001d98:	6313      	str	r3, [r2, #48]	; 0x30
 8001d9a:	4b0e      	ldr	r3, [pc, #56]	; (8001dd4 <HAL_SPI_MspInit+0x88>)
 8001d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9e:	f003 0302 	and.w	r3, r3, #2
 8001da2:	60fb      	str	r3, [r7, #12]
 8001da4:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001da6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001daa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dac:	2302      	movs	r3, #2
 8001dae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db0:	2300      	movs	r3, #0
 8001db2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001db4:	2303      	movs	r3, #3
 8001db6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001db8:	2305      	movs	r3, #5
 8001dba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dbc:	f107 0314 	add.w	r3, r7, #20
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	4805      	ldr	r0, [pc, #20]	; (8001dd8 <HAL_SPI_MspInit+0x8c>)
 8001dc4:	f000 fc74 	bl	80026b0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001dc8:	bf00      	nop
 8001dca:	3728      	adds	r7, #40	; 0x28
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	40003800 	.word	0x40003800
 8001dd4:	40023800 	.word	0x40023800
 8001dd8:	40020400 	.word	0x40020400

08001ddc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001de2:	2300      	movs	r3, #0
 8001de4:	607b      	str	r3, [r7, #4]
 8001de6:	4b10      	ldr	r3, [pc, #64]	; (8001e28 <HAL_MspInit+0x4c>)
 8001de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dea:	4a0f      	ldr	r2, [pc, #60]	; (8001e28 <HAL_MspInit+0x4c>)
 8001dec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001df0:	6453      	str	r3, [r2, #68]	; 0x44
 8001df2:	4b0d      	ldr	r3, [pc, #52]	; (8001e28 <HAL_MspInit+0x4c>)
 8001df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001df6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dfa:	607b      	str	r3, [r7, #4]
 8001dfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dfe:	2300      	movs	r3, #0
 8001e00:	603b      	str	r3, [r7, #0]
 8001e02:	4b09      	ldr	r3, [pc, #36]	; (8001e28 <HAL_MspInit+0x4c>)
 8001e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e06:	4a08      	ldr	r2, [pc, #32]	; (8001e28 <HAL_MspInit+0x4c>)
 8001e08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e0c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e0e:	4b06      	ldr	r3, [pc, #24]	; (8001e28 <HAL_MspInit+0x4c>)
 8001e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e16:	603b      	str	r3, [r7, #0]
 8001e18:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e1a:	bf00      	nop
 8001e1c:	370c      	adds	r7, #12
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	40023800 	.word	0x40023800

08001e2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e30:	e7fe      	b.n	8001e30 <NMI_Handler+0x4>

08001e32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e32:	b480      	push	{r7}
 8001e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e36:	e7fe      	b.n	8001e36 <HardFault_Handler+0x4>

08001e38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e3c:	e7fe      	b.n	8001e3c <MemManage_Handler+0x4>

08001e3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e3e:	b480      	push	{r7}
 8001e40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e42:	e7fe      	b.n	8001e42 <BusFault_Handler+0x4>

08001e44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e48:	e7fe      	b.n	8001e48 <UsageFault_Handler+0x4>

08001e4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e4a:	b480      	push	{r7}
 8001e4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e4e:	bf00      	nop
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr

08001e58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e5c:	bf00      	nop
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr

08001e66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e66:	b480      	push	{r7}
 8001e68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e6a:	bf00      	nop
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  if(Timer1 > 0)
 8001e78:	4b0c      	ldr	r3, [pc, #48]	; (8001eac <SysTick_Handler+0x38>)
 8001e7a:	881b      	ldrh	r3, [r3, #0]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d005      	beq.n	8001e8c <SysTick_Handler+0x18>
	  Timer1--;
 8001e80:	4b0a      	ldr	r3, [pc, #40]	; (8001eac <SysTick_Handler+0x38>)
 8001e82:	881b      	ldrh	r3, [r3, #0]
 8001e84:	3b01      	subs	r3, #1
 8001e86:	b29a      	uxth	r2, r3
 8001e88:	4b08      	ldr	r3, [pc, #32]	; (8001eac <SysTick_Handler+0x38>)
 8001e8a:	801a      	strh	r2, [r3, #0]

  if(Timer2 > 0)
 8001e8c:	4b08      	ldr	r3, [pc, #32]	; (8001eb0 <SysTick_Handler+0x3c>)
 8001e8e:	881b      	ldrh	r3, [r3, #0]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d005      	beq.n	8001ea0 <SysTick_Handler+0x2c>
	  Timer2--;
 8001e94:	4b06      	ldr	r3, [pc, #24]	; (8001eb0 <SysTick_Handler+0x3c>)
 8001e96:	881b      	ldrh	r3, [r3, #0]
 8001e98:	3b01      	subs	r3, #1
 8001e9a:	b29a      	uxth	r2, r3
 8001e9c:	4b04      	ldr	r3, [pc, #16]	; (8001eb0 <SysTick_Handler+0x3c>)
 8001e9e:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ea0:	f000 fa12 	bl	80022c8 <HAL_IncTick>

  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 8001ea4:	f000 fb65 	bl	8002572 <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8001ea8:	bf00      	nop
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	200002ee 	.word	0x200002ee
 8001eb0:	200002ec 	.word	0x200002ec

08001eb4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001eb8:	4802      	ldr	r0, [pc, #8]	; (8001ec4 <USART3_IRQHandler+0x10>)
 8001eba:	f002 fa99 	bl	80043f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001ebe:	bf00      	nop
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	200024a8 	.word	0x200024a8

08001ec8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001ecc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001ed0:	f000 fde6 	bl	8002aa0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001ed4:	bf00      	nop
 8001ed6:	bd80      	pop	{r7, pc}

08001ed8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001edc:	4802      	ldr	r0, [pc, #8]	; (8001ee8 <TIM7_IRQHandler+0x10>)
 8001ede:	f001 ff3c 	bl	8003d5a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001ee2:	bf00      	nop
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	20002460 	.word	0x20002460

08001eec <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b086      	sub	sp, #24
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	60f8      	str	r0, [r7, #12]
 8001ef4:	60b9      	str	r1, [r7, #8]
 8001ef6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ef8:	2300      	movs	r3, #0
 8001efa:	617b      	str	r3, [r7, #20]
 8001efc:	e00a      	b.n	8001f14 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001efe:	f3af 8000 	nop.w
 8001f02:	4601      	mov	r1, r0
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	1c5a      	adds	r2, r3, #1
 8001f08:	60ba      	str	r2, [r7, #8]
 8001f0a:	b2ca      	uxtb	r2, r1
 8001f0c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	3301      	adds	r3, #1
 8001f12:	617b      	str	r3, [r7, #20]
 8001f14:	697a      	ldr	r2, [r7, #20]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	dbf0      	blt.n	8001efe <_read+0x12>
	}

return len;
 8001f1c:	687b      	ldr	r3, [r7, #4]
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3718      	adds	r7, #24
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}

08001f26 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001f26:	b480      	push	{r7}
 8001f28:	b083      	sub	sp, #12
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	6078      	str	r0, [r7, #4]
	return -1;
 8001f2e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	370c      	adds	r7, #12
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr

08001f3e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f3e:	b480      	push	{r7}
 8001f40:	b083      	sub	sp, #12
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	6078      	str	r0, [r7, #4]
 8001f46:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f4e:	605a      	str	r2, [r3, #4]
	return 0;
 8001f50:	2300      	movs	r3, #0
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	370c      	adds	r7, #12
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr

08001f5e <_isatty>:

int _isatty(int file)
{
 8001f5e:	b480      	push	{r7}
 8001f60:	b083      	sub	sp, #12
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	6078      	str	r0, [r7, #4]
	return 1;
 8001f66:	2301      	movs	r3, #1
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	370c      	adds	r7, #12
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr

08001f74 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b085      	sub	sp, #20
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	60f8      	str	r0, [r7, #12]
 8001f7c:	60b9      	str	r1, [r7, #8]
 8001f7e:	607a      	str	r2, [r7, #4]
	return 0;
 8001f80:	2300      	movs	r3, #0
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3714      	adds	r7, #20
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
	...

08001f90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b086      	sub	sp, #24
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f98:	4a14      	ldr	r2, [pc, #80]	; (8001fec <_sbrk+0x5c>)
 8001f9a:	4b15      	ldr	r3, [pc, #84]	; (8001ff0 <_sbrk+0x60>)
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fa4:	4b13      	ldr	r3, [pc, #76]	; (8001ff4 <_sbrk+0x64>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d102      	bne.n	8001fb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fac:	4b11      	ldr	r3, [pc, #68]	; (8001ff4 <_sbrk+0x64>)
 8001fae:	4a12      	ldr	r2, [pc, #72]	; (8001ff8 <_sbrk+0x68>)
 8001fb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fb2:	4b10      	ldr	r3, [pc, #64]	; (8001ff4 <_sbrk+0x64>)
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4413      	add	r3, r2
 8001fba:	693a      	ldr	r2, [r7, #16]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d207      	bcs.n	8001fd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fc0:	f006 fc94 	bl	80088ec <__errno>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	220c      	movs	r2, #12
 8001fc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fca:	f04f 33ff 	mov.w	r3, #4294967295
 8001fce:	e009      	b.n	8001fe4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fd0:	4b08      	ldr	r3, [pc, #32]	; (8001ff4 <_sbrk+0x64>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fd6:	4b07      	ldr	r3, [pc, #28]	; (8001ff4 <_sbrk+0x64>)
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	4413      	add	r3, r2
 8001fde:	4a05      	ldr	r2, [pc, #20]	; (8001ff4 <_sbrk+0x64>)
 8001fe0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3718      	adds	r7, #24
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	20030000 	.word	0x20030000
 8001ff0:	00000400 	.word	0x00000400
 8001ff4:	200000ac 	.word	0x200000ac
 8001ff8:	20004570 	.word	0x20004570

08001ffc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002000:	4b06      	ldr	r3, [pc, #24]	; (800201c <SystemInit+0x20>)
 8002002:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002006:	4a05      	ldr	r2, [pc, #20]	; (800201c <SystemInit+0x20>)
 8002008:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800200c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002010:	bf00      	nop
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	e000ed00 	.word	0xe000ed00

08002020 <MX_TIM7_Init>:

TIM_HandleTypeDef htim7;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002026:	463b      	mov	r3, r7
 8002028:	2200      	movs	r2, #0
 800202a:	601a      	str	r2, [r3, #0]
 800202c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800202e:	4b15      	ldr	r3, [pc, #84]	; (8002084 <MX_TIM7_Init+0x64>)
 8002030:	4a15      	ldr	r2, [pc, #84]	; (8002088 <MX_TIM7_Init+0x68>)
 8002032:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 8;
 8002034:	4b13      	ldr	r3, [pc, #76]	; (8002084 <MX_TIM7_Init+0x64>)
 8002036:	2208      	movs	r2, #8
 8002038:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800203a:	4b12      	ldr	r3, [pc, #72]	; (8002084 <MX_TIM7_Init+0x64>)
 800203c:	2200      	movs	r2, #0
 800203e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 8002040:	4b10      	ldr	r3, [pc, #64]	; (8002084 <MX_TIM7_Init+0x64>)
 8002042:	f242 720f 	movw	r2, #9999	; 0x270f
 8002046:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002048:	4b0e      	ldr	r3, [pc, #56]	; (8002084 <MX_TIM7_Init+0x64>)
 800204a:	2280      	movs	r2, #128	; 0x80
 800204c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800204e:	480d      	ldr	r0, [pc, #52]	; (8002084 <MX_TIM7_Init+0x64>)
 8002050:	f001 fe34 	bl	8003cbc <HAL_TIM_Base_Init>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 800205a:	f7ff fe3b 	bl	8001cd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800205e:	2300      	movs	r3, #0
 8002060:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002062:	2300      	movs	r3, #0
 8002064:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002066:	463b      	mov	r3, r7
 8002068:	4619      	mov	r1, r3
 800206a:	4806      	ldr	r0, [pc, #24]	; (8002084 <MX_TIM7_Init+0x64>)
 800206c:	f002 f850 	bl	8004110 <HAL_TIMEx_MasterConfigSynchronization>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d001      	beq.n	800207a <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8002076:	f7ff fe2d 	bl	8001cd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800207a:	bf00      	nop
 800207c:	3708      	adds	r7, #8
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	20002460 	.word	0x20002460
 8002088:	40001400 	.word	0x40001400

0800208c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b084      	sub	sp, #16
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a0e      	ldr	r2, [pc, #56]	; (80020d4 <HAL_TIM_Base_MspInit+0x48>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d115      	bne.n	80020ca <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 800209e:	2300      	movs	r3, #0
 80020a0:	60fb      	str	r3, [r7, #12]
 80020a2:	4b0d      	ldr	r3, [pc, #52]	; (80020d8 <HAL_TIM_Base_MspInit+0x4c>)
 80020a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a6:	4a0c      	ldr	r2, [pc, #48]	; (80020d8 <HAL_TIM_Base_MspInit+0x4c>)
 80020a8:	f043 0320 	orr.w	r3, r3, #32
 80020ac:	6413      	str	r3, [r2, #64]	; 0x40
 80020ae:	4b0a      	ldr	r3, [pc, #40]	; (80020d8 <HAL_TIM_Base_MspInit+0x4c>)
 80020b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b2:	f003 0320 	and.w	r3, r3, #32
 80020b6:	60fb      	str	r3, [r7, #12]
 80020b8:	68fb      	ldr	r3, [r7, #12]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80020ba:	2200      	movs	r2, #0
 80020bc:	2100      	movs	r1, #0
 80020be:	2037      	movs	r0, #55	; 0x37
 80020c0:	f000 fa21 	bl	8002506 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80020c4:	2037      	movs	r0, #55	; 0x37
 80020c6:	f000 fa3a 	bl	800253e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 80020ca:	bf00      	nop
 80020cc:	3710      	adds	r7, #16
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	40001400 	.word	0x40001400
 80020d8:	40023800 	.word	0x40023800

080020dc <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80020e0:	4b11      	ldr	r3, [pc, #68]	; (8002128 <MX_USART3_UART_Init+0x4c>)
 80020e2:	4a12      	ldr	r2, [pc, #72]	; (800212c <MX_USART3_UART_Init+0x50>)
 80020e4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80020e6:	4b10      	ldr	r3, [pc, #64]	; (8002128 <MX_USART3_UART_Init+0x4c>)
 80020e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80020ec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80020ee:	4b0e      	ldr	r3, [pc, #56]	; (8002128 <MX_USART3_UART_Init+0x4c>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80020f4:	4b0c      	ldr	r3, [pc, #48]	; (8002128 <MX_USART3_UART_Init+0x4c>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80020fa:	4b0b      	ldr	r3, [pc, #44]	; (8002128 <MX_USART3_UART_Init+0x4c>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002100:	4b09      	ldr	r3, [pc, #36]	; (8002128 <MX_USART3_UART_Init+0x4c>)
 8002102:	220c      	movs	r2, #12
 8002104:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002106:	4b08      	ldr	r3, [pc, #32]	; (8002128 <MX_USART3_UART_Init+0x4c>)
 8002108:	2200      	movs	r2, #0
 800210a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800210c:	4b06      	ldr	r3, [pc, #24]	; (8002128 <MX_USART3_UART_Init+0x4c>)
 800210e:	2200      	movs	r2, #0
 8002110:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002112:	4805      	ldr	r0, [pc, #20]	; (8002128 <MX_USART3_UART_Init+0x4c>)
 8002114:	f002 f88c 	bl	8004230 <HAL_UART_Init>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800211e:	f7ff fdd9 	bl	8001cd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002122:	bf00      	nop
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	200024a8 	.word	0x200024a8
 800212c:	40004800 	.word	0x40004800

08002130 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b08a      	sub	sp, #40	; 0x28
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002138:	f107 0314 	add.w	r3, r7, #20
 800213c:	2200      	movs	r2, #0
 800213e:	601a      	str	r2, [r3, #0]
 8002140:	605a      	str	r2, [r3, #4]
 8002142:	609a      	str	r2, [r3, #8]
 8002144:	60da      	str	r2, [r3, #12]
 8002146:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a1d      	ldr	r2, [pc, #116]	; (80021c4 <HAL_UART_MspInit+0x94>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d134      	bne.n	80021bc <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002152:	2300      	movs	r3, #0
 8002154:	613b      	str	r3, [r7, #16]
 8002156:	4b1c      	ldr	r3, [pc, #112]	; (80021c8 <HAL_UART_MspInit+0x98>)
 8002158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215a:	4a1b      	ldr	r2, [pc, #108]	; (80021c8 <HAL_UART_MspInit+0x98>)
 800215c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002160:	6413      	str	r3, [r2, #64]	; 0x40
 8002162:	4b19      	ldr	r3, [pc, #100]	; (80021c8 <HAL_UART_MspInit+0x98>)
 8002164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002166:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800216a:	613b      	str	r3, [r7, #16]
 800216c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800216e:	2300      	movs	r3, #0
 8002170:	60fb      	str	r3, [r7, #12]
 8002172:	4b15      	ldr	r3, [pc, #84]	; (80021c8 <HAL_UART_MspInit+0x98>)
 8002174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002176:	4a14      	ldr	r2, [pc, #80]	; (80021c8 <HAL_UART_MspInit+0x98>)
 8002178:	f043 0302 	orr.w	r3, r3, #2
 800217c:	6313      	str	r3, [r2, #48]	; 0x30
 800217e:	4b12      	ldr	r3, [pc, #72]	; (80021c8 <HAL_UART_MspInit+0x98>)
 8002180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002182:	f003 0302 	and.w	r3, r3, #2
 8002186:	60fb      	str	r3, [r7, #12]
 8002188:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800218a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800218e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002190:	2302      	movs	r3, #2
 8002192:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002194:	2300      	movs	r3, #0
 8002196:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002198:	2303      	movs	r3, #3
 800219a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800219c:	2307      	movs	r3, #7
 800219e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021a0:	f107 0314 	add.w	r3, r7, #20
 80021a4:	4619      	mov	r1, r3
 80021a6:	4809      	ldr	r0, [pc, #36]	; (80021cc <HAL_UART_MspInit+0x9c>)
 80021a8:	f000 fa82 	bl	80026b0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80021ac:	2200      	movs	r2, #0
 80021ae:	2100      	movs	r1, #0
 80021b0:	2027      	movs	r0, #39	; 0x27
 80021b2:	f000 f9a8 	bl	8002506 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80021b6:	2027      	movs	r0, #39	; 0x27
 80021b8:	f000 f9c1 	bl	800253e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80021bc:	bf00      	nop
 80021be:	3728      	adds	r7, #40	; 0x28
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	40004800 	.word	0x40004800
 80021c8:	40023800 	.word	0x40023800
 80021cc:	40020400 	.word	0x40020400

080021d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80021d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002208 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80021d4:	480d      	ldr	r0, [pc, #52]	; (800220c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80021d6:	490e      	ldr	r1, [pc, #56]	; (8002210 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80021d8:	4a0e      	ldr	r2, [pc, #56]	; (8002214 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80021da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021dc:	e002      	b.n	80021e4 <LoopCopyDataInit>

080021de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021e2:	3304      	adds	r3, #4

080021e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021e8:	d3f9      	bcc.n	80021de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021ea:	4a0b      	ldr	r2, [pc, #44]	; (8002218 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80021ec:	4c0b      	ldr	r4, [pc, #44]	; (800221c <LoopFillZerobss+0x26>)
  movs r3, #0
 80021ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021f0:	e001      	b.n	80021f6 <LoopFillZerobss>

080021f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021f4:	3204      	adds	r2, #4

080021f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021f8:	d3fb      	bcc.n	80021f2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80021fa:	f7ff feff 	bl	8001ffc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80021fe:	f006 fb7b 	bl	80088f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002202:	f7ff fa35 	bl	8001670 <main>
  bx  lr    
 8002206:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002208:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800220c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002210:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8002214:	0800a588 	.word	0x0800a588
  ldr r2, =_sbss
 8002218:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 800221c:	20004570 	.word	0x20004570

08002220 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002220:	e7fe      	b.n	8002220 <ADC_IRQHandler>
	...

08002224 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002228:	4b0e      	ldr	r3, [pc, #56]	; (8002264 <HAL_Init+0x40>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a0d      	ldr	r2, [pc, #52]	; (8002264 <HAL_Init+0x40>)
 800222e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002232:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002234:	4b0b      	ldr	r3, [pc, #44]	; (8002264 <HAL_Init+0x40>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a0a      	ldr	r2, [pc, #40]	; (8002264 <HAL_Init+0x40>)
 800223a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800223e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002240:	4b08      	ldr	r3, [pc, #32]	; (8002264 <HAL_Init+0x40>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a07      	ldr	r2, [pc, #28]	; (8002264 <HAL_Init+0x40>)
 8002246:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800224a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800224c:	2003      	movs	r0, #3
 800224e:	f000 f94f 	bl	80024f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002252:	200f      	movs	r0, #15
 8002254:	f000 f808 	bl	8002268 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002258:	f7ff fdc0 	bl	8001ddc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800225c:	2300      	movs	r3, #0
}
 800225e:	4618      	mov	r0, r3
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	40023c00 	.word	0x40023c00

08002268 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002270:	4b12      	ldr	r3, [pc, #72]	; (80022bc <HAL_InitTick+0x54>)
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	4b12      	ldr	r3, [pc, #72]	; (80022c0 <HAL_InitTick+0x58>)
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	4619      	mov	r1, r3
 800227a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800227e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002282:	fbb2 f3f3 	udiv	r3, r2, r3
 8002286:	4618      	mov	r0, r3
 8002288:	f000 f967 	bl	800255a <HAL_SYSTICK_Config>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d001      	beq.n	8002296 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e00e      	b.n	80022b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2b0f      	cmp	r3, #15
 800229a:	d80a      	bhi.n	80022b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800229c:	2200      	movs	r2, #0
 800229e:	6879      	ldr	r1, [r7, #4]
 80022a0:	f04f 30ff 	mov.w	r0, #4294967295
 80022a4:	f000 f92f 	bl	8002506 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022a8:	4a06      	ldr	r2, [pc, #24]	; (80022c4 <HAL_InitTick+0x5c>)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022ae:	2300      	movs	r3, #0
 80022b0:	e000      	b.n	80022b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	3708      	adds	r7, #8
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	20000004 	.word	0x20000004
 80022c0:	2000000c 	.word	0x2000000c
 80022c4:	20000008 	.word	0x20000008

080022c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022c8:	b480      	push	{r7}
 80022ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022cc:	4b06      	ldr	r3, [pc, #24]	; (80022e8 <HAL_IncTick+0x20>)
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	461a      	mov	r2, r3
 80022d2:	4b06      	ldr	r3, [pc, #24]	; (80022ec <HAL_IncTick+0x24>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4413      	add	r3, r2
 80022d8:	4a04      	ldr	r2, [pc, #16]	; (80022ec <HAL_IncTick+0x24>)
 80022da:	6013      	str	r3, [r2, #0]
}
 80022dc:	bf00      	nop
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	2000000c 	.word	0x2000000c
 80022ec:	200024ec 	.word	0x200024ec

080022f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0
  return uwTick;
 80022f4:	4b03      	ldr	r3, [pc, #12]	; (8002304 <HAL_GetTick+0x14>)
 80022f6:	681b      	ldr	r3, [r3, #0]
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop
 8002304:	200024ec 	.word	0x200024ec

08002308 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b084      	sub	sp, #16
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002310:	f7ff ffee 	bl	80022f0 <HAL_GetTick>
 8002314:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002320:	d005      	beq.n	800232e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002322:	4b0a      	ldr	r3, [pc, #40]	; (800234c <HAL_Delay+0x44>)
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	461a      	mov	r2, r3
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	4413      	add	r3, r2
 800232c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800232e:	bf00      	nop
 8002330:	f7ff ffde 	bl	80022f0 <HAL_GetTick>
 8002334:	4602      	mov	r2, r0
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	68fa      	ldr	r2, [r7, #12]
 800233c:	429a      	cmp	r2, r3
 800233e:	d8f7      	bhi.n	8002330 <HAL_Delay+0x28>
  {
  }
}
 8002340:	bf00      	nop
 8002342:	bf00      	nop
 8002344:	3710      	adds	r7, #16
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	2000000c 	.word	0x2000000c

08002350 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002350:	b480      	push	{r7}
 8002352:	b085      	sub	sp, #20
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	f003 0307 	and.w	r3, r3, #7
 800235e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002360:	4b0c      	ldr	r3, [pc, #48]	; (8002394 <__NVIC_SetPriorityGrouping+0x44>)
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002366:	68ba      	ldr	r2, [r7, #8]
 8002368:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800236c:	4013      	ands	r3, r2
 800236e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002378:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800237c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002380:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002382:	4a04      	ldr	r2, [pc, #16]	; (8002394 <__NVIC_SetPriorityGrouping+0x44>)
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	60d3      	str	r3, [r2, #12]
}
 8002388:	bf00      	nop
 800238a:	3714      	adds	r7, #20
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr
 8002394:	e000ed00 	.word	0xe000ed00

08002398 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800239c:	4b04      	ldr	r3, [pc, #16]	; (80023b0 <__NVIC_GetPriorityGrouping+0x18>)
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	0a1b      	lsrs	r3, r3, #8
 80023a2:	f003 0307 	and.w	r3, r3, #7
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr
 80023b0:	e000ed00 	.word	0xe000ed00

080023b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	4603      	mov	r3, r0
 80023bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	db0b      	blt.n	80023de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023c6:	79fb      	ldrb	r3, [r7, #7]
 80023c8:	f003 021f 	and.w	r2, r3, #31
 80023cc:	4907      	ldr	r1, [pc, #28]	; (80023ec <__NVIC_EnableIRQ+0x38>)
 80023ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d2:	095b      	lsrs	r3, r3, #5
 80023d4:	2001      	movs	r0, #1
 80023d6:	fa00 f202 	lsl.w	r2, r0, r2
 80023da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023de:	bf00      	nop
 80023e0:	370c      	adds	r7, #12
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	e000e100 	.word	0xe000e100

080023f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	4603      	mov	r3, r0
 80023f8:	6039      	str	r1, [r7, #0]
 80023fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002400:	2b00      	cmp	r3, #0
 8002402:	db0a      	blt.n	800241a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	b2da      	uxtb	r2, r3
 8002408:	490c      	ldr	r1, [pc, #48]	; (800243c <__NVIC_SetPriority+0x4c>)
 800240a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800240e:	0112      	lsls	r2, r2, #4
 8002410:	b2d2      	uxtb	r2, r2
 8002412:	440b      	add	r3, r1
 8002414:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002418:	e00a      	b.n	8002430 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	b2da      	uxtb	r2, r3
 800241e:	4908      	ldr	r1, [pc, #32]	; (8002440 <__NVIC_SetPriority+0x50>)
 8002420:	79fb      	ldrb	r3, [r7, #7]
 8002422:	f003 030f 	and.w	r3, r3, #15
 8002426:	3b04      	subs	r3, #4
 8002428:	0112      	lsls	r2, r2, #4
 800242a:	b2d2      	uxtb	r2, r2
 800242c:	440b      	add	r3, r1
 800242e:	761a      	strb	r2, [r3, #24]
}
 8002430:	bf00      	nop
 8002432:	370c      	adds	r7, #12
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr
 800243c:	e000e100 	.word	0xe000e100
 8002440:	e000ed00 	.word	0xe000ed00

08002444 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002444:	b480      	push	{r7}
 8002446:	b089      	sub	sp, #36	; 0x24
 8002448:	af00      	add	r7, sp, #0
 800244a:	60f8      	str	r0, [r7, #12]
 800244c:	60b9      	str	r1, [r7, #8]
 800244e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	f003 0307 	and.w	r3, r3, #7
 8002456:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	f1c3 0307 	rsb	r3, r3, #7
 800245e:	2b04      	cmp	r3, #4
 8002460:	bf28      	it	cs
 8002462:	2304      	movcs	r3, #4
 8002464:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	3304      	adds	r3, #4
 800246a:	2b06      	cmp	r3, #6
 800246c:	d902      	bls.n	8002474 <NVIC_EncodePriority+0x30>
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	3b03      	subs	r3, #3
 8002472:	e000      	b.n	8002476 <NVIC_EncodePriority+0x32>
 8002474:	2300      	movs	r3, #0
 8002476:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002478:	f04f 32ff 	mov.w	r2, #4294967295
 800247c:	69bb      	ldr	r3, [r7, #24]
 800247e:	fa02 f303 	lsl.w	r3, r2, r3
 8002482:	43da      	mvns	r2, r3
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	401a      	ands	r2, r3
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800248c:	f04f 31ff 	mov.w	r1, #4294967295
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	fa01 f303 	lsl.w	r3, r1, r3
 8002496:	43d9      	mvns	r1, r3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800249c:	4313      	orrs	r3, r2
         );
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3724      	adds	r7, #36	; 0x24
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr
	...

080024ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	3b01      	subs	r3, #1
 80024b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024bc:	d301      	bcc.n	80024c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024be:	2301      	movs	r3, #1
 80024c0:	e00f      	b.n	80024e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024c2:	4a0a      	ldr	r2, [pc, #40]	; (80024ec <SysTick_Config+0x40>)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	3b01      	subs	r3, #1
 80024c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024ca:	210f      	movs	r1, #15
 80024cc:	f04f 30ff 	mov.w	r0, #4294967295
 80024d0:	f7ff ff8e 	bl	80023f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024d4:	4b05      	ldr	r3, [pc, #20]	; (80024ec <SysTick_Config+0x40>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024da:	4b04      	ldr	r3, [pc, #16]	; (80024ec <SysTick_Config+0x40>)
 80024dc:	2207      	movs	r2, #7
 80024de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024e0:	2300      	movs	r3, #0
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3708      	adds	r7, #8
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	e000e010 	.word	0xe000e010

080024f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	f7ff ff29 	bl	8002350 <__NVIC_SetPriorityGrouping>
}
 80024fe:	bf00      	nop
 8002500:	3708      	adds	r7, #8
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}

08002506 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002506:	b580      	push	{r7, lr}
 8002508:	b086      	sub	sp, #24
 800250a:	af00      	add	r7, sp, #0
 800250c:	4603      	mov	r3, r0
 800250e:	60b9      	str	r1, [r7, #8]
 8002510:	607a      	str	r2, [r7, #4]
 8002512:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002514:	2300      	movs	r3, #0
 8002516:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002518:	f7ff ff3e 	bl	8002398 <__NVIC_GetPriorityGrouping>
 800251c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	68b9      	ldr	r1, [r7, #8]
 8002522:	6978      	ldr	r0, [r7, #20]
 8002524:	f7ff ff8e 	bl	8002444 <NVIC_EncodePriority>
 8002528:	4602      	mov	r2, r0
 800252a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800252e:	4611      	mov	r1, r2
 8002530:	4618      	mov	r0, r3
 8002532:	f7ff ff5d 	bl	80023f0 <__NVIC_SetPriority>
}
 8002536:	bf00      	nop
 8002538:	3718      	adds	r7, #24
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}

0800253e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800253e:	b580      	push	{r7, lr}
 8002540:	b082      	sub	sp, #8
 8002542:	af00      	add	r7, sp, #0
 8002544:	4603      	mov	r3, r0
 8002546:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002548:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800254c:	4618      	mov	r0, r3
 800254e:	f7ff ff31 	bl	80023b4 <__NVIC_EnableIRQ>
}
 8002552:	bf00      	nop
 8002554:	3708      	adds	r7, #8
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}

0800255a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800255a:	b580      	push	{r7, lr}
 800255c:	b082      	sub	sp, #8
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f7ff ffa2 	bl	80024ac <SysTick_Config>
 8002568:	4603      	mov	r3, r0
}
 800256a:	4618      	mov	r0, r3
 800256c:	3708      	adds	r7, #8
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}

08002572 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8002572:	b580      	push	{r7, lr}
 8002574:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8002576:	f000 f802 	bl	800257e <HAL_SYSTICK_Callback>
}
 800257a:	bf00      	nop
 800257c:	bd80      	pop	{r7, pc}

0800257e <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 800257e:	b480      	push	{r7}
 8002580:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8002582:	bf00      	nop
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr

0800258c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002598:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800259a:	f7ff fea9 	bl	80022f0 <HAL_GetTick>
 800259e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	2b02      	cmp	r3, #2
 80025aa:	d008      	beq.n	80025be <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2280      	movs	r2, #128	; 0x80
 80025b0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2200      	movs	r2, #0
 80025b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e052      	b.n	8002664 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f022 0216 	bic.w	r2, r2, #22
 80025cc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	695a      	ldr	r2, [r3, #20]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025dc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d103      	bne.n	80025ee <HAL_DMA_Abort+0x62>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d007      	beq.n	80025fe <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f022 0208 	bic.w	r2, r2, #8
 80025fc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f022 0201 	bic.w	r2, r2, #1
 800260c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800260e:	e013      	b.n	8002638 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002610:	f7ff fe6e 	bl	80022f0 <HAL_GetTick>
 8002614:	4602      	mov	r2, r0
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	2b05      	cmp	r3, #5
 800261c:	d90c      	bls.n	8002638 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2220      	movs	r2, #32
 8002622:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2203      	movs	r2, #3
 8002628:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2200      	movs	r2, #0
 8002630:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002634:	2303      	movs	r3, #3
 8002636:	e015      	b.n	8002664 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0301 	and.w	r3, r3, #1
 8002642:	2b00      	cmp	r3, #0
 8002644:	d1e4      	bne.n	8002610 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800264a:	223f      	movs	r2, #63	; 0x3f
 800264c:	409a      	lsls	r2, r3
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2201      	movs	r2, #1
 8002656:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2200      	movs	r2, #0
 800265e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002662:	2300      	movs	r3, #0
}
 8002664:	4618      	mov	r0, r3
 8002666:	3710      	adds	r7, #16
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}

0800266c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800267a:	b2db      	uxtb	r3, r3
 800267c:	2b02      	cmp	r3, #2
 800267e:	d004      	beq.n	800268a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2280      	movs	r2, #128	; 0x80
 8002684:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e00c      	b.n	80026a4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2205      	movs	r2, #5
 800268e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f022 0201 	bic.w	r2, r2, #1
 80026a0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80026a2:	2300      	movs	r3, #0
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	370c      	adds	r7, #12
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr

080026b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b089      	sub	sp, #36	; 0x24
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80026ba:	2300      	movs	r3, #0
 80026bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80026be:	2300      	movs	r3, #0
 80026c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80026c2:	2300      	movs	r3, #0
 80026c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026c6:	2300      	movs	r3, #0
 80026c8:	61fb      	str	r3, [r7, #28]
 80026ca:	e177      	b.n	80029bc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80026cc:	2201      	movs	r2, #1
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	fa02 f303 	lsl.w	r3, r2, r3
 80026d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	697a      	ldr	r2, [r7, #20]
 80026dc:	4013      	ands	r3, r2
 80026de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026e0:	693a      	ldr	r2, [r7, #16]
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	f040 8166 	bne.w	80029b6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	f003 0303 	and.w	r3, r3, #3
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d005      	beq.n	8002702 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026fe:	2b02      	cmp	r3, #2
 8002700:	d130      	bne.n	8002764 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	005b      	lsls	r3, r3, #1
 800270c:	2203      	movs	r2, #3
 800270e:	fa02 f303 	lsl.w	r3, r2, r3
 8002712:	43db      	mvns	r3, r3
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	4013      	ands	r3, r2
 8002718:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	68da      	ldr	r2, [r3, #12]
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	005b      	lsls	r3, r3, #1
 8002722:	fa02 f303 	lsl.w	r3, r2, r3
 8002726:	69ba      	ldr	r2, [r7, #24]
 8002728:	4313      	orrs	r3, r2
 800272a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	69ba      	ldr	r2, [r7, #24]
 8002730:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002738:	2201      	movs	r2, #1
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	fa02 f303 	lsl.w	r3, r2, r3
 8002740:	43db      	mvns	r3, r3
 8002742:	69ba      	ldr	r2, [r7, #24]
 8002744:	4013      	ands	r3, r2
 8002746:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	091b      	lsrs	r3, r3, #4
 800274e:	f003 0201 	and.w	r2, r3, #1
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	fa02 f303 	lsl.w	r3, r2, r3
 8002758:	69ba      	ldr	r2, [r7, #24]
 800275a:	4313      	orrs	r3, r2
 800275c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	69ba      	ldr	r2, [r7, #24]
 8002762:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f003 0303 	and.w	r3, r3, #3
 800276c:	2b03      	cmp	r3, #3
 800276e:	d017      	beq.n	80027a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	005b      	lsls	r3, r3, #1
 800277a:	2203      	movs	r2, #3
 800277c:	fa02 f303 	lsl.w	r3, r2, r3
 8002780:	43db      	mvns	r3, r3
 8002782:	69ba      	ldr	r2, [r7, #24]
 8002784:	4013      	ands	r3, r2
 8002786:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	689a      	ldr	r2, [r3, #8]
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	005b      	lsls	r3, r3, #1
 8002790:	fa02 f303 	lsl.w	r3, r2, r3
 8002794:	69ba      	ldr	r2, [r7, #24]
 8002796:	4313      	orrs	r3, r2
 8002798:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	69ba      	ldr	r2, [r7, #24]
 800279e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f003 0303 	and.w	r3, r3, #3
 80027a8:	2b02      	cmp	r3, #2
 80027aa:	d123      	bne.n	80027f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	08da      	lsrs	r2, r3, #3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	3208      	adds	r2, #8
 80027b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	f003 0307 	and.w	r3, r3, #7
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	220f      	movs	r2, #15
 80027c4:	fa02 f303 	lsl.w	r3, r2, r3
 80027c8:	43db      	mvns	r3, r3
 80027ca:	69ba      	ldr	r2, [r7, #24]
 80027cc:	4013      	ands	r3, r2
 80027ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	691a      	ldr	r2, [r3, #16]
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	f003 0307 	and.w	r3, r3, #7
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	fa02 f303 	lsl.w	r3, r2, r3
 80027e0:	69ba      	ldr	r2, [r7, #24]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	08da      	lsrs	r2, r3, #3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	3208      	adds	r2, #8
 80027ee:	69b9      	ldr	r1, [r7, #24]
 80027f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	005b      	lsls	r3, r3, #1
 80027fe:	2203      	movs	r2, #3
 8002800:	fa02 f303 	lsl.w	r3, r2, r3
 8002804:	43db      	mvns	r3, r3
 8002806:	69ba      	ldr	r2, [r7, #24]
 8002808:	4013      	ands	r3, r2
 800280a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f003 0203 	and.w	r2, r3, #3
 8002814:	69fb      	ldr	r3, [r7, #28]
 8002816:	005b      	lsls	r3, r3, #1
 8002818:	fa02 f303 	lsl.w	r3, r2, r3
 800281c:	69ba      	ldr	r2, [r7, #24]
 800281e:	4313      	orrs	r3, r2
 8002820:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	69ba      	ldr	r2, [r7, #24]
 8002826:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002830:	2b00      	cmp	r3, #0
 8002832:	f000 80c0 	beq.w	80029b6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002836:	2300      	movs	r3, #0
 8002838:	60fb      	str	r3, [r7, #12]
 800283a:	4b66      	ldr	r3, [pc, #408]	; (80029d4 <HAL_GPIO_Init+0x324>)
 800283c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800283e:	4a65      	ldr	r2, [pc, #404]	; (80029d4 <HAL_GPIO_Init+0x324>)
 8002840:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002844:	6453      	str	r3, [r2, #68]	; 0x44
 8002846:	4b63      	ldr	r3, [pc, #396]	; (80029d4 <HAL_GPIO_Init+0x324>)
 8002848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800284a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800284e:	60fb      	str	r3, [r7, #12]
 8002850:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002852:	4a61      	ldr	r2, [pc, #388]	; (80029d8 <HAL_GPIO_Init+0x328>)
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	089b      	lsrs	r3, r3, #2
 8002858:	3302      	adds	r3, #2
 800285a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800285e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	f003 0303 	and.w	r3, r3, #3
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	220f      	movs	r2, #15
 800286a:	fa02 f303 	lsl.w	r3, r2, r3
 800286e:	43db      	mvns	r3, r3
 8002870:	69ba      	ldr	r2, [r7, #24]
 8002872:	4013      	ands	r3, r2
 8002874:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4a58      	ldr	r2, [pc, #352]	; (80029dc <HAL_GPIO_Init+0x32c>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d037      	beq.n	80028ee <HAL_GPIO_Init+0x23e>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4a57      	ldr	r2, [pc, #348]	; (80029e0 <HAL_GPIO_Init+0x330>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d031      	beq.n	80028ea <HAL_GPIO_Init+0x23a>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4a56      	ldr	r2, [pc, #344]	; (80029e4 <HAL_GPIO_Init+0x334>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d02b      	beq.n	80028e6 <HAL_GPIO_Init+0x236>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4a55      	ldr	r2, [pc, #340]	; (80029e8 <HAL_GPIO_Init+0x338>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d025      	beq.n	80028e2 <HAL_GPIO_Init+0x232>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	4a54      	ldr	r2, [pc, #336]	; (80029ec <HAL_GPIO_Init+0x33c>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d01f      	beq.n	80028de <HAL_GPIO_Init+0x22e>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	4a53      	ldr	r2, [pc, #332]	; (80029f0 <HAL_GPIO_Init+0x340>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d019      	beq.n	80028da <HAL_GPIO_Init+0x22a>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4a52      	ldr	r2, [pc, #328]	; (80029f4 <HAL_GPIO_Init+0x344>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d013      	beq.n	80028d6 <HAL_GPIO_Init+0x226>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4a51      	ldr	r2, [pc, #324]	; (80029f8 <HAL_GPIO_Init+0x348>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d00d      	beq.n	80028d2 <HAL_GPIO_Init+0x222>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4a50      	ldr	r2, [pc, #320]	; (80029fc <HAL_GPIO_Init+0x34c>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d007      	beq.n	80028ce <HAL_GPIO_Init+0x21e>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	4a4f      	ldr	r2, [pc, #316]	; (8002a00 <HAL_GPIO_Init+0x350>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d101      	bne.n	80028ca <HAL_GPIO_Init+0x21a>
 80028c6:	2309      	movs	r3, #9
 80028c8:	e012      	b.n	80028f0 <HAL_GPIO_Init+0x240>
 80028ca:	230a      	movs	r3, #10
 80028cc:	e010      	b.n	80028f0 <HAL_GPIO_Init+0x240>
 80028ce:	2308      	movs	r3, #8
 80028d0:	e00e      	b.n	80028f0 <HAL_GPIO_Init+0x240>
 80028d2:	2307      	movs	r3, #7
 80028d4:	e00c      	b.n	80028f0 <HAL_GPIO_Init+0x240>
 80028d6:	2306      	movs	r3, #6
 80028d8:	e00a      	b.n	80028f0 <HAL_GPIO_Init+0x240>
 80028da:	2305      	movs	r3, #5
 80028dc:	e008      	b.n	80028f0 <HAL_GPIO_Init+0x240>
 80028de:	2304      	movs	r3, #4
 80028e0:	e006      	b.n	80028f0 <HAL_GPIO_Init+0x240>
 80028e2:	2303      	movs	r3, #3
 80028e4:	e004      	b.n	80028f0 <HAL_GPIO_Init+0x240>
 80028e6:	2302      	movs	r3, #2
 80028e8:	e002      	b.n	80028f0 <HAL_GPIO_Init+0x240>
 80028ea:	2301      	movs	r3, #1
 80028ec:	e000      	b.n	80028f0 <HAL_GPIO_Init+0x240>
 80028ee:	2300      	movs	r3, #0
 80028f0:	69fa      	ldr	r2, [r7, #28]
 80028f2:	f002 0203 	and.w	r2, r2, #3
 80028f6:	0092      	lsls	r2, r2, #2
 80028f8:	4093      	lsls	r3, r2
 80028fa:	69ba      	ldr	r2, [r7, #24]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002900:	4935      	ldr	r1, [pc, #212]	; (80029d8 <HAL_GPIO_Init+0x328>)
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	089b      	lsrs	r3, r3, #2
 8002906:	3302      	adds	r3, #2
 8002908:	69ba      	ldr	r2, [r7, #24]
 800290a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800290e:	4b3d      	ldr	r3, [pc, #244]	; (8002a04 <HAL_GPIO_Init+0x354>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	43db      	mvns	r3, r3
 8002918:	69ba      	ldr	r2, [r7, #24]
 800291a:	4013      	ands	r3, r2
 800291c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d003      	beq.n	8002932 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800292a:	69ba      	ldr	r2, [r7, #24]
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	4313      	orrs	r3, r2
 8002930:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002932:	4a34      	ldr	r2, [pc, #208]	; (8002a04 <HAL_GPIO_Init+0x354>)
 8002934:	69bb      	ldr	r3, [r7, #24]
 8002936:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002938:	4b32      	ldr	r3, [pc, #200]	; (8002a04 <HAL_GPIO_Init+0x354>)
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	43db      	mvns	r3, r3
 8002942:	69ba      	ldr	r2, [r7, #24]
 8002944:	4013      	ands	r3, r2
 8002946:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002950:	2b00      	cmp	r3, #0
 8002952:	d003      	beq.n	800295c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002954:	69ba      	ldr	r2, [r7, #24]
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	4313      	orrs	r3, r2
 800295a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800295c:	4a29      	ldr	r2, [pc, #164]	; (8002a04 <HAL_GPIO_Init+0x354>)
 800295e:	69bb      	ldr	r3, [r7, #24]
 8002960:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002962:	4b28      	ldr	r3, [pc, #160]	; (8002a04 <HAL_GPIO_Init+0x354>)
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	43db      	mvns	r3, r3
 800296c:	69ba      	ldr	r2, [r7, #24]
 800296e:	4013      	ands	r3, r2
 8002970:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d003      	beq.n	8002986 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800297e:	69ba      	ldr	r2, [r7, #24]
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	4313      	orrs	r3, r2
 8002984:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002986:	4a1f      	ldr	r2, [pc, #124]	; (8002a04 <HAL_GPIO_Init+0x354>)
 8002988:	69bb      	ldr	r3, [r7, #24]
 800298a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800298c:	4b1d      	ldr	r3, [pc, #116]	; (8002a04 <HAL_GPIO_Init+0x354>)
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	43db      	mvns	r3, r3
 8002996:	69ba      	ldr	r2, [r7, #24]
 8002998:	4013      	ands	r3, r2
 800299a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d003      	beq.n	80029b0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80029a8:	69ba      	ldr	r2, [r7, #24]
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80029b0:	4a14      	ldr	r2, [pc, #80]	; (8002a04 <HAL_GPIO_Init+0x354>)
 80029b2:	69bb      	ldr	r3, [r7, #24]
 80029b4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	3301      	adds	r3, #1
 80029ba:	61fb      	str	r3, [r7, #28]
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	2b0f      	cmp	r3, #15
 80029c0:	f67f ae84 	bls.w	80026cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80029c4:	bf00      	nop
 80029c6:	bf00      	nop
 80029c8:	3724      	adds	r7, #36	; 0x24
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr
 80029d2:	bf00      	nop
 80029d4:	40023800 	.word	0x40023800
 80029d8:	40013800 	.word	0x40013800
 80029dc:	40020000 	.word	0x40020000
 80029e0:	40020400 	.word	0x40020400
 80029e4:	40020800 	.word	0x40020800
 80029e8:	40020c00 	.word	0x40020c00
 80029ec:	40021000 	.word	0x40021000
 80029f0:	40021400 	.word	0x40021400
 80029f4:	40021800 	.word	0x40021800
 80029f8:	40021c00 	.word	0x40021c00
 80029fc:	40022000 	.word	0x40022000
 8002a00:	40022400 	.word	0x40022400
 8002a04:	40013c00 	.word	0x40013c00

08002a08 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b085      	sub	sp, #20
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
 8002a10:	460b      	mov	r3, r1
 8002a12:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	691a      	ldr	r2, [r3, #16]
 8002a18:	887b      	ldrh	r3, [r7, #2]
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d002      	beq.n	8002a26 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002a20:	2301      	movs	r3, #1
 8002a22:	73fb      	strb	r3, [r7, #15]
 8002a24:	e001      	b.n	8002a2a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002a26:	2300      	movs	r3, #0
 8002a28:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002a2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	3714      	adds	r7, #20
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr

08002a38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	460b      	mov	r3, r1
 8002a42:	807b      	strh	r3, [r7, #2]
 8002a44:	4613      	mov	r3, r2
 8002a46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a48:	787b      	ldrb	r3, [r7, #1]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d003      	beq.n	8002a56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a4e:	887a      	ldrh	r2, [r7, #2]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a54:	e003      	b.n	8002a5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a56:	887b      	ldrh	r3, [r7, #2]
 8002a58:	041a      	lsls	r2, r3, #16
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	619a      	str	r2, [r3, #24]
}
 8002a5e:	bf00      	nop
 8002a60:	370c      	adds	r7, #12
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr

08002a6a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a6a:	b480      	push	{r7}
 8002a6c:	b085      	sub	sp, #20
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	6078      	str	r0, [r7, #4]
 8002a72:	460b      	mov	r3, r1
 8002a74:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	695b      	ldr	r3, [r3, #20]
 8002a7a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002a7c:	887a      	ldrh	r2, [r7, #2]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	4013      	ands	r3, r2
 8002a82:	041a      	lsls	r2, r3, #16
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	43d9      	mvns	r1, r3
 8002a88:	887b      	ldrh	r3, [r7, #2]
 8002a8a:	400b      	ands	r3, r1
 8002a8c:	431a      	orrs	r2, r3
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	619a      	str	r2, [r3, #24]
}
 8002a92:	bf00      	nop
 8002a94:	3714      	adds	r7, #20
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr
	...

08002aa0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002aaa:	4b08      	ldr	r3, [pc, #32]	; (8002acc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002aac:	695a      	ldr	r2, [r3, #20]
 8002aae:	88fb      	ldrh	r3, [r7, #6]
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d006      	beq.n	8002ac4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002ab6:	4a05      	ldr	r2, [pc, #20]	; (8002acc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ab8:	88fb      	ldrh	r3, [r7, #6]
 8002aba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002abc:	88fb      	ldrh	r3, [r7, #6]
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f7ff f8d0 	bl	8001c64 <HAL_GPIO_EXTI_Callback>
  }
}
 8002ac4:	bf00      	nop
 8002ac6:	3708      	adds	r7, #8
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	40013c00 	.word	0x40013c00

08002ad0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b082      	sub	sp, #8
 8002ad4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002ada:	2300      	movs	r3, #0
 8002adc:	603b      	str	r3, [r7, #0]
 8002ade:	4b20      	ldr	r3, [pc, #128]	; (8002b60 <HAL_PWREx_EnableOverDrive+0x90>)
 8002ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae2:	4a1f      	ldr	r2, [pc, #124]	; (8002b60 <HAL_PWREx_EnableOverDrive+0x90>)
 8002ae4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ae8:	6413      	str	r3, [r2, #64]	; 0x40
 8002aea:	4b1d      	ldr	r3, [pc, #116]	; (8002b60 <HAL_PWREx_EnableOverDrive+0x90>)
 8002aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002af2:	603b      	str	r3, [r7, #0]
 8002af4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002af6:	4b1b      	ldr	r3, [pc, #108]	; (8002b64 <HAL_PWREx_EnableOverDrive+0x94>)
 8002af8:	2201      	movs	r2, #1
 8002afa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002afc:	f7ff fbf8 	bl	80022f0 <HAL_GetTick>
 8002b00:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002b02:	e009      	b.n	8002b18 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002b04:	f7ff fbf4 	bl	80022f0 <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b12:	d901      	bls.n	8002b18 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002b14:	2303      	movs	r3, #3
 8002b16:	e01f      	b.n	8002b58 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002b18:	4b13      	ldr	r3, [pc, #76]	; (8002b68 <HAL_PWREx_EnableOverDrive+0x98>)
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b24:	d1ee      	bne.n	8002b04 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002b26:	4b11      	ldr	r3, [pc, #68]	; (8002b6c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b28:	2201      	movs	r2, #1
 8002b2a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b2c:	f7ff fbe0 	bl	80022f0 <HAL_GetTick>
 8002b30:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002b32:	e009      	b.n	8002b48 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002b34:	f7ff fbdc 	bl	80022f0 <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b42:	d901      	bls.n	8002b48 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002b44:	2303      	movs	r3, #3
 8002b46:	e007      	b.n	8002b58 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002b48:	4b07      	ldr	r3, [pc, #28]	; (8002b68 <HAL_PWREx_EnableOverDrive+0x98>)
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b50:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b54:	d1ee      	bne.n	8002b34 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002b56:	2300      	movs	r3, #0
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3708      	adds	r7, #8
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	40023800 	.word	0x40023800
 8002b64:	420e0040 	.word	0x420e0040
 8002b68:	40007000 	.word	0x40007000
 8002b6c:	420e0044 	.word	0x420e0044

08002b70 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b086      	sub	sp, #24
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d101      	bne.n	8002b82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e264      	b.n	800304c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0301 	and.w	r3, r3, #1
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d075      	beq.n	8002c7a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b8e:	4ba3      	ldr	r3, [pc, #652]	; (8002e1c <HAL_RCC_OscConfig+0x2ac>)
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	f003 030c 	and.w	r3, r3, #12
 8002b96:	2b04      	cmp	r3, #4
 8002b98:	d00c      	beq.n	8002bb4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b9a:	4ba0      	ldr	r3, [pc, #640]	; (8002e1c <HAL_RCC_OscConfig+0x2ac>)
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ba2:	2b08      	cmp	r3, #8
 8002ba4:	d112      	bne.n	8002bcc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ba6:	4b9d      	ldr	r3, [pc, #628]	; (8002e1c <HAL_RCC_OscConfig+0x2ac>)
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bb2:	d10b      	bne.n	8002bcc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bb4:	4b99      	ldr	r3, [pc, #612]	; (8002e1c <HAL_RCC_OscConfig+0x2ac>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d05b      	beq.n	8002c78 <HAL_RCC_OscConfig+0x108>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d157      	bne.n	8002c78 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e23f      	b.n	800304c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bd4:	d106      	bne.n	8002be4 <HAL_RCC_OscConfig+0x74>
 8002bd6:	4b91      	ldr	r3, [pc, #580]	; (8002e1c <HAL_RCC_OscConfig+0x2ac>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a90      	ldr	r2, [pc, #576]	; (8002e1c <HAL_RCC_OscConfig+0x2ac>)
 8002bdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002be0:	6013      	str	r3, [r2, #0]
 8002be2:	e01d      	b.n	8002c20 <HAL_RCC_OscConfig+0xb0>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bec:	d10c      	bne.n	8002c08 <HAL_RCC_OscConfig+0x98>
 8002bee:	4b8b      	ldr	r3, [pc, #556]	; (8002e1c <HAL_RCC_OscConfig+0x2ac>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a8a      	ldr	r2, [pc, #552]	; (8002e1c <HAL_RCC_OscConfig+0x2ac>)
 8002bf4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bf8:	6013      	str	r3, [r2, #0]
 8002bfa:	4b88      	ldr	r3, [pc, #544]	; (8002e1c <HAL_RCC_OscConfig+0x2ac>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a87      	ldr	r2, [pc, #540]	; (8002e1c <HAL_RCC_OscConfig+0x2ac>)
 8002c00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c04:	6013      	str	r3, [r2, #0]
 8002c06:	e00b      	b.n	8002c20 <HAL_RCC_OscConfig+0xb0>
 8002c08:	4b84      	ldr	r3, [pc, #528]	; (8002e1c <HAL_RCC_OscConfig+0x2ac>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a83      	ldr	r2, [pc, #524]	; (8002e1c <HAL_RCC_OscConfig+0x2ac>)
 8002c0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c12:	6013      	str	r3, [r2, #0]
 8002c14:	4b81      	ldr	r3, [pc, #516]	; (8002e1c <HAL_RCC_OscConfig+0x2ac>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a80      	ldr	r2, [pc, #512]	; (8002e1c <HAL_RCC_OscConfig+0x2ac>)
 8002c1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d013      	beq.n	8002c50 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c28:	f7ff fb62 	bl	80022f0 <HAL_GetTick>
 8002c2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c2e:	e008      	b.n	8002c42 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c30:	f7ff fb5e 	bl	80022f0 <HAL_GetTick>
 8002c34:	4602      	mov	r2, r0
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	2b64      	cmp	r3, #100	; 0x64
 8002c3c:	d901      	bls.n	8002c42 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c3e:	2303      	movs	r3, #3
 8002c40:	e204      	b.n	800304c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c42:	4b76      	ldr	r3, [pc, #472]	; (8002e1c <HAL_RCC_OscConfig+0x2ac>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d0f0      	beq.n	8002c30 <HAL_RCC_OscConfig+0xc0>
 8002c4e:	e014      	b.n	8002c7a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c50:	f7ff fb4e 	bl	80022f0 <HAL_GetTick>
 8002c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c56:	e008      	b.n	8002c6a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c58:	f7ff fb4a 	bl	80022f0 <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	2b64      	cmp	r3, #100	; 0x64
 8002c64:	d901      	bls.n	8002c6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e1f0      	b.n	800304c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c6a:	4b6c      	ldr	r3, [pc, #432]	; (8002e1c <HAL_RCC_OscConfig+0x2ac>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d1f0      	bne.n	8002c58 <HAL_RCC_OscConfig+0xe8>
 8002c76:	e000      	b.n	8002c7a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 0302 	and.w	r3, r3, #2
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d063      	beq.n	8002d4e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c86:	4b65      	ldr	r3, [pc, #404]	; (8002e1c <HAL_RCC_OscConfig+0x2ac>)
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	f003 030c 	and.w	r3, r3, #12
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d00b      	beq.n	8002caa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c92:	4b62      	ldr	r3, [pc, #392]	; (8002e1c <HAL_RCC_OscConfig+0x2ac>)
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c9a:	2b08      	cmp	r3, #8
 8002c9c:	d11c      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c9e:	4b5f      	ldr	r3, [pc, #380]	; (8002e1c <HAL_RCC_OscConfig+0x2ac>)
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d116      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002caa:	4b5c      	ldr	r3, [pc, #368]	; (8002e1c <HAL_RCC_OscConfig+0x2ac>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0302 	and.w	r3, r3, #2
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d005      	beq.n	8002cc2 <HAL_RCC_OscConfig+0x152>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d001      	beq.n	8002cc2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e1c4      	b.n	800304c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cc2:	4b56      	ldr	r3, [pc, #344]	; (8002e1c <HAL_RCC_OscConfig+0x2ac>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	691b      	ldr	r3, [r3, #16]
 8002cce:	00db      	lsls	r3, r3, #3
 8002cd0:	4952      	ldr	r1, [pc, #328]	; (8002e1c <HAL_RCC_OscConfig+0x2ac>)
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cd6:	e03a      	b.n	8002d4e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d020      	beq.n	8002d22 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ce0:	4b4f      	ldr	r3, [pc, #316]	; (8002e20 <HAL_RCC_OscConfig+0x2b0>)
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ce6:	f7ff fb03 	bl	80022f0 <HAL_GetTick>
 8002cea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cec:	e008      	b.n	8002d00 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cee:	f7ff faff 	bl	80022f0 <HAL_GetTick>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	2b02      	cmp	r3, #2
 8002cfa:	d901      	bls.n	8002d00 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002cfc:	2303      	movs	r3, #3
 8002cfe:	e1a5      	b.n	800304c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d00:	4b46      	ldr	r3, [pc, #280]	; (8002e1c <HAL_RCC_OscConfig+0x2ac>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 0302 	and.w	r3, r3, #2
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d0f0      	beq.n	8002cee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d0c:	4b43      	ldr	r3, [pc, #268]	; (8002e1c <HAL_RCC_OscConfig+0x2ac>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	691b      	ldr	r3, [r3, #16]
 8002d18:	00db      	lsls	r3, r3, #3
 8002d1a:	4940      	ldr	r1, [pc, #256]	; (8002e1c <HAL_RCC_OscConfig+0x2ac>)
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	600b      	str	r3, [r1, #0]
 8002d20:	e015      	b.n	8002d4e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d22:	4b3f      	ldr	r3, [pc, #252]	; (8002e20 <HAL_RCC_OscConfig+0x2b0>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d28:	f7ff fae2 	bl	80022f0 <HAL_GetTick>
 8002d2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d2e:	e008      	b.n	8002d42 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d30:	f7ff fade 	bl	80022f0 <HAL_GetTick>
 8002d34:	4602      	mov	r2, r0
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	2b02      	cmp	r3, #2
 8002d3c:	d901      	bls.n	8002d42 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e184      	b.n	800304c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d42:	4b36      	ldr	r3, [pc, #216]	; (8002e1c <HAL_RCC_OscConfig+0x2ac>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0302 	and.w	r3, r3, #2
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d1f0      	bne.n	8002d30 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 0308 	and.w	r3, r3, #8
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d030      	beq.n	8002dbc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	695b      	ldr	r3, [r3, #20]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d016      	beq.n	8002d90 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d62:	4b30      	ldr	r3, [pc, #192]	; (8002e24 <HAL_RCC_OscConfig+0x2b4>)
 8002d64:	2201      	movs	r2, #1
 8002d66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d68:	f7ff fac2 	bl	80022f0 <HAL_GetTick>
 8002d6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d6e:	e008      	b.n	8002d82 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d70:	f7ff fabe 	bl	80022f0 <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d901      	bls.n	8002d82 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e164      	b.n	800304c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d82:	4b26      	ldr	r3, [pc, #152]	; (8002e1c <HAL_RCC_OscConfig+0x2ac>)
 8002d84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d86:	f003 0302 	and.w	r3, r3, #2
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d0f0      	beq.n	8002d70 <HAL_RCC_OscConfig+0x200>
 8002d8e:	e015      	b.n	8002dbc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d90:	4b24      	ldr	r3, [pc, #144]	; (8002e24 <HAL_RCC_OscConfig+0x2b4>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d96:	f7ff faab 	bl	80022f0 <HAL_GetTick>
 8002d9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d9c:	e008      	b.n	8002db0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d9e:	f7ff faa7 	bl	80022f0 <HAL_GetTick>
 8002da2:	4602      	mov	r2, r0
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	1ad3      	subs	r3, r2, r3
 8002da8:	2b02      	cmp	r3, #2
 8002daa:	d901      	bls.n	8002db0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002dac:	2303      	movs	r3, #3
 8002dae:	e14d      	b.n	800304c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002db0:	4b1a      	ldr	r3, [pc, #104]	; (8002e1c <HAL_RCC_OscConfig+0x2ac>)
 8002db2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002db4:	f003 0302 	and.w	r3, r3, #2
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d1f0      	bne.n	8002d9e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 0304 	and.w	r3, r3, #4
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	f000 80a0 	beq.w	8002f0a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dce:	4b13      	ldr	r3, [pc, #76]	; (8002e1c <HAL_RCC_OscConfig+0x2ac>)
 8002dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d10f      	bne.n	8002dfa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dda:	2300      	movs	r3, #0
 8002ddc:	60bb      	str	r3, [r7, #8]
 8002dde:	4b0f      	ldr	r3, [pc, #60]	; (8002e1c <HAL_RCC_OscConfig+0x2ac>)
 8002de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de2:	4a0e      	ldr	r2, [pc, #56]	; (8002e1c <HAL_RCC_OscConfig+0x2ac>)
 8002de4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002de8:	6413      	str	r3, [r2, #64]	; 0x40
 8002dea:	4b0c      	ldr	r3, [pc, #48]	; (8002e1c <HAL_RCC_OscConfig+0x2ac>)
 8002dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002df2:	60bb      	str	r3, [r7, #8]
 8002df4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002df6:	2301      	movs	r3, #1
 8002df8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dfa:	4b0b      	ldr	r3, [pc, #44]	; (8002e28 <HAL_RCC_OscConfig+0x2b8>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d121      	bne.n	8002e4a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e06:	4b08      	ldr	r3, [pc, #32]	; (8002e28 <HAL_RCC_OscConfig+0x2b8>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a07      	ldr	r2, [pc, #28]	; (8002e28 <HAL_RCC_OscConfig+0x2b8>)
 8002e0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e12:	f7ff fa6d 	bl	80022f0 <HAL_GetTick>
 8002e16:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e18:	e011      	b.n	8002e3e <HAL_RCC_OscConfig+0x2ce>
 8002e1a:	bf00      	nop
 8002e1c:	40023800 	.word	0x40023800
 8002e20:	42470000 	.word	0x42470000
 8002e24:	42470e80 	.word	0x42470e80
 8002e28:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e2c:	f7ff fa60 	bl	80022f0 <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d901      	bls.n	8002e3e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e106      	b.n	800304c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e3e:	4b85      	ldr	r3, [pc, #532]	; (8003054 <HAL_RCC_OscConfig+0x4e4>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d0f0      	beq.n	8002e2c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d106      	bne.n	8002e60 <HAL_RCC_OscConfig+0x2f0>
 8002e52:	4b81      	ldr	r3, [pc, #516]	; (8003058 <HAL_RCC_OscConfig+0x4e8>)
 8002e54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e56:	4a80      	ldr	r2, [pc, #512]	; (8003058 <HAL_RCC_OscConfig+0x4e8>)
 8002e58:	f043 0301 	orr.w	r3, r3, #1
 8002e5c:	6713      	str	r3, [r2, #112]	; 0x70
 8002e5e:	e01c      	b.n	8002e9a <HAL_RCC_OscConfig+0x32a>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	2b05      	cmp	r3, #5
 8002e66:	d10c      	bne.n	8002e82 <HAL_RCC_OscConfig+0x312>
 8002e68:	4b7b      	ldr	r3, [pc, #492]	; (8003058 <HAL_RCC_OscConfig+0x4e8>)
 8002e6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e6c:	4a7a      	ldr	r2, [pc, #488]	; (8003058 <HAL_RCC_OscConfig+0x4e8>)
 8002e6e:	f043 0304 	orr.w	r3, r3, #4
 8002e72:	6713      	str	r3, [r2, #112]	; 0x70
 8002e74:	4b78      	ldr	r3, [pc, #480]	; (8003058 <HAL_RCC_OscConfig+0x4e8>)
 8002e76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e78:	4a77      	ldr	r2, [pc, #476]	; (8003058 <HAL_RCC_OscConfig+0x4e8>)
 8002e7a:	f043 0301 	orr.w	r3, r3, #1
 8002e7e:	6713      	str	r3, [r2, #112]	; 0x70
 8002e80:	e00b      	b.n	8002e9a <HAL_RCC_OscConfig+0x32a>
 8002e82:	4b75      	ldr	r3, [pc, #468]	; (8003058 <HAL_RCC_OscConfig+0x4e8>)
 8002e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e86:	4a74      	ldr	r2, [pc, #464]	; (8003058 <HAL_RCC_OscConfig+0x4e8>)
 8002e88:	f023 0301 	bic.w	r3, r3, #1
 8002e8c:	6713      	str	r3, [r2, #112]	; 0x70
 8002e8e:	4b72      	ldr	r3, [pc, #456]	; (8003058 <HAL_RCC_OscConfig+0x4e8>)
 8002e90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e92:	4a71      	ldr	r2, [pc, #452]	; (8003058 <HAL_RCC_OscConfig+0x4e8>)
 8002e94:	f023 0304 	bic.w	r3, r3, #4
 8002e98:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d015      	beq.n	8002ece <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ea2:	f7ff fa25 	bl	80022f0 <HAL_GetTick>
 8002ea6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ea8:	e00a      	b.n	8002ec0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002eaa:	f7ff fa21 	bl	80022f0 <HAL_GetTick>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	1ad3      	subs	r3, r2, r3
 8002eb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d901      	bls.n	8002ec0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002ebc:	2303      	movs	r3, #3
 8002ebe:	e0c5      	b.n	800304c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ec0:	4b65      	ldr	r3, [pc, #404]	; (8003058 <HAL_RCC_OscConfig+0x4e8>)
 8002ec2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ec4:	f003 0302 	and.w	r3, r3, #2
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d0ee      	beq.n	8002eaa <HAL_RCC_OscConfig+0x33a>
 8002ecc:	e014      	b.n	8002ef8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ece:	f7ff fa0f 	bl	80022f0 <HAL_GetTick>
 8002ed2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ed4:	e00a      	b.n	8002eec <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ed6:	f7ff fa0b 	bl	80022f0 <HAL_GetTick>
 8002eda:	4602      	mov	r2, r0
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	1ad3      	subs	r3, r2, r3
 8002ee0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d901      	bls.n	8002eec <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	e0af      	b.n	800304c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002eec:	4b5a      	ldr	r3, [pc, #360]	; (8003058 <HAL_RCC_OscConfig+0x4e8>)
 8002eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ef0:	f003 0302 	and.w	r3, r3, #2
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d1ee      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ef8:	7dfb      	ldrb	r3, [r7, #23]
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d105      	bne.n	8002f0a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002efe:	4b56      	ldr	r3, [pc, #344]	; (8003058 <HAL_RCC_OscConfig+0x4e8>)
 8002f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f02:	4a55      	ldr	r2, [pc, #340]	; (8003058 <HAL_RCC_OscConfig+0x4e8>)
 8002f04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f08:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	699b      	ldr	r3, [r3, #24]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	f000 809b 	beq.w	800304a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f14:	4b50      	ldr	r3, [pc, #320]	; (8003058 <HAL_RCC_OscConfig+0x4e8>)
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	f003 030c 	and.w	r3, r3, #12
 8002f1c:	2b08      	cmp	r3, #8
 8002f1e:	d05c      	beq.n	8002fda <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	699b      	ldr	r3, [r3, #24]
 8002f24:	2b02      	cmp	r3, #2
 8002f26:	d141      	bne.n	8002fac <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f28:	4b4c      	ldr	r3, [pc, #304]	; (800305c <HAL_RCC_OscConfig+0x4ec>)
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f2e:	f7ff f9df 	bl	80022f0 <HAL_GetTick>
 8002f32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f34:	e008      	b.n	8002f48 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f36:	f7ff f9db 	bl	80022f0 <HAL_GetTick>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	2b02      	cmp	r3, #2
 8002f42:	d901      	bls.n	8002f48 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002f44:	2303      	movs	r3, #3
 8002f46:	e081      	b.n	800304c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f48:	4b43      	ldr	r3, [pc, #268]	; (8003058 <HAL_RCC_OscConfig+0x4e8>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d1f0      	bne.n	8002f36 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	69da      	ldr	r2, [r3, #28]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6a1b      	ldr	r3, [r3, #32]
 8002f5c:	431a      	orrs	r2, r3
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f62:	019b      	lsls	r3, r3, #6
 8002f64:	431a      	orrs	r2, r3
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f6a:	085b      	lsrs	r3, r3, #1
 8002f6c:	3b01      	subs	r3, #1
 8002f6e:	041b      	lsls	r3, r3, #16
 8002f70:	431a      	orrs	r2, r3
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f76:	061b      	lsls	r3, r3, #24
 8002f78:	4937      	ldr	r1, [pc, #220]	; (8003058 <HAL_RCC_OscConfig+0x4e8>)
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f7e:	4b37      	ldr	r3, [pc, #220]	; (800305c <HAL_RCC_OscConfig+0x4ec>)
 8002f80:	2201      	movs	r2, #1
 8002f82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f84:	f7ff f9b4 	bl	80022f0 <HAL_GetTick>
 8002f88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f8a:	e008      	b.n	8002f9e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f8c:	f7ff f9b0 	bl	80022f0 <HAL_GetTick>
 8002f90:	4602      	mov	r2, r0
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	2b02      	cmp	r3, #2
 8002f98:	d901      	bls.n	8002f9e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	e056      	b.n	800304c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f9e:	4b2e      	ldr	r3, [pc, #184]	; (8003058 <HAL_RCC_OscConfig+0x4e8>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d0f0      	beq.n	8002f8c <HAL_RCC_OscConfig+0x41c>
 8002faa:	e04e      	b.n	800304a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fac:	4b2b      	ldr	r3, [pc, #172]	; (800305c <HAL_RCC_OscConfig+0x4ec>)
 8002fae:	2200      	movs	r2, #0
 8002fb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fb2:	f7ff f99d 	bl	80022f0 <HAL_GetTick>
 8002fb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fb8:	e008      	b.n	8002fcc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fba:	f7ff f999 	bl	80022f0 <HAL_GetTick>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	2b02      	cmp	r3, #2
 8002fc6:	d901      	bls.n	8002fcc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002fc8:	2303      	movs	r3, #3
 8002fca:	e03f      	b.n	800304c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fcc:	4b22      	ldr	r3, [pc, #136]	; (8003058 <HAL_RCC_OscConfig+0x4e8>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d1f0      	bne.n	8002fba <HAL_RCC_OscConfig+0x44a>
 8002fd8:	e037      	b.n	800304a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	699b      	ldr	r3, [r3, #24]
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d101      	bne.n	8002fe6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e032      	b.n	800304c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002fe6:	4b1c      	ldr	r3, [pc, #112]	; (8003058 <HAL_RCC_OscConfig+0x4e8>)
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	699b      	ldr	r3, [r3, #24]
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d028      	beq.n	8003046 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ffe:	429a      	cmp	r2, r3
 8003000:	d121      	bne.n	8003046 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800300c:	429a      	cmp	r2, r3
 800300e:	d11a      	bne.n	8003046 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003010:	68fa      	ldr	r2, [r7, #12]
 8003012:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003016:	4013      	ands	r3, r2
 8003018:	687a      	ldr	r2, [r7, #4]
 800301a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800301c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800301e:	4293      	cmp	r3, r2
 8003020:	d111      	bne.n	8003046 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800302c:	085b      	lsrs	r3, r3, #1
 800302e:	3b01      	subs	r3, #1
 8003030:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003032:	429a      	cmp	r2, r3
 8003034:	d107      	bne.n	8003046 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003040:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003042:	429a      	cmp	r2, r3
 8003044:	d001      	beq.n	800304a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e000      	b.n	800304c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800304a:	2300      	movs	r3, #0
}
 800304c:	4618      	mov	r0, r3
 800304e:	3718      	adds	r7, #24
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}
 8003054:	40007000 	.word	0x40007000
 8003058:	40023800 	.word	0x40023800
 800305c:	42470060 	.word	0x42470060

08003060 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b084      	sub	sp, #16
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d101      	bne.n	8003074 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e0cc      	b.n	800320e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003074:	4b68      	ldr	r3, [pc, #416]	; (8003218 <HAL_RCC_ClockConfig+0x1b8>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 030f 	and.w	r3, r3, #15
 800307c:	683a      	ldr	r2, [r7, #0]
 800307e:	429a      	cmp	r2, r3
 8003080:	d90c      	bls.n	800309c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003082:	4b65      	ldr	r3, [pc, #404]	; (8003218 <HAL_RCC_ClockConfig+0x1b8>)
 8003084:	683a      	ldr	r2, [r7, #0]
 8003086:	b2d2      	uxtb	r2, r2
 8003088:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800308a:	4b63      	ldr	r3, [pc, #396]	; (8003218 <HAL_RCC_ClockConfig+0x1b8>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 030f 	and.w	r3, r3, #15
 8003092:	683a      	ldr	r2, [r7, #0]
 8003094:	429a      	cmp	r2, r3
 8003096:	d001      	beq.n	800309c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e0b8      	b.n	800320e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0302 	and.w	r3, r3, #2
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d020      	beq.n	80030ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 0304 	and.w	r3, r3, #4
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d005      	beq.n	80030c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030b4:	4b59      	ldr	r3, [pc, #356]	; (800321c <HAL_RCC_ClockConfig+0x1bc>)
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	4a58      	ldr	r2, [pc, #352]	; (800321c <HAL_RCC_ClockConfig+0x1bc>)
 80030ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80030be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 0308 	and.w	r3, r3, #8
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d005      	beq.n	80030d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030cc:	4b53      	ldr	r3, [pc, #332]	; (800321c <HAL_RCC_ClockConfig+0x1bc>)
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	4a52      	ldr	r2, [pc, #328]	; (800321c <HAL_RCC_ClockConfig+0x1bc>)
 80030d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80030d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030d8:	4b50      	ldr	r3, [pc, #320]	; (800321c <HAL_RCC_ClockConfig+0x1bc>)
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	494d      	ldr	r1, [pc, #308]	; (800321c <HAL_RCC_ClockConfig+0x1bc>)
 80030e6:	4313      	orrs	r3, r2
 80030e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0301 	and.w	r3, r3, #1
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d044      	beq.n	8003180 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d107      	bne.n	800310e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030fe:	4b47      	ldr	r3, [pc, #284]	; (800321c <HAL_RCC_ClockConfig+0x1bc>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003106:	2b00      	cmp	r3, #0
 8003108:	d119      	bne.n	800313e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e07f      	b.n	800320e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	2b02      	cmp	r3, #2
 8003114:	d003      	beq.n	800311e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800311a:	2b03      	cmp	r3, #3
 800311c:	d107      	bne.n	800312e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800311e:	4b3f      	ldr	r3, [pc, #252]	; (800321c <HAL_RCC_ClockConfig+0x1bc>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d109      	bne.n	800313e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e06f      	b.n	800320e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800312e:	4b3b      	ldr	r3, [pc, #236]	; (800321c <HAL_RCC_ClockConfig+0x1bc>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0302 	and.w	r3, r3, #2
 8003136:	2b00      	cmp	r3, #0
 8003138:	d101      	bne.n	800313e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e067      	b.n	800320e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800313e:	4b37      	ldr	r3, [pc, #220]	; (800321c <HAL_RCC_ClockConfig+0x1bc>)
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	f023 0203 	bic.w	r2, r3, #3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	4934      	ldr	r1, [pc, #208]	; (800321c <HAL_RCC_ClockConfig+0x1bc>)
 800314c:	4313      	orrs	r3, r2
 800314e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003150:	f7ff f8ce 	bl	80022f0 <HAL_GetTick>
 8003154:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003156:	e00a      	b.n	800316e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003158:	f7ff f8ca 	bl	80022f0 <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	f241 3288 	movw	r2, #5000	; 0x1388
 8003166:	4293      	cmp	r3, r2
 8003168:	d901      	bls.n	800316e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800316a:	2303      	movs	r3, #3
 800316c:	e04f      	b.n	800320e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800316e:	4b2b      	ldr	r3, [pc, #172]	; (800321c <HAL_RCC_ClockConfig+0x1bc>)
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	f003 020c 	and.w	r2, r3, #12
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	429a      	cmp	r2, r3
 800317e:	d1eb      	bne.n	8003158 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003180:	4b25      	ldr	r3, [pc, #148]	; (8003218 <HAL_RCC_ClockConfig+0x1b8>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 030f 	and.w	r3, r3, #15
 8003188:	683a      	ldr	r2, [r7, #0]
 800318a:	429a      	cmp	r2, r3
 800318c:	d20c      	bcs.n	80031a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800318e:	4b22      	ldr	r3, [pc, #136]	; (8003218 <HAL_RCC_ClockConfig+0x1b8>)
 8003190:	683a      	ldr	r2, [r7, #0]
 8003192:	b2d2      	uxtb	r2, r2
 8003194:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003196:	4b20      	ldr	r3, [pc, #128]	; (8003218 <HAL_RCC_ClockConfig+0x1b8>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 030f 	and.w	r3, r3, #15
 800319e:	683a      	ldr	r2, [r7, #0]
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d001      	beq.n	80031a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e032      	b.n	800320e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 0304 	and.w	r3, r3, #4
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d008      	beq.n	80031c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031b4:	4b19      	ldr	r3, [pc, #100]	; (800321c <HAL_RCC_ClockConfig+0x1bc>)
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	4916      	ldr	r1, [pc, #88]	; (800321c <HAL_RCC_ClockConfig+0x1bc>)
 80031c2:	4313      	orrs	r3, r2
 80031c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0308 	and.w	r3, r3, #8
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d009      	beq.n	80031e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031d2:	4b12      	ldr	r3, [pc, #72]	; (800321c <HAL_RCC_ClockConfig+0x1bc>)
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	691b      	ldr	r3, [r3, #16]
 80031de:	00db      	lsls	r3, r3, #3
 80031e0:	490e      	ldr	r1, [pc, #56]	; (800321c <HAL_RCC_ClockConfig+0x1bc>)
 80031e2:	4313      	orrs	r3, r2
 80031e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80031e6:	f000 f821 	bl	800322c <HAL_RCC_GetSysClockFreq>
 80031ea:	4602      	mov	r2, r0
 80031ec:	4b0b      	ldr	r3, [pc, #44]	; (800321c <HAL_RCC_ClockConfig+0x1bc>)
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	091b      	lsrs	r3, r3, #4
 80031f2:	f003 030f 	and.w	r3, r3, #15
 80031f6:	490a      	ldr	r1, [pc, #40]	; (8003220 <HAL_RCC_ClockConfig+0x1c0>)
 80031f8:	5ccb      	ldrb	r3, [r1, r3]
 80031fa:	fa22 f303 	lsr.w	r3, r2, r3
 80031fe:	4a09      	ldr	r2, [pc, #36]	; (8003224 <HAL_RCC_ClockConfig+0x1c4>)
 8003200:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003202:	4b09      	ldr	r3, [pc, #36]	; (8003228 <HAL_RCC_ClockConfig+0x1c8>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4618      	mov	r0, r3
 8003208:	f7ff f82e 	bl	8002268 <HAL_InitTick>

  return HAL_OK;
 800320c:	2300      	movs	r3, #0
}
 800320e:	4618      	mov	r0, r3
 8003210:	3710      	adds	r7, #16
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	40023c00 	.word	0x40023c00
 800321c:	40023800 	.word	0x40023800
 8003220:	0800a088 	.word	0x0800a088
 8003224:	20000004 	.word	0x20000004
 8003228:	20000008 	.word	0x20000008

0800322c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800322c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003230:	b084      	sub	sp, #16
 8003232:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003234:	2300      	movs	r3, #0
 8003236:	607b      	str	r3, [r7, #4]
 8003238:	2300      	movs	r3, #0
 800323a:	60fb      	str	r3, [r7, #12]
 800323c:	2300      	movs	r3, #0
 800323e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003240:	2300      	movs	r3, #0
 8003242:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003244:	4b67      	ldr	r3, [pc, #412]	; (80033e4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	f003 030c 	and.w	r3, r3, #12
 800324c:	2b08      	cmp	r3, #8
 800324e:	d00d      	beq.n	800326c <HAL_RCC_GetSysClockFreq+0x40>
 8003250:	2b08      	cmp	r3, #8
 8003252:	f200 80bd 	bhi.w	80033d0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003256:	2b00      	cmp	r3, #0
 8003258:	d002      	beq.n	8003260 <HAL_RCC_GetSysClockFreq+0x34>
 800325a:	2b04      	cmp	r3, #4
 800325c:	d003      	beq.n	8003266 <HAL_RCC_GetSysClockFreq+0x3a>
 800325e:	e0b7      	b.n	80033d0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003260:	4b61      	ldr	r3, [pc, #388]	; (80033e8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003262:	60bb      	str	r3, [r7, #8]
       break;
 8003264:	e0b7      	b.n	80033d6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003266:	4b61      	ldr	r3, [pc, #388]	; (80033ec <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003268:	60bb      	str	r3, [r7, #8]
      break;
 800326a:	e0b4      	b.n	80033d6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800326c:	4b5d      	ldr	r3, [pc, #372]	; (80033e4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003274:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003276:	4b5b      	ldr	r3, [pc, #364]	; (80033e4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d04d      	beq.n	800331e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003282:	4b58      	ldr	r3, [pc, #352]	; (80033e4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	099b      	lsrs	r3, r3, #6
 8003288:	461a      	mov	r2, r3
 800328a:	f04f 0300 	mov.w	r3, #0
 800328e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003292:	f04f 0100 	mov.w	r1, #0
 8003296:	ea02 0800 	and.w	r8, r2, r0
 800329a:	ea03 0901 	and.w	r9, r3, r1
 800329e:	4640      	mov	r0, r8
 80032a0:	4649      	mov	r1, r9
 80032a2:	f04f 0200 	mov.w	r2, #0
 80032a6:	f04f 0300 	mov.w	r3, #0
 80032aa:	014b      	lsls	r3, r1, #5
 80032ac:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80032b0:	0142      	lsls	r2, r0, #5
 80032b2:	4610      	mov	r0, r2
 80032b4:	4619      	mov	r1, r3
 80032b6:	ebb0 0008 	subs.w	r0, r0, r8
 80032ba:	eb61 0109 	sbc.w	r1, r1, r9
 80032be:	f04f 0200 	mov.w	r2, #0
 80032c2:	f04f 0300 	mov.w	r3, #0
 80032c6:	018b      	lsls	r3, r1, #6
 80032c8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80032cc:	0182      	lsls	r2, r0, #6
 80032ce:	1a12      	subs	r2, r2, r0
 80032d0:	eb63 0301 	sbc.w	r3, r3, r1
 80032d4:	f04f 0000 	mov.w	r0, #0
 80032d8:	f04f 0100 	mov.w	r1, #0
 80032dc:	00d9      	lsls	r1, r3, #3
 80032de:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80032e2:	00d0      	lsls	r0, r2, #3
 80032e4:	4602      	mov	r2, r0
 80032e6:	460b      	mov	r3, r1
 80032e8:	eb12 0208 	adds.w	r2, r2, r8
 80032ec:	eb43 0309 	adc.w	r3, r3, r9
 80032f0:	f04f 0000 	mov.w	r0, #0
 80032f4:	f04f 0100 	mov.w	r1, #0
 80032f8:	0259      	lsls	r1, r3, #9
 80032fa:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80032fe:	0250      	lsls	r0, r2, #9
 8003300:	4602      	mov	r2, r0
 8003302:	460b      	mov	r3, r1
 8003304:	4610      	mov	r0, r2
 8003306:	4619      	mov	r1, r3
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	461a      	mov	r2, r3
 800330c:	f04f 0300 	mov.w	r3, #0
 8003310:	f7fd facc 	bl	80008ac <__aeabi_uldivmod>
 8003314:	4602      	mov	r2, r0
 8003316:	460b      	mov	r3, r1
 8003318:	4613      	mov	r3, r2
 800331a:	60fb      	str	r3, [r7, #12]
 800331c:	e04a      	b.n	80033b4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800331e:	4b31      	ldr	r3, [pc, #196]	; (80033e4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	099b      	lsrs	r3, r3, #6
 8003324:	461a      	mov	r2, r3
 8003326:	f04f 0300 	mov.w	r3, #0
 800332a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800332e:	f04f 0100 	mov.w	r1, #0
 8003332:	ea02 0400 	and.w	r4, r2, r0
 8003336:	ea03 0501 	and.w	r5, r3, r1
 800333a:	4620      	mov	r0, r4
 800333c:	4629      	mov	r1, r5
 800333e:	f04f 0200 	mov.w	r2, #0
 8003342:	f04f 0300 	mov.w	r3, #0
 8003346:	014b      	lsls	r3, r1, #5
 8003348:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800334c:	0142      	lsls	r2, r0, #5
 800334e:	4610      	mov	r0, r2
 8003350:	4619      	mov	r1, r3
 8003352:	1b00      	subs	r0, r0, r4
 8003354:	eb61 0105 	sbc.w	r1, r1, r5
 8003358:	f04f 0200 	mov.w	r2, #0
 800335c:	f04f 0300 	mov.w	r3, #0
 8003360:	018b      	lsls	r3, r1, #6
 8003362:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003366:	0182      	lsls	r2, r0, #6
 8003368:	1a12      	subs	r2, r2, r0
 800336a:	eb63 0301 	sbc.w	r3, r3, r1
 800336e:	f04f 0000 	mov.w	r0, #0
 8003372:	f04f 0100 	mov.w	r1, #0
 8003376:	00d9      	lsls	r1, r3, #3
 8003378:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800337c:	00d0      	lsls	r0, r2, #3
 800337e:	4602      	mov	r2, r0
 8003380:	460b      	mov	r3, r1
 8003382:	1912      	adds	r2, r2, r4
 8003384:	eb45 0303 	adc.w	r3, r5, r3
 8003388:	f04f 0000 	mov.w	r0, #0
 800338c:	f04f 0100 	mov.w	r1, #0
 8003390:	0299      	lsls	r1, r3, #10
 8003392:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003396:	0290      	lsls	r0, r2, #10
 8003398:	4602      	mov	r2, r0
 800339a:	460b      	mov	r3, r1
 800339c:	4610      	mov	r0, r2
 800339e:	4619      	mov	r1, r3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	461a      	mov	r2, r3
 80033a4:	f04f 0300 	mov.w	r3, #0
 80033a8:	f7fd fa80 	bl	80008ac <__aeabi_uldivmod>
 80033ac:	4602      	mov	r2, r0
 80033ae:	460b      	mov	r3, r1
 80033b0:	4613      	mov	r3, r2
 80033b2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80033b4:	4b0b      	ldr	r3, [pc, #44]	; (80033e4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	0c1b      	lsrs	r3, r3, #16
 80033ba:	f003 0303 	and.w	r3, r3, #3
 80033be:	3301      	adds	r3, #1
 80033c0:	005b      	lsls	r3, r3, #1
 80033c2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80033c4:	68fa      	ldr	r2, [r7, #12]
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80033cc:	60bb      	str	r3, [r7, #8]
      break;
 80033ce:	e002      	b.n	80033d6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80033d0:	4b05      	ldr	r3, [pc, #20]	; (80033e8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80033d2:	60bb      	str	r3, [r7, #8]
      break;
 80033d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033d6:	68bb      	ldr	r3, [r7, #8]
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3710      	adds	r7, #16
 80033dc:	46bd      	mov	sp, r7
 80033de:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80033e2:	bf00      	nop
 80033e4:	40023800 	.word	0x40023800
 80033e8:	00f42400 	.word	0x00f42400
 80033ec:	007a1200 	.word	0x007a1200

080033f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033f0:	b480      	push	{r7}
 80033f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033f4:	4b03      	ldr	r3, [pc, #12]	; (8003404 <HAL_RCC_GetHCLKFreq+0x14>)
 80033f6:	681b      	ldr	r3, [r3, #0]
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr
 8003402:	bf00      	nop
 8003404:	20000004 	.word	0x20000004

08003408 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800340c:	f7ff fff0 	bl	80033f0 <HAL_RCC_GetHCLKFreq>
 8003410:	4602      	mov	r2, r0
 8003412:	4b05      	ldr	r3, [pc, #20]	; (8003428 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	0a9b      	lsrs	r3, r3, #10
 8003418:	f003 0307 	and.w	r3, r3, #7
 800341c:	4903      	ldr	r1, [pc, #12]	; (800342c <HAL_RCC_GetPCLK1Freq+0x24>)
 800341e:	5ccb      	ldrb	r3, [r1, r3]
 8003420:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003424:	4618      	mov	r0, r3
 8003426:	bd80      	pop	{r7, pc}
 8003428:	40023800 	.word	0x40023800
 800342c:	0800a098 	.word	0x0800a098

08003430 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003434:	f7ff ffdc 	bl	80033f0 <HAL_RCC_GetHCLKFreq>
 8003438:	4602      	mov	r2, r0
 800343a:	4b05      	ldr	r3, [pc, #20]	; (8003450 <HAL_RCC_GetPCLK2Freq+0x20>)
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	0b5b      	lsrs	r3, r3, #13
 8003440:	f003 0307 	and.w	r3, r3, #7
 8003444:	4903      	ldr	r1, [pc, #12]	; (8003454 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003446:	5ccb      	ldrb	r3, [r1, r3]
 8003448:	fa22 f303 	lsr.w	r3, r2, r3
}
 800344c:	4618      	mov	r0, r3
 800344e:	bd80      	pop	{r7, pc}
 8003450:	40023800 	.word	0x40023800
 8003454:	0800a098 	.word	0x0800a098

08003458 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b082      	sub	sp, #8
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d101      	bne.n	800346a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e07b      	b.n	8003562 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346e:	2b00      	cmp	r3, #0
 8003470:	d108      	bne.n	8003484 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800347a:	d009      	beq.n	8003490 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2200      	movs	r2, #0
 8003480:	61da      	str	r2, [r3, #28]
 8003482:	e005      	b.n	8003490 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2200      	movs	r2, #0
 8003488:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2200      	movs	r2, #0
 8003494:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800349c:	b2db      	uxtb	r3, r3
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d106      	bne.n	80034b0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2200      	movs	r2, #0
 80034a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f7fe fc4e 	bl	8001d4c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2202      	movs	r2, #2
 80034b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034c6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80034d8:	431a      	orrs	r2, r3
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	68db      	ldr	r3, [r3, #12]
 80034de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034e2:	431a      	orrs	r2, r3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	691b      	ldr	r3, [r3, #16]
 80034e8:	f003 0302 	and.w	r3, r3, #2
 80034ec:	431a      	orrs	r2, r3
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	695b      	ldr	r3, [r3, #20]
 80034f2:	f003 0301 	and.w	r3, r3, #1
 80034f6:	431a      	orrs	r2, r3
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	699b      	ldr	r3, [r3, #24]
 80034fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003500:	431a      	orrs	r2, r3
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	69db      	ldr	r3, [r3, #28]
 8003506:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800350a:	431a      	orrs	r2, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6a1b      	ldr	r3, [r3, #32]
 8003510:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003514:	ea42 0103 	orr.w	r1, r2, r3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800351c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	430a      	orrs	r2, r1
 8003526:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	699b      	ldr	r3, [r3, #24]
 800352c:	0c1b      	lsrs	r3, r3, #16
 800352e:	f003 0104 	and.w	r1, r3, #4
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003536:	f003 0210 	and.w	r2, r3, #16
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	430a      	orrs	r2, r1
 8003540:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	69da      	ldr	r2, [r3, #28]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003550:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2200      	movs	r2, #0
 8003556:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2201      	movs	r2, #1
 800355c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003560:	2300      	movs	r3, #0
}
 8003562:	4618      	mov	r0, r3
 8003564:	3708      	adds	r7, #8
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}

0800356a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800356a:	b580      	push	{r7, lr}
 800356c:	b088      	sub	sp, #32
 800356e:	af00      	add	r7, sp, #0
 8003570:	60f8      	str	r0, [r7, #12]
 8003572:	60b9      	str	r1, [r7, #8]
 8003574:	603b      	str	r3, [r7, #0]
 8003576:	4613      	mov	r3, r2
 8003578:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800357a:	2300      	movs	r3, #0
 800357c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003584:	2b01      	cmp	r3, #1
 8003586:	d101      	bne.n	800358c <HAL_SPI_Transmit+0x22>
 8003588:	2302      	movs	r3, #2
 800358a:	e126      	b.n	80037da <HAL_SPI_Transmit+0x270>
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2201      	movs	r2, #1
 8003590:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003594:	f7fe feac 	bl	80022f0 <HAL_GetTick>
 8003598:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800359a:	88fb      	ldrh	r3, [r7, #6]
 800359c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d002      	beq.n	80035b0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80035aa:	2302      	movs	r3, #2
 80035ac:	77fb      	strb	r3, [r7, #31]
    goto error;
 80035ae:	e10b      	b.n	80037c8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d002      	beq.n	80035bc <HAL_SPI_Transmit+0x52>
 80035b6:	88fb      	ldrh	r3, [r7, #6]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d102      	bne.n	80035c2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	77fb      	strb	r3, [r7, #31]
    goto error;
 80035c0:	e102      	b.n	80037c8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2203      	movs	r2, #3
 80035c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2200      	movs	r2, #0
 80035ce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	68ba      	ldr	r2, [r7, #8]
 80035d4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	88fa      	ldrh	r2, [r7, #6]
 80035da:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	88fa      	ldrh	r2, [r7, #6]
 80035e0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2200      	movs	r2, #0
 80035e6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2200      	movs	r2, #0
 80035ec:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2200      	movs	r2, #0
 80035f2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2200      	movs	r2, #0
 80035f8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2200      	movs	r2, #0
 80035fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003608:	d10f      	bne.n	800362a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003618:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003628:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003634:	2b40      	cmp	r3, #64	; 0x40
 8003636:	d007      	beq.n	8003648 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003646:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003650:	d14b      	bne.n	80036ea <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d002      	beq.n	8003660 <HAL_SPI_Transmit+0xf6>
 800365a:	8afb      	ldrh	r3, [r7, #22]
 800365c:	2b01      	cmp	r3, #1
 800365e:	d13e      	bne.n	80036de <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003664:	881a      	ldrh	r2, [r3, #0]
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003670:	1c9a      	adds	r2, r3, #2
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800367a:	b29b      	uxth	r3, r3
 800367c:	3b01      	subs	r3, #1
 800367e:	b29a      	uxth	r2, r3
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003684:	e02b      	b.n	80036de <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	f003 0302 	and.w	r3, r3, #2
 8003690:	2b02      	cmp	r3, #2
 8003692:	d112      	bne.n	80036ba <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003698:	881a      	ldrh	r2, [r3, #0]
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a4:	1c9a      	adds	r2, r3, #2
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036ae:	b29b      	uxth	r3, r3
 80036b0:	3b01      	subs	r3, #1
 80036b2:	b29a      	uxth	r2, r3
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	86da      	strh	r2, [r3, #54]	; 0x36
 80036b8:	e011      	b.n	80036de <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036ba:	f7fe fe19 	bl	80022f0 <HAL_GetTick>
 80036be:	4602      	mov	r2, r0
 80036c0:	69bb      	ldr	r3, [r7, #24]
 80036c2:	1ad3      	subs	r3, r2, r3
 80036c4:	683a      	ldr	r2, [r7, #0]
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d803      	bhi.n	80036d2 <HAL_SPI_Transmit+0x168>
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036d0:	d102      	bne.n	80036d8 <HAL_SPI_Transmit+0x16e>
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d102      	bne.n	80036de <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80036d8:	2303      	movs	r3, #3
 80036da:	77fb      	strb	r3, [r7, #31]
          goto error;
 80036dc:	e074      	b.n	80037c8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036e2:	b29b      	uxth	r3, r3
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d1ce      	bne.n	8003686 <HAL_SPI_Transmit+0x11c>
 80036e8:	e04c      	b.n	8003784 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d002      	beq.n	80036f8 <HAL_SPI_Transmit+0x18e>
 80036f2:	8afb      	ldrh	r3, [r7, #22]
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d140      	bne.n	800377a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	330c      	adds	r3, #12
 8003702:	7812      	ldrb	r2, [r2, #0]
 8003704:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800370a:	1c5a      	adds	r2, r3, #1
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003714:	b29b      	uxth	r3, r3
 8003716:	3b01      	subs	r3, #1
 8003718:	b29a      	uxth	r2, r3
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800371e:	e02c      	b.n	800377a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	f003 0302 	and.w	r3, r3, #2
 800372a:	2b02      	cmp	r3, #2
 800372c:	d113      	bne.n	8003756 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	330c      	adds	r3, #12
 8003738:	7812      	ldrb	r2, [r2, #0]
 800373a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003740:	1c5a      	adds	r2, r3, #1
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800374a:	b29b      	uxth	r3, r3
 800374c:	3b01      	subs	r3, #1
 800374e:	b29a      	uxth	r2, r3
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	86da      	strh	r2, [r3, #54]	; 0x36
 8003754:	e011      	b.n	800377a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003756:	f7fe fdcb 	bl	80022f0 <HAL_GetTick>
 800375a:	4602      	mov	r2, r0
 800375c:	69bb      	ldr	r3, [r7, #24]
 800375e:	1ad3      	subs	r3, r2, r3
 8003760:	683a      	ldr	r2, [r7, #0]
 8003762:	429a      	cmp	r2, r3
 8003764:	d803      	bhi.n	800376e <HAL_SPI_Transmit+0x204>
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800376c:	d102      	bne.n	8003774 <HAL_SPI_Transmit+0x20a>
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d102      	bne.n	800377a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003774:	2303      	movs	r3, #3
 8003776:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003778:	e026      	b.n	80037c8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800377e:	b29b      	uxth	r3, r3
 8003780:	2b00      	cmp	r3, #0
 8003782:	d1cd      	bne.n	8003720 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003784:	69ba      	ldr	r2, [r7, #24]
 8003786:	6839      	ldr	r1, [r7, #0]
 8003788:	68f8      	ldr	r0, [r7, #12]
 800378a:	f000 fa55 	bl	8003c38 <SPI_EndRxTxTransaction>
 800378e:	4603      	mov	r3, r0
 8003790:	2b00      	cmp	r3, #0
 8003792:	d002      	beq.n	800379a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2220      	movs	r2, #32
 8003798:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d10a      	bne.n	80037b8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80037a2:	2300      	movs	r3, #0
 80037a4:	613b      	str	r3, [r7, #16]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	613b      	str	r3, [r7, #16]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	613b      	str	r3, [r7, #16]
 80037b6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d002      	beq.n	80037c6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	77fb      	strb	r3, [r7, #31]
 80037c4:	e000      	b.n	80037c8 <HAL_SPI_Transmit+0x25e>
  }

error:
 80037c6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2201      	movs	r2, #1
 80037cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2200      	movs	r2, #0
 80037d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80037d8:	7ffb      	ldrb	r3, [r7, #31]
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3720      	adds	r7, #32
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}

080037e2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80037e2:	b580      	push	{r7, lr}
 80037e4:	b08c      	sub	sp, #48	; 0x30
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	60f8      	str	r0, [r7, #12]
 80037ea:	60b9      	str	r1, [r7, #8]
 80037ec:	607a      	str	r2, [r7, #4]
 80037ee:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80037f0:	2301      	movs	r3, #1
 80037f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80037f4:	2300      	movs	r3, #0
 80037f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003800:	2b01      	cmp	r3, #1
 8003802:	d101      	bne.n	8003808 <HAL_SPI_TransmitReceive+0x26>
 8003804:	2302      	movs	r3, #2
 8003806:	e18a      	b.n	8003b1e <HAL_SPI_TransmitReceive+0x33c>
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003810:	f7fe fd6e 	bl	80022f0 <HAL_GetTick>
 8003814:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800381c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003826:	887b      	ldrh	r3, [r7, #2]
 8003828:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800382a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800382e:	2b01      	cmp	r3, #1
 8003830:	d00f      	beq.n	8003852 <HAL_SPI_TransmitReceive+0x70>
 8003832:	69fb      	ldr	r3, [r7, #28]
 8003834:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003838:	d107      	bne.n	800384a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d103      	bne.n	800384a <HAL_SPI_TransmitReceive+0x68>
 8003842:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003846:	2b04      	cmp	r3, #4
 8003848:	d003      	beq.n	8003852 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800384a:	2302      	movs	r3, #2
 800384c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003850:	e15b      	b.n	8003b0a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d005      	beq.n	8003864 <HAL_SPI_TransmitReceive+0x82>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d002      	beq.n	8003864 <HAL_SPI_TransmitReceive+0x82>
 800385e:	887b      	ldrh	r3, [r7, #2]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d103      	bne.n	800386c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800386a:	e14e      	b.n	8003b0a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003872:	b2db      	uxtb	r3, r3
 8003874:	2b04      	cmp	r3, #4
 8003876:	d003      	beq.n	8003880 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2205      	movs	r2, #5
 800387c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2200      	movs	r2, #0
 8003884:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	687a      	ldr	r2, [r7, #4]
 800388a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	887a      	ldrh	r2, [r7, #2]
 8003890:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	887a      	ldrh	r2, [r7, #2]
 8003896:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	68ba      	ldr	r2, [r7, #8]
 800389c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	887a      	ldrh	r2, [r7, #2]
 80038a2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	887a      	ldrh	r2, [r7, #2]
 80038a8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2200      	movs	r2, #0
 80038ae:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2200      	movs	r2, #0
 80038b4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038c0:	2b40      	cmp	r3, #64	; 0x40
 80038c2:	d007      	beq.n	80038d4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80038d2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	68db      	ldr	r3, [r3, #12]
 80038d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038dc:	d178      	bne.n	80039d0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d002      	beq.n	80038ec <HAL_SPI_TransmitReceive+0x10a>
 80038e6:	8b7b      	ldrh	r3, [r7, #26]
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d166      	bne.n	80039ba <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f0:	881a      	ldrh	r2, [r3, #0]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038fc:	1c9a      	adds	r2, r3, #2
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003906:	b29b      	uxth	r3, r3
 8003908:	3b01      	subs	r3, #1
 800390a:	b29a      	uxth	r2, r3
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003910:	e053      	b.n	80039ba <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	f003 0302 	and.w	r3, r3, #2
 800391c:	2b02      	cmp	r3, #2
 800391e:	d11b      	bne.n	8003958 <HAL_SPI_TransmitReceive+0x176>
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003924:	b29b      	uxth	r3, r3
 8003926:	2b00      	cmp	r3, #0
 8003928:	d016      	beq.n	8003958 <HAL_SPI_TransmitReceive+0x176>
 800392a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800392c:	2b01      	cmp	r3, #1
 800392e:	d113      	bne.n	8003958 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003934:	881a      	ldrh	r2, [r3, #0]
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003940:	1c9a      	adds	r2, r3, #2
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800394a:	b29b      	uxth	r3, r3
 800394c:	3b01      	subs	r3, #1
 800394e:	b29a      	uxth	r2, r3
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003954:	2300      	movs	r3, #0
 8003956:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	f003 0301 	and.w	r3, r3, #1
 8003962:	2b01      	cmp	r3, #1
 8003964:	d119      	bne.n	800399a <HAL_SPI_TransmitReceive+0x1b8>
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800396a:	b29b      	uxth	r3, r3
 800396c:	2b00      	cmp	r3, #0
 800396e:	d014      	beq.n	800399a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	68da      	ldr	r2, [r3, #12]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800397a:	b292      	uxth	r2, r2
 800397c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003982:	1c9a      	adds	r2, r3, #2
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800398c:	b29b      	uxth	r3, r3
 800398e:	3b01      	subs	r3, #1
 8003990:	b29a      	uxth	r2, r3
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003996:	2301      	movs	r3, #1
 8003998:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800399a:	f7fe fca9 	bl	80022f0 <HAL_GetTick>
 800399e:	4602      	mov	r2, r0
 80039a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a2:	1ad3      	subs	r3, r2, r3
 80039a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d807      	bhi.n	80039ba <HAL_SPI_TransmitReceive+0x1d8>
 80039aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039b0:	d003      	beq.n	80039ba <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80039b2:	2303      	movs	r3, #3
 80039b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80039b8:	e0a7      	b.n	8003b0a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039be:	b29b      	uxth	r3, r3
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d1a6      	bne.n	8003912 <HAL_SPI_TransmitReceive+0x130>
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d1a1      	bne.n	8003912 <HAL_SPI_TransmitReceive+0x130>
 80039ce:	e07c      	b.n	8003aca <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d002      	beq.n	80039de <HAL_SPI_TransmitReceive+0x1fc>
 80039d8:	8b7b      	ldrh	r3, [r7, #26]
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d16b      	bne.n	8003ab6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	330c      	adds	r3, #12
 80039e8:	7812      	ldrb	r2, [r2, #0]
 80039ea:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f0:	1c5a      	adds	r2, r3, #1
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	3b01      	subs	r3, #1
 80039fe:	b29a      	uxth	r2, r3
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a04:	e057      	b.n	8003ab6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	f003 0302 	and.w	r3, r3, #2
 8003a10:	2b02      	cmp	r3, #2
 8003a12:	d11c      	bne.n	8003a4e <HAL_SPI_TransmitReceive+0x26c>
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d017      	beq.n	8003a4e <HAL_SPI_TransmitReceive+0x26c>
 8003a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d114      	bne.n	8003a4e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	330c      	adds	r3, #12
 8003a2e:	7812      	ldrb	r2, [r2, #0]
 8003a30:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a36:	1c5a      	adds	r2, r3, #1
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	3b01      	subs	r3, #1
 8003a44:	b29a      	uxth	r2, r3
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	f003 0301 	and.w	r3, r3, #1
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d119      	bne.n	8003a90 <HAL_SPI_TransmitReceive+0x2ae>
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d014      	beq.n	8003a90 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	68da      	ldr	r2, [r3, #12]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a70:	b2d2      	uxtb	r2, r2
 8003a72:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a78:	1c5a      	adds	r2, r3, #1
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a82:	b29b      	uxth	r3, r3
 8003a84:	3b01      	subs	r3, #1
 8003a86:	b29a      	uxth	r2, r3
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003a90:	f7fe fc2e 	bl	80022f0 <HAL_GetTick>
 8003a94:	4602      	mov	r2, r0
 8003a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d803      	bhi.n	8003aa8 <HAL_SPI_TransmitReceive+0x2c6>
 8003aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aa6:	d102      	bne.n	8003aae <HAL_SPI_TransmitReceive+0x2cc>
 8003aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d103      	bne.n	8003ab6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003aae:	2303      	movs	r3, #3
 8003ab0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003ab4:	e029      	b.n	8003b0a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d1a2      	bne.n	8003a06 <HAL_SPI_TransmitReceive+0x224>
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ac4:	b29b      	uxth	r3, r3
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d19d      	bne.n	8003a06 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003aca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003acc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003ace:	68f8      	ldr	r0, [r7, #12]
 8003ad0:	f000 f8b2 	bl	8003c38 <SPI_EndRxTxTransaction>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d006      	beq.n	8003ae8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2220      	movs	r2, #32
 8003ae4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003ae6:	e010      	b.n	8003b0a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d10b      	bne.n	8003b08 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003af0:	2300      	movs	r3, #0
 8003af2:	617b      	str	r3, [r7, #20]
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	68db      	ldr	r3, [r3, #12]
 8003afa:	617b      	str	r3, [r7, #20]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	617b      	str	r3, [r7, #20]
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	e000      	b.n	8003b0a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003b08:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2200      	movs	r2, #0
 8003b16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003b1a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3730      	adds	r7, #48	; 0x30
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}
	...

08003b28 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b088      	sub	sp, #32
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	60f8      	str	r0, [r7, #12]
 8003b30:	60b9      	str	r1, [r7, #8]
 8003b32:	603b      	str	r3, [r7, #0]
 8003b34:	4613      	mov	r3, r2
 8003b36:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003b38:	f7fe fbda 	bl	80022f0 <HAL_GetTick>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b40:	1a9b      	subs	r3, r3, r2
 8003b42:	683a      	ldr	r2, [r7, #0]
 8003b44:	4413      	add	r3, r2
 8003b46:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003b48:	f7fe fbd2 	bl	80022f0 <HAL_GetTick>
 8003b4c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003b4e:	4b39      	ldr	r3, [pc, #228]	; (8003c34 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	015b      	lsls	r3, r3, #5
 8003b54:	0d1b      	lsrs	r3, r3, #20
 8003b56:	69fa      	ldr	r2, [r7, #28]
 8003b58:	fb02 f303 	mul.w	r3, r2, r3
 8003b5c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b5e:	e054      	b.n	8003c0a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b66:	d050      	beq.n	8003c0a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003b68:	f7fe fbc2 	bl	80022f0 <HAL_GetTick>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	69bb      	ldr	r3, [r7, #24]
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	69fa      	ldr	r2, [r7, #28]
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d902      	bls.n	8003b7e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003b78:	69fb      	ldr	r3, [r7, #28]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d13d      	bne.n	8003bfa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	685a      	ldr	r2, [r3, #4]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003b8c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b96:	d111      	bne.n	8003bbc <SPI_WaitFlagStateUntilTimeout+0x94>
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ba0:	d004      	beq.n	8003bac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003baa:	d107      	bne.n	8003bbc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bc0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bc4:	d10f      	bne.n	8003be6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003bd4:	601a      	str	r2, [r3, #0]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003be4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2201      	movs	r2, #1
 8003bea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003bf6:	2303      	movs	r3, #3
 8003bf8:	e017      	b.n	8003c2a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d101      	bne.n	8003c04 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003c00:	2300      	movs	r3, #0
 8003c02:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	3b01      	subs	r3, #1
 8003c08:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	689a      	ldr	r2, [r3, #8]
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	4013      	ands	r3, r2
 8003c14:	68ba      	ldr	r2, [r7, #8]
 8003c16:	429a      	cmp	r2, r3
 8003c18:	bf0c      	ite	eq
 8003c1a:	2301      	moveq	r3, #1
 8003c1c:	2300      	movne	r3, #0
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	461a      	mov	r2, r3
 8003c22:	79fb      	ldrb	r3, [r7, #7]
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d19b      	bne.n	8003b60 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003c28:	2300      	movs	r3, #0
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3720      	adds	r7, #32
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	bf00      	nop
 8003c34:	20000004 	.word	0x20000004

08003c38 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b088      	sub	sp, #32
 8003c3c:	af02      	add	r7, sp, #8
 8003c3e:	60f8      	str	r0, [r7, #12]
 8003c40:	60b9      	str	r1, [r7, #8]
 8003c42:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003c44:	4b1b      	ldr	r3, [pc, #108]	; (8003cb4 <SPI_EndRxTxTransaction+0x7c>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a1b      	ldr	r2, [pc, #108]	; (8003cb8 <SPI_EndRxTxTransaction+0x80>)
 8003c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c4e:	0d5b      	lsrs	r3, r3, #21
 8003c50:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003c54:	fb02 f303 	mul.w	r3, r2, r3
 8003c58:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c62:	d112      	bne.n	8003c8a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	9300      	str	r3, [sp, #0]
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	2180      	movs	r1, #128	; 0x80
 8003c6e:	68f8      	ldr	r0, [r7, #12]
 8003c70:	f7ff ff5a 	bl	8003b28 <SPI_WaitFlagStateUntilTimeout>
 8003c74:	4603      	mov	r3, r0
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d016      	beq.n	8003ca8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c7e:	f043 0220 	orr.w	r2, r3, #32
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003c86:	2303      	movs	r3, #3
 8003c88:	e00f      	b.n	8003caa <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d00a      	beq.n	8003ca6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	3b01      	subs	r3, #1
 8003c94:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ca0:	2b80      	cmp	r3, #128	; 0x80
 8003ca2:	d0f2      	beq.n	8003c8a <SPI_EndRxTxTransaction+0x52>
 8003ca4:	e000      	b.n	8003ca8 <SPI_EndRxTxTransaction+0x70>
        break;
 8003ca6:	bf00      	nop
  }

  return HAL_OK;
 8003ca8:	2300      	movs	r3, #0
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3718      	adds	r7, #24
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	20000004 	.word	0x20000004
 8003cb8:	165e9f81 	.word	0x165e9f81

08003cbc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b082      	sub	sp, #8
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d101      	bne.n	8003cce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e041      	b.n	8003d52 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d106      	bne.n	8003ce8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f7fe f9d2 	bl	800208c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2202      	movs	r2, #2
 8003cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	3304      	adds	r3, #4
 8003cf8:	4619      	mov	r1, r3
 8003cfa:	4610      	mov	r0, r2
 8003cfc:	f000 f968 	bl	8003fd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2201      	movs	r2, #1
 8003d04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2201      	movs	r2, #1
 8003d14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2201      	movs	r2, #1
 8003d24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2201      	movs	r2, #1
 8003d34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2201      	movs	r2, #1
 8003d44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d50:	2300      	movs	r3, #0
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3708      	adds	r7, #8
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}

08003d5a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d5a:	b580      	push	{r7, lr}
 8003d5c:	b082      	sub	sp, #8
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	691b      	ldr	r3, [r3, #16]
 8003d68:	f003 0302 	and.w	r3, r3, #2
 8003d6c:	2b02      	cmp	r3, #2
 8003d6e:	d122      	bne.n	8003db6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	f003 0302 	and.w	r3, r3, #2
 8003d7a:	2b02      	cmp	r3, #2
 8003d7c:	d11b      	bne.n	8003db6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f06f 0202 	mvn.w	r2, #2
 8003d86:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	699b      	ldr	r3, [r3, #24]
 8003d94:	f003 0303 	and.w	r3, r3, #3
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d003      	beq.n	8003da4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	f000 f8f8 	bl	8003f92 <HAL_TIM_IC_CaptureCallback>
 8003da2:	e005      	b.n	8003db0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	f000 f8ea 	bl	8003f7e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f000 f8fb 	bl	8003fa6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2200      	movs	r2, #0
 8003db4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	691b      	ldr	r3, [r3, #16]
 8003dbc:	f003 0304 	and.w	r3, r3, #4
 8003dc0:	2b04      	cmp	r3, #4
 8003dc2:	d122      	bne.n	8003e0a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	f003 0304 	and.w	r3, r3, #4
 8003dce:	2b04      	cmp	r3, #4
 8003dd0:	d11b      	bne.n	8003e0a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f06f 0204 	mvn.w	r2, #4
 8003dda:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2202      	movs	r2, #2
 8003de0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	699b      	ldr	r3, [r3, #24]
 8003de8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d003      	beq.n	8003df8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	f000 f8ce 	bl	8003f92 <HAL_TIM_IC_CaptureCallback>
 8003df6:	e005      	b.n	8003e04 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f000 f8c0 	bl	8003f7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f000 f8d1 	bl	8003fa6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2200      	movs	r2, #0
 8003e08:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	691b      	ldr	r3, [r3, #16]
 8003e10:	f003 0308 	and.w	r3, r3, #8
 8003e14:	2b08      	cmp	r3, #8
 8003e16:	d122      	bne.n	8003e5e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	68db      	ldr	r3, [r3, #12]
 8003e1e:	f003 0308 	and.w	r3, r3, #8
 8003e22:	2b08      	cmp	r3, #8
 8003e24:	d11b      	bne.n	8003e5e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f06f 0208 	mvn.w	r2, #8
 8003e2e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2204      	movs	r2, #4
 8003e34:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	69db      	ldr	r3, [r3, #28]
 8003e3c:	f003 0303 	and.w	r3, r3, #3
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d003      	beq.n	8003e4c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	f000 f8a4 	bl	8003f92 <HAL_TIM_IC_CaptureCallback>
 8003e4a:	e005      	b.n	8003e58 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f000 f896 	bl	8003f7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f000 f8a7 	bl	8003fa6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	691b      	ldr	r3, [r3, #16]
 8003e64:	f003 0310 	and.w	r3, r3, #16
 8003e68:	2b10      	cmp	r3, #16
 8003e6a:	d122      	bne.n	8003eb2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	68db      	ldr	r3, [r3, #12]
 8003e72:	f003 0310 	and.w	r3, r3, #16
 8003e76:	2b10      	cmp	r3, #16
 8003e78:	d11b      	bne.n	8003eb2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f06f 0210 	mvn.w	r2, #16
 8003e82:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2208      	movs	r2, #8
 8003e88:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	69db      	ldr	r3, [r3, #28]
 8003e90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d003      	beq.n	8003ea0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e98:	6878      	ldr	r0, [r7, #4]
 8003e9a:	f000 f87a 	bl	8003f92 <HAL_TIM_IC_CaptureCallback>
 8003e9e:	e005      	b.n	8003eac <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f000 f86c 	bl	8003f7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f000 f87d 	bl	8003fa6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	691b      	ldr	r3, [r3, #16]
 8003eb8:	f003 0301 	and.w	r3, r3, #1
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d10e      	bne.n	8003ede <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	68db      	ldr	r3, [r3, #12]
 8003ec6:	f003 0301 	and.w	r3, r3, #1
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d107      	bne.n	8003ede <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f06f 0201 	mvn.w	r2, #1
 8003ed6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ed8:	6878      	ldr	r0, [r7, #4]
 8003eda:	f000 f846 	bl	8003f6a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	691b      	ldr	r3, [r3, #16]
 8003ee4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ee8:	2b80      	cmp	r3, #128	; 0x80
 8003eea:	d10e      	bne.n	8003f0a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	68db      	ldr	r3, [r3, #12]
 8003ef2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ef6:	2b80      	cmp	r3, #128	; 0x80
 8003ef8:	d107      	bne.n	8003f0a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003f02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f000 f989 	bl	800421c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	691b      	ldr	r3, [r3, #16]
 8003f10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f14:	2b40      	cmp	r3, #64	; 0x40
 8003f16:	d10e      	bne.n	8003f36 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	68db      	ldr	r3, [r3, #12]
 8003f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f22:	2b40      	cmp	r3, #64	; 0x40
 8003f24:	d107      	bne.n	8003f36 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	f000 f842 	bl	8003fba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	691b      	ldr	r3, [r3, #16]
 8003f3c:	f003 0320 	and.w	r3, r3, #32
 8003f40:	2b20      	cmp	r3, #32
 8003f42:	d10e      	bne.n	8003f62 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	68db      	ldr	r3, [r3, #12]
 8003f4a:	f003 0320 	and.w	r3, r3, #32
 8003f4e:	2b20      	cmp	r3, #32
 8003f50:	d107      	bne.n	8003f62 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f06f 0220 	mvn.w	r2, #32
 8003f5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f000 f953 	bl	8004208 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f62:	bf00      	nop
 8003f64:	3708      	adds	r7, #8
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}

08003f6a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f6a:	b480      	push	{r7}
 8003f6c:	b083      	sub	sp, #12
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003f72:	bf00      	nop
 8003f74:	370c      	adds	r7, #12
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr

08003f7e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f7e:	b480      	push	{r7}
 8003f80:	b083      	sub	sp, #12
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f86:	bf00      	nop
 8003f88:	370c      	adds	r7, #12
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr

08003f92 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f92:	b480      	push	{r7}
 8003f94:	b083      	sub	sp, #12
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f9a:	bf00      	nop
 8003f9c:	370c      	adds	r7, #12
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa4:	4770      	bx	lr

08003fa6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003fa6:	b480      	push	{r7}
 8003fa8:	b083      	sub	sp, #12
 8003faa:	af00      	add	r7, sp, #0
 8003fac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003fae:	bf00      	nop
 8003fb0:	370c      	adds	r7, #12
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr

08003fba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003fba:	b480      	push	{r7}
 8003fbc:	b083      	sub	sp, #12
 8003fbe:	af00      	add	r7, sp, #0
 8003fc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003fc2:	bf00      	nop
 8003fc4:	370c      	adds	r7, #12
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr
	...

08003fd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b085      	sub	sp, #20
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	4a40      	ldr	r2, [pc, #256]	; (80040e4 <TIM_Base_SetConfig+0x114>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d013      	beq.n	8004010 <TIM_Base_SetConfig+0x40>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fee:	d00f      	beq.n	8004010 <TIM_Base_SetConfig+0x40>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	4a3d      	ldr	r2, [pc, #244]	; (80040e8 <TIM_Base_SetConfig+0x118>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d00b      	beq.n	8004010 <TIM_Base_SetConfig+0x40>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	4a3c      	ldr	r2, [pc, #240]	; (80040ec <TIM_Base_SetConfig+0x11c>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d007      	beq.n	8004010 <TIM_Base_SetConfig+0x40>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	4a3b      	ldr	r2, [pc, #236]	; (80040f0 <TIM_Base_SetConfig+0x120>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d003      	beq.n	8004010 <TIM_Base_SetConfig+0x40>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	4a3a      	ldr	r2, [pc, #232]	; (80040f4 <TIM_Base_SetConfig+0x124>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d108      	bne.n	8004022 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004016:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	68fa      	ldr	r2, [r7, #12]
 800401e:	4313      	orrs	r3, r2
 8004020:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	4a2f      	ldr	r2, [pc, #188]	; (80040e4 <TIM_Base_SetConfig+0x114>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d02b      	beq.n	8004082 <TIM_Base_SetConfig+0xb2>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004030:	d027      	beq.n	8004082 <TIM_Base_SetConfig+0xb2>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	4a2c      	ldr	r2, [pc, #176]	; (80040e8 <TIM_Base_SetConfig+0x118>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d023      	beq.n	8004082 <TIM_Base_SetConfig+0xb2>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4a2b      	ldr	r2, [pc, #172]	; (80040ec <TIM_Base_SetConfig+0x11c>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d01f      	beq.n	8004082 <TIM_Base_SetConfig+0xb2>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4a2a      	ldr	r2, [pc, #168]	; (80040f0 <TIM_Base_SetConfig+0x120>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d01b      	beq.n	8004082 <TIM_Base_SetConfig+0xb2>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	4a29      	ldr	r2, [pc, #164]	; (80040f4 <TIM_Base_SetConfig+0x124>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d017      	beq.n	8004082 <TIM_Base_SetConfig+0xb2>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4a28      	ldr	r2, [pc, #160]	; (80040f8 <TIM_Base_SetConfig+0x128>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d013      	beq.n	8004082 <TIM_Base_SetConfig+0xb2>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4a27      	ldr	r2, [pc, #156]	; (80040fc <TIM_Base_SetConfig+0x12c>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d00f      	beq.n	8004082 <TIM_Base_SetConfig+0xb2>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4a26      	ldr	r2, [pc, #152]	; (8004100 <TIM_Base_SetConfig+0x130>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d00b      	beq.n	8004082 <TIM_Base_SetConfig+0xb2>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4a25      	ldr	r2, [pc, #148]	; (8004104 <TIM_Base_SetConfig+0x134>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d007      	beq.n	8004082 <TIM_Base_SetConfig+0xb2>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a24      	ldr	r2, [pc, #144]	; (8004108 <TIM_Base_SetConfig+0x138>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d003      	beq.n	8004082 <TIM_Base_SetConfig+0xb2>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4a23      	ldr	r2, [pc, #140]	; (800410c <TIM_Base_SetConfig+0x13c>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d108      	bne.n	8004094 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004088:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	68db      	ldr	r3, [r3, #12]
 800408e:	68fa      	ldr	r2, [r7, #12]
 8004090:	4313      	orrs	r3, r2
 8004092:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	695b      	ldr	r3, [r3, #20]
 800409e:	4313      	orrs	r3, r2
 80040a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	68fa      	ldr	r2, [r7, #12]
 80040a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	689a      	ldr	r2, [r3, #8]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	4a0a      	ldr	r2, [pc, #40]	; (80040e4 <TIM_Base_SetConfig+0x114>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d003      	beq.n	80040c8 <TIM_Base_SetConfig+0xf8>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	4a0c      	ldr	r2, [pc, #48]	; (80040f4 <TIM_Base_SetConfig+0x124>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d103      	bne.n	80040d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	691a      	ldr	r2, [r3, #16]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2201      	movs	r2, #1
 80040d4:	615a      	str	r2, [r3, #20]
}
 80040d6:	bf00      	nop
 80040d8:	3714      	adds	r7, #20
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr
 80040e2:	bf00      	nop
 80040e4:	40010000 	.word	0x40010000
 80040e8:	40000400 	.word	0x40000400
 80040ec:	40000800 	.word	0x40000800
 80040f0:	40000c00 	.word	0x40000c00
 80040f4:	40010400 	.word	0x40010400
 80040f8:	40014000 	.word	0x40014000
 80040fc:	40014400 	.word	0x40014400
 8004100:	40014800 	.word	0x40014800
 8004104:	40001800 	.word	0x40001800
 8004108:	40001c00 	.word	0x40001c00
 800410c:	40002000 	.word	0x40002000

08004110 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004110:	b480      	push	{r7}
 8004112:	b085      	sub	sp, #20
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
 8004118:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004120:	2b01      	cmp	r3, #1
 8004122:	d101      	bne.n	8004128 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004124:	2302      	movs	r3, #2
 8004126:	e05a      	b.n	80041de <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2201      	movs	r2, #1
 800412c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2202      	movs	r2, #2
 8004134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800414e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	68fa      	ldr	r2, [r7, #12]
 8004156:	4313      	orrs	r3, r2
 8004158:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	68fa      	ldr	r2, [r7, #12]
 8004160:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a21      	ldr	r2, [pc, #132]	; (80041ec <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d022      	beq.n	80041b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004174:	d01d      	beq.n	80041b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a1d      	ldr	r2, [pc, #116]	; (80041f0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d018      	beq.n	80041b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a1b      	ldr	r2, [pc, #108]	; (80041f4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d013      	beq.n	80041b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a1a      	ldr	r2, [pc, #104]	; (80041f8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d00e      	beq.n	80041b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a18      	ldr	r2, [pc, #96]	; (80041fc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d009      	beq.n	80041b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a17      	ldr	r2, [pc, #92]	; (8004200 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d004      	beq.n	80041b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a15      	ldr	r2, [pc, #84]	; (8004204 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d10c      	bne.n	80041cc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	68ba      	ldr	r2, [r7, #8]
 80041c0:	4313      	orrs	r3, r2
 80041c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	68ba      	ldr	r2, [r7, #8]
 80041ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2201      	movs	r2, #1
 80041d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2200      	movs	r2, #0
 80041d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041dc:	2300      	movs	r3, #0
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3714      	adds	r7, #20
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr
 80041ea:	bf00      	nop
 80041ec:	40010000 	.word	0x40010000
 80041f0:	40000400 	.word	0x40000400
 80041f4:	40000800 	.word	0x40000800
 80041f8:	40000c00 	.word	0x40000c00
 80041fc:	40010400 	.word	0x40010400
 8004200:	40014000 	.word	0x40014000
 8004204:	40001800 	.word	0x40001800

08004208 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004208:	b480      	push	{r7}
 800420a:	b083      	sub	sp, #12
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004210:	bf00      	nop
 8004212:	370c      	adds	r7, #12
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr

0800421c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800421c:	b480      	push	{r7}
 800421e:	b083      	sub	sp, #12
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004224:	bf00      	nop
 8004226:	370c      	adds	r7, #12
 8004228:	46bd      	mov	sp, r7
 800422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422e:	4770      	bx	lr

08004230 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b082      	sub	sp, #8
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d101      	bne.n	8004242 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e03f      	b.n	80042c2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004248:	b2db      	uxtb	r3, r3
 800424a:	2b00      	cmp	r3, #0
 800424c:	d106      	bne.n	800425c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2200      	movs	r2, #0
 8004252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f7fd ff6a 	bl	8002130 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2224      	movs	r2, #36	; 0x24
 8004260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	68da      	ldr	r2, [r3, #12]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004272:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	f000 fd7b 	bl	8004d70 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	691a      	ldr	r2, [r3, #16]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004288:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	695a      	ldr	r2, [r3, #20]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004298:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	68da      	ldr	r2, [r3, #12]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80042a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2200      	movs	r2, #0
 80042ae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2220      	movs	r2, #32
 80042b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2220      	movs	r2, #32
 80042bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80042c0:	2300      	movs	r3, #0
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3708      	adds	r7, #8
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}

080042ca <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042ca:	b580      	push	{r7, lr}
 80042cc:	b08a      	sub	sp, #40	; 0x28
 80042ce:	af02      	add	r7, sp, #8
 80042d0:	60f8      	str	r0, [r7, #12]
 80042d2:	60b9      	str	r1, [r7, #8]
 80042d4:	603b      	str	r3, [r7, #0]
 80042d6:	4613      	mov	r3, r2
 80042d8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80042da:	2300      	movs	r3, #0
 80042dc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	2b20      	cmp	r3, #32
 80042e8:	d17c      	bne.n	80043e4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d002      	beq.n	80042f6 <HAL_UART_Transmit+0x2c>
 80042f0:	88fb      	ldrh	r3, [r7, #6]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d101      	bne.n	80042fa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e075      	b.n	80043e6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004300:	2b01      	cmp	r3, #1
 8004302:	d101      	bne.n	8004308 <HAL_UART_Transmit+0x3e>
 8004304:	2302      	movs	r3, #2
 8004306:	e06e      	b.n	80043e6 <HAL_UART_Transmit+0x11c>
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2201      	movs	r2, #1
 800430c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2200      	movs	r2, #0
 8004314:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2221      	movs	r2, #33	; 0x21
 800431a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800431e:	f7fd ffe7 	bl	80022f0 <HAL_GetTick>
 8004322:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	88fa      	ldrh	r2, [r7, #6]
 8004328:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	88fa      	ldrh	r2, [r7, #6]
 800432e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004338:	d108      	bne.n	800434c <HAL_UART_Transmit+0x82>
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	691b      	ldr	r3, [r3, #16]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d104      	bne.n	800434c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004342:	2300      	movs	r3, #0
 8004344:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	61bb      	str	r3, [r7, #24]
 800434a:	e003      	b.n	8004354 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004350:	2300      	movs	r3, #0
 8004352:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2200      	movs	r2, #0
 8004358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800435c:	e02a      	b.n	80043b4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	9300      	str	r3, [sp, #0]
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	2200      	movs	r2, #0
 8004366:	2180      	movs	r1, #128	; 0x80
 8004368:	68f8      	ldr	r0, [r7, #12]
 800436a:	f000 faf9 	bl	8004960 <UART_WaitOnFlagUntilTimeout>
 800436e:	4603      	mov	r3, r0
 8004370:	2b00      	cmp	r3, #0
 8004372:	d001      	beq.n	8004378 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004374:	2303      	movs	r3, #3
 8004376:	e036      	b.n	80043e6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004378:	69fb      	ldr	r3, [r7, #28]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d10b      	bne.n	8004396 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800437e:	69bb      	ldr	r3, [r7, #24]
 8004380:	881b      	ldrh	r3, [r3, #0]
 8004382:	461a      	mov	r2, r3
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800438c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800438e:	69bb      	ldr	r3, [r7, #24]
 8004390:	3302      	adds	r3, #2
 8004392:	61bb      	str	r3, [r7, #24]
 8004394:	e007      	b.n	80043a6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004396:	69fb      	ldr	r3, [r7, #28]
 8004398:	781a      	ldrb	r2, [r3, #0]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80043a0:	69fb      	ldr	r3, [r7, #28]
 80043a2:	3301      	adds	r3, #1
 80043a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80043aa:	b29b      	uxth	r3, r3
 80043ac:	3b01      	subs	r3, #1
 80043ae:	b29a      	uxth	r2, r3
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80043b8:	b29b      	uxth	r3, r3
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d1cf      	bne.n	800435e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	9300      	str	r3, [sp, #0]
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	2200      	movs	r2, #0
 80043c6:	2140      	movs	r1, #64	; 0x40
 80043c8:	68f8      	ldr	r0, [r7, #12]
 80043ca:	f000 fac9 	bl	8004960 <UART_WaitOnFlagUntilTimeout>
 80043ce:	4603      	mov	r3, r0
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d001      	beq.n	80043d8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80043d4:	2303      	movs	r3, #3
 80043d6:	e006      	b.n	80043e6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2220      	movs	r2, #32
 80043dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80043e0:	2300      	movs	r3, #0
 80043e2:	e000      	b.n	80043e6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80043e4:	2302      	movs	r3, #2
  }
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3720      	adds	r7, #32
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}
	...

080043f0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b0ba      	sub	sp, #232	; 0xe8
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	68db      	ldr	r3, [r3, #12]
 8004408:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	695b      	ldr	r3, [r3, #20]
 8004412:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004416:	2300      	movs	r3, #0
 8004418:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800441c:	2300      	movs	r3, #0
 800441e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004422:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004426:	f003 030f 	and.w	r3, r3, #15
 800442a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800442e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004432:	2b00      	cmp	r3, #0
 8004434:	d10f      	bne.n	8004456 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004436:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800443a:	f003 0320 	and.w	r3, r3, #32
 800443e:	2b00      	cmp	r3, #0
 8004440:	d009      	beq.n	8004456 <HAL_UART_IRQHandler+0x66>
 8004442:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004446:	f003 0320 	and.w	r3, r3, #32
 800444a:	2b00      	cmp	r3, #0
 800444c:	d003      	beq.n	8004456 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f000 fbd3 	bl	8004bfa <UART_Receive_IT>
      return;
 8004454:	e256      	b.n	8004904 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004456:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800445a:	2b00      	cmp	r3, #0
 800445c:	f000 80de 	beq.w	800461c <HAL_UART_IRQHandler+0x22c>
 8004460:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004464:	f003 0301 	and.w	r3, r3, #1
 8004468:	2b00      	cmp	r3, #0
 800446a:	d106      	bne.n	800447a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800446c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004470:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004474:	2b00      	cmp	r3, #0
 8004476:	f000 80d1 	beq.w	800461c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800447a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800447e:	f003 0301 	and.w	r3, r3, #1
 8004482:	2b00      	cmp	r3, #0
 8004484:	d00b      	beq.n	800449e <HAL_UART_IRQHandler+0xae>
 8004486:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800448a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800448e:	2b00      	cmp	r3, #0
 8004490:	d005      	beq.n	800449e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004496:	f043 0201 	orr.w	r2, r3, #1
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800449e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044a2:	f003 0304 	and.w	r3, r3, #4
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d00b      	beq.n	80044c2 <HAL_UART_IRQHandler+0xd2>
 80044aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80044ae:	f003 0301 	and.w	r3, r3, #1
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d005      	beq.n	80044c2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ba:	f043 0202 	orr.w	r2, r3, #2
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80044c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044c6:	f003 0302 	and.w	r3, r3, #2
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d00b      	beq.n	80044e6 <HAL_UART_IRQHandler+0xf6>
 80044ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80044d2:	f003 0301 	and.w	r3, r3, #1
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d005      	beq.n	80044e6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044de:	f043 0204 	orr.w	r2, r3, #4
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80044e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044ea:	f003 0308 	and.w	r3, r3, #8
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d011      	beq.n	8004516 <HAL_UART_IRQHandler+0x126>
 80044f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044f6:	f003 0320 	and.w	r3, r3, #32
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d105      	bne.n	800450a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80044fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004502:	f003 0301 	and.w	r3, r3, #1
 8004506:	2b00      	cmp	r3, #0
 8004508:	d005      	beq.n	8004516 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450e:	f043 0208 	orr.w	r2, r3, #8
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451a:	2b00      	cmp	r3, #0
 800451c:	f000 81ed 	beq.w	80048fa <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004520:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004524:	f003 0320 	and.w	r3, r3, #32
 8004528:	2b00      	cmp	r3, #0
 800452a:	d008      	beq.n	800453e <HAL_UART_IRQHandler+0x14e>
 800452c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004530:	f003 0320 	and.w	r3, r3, #32
 8004534:	2b00      	cmp	r3, #0
 8004536:	d002      	beq.n	800453e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004538:	6878      	ldr	r0, [r7, #4]
 800453a:	f000 fb5e 	bl	8004bfa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	695b      	ldr	r3, [r3, #20]
 8004544:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004548:	2b40      	cmp	r3, #64	; 0x40
 800454a:	bf0c      	ite	eq
 800454c:	2301      	moveq	r3, #1
 800454e:	2300      	movne	r3, #0
 8004550:	b2db      	uxtb	r3, r3
 8004552:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800455a:	f003 0308 	and.w	r3, r3, #8
 800455e:	2b00      	cmp	r3, #0
 8004560:	d103      	bne.n	800456a <HAL_UART_IRQHandler+0x17a>
 8004562:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004566:	2b00      	cmp	r3, #0
 8004568:	d04f      	beq.n	800460a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f000 fa66 	bl	8004a3c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	695b      	ldr	r3, [r3, #20]
 8004576:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800457a:	2b40      	cmp	r3, #64	; 0x40
 800457c:	d141      	bne.n	8004602 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	3314      	adds	r3, #20
 8004584:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004588:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800458c:	e853 3f00 	ldrex	r3, [r3]
 8004590:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004594:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004598:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800459c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	3314      	adds	r3, #20
 80045a6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80045aa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80045ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045b2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80045b6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80045ba:	e841 2300 	strex	r3, r2, [r1]
 80045be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80045c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d1d9      	bne.n	800457e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d013      	beq.n	80045fa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045d6:	4a7d      	ldr	r2, [pc, #500]	; (80047cc <HAL_UART_IRQHandler+0x3dc>)
 80045d8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045de:	4618      	mov	r0, r3
 80045e0:	f7fe f844 	bl	800266c <HAL_DMA_Abort_IT>
 80045e4:	4603      	mov	r3, r0
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d016      	beq.n	8004618 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045f0:	687a      	ldr	r2, [r7, #4]
 80045f2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80045f4:	4610      	mov	r0, r2
 80045f6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045f8:	e00e      	b.n	8004618 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f000 f99a 	bl	8004934 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004600:	e00a      	b.n	8004618 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f000 f996 	bl	8004934 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004608:	e006      	b.n	8004618 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f000 f992 	bl	8004934 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2200      	movs	r2, #0
 8004614:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004616:	e170      	b.n	80048fa <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004618:	bf00      	nop
    return;
 800461a:	e16e      	b.n	80048fa <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004620:	2b01      	cmp	r3, #1
 8004622:	f040 814a 	bne.w	80048ba <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004626:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800462a:	f003 0310 	and.w	r3, r3, #16
 800462e:	2b00      	cmp	r3, #0
 8004630:	f000 8143 	beq.w	80048ba <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004634:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004638:	f003 0310 	and.w	r3, r3, #16
 800463c:	2b00      	cmp	r3, #0
 800463e:	f000 813c 	beq.w	80048ba <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004642:	2300      	movs	r3, #0
 8004644:	60bb      	str	r3, [r7, #8]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	60bb      	str	r3, [r7, #8]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	60bb      	str	r3, [r7, #8]
 8004656:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	695b      	ldr	r3, [r3, #20]
 800465e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004662:	2b40      	cmp	r3, #64	; 0x40
 8004664:	f040 80b4 	bne.w	80047d0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004674:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004678:	2b00      	cmp	r3, #0
 800467a:	f000 8140 	beq.w	80048fe <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004682:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004686:	429a      	cmp	r2, r3
 8004688:	f080 8139 	bcs.w	80048fe <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004692:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004698:	69db      	ldr	r3, [r3, #28]
 800469a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800469e:	f000 8088 	beq.w	80047b2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	330c      	adds	r3, #12
 80046a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80046b0:	e853 3f00 	ldrex	r3, [r3]
 80046b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80046b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80046bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	330c      	adds	r3, #12
 80046ca:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80046ce:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80046d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046d6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80046da:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80046de:	e841 2300 	strex	r3, r2, [r1]
 80046e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80046e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d1d9      	bne.n	80046a2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	3314      	adds	r3, #20
 80046f4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046f8:	e853 3f00 	ldrex	r3, [r3]
 80046fc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80046fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004700:	f023 0301 	bic.w	r3, r3, #1
 8004704:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	3314      	adds	r3, #20
 800470e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004712:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004716:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004718:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800471a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800471e:	e841 2300 	strex	r3, r2, [r1]
 8004722:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004724:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004726:	2b00      	cmp	r3, #0
 8004728:	d1e1      	bne.n	80046ee <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	3314      	adds	r3, #20
 8004730:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004732:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004734:	e853 3f00 	ldrex	r3, [r3]
 8004738:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800473a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800473c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004740:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	3314      	adds	r3, #20
 800474a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800474e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004750:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004752:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004754:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004756:	e841 2300 	strex	r3, r2, [r1]
 800475a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800475c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800475e:	2b00      	cmp	r3, #0
 8004760:	d1e3      	bne.n	800472a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2220      	movs	r2, #32
 8004766:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2200      	movs	r2, #0
 800476e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	330c      	adds	r3, #12
 8004776:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004778:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800477a:	e853 3f00 	ldrex	r3, [r3]
 800477e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004780:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004782:	f023 0310 	bic.w	r3, r3, #16
 8004786:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	330c      	adds	r3, #12
 8004790:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004794:	65ba      	str	r2, [r7, #88]	; 0x58
 8004796:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004798:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800479a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800479c:	e841 2300 	strex	r3, r2, [r1]
 80047a0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80047a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d1e3      	bne.n	8004770 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ac:	4618      	mov	r0, r3
 80047ae:	f7fd feed 	bl	800258c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	b29b      	uxth	r3, r3
 80047c0:	4619      	mov	r1, r3
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f000 f8c0 	bl	8004948 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80047c8:	e099      	b.n	80048fe <HAL_UART_IRQHandler+0x50e>
 80047ca:	bf00      	nop
 80047cc:	08004b03 	.word	0x08004b03
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80047d8:	b29b      	uxth	r3, r3
 80047da:	1ad3      	subs	r3, r2, r3
 80047dc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80047e4:	b29b      	uxth	r3, r3
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	f000 808b 	beq.w	8004902 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80047ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	f000 8086 	beq.w	8004902 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	330c      	adds	r3, #12
 80047fc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004800:	e853 3f00 	ldrex	r3, [r3]
 8004804:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004806:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004808:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800480c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	330c      	adds	r3, #12
 8004816:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800481a:	647a      	str	r2, [r7, #68]	; 0x44
 800481c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800481e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004820:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004822:	e841 2300 	strex	r3, r2, [r1]
 8004826:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004828:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800482a:	2b00      	cmp	r3, #0
 800482c:	d1e3      	bne.n	80047f6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	3314      	adds	r3, #20
 8004834:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004838:	e853 3f00 	ldrex	r3, [r3]
 800483c:	623b      	str	r3, [r7, #32]
   return(result);
 800483e:	6a3b      	ldr	r3, [r7, #32]
 8004840:	f023 0301 	bic.w	r3, r3, #1
 8004844:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	3314      	adds	r3, #20
 800484e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004852:	633a      	str	r2, [r7, #48]	; 0x30
 8004854:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004856:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004858:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800485a:	e841 2300 	strex	r3, r2, [r1]
 800485e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004862:	2b00      	cmp	r3, #0
 8004864:	d1e3      	bne.n	800482e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2220      	movs	r2, #32
 800486a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2200      	movs	r2, #0
 8004872:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	330c      	adds	r3, #12
 800487a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	e853 3f00 	ldrex	r3, [r3]
 8004882:	60fb      	str	r3, [r7, #12]
   return(result);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f023 0310 	bic.w	r3, r3, #16
 800488a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	330c      	adds	r3, #12
 8004894:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004898:	61fa      	str	r2, [r7, #28]
 800489a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800489c:	69b9      	ldr	r1, [r7, #24]
 800489e:	69fa      	ldr	r2, [r7, #28]
 80048a0:	e841 2300 	strex	r3, r2, [r1]
 80048a4:	617b      	str	r3, [r7, #20]
   return(result);
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d1e3      	bne.n	8004874 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80048ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80048b0:	4619      	mov	r1, r3
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f000 f848 	bl	8004948 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80048b8:	e023      	b.n	8004902 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80048ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d009      	beq.n	80048da <HAL_UART_IRQHandler+0x4ea>
 80048c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d003      	beq.n	80048da <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f000 f929 	bl	8004b2a <UART_Transmit_IT>
    return;
 80048d8:	e014      	b.n	8004904 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80048da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d00e      	beq.n	8004904 <HAL_UART_IRQHandler+0x514>
 80048e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d008      	beq.n	8004904 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f000 f969 	bl	8004bca <UART_EndTransmit_IT>
    return;
 80048f8:	e004      	b.n	8004904 <HAL_UART_IRQHandler+0x514>
    return;
 80048fa:	bf00      	nop
 80048fc:	e002      	b.n	8004904 <HAL_UART_IRQHandler+0x514>
      return;
 80048fe:	bf00      	nop
 8004900:	e000      	b.n	8004904 <HAL_UART_IRQHandler+0x514>
      return;
 8004902:	bf00      	nop
  }
}
 8004904:	37e8      	adds	r7, #232	; 0xe8
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}
 800490a:	bf00      	nop

0800490c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800490c:	b480      	push	{r7}
 800490e:	b083      	sub	sp, #12
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004914:	bf00      	nop
 8004916:	370c      	adds	r7, #12
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr

08004920 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004920:	b480      	push	{r7}
 8004922:	b083      	sub	sp, #12
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004928:	bf00      	nop
 800492a:	370c      	adds	r7, #12
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr

08004934 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004934:	b480      	push	{r7}
 8004936:	b083      	sub	sp, #12
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800493c:	bf00      	nop
 800493e:	370c      	adds	r7, #12
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr

08004948 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004948:	b480      	push	{r7}
 800494a:	b083      	sub	sp, #12
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
 8004950:	460b      	mov	r3, r1
 8004952:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004954:	bf00      	nop
 8004956:	370c      	adds	r7, #12
 8004958:	46bd      	mov	sp, r7
 800495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495e:	4770      	bx	lr

08004960 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b090      	sub	sp, #64	; 0x40
 8004964:	af00      	add	r7, sp, #0
 8004966:	60f8      	str	r0, [r7, #12]
 8004968:	60b9      	str	r1, [r7, #8]
 800496a:	603b      	str	r3, [r7, #0]
 800496c:	4613      	mov	r3, r2
 800496e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004970:	e050      	b.n	8004a14 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004972:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004978:	d04c      	beq.n	8004a14 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800497a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800497c:	2b00      	cmp	r3, #0
 800497e:	d007      	beq.n	8004990 <UART_WaitOnFlagUntilTimeout+0x30>
 8004980:	f7fd fcb6 	bl	80022f0 <HAL_GetTick>
 8004984:	4602      	mov	r2, r0
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	1ad3      	subs	r3, r2, r3
 800498a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800498c:	429a      	cmp	r2, r3
 800498e:	d241      	bcs.n	8004a14 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	330c      	adds	r3, #12
 8004996:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800499a:	e853 3f00 	ldrex	r3, [r3]
 800499e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80049a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80049a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	330c      	adds	r3, #12
 80049ae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80049b0:	637a      	str	r2, [r7, #52]	; 0x34
 80049b2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80049b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80049b8:	e841 2300 	strex	r3, r2, [r1]
 80049bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80049be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d1e5      	bne.n	8004990 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	3314      	adds	r3, #20
 80049ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	e853 3f00 	ldrex	r3, [r3]
 80049d2:	613b      	str	r3, [r7, #16]
   return(result);
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	f023 0301 	bic.w	r3, r3, #1
 80049da:	63bb      	str	r3, [r7, #56]	; 0x38
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	3314      	adds	r3, #20
 80049e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80049e4:	623a      	str	r2, [r7, #32]
 80049e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049e8:	69f9      	ldr	r1, [r7, #28]
 80049ea:	6a3a      	ldr	r2, [r7, #32]
 80049ec:	e841 2300 	strex	r3, r2, [r1]
 80049f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80049f2:	69bb      	ldr	r3, [r7, #24]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d1e5      	bne.n	80049c4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2220      	movs	r2, #32
 80049fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2220      	movs	r2, #32
 8004a04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004a10:	2303      	movs	r3, #3
 8004a12:	e00f      	b.n	8004a34 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	681a      	ldr	r2, [r3, #0]
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	4013      	ands	r3, r2
 8004a1e:	68ba      	ldr	r2, [r7, #8]
 8004a20:	429a      	cmp	r2, r3
 8004a22:	bf0c      	ite	eq
 8004a24:	2301      	moveq	r3, #1
 8004a26:	2300      	movne	r3, #0
 8004a28:	b2db      	uxtb	r3, r3
 8004a2a:	461a      	mov	r2, r3
 8004a2c:	79fb      	ldrb	r3, [r7, #7]
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	d09f      	beq.n	8004972 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004a32:	2300      	movs	r3, #0
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	3740      	adds	r7, #64	; 0x40
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}

08004a3c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b095      	sub	sp, #84	; 0x54
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	330c      	adds	r3, #12
 8004a4a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a4e:	e853 3f00 	ldrex	r3, [r3]
 8004a52:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a56:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	330c      	adds	r3, #12
 8004a62:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004a64:	643a      	str	r2, [r7, #64]	; 0x40
 8004a66:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a68:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004a6a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004a6c:	e841 2300 	strex	r3, r2, [r1]
 8004a70:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d1e5      	bne.n	8004a44 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	3314      	adds	r3, #20
 8004a7e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a80:	6a3b      	ldr	r3, [r7, #32]
 8004a82:	e853 3f00 	ldrex	r3, [r3]
 8004a86:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a88:	69fb      	ldr	r3, [r7, #28]
 8004a8a:	f023 0301 	bic.w	r3, r3, #1
 8004a8e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	3314      	adds	r3, #20
 8004a96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a98:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a9a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004aa0:	e841 2300 	strex	r3, r2, [r1]
 8004aa4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d1e5      	bne.n	8004a78 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	d119      	bne.n	8004ae8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	330c      	adds	r3, #12
 8004aba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	e853 3f00 	ldrex	r3, [r3]
 8004ac2:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	f023 0310 	bic.w	r3, r3, #16
 8004aca:	647b      	str	r3, [r7, #68]	; 0x44
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	330c      	adds	r3, #12
 8004ad2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ad4:	61ba      	str	r2, [r7, #24]
 8004ad6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ad8:	6979      	ldr	r1, [r7, #20]
 8004ada:	69ba      	ldr	r2, [r7, #24]
 8004adc:	e841 2300 	strex	r3, r2, [r1]
 8004ae0:	613b      	str	r3, [r7, #16]
   return(result);
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d1e5      	bne.n	8004ab4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2220      	movs	r2, #32
 8004aec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2200      	movs	r2, #0
 8004af4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004af6:	bf00      	nop
 8004af8:	3754      	adds	r7, #84	; 0x54
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr

08004b02 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004b02:	b580      	push	{r7, lr}
 8004b04:	b084      	sub	sp, #16
 8004b06:	af00      	add	r7, sp, #0
 8004b08:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b0e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2200      	movs	r2, #0
 8004b14:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004b1c:	68f8      	ldr	r0, [r7, #12]
 8004b1e:	f7ff ff09 	bl	8004934 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b22:	bf00      	nop
 8004b24:	3710      	adds	r7, #16
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}

08004b2a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004b2a:	b480      	push	{r7}
 8004b2c:	b085      	sub	sp, #20
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b38:	b2db      	uxtb	r3, r3
 8004b3a:	2b21      	cmp	r3, #33	; 0x21
 8004b3c:	d13e      	bne.n	8004bbc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b46:	d114      	bne.n	8004b72 <UART_Transmit_IT+0x48>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	691b      	ldr	r3, [r3, #16]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d110      	bne.n	8004b72 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6a1b      	ldr	r3, [r3, #32]
 8004b54:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	881b      	ldrh	r3, [r3, #0]
 8004b5a:	461a      	mov	r2, r3
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b64:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6a1b      	ldr	r3, [r3, #32]
 8004b6a:	1c9a      	adds	r2, r3, #2
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	621a      	str	r2, [r3, #32]
 8004b70:	e008      	b.n	8004b84 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6a1b      	ldr	r3, [r3, #32]
 8004b76:	1c59      	adds	r1, r3, #1
 8004b78:	687a      	ldr	r2, [r7, #4]
 8004b7a:	6211      	str	r1, [r2, #32]
 8004b7c:	781a      	ldrb	r2, [r3, #0]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004b88:	b29b      	uxth	r3, r3
 8004b8a:	3b01      	subs	r3, #1
 8004b8c:	b29b      	uxth	r3, r3
 8004b8e:	687a      	ldr	r2, [r7, #4]
 8004b90:	4619      	mov	r1, r3
 8004b92:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d10f      	bne.n	8004bb8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	68da      	ldr	r2, [r3, #12]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ba6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	68da      	ldr	r2, [r3, #12]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004bb6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	e000      	b.n	8004bbe <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004bbc:	2302      	movs	r3, #2
  }
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	3714      	adds	r7, #20
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc8:	4770      	bx	lr

08004bca <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004bca:	b580      	push	{r7, lr}
 8004bcc:	b082      	sub	sp, #8
 8004bce:	af00      	add	r7, sp, #0
 8004bd0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	68da      	ldr	r2, [r3, #12]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004be0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2220      	movs	r2, #32
 8004be6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f7ff fe8e 	bl	800490c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004bf0:	2300      	movs	r3, #0
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3708      	adds	r7, #8
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}

08004bfa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004bfa:	b580      	push	{r7, lr}
 8004bfc:	b08c      	sub	sp, #48	; 0x30
 8004bfe:	af00      	add	r7, sp, #0
 8004c00:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c08:	b2db      	uxtb	r3, r3
 8004c0a:	2b22      	cmp	r3, #34	; 0x22
 8004c0c:	f040 80ab 	bne.w	8004d66 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c18:	d117      	bne.n	8004c4a <UART_Receive_IT+0x50>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	691b      	ldr	r3, [r3, #16]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d113      	bne.n	8004c4a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004c22:	2300      	movs	r3, #0
 8004c24:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c2a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	b29b      	uxth	r3, r3
 8004c34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c38:	b29a      	uxth	r2, r3
 8004c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c3c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c42:	1c9a      	adds	r2, r3, #2
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	629a      	str	r2, [r3, #40]	; 0x28
 8004c48:	e026      	b.n	8004c98 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004c50:	2300      	movs	r3, #0
 8004c52:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c5c:	d007      	beq.n	8004c6e <UART_Receive_IT+0x74>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d10a      	bne.n	8004c7c <UART_Receive_IT+0x82>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	691b      	ldr	r3, [r3, #16]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d106      	bne.n	8004c7c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	b2da      	uxtb	r2, r3
 8004c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c78:	701a      	strb	r2, [r3, #0]
 8004c7a:	e008      	b.n	8004c8e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	b2db      	uxtb	r3, r3
 8004c84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c88:	b2da      	uxtb	r2, r3
 8004c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c8c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c92:	1c5a      	adds	r2, r3, #1
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c9c:	b29b      	uxth	r3, r3
 8004c9e:	3b01      	subs	r3, #1
 8004ca0:	b29b      	uxth	r3, r3
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	4619      	mov	r1, r3
 8004ca6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d15a      	bne.n	8004d62 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	68da      	ldr	r2, [r3, #12]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f022 0220 	bic.w	r2, r2, #32
 8004cba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	68da      	ldr	r2, [r3, #12]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004cca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	695a      	ldr	r2, [r3, #20]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f022 0201 	bic.w	r2, r2, #1
 8004cda:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2220      	movs	r2, #32
 8004ce0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d135      	bne.n	8004d58 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	330c      	adds	r3, #12
 8004cf8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	e853 3f00 	ldrex	r3, [r3]
 8004d00:	613b      	str	r3, [r7, #16]
   return(result);
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	f023 0310 	bic.w	r3, r3, #16
 8004d08:	627b      	str	r3, [r7, #36]	; 0x24
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	330c      	adds	r3, #12
 8004d10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d12:	623a      	str	r2, [r7, #32]
 8004d14:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d16:	69f9      	ldr	r1, [r7, #28]
 8004d18:	6a3a      	ldr	r2, [r7, #32]
 8004d1a:	e841 2300 	strex	r3, r2, [r1]
 8004d1e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d20:	69bb      	ldr	r3, [r7, #24]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d1e5      	bne.n	8004cf2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f003 0310 	and.w	r3, r3, #16
 8004d30:	2b10      	cmp	r3, #16
 8004d32:	d10a      	bne.n	8004d4a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004d34:	2300      	movs	r3, #0
 8004d36:	60fb      	str	r3, [r7, #12]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	60fb      	str	r3, [r7, #12]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	60fb      	str	r3, [r7, #12]
 8004d48:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004d4e:	4619      	mov	r1, r3
 8004d50:	6878      	ldr	r0, [r7, #4]
 8004d52:	f7ff fdf9 	bl	8004948 <HAL_UARTEx_RxEventCallback>
 8004d56:	e002      	b.n	8004d5e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004d58:	6878      	ldr	r0, [r7, #4]
 8004d5a:	f7ff fde1 	bl	8004920 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	e002      	b.n	8004d68 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004d62:	2300      	movs	r3, #0
 8004d64:	e000      	b.n	8004d68 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004d66:	2302      	movs	r3, #2
  }
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	3730      	adds	r7, #48	; 0x30
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}

08004d70 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d74:	b09f      	sub	sp, #124	; 0x7c
 8004d76:	af00      	add	r7, sp, #0
 8004d78:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	691b      	ldr	r3, [r3, #16]
 8004d80:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004d84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d86:	68d9      	ldr	r1, [r3, #12]
 8004d88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	ea40 0301 	orr.w	r3, r0, r1
 8004d90:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004d92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d94:	689a      	ldr	r2, [r3, #8]
 8004d96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d98:	691b      	ldr	r3, [r3, #16]
 8004d9a:	431a      	orrs	r2, r3
 8004d9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d9e:	695b      	ldr	r3, [r3, #20]
 8004da0:	431a      	orrs	r2, r3
 8004da2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004da4:	69db      	ldr	r3, [r3, #28]
 8004da6:	4313      	orrs	r3, r2
 8004da8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004daa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	68db      	ldr	r3, [r3, #12]
 8004db0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004db4:	f021 010c 	bic.w	r1, r1, #12
 8004db8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004dbe:	430b      	orrs	r3, r1
 8004dc0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004dc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	695b      	ldr	r3, [r3, #20]
 8004dc8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004dcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dce:	6999      	ldr	r1, [r3, #24]
 8004dd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	ea40 0301 	orr.w	r3, r0, r1
 8004dd8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004dda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	4bc5      	ldr	r3, [pc, #788]	; (80050f4 <UART_SetConfig+0x384>)
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d004      	beq.n	8004dee <UART_SetConfig+0x7e>
 8004de4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004de6:	681a      	ldr	r2, [r3, #0]
 8004de8:	4bc3      	ldr	r3, [pc, #780]	; (80050f8 <UART_SetConfig+0x388>)
 8004dea:	429a      	cmp	r2, r3
 8004dec:	d103      	bne.n	8004df6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004dee:	f7fe fb1f 	bl	8003430 <HAL_RCC_GetPCLK2Freq>
 8004df2:	6778      	str	r0, [r7, #116]	; 0x74
 8004df4:	e002      	b.n	8004dfc <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004df6:	f7fe fb07 	bl	8003408 <HAL_RCC_GetPCLK1Freq>
 8004dfa:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004dfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dfe:	69db      	ldr	r3, [r3, #28]
 8004e00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e04:	f040 80b6 	bne.w	8004f74 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004e08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e0a:	461c      	mov	r4, r3
 8004e0c:	f04f 0500 	mov.w	r5, #0
 8004e10:	4622      	mov	r2, r4
 8004e12:	462b      	mov	r3, r5
 8004e14:	1891      	adds	r1, r2, r2
 8004e16:	6439      	str	r1, [r7, #64]	; 0x40
 8004e18:	415b      	adcs	r3, r3
 8004e1a:	647b      	str	r3, [r7, #68]	; 0x44
 8004e1c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004e20:	1912      	adds	r2, r2, r4
 8004e22:	eb45 0303 	adc.w	r3, r5, r3
 8004e26:	f04f 0000 	mov.w	r0, #0
 8004e2a:	f04f 0100 	mov.w	r1, #0
 8004e2e:	00d9      	lsls	r1, r3, #3
 8004e30:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004e34:	00d0      	lsls	r0, r2, #3
 8004e36:	4602      	mov	r2, r0
 8004e38:	460b      	mov	r3, r1
 8004e3a:	1911      	adds	r1, r2, r4
 8004e3c:	6639      	str	r1, [r7, #96]	; 0x60
 8004e3e:	416b      	adcs	r3, r5
 8004e40:	667b      	str	r3, [r7, #100]	; 0x64
 8004e42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	461a      	mov	r2, r3
 8004e48:	f04f 0300 	mov.w	r3, #0
 8004e4c:	1891      	adds	r1, r2, r2
 8004e4e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004e50:	415b      	adcs	r3, r3
 8004e52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e54:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004e58:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004e5c:	f7fb fd26 	bl	80008ac <__aeabi_uldivmod>
 8004e60:	4602      	mov	r2, r0
 8004e62:	460b      	mov	r3, r1
 8004e64:	4ba5      	ldr	r3, [pc, #660]	; (80050fc <UART_SetConfig+0x38c>)
 8004e66:	fba3 2302 	umull	r2, r3, r3, r2
 8004e6a:	095b      	lsrs	r3, r3, #5
 8004e6c:	011e      	lsls	r6, r3, #4
 8004e6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e70:	461c      	mov	r4, r3
 8004e72:	f04f 0500 	mov.w	r5, #0
 8004e76:	4622      	mov	r2, r4
 8004e78:	462b      	mov	r3, r5
 8004e7a:	1891      	adds	r1, r2, r2
 8004e7c:	6339      	str	r1, [r7, #48]	; 0x30
 8004e7e:	415b      	adcs	r3, r3
 8004e80:	637b      	str	r3, [r7, #52]	; 0x34
 8004e82:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004e86:	1912      	adds	r2, r2, r4
 8004e88:	eb45 0303 	adc.w	r3, r5, r3
 8004e8c:	f04f 0000 	mov.w	r0, #0
 8004e90:	f04f 0100 	mov.w	r1, #0
 8004e94:	00d9      	lsls	r1, r3, #3
 8004e96:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004e9a:	00d0      	lsls	r0, r2, #3
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	460b      	mov	r3, r1
 8004ea0:	1911      	adds	r1, r2, r4
 8004ea2:	65b9      	str	r1, [r7, #88]	; 0x58
 8004ea4:	416b      	adcs	r3, r5
 8004ea6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ea8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	461a      	mov	r2, r3
 8004eae:	f04f 0300 	mov.w	r3, #0
 8004eb2:	1891      	adds	r1, r2, r2
 8004eb4:	62b9      	str	r1, [r7, #40]	; 0x28
 8004eb6:	415b      	adcs	r3, r3
 8004eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004eba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004ebe:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004ec2:	f7fb fcf3 	bl	80008ac <__aeabi_uldivmod>
 8004ec6:	4602      	mov	r2, r0
 8004ec8:	460b      	mov	r3, r1
 8004eca:	4b8c      	ldr	r3, [pc, #560]	; (80050fc <UART_SetConfig+0x38c>)
 8004ecc:	fba3 1302 	umull	r1, r3, r3, r2
 8004ed0:	095b      	lsrs	r3, r3, #5
 8004ed2:	2164      	movs	r1, #100	; 0x64
 8004ed4:	fb01 f303 	mul.w	r3, r1, r3
 8004ed8:	1ad3      	subs	r3, r2, r3
 8004eda:	00db      	lsls	r3, r3, #3
 8004edc:	3332      	adds	r3, #50	; 0x32
 8004ede:	4a87      	ldr	r2, [pc, #540]	; (80050fc <UART_SetConfig+0x38c>)
 8004ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ee4:	095b      	lsrs	r3, r3, #5
 8004ee6:	005b      	lsls	r3, r3, #1
 8004ee8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004eec:	441e      	add	r6, r3
 8004eee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f04f 0100 	mov.w	r1, #0
 8004ef6:	4602      	mov	r2, r0
 8004ef8:	460b      	mov	r3, r1
 8004efa:	1894      	adds	r4, r2, r2
 8004efc:	623c      	str	r4, [r7, #32]
 8004efe:	415b      	adcs	r3, r3
 8004f00:	627b      	str	r3, [r7, #36]	; 0x24
 8004f02:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004f06:	1812      	adds	r2, r2, r0
 8004f08:	eb41 0303 	adc.w	r3, r1, r3
 8004f0c:	f04f 0400 	mov.w	r4, #0
 8004f10:	f04f 0500 	mov.w	r5, #0
 8004f14:	00dd      	lsls	r5, r3, #3
 8004f16:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004f1a:	00d4      	lsls	r4, r2, #3
 8004f1c:	4622      	mov	r2, r4
 8004f1e:	462b      	mov	r3, r5
 8004f20:	1814      	adds	r4, r2, r0
 8004f22:	653c      	str	r4, [r7, #80]	; 0x50
 8004f24:	414b      	adcs	r3, r1
 8004f26:	657b      	str	r3, [r7, #84]	; 0x54
 8004f28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	461a      	mov	r2, r3
 8004f2e:	f04f 0300 	mov.w	r3, #0
 8004f32:	1891      	adds	r1, r2, r2
 8004f34:	61b9      	str	r1, [r7, #24]
 8004f36:	415b      	adcs	r3, r3
 8004f38:	61fb      	str	r3, [r7, #28]
 8004f3a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f3e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004f42:	f7fb fcb3 	bl	80008ac <__aeabi_uldivmod>
 8004f46:	4602      	mov	r2, r0
 8004f48:	460b      	mov	r3, r1
 8004f4a:	4b6c      	ldr	r3, [pc, #432]	; (80050fc <UART_SetConfig+0x38c>)
 8004f4c:	fba3 1302 	umull	r1, r3, r3, r2
 8004f50:	095b      	lsrs	r3, r3, #5
 8004f52:	2164      	movs	r1, #100	; 0x64
 8004f54:	fb01 f303 	mul.w	r3, r1, r3
 8004f58:	1ad3      	subs	r3, r2, r3
 8004f5a:	00db      	lsls	r3, r3, #3
 8004f5c:	3332      	adds	r3, #50	; 0x32
 8004f5e:	4a67      	ldr	r2, [pc, #412]	; (80050fc <UART_SetConfig+0x38c>)
 8004f60:	fba2 2303 	umull	r2, r3, r2, r3
 8004f64:	095b      	lsrs	r3, r3, #5
 8004f66:	f003 0207 	and.w	r2, r3, #7
 8004f6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4432      	add	r2, r6
 8004f70:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004f72:	e0b9      	b.n	80050e8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004f74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f76:	461c      	mov	r4, r3
 8004f78:	f04f 0500 	mov.w	r5, #0
 8004f7c:	4622      	mov	r2, r4
 8004f7e:	462b      	mov	r3, r5
 8004f80:	1891      	adds	r1, r2, r2
 8004f82:	6139      	str	r1, [r7, #16]
 8004f84:	415b      	adcs	r3, r3
 8004f86:	617b      	str	r3, [r7, #20]
 8004f88:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004f8c:	1912      	adds	r2, r2, r4
 8004f8e:	eb45 0303 	adc.w	r3, r5, r3
 8004f92:	f04f 0000 	mov.w	r0, #0
 8004f96:	f04f 0100 	mov.w	r1, #0
 8004f9a:	00d9      	lsls	r1, r3, #3
 8004f9c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004fa0:	00d0      	lsls	r0, r2, #3
 8004fa2:	4602      	mov	r2, r0
 8004fa4:	460b      	mov	r3, r1
 8004fa6:	eb12 0804 	adds.w	r8, r2, r4
 8004faa:	eb43 0905 	adc.w	r9, r3, r5
 8004fae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f04f 0100 	mov.w	r1, #0
 8004fb8:	f04f 0200 	mov.w	r2, #0
 8004fbc:	f04f 0300 	mov.w	r3, #0
 8004fc0:	008b      	lsls	r3, r1, #2
 8004fc2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004fc6:	0082      	lsls	r2, r0, #2
 8004fc8:	4640      	mov	r0, r8
 8004fca:	4649      	mov	r1, r9
 8004fcc:	f7fb fc6e 	bl	80008ac <__aeabi_uldivmod>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	460b      	mov	r3, r1
 8004fd4:	4b49      	ldr	r3, [pc, #292]	; (80050fc <UART_SetConfig+0x38c>)
 8004fd6:	fba3 2302 	umull	r2, r3, r3, r2
 8004fda:	095b      	lsrs	r3, r3, #5
 8004fdc:	011e      	lsls	r6, r3, #4
 8004fde:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	f04f 0100 	mov.w	r1, #0
 8004fe6:	4602      	mov	r2, r0
 8004fe8:	460b      	mov	r3, r1
 8004fea:	1894      	adds	r4, r2, r2
 8004fec:	60bc      	str	r4, [r7, #8]
 8004fee:	415b      	adcs	r3, r3
 8004ff0:	60fb      	str	r3, [r7, #12]
 8004ff2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004ff6:	1812      	adds	r2, r2, r0
 8004ff8:	eb41 0303 	adc.w	r3, r1, r3
 8004ffc:	f04f 0400 	mov.w	r4, #0
 8005000:	f04f 0500 	mov.w	r5, #0
 8005004:	00dd      	lsls	r5, r3, #3
 8005006:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800500a:	00d4      	lsls	r4, r2, #3
 800500c:	4622      	mov	r2, r4
 800500e:	462b      	mov	r3, r5
 8005010:	1814      	adds	r4, r2, r0
 8005012:	64bc      	str	r4, [r7, #72]	; 0x48
 8005014:	414b      	adcs	r3, r1
 8005016:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005018:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	4618      	mov	r0, r3
 800501e:	f04f 0100 	mov.w	r1, #0
 8005022:	f04f 0200 	mov.w	r2, #0
 8005026:	f04f 0300 	mov.w	r3, #0
 800502a:	008b      	lsls	r3, r1, #2
 800502c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005030:	0082      	lsls	r2, r0, #2
 8005032:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005036:	f7fb fc39 	bl	80008ac <__aeabi_uldivmod>
 800503a:	4602      	mov	r2, r0
 800503c:	460b      	mov	r3, r1
 800503e:	4b2f      	ldr	r3, [pc, #188]	; (80050fc <UART_SetConfig+0x38c>)
 8005040:	fba3 1302 	umull	r1, r3, r3, r2
 8005044:	095b      	lsrs	r3, r3, #5
 8005046:	2164      	movs	r1, #100	; 0x64
 8005048:	fb01 f303 	mul.w	r3, r1, r3
 800504c:	1ad3      	subs	r3, r2, r3
 800504e:	011b      	lsls	r3, r3, #4
 8005050:	3332      	adds	r3, #50	; 0x32
 8005052:	4a2a      	ldr	r2, [pc, #168]	; (80050fc <UART_SetConfig+0x38c>)
 8005054:	fba2 2303 	umull	r2, r3, r2, r3
 8005058:	095b      	lsrs	r3, r3, #5
 800505a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800505e:	441e      	add	r6, r3
 8005060:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005062:	4618      	mov	r0, r3
 8005064:	f04f 0100 	mov.w	r1, #0
 8005068:	4602      	mov	r2, r0
 800506a:	460b      	mov	r3, r1
 800506c:	1894      	adds	r4, r2, r2
 800506e:	603c      	str	r4, [r7, #0]
 8005070:	415b      	adcs	r3, r3
 8005072:	607b      	str	r3, [r7, #4]
 8005074:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005078:	1812      	adds	r2, r2, r0
 800507a:	eb41 0303 	adc.w	r3, r1, r3
 800507e:	f04f 0400 	mov.w	r4, #0
 8005082:	f04f 0500 	mov.w	r5, #0
 8005086:	00dd      	lsls	r5, r3, #3
 8005088:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800508c:	00d4      	lsls	r4, r2, #3
 800508e:	4622      	mov	r2, r4
 8005090:	462b      	mov	r3, r5
 8005092:	eb12 0a00 	adds.w	sl, r2, r0
 8005096:	eb43 0b01 	adc.w	fp, r3, r1
 800509a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	4618      	mov	r0, r3
 80050a0:	f04f 0100 	mov.w	r1, #0
 80050a4:	f04f 0200 	mov.w	r2, #0
 80050a8:	f04f 0300 	mov.w	r3, #0
 80050ac:	008b      	lsls	r3, r1, #2
 80050ae:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80050b2:	0082      	lsls	r2, r0, #2
 80050b4:	4650      	mov	r0, sl
 80050b6:	4659      	mov	r1, fp
 80050b8:	f7fb fbf8 	bl	80008ac <__aeabi_uldivmod>
 80050bc:	4602      	mov	r2, r0
 80050be:	460b      	mov	r3, r1
 80050c0:	4b0e      	ldr	r3, [pc, #56]	; (80050fc <UART_SetConfig+0x38c>)
 80050c2:	fba3 1302 	umull	r1, r3, r3, r2
 80050c6:	095b      	lsrs	r3, r3, #5
 80050c8:	2164      	movs	r1, #100	; 0x64
 80050ca:	fb01 f303 	mul.w	r3, r1, r3
 80050ce:	1ad3      	subs	r3, r2, r3
 80050d0:	011b      	lsls	r3, r3, #4
 80050d2:	3332      	adds	r3, #50	; 0x32
 80050d4:	4a09      	ldr	r2, [pc, #36]	; (80050fc <UART_SetConfig+0x38c>)
 80050d6:	fba2 2303 	umull	r2, r3, r2, r3
 80050da:	095b      	lsrs	r3, r3, #5
 80050dc:	f003 020f 	and.w	r2, r3, #15
 80050e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4432      	add	r2, r6
 80050e6:	609a      	str	r2, [r3, #8]
}
 80050e8:	bf00      	nop
 80050ea:	377c      	adds	r7, #124	; 0x7c
 80050ec:	46bd      	mov	sp, r7
 80050ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050f2:	bf00      	nop
 80050f4:	40011000 	.word	0x40011000
 80050f8:	40011400 	.word	0x40011400
 80050fc:	51eb851f 	.word	0x51eb851f

08005100 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8005104:	4904      	ldr	r1, [pc, #16]	; (8005118 <MX_FATFS_Init+0x18>)
 8005106:	4805      	ldr	r0, [pc, #20]	; (800511c <MX_FATFS_Init+0x1c>)
 8005108:	f003 fb1a 	bl	8008740 <FATFS_LinkDriver>
 800510c:	4603      	mov	r3, r0
 800510e:	461a      	mov	r2, r3
 8005110:	4b03      	ldr	r3, [pc, #12]	; (8005120 <MX_FATFS_Init+0x20>)
 8005112:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005114:	bf00      	nop
 8005116:	bd80      	pop	{r7, pc}
 8005118:	200024f0 	.word	0x200024f0
 800511c:	20000010 	.word	0x20000010
 8005120:	200024f4 	.word	0x200024f4

08005124 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005124:	b480      	push	{r7}
 8005126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005128:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800512a:	4618      	mov	r0, r3
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr

08005134 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b082      	sub	sp, #8
 8005138:	af00      	add	r7, sp, #0
 800513a:	4603      	mov	r3, r0
 800513c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    //Stat = STA_NOINIT;
    //return Stat;
	return SD_disk_initialize (pdrv);
 800513e:	79fb      	ldrb	r3, [r7, #7]
 8005140:	4618      	mov	r0, r3
 8005142:	f7fb fee7 	bl	8000f14 <SD_disk_initialize>
 8005146:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8005148:	4618      	mov	r0, r3
 800514a:	3708      	adds	r7, #8
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}

08005150 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b082      	sub	sp, #8
 8005154:	af00      	add	r7, sp, #0
 8005156:	4603      	mov	r3, r0
 8005158:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    //Stat = STA_NOINIT;
    //return Stat;
	return SD_disk_status (pdrv);
 800515a:	79fb      	ldrb	r3, [r7, #7]
 800515c:	4618      	mov	r0, r3
 800515e:	f7fb ffbf 	bl	80010e0 <SD_disk_status>
 8005162:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8005164:	4618      	mov	r0, r3
 8005166:	3708      	adds	r7, #8
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}

0800516c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b084      	sub	sp, #16
 8005170:	af00      	add	r7, sp, #0
 8005172:	60b9      	str	r1, [r7, #8]
 8005174:	607a      	str	r2, [r7, #4]
 8005176:	603b      	str	r3, [r7, #0]
 8005178:	4603      	mov	r3, r0
 800517a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    //return RES_OK;
	return SD_disk_read (pdrv, buff, sector, count);
 800517c:	7bf8      	ldrb	r0, [r7, #15]
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	687a      	ldr	r2, [r7, #4]
 8005182:	68b9      	ldr	r1, [r7, #8]
 8005184:	f7fb ffc2 	bl	800110c <SD_disk_read>
 8005188:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800518a:	4618      	mov	r0, r3
 800518c:	3710      	adds	r7, #16
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}

08005192 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8005192:	b580      	push	{r7, lr}
 8005194:	b084      	sub	sp, #16
 8005196:	af00      	add	r7, sp, #0
 8005198:	60b9      	str	r1, [r7, #8]
 800519a:	607a      	str	r2, [r7, #4]
 800519c:	603b      	str	r3, [r7, #0]
 800519e:	4603      	mov	r3, r0
 80051a0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    //return RES_OK;
	return SD_disk_write (pdrv, buff, sector, count);
 80051a2:	7bf8      	ldrb	r0, [r7, #15]
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	687a      	ldr	r2, [r7, #4]
 80051a8:	68b9      	ldr	r1, [r7, #8]
 80051aa:	f7fc f819 	bl	80011e0 <SD_disk_write>
 80051ae:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	3710      	adds	r7, #16
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}

080051b8 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b082      	sub	sp, #8
 80051bc:	af00      	add	r7, sp, #0
 80051be:	4603      	mov	r3, r0
 80051c0:	603a      	str	r2, [r7, #0]
 80051c2:	71fb      	strb	r3, [r7, #7]
 80051c4:	460b      	mov	r3, r1
 80051c6:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    //DRESULT res = RES_ERROR;
    //return res;
	return SD_disk_ioctl (pdrv, cmd, buff);
 80051c8:	79b9      	ldrb	r1, [r7, #6]
 80051ca:	79fb      	ldrb	r3, [r7, #7]
 80051cc:	683a      	ldr	r2, [r7, #0]
 80051ce:	4618      	mov	r0, r3
 80051d0:	f7fc f88a 	bl	80012e8 <SD_disk_ioctl>
 80051d4:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3708      	adds	r7, #8
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}
	...

080051e0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b084      	sub	sp, #16
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	4603      	mov	r3, r0
 80051e8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80051ea:	79fb      	ldrb	r3, [r7, #7]
 80051ec:	4a08      	ldr	r2, [pc, #32]	; (8005210 <disk_status+0x30>)
 80051ee:	009b      	lsls	r3, r3, #2
 80051f0:	4413      	add	r3, r2
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	79fa      	ldrb	r2, [r7, #7]
 80051f8:	4905      	ldr	r1, [pc, #20]	; (8005210 <disk_status+0x30>)
 80051fa:	440a      	add	r2, r1
 80051fc:	7a12      	ldrb	r2, [r2, #8]
 80051fe:	4610      	mov	r0, r2
 8005200:	4798      	blx	r3
 8005202:	4603      	mov	r3, r0
 8005204:	73fb      	strb	r3, [r7, #15]
  return stat;
 8005206:	7bfb      	ldrb	r3, [r7, #15]
}
 8005208:	4618      	mov	r0, r3
 800520a:	3710      	adds	r7, #16
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}
 8005210:	200002d8 	.word	0x200002d8

08005214 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b084      	sub	sp, #16
 8005218:	af00      	add	r7, sp, #0
 800521a:	4603      	mov	r3, r0
 800521c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800521e:	2300      	movs	r3, #0
 8005220:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8005222:	79fb      	ldrb	r3, [r7, #7]
 8005224:	4a0d      	ldr	r2, [pc, #52]	; (800525c <disk_initialize+0x48>)
 8005226:	5cd3      	ldrb	r3, [r2, r3]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d111      	bne.n	8005250 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800522c:	79fb      	ldrb	r3, [r7, #7]
 800522e:	4a0b      	ldr	r2, [pc, #44]	; (800525c <disk_initialize+0x48>)
 8005230:	2101      	movs	r1, #1
 8005232:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005234:	79fb      	ldrb	r3, [r7, #7]
 8005236:	4a09      	ldr	r2, [pc, #36]	; (800525c <disk_initialize+0x48>)
 8005238:	009b      	lsls	r3, r3, #2
 800523a:	4413      	add	r3, r2
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	79fa      	ldrb	r2, [r7, #7]
 8005242:	4906      	ldr	r1, [pc, #24]	; (800525c <disk_initialize+0x48>)
 8005244:	440a      	add	r2, r1
 8005246:	7a12      	ldrb	r2, [r2, #8]
 8005248:	4610      	mov	r0, r2
 800524a:	4798      	blx	r3
 800524c:	4603      	mov	r3, r0
 800524e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005250:	7bfb      	ldrb	r3, [r7, #15]
}
 8005252:	4618      	mov	r0, r3
 8005254:	3710      	adds	r7, #16
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}
 800525a:	bf00      	nop
 800525c:	200002d8 	.word	0x200002d8

08005260 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005260:	b590      	push	{r4, r7, lr}
 8005262:	b087      	sub	sp, #28
 8005264:	af00      	add	r7, sp, #0
 8005266:	60b9      	str	r1, [r7, #8]
 8005268:	607a      	str	r2, [r7, #4]
 800526a:	603b      	str	r3, [r7, #0]
 800526c:	4603      	mov	r3, r0
 800526e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005270:	7bfb      	ldrb	r3, [r7, #15]
 8005272:	4a0a      	ldr	r2, [pc, #40]	; (800529c <disk_read+0x3c>)
 8005274:	009b      	lsls	r3, r3, #2
 8005276:	4413      	add	r3, r2
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	689c      	ldr	r4, [r3, #8]
 800527c:	7bfb      	ldrb	r3, [r7, #15]
 800527e:	4a07      	ldr	r2, [pc, #28]	; (800529c <disk_read+0x3c>)
 8005280:	4413      	add	r3, r2
 8005282:	7a18      	ldrb	r0, [r3, #8]
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	687a      	ldr	r2, [r7, #4]
 8005288:	68b9      	ldr	r1, [r7, #8]
 800528a:	47a0      	blx	r4
 800528c:	4603      	mov	r3, r0
 800528e:	75fb      	strb	r3, [r7, #23]
  return res;
 8005290:	7dfb      	ldrb	r3, [r7, #23]
}
 8005292:	4618      	mov	r0, r3
 8005294:	371c      	adds	r7, #28
 8005296:	46bd      	mov	sp, r7
 8005298:	bd90      	pop	{r4, r7, pc}
 800529a:	bf00      	nop
 800529c:	200002d8 	.word	0x200002d8

080052a0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80052a0:	b590      	push	{r4, r7, lr}
 80052a2:	b087      	sub	sp, #28
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	60b9      	str	r1, [r7, #8]
 80052a8:	607a      	str	r2, [r7, #4]
 80052aa:	603b      	str	r3, [r7, #0]
 80052ac:	4603      	mov	r3, r0
 80052ae:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80052b0:	7bfb      	ldrb	r3, [r7, #15]
 80052b2:	4a0a      	ldr	r2, [pc, #40]	; (80052dc <disk_write+0x3c>)
 80052b4:	009b      	lsls	r3, r3, #2
 80052b6:	4413      	add	r3, r2
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	68dc      	ldr	r4, [r3, #12]
 80052bc:	7bfb      	ldrb	r3, [r7, #15]
 80052be:	4a07      	ldr	r2, [pc, #28]	; (80052dc <disk_write+0x3c>)
 80052c0:	4413      	add	r3, r2
 80052c2:	7a18      	ldrb	r0, [r3, #8]
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	687a      	ldr	r2, [r7, #4]
 80052c8:	68b9      	ldr	r1, [r7, #8]
 80052ca:	47a0      	blx	r4
 80052cc:	4603      	mov	r3, r0
 80052ce:	75fb      	strb	r3, [r7, #23]
  return res;
 80052d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	371c      	adds	r7, #28
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd90      	pop	{r4, r7, pc}
 80052da:	bf00      	nop
 80052dc:	200002d8 	.word	0x200002d8

080052e0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b084      	sub	sp, #16
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	4603      	mov	r3, r0
 80052e8:	603a      	str	r2, [r7, #0]
 80052ea:	71fb      	strb	r3, [r7, #7]
 80052ec:	460b      	mov	r3, r1
 80052ee:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80052f0:	79fb      	ldrb	r3, [r7, #7]
 80052f2:	4a09      	ldr	r2, [pc, #36]	; (8005318 <disk_ioctl+0x38>)
 80052f4:	009b      	lsls	r3, r3, #2
 80052f6:	4413      	add	r3, r2
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	691b      	ldr	r3, [r3, #16]
 80052fc:	79fa      	ldrb	r2, [r7, #7]
 80052fe:	4906      	ldr	r1, [pc, #24]	; (8005318 <disk_ioctl+0x38>)
 8005300:	440a      	add	r2, r1
 8005302:	7a10      	ldrb	r0, [r2, #8]
 8005304:	79b9      	ldrb	r1, [r7, #6]
 8005306:	683a      	ldr	r2, [r7, #0]
 8005308:	4798      	blx	r3
 800530a:	4603      	mov	r3, r0
 800530c:	73fb      	strb	r3, [r7, #15]
  return res;
 800530e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005310:	4618      	mov	r0, r3
 8005312:	3710      	adds	r7, #16
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}
 8005318:	200002d8 	.word	0x200002d8

0800531c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800531c:	b480      	push	{r7}
 800531e:	b085      	sub	sp, #20
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	3301      	adds	r3, #1
 8005328:	781b      	ldrb	r3, [r3, #0]
 800532a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800532c:	89fb      	ldrh	r3, [r7, #14]
 800532e:	021b      	lsls	r3, r3, #8
 8005330:	b21a      	sxth	r2, r3
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	781b      	ldrb	r3, [r3, #0]
 8005336:	b21b      	sxth	r3, r3
 8005338:	4313      	orrs	r3, r2
 800533a:	b21b      	sxth	r3, r3
 800533c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800533e:	89fb      	ldrh	r3, [r7, #14]
}
 8005340:	4618      	mov	r0, r3
 8005342:	3714      	adds	r7, #20
 8005344:	46bd      	mov	sp, r7
 8005346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534a:	4770      	bx	lr

0800534c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800534c:	b480      	push	{r7}
 800534e:	b085      	sub	sp, #20
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	3303      	adds	r3, #3
 8005358:	781b      	ldrb	r3, [r3, #0]
 800535a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	021b      	lsls	r3, r3, #8
 8005360:	687a      	ldr	r2, [r7, #4]
 8005362:	3202      	adds	r2, #2
 8005364:	7812      	ldrb	r2, [r2, #0]
 8005366:	4313      	orrs	r3, r2
 8005368:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	021b      	lsls	r3, r3, #8
 800536e:	687a      	ldr	r2, [r7, #4]
 8005370:	3201      	adds	r2, #1
 8005372:	7812      	ldrb	r2, [r2, #0]
 8005374:	4313      	orrs	r3, r2
 8005376:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	021b      	lsls	r3, r3, #8
 800537c:	687a      	ldr	r2, [r7, #4]
 800537e:	7812      	ldrb	r2, [r2, #0]
 8005380:	4313      	orrs	r3, r2
 8005382:	60fb      	str	r3, [r7, #12]
	return rv;
 8005384:	68fb      	ldr	r3, [r7, #12]
}
 8005386:	4618      	mov	r0, r3
 8005388:	3714      	adds	r7, #20
 800538a:	46bd      	mov	sp, r7
 800538c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005390:	4770      	bx	lr

08005392 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8005392:	b480      	push	{r7}
 8005394:	b083      	sub	sp, #12
 8005396:	af00      	add	r7, sp, #0
 8005398:	6078      	str	r0, [r7, #4]
 800539a:	460b      	mov	r3, r1
 800539c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	1c5a      	adds	r2, r3, #1
 80053a2:	607a      	str	r2, [r7, #4]
 80053a4:	887a      	ldrh	r2, [r7, #2]
 80053a6:	b2d2      	uxtb	r2, r2
 80053a8:	701a      	strb	r2, [r3, #0]
 80053aa:	887b      	ldrh	r3, [r7, #2]
 80053ac:	0a1b      	lsrs	r3, r3, #8
 80053ae:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	1c5a      	adds	r2, r3, #1
 80053b4:	607a      	str	r2, [r7, #4]
 80053b6:	887a      	ldrh	r2, [r7, #2]
 80053b8:	b2d2      	uxtb	r2, r2
 80053ba:	701a      	strb	r2, [r3, #0]
}
 80053bc:	bf00      	nop
 80053be:	370c      	adds	r7, #12
 80053c0:	46bd      	mov	sp, r7
 80053c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c6:	4770      	bx	lr

080053c8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80053c8:	b480      	push	{r7}
 80053ca:	b083      	sub	sp, #12
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
 80053d0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	1c5a      	adds	r2, r3, #1
 80053d6:	607a      	str	r2, [r7, #4]
 80053d8:	683a      	ldr	r2, [r7, #0]
 80053da:	b2d2      	uxtb	r2, r2
 80053dc:	701a      	strb	r2, [r3, #0]
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	0a1b      	lsrs	r3, r3, #8
 80053e2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	1c5a      	adds	r2, r3, #1
 80053e8:	607a      	str	r2, [r7, #4]
 80053ea:	683a      	ldr	r2, [r7, #0]
 80053ec:	b2d2      	uxtb	r2, r2
 80053ee:	701a      	strb	r2, [r3, #0]
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	0a1b      	lsrs	r3, r3, #8
 80053f4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	1c5a      	adds	r2, r3, #1
 80053fa:	607a      	str	r2, [r7, #4]
 80053fc:	683a      	ldr	r2, [r7, #0]
 80053fe:	b2d2      	uxtb	r2, r2
 8005400:	701a      	strb	r2, [r3, #0]
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	0a1b      	lsrs	r3, r3, #8
 8005406:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	1c5a      	adds	r2, r3, #1
 800540c:	607a      	str	r2, [r7, #4]
 800540e:	683a      	ldr	r2, [r7, #0]
 8005410:	b2d2      	uxtb	r2, r2
 8005412:	701a      	strb	r2, [r3, #0]
}
 8005414:	bf00      	nop
 8005416:	370c      	adds	r7, #12
 8005418:	46bd      	mov	sp, r7
 800541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541e:	4770      	bx	lr

08005420 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005420:	b480      	push	{r7}
 8005422:	b087      	sub	sp, #28
 8005424:	af00      	add	r7, sp, #0
 8005426:	60f8      	str	r0, [r7, #12]
 8005428:	60b9      	str	r1, [r7, #8]
 800542a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d00d      	beq.n	8005456 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800543a:	693a      	ldr	r2, [r7, #16]
 800543c:	1c53      	adds	r3, r2, #1
 800543e:	613b      	str	r3, [r7, #16]
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	1c59      	adds	r1, r3, #1
 8005444:	6179      	str	r1, [r7, #20]
 8005446:	7812      	ldrb	r2, [r2, #0]
 8005448:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	3b01      	subs	r3, #1
 800544e:	607b      	str	r3, [r7, #4]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d1f1      	bne.n	800543a <mem_cpy+0x1a>
	}
}
 8005456:	bf00      	nop
 8005458:	371c      	adds	r7, #28
 800545a:	46bd      	mov	sp, r7
 800545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005460:	4770      	bx	lr

08005462 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8005462:	b480      	push	{r7}
 8005464:	b087      	sub	sp, #28
 8005466:	af00      	add	r7, sp, #0
 8005468:	60f8      	str	r0, [r7, #12]
 800546a:	60b9      	str	r1, [r7, #8]
 800546c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	1c5a      	adds	r2, r3, #1
 8005476:	617a      	str	r2, [r7, #20]
 8005478:	68ba      	ldr	r2, [r7, #8]
 800547a:	b2d2      	uxtb	r2, r2
 800547c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	3b01      	subs	r3, #1
 8005482:	607b      	str	r3, [r7, #4]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d1f3      	bne.n	8005472 <mem_set+0x10>
}
 800548a:	bf00      	nop
 800548c:	bf00      	nop
 800548e:	371c      	adds	r7, #28
 8005490:	46bd      	mov	sp, r7
 8005492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005496:	4770      	bx	lr

08005498 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8005498:	b480      	push	{r7}
 800549a:	b089      	sub	sp, #36	; 0x24
 800549c:	af00      	add	r7, sp, #0
 800549e:	60f8      	str	r0, [r7, #12]
 80054a0:	60b9      	str	r1, [r7, #8]
 80054a2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	61fb      	str	r3, [r7, #28]
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80054ac:	2300      	movs	r3, #0
 80054ae:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80054b0:	69fb      	ldr	r3, [r7, #28]
 80054b2:	1c5a      	adds	r2, r3, #1
 80054b4:	61fa      	str	r2, [r7, #28]
 80054b6:	781b      	ldrb	r3, [r3, #0]
 80054b8:	4619      	mov	r1, r3
 80054ba:	69bb      	ldr	r3, [r7, #24]
 80054bc:	1c5a      	adds	r2, r3, #1
 80054be:	61ba      	str	r2, [r7, #24]
 80054c0:	781b      	ldrb	r3, [r3, #0]
 80054c2:	1acb      	subs	r3, r1, r3
 80054c4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	3b01      	subs	r3, #1
 80054ca:	607b      	str	r3, [r7, #4]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d002      	beq.n	80054d8 <mem_cmp+0x40>
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d0eb      	beq.n	80054b0 <mem_cmp+0x18>

	return r;
 80054d8:	697b      	ldr	r3, [r7, #20]
}
 80054da:	4618      	mov	r0, r3
 80054dc:	3724      	adds	r7, #36	; 0x24
 80054de:	46bd      	mov	sp, r7
 80054e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e4:	4770      	bx	lr

080054e6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80054e6:	b480      	push	{r7}
 80054e8:	b083      	sub	sp, #12
 80054ea:	af00      	add	r7, sp, #0
 80054ec:	6078      	str	r0, [r7, #4]
 80054ee:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80054f0:	e002      	b.n	80054f8 <chk_chr+0x12>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	3301      	adds	r3, #1
 80054f6:	607b      	str	r3, [r7, #4]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	781b      	ldrb	r3, [r3, #0]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d005      	beq.n	800550c <chk_chr+0x26>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	781b      	ldrb	r3, [r3, #0]
 8005504:	461a      	mov	r2, r3
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	4293      	cmp	r3, r2
 800550a:	d1f2      	bne.n	80054f2 <chk_chr+0xc>
	return *str;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	781b      	ldrb	r3, [r3, #0]
}
 8005510:	4618      	mov	r0, r3
 8005512:	370c      	adds	r7, #12
 8005514:	46bd      	mov	sp, r7
 8005516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551a:	4770      	bx	lr

0800551c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800551c:	b480      	push	{r7}
 800551e:	b085      	sub	sp, #20
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
 8005524:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005526:	2300      	movs	r3, #0
 8005528:	60bb      	str	r3, [r7, #8]
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	60fb      	str	r3, [r7, #12]
 800552e:	e029      	b.n	8005584 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8005530:	4a27      	ldr	r2, [pc, #156]	; (80055d0 <chk_lock+0xb4>)
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	011b      	lsls	r3, r3, #4
 8005536:	4413      	add	r3, r2
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d01d      	beq.n	800557a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800553e:	4a24      	ldr	r2, [pc, #144]	; (80055d0 <chk_lock+0xb4>)
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	011b      	lsls	r3, r3, #4
 8005544:	4413      	add	r3, r2
 8005546:	681a      	ldr	r2, [r3, #0]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	429a      	cmp	r2, r3
 800554e:	d116      	bne.n	800557e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8005550:	4a1f      	ldr	r2, [pc, #124]	; (80055d0 <chk_lock+0xb4>)
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	011b      	lsls	r3, r3, #4
 8005556:	4413      	add	r3, r2
 8005558:	3304      	adds	r3, #4
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005560:	429a      	cmp	r2, r3
 8005562:	d10c      	bne.n	800557e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005564:	4a1a      	ldr	r2, [pc, #104]	; (80055d0 <chk_lock+0xb4>)
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	011b      	lsls	r3, r3, #4
 800556a:	4413      	add	r3, r2
 800556c:	3308      	adds	r3, #8
 800556e:	681a      	ldr	r2, [r3, #0]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8005574:	429a      	cmp	r2, r3
 8005576:	d102      	bne.n	800557e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005578:	e007      	b.n	800558a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800557a:	2301      	movs	r3, #1
 800557c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	3301      	adds	r3, #1
 8005582:	60fb      	str	r3, [r7, #12]
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2b01      	cmp	r3, #1
 8005588:	d9d2      	bls.n	8005530 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2b02      	cmp	r3, #2
 800558e:	d109      	bne.n	80055a4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d102      	bne.n	800559c <chk_lock+0x80>
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	2b02      	cmp	r3, #2
 800559a:	d101      	bne.n	80055a0 <chk_lock+0x84>
 800559c:	2300      	movs	r3, #0
 800559e:	e010      	b.n	80055c2 <chk_lock+0xa6>
 80055a0:	2312      	movs	r3, #18
 80055a2:	e00e      	b.n	80055c2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d108      	bne.n	80055bc <chk_lock+0xa0>
 80055aa:	4a09      	ldr	r2, [pc, #36]	; (80055d0 <chk_lock+0xb4>)
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	011b      	lsls	r3, r3, #4
 80055b0:	4413      	add	r3, r2
 80055b2:	330c      	adds	r3, #12
 80055b4:	881b      	ldrh	r3, [r3, #0]
 80055b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055ba:	d101      	bne.n	80055c0 <chk_lock+0xa4>
 80055bc:	2310      	movs	r3, #16
 80055be:	e000      	b.n	80055c2 <chk_lock+0xa6>
 80055c0:	2300      	movs	r3, #0
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	3714      	adds	r7, #20
 80055c6:	46bd      	mov	sp, r7
 80055c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055cc:	4770      	bx	lr
 80055ce:	bf00      	nop
 80055d0:	200000b8 	.word	0x200000b8

080055d4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80055d4:	b480      	push	{r7}
 80055d6:	b083      	sub	sp, #12
 80055d8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80055da:	2300      	movs	r3, #0
 80055dc:	607b      	str	r3, [r7, #4]
 80055de:	e002      	b.n	80055e6 <enq_lock+0x12>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	3301      	adds	r3, #1
 80055e4:	607b      	str	r3, [r7, #4]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2b01      	cmp	r3, #1
 80055ea:	d806      	bhi.n	80055fa <enq_lock+0x26>
 80055ec:	4a09      	ldr	r2, [pc, #36]	; (8005614 <enq_lock+0x40>)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	011b      	lsls	r3, r3, #4
 80055f2:	4413      	add	r3, r2
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d1f2      	bne.n	80055e0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2b02      	cmp	r3, #2
 80055fe:	bf14      	ite	ne
 8005600:	2301      	movne	r3, #1
 8005602:	2300      	moveq	r3, #0
 8005604:	b2db      	uxtb	r3, r3
}
 8005606:	4618      	mov	r0, r3
 8005608:	370c      	adds	r7, #12
 800560a:	46bd      	mov	sp, r7
 800560c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005610:	4770      	bx	lr
 8005612:	bf00      	nop
 8005614:	200000b8 	.word	0x200000b8

08005618 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005618:	b480      	push	{r7}
 800561a:	b085      	sub	sp, #20
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
 8005620:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005622:	2300      	movs	r3, #0
 8005624:	60fb      	str	r3, [r7, #12]
 8005626:	e01f      	b.n	8005668 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8005628:	4a41      	ldr	r2, [pc, #260]	; (8005730 <inc_lock+0x118>)
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	011b      	lsls	r3, r3, #4
 800562e:	4413      	add	r3, r2
 8005630:	681a      	ldr	r2, [r3, #0]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	429a      	cmp	r2, r3
 8005638:	d113      	bne.n	8005662 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800563a:	4a3d      	ldr	r2, [pc, #244]	; (8005730 <inc_lock+0x118>)
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	011b      	lsls	r3, r3, #4
 8005640:	4413      	add	r3, r2
 8005642:	3304      	adds	r3, #4
 8005644:	681a      	ldr	r2, [r3, #0]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800564a:	429a      	cmp	r2, r3
 800564c:	d109      	bne.n	8005662 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800564e:	4a38      	ldr	r2, [pc, #224]	; (8005730 <inc_lock+0x118>)
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	011b      	lsls	r3, r3, #4
 8005654:	4413      	add	r3, r2
 8005656:	3308      	adds	r3, #8
 8005658:	681a      	ldr	r2, [r3, #0]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800565e:	429a      	cmp	r2, r3
 8005660:	d006      	beq.n	8005670 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	3301      	adds	r3, #1
 8005666:	60fb      	str	r3, [r7, #12]
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2b01      	cmp	r3, #1
 800566c:	d9dc      	bls.n	8005628 <inc_lock+0x10>
 800566e:	e000      	b.n	8005672 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8005670:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2b02      	cmp	r3, #2
 8005676:	d132      	bne.n	80056de <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005678:	2300      	movs	r3, #0
 800567a:	60fb      	str	r3, [r7, #12]
 800567c:	e002      	b.n	8005684 <inc_lock+0x6c>
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	3301      	adds	r3, #1
 8005682:	60fb      	str	r3, [r7, #12]
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	2b01      	cmp	r3, #1
 8005688:	d806      	bhi.n	8005698 <inc_lock+0x80>
 800568a:	4a29      	ldr	r2, [pc, #164]	; (8005730 <inc_lock+0x118>)
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	011b      	lsls	r3, r3, #4
 8005690:	4413      	add	r3, r2
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d1f2      	bne.n	800567e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2b02      	cmp	r3, #2
 800569c:	d101      	bne.n	80056a2 <inc_lock+0x8a>
 800569e:	2300      	movs	r3, #0
 80056a0:	e040      	b.n	8005724 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681a      	ldr	r2, [r3, #0]
 80056a6:	4922      	ldr	r1, [pc, #136]	; (8005730 <inc_lock+0x118>)
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	011b      	lsls	r3, r3, #4
 80056ac:	440b      	add	r3, r1
 80056ae:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	689a      	ldr	r2, [r3, #8]
 80056b4:	491e      	ldr	r1, [pc, #120]	; (8005730 <inc_lock+0x118>)
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	011b      	lsls	r3, r3, #4
 80056ba:	440b      	add	r3, r1
 80056bc:	3304      	adds	r3, #4
 80056be:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	695a      	ldr	r2, [r3, #20]
 80056c4:	491a      	ldr	r1, [pc, #104]	; (8005730 <inc_lock+0x118>)
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	011b      	lsls	r3, r3, #4
 80056ca:	440b      	add	r3, r1
 80056cc:	3308      	adds	r3, #8
 80056ce:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80056d0:	4a17      	ldr	r2, [pc, #92]	; (8005730 <inc_lock+0x118>)
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	011b      	lsls	r3, r3, #4
 80056d6:	4413      	add	r3, r2
 80056d8:	330c      	adds	r3, #12
 80056da:	2200      	movs	r2, #0
 80056dc:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d009      	beq.n	80056f8 <inc_lock+0xe0>
 80056e4:	4a12      	ldr	r2, [pc, #72]	; (8005730 <inc_lock+0x118>)
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	011b      	lsls	r3, r3, #4
 80056ea:	4413      	add	r3, r2
 80056ec:	330c      	adds	r3, #12
 80056ee:	881b      	ldrh	r3, [r3, #0]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d001      	beq.n	80056f8 <inc_lock+0xe0>
 80056f4:	2300      	movs	r3, #0
 80056f6:	e015      	b.n	8005724 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d108      	bne.n	8005710 <inc_lock+0xf8>
 80056fe:	4a0c      	ldr	r2, [pc, #48]	; (8005730 <inc_lock+0x118>)
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	011b      	lsls	r3, r3, #4
 8005704:	4413      	add	r3, r2
 8005706:	330c      	adds	r3, #12
 8005708:	881b      	ldrh	r3, [r3, #0]
 800570a:	3301      	adds	r3, #1
 800570c:	b29a      	uxth	r2, r3
 800570e:	e001      	b.n	8005714 <inc_lock+0xfc>
 8005710:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005714:	4906      	ldr	r1, [pc, #24]	; (8005730 <inc_lock+0x118>)
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	011b      	lsls	r3, r3, #4
 800571a:	440b      	add	r3, r1
 800571c:	330c      	adds	r3, #12
 800571e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	3301      	adds	r3, #1
}
 8005724:	4618      	mov	r0, r3
 8005726:	3714      	adds	r7, #20
 8005728:	46bd      	mov	sp, r7
 800572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572e:	4770      	bx	lr
 8005730:	200000b8 	.word	0x200000b8

08005734 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8005734:	b480      	push	{r7}
 8005736:	b085      	sub	sp, #20
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	3b01      	subs	r3, #1
 8005740:	607b      	str	r3, [r7, #4]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2b01      	cmp	r3, #1
 8005746:	d825      	bhi.n	8005794 <dec_lock+0x60>
		n = Files[i].ctr;
 8005748:	4a17      	ldr	r2, [pc, #92]	; (80057a8 <dec_lock+0x74>)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	011b      	lsls	r3, r3, #4
 800574e:	4413      	add	r3, r2
 8005750:	330c      	adds	r3, #12
 8005752:	881b      	ldrh	r3, [r3, #0]
 8005754:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8005756:	89fb      	ldrh	r3, [r7, #14]
 8005758:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800575c:	d101      	bne.n	8005762 <dec_lock+0x2e>
 800575e:	2300      	movs	r3, #0
 8005760:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8005762:	89fb      	ldrh	r3, [r7, #14]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d002      	beq.n	800576e <dec_lock+0x3a>
 8005768:	89fb      	ldrh	r3, [r7, #14]
 800576a:	3b01      	subs	r3, #1
 800576c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800576e:	4a0e      	ldr	r2, [pc, #56]	; (80057a8 <dec_lock+0x74>)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	011b      	lsls	r3, r3, #4
 8005774:	4413      	add	r3, r2
 8005776:	330c      	adds	r3, #12
 8005778:	89fa      	ldrh	r2, [r7, #14]
 800577a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800577c:	89fb      	ldrh	r3, [r7, #14]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d105      	bne.n	800578e <dec_lock+0x5a>
 8005782:	4a09      	ldr	r2, [pc, #36]	; (80057a8 <dec_lock+0x74>)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	011b      	lsls	r3, r3, #4
 8005788:	4413      	add	r3, r2
 800578a:	2200      	movs	r2, #0
 800578c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800578e:	2300      	movs	r3, #0
 8005790:	737b      	strb	r3, [r7, #13]
 8005792:	e001      	b.n	8005798 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8005794:	2302      	movs	r3, #2
 8005796:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8005798:	7b7b      	ldrb	r3, [r7, #13]
}
 800579a:	4618      	mov	r0, r3
 800579c:	3714      	adds	r7, #20
 800579e:	46bd      	mov	sp, r7
 80057a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a4:	4770      	bx	lr
 80057a6:	bf00      	nop
 80057a8:	200000b8 	.word	0x200000b8

080057ac <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b085      	sub	sp, #20
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80057b4:	2300      	movs	r3, #0
 80057b6:	60fb      	str	r3, [r7, #12]
 80057b8:	e010      	b.n	80057dc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80057ba:	4a0d      	ldr	r2, [pc, #52]	; (80057f0 <clear_lock+0x44>)
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	011b      	lsls	r3, r3, #4
 80057c0:	4413      	add	r3, r2
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	687a      	ldr	r2, [r7, #4]
 80057c6:	429a      	cmp	r2, r3
 80057c8:	d105      	bne.n	80057d6 <clear_lock+0x2a>
 80057ca:	4a09      	ldr	r2, [pc, #36]	; (80057f0 <clear_lock+0x44>)
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	011b      	lsls	r3, r3, #4
 80057d0:	4413      	add	r3, r2
 80057d2:	2200      	movs	r2, #0
 80057d4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	3301      	adds	r3, #1
 80057da:	60fb      	str	r3, [r7, #12]
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2b01      	cmp	r3, #1
 80057e0:	d9eb      	bls.n	80057ba <clear_lock+0xe>
	}
}
 80057e2:	bf00      	nop
 80057e4:	bf00      	nop
 80057e6:	3714      	adds	r7, #20
 80057e8:	46bd      	mov	sp, r7
 80057ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ee:	4770      	bx	lr
 80057f0:	200000b8 	.word	0x200000b8

080057f4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b086      	sub	sp, #24
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80057fc:	2300      	movs	r3, #0
 80057fe:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	78db      	ldrb	r3, [r3, #3]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d034      	beq.n	8005872 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800580c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	7858      	ldrb	r0, [r3, #1]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005818:	2301      	movs	r3, #1
 800581a:	697a      	ldr	r2, [r7, #20]
 800581c:	f7ff fd40 	bl	80052a0 <disk_write>
 8005820:	4603      	mov	r3, r0
 8005822:	2b00      	cmp	r3, #0
 8005824:	d002      	beq.n	800582c <sync_window+0x38>
			res = FR_DISK_ERR;
 8005826:	2301      	movs	r3, #1
 8005828:	73fb      	strb	r3, [r7, #15]
 800582a:	e022      	b.n	8005872 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2200      	movs	r2, #0
 8005830:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005836:	697a      	ldr	r2, [r7, #20]
 8005838:	1ad2      	subs	r2, r2, r3
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6a1b      	ldr	r3, [r3, #32]
 800583e:	429a      	cmp	r2, r3
 8005840:	d217      	bcs.n	8005872 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	789b      	ldrb	r3, [r3, #2]
 8005846:	613b      	str	r3, [r7, #16]
 8005848:	e010      	b.n	800586c <sync_window+0x78>
					wsect += fs->fsize;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6a1b      	ldr	r3, [r3, #32]
 800584e:	697a      	ldr	r2, [r7, #20]
 8005850:	4413      	add	r3, r2
 8005852:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	7858      	ldrb	r0, [r3, #1]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800585e:	2301      	movs	r3, #1
 8005860:	697a      	ldr	r2, [r7, #20]
 8005862:	f7ff fd1d 	bl	80052a0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	3b01      	subs	r3, #1
 800586a:	613b      	str	r3, [r7, #16]
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	2b01      	cmp	r3, #1
 8005870:	d8eb      	bhi.n	800584a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8005872:	7bfb      	ldrb	r3, [r7, #15]
}
 8005874:	4618      	mov	r0, r3
 8005876:	3718      	adds	r7, #24
 8005878:	46bd      	mov	sp, r7
 800587a:	bd80      	pop	{r7, pc}

0800587c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b084      	sub	sp, #16
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
 8005884:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005886:	2300      	movs	r3, #0
 8005888:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800588e:	683a      	ldr	r2, [r7, #0]
 8005890:	429a      	cmp	r2, r3
 8005892:	d01b      	beq.n	80058cc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f7ff ffad 	bl	80057f4 <sync_window>
 800589a:	4603      	mov	r3, r0
 800589c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800589e:	7bfb      	ldrb	r3, [r7, #15]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d113      	bne.n	80058cc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	7858      	ldrb	r0, [r3, #1]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80058ae:	2301      	movs	r3, #1
 80058b0:	683a      	ldr	r2, [r7, #0]
 80058b2:	f7ff fcd5 	bl	8005260 <disk_read>
 80058b6:	4603      	mov	r3, r0
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d004      	beq.n	80058c6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80058bc:	f04f 33ff 	mov.w	r3, #4294967295
 80058c0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80058c2:	2301      	movs	r3, #1
 80058c4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	683a      	ldr	r2, [r7, #0]
 80058ca:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 80058cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	3710      	adds	r7, #16
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd80      	pop	{r7, pc}
	...

080058d8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b084      	sub	sp, #16
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	f7ff ff87 	bl	80057f4 <sync_window>
 80058e6:	4603      	mov	r3, r0
 80058e8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80058ea:	7bfb      	ldrb	r3, [r7, #15]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d159      	bne.n	80059a4 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	781b      	ldrb	r3, [r3, #0]
 80058f4:	2b03      	cmp	r3, #3
 80058f6:	d149      	bne.n	800598c <sync_fs+0xb4>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	791b      	ldrb	r3, [r3, #4]
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d145      	bne.n	800598c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	899b      	ldrh	r3, [r3, #12]
 800590a:	461a      	mov	r2, r3
 800590c:	2100      	movs	r1, #0
 800590e:	f7ff fda8 	bl	8005462 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	3338      	adds	r3, #56	; 0x38
 8005916:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800591a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800591e:	4618      	mov	r0, r3
 8005920:	f7ff fd37 	bl	8005392 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	3338      	adds	r3, #56	; 0x38
 8005928:	4921      	ldr	r1, [pc, #132]	; (80059b0 <sync_fs+0xd8>)
 800592a:	4618      	mov	r0, r3
 800592c:	f7ff fd4c 	bl	80053c8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	3338      	adds	r3, #56	; 0x38
 8005934:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8005938:	491e      	ldr	r1, [pc, #120]	; (80059b4 <sync_fs+0xdc>)
 800593a:	4618      	mov	r0, r3
 800593c:	f7ff fd44 	bl	80053c8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	3338      	adds	r3, #56	; 0x38
 8005944:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	699b      	ldr	r3, [r3, #24]
 800594c:	4619      	mov	r1, r3
 800594e:	4610      	mov	r0, r2
 8005950:	f7ff fd3a 	bl	80053c8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	3338      	adds	r3, #56	; 0x38
 8005958:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	695b      	ldr	r3, [r3, #20]
 8005960:	4619      	mov	r1, r3
 8005962:	4610      	mov	r0, r2
 8005964:	f7ff fd30 	bl	80053c8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800596c:	1c5a      	adds	r2, r3, #1
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	7858      	ldrb	r0, [r3, #1]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005980:	2301      	movs	r3, #1
 8005982:	f7ff fc8d 	bl	80052a0 <disk_write>
			fs->fsi_flag = 0;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2200      	movs	r2, #0
 800598a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	785b      	ldrb	r3, [r3, #1]
 8005990:	2200      	movs	r2, #0
 8005992:	2100      	movs	r1, #0
 8005994:	4618      	mov	r0, r3
 8005996:	f7ff fca3 	bl	80052e0 <disk_ioctl>
 800599a:	4603      	mov	r3, r0
 800599c:	2b00      	cmp	r3, #0
 800599e:	d001      	beq.n	80059a4 <sync_fs+0xcc>
 80059a0:	2301      	movs	r3, #1
 80059a2:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80059a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	3710      	adds	r7, #16
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}
 80059ae:	bf00      	nop
 80059b0:	41615252 	.word	0x41615252
 80059b4:	61417272 	.word	0x61417272

080059b8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b083      	sub	sp, #12
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
 80059c0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	3b02      	subs	r3, #2
 80059c6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	69db      	ldr	r3, [r3, #28]
 80059cc:	3b02      	subs	r3, #2
 80059ce:	683a      	ldr	r2, [r7, #0]
 80059d0:	429a      	cmp	r2, r3
 80059d2:	d301      	bcc.n	80059d8 <clust2sect+0x20>
 80059d4:	2300      	movs	r3, #0
 80059d6:	e008      	b.n	80059ea <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	895b      	ldrh	r3, [r3, #10]
 80059dc:	461a      	mov	r2, r3
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	fb03 f202 	mul.w	r2, r3, r2
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059e8:	4413      	add	r3, r2
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	370c      	adds	r7, #12
 80059ee:	46bd      	mov	sp, r7
 80059f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f4:	4770      	bx	lr

080059f6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80059f6:	b580      	push	{r7, lr}
 80059f8:	b086      	sub	sp, #24
 80059fa:	af00      	add	r7, sp, #0
 80059fc:	6078      	str	r0, [r7, #4]
 80059fe:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	2b01      	cmp	r3, #1
 8005a0a:	d904      	bls.n	8005a16 <get_fat+0x20>
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	69db      	ldr	r3, [r3, #28]
 8005a10:	683a      	ldr	r2, [r7, #0]
 8005a12:	429a      	cmp	r2, r3
 8005a14:	d302      	bcc.n	8005a1c <get_fat+0x26>
		val = 1;	/* Internal error */
 8005a16:	2301      	movs	r3, #1
 8005a18:	617b      	str	r3, [r7, #20]
 8005a1a:	e0bb      	b.n	8005b94 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005a1c:	f04f 33ff 	mov.w	r3, #4294967295
 8005a20:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	781b      	ldrb	r3, [r3, #0]
 8005a26:	2b03      	cmp	r3, #3
 8005a28:	f000 8083 	beq.w	8005b32 <get_fat+0x13c>
 8005a2c:	2b03      	cmp	r3, #3
 8005a2e:	f300 80a7 	bgt.w	8005b80 <get_fat+0x18a>
 8005a32:	2b01      	cmp	r3, #1
 8005a34:	d002      	beq.n	8005a3c <get_fat+0x46>
 8005a36:	2b02      	cmp	r3, #2
 8005a38:	d056      	beq.n	8005ae8 <get_fat+0xf2>
 8005a3a:	e0a1      	b.n	8005b80 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	60fb      	str	r3, [r7, #12]
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	085b      	lsrs	r3, r3, #1
 8005a44:	68fa      	ldr	r2, [r7, #12]
 8005a46:	4413      	add	r3, r2
 8005a48:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	899b      	ldrh	r3, [r3, #12]
 8005a52:	4619      	mov	r1, r3
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	fbb3 f3f1 	udiv	r3, r3, r1
 8005a5a:	4413      	add	r3, r2
 8005a5c:	4619      	mov	r1, r3
 8005a5e:	6938      	ldr	r0, [r7, #16]
 8005a60:	f7ff ff0c 	bl	800587c <move_window>
 8005a64:	4603      	mov	r3, r0
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	f040 808d 	bne.w	8005b86 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	1c5a      	adds	r2, r3, #1
 8005a70:	60fa      	str	r2, [r7, #12]
 8005a72:	693a      	ldr	r2, [r7, #16]
 8005a74:	8992      	ldrh	r2, [r2, #12]
 8005a76:	fbb3 f1f2 	udiv	r1, r3, r2
 8005a7a:	fb02 f201 	mul.w	r2, r2, r1
 8005a7e:	1a9b      	subs	r3, r3, r2
 8005a80:	693a      	ldr	r2, [r7, #16]
 8005a82:	4413      	add	r3, r2
 8005a84:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005a88:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	899b      	ldrh	r3, [r3, #12]
 8005a92:	4619      	mov	r1, r3
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	fbb3 f3f1 	udiv	r3, r3, r1
 8005a9a:	4413      	add	r3, r2
 8005a9c:	4619      	mov	r1, r3
 8005a9e:	6938      	ldr	r0, [r7, #16]
 8005aa0:	f7ff feec 	bl	800587c <move_window>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d16f      	bne.n	8005b8a <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	899b      	ldrh	r3, [r3, #12]
 8005aae:	461a      	mov	r2, r3
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	fbb3 f1f2 	udiv	r1, r3, r2
 8005ab6:	fb02 f201 	mul.w	r2, r2, r1
 8005aba:	1a9b      	subs	r3, r3, r2
 8005abc:	693a      	ldr	r2, [r7, #16]
 8005abe:	4413      	add	r3, r2
 8005ac0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005ac4:	021b      	lsls	r3, r3, #8
 8005ac6:	461a      	mov	r2, r3
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	4313      	orrs	r3, r2
 8005acc:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	f003 0301 	and.w	r3, r3, #1
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d002      	beq.n	8005ade <get_fat+0xe8>
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	091b      	lsrs	r3, r3, #4
 8005adc:	e002      	b.n	8005ae4 <get_fat+0xee>
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ae4:	617b      	str	r3, [r7, #20]
			break;
 8005ae6:	e055      	b.n	8005b94 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	899b      	ldrh	r3, [r3, #12]
 8005af0:	085b      	lsrs	r3, r3, #1
 8005af2:	b29b      	uxth	r3, r3
 8005af4:	4619      	mov	r1, r3
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	fbb3 f3f1 	udiv	r3, r3, r1
 8005afc:	4413      	add	r3, r2
 8005afe:	4619      	mov	r1, r3
 8005b00:	6938      	ldr	r0, [r7, #16]
 8005b02:	f7ff febb 	bl	800587c <move_window>
 8005b06:	4603      	mov	r3, r0
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d140      	bne.n	8005b8e <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	005b      	lsls	r3, r3, #1
 8005b16:	693a      	ldr	r2, [r7, #16]
 8005b18:	8992      	ldrh	r2, [r2, #12]
 8005b1a:	fbb3 f0f2 	udiv	r0, r3, r2
 8005b1e:	fb02 f200 	mul.w	r2, r2, r0
 8005b22:	1a9b      	subs	r3, r3, r2
 8005b24:	440b      	add	r3, r1
 8005b26:	4618      	mov	r0, r3
 8005b28:	f7ff fbf8 	bl	800531c <ld_word>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	617b      	str	r3, [r7, #20]
			break;
 8005b30:	e030      	b.n	8005b94 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	899b      	ldrh	r3, [r3, #12]
 8005b3a:	089b      	lsrs	r3, r3, #2
 8005b3c:	b29b      	uxth	r3, r3
 8005b3e:	4619      	mov	r1, r3
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	fbb3 f3f1 	udiv	r3, r3, r1
 8005b46:	4413      	add	r3, r2
 8005b48:	4619      	mov	r1, r3
 8005b4a:	6938      	ldr	r0, [r7, #16]
 8005b4c:	f7ff fe96 	bl	800587c <move_window>
 8005b50:	4603      	mov	r3, r0
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d11d      	bne.n	8005b92 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	009b      	lsls	r3, r3, #2
 8005b60:	693a      	ldr	r2, [r7, #16]
 8005b62:	8992      	ldrh	r2, [r2, #12]
 8005b64:	fbb3 f0f2 	udiv	r0, r3, r2
 8005b68:	fb02 f200 	mul.w	r2, r2, r0
 8005b6c:	1a9b      	subs	r3, r3, r2
 8005b6e:	440b      	add	r3, r1
 8005b70:	4618      	mov	r0, r3
 8005b72:	f7ff fbeb 	bl	800534c <ld_dword>
 8005b76:	4603      	mov	r3, r0
 8005b78:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005b7c:	617b      	str	r3, [r7, #20]
			break;
 8005b7e:	e009      	b.n	8005b94 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8005b80:	2301      	movs	r3, #1
 8005b82:	617b      	str	r3, [r7, #20]
 8005b84:	e006      	b.n	8005b94 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005b86:	bf00      	nop
 8005b88:	e004      	b.n	8005b94 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005b8a:	bf00      	nop
 8005b8c:	e002      	b.n	8005b94 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005b8e:	bf00      	nop
 8005b90:	e000      	b.n	8005b94 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005b92:	bf00      	nop
		}
	}

	return val;
 8005b94:	697b      	ldr	r3, [r7, #20]
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	3718      	adds	r7, #24
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}

08005b9e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8005b9e:	b590      	push	{r4, r7, lr}
 8005ba0:	b089      	sub	sp, #36	; 0x24
 8005ba2:	af00      	add	r7, sp, #0
 8005ba4:	60f8      	str	r0, [r7, #12]
 8005ba6:	60b9      	str	r1, [r7, #8]
 8005ba8:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8005baa:	2302      	movs	r3, #2
 8005bac:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	f240 8102 	bls.w	8005dba <put_fat+0x21c>
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	69db      	ldr	r3, [r3, #28]
 8005bba:	68ba      	ldr	r2, [r7, #8]
 8005bbc:	429a      	cmp	r2, r3
 8005bbe:	f080 80fc 	bcs.w	8005dba <put_fat+0x21c>
		switch (fs->fs_type) {
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	781b      	ldrb	r3, [r3, #0]
 8005bc6:	2b03      	cmp	r3, #3
 8005bc8:	f000 80b6 	beq.w	8005d38 <put_fat+0x19a>
 8005bcc:	2b03      	cmp	r3, #3
 8005bce:	f300 80fd 	bgt.w	8005dcc <put_fat+0x22e>
 8005bd2:	2b01      	cmp	r3, #1
 8005bd4:	d003      	beq.n	8005bde <put_fat+0x40>
 8005bd6:	2b02      	cmp	r3, #2
 8005bd8:	f000 8083 	beq.w	8005ce2 <put_fat+0x144>
 8005bdc:	e0f6      	b.n	8005dcc <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	61bb      	str	r3, [r7, #24]
 8005be2:	69bb      	ldr	r3, [r7, #24]
 8005be4:	085b      	lsrs	r3, r3, #1
 8005be6:	69ba      	ldr	r2, [r7, #24]
 8005be8:	4413      	add	r3, r2
 8005bea:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	899b      	ldrh	r3, [r3, #12]
 8005bf4:	4619      	mov	r1, r3
 8005bf6:	69bb      	ldr	r3, [r7, #24]
 8005bf8:	fbb3 f3f1 	udiv	r3, r3, r1
 8005bfc:	4413      	add	r3, r2
 8005bfe:	4619      	mov	r1, r3
 8005c00:	68f8      	ldr	r0, [r7, #12]
 8005c02:	f7ff fe3b 	bl	800587c <move_window>
 8005c06:	4603      	mov	r3, r0
 8005c08:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005c0a:	7ffb      	ldrb	r3, [r7, #31]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	f040 80d6 	bne.w	8005dbe <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005c18:	69bb      	ldr	r3, [r7, #24]
 8005c1a:	1c5a      	adds	r2, r3, #1
 8005c1c:	61ba      	str	r2, [r7, #24]
 8005c1e:	68fa      	ldr	r2, [r7, #12]
 8005c20:	8992      	ldrh	r2, [r2, #12]
 8005c22:	fbb3 f0f2 	udiv	r0, r3, r2
 8005c26:	fb02 f200 	mul.w	r2, r2, r0
 8005c2a:	1a9b      	subs	r3, r3, r2
 8005c2c:	440b      	add	r3, r1
 8005c2e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	f003 0301 	and.w	r3, r3, #1
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d00d      	beq.n	8005c56 <put_fat+0xb8>
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	781b      	ldrb	r3, [r3, #0]
 8005c3e:	b25b      	sxtb	r3, r3
 8005c40:	f003 030f 	and.w	r3, r3, #15
 8005c44:	b25a      	sxtb	r2, r3
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	b2db      	uxtb	r3, r3
 8005c4a:	011b      	lsls	r3, r3, #4
 8005c4c:	b25b      	sxtb	r3, r3
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	b25b      	sxtb	r3, r3
 8005c52:	b2db      	uxtb	r3, r3
 8005c54:	e001      	b.n	8005c5a <put_fat+0xbc>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	b2db      	uxtb	r3, r3
 8005c5a:	697a      	ldr	r2, [r7, #20]
 8005c5c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	2201      	movs	r2, #1
 8005c62:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	899b      	ldrh	r3, [r3, #12]
 8005c6c:	4619      	mov	r1, r3
 8005c6e:	69bb      	ldr	r3, [r7, #24]
 8005c70:	fbb3 f3f1 	udiv	r3, r3, r1
 8005c74:	4413      	add	r3, r2
 8005c76:	4619      	mov	r1, r3
 8005c78:	68f8      	ldr	r0, [r7, #12]
 8005c7a:	f7ff fdff 	bl	800587c <move_window>
 8005c7e:	4603      	mov	r3, r0
 8005c80:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005c82:	7ffb      	ldrb	r3, [r7, #31]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	f040 809c 	bne.w	8005dc2 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	899b      	ldrh	r3, [r3, #12]
 8005c94:	461a      	mov	r2, r3
 8005c96:	69bb      	ldr	r3, [r7, #24]
 8005c98:	fbb3 f0f2 	udiv	r0, r3, r2
 8005c9c:	fb02 f200 	mul.w	r2, r2, r0
 8005ca0:	1a9b      	subs	r3, r3, r2
 8005ca2:	440b      	add	r3, r1
 8005ca4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	f003 0301 	and.w	r3, r3, #1
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d003      	beq.n	8005cb8 <put_fat+0x11a>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	091b      	lsrs	r3, r3, #4
 8005cb4:	b2db      	uxtb	r3, r3
 8005cb6:	e00e      	b.n	8005cd6 <put_fat+0x138>
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	781b      	ldrb	r3, [r3, #0]
 8005cbc:	b25b      	sxtb	r3, r3
 8005cbe:	f023 030f 	bic.w	r3, r3, #15
 8005cc2:	b25a      	sxtb	r2, r3
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	0a1b      	lsrs	r3, r3, #8
 8005cc8:	b25b      	sxtb	r3, r3
 8005cca:	f003 030f 	and.w	r3, r3, #15
 8005cce:	b25b      	sxtb	r3, r3
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	b25b      	sxtb	r3, r3
 8005cd4:	b2db      	uxtb	r3, r3
 8005cd6:	697a      	ldr	r2, [r7, #20]
 8005cd8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2201      	movs	r2, #1
 8005cde:	70da      	strb	r2, [r3, #3]
			break;
 8005ce0:	e074      	b.n	8005dcc <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	899b      	ldrh	r3, [r3, #12]
 8005cea:	085b      	lsrs	r3, r3, #1
 8005cec:	b29b      	uxth	r3, r3
 8005cee:	4619      	mov	r1, r3
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	fbb3 f3f1 	udiv	r3, r3, r1
 8005cf6:	4413      	add	r3, r2
 8005cf8:	4619      	mov	r1, r3
 8005cfa:	68f8      	ldr	r0, [r7, #12]
 8005cfc:	f7ff fdbe 	bl	800587c <move_window>
 8005d00:	4603      	mov	r3, r0
 8005d02:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005d04:	7ffb      	ldrb	r3, [r7, #31]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d15d      	bne.n	8005dc6 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	005b      	lsls	r3, r3, #1
 8005d14:	68fa      	ldr	r2, [r7, #12]
 8005d16:	8992      	ldrh	r2, [r2, #12]
 8005d18:	fbb3 f0f2 	udiv	r0, r3, r2
 8005d1c:	fb02 f200 	mul.w	r2, r2, r0
 8005d20:	1a9b      	subs	r3, r3, r2
 8005d22:	440b      	add	r3, r1
 8005d24:	687a      	ldr	r2, [r7, #4]
 8005d26:	b292      	uxth	r2, r2
 8005d28:	4611      	mov	r1, r2
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	f7ff fb31 	bl	8005392 <st_word>
			fs->wflag = 1;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2201      	movs	r2, #1
 8005d34:	70da      	strb	r2, [r3, #3]
			break;
 8005d36:	e049      	b.n	8005dcc <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	899b      	ldrh	r3, [r3, #12]
 8005d40:	089b      	lsrs	r3, r3, #2
 8005d42:	b29b      	uxth	r3, r3
 8005d44:	4619      	mov	r1, r3
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	fbb3 f3f1 	udiv	r3, r3, r1
 8005d4c:	4413      	add	r3, r2
 8005d4e:	4619      	mov	r1, r3
 8005d50:	68f8      	ldr	r0, [r7, #12]
 8005d52:	f7ff fd93 	bl	800587c <move_window>
 8005d56:	4603      	mov	r3, r0
 8005d58:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005d5a:	7ffb      	ldrb	r3, [r7, #31]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d134      	bne.n	8005dca <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	009b      	lsls	r3, r3, #2
 8005d70:	68fa      	ldr	r2, [r7, #12]
 8005d72:	8992      	ldrh	r2, [r2, #12]
 8005d74:	fbb3 f0f2 	udiv	r0, r3, r2
 8005d78:	fb02 f200 	mul.w	r2, r2, r0
 8005d7c:	1a9b      	subs	r3, r3, r2
 8005d7e:	440b      	add	r3, r1
 8005d80:	4618      	mov	r0, r3
 8005d82:	f7ff fae3 	bl	800534c <ld_dword>
 8005d86:	4603      	mov	r3, r0
 8005d88:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005d8c:	4323      	orrs	r3, r4
 8005d8e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	009b      	lsls	r3, r3, #2
 8005d9a:	68fa      	ldr	r2, [r7, #12]
 8005d9c:	8992      	ldrh	r2, [r2, #12]
 8005d9e:	fbb3 f0f2 	udiv	r0, r3, r2
 8005da2:	fb02 f200 	mul.w	r2, r2, r0
 8005da6:	1a9b      	subs	r3, r3, r2
 8005da8:	440b      	add	r3, r1
 8005daa:	6879      	ldr	r1, [r7, #4]
 8005dac:	4618      	mov	r0, r3
 8005dae:	f7ff fb0b 	bl	80053c8 <st_dword>
			fs->wflag = 1;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2201      	movs	r2, #1
 8005db6:	70da      	strb	r2, [r3, #3]
			break;
 8005db8:	e008      	b.n	8005dcc <put_fat+0x22e>
		}
	}
 8005dba:	bf00      	nop
 8005dbc:	e006      	b.n	8005dcc <put_fat+0x22e>
			if (res != FR_OK) break;
 8005dbe:	bf00      	nop
 8005dc0:	e004      	b.n	8005dcc <put_fat+0x22e>
			if (res != FR_OK) break;
 8005dc2:	bf00      	nop
 8005dc4:	e002      	b.n	8005dcc <put_fat+0x22e>
			if (res != FR_OK) break;
 8005dc6:	bf00      	nop
 8005dc8:	e000      	b.n	8005dcc <put_fat+0x22e>
			if (res != FR_OK) break;
 8005dca:	bf00      	nop
	return res;
 8005dcc:	7ffb      	ldrb	r3, [r7, #31]
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	3724      	adds	r7, #36	; 0x24
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd90      	pop	{r4, r7, pc}

08005dd6 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8005dd6:	b580      	push	{r7, lr}
 8005dd8:	b088      	sub	sp, #32
 8005dda:	af00      	add	r7, sp, #0
 8005ddc:	60f8      	str	r0, [r7, #12]
 8005dde:	60b9      	str	r1, [r7, #8]
 8005de0:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8005de2:	2300      	movs	r3, #0
 8005de4:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	2b01      	cmp	r3, #1
 8005df0:	d904      	bls.n	8005dfc <remove_chain+0x26>
 8005df2:	69bb      	ldr	r3, [r7, #24]
 8005df4:	69db      	ldr	r3, [r3, #28]
 8005df6:	68ba      	ldr	r2, [r7, #8]
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	d301      	bcc.n	8005e00 <remove_chain+0x2a>
 8005dfc:	2302      	movs	r3, #2
 8005dfe:	e04b      	b.n	8005e98 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d00c      	beq.n	8005e20 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8005e06:	f04f 32ff 	mov.w	r2, #4294967295
 8005e0a:	6879      	ldr	r1, [r7, #4]
 8005e0c:	69b8      	ldr	r0, [r7, #24]
 8005e0e:	f7ff fec6 	bl	8005b9e <put_fat>
 8005e12:	4603      	mov	r3, r0
 8005e14:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8005e16:	7ffb      	ldrb	r3, [r7, #31]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d001      	beq.n	8005e20 <remove_chain+0x4a>
 8005e1c:	7ffb      	ldrb	r3, [r7, #31]
 8005e1e:	e03b      	b.n	8005e98 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8005e20:	68b9      	ldr	r1, [r7, #8]
 8005e22:	68f8      	ldr	r0, [r7, #12]
 8005e24:	f7ff fde7 	bl	80059f6 <get_fat>
 8005e28:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d031      	beq.n	8005e94 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	2b01      	cmp	r3, #1
 8005e34:	d101      	bne.n	8005e3a <remove_chain+0x64>
 8005e36:	2302      	movs	r3, #2
 8005e38:	e02e      	b.n	8005e98 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e40:	d101      	bne.n	8005e46 <remove_chain+0x70>
 8005e42:	2301      	movs	r3, #1
 8005e44:	e028      	b.n	8005e98 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8005e46:	2200      	movs	r2, #0
 8005e48:	68b9      	ldr	r1, [r7, #8]
 8005e4a:	69b8      	ldr	r0, [r7, #24]
 8005e4c:	f7ff fea7 	bl	8005b9e <put_fat>
 8005e50:	4603      	mov	r3, r0
 8005e52:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8005e54:	7ffb      	ldrb	r3, [r7, #31]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d001      	beq.n	8005e5e <remove_chain+0x88>
 8005e5a:	7ffb      	ldrb	r3, [r7, #31]
 8005e5c:	e01c      	b.n	8005e98 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8005e5e:	69bb      	ldr	r3, [r7, #24]
 8005e60:	699a      	ldr	r2, [r3, #24]
 8005e62:	69bb      	ldr	r3, [r7, #24]
 8005e64:	69db      	ldr	r3, [r3, #28]
 8005e66:	3b02      	subs	r3, #2
 8005e68:	429a      	cmp	r2, r3
 8005e6a:	d20b      	bcs.n	8005e84 <remove_chain+0xae>
			fs->free_clst++;
 8005e6c:	69bb      	ldr	r3, [r7, #24]
 8005e6e:	699b      	ldr	r3, [r3, #24]
 8005e70:	1c5a      	adds	r2, r3, #1
 8005e72:	69bb      	ldr	r3, [r7, #24]
 8005e74:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8005e76:	69bb      	ldr	r3, [r7, #24]
 8005e78:	791b      	ldrb	r3, [r3, #4]
 8005e7a:	f043 0301 	orr.w	r3, r3, #1
 8005e7e:	b2da      	uxtb	r2, r3
 8005e80:	69bb      	ldr	r3, [r7, #24]
 8005e82:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8005e88:	69bb      	ldr	r3, [r7, #24]
 8005e8a:	69db      	ldr	r3, [r3, #28]
 8005e8c:	68ba      	ldr	r2, [r7, #8]
 8005e8e:	429a      	cmp	r2, r3
 8005e90:	d3c6      	bcc.n	8005e20 <remove_chain+0x4a>
 8005e92:	e000      	b.n	8005e96 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8005e94:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8005e96:	2300      	movs	r3, #0
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	3720      	adds	r7, #32
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}

08005ea0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b088      	sub	sp, #32
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
 8005ea8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d10d      	bne.n	8005ed2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	695b      	ldr	r3, [r3, #20]
 8005eba:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8005ebc:	69bb      	ldr	r3, [r7, #24]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d004      	beq.n	8005ecc <create_chain+0x2c>
 8005ec2:	693b      	ldr	r3, [r7, #16]
 8005ec4:	69db      	ldr	r3, [r3, #28]
 8005ec6:	69ba      	ldr	r2, [r7, #24]
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	d31b      	bcc.n	8005f04 <create_chain+0x64>
 8005ecc:	2301      	movs	r3, #1
 8005ece:	61bb      	str	r3, [r7, #24]
 8005ed0:	e018      	b.n	8005f04 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8005ed2:	6839      	ldr	r1, [r7, #0]
 8005ed4:	6878      	ldr	r0, [r7, #4]
 8005ed6:	f7ff fd8e 	bl	80059f6 <get_fat>
 8005eda:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	2b01      	cmp	r3, #1
 8005ee0:	d801      	bhi.n	8005ee6 <create_chain+0x46>
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	e070      	b.n	8005fc8 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eec:	d101      	bne.n	8005ef2 <create_chain+0x52>
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	e06a      	b.n	8005fc8 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	69db      	ldr	r3, [r3, #28]
 8005ef6:	68fa      	ldr	r2, [r7, #12]
 8005ef8:	429a      	cmp	r2, r3
 8005efa:	d201      	bcs.n	8005f00 <create_chain+0x60>
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	e063      	b.n	8005fc8 <create_chain+0x128>
		scl = clst;
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8005f04:	69bb      	ldr	r3, [r7, #24]
 8005f06:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8005f08:	69fb      	ldr	r3, [r7, #28]
 8005f0a:	3301      	adds	r3, #1
 8005f0c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	69db      	ldr	r3, [r3, #28]
 8005f12:	69fa      	ldr	r2, [r7, #28]
 8005f14:	429a      	cmp	r2, r3
 8005f16:	d307      	bcc.n	8005f28 <create_chain+0x88>
				ncl = 2;
 8005f18:	2302      	movs	r3, #2
 8005f1a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8005f1c:	69fa      	ldr	r2, [r7, #28]
 8005f1e:	69bb      	ldr	r3, [r7, #24]
 8005f20:	429a      	cmp	r2, r3
 8005f22:	d901      	bls.n	8005f28 <create_chain+0x88>
 8005f24:	2300      	movs	r3, #0
 8005f26:	e04f      	b.n	8005fc8 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8005f28:	69f9      	ldr	r1, [r7, #28]
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f7ff fd63 	bl	80059f6 <get_fat>
 8005f30:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d00e      	beq.n	8005f56 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2b01      	cmp	r3, #1
 8005f3c:	d003      	beq.n	8005f46 <create_chain+0xa6>
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f44:	d101      	bne.n	8005f4a <create_chain+0xaa>
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	e03e      	b.n	8005fc8 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8005f4a:	69fa      	ldr	r2, [r7, #28]
 8005f4c:	69bb      	ldr	r3, [r7, #24]
 8005f4e:	429a      	cmp	r2, r3
 8005f50:	d1da      	bne.n	8005f08 <create_chain+0x68>
 8005f52:	2300      	movs	r3, #0
 8005f54:	e038      	b.n	8005fc8 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8005f56:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8005f58:	f04f 32ff 	mov.w	r2, #4294967295
 8005f5c:	69f9      	ldr	r1, [r7, #28]
 8005f5e:	6938      	ldr	r0, [r7, #16]
 8005f60:	f7ff fe1d 	bl	8005b9e <put_fat>
 8005f64:	4603      	mov	r3, r0
 8005f66:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8005f68:	7dfb      	ldrb	r3, [r7, #23]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d109      	bne.n	8005f82 <create_chain+0xe2>
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d006      	beq.n	8005f82 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8005f74:	69fa      	ldr	r2, [r7, #28]
 8005f76:	6839      	ldr	r1, [r7, #0]
 8005f78:	6938      	ldr	r0, [r7, #16]
 8005f7a:	f7ff fe10 	bl	8005b9e <put_fat>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8005f82:	7dfb      	ldrb	r3, [r7, #23]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d116      	bne.n	8005fb6 <create_chain+0x116>
		fs->last_clst = ncl;
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	69fa      	ldr	r2, [r7, #28]
 8005f8c:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	699a      	ldr	r2, [r3, #24]
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	69db      	ldr	r3, [r3, #28]
 8005f96:	3b02      	subs	r3, #2
 8005f98:	429a      	cmp	r2, r3
 8005f9a:	d804      	bhi.n	8005fa6 <create_chain+0x106>
 8005f9c:	693b      	ldr	r3, [r7, #16]
 8005f9e:	699b      	ldr	r3, [r3, #24]
 8005fa0:	1e5a      	subs	r2, r3, #1
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	791b      	ldrb	r3, [r3, #4]
 8005faa:	f043 0301 	orr.w	r3, r3, #1
 8005fae:	b2da      	uxtb	r2, r3
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	711a      	strb	r2, [r3, #4]
 8005fb4:	e007      	b.n	8005fc6 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8005fb6:	7dfb      	ldrb	r3, [r7, #23]
 8005fb8:	2b01      	cmp	r3, #1
 8005fba:	d102      	bne.n	8005fc2 <create_chain+0x122>
 8005fbc:	f04f 33ff 	mov.w	r3, #4294967295
 8005fc0:	e000      	b.n	8005fc4 <create_chain+0x124>
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8005fc6:	69fb      	ldr	r3, [r7, #28]
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	3720      	adds	r7, #32
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}

08005fd0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b087      	sub	sp, #28
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
 8005fd8:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fe4:	3304      	adds	r3, #4
 8005fe6:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	899b      	ldrh	r3, [r3, #12]
 8005fec:	461a      	mov	r2, r3
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	fbb3 f3f2 	udiv	r3, r3, r2
 8005ff4:	68fa      	ldr	r2, [r7, #12]
 8005ff6:	8952      	ldrh	r2, [r2, #10]
 8005ff8:	fbb3 f3f2 	udiv	r3, r3, r2
 8005ffc:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	1d1a      	adds	r2, r3, #4
 8006002:	613a      	str	r2, [r7, #16]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d101      	bne.n	8006012 <clmt_clust+0x42>
 800600e:	2300      	movs	r3, #0
 8006010:	e010      	b.n	8006034 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8006012:	697a      	ldr	r2, [r7, #20]
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	429a      	cmp	r2, r3
 8006018:	d307      	bcc.n	800602a <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800601a:	697a      	ldr	r2, [r7, #20]
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	1ad3      	subs	r3, r2, r3
 8006020:	617b      	str	r3, [r7, #20]
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	3304      	adds	r3, #4
 8006026:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006028:	e7e9      	b.n	8005ffe <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800602a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800602c:	693b      	ldr	r3, [r7, #16]
 800602e:	681a      	ldr	r2, [r3, #0]
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	4413      	add	r3, r2
}
 8006034:	4618      	mov	r0, r3
 8006036:	371c      	adds	r7, #28
 8006038:	46bd      	mov	sp, r7
 800603a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603e:	4770      	bx	lr

08006040 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b086      	sub	sp, #24
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
 8006048:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006056:	d204      	bcs.n	8006062 <dir_sdi+0x22>
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	f003 031f 	and.w	r3, r3, #31
 800605e:	2b00      	cmp	r3, #0
 8006060:	d001      	beq.n	8006066 <dir_sdi+0x26>
		return FR_INT_ERR;
 8006062:	2302      	movs	r3, #2
 8006064:	e071      	b.n	800614a <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	683a      	ldr	r2, [r7, #0]
 800606a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	689b      	ldr	r3, [r3, #8]
 8006070:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d106      	bne.n	8006086 <dir_sdi+0x46>
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	781b      	ldrb	r3, [r3, #0]
 800607c:	2b02      	cmp	r3, #2
 800607e:	d902      	bls.n	8006086 <dir_sdi+0x46>
		clst = fs->dirbase;
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006084:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d10c      	bne.n	80060a6 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	095b      	lsrs	r3, r3, #5
 8006090:	693a      	ldr	r2, [r7, #16]
 8006092:	8912      	ldrh	r2, [r2, #8]
 8006094:	4293      	cmp	r3, r2
 8006096:	d301      	bcc.n	800609c <dir_sdi+0x5c>
 8006098:	2302      	movs	r3, #2
 800609a:	e056      	b.n	800614a <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	61da      	str	r2, [r3, #28]
 80060a4:	e02d      	b.n	8006102 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	895b      	ldrh	r3, [r3, #10]
 80060aa:	461a      	mov	r2, r3
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	899b      	ldrh	r3, [r3, #12]
 80060b0:	fb03 f302 	mul.w	r3, r3, r2
 80060b4:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80060b6:	e019      	b.n	80060ec <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6979      	ldr	r1, [r7, #20]
 80060bc:	4618      	mov	r0, r3
 80060be:	f7ff fc9a 	bl	80059f6 <get_fat>
 80060c2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060ca:	d101      	bne.n	80060d0 <dir_sdi+0x90>
 80060cc:	2301      	movs	r3, #1
 80060ce:	e03c      	b.n	800614a <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	2b01      	cmp	r3, #1
 80060d4:	d904      	bls.n	80060e0 <dir_sdi+0xa0>
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	69db      	ldr	r3, [r3, #28]
 80060da:	697a      	ldr	r2, [r7, #20]
 80060dc:	429a      	cmp	r2, r3
 80060de:	d301      	bcc.n	80060e4 <dir_sdi+0xa4>
 80060e0:	2302      	movs	r3, #2
 80060e2:	e032      	b.n	800614a <dir_sdi+0x10a>
			ofs -= csz;
 80060e4:	683a      	ldr	r2, [r7, #0]
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	1ad3      	subs	r3, r2, r3
 80060ea:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80060ec:	683a      	ldr	r2, [r7, #0]
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	429a      	cmp	r2, r3
 80060f2:	d2e1      	bcs.n	80060b8 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 80060f4:	6979      	ldr	r1, [r7, #20]
 80060f6:	6938      	ldr	r0, [r7, #16]
 80060f8:	f7ff fc5e 	bl	80059b8 <clust2sect>
 80060fc:	4602      	mov	r2, r0
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	697a      	ldr	r2, [r7, #20]
 8006106:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	69db      	ldr	r3, [r3, #28]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d101      	bne.n	8006114 <dir_sdi+0xd4>
 8006110:	2302      	movs	r3, #2
 8006112:	e01a      	b.n	800614a <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	69da      	ldr	r2, [r3, #28]
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	899b      	ldrh	r3, [r3, #12]
 800611c:	4619      	mov	r1, r3
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	fbb3 f3f1 	udiv	r3, r3, r1
 8006124:	441a      	add	r2, r3
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800612a:	693b      	ldr	r3, [r7, #16]
 800612c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006130:	693b      	ldr	r3, [r7, #16]
 8006132:	899b      	ldrh	r3, [r3, #12]
 8006134:	461a      	mov	r2, r3
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	fbb3 f0f2 	udiv	r0, r3, r2
 800613c:	fb02 f200 	mul.w	r2, r2, r0
 8006140:	1a9b      	subs	r3, r3, r2
 8006142:	18ca      	adds	r2, r1, r3
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006148:	2300      	movs	r3, #0
}
 800614a:	4618      	mov	r0, r3
 800614c:	3718      	adds	r7, #24
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}

08006152 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8006152:	b580      	push	{r7, lr}
 8006154:	b086      	sub	sp, #24
 8006156:	af00      	add	r7, sp, #0
 8006158:	6078      	str	r0, [r7, #4]
 800615a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	695b      	ldr	r3, [r3, #20]
 8006166:	3320      	adds	r3, #32
 8006168:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	69db      	ldr	r3, [r3, #28]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d003      	beq.n	800617a <dir_next+0x28>
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006178:	d301      	bcc.n	800617e <dir_next+0x2c>
 800617a:	2304      	movs	r3, #4
 800617c:	e0bb      	b.n	80062f6 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	899b      	ldrh	r3, [r3, #12]
 8006182:	461a      	mov	r2, r3
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	fbb3 f1f2 	udiv	r1, r3, r2
 800618a:	fb02 f201 	mul.w	r2, r2, r1
 800618e:	1a9b      	subs	r3, r3, r2
 8006190:	2b00      	cmp	r3, #0
 8006192:	f040 809d 	bne.w	80062d0 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	69db      	ldr	r3, [r3, #28]
 800619a:	1c5a      	adds	r2, r3, #1
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	699b      	ldr	r3, [r3, #24]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d10b      	bne.n	80061c0 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	095b      	lsrs	r3, r3, #5
 80061ac:	68fa      	ldr	r2, [r7, #12]
 80061ae:	8912      	ldrh	r2, [r2, #8]
 80061b0:	4293      	cmp	r3, r2
 80061b2:	f0c0 808d 	bcc.w	80062d0 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2200      	movs	r2, #0
 80061ba:	61da      	str	r2, [r3, #28]
 80061bc:	2304      	movs	r3, #4
 80061be:	e09a      	b.n	80062f6 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	899b      	ldrh	r3, [r3, #12]
 80061c4:	461a      	mov	r2, r3
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80061cc:	68fa      	ldr	r2, [r7, #12]
 80061ce:	8952      	ldrh	r2, [r2, #10]
 80061d0:	3a01      	subs	r2, #1
 80061d2:	4013      	ands	r3, r2
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d17b      	bne.n	80062d0 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80061d8:	687a      	ldr	r2, [r7, #4]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	699b      	ldr	r3, [r3, #24]
 80061de:	4619      	mov	r1, r3
 80061e0:	4610      	mov	r0, r2
 80061e2:	f7ff fc08 	bl	80059f6 <get_fat>
 80061e6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	2b01      	cmp	r3, #1
 80061ec:	d801      	bhi.n	80061f2 <dir_next+0xa0>
 80061ee:	2302      	movs	r3, #2
 80061f0:	e081      	b.n	80062f6 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061f8:	d101      	bne.n	80061fe <dir_next+0xac>
 80061fa:	2301      	movs	r3, #1
 80061fc:	e07b      	b.n	80062f6 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	69db      	ldr	r3, [r3, #28]
 8006202:	697a      	ldr	r2, [r7, #20]
 8006204:	429a      	cmp	r2, r3
 8006206:	d359      	bcc.n	80062bc <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d104      	bne.n	8006218 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2200      	movs	r2, #0
 8006212:	61da      	str	r2, [r3, #28]
 8006214:	2304      	movs	r3, #4
 8006216:	e06e      	b.n	80062f6 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8006218:	687a      	ldr	r2, [r7, #4]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	699b      	ldr	r3, [r3, #24]
 800621e:	4619      	mov	r1, r3
 8006220:	4610      	mov	r0, r2
 8006222:	f7ff fe3d 	bl	8005ea0 <create_chain>
 8006226:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d101      	bne.n	8006232 <dir_next+0xe0>
 800622e:	2307      	movs	r3, #7
 8006230:	e061      	b.n	80062f6 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	2b01      	cmp	r3, #1
 8006236:	d101      	bne.n	800623c <dir_next+0xea>
 8006238:	2302      	movs	r3, #2
 800623a:	e05c      	b.n	80062f6 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006242:	d101      	bne.n	8006248 <dir_next+0xf6>
 8006244:	2301      	movs	r3, #1
 8006246:	e056      	b.n	80062f6 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8006248:	68f8      	ldr	r0, [r7, #12]
 800624a:	f7ff fad3 	bl	80057f4 <sync_window>
 800624e:	4603      	mov	r3, r0
 8006250:	2b00      	cmp	r3, #0
 8006252:	d001      	beq.n	8006258 <dir_next+0x106>
 8006254:	2301      	movs	r3, #1
 8006256:	e04e      	b.n	80062f6 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	899b      	ldrh	r3, [r3, #12]
 8006262:	461a      	mov	r2, r3
 8006264:	2100      	movs	r1, #0
 8006266:	f7ff f8fc 	bl	8005462 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800626a:	2300      	movs	r3, #0
 800626c:	613b      	str	r3, [r7, #16]
 800626e:	6979      	ldr	r1, [r7, #20]
 8006270:	68f8      	ldr	r0, [r7, #12]
 8006272:	f7ff fba1 	bl	80059b8 <clust2sect>
 8006276:	4602      	mov	r2, r0
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	635a      	str	r2, [r3, #52]	; 0x34
 800627c:	e012      	b.n	80062a4 <dir_next+0x152>
						fs->wflag = 1;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	2201      	movs	r2, #1
 8006282:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8006284:	68f8      	ldr	r0, [r7, #12]
 8006286:	f7ff fab5 	bl	80057f4 <sync_window>
 800628a:	4603      	mov	r3, r0
 800628c:	2b00      	cmp	r3, #0
 800628e:	d001      	beq.n	8006294 <dir_next+0x142>
 8006290:	2301      	movs	r3, #1
 8006292:	e030      	b.n	80062f6 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	3301      	adds	r3, #1
 8006298:	613b      	str	r3, [r7, #16]
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800629e:	1c5a      	adds	r2, r3, #1
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	635a      	str	r2, [r3, #52]	; 0x34
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	895b      	ldrh	r3, [r3, #10]
 80062a8:	461a      	mov	r2, r3
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d3e6      	bcc.n	800627e <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062b4:	693b      	ldr	r3, [r7, #16]
 80062b6:	1ad2      	subs	r2, r2, r3
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	697a      	ldr	r2, [r7, #20]
 80062c0:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80062c2:	6979      	ldr	r1, [r7, #20]
 80062c4:	68f8      	ldr	r0, [r7, #12]
 80062c6:	f7ff fb77 	bl	80059b8 <clust2sect>
 80062ca:	4602      	mov	r2, r0
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	68ba      	ldr	r2, [r7, #8]
 80062d4:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	899b      	ldrh	r3, [r3, #12]
 80062e0:	461a      	mov	r2, r3
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	fbb3 f0f2 	udiv	r0, r3, r2
 80062e8:	fb02 f200 	mul.w	r2, r2, r0
 80062ec:	1a9b      	subs	r3, r3, r2
 80062ee:	18ca      	adds	r2, r1, r3
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80062f4:	2300      	movs	r3, #0
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	3718      	adds	r7, #24
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd80      	pop	{r7, pc}

080062fe <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80062fe:	b580      	push	{r7, lr}
 8006300:	b086      	sub	sp, #24
 8006302:	af00      	add	r7, sp, #0
 8006304:	6078      	str	r0, [r7, #4]
 8006306:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800630e:	2100      	movs	r1, #0
 8006310:	6878      	ldr	r0, [r7, #4]
 8006312:	f7ff fe95 	bl	8006040 <dir_sdi>
 8006316:	4603      	mov	r3, r0
 8006318:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800631a:	7dfb      	ldrb	r3, [r7, #23]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d12b      	bne.n	8006378 <dir_alloc+0x7a>
		n = 0;
 8006320:	2300      	movs	r3, #0
 8006322:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	69db      	ldr	r3, [r3, #28]
 8006328:	4619      	mov	r1, r3
 800632a:	68f8      	ldr	r0, [r7, #12]
 800632c:	f7ff faa6 	bl	800587c <move_window>
 8006330:	4603      	mov	r3, r0
 8006332:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006334:	7dfb      	ldrb	r3, [r7, #23]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d11d      	bne.n	8006376 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6a1b      	ldr	r3, [r3, #32]
 800633e:	781b      	ldrb	r3, [r3, #0]
 8006340:	2be5      	cmp	r3, #229	; 0xe5
 8006342:	d004      	beq.n	800634e <dir_alloc+0x50>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6a1b      	ldr	r3, [r3, #32]
 8006348:	781b      	ldrb	r3, [r3, #0]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d107      	bne.n	800635e <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	3301      	adds	r3, #1
 8006352:	613b      	str	r3, [r7, #16]
 8006354:	693a      	ldr	r2, [r7, #16]
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	429a      	cmp	r2, r3
 800635a:	d102      	bne.n	8006362 <dir_alloc+0x64>
 800635c:	e00c      	b.n	8006378 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800635e:	2300      	movs	r3, #0
 8006360:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8006362:	2101      	movs	r1, #1
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	f7ff fef4 	bl	8006152 <dir_next>
 800636a:	4603      	mov	r3, r0
 800636c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800636e:	7dfb      	ldrb	r3, [r7, #23]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d0d7      	beq.n	8006324 <dir_alloc+0x26>
 8006374:	e000      	b.n	8006378 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8006376:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006378:	7dfb      	ldrb	r3, [r7, #23]
 800637a:	2b04      	cmp	r3, #4
 800637c:	d101      	bne.n	8006382 <dir_alloc+0x84>
 800637e:	2307      	movs	r3, #7
 8006380:	75fb      	strb	r3, [r7, #23]
	return res;
 8006382:	7dfb      	ldrb	r3, [r7, #23]
}
 8006384:	4618      	mov	r0, r3
 8006386:	3718      	adds	r7, #24
 8006388:	46bd      	mov	sp, r7
 800638a:	bd80      	pop	{r7, pc}

0800638c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b084      	sub	sp, #16
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
 8006394:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	331a      	adds	r3, #26
 800639a:	4618      	mov	r0, r3
 800639c:	f7fe ffbe 	bl	800531c <ld_word>
 80063a0:	4603      	mov	r3, r0
 80063a2:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	781b      	ldrb	r3, [r3, #0]
 80063a8:	2b03      	cmp	r3, #3
 80063aa:	d109      	bne.n	80063c0 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	3314      	adds	r3, #20
 80063b0:	4618      	mov	r0, r3
 80063b2:	f7fe ffb3 	bl	800531c <ld_word>
 80063b6:	4603      	mov	r3, r0
 80063b8:	041b      	lsls	r3, r3, #16
 80063ba:	68fa      	ldr	r2, [r7, #12]
 80063bc:	4313      	orrs	r3, r2
 80063be:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80063c0:	68fb      	ldr	r3, [r7, #12]
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	3710      	adds	r7, #16
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}

080063ca <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80063ca:	b580      	push	{r7, lr}
 80063cc:	b084      	sub	sp, #16
 80063ce:	af00      	add	r7, sp, #0
 80063d0:	60f8      	str	r0, [r7, #12]
 80063d2:	60b9      	str	r1, [r7, #8]
 80063d4:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	331a      	adds	r3, #26
 80063da:	687a      	ldr	r2, [r7, #4]
 80063dc:	b292      	uxth	r2, r2
 80063de:	4611      	mov	r1, r2
 80063e0:	4618      	mov	r0, r3
 80063e2:	f7fe ffd6 	bl	8005392 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	781b      	ldrb	r3, [r3, #0]
 80063ea:	2b03      	cmp	r3, #3
 80063ec:	d109      	bne.n	8006402 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	f103 0214 	add.w	r2, r3, #20
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	0c1b      	lsrs	r3, r3, #16
 80063f8:	b29b      	uxth	r3, r3
 80063fa:	4619      	mov	r1, r3
 80063fc:	4610      	mov	r0, r2
 80063fe:	f7fe ffc8 	bl	8005392 <st_word>
	}
}
 8006402:	bf00      	nop
 8006404:	3710      	adds	r7, #16
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}
	...

0800640c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800640c:	b590      	push	{r4, r7, lr}
 800640e:	b087      	sub	sp, #28
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
 8006414:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	331a      	adds	r3, #26
 800641a:	4618      	mov	r0, r3
 800641c:	f7fe ff7e 	bl	800531c <ld_word>
 8006420:	4603      	mov	r3, r0
 8006422:	2b00      	cmp	r3, #0
 8006424:	d001      	beq.n	800642a <cmp_lfn+0x1e>
 8006426:	2300      	movs	r3, #0
 8006428:	e059      	b.n	80064de <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	781b      	ldrb	r3, [r3, #0]
 800642e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006432:	1e5a      	subs	r2, r3, #1
 8006434:	4613      	mov	r3, r2
 8006436:	005b      	lsls	r3, r3, #1
 8006438:	4413      	add	r3, r2
 800643a:	009b      	lsls	r3, r3, #2
 800643c:	4413      	add	r3, r2
 800643e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006440:	2301      	movs	r3, #1
 8006442:	81fb      	strh	r3, [r7, #14]
 8006444:	2300      	movs	r3, #0
 8006446:	613b      	str	r3, [r7, #16]
 8006448:	e033      	b.n	80064b2 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800644a:	4a27      	ldr	r2, [pc, #156]	; (80064e8 <cmp_lfn+0xdc>)
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	4413      	add	r3, r2
 8006450:	781b      	ldrb	r3, [r3, #0]
 8006452:	461a      	mov	r2, r3
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	4413      	add	r3, r2
 8006458:	4618      	mov	r0, r3
 800645a:	f7fe ff5f 	bl	800531c <ld_word>
 800645e:	4603      	mov	r3, r0
 8006460:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8006462:	89fb      	ldrh	r3, [r7, #14]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d01a      	beq.n	800649e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	2bfe      	cmp	r3, #254	; 0xfe
 800646c:	d812      	bhi.n	8006494 <cmp_lfn+0x88>
 800646e:	89bb      	ldrh	r3, [r7, #12]
 8006470:	4618      	mov	r0, r3
 8006472:	f002 f9b1 	bl	80087d8 <ff_wtoupper>
 8006476:	4603      	mov	r3, r0
 8006478:	461c      	mov	r4, r3
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	1c5a      	adds	r2, r3, #1
 800647e:	617a      	str	r2, [r7, #20]
 8006480:	005b      	lsls	r3, r3, #1
 8006482:	687a      	ldr	r2, [r7, #4]
 8006484:	4413      	add	r3, r2
 8006486:	881b      	ldrh	r3, [r3, #0]
 8006488:	4618      	mov	r0, r3
 800648a:	f002 f9a5 	bl	80087d8 <ff_wtoupper>
 800648e:	4603      	mov	r3, r0
 8006490:	429c      	cmp	r4, r3
 8006492:	d001      	beq.n	8006498 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8006494:	2300      	movs	r3, #0
 8006496:	e022      	b.n	80064de <cmp_lfn+0xd2>
			}
			wc = uc;
 8006498:	89bb      	ldrh	r3, [r7, #12]
 800649a:	81fb      	strh	r3, [r7, #14]
 800649c:	e006      	b.n	80064ac <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800649e:	89bb      	ldrh	r3, [r7, #12]
 80064a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d001      	beq.n	80064ac <cmp_lfn+0xa0>
 80064a8:	2300      	movs	r3, #0
 80064aa:	e018      	b.n	80064de <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80064ac:	693b      	ldr	r3, [r7, #16]
 80064ae:	3301      	adds	r3, #1
 80064b0:	613b      	str	r3, [r7, #16]
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	2b0c      	cmp	r3, #12
 80064b6:	d9c8      	bls.n	800644a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	781b      	ldrb	r3, [r3, #0]
 80064bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d00b      	beq.n	80064dc <cmp_lfn+0xd0>
 80064c4:	89fb      	ldrh	r3, [r7, #14]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d008      	beq.n	80064dc <cmp_lfn+0xd0>
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	005b      	lsls	r3, r3, #1
 80064ce:	687a      	ldr	r2, [r7, #4]
 80064d0:	4413      	add	r3, r2
 80064d2:	881b      	ldrh	r3, [r3, #0]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d001      	beq.n	80064dc <cmp_lfn+0xd0>
 80064d8:	2300      	movs	r3, #0
 80064da:	e000      	b.n	80064de <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80064dc:	2301      	movs	r3, #1
}
 80064de:	4618      	mov	r0, r3
 80064e0:	371c      	adds	r7, #28
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd90      	pop	{r4, r7, pc}
 80064e6:	bf00      	nop
 80064e8:	0800a120 	.word	0x0800a120

080064ec <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b088      	sub	sp, #32
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	60f8      	str	r0, [r7, #12]
 80064f4:	60b9      	str	r1, [r7, #8]
 80064f6:	4611      	mov	r1, r2
 80064f8:	461a      	mov	r2, r3
 80064fa:	460b      	mov	r3, r1
 80064fc:	71fb      	strb	r3, [r7, #7]
 80064fe:	4613      	mov	r3, r2
 8006500:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	330d      	adds	r3, #13
 8006506:	79ba      	ldrb	r2, [r7, #6]
 8006508:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	330b      	adds	r3, #11
 800650e:	220f      	movs	r2, #15
 8006510:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	330c      	adds	r3, #12
 8006516:	2200      	movs	r2, #0
 8006518:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	331a      	adds	r3, #26
 800651e:	2100      	movs	r1, #0
 8006520:	4618      	mov	r0, r3
 8006522:	f7fe ff36 	bl	8005392 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8006526:	79fb      	ldrb	r3, [r7, #7]
 8006528:	1e5a      	subs	r2, r3, #1
 800652a:	4613      	mov	r3, r2
 800652c:	005b      	lsls	r3, r3, #1
 800652e:	4413      	add	r3, r2
 8006530:	009b      	lsls	r3, r3, #2
 8006532:	4413      	add	r3, r2
 8006534:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8006536:	2300      	movs	r3, #0
 8006538:	82fb      	strh	r3, [r7, #22]
 800653a:	2300      	movs	r3, #0
 800653c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800653e:	8afb      	ldrh	r3, [r7, #22]
 8006540:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006544:	4293      	cmp	r3, r2
 8006546:	d007      	beq.n	8006558 <put_lfn+0x6c>
 8006548:	69fb      	ldr	r3, [r7, #28]
 800654a:	1c5a      	adds	r2, r3, #1
 800654c:	61fa      	str	r2, [r7, #28]
 800654e:	005b      	lsls	r3, r3, #1
 8006550:	68fa      	ldr	r2, [r7, #12]
 8006552:	4413      	add	r3, r2
 8006554:	881b      	ldrh	r3, [r3, #0]
 8006556:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8006558:	4a17      	ldr	r2, [pc, #92]	; (80065b8 <put_lfn+0xcc>)
 800655a:	69bb      	ldr	r3, [r7, #24]
 800655c:	4413      	add	r3, r2
 800655e:	781b      	ldrb	r3, [r3, #0]
 8006560:	461a      	mov	r2, r3
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	4413      	add	r3, r2
 8006566:	8afa      	ldrh	r2, [r7, #22]
 8006568:	4611      	mov	r1, r2
 800656a:	4618      	mov	r0, r3
 800656c:	f7fe ff11 	bl	8005392 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8006570:	8afb      	ldrh	r3, [r7, #22]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d102      	bne.n	800657c <put_lfn+0x90>
 8006576:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800657a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800657c:	69bb      	ldr	r3, [r7, #24]
 800657e:	3301      	adds	r3, #1
 8006580:	61bb      	str	r3, [r7, #24]
 8006582:	69bb      	ldr	r3, [r7, #24]
 8006584:	2b0c      	cmp	r3, #12
 8006586:	d9da      	bls.n	800653e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8006588:	8afb      	ldrh	r3, [r7, #22]
 800658a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800658e:	4293      	cmp	r3, r2
 8006590:	d006      	beq.n	80065a0 <put_lfn+0xb4>
 8006592:	69fb      	ldr	r3, [r7, #28]
 8006594:	005b      	lsls	r3, r3, #1
 8006596:	68fa      	ldr	r2, [r7, #12]
 8006598:	4413      	add	r3, r2
 800659a:	881b      	ldrh	r3, [r3, #0]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d103      	bne.n	80065a8 <put_lfn+0xbc>
 80065a0:	79fb      	ldrb	r3, [r7, #7]
 80065a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80065a6:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	79fa      	ldrb	r2, [r7, #7]
 80065ac:	701a      	strb	r2, [r3, #0]
}
 80065ae:	bf00      	nop
 80065b0:	3720      	adds	r7, #32
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}
 80065b6:	bf00      	nop
 80065b8:	0800a120 	.word	0x0800a120

080065bc <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b08c      	sub	sp, #48	; 0x30
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	60f8      	str	r0, [r7, #12]
 80065c4:	60b9      	str	r1, [r7, #8]
 80065c6:	607a      	str	r2, [r7, #4]
 80065c8:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80065ca:	220b      	movs	r2, #11
 80065cc:	68b9      	ldr	r1, [r7, #8]
 80065ce:	68f8      	ldr	r0, [r7, #12]
 80065d0:	f7fe ff26 	bl	8005420 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	2b05      	cmp	r3, #5
 80065d8:	d92b      	bls.n	8006632 <gen_numname+0x76>
		sr = seq;
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80065de:	e022      	b.n	8006626 <gen_numname+0x6a>
			wc = *lfn++;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	1c9a      	adds	r2, r3, #2
 80065e4:	607a      	str	r2, [r7, #4]
 80065e6:	881b      	ldrh	r3, [r3, #0]
 80065e8:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 80065ea:	2300      	movs	r3, #0
 80065ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80065ee:	e017      	b.n	8006620 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 80065f0:	69fb      	ldr	r3, [r7, #28]
 80065f2:	005a      	lsls	r2, r3, #1
 80065f4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80065f6:	f003 0301 	and.w	r3, r3, #1
 80065fa:	4413      	add	r3, r2
 80065fc:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80065fe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006600:	085b      	lsrs	r3, r3, #1
 8006602:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8006604:	69fb      	ldr	r3, [r7, #28]
 8006606:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800660a:	2b00      	cmp	r3, #0
 800660c:	d005      	beq.n	800661a <gen_numname+0x5e>
 800660e:	69fb      	ldr	r3, [r7, #28]
 8006610:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8006614:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8006618:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800661a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800661c:	3301      	adds	r3, #1
 800661e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006622:	2b0f      	cmp	r3, #15
 8006624:	d9e4      	bls.n	80065f0 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	881b      	ldrh	r3, [r3, #0]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d1d8      	bne.n	80065e0 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800662e:	69fb      	ldr	r3, [r7, #28]
 8006630:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8006632:	2307      	movs	r3, #7
 8006634:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	b2db      	uxtb	r3, r3
 800663a:	f003 030f 	and.w	r3, r3, #15
 800663e:	b2db      	uxtb	r3, r3
 8006640:	3330      	adds	r3, #48	; 0x30
 8006642:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8006646:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800664a:	2b39      	cmp	r3, #57	; 0x39
 800664c:	d904      	bls.n	8006658 <gen_numname+0x9c>
 800664e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006652:	3307      	adds	r3, #7
 8006654:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8006658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800665a:	1e5a      	subs	r2, r3, #1
 800665c:	62ba      	str	r2, [r7, #40]	; 0x28
 800665e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006662:	4413      	add	r3, r2
 8006664:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8006668:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	091b      	lsrs	r3, r3, #4
 8006670:	603b      	str	r3, [r7, #0]
	} while (seq);
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d1de      	bne.n	8006636 <gen_numname+0x7a>
	ns[i] = '~';
 8006678:	f107 0214 	add.w	r2, r7, #20
 800667c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800667e:	4413      	add	r3, r2
 8006680:	227e      	movs	r2, #126	; 0x7e
 8006682:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8006684:	2300      	movs	r3, #0
 8006686:	627b      	str	r3, [r7, #36]	; 0x24
 8006688:	e002      	b.n	8006690 <gen_numname+0xd4>
 800668a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800668c:	3301      	adds	r3, #1
 800668e:	627b      	str	r3, [r7, #36]	; 0x24
 8006690:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006694:	429a      	cmp	r2, r3
 8006696:	d205      	bcs.n	80066a4 <gen_numname+0xe8>
 8006698:	68fa      	ldr	r2, [r7, #12]
 800669a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800669c:	4413      	add	r3, r2
 800669e:	781b      	ldrb	r3, [r3, #0]
 80066a0:	2b20      	cmp	r3, #32
 80066a2:	d1f2      	bne.n	800668a <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80066a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066a6:	2b07      	cmp	r3, #7
 80066a8:	d808      	bhi.n	80066bc <gen_numname+0x100>
 80066aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ac:	1c5a      	adds	r2, r3, #1
 80066ae:	62ba      	str	r2, [r7, #40]	; 0x28
 80066b0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80066b4:	4413      	add	r3, r2
 80066b6:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80066ba:	e000      	b.n	80066be <gen_numname+0x102>
 80066bc:	2120      	movs	r1, #32
 80066be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c0:	1c5a      	adds	r2, r3, #1
 80066c2:	627a      	str	r2, [r7, #36]	; 0x24
 80066c4:	68fa      	ldr	r2, [r7, #12]
 80066c6:	4413      	add	r3, r2
 80066c8:	460a      	mov	r2, r1
 80066ca:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80066cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ce:	2b07      	cmp	r3, #7
 80066d0:	d9e8      	bls.n	80066a4 <gen_numname+0xe8>
}
 80066d2:	bf00      	nop
 80066d4:	bf00      	nop
 80066d6:	3730      	adds	r7, #48	; 0x30
 80066d8:	46bd      	mov	sp, r7
 80066da:	bd80      	pop	{r7, pc}

080066dc <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80066dc:	b480      	push	{r7}
 80066de:	b085      	sub	sp, #20
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80066e4:	2300      	movs	r3, #0
 80066e6:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80066e8:	230b      	movs	r3, #11
 80066ea:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80066ec:	7bfb      	ldrb	r3, [r7, #15]
 80066ee:	b2da      	uxtb	r2, r3
 80066f0:	0852      	lsrs	r2, r2, #1
 80066f2:	01db      	lsls	r3, r3, #7
 80066f4:	4313      	orrs	r3, r2
 80066f6:	b2da      	uxtb	r2, r3
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	1c59      	adds	r1, r3, #1
 80066fc:	6079      	str	r1, [r7, #4]
 80066fe:	781b      	ldrb	r3, [r3, #0]
 8006700:	4413      	add	r3, r2
 8006702:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	3b01      	subs	r3, #1
 8006708:	60bb      	str	r3, [r7, #8]
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d1ed      	bne.n	80066ec <sum_sfn+0x10>
	return sum;
 8006710:	7bfb      	ldrb	r3, [r7, #15]
}
 8006712:	4618      	mov	r0, r3
 8006714:	3714      	adds	r7, #20
 8006716:	46bd      	mov	sp, r7
 8006718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671c:	4770      	bx	lr

0800671e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800671e:	b580      	push	{r7, lr}
 8006720:	b086      	sub	sp, #24
 8006722:	af00      	add	r7, sp, #0
 8006724:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800672c:	2100      	movs	r1, #0
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f7ff fc86 	bl	8006040 <dir_sdi>
 8006734:	4603      	mov	r3, r0
 8006736:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006738:	7dfb      	ldrb	r3, [r7, #23]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d001      	beq.n	8006742 <dir_find+0x24>
 800673e:	7dfb      	ldrb	r3, [r7, #23]
 8006740:	e0a9      	b.n	8006896 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006742:	23ff      	movs	r3, #255	; 0xff
 8006744:	753b      	strb	r3, [r7, #20]
 8006746:	7d3b      	ldrb	r3, [r7, #20]
 8006748:	757b      	strb	r3, [r7, #21]
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	f04f 32ff 	mov.w	r2, #4294967295
 8006750:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	69db      	ldr	r3, [r3, #28]
 8006756:	4619      	mov	r1, r3
 8006758:	6938      	ldr	r0, [r7, #16]
 800675a:	f7ff f88f 	bl	800587c <move_window>
 800675e:	4603      	mov	r3, r0
 8006760:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006762:	7dfb      	ldrb	r3, [r7, #23]
 8006764:	2b00      	cmp	r3, #0
 8006766:	f040 8090 	bne.w	800688a <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6a1b      	ldr	r3, [r3, #32]
 800676e:	781b      	ldrb	r3, [r3, #0]
 8006770:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006772:	7dbb      	ldrb	r3, [r7, #22]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d102      	bne.n	800677e <dir_find+0x60>
 8006778:	2304      	movs	r3, #4
 800677a:	75fb      	strb	r3, [r7, #23]
 800677c:	e08a      	b.n	8006894 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6a1b      	ldr	r3, [r3, #32]
 8006782:	330b      	adds	r3, #11
 8006784:	781b      	ldrb	r3, [r3, #0]
 8006786:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800678a:	73fb      	strb	r3, [r7, #15]
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	7bfa      	ldrb	r2, [r7, #15]
 8006790:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8006792:	7dbb      	ldrb	r3, [r7, #22]
 8006794:	2be5      	cmp	r3, #229	; 0xe5
 8006796:	d007      	beq.n	80067a8 <dir_find+0x8a>
 8006798:	7bfb      	ldrb	r3, [r7, #15]
 800679a:	f003 0308 	and.w	r3, r3, #8
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d009      	beq.n	80067b6 <dir_find+0x98>
 80067a2:	7bfb      	ldrb	r3, [r7, #15]
 80067a4:	2b0f      	cmp	r3, #15
 80067a6:	d006      	beq.n	80067b6 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80067a8:	23ff      	movs	r3, #255	; 0xff
 80067aa:	757b      	strb	r3, [r7, #21]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f04f 32ff 	mov.w	r2, #4294967295
 80067b2:	631a      	str	r2, [r3, #48]	; 0x30
 80067b4:	e05e      	b.n	8006874 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80067b6:	7bfb      	ldrb	r3, [r7, #15]
 80067b8:	2b0f      	cmp	r3, #15
 80067ba:	d136      	bne.n	800682a <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80067c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d154      	bne.n	8006874 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80067ca:	7dbb      	ldrb	r3, [r7, #22]
 80067cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d00d      	beq.n	80067f0 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6a1b      	ldr	r3, [r3, #32]
 80067d8:	7b5b      	ldrb	r3, [r3, #13]
 80067da:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80067dc:	7dbb      	ldrb	r3, [r7, #22]
 80067de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067e2:	75bb      	strb	r3, [r7, #22]
 80067e4:	7dbb      	ldrb	r3, [r7, #22]
 80067e6:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	695a      	ldr	r2, [r3, #20]
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80067f0:	7dba      	ldrb	r2, [r7, #22]
 80067f2:	7d7b      	ldrb	r3, [r7, #21]
 80067f4:	429a      	cmp	r2, r3
 80067f6:	d115      	bne.n	8006824 <dir_find+0x106>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6a1b      	ldr	r3, [r3, #32]
 80067fc:	330d      	adds	r3, #13
 80067fe:	781b      	ldrb	r3, [r3, #0]
 8006800:	7d3a      	ldrb	r2, [r7, #20]
 8006802:	429a      	cmp	r2, r3
 8006804:	d10e      	bne.n	8006824 <dir_find+0x106>
 8006806:	693b      	ldr	r3, [r7, #16]
 8006808:	691a      	ldr	r2, [r3, #16]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6a1b      	ldr	r3, [r3, #32]
 800680e:	4619      	mov	r1, r3
 8006810:	4610      	mov	r0, r2
 8006812:	f7ff fdfb 	bl	800640c <cmp_lfn>
 8006816:	4603      	mov	r3, r0
 8006818:	2b00      	cmp	r3, #0
 800681a:	d003      	beq.n	8006824 <dir_find+0x106>
 800681c:	7d7b      	ldrb	r3, [r7, #21]
 800681e:	3b01      	subs	r3, #1
 8006820:	b2db      	uxtb	r3, r3
 8006822:	e000      	b.n	8006826 <dir_find+0x108>
 8006824:	23ff      	movs	r3, #255	; 0xff
 8006826:	757b      	strb	r3, [r7, #21]
 8006828:	e024      	b.n	8006874 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800682a:	7d7b      	ldrb	r3, [r7, #21]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d109      	bne.n	8006844 <dir_find+0x126>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6a1b      	ldr	r3, [r3, #32]
 8006834:	4618      	mov	r0, r3
 8006836:	f7ff ff51 	bl	80066dc <sum_sfn>
 800683a:	4603      	mov	r3, r0
 800683c:	461a      	mov	r2, r3
 800683e:	7d3b      	ldrb	r3, [r7, #20]
 8006840:	4293      	cmp	r3, r2
 8006842:	d024      	beq.n	800688e <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800684a:	f003 0301 	and.w	r3, r3, #1
 800684e:	2b00      	cmp	r3, #0
 8006850:	d10a      	bne.n	8006868 <dir_find+0x14a>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6a18      	ldr	r0, [r3, #32]
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	3324      	adds	r3, #36	; 0x24
 800685a:	220b      	movs	r2, #11
 800685c:	4619      	mov	r1, r3
 800685e:	f7fe fe1b 	bl	8005498 <mem_cmp>
 8006862:	4603      	mov	r3, r0
 8006864:	2b00      	cmp	r3, #0
 8006866:	d014      	beq.n	8006892 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006868:	23ff      	movs	r3, #255	; 0xff
 800686a:	757b      	strb	r3, [r7, #21]
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	f04f 32ff 	mov.w	r2, #4294967295
 8006872:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8006874:	2100      	movs	r1, #0
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f7ff fc6b 	bl	8006152 <dir_next>
 800687c:	4603      	mov	r3, r0
 800687e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006880:	7dfb      	ldrb	r3, [r7, #23]
 8006882:	2b00      	cmp	r3, #0
 8006884:	f43f af65 	beq.w	8006752 <dir_find+0x34>
 8006888:	e004      	b.n	8006894 <dir_find+0x176>
		if (res != FR_OK) break;
 800688a:	bf00      	nop
 800688c:	e002      	b.n	8006894 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800688e:	bf00      	nop
 8006890:	e000      	b.n	8006894 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8006892:	bf00      	nop

	return res;
 8006894:	7dfb      	ldrb	r3, [r7, #23]
}
 8006896:	4618      	mov	r0, r3
 8006898:	3718      	adds	r7, #24
 800689a:	46bd      	mov	sp, r7
 800689c:	bd80      	pop	{r7, pc}
	...

080068a0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b08c      	sub	sp, #48	; 0x30
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80068b4:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d001      	beq.n	80068c0 <dir_register+0x20>
 80068bc:	2306      	movs	r3, #6
 80068be:	e0e0      	b.n	8006a82 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80068c0:	2300      	movs	r3, #0
 80068c2:	627b      	str	r3, [r7, #36]	; 0x24
 80068c4:	e002      	b.n	80068cc <dir_register+0x2c>
 80068c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c8:	3301      	adds	r3, #1
 80068ca:	627b      	str	r3, [r7, #36]	; 0x24
 80068cc:	69fb      	ldr	r3, [r7, #28]
 80068ce:	691a      	ldr	r2, [r3, #16]
 80068d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d2:	005b      	lsls	r3, r3, #1
 80068d4:	4413      	add	r3, r2
 80068d6:	881b      	ldrh	r3, [r3, #0]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d1f4      	bne.n	80068c6 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f103 0124 	add.w	r1, r3, #36	; 0x24
 80068e2:	f107 030c 	add.w	r3, r7, #12
 80068e6:	220c      	movs	r2, #12
 80068e8:	4618      	mov	r0, r3
 80068ea:	f7fe fd99 	bl	8005420 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80068ee:	7dfb      	ldrb	r3, [r7, #23]
 80068f0:	f003 0301 	and.w	r3, r3, #1
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d032      	beq.n	800695e <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2240      	movs	r2, #64	; 0x40
 80068fc:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8006900:	2301      	movs	r3, #1
 8006902:	62bb      	str	r3, [r7, #40]	; 0x28
 8006904:	e016      	b.n	8006934 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800690c:	69fb      	ldr	r3, [r7, #28]
 800690e:	691a      	ldr	r2, [r3, #16]
 8006910:	f107 010c 	add.w	r1, r7, #12
 8006914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006916:	f7ff fe51 	bl	80065bc <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f7ff feff 	bl	800671e <dir_find>
 8006920:	4603      	mov	r3, r0
 8006922:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8006926:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800692a:	2b00      	cmp	r3, #0
 800692c:	d106      	bne.n	800693c <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800692e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006930:	3301      	adds	r3, #1
 8006932:	62bb      	str	r3, [r7, #40]	; 0x28
 8006934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006936:	2b63      	cmp	r3, #99	; 0x63
 8006938:	d9e5      	bls.n	8006906 <dir_register+0x66>
 800693a:	e000      	b.n	800693e <dir_register+0x9e>
			if (res != FR_OK) break;
 800693c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800693e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006940:	2b64      	cmp	r3, #100	; 0x64
 8006942:	d101      	bne.n	8006948 <dir_register+0xa8>
 8006944:	2307      	movs	r3, #7
 8006946:	e09c      	b.n	8006a82 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8006948:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800694c:	2b04      	cmp	r3, #4
 800694e:	d002      	beq.n	8006956 <dir_register+0xb6>
 8006950:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006954:	e095      	b.n	8006a82 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8006956:	7dfa      	ldrb	r2, [r7, #23]
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800695e:	7dfb      	ldrb	r3, [r7, #23]
 8006960:	f003 0302 	and.w	r3, r3, #2
 8006964:	2b00      	cmp	r3, #0
 8006966:	d007      	beq.n	8006978 <dir_register+0xd8>
 8006968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800696a:	330c      	adds	r3, #12
 800696c:	4a47      	ldr	r2, [pc, #284]	; (8006a8c <dir_register+0x1ec>)
 800696e:	fba2 2303 	umull	r2, r3, r2, r3
 8006972:	089b      	lsrs	r3, r3, #2
 8006974:	3301      	adds	r3, #1
 8006976:	e000      	b.n	800697a <dir_register+0xda>
 8006978:	2301      	movs	r3, #1
 800697a:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800697c:	6a39      	ldr	r1, [r7, #32]
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f7ff fcbd 	bl	80062fe <dir_alloc>
 8006984:	4603      	mov	r3, r0
 8006986:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800698a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800698e:	2b00      	cmp	r3, #0
 8006990:	d148      	bne.n	8006a24 <dir_register+0x184>
 8006992:	6a3b      	ldr	r3, [r7, #32]
 8006994:	3b01      	subs	r3, #1
 8006996:	623b      	str	r3, [r7, #32]
 8006998:	6a3b      	ldr	r3, [r7, #32]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d042      	beq.n	8006a24 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	695a      	ldr	r2, [r3, #20]
 80069a2:	6a3b      	ldr	r3, [r7, #32]
 80069a4:	015b      	lsls	r3, r3, #5
 80069a6:	1ad3      	subs	r3, r2, r3
 80069a8:	4619      	mov	r1, r3
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f7ff fb48 	bl	8006040 <dir_sdi>
 80069b0:	4603      	mov	r3, r0
 80069b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80069b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d132      	bne.n	8006a24 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	3324      	adds	r3, #36	; 0x24
 80069c2:	4618      	mov	r0, r3
 80069c4:	f7ff fe8a 	bl	80066dc <sum_sfn>
 80069c8:	4603      	mov	r3, r0
 80069ca:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	69db      	ldr	r3, [r3, #28]
 80069d0:	4619      	mov	r1, r3
 80069d2:	69f8      	ldr	r0, [r7, #28]
 80069d4:	f7fe ff52 	bl	800587c <move_window>
 80069d8:	4603      	mov	r3, r0
 80069da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 80069de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d11d      	bne.n	8006a22 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 80069e6:	69fb      	ldr	r3, [r7, #28]
 80069e8:	6918      	ldr	r0, [r3, #16]
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6a19      	ldr	r1, [r3, #32]
 80069ee:	6a3b      	ldr	r3, [r7, #32]
 80069f0:	b2da      	uxtb	r2, r3
 80069f2:	7efb      	ldrb	r3, [r7, #27]
 80069f4:	f7ff fd7a 	bl	80064ec <put_lfn>
				fs->wflag = 1;
 80069f8:	69fb      	ldr	r3, [r7, #28]
 80069fa:	2201      	movs	r2, #1
 80069fc:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 80069fe:	2100      	movs	r1, #0
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	f7ff fba6 	bl	8006152 <dir_next>
 8006a06:	4603      	mov	r3, r0
 8006a08:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8006a0c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d107      	bne.n	8006a24 <dir_register+0x184>
 8006a14:	6a3b      	ldr	r3, [r7, #32]
 8006a16:	3b01      	subs	r3, #1
 8006a18:	623b      	str	r3, [r7, #32]
 8006a1a:	6a3b      	ldr	r3, [r7, #32]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d1d5      	bne.n	80069cc <dir_register+0x12c>
 8006a20:	e000      	b.n	8006a24 <dir_register+0x184>
				if (res != FR_OK) break;
 8006a22:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8006a24:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d128      	bne.n	8006a7e <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	69db      	ldr	r3, [r3, #28]
 8006a30:	4619      	mov	r1, r3
 8006a32:	69f8      	ldr	r0, [r7, #28]
 8006a34:	f7fe ff22 	bl	800587c <move_window>
 8006a38:	4603      	mov	r3, r0
 8006a3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8006a3e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d11b      	bne.n	8006a7e <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6a1b      	ldr	r3, [r3, #32]
 8006a4a:	2220      	movs	r2, #32
 8006a4c:	2100      	movs	r1, #0
 8006a4e:	4618      	mov	r0, r3
 8006a50:	f7fe fd07 	bl	8005462 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6a18      	ldr	r0, [r3, #32]
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	3324      	adds	r3, #36	; 0x24
 8006a5c:	220b      	movs	r2, #11
 8006a5e:	4619      	mov	r1, r3
 8006a60:	f7fe fcde 	bl	8005420 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6a1b      	ldr	r3, [r3, #32]
 8006a6e:	330c      	adds	r3, #12
 8006a70:	f002 0218 	and.w	r2, r2, #24
 8006a74:	b2d2      	uxtb	r2, r2
 8006a76:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8006a78:	69fb      	ldr	r3, [r7, #28]
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8006a7e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	3730      	adds	r7, #48	; 0x30
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bd80      	pop	{r7, pc}
 8006a8a:	bf00      	nop
 8006a8c:	4ec4ec4f 	.word	0x4ec4ec4f

08006a90 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b08a      	sub	sp, #40	; 0x28
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
 8006a98:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	613b      	str	r3, [r7, #16]
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	691b      	ldr	r3, [r3, #16]
 8006aa6:	60fb      	str	r3, [r7, #12]
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	617b      	str	r3, [r7, #20]
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8006ab0:	69bb      	ldr	r3, [r7, #24]
 8006ab2:	1c5a      	adds	r2, r3, #1
 8006ab4:	61ba      	str	r2, [r7, #24]
 8006ab6:	693a      	ldr	r2, [r7, #16]
 8006ab8:	4413      	add	r3, r2
 8006aba:	781b      	ldrb	r3, [r3, #0]
 8006abc:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8006abe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006ac0:	2b1f      	cmp	r3, #31
 8006ac2:	d940      	bls.n	8006b46 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8006ac4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006ac6:	2b2f      	cmp	r3, #47	; 0x2f
 8006ac8:	d006      	beq.n	8006ad8 <create_name+0x48>
 8006aca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006acc:	2b5c      	cmp	r3, #92	; 0x5c
 8006ace:	d110      	bne.n	8006af2 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8006ad0:	e002      	b.n	8006ad8 <create_name+0x48>
 8006ad2:	69bb      	ldr	r3, [r7, #24]
 8006ad4:	3301      	adds	r3, #1
 8006ad6:	61bb      	str	r3, [r7, #24]
 8006ad8:	693a      	ldr	r2, [r7, #16]
 8006ada:	69bb      	ldr	r3, [r7, #24]
 8006adc:	4413      	add	r3, r2
 8006ade:	781b      	ldrb	r3, [r3, #0]
 8006ae0:	2b2f      	cmp	r3, #47	; 0x2f
 8006ae2:	d0f6      	beq.n	8006ad2 <create_name+0x42>
 8006ae4:	693a      	ldr	r2, [r7, #16]
 8006ae6:	69bb      	ldr	r3, [r7, #24]
 8006ae8:	4413      	add	r3, r2
 8006aea:	781b      	ldrb	r3, [r3, #0]
 8006aec:	2b5c      	cmp	r3, #92	; 0x5c
 8006aee:	d0f0      	beq.n	8006ad2 <create_name+0x42>
			break;
 8006af0:	e02a      	b.n	8006b48 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	2bfe      	cmp	r3, #254	; 0xfe
 8006af6:	d901      	bls.n	8006afc <create_name+0x6c>
 8006af8:	2306      	movs	r3, #6
 8006afa:	e177      	b.n	8006dec <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 8006afc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006afe:	b2db      	uxtb	r3, r3
 8006b00:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8006b02:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006b04:	2101      	movs	r1, #1
 8006b06:	4618      	mov	r0, r3
 8006b08:	f001 fe2a 	bl	8008760 <ff_convert>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8006b10:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d101      	bne.n	8006b1a <create_name+0x8a>
 8006b16:	2306      	movs	r3, #6
 8006b18:	e168      	b.n	8006dec <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8006b1a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006b1c:	2b7f      	cmp	r3, #127	; 0x7f
 8006b1e:	d809      	bhi.n	8006b34 <create_name+0xa4>
 8006b20:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006b22:	4619      	mov	r1, r3
 8006b24:	48b3      	ldr	r0, [pc, #716]	; (8006df4 <create_name+0x364>)
 8006b26:	f7fe fcde 	bl	80054e6 <chk_chr>
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d001      	beq.n	8006b34 <create_name+0xa4>
 8006b30:	2306      	movs	r3, #6
 8006b32:	e15b      	b.n	8006dec <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	1c5a      	adds	r2, r3, #1
 8006b38:	617a      	str	r2, [r7, #20]
 8006b3a:	005b      	lsls	r3, r3, #1
 8006b3c:	68fa      	ldr	r2, [r7, #12]
 8006b3e:	4413      	add	r3, r2
 8006b40:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006b42:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8006b44:	e7b4      	b.n	8006ab0 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8006b46:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8006b48:	693a      	ldr	r2, [r7, #16]
 8006b4a:	69bb      	ldr	r3, [r7, #24]
 8006b4c:	441a      	add	r2, r3
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8006b52:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006b54:	2b1f      	cmp	r3, #31
 8006b56:	d801      	bhi.n	8006b5c <create_name+0xcc>
 8006b58:	2304      	movs	r3, #4
 8006b5a:	e000      	b.n	8006b5e <create_name+0xce>
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8006b62:	e011      	b.n	8006b88 <create_name+0xf8>
		w = lfn[di - 1];
 8006b64:	697b      	ldr	r3, [r7, #20]
 8006b66:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006b6a:	3b01      	subs	r3, #1
 8006b6c:	005b      	lsls	r3, r3, #1
 8006b6e:	68fa      	ldr	r2, [r7, #12]
 8006b70:	4413      	add	r3, r2
 8006b72:	881b      	ldrh	r3, [r3, #0]
 8006b74:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8006b76:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006b78:	2b20      	cmp	r3, #32
 8006b7a:	d002      	beq.n	8006b82 <create_name+0xf2>
 8006b7c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006b7e:	2b2e      	cmp	r3, #46	; 0x2e
 8006b80:	d106      	bne.n	8006b90 <create_name+0x100>
		di--;
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	3b01      	subs	r3, #1
 8006b86:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8006b88:	697b      	ldr	r3, [r7, #20]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d1ea      	bne.n	8006b64 <create_name+0xd4>
 8006b8e:	e000      	b.n	8006b92 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8006b90:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	005b      	lsls	r3, r3, #1
 8006b96:	68fa      	ldr	r2, [r7, #12]
 8006b98:	4413      	add	r3, r2
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d101      	bne.n	8006ba8 <create_name+0x118>
 8006ba4:	2306      	movs	r3, #6
 8006ba6:	e121      	b.n	8006dec <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	3324      	adds	r3, #36	; 0x24
 8006bac:	220b      	movs	r2, #11
 8006bae:	2120      	movs	r1, #32
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	f7fe fc56 	bl	8005462 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	61bb      	str	r3, [r7, #24]
 8006bba:	e002      	b.n	8006bc2 <create_name+0x132>
 8006bbc:	69bb      	ldr	r3, [r7, #24]
 8006bbe:	3301      	adds	r3, #1
 8006bc0:	61bb      	str	r3, [r7, #24]
 8006bc2:	69bb      	ldr	r3, [r7, #24]
 8006bc4:	005b      	lsls	r3, r3, #1
 8006bc6:	68fa      	ldr	r2, [r7, #12]
 8006bc8:	4413      	add	r3, r2
 8006bca:	881b      	ldrh	r3, [r3, #0]
 8006bcc:	2b20      	cmp	r3, #32
 8006bce:	d0f5      	beq.n	8006bbc <create_name+0x12c>
 8006bd0:	69bb      	ldr	r3, [r7, #24]
 8006bd2:	005b      	lsls	r3, r3, #1
 8006bd4:	68fa      	ldr	r2, [r7, #12]
 8006bd6:	4413      	add	r3, r2
 8006bd8:	881b      	ldrh	r3, [r3, #0]
 8006bda:	2b2e      	cmp	r3, #46	; 0x2e
 8006bdc:	d0ee      	beq.n	8006bbc <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8006bde:	69bb      	ldr	r3, [r7, #24]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d009      	beq.n	8006bf8 <create_name+0x168>
 8006be4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006be8:	f043 0303 	orr.w	r3, r3, #3
 8006bec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8006bf0:	e002      	b.n	8006bf8 <create_name+0x168>
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	3b01      	subs	r3, #1
 8006bf6:	617b      	str	r3, [r7, #20]
 8006bf8:	697b      	ldr	r3, [r7, #20]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d009      	beq.n	8006c12 <create_name+0x182>
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006c04:	3b01      	subs	r3, #1
 8006c06:	005b      	lsls	r3, r3, #1
 8006c08:	68fa      	ldr	r2, [r7, #12]
 8006c0a:	4413      	add	r3, r2
 8006c0c:	881b      	ldrh	r3, [r3, #0]
 8006c0e:	2b2e      	cmp	r3, #46	; 0x2e
 8006c10:	d1ef      	bne.n	8006bf2 <create_name+0x162>

	i = b = 0; ni = 8;
 8006c12:	2300      	movs	r3, #0
 8006c14:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006c18:	2300      	movs	r3, #0
 8006c1a:	623b      	str	r3, [r7, #32]
 8006c1c:	2308      	movs	r3, #8
 8006c1e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8006c20:	69bb      	ldr	r3, [r7, #24]
 8006c22:	1c5a      	adds	r2, r3, #1
 8006c24:	61ba      	str	r2, [r7, #24]
 8006c26:	005b      	lsls	r3, r3, #1
 8006c28:	68fa      	ldr	r2, [r7, #12]
 8006c2a:	4413      	add	r3, r2
 8006c2c:	881b      	ldrh	r3, [r3, #0]
 8006c2e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8006c30:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	f000 8090 	beq.w	8006d58 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8006c38:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006c3a:	2b20      	cmp	r3, #32
 8006c3c:	d006      	beq.n	8006c4c <create_name+0x1bc>
 8006c3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006c40:	2b2e      	cmp	r3, #46	; 0x2e
 8006c42:	d10a      	bne.n	8006c5a <create_name+0x1ca>
 8006c44:	69ba      	ldr	r2, [r7, #24]
 8006c46:	697b      	ldr	r3, [r7, #20]
 8006c48:	429a      	cmp	r2, r3
 8006c4a:	d006      	beq.n	8006c5a <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8006c4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c50:	f043 0303 	orr.w	r3, r3, #3
 8006c54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006c58:	e07d      	b.n	8006d56 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8006c5a:	6a3a      	ldr	r2, [r7, #32]
 8006c5c:	69fb      	ldr	r3, [r7, #28]
 8006c5e:	429a      	cmp	r2, r3
 8006c60:	d203      	bcs.n	8006c6a <create_name+0x1da>
 8006c62:	69ba      	ldr	r2, [r7, #24]
 8006c64:	697b      	ldr	r3, [r7, #20]
 8006c66:	429a      	cmp	r2, r3
 8006c68:	d123      	bne.n	8006cb2 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8006c6a:	69fb      	ldr	r3, [r7, #28]
 8006c6c:	2b0b      	cmp	r3, #11
 8006c6e:	d106      	bne.n	8006c7e <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8006c70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c74:	f043 0303 	orr.w	r3, r3, #3
 8006c78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006c7c:	e06f      	b.n	8006d5e <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8006c7e:	69ba      	ldr	r2, [r7, #24]
 8006c80:	697b      	ldr	r3, [r7, #20]
 8006c82:	429a      	cmp	r2, r3
 8006c84:	d005      	beq.n	8006c92 <create_name+0x202>
 8006c86:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c8a:	f043 0303 	orr.w	r3, r3, #3
 8006c8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8006c92:	69ba      	ldr	r2, [r7, #24]
 8006c94:	697b      	ldr	r3, [r7, #20]
 8006c96:	429a      	cmp	r2, r3
 8006c98:	d860      	bhi.n	8006d5c <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	61bb      	str	r3, [r7, #24]
 8006c9e:	2308      	movs	r3, #8
 8006ca0:	623b      	str	r3, [r7, #32]
 8006ca2:	230b      	movs	r3, #11
 8006ca4:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8006ca6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006caa:	009b      	lsls	r3, r3, #2
 8006cac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006cb0:	e051      	b.n	8006d56 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8006cb2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006cb4:	2b7f      	cmp	r3, #127	; 0x7f
 8006cb6:	d914      	bls.n	8006ce2 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8006cb8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006cba:	2100      	movs	r1, #0
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	f001 fd4f 	bl	8008760 <ff_convert>
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8006cc6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d004      	beq.n	8006cd6 <create_name+0x246>
 8006ccc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006cce:	3b80      	subs	r3, #128	; 0x80
 8006cd0:	4a49      	ldr	r2, [pc, #292]	; (8006df8 <create_name+0x368>)
 8006cd2:	5cd3      	ldrb	r3, [r2, r3]
 8006cd4:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8006cd6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006cda:	f043 0302 	orr.w	r3, r3, #2
 8006cde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8006ce2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d007      	beq.n	8006cf8 <create_name+0x268>
 8006ce8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006cea:	4619      	mov	r1, r3
 8006cec:	4843      	ldr	r0, [pc, #268]	; (8006dfc <create_name+0x36c>)
 8006cee:	f7fe fbfa 	bl	80054e6 <chk_chr>
 8006cf2:	4603      	mov	r3, r0
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d008      	beq.n	8006d0a <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8006cf8:	235f      	movs	r3, #95	; 0x5f
 8006cfa:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006cfc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d00:	f043 0303 	orr.w	r3, r3, #3
 8006d04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006d08:	e01b      	b.n	8006d42 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8006d0a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006d0c:	2b40      	cmp	r3, #64	; 0x40
 8006d0e:	d909      	bls.n	8006d24 <create_name+0x294>
 8006d10:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006d12:	2b5a      	cmp	r3, #90	; 0x5a
 8006d14:	d806      	bhi.n	8006d24 <create_name+0x294>
					b |= 2;
 8006d16:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006d1a:	f043 0302 	orr.w	r3, r3, #2
 8006d1e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006d22:	e00e      	b.n	8006d42 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8006d24:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006d26:	2b60      	cmp	r3, #96	; 0x60
 8006d28:	d90b      	bls.n	8006d42 <create_name+0x2b2>
 8006d2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006d2c:	2b7a      	cmp	r3, #122	; 0x7a
 8006d2e:	d808      	bhi.n	8006d42 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8006d30:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006d34:	f043 0301 	orr.w	r3, r3, #1
 8006d38:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006d3c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006d3e:	3b20      	subs	r3, #32
 8006d40:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8006d42:	6a3b      	ldr	r3, [r7, #32]
 8006d44:	1c5a      	adds	r2, r3, #1
 8006d46:	623a      	str	r2, [r7, #32]
 8006d48:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006d4a:	b2d1      	uxtb	r1, r2
 8006d4c:	687a      	ldr	r2, [r7, #4]
 8006d4e:	4413      	add	r3, r2
 8006d50:	460a      	mov	r2, r1
 8006d52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8006d56:	e763      	b.n	8006c20 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8006d58:	bf00      	nop
 8006d5a:	e000      	b.n	8006d5e <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 8006d5c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006d64:	2be5      	cmp	r3, #229	; 0xe5
 8006d66:	d103      	bne.n	8006d70 <create_name+0x2e0>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2205      	movs	r2, #5
 8006d6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8006d70:	69fb      	ldr	r3, [r7, #28]
 8006d72:	2b08      	cmp	r3, #8
 8006d74:	d104      	bne.n	8006d80 <create_name+0x2f0>
 8006d76:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006d7a:	009b      	lsls	r3, r3, #2
 8006d7c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8006d80:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006d84:	f003 030c 	and.w	r3, r3, #12
 8006d88:	2b0c      	cmp	r3, #12
 8006d8a:	d005      	beq.n	8006d98 <create_name+0x308>
 8006d8c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006d90:	f003 0303 	and.w	r3, r3, #3
 8006d94:	2b03      	cmp	r3, #3
 8006d96:	d105      	bne.n	8006da4 <create_name+0x314>
 8006d98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d9c:	f043 0302 	orr.w	r3, r3, #2
 8006da0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8006da4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006da8:	f003 0302 	and.w	r3, r3, #2
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d117      	bne.n	8006de0 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8006db0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006db4:	f003 0303 	and.w	r3, r3, #3
 8006db8:	2b01      	cmp	r3, #1
 8006dba:	d105      	bne.n	8006dc8 <create_name+0x338>
 8006dbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006dc0:	f043 0310 	orr.w	r3, r3, #16
 8006dc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8006dc8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006dcc:	f003 030c 	and.w	r3, r3, #12
 8006dd0:	2b04      	cmp	r3, #4
 8006dd2:	d105      	bne.n	8006de0 <create_name+0x350>
 8006dd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006dd8:	f043 0308 	orr.w	r3, r3, #8
 8006ddc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006de6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8006dea:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8006dec:	4618      	mov	r0, r3
 8006dee:	3728      	adds	r7, #40	; 0x28
 8006df0:	46bd      	mov	sp, r7
 8006df2:	bd80      	pop	{r7, pc}
 8006df4:	0800a040 	.word	0x0800a040
 8006df8:	0800a0a0 	.word	0x0800a0a0
 8006dfc:	0800a04c 	.word	0x0800a04c

08006e00 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b086      	sub	sp, #24
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
 8006e08:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8006e0e:	693b      	ldr	r3, [r7, #16]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8006e14:	e002      	b.n	8006e1c <follow_path+0x1c>
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	3301      	adds	r3, #1
 8006e1a:	603b      	str	r3, [r7, #0]
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	781b      	ldrb	r3, [r3, #0]
 8006e20:	2b2f      	cmp	r3, #47	; 0x2f
 8006e22:	d0f8      	beq.n	8006e16 <follow_path+0x16>
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	781b      	ldrb	r3, [r3, #0]
 8006e28:	2b5c      	cmp	r3, #92	; 0x5c
 8006e2a:	d0f4      	beq.n	8006e16 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	781b      	ldrb	r3, [r3, #0]
 8006e36:	2b1f      	cmp	r3, #31
 8006e38:	d80a      	bhi.n	8006e50 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2280      	movs	r2, #128	; 0x80
 8006e3e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8006e42:	2100      	movs	r1, #0
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	f7ff f8fb 	bl	8006040 <dir_sdi>
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	75fb      	strb	r3, [r7, #23]
 8006e4e:	e048      	b.n	8006ee2 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006e50:	463b      	mov	r3, r7
 8006e52:	4619      	mov	r1, r3
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	f7ff fe1b 	bl	8006a90 <create_name>
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006e5e:	7dfb      	ldrb	r3, [r7, #23]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d139      	bne.n	8006ed8 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f7ff fc5a 	bl	800671e <dir_find>
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006e74:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8006e76:	7dfb      	ldrb	r3, [r7, #23]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d00a      	beq.n	8006e92 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006e7c:	7dfb      	ldrb	r3, [r7, #23]
 8006e7e:	2b04      	cmp	r3, #4
 8006e80:	d12c      	bne.n	8006edc <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006e82:	7afb      	ldrb	r3, [r7, #11]
 8006e84:	f003 0304 	and.w	r3, r3, #4
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d127      	bne.n	8006edc <follow_path+0xdc>
 8006e8c:	2305      	movs	r3, #5
 8006e8e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8006e90:	e024      	b.n	8006edc <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006e92:	7afb      	ldrb	r3, [r7, #11]
 8006e94:	f003 0304 	and.w	r3, r3, #4
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d121      	bne.n	8006ee0 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8006e9c:	693b      	ldr	r3, [r7, #16]
 8006e9e:	799b      	ldrb	r3, [r3, #6]
 8006ea0:	f003 0310 	and.w	r3, r3, #16
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d102      	bne.n	8006eae <follow_path+0xae>
				res = FR_NO_PATH; break;
 8006ea8:	2305      	movs	r3, #5
 8006eaa:	75fb      	strb	r3, [r7, #23]
 8006eac:	e019      	b.n	8006ee2 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	695b      	ldr	r3, [r3, #20]
 8006eb8:	68fa      	ldr	r2, [r7, #12]
 8006eba:	8992      	ldrh	r2, [r2, #12]
 8006ebc:	fbb3 f0f2 	udiv	r0, r3, r2
 8006ec0:	fb02 f200 	mul.w	r2, r2, r0
 8006ec4:	1a9b      	subs	r3, r3, r2
 8006ec6:	440b      	add	r3, r1
 8006ec8:	4619      	mov	r1, r3
 8006eca:	68f8      	ldr	r0, [r7, #12]
 8006ecc:	f7ff fa5e 	bl	800638c <ld_clust>
 8006ed0:	4602      	mov	r2, r0
 8006ed2:	693b      	ldr	r3, [r7, #16]
 8006ed4:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006ed6:	e7bb      	b.n	8006e50 <follow_path+0x50>
			if (res != FR_OK) break;
 8006ed8:	bf00      	nop
 8006eda:	e002      	b.n	8006ee2 <follow_path+0xe2>
				break;
 8006edc:	bf00      	nop
 8006ede:	e000      	b.n	8006ee2 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006ee0:	bf00      	nop
			}
		}
	}

	return res;
 8006ee2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	3718      	adds	r7, #24
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bd80      	pop	{r7, pc}

08006eec <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b087      	sub	sp, #28
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006ef4:	f04f 33ff 	mov.w	r3, #4294967295
 8006ef8:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d031      	beq.n	8006f66 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	617b      	str	r3, [r7, #20]
 8006f08:	e002      	b.n	8006f10 <get_ldnumber+0x24>
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	3301      	adds	r3, #1
 8006f0e:	617b      	str	r3, [r7, #20]
 8006f10:	697b      	ldr	r3, [r7, #20]
 8006f12:	781b      	ldrb	r3, [r3, #0]
 8006f14:	2b1f      	cmp	r3, #31
 8006f16:	d903      	bls.n	8006f20 <get_ldnumber+0x34>
 8006f18:	697b      	ldr	r3, [r7, #20]
 8006f1a:	781b      	ldrb	r3, [r3, #0]
 8006f1c:	2b3a      	cmp	r3, #58	; 0x3a
 8006f1e:	d1f4      	bne.n	8006f0a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	781b      	ldrb	r3, [r3, #0]
 8006f24:	2b3a      	cmp	r3, #58	; 0x3a
 8006f26:	d11c      	bne.n	8006f62 <get_ldnumber+0x76>
			tp = *path;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	1c5a      	adds	r2, r3, #1
 8006f32:	60fa      	str	r2, [r7, #12]
 8006f34:	781b      	ldrb	r3, [r3, #0]
 8006f36:	3b30      	subs	r3, #48	; 0x30
 8006f38:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	2b09      	cmp	r3, #9
 8006f3e:	d80e      	bhi.n	8006f5e <get_ldnumber+0x72>
 8006f40:	68fa      	ldr	r2, [r7, #12]
 8006f42:	697b      	ldr	r3, [r7, #20]
 8006f44:	429a      	cmp	r2, r3
 8006f46:	d10a      	bne.n	8006f5e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d107      	bne.n	8006f5e <get_ldnumber+0x72>
					vol = (int)i;
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	3301      	adds	r3, #1
 8006f56:	617b      	str	r3, [r7, #20]
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	697a      	ldr	r2, [r7, #20]
 8006f5c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8006f5e:	693b      	ldr	r3, [r7, #16]
 8006f60:	e002      	b.n	8006f68 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006f62:	2300      	movs	r3, #0
 8006f64:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8006f66:	693b      	ldr	r3, [r7, #16]
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	371c      	adds	r7, #28
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f72:	4770      	bx	lr

08006f74 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b082      	sub	sp, #8
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
 8006f7c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2200      	movs	r2, #0
 8006f82:	70da      	strb	r2, [r3, #3]
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	f04f 32ff 	mov.w	r2, #4294967295
 8006f8a:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8006f8c:	6839      	ldr	r1, [r7, #0]
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f7fe fc74 	bl	800587c <move_window>
 8006f94:	4603      	mov	r3, r0
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d001      	beq.n	8006f9e <check_fs+0x2a>
 8006f9a:	2304      	movs	r3, #4
 8006f9c:	e038      	b.n	8007010 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	3338      	adds	r3, #56	; 0x38
 8006fa2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	f7fe f9b8 	bl	800531c <ld_word>
 8006fac:	4603      	mov	r3, r0
 8006fae:	461a      	mov	r2, r3
 8006fb0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006fb4:	429a      	cmp	r2, r3
 8006fb6:	d001      	beq.n	8006fbc <check_fs+0x48>
 8006fb8:	2303      	movs	r3, #3
 8006fba:	e029      	b.n	8007010 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006fc2:	2be9      	cmp	r3, #233	; 0xe9
 8006fc4:	d009      	beq.n	8006fda <check_fs+0x66>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006fcc:	2beb      	cmp	r3, #235	; 0xeb
 8006fce:	d11e      	bne.n	800700e <check_fs+0x9a>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006fd6:	2b90      	cmp	r3, #144	; 0x90
 8006fd8:	d119      	bne.n	800700e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	3338      	adds	r3, #56	; 0x38
 8006fde:	3336      	adds	r3, #54	; 0x36
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	f7fe f9b3 	bl	800534c <ld_dword>
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006fec:	4a0a      	ldr	r2, [pc, #40]	; (8007018 <check_fs+0xa4>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d101      	bne.n	8006ff6 <check_fs+0x82>
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	e00c      	b.n	8007010 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	3338      	adds	r3, #56	; 0x38
 8006ffa:	3352      	adds	r3, #82	; 0x52
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	f7fe f9a5 	bl	800534c <ld_dword>
 8007002:	4603      	mov	r3, r0
 8007004:	4a05      	ldr	r2, [pc, #20]	; (800701c <check_fs+0xa8>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d101      	bne.n	800700e <check_fs+0x9a>
 800700a:	2300      	movs	r3, #0
 800700c:	e000      	b.n	8007010 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800700e:	2302      	movs	r3, #2
}
 8007010:	4618      	mov	r0, r3
 8007012:	3708      	adds	r7, #8
 8007014:	46bd      	mov	sp, r7
 8007016:	bd80      	pop	{r7, pc}
 8007018:	00544146 	.word	0x00544146
 800701c:	33544146 	.word	0x33544146

08007020 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b096      	sub	sp, #88	; 0x58
 8007024:	af00      	add	r7, sp, #0
 8007026:	60f8      	str	r0, [r7, #12]
 8007028:	60b9      	str	r1, [r7, #8]
 800702a:	4613      	mov	r3, r2
 800702c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	2200      	movs	r2, #0
 8007032:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007034:	68f8      	ldr	r0, [r7, #12]
 8007036:	f7ff ff59 	bl	8006eec <get_ldnumber>
 800703a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800703c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800703e:	2b00      	cmp	r3, #0
 8007040:	da01      	bge.n	8007046 <find_volume+0x26>
 8007042:	230b      	movs	r3, #11
 8007044:	e268      	b.n	8007518 <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007046:	4ab0      	ldr	r2, [pc, #704]	; (8007308 <find_volume+0x2e8>)
 8007048:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800704a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800704e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007052:	2b00      	cmp	r3, #0
 8007054:	d101      	bne.n	800705a <find_volume+0x3a>
 8007056:	230c      	movs	r3, #12
 8007058:	e25e      	b.n	8007518 <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800705e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007060:	79fb      	ldrb	r3, [r7, #7]
 8007062:	f023 0301 	bic.w	r3, r3, #1
 8007066:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800706a:	781b      	ldrb	r3, [r3, #0]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d01a      	beq.n	80070a6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8007070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007072:	785b      	ldrb	r3, [r3, #1]
 8007074:	4618      	mov	r0, r3
 8007076:	f7fe f8b3 	bl	80051e0 <disk_status>
 800707a:	4603      	mov	r3, r0
 800707c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007080:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007084:	f003 0301 	and.w	r3, r3, #1
 8007088:	2b00      	cmp	r3, #0
 800708a:	d10c      	bne.n	80070a6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800708c:	79fb      	ldrb	r3, [r7, #7]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d007      	beq.n	80070a2 <find_volume+0x82>
 8007092:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007096:	f003 0304 	and.w	r3, r3, #4
 800709a:	2b00      	cmp	r3, #0
 800709c:	d001      	beq.n	80070a2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800709e:	230a      	movs	r3, #10
 80070a0:	e23a      	b.n	8007518 <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 80070a2:	2300      	movs	r3, #0
 80070a4:	e238      	b.n	8007518 <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80070a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070a8:	2200      	movs	r2, #0
 80070aa:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80070ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070ae:	b2da      	uxtb	r2, r3
 80070b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070b2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80070b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070b6:	785b      	ldrb	r3, [r3, #1]
 80070b8:	4618      	mov	r0, r3
 80070ba:	f7fe f8ab 	bl	8005214 <disk_initialize>
 80070be:	4603      	mov	r3, r0
 80070c0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80070c4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80070c8:	f003 0301 	and.w	r3, r3, #1
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d001      	beq.n	80070d4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80070d0:	2303      	movs	r3, #3
 80070d2:	e221      	b.n	8007518 <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80070d4:	79fb      	ldrb	r3, [r7, #7]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d007      	beq.n	80070ea <find_volume+0xca>
 80070da:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80070de:	f003 0304 	and.w	r3, r3, #4
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d001      	beq.n	80070ea <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80070e6:	230a      	movs	r3, #10
 80070e8:	e216      	b.n	8007518 <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80070ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ec:	7858      	ldrb	r0, [r3, #1]
 80070ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070f0:	330c      	adds	r3, #12
 80070f2:	461a      	mov	r2, r3
 80070f4:	2102      	movs	r1, #2
 80070f6:	f7fe f8f3 	bl	80052e0 <disk_ioctl>
 80070fa:	4603      	mov	r3, r0
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d001      	beq.n	8007104 <find_volume+0xe4>
 8007100:	2301      	movs	r3, #1
 8007102:	e209      	b.n	8007518 <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8007104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007106:	899b      	ldrh	r3, [r3, #12]
 8007108:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800710c:	d80d      	bhi.n	800712a <find_volume+0x10a>
 800710e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007110:	899b      	ldrh	r3, [r3, #12]
 8007112:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007116:	d308      	bcc.n	800712a <find_volume+0x10a>
 8007118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800711a:	899b      	ldrh	r3, [r3, #12]
 800711c:	461a      	mov	r2, r3
 800711e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007120:	899b      	ldrh	r3, [r3, #12]
 8007122:	3b01      	subs	r3, #1
 8007124:	4013      	ands	r3, r2
 8007126:	2b00      	cmp	r3, #0
 8007128:	d001      	beq.n	800712e <find_volume+0x10e>
 800712a:	2301      	movs	r3, #1
 800712c:	e1f4      	b.n	8007518 <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800712e:	2300      	movs	r3, #0
 8007130:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8007132:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007134:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007136:	f7ff ff1d 	bl	8006f74 <check_fs>
 800713a:	4603      	mov	r3, r0
 800713c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8007140:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007144:	2b02      	cmp	r3, #2
 8007146:	d14b      	bne.n	80071e0 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007148:	2300      	movs	r3, #0
 800714a:	643b      	str	r3, [r7, #64]	; 0x40
 800714c:	e01f      	b.n	800718e <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800714e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007150:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8007154:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007156:	011b      	lsls	r3, r3, #4
 8007158:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800715c:	4413      	add	r3, r2
 800715e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007162:	3304      	adds	r3, #4
 8007164:	781b      	ldrb	r3, [r3, #0]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d006      	beq.n	8007178 <find_volume+0x158>
 800716a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800716c:	3308      	adds	r3, #8
 800716e:	4618      	mov	r0, r3
 8007170:	f7fe f8ec 	bl	800534c <ld_dword>
 8007174:	4602      	mov	r2, r0
 8007176:	e000      	b.n	800717a <find_volume+0x15a>
 8007178:	2200      	movs	r2, #0
 800717a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800717c:	009b      	lsls	r3, r3, #2
 800717e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8007182:	440b      	add	r3, r1
 8007184:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007188:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800718a:	3301      	adds	r3, #1
 800718c:	643b      	str	r3, [r7, #64]	; 0x40
 800718e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007190:	2b03      	cmp	r3, #3
 8007192:	d9dc      	bls.n	800714e <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8007194:	2300      	movs	r3, #0
 8007196:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8007198:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800719a:	2b00      	cmp	r3, #0
 800719c:	d002      	beq.n	80071a4 <find_volume+0x184>
 800719e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071a0:	3b01      	subs	r3, #1
 80071a2:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80071a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071a6:	009b      	lsls	r3, r3, #2
 80071a8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80071ac:	4413      	add	r3, r2
 80071ae:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80071b2:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80071b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d005      	beq.n	80071c6 <find_volume+0x1a6>
 80071ba:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80071bc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80071be:	f7ff fed9 	bl	8006f74 <check_fs>
 80071c2:	4603      	mov	r3, r0
 80071c4:	e000      	b.n	80071c8 <find_volume+0x1a8>
 80071c6:	2303      	movs	r3, #3
 80071c8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80071cc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80071d0:	2b01      	cmp	r3, #1
 80071d2:	d905      	bls.n	80071e0 <find_volume+0x1c0>
 80071d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071d6:	3301      	adds	r3, #1
 80071d8:	643b      	str	r3, [r7, #64]	; 0x40
 80071da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071dc:	2b03      	cmp	r3, #3
 80071de:	d9e1      	bls.n	80071a4 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80071e0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80071e4:	2b04      	cmp	r3, #4
 80071e6:	d101      	bne.n	80071ec <find_volume+0x1cc>
 80071e8:	2301      	movs	r3, #1
 80071ea:	e195      	b.n	8007518 <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80071ec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80071f0:	2b01      	cmp	r3, #1
 80071f2:	d901      	bls.n	80071f8 <find_volume+0x1d8>
 80071f4:	230d      	movs	r3, #13
 80071f6:	e18f      	b.n	8007518 <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80071f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071fa:	3338      	adds	r3, #56	; 0x38
 80071fc:	330b      	adds	r3, #11
 80071fe:	4618      	mov	r0, r3
 8007200:	f7fe f88c 	bl	800531c <ld_word>
 8007204:	4603      	mov	r3, r0
 8007206:	461a      	mov	r2, r3
 8007208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800720a:	899b      	ldrh	r3, [r3, #12]
 800720c:	429a      	cmp	r2, r3
 800720e:	d001      	beq.n	8007214 <find_volume+0x1f4>
 8007210:	230d      	movs	r3, #13
 8007212:	e181      	b.n	8007518 <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8007214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007216:	3338      	adds	r3, #56	; 0x38
 8007218:	3316      	adds	r3, #22
 800721a:	4618      	mov	r0, r3
 800721c:	f7fe f87e 	bl	800531c <ld_word>
 8007220:	4603      	mov	r3, r0
 8007222:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8007224:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007226:	2b00      	cmp	r3, #0
 8007228:	d106      	bne.n	8007238 <find_volume+0x218>
 800722a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800722c:	3338      	adds	r3, #56	; 0x38
 800722e:	3324      	adds	r3, #36	; 0x24
 8007230:	4618      	mov	r0, r3
 8007232:	f7fe f88b 	bl	800534c <ld_dword>
 8007236:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8007238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800723a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800723c:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800723e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007240:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8007244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007246:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800724a:	789b      	ldrb	r3, [r3, #2]
 800724c:	2b01      	cmp	r3, #1
 800724e:	d005      	beq.n	800725c <find_volume+0x23c>
 8007250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007252:	789b      	ldrb	r3, [r3, #2]
 8007254:	2b02      	cmp	r3, #2
 8007256:	d001      	beq.n	800725c <find_volume+0x23c>
 8007258:	230d      	movs	r3, #13
 800725a:	e15d      	b.n	8007518 <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800725c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800725e:	789b      	ldrb	r3, [r3, #2]
 8007260:	461a      	mov	r2, r3
 8007262:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007264:	fb02 f303 	mul.w	r3, r2, r3
 8007268:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800726a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800726c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007270:	b29a      	uxth	r2, r3
 8007272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007274:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8007276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007278:	895b      	ldrh	r3, [r3, #10]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d008      	beq.n	8007290 <find_volume+0x270>
 800727e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007280:	895b      	ldrh	r3, [r3, #10]
 8007282:	461a      	mov	r2, r3
 8007284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007286:	895b      	ldrh	r3, [r3, #10]
 8007288:	3b01      	subs	r3, #1
 800728a:	4013      	ands	r3, r2
 800728c:	2b00      	cmp	r3, #0
 800728e:	d001      	beq.n	8007294 <find_volume+0x274>
 8007290:	230d      	movs	r3, #13
 8007292:	e141      	b.n	8007518 <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8007294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007296:	3338      	adds	r3, #56	; 0x38
 8007298:	3311      	adds	r3, #17
 800729a:	4618      	mov	r0, r3
 800729c:	f7fe f83e 	bl	800531c <ld_word>
 80072a0:	4603      	mov	r3, r0
 80072a2:	461a      	mov	r2, r3
 80072a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072a6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80072a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072aa:	891b      	ldrh	r3, [r3, #8]
 80072ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80072ae:	8992      	ldrh	r2, [r2, #12]
 80072b0:	0952      	lsrs	r2, r2, #5
 80072b2:	b292      	uxth	r2, r2
 80072b4:	fbb3 f1f2 	udiv	r1, r3, r2
 80072b8:	fb02 f201 	mul.w	r2, r2, r1
 80072bc:	1a9b      	subs	r3, r3, r2
 80072be:	b29b      	uxth	r3, r3
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d001      	beq.n	80072c8 <find_volume+0x2a8>
 80072c4:	230d      	movs	r3, #13
 80072c6:	e127      	b.n	8007518 <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80072c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072ca:	3338      	adds	r3, #56	; 0x38
 80072cc:	3313      	adds	r3, #19
 80072ce:	4618      	mov	r0, r3
 80072d0:	f7fe f824 	bl	800531c <ld_word>
 80072d4:	4603      	mov	r3, r0
 80072d6:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80072d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d106      	bne.n	80072ec <find_volume+0x2cc>
 80072de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072e0:	3338      	adds	r3, #56	; 0x38
 80072e2:	3320      	adds	r3, #32
 80072e4:	4618      	mov	r0, r3
 80072e6:	f7fe f831 	bl	800534c <ld_dword>
 80072ea:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80072ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072ee:	3338      	adds	r3, #56	; 0x38
 80072f0:	330e      	adds	r3, #14
 80072f2:	4618      	mov	r0, r3
 80072f4:	f7fe f812 	bl	800531c <ld_word>
 80072f8:	4603      	mov	r3, r0
 80072fa:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80072fc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d104      	bne.n	800730c <find_volume+0x2ec>
 8007302:	230d      	movs	r3, #13
 8007304:	e108      	b.n	8007518 <find_volume+0x4f8>
 8007306:	bf00      	nop
 8007308:	200000b0 	.word	0x200000b0

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800730c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800730e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007310:	4413      	add	r3, r2
 8007312:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007314:	8911      	ldrh	r1, [r2, #8]
 8007316:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007318:	8992      	ldrh	r2, [r2, #12]
 800731a:	0952      	lsrs	r2, r2, #5
 800731c:	b292      	uxth	r2, r2
 800731e:	fbb1 f2f2 	udiv	r2, r1, r2
 8007322:	b292      	uxth	r2, r2
 8007324:	4413      	add	r3, r2
 8007326:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8007328:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800732a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800732c:	429a      	cmp	r2, r3
 800732e:	d201      	bcs.n	8007334 <find_volume+0x314>
 8007330:	230d      	movs	r3, #13
 8007332:	e0f1      	b.n	8007518 <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007334:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007338:	1ad3      	subs	r3, r2, r3
 800733a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800733c:	8952      	ldrh	r2, [r2, #10]
 800733e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007342:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007346:	2b00      	cmp	r3, #0
 8007348:	d101      	bne.n	800734e <find_volume+0x32e>
 800734a:	230d      	movs	r3, #13
 800734c:	e0e4      	b.n	8007518 <find_volume+0x4f8>
		fmt = FS_FAT32;
 800734e:	2303      	movs	r3, #3
 8007350:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007356:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800735a:	4293      	cmp	r3, r2
 800735c:	d802      	bhi.n	8007364 <find_volume+0x344>
 800735e:	2302      	movs	r3, #2
 8007360:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007366:	f640 72f5 	movw	r2, #4085	; 0xff5
 800736a:	4293      	cmp	r3, r2
 800736c:	d802      	bhi.n	8007374 <find_volume+0x354>
 800736e:	2301      	movs	r3, #1
 8007370:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8007374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007376:	1c9a      	adds	r2, r3, #2
 8007378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800737a:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800737c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800737e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007380:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007382:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007384:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007386:	441a      	add	r2, r3
 8007388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800738a:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800738c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800738e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007390:	441a      	add	r2, r3
 8007392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007394:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8007396:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800739a:	2b03      	cmp	r3, #3
 800739c:	d11e      	bne.n	80073dc <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800739e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073a0:	3338      	adds	r3, #56	; 0x38
 80073a2:	332a      	adds	r3, #42	; 0x2a
 80073a4:	4618      	mov	r0, r3
 80073a6:	f7fd ffb9 	bl	800531c <ld_word>
 80073aa:	4603      	mov	r3, r0
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d001      	beq.n	80073b4 <find_volume+0x394>
 80073b0:	230d      	movs	r3, #13
 80073b2:	e0b1      	b.n	8007518 <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80073b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073b6:	891b      	ldrh	r3, [r3, #8]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d001      	beq.n	80073c0 <find_volume+0x3a0>
 80073bc:	230d      	movs	r3, #13
 80073be:	e0ab      	b.n	8007518 <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80073c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073c2:	3338      	adds	r3, #56	; 0x38
 80073c4:	332c      	adds	r3, #44	; 0x2c
 80073c6:	4618      	mov	r0, r3
 80073c8:	f7fd ffc0 	bl	800534c <ld_dword>
 80073cc:	4602      	mov	r2, r0
 80073ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073d0:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80073d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073d4:	69db      	ldr	r3, [r3, #28]
 80073d6:	009b      	lsls	r3, r3, #2
 80073d8:	647b      	str	r3, [r7, #68]	; 0x44
 80073da:	e01f      	b.n	800741c <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80073dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073de:	891b      	ldrh	r3, [r3, #8]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d101      	bne.n	80073e8 <find_volume+0x3c8>
 80073e4:	230d      	movs	r3, #13
 80073e6:	e097      	b.n	8007518 <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80073e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80073ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073ee:	441a      	add	r2, r3
 80073f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073f2:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80073f4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80073f8:	2b02      	cmp	r3, #2
 80073fa:	d103      	bne.n	8007404 <find_volume+0x3e4>
 80073fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073fe:	69db      	ldr	r3, [r3, #28]
 8007400:	005b      	lsls	r3, r3, #1
 8007402:	e00a      	b.n	800741a <find_volume+0x3fa>
 8007404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007406:	69da      	ldr	r2, [r3, #28]
 8007408:	4613      	mov	r3, r2
 800740a:	005b      	lsls	r3, r3, #1
 800740c:	4413      	add	r3, r2
 800740e:	085a      	lsrs	r2, r3, #1
 8007410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007412:	69db      	ldr	r3, [r3, #28]
 8007414:	f003 0301 	and.w	r3, r3, #1
 8007418:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800741a:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800741c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800741e:	6a1a      	ldr	r2, [r3, #32]
 8007420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007422:	899b      	ldrh	r3, [r3, #12]
 8007424:	4619      	mov	r1, r3
 8007426:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007428:	440b      	add	r3, r1
 800742a:	3b01      	subs	r3, #1
 800742c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800742e:	8989      	ldrh	r1, [r1, #12]
 8007430:	fbb3 f3f1 	udiv	r3, r3, r1
 8007434:	429a      	cmp	r2, r3
 8007436:	d201      	bcs.n	800743c <find_volume+0x41c>
 8007438:	230d      	movs	r3, #13
 800743a:	e06d      	b.n	8007518 <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800743c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800743e:	f04f 32ff 	mov.w	r2, #4294967295
 8007442:	619a      	str	r2, [r3, #24]
 8007444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007446:	699a      	ldr	r2, [r3, #24]
 8007448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800744a:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800744c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800744e:	2280      	movs	r2, #128	; 0x80
 8007450:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8007452:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007456:	2b03      	cmp	r3, #3
 8007458:	d149      	bne.n	80074ee <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800745a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800745c:	3338      	adds	r3, #56	; 0x38
 800745e:	3330      	adds	r3, #48	; 0x30
 8007460:	4618      	mov	r0, r3
 8007462:	f7fd ff5b 	bl	800531c <ld_word>
 8007466:	4603      	mov	r3, r0
 8007468:	2b01      	cmp	r3, #1
 800746a:	d140      	bne.n	80074ee <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 800746c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800746e:	3301      	adds	r3, #1
 8007470:	4619      	mov	r1, r3
 8007472:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007474:	f7fe fa02 	bl	800587c <move_window>
 8007478:	4603      	mov	r3, r0
 800747a:	2b00      	cmp	r3, #0
 800747c:	d137      	bne.n	80074ee <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 800747e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007480:	2200      	movs	r2, #0
 8007482:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007486:	3338      	adds	r3, #56	; 0x38
 8007488:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800748c:	4618      	mov	r0, r3
 800748e:	f7fd ff45 	bl	800531c <ld_word>
 8007492:	4603      	mov	r3, r0
 8007494:	461a      	mov	r2, r3
 8007496:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800749a:	429a      	cmp	r2, r3
 800749c:	d127      	bne.n	80074ee <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800749e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074a0:	3338      	adds	r3, #56	; 0x38
 80074a2:	4618      	mov	r0, r3
 80074a4:	f7fd ff52 	bl	800534c <ld_dword>
 80074a8:	4603      	mov	r3, r0
 80074aa:	4a1d      	ldr	r2, [pc, #116]	; (8007520 <find_volume+0x500>)
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d11e      	bne.n	80074ee <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80074b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074b2:	3338      	adds	r3, #56	; 0x38
 80074b4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80074b8:	4618      	mov	r0, r3
 80074ba:	f7fd ff47 	bl	800534c <ld_dword>
 80074be:	4603      	mov	r3, r0
 80074c0:	4a18      	ldr	r2, [pc, #96]	; (8007524 <find_volume+0x504>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d113      	bne.n	80074ee <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80074c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074c8:	3338      	adds	r3, #56	; 0x38
 80074ca:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80074ce:	4618      	mov	r0, r3
 80074d0:	f7fd ff3c 	bl	800534c <ld_dword>
 80074d4:	4602      	mov	r2, r0
 80074d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074d8:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80074da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074dc:	3338      	adds	r3, #56	; 0x38
 80074de:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80074e2:	4618      	mov	r0, r3
 80074e4:	f7fd ff32 	bl	800534c <ld_dword>
 80074e8:	4602      	mov	r2, r0
 80074ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074ec:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80074ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074f0:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80074f4:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80074f6:	4b0c      	ldr	r3, [pc, #48]	; (8007528 <find_volume+0x508>)
 80074f8:	881b      	ldrh	r3, [r3, #0]
 80074fa:	3301      	adds	r3, #1
 80074fc:	b29a      	uxth	r2, r3
 80074fe:	4b0a      	ldr	r3, [pc, #40]	; (8007528 <find_volume+0x508>)
 8007500:	801a      	strh	r2, [r3, #0]
 8007502:	4b09      	ldr	r3, [pc, #36]	; (8007528 <find_volume+0x508>)
 8007504:	881a      	ldrh	r2, [r3, #0]
 8007506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007508:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800750a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800750c:	4a07      	ldr	r2, [pc, #28]	; (800752c <find_volume+0x50c>)
 800750e:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8007510:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007512:	f7fe f94b 	bl	80057ac <clear_lock>
#endif
	return FR_OK;
 8007516:	2300      	movs	r3, #0
}
 8007518:	4618      	mov	r0, r3
 800751a:	3758      	adds	r7, #88	; 0x58
 800751c:	46bd      	mov	sp, r7
 800751e:	bd80      	pop	{r7, pc}
 8007520:	41615252 	.word	0x41615252
 8007524:	61417272 	.word	0x61417272
 8007528:	200000b4 	.word	0x200000b4
 800752c:	200000d8 	.word	0x200000d8

08007530 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b084      	sub	sp, #16
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
 8007538:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800753a:	2309      	movs	r3, #9
 800753c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d01c      	beq.n	800757e <validate+0x4e>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d018      	beq.n	800757e <validate+0x4e>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	781b      	ldrb	r3, [r3, #0]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d013      	beq.n	800757e <validate+0x4e>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	889a      	ldrh	r2, [r3, #4]
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	88db      	ldrh	r3, [r3, #6]
 8007560:	429a      	cmp	r2, r3
 8007562:	d10c      	bne.n	800757e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	785b      	ldrb	r3, [r3, #1]
 800756a:	4618      	mov	r0, r3
 800756c:	f7fd fe38 	bl	80051e0 <disk_status>
 8007570:	4603      	mov	r3, r0
 8007572:	f003 0301 	and.w	r3, r3, #1
 8007576:	2b00      	cmp	r3, #0
 8007578:	d101      	bne.n	800757e <validate+0x4e>
			res = FR_OK;
 800757a:	2300      	movs	r3, #0
 800757c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800757e:	7bfb      	ldrb	r3, [r7, #15]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d102      	bne.n	800758a <validate+0x5a>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	e000      	b.n	800758c <validate+0x5c>
 800758a:	2300      	movs	r3, #0
 800758c:	683a      	ldr	r2, [r7, #0]
 800758e:	6013      	str	r3, [r2, #0]
	return res;
 8007590:	7bfb      	ldrb	r3, [r7, #15]
}
 8007592:	4618      	mov	r0, r3
 8007594:	3710      	adds	r7, #16
 8007596:	46bd      	mov	sp, r7
 8007598:	bd80      	pop	{r7, pc}
	...

0800759c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b088      	sub	sp, #32
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	60f8      	str	r0, [r7, #12]
 80075a4:	60b9      	str	r1, [r7, #8]
 80075a6:	4613      	mov	r3, r2
 80075a8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80075ae:	f107 0310 	add.w	r3, r7, #16
 80075b2:	4618      	mov	r0, r3
 80075b4:	f7ff fc9a 	bl	8006eec <get_ldnumber>
 80075b8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80075ba:	69fb      	ldr	r3, [r7, #28]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	da01      	bge.n	80075c4 <f_mount+0x28>
 80075c0:	230b      	movs	r3, #11
 80075c2:	e02b      	b.n	800761c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80075c4:	4a17      	ldr	r2, [pc, #92]	; (8007624 <f_mount+0x88>)
 80075c6:	69fb      	ldr	r3, [r7, #28]
 80075c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80075cc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80075ce:	69bb      	ldr	r3, [r7, #24]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d005      	beq.n	80075e0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80075d4:	69b8      	ldr	r0, [r7, #24]
 80075d6:	f7fe f8e9 	bl	80057ac <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80075da:	69bb      	ldr	r3, [r7, #24]
 80075dc:	2200      	movs	r2, #0
 80075de:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d002      	beq.n	80075ec <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	2200      	movs	r2, #0
 80075ea:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80075ec:	68fa      	ldr	r2, [r7, #12]
 80075ee:	490d      	ldr	r1, [pc, #52]	; (8007624 <f_mount+0x88>)
 80075f0:	69fb      	ldr	r3, [r7, #28]
 80075f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d002      	beq.n	8007602 <f_mount+0x66>
 80075fc:	79fb      	ldrb	r3, [r7, #7]
 80075fe:	2b01      	cmp	r3, #1
 8007600:	d001      	beq.n	8007606 <f_mount+0x6a>
 8007602:	2300      	movs	r3, #0
 8007604:	e00a      	b.n	800761c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8007606:	f107 010c 	add.w	r1, r7, #12
 800760a:	f107 0308 	add.w	r3, r7, #8
 800760e:	2200      	movs	r2, #0
 8007610:	4618      	mov	r0, r3
 8007612:	f7ff fd05 	bl	8007020 <find_volume>
 8007616:	4603      	mov	r3, r0
 8007618:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800761a:	7dfb      	ldrb	r3, [r7, #23]
}
 800761c:	4618      	mov	r0, r3
 800761e:	3720      	adds	r7, #32
 8007620:	46bd      	mov	sp, r7
 8007622:	bd80      	pop	{r7, pc}
 8007624:	200000b0 	.word	0x200000b0

08007628 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b09a      	sub	sp, #104	; 0x68
 800762c:	af00      	add	r7, sp, #0
 800762e:	60f8      	str	r0, [r7, #12]
 8007630:	60b9      	str	r1, [r7, #8]
 8007632:	4613      	mov	r3, r2
 8007634:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d101      	bne.n	8007640 <f_open+0x18>
 800763c:	2309      	movs	r3, #9
 800763e:	e1bb      	b.n	80079b8 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8007640:	79fb      	ldrb	r3, [r7, #7]
 8007642:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007646:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8007648:	79fa      	ldrb	r2, [r7, #7]
 800764a:	f107 0114 	add.w	r1, r7, #20
 800764e:	f107 0308 	add.w	r3, r7, #8
 8007652:	4618      	mov	r0, r3
 8007654:	f7ff fce4 	bl	8007020 <find_volume>
 8007658:	4603      	mov	r3, r0
 800765a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800765e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007662:	2b00      	cmp	r3, #0
 8007664:	f040 819f 	bne.w	80079a6 <f_open+0x37e>
		dj.obj.fs = fs;
 8007668:	697b      	ldr	r3, [r7, #20]
 800766a:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800766c:	68ba      	ldr	r2, [r7, #8]
 800766e:	f107 0318 	add.w	r3, r7, #24
 8007672:	4611      	mov	r1, r2
 8007674:	4618      	mov	r0, r3
 8007676:	f7ff fbc3 	bl	8006e00 <follow_path>
 800767a:	4603      	mov	r3, r0
 800767c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8007680:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007684:	2b00      	cmp	r3, #0
 8007686:	d11a      	bne.n	80076be <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8007688:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800768c:	b25b      	sxtb	r3, r3
 800768e:	2b00      	cmp	r3, #0
 8007690:	da03      	bge.n	800769a <f_open+0x72>
				res = FR_INVALID_NAME;
 8007692:	2306      	movs	r3, #6
 8007694:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8007698:	e011      	b.n	80076be <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800769a:	79fb      	ldrb	r3, [r7, #7]
 800769c:	f023 0301 	bic.w	r3, r3, #1
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	bf14      	ite	ne
 80076a4:	2301      	movne	r3, #1
 80076a6:	2300      	moveq	r3, #0
 80076a8:	b2db      	uxtb	r3, r3
 80076aa:	461a      	mov	r2, r3
 80076ac:	f107 0318 	add.w	r3, r7, #24
 80076b0:	4611      	mov	r1, r2
 80076b2:	4618      	mov	r0, r3
 80076b4:	f7fd ff32 	bl	800551c <chk_lock>
 80076b8:	4603      	mov	r3, r0
 80076ba:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80076be:	79fb      	ldrb	r3, [r7, #7]
 80076c0:	f003 031c 	and.w	r3, r3, #28
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d07f      	beq.n	80077c8 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80076c8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d017      	beq.n	8007700 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80076d0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80076d4:	2b04      	cmp	r3, #4
 80076d6:	d10e      	bne.n	80076f6 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80076d8:	f7fd ff7c 	bl	80055d4 <enq_lock>
 80076dc:	4603      	mov	r3, r0
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d006      	beq.n	80076f0 <f_open+0xc8>
 80076e2:	f107 0318 	add.w	r3, r7, #24
 80076e6:	4618      	mov	r0, r3
 80076e8:	f7ff f8da 	bl	80068a0 <dir_register>
 80076ec:	4603      	mov	r3, r0
 80076ee:	e000      	b.n	80076f2 <f_open+0xca>
 80076f0:	2312      	movs	r3, #18
 80076f2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80076f6:	79fb      	ldrb	r3, [r7, #7]
 80076f8:	f043 0308 	orr.w	r3, r3, #8
 80076fc:	71fb      	strb	r3, [r7, #7]
 80076fe:	e010      	b.n	8007722 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007700:	7fbb      	ldrb	r3, [r7, #30]
 8007702:	f003 0311 	and.w	r3, r3, #17
 8007706:	2b00      	cmp	r3, #0
 8007708:	d003      	beq.n	8007712 <f_open+0xea>
					res = FR_DENIED;
 800770a:	2307      	movs	r3, #7
 800770c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8007710:	e007      	b.n	8007722 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8007712:	79fb      	ldrb	r3, [r7, #7]
 8007714:	f003 0304 	and.w	r3, r3, #4
 8007718:	2b00      	cmp	r3, #0
 800771a:	d002      	beq.n	8007722 <f_open+0xfa>
 800771c:	2308      	movs	r3, #8
 800771e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007722:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007726:	2b00      	cmp	r3, #0
 8007728:	d168      	bne.n	80077fc <f_open+0x1d4>
 800772a:	79fb      	ldrb	r3, [r7, #7]
 800772c:	f003 0308 	and.w	r3, r3, #8
 8007730:	2b00      	cmp	r3, #0
 8007732:	d063      	beq.n	80077fc <f_open+0x1d4>
				dw = GET_FATTIME();
 8007734:	f7fd fcf6 	bl	8005124 <get_fattime>
 8007738:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800773a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800773c:	330e      	adds	r3, #14
 800773e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007740:	4618      	mov	r0, r3
 8007742:	f7fd fe41 	bl	80053c8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8007746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007748:	3316      	adds	r3, #22
 800774a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800774c:	4618      	mov	r0, r3
 800774e:	f7fd fe3b 	bl	80053c8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8007752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007754:	330b      	adds	r3, #11
 8007756:	2220      	movs	r2, #32
 8007758:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800775a:	697b      	ldr	r3, [r7, #20]
 800775c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800775e:	4611      	mov	r1, r2
 8007760:	4618      	mov	r0, r3
 8007762:	f7fe fe13 	bl	800638c <ld_clust>
 8007766:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8007768:	697b      	ldr	r3, [r7, #20]
 800776a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800776c:	2200      	movs	r2, #0
 800776e:	4618      	mov	r0, r3
 8007770:	f7fe fe2b 	bl	80063ca <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8007774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007776:	331c      	adds	r3, #28
 8007778:	2100      	movs	r1, #0
 800777a:	4618      	mov	r0, r3
 800777c:	f7fd fe24 	bl	80053c8 <st_dword>
					fs->wflag = 1;
 8007780:	697b      	ldr	r3, [r7, #20]
 8007782:	2201      	movs	r2, #1
 8007784:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8007786:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007788:	2b00      	cmp	r3, #0
 800778a:	d037      	beq.n	80077fc <f_open+0x1d4>
						dw = fs->winsect;
 800778c:	697b      	ldr	r3, [r7, #20]
 800778e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007790:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8007792:	f107 0318 	add.w	r3, r7, #24
 8007796:	2200      	movs	r2, #0
 8007798:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800779a:	4618      	mov	r0, r3
 800779c:	f7fe fb1b 	bl	8005dd6 <remove_chain>
 80077a0:	4603      	mov	r3, r0
 80077a2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 80077a6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d126      	bne.n	80077fc <f_open+0x1d4>
							res = move_window(fs, dw);
 80077ae:	697b      	ldr	r3, [r7, #20]
 80077b0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80077b2:	4618      	mov	r0, r3
 80077b4:	f7fe f862 	bl	800587c <move_window>
 80077b8:	4603      	mov	r3, r0
 80077ba:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80077c2:	3a01      	subs	r2, #1
 80077c4:	615a      	str	r2, [r3, #20]
 80077c6:	e019      	b.n	80077fc <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80077c8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d115      	bne.n	80077fc <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80077d0:	7fbb      	ldrb	r3, [r7, #30]
 80077d2:	f003 0310 	and.w	r3, r3, #16
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d003      	beq.n	80077e2 <f_open+0x1ba>
					res = FR_NO_FILE;
 80077da:	2304      	movs	r3, #4
 80077dc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80077e0:	e00c      	b.n	80077fc <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80077e2:	79fb      	ldrb	r3, [r7, #7]
 80077e4:	f003 0302 	and.w	r3, r3, #2
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d007      	beq.n	80077fc <f_open+0x1d4>
 80077ec:	7fbb      	ldrb	r3, [r7, #30]
 80077ee:	f003 0301 	and.w	r3, r3, #1
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d002      	beq.n	80077fc <f_open+0x1d4>
						res = FR_DENIED;
 80077f6:	2307      	movs	r3, #7
 80077f8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 80077fc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007800:	2b00      	cmp	r3, #0
 8007802:	d128      	bne.n	8007856 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8007804:	79fb      	ldrb	r3, [r7, #7]
 8007806:	f003 0308 	and.w	r3, r3, #8
 800780a:	2b00      	cmp	r3, #0
 800780c:	d003      	beq.n	8007816 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800780e:	79fb      	ldrb	r3, [r7, #7]
 8007810:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007814:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8007816:	697b      	ldr	r3, [r7, #20]
 8007818:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800781e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007824:	79fb      	ldrb	r3, [r7, #7]
 8007826:	f023 0301 	bic.w	r3, r3, #1
 800782a:	2b00      	cmp	r3, #0
 800782c:	bf14      	ite	ne
 800782e:	2301      	movne	r3, #1
 8007830:	2300      	moveq	r3, #0
 8007832:	b2db      	uxtb	r3, r3
 8007834:	461a      	mov	r2, r3
 8007836:	f107 0318 	add.w	r3, r7, #24
 800783a:	4611      	mov	r1, r2
 800783c:	4618      	mov	r0, r3
 800783e:	f7fd feeb 	bl	8005618 <inc_lock>
 8007842:	4602      	mov	r2, r0
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	691b      	ldr	r3, [r3, #16]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d102      	bne.n	8007856 <f_open+0x22e>
 8007850:	2302      	movs	r3, #2
 8007852:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8007856:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800785a:	2b00      	cmp	r3, #0
 800785c:	f040 80a3 	bne.w	80079a6 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8007860:	697b      	ldr	r3, [r7, #20]
 8007862:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007864:	4611      	mov	r1, r2
 8007866:	4618      	mov	r0, r3
 8007868:	f7fe fd90 	bl	800638c <ld_clust>
 800786c:	4602      	mov	r2, r0
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8007872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007874:	331c      	adds	r3, #28
 8007876:	4618      	mov	r0, r3
 8007878:	f7fd fd68 	bl	800534c <ld_dword>
 800787c:	4602      	mov	r2, r0
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	2200      	movs	r2, #0
 8007886:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8007888:	697a      	ldr	r2, [r7, #20]
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800788e:	697b      	ldr	r3, [r7, #20]
 8007890:	88da      	ldrh	r2, [r3, #6]
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	79fa      	ldrb	r2, [r7, #7]
 800789a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	2200      	movs	r2, #0
 80078a0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	2200      	movs	r2, #0
 80078a6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	2200      	movs	r2, #0
 80078ac:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	3330      	adds	r3, #48	; 0x30
 80078b2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80078b6:	2100      	movs	r1, #0
 80078b8:	4618      	mov	r0, r3
 80078ba:	f7fd fdd2 	bl	8005462 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80078be:	79fb      	ldrb	r3, [r7, #7]
 80078c0:	f003 0320 	and.w	r3, r3, #32
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d06e      	beq.n	80079a6 <f_open+0x37e>
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	68db      	ldr	r3, [r3, #12]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d06a      	beq.n	80079a6 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	68da      	ldr	r2, [r3, #12]
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80078d8:	697b      	ldr	r3, [r7, #20]
 80078da:	895b      	ldrh	r3, [r3, #10]
 80078dc:	461a      	mov	r2, r3
 80078de:	697b      	ldr	r3, [r7, #20]
 80078e0:	899b      	ldrh	r3, [r3, #12]
 80078e2:	fb03 f302 	mul.w	r3, r3, r2
 80078e6:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	689b      	ldr	r3, [r3, #8]
 80078ec:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	68db      	ldr	r3, [r3, #12]
 80078f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80078f4:	e016      	b.n	8007924 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80078fa:	4618      	mov	r0, r3
 80078fc:	f7fe f87b 	bl	80059f6 <get_fat>
 8007900:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8007902:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007904:	2b01      	cmp	r3, #1
 8007906:	d802      	bhi.n	800790e <f_open+0x2e6>
 8007908:	2302      	movs	r3, #2
 800790a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800790e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007914:	d102      	bne.n	800791c <f_open+0x2f4>
 8007916:	2301      	movs	r3, #1
 8007918:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800791c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800791e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007920:	1ad3      	subs	r3, r2, r3
 8007922:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007924:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007928:	2b00      	cmp	r3, #0
 800792a:	d103      	bne.n	8007934 <f_open+0x30c>
 800792c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800792e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007930:	429a      	cmp	r2, r3
 8007932:	d8e0      	bhi.n	80078f6 <f_open+0x2ce>
				}
				fp->clust = clst;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007938:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800793a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800793e:	2b00      	cmp	r3, #0
 8007940:	d131      	bne.n	80079a6 <f_open+0x37e>
 8007942:	697b      	ldr	r3, [r7, #20]
 8007944:	899b      	ldrh	r3, [r3, #12]
 8007946:	461a      	mov	r2, r3
 8007948:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800794a:	fbb3 f1f2 	udiv	r1, r3, r2
 800794e:	fb02 f201 	mul.w	r2, r2, r1
 8007952:	1a9b      	subs	r3, r3, r2
 8007954:	2b00      	cmp	r3, #0
 8007956:	d026      	beq.n	80079a6 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8007958:	697b      	ldr	r3, [r7, #20]
 800795a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800795c:	4618      	mov	r0, r3
 800795e:	f7fe f82b 	bl	80059b8 <clust2sect>
 8007962:	64f8      	str	r0, [r7, #76]	; 0x4c
 8007964:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007966:	2b00      	cmp	r3, #0
 8007968:	d103      	bne.n	8007972 <f_open+0x34a>
						res = FR_INT_ERR;
 800796a:	2302      	movs	r3, #2
 800796c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8007970:	e019      	b.n	80079a6 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8007972:	697b      	ldr	r3, [r7, #20]
 8007974:	899b      	ldrh	r3, [r3, #12]
 8007976:	461a      	mov	r2, r3
 8007978:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800797a:	fbb3 f2f2 	udiv	r2, r3, r2
 800797e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007980:	441a      	add	r2, r3
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8007986:	697b      	ldr	r3, [r7, #20]
 8007988:	7858      	ldrb	r0, [r3, #1]
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	6a1a      	ldr	r2, [r3, #32]
 8007994:	2301      	movs	r3, #1
 8007996:	f7fd fc63 	bl	8005260 <disk_read>
 800799a:	4603      	mov	r3, r0
 800799c:	2b00      	cmp	r3, #0
 800799e:	d002      	beq.n	80079a6 <f_open+0x37e>
 80079a0:	2301      	movs	r3, #1
 80079a2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80079a6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d002      	beq.n	80079b4 <f_open+0x38c>
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	2200      	movs	r2, #0
 80079b2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80079b4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80079b8:	4618      	mov	r0, r3
 80079ba:	3768      	adds	r7, #104	; 0x68
 80079bc:	46bd      	mov	sp, r7
 80079be:	bd80      	pop	{r7, pc}

080079c0 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b08e      	sub	sp, #56	; 0x38
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	60f8      	str	r0, [r7, #12]
 80079c8:	60b9      	str	r1, [r7, #8]
 80079ca:	607a      	str	r2, [r7, #4]
 80079cc:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80079ce:	68bb      	ldr	r3, [r7, #8]
 80079d0:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	2200      	movs	r2, #0
 80079d6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	f107 0214 	add.w	r2, r7, #20
 80079de:	4611      	mov	r1, r2
 80079e0:	4618      	mov	r0, r3
 80079e2:	f7ff fda5 	bl	8007530 <validate>
 80079e6:	4603      	mov	r3, r0
 80079e8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80079ec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d107      	bne.n	8007a04 <f_read+0x44>
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	7d5b      	ldrb	r3, [r3, #21]
 80079f8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80079fc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d002      	beq.n	8007a0a <f_read+0x4a>
 8007a04:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007a08:	e135      	b.n	8007c76 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	7d1b      	ldrb	r3, [r3, #20]
 8007a0e:	f003 0301 	and.w	r3, r3, #1
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d101      	bne.n	8007a1a <f_read+0x5a>
 8007a16:	2307      	movs	r3, #7
 8007a18:	e12d      	b.n	8007c76 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	68da      	ldr	r2, [r3, #12]
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	699b      	ldr	r3, [r3, #24]
 8007a22:	1ad3      	subs	r3, r2, r3
 8007a24:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8007a26:	687a      	ldr	r2, [r7, #4]
 8007a28:	6a3b      	ldr	r3, [r7, #32]
 8007a2a:	429a      	cmp	r2, r3
 8007a2c:	f240 811e 	bls.w	8007c6c <f_read+0x2ac>
 8007a30:	6a3b      	ldr	r3, [r7, #32]
 8007a32:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8007a34:	e11a      	b.n	8007c6c <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	699b      	ldr	r3, [r3, #24]
 8007a3a:	697a      	ldr	r2, [r7, #20]
 8007a3c:	8992      	ldrh	r2, [r2, #12]
 8007a3e:	fbb3 f1f2 	udiv	r1, r3, r2
 8007a42:	fb02 f201 	mul.w	r2, r2, r1
 8007a46:	1a9b      	subs	r3, r3, r2
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	f040 80d5 	bne.w	8007bf8 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	699b      	ldr	r3, [r3, #24]
 8007a52:	697a      	ldr	r2, [r7, #20]
 8007a54:	8992      	ldrh	r2, [r2, #12]
 8007a56:	fbb3 f3f2 	udiv	r3, r3, r2
 8007a5a:	697a      	ldr	r2, [r7, #20]
 8007a5c:	8952      	ldrh	r2, [r2, #10]
 8007a5e:	3a01      	subs	r2, #1
 8007a60:	4013      	ands	r3, r2
 8007a62:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8007a64:	69fb      	ldr	r3, [r7, #28]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d12f      	bne.n	8007aca <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	699b      	ldr	r3, [r3, #24]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d103      	bne.n	8007a7a <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	689b      	ldr	r3, [r3, #8]
 8007a76:	633b      	str	r3, [r7, #48]	; 0x30
 8007a78:	e013      	b.n	8007aa2 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d007      	beq.n	8007a92 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	699b      	ldr	r3, [r3, #24]
 8007a86:	4619      	mov	r1, r3
 8007a88:	68f8      	ldr	r0, [r7, #12]
 8007a8a:	f7fe faa1 	bl	8005fd0 <clmt_clust>
 8007a8e:	6338      	str	r0, [r7, #48]	; 0x30
 8007a90:	e007      	b.n	8007aa2 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8007a92:	68fa      	ldr	r2, [r7, #12]
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	69db      	ldr	r3, [r3, #28]
 8007a98:	4619      	mov	r1, r3
 8007a9a:	4610      	mov	r0, r2
 8007a9c:	f7fd ffab 	bl	80059f6 <get_fat>
 8007aa0:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8007aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aa4:	2b01      	cmp	r3, #1
 8007aa6:	d804      	bhi.n	8007ab2 <f_read+0xf2>
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	2202      	movs	r2, #2
 8007aac:	755a      	strb	r2, [r3, #21]
 8007aae:	2302      	movs	r3, #2
 8007ab0:	e0e1      	b.n	8007c76 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ab8:	d104      	bne.n	8007ac4 <f_read+0x104>
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	2201      	movs	r2, #1
 8007abe:	755a      	strb	r2, [r3, #21]
 8007ac0:	2301      	movs	r3, #1
 8007ac2:	e0d8      	b.n	8007c76 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ac8:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8007aca:	697a      	ldr	r2, [r7, #20]
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	69db      	ldr	r3, [r3, #28]
 8007ad0:	4619      	mov	r1, r3
 8007ad2:	4610      	mov	r0, r2
 8007ad4:	f7fd ff70 	bl	80059b8 <clust2sect>
 8007ad8:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8007ada:	69bb      	ldr	r3, [r7, #24]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d104      	bne.n	8007aea <f_read+0x12a>
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	2202      	movs	r2, #2
 8007ae4:	755a      	strb	r2, [r3, #21]
 8007ae6:	2302      	movs	r3, #2
 8007ae8:	e0c5      	b.n	8007c76 <f_read+0x2b6>
			sect += csect;
 8007aea:	69ba      	ldr	r2, [r7, #24]
 8007aec:	69fb      	ldr	r3, [r7, #28]
 8007aee:	4413      	add	r3, r2
 8007af0:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8007af2:	697b      	ldr	r3, [r7, #20]
 8007af4:	899b      	ldrh	r3, [r3, #12]
 8007af6:	461a      	mov	r2, r3
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	fbb3 f3f2 	udiv	r3, r3, r2
 8007afe:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8007b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d041      	beq.n	8007b8a <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007b06:	69fa      	ldr	r2, [r7, #28]
 8007b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b0a:	4413      	add	r3, r2
 8007b0c:	697a      	ldr	r2, [r7, #20]
 8007b0e:	8952      	ldrh	r2, [r2, #10]
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d905      	bls.n	8007b20 <f_read+0x160>
					cc = fs->csize - csect;
 8007b14:	697b      	ldr	r3, [r7, #20]
 8007b16:	895b      	ldrh	r3, [r3, #10]
 8007b18:	461a      	mov	r2, r3
 8007b1a:	69fb      	ldr	r3, [r7, #28]
 8007b1c:	1ad3      	subs	r3, r2, r3
 8007b1e:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007b20:	697b      	ldr	r3, [r7, #20]
 8007b22:	7858      	ldrb	r0, [r3, #1]
 8007b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b26:	69ba      	ldr	r2, [r7, #24]
 8007b28:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007b2a:	f7fd fb99 	bl	8005260 <disk_read>
 8007b2e:	4603      	mov	r3, r0
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d004      	beq.n	8007b3e <f_read+0x17e>
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	2201      	movs	r2, #1
 8007b38:	755a      	strb	r2, [r3, #21]
 8007b3a:	2301      	movs	r3, #1
 8007b3c:	e09b      	b.n	8007c76 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	7d1b      	ldrb	r3, [r3, #20]
 8007b42:	b25b      	sxtb	r3, r3
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	da18      	bge.n	8007b7a <f_read+0x1ba>
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	6a1a      	ldr	r2, [r3, #32]
 8007b4c:	69bb      	ldr	r3, [r7, #24]
 8007b4e:	1ad3      	subs	r3, r2, r3
 8007b50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b52:	429a      	cmp	r2, r3
 8007b54:	d911      	bls.n	8007b7a <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	6a1a      	ldr	r2, [r3, #32]
 8007b5a:	69bb      	ldr	r3, [r7, #24]
 8007b5c:	1ad3      	subs	r3, r2, r3
 8007b5e:	697a      	ldr	r2, [r7, #20]
 8007b60:	8992      	ldrh	r2, [r2, #12]
 8007b62:	fb02 f303 	mul.w	r3, r2, r3
 8007b66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b68:	18d0      	adds	r0, r2, r3
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007b70:	697b      	ldr	r3, [r7, #20]
 8007b72:	899b      	ldrh	r3, [r3, #12]
 8007b74:	461a      	mov	r2, r3
 8007b76:	f7fd fc53 	bl	8005420 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8007b7a:	697b      	ldr	r3, [r7, #20]
 8007b7c:	899b      	ldrh	r3, [r3, #12]
 8007b7e:	461a      	mov	r2, r3
 8007b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b82:	fb02 f303 	mul.w	r3, r2, r3
 8007b86:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8007b88:	e05c      	b.n	8007c44 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	6a1b      	ldr	r3, [r3, #32]
 8007b8e:	69ba      	ldr	r2, [r7, #24]
 8007b90:	429a      	cmp	r2, r3
 8007b92:	d02e      	beq.n	8007bf2 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	7d1b      	ldrb	r3, [r3, #20]
 8007b98:	b25b      	sxtb	r3, r3
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	da18      	bge.n	8007bd0 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007b9e:	697b      	ldr	r3, [r7, #20]
 8007ba0:	7858      	ldrb	r0, [r3, #1]
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	6a1a      	ldr	r2, [r3, #32]
 8007bac:	2301      	movs	r3, #1
 8007bae:	f7fd fb77 	bl	80052a0 <disk_write>
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d004      	beq.n	8007bc2 <f_read+0x202>
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	2201      	movs	r2, #1
 8007bbc:	755a      	strb	r2, [r3, #21]
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	e059      	b.n	8007c76 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	7d1b      	ldrb	r3, [r3, #20]
 8007bc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007bca:	b2da      	uxtb	r2, r3
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8007bd0:	697b      	ldr	r3, [r7, #20]
 8007bd2:	7858      	ldrb	r0, [r3, #1]
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007bda:	2301      	movs	r3, #1
 8007bdc:	69ba      	ldr	r2, [r7, #24]
 8007bde:	f7fd fb3f 	bl	8005260 <disk_read>
 8007be2:	4603      	mov	r3, r0
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d004      	beq.n	8007bf2 <f_read+0x232>
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	2201      	movs	r2, #1
 8007bec:	755a      	strb	r2, [r3, #21]
 8007bee:	2301      	movs	r3, #1
 8007bf0:	e041      	b.n	8007c76 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	69ba      	ldr	r2, [r7, #24]
 8007bf6:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007bf8:	697b      	ldr	r3, [r7, #20]
 8007bfa:	899b      	ldrh	r3, [r3, #12]
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	699b      	ldr	r3, [r3, #24]
 8007c02:	697a      	ldr	r2, [r7, #20]
 8007c04:	8992      	ldrh	r2, [r2, #12]
 8007c06:	fbb3 f1f2 	udiv	r1, r3, r2
 8007c0a:	fb02 f201 	mul.w	r2, r2, r1
 8007c0e:	1a9b      	subs	r3, r3, r2
 8007c10:	1ac3      	subs	r3, r0, r3
 8007c12:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8007c14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	429a      	cmp	r2, r3
 8007c1a:	d901      	bls.n	8007c20 <f_read+0x260>
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	699b      	ldr	r3, [r3, #24]
 8007c2a:	697a      	ldr	r2, [r7, #20]
 8007c2c:	8992      	ldrh	r2, [r2, #12]
 8007c2e:	fbb3 f0f2 	udiv	r0, r3, r2
 8007c32:	fb02 f200 	mul.w	r2, r2, r0
 8007c36:	1a9b      	subs	r3, r3, r2
 8007c38:	440b      	add	r3, r1
 8007c3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c3c:	4619      	mov	r1, r3
 8007c3e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007c40:	f7fd fbee 	bl	8005420 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8007c44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c48:	4413      	add	r3, r2
 8007c4a:	627b      	str	r3, [r7, #36]	; 0x24
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	699a      	ldr	r2, [r3, #24]
 8007c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c52:	441a      	add	r2, r3
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	619a      	str	r2, [r3, #24]
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	681a      	ldr	r2, [r3, #0]
 8007c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c5e:	441a      	add	r2, r3
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	601a      	str	r2, [r3, #0]
 8007c64:	687a      	ldr	r2, [r7, #4]
 8007c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c68:	1ad3      	subs	r3, r2, r3
 8007c6a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	f47f aee1 	bne.w	8007a36 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8007c74:	2300      	movs	r3, #0
}
 8007c76:	4618      	mov	r0, r3
 8007c78:	3738      	adds	r7, #56	; 0x38
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bd80      	pop	{r7, pc}

08007c7e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8007c7e:	b580      	push	{r7, lr}
 8007c80:	b08c      	sub	sp, #48	; 0x30
 8007c82:	af00      	add	r7, sp, #0
 8007c84:	60f8      	str	r0, [r7, #12]
 8007c86:	60b9      	str	r1, [r7, #8]
 8007c88:	607a      	str	r2, [r7, #4]
 8007c8a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	2200      	movs	r2, #0
 8007c94:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	f107 0210 	add.w	r2, r7, #16
 8007c9c:	4611      	mov	r1, r2
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	f7ff fc46 	bl	8007530 <validate>
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007caa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d107      	bne.n	8007cc2 <f_write+0x44>
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	7d5b      	ldrb	r3, [r3, #21]
 8007cb6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007cba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d002      	beq.n	8007cc8 <f_write+0x4a>
 8007cc2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007cc6:	e16a      	b.n	8007f9e <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	7d1b      	ldrb	r3, [r3, #20]
 8007ccc:	f003 0302 	and.w	r3, r3, #2
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d101      	bne.n	8007cd8 <f_write+0x5a>
 8007cd4:	2307      	movs	r3, #7
 8007cd6:	e162      	b.n	8007f9e <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	699a      	ldr	r2, [r3, #24]
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	441a      	add	r2, r3
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	699b      	ldr	r3, [r3, #24]
 8007ce4:	429a      	cmp	r2, r3
 8007ce6:	f080 814c 	bcs.w	8007f82 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	699b      	ldr	r3, [r3, #24]
 8007cee:	43db      	mvns	r3, r3
 8007cf0:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8007cf2:	e146      	b.n	8007f82 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	699b      	ldr	r3, [r3, #24]
 8007cf8:	693a      	ldr	r2, [r7, #16]
 8007cfa:	8992      	ldrh	r2, [r2, #12]
 8007cfc:	fbb3 f1f2 	udiv	r1, r3, r2
 8007d00:	fb02 f201 	mul.w	r2, r2, r1
 8007d04:	1a9b      	subs	r3, r3, r2
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	f040 80f1 	bne.w	8007eee <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	699b      	ldr	r3, [r3, #24]
 8007d10:	693a      	ldr	r2, [r7, #16]
 8007d12:	8992      	ldrh	r2, [r2, #12]
 8007d14:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d18:	693a      	ldr	r2, [r7, #16]
 8007d1a:	8952      	ldrh	r2, [r2, #10]
 8007d1c:	3a01      	subs	r2, #1
 8007d1e:	4013      	ands	r3, r2
 8007d20:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8007d22:	69bb      	ldr	r3, [r7, #24]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d143      	bne.n	8007db0 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	699b      	ldr	r3, [r3, #24]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d10c      	bne.n	8007d4a <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	689b      	ldr	r3, [r3, #8]
 8007d34:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8007d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d11a      	bne.n	8007d72 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	2100      	movs	r1, #0
 8007d40:	4618      	mov	r0, r3
 8007d42:	f7fe f8ad 	bl	8005ea0 <create_chain>
 8007d46:	62b8      	str	r0, [r7, #40]	; 0x28
 8007d48:	e013      	b.n	8007d72 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d007      	beq.n	8007d62 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	699b      	ldr	r3, [r3, #24]
 8007d56:	4619      	mov	r1, r3
 8007d58:	68f8      	ldr	r0, [r7, #12]
 8007d5a:	f7fe f939 	bl	8005fd0 <clmt_clust>
 8007d5e:	62b8      	str	r0, [r7, #40]	; 0x28
 8007d60:	e007      	b.n	8007d72 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8007d62:	68fa      	ldr	r2, [r7, #12]
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	69db      	ldr	r3, [r3, #28]
 8007d68:	4619      	mov	r1, r3
 8007d6a:	4610      	mov	r0, r2
 8007d6c:	f7fe f898 	bl	8005ea0 <create_chain>
 8007d70:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	f000 8109 	beq.w	8007f8c <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8007d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d7c:	2b01      	cmp	r3, #1
 8007d7e:	d104      	bne.n	8007d8a <f_write+0x10c>
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	2202      	movs	r2, #2
 8007d84:	755a      	strb	r2, [r3, #21]
 8007d86:	2302      	movs	r3, #2
 8007d88:	e109      	b.n	8007f9e <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d90:	d104      	bne.n	8007d9c <f_write+0x11e>
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	2201      	movs	r2, #1
 8007d96:	755a      	strb	r2, [r3, #21]
 8007d98:	2301      	movs	r3, #1
 8007d9a:	e100      	b.n	8007f9e <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007da0:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	689b      	ldr	r3, [r3, #8]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d102      	bne.n	8007db0 <f_write+0x132>
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007dae:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	7d1b      	ldrb	r3, [r3, #20]
 8007db4:	b25b      	sxtb	r3, r3
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	da18      	bge.n	8007dec <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007dba:	693b      	ldr	r3, [r7, #16]
 8007dbc:	7858      	ldrb	r0, [r3, #1]
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	6a1a      	ldr	r2, [r3, #32]
 8007dc8:	2301      	movs	r3, #1
 8007dca:	f7fd fa69 	bl	80052a0 <disk_write>
 8007dce:	4603      	mov	r3, r0
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d004      	beq.n	8007dde <f_write+0x160>
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	2201      	movs	r2, #1
 8007dd8:	755a      	strb	r2, [r3, #21]
 8007dda:	2301      	movs	r3, #1
 8007ddc:	e0df      	b.n	8007f9e <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	7d1b      	ldrb	r3, [r3, #20]
 8007de2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007de6:	b2da      	uxtb	r2, r3
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8007dec:	693a      	ldr	r2, [r7, #16]
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	69db      	ldr	r3, [r3, #28]
 8007df2:	4619      	mov	r1, r3
 8007df4:	4610      	mov	r0, r2
 8007df6:	f7fd fddf 	bl	80059b8 <clust2sect>
 8007dfa:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8007dfc:	697b      	ldr	r3, [r7, #20]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d104      	bne.n	8007e0c <f_write+0x18e>
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	2202      	movs	r2, #2
 8007e06:	755a      	strb	r2, [r3, #21]
 8007e08:	2302      	movs	r3, #2
 8007e0a:	e0c8      	b.n	8007f9e <f_write+0x320>
			sect += csect;
 8007e0c:	697a      	ldr	r2, [r7, #20]
 8007e0e:	69bb      	ldr	r3, [r7, #24]
 8007e10:	4413      	add	r3, r2
 8007e12:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8007e14:	693b      	ldr	r3, [r7, #16]
 8007e16:	899b      	ldrh	r3, [r3, #12]
 8007e18:	461a      	mov	r2, r3
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007e20:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8007e22:	6a3b      	ldr	r3, [r7, #32]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d043      	beq.n	8007eb0 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007e28:	69ba      	ldr	r2, [r7, #24]
 8007e2a:	6a3b      	ldr	r3, [r7, #32]
 8007e2c:	4413      	add	r3, r2
 8007e2e:	693a      	ldr	r2, [r7, #16]
 8007e30:	8952      	ldrh	r2, [r2, #10]
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d905      	bls.n	8007e42 <f_write+0x1c4>
					cc = fs->csize - csect;
 8007e36:	693b      	ldr	r3, [r7, #16]
 8007e38:	895b      	ldrh	r3, [r3, #10]
 8007e3a:	461a      	mov	r2, r3
 8007e3c:	69bb      	ldr	r3, [r7, #24]
 8007e3e:	1ad3      	subs	r3, r2, r3
 8007e40:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007e42:	693b      	ldr	r3, [r7, #16]
 8007e44:	7858      	ldrb	r0, [r3, #1]
 8007e46:	6a3b      	ldr	r3, [r7, #32]
 8007e48:	697a      	ldr	r2, [r7, #20]
 8007e4a:	69f9      	ldr	r1, [r7, #28]
 8007e4c:	f7fd fa28 	bl	80052a0 <disk_write>
 8007e50:	4603      	mov	r3, r0
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d004      	beq.n	8007e60 <f_write+0x1e2>
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	2201      	movs	r2, #1
 8007e5a:	755a      	strb	r2, [r3, #21]
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	e09e      	b.n	8007f9e <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	6a1a      	ldr	r2, [r3, #32]
 8007e64:	697b      	ldr	r3, [r7, #20]
 8007e66:	1ad3      	subs	r3, r2, r3
 8007e68:	6a3a      	ldr	r2, [r7, #32]
 8007e6a:	429a      	cmp	r2, r3
 8007e6c:	d918      	bls.n	8007ea0 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	6a1a      	ldr	r2, [r3, #32]
 8007e78:	697b      	ldr	r3, [r7, #20]
 8007e7a:	1ad3      	subs	r3, r2, r3
 8007e7c:	693a      	ldr	r2, [r7, #16]
 8007e7e:	8992      	ldrh	r2, [r2, #12]
 8007e80:	fb02 f303 	mul.w	r3, r2, r3
 8007e84:	69fa      	ldr	r2, [r7, #28]
 8007e86:	18d1      	adds	r1, r2, r3
 8007e88:	693b      	ldr	r3, [r7, #16]
 8007e8a:	899b      	ldrh	r3, [r3, #12]
 8007e8c:	461a      	mov	r2, r3
 8007e8e:	f7fd fac7 	bl	8005420 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	7d1b      	ldrb	r3, [r3, #20]
 8007e96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e9a:	b2da      	uxtb	r2, r3
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8007ea0:	693b      	ldr	r3, [r7, #16]
 8007ea2:	899b      	ldrh	r3, [r3, #12]
 8007ea4:	461a      	mov	r2, r3
 8007ea6:	6a3b      	ldr	r3, [r7, #32]
 8007ea8:	fb02 f303 	mul.w	r3, r2, r3
 8007eac:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8007eae:	e04b      	b.n	8007f48 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	6a1b      	ldr	r3, [r3, #32]
 8007eb4:	697a      	ldr	r2, [r7, #20]
 8007eb6:	429a      	cmp	r2, r3
 8007eb8:	d016      	beq.n	8007ee8 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	699a      	ldr	r2, [r3, #24]
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007ec2:	429a      	cmp	r2, r3
 8007ec4:	d210      	bcs.n	8007ee8 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8007ec6:	693b      	ldr	r3, [r7, #16]
 8007ec8:	7858      	ldrb	r0, [r3, #1]
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007ed0:	2301      	movs	r3, #1
 8007ed2:	697a      	ldr	r2, [r7, #20]
 8007ed4:	f7fd f9c4 	bl	8005260 <disk_read>
 8007ed8:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d004      	beq.n	8007ee8 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	2201      	movs	r2, #1
 8007ee2:	755a      	strb	r2, [r3, #21]
 8007ee4:	2301      	movs	r3, #1
 8007ee6:	e05a      	b.n	8007f9e <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	697a      	ldr	r2, [r7, #20]
 8007eec:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007eee:	693b      	ldr	r3, [r7, #16]
 8007ef0:	899b      	ldrh	r3, [r3, #12]
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	699b      	ldr	r3, [r3, #24]
 8007ef8:	693a      	ldr	r2, [r7, #16]
 8007efa:	8992      	ldrh	r2, [r2, #12]
 8007efc:	fbb3 f1f2 	udiv	r1, r3, r2
 8007f00:	fb02 f201 	mul.w	r2, r2, r1
 8007f04:	1a9b      	subs	r3, r3, r2
 8007f06:	1ac3      	subs	r3, r0, r3
 8007f08:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8007f0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	429a      	cmp	r2, r3
 8007f10:	d901      	bls.n	8007f16 <f_write+0x298>
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	699b      	ldr	r3, [r3, #24]
 8007f20:	693a      	ldr	r2, [r7, #16]
 8007f22:	8992      	ldrh	r2, [r2, #12]
 8007f24:	fbb3 f0f2 	udiv	r0, r3, r2
 8007f28:	fb02 f200 	mul.w	r2, r2, r0
 8007f2c:	1a9b      	subs	r3, r3, r2
 8007f2e:	440b      	add	r3, r1
 8007f30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f32:	69f9      	ldr	r1, [r7, #28]
 8007f34:	4618      	mov	r0, r3
 8007f36:	f7fd fa73 	bl	8005420 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	7d1b      	ldrb	r3, [r3, #20]
 8007f3e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007f42:	b2da      	uxtb	r2, r3
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8007f48:	69fa      	ldr	r2, [r7, #28]
 8007f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f4c:	4413      	add	r3, r2
 8007f4e:	61fb      	str	r3, [r7, #28]
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	699a      	ldr	r2, [r3, #24]
 8007f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f56:	441a      	add	r2, r3
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	619a      	str	r2, [r3, #24]
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	68da      	ldr	r2, [r3, #12]
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	699b      	ldr	r3, [r3, #24]
 8007f64:	429a      	cmp	r2, r3
 8007f66:	bf38      	it	cc
 8007f68:	461a      	movcc	r2, r3
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	60da      	str	r2, [r3, #12]
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	681a      	ldr	r2, [r3, #0]
 8007f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f74:	441a      	add	r2, r3
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	601a      	str	r2, [r3, #0]
 8007f7a:	687a      	ldr	r2, [r7, #4]
 8007f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f7e:	1ad3      	subs	r3, r2, r3
 8007f80:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	f47f aeb5 	bne.w	8007cf4 <f_write+0x76>
 8007f8a:	e000      	b.n	8007f8e <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007f8c:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	7d1b      	ldrb	r3, [r3, #20]
 8007f92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f96:	b2da      	uxtb	r2, r3
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8007f9c:	2300      	movs	r3, #0
}
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	3730      	adds	r7, #48	; 0x30
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bd80      	pop	{r7, pc}

08007fa6 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8007fa6:	b580      	push	{r7, lr}
 8007fa8:	b086      	sub	sp, #24
 8007faa:	af00      	add	r7, sp, #0
 8007fac:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	f107 0208 	add.w	r2, r7, #8
 8007fb4:	4611      	mov	r1, r2
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	f7ff faba 	bl	8007530 <validate>
 8007fbc:	4603      	mov	r3, r0
 8007fbe:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007fc0:	7dfb      	ldrb	r3, [r7, #23]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d168      	bne.n	8008098 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	7d1b      	ldrb	r3, [r3, #20]
 8007fca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d062      	beq.n	8008098 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	7d1b      	ldrb	r3, [r3, #20]
 8007fd6:	b25b      	sxtb	r3, r3
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	da15      	bge.n	8008008 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8007fdc:	68bb      	ldr	r3, [r7, #8]
 8007fde:	7858      	ldrb	r0, [r3, #1]
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6a1a      	ldr	r2, [r3, #32]
 8007fea:	2301      	movs	r3, #1
 8007fec:	f7fd f958 	bl	80052a0 <disk_write>
 8007ff0:	4603      	mov	r3, r0
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d001      	beq.n	8007ffa <f_sync+0x54>
 8007ff6:	2301      	movs	r3, #1
 8007ff8:	e04f      	b.n	800809a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	7d1b      	ldrb	r3, [r3, #20]
 8007ffe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008002:	b2da      	uxtb	r2, r3
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8008008:	f7fd f88c 	bl	8005124 <get_fattime>
 800800c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800800e:	68ba      	ldr	r2, [r7, #8]
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008014:	4619      	mov	r1, r3
 8008016:	4610      	mov	r0, r2
 8008018:	f7fd fc30 	bl	800587c <move_window>
 800801c:	4603      	mov	r3, r0
 800801e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8008020:	7dfb      	ldrb	r3, [r7, #23]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d138      	bne.n	8008098 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800802a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	330b      	adds	r3, #11
 8008030:	781a      	ldrb	r2, [r3, #0]
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	330b      	adds	r3, #11
 8008036:	f042 0220 	orr.w	r2, r2, #32
 800803a:	b2d2      	uxtb	r2, r2
 800803c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6818      	ldr	r0, [r3, #0]
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	689b      	ldr	r3, [r3, #8]
 8008046:	461a      	mov	r2, r3
 8008048:	68f9      	ldr	r1, [r7, #12]
 800804a:	f7fe f9be 	bl	80063ca <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	f103 021c 	add.w	r2, r3, #28
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	68db      	ldr	r3, [r3, #12]
 8008058:	4619      	mov	r1, r3
 800805a:	4610      	mov	r0, r2
 800805c:	f7fd f9b4 	bl	80053c8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	3316      	adds	r3, #22
 8008064:	6939      	ldr	r1, [r7, #16]
 8008066:	4618      	mov	r0, r3
 8008068:	f7fd f9ae 	bl	80053c8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	3312      	adds	r3, #18
 8008070:	2100      	movs	r1, #0
 8008072:	4618      	mov	r0, r3
 8008074:	f7fd f98d 	bl	8005392 <st_word>
					fs->wflag = 1;
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	2201      	movs	r2, #1
 800807c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800807e:	68bb      	ldr	r3, [r7, #8]
 8008080:	4618      	mov	r0, r3
 8008082:	f7fd fc29 	bl	80058d8 <sync_fs>
 8008086:	4603      	mov	r3, r0
 8008088:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	7d1b      	ldrb	r3, [r3, #20]
 800808e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008092:	b2da      	uxtb	r2, r3
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8008098:	7dfb      	ldrb	r3, [r7, #23]
}
 800809a:	4618      	mov	r0, r3
 800809c:	3718      	adds	r7, #24
 800809e:	46bd      	mov	sp, r7
 80080a0:	bd80      	pop	{r7, pc}

080080a2 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80080a2:	b580      	push	{r7, lr}
 80080a4:	b084      	sub	sp, #16
 80080a6:	af00      	add	r7, sp, #0
 80080a8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f7ff ff7b 	bl	8007fa6 <f_sync>
 80080b0:	4603      	mov	r3, r0
 80080b2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80080b4:	7bfb      	ldrb	r3, [r7, #15]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d118      	bne.n	80080ec <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	f107 0208 	add.w	r2, r7, #8
 80080c0:	4611      	mov	r1, r2
 80080c2:	4618      	mov	r0, r3
 80080c4:	f7ff fa34 	bl	8007530 <validate>
 80080c8:	4603      	mov	r3, r0
 80080ca:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80080cc:	7bfb      	ldrb	r3, [r7, #15]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d10c      	bne.n	80080ec <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	691b      	ldr	r3, [r3, #16]
 80080d6:	4618      	mov	r0, r3
 80080d8:	f7fd fb2c 	bl	8005734 <dec_lock>
 80080dc:	4603      	mov	r3, r0
 80080de:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80080e0:	7bfb      	ldrb	r3, [r7, #15]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d102      	bne.n	80080ec <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2200      	movs	r2, #0
 80080ea:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80080ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80080ee:	4618      	mov	r0, r3
 80080f0:	3710      	adds	r7, #16
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bd80      	pop	{r7, pc}

080080f6 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 80080f6:	b580      	push	{r7, lr}
 80080f8:	b090      	sub	sp, #64	; 0x40
 80080fa:	af00      	add	r7, sp, #0
 80080fc:	6078      	str	r0, [r7, #4]
 80080fe:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	f107 0208 	add.w	r2, r7, #8
 8008106:	4611      	mov	r1, r2
 8008108:	4618      	mov	r0, r3
 800810a:	f7ff fa11 	bl	8007530 <validate>
 800810e:	4603      	mov	r3, r0
 8008110:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8008114:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008118:	2b00      	cmp	r3, #0
 800811a:	d103      	bne.n	8008124 <f_lseek+0x2e>
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	7d5b      	ldrb	r3, [r3, #21]
 8008120:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8008124:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008128:	2b00      	cmp	r3, #0
 800812a:	d002      	beq.n	8008132 <f_lseek+0x3c>
 800812c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008130:	e201      	b.n	8008536 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008136:	2b00      	cmp	r3, #0
 8008138:	f000 80d9 	beq.w	80082ee <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008142:	d15a      	bne.n	80081fa <f_lseek+0x104>
			tbl = fp->cltbl;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008148:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800814a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800814c:	1d1a      	adds	r2, r3, #4
 800814e:	627a      	str	r2, [r7, #36]	; 0x24
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	617b      	str	r3, [r7, #20]
 8008154:	2302      	movs	r3, #2
 8008156:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	689b      	ldr	r3, [r3, #8]
 800815c:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800815e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008160:	2b00      	cmp	r3, #0
 8008162:	d03a      	beq.n	80081da <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8008164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008166:	613b      	str	r3, [r7, #16]
 8008168:	2300      	movs	r3, #0
 800816a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800816c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800816e:	3302      	adds	r3, #2
 8008170:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8008172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008174:	60fb      	str	r3, [r7, #12]
 8008176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008178:	3301      	adds	r3, #1
 800817a:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008180:	4618      	mov	r0, r3
 8008182:	f7fd fc38 	bl	80059f6 <get_fat>
 8008186:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8008188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800818a:	2b01      	cmp	r3, #1
 800818c:	d804      	bhi.n	8008198 <f_lseek+0xa2>
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	2202      	movs	r2, #2
 8008192:	755a      	strb	r2, [r3, #21]
 8008194:	2302      	movs	r3, #2
 8008196:	e1ce      	b.n	8008536 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800819a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800819e:	d104      	bne.n	80081aa <f_lseek+0xb4>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2201      	movs	r2, #1
 80081a4:	755a      	strb	r2, [r3, #21]
 80081a6:	2301      	movs	r3, #1
 80081a8:	e1c5      	b.n	8008536 <f_lseek+0x440>
					} while (cl == pcl + 1);
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	3301      	adds	r3, #1
 80081ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081b0:	429a      	cmp	r2, r3
 80081b2:	d0de      	beq.n	8008172 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 80081b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80081b6:	697b      	ldr	r3, [r7, #20]
 80081b8:	429a      	cmp	r2, r3
 80081ba:	d809      	bhi.n	80081d0 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 80081bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081be:	1d1a      	adds	r2, r3, #4
 80081c0:	627a      	str	r2, [r7, #36]	; 0x24
 80081c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80081c4:	601a      	str	r2, [r3, #0]
 80081c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081c8:	1d1a      	adds	r2, r3, #4
 80081ca:	627a      	str	r2, [r7, #36]	; 0x24
 80081cc:	693a      	ldr	r2, [r7, #16]
 80081ce:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	69db      	ldr	r3, [r3, #28]
 80081d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081d6:	429a      	cmp	r2, r3
 80081d8:	d3c4      	bcc.n	8008164 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80081e0:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 80081e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80081e4:	697b      	ldr	r3, [r7, #20]
 80081e6:	429a      	cmp	r2, r3
 80081e8:	d803      	bhi.n	80081f2 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 80081ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ec:	2200      	movs	r2, #0
 80081ee:	601a      	str	r2, [r3, #0]
 80081f0:	e19f      	b.n	8008532 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 80081f2:	2311      	movs	r3, #17
 80081f4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80081f8:	e19b      	b.n	8008532 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	68db      	ldr	r3, [r3, #12]
 80081fe:	683a      	ldr	r2, [r7, #0]
 8008200:	429a      	cmp	r2, r3
 8008202:	d902      	bls.n	800820a <f_lseek+0x114>
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	68db      	ldr	r3, [r3, #12]
 8008208:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	683a      	ldr	r2, [r7, #0]
 800820e:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	2b00      	cmp	r3, #0
 8008214:	f000 818d 	beq.w	8008532 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	3b01      	subs	r3, #1
 800821c:	4619      	mov	r1, r3
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	f7fd fed6 	bl	8005fd0 <clmt_clust>
 8008224:	4602      	mov	r2, r0
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800822a:	68ba      	ldr	r2, [r7, #8]
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	69db      	ldr	r3, [r3, #28]
 8008230:	4619      	mov	r1, r3
 8008232:	4610      	mov	r0, r2
 8008234:	f7fd fbc0 	bl	80059b8 <clust2sect>
 8008238:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800823a:	69bb      	ldr	r3, [r7, #24]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d104      	bne.n	800824a <f_lseek+0x154>
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2202      	movs	r2, #2
 8008244:	755a      	strb	r2, [r3, #21]
 8008246:	2302      	movs	r3, #2
 8008248:	e175      	b.n	8008536 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	3b01      	subs	r3, #1
 800824e:	68ba      	ldr	r2, [r7, #8]
 8008250:	8992      	ldrh	r2, [r2, #12]
 8008252:	fbb3 f3f2 	udiv	r3, r3, r2
 8008256:	68ba      	ldr	r2, [r7, #8]
 8008258:	8952      	ldrh	r2, [r2, #10]
 800825a:	3a01      	subs	r2, #1
 800825c:	4013      	ands	r3, r2
 800825e:	69ba      	ldr	r2, [r7, #24]
 8008260:	4413      	add	r3, r2
 8008262:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	699b      	ldr	r3, [r3, #24]
 8008268:	68ba      	ldr	r2, [r7, #8]
 800826a:	8992      	ldrh	r2, [r2, #12]
 800826c:	fbb3 f1f2 	udiv	r1, r3, r2
 8008270:	fb02 f201 	mul.w	r2, r2, r1
 8008274:	1a9b      	subs	r3, r3, r2
 8008276:	2b00      	cmp	r3, #0
 8008278:	f000 815b 	beq.w	8008532 <f_lseek+0x43c>
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6a1b      	ldr	r3, [r3, #32]
 8008280:	69ba      	ldr	r2, [r7, #24]
 8008282:	429a      	cmp	r2, r3
 8008284:	f000 8155 	beq.w	8008532 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	7d1b      	ldrb	r3, [r3, #20]
 800828c:	b25b      	sxtb	r3, r3
 800828e:	2b00      	cmp	r3, #0
 8008290:	da18      	bge.n	80082c4 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008292:	68bb      	ldr	r3, [r7, #8]
 8008294:	7858      	ldrb	r0, [r3, #1]
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	6a1a      	ldr	r2, [r3, #32]
 80082a0:	2301      	movs	r3, #1
 80082a2:	f7fc fffd 	bl	80052a0 <disk_write>
 80082a6:	4603      	mov	r3, r0
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d004      	beq.n	80082b6 <f_lseek+0x1c0>
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2201      	movs	r2, #1
 80082b0:	755a      	strb	r2, [r3, #21]
 80082b2:	2301      	movs	r3, #1
 80082b4:	e13f      	b.n	8008536 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	7d1b      	ldrb	r3, [r3, #20]
 80082ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80082be:	b2da      	uxtb	r2, r3
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 80082c4:	68bb      	ldr	r3, [r7, #8]
 80082c6:	7858      	ldrb	r0, [r3, #1]
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80082ce:	2301      	movs	r3, #1
 80082d0:	69ba      	ldr	r2, [r7, #24]
 80082d2:	f7fc ffc5 	bl	8005260 <disk_read>
 80082d6:	4603      	mov	r3, r0
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d004      	beq.n	80082e6 <f_lseek+0x1f0>
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2201      	movs	r2, #1
 80082e0:	755a      	strb	r2, [r3, #21]
 80082e2:	2301      	movs	r3, #1
 80082e4:	e127      	b.n	8008536 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	69ba      	ldr	r2, [r7, #24]
 80082ea:	621a      	str	r2, [r3, #32]
 80082ec:	e121      	b.n	8008532 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	68db      	ldr	r3, [r3, #12]
 80082f2:	683a      	ldr	r2, [r7, #0]
 80082f4:	429a      	cmp	r2, r3
 80082f6:	d908      	bls.n	800830a <f_lseek+0x214>
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	7d1b      	ldrb	r3, [r3, #20]
 80082fc:	f003 0302 	and.w	r3, r3, #2
 8008300:	2b00      	cmp	r3, #0
 8008302:	d102      	bne.n	800830a <f_lseek+0x214>
			ofs = fp->obj.objsize;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	68db      	ldr	r3, [r3, #12]
 8008308:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	699b      	ldr	r3, [r3, #24]
 800830e:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8008310:	2300      	movs	r3, #0
 8008312:	637b      	str	r3, [r7, #52]	; 0x34
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008318:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	2b00      	cmp	r3, #0
 800831e:	f000 80b5 	beq.w	800848c <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8008322:	68bb      	ldr	r3, [r7, #8]
 8008324:	895b      	ldrh	r3, [r3, #10]
 8008326:	461a      	mov	r2, r3
 8008328:	68bb      	ldr	r3, [r7, #8]
 800832a:	899b      	ldrh	r3, [r3, #12]
 800832c:	fb03 f302 	mul.w	r3, r3, r2
 8008330:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8008332:	6a3b      	ldr	r3, [r7, #32]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d01b      	beq.n	8008370 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8008338:	683b      	ldr	r3, [r7, #0]
 800833a:	1e5a      	subs	r2, r3, #1
 800833c:	69fb      	ldr	r3, [r7, #28]
 800833e:	fbb2 f2f3 	udiv	r2, r2, r3
 8008342:	6a3b      	ldr	r3, [r7, #32]
 8008344:	1e59      	subs	r1, r3, #1
 8008346:	69fb      	ldr	r3, [r7, #28]
 8008348:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800834c:	429a      	cmp	r2, r3
 800834e:	d30f      	bcc.n	8008370 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8008350:	6a3b      	ldr	r3, [r7, #32]
 8008352:	1e5a      	subs	r2, r3, #1
 8008354:	69fb      	ldr	r3, [r7, #28]
 8008356:	425b      	negs	r3, r3
 8008358:	401a      	ands	r2, r3
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	699b      	ldr	r3, [r3, #24]
 8008362:	683a      	ldr	r2, [r7, #0]
 8008364:	1ad3      	subs	r3, r2, r3
 8008366:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	69db      	ldr	r3, [r3, #28]
 800836c:	63bb      	str	r3, [r7, #56]	; 0x38
 800836e:	e022      	b.n	80083b6 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	689b      	ldr	r3, [r3, #8]
 8008374:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8008376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008378:	2b00      	cmp	r3, #0
 800837a:	d119      	bne.n	80083b0 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2100      	movs	r1, #0
 8008380:	4618      	mov	r0, r3
 8008382:	f7fd fd8d 	bl	8005ea0 <create_chain>
 8008386:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800838a:	2b01      	cmp	r3, #1
 800838c:	d104      	bne.n	8008398 <f_lseek+0x2a2>
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2202      	movs	r2, #2
 8008392:	755a      	strb	r2, [r3, #21]
 8008394:	2302      	movs	r3, #2
 8008396:	e0ce      	b.n	8008536 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800839a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800839e:	d104      	bne.n	80083aa <f_lseek+0x2b4>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2201      	movs	r2, #1
 80083a4:	755a      	strb	r2, [r3, #21]
 80083a6:	2301      	movs	r3, #1
 80083a8:	e0c5      	b.n	8008536 <f_lseek+0x440>
					fp->obj.sclust = clst;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80083ae:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80083b4:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 80083b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d067      	beq.n	800848c <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 80083bc:	e03a      	b.n	8008434 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 80083be:	683a      	ldr	r2, [r7, #0]
 80083c0:	69fb      	ldr	r3, [r7, #28]
 80083c2:	1ad3      	subs	r3, r2, r3
 80083c4:	603b      	str	r3, [r7, #0]
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	699a      	ldr	r2, [r3, #24]
 80083ca:	69fb      	ldr	r3, [r7, #28]
 80083cc:	441a      	add	r2, r3
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	7d1b      	ldrb	r3, [r3, #20]
 80083d6:	f003 0302 	and.w	r3, r3, #2
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d00b      	beq.n	80083f6 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80083e2:	4618      	mov	r0, r3
 80083e4:	f7fd fd5c 	bl	8005ea0 <create_chain>
 80083e8:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 80083ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d108      	bne.n	8008402 <f_lseek+0x30c>
							ofs = 0; break;
 80083f0:	2300      	movs	r3, #0
 80083f2:	603b      	str	r3, [r7, #0]
 80083f4:	e022      	b.n	800843c <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80083fa:	4618      	mov	r0, r3
 80083fc:	f7fd fafb 	bl	80059f6 <get_fat>
 8008400:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008408:	d104      	bne.n	8008414 <f_lseek+0x31e>
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2201      	movs	r2, #1
 800840e:	755a      	strb	r2, [r3, #21]
 8008410:	2301      	movs	r3, #1
 8008412:	e090      	b.n	8008536 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8008414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008416:	2b01      	cmp	r3, #1
 8008418:	d904      	bls.n	8008424 <f_lseek+0x32e>
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	69db      	ldr	r3, [r3, #28]
 800841e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008420:	429a      	cmp	r2, r3
 8008422:	d304      	bcc.n	800842e <f_lseek+0x338>
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2202      	movs	r2, #2
 8008428:	755a      	strb	r2, [r3, #21]
 800842a:	2302      	movs	r3, #2
 800842c:	e083      	b.n	8008536 <f_lseek+0x440>
					fp->clust = clst;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008432:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8008434:	683a      	ldr	r2, [r7, #0]
 8008436:	69fb      	ldr	r3, [r7, #28]
 8008438:	429a      	cmp	r2, r3
 800843a:	d8c0      	bhi.n	80083be <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	699a      	ldr	r2, [r3, #24]
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	441a      	add	r2, r3
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8008448:	68bb      	ldr	r3, [r7, #8]
 800844a:	899b      	ldrh	r3, [r3, #12]
 800844c:	461a      	mov	r2, r3
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	fbb3 f1f2 	udiv	r1, r3, r2
 8008454:	fb02 f201 	mul.w	r2, r2, r1
 8008458:	1a9b      	subs	r3, r3, r2
 800845a:	2b00      	cmp	r3, #0
 800845c:	d016      	beq.n	800848c <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800845e:	68bb      	ldr	r3, [r7, #8]
 8008460:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008462:	4618      	mov	r0, r3
 8008464:	f7fd faa8 	bl	80059b8 <clust2sect>
 8008468:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800846a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800846c:	2b00      	cmp	r3, #0
 800846e:	d104      	bne.n	800847a <f_lseek+0x384>
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2202      	movs	r2, #2
 8008474:	755a      	strb	r2, [r3, #21]
 8008476:	2302      	movs	r3, #2
 8008478:	e05d      	b.n	8008536 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 800847a:	68bb      	ldr	r3, [r7, #8]
 800847c:	899b      	ldrh	r3, [r3, #12]
 800847e:	461a      	mov	r2, r3
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	fbb3 f3f2 	udiv	r3, r3, r2
 8008486:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008488:	4413      	add	r3, r2
 800848a:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	699a      	ldr	r2, [r3, #24]
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	68db      	ldr	r3, [r3, #12]
 8008494:	429a      	cmp	r2, r3
 8008496:	d90a      	bls.n	80084ae <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	699a      	ldr	r2, [r3, #24]
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	7d1b      	ldrb	r3, [r3, #20]
 80084a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084a8:	b2da      	uxtb	r2, r3
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	699b      	ldr	r3, [r3, #24]
 80084b2:	68ba      	ldr	r2, [r7, #8]
 80084b4:	8992      	ldrh	r2, [r2, #12]
 80084b6:	fbb3 f1f2 	udiv	r1, r3, r2
 80084ba:	fb02 f201 	mul.w	r2, r2, r1
 80084be:	1a9b      	subs	r3, r3, r2
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d036      	beq.n	8008532 <f_lseek+0x43c>
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	6a1b      	ldr	r3, [r3, #32]
 80084c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80084ca:	429a      	cmp	r2, r3
 80084cc:	d031      	beq.n	8008532 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	7d1b      	ldrb	r3, [r3, #20]
 80084d2:	b25b      	sxtb	r3, r3
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	da18      	bge.n	800850a <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	7858      	ldrb	r0, [r3, #1]
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6a1a      	ldr	r2, [r3, #32]
 80084e6:	2301      	movs	r3, #1
 80084e8:	f7fc feda 	bl	80052a0 <disk_write>
 80084ec:	4603      	mov	r3, r0
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d004      	beq.n	80084fc <f_lseek+0x406>
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	2201      	movs	r2, #1
 80084f6:	755a      	strb	r2, [r3, #21]
 80084f8:	2301      	movs	r3, #1
 80084fa:	e01c      	b.n	8008536 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	7d1b      	ldrb	r3, [r3, #20]
 8008500:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008504:	b2da      	uxtb	r2, r3
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800850a:	68bb      	ldr	r3, [r7, #8]
 800850c:	7858      	ldrb	r0, [r3, #1]
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008514:	2301      	movs	r3, #1
 8008516:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008518:	f7fc fea2 	bl	8005260 <disk_read>
 800851c:	4603      	mov	r3, r0
 800851e:	2b00      	cmp	r3, #0
 8008520:	d004      	beq.n	800852c <f_lseek+0x436>
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2201      	movs	r2, #1
 8008526:	755a      	strb	r2, [r3, #21]
 8008528:	2301      	movs	r3, #1
 800852a:	e004      	b.n	8008536 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008530:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8008532:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8008536:	4618      	mov	r0, r3
 8008538:	3740      	adds	r7, #64	; 0x40
 800853a:	46bd      	mov	sp, r7
 800853c:	bd80      	pop	{r7, pc}

0800853e <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800853e:	b580      	push	{r7, lr}
 8008540:	b092      	sub	sp, #72	; 0x48
 8008542:	af00      	add	r7, sp, #0
 8008544:	60f8      	str	r0, [r7, #12]
 8008546:	60b9      	str	r1, [r7, #8]
 8008548:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800854a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800854e:	f107 030c 	add.w	r3, r7, #12
 8008552:	2200      	movs	r2, #0
 8008554:	4618      	mov	r0, r3
 8008556:	f7fe fd63 	bl	8007020 <find_volume>
 800855a:	4603      	mov	r3, r0
 800855c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 8008560:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008564:	2b00      	cmp	r3, #0
 8008566:	f040 8099 	bne.w	800869c <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800856a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8008570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008572:	699a      	ldr	r2, [r3, #24]
 8008574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008576:	69db      	ldr	r3, [r3, #28]
 8008578:	3b02      	subs	r3, #2
 800857a:	429a      	cmp	r2, r3
 800857c:	d804      	bhi.n	8008588 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800857e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008580:	699a      	ldr	r2, [r3, #24]
 8008582:	68bb      	ldr	r3, [r7, #8]
 8008584:	601a      	str	r2, [r3, #0]
 8008586:	e089      	b.n	800869c <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8008588:	2300      	movs	r3, #0
 800858a:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800858c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800858e:	781b      	ldrb	r3, [r3, #0]
 8008590:	2b01      	cmp	r3, #1
 8008592:	d128      	bne.n	80085e6 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8008594:	2302      	movs	r3, #2
 8008596:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800859a:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800859c:	f107 0314 	add.w	r3, r7, #20
 80085a0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80085a2:	4618      	mov	r0, r3
 80085a4:	f7fd fa27 	bl	80059f6 <get_fat>
 80085a8:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 80085aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085b0:	d103      	bne.n	80085ba <f_getfree+0x7c>
 80085b2:	2301      	movs	r3, #1
 80085b4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80085b8:	e063      	b.n	8008682 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 80085ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085bc:	2b01      	cmp	r3, #1
 80085be:	d103      	bne.n	80085c8 <f_getfree+0x8a>
 80085c0:	2302      	movs	r3, #2
 80085c2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80085c6:	e05c      	b.n	8008682 <f_getfree+0x144>
					if (stat == 0) nfree++;
 80085c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d102      	bne.n	80085d4 <f_getfree+0x96>
 80085ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80085d0:	3301      	adds	r3, #1
 80085d2:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 80085d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085d6:	3301      	adds	r3, #1
 80085d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80085da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085dc:	69db      	ldr	r3, [r3, #28]
 80085de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80085e0:	429a      	cmp	r2, r3
 80085e2:	d3db      	bcc.n	800859c <f_getfree+0x5e>
 80085e4:	e04d      	b.n	8008682 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 80085e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085e8:	69db      	ldr	r3, [r3, #28]
 80085ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80085ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085f0:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 80085f2:	2300      	movs	r3, #0
 80085f4:	637b      	str	r3, [r7, #52]	; 0x34
 80085f6:	2300      	movs	r3, #0
 80085f8:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 80085fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d113      	bne.n	8008628 <f_getfree+0xea>
							res = move_window(fs, sect++);
 8008600:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008604:	1c5a      	adds	r2, r3, #1
 8008606:	63ba      	str	r2, [r7, #56]	; 0x38
 8008608:	4619      	mov	r1, r3
 800860a:	f7fd f937 	bl	800587c <move_window>
 800860e:	4603      	mov	r3, r0
 8008610:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 8008614:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008618:	2b00      	cmp	r3, #0
 800861a:	d131      	bne.n	8008680 <f_getfree+0x142>
							p = fs->win;
 800861c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800861e:	3338      	adds	r3, #56	; 0x38
 8008620:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 8008622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008624:	899b      	ldrh	r3, [r3, #12]
 8008626:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8008628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800862a:	781b      	ldrb	r3, [r3, #0]
 800862c:	2b02      	cmp	r3, #2
 800862e:	d10f      	bne.n	8008650 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8008630:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008632:	f7fc fe73 	bl	800531c <ld_word>
 8008636:	4603      	mov	r3, r0
 8008638:	2b00      	cmp	r3, #0
 800863a:	d102      	bne.n	8008642 <f_getfree+0x104>
 800863c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800863e:	3301      	adds	r3, #1
 8008640:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 8008642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008644:	3302      	adds	r3, #2
 8008646:	633b      	str	r3, [r7, #48]	; 0x30
 8008648:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800864a:	3b02      	subs	r3, #2
 800864c:	637b      	str	r3, [r7, #52]	; 0x34
 800864e:	e010      	b.n	8008672 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8008650:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008652:	f7fc fe7b 	bl	800534c <ld_dword>
 8008656:	4603      	mov	r3, r0
 8008658:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800865c:	2b00      	cmp	r3, #0
 800865e:	d102      	bne.n	8008666 <f_getfree+0x128>
 8008660:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008662:	3301      	adds	r3, #1
 8008664:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 8008666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008668:	3304      	adds	r3, #4
 800866a:	633b      	str	r3, [r7, #48]	; 0x30
 800866c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800866e:	3b04      	subs	r3, #4
 8008670:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 8008672:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008674:	3b01      	subs	r3, #1
 8008676:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008678:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800867a:	2b00      	cmp	r3, #0
 800867c:	d1bd      	bne.n	80085fa <f_getfree+0xbc>
 800867e:	e000      	b.n	8008682 <f_getfree+0x144>
							if (res != FR_OK) break;
 8008680:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8008682:	68bb      	ldr	r3, [r7, #8]
 8008684:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008686:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8008688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800868a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800868c:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800868e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008690:	791a      	ldrb	r2, [r3, #4]
 8008692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008694:	f042 0201 	orr.w	r2, r2, #1
 8008698:	b2d2      	uxtb	r2, r2
 800869a:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800869c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80086a0:	4618      	mov	r0, r3
 80086a2:	3748      	adds	r7, #72	; 0x48
 80086a4:	46bd      	mov	sp, r7
 80086a6:	bd80      	pop	{r7, pc}

080086a8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80086a8:	b480      	push	{r7}
 80086aa:	b087      	sub	sp, #28
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	60f8      	str	r0, [r7, #12]
 80086b0:	60b9      	str	r1, [r7, #8]
 80086b2:	4613      	mov	r3, r2
 80086b4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80086b6:	2301      	movs	r3, #1
 80086b8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80086ba:	2300      	movs	r3, #0
 80086bc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80086be:	4b1f      	ldr	r3, [pc, #124]	; (800873c <FATFS_LinkDriverEx+0x94>)
 80086c0:	7a5b      	ldrb	r3, [r3, #9]
 80086c2:	b2db      	uxtb	r3, r3
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d131      	bne.n	800872c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80086c8:	4b1c      	ldr	r3, [pc, #112]	; (800873c <FATFS_LinkDriverEx+0x94>)
 80086ca:	7a5b      	ldrb	r3, [r3, #9]
 80086cc:	b2db      	uxtb	r3, r3
 80086ce:	461a      	mov	r2, r3
 80086d0:	4b1a      	ldr	r3, [pc, #104]	; (800873c <FATFS_LinkDriverEx+0x94>)
 80086d2:	2100      	movs	r1, #0
 80086d4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80086d6:	4b19      	ldr	r3, [pc, #100]	; (800873c <FATFS_LinkDriverEx+0x94>)
 80086d8:	7a5b      	ldrb	r3, [r3, #9]
 80086da:	b2db      	uxtb	r3, r3
 80086dc:	4a17      	ldr	r2, [pc, #92]	; (800873c <FATFS_LinkDriverEx+0x94>)
 80086de:	009b      	lsls	r3, r3, #2
 80086e0:	4413      	add	r3, r2
 80086e2:	68fa      	ldr	r2, [r7, #12]
 80086e4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80086e6:	4b15      	ldr	r3, [pc, #84]	; (800873c <FATFS_LinkDriverEx+0x94>)
 80086e8:	7a5b      	ldrb	r3, [r3, #9]
 80086ea:	b2db      	uxtb	r3, r3
 80086ec:	461a      	mov	r2, r3
 80086ee:	4b13      	ldr	r3, [pc, #76]	; (800873c <FATFS_LinkDriverEx+0x94>)
 80086f0:	4413      	add	r3, r2
 80086f2:	79fa      	ldrb	r2, [r7, #7]
 80086f4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80086f6:	4b11      	ldr	r3, [pc, #68]	; (800873c <FATFS_LinkDriverEx+0x94>)
 80086f8:	7a5b      	ldrb	r3, [r3, #9]
 80086fa:	b2db      	uxtb	r3, r3
 80086fc:	1c5a      	adds	r2, r3, #1
 80086fe:	b2d1      	uxtb	r1, r2
 8008700:	4a0e      	ldr	r2, [pc, #56]	; (800873c <FATFS_LinkDriverEx+0x94>)
 8008702:	7251      	strb	r1, [r2, #9]
 8008704:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008706:	7dbb      	ldrb	r3, [r7, #22]
 8008708:	3330      	adds	r3, #48	; 0x30
 800870a:	b2da      	uxtb	r2, r3
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008710:	68bb      	ldr	r3, [r7, #8]
 8008712:	3301      	adds	r3, #1
 8008714:	223a      	movs	r2, #58	; 0x3a
 8008716:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008718:	68bb      	ldr	r3, [r7, #8]
 800871a:	3302      	adds	r3, #2
 800871c:	222f      	movs	r2, #47	; 0x2f
 800871e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	3303      	adds	r3, #3
 8008724:	2200      	movs	r2, #0
 8008726:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008728:	2300      	movs	r3, #0
 800872a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800872c:	7dfb      	ldrb	r3, [r7, #23]
}
 800872e:	4618      	mov	r0, r3
 8008730:	371c      	adds	r7, #28
 8008732:	46bd      	mov	sp, r7
 8008734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008738:	4770      	bx	lr
 800873a:	bf00      	nop
 800873c:	200002d8 	.word	0x200002d8

08008740 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b082      	sub	sp, #8
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
 8008748:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800874a:	2200      	movs	r2, #0
 800874c:	6839      	ldr	r1, [r7, #0]
 800874e:	6878      	ldr	r0, [r7, #4]
 8008750:	f7ff ffaa 	bl	80086a8 <FATFS_LinkDriverEx>
 8008754:	4603      	mov	r3, r0
}
 8008756:	4618      	mov	r0, r3
 8008758:	3708      	adds	r7, #8
 800875a:	46bd      	mov	sp, r7
 800875c:	bd80      	pop	{r7, pc}
	...

08008760 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8008760:	b480      	push	{r7}
 8008762:	b085      	sub	sp, #20
 8008764:	af00      	add	r7, sp, #0
 8008766:	4603      	mov	r3, r0
 8008768:	6039      	str	r1, [r7, #0]
 800876a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800876c:	88fb      	ldrh	r3, [r7, #6]
 800876e:	2b7f      	cmp	r3, #127	; 0x7f
 8008770:	d802      	bhi.n	8008778 <ff_convert+0x18>
		c = chr;
 8008772:	88fb      	ldrh	r3, [r7, #6]
 8008774:	81fb      	strh	r3, [r7, #14]
 8008776:	e025      	b.n	80087c4 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d00b      	beq.n	8008796 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800877e:	88fb      	ldrh	r3, [r7, #6]
 8008780:	2bff      	cmp	r3, #255	; 0xff
 8008782:	d805      	bhi.n	8008790 <ff_convert+0x30>
 8008784:	88fb      	ldrh	r3, [r7, #6]
 8008786:	3b80      	subs	r3, #128	; 0x80
 8008788:	4a12      	ldr	r2, [pc, #72]	; (80087d4 <ff_convert+0x74>)
 800878a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800878e:	e000      	b.n	8008792 <ff_convert+0x32>
 8008790:	2300      	movs	r3, #0
 8008792:	81fb      	strh	r3, [r7, #14]
 8008794:	e016      	b.n	80087c4 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8008796:	2300      	movs	r3, #0
 8008798:	81fb      	strh	r3, [r7, #14]
 800879a:	e009      	b.n	80087b0 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800879c:	89fb      	ldrh	r3, [r7, #14]
 800879e:	4a0d      	ldr	r2, [pc, #52]	; (80087d4 <ff_convert+0x74>)
 80087a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80087a4:	88fa      	ldrh	r2, [r7, #6]
 80087a6:	429a      	cmp	r2, r3
 80087a8:	d006      	beq.n	80087b8 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 80087aa:	89fb      	ldrh	r3, [r7, #14]
 80087ac:	3301      	adds	r3, #1
 80087ae:	81fb      	strh	r3, [r7, #14]
 80087b0:	89fb      	ldrh	r3, [r7, #14]
 80087b2:	2b7f      	cmp	r3, #127	; 0x7f
 80087b4:	d9f2      	bls.n	800879c <ff_convert+0x3c>
 80087b6:	e000      	b.n	80087ba <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 80087b8:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 80087ba:	89fb      	ldrh	r3, [r7, #14]
 80087bc:	3380      	adds	r3, #128	; 0x80
 80087be:	b29b      	uxth	r3, r3
 80087c0:	b2db      	uxtb	r3, r3
 80087c2:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 80087c4:	89fb      	ldrh	r3, [r7, #14]
}
 80087c6:	4618      	mov	r0, r3
 80087c8:	3714      	adds	r7, #20
 80087ca:	46bd      	mov	sp, r7
 80087cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d0:	4770      	bx	lr
 80087d2:	bf00      	nop
 80087d4:	0800a130 	.word	0x0800a130

080087d8 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 80087d8:	b480      	push	{r7}
 80087da:	b087      	sub	sp, #28
 80087dc:	af00      	add	r7, sp, #0
 80087de:	4603      	mov	r3, r0
 80087e0:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80087e2:	88fb      	ldrh	r3, [r7, #6]
 80087e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087e8:	d201      	bcs.n	80087ee <ff_wtoupper+0x16>
 80087ea:	4b3e      	ldr	r3, [pc, #248]	; (80088e4 <ff_wtoupper+0x10c>)
 80087ec:	e000      	b.n	80087f0 <ff_wtoupper+0x18>
 80087ee:	4b3e      	ldr	r3, [pc, #248]	; (80088e8 <ff_wtoupper+0x110>)
 80087f0:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 80087f2:	697b      	ldr	r3, [r7, #20]
 80087f4:	1c9a      	adds	r2, r3, #2
 80087f6:	617a      	str	r2, [r7, #20]
 80087f8:	881b      	ldrh	r3, [r3, #0]
 80087fa:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 80087fc:	8a7b      	ldrh	r3, [r7, #18]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d068      	beq.n	80088d4 <ff_wtoupper+0xfc>
 8008802:	88fa      	ldrh	r2, [r7, #6]
 8008804:	8a7b      	ldrh	r3, [r7, #18]
 8008806:	429a      	cmp	r2, r3
 8008808:	d364      	bcc.n	80088d4 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800880a:	697b      	ldr	r3, [r7, #20]
 800880c:	1c9a      	adds	r2, r3, #2
 800880e:	617a      	str	r2, [r7, #20]
 8008810:	881b      	ldrh	r3, [r3, #0]
 8008812:	823b      	strh	r3, [r7, #16]
 8008814:	8a3b      	ldrh	r3, [r7, #16]
 8008816:	0a1b      	lsrs	r3, r3, #8
 8008818:	81fb      	strh	r3, [r7, #14]
 800881a:	8a3b      	ldrh	r3, [r7, #16]
 800881c:	b2db      	uxtb	r3, r3
 800881e:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8008820:	88fa      	ldrh	r2, [r7, #6]
 8008822:	8a79      	ldrh	r1, [r7, #18]
 8008824:	8a3b      	ldrh	r3, [r7, #16]
 8008826:	440b      	add	r3, r1
 8008828:	429a      	cmp	r2, r3
 800882a:	da49      	bge.n	80088c0 <ff_wtoupper+0xe8>
			switch (cmd) {
 800882c:	89fb      	ldrh	r3, [r7, #14]
 800882e:	2b08      	cmp	r3, #8
 8008830:	d84f      	bhi.n	80088d2 <ff_wtoupper+0xfa>
 8008832:	a201      	add	r2, pc, #4	; (adr r2, 8008838 <ff_wtoupper+0x60>)
 8008834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008838:	0800885d 	.word	0x0800885d
 800883c:	0800886f 	.word	0x0800886f
 8008840:	08008885 	.word	0x08008885
 8008844:	0800888d 	.word	0x0800888d
 8008848:	08008895 	.word	0x08008895
 800884c:	0800889d 	.word	0x0800889d
 8008850:	080088a5 	.word	0x080088a5
 8008854:	080088ad 	.word	0x080088ad
 8008858:	080088b5 	.word	0x080088b5
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800885c:	88fa      	ldrh	r2, [r7, #6]
 800885e:	8a7b      	ldrh	r3, [r7, #18]
 8008860:	1ad3      	subs	r3, r2, r3
 8008862:	005b      	lsls	r3, r3, #1
 8008864:	697a      	ldr	r2, [r7, #20]
 8008866:	4413      	add	r3, r2
 8008868:	881b      	ldrh	r3, [r3, #0]
 800886a:	80fb      	strh	r3, [r7, #6]
 800886c:	e027      	b.n	80088be <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800886e:	88fa      	ldrh	r2, [r7, #6]
 8008870:	8a7b      	ldrh	r3, [r7, #18]
 8008872:	1ad3      	subs	r3, r2, r3
 8008874:	b29b      	uxth	r3, r3
 8008876:	f003 0301 	and.w	r3, r3, #1
 800887a:	b29b      	uxth	r3, r3
 800887c:	88fa      	ldrh	r2, [r7, #6]
 800887e:	1ad3      	subs	r3, r2, r3
 8008880:	80fb      	strh	r3, [r7, #6]
 8008882:	e01c      	b.n	80088be <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8008884:	88fb      	ldrh	r3, [r7, #6]
 8008886:	3b10      	subs	r3, #16
 8008888:	80fb      	strh	r3, [r7, #6]
 800888a:	e018      	b.n	80088be <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800888c:	88fb      	ldrh	r3, [r7, #6]
 800888e:	3b20      	subs	r3, #32
 8008890:	80fb      	strh	r3, [r7, #6]
 8008892:	e014      	b.n	80088be <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8008894:	88fb      	ldrh	r3, [r7, #6]
 8008896:	3b30      	subs	r3, #48	; 0x30
 8008898:	80fb      	strh	r3, [r7, #6]
 800889a:	e010      	b.n	80088be <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800889c:	88fb      	ldrh	r3, [r7, #6]
 800889e:	3b1a      	subs	r3, #26
 80088a0:	80fb      	strh	r3, [r7, #6]
 80088a2:	e00c      	b.n	80088be <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 80088a4:	88fb      	ldrh	r3, [r7, #6]
 80088a6:	3308      	adds	r3, #8
 80088a8:	80fb      	strh	r3, [r7, #6]
 80088aa:	e008      	b.n	80088be <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 80088ac:	88fb      	ldrh	r3, [r7, #6]
 80088ae:	3b50      	subs	r3, #80	; 0x50
 80088b0:	80fb      	strh	r3, [r7, #6]
 80088b2:	e004      	b.n	80088be <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 80088b4:	88fb      	ldrh	r3, [r7, #6]
 80088b6:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 80088ba:	80fb      	strh	r3, [r7, #6]
 80088bc:	bf00      	nop
			}
			break;
 80088be:	e008      	b.n	80088d2 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 80088c0:	89fb      	ldrh	r3, [r7, #14]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d195      	bne.n	80087f2 <ff_wtoupper+0x1a>
 80088c6:	8a3b      	ldrh	r3, [r7, #16]
 80088c8:	005b      	lsls	r3, r3, #1
 80088ca:	697a      	ldr	r2, [r7, #20]
 80088cc:	4413      	add	r3, r2
 80088ce:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 80088d0:	e78f      	b.n	80087f2 <ff_wtoupper+0x1a>
			break;
 80088d2:	bf00      	nop
	}

	return chr;
 80088d4:	88fb      	ldrh	r3, [r7, #6]
}
 80088d6:	4618      	mov	r0, r3
 80088d8:	371c      	adds	r7, #28
 80088da:	46bd      	mov	sp, r7
 80088dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e0:	4770      	bx	lr
 80088e2:	bf00      	nop
 80088e4:	0800a230 	.word	0x0800a230
 80088e8:	0800a424 	.word	0x0800a424

080088ec <__errno>:
 80088ec:	4b01      	ldr	r3, [pc, #4]	; (80088f4 <__errno+0x8>)
 80088ee:	6818      	ldr	r0, [r3, #0]
 80088f0:	4770      	bx	lr
 80088f2:	bf00      	nop
 80088f4:	20000024 	.word	0x20000024

080088f8 <__libc_init_array>:
 80088f8:	b570      	push	{r4, r5, r6, lr}
 80088fa:	4d0d      	ldr	r5, [pc, #52]	; (8008930 <__libc_init_array+0x38>)
 80088fc:	4c0d      	ldr	r4, [pc, #52]	; (8008934 <__libc_init_array+0x3c>)
 80088fe:	1b64      	subs	r4, r4, r5
 8008900:	10a4      	asrs	r4, r4, #2
 8008902:	2600      	movs	r6, #0
 8008904:	42a6      	cmp	r6, r4
 8008906:	d109      	bne.n	800891c <__libc_init_array+0x24>
 8008908:	4d0b      	ldr	r5, [pc, #44]	; (8008938 <__libc_init_array+0x40>)
 800890a:	4c0c      	ldr	r4, [pc, #48]	; (800893c <__libc_init_array+0x44>)
 800890c:	f001 f9be 	bl	8009c8c <_init>
 8008910:	1b64      	subs	r4, r4, r5
 8008912:	10a4      	asrs	r4, r4, #2
 8008914:	2600      	movs	r6, #0
 8008916:	42a6      	cmp	r6, r4
 8008918:	d105      	bne.n	8008926 <__libc_init_array+0x2e>
 800891a:	bd70      	pop	{r4, r5, r6, pc}
 800891c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008920:	4798      	blx	r3
 8008922:	3601      	adds	r6, #1
 8008924:	e7ee      	b.n	8008904 <__libc_init_array+0xc>
 8008926:	f855 3b04 	ldr.w	r3, [r5], #4
 800892a:	4798      	blx	r3
 800892c:	3601      	adds	r6, #1
 800892e:	e7f2      	b.n	8008916 <__libc_init_array+0x1e>
 8008930:	0800a580 	.word	0x0800a580
 8008934:	0800a580 	.word	0x0800a580
 8008938:	0800a580 	.word	0x0800a580
 800893c:	0800a584 	.word	0x0800a584

08008940 <memset>:
 8008940:	4402      	add	r2, r0
 8008942:	4603      	mov	r3, r0
 8008944:	4293      	cmp	r3, r2
 8008946:	d100      	bne.n	800894a <memset+0xa>
 8008948:	4770      	bx	lr
 800894a:	f803 1b01 	strb.w	r1, [r3], #1
 800894e:	e7f9      	b.n	8008944 <memset+0x4>

08008950 <iprintf>:
 8008950:	b40f      	push	{r0, r1, r2, r3}
 8008952:	4b0a      	ldr	r3, [pc, #40]	; (800897c <iprintf+0x2c>)
 8008954:	b513      	push	{r0, r1, r4, lr}
 8008956:	681c      	ldr	r4, [r3, #0]
 8008958:	b124      	cbz	r4, 8008964 <iprintf+0x14>
 800895a:	69a3      	ldr	r3, [r4, #24]
 800895c:	b913      	cbnz	r3, 8008964 <iprintf+0x14>
 800895e:	4620      	mov	r0, r4
 8008960:	f000 fa7e 	bl	8008e60 <__sinit>
 8008964:	ab05      	add	r3, sp, #20
 8008966:	9a04      	ldr	r2, [sp, #16]
 8008968:	68a1      	ldr	r1, [r4, #8]
 800896a:	9301      	str	r3, [sp, #4]
 800896c:	4620      	mov	r0, r4
 800896e:	f000 fdab 	bl	80094c8 <_vfiprintf_r>
 8008972:	b002      	add	sp, #8
 8008974:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008978:	b004      	add	sp, #16
 800897a:	4770      	bx	lr
 800897c:	20000024 	.word	0x20000024

08008980 <_puts_r>:
 8008980:	b570      	push	{r4, r5, r6, lr}
 8008982:	460e      	mov	r6, r1
 8008984:	4605      	mov	r5, r0
 8008986:	b118      	cbz	r0, 8008990 <_puts_r+0x10>
 8008988:	6983      	ldr	r3, [r0, #24]
 800898a:	b90b      	cbnz	r3, 8008990 <_puts_r+0x10>
 800898c:	f000 fa68 	bl	8008e60 <__sinit>
 8008990:	69ab      	ldr	r3, [r5, #24]
 8008992:	68ac      	ldr	r4, [r5, #8]
 8008994:	b913      	cbnz	r3, 800899c <_puts_r+0x1c>
 8008996:	4628      	mov	r0, r5
 8008998:	f000 fa62 	bl	8008e60 <__sinit>
 800899c:	4b2c      	ldr	r3, [pc, #176]	; (8008a50 <_puts_r+0xd0>)
 800899e:	429c      	cmp	r4, r3
 80089a0:	d120      	bne.n	80089e4 <_puts_r+0x64>
 80089a2:	686c      	ldr	r4, [r5, #4]
 80089a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80089a6:	07db      	lsls	r3, r3, #31
 80089a8:	d405      	bmi.n	80089b6 <_puts_r+0x36>
 80089aa:	89a3      	ldrh	r3, [r4, #12]
 80089ac:	0598      	lsls	r0, r3, #22
 80089ae:	d402      	bmi.n	80089b6 <_puts_r+0x36>
 80089b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80089b2:	f000 faf3 	bl	8008f9c <__retarget_lock_acquire_recursive>
 80089b6:	89a3      	ldrh	r3, [r4, #12]
 80089b8:	0719      	lsls	r1, r3, #28
 80089ba:	d51d      	bpl.n	80089f8 <_puts_r+0x78>
 80089bc:	6923      	ldr	r3, [r4, #16]
 80089be:	b1db      	cbz	r3, 80089f8 <_puts_r+0x78>
 80089c0:	3e01      	subs	r6, #1
 80089c2:	68a3      	ldr	r3, [r4, #8]
 80089c4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80089c8:	3b01      	subs	r3, #1
 80089ca:	60a3      	str	r3, [r4, #8]
 80089cc:	bb39      	cbnz	r1, 8008a1e <_puts_r+0x9e>
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	da38      	bge.n	8008a44 <_puts_r+0xc4>
 80089d2:	4622      	mov	r2, r4
 80089d4:	210a      	movs	r1, #10
 80089d6:	4628      	mov	r0, r5
 80089d8:	f000 f868 	bl	8008aac <__swbuf_r>
 80089dc:	3001      	adds	r0, #1
 80089de:	d011      	beq.n	8008a04 <_puts_r+0x84>
 80089e0:	250a      	movs	r5, #10
 80089e2:	e011      	b.n	8008a08 <_puts_r+0x88>
 80089e4:	4b1b      	ldr	r3, [pc, #108]	; (8008a54 <_puts_r+0xd4>)
 80089e6:	429c      	cmp	r4, r3
 80089e8:	d101      	bne.n	80089ee <_puts_r+0x6e>
 80089ea:	68ac      	ldr	r4, [r5, #8]
 80089ec:	e7da      	b.n	80089a4 <_puts_r+0x24>
 80089ee:	4b1a      	ldr	r3, [pc, #104]	; (8008a58 <_puts_r+0xd8>)
 80089f0:	429c      	cmp	r4, r3
 80089f2:	bf08      	it	eq
 80089f4:	68ec      	ldreq	r4, [r5, #12]
 80089f6:	e7d5      	b.n	80089a4 <_puts_r+0x24>
 80089f8:	4621      	mov	r1, r4
 80089fa:	4628      	mov	r0, r5
 80089fc:	f000 f8a8 	bl	8008b50 <__swsetup_r>
 8008a00:	2800      	cmp	r0, #0
 8008a02:	d0dd      	beq.n	80089c0 <_puts_r+0x40>
 8008a04:	f04f 35ff 	mov.w	r5, #4294967295
 8008a08:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008a0a:	07da      	lsls	r2, r3, #31
 8008a0c:	d405      	bmi.n	8008a1a <_puts_r+0x9a>
 8008a0e:	89a3      	ldrh	r3, [r4, #12]
 8008a10:	059b      	lsls	r3, r3, #22
 8008a12:	d402      	bmi.n	8008a1a <_puts_r+0x9a>
 8008a14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a16:	f000 fac2 	bl	8008f9e <__retarget_lock_release_recursive>
 8008a1a:	4628      	mov	r0, r5
 8008a1c:	bd70      	pop	{r4, r5, r6, pc}
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	da04      	bge.n	8008a2c <_puts_r+0xac>
 8008a22:	69a2      	ldr	r2, [r4, #24]
 8008a24:	429a      	cmp	r2, r3
 8008a26:	dc06      	bgt.n	8008a36 <_puts_r+0xb6>
 8008a28:	290a      	cmp	r1, #10
 8008a2a:	d004      	beq.n	8008a36 <_puts_r+0xb6>
 8008a2c:	6823      	ldr	r3, [r4, #0]
 8008a2e:	1c5a      	adds	r2, r3, #1
 8008a30:	6022      	str	r2, [r4, #0]
 8008a32:	7019      	strb	r1, [r3, #0]
 8008a34:	e7c5      	b.n	80089c2 <_puts_r+0x42>
 8008a36:	4622      	mov	r2, r4
 8008a38:	4628      	mov	r0, r5
 8008a3a:	f000 f837 	bl	8008aac <__swbuf_r>
 8008a3e:	3001      	adds	r0, #1
 8008a40:	d1bf      	bne.n	80089c2 <_puts_r+0x42>
 8008a42:	e7df      	b.n	8008a04 <_puts_r+0x84>
 8008a44:	6823      	ldr	r3, [r4, #0]
 8008a46:	250a      	movs	r5, #10
 8008a48:	1c5a      	adds	r2, r3, #1
 8008a4a:	6022      	str	r2, [r4, #0]
 8008a4c:	701d      	strb	r5, [r3, #0]
 8008a4e:	e7db      	b.n	8008a08 <_puts_r+0x88>
 8008a50:	0800a504 	.word	0x0800a504
 8008a54:	0800a524 	.word	0x0800a524
 8008a58:	0800a4e4 	.word	0x0800a4e4

08008a5c <puts>:
 8008a5c:	4b02      	ldr	r3, [pc, #8]	; (8008a68 <puts+0xc>)
 8008a5e:	4601      	mov	r1, r0
 8008a60:	6818      	ldr	r0, [r3, #0]
 8008a62:	f7ff bf8d 	b.w	8008980 <_puts_r>
 8008a66:	bf00      	nop
 8008a68:	20000024 	.word	0x20000024

08008a6c <siprintf>:
 8008a6c:	b40e      	push	{r1, r2, r3}
 8008a6e:	b500      	push	{lr}
 8008a70:	b09c      	sub	sp, #112	; 0x70
 8008a72:	ab1d      	add	r3, sp, #116	; 0x74
 8008a74:	9002      	str	r0, [sp, #8]
 8008a76:	9006      	str	r0, [sp, #24]
 8008a78:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008a7c:	4809      	ldr	r0, [pc, #36]	; (8008aa4 <siprintf+0x38>)
 8008a7e:	9107      	str	r1, [sp, #28]
 8008a80:	9104      	str	r1, [sp, #16]
 8008a82:	4909      	ldr	r1, [pc, #36]	; (8008aa8 <siprintf+0x3c>)
 8008a84:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a88:	9105      	str	r1, [sp, #20]
 8008a8a:	6800      	ldr	r0, [r0, #0]
 8008a8c:	9301      	str	r3, [sp, #4]
 8008a8e:	a902      	add	r1, sp, #8
 8008a90:	f000 fbf0 	bl	8009274 <_svfiprintf_r>
 8008a94:	9b02      	ldr	r3, [sp, #8]
 8008a96:	2200      	movs	r2, #0
 8008a98:	701a      	strb	r2, [r3, #0]
 8008a9a:	b01c      	add	sp, #112	; 0x70
 8008a9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008aa0:	b003      	add	sp, #12
 8008aa2:	4770      	bx	lr
 8008aa4:	20000024 	.word	0x20000024
 8008aa8:	ffff0208 	.word	0xffff0208

08008aac <__swbuf_r>:
 8008aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aae:	460e      	mov	r6, r1
 8008ab0:	4614      	mov	r4, r2
 8008ab2:	4605      	mov	r5, r0
 8008ab4:	b118      	cbz	r0, 8008abe <__swbuf_r+0x12>
 8008ab6:	6983      	ldr	r3, [r0, #24]
 8008ab8:	b90b      	cbnz	r3, 8008abe <__swbuf_r+0x12>
 8008aba:	f000 f9d1 	bl	8008e60 <__sinit>
 8008abe:	4b21      	ldr	r3, [pc, #132]	; (8008b44 <__swbuf_r+0x98>)
 8008ac0:	429c      	cmp	r4, r3
 8008ac2:	d12b      	bne.n	8008b1c <__swbuf_r+0x70>
 8008ac4:	686c      	ldr	r4, [r5, #4]
 8008ac6:	69a3      	ldr	r3, [r4, #24]
 8008ac8:	60a3      	str	r3, [r4, #8]
 8008aca:	89a3      	ldrh	r3, [r4, #12]
 8008acc:	071a      	lsls	r2, r3, #28
 8008ace:	d52f      	bpl.n	8008b30 <__swbuf_r+0x84>
 8008ad0:	6923      	ldr	r3, [r4, #16]
 8008ad2:	b36b      	cbz	r3, 8008b30 <__swbuf_r+0x84>
 8008ad4:	6923      	ldr	r3, [r4, #16]
 8008ad6:	6820      	ldr	r0, [r4, #0]
 8008ad8:	1ac0      	subs	r0, r0, r3
 8008ada:	6963      	ldr	r3, [r4, #20]
 8008adc:	b2f6      	uxtb	r6, r6
 8008ade:	4283      	cmp	r3, r0
 8008ae0:	4637      	mov	r7, r6
 8008ae2:	dc04      	bgt.n	8008aee <__swbuf_r+0x42>
 8008ae4:	4621      	mov	r1, r4
 8008ae6:	4628      	mov	r0, r5
 8008ae8:	f000 f926 	bl	8008d38 <_fflush_r>
 8008aec:	bb30      	cbnz	r0, 8008b3c <__swbuf_r+0x90>
 8008aee:	68a3      	ldr	r3, [r4, #8]
 8008af0:	3b01      	subs	r3, #1
 8008af2:	60a3      	str	r3, [r4, #8]
 8008af4:	6823      	ldr	r3, [r4, #0]
 8008af6:	1c5a      	adds	r2, r3, #1
 8008af8:	6022      	str	r2, [r4, #0]
 8008afa:	701e      	strb	r6, [r3, #0]
 8008afc:	6963      	ldr	r3, [r4, #20]
 8008afe:	3001      	adds	r0, #1
 8008b00:	4283      	cmp	r3, r0
 8008b02:	d004      	beq.n	8008b0e <__swbuf_r+0x62>
 8008b04:	89a3      	ldrh	r3, [r4, #12]
 8008b06:	07db      	lsls	r3, r3, #31
 8008b08:	d506      	bpl.n	8008b18 <__swbuf_r+0x6c>
 8008b0a:	2e0a      	cmp	r6, #10
 8008b0c:	d104      	bne.n	8008b18 <__swbuf_r+0x6c>
 8008b0e:	4621      	mov	r1, r4
 8008b10:	4628      	mov	r0, r5
 8008b12:	f000 f911 	bl	8008d38 <_fflush_r>
 8008b16:	b988      	cbnz	r0, 8008b3c <__swbuf_r+0x90>
 8008b18:	4638      	mov	r0, r7
 8008b1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b1c:	4b0a      	ldr	r3, [pc, #40]	; (8008b48 <__swbuf_r+0x9c>)
 8008b1e:	429c      	cmp	r4, r3
 8008b20:	d101      	bne.n	8008b26 <__swbuf_r+0x7a>
 8008b22:	68ac      	ldr	r4, [r5, #8]
 8008b24:	e7cf      	b.n	8008ac6 <__swbuf_r+0x1a>
 8008b26:	4b09      	ldr	r3, [pc, #36]	; (8008b4c <__swbuf_r+0xa0>)
 8008b28:	429c      	cmp	r4, r3
 8008b2a:	bf08      	it	eq
 8008b2c:	68ec      	ldreq	r4, [r5, #12]
 8008b2e:	e7ca      	b.n	8008ac6 <__swbuf_r+0x1a>
 8008b30:	4621      	mov	r1, r4
 8008b32:	4628      	mov	r0, r5
 8008b34:	f000 f80c 	bl	8008b50 <__swsetup_r>
 8008b38:	2800      	cmp	r0, #0
 8008b3a:	d0cb      	beq.n	8008ad4 <__swbuf_r+0x28>
 8008b3c:	f04f 37ff 	mov.w	r7, #4294967295
 8008b40:	e7ea      	b.n	8008b18 <__swbuf_r+0x6c>
 8008b42:	bf00      	nop
 8008b44:	0800a504 	.word	0x0800a504
 8008b48:	0800a524 	.word	0x0800a524
 8008b4c:	0800a4e4 	.word	0x0800a4e4

08008b50 <__swsetup_r>:
 8008b50:	4b32      	ldr	r3, [pc, #200]	; (8008c1c <__swsetup_r+0xcc>)
 8008b52:	b570      	push	{r4, r5, r6, lr}
 8008b54:	681d      	ldr	r5, [r3, #0]
 8008b56:	4606      	mov	r6, r0
 8008b58:	460c      	mov	r4, r1
 8008b5a:	b125      	cbz	r5, 8008b66 <__swsetup_r+0x16>
 8008b5c:	69ab      	ldr	r3, [r5, #24]
 8008b5e:	b913      	cbnz	r3, 8008b66 <__swsetup_r+0x16>
 8008b60:	4628      	mov	r0, r5
 8008b62:	f000 f97d 	bl	8008e60 <__sinit>
 8008b66:	4b2e      	ldr	r3, [pc, #184]	; (8008c20 <__swsetup_r+0xd0>)
 8008b68:	429c      	cmp	r4, r3
 8008b6a:	d10f      	bne.n	8008b8c <__swsetup_r+0x3c>
 8008b6c:	686c      	ldr	r4, [r5, #4]
 8008b6e:	89a3      	ldrh	r3, [r4, #12]
 8008b70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008b74:	0719      	lsls	r1, r3, #28
 8008b76:	d42c      	bmi.n	8008bd2 <__swsetup_r+0x82>
 8008b78:	06dd      	lsls	r5, r3, #27
 8008b7a:	d411      	bmi.n	8008ba0 <__swsetup_r+0x50>
 8008b7c:	2309      	movs	r3, #9
 8008b7e:	6033      	str	r3, [r6, #0]
 8008b80:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008b84:	81a3      	strh	r3, [r4, #12]
 8008b86:	f04f 30ff 	mov.w	r0, #4294967295
 8008b8a:	e03e      	b.n	8008c0a <__swsetup_r+0xba>
 8008b8c:	4b25      	ldr	r3, [pc, #148]	; (8008c24 <__swsetup_r+0xd4>)
 8008b8e:	429c      	cmp	r4, r3
 8008b90:	d101      	bne.n	8008b96 <__swsetup_r+0x46>
 8008b92:	68ac      	ldr	r4, [r5, #8]
 8008b94:	e7eb      	b.n	8008b6e <__swsetup_r+0x1e>
 8008b96:	4b24      	ldr	r3, [pc, #144]	; (8008c28 <__swsetup_r+0xd8>)
 8008b98:	429c      	cmp	r4, r3
 8008b9a:	bf08      	it	eq
 8008b9c:	68ec      	ldreq	r4, [r5, #12]
 8008b9e:	e7e6      	b.n	8008b6e <__swsetup_r+0x1e>
 8008ba0:	0758      	lsls	r0, r3, #29
 8008ba2:	d512      	bpl.n	8008bca <__swsetup_r+0x7a>
 8008ba4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008ba6:	b141      	cbz	r1, 8008bba <__swsetup_r+0x6a>
 8008ba8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008bac:	4299      	cmp	r1, r3
 8008bae:	d002      	beq.n	8008bb6 <__swsetup_r+0x66>
 8008bb0:	4630      	mov	r0, r6
 8008bb2:	f000 fa59 	bl	8009068 <_free_r>
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	6363      	str	r3, [r4, #52]	; 0x34
 8008bba:	89a3      	ldrh	r3, [r4, #12]
 8008bbc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008bc0:	81a3      	strh	r3, [r4, #12]
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	6063      	str	r3, [r4, #4]
 8008bc6:	6923      	ldr	r3, [r4, #16]
 8008bc8:	6023      	str	r3, [r4, #0]
 8008bca:	89a3      	ldrh	r3, [r4, #12]
 8008bcc:	f043 0308 	orr.w	r3, r3, #8
 8008bd0:	81a3      	strh	r3, [r4, #12]
 8008bd2:	6923      	ldr	r3, [r4, #16]
 8008bd4:	b94b      	cbnz	r3, 8008bea <__swsetup_r+0x9a>
 8008bd6:	89a3      	ldrh	r3, [r4, #12]
 8008bd8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008bdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008be0:	d003      	beq.n	8008bea <__swsetup_r+0x9a>
 8008be2:	4621      	mov	r1, r4
 8008be4:	4630      	mov	r0, r6
 8008be6:	f000 f9ff 	bl	8008fe8 <__smakebuf_r>
 8008bea:	89a0      	ldrh	r0, [r4, #12]
 8008bec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008bf0:	f010 0301 	ands.w	r3, r0, #1
 8008bf4:	d00a      	beq.n	8008c0c <__swsetup_r+0xbc>
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	60a3      	str	r3, [r4, #8]
 8008bfa:	6963      	ldr	r3, [r4, #20]
 8008bfc:	425b      	negs	r3, r3
 8008bfe:	61a3      	str	r3, [r4, #24]
 8008c00:	6923      	ldr	r3, [r4, #16]
 8008c02:	b943      	cbnz	r3, 8008c16 <__swsetup_r+0xc6>
 8008c04:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008c08:	d1ba      	bne.n	8008b80 <__swsetup_r+0x30>
 8008c0a:	bd70      	pop	{r4, r5, r6, pc}
 8008c0c:	0781      	lsls	r1, r0, #30
 8008c0e:	bf58      	it	pl
 8008c10:	6963      	ldrpl	r3, [r4, #20]
 8008c12:	60a3      	str	r3, [r4, #8]
 8008c14:	e7f4      	b.n	8008c00 <__swsetup_r+0xb0>
 8008c16:	2000      	movs	r0, #0
 8008c18:	e7f7      	b.n	8008c0a <__swsetup_r+0xba>
 8008c1a:	bf00      	nop
 8008c1c:	20000024 	.word	0x20000024
 8008c20:	0800a504 	.word	0x0800a504
 8008c24:	0800a524 	.word	0x0800a524
 8008c28:	0800a4e4 	.word	0x0800a4e4

08008c2c <__sflush_r>:
 8008c2c:	898a      	ldrh	r2, [r1, #12]
 8008c2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c32:	4605      	mov	r5, r0
 8008c34:	0710      	lsls	r0, r2, #28
 8008c36:	460c      	mov	r4, r1
 8008c38:	d458      	bmi.n	8008cec <__sflush_r+0xc0>
 8008c3a:	684b      	ldr	r3, [r1, #4]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	dc05      	bgt.n	8008c4c <__sflush_r+0x20>
 8008c40:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	dc02      	bgt.n	8008c4c <__sflush_r+0x20>
 8008c46:	2000      	movs	r0, #0
 8008c48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008c4e:	2e00      	cmp	r6, #0
 8008c50:	d0f9      	beq.n	8008c46 <__sflush_r+0x1a>
 8008c52:	2300      	movs	r3, #0
 8008c54:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008c58:	682f      	ldr	r7, [r5, #0]
 8008c5a:	602b      	str	r3, [r5, #0]
 8008c5c:	d032      	beq.n	8008cc4 <__sflush_r+0x98>
 8008c5e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008c60:	89a3      	ldrh	r3, [r4, #12]
 8008c62:	075a      	lsls	r2, r3, #29
 8008c64:	d505      	bpl.n	8008c72 <__sflush_r+0x46>
 8008c66:	6863      	ldr	r3, [r4, #4]
 8008c68:	1ac0      	subs	r0, r0, r3
 8008c6a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008c6c:	b10b      	cbz	r3, 8008c72 <__sflush_r+0x46>
 8008c6e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008c70:	1ac0      	subs	r0, r0, r3
 8008c72:	2300      	movs	r3, #0
 8008c74:	4602      	mov	r2, r0
 8008c76:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008c78:	6a21      	ldr	r1, [r4, #32]
 8008c7a:	4628      	mov	r0, r5
 8008c7c:	47b0      	blx	r6
 8008c7e:	1c43      	adds	r3, r0, #1
 8008c80:	89a3      	ldrh	r3, [r4, #12]
 8008c82:	d106      	bne.n	8008c92 <__sflush_r+0x66>
 8008c84:	6829      	ldr	r1, [r5, #0]
 8008c86:	291d      	cmp	r1, #29
 8008c88:	d82c      	bhi.n	8008ce4 <__sflush_r+0xb8>
 8008c8a:	4a2a      	ldr	r2, [pc, #168]	; (8008d34 <__sflush_r+0x108>)
 8008c8c:	40ca      	lsrs	r2, r1
 8008c8e:	07d6      	lsls	r6, r2, #31
 8008c90:	d528      	bpl.n	8008ce4 <__sflush_r+0xb8>
 8008c92:	2200      	movs	r2, #0
 8008c94:	6062      	str	r2, [r4, #4]
 8008c96:	04d9      	lsls	r1, r3, #19
 8008c98:	6922      	ldr	r2, [r4, #16]
 8008c9a:	6022      	str	r2, [r4, #0]
 8008c9c:	d504      	bpl.n	8008ca8 <__sflush_r+0x7c>
 8008c9e:	1c42      	adds	r2, r0, #1
 8008ca0:	d101      	bne.n	8008ca6 <__sflush_r+0x7a>
 8008ca2:	682b      	ldr	r3, [r5, #0]
 8008ca4:	b903      	cbnz	r3, 8008ca8 <__sflush_r+0x7c>
 8008ca6:	6560      	str	r0, [r4, #84]	; 0x54
 8008ca8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008caa:	602f      	str	r7, [r5, #0]
 8008cac:	2900      	cmp	r1, #0
 8008cae:	d0ca      	beq.n	8008c46 <__sflush_r+0x1a>
 8008cb0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008cb4:	4299      	cmp	r1, r3
 8008cb6:	d002      	beq.n	8008cbe <__sflush_r+0x92>
 8008cb8:	4628      	mov	r0, r5
 8008cba:	f000 f9d5 	bl	8009068 <_free_r>
 8008cbe:	2000      	movs	r0, #0
 8008cc0:	6360      	str	r0, [r4, #52]	; 0x34
 8008cc2:	e7c1      	b.n	8008c48 <__sflush_r+0x1c>
 8008cc4:	6a21      	ldr	r1, [r4, #32]
 8008cc6:	2301      	movs	r3, #1
 8008cc8:	4628      	mov	r0, r5
 8008cca:	47b0      	blx	r6
 8008ccc:	1c41      	adds	r1, r0, #1
 8008cce:	d1c7      	bne.n	8008c60 <__sflush_r+0x34>
 8008cd0:	682b      	ldr	r3, [r5, #0]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d0c4      	beq.n	8008c60 <__sflush_r+0x34>
 8008cd6:	2b1d      	cmp	r3, #29
 8008cd8:	d001      	beq.n	8008cde <__sflush_r+0xb2>
 8008cda:	2b16      	cmp	r3, #22
 8008cdc:	d101      	bne.n	8008ce2 <__sflush_r+0xb6>
 8008cde:	602f      	str	r7, [r5, #0]
 8008ce0:	e7b1      	b.n	8008c46 <__sflush_r+0x1a>
 8008ce2:	89a3      	ldrh	r3, [r4, #12]
 8008ce4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ce8:	81a3      	strh	r3, [r4, #12]
 8008cea:	e7ad      	b.n	8008c48 <__sflush_r+0x1c>
 8008cec:	690f      	ldr	r7, [r1, #16]
 8008cee:	2f00      	cmp	r7, #0
 8008cf0:	d0a9      	beq.n	8008c46 <__sflush_r+0x1a>
 8008cf2:	0793      	lsls	r3, r2, #30
 8008cf4:	680e      	ldr	r6, [r1, #0]
 8008cf6:	bf08      	it	eq
 8008cf8:	694b      	ldreq	r3, [r1, #20]
 8008cfa:	600f      	str	r7, [r1, #0]
 8008cfc:	bf18      	it	ne
 8008cfe:	2300      	movne	r3, #0
 8008d00:	eba6 0807 	sub.w	r8, r6, r7
 8008d04:	608b      	str	r3, [r1, #8]
 8008d06:	f1b8 0f00 	cmp.w	r8, #0
 8008d0a:	dd9c      	ble.n	8008c46 <__sflush_r+0x1a>
 8008d0c:	6a21      	ldr	r1, [r4, #32]
 8008d0e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008d10:	4643      	mov	r3, r8
 8008d12:	463a      	mov	r2, r7
 8008d14:	4628      	mov	r0, r5
 8008d16:	47b0      	blx	r6
 8008d18:	2800      	cmp	r0, #0
 8008d1a:	dc06      	bgt.n	8008d2a <__sflush_r+0xfe>
 8008d1c:	89a3      	ldrh	r3, [r4, #12]
 8008d1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d22:	81a3      	strh	r3, [r4, #12]
 8008d24:	f04f 30ff 	mov.w	r0, #4294967295
 8008d28:	e78e      	b.n	8008c48 <__sflush_r+0x1c>
 8008d2a:	4407      	add	r7, r0
 8008d2c:	eba8 0800 	sub.w	r8, r8, r0
 8008d30:	e7e9      	b.n	8008d06 <__sflush_r+0xda>
 8008d32:	bf00      	nop
 8008d34:	20400001 	.word	0x20400001

08008d38 <_fflush_r>:
 8008d38:	b538      	push	{r3, r4, r5, lr}
 8008d3a:	690b      	ldr	r3, [r1, #16]
 8008d3c:	4605      	mov	r5, r0
 8008d3e:	460c      	mov	r4, r1
 8008d40:	b913      	cbnz	r3, 8008d48 <_fflush_r+0x10>
 8008d42:	2500      	movs	r5, #0
 8008d44:	4628      	mov	r0, r5
 8008d46:	bd38      	pop	{r3, r4, r5, pc}
 8008d48:	b118      	cbz	r0, 8008d52 <_fflush_r+0x1a>
 8008d4a:	6983      	ldr	r3, [r0, #24]
 8008d4c:	b90b      	cbnz	r3, 8008d52 <_fflush_r+0x1a>
 8008d4e:	f000 f887 	bl	8008e60 <__sinit>
 8008d52:	4b14      	ldr	r3, [pc, #80]	; (8008da4 <_fflush_r+0x6c>)
 8008d54:	429c      	cmp	r4, r3
 8008d56:	d11b      	bne.n	8008d90 <_fflush_r+0x58>
 8008d58:	686c      	ldr	r4, [r5, #4]
 8008d5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d0ef      	beq.n	8008d42 <_fflush_r+0xa>
 8008d62:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008d64:	07d0      	lsls	r0, r2, #31
 8008d66:	d404      	bmi.n	8008d72 <_fflush_r+0x3a>
 8008d68:	0599      	lsls	r1, r3, #22
 8008d6a:	d402      	bmi.n	8008d72 <_fflush_r+0x3a>
 8008d6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d6e:	f000 f915 	bl	8008f9c <__retarget_lock_acquire_recursive>
 8008d72:	4628      	mov	r0, r5
 8008d74:	4621      	mov	r1, r4
 8008d76:	f7ff ff59 	bl	8008c2c <__sflush_r>
 8008d7a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008d7c:	07da      	lsls	r2, r3, #31
 8008d7e:	4605      	mov	r5, r0
 8008d80:	d4e0      	bmi.n	8008d44 <_fflush_r+0xc>
 8008d82:	89a3      	ldrh	r3, [r4, #12]
 8008d84:	059b      	lsls	r3, r3, #22
 8008d86:	d4dd      	bmi.n	8008d44 <_fflush_r+0xc>
 8008d88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d8a:	f000 f908 	bl	8008f9e <__retarget_lock_release_recursive>
 8008d8e:	e7d9      	b.n	8008d44 <_fflush_r+0xc>
 8008d90:	4b05      	ldr	r3, [pc, #20]	; (8008da8 <_fflush_r+0x70>)
 8008d92:	429c      	cmp	r4, r3
 8008d94:	d101      	bne.n	8008d9a <_fflush_r+0x62>
 8008d96:	68ac      	ldr	r4, [r5, #8]
 8008d98:	e7df      	b.n	8008d5a <_fflush_r+0x22>
 8008d9a:	4b04      	ldr	r3, [pc, #16]	; (8008dac <_fflush_r+0x74>)
 8008d9c:	429c      	cmp	r4, r3
 8008d9e:	bf08      	it	eq
 8008da0:	68ec      	ldreq	r4, [r5, #12]
 8008da2:	e7da      	b.n	8008d5a <_fflush_r+0x22>
 8008da4:	0800a504 	.word	0x0800a504
 8008da8:	0800a524 	.word	0x0800a524
 8008dac:	0800a4e4 	.word	0x0800a4e4

08008db0 <std>:
 8008db0:	2300      	movs	r3, #0
 8008db2:	b510      	push	{r4, lr}
 8008db4:	4604      	mov	r4, r0
 8008db6:	e9c0 3300 	strd	r3, r3, [r0]
 8008dba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008dbe:	6083      	str	r3, [r0, #8]
 8008dc0:	8181      	strh	r1, [r0, #12]
 8008dc2:	6643      	str	r3, [r0, #100]	; 0x64
 8008dc4:	81c2      	strh	r2, [r0, #14]
 8008dc6:	6183      	str	r3, [r0, #24]
 8008dc8:	4619      	mov	r1, r3
 8008dca:	2208      	movs	r2, #8
 8008dcc:	305c      	adds	r0, #92	; 0x5c
 8008dce:	f7ff fdb7 	bl	8008940 <memset>
 8008dd2:	4b05      	ldr	r3, [pc, #20]	; (8008de8 <std+0x38>)
 8008dd4:	6263      	str	r3, [r4, #36]	; 0x24
 8008dd6:	4b05      	ldr	r3, [pc, #20]	; (8008dec <std+0x3c>)
 8008dd8:	62a3      	str	r3, [r4, #40]	; 0x28
 8008dda:	4b05      	ldr	r3, [pc, #20]	; (8008df0 <std+0x40>)
 8008ddc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008dde:	4b05      	ldr	r3, [pc, #20]	; (8008df4 <std+0x44>)
 8008de0:	6224      	str	r4, [r4, #32]
 8008de2:	6323      	str	r3, [r4, #48]	; 0x30
 8008de4:	bd10      	pop	{r4, pc}
 8008de6:	bf00      	nop
 8008de8:	08009a71 	.word	0x08009a71
 8008dec:	08009a93 	.word	0x08009a93
 8008df0:	08009acb 	.word	0x08009acb
 8008df4:	08009aef 	.word	0x08009aef

08008df8 <_cleanup_r>:
 8008df8:	4901      	ldr	r1, [pc, #4]	; (8008e00 <_cleanup_r+0x8>)
 8008dfa:	f000 b8af 	b.w	8008f5c <_fwalk_reent>
 8008dfe:	bf00      	nop
 8008e00:	08008d39 	.word	0x08008d39

08008e04 <__sfmoreglue>:
 8008e04:	b570      	push	{r4, r5, r6, lr}
 8008e06:	1e4a      	subs	r2, r1, #1
 8008e08:	2568      	movs	r5, #104	; 0x68
 8008e0a:	4355      	muls	r5, r2
 8008e0c:	460e      	mov	r6, r1
 8008e0e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008e12:	f000 f979 	bl	8009108 <_malloc_r>
 8008e16:	4604      	mov	r4, r0
 8008e18:	b140      	cbz	r0, 8008e2c <__sfmoreglue+0x28>
 8008e1a:	2100      	movs	r1, #0
 8008e1c:	e9c0 1600 	strd	r1, r6, [r0]
 8008e20:	300c      	adds	r0, #12
 8008e22:	60a0      	str	r0, [r4, #8]
 8008e24:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008e28:	f7ff fd8a 	bl	8008940 <memset>
 8008e2c:	4620      	mov	r0, r4
 8008e2e:	bd70      	pop	{r4, r5, r6, pc}

08008e30 <__sfp_lock_acquire>:
 8008e30:	4801      	ldr	r0, [pc, #4]	; (8008e38 <__sfp_lock_acquire+0x8>)
 8008e32:	f000 b8b3 	b.w	8008f9c <__retarget_lock_acquire_recursive>
 8008e36:	bf00      	nop
 8008e38:	20004568 	.word	0x20004568

08008e3c <__sfp_lock_release>:
 8008e3c:	4801      	ldr	r0, [pc, #4]	; (8008e44 <__sfp_lock_release+0x8>)
 8008e3e:	f000 b8ae 	b.w	8008f9e <__retarget_lock_release_recursive>
 8008e42:	bf00      	nop
 8008e44:	20004568 	.word	0x20004568

08008e48 <__sinit_lock_acquire>:
 8008e48:	4801      	ldr	r0, [pc, #4]	; (8008e50 <__sinit_lock_acquire+0x8>)
 8008e4a:	f000 b8a7 	b.w	8008f9c <__retarget_lock_acquire_recursive>
 8008e4e:	bf00      	nop
 8008e50:	20004563 	.word	0x20004563

08008e54 <__sinit_lock_release>:
 8008e54:	4801      	ldr	r0, [pc, #4]	; (8008e5c <__sinit_lock_release+0x8>)
 8008e56:	f000 b8a2 	b.w	8008f9e <__retarget_lock_release_recursive>
 8008e5a:	bf00      	nop
 8008e5c:	20004563 	.word	0x20004563

08008e60 <__sinit>:
 8008e60:	b510      	push	{r4, lr}
 8008e62:	4604      	mov	r4, r0
 8008e64:	f7ff fff0 	bl	8008e48 <__sinit_lock_acquire>
 8008e68:	69a3      	ldr	r3, [r4, #24]
 8008e6a:	b11b      	cbz	r3, 8008e74 <__sinit+0x14>
 8008e6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e70:	f7ff bff0 	b.w	8008e54 <__sinit_lock_release>
 8008e74:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008e78:	6523      	str	r3, [r4, #80]	; 0x50
 8008e7a:	4b13      	ldr	r3, [pc, #76]	; (8008ec8 <__sinit+0x68>)
 8008e7c:	4a13      	ldr	r2, [pc, #76]	; (8008ecc <__sinit+0x6c>)
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	62a2      	str	r2, [r4, #40]	; 0x28
 8008e82:	42a3      	cmp	r3, r4
 8008e84:	bf04      	itt	eq
 8008e86:	2301      	moveq	r3, #1
 8008e88:	61a3      	streq	r3, [r4, #24]
 8008e8a:	4620      	mov	r0, r4
 8008e8c:	f000 f820 	bl	8008ed0 <__sfp>
 8008e90:	6060      	str	r0, [r4, #4]
 8008e92:	4620      	mov	r0, r4
 8008e94:	f000 f81c 	bl	8008ed0 <__sfp>
 8008e98:	60a0      	str	r0, [r4, #8]
 8008e9a:	4620      	mov	r0, r4
 8008e9c:	f000 f818 	bl	8008ed0 <__sfp>
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	60e0      	str	r0, [r4, #12]
 8008ea4:	2104      	movs	r1, #4
 8008ea6:	6860      	ldr	r0, [r4, #4]
 8008ea8:	f7ff ff82 	bl	8008db0 <std>
 8008eac:	68a0      	ldr	r0, [r4, #8]
 8008eae:	2201      	movs	r2, #1
 8008eb0:	2109      	movs	r1, #9
 8008eb2:	f7ff ff7d 	bl	8008db0 <std>
 8008eb6:	68e0      	ldr	r0, [r4, #12]
 8008eb8:	2202      	movs	r2, #2
 8008eba:	2112      	movs	r1, #18
 8008ebc:	f7ff ff78 	bl	8008db0 <std>
 8008ec0:	2301      	movs	r3, #1
 8008ec2:	61a3      	str	r3, [r4, #24]
 8008ec4:	e7d2      	b.n	8008e6c <__sinit+0xc>
 8008ec6:	bf00      	nop
 8008ec8:	0800a4e0 	.word	0x0800a4e0
 8008ecc:	08008df9 	.word	0x08008df9

08008ed0 <__sfp>:
 8008ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ed2:	4607      	mov	r7, r0
 8008ed4:	f7ff ffac 	bl	8008e30 <__sfp_lock_acquire>
 8008ed8:	4b1e      	ldr	r3, [pc, #120]	; (8008f54 <__sfp+0x84>)
 8008eda:	681e      	ldr	r6, [r3, #0]
 8008edc:	69b3      	ldr	r3, [r6, #24]
 8008ede:	b913      	cbnz	r3, 8008ee6 <__sfp+0x16>
 8008ee0:	4630      	mov	r0, r6
 8008ee2:	f7ff ffbd 	bl	8008e60 <__sinit>
 8008ee6:	3648      	adds	r6, #72	; 0x48
 8008ee8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008eec:	3b01      	subs	r3, #1
 8008eee:	d503      	bpl.n	8008ef8 <__sfp+0x28>
 8008ef0:	6833      	ldr	r3, [r6, #0]
 8008ef2:	b30b      	cbz	r3, 8008f38 <__sfp+0x68>
 8008ef4:	6836      	ldr	r6, [r6, #0]
 8008ef6:	e7f7      	b.n	8008ee8 <__sfp+0x18>
 8008ef8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008efc:	b9d5      	cbnz	r5, 8008f34 <__sfp+0x64>
 8008efe:	4b16      	ldr	r3, [pc, #88]	; (8008f58 <__sfp+0x88>)
 8008f00:	60e3      	str	r3, [r4, #12]
 8008f02:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008f06:	6665      	str	r5, [r4, #100]	; 0x64
 8008f08:	f000 f847 	bl	8008f9a <__retarget_lock_init_recursive>
 8008f0c:	f7ff ff96 	bl	8008e3c <__sfp_lock_release>
 8008f10:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008f14:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008f18:	6025      	str	r5, [r4, #0]
 8008f1a:	61a5      	str	r5, [r4, #24]
 8008f1c:	2208      	movs	r2, #8
 8008f1e:	4629      	mov	r1, r5
 8008f20:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008f24:	f7ff fd0c 	bl	8008940 <memset>
 8008f28:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008f2c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008f30:	4620      	mov	r0, r4
 8008f32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f34:	3468      	adds	r4, #104	; 0x68
 8008f36:	e7d9      	b.n	8008eec <__sfp+0x1c>
 8008f38:	2104      	movs	r1, #4
 8008f3a:	4638      	mov	r0, r7
 8008f3c:	f7ff ff62 	bl	8008e04 <__sfmoreglue>
 8008f40:	4604      	mov	r4, r0
 8008f42:	6030      	str	r0, [r6, #0]
 8008f44:	2800      	cmp	r0, #0
 8008f46:	d1d5      	bne.n	8008ef4 <__sfp+0x24>
 8008f48:	f7ff ff78 	bl	8008e3c <__sfp_lock_release>
 8008f4c:	230c      	movs	r3, #12
 8008f4e:	603b      	str	r3, [r7, #0]
 8008f50:	e7ee      	b.n	8008f30 <__sfp+0x60>
 8008f52:	bf00      	nop
 8008f54:	0800a4e0 	.word	0x0800a4e0
 8008f58:	ffff0001 	.word	0xffff0001

08008f5c <_fwalk_reent>:
 8008f5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f60:	4606      	mov	r6, r0
 8008f62:	4688      	mov	r8, r1
 8008f64:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008f68:	2700      	movs	r7, #0
 8008f6a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008f6e:	f1b9 0901 	subs.w	r9, r9, #1
 8008f72:	d505      	bpl.n	8008f80 <_fwalk_reent+0x24>
 8008f74:	6824      	ldr	r4, [r4, #0]
 8008f76:	2c00      	cmp	r4, #0
 8008f78:	d1f7      	bne.n	8008f6a <_fwalk_reent+0xe>
 8008f7a:	4638      	mov	r0, r7
 8008f7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f80:	89ab      	ldrh	r3, [r5, #12]
 8008f82:	2b01      	cmp	r3, #1
 8008f84:	d907      	bls.n	8008f96 <_fwalk_reent+0x3a>
 8008f86:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008f8a:	3301      	adds	r3, #1
 8008f8c:	d003      	beq.n	8008f96 <_fwalk_reent+0x3a>
 8008f8e:	4629      	mov	r1, r5
 8008f90:	4630      	mov	r0, r6
 8008f92:	47c0      	blx	r8
 8008f94:	4307      	orrs	r7, r0
 8008f96:	3568      	adds	r5, #104	; 0x68
 8008f98:	e7e9      	b.n	8008f6e <_fwalk_reent+0x12>

08008f9a <__retarget_lock_init_recursive>:
 8008f9a:	4770      	bx	lr

08008f9c <__retarget_lock_acquire_recursive>:
 8008f9c:	4770      	bx	lr

08008f9e <__retarget_lock_release_recursive>:
 8008f9e:	4770      	bx	lr

08008fa0 <__swhatbuf_r>:
 8008fa0:	b570      	push	{r4, r5, r6, lr}
 8008fa2:	460e      	mov	r6, r1
 8008fa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fa8:	2900      	cmp	r1, #0
 8008faa:	b096      	sub	sp, #88	; 0x58
 8008fac:	4614      	mov	r4, r2
 8008fae:	461d      	mov	r5, r3
 8008fb0:	da07      	bge.n	8008fc2 <__swhatbuf_r+0x22>
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	602b      	str	r3, [r5, #0]
 8008fb6:	89b3      	ldrh	r3, [r6, #12]
 8008fb8:	061a      	lsls	r2, r3, #24
 8008fba:	d410      	bmi.n	8008fde <__swhatbuf_r+0x3e>
 8008fbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008fc0:	e00e      	b.n	8008fe0 <__swhatbuf_r+0x40>
 8008fc2:	466a      	mov	r2, sp
 8008fc4:	f000 fdba 	bl	8009b3c <_fstat_r>
 8008fc8:	2800      	cmp	r0, #0
 8008fca:	dbf2      	blt.n	8008fb2 <__swhatbuf_r+0x12>
 8008fcc:	9a01      	ldr	r2, [sp, #4]
 8008fce:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008fd2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008fd6:	425a      	negs	r2, r3
 8008fd8:	415a      	adcs	r2, r3
 8008fda:	602a      	str	r2, [r5, #0]
 8008fdc:	e7ee      	b.n	8008fbc <__swhatbuf_r+0x1c>
 8008fde:	2340      	movs	r3, #64	; 0x40
 8008fe0:	2000      	movs	r0, #0
 8008fe2:	6023      	str	r3, [r4, #0]
 8008fe4:	b016      	add	sp, #88	; 0x58
 8008fe6:	bd70      	pop	{r4, r5, r6, pc}

08008fe8 <__smakebuf_r>:
 8008fe8:	898b      	ldrh	r3, [r1, #12]
 8008fea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008fec:	079d      	lsls	r5, r3, #30
 8008fee:	4606      	mov	r6, r0
 8008ff0:	460c      	mov	r4, r1
 8008ff2:	d507      	bpl.n	8009004 <__smakebuf_r+0x1c>
 8008ff4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008ff8:	6023      	str	r3, [r4, #0]
 8008ffa:	6123      	str	r3, [r4, #16]
 8008ffc:	2301      	movs	r3, #1
 8008ffe:	6163      	str	r3, [r4, #20]
 8009000:	b002      	add	sp, #8
 8009002:	bd70      	pop	{r4, r5, r6, pc}
 8009004:	ab01      	add	r3, sp, #4
 8009006:	466a      	mov	r2, sp
 8009008:	f7ff ffca 	bl	8008fa0 <__swhatbuf_r>
 800900c:	9900      	ldr	r1, [sp, #0]
 800900e:	4605      	mov	r5, r0
 8009010:	4630      	mov	r0, r6
 8009012:	f000 f879 	bl	8009108 <_malloc_r>
 8009016:	b948      	cbnz	r0, 800902c <__smakebuf_r+0x44>
 8009018:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800901c:	059a      	lsls	r2, r3, #22
 800901e:	d4ef      	bmi.n	8009000 <__smakebuf_r+0x18>
 8009020:	f023 0303 	bic.w	r3, r3, #3
 8009024:	f043 0302 	orr.w	r3, r3, #2
 8009028:	81a3      	strh	r3, [r4, #12]
 800902a:	e7e3      	b.n	8008ff4 <__smakebuf_r+0xc>
 800902c:	4b0d      	ldr	r3, [pc, #52]	; (8009064 <__smakebuf_r+0x7c>)
 800902e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009030:	89a3      	ldrh	r3, [r4, #12]
 8009032:	6020      	str	r0, [r4, #0]
 8009034:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009038:	81a3      	strh	r3, [r4, #12]
 800903a:	9b00      	ldr	r3, [sp, #0]
 800903c:	6163      	str	r3, [r4, #20]
 800903e:	9b01      	ldr	r3, [sp, #4]
 8009040:	6120      	str	r0, [r4, #16]
 8009042:	b15b      	cbz	r3, 800905c <__smakebuf_r+0x74>
 8009044:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009048:	4630      	mov	r0, r6
 800904a:	f000 fd89 	bl	8009b60 <_isatty_r>
 800904e:	b128      	cbz	r0, 800905c <__smakebuf_r+0x74>
 8009050:	89a3      	ldrh	r3, [r4, #12]
 8009052:	f023 0303 	bic.w	r3, r3, #3
 8009056:	f043 0301 	orr.w	r3, r3, #1
 800905a:	81a3      	strh	r3, [r4, #12]
 800905c:	89a0      	ldrh	r0, [r4, #12]
 800905e:	4305      	orrs	r5, r0
 8009060:	81a5      	strh	r5, [r4, #12]
 8009062:	e7cd      	b.n	8009000 <__smakebuf_r+0x18>
 8009064:	08008df9 	.word	0x08008df9

08009068 <_free_r>:
 8009068:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800906a:	2900      	cmp	r1, #0
 800906c:	d048      	beq.n	8009100 <_free_r+0x98>
 800906e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009072:	9001      	str	r0, [sp, #4]
 8009074:	2b00      	cmp	r3, #0
 8009076:	f1a1 0404 	sub.w	r4, r1, #4
 800907a:	bfb8      	it	lt
 800907c:	18e4      	addlt	r4, r4, r3
 800907e:	f000 fdb9 	bl	8009bf4 <__malloc_lock>
 8009082:	4a20      	ldr	r2, [pc, #128]	; (8009104 <_free_r+0x9c>)
 8009084:	9801      	ldr	r0, [sp, #4]
 8009086:	6813      	ldr	r3, [r2, #0]
 8009088:	4615      	mov	r5, r2
 800908a:	b933      	cbnz	r3, 800909a <_free_r+0x32>
 800908c:	6063      	str	r3, [r4, #4]
 800908e:	6014      	str	r4, [r2, #0]
 8009090:	b003      	add	sp, #12
 8009092:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009096:	f000 bdb3 	b.w	8009c00 <__malloc_unlock>
 800909a:	42a3      	cmp	r3, r4
 800909c:	d90b      	bls.n	80090b6 <_free_r+0x4e>
 800909e:	6821      	ldr	r1, [r4, #0]
 80090a0:	1862      	adds	r2, r4, r1
 80090a2:	4293      	cmp	r3, r2
 80090a4:	bf04      	itt	eq
 80090a6:	681a      	ldreq	r2, [r3, #0]
 80090a8:	685b      	ldreq	r3, [r3, #4]
 80090aa:	6063      	str	r3, [r4, #4]
 80090ac:	bf04      	itt	eq
 80090ae:	1852      	addeq	r2, r2, r1
 80090b0:	6022      	streq	r2, [r4, #0]
 80090b2:	602c      	str	r4, [r5, #0]
 80090b4:	e7ec      	b.n	8009090 <_free_r+0x28>
 80090b6:	461a      	mov	r2, r3
 80090b8:	685b      	ldr	r3, [r3, #4]
 80090ba:	b10b      	cbz	r3, 80090c0 <_free_r+0x58>
 80090bc:	42a3      	cmp	r3, r4
 80090be:	d9fa      	bls.n	80090b6 <_free_r+0x4e>
 80090c0:	6811      	ldr	r1, [r2, #0]
 80090c2:	1855      	adds	r5, r2, r1
 80090c4:	42a5      	cmp	r5, r4
 80090c6:	d10b      	bne.n	80090e0 <_free_r+0x78>
 80090c8:	6824      	ldr	r4, [r4, #0]
 80090ca:	4421      	add	r1, r4
 80090cc:	1854      	adds	r4, r2, r1
 80090ce:	42a3      	cmp	r3, r4
 80090d0:	6011      	str	r1, [r2, #0]
 80090d2:	d1dd      	bne.n	8009090 <_free_r+0x28>
 80090d4:	681c      	ldr	r4, [r3, #0]
 80090d6:	685b      	ldr	r3, [r3, #4]
 80090d8:	6053      	str	r3, [r2, #4]
 80090da:	4421      	add	r1, r4
 80090dc:	6011      	str	r1, [r2, #0]
 80090de:	e7d7      	b.n	8009090 <_free_r+0x28>
 80090e0:	d902      	bls.n	80090e8 <_free_r+0x80>
 80090e2:	230c      	movs	r3, #12
 80090e4:	6003      	str	r3, [r0, #0]
 80090e6:	e7d3      	b.n	8009090 <_free_r+0x28>
 80090e8:	6825      	ldr	r5, [r4, #0]
 80090ea:	1961      	adds	r1, r4, r5
 80090ec:	428b      	cmp	r3, r1
 80090ee:	bf04      	itt	eq
 80090f0:	6819      	ldreq	r1, [r3, #0]
 80090f2:	685b      	ldreq	r3, [r3, #4]
 80090f4:	6063      	str	r3, [r4, #4]
 80090f6:	bf04      	itt	eq
 80090f8:	1949      	addeq	r1, r1, r5
 80090fa:	6021      	streq	r1, [r4, #0]
 80090fc:	6054      	str	r4, [r2, #4]
 80090fe:	e7c7      	b.n	8009090 <_free_r+0x28>
 8009100:	b003      	add	sp, #12
 8009102:	bd30      	pop	{r4, r5, pc}
 8009104:	200002e4 	.word	0x200002e4

08009108 <_malloc_r>:
 8009108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800910a:	1ccd      	adds	r5, r1, #3
 800910c:	f025 0503 	bic.w	r5, r5, #3
 8009110:	3508      	adds	r5, #8
 8009112:	2d0c      	cmp	r5, #12
 8009114:	bf38      	it	cc
 8009116:	250c      	movcc	r5, #12
 8009118:	2d00      	cmp	r5, #0
 800911a:	4606      	mov	r6, r0
 800911c:	db01      	blt.n	8009122 <_malloc_r+0x1a>
 800911e:	42a9      	cmp	r1, r5
 8009120:	d903      	bls.n	800912a <_malloc_r+0x22>
 8009122:	230c      	movs	r3, #12
 8009124:	6033      	str	r3, [r6, #0]
 8009126:	2000      	movs	r0, #0
 8009128:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800912a:	f000 fd63 	bl	8009bf4 <__malloc_lock>
 800912e:	4921      	ldr	r1, [pc, #132]	; (80091b4 <_malloc_r+0xac>)
 8009130:	680a      	ldr	r2, [r1, #0]
 8009132:	4614      	mov	r4, r2
 8009134:	b99c      	cbnz	r4, 800915e <_malloc_r+0x56>
 8009136:	4f20      	ldr	r7, [pc, #128]	; (80091b8 <_malloc_r+0xb0>)
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	b923      	cbnz	r3, 8009146 <_malloc_r+0x3e>
 800913c:	4621      	mov	r1, r4
 800913e:	4630      	mov	r0, r6
 8009140:	f000 fc86 	bl	8009a50 <_sbrk_r>
 8009144:	6038      	str	r0, [r7, #0]
 8009146:	4629      	mov	r1, r5
 8009148:	4630      	mov	r0, r6
 800914a:	f000 fc81 	bl	8009a50 <_sbrk_r>
 800914e:	1c43      	adds	r3, r0, #1
 8009150:	d123      	bne.n	800919a <_malloc_r+0x92>
 8009152:	230c      	movs	r3, #12
 8009154:	6033      	str	r3, [r6, #0]
 8009156:	4630      	mov	r0, r6
 8009158:	f000 fd52 	bl	8009c00 <__malloc_unlock>
 800915c:	e7e3      	b.n	8009126 <_malloc_r+0x1e>
 800915e:	6823      	ldr	r3, [r4, #0]
 8009160:	1b5b      	subs	r3, r3, r5
 8009162:	d417      	bmi.n	8009194 <_malloc_r+0x8c>
 8009164:	2b0b      	cmp	r3, #11
 8009166:	d903      	bls.n	8009170 <_malloc_r+0x68>
 8009168:	6023      	str	r3, [r4, #0]
 800916a:	441c      	add	r4, r3
 800916c:	6025      	str	r5, [r4, #0]
 800916e:	e004      	b.n	800917a <_malloc_r+0x72>
 8009170:	6863      	ldr	r3, [r4, #4]
 8009172:	42a2      	cmp	r2, r4
 8009174:	bf0c      	ite	eq
 8009176:	600b      	streq	r3, [r1, #0]
 8009178:	6053      	strne	r3, [r2, #4]
 800917a:	4630      	mov	r0, r6
 800917c:	f000 fd40 	bl	8009c00 <__malloc_unlock>
 8009180:	f104 000b 	add.w	r0, r4, #11
 8009184:	1d23      	adds	r3, r4, #4
 8009186:	f020 0007 	bic.w	r0, r0, #7
 800918a:	1ac2      	subs	r2, r0, r3
 800918c:	d0cc      	beq.n	8009128 <_malloc_r+0x20>
 800918e:	1a1b      	subs	r3, r3, r0
 8009190:	50a3      	str	r3, [r4, r2]
 8009192:	e7c9      	b.n	8009128 <_malloc_r+0x20>
 8009194:	4622      	mov	r2, r4
 8009196:	6864      	ldr	r4, [r4, #4]
 8009198:	e7cc      	b.n	8009134 <_malloc_r+0x2c>
 800919a:	1cc4      	adds	r4, r0, #3
 800919c:	f024 0403 	bic.w	r4, r4, #3
 80091a0:	42a0      	cmp	r0, r4
 80091a2:	d0e3      	beq.n	800916c <_malloc_r+0x64>
 80091a4:	1a21      	subs	r1, r4, r0
 80091a6:	4630      	mov	r0, r6
 80091a8:	f000 fc52 	bl	8009a50 <_sbrk_r>
 80091ac:	3001      	adds	r0, #1
 80091ae:	d1dd      	bne.n	800916c <_malloc_r+0x64>
 80091b0:	e7cf      	b.n	8009152 <_malloc_r+0x4a>
 80091b2:	bf00      	nop
 80091b4:	200002e4 	.word	0x200002e4
 80091b8:	200002e8 	.word	0x200002e8

080091bc <__ssputs_r>:
 80091bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091c0:	688e      	ldr	r6, [r1, #8]
 80091c2:	429e      	cmp	r6, r3
 80091c4:	4682      	mov	sl, r0
 80091c6:	460c      	mov	r4, r1
 80091c8:	4690      	mov	r8, r2
 80091ca:	461f      	mov	r7, r3
 80091cc:	d838      	bhi.n	8009240 <__ssputs_r+0x84>
 80091ce:	898a      	ldrh	r2, [r1, #12]
 80091d0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80091d4:	d032      	beq.n	800923c <__ssputs_r+0x80>
 80091d6:	6825      	ldr	r5, [r4, #0]
 80091d8:	6909      	ldr	r1, [r1, #16]
 80091da:	eba5 0901 	sub.w	r9, r5, r1
 80091de:	6965      	ldr	r5, [r4, #20]
 80091e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80091e4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80091e8:	3301      	adds	r3, #1
 80091ea:	444b      	add	r3, r9
 80091ec:	106d      	asrs	r5, r5, #1
 80091ee:	429d      	cmp	r5, r3
 80091f0:	bf38      	it	cc
 80091f2:	461d      	movcc	r5, r3
 80091f4:	0553      	lsls	r3, r2, #21
 80091f6:	d531      	bpl.n	800925c <__ssputs_r+0xa0>
 80091f8:	4629      	mov	r1, r5
 80091fa:	f7ff ff85 	bl	8009108 <_malloc_r>
 80091fe:	4606      	mov	r6, r0
 8009200:	b950      	cbnz	r0, 8009218 <__ssputs_r+0x5c>
 8009202:	230c      	movs	r3, #12
 8009204:	f8ca 3000 	str.w	r3, [sl]
 8009208:	89a3      	ldrh	r3, [r4, #12]
 800920a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800920e:	81a3      	strh	r3, [r4, #12]
 8009210:	f04f 30ff 	mov.w	r0, #4294967295
 8009214:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009218:	6921      	ldr	r1, [r4, #16]
 800921a:	464a      	mov	r2, r9
 800921c:	f000 fcc2 	bl	8009ba4 <memcpy>
 8009220:	89a3      	ldrh	r3, [r4, #12]
 8009222:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009226:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800922a:	81a3      	strh	r3, [r4, #12]
 800922c:	6126      	str	r6, [r4, #16]
 800922e:	6165      	str	r5, [r4, #20]
 8009230:	444e      	add	r6, r9
 8009232:	eba5 0509 	sub.w	r5, r5, r9
 8009236:	6026      	str	r6, [r4, #0]
 8009238:	60a5      	str	r5, [r4, #8]
 800923a:	463e      	mov	r6, r7
 800923c:	42be      	cmp	r6, r7
 800923e:	d900      	bls.n	8009242 <__ssputs_r+0x86>
 8009240:	463e      	mov	r6, r7
 8009242:	4632      	mov	r2, r6
 8009244:	6820      	ldr	r0, [r4, #0]
 8009246:	4641      	mov	r1, r8
 8009248:	f000 fcba 	bl	8009bc0 <memmove>
 800924c:	68a3      	ldr	r3, [r4, #8]
 800924e:	6822      	ldr	r2, [r4, #0]
 8009250:	1b9b      	subs	r3, r3, r6
 8009252:	4432      	add	r2, r6
 8009254:	60a3      	str	r3, [r4, #8]
 8009256:	6022      	str	r2, [r4, #0]
 8009258:	2000      	movs	r0, #0
 800925a:	e7db      	b.n	8009214 <__ssputs_r+0x58>
 800925c:	462a      	mov	r2, r5
 800925e:	f000 fcd5 	bl	8009c0c <_realloc_r>
 8009262:	4606      	mov	r6, r0
 8009264:	2800      	cmp	r0, #0
 8009266:	d1e1      	bne.n	800922c <__ssputs_r+0x70>
 8009268:	6921      	ldr	r1, [r4, #16]
 800926a:	4650      	mov	r0, sl
 800926c:	f7ff fefc 	bl	8009068 <_free_r>
 8009270:	e7c7      	b.n	8009202 <__ssputs_r+0x46>
	...

08009274 <_svfiprintf_r>:
 8009274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009278:	4698      	mov	r8, r3
 800927a:	898b      	ldrh	r3, [r1, #12]
 800927c:	061b      	lsls	r3, r3, #24
 800927e:	b09d      	sub	sp, #116	; 0x74
 8009280:	4607      	mov	r7, r0
 8009282:	460d      	mov	r5, r1
 8009284:	4614      	mov	r4, r2
 8009286:	d50e      	bpl.n	80092a6 <_svfiprintf_r+0x32>
 8009288:	690b      	ldr	r3, [r1, #16]
 800928a:	b963      	cbnz	r3, 80092a6 <_svfiprintf_r+0x32>
 800928c:	2140      	movs	r1, #64	; 0x40
 800928e:	f7ff ff3b 	bl	8009108 <_malloc_r>
 8009292:	6028      	str	r0, [r5, #0]
 8009294:	6128      	str	r0, [r5, #16]
 8009296:	b920      	cbnz	r0, 80092a2 <_svfiprintf_r+0x2e>
 8009298:	230c      	movs	r3, #12
 800929a:	603b      	str	r3, [r7, #0]
 800929c:	f04f 30ff 	mov.w	r0, #4294967295
 80092a0:	e0d1      	b.n	8009446 <_svfiprintf_r+0x1d2>
 80092a2:	2340      	movs	r3, #64	; 0x40
 80092a4:	616b      	str	r3, [r5, #20]
 80092a6:	2300      	movs	r3, #0
 80092a8:	9309      	str	r3, [sp, #36]	; 0x24
 80092aa:	2320      	movs	r3, #32
 80092ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80092b0:	f8cd 800c 	str.w	r8, [sp, #12]
 80092b4:	2330      	movs	r3, #48	; 0x30
 80092b6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009460 <_svfiprintf_r+0x1ec>
 80092ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80092be:	f04f 0901 	mov.w	r9, #1
 80092c2:	4623      	mov	r3, r4
 80092c4:	469a      	mov	sl, r3
 80092c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80092ca:	b10a      	cbz	r2, 80092d0 <_svfiprintf_r+0x5c>
 80092cc:	2a25      	cmp	r2, #37	; 0x25
 80092ce:	d1f9      	bne.n	80092c4 <_svfiprintf_r+0x50>
 80092d0:	ebba 0b04 	subs.w	fp, sl, r4
 80092d4:	d00b      	beq.n	80092ee <_svfiprintf_r+0x7a>
 80092d6:	465b      	mov	r3, fp
 80092d8:	4622      	mov	r2, r4
 80092da:	4629      	mov	r1, r5
 80092dc:	4638      	mov	r0, r7
 80092de:	f7ff ff6d 	bl	80091bc <__ssputs_r>
 80092e2:	3001      	adds	r0, #1
 80092e4:	f000 80aa 	beq.w	800943c <_svfiprintf_r+0x1c8>
 80092e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80092ea:	445a      	add	r2, fp
 80092ec:	9209      	str	r2, [sp, #36]	; 0x24
 80092ee:	f89a 3000 	ldrb.w	r3, [sl]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	f000 80a2 	beq.w	800943c <_svfiprintf_r+0x1c8>
 80092f8:	2300      	movs	r3, #0
 80092fa:	f04f 32ff 	mov.w	r2, #4294967295
 80092fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009302:	f10a 0a01 	add.w	sl, sl, #1
 8009306:	9304      	str	r3, [sp, #16]
 8009308:	9307      	str	r3, [sp, #28]
 800930a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800930e:	931a      	str	r3, [sp, #104]	; 0x68
 8009310:	4654      	mov	r4, sl
 8009312:	2205      	movs	r2, #5
 8009314:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009318:	4851      	ldr	r0, [pc, #324]	; (8009460 <_svfiprintf_r+0x1ec>)
 800931a:	f7f6 ff71 	bl	8000200 <memchr>
 800931e:	9a04      	ldr	r2, [sp, #16]
 8009320:	b9d8      	cbnz	r0, 800935a <_svfiprintf_r+0xe6>
 8009322:	06d0      	lsls	r0, r2, #27
 8009324:	bf44      	itt	mi
 8009326:	2320      	movmi	r3, #32
 8009328:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800932c:	0711      	lsls	r1, r2, #28
 800932e:	bf44      	itt	mi
 8009330:	232b      	movmi	r3, #43	; 0x2b
 8009332:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009336:	f89a 3000 	ldrb.w	r3, [sl]
 800933a:	2b2a      	cmp	r3, #42	; 0x2a
 800933c:	d015      	beq.n	800936a <_svfiprintf_r+0xf6>
 800933e:	9a07      	ldr	r2, [sp, #28]
 8009340:	4654      	mov	r4, sl
 8009342:	2000      	movs	r0, #0
 8009344:	f04f 0c0a 	mov.w	ip, #10
 8009348:	4621      	mov	r1, r4
 800934a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800934e:	3b30      	subs	r3, #48	; 0x30
 8009350:	2b09      	cmp	r3, #9
 8009352:	d94e      	bls.n	80093f2 <_svfiprintf_r+0x17e>
 8009354:	b1b0      	cbz	r0, 8009384 <_svfiprintf_r+0x110>
 8009356:	9207      	str	r2, [sp, #28]
 8009358:	e014      	b.n	8009384 <_svfiprintf_r+0x110>
 800935a:	eba0 0308 	sub.w	r3, r0, r8
 800935e:	fa09 f303 	lsl.w	r3, r9, r3
 8009362:	4313      	orrs	r3, r2
 8009364:	9304      	str	r3, [sp, #16]
 8009366:	46a2      	mov	sl, r4
 8009368:	e7d2      	b.n	8009310 <_svfiprintf_r+0x9c>
 800936a:	9b03      	ldr	r3, [sp, #12]
 800936c:	1d19      	adds	r1, r3, #4
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	9103      	str	r1, [sp, #12]
 8009372:	2b00      	cmp	r3, #0
 8009374:	bfbb      	ittet	lt
 8009376:	425b      	neglt	r3, r3
 8009378:	f042 0202 	orrlt.w	r2, r2, #2
 800937c:	9307      	strge	r3, [sp, #28]
 800937e:	9307      	strlt	r3, [sp, #28]
 8009380:	bfb8      	it	lt
 8009382:	9204      	strlt	r2, [sp, #16]
 8009384:	7823      	ldrb	r3, [r4, #0]
 8009386:	2b2e      	cmp	r3, #46	; 0x2e
 8009388:	d10c      	bne.n	80093a4 <_svfiprintf_r+0x130>
 800938a:	7863      	ldrb	r3, [r4, #1]
 800938c:	2b2a      	cmp	r3, #42	; 0x2a
 800938e:	d135      	bne.n	80093fc <_svfiprintf_r+0x188>
 8009390:	9b03      	ldr	r3, [sp, #12]
 8009392:	1d1a      	adds	r2, r3, #4
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	9203      	str	r2, [sp, #12]
 8009398:	2b00      	cmp	r3, #0
 800939a:	bfb8      	it	lt
 800939c:	f04f 33ff 	movlt.w	r3, #4294967295
 80093a0:	3402      	adds	r4, #2
 80093a2:	9305      	str	r3, [sp, #20]
 80093a4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009470 <_svfiprintf_r+0x1fc>
 80093a8:	7821      	ldrb	r1, [r4, #0]
 80093aa:	2203      	movs	r2, #3
 80093ac:	4650      	mov	r0, sl
 80093ae:	f7f6 ff27 	bl	8000200 <memchr>
 80093b2:	b140      	cbz	r0, 80093c6 <_svfiprintf_r+0x152>
 80093b4:	2340      	movs	r3, #64	; 0x40
 80093b6:	eba0 000a 	sub.w	r0, r0, sl
 80093ba:	fa03 f000 	lsl.w	r0, r3, r0
 80093be:	9b04      	ldr	r3, [sp, #16]
 80093c0:	4303      	orrs	r3, r0
 80093c2:	3401      	adds	r4, #1
 80093c4:	9304      	str	r3, [sp, #16]
 80093c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093ca:	4826      	ldr	r0, [pc, #152]	; (8009464 <_svfiprintf_r+0x1f0>)
 80093cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80093d0:	2206      	movs	r2, #6
 80093d2:	f7f6 ff15 	bl	8000200 <memchr>
 80093d6:	2800      	cmp	r0, #0
 80093d8:	d038      	beq.n	800944c <_svfiprintf_r+0x1d8>
 80093da:	4b23      	ldr	r3, [pc, #140]	; (8009468 <_svfiprintf_r+0x1f4>)
 80093dc:	bb1b      	cbnz	r3, 8009426 <_svfiprintf_r+0x1b2>
 80093de:	9b03      	ldr	r3, [sp, #12]
 80093e0:	3307      	adds	r3, #7
 80093e2:	f023 0307 	bic.w	r3, r3, #7
 80093e6:	3308      	adds	r3, #8
 80093e8:	9303      	str	r3, [sp, #12]
 80093ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093ec:	4433      	add	r3, r6
 80093ee:	9309      	str	r3, [sp, #36]	; 0x24
 80093f0:	e767      	b.n	80092c2 <_svfiprintf_r+0x4e>
 80093f2:	fb0c 3202 	mla	r2, ip, r2, r3
 80093f6:	460c      	mov	r4, r1
 80093f8:	2001      	movs	r0, #1
 80093fa:	e7a5      	b.n	8009348 <_svfiprintf_r+0xd4>
 80093fc:	2300      	movs	r3, #0
 80093fe:	3401      	adds	r4, #1
 8009400:	9305      	str	r3, [sp, #20]
 8009402:	4619      	mov	r1, r3
 8009404:	f04f 0c0a 	mov.w	ip, #10
 8009408:	4620      	mov	r0, r4
 800940a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800940e:	3a30      	subs	r2, #48	; 0x30
 8009410:	2a09      	cmp	r2, #9
 8009412:	d903      	bls.n	800941c <_svfiprintf_r+0x1a8>
 8009414:	2b00      	cmp	r3, #0
 8009416:	d0c5      	beq.n	80093a4 <_svfiprintf_r+0x130>
 8009418:	9105      	str	r1, [sp, #20]
 800941a:	e7c3      	b.n	80093a4 <_svfiprintf_r+0x130>
 800941c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009420:	4604      	mov	r4, r0
 8009422:	2301      	movs	r3, #1
 8009424:	e7f0      	b.n	8009408 <_svfiprintf_r+0x194>
 8009426:	ab03      	add	r3, sp, #12
 8009428:	9300      	str	r3, [sp, #0]
 800942a:	462a      	mov	r2, r5
 800942c:	4b0f      	ldr	r3, [pc, #60]	; (800946c <_svfiprintf_r+0x1f8>)
 800942e:	a904      	add	r1, sp, #16
 8009430:	4638      	mov	r0, r7
 8009432:	f3af 8000 	nop.w
 8009436:	1c42      	adds	r2, r0, #1
 8009438:	4606      	mov	r6, r0
 800943a:	d1d6      	bne.n	80093ea <_svfiprintf_r+0x176>
 800943c:	89ab      	ldrh	r3, [r5, #12]
 800943e:	065b      	lsls	r3, r3, #25
 8009440:	f53f af2c 	bmi.w	800929c <_svfiprintf_r+0x28>
 8009444:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009446:	b01d      	add	sp, #116	; 0x74
 8009448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800944c:	ab03      	add	r3, sp, #12
 800944e:	9300      	str	r3, [sp, #0]
 8009450:	462a      	mov	r2, r5
 8009452:	4b06      	ldr	r3, [pc, #24]	; (800946c <_svfiprintf_r+0x1f8>)
 8009454:	a904      	add	r1, sp, #16
 8009456:	4638      	mov	r0, r7
 8009458:	f000 f9d4 	bl	8009804 <_printf_i>
 800945c:	e7eb      	b.n	8009436 <_svfiprintf_r+0x1c2>
 800945e:	bf00      	nop
 8009460:	0800a544 	.word	0x0800a544
 8009464:	0800a54e 	.word	0x0800a54e
 8009468:	00000000 	.word	0x00000000
 800946c:	080091bd 	.word	0x080091bd
 8009470:	0800a54a 	.word	0x0800a54a

08009474 <__sfputc_r>:
 8009474:	6893      	ldr	r3, [r2, #8]
 8009476:	3b01      	subs	r3, #1
 8009478:	2b00      	cmp	r3, #0
 800947a:	b410      	push	{r4}
 800947c:	6093      	str	r3, [r2, #8]
 800947e:	da08      	bge.n	8009492 <__sfputc_r+0x1e>
 8009480:	6994      	ldr	r4, [r2, #24]
 8009482:	42a3      	cmp	r3, r4
 8009484:	db01      	blt.n	800948a <__sfputc_r+0x16>
 8009486:	290a      	cmp	r1, #10
 8009488:	d103      	bne.n	8009492 <__sfputc_r+0x1e>
 800948a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800948e:	f7ff bb0d 	b.w	8008aac <__swbuf_r>
 8009492:	6813      	ldr	r3, [r2, #0]
 8009494:	1c58      	adds	r0, r3, #1
 8009496:	6010      	str	r0, [r2, #0]
 8009498:	7019      	strb	r1, [r3, #0]
 800949a:	4608      	mov	r0, r1
 800949c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80094a0:	4770      	bx	lr

080094a2 <__sfputs_r>:
 80094a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094a4:	4606      	mov	r6, r0
 80094a6:	460f      	mov	r7, r1
 80094a8:	4614      	mov	r4, r2
 80094aa:	18d5      	adds	r5, r2, r3
 80094ac:	42ac      	cmp	r4, r5
 80094ae:	d101      	bne.n	80094b4 <__sfputs_r+0x12>
 80094b0:	2000      	movs	r0, #0
 80094b2:	e007      	b.n	80094c4 <__sfputs_r+0x22>
 80094b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094b8:	463a      	mov	r2, r7
 80094ba:	4630      	mov	r0, r6
 80094bc:	f7ff ffda 	bl	8009474 <__sfputc_r>
 80094c0:	1c43      	adds	r3, r0, #1
 80094c2:	d1f3      	bne.n	80094ac <__sfputs_r+0xa>
 80094c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080094c8 <_vfiprintf_r>:
 80094c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094cc:	460d      	mov	r5, r1
 80094ce:	b09d      	sub	sp, #116	; 0x74
 80094d0:	4614      	mov	r4, r2
 80094d2:	4698      	mov	r8, r3
 80094d4:	4606      	mov	r6, r0
 80094d6:	b118      	cbz	r0, 80094e0 <_vfiprintf_r+0x18>
 80094d8:	6983      	ldr	r3, [r0, #24]
 80094da:	b90b      	cbnz	r3, 80094e0 <_vfiprintf_r+0x18>
 80094dc:	f7ff fcc0 	bl	8008e60 <__sinit>
 80094e0:	4b89      	ldr	r3, [pc, #548]	; (8009708 <_vfiprintf_r+0x240>)
 80094e2:	429d      	cmp	r5, r3
 80094e4:	d11b      	bne.n	800951e <_vfiprintf_r+0x56>
 80094e6:	6875      	ldr	r5, [r6, #4]
 80094e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80094ea:	07d9      	lsls	r1, r3, #31
 80094ec:	d405      	bmi.n	80094fa <_vfiprintf_r+0x32>
 80094ee:	89ab      	ldrh	r3, [r5, #12]
 80094f0:	059a      	lsls	r2, r3, #22
 80094f2:	d402      	bmi.n	80094fa <_vfiprintf_r+0x32>
 80094f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80094f6:	f7ff fd51 	bl	8008f9c <__retarget_lock_acquire_recursive>
 80094fa:	89ab      	ldrh	r3, [r5, #12]
 80094fc:	071b      	lsls	r3, r3, #28
 80094fe:	d501      	bpl.n	8009504 <_vfiprintf_r+0x3c>
 8009500:	692b      	ldr	r3, [r5, #16]
 8009502:	b9eb      	cbnz	r3, 8009540 <_vfiprintf_r+0x78>
 8009504:	4629      	mov	r1, r5
 8009506:	4630      	mov	r0, r6
 8009508:	f7ff fb22 	bl	8008b50 <__swsetup_r>
 800950c:	b1c0      	cbz	r0, 8009540 <_vfiprintf_r+0x78>
 800950e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009510:	07dc      	lsls	r4, r3, #31
 8009512:	d50e      	bpl.n	8009532 <_vfiprintf_r+0x6a>
 8009514:	f04f 30ff 	mov.w	r0, #4294967295
 8009518:	b01d      	add	sp, #116	; 0x74
 800951a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800951e:	4b7b      	ldr	r3, [pc, #492]	; (800970c <_vfiprintf_r+0x244>)
 8009520:	429d      	cmp	r5, r3
 8009522:	d101      	bne.n	8009528 <_vfiprintf_r+0x60>
 8009524:	68b5      	ldr	r5, [r6, #8]
 8009526:	e7df      	b.n	80094e8 <_vfiprintf_r+0x20>
 8009528:	4b79      	ldr	r3, [pc, #484]	; (8009710 <_vfiprintf_r+0x248>)
 800952a:	429d      	cmp	r5, r3
 800952c:	bf08      	it	eq
 800952e:	68f5      	ldreq	r5, [r6, #12]
 8009530:	e7da      	b.n	80094e8 <_vfiprintf_r+0x20>
 8009532:	89ab      	ldrh	r3, [r5, #12]
 8009534:	0598      	lsls	r0, r3, #22
 8009536:	d4ed      	bmi.n	8009514 <_vfiprintf_r+0x4c>
 8009538:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800953a:	f7ff fd30 	bl	8008f9e <__retarget_lock_release_recursive>
 800953e:	e7e9      	b.n	8009514 <_vfiprintf_r+0x4c>
 8009540:	2300      	movs	r3, #0
 8009542:	9309      	str	r3, [sp, #36]	; 0x24
 8009544:	2320      	movs	r3, #32
 8009546:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800954a:	f8cd 800c 	str.w	r8, [sp, #12]
 800954e:	2330      	movs	r3, #48	; 0x30
 8009550:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009714 <_vfiprintf_r+0x24c>
 8009554:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009558:	f04f 0901 	mov.w	r9, #1
 800955c:	4623      	mov	r3, r4
 800955e:	469a      	mov	sl, r3
 8009560:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009564:	b10a      	cbz	r2, 800956a <_vfiprintf_r+0xa2>
 8009566:	2a25      	cmp	r2, #37	; 0x25
 8009568:	d1f9      	bne.n	800955e <_vfiprintf_r+0x96>
 800956a:	ebba 0b04 	subs.w	fp, sl, r4
 800956e:	d00b      	beq.n	8009588 <_vfiprintf_r+0xc0>
 8009570:	465b      	mov	r3, fp
 8009572:	4622      	mov	r2, r4
 8009574:	4629      	mov	r1, r5
 8009576:	4630      	mov	r0, r6
 8009578:	f7ff ff93 	bl	80094a2 <__sfputs_r>
 800957c:	3001      	adds	r0, #1
 800957e:	f000 80aa 	beq.w	80096d6 <_vfiprintf_r+0x20e>
 8009582:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009584:	445a      	add	r2, fp
 8009586:	9209      	str	r2, [sp, #36]	; 0x24
 8009588:	f89a 3000 	ldrb.w	r3, [sl]
 800958c:	2b00      	cmp	r3, #0
 800958e:	f000 80a2 	beq.w	80096d6 <_vfiprintf_r+0x20e>
 8009592:	2300      	movs	r3, #0
 8009594:	f04f 32ff 	mov.w	r2, #4294967295
 8009598:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800959c:	f10a 0a01 	add.w	sl, sl, #1
 80095a0:	9304      	str	r3, [sp, #16]
 80095a2:	9307      	str	r3, [sp, #28]
 80095a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80095a8:	931a      	str	r3, [sp, #104]	; 0x68
 80095aa:	4654      	mov	r4, sl
 80095ac:	2205      	movs	r2, #5
 80095ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095b2:	4858      	ldr	r0, [pc, #352]	; (8009714 <_vfiprintf_r+0x24c>)
 80095b4:	f7f6 fe24 	bl	8000200 <memchr>
 80095b8:	9a04      	ldr	r2, [sp, #16]
 80095ba:	b9d8      	cbnz	r0, 80095f4 <_vfiprintf_r+0x12c>
 80095bc:	06d1      	lsls	r1, r2, #27
 80095be:	bf44      	itt	mi
 80095c0:	2320      	movmi	r3, #32
 80095c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80095c6:	0713      	lsls	r3, r2, #28
 80095c8:	bf44      	itt	mi
 80095ca:	232b      	movmi	r3, #43	; 0x2b
 80095cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80095d0:	f89a 3000 	ldrb.w	r3, [sl]
 80095d4:	2b2a      	cmp	r3, #42	; 0x2a
 80095d6:	d015      	beq.n	8009604 <_vfiprintf_r+0x13c>
 80095d8:	9a07      	ldr	r2, [sp, #28]
 80095da:	4654      	mov	r4, sl
 80095dc:	2000      	movs	r0, #0
 80095de:	f04f 0c0a 	mov.w	ip, #10
 80095e2:	4621      	mov	r1, r4
 80095e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80095e8:	3b30      	subs	r3, #48	; 0x30
 80095ea:	2b09      	cmp	r3, #9
 80095ec:	d94e      	bls.n	800968c <_vfiprintf_r+0x1c4>
 80095ee:	b1b0      	cbz	r0, 800961e <_vfiprintf_r+0x156>
 80095f0:	9207      	str	r2, [sp, #28]
 80095f2:	e014      	b.n	800961e <_vfiprintf_r+0x156>
 80095f4:	eba0 0308 	sub.w	r3, r0, r8
 80095f8:	fa09 f303 	lsl.w	r3, r9, r3
 80095fc:	4313      	orrs	r3, r2
 80095fe:	9304      	str	r3, [sp, #16]
 8009600:	46a2      	mov	sl, r4
 8009602:	e7d2      	b.n	80095aa <_vfiprintf_r+0xe2>
 8009604:	9b03      	ldr	r3, [sp, #12]
 8009606:	1d19      	adds	r1, r3, #4
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	9103      	str	r1, [sp, #12]
 800960c:	2b00      	cmp	r3, #0
 800960e:	bfbb      	ittet	lt
 8009610:	425b      	neglt	r3, r3
 8009612:	f042 0202 	orrlt.w	r2, r2, #2
 8009616:	9307      	strge	r3, [sp, #28]
 8009618:	9307      	strlt	r3, [sp, #28]
 800961a:	bfb8      	it	lt
 800961c:	9204      	strlt	r2, [sp, #16]
 800961e:	7823      	ldrb	r3, [r4, #0]
 8009620:	2b2e      	cmp	r3, #46	; 0x2e
 8009622:	d10c      	bne.n	800963e <_vfiprintf_r+0x176>
 8009624:	7863      	ldrb	r3, [r4, #1]
 8009626:	2b2a      	cmp	r3, #42	; 0x2a
 8009628:	d135      	bne.n	8009696 <_vfiprintf_r+0x1ce>
 800962a:	9b03      	ldr	r3, [sp, #12]
 800962c:	1d1a      	adds	r2, r3, #4
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	9203      	str	r2, [sp, #12]
 8009632:	2b00      	cmp	r3, #0
 8009634:	bfb8      	it	lt
 8009636:	f04f 33ff 	movlt.w	r3, #4294967295
 800963a:	3402      	adds	r4, #2
 800963c:	9305      	str	r3, [sp, #20]
 800963e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009724 <_vfiprintf_r+0x25c>
 8009642:	7821      	ldrb	r1, [r4, #0]
 8009644:	2203      	movs	r2, #3
 8009646:	4650      	mov	r0, sl
 8009648:	f7f6 fdda 	bl	8000200 <memchr>
 800964c:	b140      	cbz	r0, 8009660 <_vfiprintf_r+0x198>
 800964e:	2340      	movs	r3, #64	; 0x40
 8009650:	eba0 000a 	sub.w	r0, r0, sl
 8009654:	fa03 f000 	lsl.w	r0, r3, r0
 8009658:	9b04      	ldr	r3, [sp, #16]
 800965a:	4303      	orrs	r3, r0
 800965c:	3401      	adds	r4, #1
 800965e:	9304      	str	r3, [sp, #16]
 8009660:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009664:	482c      	ldr	r0, [pc, #176]	; (8009718 <_vfiprintf_r+0x250>)
 8009666:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800966a:	2206      	movs	r2, #6
 800966c:	f7f6 fdc8 	bl	8000200 <memchr>
 8009670:	2800      	cmp	r0, #0
 8009672:	d03f      	beq.n	80096f4 <_vfiprintf_r+0x22c>
 8009674:	4b29      	ldr	r3, [pc, #164]	; (800971c <_vfiprintf_r+0x254>)
 8009676:	bb1b      	cbnz	r3, 80096c0 <_vfiprintf_r+0x1f8>
 8009678:	9b03      	ldr	r3, [sp, #12]
 800967a:	3307      	adds	r3, #7
 800967c:	f023 0307 	bic.w	r3, r3, #7
 8009680:	3308      	adds	r3, #8
 8009682:	9303      	str	r3, [sp, #12]
 8009684:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009686:	443b      	add	r3, r7
 8009688:	9309      	str	r3, [sp, #36]	; 0x24
 800968a:	e767      	b.n	800955c <_vfiprintf_r+0x94>
 800968c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009690:	460c      	mov	r4, r1
 8009692:	2001      	movs	r0, #1
 8009694:	e7a5      	b.n	80095e2 <_vfiprintf_r+0x11a>
 8009696:	2300      	movs	r3, #0
 8009698:	3401      	adds	r4, #1
 800969a:	9305      	str	r3, [sp, #20]
 800969c:	4619      	mov	r1, r3
 800969e:	f04f 0c0a 	mov.w	ip, #10
 80096a2:	4620      	mov	r0, r4
 80096a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80096a8:	3a30      	subs	r2, #48	; 0x30
 80096aa:	2a09      	cmp	r2, #9
 80096ac:	d903      	bls.n	80096b6 <_vfiprintf_r+0x1ee>
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d0c5      	beq.n	800963e <_vfiprintf_r+0x176>
 80096b2:	9105      	str	r1, [sp, #20]
 80096b4:	e7c3      	b.n	800963e <_vfiprintf_r+0x176>
 80096b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80096ba:	4604      	mov	r4, r0
 80096bc:	2301      	movs	r3, #1
 80096be:	e7f0      	b.n	80096a2 <_vfiprintf_r+0x1da>
 80096c0:	ab03      	add	r3, sp, #12
 80096c2:	9300      	str	r3, [sp, #0]
 80096c4:	462a      	mov	r2, r5
 80096c6:	4b16      	ldr	r3, [pc, #88]	; (8009720 <_vfiprintf_r+0x258>)
 80096c8:	a904      	add	r1, sp, #16
 80096ca:	4630      	mov	r0, r6
 80096cc:	f3af 8000 	nop.w
 80096d0:	4607      	mov	r7, r0
 80096d2:	1c78      	adds	r0, r7, #1
 80096d4:	d1d6      	bne.n	8009684 <_vfiprintf_r+0x1bc>
 80096d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80096d8:	07d9      	lsls	r1, r3, #31
 80096da:	d405      	bmi.n	80096e8 <_vfiprintf_r+0x220>
 80096dc:	89ab      	ldrh	r3, [r5, #12]
 80096de:	059a      	lsls	r2, r3, #22
 80096e0:	d402      	bmi.n	80096e8 <_vfiprintf_r+0x220>
 80096e2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80096e4:	f7ff fc5b 	bl	8008f9e <__retarget_lock_release_recursive>
 80096e8:	89ab      	ldrh	r3, [r5, #12]
 80096ea:	065b      	lsls	r3, r3, #25
 80096ec:	f53f af12 	bmi.w	8009514 <_vfiprintf_r+0x4c>
 80096f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80096f2:	e711      	b.n	8009518 <_vfiprintf_r+0x50>
 80096f4:	ab03      	add	r3, sp, #12
 80096f6:	9300      	str	r3, [sp, #0]
 80096f8:	462a      	mov	r2, r5
 80096fa:	4b09      	ldr	r3, [pc, #36]	; (8009720 <_vfiprintf_r+0x258>)
 80096fc:	a904      	add	r1, sp, #16
 80096fe:	4630      	mov	r0, r6
 8009700:	f000 f880 	bl	8009804 <_printf_i>
 8009704:	e7e4      	b.n	80096d0 <_vfiprintf_r+0x208>
 8009706:	bf00      	nop
 8009708:	0800a504 	.word	0x0800a504
 800970c:	0800a524 	.word	0x0800a524
 8009710:	0800a4e4 	.word	0x0800a4e4
 8009714:	0800a544 	.word	0x0800a544
 8009718:	0800a54e 	.word	0x0800a54e
 800971c:	00000000 	.word	0x00000000
 8009720:	080094a3 	.word	0x080094a3
 8009724:	0800a54a 	.word	0x0800a54a

08009728 <_printf_common>:
 8009728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800972c:	4616      	mov	r6, r2
 800972e:	4699      	mov	r9, r3
 8009730:	688a      	ldr	r2, [r1, #8]
 8009732:	690b      	ldr	r3, [r1, #16]
 8009734:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009738:	4293      	cmp	r3, r2
 800973a:	bfb8      	it	lt
 800973c:	4613      	movlt	r3, r2
 800973e:	6033      	str	r3, [r6, #0]
 8009740:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009744:	4607      	mov	r7, r0
 8009746:	460c      	mov	r4, r1
 8009748:	b10a      	cbz	r2, 800974e <_printf_common+0x26>
 800974a:	3301      	adds	r3, #1
 800974c:	6033      	str	r3, [r6, #0]
 800974e:	6823      	ldr	r3, [r4, #0]
 8009750:	0699      	lsls	r1, r3, #26
 8009752:	bf42      	ittt	mi
 8009754:	6833      	ldrmi	r3, [r6, #0]
 8009756:	3302      	addmi	r3, #2
 8009758:	6033      	strmi	r3, [r6, #0]
 800975a:	6825      	ldr	r5, [r4, #0]
 800975c:	f015 0506 	ands.w	r5, r5, #6
 8009760:	d106      	bne.n	8009770 <_printf_common+0x48>
 8009762:	f104 0a19 	add.w	sl, r4, #25
 8009766:	68e3      	ldr	r3, [r4, #12]
 8009768:	6832      	ldr	r2, [r6, #0]
 800976a:	1a9b      	subs	r3, r3, r2
 800976c:	42ab      	cmp	r3, r5
 800976e:	dc26      	bgt.n	80097be <_printf_common+0x96>
 8009770:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009774:	1e13      	subs	r3, r2, #0
 8009776:	6822      	ldr	r2, [r4, #0]
 8009778:	bf18      	it	ne
 800977a:	2301      	movne	r3, #1
 800977c:	0692      	lsls	r2, r2, #26
 800977e:	d42b      	bmi.n	80097d8 <_printf_common+0xb0>
 8009780:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009784:	4649      	mov	r1, r9
 8009786:	4638      	mov	r0, r7
 8009788:	47c0      	blx	r8
 800978a:	3001      	adds	r0, #1
 800978c:	d01e      	beq.n	80097cc <_printf_common+0xa4>
 800978e:	6823      	ldr	r3, [r4, #0]
 8009790:	68e5      	ldr	r5, [r4, #12]
 8009792:	6832      	ldr	r2, [r6, #0]
 8009794:	f003 0306 	and.w	r3, r3, #6
 8009798:	2b04      	cmp	r3, #4
 800979a:	bf08      	it	eq
 800979c:	1aad      	subeq	r5, r5, r2
 800979e:	68a3      	ldr	r3, [r4, #8]
 80097a0:	6922      	ldr	r2, [r4, #16]
 80097a2:	bf0c      	ite	eq
 80097a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80097a8:	2500      	movne	r5, #0
 80097aa:	4293      	cmp	r3, r2
 80097ac:	bfc4      	itt	gt
 80097ae:	1a9b      	subgt	r3, r3, r2
 80097b0:	18ed      	addgt	r5, r5, r3
 80097b2:	2600      	movs	r6, #0
 80097b4:	341a      	adds	r4, #26
 80097b6:	42b5      	cmp	r5, r6
 80097b8:	d11a      	bne.n	80097f0 <_printf_common+0xc8>
 80097ba:	2000      	movs	r0, #0
 80097bc:	e008      	b.n	80097d0 <_printf_common+0xa8>
 80097be:	2301      	movs	r3, #1
 80097c0:	4652      	mov	r2, sl
 80097c2:	4649      	mov	r1, r9
 80097c4:	4638      	mov	r0, r7
 80097c6:	47c0      	blx	r8
 80097c8:	3001      	adds	r0, #1
 80097ca:	d103      	bne.n	80097d4 <_printf_common+0xac>
 80097cc:	f04f 30ff 	mov.w	r0, #4294967295
 80097d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097d4:	3501      	adds	r5, #1
 80097d6:	e7c6      	b.n	8009766 <_printf_common+0x3e>
 80097d8:	18e1      	adds	r1, r4, r3
 80097da:	1c5a      	adds	r2, r3, #1
 80097dc:	2030      	movs	r0, #48	; 0x30
 80097de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80097e2:	4422      	add	r2, r4
 80097e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80097e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80097ec:	3302      	adds	r3, #2
 80097ee:	e7c7      	b.n	8009780 <_printf_common+0x58>
 80097f0:	2301      	movs	r3, #1
 80097f2:	4622      	mov	r2, r4
 80097f4:	4649      	mov	r1, r9
 80097f6:	4638      	mov	r0, r7
 80097f8:	47c0      	blx	r8
 80097fa:	3001      	adds	r0, #1
 80097fc:	d0e6      	beq.n	80097cc <_printf_common+0xa4>
 80097fe:	3601      	adds	r6, #1
 8009800:	e7d9      	b.n	80097b6 <_printf_common+0x8e>
	...

08009804 <_printf_i>:
 8009804:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009808:	460c      	mov	r4, r1
 800980a:	4691      	mov	r9, r2
 800980c:	7e27      	ldrb	r7, [r4, #24]
 800980e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009810:	2f78      	cmp	r7, #120	; 0x78
 8009812:	4680      	mov	r8, r0
 8009814:	469a      	mov	sl, r3
 8009816:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800981a:	d807      	bhi.n	800982c <_printf_i+0x28>
 800981c:	2f62      	cmp	r7, #98	; 0x62
 800981e:	d80a      	bhi.n	8009836 <_printf_i+0x32>
 8009820:	2f00      	cmp	r7, #0
 8009822:	f000 80d8 	beq.w	80099d6 <_printf_i+0x1d2>
 8009826:	2f58      	cmp	r7, #88	; 0x58
 8009828:	f000 80a3 	beq.w	8009972 <_printf_i+0x16e>
 800982c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009830:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009834:	e03a      	b.n	80098ac <_printf_i+0xa8>
 8009836:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800983a:	2b15      	cmp	r3, #21
 800983c:	d8f6      	bhi.n	800982c <_printf_i+0x28>
 800983e:	a001      	add	r0, pc, #4	; (adr r0, 8009844 <_printf_i+0x40>)
 8009840:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009844:	0800989d 	.word	0x0800989d
 8009848:	080098b1 	.word	0x080098b1
 800984c:	0800982d 	.word	0x0800982d
 8009850:	0800982d 	.word	0x0800982d
 8009854:	0800982d 	.word	0x0800982d
 8009858:	0800982d 	.word	0x0800982d
 800985c:	080098b1 	.word	0x080098b1
 8009860:	0800982d 	.word	0x0800982d
 8009864:	0800982d 	.word	0x0800982d
 8009868:	0800982d 	.word	0x0800982d
 800986c:	0800982d 	.word	0x0800982d
 8009870:	080099bd 	.word	0x080099bd
 8009874:	080098e1 	.word	0x080098e1
 8009878:	0800999f 	.word	0x0800999f
 800987c:	0800982d 	.word	0x0800982d
 8009880:	0800982d 	.word	0x0800982d
 8009884:	080099df 	.word	0x080099df
 8009888:	0800982d 	.word	0x0800982d
 800988c:	080098e1 	.word	0x080098e1
 8009890:	0800982d 	.word	0x0800982d
 8009894:	0800982d 	.word	0x0800982d
 8009898:	080099a7 	.word	0x080099a7
 800989c:	680b      	ldr	r3, [r1, #0]
 800989e:	1d1a      	adds	r2, r3, #4
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	600a      	str	r2, [r1, #0]
 80098a4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80098a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80098ac:	2301      	movs	r3, #1
 80098ae:	e0a3      	b.n	80099f8 <_printf_i+0x1f4>
 80098b0:	6825      	ldr	r5, [r4, #0]
 80098b2:	6808      	ldr	r0, [r1, #0]
 80098b4:	062e      	lsls	r6, r5, #24
 80098b6:	f100 0304 	add.w	r3, r0, #4
 80098ba:	d50a      	bpl.n	80098d2 <_printf_i+0xce>
 80098bc:	6805      	ldr	r5, [r0, #0]
 80098be:	600b      	str	r3, [r1, #0]
 80098c0:	2d00      	cmp	r5, #0
 80098c2:	da03      	bge.n	80098cc <_printf_i+0xc8>
 80098c4:	232d      	movs	r3, #45	; 0x2d
 80098c6:	426d      	negs	r5, r5
 80098c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80098cc:	485e      	ldr	r0, [pc, #376]	; (8009a48 <_printf_i+0x244>)
 80098ce:	230a      	movs	r3, #10
 80098d0:	e019      	b.n	8009906 <_printf_i+0x102>
 80098d2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80098d6:	6805      	ldr	r5, [r0, #0]
 80098d8:	600b      	str	r3, [r1, #0]
 80098da:	bf18      	it	ne
 80098dc:	b22d      	sxthne	r5, r5
 80098de:	e7ef      	b.n	80098c0 <_printf_i+0xbc>
 80098e0:	680b      	ldr	r3, [r1, #0]
 80098e2:	6825      	ldr	r5, [r4, #0]
 80098e4:	1d18      	adds	r0, r3, #4
 80098e6:	6008      	str	r0, [r1, #0]
 80098e8:	0628      	lsls	r0, r5, #24
 80098ea:	d501      	bpl.n	80098f0 <_printf_i+0xec>
 80098ec:	681d      	ldr	r5, [r3, #0]
 80098ee:	e002      	b.n	80098f6 <_printf_i+0xf2>
 80098f0:	0669      	lsls	r1, r5, #25
 80098f2:	d5fb      	bpl.n	80098ec <_printf_i+0xe8>
 80098f4:	881d      	ldrh	r5, [r3, #0]
 80098f6:	4854      	ldr	r0, [pc, #336]	; (8009a48 <_printf_i+0x244>)
 80098f8:	2f6f      	cmp	r7, #111	; 0x6f
 80098fa:	bf0c      	ite	eq
 80098fc:	2308      	moveq	r3, #8
 80098fe:	230a      	movne	r3, #10
 8009900:	2100      	movs	r1, #0
 8009902:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009906:	6866      	ldr	r6, [r4, #4]
 8009908:	60a6      	str	r6, [r4, #8]
 800990a:	2e00      	cmp	r6, #0
 800990c:	bfa2      	ittt	ge
 800990e:	6821      	ldrge	r1, [r4, #0]
 8009910:	f021 0104 	bicge.w	r1, r1, #4
 8009914:	6021      	strge	r1, [r4, #0]
 8009916:	b90d      	cbnz	r5, 800991c <_printf_i+0x118>
 8009918:	2e00      	cmp	r6, #0
 800991a:	d04d      	beq.n	80099b8 <_printf_i+0x1b4>
 800991c:	4616      	mov	r6, r2
 800991e:	fbb5 f1f3 	udiv	r1, r5, r3
 8009922:	fb03 5711 	mls	r7, r3, r1, r5
 8009926:	5dc7      	ldrb	r7, [r0, r7]
 8009928:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800992c:	462f      	mov	r7, r5
 800992e:	42bb      	cmp	r3, r7
 8009930:	460d      	mov	r5, r1
 8009932:	d9f4      	bls.n	800991e <_printf_i+0x11a>
 8009934:	2b08      	cmp	r3, #8
 8009936:	d10b      	bne.n	8009950 <_printf_i+0x14c>
 8009938:	6823      	ldr	r3, [r4, #0]
 800993a:	07df      	lsls	r7, r3, #31
 800993c:	d508      	bpl.n	8009950 <_printf_i+0x14c>
 800993e:	6923      	ldr	r3, [r4, #16]
 8009940:	6861      	ldr	r1, [r4, #4]
 8009942:	4299      	cmp	r1, r3
 8009944:	bfde      	ittt	le
 8009946:	2330      	movle	r3, #48	; 0x30
 8009948:	f806 3c01 	strble.w	r3, [r6, #-1]
 800994c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009950:	1b92      	subs	r2, r2, r6
 8009952:	6122      	str	r2, [r4, #16]
 8009954:	f8cd a000 	str.w	sl, [sp]
 8009958:	464b      	mov	r3, r9
 800995a:	aa03      	add	r2, sp, #12
 800995c:	4621      	mov	r1, r4
 800995e:	4640      	mov	r0, r8
 8009960:	f7ff fee2 	bl	8009728 <_printf_common>
 8009964:	3001      	adds	r0, #1
 8009966:	d14c      	bne.n	8009a02 <_printf_i+0x1fe>
 8009968:	f04f 30ff 	mov.w	r0, #4294967295
 800996c:	b004      	add	sp, #16
 800996e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009972:	4835      	ldr	r0, [pc, #212]	; (8009a48 <_printf_i+0x244>)
 8009974:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009978:	6823      	ldr	r3, [r4, #0]
 800997a:	680e      	ldr	r6, [r1, #0]
 800997c:	061f      	lsls	r7, r3, #24
 800997e:	f856 5b04 	ldr.w	r5, [r6], #4
 8009982:	600e      	str	r6, [r1, #0]
 8009984:	d514      	bpl.n	80099b0 <_printf_i+0x1ac>
 8009986:	07d9      	lsls	r1, r3, #31
 8009988:	bf44      	itt	mi
 800998a:	f043 0320 	orrmi.w	r3, r3, #32
 800998e:	6023      	strmi	r3, [r4, #0]
 8009990:	b91d      	cbnz	r5, 800999a <_printf_i+0x196>
 8009992:	6823      	ldr	r3, [r4, #0]
 8009994:	f023 0320 	bic.w	r3, r3, #32
 8009998:	6023      	str	r3, [r4, #0]
 800999a:	2310      	movs	r3, #16
 800999c:	e7b0      	b.n	8009900 <_printf_i+0xfc>
 800999e:	6823      	ldr	r3, [r4, #0]
 80099a0:	f043 0320 	orr.w	r3, r3, #32
 80099a4:	6023      	str	r3, [r4, #0]
 80099a6:	2378      	movs	r3, #120	; 0x78
 80099a8:	4828      	ldr	r0, [pc, #160]	; (8009a4c <_printf_i+0x248>)
 80099aa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80099ae:	e7e3      	b.n	8009978 <_printf_i+0x174>
 80099b0:	065e      	lsls	r6, r3, #25
 80099b2:	bf48      	it	mi
 80099b4:	b2ad      	uxthmi	r5, r5
 80099b6:	e7e6      	b.n	8009986 <_printf_i+0x182>
 80099b8:	4616      	mov	r6, r2
 80099ba:	e7bb      	b.n	8009934 <_printf_i+0x130>
 80099bc:	680b      	ldr	r3, [r1, #0]
 80099be:	6826      	ldr	r6, [r4, #0]
 80099c0:	6960      	ldr	r0, [r4, #20]
 80099c2:	1d1d      	adds	r5, r3, #4
 80099c4:	600d      	str	r5, [r1, #0]
 80099c6:	0635      	lsls	r5, r6, #24
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	d501      	bpl.n	80099d0 <_printf_i+0x1cc>
 80099cc:	6018      	str	r0, [r3, #0]
 80099ce:	e002      	b.n	80099d6 <_printf_i+0x1d2>
 80099d0:	0671      	lsls	r1, r6, #25
 80099d2:	d5fb      	bpl.n	80099cc <_printf_i+0x1c8>
 80099d4:	8018      	strh	r0, [r3, #0]
 80099d6:	2300      	movs	r3, #0
 80099d8:	6123      	str	r3, [r4, #16]
 80099da:	4616      	mov	r6, r2
 80099dc:	e7ba      	b.n	8009954 <_printf_i+0x150>
 80099de:	680b      	ldr	r3, [r1, #0]
 80099e0:	1d1a      	adds	r2, r3, #4
 80099e2:	600a      	str	r2, [r1, #0]
 80099e4:	681e      	ldr	r6, [r3, #0]
 80099e6:	6862      	ldr	r2, [r4, #4]
 80099e8:	2100      	movs	r1, #0
 80099ea:	4630      	mov	r0, r6
 80099ec:	f7f6 fc08 	bl	8000200 <memchr>
 80099f0:	b108      	cbz	r0, 80099f6 <_printf_i+0x1f2>
 80099f2:	1b80      	subs	r0, r0, r6
 80099f4:	6060      	str	r0, [r4, #4]
 80099f6:	6863      	ldr	r3, [r4, #4]
 80099f8:	6123      	str	r3, [r4, #16]
 80099fa:	2300      	movs	r3, #0
 80099fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a00:	e7a8      	b.n	8009954 <_printf_i+0x150>
 8009a02:	6923      	ldr	r3, [r4, #16]
 8009a04:	4632      	mov	r2, r6
 8009a06:	4649      	mov	r1, r9
 8009a08:	4640      	mov	r0, r8
 8009a0a:	47d0      	blx	sl
 8009a0c:	3001      	adds	r0, #1
 8009a0e:	d0ab      	beq.n	8009968 <_printf_i+0x164>
 8009a10:	6823      	ldr	r3, [r4, #0]
 8009a12:	079b      	lsls	r3, r3, #30
 8009a14:	d413      	bmi.n	8009a3e <_printf_i+0x23a>
 8009a16:	68e0      	ldr	r0, [r4, #12]
 8009a18:	9b03      	ldr	r3, [sp, #12]
 8009a1a:	4298      	cmp	r0, r3
 8009a1c:	bfb8      	it	lt
 8009a1e:	4618      	movlt	r0, r3
 8009a20:	e7a4      	b.n	800996c <_printf_i+0x168>
 8009a22:	2301      	movs	r3, #1
 8009a24:	4632      	mov	r2, r6
 8009a26:	4649      	mov	r1, r9
 8009a28:	4640      	mov	r0, r8
 8009a2a:	47d0      	blx	sl
 8009a2c:	3001      	adds	r0, #1
 8009a2e:	d09b      	beq.n	8009968 <_printf_i+0x164>
 8009a30:	3501      	adds	r5, #1
 8009a32:	68e3      	ldr	r3, [r4, #12]
 8009a34:	9903      	ldr	r1, [sp, #12]
 8009a36:	1a5b      	subs	r3, r3, r1
 8009a38:	42ab      	cmp	r3, r5
 8009a3a:	dcf2      	bgt.n	8009a22 <_printf_i+0x21e>
 8009a3c:	e7eb      	b.n	8009a16 <_printf_i+0x212>
 8009a3e:	2500      	movs	r5, #0
 8009a40:	f104 0619 	add.w	r6, r4, #25
 8009a44:	e7f5      	b.n	8009a32 <_printf_i+0x22e>
 8009a46:	bf00      	nop
 8009a48:	0800a555 	.word	0x0800a555
 8009a4c:	0800a566 	.word	0x0800a566

08009a50 <_sbrk_r>:
 8009a50:	b538      	push	{r3, r4, r5, lr}
 8009a52:	4d06      	ldr	r5, [pc, #24]	; (8009a6c <_sbrk_r+0x1c>)
 8009a54:	2300      	movs	r3, #0
 8009a56:	4604      	mov	r4, r0
 8009a58:	4608      	mov	r0, r1
 8009a5a:	602b      	str	r3, [r5, #0]
 8009a5c:	f7f8 fa98 	bl	8001f90 <_sbrk>
 8009a60:	1c43      	adds	r3, r0, #1
 8009a62:	d102      	bne.n	8009a6a <_sbrk_r+0x1a>
 8009a64:	682b      	ldr	r3, [r5, #0]
 8009a66:	b103      	cbz	r3, 8009a6a <_sbrk_r+0x1a>
 8009a68:	6023      	str	r3, [r4, #0]
 8009a6a:	bd38      	pop	{r3, r4, r5, pc}
 8009a6c:	2000456c 	.word	0x2000456c

08009a70 <__sread>:
 8009a70:	b510      	push	{r4, lr}
 8009a72:	460c      	mov	r4, r1
 8009a74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a78:	f000 f8ee 	bl	8009c58 <_read_r>
 8009a7c:	2800      	cmp	r0, #0
 8009a7e:	bfab      	itete	ge
 8009a80:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009a82:	89a3      	ldrhlt	r3, [r4, #12]
 8009a84:	181b      	addge	r3, r3, r0
 8009a86:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009a8a:	bfac      	ite	ge
 8009a8c:	6563      	strge	r3, [r4, #84]	; 0x54
 8009a8e:	81a3      	strhlt	r3, [r4, #12]
 8009a90:	bd10      	pop	{r4, pc}

08009a92 <__swrite>:
 8009a92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a96:	461f      	mov	r7, r3
 8009a98:	898b      	ldrh	r3, [r1, #12]
 8009a9a:	05db      	lsls	r3, r3, #23
 8009a9c:	4605      	mov	r5, r0
 8009a9e:	460c      	mov	r4, r1
 8009aa0:	4616      	mov	r6, r2
 8009aa2:	d505      	bpl.n	8009ab0 <__swrite+0x1e>
 8009aa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009aa8:	2302      	movs	r3, #2
 8009aaa:	2200      	movs	r2, #0
 8009aac:	f000 f868 	bl	8009b80 <_lseek_r>
 8009ab0:	89a3      	ldrh	r3, [r4, #12]
 8009ab2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ab6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009aba:	81a3      	strh	r3, [r4, #12]
 8009abc:	4632      	mov	r2, r6
 8009abe:	463b      	mov	r3, r7
 8009ac0:	4628      	mov	r0, r5
 8009ac2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009ac6:	f000 b817 	b.w	8009af8 <_write_r>

08009aca <__sseek>:
 8009aca:	b510      	push	{r4, lr}
 8009acc:	460c      	mov	r4, r1
 8009ace:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ad2:	f000 f855 	bl	8009b80 <_lseek_r>
 8009ad6:	1c43      	adds	r3, r0, #1
 8009ad8:	89a3      	ldrh	r3, [r4, #12]
 8009ada:	bf15      	itete	ne
 8009adc:	6560      	strne	r0, [r4, #84]	; 0x54
 8009ade:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009ae2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009ae6:	81a3      	strheq	r3, [r4, #12]
 8009ae8:	bf18      	it	ne
 8009aea:	81a3      	strhne	r3, [r4, #12]
 8009aec:	bd10      	pop	{r4, pc}

08009aee <__sclose>:
 8009aee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009af2:	f000 b813 	b.w	8009b1c <_close_r>
	...

08009af8 <_write_r>:
 8009af8:	b538      	push	{r3, r4, r5, lr}
 8009afa:	4d07      	ldr	r5, [pc, #28]	; (8009b18 <_write_r+0x20>)
 8009afc:	4604      	mov	r4, r0
 8009afe:	4608      	mov	r0, r1
 8009b00:	4611      	mov	r1, r2
 8009b02:	2200      	movs	r2, #0
 8009b04:	602a      	str	r2, [r5, #0]
 8009b06:	461a      	mov	r2, r3
 8009b08:	f7f7 fd98 	bl	800163c <_write>
 8009b0c:	1c43      	adds	r3, r0, #1
 8009b0e:	d102      	bne.n	8009b16 <_write_r+0x1e>
 8009b10:	682b      	ldr	r3, [r5, #0]
 8009b12:	b103      	cbz	r3, 8009b16 <_write_r+0x1e>
 8009b14:	6023      	str	r3, [r4, #0]
 8009b16:	bd38      	pop	{r3, r4, r5, pc}
 8009b18:	2000456c 	.word	0x2000456c

08009b1c <_close_r>:
 8009b1c:	b538      	push	{r3, r4, r5, lr}
 8009b1e:	4d06      	ldr	r5, [pc, #24]	; (8009b38 <_close_r+0x1c>)
 8009b20:	2300      	movs	r3, #0
 8009b22:	4604      	mov	r4, r0
 8009b24:	4608      	mov	r0, r1
 8009b26:	602b      	str	r3, [r5, #0]
 8009b28:	f7f8 f9fd 	bl	8001f26 <_close>
 8009b2c:	1c43      	adds	r3, r0, #1
 8009b2e:	d102      	bne.n	8009b36 <_close_r+0x1a>
 8009b30:	682b      	ldr	r3, [r5, #0]
 8009b32:	b103      	cbz	r3, 8009b36 <_close_r+0x1a>
 8009b34:	6023      	str	r3, [r4, #0]
 8009b36:	bd38      	pop	{r3, r4, r5, pc}
 8009b38:	2000456c 	.word	0x2000456c

08009b3c <_fstat_r>:
 8009b3c:	b538      	push	{r3, r4, r5, lr}
 8009b3e:	4d07      	ldr	r5, [pc, #28]	; (8009b5c <_fstat_r+0x20>)
 8009b40:	2300      	movs	r3, #0
 8009b42:	4604      	mov	r4, r0
 8009b44:	4608      	mov	r0, r1
 8009b46:	4611      	mov	r1, r2
 8009b48:	602b      	str	r3, [r5, #0]
 8009b4a:	f7f8 f9f8 	bl	8001f3e <_fstat>
 8009b4e:	1c43      	adds	r3, r0, #1
 8009b50:	d102      	bne.n	8009b58 <_fstat_r+0x1c>
 8009b52:	682b      	ldr	r3, [r5, #0]
 8009b54:	b103      	cbz	r3, 8009b58 <_fstat_r+0x1c>
 8009b56:	6023      	str	r3, [r4, #0]
 8009b58:	bd38      	pop	{r3, r4, r5, pc}
 8009b5a:	bf00      	nop
 8009b5c:	2000456c 	.word	0x2000456c

08009b60 <_isatty_r>:
 8009b60:	b538      	push	{r3, r4, r5, lr}
 8009b62:	4d06      	ldr	r5, [pc, #24]	; (8009b7c <_isatty_r+0x1c>)
 8009b64:	2300      	movs	r3, #0
 8009b66:	4604      	mov	r4, r0
 8009b68:	4608      	mov	r0, r1
 8009b6a:	602b      	str	r3, [r5, #0]
 8009b6c:	f7f8 f9f7 	bl	8001f5e <_isatty>
 8009b70:	1c43      	adds	r3, r0, #1
 8009b72:	d102      	bne.n	8009b7a <_isatty_r+0x1a>
 8009b74:	682b      	ldr	r3, [r5, #0]
 8009b76:	b103      	cbz	r3, 8009b7a <_isatty_r+0x1a>
 8009b78:	6023      	str	r3, [r4, #0]
 8009b7a:	bd38      	pop	{r3, r4, r5, pc}
 8009b7c:	2000456c 	.word	0x2000456c

08009b80 <_lseek_r>:
 8009b80:	b538      	push	{r3, r4, r5, lr}
 8009b82:	4d07      	ldr	r5, [pc, #28]	; (8009ba0 <_lseek_r+0x20>)
 8009b84:	4604      	mov	r4, r0
 8009b86:	4608      	mov	r0, r1
 8009b88:	4611      	mov	r1, r2
 8009b8a:	2200      	movs	r2, #0
 8009b8c:	602a      	str	r2, [r5, #0]
 8009b8e:	461a      	mov	r2, r3
 8009b90:	f7f8 f9f0 	bl	8001f74 <_lseek>
 8009b94:	1c43      	adds	r3, r0, #1
 8009b96:	d102      	bne.n	8009b9e <_lseek_r+0x1e>
 8009b98:	682b      	ldr	r3, [r5, #0]
 8009b9a:	b103      	cbz	r3, 8009b9e <_lseek_r+0x1e>
 8009b9c:	6023      	str	r3, [r4, #0]
 8009b9e:	bd38      	pop	{r3, r4, r5, pc}
 8009ba0:	2000456c 	.word	0x2000456c

08009ba4 <memcpy>:
 8009ba4:	440a      	add	r2, r1
 8009ba6:	4291      	cmp	r1, r2
 8009ba8:	f100 33ff 	add.w	r3, r0, #4294967295
 8009bac:	d100      	bne.n	8009bb0 <memcpy+0xc>
 8009bae:	4770      	bx	lr
 8009bb0:	b510      	push	{r4, lr}
 8009bb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009bb6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009bba:	4291      	cmp	r1, r2
 8009bbc:	d1f9      	bne.n	8009bb2 <memcpy+0xe>
 8009bbe:	bd10      	pop	{r4, pc}

08009bc0 <memmove>:
 8009bc0:	4288      	cmp	r0, r1
 8009bc2:	b510      	push	{r4, lr}
 8009bc4:	eb01 0402 	add.w	r4, r1, r2
 8009bc8:	d902      	bls.n	8009bd0 <memmove+0x10>
 8009bca:	4284      	cmp	r4, r0
 8009bcc:	4623      	mov	r3, r4
 8009bce:	d807      	bhi.n	8009be0 <memmove+0x20>
 8009bd0:	1e43      	subs	r3, r0, #1
 8009bd2:	42a1      	cmp	r1, r4
 8009bd4:	d008      	beq.n	8009be8 <memmove+0x28>
 8009bd6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009bda:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009bde:	e7f8      	b.n	8009bd2 <memmove+0x12>
 8009be0:	4402      	add	r2, r0
 8009be2:	4601      	mov	r1, r0
 8009be4:	428a      	cmp	r2, r1
 8009be6:	d100      	bne.n	8009bea <memmove+0x2a>
 8009be8:	bd10      	pop	{r4, pc}
 8009bea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009bee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009bf2:	e7f7      	b.n	8009be4 <memmove+0x24>

08009bf4 <__malloc_lock>:
 8009bf4:	4801      	ldr	r0, [pc, #4]	; (8009bfc <__malloc_lock+0x8>)
 8009bf6:	f7ff b9d1 	b.w	8008f9c <__retarget_lock_acquire_recursive>
 8009bfa:	bf00      	nop
 8009bfc:	20004564 	.word	0x20004564

08009c00 <__malloc_unlock>:
 8009c00:	4801      	ldr	r0, [pc, #4]	; (8009c08 <__malloc_unlock+0x8>)
 8009c02:	f7ff b9cc 	b.w	8008f9e <__retarget_lock_release_recursive>
 8009c06:	bf00      	nop
 8009c08:	20004564 	.word	0x20004564

08009c0c <_realloc_r>:
 8009c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c0e:	4607      	mov	r7, r0
 8009c10:	4614      	mov	r4, r2
 8009c12:	460e      	mov	r6, r1
 8009c14:	b921      	cbnz	r1, 8009c20 <_realloc_r+0x14>
 8009c16:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009c1a:	4611      	mov	r1, r2
 8009c1c:	f7ff ba74 	b.w	8009108 <_malloc_r>
 8009c20:	b922      	cbnz	r2, 8009c2c <_realloc_r+0x20>
 8009c22:	f7ff fa21 	bl	8009068 <_free_r>
 8009c26:	4625      	mov	r5, r4
 8009c28:	4628      	mov	r0, r5
 8009c2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c2c:	f000 f826 	bl	8009c7c <_malloc_usable_size_r>
 8009c30:	42a0      	cmp	r0, r4
 8009c32:	d20f      	bcs.n	8009c54 <_realloc_r+0x48>
 8009c34:	4621      	mov	r1, r4
 8009c36:	4638      	mov	r0, r7
 8009c38:	f7ff fa66 	bl	8009108 <_malloc_r>
 8009c3c:	4605      	mov	r5, r0
 8009c3e:	2800      	cmp	r0, #0
 8009c40:	d0f2      	beq.n	8009c28 <_realloc_r+0x1c>
 8009c42:	4631      	mov	r1, r6
 8009c44:	4622      	mov	r2, r4
 8009c46:	f7ff ffad 	bl	8009ba4 <memcpy>
 8009c4a:	4631      	mov	r1, r6
 8009c4c:	4638      	mov	r0, r7
 8009c4e:	f7ff fa0b 	bl	8009068 <_free_r>
 8009c52:	e7e9      	b.n	8009c28 <_realloc_r+0x1c>
 8009c54:	4635      	mov	r5, r6
 8009c56:	e7e7      	b.n	8009c28 <_realloc_r+0x1c>

08009c58 <_read_r>:
 8009c58:	b538      	push	{r3, r4, r5, lr}
 8009c5a:	4d07      	ldr	r5, [pc, #28]	; (8009c78 <_read_r+0x20>)
 8009c5c:	4604      	mov	r4, r0
 8009c5e:	4608      	mov	r0, r1
 8009c60:	4611      	mov	r1, r2
 8009c62:	2200      	movs	r2, #0
 8009c64:	602a      	str	r2, [r5, #0]
 8009c66:	461a      	mov	r2, r3
 8009c68:	f7f8 f940 	bl	8001eec <_read>
 8009c6c:	1c43      	adds	r3, r0, #1
 8009c6e:	d102      	bne.n	8009c76 <_read_r+0x1e>
 8009c70:	682b      	ldr	r3, [r5, #0]
 8009c72:	b103      	cbz	r3, 8009c76 <_read_r+0x1e>
 8009c74:	6023      	str	r3, [r4, #0]
 8009c76:	bd38      	pop	{r3, r4, r5, pc}
 8009c78:	2000456c 	.word	0x2000456c

08009c7c <_malloc_usable_size_r>:
 8009c7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c80:	1f18      	subs	r0, r3, #4
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	bfbc      	itt	lt
 8009c86:	580b      	ldrlt	r3, [r1, r0]
 8009c88:	18c0      	addlt	r0, r0, r3
 8009c8a:	4770      	bx	lr

08009c8c <_init>:
 8009c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c8e:	bf00      	nop
 8009c90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c92:	bc08      	pop	{r3}
 8009c94:	469e      	mov	lr, r3
 8009c96:	4770      	bx	lr

08009c98 <_fini>:
 8009c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c9a:	bf00      	nop
 8009c9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c9e:	bc08      	pop	{r3}
 8009ca0:	469e      	mov	lr, r3
 8009ca2:	4770      	bx	lr
