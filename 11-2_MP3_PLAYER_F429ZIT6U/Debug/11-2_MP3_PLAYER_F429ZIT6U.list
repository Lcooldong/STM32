
11-2_MP3_PLAYER_F429ZIT6U.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d50  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08007efc  08007efc  00017efc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f30  08007f30  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08007f30  08007f30  00017f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f38  08007f38  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f38  08007f38  00017f38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007f3c  08007f3c  00017f3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08007f40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000994  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200009a0  200009a0  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00020ea8  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000434b  00000000  00000000  00040ee4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001878  00000000  00000000  00045230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000016b8  00000000  00000000  00046aa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000291bb  00000000  00000000  00048160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00021047  00000000  00000000  0007131b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f162a  00000000  00000000  00092362  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0018398c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006524  00000000  00000000  001839e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08007ee4 	.word	0x08007ee4

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	08007ee4 	.word	0x08007ee4

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96e 	b.w	80004e0 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468c      	mov	ip, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	f040 8083 	bne.w	8000332 <__udivmoddi4+0x116>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d947      	bls.n	80002c2 <__udivmoddi4+0xa6>
 8000232:	fab2 f282 	clz	r2, r2
 8000236:	b142      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000238:	f1c2 0020 	rsb	r0, r2, #32
 800023c:	fa24 f000 	lsr.w	r0, r4, r0
 8000240:	4091      	lsls	r1, r2
 8000242:	4097      	lsls	r7, r2
 8000244:	ea40 0c01 	orr.w	ip, r0, r1
 8000248:	4094      	lsls	r4, r2
 800024a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800024e:	0c23      	lsrs	r3, r4, #16
 8000250:	fbbc f6f8 	udiv	r6, ip, r8
 8000254:	fa1f fe87 	uxth.w	lr, r7
 8000258:	fb08 c116 	mls	r1, r8, r6, ip
 800025c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000260:	fb06 f10e 	mul.w	r1, r6, lr
 8000264:	4299      	cmp	r1, r3
 8000266:	d909      	bls.n	800027c <__udivmoddi4+0x60>
 8000268:	18fb      	adds	r3, r7, r3
 800026a:	f106 30ff 	add.w	r0, r6, #4294967295
 800026e:	f080 8119 	bcs.w	80004a4 <__udivmoddi4+0x288>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 8116 	bls.w	80004a4 <__udivmoddi4+0x288>
 8000278:	3e02      	subs	r6, #2
 800027a:	443b      	add	r3, r7
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0f8 	udiv	r0, r3, r8
 8000284:	fb08 3310 	mls	r3, r8, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000290:	45a6      	cmp	lr, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x8c>
 8000294:	193c      	adds	r4, r7, r4
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295
 800029a:	f080 8105 	bcs.w	80004a8 <__udivmoddi4+0x28c>
 800029e:	45a6      	cmp	lr, r4
 80002a0:	f240 8102 	bls.w	80004a8 <__udivmoddi4+0x28c>
 80002a4:	3802      	subs	r0, #2
 80002a6:	443c      	add	r4, r7
 80002a8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ac:	eba4 040e 	sub.w	r4, r4, lr
 80002b0:	2600      	movs	r6, #0
 80002b2:	b11d      	cbz	r5, 80002bc <__udivmoddi4+0xa0>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c5 4300 	strd	r4, r3, [r5]
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	b902      	cbnz	r2, 80002c6 <__udivmoddi4+0xaa>
 80002c4:	deff      	udf	#255	; 0xff
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	2a00      	cmp	r2, #0
 80002cc:	d150      	bne.n	8000370 <__udivmoddi4+0x154>
 80002ce:	1bcb      	subs	r3, r1, r7
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f f887 	uxth.w	r8, r7
 80002d8:	2601      	movs	r6, #1
 80002da:	fbb3 fcfe 	udiv	ip, r3, lr
 80002de:	0c21      	lsrs	r1, r4, #16
 80002e0:	fb0e 331c 	mls	r3, lr, ip, r3
 80002e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002e8:	fb08 f30c 	mul.w	r3, r8, ip
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d907      	bls.n	8000300 <__udivmoddi4+0xe4>
 80002f0:	1879      	adds	r1, r7, r1
 80002f2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002f6:	d202      	bcs.n	80002fe <__udivmoddi4+0xe2>
 80002f8:	428b      	cmp	r3, r1
 80002fa:	f200 80e9 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 80002fe:	4684      	mov	ip, r0
 8000300:	1ac9      	subs	r1, r1, r3
 8000302:	b2a3      	uxth	r3, r4
 8000304:	fbb1 f0fe 	udiv	r0, r1, lr
 8000308:	fb0e 1110 	mls	r1, lr, r0, r1
 800030c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000310:	fb08 f800 	mul.w	r8, r8, r0
 8000314:	45a0      	cmp	r8, r4
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0x10c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x10a>
 8000320:	45a0      	cmp	r8, r4
 8000322:	f200 80d9 	bhi.w	80004d8 <__udivmoddi4+0x2bc>
 8000326:	4618      	mov	r0, r3
 8000328:	eba4 0408 	sub.w	r4, r4, r8
 800032c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000330:	e7bf      	b.n	80002b2 <__udivmoddi4+0x96>
 8000332:	428b      	cmp	r3, r1
 8000334:	d909      	bls.n	800034a <__udivmoddi4+0x12e>
 8000336:	2d00      	cmp	r5, #0
 8000338:	f000 80b1 	beq.w	800049e <__udivmoddi4+0x282>
 800033c:	2600      	movs	r6, #0
 800033e:	e9c5 0100 	strd	r0, r1, [r5]
 8000342:	4630      	mov	r0, r6
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	fab3 f683 	clz	r6, r3
 800034e:	2e00      	cmp	r6, #0
 8000350:	d14a      	bne.n	80003e8 <__udivmoddi4+0x1cc>
 8000352:	428b      	cmp	r3, r1
 8000354:	d302      	bcc.n	800035c <__udivmoddi4+0x140>
 8000356:	4282      	cmp	r2, r0
 8000358:	f200 80b8 	bhi.w	80004cc <__udivmoddi4+0x2b0>
 800035c:	1a84      	subs	r4, r0, r2
 800035e:	eb61 0103 	sbc.w	r1, r1, r3
 8000362:	2001      	movs	r0, #1
 8000364:	468c      	mov	ip, r1
 8000366:	2d00      	cmp	r5, #0
 8000368:	d0a8      	beq.n	80002bc <__udivmoddi4+0xa0>
 800036a:	e9c5 4c00 	strd	r4, ip, [r5]
 800036e:	e7a5      	b.n	80002bc <__udivmoddi4+0xa0>
 8000370:	f1c2 0320 	rsb	r3, r2, #32
 8000374:	fa20 f603 	lsr.w	r6, r0, r3
 8000378:	4097      	lsls	r7, r2
 800037a:	fa01 f002 	lsl.w	r0, r1, r2
 800037e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000382:	40d9      	lsrs	r1, r3
 8000384:	4330      	orrs	r0, r6
 8000386:	0c03      	lsrs	r3, r0, #16
 8000388:	fbb1 f6fe 	udiv	r6, r1, lr
 800038c:	fa1f f887 	uxth.w	r8, r7
 8000390:	fb0e 1116 	mls	r1, lr, r6, r1
 8000394:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000398:	fb06 f108 	mul.w	r1, r6, r8
 800039c:	4299      	cmp	r1, r3
 800039e:	fa04 f402 	lsl.w	r4, r4, r2
 80003a2:	d909      	bls.n	80003b8 <__udivmoddi4+0x19c>
 80003a4:	18fb      	adds	r3, r7, r3
 80003a6:	f106 3cff 	add.w	ip, r6, #4294967295
 80003aa:	f080 808d 	bcs.w	80004c8 <__udivmoddi4+0x2ac>
 80003ae:	4299      	cmp	r1, r3
 80003b0:	f240 808a 	bls.w	80004c8 <__udivmoddi4+0x2ac>
 80003b4:	3e02      	subs	r6, #2
 80003b6:	443b      	add	r3, r7
 80003b8:	1a5b      	subs	r3, r3, r1
 80003ba:	b281      	uxth	r1, r0
 80003bc:	fbb3 f0fe 	udiv	r0, r3, lr
 80003c0:	fb0e 3310 	mls	r3, lr, r0, r3
 80003c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003c8:	fb00 f308 	mul.w	r3, r0, r8
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d907      	bls.n	80003e0 <__udivmoddi4+0x1c4>
 80003d0:	1879      	adds	r1, r7, r1
 80003d2:	f100 3cff 	add.w	ip, r0, #4294967295
 80003d6:	d273      	bcs.n	80004c0 <__udivmoddi4+0x2a4>
 80003d8:	428b      	cmp	r3, r1
 80003da:	d971      	bls.n	80004c0 <__udivmoddi4+0x2a4>
 80003dc:	3802      	subs	r0, #2
 80003de:	4439      	add	r1, r7
 80003e0:	1acb      	subs	r3, r1, r3
 80003e2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003e6:	e778      	b.n	80002da <__udivmoddi4+0xbe>
 80003e8:	f1c6 0c20 	rsb	ip, r6, #32
 80003ec:	fa03 f406 	lsl.w	r4, r3, r6
 80003f0:	fa22 f30c 	lsr.w	r3, r2, ip
 80003f4:	431c      	orrs	r4, r3
 80003f6:	fa20 f70c 	lsr.w	r7, r0, ip
 80003fa:	fa01 f306 	lsl.w	r3, r1, r6
 80003fe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000402:	fa21 f10c 	lsr.w	r1, r1, ip
 8000406:	431f      	orrs	r7, r3
 8000408:	0c3b      	lsrs	r3, r7, #16
 800040a:	fbb1 f9fe 	udiv	r9, r1, lr
 800040e:	fa1f f884 	uxth.w	r8, r4
 8000412:	fb0e 1119 	mls	r1, lr, r9, r1
 8000416:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800041a:	fb09 fa08 	mul.w	sl, r9, r8
 800041e:	458a      	cmp	sl, r1
 8000420:	fa02 f206 	lsl.w	r2, r2, r6
 8000424:	fa00 f306 	lsl.w	r3, r0, r6
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x220>
 800042a:	1861      	adds	r1, r4, r1
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000430:	d248      	bcs.n	80004c4 <__udivmoddi4+0x2a8>
 8000432:	458a      	cmp	sl, r1
 8000434:	d946      	bls.n	80004c4 <__udivmoddi4+0x2a8>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	4421      	add	r1, r4
 800043c:	eba1 010a 	sub.w	r1, r1, sl
 8000440:	b2bf      	uxth	r7, r7
 8000442:	fbb1 f0fe 	udiv	r0, r1, lr
 8000446:	fb0e 1110 	mls	r1, lr, r0, r1
 800044a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45b8      	cmp	r8, r7
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x24a>
 8000456:	19e7      	adds	r7, r4, r7
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d22e      	bcs.n	80004bc <__udivmoddi4+0x2a0>
 800045e:	45b8      	cmp	r8, r7
 8000460:	d92c      	bls.n	80004bc <__udivmoddi4+0x2a0>
 8000462:	3802      	subs	r0, #2
 8000464:	4427      	add	r7, r4
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba7 0708 	sub.w	r7, r7, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454f      	cmp	r7, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	4649      	mov	r1, r9
 8000478:	d31a      	bcc.n	80004b0 <__udivmoddi4+0x294>
 800047a:	d017      	beq.n	80004ac <__udivmoddi4+0x290>
 800047c:	b15d      	cbz	r5, 8000496 <__udivmoddi4+0x27a>
 800047e:	ebb3 020e 	subs.w	r2, r3, lr
 8000482:	eb67 0701 	sbc.w	r7, r7, r1
 8000486:	fa07 fc0c 	lsl.w	ip, r7, ip
 800048a:	40f2      	lsrs	r2, r6
 800048c:	ea4c 0202 	orr.w	r2, ip, r2
 8000490:	40f7      	lsrs	r7, r6
 8000492:	e9c5 2700 	strd	r2, r7, [r5]
 8000496:	2600      	movs	r6, #0
 8000498:	4631      	mov	r1, r6
 800049a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049e:	462e      	mov	r6, r5
 80004a0:	4628      	mov	r0, r5
 80004a2:	e70b      	b.n	80002bc <__udivmoddi4+0xa0>
 80004a4:	4606      	mov	r6, r0
 80004a6:	e6e9      	b.n	800027c <__udivmoddi4+0x60>
 80004a8:	4618      	mov	r0, r3
 80004aa:	e6fd      	b.n	80002a8 <__udivmoddi4+0x8c>
 80004ac:	4543      	cmp	r3, r8
 80004ae:	d2e5      	bcs.n	800047c <__udivmoddi4+0x260>
 80004b0:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b4:	eb69 0104 	sbc.w	r1, r9, r4
 80004b8:	3801      	subs	r0, #1
 80004ba:	e7df      	b.n	800047c <__udivmoddi4+0x260>
 80004bc:	4608      	mov	r0, r1
 80004be:	e7d2      	b.n	8000466 <__udivmoddi4+0x24a>
 80004c0:	4660      	mov	r0, ip
 80004c2:	e78d      	b.n	80003e0 <__udivmoddi4+0x1c4>
 80004c4:	4681      	mov	r9, r0
 80004c6:	e7b9      	b.n	800043c <__udivmoddi4+0x220>
 80004c8:	4666      	mov	r6, ip
 80004ca:	e775      	b.n	80003b8 <__udivmoddi4+0x19c>
 80004cc:	4630      	mov	r0, r6
 80004ce:	e74a      	b.n	8000366 <__udivmoddi4+0x14a>
 80004d0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d4:	4439      	add	r1, r7
 80004d6:	e713      	b.n	8000300 <__udivmoddi4+0xe4>
 80004d8:	3802      	subs	r0, #2
 80004da:	443c      	add	r4, r7
 80004dc:	e724      	b.n	8000328 <__udivmoddi4+0x10c>
 80004de:	bf00      	nop

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b084      	sub	sp, #16
 80004e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004ea:	463b      	mov	r3, r7
 80004ec:	2200      	movs	r2, #0
 80004ee:	601a      	str	r2, [r3, #0]
 80004f0:	605a      	str	r2, [r3, #4]
 80004f2:	609a      	str	r2, [r3, #8]
 80004f4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80004f6:	4b36      	ldr	r3, [pc, #216]	; (80005d0 <MX_ADC1_Init+0xec>)
 80004f8:	4a36      	ldr	r2, [pc, #216]	; (80005d4 <MX_ADC1_Init+0xf0>)
 80004fa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80004fc:	4b34      	ldr	r3, [pc, #208]	; (80005d0 <MX_ADC1_Init+0xec>)
 80004fe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000502:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000504:	4b32      	ldr	r3, [pc, #200]	; (80005d0 <MX_ADC1_Init+0xec>)
 8000506:	2200      	movs	r2, #0
 8000508:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800050a:	4b31      	ldr	r3, [pc, #196]	; (80005d0 <MX_ADC1_Init+0xec>)
 800050c:	2201      	movs	r2, #1
 800050e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000510:	4b2f      	ldr	r3, [pc, #188]	; (80005d0 <MX_ADC1_Init+0xec>)
 8000512:	2201      	movs	r2, #1
 8000514:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000516:	4b2e      	ldr	r3, [pc, #184]	; (80005d0 <MX_ADC1_Init+0xec>)
 8000518:	2200      	movs	r2, #0
 800051a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800051e:	4b2c      	ldr	r3, [pc, #176]	; (80005d0 <MX_ADC1_Init+0xec>)
 8000520:	2200      	movs	r2, #0
 8000522:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000524:	4b2a      	ldr	r3, [pc, #168]	; (80005d0 <MX_ADC1_Init+0xec>)
 8000526:	4a2c      	ldr	r2, [pc, #176]	; (80005d8 <MX_ADC1_Init+0xf4>)
 8000528:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800052a:	4b29      	ldr	r3, [pc, #164]	; (80005d0 <MX_ADC1_Init+0xec>)
 800052c:	2200      	movs	r2, #0
 800052e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8000530:	4b27      	ldr	r3, [pc, #156]	; (80005d0 <MX_ADC1_Init+0xec>)
 8000532:	2204      	movs	r2, #4
 8000534:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000536:	4b26      	ldr	r3, [pc, #152]	; (80005d0 <MX_ADC1_Init+0xec>)
 8000538:	2201      	movs	r2, #1
 800053a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800053e:	4b24      	ldr	r3, [pc, #144]	; (80005d0 <MX_ADC1_Init+0xec>)
 8000540:	2201      	movs	r2, #1
 8000542:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000544:	4822      	ldr	r0, [pc, #136]	; (80005d0 <MX_ADC1_Init+0xec>)
 8000546:	f001 fb39 	bl	8001bbc <HAL_ADC_Init>
 800054a:	4603      	mov	r3, r0
 800054c:	2b00      	cmp	r3, #0
 800054e:	d001      	beq.n	8000554 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000550:	f000 fbbc 	bl	8000ccc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000554:	230a      	movs	r3, #10
 8000556:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000558:	2301      	movs	r3, #1
 800055a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 800055c:	2304      	movs	r3, #4
 800055e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000560:	463b      	mov	r3, r7
 8000562:	4619      	mov	r1, r3
 8000564:	481a      	ldr	r0, [pc, #104]	; (80005d0 <MX_ADC1_Init+0xec>)
 8000566:	f001 fb6d 	bl	8001c44 <HAL_ADC_ConfigChannel>
 800056a:	4603      	mov	r3, r0
 800056c:	2b00      	cmp	r3, #0
 800056e:	d001      	beq.n	8000574 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000570:	f000 fbac 	bl	8000ccc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000574:	230c      	movs	r3, #12
 8000576:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000578:	2302      	movs	r3, #2
 800057a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800057c:	463b      	mov	r3, r7
 800057e:	4619      	mov	r1, r3
 8000580:	4813      	ldr	r0, [pc, #76]	; (80005d0 <MX_ADC1_Init+0xec>)
 8000582:	f001 fb5f 	bl	8001c44 <HAL_ADC_ConfigChannel>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d001      	beq.n	8000590 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800058c:	f000 fb9e 	bl	8000ccc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000590:	230d      	movs	r3, #13
 8000592:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000594:	2303      	movs	r3, #3
 8000596:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000598:	463b      	mov	r3, r7
 800059a:	4619      	mov	r1, r3
 800059c:	480c      	ldr	r0, [pc, #48]	; (80005d0 <MX_ADC1_Init+0xec>)
 800059e:	f001 fb51 	bl	8001c44 <HAL_ADC_ConfigChannel>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80005a8:	f000 fb90 	bl	8000ccc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80005ac:	2309      	movs	r3, #9
 80005ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80005b0:	2304      	movs	r3, #4
 80005b2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005b4:	463b      	mov	r3, r7
 80005b6:	4619      	mov	r1, r3
 80005b8:	4805      	ldr	r0, [pc, #20]	; (80005d0 <MX_ADC1_Init+0xec>)
 80005ba:	f001 fb43 	bl	8001c44 <HAL_ADC_ConfigChannel>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80005c4:	f000 fb82 	bl	8000ccc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005c8:	bf00      	nop
 80005ca:	3710      	adds	r7, #16
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	2000003c 	.word	0x2000003c
 80005d4:	40012000 	.word	0x40012000
 80005d8:	0f000001 	.word	0x0f000001

080005dc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b08a      	sub	sp, #40	; 0x28
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e4:	f107 0314 	add.w	r3, r7, #20
 80005e8:	2200      	movs	r2, #0
 80005ea:	601a      	str	r2, [r3, #0]
 80005ec:	605a      	str	r2, [r3, #4]
 80005ee:	609a      	str	r2, [r3, #8]
 80005f0:	60da      	str	r2, [r3, #12]
 80005f2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4a3c      	ldr	r2, [pc, #240]	; (80006ec <HAL_ADC_MspInit+0x110>)
 80005fa:	4293      	cmp	r3, r2
 80005fc:	d171      	bne.n	80006e2 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80005fe:	2300      	movs	r3, #0
 8000600:	613b      	str	r3, [r7, #16]
 8000602:	4b3b      	ldr	r3, [pc, #236]	; (80006f0 <HAL_ADC_MspInit+0x114>)
 8000604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000606:	4a3a      	ldr	r2, [pc, #232]	; (80006f0 <HAL_ADC_MspInit+0x114>)
 8000608:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800060c:	6453      	str	r3, [r2, #68]	; 0x44
 800060e:	4b38      	ldr	r3, [pc, #224]	; (80006f0 <HAL_ADC_MspInit+0x114>)
 8000610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000612:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000616:	613b      	str	r3, [r7, #16]
 8000618:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800061a:	2300      	movs	r3, #0
 800061c:	60fb      	str	r3, [r7, #12]
 800061e:	4b34      	ldr	r3, [pc, #208]	; (80006f0 <HAL_ADC_MspInit+0x114>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000622:	4a33      	ldr	r2, [pc, #204]	; (80006f0 <HAL_ADC_MspInit+0x114>)
 8000624:	f043 0304 	orr.w	r3, r3, #4
 8000628:	6313      	str	r3, [r2, #48]	; 0x30
 800062a:	4b31      	ldr	r3, [pc, #196]	; (80006f0 <HAL_ADC_MspInit+0x114>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062e:	f003 0304 	and.w	r3, r3, #4
 8000632:	60fb      	str	r3, [r7, #12]
 8000634:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000636:	2300      	movs	r3, #0
 8000638:	60bb      	str	r3, [r7, #8]
 800063a:	4b2d      	ldr	r3, [pc, #180]	; (80006f0 <HAL_ADC_MspInit+0x114>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	4a2c      	ldr	r2, [pc, #176]	; (80006f0 <HAL_ADC_MspInit+0x114>)
 8000640:	f043 0302 	orr.w	r3, r3, #2
 8000644:	6313      	str	r3, [r2, #48]	; 0x30
 8000646:	4b2a      	ldr	r3, [pc, #168]	; (80006f0 <HAL_ADC_MspInit+0x114>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064a:	f003 0302 	and.w	r3, r3, #2
 800064e:	60bb      	str	r3, [r7, #8]
 8000650:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> ADC1_IN10
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 8000652:	230d      	movs	r3, #13
 8000654:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000656:	2303      	movs	r3, #3
 8000658:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065a:	2300      	movs	r3, #0
 800065c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800065e:	f107 0314 	add.w	r3, r7, #20
 8000662:	4619      	mov	r1, r3
 8000664:	4823      	ldr	r0, [pc, #140]	; (80006f4 <HAL_ADC_MspInit+0x118>)
 8000666:	f002 faab 	bl	8002bc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800066a:	2302      	movs	r3, #2
 800066c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800066e:	2303      	movs	r3, #3
 8000670:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000672:	2300      	movs	r3, #0
 8000674:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000676:	f107 0314 	add.w	r3, r7, #20
 800067a:	4619      	mov	r1, r3
 800067c:	481e      	ldr	r0, [pc, #120]	; (80006f8 <HAL_ADC_MspInit+0x11c>)
 800067e:	f002 fa9f 	bl	8002bc0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000682:	4b1e      	ldr	r3, [pc, #120]	; (80006fc <HAL_ADC_MspInit+0x120>)
 8000684:	4a1e      	ldr	r2, [pc, #120]	; (8000700 <HAL_ADC_MspInit+0x124>)
 8000686:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000688:	4b1c      	ldr	r3, [pc, #112]	; (80006fc <HAL_ADC_MspInit+0x120>)
 800068a:	2200      	movs	r2, #0
 800068c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800068e:	4b1b      	ldr	r3, [pc, #108]	; (80006fc <HAL_ADC_MspInit+0x120>)
 8000690:	2200      	movs	r2, #0
 8000692:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000694:	4b19      	ldr	r3, [pc, #100]	; (80006fc <HAL_ADC_MspInit+0x120>)
 8000696:	2200      	movs	r2, #0
 8000698:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800069a:	4b18      	ldr	r3, [pc, #96]	; (80006fc <HAL_ADC_MspInit+0x120>)
 800069c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006a0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80006a2:	4b16      	ldr	r3, [pc, #88]	; (80006fc <HAL_ADC_MspInit+0x120>)
 80006a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80006a8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80006aa:	4b14      	ldr	r3, [pc, #80]	; (80006fc <HAL_ADC_MspInit+0x120>)
 80006ac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80006b0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80006b2:	4b12      	ldr	r3, [pc, #72]	; (80006fc <HAL_ADC_MspInit+0x120>)
 80006b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006b8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80006ba:	4b10      	ldr	r3, [pc, #64]	; (80006fc <HAL_ADC_MspInit+0x120>)
 80006bc:	2200      	movs	r2, #0
 80006be:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80006c0:	4b0e      	ldr	r3, [pc, #56]	; (80006fc <HAL_ADC_MspInit+0x120>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80006c6:	480d      	ldr	r0, [pc, #52]	; (80006fc <HAL_ADC_MspInit+0x120>)
 80006c8:	f001 fe6c 	bl	80023a4 <HAL_DMA_Init>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 80006d2:	f000 fafb 	bl	8000ccc <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	4a08      	ldr	r2, [pc, #32]	; (80006fc <HAL_ADC_MspInit+0x120>)
 80006da:	639a      	str	r2, [r3, #56]	; 0x38
 80006dc:	4a07      	ldr	r2, [pc, #28]	; (80006fc <HAL_ADC_MspInit+0x120>)
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006e2:	bf00      	nop
 80006e4:	3728      	adds	r7, #40	; 0x28
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	40012000 	.word	0x40012000
 80006f0:	40023800 	.word	0x40023800
 80006f4:	40020800 	.word	0x40020800
 80006f8:	40020400 	.word	0x40020400
 80006fc:	20000084 	.word	0x20000084
 8000700:	40026410 	.word	0x40026410

08000704 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800070a:	463b      	mov	r3, r7
 800070c:	2200      	movs	r2, #0
 800070e:	601a      	str	r2, [r3, #0]
 8000710:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000712:	4b0f      	ldr	r3, [pc, #60]	; (8000750 <MX_DAC_Init+0x4c>)
 8000714:	4a0f      	ldr	r2, [pc, #60]	; (8000754 <MX_DAC_Init+0x50>)
 8000716:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000718:	480d      	ldr	r0, [pc, #52]	; (8000750 <MX_DAC_Init+0x4c>)
 800071a:	f001 fdd2 	bl	80022c2 <HAL_DAC_Init>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000724:	f000 fad2 	bl	8000ccc <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000728:	2300      	movs	r3, #0
 800072a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800072c:	2300      	movs	r3, #0
 800072e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000730:	463b      	mov	r3, r7
 8000732:	2200      	movs	r2, #0
 8000734:	4619      	mov	r1, r3
 8000736:	4806      	ldr	r0, [pc, #24]	; (8000750 <MX_DAC_Init+0x4c>)
 8000738:	f001 fde5 	bl	8002306 <HAL_DAC_ConfigChannel>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000742:	f000 fac3 	bl	8000ccc <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000746:	bf00      	nop
 8000748:	3708      	adds	r7, #8
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	200000e4 	.word	0x200000e4
 8000754:	40007400 	.word	0x40007400

08000758 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b08a      	sub	sp, #40	; 0x28
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000760:	f107 0314 	add.w	r3, r7, #20
 8000764:	2200      	movs	r2, #0
 8000766:	601a      	str	r2, [r3, #0]
 8000768:	605a      	str	r2, [r3, #4]
 800076a:	609a      	str	r2, [r3, #8]
 800076c:	60da      	str	r2, [r3, #12]
 800076e:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4a17      	ldr	r2, [pc, #92]	; (80007d4 <HAL_DAC_MspInit+0x7c>)
 8000776:	4293      	cmp	r3, r2
 8000778:	d127      	bne.n	80007ca <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	613b      	str	r3, [r7, #16]
 800077e:	4b16      	ldr	r3, [pc, #88]	; (80007d8 <HAL_DAC_MspInit+0x80>)
 8000780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000782:	4a15      	ldr	r2, [pc, #84]	; (80007d8 <HAL_DAC_MspInit+0x80>)
 8000784:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000788:	6413      	str	r3, [r2, #64]	; 0x40
 800078a:	4b13      	ldr	r3, [pc, #76]	; (80007d8 <HAL_DAC_MspInit+0x80>)
 800078c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800078e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000792:	613b      	str	r3, [r7, #16]
 8000794:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	60fb      	str	r3, [r7, #12]
 800079a:	4b0f      	ldr	r3, [pc, #60]	; (80007d8 <HAL_DAC_MspInit+0x80>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	4a0e      	ldr	r2, [pc, #56]	; (80007d8 <HAL_DAC_MspInit+0x80>)
 80007a0:	f043 0301 	orr.w	r3, r3, #1
 80007a4:	6313      	str	r3, [r2, #48]	; 0x30
 80007a6:	4b0c      	ldr	r3, [pc, #48]	; (80007d8 <HAL_DAC_MspInit+0x80>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	f003 0301 	and.w	r3, r3, #1
 80007ae:	60fb      	str	r3, [r7, #12]
 80007b0:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80007b2:	2310      	movs	r3, #16
 80007b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007b6:	2303      	movs	r3, #3
 80007b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ba:	2300      	movs	r3, #0
 80007bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007be:	f107 0314 	add.w	r3, r7, #20
 80007c2:	4619      	mov	r1, r3
 80007c4:	4805      	ldr	r0, [pc, #20]	; (80007dc <HAL_DAC_MspInit+0x84>)
 80007c6:	f002 f9fb 	bl	8002bc0 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 80007ca:	bf00      	nop
 80007cc:	3728      	adds	r7, #40	; 0x28
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	40007400 	.word	0x40007400
 80007d8:	40023800 	.word	0x40023800
 80007dc:	40020000 	.word	0x40020000

080007e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	607b      	str	r3, [r7, #4]
 80007ea:	4b14      	ldr	r3, [pc, #80]	; (800083c <MX_DMA_Init+0x5c>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	4a13      	ldr	r2, [pc, #76]	; (800083c <MX_DMA_Init+0x5c>)
 80007f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80007f4:	6313      	str	r3, [r2, #48]	; 0x30
 80007f6:	4b11      	ldr	r3, [pc, #68]	; (800083c <MX_DMA_Init+0x5c>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80007fe:	607b      	str	r3, [r7, #4]
 8000800:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000802:	2200      	movs	r2, #0
 8000804:	2100      	movs	r1, #0
 8000806:	2038      	movs	r0, #56	; 0x38
 8000808:	f001 fd25 	bl	8002256 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800080c:	2038      	movs	r0, #56	; 0x38
 800080e:	f001 fd3e 	bl	800228e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000812:	2200      	movs	r2, #0
 8000814:	2100      	movs	r1, #0
 8000816:	203b      	movs	r0, #59	; 0x3b
 8000818:	f001 fd1d 	bl	8002256 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800081c:	203b      	movs	r0, #59	; 0x3b
 800081e:	f001 fd36 	bl	800228e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000822:	2200      	movs	r2, #0
 8000824:	2100      	movs	r1, #0
 8000826:	2045      	movs	r0, #69	; 0x45
 8000828:	f001 fd15 	bl	8002256 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800082c:	2045      	movs	r0, #69	; 0x45
 800082e:	f001 fd2e 	bl	800228e <HAL_NVIC_EnableIRQ>

}
 8000832:	bf00      	nop
 8000834:	3708      	adds	r7, #8
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	40023800 	.word	0x40023800

08000840 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b08c      	sub	sp, #48	; 0x30
 8000844:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000846:	f107 031c 	add.w	r3, r7, #28
 800084a:	2200      	movs	r2, #0
 800084c:	601a      	str	r2, [r3, #0]
 800084e:	605a      	str	r2, [r3, #4]
 8000850:	609a      	str	r2, [r3, #8]
 8000852:	60da      	str	r2, [r3, #12]
 8000854:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	61bb      	str	r3, [r7, #24]
 800085a:	4b50      	ldr	r3, [pc, #320]	; (800099c <MX_GPIO_Init+0x15c>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	4a4f      	ldr	r2, [pc, #316]	; (800099c <MX_GPIO_Init+0x15c>)
 8000860:	f043 0320 	orr.w	r3, r3, #32
 8000864:	6313      	str	r3, [r2, #48]	; 0x30
 8000866:	4b4d      	ldr	r3, [pc, #308]	; (800099c <MX_GPIO_Init+0x15c>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	f003 0320 	and.w	r3, r3, #32
 800086e:	61bb      	str	r3, [r7, #24]
 8000870:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	617b      	str	r3, [r7, #20]
 8000876:	4b49      	ldr	r3, [pc, #292]	; (800099c <MX_GPIO_Init+0x15c>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	4a48      	ldr	r2, [pc, #288]	; (800099c <MX_GPIO_Init+0x15c>)
 800087c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000880:	6313      	str	r3, [r2, #48]	; 0x30
 8000882:	4b46      	ldr	r3, [pc, #280]	; (800099c <MX_GPIO_Init+0x15c>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800088a:	617b      	str	r3, [r7, #20]
 800088c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	613b      	str	r3, [r7, #16]
 8000892:	4b42      	ldr	r3, [pc, #264]	; (800099c <MX_GPIO_Init+0x15c>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	4a41      	ldr	r2, [pc, #260]	; (800099c <MX_GPIO_Init+0x15c>)
 8000898:	f043 0304 	orr.w	r3, r3, #4
 800089c:	6313      	str	r3, [r2, #48]	; 0x30
 800089e:	4b3f      	ldr	r3, [pc, #252]	; (800099c <MX_GPIO_Init+0x15c>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	f003 0304 	and.w	r3, r3, #4
 80008a6:	613b      	str	r3, [r7, #16]
 80008a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	60fb      	str	r3, [r7, #12]
 80008ae:	4b3b      	ldr	r3, [pc, #236]	; (800099c <MX_GPIO_Init+0x15c>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	4a3a      	ldr	r2, [pc, #232]	; (800099c <MX_GPIO_Init+0x15c>)
 80008b4:	f043 0301 	orr.w	r3, r3, #1
 80008b8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ba:	4b38      	ldr	r3, [pc, #224]	; (800099c <MX_GPIO_Init+0x15c>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	f003 0301 	and.w	r3, r3, #1
 80008c2:	60fb      	str	r3, [r7, #12]
 80008c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	60bb      	str	r3, [r7, #8]
 80008ca:	4b34      	ldr	r3, [pc, #208]	; (800099c <MX_GPIO_Init+0x15c>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	4a33      	ldr	r2, [pc, #204]	; (800099c <MX_GPIO_Init+0x15c>)
 80008d0:	f043 0302 	orr.w	r3, r3, #2
 80008d4:	6313      	str	r3, [r2, #48]	; 0x30
 80008d6:	4b31      	ldr	r3, [pc, #196]	; (800099c <MX_GPIO_Init+0x15c>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	f003 0302 	and.w	r3, r3, #2
 80008de:	60bb      	str	r3, [r7, #8]
 80008e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	607b      	str	r3, [r7, #4]
 80008e6:	4b2d      	ldr	r3, [pc, #180]	; (800099c <MX_GPIO_Init+0x15c>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	4a2c      	ldr	r2, [pc, #176]	; (800099c <MX_GPIO_Init+0x15c>)
 80008ec:	f043 0308 	orr.w	r3, r3, #8
 80008f0:	6313      	str	r3, [r2, #48]	; 0x30
 80008f2:	4b2a      	ldr	r3, [pc, #168]	; (800099c <MX_GPIO_Init+0x15c>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	f003 0308 	and.w	r3, r3, #8
 80008fa:	607b      	str	r3, [r7, #4]
 80008fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80008fe:	2200      	movs	r2, #0
 8000900:	21c0      	movs	r1, #192	; 0xc0
 8000902:	4827      	ldr	r0, [pc, #156]	; (80009a0 <MX_GPIO_Init+0x160>)
 8000904:	f002 fb20 	bl	8002f48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_11|GPIO_PIN_7, GPIO_PIN_RESET);
 8000908:	2200      	movs	r2, #0
 800090a:	f640 0181 	movw	r1, #2177	; 0x881
 800090e:	4825      	ldr	r0, [pc, #148]	; (80009a4 <MX_GPIO_Init+0x164>)
 8000910:	f002 fb1a 	bl	8002f48 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000914:	23c0      	movs	r3, #192	; 0xc0
 8000916:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000918:	2301      	movs	r3, #1
 800091a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091c:	2300      	movs	r3, #0
 800091e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000920:	2300      	movs	r3, #0
 8000922:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000924:	f107 031c 	add.w	r3, r7, #28
 8000928:	4619      	mov	r1, r3
 800092a:	481d      	ldr	r0, [pc, #116]	; (80009a0 <MX_GPIO_Init+0x160>)
 800092c:	f002 f948 	bl	8002bc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB11 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_11|GPIO_PIN_7;
 8000930:	f640 0381 	movw	r3, #2177	; 0x881
 8000934:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000936:	2301      	movs	r3, #1
 8000938:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	2300      	movs	r3, #0
 800093c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093e:	2300      	movs	r3, #0
 8000940:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000942:	f107 031c 	add.w	r3, r7, #28
 8000946:	4619      	mov	r1, r3
 8000948:	4816      	ldr	r0, [pc, #88]	; (80009a4 <MX_GPIO_Init+0x164>)
 800094a:	f002 f939 	bl	8002bc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800094e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000952:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000954:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000958:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800095a:	2302      	movs	r3, #2
 800095c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800095e:	f107 031c 	add.w	r3, r7, #28
 8000962:	4619      	mov	r1, r3
 8000964:	4810      	ldr	r0, [pc, #64]	; (80009a8 <MX_GPIO_Init+0x168>)
 8000966:	f002 f92b 	bl	8002bc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800096a:	2308      	movs	r3, #8
 800096c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800096e:	2300      	movs	r3, #0
 8000970:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	2300      	movs	r3, #0
 8000974:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000976:	f107 031c 	add.w	r3, r7, #28
 800097a:	4619      	mov	r1, r3
 800097c:	480a      	ldr	r0, [pc, #40]	; (80009a8 <MX_GPIO_Init+0x168>)
 800097e:	f002 f91f 	bl	8002bc0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000982:	2200      	movs	r2, #0
 8000984:	2100      	movs	r1, #0
 8000986:	2028      	movs	r0, #40	; 0x28
 8000988:	f001 fc65 	bl	8002256 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800098c:	2028      	movs	r0, #40	; 0x28
 800098e:	f001 fc7e 	bl	800228e <HAL_NVIC_EnableIRQ>

}
 8000992:	bf00      	nop
 8000994:	3730      	adds	r7, #48	; 0x30
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	40023800 	.word	0x40023800
 80009a0:	40020000 	.word	0x40020000
 80009a4:	40020400 	.word	0x40020400
 80009a8:	40020c00 	.word	0x40020c00

080009ac <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009b0:	4b1b      	ldr	r3, [pc, #108]	; (8000a20 <MX_I2C1_Init+0x74>)
 80009b2:	4a1c      	ldr	r2, [pc, #112]	; (8000a24 <MX_I2C1_Init+0x78>)
 80009b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80009b6:	4b1a      	ldr	r3, [pc, #104]	; (8000a20 <MX_I2C1_Init+0x74>)
 80009b8:	4a1b      	ldr	r2, [pc, #108]	; (8000a28 <MX_I2C1_Init+0x7c>)
 80009ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009bc:	4b18      	ldr	r3, [pc, #96]	; (8000a20 <MX_I2C1_Init+0x74>)
 80009be:	2200      	movs	r2, #0
 80009c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80009c2:	4b17      	ldr	r3, [pc, #92]	; (8000a20 <MX_I2C1_Init+0x74>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009c8:	4b15      	ldr	r3, [pc, #84]	; (8000a20 <MX_I2C1_Init+0x74>)
 80009ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009ce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009d0:	4b13      	ldr	r3, [pc, #76]	; (8000a20 <MX_I2C1_Init+0x74>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80009d6:	4b12      	ldr	r3, [pc, #72]	; (8000a20 <MX_I2C1_Init+0x74>)
 80009d8:	2200      	movs	r2, #0
 80009da:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009dc:	4b10      	ldr	r3, [pc, #64]	; (8000a20 <MX_I2C1_Init+0x74>)
 80009de:	2200      	movs	r2, #0
 80009e0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009e2:	4b0f      	ldr	r3, [pc, #60]	; (8000a20 <MX_I2C1_Init+0x74>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009e8:	480d      	ldr	r0, [pc, #52]	; (8000a20 <MX_I2C1_Init+0x74>)
 80009ea:	f002 faeb 	bl	8002fc4 <HAL_I2C_Init>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80009f4:	f000 f96a 	bl	8000ccc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009f8:	2100      	movs	r1, #0
 80009fa:	4809      	ldr	r0, [pc, #36]	; (8000a20 <MX_I2C1_Init+0x74>)
 80009fc:	f002 fc26 	bl	800324c <HAL_I2CEx_ConfigAnalogFilter>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000a06:	f000 f961 	bl	8000ccc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	4804      	ldr	r0, [pc, #16]	; (8000a20 <MX_I2C1_Init+0x74>)
 8000a0e:	f002 fc59 	bl	80032c4 <HAL_I2CEx_ConfigDigitalFilter>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000a18:	f000 f958 	bl	8000ccc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a1c:	bf00      	nop
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	200000f8 	.word	0x200000f8
 8000a24:	40005400 	.word	0x40005400
 8000a28:	00061a80 	.word	0x00061a80

08000a2c <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000a30:	4b1b      	ldr	r3, [pc, #108]	; (8000aa0 <MX_I2C2_Init+0x74>)
 8000a32:	4a1c      	ldr	r2, [pc, #112]	; (8000aa4 <MX_I2C2_Init+0x78>)
 8000a34:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000a36:	4b1a      	ldr	r3, [pc, #104]	; (8000aa0 <MX_I2C2_Init+0x74>)
 8000a38:	4a1b      	ldr	r2, [pc, #108]	; (8000aa8 <MX_I2C2_Init+0x7c>)
 8000a3a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a3c:	4b18      	ldr	r3, [pc, #96]	; (8000aa0 <MX_I2C2_Init+0x74>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000a42:	4b17      	ldr	r3, [pc, #92]	; (8000aa0 <MX_I2C2_Init+0x74>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a48:	4b15      	ldr	r3, [pc, #84]	; (8000aa0 <MX_I2C2_Init+0x74>)
 8000a4a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a4e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a50:	4b13      	ldr	r3, [pc, #76]	; (8000aa0 <MX_I2C2_Init+0x74>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000a56:	4b12      	ldr	r3, [pc, #72]	; (8000aa0 <MX_I2C2_Init+0x74>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a5c:	4b10      	ldr	r3, [pc, #64]	; (8000aa0 <MX_I2C2_Init+0x74>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a62:	4b0f      	ldr	r3, [pc, #60]	; (8000aa0 <MX_I2C2_Init+0x74>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000a68:	480d      	ldr	r0, [pc, #52]	; (8000aa0 <MX_I2C2_Init+0x74>)
 8000a6a:	f002 faab 	bl	8002fc4 <HAL_I2C_Init>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000a74:	f000 f92a 	bl	8000ccc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a78:	2100      	movs	r1, #0
 8000a7a:	4809      	ldr	r0, [pc, #36]	; (8000aa0 <MX_I2C2_Init+0x74>)
 8000a7c:	f002 fbe6 	bl	800324c <HAL_I2CEx_ConfigAnalogFilter>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8000a86:	f000 f921 	bl	8000ccc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	4804      	ldr	r0, [pc, #16]	; (8000aa0 <MX_I2C2_Init+0x74>)
 8000a8e:	f002 fc19 	bl	80032c4 <HAL_I2CEx_ConfigDigitalFilter>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000a98:	f000 f918 	bl	8000ccc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000a9c:	bf00      	nop
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	2000014c 	.word	0x2000014c
 8000aa4:	40005800 	.word	0x40005800
 8000aa8:	000186a0 	.word	0x000186a0

08000aac <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b08c      	sub	sp, #48	; 0x30
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab4:	f107 031c 	add.w	r3, r7, #28
 8000ab8:	2200      	movs	r2, #0
 8000aba:	601a      	str	r2, [r3, #0]
 8000abc:	605a      	str	r2, [r3, #4]
 8000abe:	609a      	str	r2, [r3, #8]
 8000ac0:	60da      	str	r2, [r3, #12]
 8000ac2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a32      	ldr	r2, [pc, #200]	; (8000b94 <HAL_I2C_MspInit+0xe8>)
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d12d      	bne.n	8000b2a <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ace:	2300      	movs	r3, #0
 8000ad0:	61bb      	str	r3, [r7, #24]
 8000ad2:	4b31      	ldr	r3, [pc, #196]	; (8000b98 <HAL_I2C_MspInit+0xec>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	4a30      	ldr	r2, [pc, #192]	; (8000b98 <HAL_I2C_MspInit+0xec>)
 8000ad8:	f043 0302 	orr.w	r3, r3, #2
 8000adc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ade:	4b2e      	ldr	r3, [pc, #184]	; (8000b98 <HAL_I2C_MspInit+0xec>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	f003 0302 	and.w	r3, r3, #2
 8000ae6:	61bb      	str	r3, [r7, #24]
 8000ae8:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000aea:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000aee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000af0:	2312      	movs	r3, #18
 8000af2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af4:	2300      	movs	r3, #0
 8000af6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af8:	2303      	movs	r3, #3
 8000afa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000afc:	2304      	movs	r3, #4
 8000afe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b00:	f107 031c 	add.w	r3, r7, #28
 8000b04:	4619      	mov	r1, r3
 8000b06:	4825      	ldr	r0, [pc, #148]	; (8000b9c <HAL_I2C_MspInit+0xf0>)
 8000b08:	f002 f85a 	bl	8002bc0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	617b      	str	r3, [r7, #20]
 8000b10:	4b21      	ldr	r3, [pc, #132]	; (8000b98 <HAL_I2C_MspInit+0xec>)
 8000b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b14:	4a20      	ldr	r2, [pc, #128]	; (8000b98 <HAL_I2C_MspInit+0xec>)
 8000b16:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b1a:	6413      	str	r3, [r2, #64]	; 0x40
 8000b1c:	4b1e      	ldr	r3, [pc, #120]	; (8000b98 <HAL_I2C_MspInit+0xec>)
 8000b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b24:	617b      	str	r3, [r7, #20]
 8000b26:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000b28:	e030      	b.n	8000b8c <HAL_I2C_MspInit+0xe0>
  else if(i2cHandle->Instance==I2C2)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	4a1c      	ldr	r2, [pc, #112]	; (8000ba0 <HAL_I2C_MspInit+0xf4>)
 8000b30:	4293      	cmp	r3, r2
 8000b32:	d12b      	bne.n	8000b8c <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b34:	2300      	movs	r3, #0
 8000b36:	613b      	str	r3, [r7, #16]
 8000b38:	4b17      	ldr	r3, [pc, #92]	; (8000b98 <HAL_I2C_MspInit+0xec>)
 8000b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3c:	4a16      	ldr	r2, [pc, #88]	; (8000b98 <HAL_I2C_MspInit+0xec>)
 8000b3e:	f043 0320 	orr.w	r3, r3, #32
 8000b42:	6313      	str	r3, [r2, #48]	; 0x30
 8000b44:	4b14      	ldr	r3, [pc, #80]	; (8000b98 <HAL_I2C_MspInit+0xec>)
 8000b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b48:	f003 0320 	and.w	r3, r3, #32
 8000b4c:	613b      	str	r3, [r7, #16]
 8000b4e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b50:	2303      	movs	r3, #3
 8000b52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b54:	2312      	movs	r3, #18
 8000b56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b5c:	2303      	movs	r3, #3
 8000b5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000b60:	2304      	movs	r3, #4
 8000b62:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000b64:	f107 031c 	add.w	r3, r7, #28
 8000b68:	4619      	mov	r1, r3
 8000b6a:	480e      	ldr	r0, [pc, #56]	; (8000ba4 <HAL_I2C_MspInit+0xf8>)
 8000b6c:	f002 f828 	bl	8002bc0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000b70:	2300      	movs	r3, #0
 8000b72:	60fb      	str	r3, [r7, #12]
 8000b74:	4b08      	ldr	r3, [pc, #32]	; (8000b98 <HAL_I2C_MspInit+0xec>)
 8000b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b78:	4a07      	ldr	r2, [pc, #28]	; (8000b98 <HAL_I2C_MspInit+0xec>)
 8000b7a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b7e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b80:	4b05      	ldr	r3, [pc, #20]	; (8000b98 <HAL_I2C_MspInit+0xec>)
 8000b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b88:	60fb      	str	r3, [r7, #12]
 8000b8a:	68fb      	ldr	r3, [r7, #12]
}
 8000b8c:	bf00      	nop
 8000b8e:	3730      	adds	r7, #48	; 0x30
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	40005400 	.word	0x40005400
 8000b98:	40023800 	.word	0x40023800
 8000b9c:	40020400 	.word	0x40020400
 8000ba0:	40005800 	.word	0x40005800
 8000ba4:	40021400 	.word	0x40021400

08000ba8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bac:	f000 ff70 	bl	8001a90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bb0:	f000 f822 	bl	8000bf8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bb4:	f7ff fe44 	bl	8000840 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000bb8:	f000 fec6 	bl	8001948 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8000bbc:	f7ff fef6 	bl	80009ac <MX_I2C1_Init>
  MX_TIM7_Init();
 8000bc0:	f000 fccc 	bl	800155c <MX_TIM7_Init>
  MX_TIM3_Init();
 8000bc4:	f000 fb3e 	bl	8001244 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000bc8:	f000 fbb2 	bl	8001330 <MX_TIM4_Init>
  MX_TIM10_Init();
 8000bcc:	f000 fcfc 	bl	80015c8 <MX_TIM10_Init>
  MX_TIM2_Init();
 8000bd0:	f000 fac2 	bl	8001158 <MX_TIM2_Init>
  MX_DMA_Init();
 8000bd4:	f7ff fe04 	bl	80007e0 <MX_DMA_Init>
  MX_ADC1_Init();
 8000bd8:	f7ff fc84 	bl	80004e4 <MX_ADC1_Init>
  MX_TIM5_Init();
 8000bdc:	f000 fc3c 	bl	8001458 <MX_TIM5_Init>
  MX_DAC_Init();
 8000be0:	f7ff fd90 	bl	8000704 <MX_DAC_Init>
  MX_I2C2_Init();
 8000be4:	f7ff ff22 	bl	8000a2c <MX_I2C2_Init>
  MX_SPI2_Init();
 8000be8:	f000 f986 	bl	8000ef8 <MX_SPI2_Init>
  MX_SDIO_SD_Init();
 8000bec:	f000 f874 	bl	8000cd8 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8000bf0:	f006 fe96 	bl	8007920 <MX_FATFS_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000bf4:	e7fe      	b.n	8000bf4 <main+0x4c>
	...

08000bf8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b094      	sub	sp, #80	; 0x50
 8000bfc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bfe:	f107 0320 	add.w	r3, r7, #32
 8000c02:	2230      	movs	r2, #48	; 0x30
 8000c04:	2100      	movs	r1, #0
 8000c06:	4618      	mov	r0, r3
 8000c08:	f007 f964 	bl	8007ed4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c0c:	f107 030c 	add.w	r3, r7, #12
 8000c10:	2200      	movs	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]
 8000c14:	605a      	str	r2, [r3, #4]
 8000c16:	609a      	str	r2, [r3, #8]
 8000c18:	60da      	str	r2, [r3, #12]
 8000c1a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	60bb      	str	r3, [r7, #8]
 8000c20:	4b28      	ldr	r3, [pc, #160]	; (8000cc4 <SystemClock_Config+0xcc>)
 8000c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c24:	4a27      	ldr	r2, [pc, #156]	; (8000cc4 <SystemClock_Config+0xcc>)
 8000c26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c2a:	6413      	str	r3, [r2, #64]	; 0x40
 8000c2c:	4b25      	ldr	r3, [pc, #148]	; (8000cc4 <SystemClock_Config+0xcc>)
 8000c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c34:	60bb      	str	r3, [r7, #8]
 8000c36:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c38:	2300      	movs	r3, #0
 8000c3a:	607b      	str	r3, [r7, #4]
 8000c3c:	4b22      	ldr	r3, [pc, #136]	; (8000cc8 <SystemClock_Config+0xd0>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a21      	ldr	r2, [pc, #132]	; (8000cc8 <SystemClock_Config+0xd0>)
 8000c42:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c46:	6013      	str	r3, [r2, #0]
 8000c48:	4b1f      	ldr	r3, [pc, #124]	; (8000cc8 <SystemClock_Config+0xd0>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c50:	607b      	str	r3, [r7, #4]
 8000c52:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c54:	2301      	movs	r3, #1
 8000c56:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c58:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c5c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c5e:	2302      	movs	r3, #2
 8000c60:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c62:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c66:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000c68:	2304      	movs	r3, #4
 8000c6a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000c6c:	23a8      	movs	r3, #168	; 0xa8
 8000c6e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c70:	2302      	movs	r3, #2
 8000c72:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000c74:	2307      	movs	r3, #7
 8000c76:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c78:	f107 0320 	add.w	r3, r7, #32
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f002 fb61 	bl	8003344 <HAL_RCC_OscConfig>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000c88:	f000 f820 	bl	8000ccc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c8c:	230f      	movs	r3, #15
 8000c8e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c90:	2302      	movs	r3, #2
 8000c92:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c94:	2300      	movs	r3, #0
 8000c96:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c98:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c9c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ca2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ca4:	f107 030c 	add.w	r3, r7, #12
 8000ca8:	2105      	movs	r1, #5
 8000caa:	4618      	mov	r0, r3
 8000cac:	f002 fdc2 	bl	8003834 <HAL_RCC_ClockConfig>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000cb6:	f000 f809 	bl	8000ccc <Error_Handler>
  }
}
 8000cba:	bf00      	nop
 8000cbc:	3750      	adds	r7, #80	; 0x50
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	40023800 	.word	0x40023800
 8000cc8:	40007000 	.word	0x40007000

08000ccc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cd0:	b672      	cpsid	i
}
 8000cd2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cd4:	e7fe      	b.n	8000cd4 <Error_Handler+0x8>
	...

08000cd8 <MX_SDIO_SD_Init>:
DMA_HandleTypeDef hdma_sdio_rx;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000cdc:	4b0c      	ldr	r3, [pc, #48]	; (8000d10 <MX_SDIO_SD_Init+0x38>)
 8000cde:	4a0d      	ldr	r2, [pc, #52]	; (8000d14 <MX_SDIO_SD_Init+0x3c>)
 8000ce0:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000ce2:	4b0b      	ldr	r3, [pc, #44]	; (8000d10 <MX_SDIO_SD_Init+0x38>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000ce8:	4b09      	ldr	r3, [pc, #36]	; (8000d10 <MX_SDIO_SD_Init+0x38>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000cee:	4b08      	ldr	r3, [pc, #32]	; (8000d10 <MX_SDIO_SD_Init+0x38>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000cf4:	4b06      	ldr	r3, [pc, #24]	; (8000d10 <MX_SDIO_SD_Init+0x38>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000cfa:	4b05      	ldr	r3, [pc, #20]	; (8000d10 <MX_SDIO_SD_Init+0x38>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8000d00:	4b03      	ldr	r3, [pc, #12]	; (8000d10 <MX_SDIO_SD_Init+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000d06:	bf00      	nop
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr
 8000d10:	20000260 	.word	0x20000260
 8000d14:	40012c00 	.word	0x40012c00

08000d18 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b08a      	sub	sp, #40	; 0x28
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d20:	f107 0314 	add.w	r3, r7, #20
 8000d24:	2200      	movs	r2, #0
 8000d26:	601a      	str	r2, [r3, #0]
 8000d28:	605a      	str	r2, [r3, #4]
 8000d2a:	609a      	str	r2, [r3, #8]
 8000d2c:	60da      	str	r2, [r3, #12]
 8000d2e:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a68      	ldr	r2, [pc, #416]	; (8000ed8 <HAL_SD_MspInit+0x1c0>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	f040 80c9 	bne.w	8000ece <HAL_SD_MspInit+0x1b6>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	613b      	str	r3, [r7, #16]
 8000d40:	4b66      	ldr	r3, [pc, #408]	; (8000edc <HAL_SD_MspInit+0x1c4>)
 8000d42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d44:	4a65      	ldr	r2, [pc, #404]	; (8000edc <HAL_SD_MspInit+0x1c4>)
 8000d46:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d4a:	6453      	str	r3, [r2, #68]	; 0x44
 8000d4c:	4b63      	ldr	r3, [pc, #396]	; (8000edc <HAL_SD_MspInit+0x1c4>)
 8000d4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000d54:	613b      	str	r3, [r7, #16]
 8000d56:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d58:	2300      	movs	r3, #0
 8000d5a:	60fb      	str	r3, [r7, #12]
 8000d5c:	4b5f      	ldr	r3, [pc, #380]	; (8000edc <HAL_SD_MspInit+0x1c4>)
 8000d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d60:	4a5e      	ldr	r2, [pc, #376]	; (8000edc <HAL_SD_MspInit+0x1c4>)
 8000d62:	f043 0304 	orr.w	r3, r3, #4
 8000d66:	6313      	str	r3, [r2, #48]	; 0x30
 8000d68:	4b5c      	ldr	r3, [pc, #368]	; (8000edc <HAL_SD_MspInit+0x1c4>)
 8000d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6c:	f003 0304 	and.w	r3, r3, #4
 8000d70:	60fb      	str	r3, [r7, #12]
 8000d72:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d74:	2300      	movs	r3, #0
 8000d76:	60bb      	str	r3, [r7, #8]
 8000d78:	4b58      	ldr	r3, [pc, #352]	; (8000edc <HAL_SD_MspInit+0x1c4>)
 8000d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7c:	4a57      	ldr	r2, [pc, #348]	; (8000edc <HAL_SD_MspInit+0x1c4>)
 8000d7e:	f043 0308 	orr.w	r3, r3, #8
 8000d82:	6313      	str	r3, [r2, #48]	; 0x30
 8000d84:	4b55      	ldr	r3, [pc, #340]	; (8000edc <HAL_SD_MspInit+0x1c4>)
 8000d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d88:	f003 0308 	and.w	r3, r3, #8
 8000d8c:	60bb      	str	r3, [r7, #8]
 8000d8e:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000d90:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000d94:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d96:	2302      	movs	r3, #2
 8000d98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d9e:	2303      	movs	r3, #3
 8000da0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000da2:	230c      	movs	r3, #12
 8000da4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000da6:	f107 0314 	add.w	r3, r7, #20
 8000daa:	4619      	mov	r1, r3
 8000dac:	484c      	ldr	r0, [pc, #304]	; (8000ee0 <HAL_SD_MspInit+0x1c8>)
 8000dae:	f001 ff07 	bl	8002bc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000db2:	2304      	movs	r3, #4
 8000db4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db6:	2302      	movs	r3, #2
 8000db8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dbe:	2303      	movs	r3, #3
 8000dc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000dc2:	230c      	movs	r3, #12
 8000dc4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dc6:	f107 0314 	add.w	r3, r7, #20
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4845      	ldr	r0, [pc, #276]	; (8000ee4 <HAL_SD_MspInit+0x1cc>)
 8000dce:	f001 fef7 	bl	8002bc0 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream3;
 8000dd2:	4b45      	ldr	r3, [pc, #276]	; (8000ee8 <HAL_SD_MspInit+0x1d0>)
 8000dd4:	4a45      	ldr	r2, [pc, #276]	; (8000eec <HAL_SD_MspInit+0x1d4>)
 8000dd6:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8000dd8:	4b43      	ldr	r3, [pc, #268]	; (8000ee8 <HAL_SD_MspInit+0x1d0>)
 8000dda:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000dde:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000de0:	4b41      	ldr	r3, [pc, #260]	; (8000ee8 <HAL_SD_MspInit+0x1d0>)
 8000de2:	2240      	movs	r2, #64	; 0x40
 8000de4:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000de6:	4b40      	ldr	r3, [pc, #256]	; (8000ee8 <HAL_SD_MspInit+0x1d0>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000dec:	4b3e      	ldr	r3, [pc, #248]	; (8000ee8 <HAL_SD_MspInit+0x1d0>)
 8000dee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000df2:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000df4:	4b3c      	ldr	r3, [pc, #240]	; (8000ee8 <HAL_SD_MspInit+0x1d0>)
 8000df6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000dfa:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000dfc:	4b3a      	ldr	r3, [pc, #232]	; (8000ee8 <HAL_SD_MspInit+0x1d0>)
 8000dfe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e02:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8000e04:	4b38      	ldr	r3, [pc, #224]	; (8000ee8 <HAL_SD_MspInit+0x1d0>)
 8000e06:	2220      	movs	r2, #32
 8000e08:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000e0a:	4b37      	ldr	r3, [pc, #220]	; (8000ee8 <HAL_SD_MspInit+0x1d0>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000e10:	4b35      	ldr	r3, [pc, #212]	; (8000ee8 <HAL_SD_MspInit+0x1d0>)
 8000e12:	2204      	movs	r2, #4
 8000e14:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000e16:	4b34      	ldr	r3, [pc, #208]	; (8000ee8 <HAL_SD_MspInit+0x1d0>)
 8000e18:	2203      	movs	r2, #3
 8000e1a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8000e1c:	4b32      	ldr	r3, [pc, #200]	; (8000ee8 <HAL_SD_MspInit+0x1d0>)
 8000e1e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000e22:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000e24:	4b30      	ldr	r3, [pc, #192]	; (8000ee8 <HAL_SD_MspInit+0x1d0>)
 8000e26:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000e2a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8000e2c:	482e      	ldr	r0, [pc, #184]	; (8000ee8 <HAL_SD_MspInit+0x1d0>)
 8000e2e:	f001 fab9 	bl	80023a4 <HAL_DMA_Init>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <HAL_SD_MspInit+0x124>
    {
      Error_Handler();
 8000e38:	f7ff ff48 	bl	8000ccc <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	4a2a      	ldr	r2, [pc, #168]	; (8000ee8 <HAL_SD_MspInit+0x1d0>)
 8000e40:	63da      	str	r2, [r3, #60]	; 0x3c
 8000e42:	4a29      	ldr	r2, [pc, #164]	; (8000ee8 <HAL_SD_MspInit+0x1d0>)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream6;
 8000e48:	4b29      	ldr	r3, [pc, #164]	; (8000ef0 <HAL_SD_MspInit+0x1d8>)
 8000e4a:	4a2a      	ldr	r2, [pc, #168]	; (8000ef4 <HAL_SD_MspInit+0x1dc>)
 8000e4c:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8000e4e:	4b28      	ldr	r3, [pc, #160]	; (8000ef0 <HAL_SD_MspInit+0x1d8>)
 8000e50:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e54:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e56:	4b26      	ldr	r3, [pc, #152]	; (8000ef0 <HAL_SD_MspInit+0x1d8>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e5c:	4b24      	ldr	r3, [pc, #144]	; (8000ef0 <HAL_SD_MspInit+0x1d8>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e62:	4b23      	ldr	r3, [pc, #140]	; (8000ef0 <HAL_SD_MspInit+0x1d8>)
 8000e64:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e68:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000e6a:	4b21      	ldr	r3, [pc, #132]	; (8000ef0 <HAL_SD_MspInit+0x1d8>)
 8000e6c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e70:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000e72:	4b1f      	ldr	r3, [pc, #124]	; (8000ef0 <HAL_SD_MspInit+0x1d8>)
 8000e74:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e78:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8000e7a:	4b1d      	ldr	r3, [pc, #116]	; (8000ef0 <HAL_SD_MspInit+0x1d8>)
 8000e7c:	2220      	movs	r2, #32
 8000e7e:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000e80:	4b1b      	ldr	r3, [pc, #108]	; (8000ef0 <HAL_SD_MspInit+0x1d8>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000e86:	4b1a      	ldr	r3, [pc, #104]	; (8000ef0 <HAL_SD_MspInit+0x1d8>)
 8000e88:	2204      	movs	r2, #4
 8000e8a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000e8c:	4b18      	ldr	r3, [pc, #96]	; (8000ef0 <HAL_SD_MspInit+0x1d8>)
 8000e8e:	2203      	movs	r2, #3
 8000e90:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8000e92:	4b17      	ldr	r3, [pc, #92]	; (8000ef0 <HAL_SD_MspInit+0x1d8>)
 8000e94:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000e98:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000e9a:	4b15      	ldr	r3, [pc, #84]	; (8000ef0 <HAL_SD_MspInit+0x1d8>)
 8000e9c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000ea0:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8000ea2:	4813      	ldr	r0, [pc, #76]	; (8000ef0 <HAL_SD_MspInit+0x1d8>)
 8000ea4:	f001 fa7e 	bl	80023a4 <HAL_DMA_Init>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <HAL_SD_MspInit+0x19a>
    {
      Error_Handler();
 8000eae:	f7ff ff0d 	bl	8000ccc <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	4a0e      	ldr	r2, [pc, #56]	; (8000ef0 <HAL_SD_MspInit+0x1d8>)
 8000eb6:	641a      	str	r2, [r3, #64]	; 0x40
 8000eb8:	4a0d      	ldr	r2, [pc, #52]	; (8000ef0 <HAL_SD_MspInit+0x1d8>)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	2031      	movs	r0, #49	; 0x31
 8000ec4:	f001 f9c7 	bl	8002256 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8000ec8:	2031      	movs	r0, #49	; 0x31
 8000eca:	f001 f9e0 	bl	800228e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8000ece:	bf00      	nop
 8000ed0:	3728      	adds	r7, #40	; 0x28
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	40012c00 	.word	0x40012c00
 8000edc:	40023800 	.word	0x40023800
 8000ee0:	40020800 	.word	0x40020800
 8000ee4:	40020c00 	.word	0x40020c00
 8000ee8:	20000200 	.word	0x20000200
 8000eec:	40026458 	.word	0x40026458
 8000ef0:	200001a0 	.word	0x200001a0
 8000ef4:	400264a0 	.word	0x400264a0

08000ef8 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000efc:	4b17      	ldr	r3, [pc, #92]	; (8000f5c <MX_SPI2_Init+0x64>)
 8000efe:	4a18      	ldr	r2, [pc, #96]	; (8000f60 <MX_SPI2_Init+0x68>)
 8000f00:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000f02:	4b16      	ldr	r3, [pc, #88]	; (8000f5c <MX_SPI2_Init+0x64>)
 8000f04:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f08:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000f0a:	4b14      	ldr	r3, [pc, #80]	; (8000f5c <MX_SPI2_Init+0x64>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f10:	4b12      	ldr	r3, [pc, #72]	; (8000f5c <MX_SPI2_Init+0x64>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000f16:	4b11      	ldr	r3, [pc, #68]	; (8000f5c <MX_SPI2_Init+0x64>)
 8000f18:	2202      	movs	r2, #2
 8000f1a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000f1c:	4b0f      	ldr	r3, [pc, #60]	; (8000f5c <MX_SPI2_Init+0x64>)
 8000f1e:	2201      	movs	r2, #1
 8000f20:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000f22:	4b0e      	ldr	r3, [pc, #56]	; (8000f5c <MX_SPI2_Init+0x64>)
 8000f24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f28:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000f2a:	4b0c      	ldr	r3, [pc, #48]	; (8000f5c <MX_SPI2_Init+0x64>)
 8000f2c:	2210      	movs	r2, #16
 8000f2e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f30:	4b0a      	ldr	r3, [pc, #40]	; (8000f5c <MX_SPI2_Init+0x64>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f36:	4b09      	ldr	r3, [pc, #36]	; (8000f5c <MX_SPI2_Init+0x64>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f3c:	4b07      	ldr	r3, [pc, #28]	; (8000f5c <MX_SPI2_Init+0x64>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000f42:	4b06      	ldr	r3, [pc, #24]	; (8000f5c <MX_SPI2_Init+0x64>)
 8000f44:	220a      	movs	r2, #10
 8000f46:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000f48:	4804      	ldr	r0, [pc, #16]	; (8000f5c <MX_SPI2_Init+0x64>)
 8000f4a:	f004 f99e 	bl	800528a <HAL_SPI_Init>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000f54:	f7ff feba 	bl	8000ccc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000f58:	bf00      	nop
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	200002e4 	.word	0x200002e4
 8000f60:	40003800 	.word	0x40003800

08000f64 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b08a      	sub	sp, #40	; 0x28
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f6c:	f107 0314 	add.w	r3, r7, #20
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	605a      	str	r2, [r3, #4]
 8000f76:	609a      	str	r2, [r3, #8]
 8000f78:	60da      	str	r2, [r3, #12]
 8000f7a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a19      	ldr	r2, [pc, #100]	; (8000fe8 <HAL_SPI_MspInit+0x84>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d12c      	bne.n	8000fe0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000f86:	2300      	movs	r3, #0
 8000f88:	613b      	str	r3, [r7, #16]
 8000f8a:	4b18      	ldr	r3, [pc, #96]	; (8000fec <HAL_SPI_MspInit+0x88>)
 8000f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8e:	4a17      	ldr	r2, [pc, #92]	; (8000fec <HAL_SPI_MspInit+0x88>)
 8000f90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f94:	6413      	str	r3, [r2, #64]	; 0x40
 8000f96:	4b15      	ldr	r3, [pc, #84]	; (8000fec <HAL_SPI_MspInit+0x88>)
 8000f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f9e:	613b      	str	r3, [r7, #16]
 8000fa0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	60fb      	str	r3, [r7, #12]
 8000fa6:	4b11      	ldr	r3, [pc, #68]	; (8000fec <HAL_SPI_MspInit+0x88>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	4a10      	ldr	r2, [pc, #64]	; (8000fec <HAL_SPI_MspInit+0x88>)
 8000fac:	f043 0302 	orr.w	r3, r3, #2
 8000fb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb2:	4b0e      	ldr	r3, [pc, #56]	; (8000fec <HAL_SPI_MspInit+0x88>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb6:	f003 0302 	and.w	r3, r3, #2
 8000fba:	60fb      	str	r3, [r7, #12]
 8000fbc:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8000fbe:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8000fc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fcc:	2303      	movs	r3, #3
 8000fce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000fd0:	2305      	movs	r3, #5
 8000fd2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fd4:	f107 0314 	add.w	r3, r7, #20
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4805      	ldr	r0, [pc, #20]	; (8000ff0 <HAL_SPI_MspInit+0x8c>)
 8000fdc:	f001 fdf0 	bl	8002bc0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000fe0:	bf00      	nop
 8000fe2:	3728      	adds	r7, #40	; 0x28
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	40003800 	.word	0x40003800
 8000fec:	40023800 	.word	0x40023800
 8000ff0:	40020400 	.word	0x40020400

08000ff4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	607b      	str	r3, [r7, #4]
 8000ffe:	4b10      	ldr	r3, [pc, #64]	; (8001040 <HAL_MspInit+0x4c>)
 8001000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001002:	4a0f      	ldr	r2, [pc, #60]	; (8001040 <HAL_MspInit+0x4c>)
 8001004:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001008:	6453      	str	r3, [r2, #68]	; 0x44
 800100a:	4b0d      	ldr	r3, [pc, #52]	; (8001040 <HAL_MspInit+0x4c>)
 800100c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800100e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001012:	607b      	str	r3, [r7, #4]
 8001014:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001016:	2300      	movs	r3, #0
 8001018:	603b      	str	r3, [r7, #0]
 800101a:	4b09      	ldr	r3, [pc, #36]	; (8001040 <HAL_MspInit+0x4c>)
 800101c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101e:	4a08      	ldr	r2, [pc, #32]	; (8001040 <HAL_MspInit+0x4c>)
 8001020:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001024:	6413      	str	r3, [r2, #64]	; 0x40
 8001026:	4b06      	ldr	r3, [pc, #24]	; (8001040 <HAL_MspInit+0x4c>)
 8001028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800102e:	603b      	str	r3, [r7, #0]
 8001030:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001032:	bf00      	nop
 8001034:	370c      	adds	r7, #12
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	40023800 	.word	0x40023800

08001044 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001048:	e7fe      	b.n	8001048 <NMI_Handler+0x4>

0800104a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800104a:	b480      	push	{r7}
 800104c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800104e:	e7fe      	b.n	800104e <HardFault_Handler+0x4>

08001050 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001054:	e7fe      	b.n	8001054 <MemManage_Handler+0x4>

08001056 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001056:	b480      	push	{r7}
 8001058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800105a:	e7fe      	b.n	800105a <BusFault_Handler+0x4>

0800105c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001060:	e7fe      	b.n	8001060 <UsageFault_Handler+0x4>

08001062 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001062:	b480      	push	{r7}
 8001064:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001066:	bf00      	nop
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr

08001070 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001074:	bf00      	nop
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr

0800107e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800107e:	b480      	push	{r7}
 8001080:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001082:	bf00      	nop
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr

0800108c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001090:	f000 fd50 	bl	8001b34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001094:	bf00      	nop
 8001096:	bd80      	pop	{r7, pc}

08001098 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800109c:	4802      	ldr	r0, [pc, #8]	; (80010a8 <TIM4_IRQHandler+0x10>)
 800109e:	f004 fa25 	bl	80054ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80010a2:	bf00      	nop
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	2000033c 	.word	0x2000033c

080010ac <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80010b0:	4802      	ldr	r0, [pc, #8]	; (80010bc <USART3_IRQHandler+0x10>)
 80010b2:	f005 f8a7 	bl	8006204 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80010b6:	bf00      	nop
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	200004ec 	.word	0x200004ec

080010c0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80010c4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80010c8:	f001 ff58 	bl	8002f7c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80010cc:	bf00      	nop
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 80010d4:	4802      	ldr	r0, [pc, #8]	; (80010e0 <SDIO_IRQHandler+0x10>)
 80010d6:	f003 f81f 	bl	8004118 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 80010da:	bf00      	nop
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	20000260 	.word	0x20000260

080010e4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80010e8:	4802      	ldr	r0, [pc, #8]	; (80010f4 <TIM7_IRQHandler+0x10>)
 80010ea:	f004 f9ff 	bl	80054ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80010ee:	bf00      	nop
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	200004a4 	.word	0x200004a4

080010f8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80010fc:	4802      	ldr	r0, [pc, #8]	; (8001108 <DMA2_Stream0_IRQHandler+0x10>)
 80010fe:	f001 fae9 	bl	80026d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001102:	bf00      	nop
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	20000084 	.word	0x20000084

0800110c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8001110:	4802      	ldr	r0, [pc, #8]	; (800111c <DMA2_Stream3_IRQHandler+0x10>)
 8001112:	f001 fadf 	bl	80026d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001116:	bf00      	nop
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	20000200 	.word	0x20000200

08001120 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8001124:	4802      	ldr	r0, [pc, #8]	; (8001130 <DMA2_Stream6_IRQHandler+0x10>)
 8001126:	f001 fad5 	bl	80026d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800112a:	bf00      	nop
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	200001a0 	.word	0x200001a0

08001134 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001138:	4b06      	ldr	r3, [pc, #24]	; (8001154 <SystemInit+0x20>)
 800113a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800113e:	4a05      	ldr	r2, [pc, #20]	; (8001154 <SystemInit+0x20>)
 8001140:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001144:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001148:	bf00      	nop
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	e000ed00 	.word	0xe000ed00

08001158 <MX_TIM2_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim10;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b08e      	sub	sp, #56	; 0x38
 800115c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800115e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001162:	2200      	movs	r2, #0
 8001164:	601a      	str	r2, [r3, #0]
 8001166:	605a      	str	r2, [r3, #4]
 8001168:	609a      	str	r2, [r3, #8]
 800116a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800116c:	f107 0320 	add.w	r3, r7, #32
 8001170:	2200      	movs	r2, #0
 8001172:	601a      	str	r2, [r3, #0]
 8001174:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001176:	1d3b      	adds	r3, r7, #4
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	605a      	str	r2, [r3, #4]
 800117e:	609a      	str	r2, [r3, #8]
 8001180:	60da      	str	r2, [r3, #12]
 8001182:	611a      	str	r2, [r3, #16]
 8001184:	615a      	str	r2, [r3, #20]
 8001186:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001188:	4b2d      	ldr	r3, [pc, #180]	; (8001240 <MX_TIM2_Init+0xe8>)
 800118a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800118e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 180-1;
 8001190:	4b2b      	ldr	r3, [pc, #172]	; (8001240 <MX_TIM2_Init+0xe8>)
 8001192:	22b3      	movs	r2, #179	; 0xb3
 8001194:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001196:	4b2a      	ldr	r3, [pc, #168]	; (8001240 <MX_TIM2_Init+0xe8>)
 8001198:	2200      	movs	r2, #0
 800119a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 800119c:	4b28      	ldr	r3, [pc, #160]	; (8001240 <MX_TIM2_Init+0xe8>)
 800119e:	f240 32e7 	movw	r2, #999	; 0x3e7
 80011a2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011a4:	4b26      	ldr	r3, [pc, #152]	; (8001240 <MX_TIM2_Init+0xe8>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011aa:	4b25      	ldr	r3, [pc, #148]	; (8001240 <MX_TIM2_Init+0xe8>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011b0:	4823      	ldr	r0, [pc, #140]	; (8001240 <MX_TIM2_Init+0xe8>)
 80011b2:	f004 f8f3 	bl	800539c <HAL_TIM_Base_Init>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80011bc:	f7ff fd86 	bl	8000ccc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011c4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011ca:	4619      	mov	r1, r3
 80011cc:	481c      	ldr	r0, [pc, #112]	; (8001240 <MX_TIM2_Init+0xe8>)
 80011ce:	f004 fb57 	bl	8005880 <HAL_TIM_ConfigClockSource>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80011d8:	f7ff fd78 	bl	8000ccc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80011dc:	4818      	ldr	r0, [pc, #96]	; (8001240 <MX_TIM2_Init+0xe8>)
 80011de:	f004 f92c 	bl	800543a <HAL_TIM_PWM_Init>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80011e8:	f7ff fd70 	bl	8000ccc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011ec:	2300      	movs	r3, #0
 80011ee:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011f0:	2300      	movs	r3, #0
 80011f2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011f4:	f107 0320 	add.w	r3, r7, #32
 80011f8:	4619      	mov	r1, r3
 80011fa:	4811      	ldr	r0, [pc, #68]	; (8001240 <MX_TIM2_Init+0xe8>)
 80011fc:	f004 ff24 	bl	8006048 <HAL_TIMEx_MasterConfigSynchronization>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001206:	f7ff fd61 	bl	8000ccc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800120a:	2360      	movs	r3, #96	; 0x60
 800120c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 800120e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001212:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001214:	2300      	movs	r3, #0
 8001216:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001218:	2300      	movs	r3, #0
 800121a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800121c:	1d3b      	adds	r3, r7, #4
 800121e:	2200      	movs	r2, #0
 8001220:	4619      	mov	r1, r3
 8001222:	4807      	ldr	r0, [pc, #28]	; (8001240 <MX_TIM2_Init+0xe8>)
 8001224:	f004 fa6a 	bl	80056fc <HAL_TIM_PWM_ConfigChannel>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800122e:	f7ff fd4d 	bl	8000ccc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001232:	4803      	ldr	r0, [pc, #12]	; (8001240 <MX_TIM2_Init+0xe8>)
 8001234:	f000 fab2 	bl	800179c <HAL_TIM_MspPostInit>

}
 8001238:	bf00      	nop
 800123a:	3738      	adds	r7, #56	; 0x38
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	2000045c 	.word	0x2000045c

08001244 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b08e      	sub	sp, #56	; 0x38
 8001248:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800124a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800124e:	2200      	movs	r2, #0
 8001250:	601a      	str	r2, [r3, #0]
 8001252:	605a      	str	r2, [r3, #4]
 8001254:	609a      	str	r2, [r3, #8]
 8001256:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001258:	f107 0320 	add.w	r3, r7, #32
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001262:	1d3b      	adds	r3, r7, #4
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	605a      	str	r2, [r3, #4]
 800126a:	609a      	str	r2, [r3, #8]
 800126c:	60da      	str	r2, [r3, #12]
 800126e:	611a      	str	r2, [r3, #16]
 8001270:	615a      	str	r2, [r3, #20]
 8001272:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001274:	4b2c      	ldr	r3, [pc, #176]	; (8001328 <MX_TIM3_Init+0xe4>)
 8001276:	4a2d      	ldr	r2, [pc, #180]	; (800132c <MX_TIM3_Init+0xe8>)
 8001278:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9-1;
 800127a:	4b2b      	ldr	r3, [pc, #172]	; (8001328 <MX_TIM3_Init+0xe4>)
 800127c:	2208      	movs	r2, #8
 800127e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001280:	4b29      	ldr	r3, [pc, #164]	; (8001328 <MX_TIM3_Init+0xe4>)
 8001282:	2200      	movs	r2, #0
 8001284:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50000-1;
 8001286:	4b28      	ldr	r3, [pc, #160]	; (8001328 <MX_TIM3_Init+0xe4>)
 8001288:	f24c 324f 	movw	r2, #49999	; 0xc34f
 800128c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800128e:	4b26      	ldr	r3, [pc, #152]	; (8001328 <MX_TIM3_Init+0xe4>)
 8001290:	2200      	movs	r2, #0
 8001292:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001294:	4b24      	ldr	r3, [pc, #144]	; (8001328 <MX_TIM3_Init+0xe4>)
 8001296:	2200      	movs	r2, #0
 8001298:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800129a:	4823      	ldr	r0, [pc, #140]	; (8001328 <MX_TIM3_Init+0xe4>)
 800129c:	f004 f87e 	bl	800539c <HAL_TIM_Base_Init>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80012a6:	f7ff fd11 	bl	8000ccc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012ae:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80012b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012b4:	4619      	mov	r1, r3
 80012b6:	481c      	ldr	r0, [pc, #112]	; (8001328 <MX_TIM3_Init+0xe4>)
 80012b8:	f004 fae2 	bl	8005880 <HAL_TIM_ConfigClockSource>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80012c2:	f7ff fd03 	bl	8000ccc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80012c6:	4818      	ldr	r0, [pc, #96]	; (8001328 <MX_TIM3_Init+0xe4>)
 80012c8:	f004 f8b7 	bl	800543a <HAL_TIM_PWM_Init>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80012d2:	f7ff fcfb 	bl	8000ccc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012d6:	2300      	movs	r3, #0
 80012d8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012da:	2300      	movs	r3, #0
 80012dc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012de:	f107 0320 	add.w	r3, r7, #32
 80012e2:	4619      	mov	r1, r3
 80012e4:	4810      	ldr	r0, [pc, #64]	; (8001328 <MX_TIM3_Init+0xe4>)
 80012e6:	f004 feaf 	bl	8006048 <HAL_TIMEx_MasterConfigSynchronization>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80012f0:	f7ff fcec 	bl	8000ccc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012f4:	2360      	movs	r3, #96	; 0x60
 80012f6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80012f8:	2300      	movs	r3, #0
 80012fa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012fc:	2300      	movs	r3, #0
 80012fe:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001300:	2300      	movs	r3, #0
 8001302:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001304:	1d3b      	adds	r3, r7, #4
 8001306:	2200      	movs	r2, #0
 8001308:	4619      	mov	r1, r3
 800130a:	4807      	ldr	r0, [pc, #28]	; (8001328 <MX_TIM3_Init+0xe4>)
 800130c:	f004 f9f6 	bl	80056fc <HAL_TIM_PWM_ConfigChannel>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001316:	f7ff fcd9 	bl	8000ccc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800131a:	4803      	ldr	r0, [pc, #12]	; (8001328 <MX_TIM3_Init+0xe4>)
 800131c:	f000 fa3e 	bl	800179c <HAL_TIM_MspPostInit>

}
 8001320:	bf00      	nop
 8001322:	3738      	adds	r7, #56	; 0x38
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	20000414 	.word	0x20000414
 800132c:	40000400 	.word	0x40000400

08001330 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b08e      	sub	sp, #56	; 0x38
 8001334:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001336:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800133a:	2200      	movs	r2, #0
 800133c:	601a      	str	r2, [r3, #0]
 800133e:	605a      	str	r2, [r3, #4]
 8001340:	609a      	str	r2, [r3, #8]
 8001342:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001344:	f107 0320 	add.w	r3, r7, #32
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800134e:	1d3b      	adds	r3, r7, #4
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]
 8001354:	605a      	str	r2, [r3, #4]
 8001356:	609a      	str	r2, [r3, #8]
 8001358:	60da      	str	r2, [r3, #12]
 800135a:	611a      	str	r2, [r3, #16]
 800135c:	615a      	str	r2, [r3, #20]
 800135e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001360:	4b3b      	ldr	r3, [pc, #236]	; (8001450 <MX_TIM4_Init+0x120>)
 8001362:	4a3c      	ldr	r2, [pc, #240]	; (8001454 <MX_TIM4_Init+0x124>)
 8001364:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 18-1;
 8001366:	4b3a      	ldr	r3, [pc, #232]	; (8001450 <MX_TIM4_Init+0x120>)
 8001368:	2211      	movs	r2, #17
 800136a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800136c:	4b38      	ldr	r3, [pc, #224]	; (8001450 <MX_TIM4_Init+0x120>)
 800136e:	2200      	movs	r2, #0
 8001370:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 50000-1;
 8001372:	4b37      	ldr	r3, [pc, #220]	; (8001450 <MX_TIM4_Init+0x120>)
 8001374:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001378:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800137a:	4b35      	ldr	r3, [pc, #212]	; (8001450 <MX_TIM4_Init+0x120>)
 800137c:	2200      	movs	r2, #0
 800137e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001380:	4b33      	ldr	r3, [pc, #204]	; (8001450 <MX_TIM4_Init+0x120>)
 8001382:	2200      	movs	r2, #0
 8001384:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001386:	4832      	ldr	r0, [pc, #200]	; (8001450 <MX_TIM4_Init+0x120>)
 8001388:	f004 f808 	bl	800539c <HAL_TIM_Base_Init>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001392:	f7ff fc9b 	bl	8000ccc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001396:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800139a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800139c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013a0:	4619      	mov	r1, r3
 80013a2:	482b      	ldr	r0, [pc, #172]	; (8001450 <MX_TIM4_Init+0x120>)
 80013a4:	f004 fa6c 	bl	8005880 <HAL_TIM_ConfigClockSource>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80013ae:	f7ff fc8d 	bl	8000ccc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80013b2:	4827      	ldr	r0, [pc, #156]	; (8001450 <MX_TIM4_Init+0x120>)
 80013b4:	f004 f841 	bl	800543a <HAL_TIM_PWM_Init>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80013be:	f7ff fc85 	bl	8000ccc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013c2:	2300      	movs	r3, #0
 80013c4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013c6:	2300      	movs	r3, #0
 80013c8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80013ca:	f107 0320 	add.w	r3, r7, #32
 80013ce:	4619      	mov	r1, r3
 80013d0:	481f      	ldr	r0, [pc, #124]	; (8001450 <MX_TIM4_Init+0x120>)
 80013d2:	f004 fe39 	bl	8006048 <HAL_TIMEx_MasterConfigSynchronization>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80013dc:	f7ff fc76 	bl	8000ccc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013e0:	2360      	movs	r3, #96	; 0x60
 80013e2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 25000-1;
 80013e4:	f246 13a7 	movw	r3, #24999	; 0x61a7
 80013e8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013ea:	2300      	movs	r3, #0
 80013ec:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013ee:	2300      	movs	r3, #0
 80013f0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013f2:	1d3b      	adds	r3, r7, #4
 80013f4:	2200      	movs	r2, #0
 80013f6:	4619      	mov	r1, r3
 80013f8:	4815      	ldr	r0, [pc, #84]	; (8001450 <MX_TIM4_Init+0x120>)
 80013fa:	f004 f97f 	bl	80056fc <HAL_TIM_PWM_ConfigChannel>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001404:	f7ff fc62 	bl	8000ccc <Error_Handler>
  }
  sConfigOC.Pulse = 12500-1;
 8001408:	f243 03d3 	movw	r3, #12499	; 0x30d3
 800140c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800140e:	1d3b      	adds	r3, r7, #4
 8001410:	2204      	movs	r2, #4
 8001412:	4619      	mov	r1, r3
 8001414:	480e      	ldr	r0, [pc, #56]	; (8001450 <MX_TIM4_Init+0x120>)
 8001416:	f004 f971 	bl	80056fc <HAL_TIM_PWM_ConfigChannel>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <MX_TIM4_Init+0xf4>
  {
    Error_Handler();
 8001420:	f7ff fc54 	bl	8000ccc <Error_Handler>
  }
  sConfigOC.Pulse = 7250-1;
 8001424:	f641 4351 	movw	r3, #7249	; 0x1c51
 8001428:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800142a:	1d3b      	adds	r3, r7, #4
 800142c:	2208      	movs	r2, #8
 800142e:	4619      	mov	r1, r3
 8001430:	4807      	ldr	r0, [pc, #28]	; (8001450 <MX_TIM4_Init+0x120>)
 8001432:	f004 f963 	bl	80056fc <HAL_TIM_PWM_ConfigChannel>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <MX_TIM4_Init+0x110>
  {
    Error_Handler();
 800143c:	f7ff fc46 	bl	8000ccc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001440:	4803      	ldr	r0, [pc, #12]	; (8001450 <MX_TIM4_Init+0x120>)
 8001442:	f000 f9ab 	bl	800179c <HAL_TIM_MspPostInit>

}
 8001446:	bf00      	nop
 8001448:	3738      	adds	r7, #56	; 0x38
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	2000033c 	.word	0x2000033c
 8001454:	40000800 	.word	0x40000800

08001458 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b08e      	sub	sp, #56	; 0x38
 800145c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800145e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001462:	2200      	movs	r2, #0
 8001464:	601a      	str	r2, [r3, #0]
 8001466:	605a      	str	r2, [r3, #4]
 8001468:	609a      	str	r2, [r3, #8]
 800146a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800146c:	f107 0320 	add.w	r3, r7, #32
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001476:	1d3b      	adds	r3, r7, #4
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]
 800147c:	605a      	str	r2, [r3, #4]
 800147e:	609a      	str	r2, [r3, #8]
 8001480:	60da      	str	r2, [r3, #12]
 8001482:	611a      	str	r2, [r3, #16]
 8001484:	615a      	str	r2, [r3, #20]
 8001486:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001488:	4b31      	ldr	r3, [pc, #196]	; (8001550 <MX_TIM5_Init+0xf8>)
 800148a:	4a32      	ldr	r2, [pc, #200]	; (8001554 <MX_TIM5_Init+0xfc>)
 800148c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 9;
 800148e:	4b30      	ldr	r3, [pc, #192]	; (8001550 <MX_TIM5_Init+0xf8>)
 8001490:	2209      	movs	r2, #9
 8001492:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001494:	4b2e      	ldr	r3, [pc, #184]	; (8001550 <MX_TIM5_Init+0xf8>)
 8001496:	2200      	movs	r2, #0
 8001498:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 100000-1;
 800149a:	4b2d      	ldr	r3, [pc, #180]	; (8001550 <MX_TIM5_Init+0xf8>)
 800149c:	4a2e      	ldr	r2, [pc, #184]	; (8001558 <MX_TIM5_Init+0x100>)
 800149e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014a0:	4b2b      	ldr	r3, [pc, #172]	; (8001550 <MX_TIM5_Init+0xf8>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014a6:	4b2a      	ldr	r3, [pc, #168]	; (8001550 <MX_TIM5_Init+0xf8>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80014ac:	4828      	ldr	r0, [pc, #160]	; (8001550 <MX_TIM5_Init+0xf8>)
 80014ae:	f003 ff75 	bl	800539c <HAL_TIM_Base_Init>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <MX_TIM5_Init+0x64>
  {
    Error_Handler();
 80014b8:	f7ff fc08 	bl	8000ccc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014c0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80014c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014c6:	4619      	mov	r1, r3
 80014c8:	4821      	ldr	r0, [pc, #132]	; (8001550 <MX_TIM5_Init+0xf8>)
 80014ca:	f004 f9d9 	bl	8005880 <HAL_TIM_ConfigClockSource>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <MX_TIM5_Init+0x80>
  {
    Error_Handler();
 80014d4:	f7ff fbfa 	bl	8000ccc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80014d8:	481d      	ldr	r0, [pc, #116]	; (8001550 <MX_TIM5_Init+0xf8>)
 80014da:	f003 ffae 	bl	800543a <HAL_TIM_PWM_Init>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <MX_TIM5_Init+0x90>
  {
    Error_Handler();
 80014e4:	f7ff fbf2 	bl	8000ccc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014e8:	2300      	movs	r3, #0
 80014ea:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014ec:	2300      	movs	r3, #0
 80014ee:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80014f0:	f107 0320 	add.w	r3, r7, #32
 80014f4:	4619      	mov	r1, r3
 80014f6:	4816      	ldr	r0, [pc, #88]	; (8001550 <MX_TIM5_Init+0xf8>)
 80014f8:	f004 fda6 	bl	8006048 <HAL_TIMEx_MasterConfigSynchronization>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <MX_TIM5_Init+0xae>
  {
    Error_Handler();
 8001502:	f7ff fbe3 	bl	8000ccc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001506:	2360      	movs	r3, #96	; 0x60
 8001508:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800150a:	2300      	movs	r3, #0
 800150c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800150e:	2300      	movs	r3, #0
 8001510:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001512:	2300      	movs	r3, #0
 8001514:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001516:	1d3b      	adds	r3, r7, #4
 8001518:	2200      	movs	r2, #0
 800151a:	4619      	mov	r1, r3
 800151c:	480c      	ldr	r0, [pc, #48]	; (8001550 <MX_TIM5_Init+0xf8>)
 800151e:	f004 f8ed 	bl	80056fc <HAL_TIM_PWM_ConfigChannel>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <MX_TIM5_Init+0xd4>
  {
    Error_Handler();
 8001528:	f7ff fbd0 	bl	8000ccc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800152c:	1d3b      	adds	r3, r7, #4
 800152e:	220c      	movs	r2, #12
 8001530:	4619      	mov	r1, r3
 8001532:	4807      	ldr	r0, [pc, #28]	; (8001550 <MX_TIM5_Init+0xf8>)
 8001534:	f004 f8e2 	bl	80056fc <HAL_TIM_PWM_ConfigChannel>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <MX_TIM5_Init+0xea>
  {
    Error_Handler();
 800153e:	f7ff fbc5 	bl	8000ccc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001542:	4803      	ldr	r0, [pc, #12]	; (8001550 <MX_TIM5_Init+0xf8>)
 8001544:	f000 f92a 	bl	800179c <HAL_TIM_MspPostInit>

}
 8001548:	bf00      	nop
 800154a:	3738      	adds	r7, #56	; 0x38
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	200003cc 	.word	0x200003cc
 8001554:	40000c00 	.word	0x40000c00
 8001558:	0001869f 	.word	0x0001869f

0800155c <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001562:	463b      	mov	r3, r7
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800156a:	4b15      	ldr	r3, [pc, #84]	; (80015c0 <MX_TIM7_Init+0x64>)
 800156c:	4a15      	ldr	r2, [pc, #84]	; (80015c4 <MX_TIM7_Init+0x68>)
 800156e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 8;
 8001570:	4b13      	ldr	r3, [pc, #76]	; (80015c0 <MX_TIM7_Init+0x64>)
 8001572:	2208      	movs	r2, #8
 8001574:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001576:	4b12      	ldr	r3, [pc, #72]	; (80015c0 <MX_TIM7_Init+0x64>)
 8001578:	2200      	movs	r2, #0
 800157a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 800157c:	4b10      	ldr	r3, [pc, #64]	; (80015c0 <MX_TIM7_Init+0x64>)
 800157e:	f242 720f 	movw	r2, #9999	; 0x270f
 8001582:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001584:	4b0e      	ldr	r3, [pc, #56]	; (80015c0 <MX_TIM7_Init+0x64>)
 8001586:	2280      	movs	r2, #128	; 0x80
 8001588:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800158a:	480d      	ldr	r0, [pc, #52]	; (80015c0 <MX_TIM7_Init+0x64>)
 800158c:	f003 ff06 	bl	800539c <HAL_TIM_Base_Init>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8001596:	f7ff fb99 	bl	8000ccc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800159a:	2300      	movs	r3, #0
 800159c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800159e:	2300      	movs	r3, #0
 80015a0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80015a2:	463b      	mov	r3, r7
 80015a4:	4619      	mov	r1, r3
 80015a6:	4806      	ldr	r0, [pc, #24]	; (80015c0 <MX_TIM7_Init+0x64>)
 80015a8:	f004 fd4e 	bl	8006048 <HAL_TIMEx_MasterConfigSynchronization>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 80015b2:	f7ff fb8b 	bl	8000ccc <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80015b6:	bf00      	nop
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	200004a4 	.word	0x200004a4
 80015c4:	40001400 	.word	0x40001400

080015c8 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b088      	sub	sp, #32
 80015cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80015ce:	1d3b      	adds	r3, r7, #4
 80015d0:	2200      	movs	r2, #0
 80015d2:	601a      	str	r2, [r3, #0]
 80015d4:	605a      	str	r2, [r3, #4]
 80015d6:	609a      	str	r2, [r3, #8]
 80015d8:	60da      	str	r2, [r3, #12]
 80015da:	611a      	str	r2, [r3, #16]
 80015dc:	615a      	str	r2, [r3, #20]
 80015de:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80015e0:	4b1e      	ldr	r3, [pc, #120]	; (800165c <MX_TIM10_Init+0x94>)
 80015e2:	4a1f      	ldr	r2, [pc, #124]	; (8001660 <MX_TIM10_Init+0x98>)
 80015e4:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 72-1;
 80015e6:	4b1d      	ldr	r3, [pc, #116]	; (800165c <MX_TIM10_Init+0x94>)
 80015e8:	2247      	movs	r2, #71	; 0x47
 80015ea:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ec:	4b1b      	ldr	r3, [pc, #108]	; (800165c <MX_TIM10_Init+0x94>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 50000-1;
 80015f2:	4b1a      	ldr	r3, [pc, #104]	; (800165c <MX_TIM10_Init+0x94>)
 80015f4:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80015f8:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015fa:	4b18      	ldr	r3, [pc, #96]	; (800165c <MX_TIM10_Init+0x94>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001600:	4b16      	ldr	r3, [pc, #88]	; (800165c <MX_TIM10_Init+0x94>)
 8001602:	2200      	movs	r2, #0
 8001604:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001606:	4815      	ldr	r0, [pc, #84]	; (800165c <MX_TIM10_Init+0x94>)
 8001608:	f003 fec8 	bl	800539c <HAL_TIM_Base_Init>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8001612:	f7ff fb5b 	bl	8000ccc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8001616:	4811      	ldr	r0, [pc, #68]	; (800165c <MX_TIM10_Init+0x94>)
 8001618:	f003 ff0f 	bl	800543a <HAL_TIM_PWM_Init>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8001622:	f7ff fb53 	bl	8000ccc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001626:	2360      	movs	r3, #96	; 0x60
 8001628:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 800162a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800162e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001630:	2300      	movs	r3, #0
 8001632:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001634:	2300      	movs	r3, #0
 8001636:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001638:	1d3b      	adds	r3, r7, #4
 800163a:	2200      	movs	r2, #0
 800163c:	4619      	mov	r1, r3
 800163e:	4807      	ldr	r0, [pc, #28]	; (800165c <MX_TIM10_Init+0x94>)
 8001640:	f004 f85c 	bl	80056fc <HAL_TIM_PWM_ConfigChannel>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <MX_TIM10_Init+0x86>
  {
    Error_Handler();
 800164a:	f7ff fb3f 	bl	8000ccc <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 800164e:	4803      	ldr	r0, [pc, #12]	; (800165c <MX_TIM10_Init+0x94>)
 8001650:	f000 f8a4 	bl	800179c <HAL_TIM_MspPostInit>

}
 8001654:	bf00      	nop
 8001656:	3720      	adds	r7, #32
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	20000384 	.word	0x20000384
 8001660:	40014400 	.word	0x40014400

08001664 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b088      	sub	sp, #32
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001674:	d10e      	bne.n	8001694 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001676:	2300      	movs	r3, #0
 8001678:	61fb      	str	r3, [r7, #28]
 800167a:	4b42      	ldr	r3, [pc, #264]	; (8001784 <HAL_TIM_Base_MspInit+0x120>)
 800167c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167e:	4a41      	ldr	r2, [pc, #260]	; (8001784 <HAL_TIM_Base_MspInit+0x120>)
 8001680:	f043 0301 	orr.w	r3, r3, #1
 8001684:	6413      	str	r3, [r2, #64]	; 0x40
 8001686:	4b3f      	ldr	r3, [pc, #252]	; (8001784 <HAL_TIM_Base_MspInit+0x120>)
 8001688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168a:	f003 0301 	and.w	r3, r3, #1
 800168e:	61fb      	str	r3, [r7, #28]
 8001690:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_TIM10_CLK_ENABLE();
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 8001692:	e072      	b.n	800177a <HAL_TIM_Base_MspInit+0x116>
  else if(tim_baseHandle->Instance==TIM3)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a3b      	ldr	r2, [pc, #236]	; (8001788 <HAL_TIM_Base_MspInit+0x124>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d10e      	bne.n	80016bc <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800169e:	2300      	movs	r3, #0
 80016a0:	61bb      	str	r3, [r7, #24]
 80016a2:	4b38      	ldr	r3, [pc, #224]	; (8001784 <HAL_TIM_Base_MspInit+0x120>)
 80016a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a6:	4a37      	ldr	r2, [pc, #220]	; (8001784 <HAL_TIM_Base_MspInit+0x120>)
 80016a8:	f043 0302 	orr.w	r3, r3, #2
 80016ac:	6413      	str	r3, [r2, #64]	; 0x40
 80016ae:	4b35      	ldr	r3, [pc, #212]	; (8001784 <HAL_TIM_Base_MspInit+0x120>)
 80016b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b2:	f003 0302 	and.w	r3, r3, #2
 80016b6:	61bb      	str	r3, [r7, #24]
 80016b8:	69bb      	ldr	r3, [r7, #24]
}
 80016ba:	e05e      	b.n	800177a <HAL_TIM_Base_MspInit+0x116>
  else if(tim_baseHandle->Instance==TIM4)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a32      	ldr	r2, [pc, #200]	; (800178c <HAL_TIM_Base_MspInit+0x128>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d116      	bne.n	80016f4 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80016c6:	2300      	movs	r3, #0
 80016c8:	617b      	str	r3, [r7, #20]
 80016ca:	4b2e      	ldr	r3, [pc, #184]	; (8001784 <HAL_TIM_Base_MspInit+0x120>)
 80016cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ce:	4a2d      	ldr	r2, [pc, #180]	; (8001784 <HAL_TIM_Base_MspInit+0x120>)
 80016d0:	f043 0304 	orr.w	r3, r3, #4
 80016d4:	6413      	str	r3, [r2, #64]	; 0x40
 80016d6:	4b2b      	ldr	r3, [pc, #172]	; (8001784 <HAL_TIM_Base_MspInit+0x120>)
 80016d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016da:	f003 0304 	and.w	r3, r3, #4
 80016de:	617b      	str	r3, [r7, #20]
 80016e0:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80016e2:	2200      	movs	r2, #0
 80016e4:	2100      	movs	r1, #0
 80016e6:	201e      	movs	r0, #30
 80016e8:	f000 fdb5 	bl	8002256 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80016ec:	201e      	movs	r0, #30
 80016ee:	f000 fdce 	bl	800228e <HAL_NVIC_EnableIRQ>
}
 80016f2:	e042      	b.n	800177a <HAL_TIM_Base_MspInit+0x116>
  else if(tim_baseHandle->Instance==TIM5)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a25      	ldr	r2, [pc, #148]	; (8001790 <HAL_TIM_Base_MspInit+0x12c>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d10e      	bne.n	800171c <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80016fe:	2300      	movs	r3, #0
 8001700:	613b      	str	r3, [r7, #16]
 8001702:	4b20      	ldr	r3, [pc, #128]	; (8001784 <HAL_TIM_Base_MspInit+0x120>)
 8001704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001706:	4a1f      	ldr	r2, [pc, #124]	; (8001784 <HAL_TIM_Base_MspInit+0x120>)
 8001708:	f043 0308 	orr.w	r3, r3, #8
 800170c:	6413      	str	r3, [r2, #64]	; 0x40
 800170e:	4b1d      	ldr	r3, [pc, #116]	; (8001784 <HAL_TIM_Base_MspInit+0x120>)
 8001710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001712:	f003 0308 	and.w	r3, r3, #8
 8001716:	613b      	str	r3, [r7, #16]
 8001718:	693b      	ldr	r3, [r7, #16]
}
 800171a:	e02e      	b.n	800177a <HAL_TIM_Base_MspInit+0x116>
  else if(tim_baseHandle->Instance==TIM7)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a1c      	ldr	r2, [pc, #112]	; (8001794 <HAL_TIM_Base_MspInit+0x130>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d116      	bne.n	8001754 <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001726:	2300      	movs	r3, #0
 8001728:	60fb      	str	r3, [r7, #12]
 800172a:	4b16      	ldr	r3, [pc, #88]	; (8001784 <HAL_TIM_Base_MspInit+0x120>)
 800172c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172e:	4a15      	ldr	r2, [pc, #84]	; (8001784 <HAL_TIM_Base_MspInit+0x120>)
 8001730:	f043 0320 	orr.w	r3, r3, #32
 8001734:	6413      	str	r3, [r2, #64]	; 0x40
 8001736:	4b13      	ldr	r3, [pc, #76]	; (8001784 <HAL_TIM_Base_MspInit+0x120>)
 8001738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173a:	f003 0320 	and.w	r3, r3, #32
 800173e:	60fb      	str	r3, [r7, #12]
 8001740:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001742:	2200      	movs	r2, #0
 8001744:	2100      	movs	r1, #0
 8001746:	2037      	movs	r0, #55	; 0x37
 8001748:	f000 fd85 	bl	8002256 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800174c:	2037      	movs	r0, #55	; 0x37
 800174e:	f000 fd9e 	bl	800228e <HAL_NVIC_EnableIRQ>
}
 8001752:	e012      	b.n	800177a <HAL_TIM_Base_MspInit+0x116>
  else if(tim_baseHandle->Instance==TIM10)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a0f      	ldr	r2, [pc, #60]	; (8001798 <HAL_TIM_Base_MspInit+0x134>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d10d      	bne.n	800177a <HAL_TIM_Base_MspInit+0x116>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800175e:	2300      	movs	r3, #0
 8001760:	60bb      	str	r3, [r7, #8]
 8001762:	4b08      	ldr	r3, [pc, #32]	; (8001784 <HAL_TIM_Base_MspInit+0x120>)
 8001764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001766:	4a07      	ldr	r2, [pc, #28]	; (8001784 <HAL_TIM_Base_MspInit+0x120>)
 8001768:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800176c:	6453      	str	r3, [r2, #68]	; 0x44
 800176e:	4b05      	ldr	r3, [pc, #20]	; (8001784 <HAL_TIM_Base_MspInit+0x120>)
 8001770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001776:	60bb      	str	r3, [r7, #8]
 8001778:	68bb      	ldr	r3, [r7, #8]
}
 800177a:	bf00      	nop
 800177c:	3720      	adds	r7, #32
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	40023800 	.word	0x40023800
 8001788:	40000400 	.word	0x40000400
 800178c:	40000800 	.word	0x40000800
 8001790:	40000c00 	.word	0x40000c00
 8001794:	40001400 	.word	0x40001400
 8001798:	40014400 	.word	0x40014400

0800179c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b08c      	sub	sp, #48	; 0x30
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a4:	f107 031c 	add.w	r3, r7, #28
 80017a8:	2200      	movs	r2, #0
 80017aa:	601a      	str	r2, [r3, #0]
 80017ac:	605a      	str	r2, [r3, #4]
 80017ae:	609a      	str	r2, [r3, #8]
 80017b0:	60da      	str	r2, [r3, #12]
 80017b2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017bc:	d11e      	bne.n	80017fc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017be:	2300      	movs	r3, #0
 80017c0:	61bb      	str	r3, [r7, #24]
 80017c2:	4b58      	ldr	r3, [pc, #352]	; (8001924 <HAL_TIM_MspPostInit+0x188>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c6:	4a57      	ldr	r2, [pc, #348]	; (8001924 <HAL_TIM_MspPostInit+0x188>)
 80017c8:	f043 0301 	orr.w	r3, r3, #1
 80017cc:	6313      	str	r3, [r2, #48]	; 0x30
 80017ce:	4b55      	ldr	r3, [pc, #340]	; (8001924 <HAL_TIM_MspPostInit+0x188>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d2:	f003 0301 	and.w	r3, r3, #1
 80017d6:	61bb      	str	r3, [r7, #24]
 80017d8:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80017da:	2320      	movs	r3, #32
 80017dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017de:	2302      	movs	r3, #2
 80017e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e2:	2300      	movs	r3, #0
 80017e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e6:	2300      	movs	r3, #0
 80017e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80017ea:	2301      	movs	r3, #1
 80017ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ee:	f107 031c 	add.w	r3, r7, #28
 80017f2:	4619      	mov	r1, r3
 80017f4:	484c      	ldr	r0, [pc, #304]	; (8001928 <HAL_TIM_MspPostInit+0x18c>)
 80017f6:	f001 f9e3 	bl	8002bc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 80017fa:	e08f      	b.n	800191c <HAL_TIM_MspPostInit+0x180>
  else if(timHandle->Instance==TIM3)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a4a      	ldr	r2, [pc, #296]	; (800192c <HAL_TIM_MspPostInit+0x190>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d11e      	bne.n	8001844 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001806:	2300      	movs	r3, #0
 8001808:	617b      	str	r3, [r7, #20]
 800180a:	4b46      	ldr	r3, [pc, #280]	; (8001924 <HAL_TIM_MspPostInit+0x188>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180e:	4a45      	ldr	r2, [pc, #276]	; (8001924 <HAL_TIM_MspPostInit+0x188>)
 8001810:	f043 0304 	orr.w	r3, r3, #4
 8001814:	6313      	str	r3, [r2, #48]	; 0x30
 8001816:	4b43      	ldr	r3, [pc, #268]	; (8001924 <HAL_TIM_MspPostInit+0x188>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181a:	f003 0304 	and.w	r3, r3, #4
 800181e:	617b      	str	r3, [r7, #20]
 8001820:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001822:	2340      	movs	r3, #64	; 0x40
 8001824:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001826:	2302      	movs	r3, #2
 8001828:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182a:	2300      	movs	r3, #0
 800182c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800182e:	2300      	movs	r3, #0
 8001830:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001832:	2302      	movs	r3, #2
 8001834:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001836:	f107 031c 	add.w	r3, r7, #28
 800183a:	4619      	mov	r1, r3
 800183c:	483c      	ldr	r0, [pc, #240]	; (8001930 <HAL_TIM_MspPostInit+0x194>)
 800183e:	f001 f9bf 	bl	8002bc0 <HAL_GPIO_Init>
}
 8001842:	e06b      	b.n	800191c <HAL_TIM_MspPostInit+0x180>
  else if(timHandle->Instance==TIM4)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a3a      	ldr	r2, [pc, #232]	; (8001934 <HAL_TIM_MspPostInit+0x198>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d11f      	bne.n	800188e <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800184e:	2300      	movs	r3, #0
 8001850:	613b      	str	r3, [r7, #16]
 8001852:	4b34      	ldr	r3, [pc, #208]	; (8001924 <HAL_TIM_MspPostInit+0x188>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001856:	4a33      	ldr	r2, [pc, #204]	; (8001924 <HAL_TIM_MspPostInit+0x188>)
 8001858:	f043 0308 	orr.w	r3, r3, #8
 800185c:	6313      	str	r3, [r2, #48]	; 0x30
 800185e:	4b31      	ldr	r3, [pc, #196]	; (8001924 <HAL_TIM_MspPostInit+0x188>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001862:	f003 0308 	and.w	r3, r3, #8
 8001866:	613b      	str	r3, [r7, #16]
 8001868:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 800186a:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800186e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001870:	2302      	movs	r3, #2
 8001872:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001874:	2300      	movs	r3, #0
 8001876:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001878:	2300      	movs	r3, #0
 800187a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800187c:	2302      	movs	r3, #2
 800187e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001880:	f107 031c 	add.w	r3, r7, #28
 8001884:	4619      	mov	r1, r3
 8001886:	482c      	ldr	r0, [pc, #176]	; (8001938 <HAL_TIM_MspPostInit+0x19c>)
 8001888:	f001 f99a 	bl	8002bc0 <HAL_GPIO_Init>
}
 800188c:	e046      	b.n	800191c <HAL_TIM_MspPostInit+0x180>
  else if(timHandle->Instance==TIM5)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a2a      	ldr	r2, [pc, #168]	; (800193c <HAL_TIM_MspPostInit+0x1a0>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d11e      	bne.n	80018d6 <HAL_TIM_MspPostInit+0x13a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001898:	2300      	movs	r3, #0
 800189a:	60fb      	str	r3, [r7, #12]
 800189c:	4b21      	ldr	r3, [pc, #132]	; (8001924 <HAL_TIM_MspPostInit+0x188>)
 800189e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a0:	4a20      	ldr	r2, [pc, #128]	; (8001924 <HAL_TIM_MspPostInit+0x188>)
 80018a2:	f043 0301 	orr.w	r3, r3, #1
 80018a6:	6313      	str	r3, [r2, #48]	; 0x30
 80018a8:	4b1e      	ldr	r3, [pc, #120]	; (8001924 <HAL_TIM_MspPostInit+0x188>)
 80018aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ac:	f003 0301 	and.w	r3, r3, #1
 80018b0:	60fb      	str	r3, [r7, #12]
 80018b2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 80018b4:	2309      	movs	r3, #9
 80018b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b8:	2302      	movs	r3, #2
 80018ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018bc:	2300      	movs	r3, #0
 80018be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c0:	2300      	movs	r3, #0
 80018c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80018c4:	2302      	movs	r3, #2
 80018c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018c8:	f107 031c 	add.w	r3, r7, #28
 80018cc:	4619      	mov	r1, r3
 80018ce:	4816      	ldr	r0, [pc, #88]	; (8001928 <HAL_TIM_MspPostInit+0x18c>)
 80018d0:	f001 f976 	bl	8002bc0 <HAL_GPIO_Init>
}
 80018d4:	e022      	b.n	800191c <HAL_TIM_MspPostInit+0x180>
  else if(timHandle->Instance==TIM10)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a19      	ldr	r2, [pc, #100]	; (8001940 <HAL_TIM_MspPostInit+0x1a4>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d11d      	bne.n	800191c <HAL_TIM_MspPostInit+0x180>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80018e0:	2300      	movs	r3, #0
 80018e2:	60bb      	str	r3, [r7, #8]
 80018e4:	4b0f      	ldr	r3, [pc, #60]	; (8001924 <HAL_TIM_MspPostInit+0x188>)
 80018e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e8:	4a0e      	ldr	r2, [pc, #56]	; (8001924 <HAL_TIM_MspPostInit+0x188>)
 80018ea:	f043 0320 	orr.w	r3, r3, #32
 80018ee:	6313      	str	r3, [r2, #48]	; 0x30
 80018f0:	4b0c      	ldr	r3, [pc, #48]	; (8001924 <HAL_TIM_MspPostInit+0x188>)
 80018f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f4:	f003 0320 	and.w	r3, r3, #32
 80018f8:	60bb      	str	r3, [r7, #8]
 80018fa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80018fc:	2340      	movs	r3, #64	; 0x40
 80018fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001900:	2302      	movs	r3, #2
 8001902:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001904:	2300      	movs	r3, #0
 8001906:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001908:	2300      	movs	r3, #0
 800190a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 800190c:	2303      	movs	r3, #3
 800190e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001910:	f107 031c 	add.w	r3, r7, #28
 8001914:	4619      	mov	r1, r3
 8001916:	480b      	ldr	r0, [pc, #44]	; (8001944 <HAL_TIM_MspPostInit+0x1a8>)
 8001918:	f001 f952 	bl	8002bc0 <HAL_GPIO_Init>
}
 800191c:	bf00      	nop
 800191e:	3730      	adds	r7, #48	; 0x30
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	40023800 	.word	0x40023800
 8001928:	40020000 	.word	0x40020000
 800192c:	40000400 	.word	0x40000400
 8001930:	40020800 	.word	0x40020800
 8001934:	40000800 	.word	0x40000800
 8001938:	40020c00 	.word	0x40020c00
 800193c:	40000c00 	.word	0x40000c00
 8001940:	40014400 	.word	0x40014400
 8001944:	40021400 	.word	0x40021400

08001948 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800194c:	4b11      	ldr	r3, [pc, #68]	; (8001994 <MX_USART3_UART_Init+0x4c>)
 800194e:	4a12      	ldr	r2, [pc, #72]	; (8001998 <MX_USART3_UART_Init+0x50>)
 8001950:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001952:	4b10      	ldr	r3, [pc, #64]	; (8001994 <MX_USART3_UART_Init+0x4c>)
 8001954:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001958:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800195a:	4b0e      	ldr	r3, [pc, #56]	; (8001994 <MX_USART3_UART_Init+0x4c>)
 800195c:	2200      	movs	r2, #0
 800195e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001960:	4b0c      	ldr	r3, [pc, #48]	; (8001994 <MX_USART3_UART_Init+0x4c>)
 8001962:	2200      	movs	r2, #0
 8001964:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001966:	4b0b      	ldr	r3, [pc, #44]	; (8001994 <MX_USART3_UART_Init+0x4c>)
 8001968:	2200      	movs	r2, #0
 800196a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800196c:	4b09      	ldr	r3, [pc, #36]	; (8001994 <MX_USART3_UART_Init+0x4c>)
 800196e:	220c      	movs	r2, #12
 8001970:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001972:	4b08      	ldr	r3, [pc, #32]	; (8001994 <MX_USART3_UART_Init+0x4c>)
 8001974:	2200      	movs	r2, #0
 8001976:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001978:	4b06      	ldr	r3, [pc, #24]	; (8001994 <MX_USART3_UART_Init+0x4c>)
 800197a:	2200      	movs	r2, #0
 800197c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800197e:	4805      	ldr	r0, [pc, #20]	; (8001994 <MX_USART3_UART_Init+0x4c>)
 8001980:	f004 fbf2 	bl	8006168 <HAL_UART_Init>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800198a:	f7ff f99f 	bl	8000ccc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800198e:	bf00      	nop
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	200004ec 	.word	0x200004ec
 8001998:	40004800 	.word	0x40004800

0800199c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b08a      	sub	sp, #40	; 0x28
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a4:	f107 0314 	add.w	r3, r7, #20
 80019a8:	2200      	movs	r2, #0
 80019aa:	601a      	str	r2, [r3, #0]
 80019ac:	605a      	str	r2, [r3, #4]
 80019ae:	609a      	str	r2, [r3, #8]
 80019b0:	60da      	str	r2, [r3, #12]
 80019b2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a1d      	ldr	r2, [pc, #116]	; (8001a30 <HAL_UART_MspInit+0x94>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d134      	bne.n	8001a28 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80019be:	2300      	movs	r3, #0
 80019c0:	613b      	str	r3, [r7, #16]
 80019c2:	4b1c      	ldr	r3, [pc, #112]	; (8001a34 <HAL_UART_MspInit+0x98>)
 80019c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c6:	4a1b      	ldr	r2, [pc, #108]	; (8001a34 <HAL_UART_MspInit+0x98>)
 80019c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019cc:	6413      	str	r3, [r2, #64]	; 0x40
 80019ce:	4b19      	ldr	r3, [pc, #100]	; (8001a34 <HAL_UART_MspInit+0x98>)
 80019d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019d6:	613b      	str	r3, [r7, #16]
 80019d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80019da:	2300      	movs	r3, #0
 80019dc:	60fb      	str	r3, [r7, #12]
 80019de:	4b15      	ldr	r3, [pc, #84]	; (8001a34 <HAL_UART_MspInit+0x98>)
 80019e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e2:	4a14      	ldr	r2, [pc, #80]	; (8001a34 <HAL_UART_MspInit+0x98>)
 80019e4:	f043 0308 	orr.w	r3, r3, #8
 80019e8:	6313      	str	r3, [r2, #48]	; 0x30
 80019ea:	4b12      	ldr	r3, [pc, #72]	; (8001a34 <HAL_UART_MspInit+0x98>)
 80019ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ee:	f003 0308 	and.w	r3, r3, #8
 80019f2:	60fb      	str	r3, [r7, #12]
 80019f4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80019f6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80019fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019fc:	2302      	movs	r3, #2
 80019fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a00:	2300      	movs	r3, #0
 8001a02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a04:	2303      	movs	r3, #3
 8001a06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001a08:	2307      	movs	r3, #7
 8001a0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a0c:	f107 0314 	add.w	r3, r7, #20
 8001a10:	4619      	mov	r1, r3
 8001a12:	4809      	ldr	r0, [pc, #36]	; (8001a38 <HAL_UART_MspInit+0x9c>)
 8001a14:	f001 f8d4 	bl	8002bc0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001a18:	2200      	movs	r2, #0
 8001a1a:	2100      	movs	r1, #0
 8001a1c:	2027      	movs	r0, #39	; 0x27
 8001a1e:	f000 fc1a 	bl	8002256 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001a22:	2027      	movs	r0, #39	; 0x27
 8001a24:	f000 fc33 	bl	800228e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001a28:	bf00      	nop
 8001a2a:	3728      	adds	r7, #40	; 0x28
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	40004800 	.word	0x40004800
 8001a34:	40023800 	.word	0x40023800
 8001a38:	40020c00 	.word	0x40020c00

08001a3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001a3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a74 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a40:	480d      	ldr	r0, [pc, #52]	; (8001a78 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a42:	490e      	ldr	r1, [pc, #56]	; (8001a7c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a44:	4a0e      	ldr	r2, [pc, #56]	; (8001a80 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a48:	e002      	b.n	8001a50 <LoopCopyDataInit>

08001a4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a4e:	3304      	adds	r3, #4

08001a50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a54:	d3f9      	bcc.n	8001a4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a56:	4a0b      	ldr	r2, [pc, #44]	; (8001a84 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a58:	4c0b      	ldr	r4, [pc, #44]	; (8001a88 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a5c:	e001      	b.n	8001a62 <LoopFillZerobss>

08001a5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a60:	3204      	adds	r2, #4

08001a62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a64:	d3fb      	bcc.n	8001a5e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001a66:	f7ff fb65 	bl	8001134 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a6a:	f006 fa0f 	bl	8007e8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a6e:	f7ff f89b 	bl	8000ba8 <main>
  bx  lr    
 8001a72:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001a74:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001a78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a7c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001a80:	08007f40 	.word	0x08007f40
  ldr r2, =_sbss
 8001a84:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001a88:	200009a0 	.word	0x200009a0

08001a8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a8c:	e7fe      	b.n	8001a8c <ADC_IRQHandler>
	...

08001a90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a94:	4b0e      	ldr	r3, [pc, #56]	; (8001ad0 <HAL_Init+0x40>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a0d      	ldr	r2, [pc, #52]	; (8001ad0 <HAL_Init+0x40>)
 8001a9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001aa0:	4b0b      	ldr	r3, [pc, #44]	; (8001ad0 <HAL_Init+0x40>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a0a      	ldr	r2, [pc, #40]	; (8001ad0 <HAL_Init+0x40>)
 8001aa6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001aaa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001aac:	4b08      	ldr	r3, [pc, #32]	; (8001ad0 <HAL_Init+0x40>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a07      	ldr	r2, [pc, #28]	; (8001ad0 <HAL_Init+0x40>)
 8001ab2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ab6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ab8:	2003      	movs	r0, #3
 8001aba:	f000 fbc1 	bl	8002240 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001abe:	200f      	movs	r0, #15
 8001ac0:	f000 f808 	bl	8001ad4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ac4:	f7ff fa96 	bl	8000ff4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ac8:	2300      	movs	r3, #0
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	40023c00 	.word	0x40023c00

08001ad4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001adc:	4b12      	ldr	r3, [pc, #72]	; (8001b28 <HAL_InitTick+0x54>)
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	4b12      	ldr	r3, [pc, #72]	; (8001b2c <HAL_InitTick+0x58>)
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001aea:	fbb3 f3f1 	udiv	r3, r3, r1
 8001aee:	fbb2 f3f3 	udiv	r3, r2, r3
 8001af2:	4618      	mov	r0, r3
 8001af4:	f000 fbd9 	bl	80022aa <HAL_SYSTICK_Config>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e00e      	b.n	8001b20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2b0f      	cmp	r3, #15
 8001b06:	d80a      	bhi.n	8001b1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b08:	2200      	movs	r2, #0
 8001b0a:	6879      	ldr	r1, [r7, #4]
 8001b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b10:	f000 fba1 	bl	8002256 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b14:	4a06      	ldr	r2, [pc, #24]	; (8001b30 <HAL_InitTick+0x5c>)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	e000      	b.n	8001b20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3708      	adds	r7, #8
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	20000000 	.word	0x20000000
 8001b2c:	20000008 	.word	0x20000008
 8001b30:	20000004 	.word	0x20000004

08001b34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b38:	4b06      	ldr	r3, [pc, #24]	; (8001b54 <HAL_IncTick+0x20>)
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	4b06      	ldr	r3, [pc, #24]	; (8001b58 <HAL_IncTick+0x24>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4413      	add	r3, r2
 8001b44:	4a04      	ldr	r2, [pc, #16]	; (8001b58 <HAL_IncTick+0x24>)
 8001b46:	6013      	str	r3, [r2, #0]
}
 8001b48:	bf00      	nop
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	20000008 	.word	0x20000008
 8001b58:	20000530 	.word	0x20000530

08001b5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b60:	4b03      	ldr	r3, [pc, #12]	; (8001b70 <HAL_GetTick+0x14>)
 8001b62:	681b      	ldr	r3, [r3, #0]
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	20000530 	.word	0x20000530

08001b74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b084      	sub	sp, #16
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b7c:	f7ff ffee 	bl	8001b5c <HAL_GetTick>
 8001b80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b8c:	d005      	beq.n	8001b9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b8e:	4b0a      	ldr	r3, [pc, #40]	; (8001bb8 <HAL_Delay+0x44>)
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	461a      	mov	r2, r3
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	4413      	add	r3, r2
 8001b98:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b9a:	bf00      	nop
 8001b9c:	f7ff ffde 	bl	8001b5c <HAL_GetTick>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	68fa      	ldr	r2, [r7, #12]
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d8f7      	bhi.n	8001b9c <HAL_Delay+0x28>
  {
  }
}
 8001bac:	bf00      	nop
 8001bae:	bf00      	nop
 8001bb0:	3710      	adds	r7, #16
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	20000008 	.word	0x20000008

08001bbc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d101      	bne.n	8001bd2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e033      	b.n	8001c3a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d109      	bne.n	8001bee <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f7fe fcfe 	bl	80005dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2200      	movs	r2, #0
 8001be4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2200      	movs	r2, #0
 8001bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf2:	f003 0310 	and.w	r3, r3, #16
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d118      	bne.n	8001c2c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfe:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001c02:	f023 0302 	bic.w	r3, r3, #2
 8001c06:	f043 0202 	orr.w	r2, r3, #2
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f000 f94a 	bl	8001ea8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2200      	movs	r2, #0
 8001c18:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1e:	f023 0303 	bic.w	r3, r3, #3
 8001c22:	f043 0201 	orr.w	r2, r3, #1
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	641a      	str	r2, [r3, #64]	; 0x40
 8001c2a:	e001      	b.n	8001c30 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2200      	movs	r2, #0
 8001c34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001c38:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3710      	adds	r7, #16
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
	...

08001c44 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b085      	sub	sp, #20
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
 8001c4c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d101      	bne.n	8001c60 <HAL_ADC_ConfigChannel+0x1c>
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	e113      	b.n	8001e88 <HAL_ADC_ConfigChannel+0x244>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2201      	movs	r2, #1
 8001c64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	2b09      	cmp	r3, #9
 8001c6e:	d925      	bls.n	8001cbc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	68d9      	ldr	r1, [r3, #12]
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	b29b      	uxth	r3, r3
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	4613      	mov	r3, r2
 8001c80:	005b      	lsls	r3, r3, #1
 8001c82:	4413      	add	r3, r2
 8001c84:	3b1e      	subs	r3, #30
 8001c86:	2207      	movs	r2, #7
 8001c88:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8c:	43da      	mvns	r2, r3
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	400a      	ands	r2, r1
 8001c94:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	68d9      	ldr	r1, [r3, #12]
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	689a      	ldr	r2, [r3, #8]
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	b29b      	uxth	r3, r3
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	4603      	mov	r3, r0
 8001caa:	005b      	lsls	r3, r3, #1
 8001cac:	4403      	add	r3, r0
 8001cae:	3b1e      	subs	r3, #30
 8001cb0:	409a      	lsls	r2, r3
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	430a      	orrs	r2, r1
 8001cb8:	60da      	str	r2, [r3, #12]
 8001cba:	e022      	b.n	8001d02 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	6919      	ldr	r1, [r3, #16]
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	b29b      	uxth	r3, r3
 8001cc8:	461a      	mov	r2, r3
 8001cca:	4613      	mov	r3, r2
 8001ccc:	005b      	lsls	r3, r3, #1
 8001cce:	4413      	add	r3, r2
 8001cd0:	2207      	movs	r2, #7
 8001cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd6:	43da      	mvns	r2, r3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	400a      	ands	r2, r1
 8001cde:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	6919      	ldr	r1, [r3, #16]
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	689a      	ldr	r2, [r3, #8]
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	b29b      	uxth	r3, r3
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	4403      	add	r3, r0
 8001cf8:	409a      	lsls	r2, r3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	430a      	orrs	r2, r1
 8001d00:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	2b06      	cmp	r3, #6
 8001d08:	d824      	bhi.n	8001d54 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	685a      	ldr	r2, [r3, #4]
 8001d14:	4613      	mov	r3, r2
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	4413      	add	r3, r2
 8001d1a:	3b05      	subs	r3, #5
 8001d1c:	221f      	movs	r2, #31
 8001d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d22:	43da      	mvns	r2, r3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	400a      	ands	r2, r1
 8001d2a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	b29b      	uxth	r3, r3
 8001d38:	4618      	mov	r0, r3
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	685a      	ldr	r2, [r3, #4]
 8001d3e:	4613      	mov	r3, r2
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	4413      	add	r3, r2
 8001d44:	3b05      	subs	r3, #5
 8001d46:	fa00 f203 	lsl.w	r2, r0, r3
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	430a      	orrs	r2, r1
 8001d50:	635a      	str	r2, [r3, #52]	; 0x34
 8001d52:	e04c      	b.n	8001dee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	2b0c      	cmp	r3, #12
 8001d5a:	d824      	bhi.n	8001da6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	685a      	ldr	r2, [r3, #4]
 8001d66:	4613      	mov	r3, r2
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	4413      	add	r3, r2
 8001d6c:	3b23      	subs	r3, #35	; 0x23
 8001d6e:	221f      	movs	r2, #31
 8001d70:	fa02 f303 	lsl.w	r3, r2, r3
 8001d74:	43da      	mvns	r2, r3
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	400a      	ands	r2, r1
 8001d7c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	b29b      	uxth	r3, r3
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	685a      	ldr	r2, [r3, #4]
 8001d90:	4613      	mov	r3, r2
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	4413      	add	r3, r2
 8001d96:	3b23      	subs	r3, #35	; 0x23
 8001d98:	fa00 f203 	lsl.w	r2, r0, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	430a      	orrs	r2, r1
 8001da2:	631a      	str	r2, [r3, #48]	; 0x30
 8001da4:	e023      	b.n	8001dee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	685a      	ldr	r2, [r3, #4]
 8001db0:	4613      	mov	r3, r2
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	4413      	add	r3, r2
 8001db6:	3b41      	subs	r3, #65	; 0x41
 8001db8:	221f      	movs	r2, #31
 8001dba:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbe:	43da      	mvns	r2, r3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	400a      	ands	r2, r1
 8001dc6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	b29b      	uxth	r3, r3
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	685a      	ldr	r2, [r3, #4]
 8001dda:	4613      	mov	r3, r2
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	4413      	add	r3, r2
 8001de0:	3b41      	subs	r3, #65	; 0x41
 8001de2:	fa00 f203 	lsl.w	r2, r0, r3
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	430a      	orrs	r2, r1
 8001dec:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001dee:	4b29      	ldr	r3, [pc, #164]	; (8001e94 <HAL_ADC_ConfigChannel+0x250>)
 8001df0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a28      	ldr	r2, [pc, #160]	; (8001e98 <HAL_ADC_ConfigChannel+0x254>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d10f      	bne.n	8001e1c <HAL_ADC_ConfigChannel+0x1d8>
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	2b12      	cmp	r3, #18
 8001e02:	d10b      	bne.n	8001e1c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a1d      	ldr	r2, [pc, #116]	; (8001e98 <HAL_ADC_ConfigChannel+0x254>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d12b      	bne.n	8001e7e <HAL_ADC_ConfigChannel+0x23a>
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a1c      	ldr	r2, [pc, #112]	; (8001e9c <HAL_ADC_ConfigChannel+0x258>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d003      	beq.n	8001e38 <HAL_ADC_ConfigChannel+0x1f4>
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	2b11      	cmp	r3, #17
 8001e36:	d122      	bne.n	8001e7e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a11      	ldr	r2, [pc, #68]	; (8001e9c <HAL_ADC_ConfigChannel+0x258>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d111      	bne.n	8001e7e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001e5a:	4b11      	ldr	r3, [pc, #68]	; (8001ea0 <HAL_ADC_ConfigChannel+0x25c>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a11      	ldr	r2, [pc, #68]	; (8001ea4 <HAL_ADC_ConfigChannel+0x260>)
 8001e60:	fba2 2303 	umull	r2, r3, r2, r3
 8001e64:	0c9a      	lsrs	r2, r3, #18
 8001e66:	4613      	mov	r3, r2
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	4413      	add	r3, r2
 8001e6c:	005b      	lsls	r3, r3, #1
 8001e6e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001e70:	e002      	b.n	8001e78 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	3b01      	subs	r3, #1
 8001e76:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d1f9      	bne.n	8001e72 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2200      	movs	r2, #0
 8001e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001e86:	2300      	movs	r3, #0
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3714      	adds	r7, #20
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr
 8001e94:	40012300 	.word	0x40012300
 8001e98:	40012000 	.word	0x40012000
 8001e9c:	10000012 	.word	0x10000012
 8001ea0:	20000000 	.word	0x20000000
 8001ea4:	431bde83 	.word	0x431bde83

08001ea8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b085      	sub	sp, #20
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001eb0:	4b79      	ldr	r3, [pc, #484]	; (8002098 <ADC_Init+0x1f0>)
 8001eb2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	685a      	ldr	r2, [r3, #4]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	431a      	orrs	r2, r3
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	685a      	ldr	r2, [r3, #4]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001edc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	6859      	ldr	r1, [r3, #4]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	691b      	ldr	r3, [r3, #16]
 8001ee8:	021a      	lsls	r2, r3, #8
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	430a      	orrs	r2, r1
 8001ef0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	685a      	ldr	r2, [r3, #4]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001f00:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	6859      	ldr	r1, [r3, #4]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	689a      	ldr	r2, [r3, #8]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	430a      	orrs	r2, r1
 8001f12:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	689a      	ldr	r2, [r3, #8]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f22:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	6899      	ldr	r1, [r3, #8]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	68da      	ldr	r2, [r3, #12]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	430a      	orrs	r2, r1
 8001f34:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f3a:	4a58      	ldr	r2, [pc, #352]	; (800209c <ADC_Init+0x1f4>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d022      	beq.n	8001f86 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	689a      	ldr	r2, [r3, #8]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f4e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	6899      	ldr	r1, [r3, #8]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	430a      	orrs	r2, r1
 8001f60:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	689a      	ldr	r2, [r3, #8]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001f70:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	6899      	ldr	r1, [r3, #8]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	430a      	orrs	r2, r1
 8001f82:	609a      	str	r2, [r3, #8]
 8001f84:	e00f      	b.n	8001fa6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	689a      	ldr	r2, [r3, #8]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f94:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	689a      	ldr	r2, [r3, #8]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001fa4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	689a      	ldr	r2, [r3, #8]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f022 0202 	bic.w	r2, r2, #2
 8001fb4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	6899      	ldr	r1, [r3, #8]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	7e1b      	ldrb	r3, [r3, #24]
 8001fc0:	005a      	lsls	r2, r3, #1
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	430a      	orrs	r2, r1
 8001fc8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d01b      	beq.n	800200c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	685a      	ldr	r2, [r3, #4]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001fe2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	685a      	ldr	r2, [r3, #4]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001ff2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	6859      	ldr	r1, [r3, #4]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ffe:	3b01      	subs	r3, #1
 8002000:	035a      	lsls	r2, r3, #13
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	430a      	orrs	r2, r1
 8002008:	605a      	str	r2, [r3, #4]
 800200a:	e007      	b.n	800201c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	685a      	ldr	r2, [r3, #4]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800201a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800202a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	69db      	ldr	r3, [r3, #28]
 8002036:	3b01      	subs	r3, #1
 8002038:	051a      	lsls	r2, r3, #20
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	430a      	orrs	r2, r1
 8002040:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	689a      	ldr	r2, [r3, #8]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002050:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	6899      	ldr	r1, [r3, #8]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800205e:	025a      	lsls	r2, r3, #9
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	430a      	orrs	r2, r1
 8002066:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	689a      	ldr	r2, [r3, #8]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002076:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	6899      	ldr	r1, [r3, #8]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	695b      	ldr	r3, [r3, #20]
 8002082:	029a      	lsls	r2, r3, #10
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	430a      	orrs	r2, r1
 800208a:	609a      	str	r2, [r3, #8]
}
 800208c:	bf00      	nop
 800208e:	3714      	adds	r7, #20
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr
 8002098:	40012300 	.word	0x40012300
 800209c:	0f000001 	.word	0x0f000001

080020a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b085      	sub	sp, #20
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	f003 0307 	and.w	r3, r3, #7
 80020ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020b0:	4b0c      	ldr	r3, [pc, #48]	; (80020e4 <__NVIC_SetPriorityGrouping+0x44>)
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020b6:	68ba      	ldr	r2, [r7, #8]
 80020b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020bc:	4013      	ands	r3, r2
 80020be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020d2:	4a04      	ldr	r2, [pc, #16]	; (80020e4 <__NVIC_SetPriorityGrouping+0x44>)
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	60d3      	str	r3, [r2, #12]
}
 80020d8:	bf00      	nop
 80020da:	3714      	adds	r7, #20
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr
 80020e4:	e000ed00 	.word	0xe000ed00

080020e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020ec:	4b04      	ldr	r3, [pc, #16]	; (8002100 <__NVIC_GetPriorityGrouping+0x18>)
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	0a1b      	lsrs	r3, r3, #8
 80020f2:	f003 0307 	and.w	r3, r3, #7
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr
 8002100:	e000ed00 	.word	0xe000ed00

08002104 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	4603      	mov	r3, r0
 800210c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800210e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002112:	2b00      	cmp	r3, #0
 8002114:	db0b      	blt.n	800212e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002116:	79fb      	ldrb	r3, [r7, #7]
 8002118:	f003 021f 	and.w	r2, r3, #31
 800211c:	4907      	ldr	r1, [pc, #28]	; (800213c <__NVIC_EnableIRQ+0x38>)
 800211e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002122:	095b      	lsrs	r3, r3, #5
 8002124:	2001      	movs	r0, #1
 8002126:	fa00 f202 	lsl.w	r2, r0, r2
 800212a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800212e:	bf00      	nop
 8002130:	370c      	adds	r7, #12
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop
 800213c:	e000e100 	.word	0xe000e100

08002140 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	4603      	mov	r3, r0
 8002148:	6039      	str	r1, [r7, #0]
 800214a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800214c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002150:	2b00      	cmp	r3, #0
 8002152:	db0a      	blt.n	800216a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	b2da      	uxtb	r2, r3
 8002158:	490c      	ldr	r1, [pc, #48]	; (800218c <__NVIC_SetPriority+0x4c>)
 800215a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800215e:	0112      	lsls	r2, r2, #4
 8002160:	b2d2      	uxtb	r2, r2
 8002162:	440b      	add	r3, r1
 8002164:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002168:	e00a      	b.n	8002180 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	b2da      	uxtb	r2, r3
 800216e:	4908      	ldr	r1, [pc, #32]	; (8002190 <__NVIC_SetPriority+0x50>)
 8002170:	79fb      	ldrb	r3, [r7, #7]
 8002172:	f003 030f 	and.w	r3, r3, #15
 8002176:	3b04      	subs	r3, #4
 8002178:	0112      	lsls	r2, r2, #4
 800217a:	b2d2      	uxtb	r2, r2
 800217c:	440b      	add	r3, r1
 800217e:	761a      	strb	r2, [r3, #24]
}
 8002180:	bf00      	nop
 8002182:	370c      	adds	r7, #12
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr
 800218c:	e000e100 	.word	0xe000e100
 8002190:	e000ed00 	.word	0xe000ed00

08002194 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002194:	b480      	push	{r7}
 8002196:	b089      	sub	sp, #36	; 0x24
 8002198:	af00      	add	r7, sp, #0
 800219a:	60f8      	str	r0, [r7, #12]
 800219c:	60b9      	str	r1, [r7, #8]
 800219e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	f003 0307 	and.w	r3, r3, #7
 80021a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	f1c3 0307 	rsb	r3, r3, #7
 80021ae:	2b04      	cmp	r3, #4
 80021b0:	bf28      	it	cs
 80021b2:	2304      	movcs	r3, #4
 80021b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	3304      	adds	r3, #4
 80021ba:	2b06      	cmp	r3, #6
 80021bc:	d902      	bls.n	80021c4 <NVIC_EncodePriority+0x30>
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	3b03      	subs	r3, #3
 80021c2:	e000      	b.n	80021c6 <NVIC_EncodePriority+0x32>
 80021c4:	2300      	movs	r3, #0
 80021c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021c8:	f04f 32ff 	mov.w	r2, #4294967295
 80021cc:	69bb      	ldr	r3, [r7, #24]
 80021ce:	fa02 f303 	lsl.w	r3, r2, r3
 80021d2:	43da      	mvns	r2, r3
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	401a      	ands	r2, r3
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021dc:	f04f 31ff 	mov.w	r1, #4294967295
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	fa01 f303 	lsl.w	r3, r1, r3
 80021e6:	43d9      	mvns	r1, r3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021ec:	4313      	orrs	r3, r2
         );
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3724      	adds	r7, #36	; 0x24
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr
	...

080021fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	3b01      	subs	r3, #1
 8002208:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800220c:	d301      	bcc.n	8002212 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800220e:	2301      	movs	r3, #1
 8002210:	e00f      	b.n	8002232 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002212:	4a0a      	ldr	r2, [pc, #40]	; (800223c <SysTick_Config+0x40>)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	3b01      	subs	r3, #1
 8002218:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800221a:	210f      	movs	r1, #15
 800221c:	f04f 30ff 	mov.w	r0, #4294967295
 8002220:	f7ff ff8e 	bl	8002140 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002224:	4b05      	ldr	r3, [pc, #20]	; (800223c <SysTick_Config+0x40>)
 8002226:	2200      	movs	r2, #0
 8002228:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800222a:	4b04      	ldr	r3, [pc, #16]	; (800223c <SysTick_Config+0x40>)
 800222c:	2207      	movs	r2, #7
 800222e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002230:	2300      	movs	r3, #0
}
 8002232:	4618      	mov	r0, r3
 8002234:	3708      	adds	r7, #8
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	e000e010 	.word	0xe000e010

08002240 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	f7ff ff29 	bl	80020a0 <__NVIC_SetPriorityGrouping>
}
 800224e:	bf00      	nop
 8002250:	3708      	adds	r7, #8
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}

08002256 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002256:	b580      	push	{r7, lr}
 8002258:	b086      	sub	sp, #24
 800225a:	af00      	add	r7, sp, #0
 800225c:	4603      	mov	r3, r0
 800225e:	60b9      	str	r1, [r7, #8]
 8002260:	607a      	str	r2, [r7, #4]
 8002262:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002264:	2300      	movs	r3, #0
 8002266:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002268:	f7ff ff3e 	bl	80020e8 <__NVIC_GetPriorityGrouping>
 800226c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800226e:	687a      	ldr	r2, [r7, #4]
 8002270:	68b9      	ldr	r1, [r7, #8]
 8002272:	6978      	ldr	r0, [r7, #20]
 8002274:	f7ff ff8e 	bl	8002194 <NVIC_EncodePriority>
 8002278:	4602      	mov	r2, r0
 800227a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800227e:	4611      	mov	r1, r2
 8002280:	4618      	mov	r0, r3
 8002282:	f7ff ff5d 	bl	8002140 <__NVIC_SetPriority>
}
 8002286:	bf00      	nop
 8002288:	3718      	adds	r7, #24
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}

0800228e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800228e:	b580      	push	{r7, lr}
 8002290:	b082      	sub	sp, #8
 8002292:	af00      	add	r7, sp, #0
 8002294:	4603      	mov	r3, r0
 8002296:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002298:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800229c:	4618      	mov	r0, r3
 800229e:	f7ff ff31 	bl	8002104 <__NVIC_EnableIRQ>
}
 80022a2:	bf00      	nop
 80022a4:	3708      	adds	r7, #8
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}

080022aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022aa:	b580      	push	{r7, lr}
 80022ac:	b082      	sub	sp, #8
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f7ff ffa2 	bl	80021fc <SysTick_Config>
 80022b8:	4603      	mov	r3, r0
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3708      	adds	r7, #8
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}

080022c2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80022c2:	b580      	push	{r7, lr}
 80022c4:	b082      	sub	sp, #8
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d101      	bne.n	80022d4 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e014      	b.n	80022fe <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	791b      	ldrb	r3, [r3, #4]
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d105      	bne.n	80022ea <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2200      	movs	r2, #0
 80022e2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80022e4:	6878      	ldr	r0, [r7, #4]
 80022e6:	f7fe fa37 	bl	8000758 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2202      	movs	r2, #2
 80022ee:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2200      	movs	r2, #0
 80022f4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2201      	movs	r2, #1
 80022fa:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80022fc:	2300      	movs	r3, #0
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3708      	adds	r7, #8
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}

08002306 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002306:	b480      	push	{r7}
 8002308:	b087      	sub	sp, #28
 800230a:	af00      	add	r7, sp, #0
 800230c:	60f8      	str	r0, [r7, #12]
 800230e:	60b9      	str	r1, [r7, #8]
 8002310:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	795b      	ldrb	r3, [r3, #5]
 8002316:	2b01      	cmp	r3, #1
 8002318:	d101      	bne.n	800231e <HAL_DAC_ConfigChannel+0x18>
 800231a:	2302      	movs	r3, #2
 800231c:	e03c      	b.n	8002398 <HAL_DAC_ConfigChannel+0x92>
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2201      	movs	r2, #1
 8002322:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	2202      	movs	r2, #2
 8002328:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	f003 0310 	and.w	r3, r3, #16
 8002338:	f640 72fe 	movw	r2, #4094	; 0xffe
 800233c:	fa02 f303 	lsl.w	r3, r2, r3
 8002340:	43db      	mvns	r3, r3
 8002342:	697a      	ldr	r2, [r7, #20]
 8002344:	4013      	ands	r3, r2
 8002346:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	4313      	orrs	r3, r2
 8002352:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	f003 0310 	and.w	r3, r3, #16
 800235a:	693a      	ldr	r2, [r7, #16]
 800235c:	fa02 f303 	lsl.w	r3, r2, r3
 8002360:	697a      	ldr	r2, [r7, #20]
 8002362:	4313      	orrs	r3, r2
 8002364:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	697a      	ldr	r2, [r7, #20]
 800236c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	6819      	ldr	r1, [r3, #0]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	f003 0310 	and.w	r3, r3, #16
 800237a:	22c0      	movs	r2, #192	; 0xc0
 800237c:	fa02 f303 	lsl.w	r3, r2, r3
 8002380:	43da      	mvns	r2, r3
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	400a      	ands	r2, r1
 8002388:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2201      	movs	r2, #1
 800238e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2200      	movs	r2, #0
 8002394:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002396:	2300      	movs	r3, #0
}
 8002398:	4618      	mov	r0, r3
 800239a:	371c      	adds	r7, #28
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr

080023a4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b086      	sub	sp, #24
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80023ac:	2300      	movs	r3, #0
 80023ae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80023b0:	f7ff fbd4 	bl	8001b5c <HAL_GetTick>
 80023b4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d101      	bne.n	80023c0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e099      	b.n	80024f4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2202      	movs	r2, #2
 80023c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2200      	movs	r2, #0
 80023cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f022 0201 	bic.w	r2, r2, #1
 80023de:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023e0:	e00f      	b.n	8002402 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80023e2:	f7ff fbbb 	bl	8001b5c <HAL_GetTick>
 80023e6:	4602      	mov	r2, r0
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	2b05      	cmp	r3, #5
 80023ee:	d908      	bls.n	8002402 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2220      	movs	r2, #32
 80023f4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2203      	movs	r2, #3
 80023fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80023fe:	2303      	movs	r3, #3
 8002400:	e078      	b.n	80024f4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0301 	and.w	r3, r3, #1
 800240c:	2b00      	cmp	r3, #0
 800240e:	d1e8      	bne.n	80023e2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002418:	697a      	ldr	r2, [r7, #20]
 800241a:	4b38      	ldr	r3, [pc, #224]	; (80024fc <HAL_DMA_Init+0x158>)
 800241c:	4013      	ands	r3, r2
 800241e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	685a      	ldr	r2, [r3, #4]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800242e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	691b      	ldr	r3, [r3, #16]
 8002434:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800243a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	699b      	ldr	r3, [r3, #24]
 8002440:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002446:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6a1b      	ldr	r3, [r3, #32]
 800244c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800244e:	697a      	ldr	r2, [r7, #20]
 8002450:	4313      	orrs	r3, r2
 8002452:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002458:	2b04      	cmp	r3, #4
 800245a:	d107      	bne.n	800246c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002464:	4313      	orrs	r3, r2
 8002466:	697a      	ldr	r2, [r7, #20]
 8002468:	4313      	orrs	r3, r2
 800246a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	697a      	ldr	r2, [r7, #20]
 8002472:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	695b      	ldr	r3, [r3, #20]
 800247a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	f023 0307 	bic.w	r3, r3, #7
 8002482:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002488:	697a      	ldr	r2, [r7, #20]
 800248a:	4313      	orrs	r3, r2
 800248c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002492:	2b04      	cmp	r3, #4
 8002494:	d117      	bne.n	80024c6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800249a:	697a      	ldr	r2, [r7, #20]
 800249c:	4313      	orrs	r3, r2
 800249e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d00e      	beq.n	80024c6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	f000 fb0d 	bl	8002ac8 <DMA_CheckFifoParam>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d008      	beq.n	80024c6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2240      	movs	r2, #64	; 0x40
 80024b8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2201      	movs	r2, #1
 80024be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80024c2:	2301      	movs	r3, #1
 80024c4:	e016      	b.n	80024f4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	697a      	ldr	r2, [r7, #20]
 80024cc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f000 fac4 	bl	8002a5c <DMA_CalcBaseAndBitshift>
 80024d4:	4603      	mov	r3, r0
 80024d6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024dc:	223f      	movs	r2, #63	; 0x3f
 80024de:	409a      	lsls	r2, r3
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2200      	movs	r2, #0
 80024e8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2201      	movs	r2, #1
 80024ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80024f2:	2300      	movs	r3, #0
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	3718      	adds	r7, #24
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	f010803f 	.word	0xf010803f

08002500 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b086      	sub	sp, #24
 8002504:	af00      	add	r7, sp, #0
 8002506:	60f8      	str	r0, [r7, #12]
 8002508:	60b9      	str	r1, [r7, #8]
 800250a:	607a      	str	r2, [r7, #4]
 800250c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800250e:	2300      	movs	r3, #0
 8002510:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002516:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800251e:	2b01      	cmp	r3, #1
 8002520:	d101      	bne.n	8002526 <HAL_DMA_Start_IT+0x26>
 8002522:	2302      	movs	r3, #2
 8002524:	e040      	b.n	80025a8 <HAL_DMA_Start_IT+0xa8>
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2201      	movs	r2, #1
 800252a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002534:	b2db      	uxtb	r3, r3
 8002536:	2b01      	cmp	r3, #1
 8002538:	d12f      	bne.n	800259a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2202      	movs	r2, #2
 800253e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2200      	movs	r2, #0
 8002546:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	68b9      	ldr	r1, [r7, #8]
 800254e:	68f8      	ldr	r0, [r7, #12]
 8002550:	f000 fa56 	bl	8002a00 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002558:	223f      	movs	r2, #63	; 0x3f
 800255a:	409a      	lsls	r2, r3
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f042 0216 	orr.w	r2, r2, #22
 800256e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002574:	2b00      	cmp	r3, #0
 8002576:	d007      	beq.n	8002588 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f042 0208 	orr.w	r2, r2, #8
 8002586:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f042 0201 	orr.w	r2, r2, #1
 8002596:	601a      	str	r2, [r3, #0]
 8002598:	e005      	b.n	80025a6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2200      	movs	r2, #0
 800259e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80025a2:	2302      	movs	r3, #2
 80025a4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80025a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3718      	adds	r7, #24
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}

080025b0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025bc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80025be:	f7ff facd 	bl	8001b5c <HAL_GetTick>
 80025c2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d008      	beq.n	80025e2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2280      	movs	r2, #128	; 0x80
 80025d4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2200      	movs	r2, #0
 80025da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e052      	b.n	8002688 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f022 0216 	bic.w	r2, r2, #22
 80025f0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	695a      	ldr	r2, [r3, #20]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002600:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002606:	2b00      	cmp	r3, #0
 8002608:	d103      	bne.n	8002612 <HAL_DMA_Abort+0x62>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800260e:	2b00      	cmp	r3, #0
 8002610:	d007      	beq.n	8002622 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f022 0208 	bic.w	r2, r2, #8
 8002620:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f022 0201 	bic.w	r2, r2, #1
 8002630:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002632:	e013      	b.n	800265c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002634:	f7ff fa92 	bl	8001b5c <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	2b05      	cmp	r3, #5
 8002640:	d90c      	bls.n	800265c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2220      	movs	r2, #32
 8002646:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2203      	movs	r2, #3
 800264c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2200      	movs	r2, #0
 8002654:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002658:	2303      	movs	r3, #3
 800265a:	e015      	b.n	8002688 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0301 	and.w	r3, r3, #1
 8002666:	2b00      	cmp	r3, #0
 8002668:	d1e4      	bne.n	8002634 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800266e:	223f      	movs	r2, #63	; 0x3f
 8002670:	409a      	lsls	r2, r3
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2201      	movs	r2, #1
 800267a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2200      	movs	r2, #0
 8002682:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002686:	2300      	movs	r3, #0
}
 8002688:	4618      	mov	r0, r3
 800268a:	3710      	adds	r7, #16
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}

08002690 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	2b02      	cmp	r3, #2
 80026a2:	d004      	beq.n	80026ae <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2280      	movs	r2, #128	; 0x80
 80026a8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e00c      	b.n	80026c8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2205      	movs	r2, #5
 80026b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f022 0201 	bic.w	r2, r2, #1
 80026c4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80026c6:	2300      	movs	r3, #0
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	370c      	adds	r7, #12
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr

080026d4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b086      	sub	sp, #24
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80026dc:	2300      	movs	r3, #0
 80026de:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80026e0:	4b92      	ldr	r3, [pc, #584]	; (800292c <HAL_DMA_IRQHandler+0x258>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a92      	ldr	r2, [pc, #584]	; (8002930 <HAL_DMA_IRQHandler+0x25c>)
 80026e6:	fba2 2303 	umull	r2, r3, r2, r3
 80026ea:	0a9b      	lsrs	r3, r3, #10
 80026ec:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026f2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026fe:	2208      	movs	r2, #8
 8002700:	409a      	lsls	r2, r3
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	4013      	ands	r3, r2
 8002706:	2b00      	cmp	r3, #0
 8002708:	d01a      	beq.n	8002740 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0304 	and.w	r3, r3, #4
 8002714:	2b00      	cmp	r3, #0
 8002716:	d013      	beq.n	8002740 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f022 0204 	bic.w	r2, r2, #4
 8002726:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800272c:	2208      	movs	r2, #8
 800272e:	409a      	lsls	r2, r3
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002738:	f043 0201 	orr.w	r2, r3, #1
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002744:	2201      	movs	r2, #1
 8002746:	409a      	lsls	r2, r3
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	4013      	ands	r3, r2
 800274c:	2b00      	cmp	r3, #0
 800274e:	d012      	beq.n	8002776 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	695b      	ldr	r3, [r3, #20]
 8002756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800275a:	2b00      	cmp	r3, #0
 800275c:	d00b      	beq.n	8002776 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002762:	2201      	movs	r2, #1
 8002764:	409a      	lsls	r2, r3
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800276e:	f043 0202 	orr.w	r2, r3, #2
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800277a:	2204      	movs	r2, #4
 800277c:	409a      	lsls	r2, r3
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	4013      	ands	r3, r2
 8002782:	2b00      	cmp	r3, #0
 8002784:	d012      	beq.n	80027ac <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0302 	and.w	r3, r3, #2
 8002790:	2b00      	cmp	r3, #0
 8002792:	d00b      	beq.n	80027ac <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002798:	2204      	movs	r2, #4
 800279a:	409a      	lsls	r2, r3
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027a4:	f043 0204 	orr.w	r2, r3, #4
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027b0:	2210      	movs	r2, #16
 80027b2:	409a      	lsls	r2, r3
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	4013      	ands	r3, r2
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d043      	beq.n	8002844 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0308 	and.w	r3, r3, #8
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d03c      	beq.n	8002844 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ce:	2210      	movs	r2, #16
 80027d0:	409a      	lsls	r2, r3
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d018      	beq.n	8002816 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d108      	bne.n	8002804 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d024      	beq.n	8002844 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	4798      	blx	r3
 8002802:	e01f      	b.n	8002844 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002808:	2b00      	cmp	r3, #0
 800280a:	d01b      	beq.n	8002844 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	4798      	blx	r3
 8002814:	e016      	b.n	8002844 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002820:	2b00      	cmp	r3, #0
 8002822:	d107      	bne.n	8002834 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f022 0208 	bic.w	r2, r2, #8
 8002832:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002838:	2b00      	cmp	r3, #0
 800283a:	d003      	beq.n	8002844 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002848:	2220      	movs	r2, #32
 800284a:	409a      	lsls	r2, r3
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	4013      	ands	r3, r2
 8002850:	2b00      	cmp	r3, #0
 8002852:	f000 808e 	beq.w	8002972 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0310 	and.w	r3, r3, #16
 8002860:	2b00      	cmp	r3, #0
 8002862:	f000 8086 	beq.w	8002972 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800286a:	2220      	movs	r2, #32
 800286c:	409a      	lsls	r2, r3
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002878:	b2db      	uxtb	r3, r3
 800287a:	2b05      	cmp	r3, #5
 800287c:	d136      	bne.n	80028ec <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f022 0216 	bic.w	r2, r2, #22
 800288c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	695a      	ldr	r2, [r3, #20]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800289c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d103      	bne.n	80028ae <HAL_DMA_IRQHandler+0x1da>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d007      	beq.n	80028be <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f022 0208 	bic.w	r2, r2, #8
 80028bc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028c2:	223f      	movs	r2, #63	; 0x3f
 80028c4:	409a      	lsls	r2, r3
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2201      	movs	r2, #1
 80028ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2200      	movs	r2, #0
 80028d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d07d      	beq.n	80029de <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	4798      	blx	r3
        }
        return;
 80028ea:	e078      	b.n	80029de <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d01c      	beq.n	8002934 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002904:	2b00      	cmp	r3, #0
 8002906:	d108      	bne.n	800291a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800290c:	2b00      	cmp	r3, #0
 800290e:	d030      	beq.n	8002972 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	4798      	blx	r3
 8002918:	e02b      	b.n	8002972 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800291e:	2b00      	cmp	r3, #0
 8002920:	d027      	beq.n	8002972 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	4798      	blx	r3
 800292a:	e022      	b.n	8002972 <HAL_DMA_IRQHandler+0x29e>
 800292c:	20000000 	.word	0x20000000
 8002930:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800293e:	2b00      	cmp	r3, #0
 8002940:	d10f      	bne.n	8002962 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f022 0210 	bic.w	r2, r2, #16
 8002950:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2201      	movs	r2, #1
 8002956:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002966:	2b00      	cmp	r3, #0
 8002968:	d003      	beq.n	8002972 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002976:	2b00      	cmp	r3, #0
 8002978:	d032      	beq.n	80029e0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800297e:	f003 0301 	and.w	r3, r3, #1
 8002982:	2b00      	cmp	r3, #0
 8002984:	d022      	beq.n	80029cc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2205      	movs	r2, #5
 800298a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f022 0201 	bic.w	r2, r2, #1
 800299c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	3301      	adds	r3, #1
 80029a2:	60bb      	str	r3, [r7, #8]
 80029a4:	697a      	ldr	r2, [r7, #20]
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d307      	bcc.n	80029ba <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 0301 	and.w	r3, r3, #1
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d1f2      	bne.n	800299e <HAL_DMA_IRQHandler+0x2ca>
 80029b8:	e000      	b.n	80029bc <HAL_DMA_IRQHandler+0x2e8>
          break;
 80029ba:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2201      	movs	r2, #1
 80029c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2200      	movs	r2, #0
 80029c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d005      	beq.n	80029e0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	4798      	blx	r3
 80029dc:	e000      	b.n	80029e0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80029de:	bf00      	nop
    }
  }
}
 80029e0:	3718      	adds	r7, #24
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop

080029e8 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b083      	sub	sp, #12
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	370c      	adds	r7, #12
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr

08002a00 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b085      	sub	sp, #20
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	60f8      	str	r0, [r7, #12]
 8002a08:	60b9      	str	r1, [r7, #8]
 8002a0a:	607a      	str	r2, [r7, #4]
 8002a0c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002a1c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	683a      	ldr	r2, [r7, #0]
 8002a24:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	2b40      	cmp	r3, #64	; 0x40
 8002a2c:	d108      	bne.n	8002a40 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	68ba      	ldr	r2, [r7, #8]
 8002a3c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002a3e:	e007      	b.n	8002a50 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	68ba      	ldr	r2, [r7, #8]
 8002a46:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	60da      	str	r2, [r3, #12]
}
 8002a50:	bf00      	nop
 8002a52:	3714      	adds	r7, #20
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr

08002a5c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b085      	sub	sp, #20
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	3b10      	subs	r3, #16
 8002a6c:	4a14      	ldr	r2, [pc, #80]	; (8002ac0 <DMA_CalcBaseAndBitshift+0x64>)
 8002a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a72:	091b      	lsrs	r3, r3, #4
 8002a74:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002a76:	4a13      	ldr	r2, [pc, #76]	; (8002ac4 <DMA_CalcBaseAndBitshift+0x68>)
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	4413      	add	r3, r2
 8002a7c:	781b      	ldrb	r3, [r3, #0]
 8002a7e:	461a      	mov	r2, r3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2b03      	cmp	r3, #3
 8002a88:	d909      	bls.n	8002a9e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002a92:	f023 0303 	bic.w	r3, r3, #3
 8002a96:	1d1a      	adds	r2, r3, #4
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	659a      	str	r2, [r3, #88]	; 0x58
 8002a9c:	e007      	b.n	8002aae <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002aa6:	f023 0303 	bic.w	r3, r3, #3
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3714      	adds	r7, #20
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr
 8002abe:	bf00      	nop
 8002ac0:	aaaaaaab 	.word	0xaaaaaaab
 8002ac4:	08007f14 	.word	0x08007f14

08002ac8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b085      	sub	sp, #20
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ad8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	699b      	ldr	r3, [r3, #24]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d11f      	bne.n	8002b22 <DMA_CheckFifoParam+0x5a>
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	2b03      	cmp	r3, #3
 8002ae6:	d856      	bhi.n	8002b96 <DMA_CheckFifoParam+0xce>
 8002ae8:	a201      	add	r2, pc, #4	; (adr r2, 8002af0 <DMA_CheckFifoParam+0x28>)
 8002aea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aee:	bf00      	nop
 8002af0:	08002b01 	.word	0x08002b01
 8002af4:	08002b13 	.word	0x08002b13
 8002af8:	08002b01 	.word	0x08002b01
 8002afc:	08002b97 	.word	0x08002b97
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d046      	beq.n	8002b9a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b10:	e043      	b.n	8002b9a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b16:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b1a:	d140      	bne.n	8002b9e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b20:	e03d      	b.n	8002b9e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	699b      	ldr	r3, [r3, #24]
 8002b26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b2a:	d121      	bne.n	8002b70 <DMA_CheckFifoParam+0xa8>
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	2b03      	cmp	r3, #3
 8002b30:	d837      	bhi.n	8002ba2 <DMA_CheckFifoParam+0xda>
 8002b32:	a201      	add	r2, pc, #4	; (adr r2, 8002b38 <DMA_CheckFifoParam+0x70>)
 8002b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b38:	08002b49 	.word	0x08002b49
 8002b3c:	08002b4f 	.word	0x08002b4f
 8002b40:	08002b49 	.word	0x08002b49
 8002b44:	08002b61 	.word	0x08002b61
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	73fb      	strb	r3, [r7, #15]
      break;
 8002b4c:	e030      	b.n	8002bb0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b52:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d025      	beq.n	8002ba6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b5e:	e022      	b.n	8002ba6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b64:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b68:	d11f      	bne.n	8002baa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002b6e:	e01c      	b.n	8002baa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	d903      	bls.n	8002b7e <DMA_CheckFifoParam+0xb6>
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	2b03      	cmp	r3, #3
 8002b7a:	d003      	beq.n	8002b84 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002b7c:	e018      	b.n	8002bb0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	73fb      	strb	r3, [r7, #15]
      break;
 8002b82:	e015      	b.n	8002bb0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d00e      	beq.n	8002bae <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	73fb      	strb	r3, [r7, #15]
      break;
 8002b94:	e00b      	b.n	8002bae <DMA_CheckFifoParam+0xe6>
      break;
 8002b96:	bf00      	nop
 8002b98:	e00a      	b.n	8002bb0 <DMA_CheckFifoParam+0xe8>
      break;
 8002b9a:	bf00      	nop
 8002b9c:	e008      	b.n	8002bb0 <DMA_CheckFifoParam+0xe8>
      break;
 8002b9e:	bf00      	nop
 8002ba0:	e006      	b.n	8002bb0 <DMA_CheckFifoParam+0xe8>
      break;
 8002ba2:	bf00      	nop
 8002ba4:	e004      	b.n	8002bb0 <DMA_CheckFifoParam+0xe8>
      break;
 8002ba6:	bf00      	nop
 8002ba8:	e002      	b.n	8002bb0 <DMA_CheckFifoParam+0xe8>
      break;   
 8002baa:	bf00      	nop
 8002bac:	e000      	b.n	8002bb0 <DMA_CheckFifoParam+0xe8>
      break;
 8002bae:	bf00      	nop
    }
  } 
  
  return status; 
 8002bb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3714      	adds	r7, #20
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
 8002bbe:	bf00      	nop

08002bc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b089      	sub	sp, #36	; 0x24
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	61fb      	str	r3, [r7, #28]
 8002bda:	e177      	b.n	8002ecc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002bdc:	2201      	movs	r2, #1
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	fa02 f303 	lsl.w	r3, r2, r3
 8002be4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	697a      	ldr	r2, [r7, #20]
 8002bec:	4013      	ands	r3, r2
 8002bee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002bf0:	693a      	ldr	r2, [r7, #16]
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	f040 8166 	bne.w	8002ec6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	f003 0303 	and.w	r3, r3, #3
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d005      	beq.n	8002c12 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c0e:	2b02      	cmp	r3, #2
 8002c10:	d130      	bne.n	8002c74 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	005b      	lsls	r3, r3, #1
 8002c1c:	2203      	movs	r2, #3
 8002c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c22:	43db      	mvns	r3, r3
 8002c24:	69ba      	ldr	r2, [r7, #24]
 8002c26:	4013      	ands	r3, r2
 8002c28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	68da      	ldr	r2, [r3, #12]
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	005b      	lsls	r3, r3, #1
 8002c32:	fa02 f303 	lsl.w	r3, r2, r3
 8002c36:	69ba      	ldr	r2, [r7, #24]
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	69ba      	ldr	r2, [r7, #24]
 8002c40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c48:	2201      	movs	r2, #1
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c50:	43db      	mvns	r3, r3
 8002c52:	69ba      	ldr	r2, [r7, #24]
 8002c54:	4013      	ands	r3, r2
 8002c56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	091b      	lsrs	r3, r3, #4
 8002c5e:	f003 0201 	and.w	r2, r3, #1
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	fa02 f303 	lsl.w	r3, r2, r3
 8002c68:	69ba      	ldr	r2, [r7, #24]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	69ba      	ldr	r2, [r7, #24]
 8002c72:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f003 0303 	and.w	r3, r3, #3
 8002c7c:	2b03      	cmp	r3, #3
 8002c7e:	d017      	beq.n	8002cb0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	005b      	lsls	r3, r3, #1
 8002c8a:	2203      	movs	r2, #3
 8002c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c90:	43db      	mvns	r3, r3
 8002c92:	69ba      	ldr	r2, [r7, #24]
 8002c94:	4013      	ands	r3, r2
 8002c96:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	689a      	ldr	r2, [r3, #8]
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	005b      	lsls	r3, r3, #1
 8002ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca4:	69ba      	ldr	r2, [r7, #24]
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	69ba      	ldr	r2, [r7, #24]
 8002cae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	f003 0303 	and.w	r3, r3, #3
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d123      	bne.n	8002d04 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	08da      	lsrs	r2, r3, #3
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	3208      	adds	r2, #8
 8002cc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	f003 0307 	and.w	r3, r3, #7
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	220f      	movs	r2, #15
 8002cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd8:	43db      	mvns	r3, r3
 8002cda:	69ba      	ldr	r2, [r7, #24]
 8002cdc:	4013      	ands	r3, r2
 8002cde:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	691a      	ldr	r2, [r3, #16]
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	f003 0307 	and.w	r3, r3, #7
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf0:	69ba      	ldr	r2, [r7, #24]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	08da      	lsrs	r2, r3, #3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	3208      	adds	r2, #8
 8002cfe:	69b9      	ldr	r1, [r7, #24]
 8002d00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	005b      	lsls	r3, r3, #1
 8002d0e:	2203      	movs	r2, #3
 8002d10:	fa02 f303 	lsl.w	r3, r2, r3
 8002d14:	43db      	mvns	r3, r3
 8002d16:	69ba      	ldr	r2, [r7, #24]
 8002d18:	4013      	ands	r3, r2
 8002d1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f003 0203 	and.w	r2, r3, #3
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	005b      	lsls	r3, r3, #1
 8002d28:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2c:	69ba      	ldr	r2, [r7, #24]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	69ba      	ldr	r2, [r7, #24]
 8002d36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	f000 80c0 	beq.w	8002ec6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d46:	2300      	movs	r3, #0
 8002d48:	60fb      	str	r3, [r7, #12]
 8002d4a:	4b66      	ldr	r3, [pc, #408]	; (8002ee4 <HAL_GPIO_Init+0x324>)
 8002d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d4e:	4a65      	ldr	r2, [pc, #404]	; (8002ee4 <HAL_GPIO_Init+0x324>)
 8002d50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d54:	6453      	str	r3, [r2, #68]	; 0x44
 8002d56:	4b63      	ldr	r3, [pc, #396]	; (8002ee4 <HAL_GPIO_Init+0x324>)
 8002d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d5e:	60fb      	str	r3, [r7, #12]
 8002d60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d62:	4a61      	ldr	r2, [pc, #388]	; (8002ee8 <HAL_GPIO_Init+0x328>)
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	089b      	lsrs	r3, r3, #2
 8002d68:	3302      	adds	r3, #2
 8002d6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	f003 0303 	and.w	r3, r3, #3
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	220f      	movs	r2, #15
 8002d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7e:	43db      	mvns	r3, r3
 8002d80:	69ba      	ldr	r2, [r7, #24]
 8002d82:	4013      	ands	r3, r2
 8002d84:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4a58      	ldr	r2, [pc, #352]	; (8002eec <HAL_GPIO_Init+0x32c>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d037      	beq.n	8002dfe <HAL_GPIO_Init+0x23e>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a57      	ldr	r2, [pc, #348]	; (8002ef0 <HAL_GPIO_Init+0x330>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d031      	beq.n	8002dfa <HAL_GPIO_Init+0x23a>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a56      	ldr	r2, [pc, #344]	; (8002ef4 <HAL_GPIO_Init+0x334>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d02b      	beq.n	8002df6 <HAL_GPIO_Init+0x236>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4a55      	ldr	r2, [pc, #340]	; (8002ef8 <HAL_GPIO_Init+0x338>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d025      	beq.n	8002df2 <HAL_GPIO_Init+0x232>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a54      	ldr	r2, [pc, #336]	; (8002efc <HAL_GPIO_Init+0x33c>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d01f      	beq.n	8002dee <HAL_GPIO_Init+0x22e>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4a53      	ldr	r2, [pc, #332]	; (8002f00 <HAL_GPIO_Init+0x340>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d019      	beq.n	8002dea <HAL_GPIO_Init+0x22a>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4a52      	ldr	r2, [pc, #328]	; (8002f04 <HAL_GPIO_Init+0x344>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d013      	beq.n	8002de6 <HAL_GPIO_Init+0x226>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4a51      	ldr	r2, [pc, #324]	; (8002f08 <HAL_GPIO_Init+0x348>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d00d      	beq.n	8002de2 <HAL_GPIO_Init+0x222>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4a50      	ldr	r2, [pc, #320]	; (8002f0c <HAL_GPIO_Init+0x34c>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d007      	beq.n	8002dde <HAL_GPIO_Init+0x21e>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4a4f      	ldr	r2, [pc, #316]	; (8002f10 <HAL_GPIO_Init+0x350>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d101      	bne.n	8002dda <HAL_GPIO_Init+0x21a>
 8002dd6:	2309      	movs	r3, #9
 8002dd8:	e012      	b.n	8002e00 <HAL_GPIO_Init+0x240>
 8002dda:	230a      	movs	r3, #10
 8002ddc:	e010      	b.n	8002e00 <HAL_GPIO_Init+0x240>
 8002dde:	2308      	movs	r3, #8
 8002de0:	e00e      	b.n	8002e00 <HAL_GPIO_Init+0x240>
 8002de2:	2307      	movs	r3, #7
 8002de4:	e00c      	b.n	8002e00 <HAL_GPIO_Init+0x240>
 8002de6:	2306      	movs	r3, #6
 8002de8:	e00a      	b.n	8002e00 <HAL_GPIO_Init+0x240>
 8002dea:	2305      	movs	r3, #5
 8002dec:	e008      	b.n	8002e00 <HAL_GPIO_Init+0x240>
 8002dee:	2304      	movs	r3, #4
 8002df0:	e006      	b.n	8002e00 <HAL_GPIO_Init+0x240>
 8002df2:	2303      	movs	r3, #3
 8002df4:	e004      	b.n	8002e00 <HAL_GPIO_Init+0x240>
 8002df6:	2302      	movs	r3, #2
 8002df8:	e002      	b.n	8002e00 <HAL_GPIO_Init+0x240>
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e000      	b.n	8002e00 <HAL_GPIO_Init+0x240>
 8002dfe:	2300      	movs	r3, #0
 8002e00:	69fa      	ldr	r2, [r7, #28]
 8002e02:	f002 0203 	and.w	r2, r2, #3
 8002e06:	0092      	lsls	r2, r2, #2
 8002e08:	4093      	lsls	r3, r2
 8002e0a:	69ba      	ldr	r2, [r7, #24]
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e10:	4935      	ldr	r1, [pc, #212]	; (8002ee8 <HAL_GPIO_Init+0x328>)
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	089b      	lsrs	r3, r3, #2
 8002e16:	3302      	adds	r3, #2
 8002e18:	69ba      	ldr	r2, [r7, #24]
 8002e1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e1e:	4b3d      	ldr	r3, [pc, #244]	; (8002f14 <HAL_GPIO_Init+0x354>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	43db      	mvns	r3, r3
 8002e28:	69ba      	ldr	r2, [r7, #24]
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d003      	beq.n	8002e42 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002e3a:	69ba      	ldr	r2, [r7, #24]
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e42:	4a34      	ldr	r2, [pc, #208]	; (8002f14 <HAL_GPIO_Init+0x354>)
 8002e44:	69bb      	ldr	r3, [r7, #24]
 8002e46:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002e48:	4b32      	ldr	r3, [pc, #200]	; (8002f14 <HAL_GPIO_Init+0x354>)
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	43db      	mvns	r3, r3
 8002e52:	69ba      	ldr	r2, [r7, #24]
 8002e54:	4013      	ands	r3, r2
 8002e56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d003      	beq.n	8002e6c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002e64:	69ba      	ldr	r2, [r7, #24]
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e6c:	4a29      	ldr	r2, [pc, #164]	; (8002f14 <HAL_GPIO_Init+0x354>)
 8002e6e:	69bb      	ldr	r3, [r7, #24]
 8002e70:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e72:	4b28      	ldr	r3, [pc, #160]	; (8002f14 <HAL_GPIO_Init+0x354>)
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	43db      	mvns	r3, r3
 8002e7c:	69ba      	ldr	r2, [r7, #24]
 8002e7e:	4013      	ands	r3, r2
 8002e80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d003      	beq.n	8002e96 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002e8e:	69ba      	ldr	r2, [r7, #24]
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e96:	4a1f      	ldr	r2, [pc, #124]	; (8002f14 <HAL_GPIO_Init+0x354>)
 8002e98:	69bb      	ldr	r3, [r7, #24]
 8002e9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e9c:	4b1d      	ldr	r3, [pc, #116]	; (8002f14 <HAL_GPIO_Init+0x354>)
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	43db      	mvns	r3, r3
 8002ea6:	69ba      	ldr	r2, [r7, #24]
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d003      	beq.n	8002ec0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002eb8:	69ba      	ldr	r2, [r7, #24]
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ec0:	4a14      	ldr	r2, [pc, #80]	; (8002f14 <HAL_GPIO_Init+0x354>)
 8002ec2:	69bb      	ldr	r3, [r7, #24]
 8002ec4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	3301      	adds	r3, #1
 8002eca:	61fb      	str	r3, [r7, #28]
 8002ecc:	69fb      	ldr	r3, [r7, #28]
 8002ece:	2b0f      	cmp	r3, #15
 8002ed0:	f67f ae84 	bls.w	8002bdc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ed4:	bf00      	nop
 8002ed6:	bf00      	nop
 8002ed8:	3724      	adds	r7, #36	; 0x24
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr
 8002ee2:	bf00      	nop
 8002ee4:	40023800 	.word	0x40023800
 8002ee8:	40013800 	.word	0x40013800
 8002eec:	40020000 	.word	0x40020000
 8002ef0:	40020400 	.word	0x40020400
 8002ef4:	40020800 	.word	0x40020800
 8002ef8:	40020c00 	.word	0x40020c00
 8002efc:	40021000 	.word	0x40021000
 8002f00:	40021400 	.word	0x40021400
 8002f04:	40021800 	.word	0x40021800
 8002f08:	40021c00 	.word	0x40021c00
 8002f0c:	40022000 	.word	0x40022000
 8002f10:	40022400 	.word	0x40022400
 8002f14:	40013c00 	.word	0x40013c00

08002f18 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b085      	sub	sp, #20
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	460b      	mov	r3, r1
 8002f22:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	691a      	ldr	r2, [r3, #16]
 8002f28:	887b      	ldrh	r3, [r7, #2]
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d002      	beq.n	8002f36 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002f30:	2301      	movs	r3, #1
 8002f32:	73fb      	strb	r3, [r7, #15]
 8002f34:	e001      	b.n	8002f3a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002f36:	2300      	movs	r3, #0
 8002f38:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002f3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3714      	adds	r7, #20
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr

08002f48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
 8002f50:	460b      	mov	r3, r1
 8002f52:	807b      	strh	r3, [r7, #2]
 8002f54:	4613      	mov	r3, r2
 8002f56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f58:	787b      	ldrb	r3, [r7, #1]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d003      	beq.n	8002f66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f5e:	887a      	ldrh	r2, [r7, #2]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f64:	e003      	b.n	8002f6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f66:	887b      	ldrh	r3, [r7, #2]
 8002f68:	041a      	lsls	r2, r3, #16
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	619a      	str	r2, [r3, #24]
}
 8002f6e:	bf00      	nop
 8002f70:	370c      	adds	r7, #12
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr
	...

08002f7c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b082      	sub	sp, #8
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	4603      	mov	r3, r0
 8002f84:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002f86:	4b08      	ldr	r3, [pc, #32]	; (8002fa8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f88:	695a      	ldr	r2, [r3, #20]
 8002f8a:	88fb      	ldrh	r3, [r7, #6]
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d006      	beq.n	8002fa0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002f92:	4a05      	ldr	r2, [pc, #20]	; (8002fa8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f94:	88fb      	ldrh	r3, [r7, #6]
 8002f96:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002f98:	88fb      	ldrh	r3, [r7, #6]
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f000 f806 	bl	8002fac <HAL_GPIO_EXTI_Callback>
  }
}
 8002fa0:	bf00      	nop
 8002fa2:	3708      	adds	r7, #8
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	40013c00 	.word	0x40013c00

08002fac <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b083      	sub	sp, #12
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002fb6:	bf00      	nop
 8002fb8:	370c      	adds	r7, #12
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr
	...

08002fc4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d101      	bne.n	8002fd6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e12b      	b.n	800322e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d106      	bne.n	8002ff0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f7fd fd5e 	bl	8000aac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2224      	movs	r2, #36	; 0x24
 8002ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f022 0201 	bic.w	r2, r2, #1
 8003006:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003016:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003026:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003028:	f000 fdd8 	bl	8003bdc <HAL_RCC_GetPCLK1Freq>
 800302c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	4a81      	ldr	r2, [pc, #516]	; (8003238 <HAL_I2C_Init+0x274>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d807      	bhi.n	8003048 <HAL_I2C_Init+0x84>
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	4a80      	ldr	r2, [pc, #512]	; (800323c <HAL_I2C_Init+0x278>)
 800303c:	4293      	cmp	r3, r2
 800303e:	bf94      	ite	ls
 8003040:	2301      	movls	r3, #1
 8003042:	2300      	movhi	r3, #0
 8003044:	b2db      	uxtb	r3, r3
 8003046:	e006      	b.n	8003056 <HAL_I2C_Init+0x92>
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	4a7d      	ldr	r2, [pc, #500]	; (8003240 <HAL_I2C_Init+0x27c>)
 800304c:	4293      	cmp	r3, r2
 800304e:	bf94      	ite	ls
 8003050:	2301      	movls	r3, #1
 8003052:	2300      	movhi	r3, #0
 8003054:	b2db      	uxtb	r3, r3
 8003056:	2b00      	cmp	r3, #0
 8003058:	d001      	beq.n	800305e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e0e7      	b.n	800322e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	4a78      	ldr	r2, [pc, #480]	; (8003244 <HAL_I2C_Init+0x280>)
 8003062:	fba2 2303 	umull	r2, r3, r2, r3
 8003066:	0c9b      	lsrs	r3, r3, #18
 8003068:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	68ba      	ldr	r2, [r7, #8]
 800307a:	430a      	orrs	r2, r1
 800307c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	6a1b      	ldr	r3, [r3, #32]
 8003084:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	4a6a      	ldr	r2, [pc, #424]	; (8003238 <HAL_I2C_Init+0x274>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d802      	bhi.n	8003098 <HAL_I2C_Init+0xd4>
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	3301      	adds	r3, #1
 8003096:	e009      	b.n	80030ac <HAL_I2C_Init+0xe8>
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800309e:	fb02 f303 	mul.w	r3, r2, r3
 80030a2:	4a69      	ldr	r2, [pc, #420]	; (8003248 <HAL_I2C_Init+0x284>)
 80030a4:	fba2 2303 	umull	r2, r3, r2, r3
 80030a8:	099b      	lsrs	r3, r3, #6
 80030aa:	3301      	adds	r3, #1
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	6812      	ldr	r2, [r2, #0]
 80030b0:	430b      	orrs	r3, r1
 80030b2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	69db      	ldr	r3, [r3, #28]
 80030ba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80030be:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	495c      	ldr	r1, [pc, #368]	; (8003238 <HAL_I2C_Init+0x274>)
 80030c8:	428b      	cmp	r3, r1
 80030ca:	d819      	bhi.n	8003100 <HAL_I2C_Init+0x13c>
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	1e59      	subs	r1, r3, #1
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	005b      	lsls	r3, r3, #1
 80030d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80030da:	1c59      	adds	r1, r3, #1
 80030dc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80030e0:	400b      	ands	r3, r1
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d00a      	beq.n	80030fc <HAL_I2C_Init+0x138>
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	1e59      	subs	r1, r3, #1
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	005b      	lsls	r3, r3, #1
 80030f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80030f4:	3301      	adds	r3, #1
 80030f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030fa:	e051      	b.n	80031a0 <HAL_I2C_Init+0x1dc>
 80030fc:	2304      	movs	r3, #4
 80030fe:	e04f      	b.n	80031a0 <HAL_I2C_Init+0x1dc>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d111      	bne.n	800312c <HAL_I2C_Init+0x168>
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	1e58      	subs	r0, r3, #1
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6859      	ldr	r1, [r3, #4]
 8003110:	460b      	mov	r3, r1
 8003112:	005b      	lsls	r3, r3, #1
 8003114:	440b      	add	r3, r1
 8003116:	fbb0 f3f3 	udiv	r3, r0, r3
 800311a:	3301      	adds	r3, #1
 800311c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003120:	2b00      	cmp	r3, #0
 8003122:	bf0c      	ite	eq
 8003124:	2301      	moveq	r3, #1
 8003126:	2300      	movne	r3, #0
 8003128:	b2db      	uxtb	r3, r3
 800312a:	e012      	b.n	8003152 <HAL_I2C_Init+0x18e>
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	1e58      	subs	r0, r3, #1
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6859      	ldr	r1, [r3, #4]
 8003134:	460b      	mov	r3, r1
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	440b      	add	r3, r1
 800313a:	0099      	lsls	r1, r3, #2
 800313c:	440b      	add	r3, r1
 800313e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003142:	3301      	adds	r3, #1
 8003144:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003148:	2b00      	cmp	r3, #0
 800314a:	bf0c      	ite	eq
 800314c:	2301      	moveq	r3, #1
 800314e:	2300      	movne	r3, #0
 8003150:	b2db      	uxtb	r3, r3
 8003152:	2b00      	cmp	r3, #0
 8003154:	d001      	beq.n	800315a <HAL_I2C_Init+0x196>
 8003156:	2301      	movs	r3, #1
 8003158:	e022      	b.n	80031a0 <HAL_I2C_Init+0x1dc>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d10e      	bne.n	8003180 <HAL_I2C_Init+0x1bc>
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	1e58      	subs	r0, r3, #1
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6859      	ldr	r1, [r3, #4]
 800316a:	460b      	mov	r3, r1
 800316c:	005b      	lsls	r3, r3, #1
 800316e:	440b      	add	r3, r1
 8003170:	fbb0 f3f3 	udiv	r3, r0, r3
 8003174:	3301      	adds	r3, #1
 8003176:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800317a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800317e:	e00f      	b.n	80031a0 <HAL_I2C_Init+0x1dc>
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	1e58      	subs	r0, r3, #1
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6859      	ldr	r1, [r3, #4]
 8003188:	460b      	mov	r3, r1
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	440b      	add	r3, r1
 800318e:	0099      	lsls	r1, r3, #2
 8003190:	440b      	add	r3, r1
 8003192:	fbb0 f3f3 	udiv	r3, r0, r3
 8003196:	3301      	adds	r3, #1
 8003198:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800319c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80031a0:	6879      	ldr	r1, [r7, #4]
 80031a2:	6809      	ldr	r1, [r1, #0]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	69da      	ldr	r2, [r3, #28]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6a1b      	ldr	r3, [r3, #32]
 80031ba:	431a      	orrs	r2, r3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	430a      	orrs	r2, r1
 80031c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80031ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	6911      	ldr	r1, [r2, #16]
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	68d2      	ldr	r2, [r2, #12]
 80031da:	4311      	orrs	r1, r2
 80031dc:	687a      	ldr	r2, [r7, #4]
 80031de:	6812      	ldr	r2, [r2, #0]
 80031e0:	430b      	orrs	r3, r1
 80031e2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	68db      	ldr	r3, [r3, #12]
 80031ea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	695a      	ldr	r2, [r3, #20]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	699b      	ldr	r3, [r3, #24]
 80031f6:	431a      	orrs	r2, r3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	430a      	orrs	r2, r1
 80031fe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f042 0201 	orr.w	r2, r2, #1
 800320e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2200      	movs	r2, #0
 8003214:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2220      	movs	r2, #32
 800321a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2200      	movs	r2, #0
 8003222:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2200      	movs	r2, #0
 8003228:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800322c:	2300      	movs	r3, #0
}
 800322e:	4618      	mov	r0, r3
 8003230:	3710      	adds	r7, #16
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	000186a0 	.word	0x000186a0
 800323c:	001e847f 	.word	0x001e847f
 8003240:	003d08ff 	.word	0x003d08ff
 8003244:	431bde83 	.word	0x431bde83
 8003248:	10624dd3 	.word	0x10624dd3

0800324c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800324c:	b480      	push	{r7}
 800324e:	b083      	sub	sp, #12
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
 8003254:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800325c:	b2db      	uxtb	r3, r3
 800325e:	2b20      	cmp	r3, #32
 8003260:	d129      	bne.n	80032b6 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2224      	movs	r2, #36	; 0x24
 8003266:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f022 0201 	bic.w	r2, r2, #1
 8003278:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f022 0210 	bic.w	r2, r2, #16
 8003288:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	683a      	ldr	r2, [r7, #0]
 8003296:	430a      	orrs	r2, r1
 8003298:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f042 0201 	orr.w	r2, r2, #1
 80032a8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2220      	movs	r2, #32
 80032ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80032b2:	2300      	movs	r3, #0
 80032b4:	e000      	b.n	80032b8 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80032b6:	2302      	movs	r3, #2
  }
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	370c      	adds	r7, #12
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr

080032c4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b085      	sub	sp, #20
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
 80032cc:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80032ce:	2300      	movs	r3, #0
 80032d0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	2b20      	cmp	r3, #32
 80032dc:	d12a      	bne.n	8003334 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2224      	movs	r2, #36	; 0x24
 80032e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f022 0201 	bic.w	r2, r2, #1
 80032f4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fc:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80032fe:	89fb      	ldrh	r3, [r7, #14]
 8003300:	f023 030f 	bic.w	r3, r3, #15
 8003304:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	b29a      	uxth	r2, r3
 800330a:	89fb      	ldrh	r3, [r7, #14]
 800330c:	4313      	orrs	r3, r2
 800330e:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	89fa      	ldrh	r2, [r7, #14]
 8003316:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f042 0201 	orr.w	r2, r2, #1
 8003326:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2220      	movs	r2, #32
 800332c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003330:	2300      	movs	r3, #0
 8003332:	e000      	b.n	8003336 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003334:	2302      	movs	r3, #2
  }
}
 8003336:	4618      	mov	r0, r3
 8003338:	3714      	adds	r7, #20
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr
	...

08003344 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b086      	sub	sp, #24
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d101      	bne.n	8003356 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e264      	b.n	8003820 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0301 	and.w	r3, r3, #1
 800335e:	2b00      	cmp	r3, #0
 8003360:	d075      	beq.n	800344e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003362:	4ba3      	ldr	r3, [pc, #652]	; (80035f0 <HAL_RCC_OscConfig+0x2ac>)
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	f003 030c 	and.w	r3, r3, #12
 800336a:	2b04      	cmp	r3, #4
 800336c:	d00c      	beq.n	8003388 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800336e:	4ba0      	ldr	r3, [pc, #640]	; (80035f0 <HAL_RCC_OscConfig+0x2ac>)
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003376:	2b08      	cmp	r3, #8
 8003378:	d112      	bne.n	80033a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800337a:	4b9d      	ldr	r3, [pc, #628]	; (80035f0 <HAL_RCC_OscConfig+0x2ac>)
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003382:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003386:	d10b      	bne.n	80033a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003388:	4b99      	ldr	r3, [pc, #612]	; (80035f0 <HAL_RCC_OscConfig+0x2ac>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003390:	2b00      	cmp	r3, #0
 8003392:	d05b      	beq.n	800344c <HAL_RCC_OscConfig+0x108>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d157      	bne.n	800344c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	e23f      	b.n	8003820 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033a8:	d106      	bne.n	80033b8 <HAL_RCC_OscConfig+0x74>
 80033aa:	4b91      	ldr	r3, [pc, #580]	; (80035f0 <HAL_RCC_OscConfig+0x2ac>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a90      	ldr	r2, [pc, #576]	; (80035f0 <HAL_RCC_OscConfig+0x2ac>)
 80033b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033b4:	6013      	str	r3, [r2, #0]
 80033b6:	e01d      	b.n	80033f4 <HAL_RCC_OscConfig+0xb0>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033c0:	d10c      	bne.n	80033dc <HAL_RCC_OscConfig+0x98>
 80033c2:	4b8b      	ldr	r3, [pc, #556]	; (80035f0 <HAL_RCC_OscConfig+0x2ac>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a8a      	ldr	r2, [pc, #552]	; (80035f0 <HAL_RCC_OscConfig+0x2ac>)
 80033c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033cc:	6013      	str	r3, [r2, #0]
 80033ce:	4b88      	ldr	r3, [pc, #544]	; (80035f0 <HAL_RCC_OscConfig+0x2ac>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a87      	ldr	r2, [pc, #540]	; (80035f0 <HAL_RCC_OscConfig+0x2ac>)
 80033d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033d8:	6013      	str	r3, [r2, #0]
 80033da:	e00b      	b.n	80033f4 <HAL_RCC_OscConfig+0xb0>
 80033dc:	4b84      	ldr	r3, [pc, #528]	; (80035f0 <HAL_RCC_OscConfig+0x2ac>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a83      	ldr	r2, [pc, #524]	; (80035f0 <HAL_RCC_OscConfig+0x2ac>)
 80033e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033e6:	6013      	str	r3, [r2, #0]
 80033e8:	4b81      	ldr	r3, [pc, #516]	; (80035f0 <HAL_RCC_OscConfig+0x2ac>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a80      	ldr	r2, [pc, #512]	; (80035f0 <HAL_RCC_OscConfig+0x2ac>)
 80033ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d013      	beq.n	8003424 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033fc:	f7fe fbae 	bl	8001b5c <HAL_GetTick>
 8003400:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003402:	e008      	b.n	8003416 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003404:	f7fe fbaa 	bl	8001b5c <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	2b64      	cmp	r3, #100	; 0x64
 8003410:	d901      	bls.n	8003416 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003412:	2303      	movs	r3, #3
 8003414:	e204      	b.n	8003820 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003416:	4b76      	ldr	r3, [pc, #472]	; (80035f0 <HAL_RCC_OscConfig+0x2ac>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d0f0      	beq.n	8003404 <HAL_RCC_OscConfig+0xc0>
 8003422:	e014      	b.n	800344e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003424:	f7fe fb9a 	bl	8001b5c <HAL_GetTick>
 8003428:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800342a:	e008      	b.n	800343e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800342c:	f7fe fb96 	bl	8001b5c <HAL_GetTick>
 8003430:	4602      	mov	r2, r0
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	2b64      	cmp	r3, #100	; 0x64
 8003438:	d901      	bls.n	800343e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	e1f0      	b.n	8003820 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800343e:	4b6c      	ldr	r3, [pc, #432]	; (80035f0 <HAL_RCC_OscConfig+0x2ac>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d1f0      	bne.n	800342c <HAL_RCC_OscConfig+0xe8>
 800344a:	e000      	b.n	800344e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800344c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 0302 	and.w	r3, r3, #2
 8003456:	2b00      	cmp	r3, #0
 8003458:	d063      	beq.n	8003522 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800345a:	4b65      	ldr	r3, [pc, #404]	; (80035f0 <HAL_RCC_OscConfig+0x2ac>)
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	f003 030c 	and.w	r3, r3, #12
 8003462:	2b00      	cmp	r3, #0
 8003464:	d00b      	beq.n	800347e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003466:	4b62      	ldr	r3, [pc, #392]	; (80035f0 <HAL_RCC_OscConfig+0x2ac>)
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800346e:	2b08      	cmp	r3, #8
 8003470:	d11c      	bne.n	80034ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003472:	4b5f      	ldr	r3, [pc, #380]	; (80035f0 <HAL_RCC_OscConfig+0x2ac>)
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d116      	bne.n	80034ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800347e:	4b5c      	ldr	r3, [pc, #368]	; (80035f0 <HAL_RCC_OscConfig+0x2ac>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0302 	and.w	r3, r3, #2
 8003486:	2b00      	cmp	r3, #0
 8003488:	d005      	beq.n	8003496 <HAL_RCC_OscConfig+0x152>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	68db      	ldr	r3, [r3, #12]
 800348e:	2b01      	cmp	r3, #1
 8003490:	d001      	beq.n	8003496 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e1c4      	b.n	8003820 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003496:	4b56      	ldr	r3, [pc, #344]	; (80035f0 <HAL_RCC_OscConfig+0x2ac>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	691b      	ldr	r3, [r3, #16]
 80034a2:	00db      	lsls	r3, r3, #3
 80034a4:	4952      	ldr	r1, [pc, #328]	; (80035f0 <HAL_RCC_OscConfig+0x2ac>)
 80034a6:	4313      	orrs	r3, r2
 80034a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034aa:	e03a      	b.n	8003522 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d020      	beq.n	80034f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034b4:	4b4f      	ldr	r3, [pc, #316]	; (80035f4 <HAL_RCC_OscConfig+0x2b0>)
 80034b6:	2201      	movs	r2, #1
 80034b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ba:	f7fe fb4f 	bl	8001b5c <HAL_GetTick>
 80034be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034c0:	e008      	b.n	80034d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034c2:	f7fe fb4b 	bl	8001b5c <HAL_GetTick>
 80034c6:	4602      	mov	r2, r0
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	1ad3      	subs	r3, r2, r3
 80034cc:	2b02      	cmp	r3, #2
 80034ce:	d901      	bls.n	80034d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80034d0:	2303      	movs	r3, #3
 80034d2:	e1a5      	b.n	8003820 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034d4:	4b46      	ldr	r3, [pc, #280]	; (80035f0 <HAL_RCC_OscConfig+0x2ac>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 0302 	and.w	r3, r3, #2
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d0f0      	beq.n	80034c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034e0:	4b43      	ldr	r3, [pc, #268]	; (80035f0 <HAL_RCC_OscConfig+0x2ac>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	691b      	ldr	r3, [r3, #16]
 80034ec:	00db      	lsls	r3, r3, #3
 80034ee:	4940      	ldr	r1, [pc, #256]	; (80035f0 <HAL_RCC_OscConfig+0x2ac>)
 80034f0:	4313      	orrs	r3, r2
 80034f2:	600b      	str	r3, [r1, #0]
 80034f4:	e015      	b.n	8003522 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034f6:	4b3f      	ldr	r3, [pc, #252]	; (80035f4 <HAL_RCC_OscConfig+0x2b0>)
 80034f8:	2200      	movs	r2, #0
 80034fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034fc:	f7fe fb2e 	bl	8001b5c <HAL_GetTick>
 8003500:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003502:	e008      	b.n	8003516 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003504:	f7fe fb2a 	bl	8001b5c <HAL_GetTick>
 8003508:	4602      	mov	r2, r0
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	2b02      	cmp	r3, #2
 8003510:	d901      	bls.n	8003516 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	e184      	b.n	8003820 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003516:	4b36      	ldr	r3, [pc, #216]	; (80035f0 <HAL_RCC_OscConfig+0x2ac>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0302 	and.w	r3, r3, #2
 800351e:	2b00      	cmp	r3, #0
 8003520:	d1f0      	bne.n	8003504 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0308 	and.w	r3, r3, #8
 800352a:	2b00      	cmp	r3, #0
 800352c:	d030      	beq.n	8003590 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	695b      	ldr	r3, [r3, #20]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d016      	beq.n	8003564 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003536:	4b30      	ldr	r3, [pc, #192]	; (80035f8 <HAL_RCC_OscConfig+0x2b4>)
 8003538:	2201      	movs	r2, #1
 800353a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800353c:	f7fe fb0e 	bl	8001b5c <HAL_GetTick>
 8003540:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003542:	e008      	b.n	8003556 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003544:	f7fe fb0a 	bl	8001b5c <HAL_GetTick>
 8003548:	4602      	mov	r2, r0
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	2b02      	cmp	r3, #2
 8003550:	d901      	bls.n	8003556 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	e164      	b.n	8003820 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003556:	4b26      	ldr	r3, [pc, #152]	; (80035f0 <HAL_RCC_OscConfig+0x2ac>)
 8003558:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800355a:	f003 0302 	and.w	r3, r3, #2
 800355e:	2b00      	cmp	r3, #0
 8003560:	d0f0      	beq.n	8003544 <HAL_RCC_OscConfig+0x200>
 8003562:	e015      	b.n	8003590 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003564:	4b24      	ldr	r3, [pc, #144]	; (80035f8 <HAL_RCC_OscConfig+0x2b4>)
 8003566:	2200      	movs	r2, #0
 8003568:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800356a:	f7fe faf7 	bl	8001b5c <HAL_GetTick>
 800356e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003570:	e008      	b.n	8003584 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003572:	f7fe faf3 	bl	8001b5c <HAL_GetTick>
 8003576:	4602      	mov	r2, r0
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	2b02      	cmp	r3, #2
 800357e:	d901      	bls.n	8003584 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003580:	2303      	movs	r3, #3
 8003582:	e14d      	b.n	8003820 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003584:	4b1a      	ldr	r3, [pc, #104]	; (80035f0 <HAL_RCC_OscConfig+0x2ac>)
 8003586:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003588:	f003 0302 	and.w	r3, r3, #2
 800358c:	2b00      	cmp	r3, #0
 800358e:	d1f0      	bne.n	8003572 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 0304 	and.w	r3, r3, #4
 8003598:	2b00      	cmp	r3, #0
 800359a:	f000 80a0 	beq.w	80036de <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800359e:	2300      	movs	r3, #0
 80035a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035a2:	4b13      	ldr	r3, [pc, #76]	; (80035f0 <HAL_RCC_OscConfig+0x2ac>)
 80035a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d10f      	bne.n	80035ce <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035ae:	2300      	movs	r3, #0
 80035b0:	60bb      	str	r3, [r7, #8]
 80035b2:	4b0f      	ldr	r3, [pc, #60]	; (80035f0 <HAL_RCC_OscConfig+0x2ac>)
 80035b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b6:	4a0e      	ldr	r2, [pc, #56]	; (80035f0 <HAL_RCC_OscConfig+0x2ac>)
 80035b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035bc:	6413      	str	r3, [r2, #64]	; 0x40
 80035be:	4b0c      	ldr	r3, [pc, #48]	; (80035f0 <HAL_RCC_OscConfig+0x2ac>)
 80035c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035c6:	60bb      	str	r3, [r7, #8]
 80035c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035ca:	2301      	movs	r3, #1
 80035cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035ce:	4b0b      	ldr	r3, [pc, #44]	; (80035fc <HAL_RCC_OscConfig+0x2b8>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d121      	bne.n	800361e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035da:	4b08      	ldr	r3, [pc, #32]	; (80035fc <HAL_RCC_OscConfig+0x2b8>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a07      	ldr	r2, [pc, #28]	; (80035fc <HAL_RCC_OscConfig+0x2b8>)
 80035e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035e6:	f7fe fab9 	bl	8001b5c <HAL_GetTick>
 80035ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035ec:	e011      	b.n	8003612 <HAL_RCC_OscConfig+0x2ce>
 80035ee:	bf00      	nop
 80035f0:	40023800 	.word	0x40023800
 80035f4:	42470000 	.word	0x42470000
 80035f8:	42470e80 	.word	0x42470e80
 80035fc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003600:	f7fe faac 	bl	8001b5c <HAL_GetTick>
 8003604:	4602      	mov	r2, r0
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	2b02      	cmp	r3, #2
 800360c:	d901      	bls.n	8003612 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800360e:	2303      	movs	r3, #3
 8003610:	e106      	b.n	8003820 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003612:	4b85      	ldr	r3, [pc, #532]	; (8003828 <HAL_RCC_OscConfig+0x4e4>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800361a:	2b00      	cmp	r3, #0
 800361c:	d0f0      	beq.n	8003600 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	2b01      	cmp	r3, #1
 8003624:	d106      	bne.n	8003634 <HAL_RCC_OscConfig+0x2f0>
 8003626:	4b81      	ldr	r3, [pc, #516]	; (800382c <HAL_RCC_OscConfig+0x4e8>)
 8003628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800362a:	4a80      	ldr	r2, [pc, #512]	; (800382c <HAL_RCC_OscConfig+0x4e8>)
 800362c:	f043 0301 	orr.w	r3, r3, #1
 8003630:	6713      	str	r3, [r2, #112]	; 0x70
 8003632:	e01c      	b.n	800366e <HAL_RCC_OscConfig+0x32a>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	2b05      	cmp	r3, #5
 800363a:	d10c      	bne.n	8003656 <HAL_RCC_OscConfig+0x312>
 800363c:	4b7b      	ldr	r3, [pc, #492]	; (800382c <HAL_RCC_OscConfig+0x4e8>)
 800363e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003640:	4a7a      	ldr	r2, [pc, #488]	; (800382c <HAL_RCC_OscConfig+0x4e8>)
 8003642:	f043 0304 	orr.w	r3, r3, #4
 8003646:	6713      	str	r3, [r2, #112]	; 0x70
 8003648:	4b78      	ldr	r3, [pc, #480]	; (800382c <HAL_RCC_OscConfig+0x4e8>)
 800364a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800364c:	4a77      	ldr	r2, [pc, #476]	; (800382c <HAL_RCC_OscConfig+0x4e8>)
 800364e:	f043 0301 	orr.w	r3, r3, #1
 8003652:	6713      	str	r3, [r2, #112]	; 0x70
 8003654:	e00b      	b.n	800366e <HAL_RCC_OscConfig+0x32a>
 8003656:	4b75      	ldr	r3, [pc, #468]	; (800382c <HAL_RCC_OscConfig+0x4e8>)
 8003658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800365a:	4a74      	ldr	r2, [pc, #464]	; (800382c <HAL_RCC_OscConfig+0x4e8>)
 800365c:	f023 0301 	bic.w	r3, r3, #1
 8003660:	6713      	str	r3, [r2, #112]	; 0x70
 8003662:	4b72      	ldr	r3, [pc, #456]	; (800382c <HAL_RCC_OscConfig+0x4e8>)
 8003664:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003666:	4a71      	ldr	r2, [pc, #452]	; (800382c <HAL_RCC_OscConfig+0x4e8>)
 8003668:	f023 0304 	bic.w	r3, r3, #4
 800366c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d015      	beq.n	80036a2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003676:	f7fe fa71 	bl	8001b5c <HAL_GetTick>
 800367a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800367c:	e00a      	b.n	8003694 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800367e:	f7fe fa6d 	bl	8001b5c <HAL_GetTick>
 8003682:	4602      	mov	r2, r0
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	1ad3      	subs	r3, r2, r3
 8003688:	f241 3288 	movw	r2, #5000	; 0x1388
 800368c:	4293      	cmp	r3, r2
 800368e:	d901      	bls.n	8003694 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003690:	2303      	movs	r3, #3
 8003692:	e0c5      	b.n	8003820 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003694:	4b65      	ldr	r3, [pc, #404]	; (800382c <HAL_RCC_OscConfig+0x4e8>)
 8003696:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003698:	f003 0302 	and.w	r3, r3, #2
 800369c:	2b00      	cmp	r3, #0
 800369e:	d0ee      	beq.n	800367e <HAL_RCC_OscConfig+0x33a>
 80036a0:	e014      	b.n	80036cc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036a2:	f7fe fa5b 	bl	8001b5c <HAL_GetTick>
 80036a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036a8:	e00a      	b.n	80036c0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036aa:	f7fe fa57 	bl	8001b5c <HAL_GetTick>
 80036ae:	4602      	mov	r2, r0
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d901      	bls.n	80036c0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80036bc:	2303      	movs	r3, #3
 80036be:	e0af      	b.n	8003820 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036c0:	4b5a      	ldr	r3, [pc, #360]	; (800382c <HAL_RCC_OscConfig+0x4e8>)
 80036c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036c4:	f003 0302 	and.w	r3, r3, #2
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d1ee      	bne.n	80036aa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036cc:	7dfb      	ldrb	r3, [r7, #23]
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d105      	bne.n	80036de <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036d2:	4b56      	ldr	r3, [pc, #344]	; (800382c <HAL_RCC_OscConfig+0x4e8>)
 80036d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d6:	4a55      	ldr	r2, [pc, #340]	; (800382c <HAL_RCC_OscConfig+0x4e8>)
 80036d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036dc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	699b      	ldr	r3, [r3, #24]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	f000 809b 	beq.w	800381e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80036e8:	4b50      	ldr	r3, [pc, #320]	; (800382c <HAL_RCC_OscConfig+0x4e8>)
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	f003 030c 	and.w	r3, r3, #12
 80036f0:	2b08      	cmp	r3, #8
 80036f2:	d05c      	beq.n	80037ae <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	699b      	ldr	r3, [r3, #24]
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	d141      	bne.n	8003780 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036fc:	4b4c      	ldr	r3, [pc, #304]	; (8003830 <HAL_RCC_OscConfig+0x4ec>)
 80036fe:	2200      	movs	r2, #0
 8003700:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003702:	f7fe fa2b 	bl	8001b5c <HAL_GetTick>
 8003706:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003708:	e008      	b.n	800371c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800370a:	f7fe fa27 	bl	8001b5c <HAL_GetTick>
 800370e:	4602      	mov	r2, r0
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	1ad3      	subs	r3, r2, r3
 8003714:	2b02      	cmp	r3, #2
 8003716:	d901      	bls.n	800371c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003718:	2303      	movs	r3, #3
 800371a:	e081      	b.n	8003820 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800371c:	4b43      	ldr	r3, [pc, #268]	; (800382c <HAL_RCC_OscConfig+0x4e8>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003724:	2b00      	cmp	r3, #0
 8003726:	d1f0      	bne.n	800370a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	69da      	ldr	r2, [r3, #28]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6a1b      	ldr	r3, [r3, #32]
 8003730:	431a      	orrs	r2, r3
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003736:	019b      	lsls	r3, r3, #6
 8003738:	431a      	orrs	r2, r3
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800373e:	085b      	lsrs	r3, r3, #1
 8003740:	3b01      	subs	r3, #1
 8003742:	041b      	lsls	r3, r3, #16
 8003744:	431a      	orrs	r2, r3
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800374a:	061b      	lsls	r3, r3, #24
 800374c:	4937      	ldr	r1, [pc, #220]	; (800382c <HAL_RCC_OscConfig+0x4e8>)
 800374e:	4313      	orrs	r3, r2
 8003750:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003752:	4b37      	ldr	r3, [pc, #220]	; (8003830 <HAL_RCC_OscConfig+0x4ec>)
 8003754:	2201      	movs	r2, #1
 8003756:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003758:	f7fe fa00 	bl	8001b5c <HAL_GetTick>
 800375c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800375e:	e008      	b.n	8003772 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003760:	f7fe f9fc 	bl	8001b5c <HAL_GetTick>
 8003764:	4602      	mov	r2, r0
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	2b02      	cmp	r3, #2
 800376c:	d901      	bls.n	8003772 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800376e:	2303      	movs	r3, #3
 8003770:	e056      	b.n	8003820 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003772:	4b2e      	ldr	r3, [pc, #184]	; (800382c <HAL_RCC_OscConfig+0x4e8>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800377a:	2b00      	cmp	r3, #0
 800377c:	d0f0      	beq.n	8003760 <HAL_RCC_OscConfig+0x41c>
 800377e:	e04e      	b.n	800381e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003780:	4b2b      	ldr	r3, [pc, #172]	; (8003830 <HAL_RCC_OscConfig+0x4ec>)
 8003782:	2200      	movs	r2, #0
 8003784:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003786:	f7fe f9e9 	bl	8001b5c <HAL_GetTick>
 800378a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800378c:	e008      	b.n	80037a0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800378e:	f7fe f9e5 	bl	8001b5c <HAL_GetTick>
 8003792:	4602      	mov	r2, r0
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	1ad3      	subs	r3, r2, r3
 8003798:	2b02      	cmp	r3, #2
 800379a:	d901      	bls.n	80037a0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800379c:	2303      	movs	r3, #3
 800379e:	e03f      	b.n	8003820 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037a0:	4b22      	ldr	r3, [pc, #136]	; (800382c <HAL_RCC_OscConfig+0x4e8>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d1f0      	bne.n	800378e <HAL_RCC_OscConfig+0x44a>
 80037ac:	e037      	b.n	800381e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	699b      	ldr	r3, [r3, #24]
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d101      	bne.n	80037ba <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e032      	b.n	8003820 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80037ba:	4b1c      	ldr	r3, [pc, #112]	; (800382c <HAL_RCC_OscConfig+0x4e8>)
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	699b      	ldr	r3, [r3, #24]
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d028      	beq.n	800381a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d121      	bne.n	800381a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d11a      	bne.n	800381a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037e4:	68fa      	ldr	r2, [r7, #12]
 80037e6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80037ea:	4013      	ands	r3, r2
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80037f0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d111      	bne.n	800381a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003800:	085b      	lsrs	r3, r3, #1
 8003802:	3b01      	subs	r3, #1
 8003804:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003806:	429a      	cmp	r2, r3
 8003808:	d107      	bne.n	800381a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003814:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003816:	429a      	cmp	r2, r3
 8003818:	d001      	beq.n	800381e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e000      	b.n	8003820 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800381e:	2300      	movs	r3, #0
}
 8003820:	4618      	mov	r0, r3
 8003822:	3718      	adds	r7, #24
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}
 8003828:	40007000 	.word	0x40007000
 800382c:	40023800 	.word	0x40023800
 8003830:	42470060 	.word	0x42470060

08003834 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b084      	sub	sp, #16
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d101      	bne.n	8003848 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	e0cc      	b.n	80039e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003848:	4b68      	ldr	r3, [pc, #416]	; (80039ec <HAL_RCC_ClockConfig+0x1b8>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 030f 	and.w	r3, r3, #15
 8003850:	683a      	ldr	r2, [r7, #0]
 8003852:	429a      	cmp	r2, r3
 8003854:	d90c      	bls.n	8003870 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003856:	4b65      	ldr	r3, [pc, #404]	; (80039ec <HAL_RCC_ClockConfig+0x1b8>)
 8003858:	683a      	ldr	r2, [r7, #0]
 800385a:	b2d2      	uxtb	r2, r2
 800385c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800385e:	4b63      	ldr	r3, [pc, #396]	; (80039ec <HAL_RCC_ClockConfig+0x1b8>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 030f 	and.w	r3, r3, #15
 8003866:	683a      	ldr	r2, [r7, #0]
 8003868:	429a      	cmp	r2, r3
 800386a:	d001      	beq.n	8003870 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	e0b8      	b.n	80039e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 0302 	and.w	r3, r3, #2
 8003878:	2b00      	cmp	r3, #0
 800387a:	d020      	beq.n	80038be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 0304 	and.w	r3, r3, #4
 8003884:	2b00      	cmp	r3, #0
 8003886:	d005      	beq.n	8003894 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003888:	4b59      	ldr	r3, [pc, #356]	; (80039f0 <HAL_RCC_ClockConfig+0x1bc>)
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	4a58      	ldr	r2, [pc, #352]	; (80039f0 <HAL_RCC_ClockConfig+0x1bc>)
 800388e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003892:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 0308 	and.w	r3, r3, #8
 800389c:	2b00      	cmp	r3, #0
 800389e:	d005      	beq.n	80038ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038a0:	4b53      	ldr	r3, [pc, #332]	; (80039f0 <HAL_RCC_ClockConfig+0x1bc>)
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	4a52      	ldr	r2, [pc, #328]	; (80039f0 <HAL_RCC_ClockConfig+0x1bc>)
 80038a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80038aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038ac:	4b50      	ldr	r3, [pc, #320]	; (80039f0 <HAL_RCC_ClockConfig+0x1bc>)
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	494d      	ldr	r1, [pc, #308]	; (80039f0 <HAL_RCC_ClockConfig+0x1bc>)
 80038ba:	4313      	orrs	r3, r2
 80038bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 0301 	and.w	r3, r3, #1
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d044      	beq.n	8003954 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d107      	bne.n	80038e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038d2:	4b47      	ldr	r3, [pc, #284]	; (80039f0 <HAL_RCC_ClockConfig+0x1bc>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d119      	bne.n	8003912 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e07f      	b.n	80039e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	d003      	beq.n	80038f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038ee:	2b03      	cmp	r3, #3
 80038f0:	d107      	bne.n	8003902 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038f2:	4b3f      	ldr	r3, [pc, #252]	; (80039f0 <HAL_RCC_ClockConfig+0x1bc>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d109      	bne.n	8003912 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e06f      	b.n	80039e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003902:	4b3b      	ldr	r3, [pc, #236]	; (80039f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 0302 	and.w	r3, r3, #2
 800390a:	2b00      	cmp	r3, #0
 800390c:	d101      	bne.n	8003912 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e067      	b.n	80039e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003912:	4b37      	ldr	r3, [pc, #220]	; (80039f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	f023 0203 	bic.w	r2, r3, #3
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	4934      	ldr	r1, [pc, #208]	; (80039f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003920:	4313      	orrs	r3, r2
 8003922:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003924:	f7fe f91a 	bl	8001b5c <HAL_GetTick>
 8003928:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800392a:	e00a      	b.n	8003942 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800392c:	f7fe f916 	bl	8001b5c <HAL_GetTick>
 8003930:	4602      	mov	r2, r0
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	f241 3288 	movw	r2, #5000	; 0x1388
 800393a:	4293      	cmp	r3, r2
 800393c:	d901      	bls.n	8003942 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800393e:	2303      	movs	r3, #3
 8003940:	e04f      	b.n	80039e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003942:	4b2b      	ldr	r3, [pc, #172]	; (80039f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	f003 020c 	and.w	r2, r3, #12
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	429a      	cmp	r2, r3
 8003952:	d1eb      	bne.n	800392c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003954:	4b25      	ldr	r3, [pc, #148]	; (80039ec <HAL_RCC_ClockConfig+0x1b8>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 030f 	and.w	r3, r3, #15
 800395c:	683a      	ldr	r2, [r7, #0]
 800395e:	429a      	cmp	r2, r3
 8003960:	d20c      	bcs.n	800397c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003962:	4b22      	ldr	r3, [pc, #136]	; (80039ec <HAL_RCC_ClockConfig+0x1b8>)
 8003964:	683a      	ldr	r2, [r7, #0]
 8003966:	b2d2      	uxtb	r2, r2
 8003968:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800396a:	4b20      	ldr	r3, [pc, #128]	; (80039ec <HAL_RCC_ClockConfig+0x1b8>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 030f 	and.w	r3, r3, #15
 8003972:	683a      	ldr	r2, [r7, #0]
 8003974:	429a      	cmp	r2, r3
 8003976:	d001      	beq.n	800397c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	e032      	b.n	80039e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 0304 	and.w	r3, r3, #4
 8003984:	2b00      	cmp	r3, #0
 8003986:	d008      	beq.n	800399a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003988:	4b19      	ldr	r3, [pc, #100]	; (80039f0 <HAL_RCC_ClockConfig+0x1bc>)
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	68db      	ldr	r3, [r3, #12]
 8003994:	4916      	ldr	r1, [pc, #88]	; (80039f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003996:	4313      	orrs	r3, r2
 8003998:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 0308 	and.w	r3, r3, #8
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d009      	beq.n	80039ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039a6:	4b12      	ldr	r3, [pc, #72]	; (80039f0 <HAL_RCC_ClockConfig+0x1bc>)
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	691b      	ldr	r3, [r3, #16]
 80039b2:	00db      	lsls	r3, r3, #3
 80039b4:	490e      	ldr	r1, [pc, #56]	; (80039f0 <HAL_RCC_ClockConfig+0x1bc>)
 80039b6:	4313      	orrs	r3, r2
 80039b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80039ba:	f000 f821 	bl	8003a00 <HAL_RCC_GetSysClockFreq>
 80039be:	4602      	mov	r2, r0
 80039c0:	4b0b      	ldr	r3, [pc, #44]	; (80039f0 <HAL_RCC_ClockConfig+0x1bc>)
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	091b      	lsrs	r3, r3, #4
 80039c6:	f003 030f 	and.w	r3, r3, #15
 80039ca:	490a      	ldr	r1, [pc, #40]	; (80039f4 <HAL_RCC_ClockConfig+0x1c0>)
 80039cc:	5ccb      	ldrb	r3, [r1, r3]
 80039ce:	fa22 f303 	lsr.w	r3, r2, r3
 80039d2:	4a09      	ldr	r2, [pc, #36]	; (80039f8 <HAL_RCC_ClockConfig+0x1c4>)
 80039d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80039d6:	4b09      	ldr	r3, [pc, #36]	; (80039fc <HAL_RCC_ClockConfig+0x1c8>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4618      	mov	r0, r3
 80039dc:	f7fe f87a 	bl	8001ad4 <HAL_InitTick>

  return HAL_OK;
 80039e0:	2300      	movs	r3, #0
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3710      	adds	r7, #16
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}
 80039ea:	bf00      	nop
 80039ec:	40023c00 	.word	0x40023c00
 80039f0:	40023800 	.word	0x40023800
 80039f4:	08007efc 	.word	0x08007efc
 80039f8:	20000000 	.word	0x20000000
 80039fc:	20000004 	.word	0x20000004

08003a00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a00:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003a04:	b084      	sub	sp, #16
 8003a06:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	607b      	str	r3, [r7, #4]
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	60fb      	str	r3, [r7, #12]
 8003a10:	2300      	movs	r3, #0
 8003a12:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003a14:	2300      	movs	r3, #0
 8003a16:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a18:	4b67      	ldr	r3, [pc, #412]	; (8003bb8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	f003 030c 	and.w	r3, r3, #12
 8003a20:	2b08      	cmp	r3, #8
 8003a22:	d00d      	beq.n	8003a40 <HAL_RCC_GetSysClockFreq+0x40>
 8003a24:	2b08      	cmp	r3, #8
 8003a26:	f200 80bd 	bhi.w	8003ba4 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d002      	beq.n	8003a34 <HAL_RCC_GetSysClockFreq+0x34>
 8003a2e:	2b04      	cmp	r3, #4
 8003a30:	d003      	beq.n	8003a3a <HAL_RCC_GetSysClockFreq+0x3a>
 8003a32:	e0b7      	b.n	8003ba4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a34:	4b61      	ldr	r3, [pc, #388]	; (8003bbc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003a36:	60bb      	str	r3, [r7, #8]
       break;
 8003a38:	e0b7      	b.n	8003baa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a3a:	4b61      	ldr	r3, [pc, #388]	; (8003bc0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003a3c:	60bb      	str	r3, [r7, #8]
      break;
 8003a3e:	e0b4      	b.n	8003baa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a40:	4b5d      	ldr	r3, [pc, #372]	; (8003bb8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a48:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a4a:	4b5b      	ldr	r3, [pc, #364]	; (8003bb8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d04d      	beq.n	8003af2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a56:	4b58      	ldr	r3, [pc, #352]	; (8003bb8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	099b      	lsrs	r3, r3, #6
 8003a5c:	461a      	mov	r2, r3
 8003a5e:	f04f 0300 	mov.w	r3, #0
 8003a62:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003a66:	f04f 0100 	mov.w	r1, #0
 8003a6a:	ea02 0800 	and.w	r8, r2, r0
 8003a6e:	ea03 0901 	and.w	r9, r3, r1
 8003a72:	4640      	mov	r0, r8
 8003a74:	4649      	mov	r1, r9
 8003a76:	f04f 0200 	mov.w	r2, #0
 8003a7a:	f04f 0300 	mov.w	r3, #0
 8003a7e:	014b      	lsls	r3, r1, #5
 8003a80:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003a84:	0142      	lsls	r2, r0, #5
 8003a86:	4610      	mov	r0, r2
 8003a88:	4619      	mov	r1, r3
 8003a8a:	ebb0 0008 	subs.w	r0, r0, r8
 8003a8e:	eb61 0109 	sbc.w	r1, r1, r9
 8003a92:	f04f 0200 	mov.w	r2, #0
 8003a96:	f04f 0300 	mov.w	r3, #0
 8003a9a:	018b      	lsls	r3, r1, #6
 8003a9c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003aa0:	0182      	lsls	r2, r0, #6
 8003aa2:	1a12      	subs	r2, r2, r0
 8003aa4:	eb63 0301 	sbc.w	r3, r3, r1
 8003aa8:	f04f 0000 	mov.w	r0, #0
 8003aac:	f04f 0100 	mov.w	r1, #0
 8003ab0:	00d9      	lsls	r1, r3, #3
 8003ab2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003ab6:	00d0      	lsls	r0, r2, #3
 8003ab8:	4602      	mov	r2, r0
 8003aba:	460b      	mov	r3, r1
 8003abc:	eb12 0208 	adds.w	r2, r2, r8
 8003ac0:	eb43 0309 	adc.w	r3, r3, r9
 8003ac4:	f04f 0000 	mov.w	r0, #0
 8003ac8:	f04f 0100 	mov.w	r1, #0
 8003acc:	0259      	lsls	r1, r3, #9
 8003ace:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003ad2:	0250      	lsls	r0, r2, #9
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	460b      	mov	r3, r1
 8003ad8:	4610      	mov	r0, r2
 8003ada:	4619      	mov	r1, r3
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	461a      	mov	r2, r3
 8003ae0:	f04f 0300 	mov.w	r3, #0
 8003ae4:	f7fc fb82 	bl	80001ec <__aeabi_uldivmod>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	460b      	mov	r3, r1
 8003aec:	4613      	mov	r3, r2
 8003aee:	60fb      	str	r3, [r7, #12]
 8003af0:	e04a      	b.n	8003b88 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003af2:	4b31      	ldr	r3, [pc, #196]	; (8003bb8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	099b      	lsrs	r3, r3, #6
 8003af8:	461a      	mov	r2, r3
 8003afa:	f04f 0300 	mov.w	r3, #0
 8003afe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003b02:	f04f 0100 	mov.w	r1, #0
 8003b06:	ea02 0400 	and.w	r4, r2, r0
 8003b0a:	ea03 0501 	and.w	r5, r3, r1
 8003b0e:	4620      	mov	r0, r4
 8003b10:	4629      	mov	r1, r5
 8003b12:	f04f 0200 	mov.w	r2, #0
 8003b16:	f04f 0300 	mov.w	r3, #0
 8003b1a:	014b      	lsls	r3, r1, #5
 8003b1c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003b20:	0142      	lsls	r2, r0, #5
 8003b22:	4610      	mov	r0, r2
 8003b24:	4619      	mov	r1, r3
 8003b26:	1b00      	subs	r0, r0, r4
 8003b28:	eb61 0105 	sbc.w	r1, r1, r5
 8003b2c:	f04f 0200 	mov.w	r2, #0
 8003b30:	f04f 0300 	mov.w	r3, #0
 8003b34:	018b      	lsls	r3, r1, #6
 8003b36:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003b3a:	0182      	lsls	r2, r0, #6
 8003b3c:	1a12      	subs	r2, r2, r0
 8003b3e:	eb63 0301 	sbc.w	r3, r3, r1
 8003b42:	f04f 0000 	mov.w	r0, #0
 8003b46:	f04f 0100 	mov.w	r1, #0
 8003b4a:	00d9      	lsls	r1, r3, #3
 8003b4c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003b50:	00d0      	lsls	r0, r2, #3
 8003b52:	4602      	mov	r2, r0
 8003b54:	460b      	mov	r3, r1
 8003b56:	1912      	adds	r2, r2, r4
 8003b58:	eb45 0303 	adc.w	r3, r5, r3
 8003b5c:	f04f 0000 	mov.w	r0, #0
 8003b60:	f04f 0100 	mov.w	r1, #0
 8003b64:	0299      	lsls	r1, r3, #10
 8003b66:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003b6a:	0290      	lsls	r0, r2, #10
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	460b      	mov	r3, r1
 8003b70:	4610      	mov	r0, r2
 8003b72:	4619      	mov	r1, r3
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	461a      	mov	r2, r3
 8003b78:	f04f 0300 	mov.w	r3, #0
 8003b7c:	f7fc fb36 	bl	80001ec <__aeabi_uldivmod>
 8003b80:	4602      	mov	r2, r0
 8003b82:	460b      	mov	r3, r1
 8003b84:	4613      	mov	r3, r2
 8003b86:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b88:	4b0b      	ldr	r3, [pc, #44]	; (8003bb8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	0c1b      	lsrs	r3, r3, #16
 8003b8e:	f003 0303 	and.w	r3, r3, #3
 8003b92:	3301      	adds	r3, #1
 8003b94:	005b      	lsls	r3, r3, #1
 8003b96:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003b98:	68fa      	ldr	r2, [r7, #12]
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ba0:	60bb      	str	r3, [r7, #8]
      break;
 8003ba2:	e002      	b.n	8003baa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ba4:	4b05      	ldr	r3, [pc, #20]	; (8003bbc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003ba6:	60bb      	str	r3, [r7, #8]
      break;
 8003ba8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003baa:	68bb      	ldr	r3, [r7, #8]
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3710      	adds	r7, #16
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003bb6:	bf00      	nop
 8003bb8:	40023800 	.word	0x40023800
 8003bbc:	00f42400 	.word	0x00f42400
 8003bc0:	007a1200 	.word	0x007a1200

08003bc4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bc8:	4b03      	ldr	r3, [pc, #12]	; (8003bd8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003bca:	681b      	ldr	r3, [r3, #0]
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr
 8003bd6:	bf00      	nop
 8003bd8:	20000000 	.word	0x20000000

08003bdc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003be0:	f7ff fff0 	bl	8003bc4 <HAL_RCC_GetHCLKFreq>
 8003be4:	4602      	mov	r2, r0
 8003be6:	4b05      	ldr	r3, [pc, #20]	; (8003bfc <HAL_RCC_GetPCLK1Freq+0x20>)
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	0a9b      	lsrs	r3, r3, #10
 8003bec:	f003 0307 	and.w	r3, r3, #7
 8003bf0:	4903      	ldr	r1, [pc, #12]	; (8003c00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bf2:	5ccb      	ldrb	r3, [r1, r3]
 8003bf4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	40023800 	.word	0x40023800
 8003c00:	08007f0c 	.word	0x08007f0c

08003c04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003c08:	f7ff ffdc 	bl	8003bc4 <HAL_RCC_GetHCLKFreq>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	4b05      	ldr	r3, [pc, #20]	; (8003c24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	0b5b      	lsrs	r3, r3, #13
 8003c14:	f003 0307 	and.w	r3, r3, #7
 8003c18:	4903      	ldr	r1, [pc, #12]	; (8003c28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c1a:	5ccb      	ldrb	r3, [r1, r3]
 8003c1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	bd80      	pop	{r7, pc}
 8003c24:	40023800 	.word	0x40023800
 8003c28:	08007f0c 	.word	0x08007f0c

08003c2c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b082      	sub	sp, #8
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d101      	bne.n	8003c3e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e022      	b.n	8003c84 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d105      	bne.n	8003c56 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	f7fd f861 	bl	8000d18 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2203      	movs	r2, #3
 8003c5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f000 f814 	bl	8003c8c <HAL_SD_InitCard>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d001      	beq.n	8003c6e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e00a      	b.n	8003c84 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2200      	movs	r2, #0
 8003c72:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2200      	movs	r2, #0
 8003c78:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003c82:	2300      	movs	r3, #0
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	3708      	adds	r7, #8
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}

08003c8c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003c8c:	b5b0      	push	{r4, r5, r7, lr}
 8003c8e:	b08e      	sub	sp, #56	; 0x38
 8003c90:	af04      	add	r7, sp, #16
 8003c92:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8003c94:	2300      	movs	r3, #0
 8003c96:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8003ca8:	2376      	movs	r3, #118	; 0x76
 8003caa:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681d      	ldr	r5, [r3, #0]
 8003cb0:	466c      	mov	r4, sp
 8003cb2:	f107 0314 	add.w	r3, r7, #20
 8003cb6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003cba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003cbe:	f107 0308 	add.w	r3, r7, #8
 8003cc2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003cc4:	4628      	mov	r0, r5
 8003cc6:	f003 f8b7 	bl	8006e38 <SDIO_Init>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8003cd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d001      	beq.n	8003cdc <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e04c      	b.n	8003d76 <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8003cdc:	4b28      	ldr	r3, [pc, #160]	; (8003d80 <HAL_SD_InitCard+0xf4>)
 8003cde:	2200      	movs	r2, #0
 8003ce0:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f003 f8ef 	bl	8006eca <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8003cec:	4b24      	ldr	r3, [pc, #144]	; (8003d80 <HAL_SD_InitCard+0xf4>)
 8003cee:	2201      	movs	r2, #1
 8003cf0:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f001 f804 	bl	8004d00 <SD_PowerON>
 8003cf8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003cfa:	6a3b      	ldr	r3, [r7, #32]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d00b      	beq.n	8003d18 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2201      	movs	r2, #1
 8003d04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d0c:	6a3b      	ldr	r3, [r7, #32]
 8003d0e:	431a      	orrs	r2, r3
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	e02e      	b.n	8003d76 <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	f000 ff25 	bl	8004b68 <SD_InitCard>
 8003d1e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003d20:	6a3b      	ldr	r3, [r7, #32]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d00b      	beq.n	8003d3e <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2201      	movs	r2, #1
 8003d2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d32:	6a3b      	ldr	r3, [r7, #32]
 8003d34:	431a      	orrs	r2, r3
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e01b      	b.n	8003d76 <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003d46:	4618      	mov	r0, r3
 8003d48:	f003 f952 	bl	8006ff0 <SDMMC_CmdBlockLength>
 8003d4c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003d4e:	6a3b      	ldr	r3, [r7, #32]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d00f      	beq.n	8003d74 <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a0a      	ldr	r2, [pc, #40]	; (8003d84 <HAL_SD_InitCard+0xf8>)
 8003d5a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d60:	6a3b      	ldr	r3, [r7, #32]
 8003d62:	431a      	orrs	r2, r3
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	e000      	b.n	8003d76 <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 8003d74:	2300      	movs	r3, #0
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3728      	adds	r7, #40	; 0x28
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bdb0      	pop	{r4, r5, r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	422580a0 	.word	0x422580a0
 8003d84:	004005ff 	.word	0x004005ff

08003d88 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b08c      	sub	sp, #48	; 0x30
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	60f8      	str	r0, [r7, #12]
 8003d90:	60b9      	str	r1, [r7, #8]
 8003d92:	607a      	str	r2, [r7, #4]
 8003d94:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d107      	bne.n	8003db0 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003da4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	e0c0      	b.n	8003f32 <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	f040 80b9 	bne.w	8003f30 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003dc4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	441a      	add	r2, r3
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	d907      	bls.n	8003de2 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dd6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e0a7      	b.n	8003f32 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2203      	movs	r2, #3
 8003de6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	2200      	movs	r2, #0
 8003df0:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003df8:	68fa      	ldr	r2, [r7, #12]
 8003dfa:	6812      	ldr	r2, [r2, #0]
 8003dfc:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8003e00:	f043 0302 	orr.w	r3, r3, #2
 8003e04:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0a:	4a4c      	ldr	r2, [pc, #304]	; (8003f3c <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8003e0c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e12:	4a4b      	ldr	r2, [pc, #300]	; (8003f40 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8003e14:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e22:	2200      	movs	r2, #0
 8003e24:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e36:	689a      	ldr	r2, [r3, #8]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	430a      	orrs	r2, r1
 8003e40:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	3380      	adds	r3, #128	; 0x80
 8003e4c:	4619      	mov	r1, r3
 8003e4e:	68ba      	ldr	r2, [r7, #8]
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	025b      	lsls	r3, r3, #9
 8003e54:	089b      	lsrs	r3, r3, #2
 8003e56:	f7fe fb53 	bl	8002500 <HAL_DMA_Start_IT>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d017      	beq.n	8003e90 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8003e6e:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a33      	ldr	r2, [pc, #204]	; (8003f44 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8003e76:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e7c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2201      	movs	r2, #1
 8003e88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e050      	b.n	8003f32 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8003e90:	4b2d      	ldr	r3, [pc, #180]	; (8003f48 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8003e92:	2201      	movs	r2, #1
 8003e94:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d002      	beq.n	8003ea4 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 8003e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ea0:	025b      	lsls	r3, r3, #9
 8003ea2:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003ea4:	f04f 33ff 	mov.w	r3, #4294967295
 8003ea8:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	025b      	lsls	r3, r3, #9
 8003eae:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003eb0:	2390      	movs	r3, #144	; 0x90
 8003eb2:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003eb4:	2302      	movs	r3, #2
 8003eb6:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f107 0210 	add.w	r2, r7, #16
 8003ec8:	4611      	mov	r1, r2
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f003 f864 	bl	8006f98 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d90a      	bls.n	8003eec <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2282      	movs	r2, #130	; 0x82
 8003eda:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f003 f8c8 	bl	8007078 <SDMMC_CmdReadMultiBlock>
 8003ee8:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003eea:	e009      	b.n	8003f00 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2281      	movs	r2, #129	; 0x81
 8003ef0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f003 f89b 	bl	8007034 <SDMMC_CmdReadSingleBlock>
 8003efe:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8003f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d012      	beq.n	8003f2c <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a0e      	ldr	r2, [pc, #56]	; (8003f44 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8003f0c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f14:	431a      	orrs	r2, r3
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2200      	movs	r2, #0
 8003f26:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e002      	b.n	8003f32 <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	e000      	b.n	8003f32 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 8003f30:	2302      	movs	r3, #2
  }
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3730      	adds	r7, #48	; 0x30
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	bf00      	nop
 8003f3c:	08004977 	.word	0x08004977
 8003f40:	080049e9 	.word	0x080049e9
 8003f44:	004005ff 	.word	0x004005ff
 8003f48:	4225858c 	.word	0x4225858c

08003f4c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b08c      	sub	sp, #48	; 0x30
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	60f8      	str	r0, [r7, #12]
 8003f54:	60b9      	str	r1, [r7, #8]
 8003f56:	607a      	str	r2, [r7, #4]
 8003f58:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d107      	bne.n	8003f74 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f68:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e0c5      	b.n	8004100 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003f7a:	b2db      	uxtb	r3, r3
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	f040 80be 	bne.w	80040fe <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2200      	movs	r2, #0
 8003f86:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003f88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	441a      	add	r2, r3
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d907      	bls.n	8003fa6 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f9a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e0ac      	b.n	8004100 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2203      	movs	r2, #3
 8003faa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fbc:	68fa      	ldr	r2, [r7, #12]
 8003fbe:	6812      	ldr	r2, [r2, #0]
 8003fc0:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 8003fc4:	f043 0302 	orr.w	r3, r3, #2
 8003fc8:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fce:	4a4e      	ldr	r2, [pc, #312]	; (8004108 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8003fd0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fd6:	4a4d      	ldr	r2, [pc, #308]	; (800410c <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8003fd8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fde:	2200      	movs	r2, #0
 8003fe0:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	d002      	beq.n	8003ff0 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 8003fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fec:	025b      	lsls	r3, r3, #9
 8003fee:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d90a      	bls.n	800400c <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	22a0      	movs	r2, #160	; 0xa0
 8003ffa:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004002:	4618      	mov	r0, r3
 8004004:	f003 f87c 	bl	8007100 <SDMMC_CmdWriteMultiBlock>
 8004008:	62f8      	str	r0, [r7, #44]	; 0x2c
 800400a:	e009      	b.n	8004020 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2290      	movs	r2, #144	; 0x90
 8004010:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004018:	4618      	mov	r0, r3
 800401a:	f003 f84f 	bl	80070bc <SDMMC_CmdWriteSingleBlock>
 800401e:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8004020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004022:	2b00      	cmp	r3, #0
 8004024:	d012      	beq.n	800404c <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a39      	ldr	r2, [pc, #228]	; (8004110 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800402c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004034:	431a      	orrs	r2, r3
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2201      	movs	r2, #1
 800403e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2200      	movs	r2, #0
 8004046:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	e059      	b.n	8004100 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800404c:	4b31      	ldr	r3, [pc, #196]	; (8004114 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800404e:	2201      	movs	r2, #1
 8004050:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004056:	2240      	movs	r2, #64	; 0x40
 8004058:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800406a:	689a      	ldr	r2, [r3, #8]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	430a      	orrs	r2, r1
 8004074:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800407a:	68b9      	ldr	r1, [r7, #8]
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	3380      	adds	r3, #128	; 0x80
 8004082:	461a      	mov	r2, r3
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	025b      	lsls	r3, r3, #9
 8004088:	089b      	lsrs	r3, r3, #2
 800408a:	f7fe fa39 	bl	8002500 <HAL_DMA_Start_IT>
 800408e:	4603      	mov	r3, r0
 8004090:	2b00      	cmp	r3, #0
 8004092:	d01c      	beq.n	80040ce <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800409a:	68fa      	ldr	r2, [r7, #12]
 800409c:	6812      	ldr	r2, [r2, #0]
 800409e:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 80040a2:	f023 0302 	bic.w	r3, r3, #2
 80040a6:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a18      	ldr	r2, [pc, #96]	; (8004110 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 80040ae:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040b4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2201      	movs	r2, #1
 80040c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2200      	movs	r2, #0
 80040c8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e018      	b.n	8004100 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80040ce:	f04f 33ff 	mov.w	r3, #4294967295
 80040d2:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	025b      	lsls	r3, r3, #9
 80040d8:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80040da:	2390      	movs	r3, #144	; 0x90
 80040dc:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80040de:	2300      	movs	r3, #0
 80040e0:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80040e2:	2300      	movs	r3, #0
 80040e4:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80040e6:	2301      	movs	r3, #1
 80040e8:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f107 0210 	add.w	r2, r7, #16
 80040f2:	4611      	mov	r1, r2
 80040f4:	4618      	mov	r0, r3
 80040f6:	f002 ff4f 	bl	8006f98 <SDIO_ConfigData>

      return HAL_OK;
 80040fa:	2300      	movs	r3, #0
 80040fc:	e000      	b.n	8004100 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 80040fe:	2302      	movs	r3, #2
  }
}
 8004100:	4618      	mov	r0, r3
 8004102:	3730      	adds	r7, #48	; 0x30
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}
 8004108:	0800494d 	.word	0x0800494d
 800410c:	080049e9 	.word	0x080049e9
 8004110:	004005ff 	.word	0x004005ff
 8004114:	4225858c 	.word	0x4225858c

08004118 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b084      	sub	sp, #16
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004124:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800412c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004130:	2b00      	cmp	r3, #0
 8004132:	d008      	beq.n	8004146 <HAL_SD_IRQHandler+0x2e>
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f003 0308 	and.w	r3, r3, #8
 800413a:	2b00      	cmp	r3, #0
 800413c:	d003      	beq.n	8004146 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f000 fffd 	bl	800513e <SD_Read_IT>
 8004144:	e165      	b.n	8004412 <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800414c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004150:	2b00      	cmp	r3, #0
 8004152:	f000 808f 	beq.w	8004274 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800415e:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004166:	687a      	ldr	r2, [r7, #4]
 8004168:	6812      	ldr	r2, [r2, #0]
 800416a:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 800416e:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8004172:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f022 0201 	bic.w	r2, r2, #1
 8004182:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f003 0308 	and.w	r3, r3, #8
 800418a:	2b00      	cmp	r3, #0
 800418c:	d039      	beq.n	8004202 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	f003 0302 	and.w	r3, r3, #2
 8004194:	2b00      	cmp	r3, #0
 8004196:	d104      	bne.n	80041a2 <HAL_SD_IRQHandler+0x8a>
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	f003 0320 	and.w	r3, r3, #32
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d011      	beq.n	80041c6 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4618      	mov	r0, r3
 80041a8:	f002 ffcc 	bl	8007144 <SDMMC_CmdStopTransfer>
 80041ac:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d008      	beq.n	80041c6 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	431a      	orrs	r2, r3
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80041c0:	6878      	ldr	r0, [r7, #4]
 80041c2:	f000 f92f 	bl	8004424 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f240 523a 	movw	r2, #1338	; 0x53a
 80041ce:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2201      	movs	r2, #1
 80041d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2200      	movs	r2, #0
 80041dc:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	f003 0301 	and.w	r3, r3, #1
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d104      	bne.n	80041f2 <HAL_SD_IRQHandler+0xda>
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f003 0302 	and.w	r3, r3, #2
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d003      	beq.n	80041fa <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f003 fc32 	bl	8007a5c <HAL_SD_RxCpltCallback>
 80041f8:	e10b      	b.n	8004412 <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f003 fc24 	bl	8007a48 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004200:	e107      	b.n	8004412 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004208:	2b00      	cmp	r3, #0
 800420a:	f000 8102 	beq.w	8004412 <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	f003 0320 	and.w	r3, r3, #32
 8004214:	2b00      	cmp	r3, #0
 8004216:	d011      	beq.n	800423c <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4618      	mov	r0, r3
 800421e:	f002 ff91 	bl	8007144 <SDMMC_CmdStopTransfer>
 8004222:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d008      	beq.n	800423c <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	431a      	orrs	r2, r3
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f000 f8f4 	bl	8004424 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f003 0301 	and.w	r3, r3, #1
 8004242:	2b00      	cmp	r3, #0
 8004244:	f040 80e5 	bne.w	8004412 <HAL_SD_IRQHandler+0x2fa>
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f003 0302 	and.w	r3, r3, #2
 800424e:	2b00      	cmp	r3, #0
 8004250:	f040 80df 	bne.w	8004412 <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f022 0208 	bic.w	r2, r2, #8
 8004262:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2201      	movs	r2, #1
 8004268:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	f003 fbeb 	bl	8007a48 <HAL_SD_TxCpltCallback>
}
 8004272:	e0ce      	b.n	8004412 <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800427a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800427e:	2b00      	cmp	r3, #0
 8004280:	d008      	beq.n	8004294 <HAL_SD_IRQHandler+0x17c>
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	f003 0308 	and.w	r3, r3, #8
 8004288:	2b00      	cmp	r3, #0
 800428a:	d003      	beq.n	8004294 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800428c:	6878      	ldr	r0, [r7, #4]
 800428e:	f000 ffa7 	bl	80051e0 <SD_Write_IT>
 8004292:	e0be      	b.n	8004412 <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800429a:	f240 233a 	movw	r3, #570	; 0x23a
 800429e:	4013      	ands	r3, r2
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	f000 80b6 	beq.w	8004412 <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042ac:	f003 0302 	and.w	r3, r3, #2
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d005      	beq.n	80042c0 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042b8:	f043 0202 	orr.w	r2, r3, #2
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042c6:	f003 0308 	and.w	r3, r3, #8
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d005      	beq.n	80042da <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042d2:	f043 0208 	orr.w	r2, r3, #8
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042e0:	f003 0320 	and.w	r3, r3, #32
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d005      	beq.n	80042f4 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ec:	f043 0220 	orr.w	r2, r3, #32
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042fa:	f003 0310 	and.w	r3, r3, #16
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d005      	beq.n	800430e <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004306:	f043 0210 	orr.w	r2, r3, #16
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004314:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004318:	2b00      	cmp	r3, #0
 800431a:	d005      	beq.n	8004328 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004320:	f043 0208 	orr.w	r2, r3, #8
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f240 723a 	movw	r2, #1850	; 0x73a
 8004330:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004338:	687a      	ldr	r2, [r7, #4]
 800433a:	6812      	ldr	r2, [r2, #0]
 800433c:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8004340:	f023 0302 	bic.w	r3, r3, #2
 8004344:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4618      	mov	r0, r3
 800434c:	f002 fefa 	bl	8007144 <SDMMC_CmdStopTransfer>
 8004350:	4602      	mov	r2, r0
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004356:	431a      	orrs	r2, r3
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f003 0308 	and.w	r3, r3, #8
 8004362:	2b00      	cmp	r3, #0
 8004364:	d00a      	beq.n	800437c <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2201      	movs	r2, #1
 800436a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2200      	movs	r2, #0
 8004372:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	f000 f855 	bl	8004424 <HAL_SD_ErrorCallback>
}
 800437a:	e04a      	b.n	8004412 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004382:	2b00      	cmp	r3, #0
 8004384:	d045      	beq.n	8004412 <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	f003 0310 	and.w	r3, r3, #16
 800438c:	2b00      	cmp	r3, #0
 800438e:	d104      	bne.n	800439a <HAL_SD_IRQHandler+0x282>
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f003 0320 	and.w	r3, r3, #32
 8004396:	2b00      	cmp	r3, #0
 8004398:	d011      	beq.n	80043be <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800439e:	4a1f      	ldr	r2, [pc, #124]	; (800441c <HAL_SD_IRQHandler+0x304>)
 80043a0:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043a6:	4618      	mov	r0, r3
 80043a8:	f7fe f972 	bl	8002690 <HAL_DMA_Abort_IT>
 80043ac:	4603      	mov	r3, r0
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d02f      	beq.n	8004412 <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043b6:	4618      	mov	r0, r3
 80043b8:	f000 fb68 	bl	8004a8c <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80043bc:	e029      	b.n	8004412 <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	f003 0301 	and.w	r3, r3, #1
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d104      	bne.n	80043d2 <HAL_SD_IRQHandler+0x2ba>
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	f003 0302 	and.w	r3, r3, #2
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d011      	beq.n	80043f6 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d6:	4a12      	ldr	r2, [pc, #72]	; (8004420 <HAL_SD_IRQHandler+0x308>)
 80043d8:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043de:	4618      	mov	r0, r3
 80043e0:	f7fe f956 	bl	8002690 <HAL_DMA_Abort_IT>
 80043e4:	4603      	mov	r3, r0
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d013      	beq.n	8004412 <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ee:	4618      	mov	r0, r3
 80043f0:	f000 fb83 	bl	8004afa <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80043f4:	e00d      	b.n	8004412 <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2200      	movs	r2, #0
 80043fa:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2201      	movs	r2, #1
 8004400:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2200      	movs	r2, #0
 8004408:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f003 fb12 	bl	8007a34 <HAL_SD_AbortCallback>
}
 8004410:	e7ff      	b.n	8004412 <HAL_SD_IRQHandler+0x2fa>
 8004412:	bf00      	nop
 8004414:	3710      	adds	r7, #16
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}
 800441a:	bf00      	nop
 800441c:	08004a8d 	.word	0x08004a8d
 8004420:	08004afb 	.word	0x08004afb

08004424 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8004424:	b480      	push	{r7}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800442c:	bf00      	nop
 800442e:	370c      	adds	r7, #12
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr

08004438 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8004438:	b480      	push	{r7}
 800443a:	b083      	sub	sp, #12
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
 8004440:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004446:	0f9b      	lsrs	r3, r3, #30
 8004448:	b2da      	uxtb	r2, r3
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004452:	0e9b      	lsrs	r3, r3, #26
 8004454:	b2db      	uxtb	r3, r3
 8004456:	f003 030f 	and.w	r3, r3, #15
 800445a:	b2da      	uxtb	r2, r3
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004464:	0e1b      	lsrs	r3, r3, #24
 8004466:	b2db      	uxtb	r3, r3
 8004468:	f003 0303 	and.w	r3, r3, #3
 800446c:	b2da      	uxtb	r2, r3
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004476:	0c1b      	lsrs	r3, r3, #16
 8004478:	b2da      	uxtb	r2, r3
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004482:	0a1b      	lsrs	r3, r3, #8
 8004484:	b2da      	uxtb	r2, r3
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800448e:	b2da      	uxtb	r2, r3
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004498:	0d1b      	lsrs	r3, r3, #20
 800449a:	b29a      	uxth	r2, r3
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80044a4:	0c1b      	lsrs	r3, r3, #16
 80044a6:	b2db      	uxtb	r3, r3
 80044a8:	f003 030f 	and.w	r3, r3, #15
 80044ac:	b2da      	uxtb	r2, r3
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80044b6:	0bdb      	lsrs	r3, r3, #15
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	f003 0301 	and.w	r3, r3, #1
 80044be:	b2da      	uxtb	r2, r3
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80044c8:	0b9b      	lsrs	r3, r3, #14
 80044ca:	b2db      	uxtb	r3, r3
 80044cc:	f003 0301 	and.w	r3, r3, #1
 80044d0:	b2da      	uxtb	r2, r3
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80044da:	0b5b      	lsrs	r3, r3, #13
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	f003 0301 	and.w	r3, r3, #1
 80044e2:	b2da      	uxtb	r2, r3
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80044ec:	0b1b      	lsrs	r3, r3, #12
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	f003 0301 	and.w	r3, r3, #1
 80044f4:	b2da      	uxtb	r2, r3
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	2200      	movs	r2, #0
 80044fe:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004504:	2b00      	cmp	r3, #0
 8004506:	d163      	bne.n	80045d0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800450c:	009a      	lsls	r2, r3, #2
 800450e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004512:	4013      	ands	r3, r2
 8004514:	687a      	ldr	r2, [r7, #4]
 8004516:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8004518:	0f92      	lsrs	r2, r2, #30
 800451a:	431a      	orrs	r2, r3
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004524:	0edb      	lsrs	r3, r3, #27
 8004526:	b2db      	uxtb	r3, r3
 8004528:	f003 0307 	and.w	r3, r3, #7
 800452c:	b2da      	uxtb	r2, r3
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004536:	0e1b      	lsrs	r3, r3, #24
 8004538:	b2db      	uxtb	r3, r3
 800453a:	f003 0307 	and.w	r3, r3, #7
 800453e:	b2da      	uxtb	r2, r3
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004548:	0d5b      	lsrs	r3, r3, #21
 800454a:	b2db      	uxtb	r3, r3
 800454c:	f003 0307 	and.w	r3, r3, #7
 8004550:	b2da      	uxtb	r2, r3
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800455a:	0c9b      	lsrs	r3, r3, #18
 800455c:	b2db      	uxtb	r3, r3
 800455e:	f003 0307 	and.w	r3, r3, #7
 8004562:	b2da      	uxtb	r2, r3
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800456c:	0bdb      	lsrs	r3, r3, #15
 800456e:	b2db      	uxtb	r3, r3
 8004570:	f003 0307 	and.w	r3, r3, #7
 8004574:	b2da      	uxtb	r2, r3
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	691b      	ldr	r3, [r3, #16]
 800457e:	1c5a      	adds	r2, r3, #1
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	7e1b      	ldrb	r3, [r3, #24]
 8004588:	b2db      	uxtb	r3, r3
 800458a:	f003 0307 	and.w	r3, r3, #7
 800458e:	3302      	adds	r3, #2
 8004590:	2201      	movs	r2, #1
 8004592:	fa02 f303 	lsl.w	r3, r2, r3
 8004596:	687a      	ldr	r2, [r7, #4]
 8004598:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800459a:	fb02 f203 	mul.w	r2, r2, r3
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	7a1b      	ldrb	r3, [r3, #8]
 80045a6:	b2db      	uxtb	r3, r3
 80045a8:	f003 030f 	and.w	r3, r3, #15
 80045ac:	2201      	movs	r2, #1
 80045ae:	409a      	lsls	r2, r3
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045b8:	687a      	ldr	r2, [r7, #4]
 80045ba:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80045bc:	0a52      	lsrs	r2, r2, #9
 80045be:	fb02 f203 	mul.w	r2, r2, r3
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80045cc:	661a      	str	r2, [r3, #96]	; 0x60
 80045ce:	e031      	b.n	8004634 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d11d      	bne.n	8004614 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045dc:	041b      	lsls	r3, r3, #16
 80045de:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045e6:	0c1b      	lsrs	r3, r3, #16
 80045e8:	431a      	orrs	r2, r3
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	691b      	ldr	r3, [r3, #16]
 80045f2:	3301      	adds	r3, #1
 80045f4:	029a      	lsls	r2, r3, #10
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004608:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	661a      	str	r2, [r3, #96]	; 0x60
 8004612:	e00f      	b.n	8004634 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a58      	ldr	r2, [pc, #352]	; (800477c <HAL_SD_GetCardCSD+0x344>)
 800461a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004620:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2201      	movs	r2, #1
 800462c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	e09d      	b.n	8004770 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004638:	0b9b      	lsrs	r3, r3, #14
 800463a:	b2db      	uxtb	r3, r3
 800463c:	f003 0301 	and.w	r3, r3, #1
 8004640:	b2da      	uxtb	r2, r3
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800464a:	09db      	lsrs	r3, r3, #7
 800464c:	b2db      	uxtb	r3, r3
 800464e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004652:	b2da      	uxtb	r2, r3
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800465c:	b2db      	uxtb	r3, r3
 800465e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004662:	b2da      	uxtb	r2, r3
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800466c:	0fdb      	lsrs	r3, r3, #31
 800466e:	b2da      	uxtb	r2, r3
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004678:	0f5b      	lsrs	r3, r3, #29
 800467a:	b2db      	uxtb	r3, r3
 800467c:	f003 0303 	and.w	r3, r3, #3
 8004680:	b2da      	uxtb	r2, r3
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800468a:	0e9b      	lsrs	r3, r3, #26
 800468c:	b2db      	uxtb	r3, r3
 800468e:	f003 0307 	and.w	r3, r3, #7
 8004692:	b2da      	uxtb	r2, r3
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800469c:	0d9b      	lsrs	r3, r3, #22
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	f003 030f 	and.w	r3, r3, #15
 80046a4:	b2da      	uxtb	r2, r3
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ae:	0d5b      	lsrs	r3, r3, #21
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	f003 0301 	and.w	r3, r3, #1
 80046b6:	b2da      	uxtb	r2, r3
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	2200      	movs	r2, #0
 80046c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ca:	0c1b      	lsrs	r3, r3, #16
 80046cc:	b2db      	uxtb	r3, r3
 80046ce:	f003 0301 	and.w	r3, r3, #1
 80046d2:	b2da      	uxtb	r2, r3
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046de:	0bdb      	lsrs	r3, r3, #15
 80046e0:	b2db      	uxtb	r3, r3
 80046e2:	f003 0301 	and.w	r3, r3, #1
 80046e6:	b2da      	uxtb	r2, r3
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046f2:	0b9b      	lsrs	r3, r3, #14
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	f003 0301 	and.w	r3, r3, #1
 80046fa:	b2da      	uxtb	r2, r3
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004706:	0b5b      	lsrs	r3, r3, #13
 8004708:	b2db      	uxtb	r3, r3
 800470a:	f003 0301 	and.w	r3, r3, #1
 800470e:	b2da      	uxtb	r2, r3
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800471a:	0b1b      	lsrs	r3, r3, #12
 800471c:	b2db      	uxtb	r3, r3
 800471e:	f003 0301 	and.w	r3, r3, #1
 8004722:	b2da      	uxtb	r2, r3
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800472e:	0a9b      	lsrs	r3, r3, #10
 8004730:	b2db      	uxtb	r3, r3
 8004732:	f003 0303 	and.w	r3, r3, #3
 8004736:	b2da      	uxtb	r2, r3
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004742:	0a1b      	lsrs	r3, r3, #8
 8004744:	b2db      	uxtb	r3, r3
 8004746:	f003 0303 	and.w	r3, r3, #3
 800474a:	b2da      	uxtb	r2, r3
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004756:	085b      	lsrs	r3, r3, #1
 8004758:	b2db      	uxtb	r3, r3
 800475a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800475e:	b2da      	uxtb	r2, r3
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	2201      	movs	r2, #1
 800476a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800476e:	2300      	movs	r3, #0
}
 8004770:	4618      	mov	r0, r3
 8004772:	370c      	adds	r7, #12
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	4770      	bx	lr
 800477c:	004005ff 	.word	0x004005ff

08004780 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8004780:	b480      	push	{r7}
 8004782:	b083      	sub	sp, #12
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80047ca:	2300      	movs	r3, #0
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	370c      	adds	r7, #12
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr

080047d8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80047d8:	b5b0      	push	{r4, r5, r7, lr}
 80047da:	b08e      	sub	sp, #56	; 0x38
 80047dc:	af04      	add	r7, sp, #16
 80047de:	6078      	str	r0, [r7, #4]
 80047e0:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80047e2:	2300      	movs	r3, #0
 80047e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2203      	movs	r2, #3
 80047ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047f4:	2b03      	cmp	r3, #3
 80047f6:	d02e      	beq.n	8004856 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047fe:	d106      	bne.n	800480e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004804:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	639a      	str	r2, [r3, #56]	; 0x38
 800480c:	e029      	b.n	8004862 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004814:	d10a      	bne.n	800482c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f000 fb28 	bl	8004e6c <SD_WideBus_Enable>
 800481c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004822:	6a3b      	ldr	r3, [r7, #32]
 8004824:	431a      	orrs	r2, r3
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	639a      	str	r2, [r3, #56]	; 0x38
 800482a:	e01a      	b.n	8004862 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d10a      	bne.n	8004848 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f000 fb65 	bl	8004f02 <SD_WideBus_Disable>
 8004838:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800483e:	6a3b      	ldr	r3, [r7, #32]
 8004840:	431a      	orrs	r2, r3
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	639a      	str	r2, [r3, #56]	; 0x38
 8004846:	e00c      	b.n	8004862 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800484c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	639a      	str	r2, [r3, #56]	; 0x38
 8004854:	e005      	b.n	8004862 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800485a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004866:	2b00      	cmp	r3, #0
 8004868:	d00b      	beq.n	8004882 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a26      	ldr	r2, [pc, #152]	; (8004908 <HAL_SD_ConfigWideBusOperation+0x130>)
 8004870:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2201      	movs	r2, #1
 8004876:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004880:	e01f      	b.n	80048c2 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	68db      	ldr	r3, [r3, #12]
 8004892:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	695b      	ldr	r3, [r3, #20]
 800489c:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	699b      	ldr	r3, [r3, #24]
 80048a2:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681d      	ldr	r5, [r3, #0]
 80048a8:	466c      	mov	r4, sp
 80048aa:	f107 0314 	add.w	r3, r7, #20
 80048ae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80048b2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80048b6:	f107 0308 	add.w	r3, r7, #8
 80048ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80048bc:	4628      	mov	r0, r5
 80048be:	f002 fabb 	bl	8006e38 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80048ca:	4618      	mov	r0, r3
 80048cc:	f002 fb90 	bl	8006ff0 <SDMMC_CmdBlockLength>
 80048d0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80048d2:	6a3b      	ldr	r3, [r7, #32]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d00c      	beq.n	80048f2 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a0a      	ldr	r2, [pc, #40]	; (8004908 <HAL_SD_ConfigWideBusOperation+0x130>)
 80048de:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048e4:	6a3b      	ldr	r3, [r7, #32]
 80048e6:	431a      	orrs	r2, r3
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2201      	movs	r2, #1
 80048f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 80048fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3728      	adds	r7, #40	; 0x28
 8004902:	46bd      	mov	sp, r7
 8004904:	bdb0      	pop	{r4, r5, r7, pc}
 8004906:	bf00      	nop
 8004908:	004005ff 	.word	0x004005ff

0800490c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b086      	sub	sp, #24
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8004914:	2300      	movs	r3, #0
 8004916:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8004918:	f107 030c 	add.w	r3, r7, #12
 800491c:	4619      	mov	r1, r3
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f000 fa7c 	bl	8004e1c <SD_SendStatus>
 8004924:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d005      	beq.n	8004938 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	431a      	orrs	r2, r3
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	0a5b      	lsrs	r3, r3, #9
 800493c:	f003 030f 	and.w	r3, r3, #15
 8004940:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8004942:	693b      	ldr	r3, [r7, #16]
}
 8004944:	4618      	mov	r0, r3
 8004946:	3718      	adds	r7, #24
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}

0800494c <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800494c:	b480      	push	{r7}
 800494e:	b085      	sub	sp, #20
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004958:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004968:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800496a:	bf00      	nop
 800496c:	3714      	adds	r7, #20
 800496e:	46bd      	mov	sp, r7
 8004970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004974:	4770      	bx	lr

08004976 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004976:	b580      	push	{r7, lr}
 8004978:	b084      	sub	sp, #16
 800497a:	af00      	add	r7, sp, #0
 800497c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004982:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004988:	2b82      	cmp	r3, #130	; 0x82
 800498a:	d111      	bne.n	80049b0 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4618      	mov	r0, r3
 8004992:	f002 fbd7 	bl	8007144 <SDMMC_CmdStopTransfer>
 8004996:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d008      	beq.n	80049b0 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	431a      	orrs	r2, r3
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 80049aa:	68f8      	ldr	r0, [r7, #12]
 80049ac:	f7ff fd3a 	bl	8004424 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f022 0208 	bic.w	r2, r2, #8
 80049be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f240 523a 	movw	r2, #1338	; 0x53a
 80049c8:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2201      	movs	r2, #1
 80049ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2200      	movs	r2, #0
 80049d6:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 80049d8:	68f8      	ldr	r0, [r7, #12]
 80049da:	f003 f83f 	bl	8007a5c <HAL_SD_RxCpltCallback>
#endif
}
 80049de:	bf00      	nop
 80049e0:	3710      	adds	r7, #16
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}
	...

080049e8 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b086      	sub	sp, #24
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049f4:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f7fd fff6 	bl	80029e8 <HAL_DMA_GetError>
 80049fc:	4603      	mov	r3, r0
 80049fe:	2b02      	cmp	r3, #2
 8004a00:	d03e      	beq.n	8004a80 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a08:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a10:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d002      	beq.n	8004a1e <SD_DMAError+0x36>
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d12d      	bne.n	8004a7a <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a19      	ldr	r2, [pc, #100]	; (8004a88 <SD_DMAError+0xa0>)
 8004a24:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8004a34:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a3a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8004a42:	6978      	ldr	r0, [r7, #20]
 8004a44:	f7ff ff62 	bl	800490c <HAL_SD_GetCardState>
 8004a48:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	2b06      	cmp	r3, #6
 8004a4e:	d002      	beq.n	8004a56 <SD_DMAError+0x6e>
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	2b05      	cmp	r3, #5
 8004a54:	d10a      	bne.n	8004a6c <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f002 fb72 	bl	8007144 <SDMMC_CmdStopTransfer>
 8004a60:	4602      	mov	r2, r0
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a66:	431a      	orrs	r2, r3
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	2200      	movs	r2, #0
 8004a78:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8004a7a:	6978      	ldr	r0, [r7, #20]
 8004a7c:	f7ff fcd2 	bl	8004424 <HAL_SD_ErrorCallback>
#endif
  }
}
 8004a80:	bf00      	nop
 8004a82:	3718      	adds	r7, #24
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}
 8004a88:	004005ff 	.word	0x004005ff

08004a8c <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b084      	sub	sp, #16
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a98:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f240 523a 	movw	r2, #1338	; 0x53a
 8004aa2:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8004aa4:	68f8      	ldr	r0, [r7, #12]
 8004aa6:	f7ff ff31 	bl	800490c <HAL_SD_GetCardState>
 8004aaa:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	2b06      	cmp	r3, #6
 8004abe:	d002      	beq.n	8004ac6 <SD_DMATxAbort+0x3a>
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	2b05      	cmp	r3, #5
 8004ac4:	d10a      	bne.n	8004adc <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4618      	mov	r0, r3
 8004acc:	f002 fb3a 	bl	8007144 <SDMMC_CmdStopTransfer>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ad6:	431a      	orrs	r2, r3
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d103      	bne.n	8004aec <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8004ae4:	68f8      	ldr	r0, [r7, #12]
 8004ae6:	f002 ffa5 	bl	8007a34 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8004aea:	e002      	b.n	8004af2 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8004aec:	68f8      	ldr	r0, [r7, #12]
 8004aee:	f7ff fc99 	bl	8004424 <HAL_SD_ErrorCallback>
}
 8004af2:	bf00      	nop
 8004af4:	3710      	adds	r7, #16
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}

08004afa <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8004afa:	b580      	push	{r7, lr}
 8004afc:	b084      	sub	sp, #16
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b06:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f240 523a 	movw	r2, #1338	; 0x53a
 8004b10:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8004b12:	68f8      	ldr	r0, [r7, #12]
 8004b14:	f7ff fefa 	bl	800490c <HAL_SD_GetCardState>
 8004b18:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2200      	movs	r2, #0
 8004b26:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	2b06      	cmp	r3, #6
 8004b2c:	d002      	beq.n	8004b34 <SD_DMARxAbort+0x3a>
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	2b05      	cmp	r3, #5
 8004b32:	d10a      	bne.n	8004b4a <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f002 fb03 	bl	8007144 <SDMMC_CmdStopTransfer>
 8004b3e:	4602      	mov	r2, r0
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b44:	431a      	orrs	r2, r3
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d103      	bne.n	8004b5a <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8004b52:	68f8      	ldr	r0, [r7, #12]
 8004b54:	f002 ff6e 	bl	8007a34 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8004b58:	e002      	b.n	8004b60 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8004b5a:	68f8      	ldr	r0, [r7, #12]
 8004b5c:	f7ff fc62 	bl	8004424 <HAL_SD_ErrorCallback>
}
 8004b60:	bf00      	nop
 8004b62:	3710      	adds	r7, #16
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}

08004b68 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004b68:	b5b0      	push	{r4, r5, r7, lr}
 8004b6a:	b094      	sub	sp, #80	; 0x50
 8004b6c:	af04      	add	r7, sp, #16
 8004b6e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8004b70:	2301      	movs	r3, #1
 8004b72:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f002 f9b5 	bl	8006ee8 <SDIO_GetPowerState>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d102      	bne.n	8004b8a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004b84:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004b88:	e0b6      	b.n	8004cf8 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b8e:	2b03      	cmp	r3, #3
 8004b90:	d02f      	beq.n	8004bf2 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4618      	mov	r0, r3
 8004b98:	f002 fbde 	bl	8007358 <SDMMC_CmdSendCID>
 8004b9c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004b9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d001      	beq.n	8004ba8 <SD_InitCard+0x40>
    {
      return errorstate;
 8004ba4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ba6:	e0a7      	b.n	8004cf8 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	2100      	movs	r1, #0
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f002 f9df 	bl	8006f72 <SDIO_GetResponse>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	2104      	movs	r1, #4
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f002 f9d6 	bl	8006f72 <SDIO_GetResponse>
 8004bc6:	4602      	mov	r2, r0
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	2108      	movs	r1, #8
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f002 f9cd 	bl	8006f72 <SDIO_GetResponse>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	210c      	movs	r1, #12
 8004be4:	4618      	mov	r0, r3
 8004be6:	f002 f9c4 	bl	8006f72 <SDIO_GetResponse>
 8004bea:	4602      	mov	r2, r0
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bf6:	2b03      	cmp	r3, #3
 8004bf8:	d00d      	beq.n	8004c16 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f107 020e 	add.w	r2, r7, #14
 8004c02:	4611      	mov	r1, r2
 8004c04:	4618      	mov	r0, r3
 8004c06:	f002 fbe4 	bl	80073d2 <SDMMC_CmdSetRelAdd>
 8004c0a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004c0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d001      	beq.n	8004c16 <SD_InitCard+0xae>
    {
      return errorstate;
 8004c12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c14:	e070      	b.n	8004cf8 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c1a:	2b03      	cmp	r3, #3
 8004c1c:	d036      	beq.n	8004c8c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8004c1e:	89fb      	ldrh	r3, [r7, #14]
 8004c20:	461a      	mov	r2, r3
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c2e:	041b      	lsls	r3, r3, #16
 8004c30:	4619      	mov	r1, r3
 8004c32:	4610      	mov	r0, r2
 8004c34:	f002 fbae 	bl	8007394 <SDMMC_CmdSendCSD>
 8004c38:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004c3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d001      	beq.n	8004c44 <SD_InitCard+0xdc>
    {
      return errorstate;
 8004c40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c42:	e059      	b.n	8004cf8 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	2100      	movs	r1, #0
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f002 f991 	bl	8006f72 <SDIO_GetResponse>
 8004c50:	4602      	mov	r2, r0
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	2104      	movs	r1, #4
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	f002 f988 	bl	8006f72 <SDIO_GetResponse>
 8004c62:	4602      	mov	r2, r0
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	2108      	movs	r1, #8
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f002 f97f 	bl	8006f72 <SDIO_GetResponse>
 8004c74:	4602      	mov	r2, r0
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	210c      	movs	r1, #12
 8004c80:	4618      	mov	r0, r3
 8004c82:	f002 f976 	bl	8006f72 <SDIO_GetResponse>
 8004c86:	4602      	mov	r2, r0
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	2104      	movs	r1, #4
 8004c92:	4618      	mov	r0, r3
 8004c94:	f002 f96d 	bl	8006f72 <SDIO_GetResponse>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	0d1a      	lsrs	r2, r3, #20
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8004ca0:	f107 0310 	add.w	r3, r7, #16
 8004ca4:	4619      	mov	r1, r3
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f7ff fbc6 	bl	8004438 <HAL_SD_GetCardCSD>
 8004cac:	4603      	mov	r3, r0
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d002      	beq.n	8004cb8 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004cb2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004cb6:	e01f      	b.n	8004cf8 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6819      	ldr	r1, [r3, #0]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cc0:	041b      	lsls	r3, r3, #16
 8004cc2:	461a      	mov	r2, r3
 8004cc4:	f04f 0300 	mov.w	r3, #0
 8004cc8:	4608      	mov	r0, r1
 8004cca:	f002 fa5d 	bl	8007188 <SDMMC_CmdSelDesel>
 8004cce:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8004cd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d001      	beq.n	8004cda <SD_InitCard+0x172>
  {
    return errorstate;
 8004cd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cd8:	e00e      	b.n	8004cf8 <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681d      	ldr	r5, [r3, #0]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	466c      	mov	r4, sp
 8004ce2:	f103 0210 	add.w	r2, r3, #16
 8004ce6:	ca07      	ldmia	r2, {r0, r1, r2}
 8004ce8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004cec:	3304      	adds	r3, #4
 8004cee:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004cf0:	4628      	mov	r0, r5
 8004cf2:	f002 f8a1 	bl	8006e38 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8004cf6:	2300      	movs	r3, #0
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	3740      	adds	r7, #64	; 0x40
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bdb0      	pop	{r4, r5, r7, pc}

08004d00 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b086      	sub	sp, #24
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	617b      	str	r3, [r7, #20]
 8004d10:	2300      	movs	r3, #0
 8004d12:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f002 fa58 	bl	80071ce <SDMMC_CmdGoIdleState>
 8004d1e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d001      	beq.n	8004d2a <SD_PowerON+0x2a>
  {
    return errorstate;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	e072      	b.n	8004e10 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f002 fa6b 	bl	800720a <SDMMC_CmdOperCond>
 8004d34:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d00d      	beq.n	8004d58 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4618      	mov	r0, r3
 8004d48:	f002 fa41 	bl	80071ce <SDMMC_CmdGoIdleState>
 8004d4c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d004      	beq.n	8004d5e <SD_PowerON+0x5e>
    {
      return errorstate;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	e05b      	b.n	8004e10 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d62:	2b01      	cmp	r3, #1
 8004d64:	d137      	bne.n	8004dd6 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	2100      	movs	r1, #0
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	f002 fa6b 	bl	8007248 <SDMMC_CmdAppCommand>
 8004d72:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d02d      	beq.n	8004dd6 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004d7a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004d7e:	e047      	b.n	8004e10 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	2100      	movs	r1, #0
 8004d86:	4618      	mov	r0, r3
 8004d88:	f002 fa5e 	bl	8007248 <SDMMC_CmdAppCommand>
 8004d8c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d001      	beq.n	8004d98 <SD_PowerON+0x98>
    {
      return errorstate;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	e03b      	b.n	8004e10 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	491e      	ldr	r1, [pc, #120]	; (8004e18 <SD_PowerON+0x118>)
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f002 fa74 	bl	800728c <SDMMC_CmdAppOperCommand>
 8004da4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d002      	beq.n	8004db2 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004dac:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004db0:	e02e      	b.n	8004e10 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	2100      	movs	r1, #0
 8004db8:	4618      	mov	r0, r3
 8004dba:	f002 f8da 	bl	8006f72 <SDIO_GetResponse>
 8004dbe:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	0fdb      	lsrs	r3, r3, #31
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	d101      	bne.n	8004dcc <SD_PowerON+0xcc>
 8004dc8:	2301      	movs	r3, #1
 8004dca:	e000      	b.n	8004dce <SD_PowerON+0xce>
 8004dcc:	2300      	movs	r3, #0
 8004dce:	613b      	str	r3, [r7, #16]

    count++;
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	3301      	adds	r3, #1
 8004dd4:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d802      	bhi.n	8004de6 <SD_PowerON+0xe6>
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d0cc      	beq.n	8004d80 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d902      	bls.n	8004df6 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8004df0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004df4:	e00c      	b.n	8004e10 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d003      	beq.n	8004e08 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2201      	movs	r2, #1
 8004e04:	645a      	str	r2, [r3, #68]	; 0x44
 8004e06:	e002      	b.n	8004e0e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8004e0e:	2300      	movs	r3, #0
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	3718      	adds	r7, #24
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}
 8004e18:	c1100000 	.word	0xc1100000

08004e1c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b084      	sub	sp, #16
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
 8004e24:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d102      	bne.n	8004e32 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8004e2c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004e30:	e018      	b.n	8004e64 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681a      	ldr	r2, [r3, #0]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e3a:	041b      	lsls	r3, r3, #16
 8004e3c:	4619      	mov	r1, r3
 8004e3e:	4610      	mov	r0, r2
 8004e40:	f002 fae8 	bl	8007414 <SDMMC_CmdSendStatus>
 8004e44:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d001      	beq.n	8004e50 <SD_SendStatus+0x34>
  {
    return errorstate;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	e009      	b.n	8004e64 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	2100      	movs	r1, #0
 8004e56:	4618      	mov	r0, r3
 8004e58:	f002 f88b 	bl	8006f72 <SDIO_GetResponse>
 8004e5c:	4602      	mov	r2, r0
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8004e62:	2300      	movs	r3, #0
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	3710      	adds	r7, #16
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}

08004e6c <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b086      	sub	sp, #24
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004e74:	2300      	movs	r3, #0
 8004e76:	60fb      	str	r3, [r7, #12]
 8004e78:	2300      	movs	r3, #0
 8004e7a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	2100      	movs	r1, #0
 8004e82:	4618      	mov	r0, r3
 8004e84:	f002 f875 	bl	8006f72 <SDIO_GetResponse>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e8e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004e92:	d102      	bne.n	8004e9a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004e94:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004e98:	e02f      	b.n	8004efa <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004e9a:	f107 030c 	add.w	r3, r7, #12
 8004e9e:	4619      	mov	r1, r3
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	f000 f879 	bl	8004f98 <SD_FindSCR>
 8004ea6:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d001      	beq.n	8004eb2 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	e023      	b.n	8004efa <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d01c      	beq.n	8004ef6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681a      	ldr	r2, [r3, #0]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ec4:	041b      	lsls	r3, r3, #16
 8004ec6:	4619      	mov	r1, r3
 8004ec8:	4610      	mov	r0, r2
 8004eca:	f002 f9bd 	bl	8007248 <SDMMC_CmdAppCommand>
 8004ece:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d001      	beq.n	8004eda <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	e00f      	b.n	8004efa <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	2102      	movs	r1, #2
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f002 f9f6 	bl	80072d2 <SDMMC_CmdBusWidth>
 8004ee6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d001      	beq.n	8004ef2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	e003      	b.n	8004efa <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	e001      	b.n	8004efa <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004ef6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3718      	adds	r7, #24
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}

08004f02 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8004f02:	b580      	push	{r7, lr}
 8004f04:	b086      	sub	sp, #24
 8004f06:	af00      	add	r7, sp, #0
 8004f08:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	60fb      	str	r3, [r7, #12]
 8004f0e:	2300      	movs	r3, #0
 8004f10:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	2100      	movs	r1, #0
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f002 f82a 	bl	8006f72 <SDIO_GetResponse>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f24:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004f28:	d102      	bne.n	8004f30 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004f2a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004f2e:	e02f      	b.n	8004f90 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004f30:	f107 030c 	add.w	r3, r7, #12
 8004f34:	4619      	mov	r1, r3
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f000 f82e 	bl	8004f98 <SD_FindSCR>
 8004f3c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d001      	beq.n	8004f48 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	e023      	b.n	8004f90 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d01c      	beq.n	8004f8c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681a      	ldr	r2, [r3, #0]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f5a:	041b      	lsls	r3, r3, #16
 8004f5c:	4619      	mov	r1, r3
 8004f5e:	4610      	mov	r0, r2
 8004f60:	f002 f972 	bl	8007248 <SDMMC_CmdAppCommand>
 8004f64:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d001      	beq.n	8004f70 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	e00f      	b.n	8004f90 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	2100      	movs	r1, #0
 8004f76:	4618      	mov	r0, r3
 8004f78:	f002 f9ab 	bl	80072d2 <SDMMC_CmdBusWidth>
 8004f7c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d001      	beq.n	8004f88 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	e003      	b.n	8004f90 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	e001      	b.n	8004f90 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004f8c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	3718      	adds	r7, #24
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}

08004f98 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8004f98:	b590      	push	{r4, r7, lr}
 8004f9a:	b08f      	sub	sp, #60	; 0x3c
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
 8004fa0:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004fa2:	f7fc fddb 	bl	8001b5c <HAL_GetTick>
 8004fa6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8004fac:	2300      	movs	r3, #0
 8004fae:	60bb      	str	r3, [r7, #8]
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	2108      	movs	r1, #8
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f002 f816 	bl	8006ff0 <SDMMC_CmdBlockLength>
 8004fc4:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d001      	beq.n	8004fd0 <SD_FindSCR+0x38>
  {
    return errorstate;
 8004fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fce:	e0b2      	b.n	8005136 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fd8:	041b      	lsls	r3, r3, #16
 8004fda:	4619      	mov	r1, r3
 8004fdc:	4610      	mov	r0, r2
 8004fde:	f002 f933 	bl	8007248 <SDMMC_CmdAppCommand>
 8004fe2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d001      	beq.n	8004fee <SD_FindSCR+0x56>
  {
    return errorstate;
 8004fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fec:	e0a3      	b.n	8005136 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004fee:	f04f 33ff 	mov.w	r3, #4294967295
 8004ff2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8004ff4:	2308      	movs	r3, #8
 8004ff6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8004ff8:	2330      	movs	r3, #48	; 0x30
 8004ffa:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8004ffc:	2302      	movs	r3, #2
 8004ffe:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005000:	2300      	movs	r3, #0
 8005002:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8005004:	2301      	movs	r3, #1
 8005006:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f107 0210 	add.w	r2, r7, #16
 8005010:	4611      	mov	r1, r2
 8005012:	4618      	mov	r0, r3
 8005014:	f001 ffc0 	bl	8006f98 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4618      	mov	r0, r3
 800501e:	f002 f97a 	bl	8007316 <SDMMC_CmdSendSCR>
 8005022:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005026:	2b00      	cmp	r3, #0
 8005028:	d02a      	beq.n	8005080 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800502a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800502c:	e083      	b.n	8005136 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005034:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005038:	2b00      	cmp	r3, #0
 800503a:	d00f      	beq.n	800505c <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6819      	ldr	r1, [r3, #0]
 8005040:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005042:	009b      	lsls	r3, r3, #2
 8005044:	f107 0208 	add.w	r2, r7, #8
 8005048:	18d4      	adds	r4, r2, r3
 800504a:	4608      	mov	r0, r1
 800504c:	f001 ff1f 	bl	8006e8e <SDIO_ReadFIFO>
 8005050:	4603      	mov	r3, r0
 8005052:	6023      	str	r3, [r4, #0]
      index++;
 8005054:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005056:	3301      	adds	r3, #1
 8005058:	637b      	str	r3, [r7, #52]	; 0x34
 800505a:	e006      	b.n	800506a <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005062:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005066:	2b00      	cmp	r3, #0
 8005068:	d012      	beq.n	8005090 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800506a:	f7fc fd77 	bl	8001b5c <HAL_GetTick>
 800506e:	4602      	mov	r2, r0
 8005070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005072:	1ad3      	subs	r3, r2, r3
 8005074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005078:	d102      	bne.n	8005080 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800507a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800507e:	e05a      	b.n	8005136 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005086:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800508a:	2b00      	cmp	r3, #0
 800508c:	d0cf      	beq.n	800502e <SD_FindSCR+0x96>
 800508e:	e000      	b.n	8005092 <SD_FindSCR+0xfa>
      break;
 8005090:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005098:	f003 0308 	and.w	r3, r3, #8
 800509c:	2b00      	cmp	r3, #0
 800509e:	d005      	beq.n	80050ac <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	2208      	movs	r2, #8
 80050a6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80050a8:	2308      	movs	r3, #8
 80050aa:	e044      	b.n	8005136 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050b2:	f003 0302 	and.w	r3, r3, #2
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d005      	beq.n	80050c6 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	2202      	movs	r2, #2
 80050c0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80050c2:	2302      	movs	r3, #2
 80050c4:	e037      	b.n	8005136 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050cc:	f003 0320 	and.w	r3, r3, #32
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d005      	beq.n	80050e0 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	2220      	movs	r2, #32
 80050da:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80050dc:	2320      	movs	r3, #32
 80050de:	e02a      	b.n	8005136 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f240 523a 	movw	r2, #1338	; 0x53a
 80050e8:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	061a      	lsls	r2, r3, #24
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	021b      	lsls	r3, r3, #8
 80050f2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80050f6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	0a1b      	lsrs	r3, r3, #8
 80050fc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005100:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	0e1b      	lsrs	r3, r3, #24
 8005106:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800510a:	601a      	str	r2, [r3, #0]
    scr++;
 800510c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800510e:	3304      	adds	r3, #4
 8005110:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	061a      	lsls	r2, r3, #24
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	021b      	lsls	r3, r3, #8
 800511a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800511e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	0a1b      	lsrs	r3, r3, #8
 8005124:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005128:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	0e1b      	lsrs	r3, r3, #24
 800512e:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005132:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8005134:	2300      	movs	r3, #0
}
 8005136:	4618      	mov	r0, r3
 8005138:	373c      	adds	r7, #60	; 0x3c
 800513a:	46bd      	mov	sp, r7
 800513c:	bd90      	pop	{r4, r7, pc}

0800513e <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800513e:	b580      	push	{r7, lr}
 8005140:	b086      	sub	sp, #24
 8005142:	af00      	add	r7, sp, #0
 8005144:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800514a:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005150:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d03f      	beq.n	80051d8 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8005158:	2300      	movs	r3, #0
 800515a:	617b      	str	r3, [r7, #20]
 800515c:	e033      	b.n	80051c6 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4618      	mov	r0, r3
 8005164:	f001 fe93 	bl	8006e8e <SDIO_ReadFIFO>
 8005168:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	b2da      	uxtb	r2, r3
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	3301      	adds	r3, #1
 8005176:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	3b01      	subs	r3, #1
 800517c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	0a1b      	lsrs	r3, r3, #8
 8005182:	b2da      	uxtb	r2, r3
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	3301      	adds	r3, #1
 800518c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	3b01      	subs	r3, #1
 8005192:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	0c1b      	lsrs	r3, r3, #16
 8005198:	b2da      	uxtb	r2, r3
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	3301      	adds	r3, #1
 80051a2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	3b01      	subs	r3, #1
 80051a8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	0e1b      	lsrs	r3, r3, #24
 80051ae:	b2da      	uxtb	r2, r3
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	701a      	strb	r2, [r3, #0]
      tmp++;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	3301      	adds	r3, #1
 80051b8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	3b01      	subs	r3, #1
 80051be:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	3301      	adds	r3, #1
 80051c4:	617b      	str	r3, [r7, #20]
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	2b07      	cmp	r3, #7
 80051ca:	d9c8      	bls.n	800515e <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	68fa      	ldr	r2, [r7, #12]
 80051d0:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	693a      	ldr	r2, [r7, #16]
 80051d6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 80051d8:	bf00      	nop
 80051da:	3718      	adds	r7, #24
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}

080051e0 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b086      	sub	sp, #24
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6a1b      	ldr	r3, [r3, #32]
 80051ec:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f2:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d043      	beq.n	8005282 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 80051fa:	2300      	movs	r3, #0
 80051fc:	617b      	str	r3, [r7, #20]
 80051fe:	e037      	b.n	8005270 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	781b      	ldrb	r3, [r3, #0]
 8005204:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	3301      	adds	r3, #1
 800520a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	3b01      	subs	r3, #1
 8005210:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	781b      	ldrb	r3, [r3, #0]
 8005216:	021a      	lsls	r2, r3, #8
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	4313      	orrs	r3, r2
 800521c:	60bb      	str	r3, [r7, #8]
      tmp++;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	3301      	adds	r3, #1
 8005222:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	3b01      	subs	r3, #1
 8005228:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	781b      	ldrb	r3, [r3, #0]
 800522e:	041a      	lsls	r2, r3, #16
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	4313      	orrs	r3, r2
 8005234:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	3301      	adds	r3, #1
 800523a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	3b01      	subs	r3, #1
 8005240:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	781b      	ldrb	r3, [r3, #0]
 8005246:	061a      	lsls	r2, r3, #24
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	4313      	orrs	r3, r2
 800524c:	60bb      	str	r3, [r7, #8]
      tmp++;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	3301      	adds	r3, #1
 8005252:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	3b01      	subs	r3, #1
 8005258:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f107 0208 	add.w	r2, r7, #8
 8005262:	4611      	mov	r1, r2
 8005264:	4618      	mov	r0, r3
 8005266:	f001 fe1f 	bl	8006ea8 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	3301      	adds	r3, #1
 800526e:	617b      	str	r3, [r7, #20]
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	2b07      	cmp	r3, #7
 8005274:	d9c4      	bls.n	8005200 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	68fa      	ldr	r2, [r7, #12]
 800527a:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	693a      	ldr	r2, [r7, #16]
 8005280:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8005282:	bf00      	nop
 8005284:	3718      	adds	r7, #24
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}

0800528a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800528a:	b580      	push	{r7, lr}
 800528c:	b082      	sub	sp, #8
 800528e:	af00      	add	r7, sp, #0
 8005290:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d101      	bne.n	800529c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005298:	2301      	movs	r3, #1
 800529a:	e07b      	b.n	8005394 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d108      	bne.n	80052b6 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052ac:	d009      	beq.n	80052c2 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2200      	movs	r2, #0
 80052b2:	61da      	str	r2, [r3, #28]
 80052b4:	e005      	b.n	80052c2 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2200      	movs	r2, #0
 80052ba:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2200      	movs	r2, #0
 80052c0:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2200      	movs	r2, #0
 80052c6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80052ce:	b2db      	uxtb	r3, r3
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d106      	bne.n	80052e2 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2200      	movs	r2, #0
 80052d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	f7fb fe41 	bl	8000f64 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2202      	movs	r2, #2
 80052e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052f8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	689b      	ldr	r3, [r3, #8]
 8005306:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800530a:	431a      	orrs	r2, r3
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	68db      	ldr	r3, [r3, #12]
 8005310:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005314:	431a      	orrs	r2, r3
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	691b      	ldr	r3, [r3, #16]
 800531a:	f003 0302 	and.w	r3, r3, #2
 800531e:	431a      	orrs	r2, r3
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	695b      	ldr	r3, [r3, #20]
 8005324:	f003 0301 	and.w	r3, r3, #1
 8005328:	431a      	orrs	r2, r3
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	699b      	ldr	r3, [r3, #24]
 800532e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005332:	431a      	orrs	r2, r3
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	69db      	ldr	r3, [r3, #28]
 8005338:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800533c:	431a      	orrs	r2, r3
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6a1b      	ldr	r3, [r3, #32]
 8005342:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005346:	ea42 0103 	orr.w	r1, r2, r3
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800534e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	430a      	orrs	r2, r1
 8005358:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	699b      	ldr	r3, [r3, #24]
 800535e:	0c1b      	lsrs	r3, r3, #16
 8005360:	f003 0104 	and.w	r1, r3, #4
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005368:	f003 0210 	and.w	r2, r3, #16
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	430a      	orrs	r2, r1
 8005372:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	69da      	ldr	r2, [r3, #28]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005382:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2200      	movs	r2, #0
 8005388:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2201      	movs	r2, #1
 800538e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005392:	2300      	movs	r3, #0
}
 8005394:	4618      	mov	r0, r3
 8005396:	3708      	adds	r7, #8
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}

0800539c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b082      	sub	sp, #8
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d101      	bne.n	80053ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	e041      	b.n	8005432 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053b4:	b2db      	uxtb	r3, r3
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d106      	bne.n	80053c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2200      	movs	r2, #0
 80053be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f7fc f94e 	bl	8001664 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2202      	movs	r2, #2
 80053cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	3304      	adds	r3, #4
 80053d8:	4619      	mov	r1, r3
 80053da:	4610      	mov	r0, r2
 80053dc:	f000 fb4a 	bl	8005a74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2201      	movs	r2, #1
 80053e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2201      	movs	r2, #1
 80053ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2201      	movs	r2, #1
 80053f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2201      	movs	r2, #1
 80053fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2201      	movs	r2, #1
 8005404:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2201      	movs	r2, #1
 800540c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2201      	movs	r2, #1
 8005414:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2201      	movs	r2, #1
 800541c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2201      	movs	r2, #1
 8005424:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2201      	movs	r2, #1
 800542c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005430:	2300      	movs	r3, #0
}
 8005432:	4618      	mov	r0, r3
 8005434:	3708      	adds	r7, #8
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}

0800543a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800543a:	b580      	push	{r7, lr}
 800543c:	b082      	sub	sp, #8
 800543e:	af00      	add	r7, sp, #0
 8005440:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d101      	bne.n	800544c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005448:	2301      	movs	r3, #1
 800544a:	e041      	b.n	80054d0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005452:	b2db      	uxtb	r3, r3
 8005454:	2b00      	cmp	r3, #0
 8005456:	d106      	bne.n	8005466 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2200      	movs	r2, #0
 800545c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	f000 f839 	bl	80054d8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2202      	movs	r2, #2
 800546a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	3304      	adds	r3, #4
 8005476:	4619      	mov	r1, r3
 8005478:	4610      	mov	r0, r2
 800547a:	f000 fafb 	bl	8005a74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2201      	movs	r2, #1
 8005482:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2201      	movs	r2, #1
 800548a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2201      	movs	r2, #1
 8005492:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2201      	movs	r2, #1
 800549a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2201      	movs	r2, #1
 80054a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2201      	movs	r2, #1
 80054aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2201      	movs	r2, #1
 80054b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2201      	movs	r2, #1
 80054ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2201      	movs	r2, #1
 80054c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2201      	movs	r2, #1
 80054ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054ce:	2300      	movs	r3, #0
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	3708      	adds	r7, #8
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}

080054d8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80054d8:	b480      	push	{r7}
 80054da:	b083      	sub	sp, #12
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80054e0:	bf00      	nop
 80054e2:	370c      	adds	r7, #12
 80054e4:	46bd      	mov	sp, r7
 80054e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ea:	4770      	bx	lr

080054ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b082      	sub	sp, #8
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	691b      	ldr	r3, [r3, #16]
 80054fa:	f003 0302 	and.w	r3, r3, #2
 80054fe:	2b02      	cmp	r3, #2
 8005500:	d122      	bne.n	8005548 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	68db      	ldr	r3, [r3, #12]
 8005508:	f003 0302 	and.w	r3, r3, #2
 800550c:	2b02      	cmp	r3, #2
 800550e:	d11b      	bne.n	8005548 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f06f 0202 	mvn.w	r2, #2
 8005518:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2201      	movs	r2, #1
 800551e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	699b      	ldr	r3, [r3, #24]
 8005526:	f003 0303 	and.w	r3, r3, #3
 800552a:	2b00      	cmp	r3, #0
 800552c:	d003      	beq.n	8005536 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f000 fa81 	bl	8005a36 <HAL_TIM_IC_CaptureCallback>
 8005534:	e005      	b.n	8005542 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f000 fa73 	bl	8005a22 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	f000 fa84 	bl	8005a4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2200      	movs	r2, #0
 8005546:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	691b      	ldr	r3, [r3, #16]
 800554e:	f003 0304 	and.w	r3, r3, #4
 8005552:	2b04      	cmp	r3, #4
 8005554:	d122      	bne.n	800559c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	68db      	ldr	r3, [r3, #12]
 800555c:	f003 0304 	and.w	r3, r3, #4
 8005560:	2b04      	cmp	r3, #4
 8005562:	d11b      	bne.n	800559c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f06f 0204 	mvn.w	r2, #4
 800556c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2202      	movs	r2, #2
 8005572:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	699b      	ldr	r3, [r3, #24]
 800557a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800557e:	2b00      	cmp	r3, #0
 8005580:	d003      	beq.n	800558a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f000 fa57 	bl	8005a36 <HAL_TIM_IC_CaptureCallback>
 8005588:	e005      	b.n	8005596 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f000 fa49 	bl	8005a22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005590:	6878      	ldr	r0, [r7, #4]
 8005592:	f000 fa5a 	bl	8005a4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2200      	movs	r2, #0
 800559a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	691b      	ldr	r3, [r3, #16]
 80055a2:	f003 0308 	and.w	r3, r3, #8
 80055a6:	2b08      	cmp	r3, #8
 80055a8:	d122      	bne.n	80055f0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	68db      	ldr	r3, [r3, #12]
 80055b0:	f003 0308 	and.w	r3, r3, #8
 80055b4:	2b08      	cmp	r3, #8
 80055b6:	d11b      	bne.n	80055f0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f06f 0208 	mvn.w	r2, #8
 80055c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2204      	movs	r2, #4
 80055c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	69db      	ldr	r3, [r3, #28]
 80055ce:	f003 0303 	and.w	r3, r3, #3
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d003      	beq.n	80055de <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f000 fa2d 	bl	8005a36 <HAL_TIM_IC_CaptureCallback>
 80055dc:	e005      	b.n	80055ea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f000 fa1f 	bl	8005a22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	f000 fa30 	bl	8005a4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2200      	movs	r2, #0
 80055ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	691b      	ldr	r3, [r3, #16]
 80055f6:	f003 0310 	and.w	r3, r3, #16
 80055fa:	2b10      	cmp	r3, #16
 80055fc:	d122      	bne.n	8005644 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	68db      	ldr	r3, [r3, #12]
 8005604:	f003 0310 	and.w	r3, r3, #16
 8005608:	2b10      	cmp	r3, #16
 800560a:	d11b      	bne.n	8005644 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f06f 0210 	mvn.w	r2, #16
 8005614:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2208      	movs	r2, #8
 800561a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	69db      	ldr	r3, [r3, #28]
 8005622:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005626:	2b00      	cmp	r3, #0
 8005628:	d003      	beq.n	8005632 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f000 fa03 	bl	8005a36 <HAL_TIM_IC_CaptureCallback>
 8005630:	e005      	b.n	800563e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f000 f9f5 	bl	8005a22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	f000 fa06 	bl	8005a4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2200      	movs	r2, #0
 8005642:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	691b      	ldr	r3, [r3, #16]
 800564a:	f003 0301 	and.w	r3, r3, #1
 800564e:	2b01      	cmp	r3, #1
 8005650:	d10e      	bne.n	8005670 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	68db      	ldr	r3, [r3, #12]
 8005658:	f003 0301 	and.w	r3, r3, #1
 800565c:	2b01      	cmp	r3, #1
 800565e:	d107      	bne.n	8005670 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f06f 0201 	mvn.w	r2, #1
 8005668:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f000 f9cf 	bl	8005a0e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	691b      	ldr	r3, [r3, #16]
 8005676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800567a:	2b80      	cmp	r3, #128	; 0x80
 800567c:	d10e      	bne.n	800569c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	68db      	ldr	r3, [r3, #12]
 8005684:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005688:	2b80      	cmp	r3, #128	; 0x80
 800568a:	d107      	bne.n	800569c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005694:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f000 fd5c 	bl	8006154 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	691b      	ldr	r3, [r3, #16]
 80056a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056a6:	2b40      	cmp	r3, #64	; 0x40
 80056a8:	d10e      	bne.n	80056c8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	68db      	ldr	r3, [r3, #12]
 80056b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056b4:	2b40      	cmp	r3, #64	; 0x40
 80056b6:	d107      	bne.n	80056c8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80056c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f000 f9cb 	bl	8005a5e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	691b      	ldr	r3, [r3, #16]
 80056ce:	f003 0320 	and.w	r3, r3, #32
 80056d2:	2b20      	cmp	r3, #32
 80056d4:	d10e      	bne.n	80056f4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	68db      	ldr	r3, [r3, #12]
 80056dc:	f003 0320 	and.w	r3, r3, #32
 80056e0:	2b20      	cmp	r3, #32
 80056e2:	d107      	bne.n	80056f4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f06f 0220 	mvn.w	r2, #32
 80056ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f000 fd26 	bl	8006140 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80056f4:	bf00      	nop
 80056f6:	3708      	adds	r7, #8
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}

080056fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b086      	sub	sp, #24
 8005700:	af00      	add	r7, sp, #0
 8005702:	60f8      	str	r0, [r7, #12]
 8005704:	60b9      	str	r1, [r7, #8]
 8005706:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005708:	2300      	movs	r3, #0
 800570a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005712:	2b01      	cmp	r3, #1
 8005714:	d101      	bne.n	800571a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005716:	2302      	movs	r3, #2
 8005718:	e0ae      	b.n	8005878 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2201      	movs	r2, #1
 800571e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2b0c      	cmp	r3, #12
 8005726:	f200 809f 	bhi.w	8005868 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800572a:	a201      	add	r2, pc, #4	; (adr r2, 8005730 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800572c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005730:	08005765 	.word	0x08005765
 8005734:	08005869 	.word	0x08005869
 8005738:	08005869 	.word	0x08005869
 800573c:	08005869 	.word	0x08005869
 8005740:	080057a5 	.word	0x080057a5
 8005744:	08005869 	.word	0x08005869
 8005748:	08005869 	.word	0x08005869
 800574c:	08005869 	.word	0x08005869
 8005750:	080057e7 	.word	0x080057e7
 8005754:	08005869 	.word	0x08005869
 8005758:	08005869 	.word	0x08005869
 800575c:	08005869 	.word	0x08005869
 8005760:	08005827 	.word	0x08005827
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	68b9      	ldr	r1, [r7, #8]
 800576a:	4618      	mov	r0, r3
 800576c:	f000 fa22 	bl	8005bb4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	699a      	ldr	r2, [r3, #24]
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f042 0208 	orr.w	r2, r2, #8
 800577e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	699a      	ldr	r2, [r3, #24]
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f022 0204 	bic.w	r2, r2, #4
 800578e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	6999      	ldr	r1, [r3, #24]
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	691a      	ldr	r2, [r3, #16]
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	430a      	orrs	r2, r1
 80057a0:	619a      	str	r2, [r3, #24]
      break;
 80057a2:	e064      	b.n	800586e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	68b9      	ldr	r1, [r7, #8]
 80057aa:	4618      	mov	r0, r3
 80057ac:	f000 fa72 	bl	8005c94 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	699a      	ldr	r2, [r3, #24]
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80057be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	699a      	ldr	r2, [r3, #24]
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	6999      	ldr	r1, [r3, #24]
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	691b      	ldr	r3, [r3, #16]
 80057da:	021a      	lsls	r2, r3, #8
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	430a      	orrs	r2, r1
 80057e2:	619a      	str	r2, [r3, #24]
      break;
 80057e4:	e043      	b.n	800586e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	68b9      	ldr	r1, [r7, #8]
 80057ec:	4618      	mov	r0, r3
 80057ee:	f000 fac7 	bl	8005d80 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	69da      	ldr	r2, [r3, #28]
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f042 0208 	orr.w	r2, r2, #8
 8005800:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	69da      	ldr	r2, [r3, #28]
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f022 0204 	bic.w	r2, r2, #4
 8005810:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	69d9      	ldr	r1, [r3, #28]
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	691a      	ldr	r2, [r3, #16]
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	430a      	orrs	r2, r1
 8005822:	61da      	str	r2, [r3, #28]
      break;
 8005824:	e023      	b.n	800586e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	68b9      	ldr	r1, [r7, #8]
 800582c:	4618      	mov	r0, r3
 800582e:	f000 fb1b 	bl	8005e68 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	69da      	ldr	r2, [r3, #28]
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005840:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	69da      	ldr	r2, [r3, #28]
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005850:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	69d9      	ldr	r1, [r3, #28]
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	691b      	ldr	r3, [r3, #16]
 800585c:	021a      	lsls	r2, r3, #8
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	430a      	orrs	r2, r1
 8005864:	61da      	str	r2, [r3, #28]
      break;
 8005866:	e002      	b.n	800586e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005868:	2301      	movs	r3, #1
 800586a:	75fb      	strb	r3, [r7, #23]
      break;
 800586c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2200      	movs	r2, #0
 8005872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005876:	7dfb      	ldrb	r3, [r7, #23]
}
 8005878:	4618      	mov	r0, r3
 800587a:	3718      	adds	r7, #24
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}

08005880 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b084      	sub	sp, #16
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
 8005888:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800588a:	2300      	movs	r3, #0
 800588c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005894:	2b01      	cmp	r3, #1
 8005896:	d101      	bne.n	800589c <HAL_TIM_ConfigClockSource+0x1c>
 8005898:	2302      	movs	r3, #2
 800589a:	e0b4      	b.n	8005a06 <HAL_TIM_ConfigClockSource+0x186>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2201      	movs	r2, #1
 80058a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2202      	movs	r2, #2
 80058a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	689b      	ldr	r3, [r3, #8]
 80058b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80058ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80058c2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	68ba      	ldr	r2, [r7, #8]
 80058ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058d4:	d03e      	beq.n	8005954 <HAL_TIM_ConfigClockSource+0xd4>
 80058d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058da:	f200 8087 	bhi.w	80059ec <HAL_TIM_ConfigClockSource+0x16c>
 80058de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058e2:	f000 8086 	beq.w	80059f2 <HAL_TIM_ConfigClockSource+0x172>
 80058e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058ea:	d87f      	bhi.n	80059ec <HAL_TIM_ConfigClockSource+0x16c>
 80058ec:	2b70      	cmp	r3, #112	; 0x70
 80058ee:	d01a      	beq.n	8005926 <HAL_TIM_ConfigClockSource+0xa6>
 80058f0:	2b70      	cmp	r3, #112	; 0x70
 80058f2:	d87b      	bhi.n	80059ec <HAL_TIM_ConfigClockSource+0x16c>
 80058f4:	2b60      	cmp	r3, #96	; 0x60
 80058f6:	d050      	beq.n	800599a <HAL_TIM_ConfigClockSource+0x11a>
 80058f8:	2b60      	cmp	r3, #96	; 0x60
 80058fa:	d877      	bhi.n	80059ec <HAL_TIM_ConfigClockSource+0x16c>
 80058fc:	2b50      	cmp	r3, #80	; 0x50
 80058fe:	d03c      	beq.n	800597a <HAL_TIM_ConfigClockSource+0xfa>
 8005900:	2b50      	cmp	r3, #80	; 0x50
 8005902:	d873      	bhi.n	80059ec <HAL_TIM_ConfigClockSource+0x16c>
 8005904:	2b40      	cmp	r3, #64	; 0x40
 8005906:	d058      	beq.n	80059ba <HAL_TIM_ConfigClockSource+0x13a>
 8005908:	2b40      	cmp	r3, #64	; 0x40
 800590a:	d86f      	bhi.n	80059ec <HAL_TIM_ConfigClockSource+0x16c>
 800590c:	2b30      	cmp	r3, #48	; 0x30
 800590e:	d064      	beq.n	80059da <HAL_TIM_ConfigClockSource+0x15a>
 8005910:	2b30      	cmp	r3, #48	; 0x30
 8005912:	d86b      	bhi.n	80059ec <HAL_TIM_ConfigClockSource+0x16c>
 8005914:	2b20      	cmp	r3, #32
 8005916:	d060      	beq.n	80059da <HAL_TIM_ConfigClockSource+0x15a>
 8005918:	2b20      	cmp	r3, #32
 800591a:	d867      	bhi.n	80059ec <HAL_TIM_ConfigClockSource+0x16c>
 800591c:	2b00      	cmp	r3, #0
 800591e:	d05c      	beq.n	80059da <HAL_TIM_ConfigClockSource+0x15a>
 8005920:	2b10      	cmp	r3, #16
 8005922:	d05a      	beq.n	80059da <HAL_TIM_ConfigClockSource+0x15a>
 8005924:	e062      	b.n	80059ec <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6818      	ldr	r0, [r3, #0]
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	6899      	ldr	r1, [r3, #8]
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	685a      	ldr	r2, [r3, #4]
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	68db      	ldr	r3, [r3, #12]
 8005936:	f000 fb67 	bl	8006008 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005948:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	68ba      	ldr	r2, [r7, #8]
 8005950:	609a      	str	r2, [r3, #8]
      break;
 8005952:	e04f      	b.n	80059f4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6818      	ldr	r0, [r3, #0]
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	6899      	ldr	r1, [r3, #8]
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	685a      	ldr	r2, [r3, #4]
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	68db      	ldr	r3, [r3, #12]
 8005964:	f000 fb50 	bl	8006008 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	689a      	ldr	r2, [r3, #8]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005976:	609a      	str	r2, [r3, #8]
      break;
 8005978:	e03c      	b.n	80059f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6818      	ldr	r0, [r3, #0]
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	6859      	ldr	r1, [r3, #4]
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	68db      	ldr	r3, [r3, #12]
 8005986:	461a      	mov	r2, r3
 8005988:	f000 fac4 	bl	8005f14 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	2150      	movs	r1, #80	; 0x50
 8005992:	4618      	mov	r0, r3
 8005994:	f000 fb1d 	bl	8005fd2 <TIM_ITRx_SetConfig>
      break;
 8005998:	e02c      	b.n	80059f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6818      	ldr	r0, [r3, #0]
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	6859      	ldr	r1, [r3, #4]
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	68db      	ldr	r3, [r3, #12]
 80059a6:	461a      	mov	r2, r3
 80059a8:	f000 fae3 	bl	8005f72 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	2160      	movs	r1, #96	; 0x60
 80059b2:	4618      	mov	r0, r3
 80059b4:	f000 fb0d 	bl	8005fd2 <TIM_ITRx_SetConfig>
      break;
 80059b8:	e01c      	b.n	80059f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6818      	ldr	r0, [r3, #0]
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	6859      	ldr	r1, [r3, #4]
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	68db      	ldr	r3, [r3, #12]
 80059c6:	461a      	mov	r2, r3
 80059c8:	f000 faa4 	bl	8005f14 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	2140      	movs	r1, #64	; 0x40
 80059d2:	4618      	mov	r0, r3
 80059d4:	f000 fafd 	bl	8005fd2 <TIM_ITRx_SetConfig>
      break;
 80059d8:	e00c      	b.n	80059f4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681a      	ldr	r2, [r3, #0]
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4619      	mov	r1, r3
 80059e4:	4610      	mov	r0, r2
 80059e6:	f000 faf4 	bl	8005fd2 <TIM_ITRx_SetConfig>
      break;
 80059ea:	e003      	b.n	80059f4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80059ec:	2301      	movs	r3, #1
 80059ee:	73fb      	strb	r3, [r7, #15]
      break;
 80059f0:	e000      	b.n	80059f4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80059f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2201      	movs	r2, #1
 80059f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2200      	movs	r2, #0
 8005a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005a04:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3710      	adds	r7, #16
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}

08005a0e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a0e:	b480      	push	{r7}
 8005a10:	b083      	sub	sp, #12
 8005a12:	af00      	add	r7, sp, #0
 8005a14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005a16:	bf00      	nop
 8005a18:	370c      	adds	r7, #12
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a20:	4770      	bx	lr

08005a22 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a22:	b480      	push	{r7}
 8005a24:	b083      	sub	sp, #12
 8005a26:	af00      	add	r7, sp, #0
 8005a28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005a2a:	bf00      	nop
 8005a2c:	370c      	adds	r7, #12
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a34:	4770      	bx	lr

08005a36 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005a36:	b480      	push	{r7}
 8005a38:	b083      	sub	sp, #12
 8005a3a:	af00      	add	r7, sp, #0
 8005a3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005a3e:	bf00      	nop
 8005a40:	370c      	adds	r7, #12
 8005a42:	46bd      	mov	sp, r7
 8005a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a48:	4770      	bx	lr

08005a4a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005a4a:	b480      	push	{r7}
 8005a4c:	b083      	sub	sp, #12
 8005a4e:	af00      	add	r7, sp, #0
 8005a50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a52:	bf00      	nop
 8005a54:	370c      	adds	r7, #12
 8005a56:	46bd      	mov	sp, r7
 8005a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5c:	4770      	bx	lr

08005a5e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a5e:	b480      	push	{r7}
 8005a60:	b083      	sub	sp, #12
 8005a62:	af00      	add	r7, sp, #0
 8005a64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a66:	bf00      	nop
 8005a68:	370c      	adds	r7, #12
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a70:	4770      	bx	lr
	...

08005a74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005a74:	b480      	push	{r7}
 8005a76:	b085      	sub	sp, #20
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
 8005a7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	4a40      	ldr	r2, [pc, #256]	; (8005b88 <TIM_Base_SetConfig+0x114>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d013      	beq.n	8005ab4 <TIM_Base_SetConfig+0x40>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a92:	d00f      	beq.n	8005ab4 <TIM_Base_SetConfig+0x40>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	4a3d      	ldr	r2, [pc, #244]	; (8005b8c <TIM_Base_SetConfig+0x118>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d00b      	beq.n	8005ab4 <TIM_Base_SetConfig+0x40>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	4a3c      	ldr	r2, [pc, #240]	; (8005b90 <TIM_Base_SetConfig+0x11c>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d007      	beq.n	8005ab4 <TIM_Base_SetConfig+0x40>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	4a3b      	ldr	r2, [pc, #236]	; (8005b94 <TIM_Base_SetConfig+0x120>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d003      	beq.n	8005ab4 <TIM_Base_SetConfig+0x40>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	4a3a      	ldr	r2, [pc, #232]	; (8005b98 <TIM_Base_SetConfig+0x124>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d108      	bne.n	8005ac6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005aba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	68fa      	ldr	r2, [r7, #12]
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	4a2f      	ldr	r2, [pc, #188]	; (8005b88 <TIM_Base_SetConfig+0x114>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d02b      	beq.n	8005b26 <TIM_Base_SetConfig+0xb2>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ad4:	d027      	beq.n	8005b26 <TIM_Base_SetConfig+0xb2>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	4a2c      	ldr	r2, [pc, #176]	; (8005b8c <TIM_Base_SetConfig+0x118>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d023      	beq.n	8005b26 <TIM_Base_SetConfig+0xb2>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	4a2b      	ldr	r2, [pc, #172]	; (8005b90 <TIM_Base_SetConfig+0x11c>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d01f      	beq.n	8005b26 <TIM_Base_SetConfig+0xb2>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	4a2a      	ldr	r2, [pc, #168]	; (8005b94 <TIM_Base_SetConfig+0x120>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d01b      	beq.n	8005b26 <TIM_Base_SetConfig+0xb2>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	4a29      	ldr	r2, [pc, #164]	; (8005b98 <TIM_Base_SetConfig+0x124>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d017      	beq.n	8005b26 <TIM_Base_SetConfig+0xb2>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	4a28      	ldr	r2, [pc, #160]	; (8005b9c <TIM_Base_SetConfig+0x128>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d013      	beq.n	8005b26 <TIM_Base_SetConfig+0xb2>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	4a27      	ldr	r2, [pc, #156]	; (8005ba0 <TIM_Base_SetConfig+0x12c>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d00f      	beq.n	8005b26 <TIM_Base_SetConfig+0xb2>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	4a26      	ldr	r2, [pc, #152]	; (8005ba4 <TIM_Base_SetConfig+0x130>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d00b      	beq.n	8005b26 <TIM_Base_SetConfig+0xb2>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	4a25      	ldr	r2, [pc, #148]	; (8005ba8 <TIM_Base_SetConfig+0x134>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d007      	beq.n	8005b26 <TIM_Base_SetConfig+0xb2>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	4a24      	ldr	r2, [pc, #144]	; (8005bac <TIM_Base_SetConfig+0x138>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d003      	beq.n	8005b26 <TIM_Base_SetConfig+0xb2>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	4a23      	ldr	r2, [pc, #140]	; (8005bb0 <TIM_Base_SetConfig+0x13c>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d108      	bne.n	8005b38 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	68db      	ldr	r3, [r3, #12]
 8005b32:	68fa      	ldr	r2, [r7, #12]
 8005b34:	4313      	orrs	r3, r2
 8005b36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	695b      	ldr	r3, [r3, #20]
 8005b42:	4313      	orrs	r3, r2
 8005b44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	68fa      	ldr	r2, [r7, #12]
 8005b4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	689a      	ldr	r2, [r3, #8]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	4a0a      	ldr	r2, [pc, #40]	; (8005b88 <TIM_Base_SetConfig+0x114>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d003      	beq.n	8005b6c <TIM_Base_SetConfig+0xf8>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	4a0c      	ldr	r2, [pc, #48]	; (8005b98 <TIM_Base_SetConfig+0x124>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d103      	bne.n	8005b74 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	691a      	ldr	r2, [r3, #16]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2201      	movs	r2, #1
 8005b78:	615a      	str	r2, [r3, #20]
}
 8005b7a:	bf00      	nop
 8005b7c:	3714      	adds	r7, #20
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b84:	4770      	bx	lr
 8005b86:	bf00      	nop
 8005b88:	40010000 	.word	0x40010000
 8005b8c:	40000400 	.word	0x40000400
 8005b90:	40000800 	.word	0x40000800
 8005b94:	40000c00 	.word	0x40000c00
 8005b98:	40010400 	.word	0x40010400
 8005b9c:	40014000 	.word	0x40014000
 8005ba0:	40014400 	.word	0x40014400
 8005ba4:	40014800 	.word	0x40014800
 8005ba8:	40001800 	.word	0x40001800
 8005bac:	40001c00 	.word	0x40001c00
 8005bb0:	40002000 	.word	0x40002000

08005bb4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b087      	sub	sp, #28
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
 8005bbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6a1b      	ldr	r3, [r3, #32]
 8005bc2:	f023 0201 	bic.w	r2, r3, #1
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6a1b      	ldr	r3, [r3, #32]
 8005bce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	699b      	ldr	r3, [r3, #24]
 8005bda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005be2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	f023 0303 	bic.w	r3, r3, #3
 8005bea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	68fa      	ldr	r2, [r7, #12]
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	f023 0302 	bic.w	r3, r3, #2
 8005bfc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	689b      	ldr	r3, [r3, #8]
 8005c02:	697a      	ldr	r2, [r7, #20]
 8005c04:	4313      	orrs	r3, r2
 8005c06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	4a20      	ldr	r2, [pc, #128]	; (8005c8c <TIM_OC1_SetConfig+0xd8>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d003      	beq.n	8005c18 <TIM_OC1_SetConfig+0x64>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	4a1f      	ldr	r2, [pc, #124]	; (8005c90 <TIM_OC1_SetConfig+0xdc>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d10c      	bne.n	8005c32 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	f023 0308 	bic.w	r3, r3, #8
 8005c1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	68db      	ldr	r3, [r3, #12]
 8005c24:	697a      	ldr	r2, [r7, #20]
 8005c26:	4313      	orrs	r3, r2
 8005c28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	f023 0304 	bic.w	r3, r3, #4
 8005c30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	4a15      	ldr	r2, [pc, #84]	; (8005c8c <TIM_OC1_SetConfig+0xd8>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d003      	beq.n	8005c42 <TIM_OC1_SetConfig+0x8e>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	4a14      	ldr	r2, [pc, #80]	; (8005c90 <TIM_OC1_SetConfig+0xdc>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d111      	bne.n	8005c66 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005c4a:	693b      	ldr	r3, [r7, #16]
 8005c4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	695b      	ldr	r3, [r3, #20]
 8005c56:	693a      	ldr	r2, [r7, #16]
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	699b      	ldr	r3, [r3, #24]
 8005c60:	693a      	ldr	r2, [r7, #16]
 8005c62:	4313      	orrs	r3, r2
 8005c64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	693a      	ldr	r2, [r7, #16]
 8005c6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	68fa      	ldr	r2, [r7, #12]
 8005c70:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	685a      	ldr	r2, [r3, #4]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	697a      	ldr	r2, [r7, #20]
 8005c7e:	621a      	str	r2, [r3, #32]
}
 8005c80:	bf00      	nop
 8005c82:	371c      	adds	r7, #28
 8005c84:	46bd      	mov	sp, r7
 8005c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8a:	4770      	bx	lr
 8005c8c:	40010000 	.word	0x40010000
 8005c90:	40010400 	.word	0x40010400

08005c94 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b087      	sub	sp, #28
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
 8005c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6a1b      	ldr	r3, [r3, #32]
 8005ca2:	f023 0210 	bic.w	r2, r3, #16
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6a1b      	ldr	r3, [r3, #32]
 8005cae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	699b      	ldr	r3, [r3, #24]
 8005cba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	021b      	lsls	r3, r3, #8
 8005cd2:	68fa      	ldr	r2, [r7, #12]
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	f023 0320 	bic.w	r3, r3, #32
 8005cde:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	689b      	ldr	r3, [r3, #8]
 8005ce4:	011b      	lsls	r3, r3, #4
 8005ce6:	697a      	ldr	r2, [r7, #20]
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	4a22      	ldr	r2, [pc, #136]	; (8005d78 <TIM_OC2_SetConfig+0xe4>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d003      	beq.n	8005cfc <TIM_OC2_SetConfig+0x68>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	4a21      	ldr	r2, [pc, #132]	; (8005d7c <TIM_OC2_SetConfig+0xe8>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d10d      	bne.n	8005d18 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	68db      	ldr	r3, [r3, #12]
 8005d08:	011b      	lsls	r3, r3, #4
 8005d0a:	697a      	ldr	r2, [r7, #20]
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d16:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	4a17      	ldr	r2, [pc, #92]	; (8005d78 <TIM_OC2_SetConfig+0xe4>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d003      	beq.n	8005d28 <TIM_OC2_SetConfig+0x94>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	4a16      	ldr	r2, [pc, #88]	; (8005d7c <TIM_OC2_SetConfig+0xe8>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d113      	bne.n	8005d50 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005d28:	693b      	ldr	r3, [r7, #16]
 8005d2a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d2e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d36:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	695b      	ldr	r3, [r3, #20]
 8005d3c:	009b      	lsls	r3, r3, #2
 8005d3e:	693a      	ldr	r2, [r7, #16]
 8005d40:	4313      	orrs	r3, r2
 8005d42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	699b      	ldr	r3, [r3, #24]
 8005d48:	009b      	lsls	r3, r3, #2
 8005d4a:	693a      	ldr	r2, [r7, #16]
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	693a      	ldr	r2, [r7, #16]
 8005d54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	68fa      	ldr	r2, [r7, #12]
 8005d5a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	685a      	ldr	r2, [r3, #4]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	697a      	ldr	r2, [r7, #20]
 8005d68:	621a      	str	r2, [r3, #32]
}
 8005d6a:	bf00      	nop
 8005d6c:	371c      	adds	r7, #28
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d74:	4770      	bx	lr
 8005d76:	bf00      	nop
 8005d78:	40010000 	.word	0x40010000
 8005d7c:	40010400 	.word	0x40010400

08005d80 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d80:	b480      	push	{r7}
 8005d82:	b087      	sub	sp, #28
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
 8005d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6a1b      	ldr	r3, [r3, #32]
 8005d8e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6a1b      	ldr	r3, [r3, #32]
 8005d9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	69db      	ldr	r3, [r3, #28]
 8005da6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	f023 0303 	bic.w	r3, r3, #3
 8005db6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	68fa      	ldr	r2, [r7, #12]
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005dc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	689b      	ldr	r3, [r3, #8]
 8005dce:	021b      	lsls	r3, r3, #8
 8005dd0:	697a      	ldr	r2, [r7, #20]
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	4a21      	ldr	r2, [pc, #132]	; (8005e60 <TIM_OC3_SetConfig+0xe0>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d003      	beq.n	8005de6 <TIM_OC3_SetConfig+0x66>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	4a20      	ldr	r2, [pc, #128]	; (8005e64 <TIM_OC3_SetConfig+0xe4>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d10d      	bne.n	8005e02 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005dec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	68db      	ldr	r3, [r3, #12]
 8005df2:	021b      	lsls	r3, r3, #8
 8005df4:	697a      	ldr	r2, [r7, #20]
 8005df6:	4313      	orrs	r3, r2
 8005df8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	4a16      	ldr	r2, [pc, #88]	; (8005e60 <TIM_OC3_SetConfig+0xe0>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d003      	beq.n	8005e12 <TIM_OC3_SetConfig+0x92>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	4a15      	ldr	r2, [pc, #84]	; (8005e64 <TIM_OC3_SetConfig+0xe4>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d113      	bne.n	8005e3a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	695b      	ldr	r3, [r3, #20]
 8005e26:	011b      	lsls	r3, r3, #4
 8005e28:	693a      	ldr	r2, [r7, #16]
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	699b      	ldr	r3, [r3, #24]
 8005e32:	011b      	lsls	r3, r3, #4
 8005e34:	693a      	ldr	r2, [r7, #16]
 8005e36:	4313      	orrs	r3, r2
 8005e38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	693a      	ldr	r2, [r7, #16]
 8005e3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	68fa      	ldr	r2, [r7, #12]
 8005e44:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	685a      	ldr	r2, [r3, #4]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	697a      	ldr	r2, [r7, #20]
 8005e52:	621a      	str	r2, [r3, #32]
}
 8005e54:	bf00      	nop
 8005e56:	371c      	adds	r7, #28
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5e:	4770      	bx	lr
 8005e60:	40010000 	.word	0x40010000
 8005e64:	40010400 	.word	0x40010400

08005e68 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b087      	sub	sp, #28
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
 8005e70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6a1b      	ldr	r3, [r3, #32]
 8005e76:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6a1b      	ldr	r3, [r3, #32]
 8005e82:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	69db      	ldr	r3, [r3, #28]
 8005e8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	021b      	lsls	r3, r3, #8
 8005ea6:	68fa      	ldr	r2, [r7, #12]
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005eac:	693b      	ldr	r3, [r7, #16]
 8005eae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005eb2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	031b      	lsls	r3, r3, #12
 8005eba:	693a      	ldr	r2, [r7, #16]
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	4a12      	ldr	r2, [pc, #72]	; (8005f0c <TIM_OC4_SetConfig+0xa4>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d003      	beq.n	8005ed0 <TIM_OC4_SetConfig+0x68>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	4a11      	ldr	r2, [pc, #68]	; (8005f10 <TIM_OC4_SetConfig+0xa8>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d109      	bne.n	8005ee4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ed6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	695b      	ldr	r3, [r3, #20]
 8005edc:	019b      	lsls	r3, r3, #6
 8005ede:	697a      	ldr	r2, [r7, #20]
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	697a      	ldr	r2, [r7, #20]
 8005ee8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	68fa      	ldr	r2, [r7, #12]
 8005eee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	685a      	ldr	r2, [r3, #4]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	693a      	ldr	r2, [r7, #16]
 8005efc:	621a      	str	r2, [r3, #32]
}
 8005efe:	bf00      	nop
 8005f00:	371c      	adds	r7, #28
 8005f02:	46bd      	mov	sp, r7
 8005f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f08:	4770      	bx	lr
 8005f0a:	bf00      	nop
 8005f0c:	40010000 	.word	0x40010000
 8005f10:	40010400 	.word	0x40010400

08005f14 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b087      	sub	sp, #28
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	60f8      	str	r0, [r7, #12]
 8005f1c:	60b9      	str	r1, [r7, #8]
 8005f1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	6a1b      	ldr	r3, [r3, #32]
 8005f24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	6a1b      	ldr	r3, [r3, #32]
 8005f2a:	f023 0201 	bic.w	r2, r3, #1
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	699b      	ldr	r3, [r3, #24]
 8005f36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	011b      	lsls	r3, r3, #4
 8005f44:	693a      	ldr	r2, [r7, #16]
 8005f46:	4313      	orrs	r3, r2
 8005f48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	f023 030a 	bic.w	r3, r3, #10
 8005f50:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005f52:	697a      	ldr	r2, [r7, #20]
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	4313      	orrs	r3, r2
 8005f58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	693a      	ldr	r2, [r7, #16]
 8005f5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	697a      	ldr	r2, [r7, #20]
 8005f64:	621a      	str	r2, [r3, #32]
}
 8005f66:	bf00      	nop
 8005f68:	371c      	adds	r7, #28
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f70:	4770      	bx	lr

08005f72 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f72:	b480      	push	{r7}
 8005f74:	b087      	sub	sp, #28
 8005f76:	af00      	add	r7, sp, #0
 8005f78:	60f8      	str	r0, [r7, #12]
 8005f7a:	60b9      	str	r1, [r7, #8]
 8005f7c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	6a1b      	ldr	r3, [r3, #32]
 8005f82:	f023 0210 	bic.w	r2, r3, #16
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	699b      	ldr	r3, [r3, #24]
 8005f8e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	6a1b      	ldr	r3, [r3, #32]
 8005f94:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005f9c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	031b      	lsls	r3, r3, #12
 8005fa2:	697a      	ldr	r2, [r7, #20]
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005fa8:	693b      	ldr	r3, [r7, #16]
 8005faa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005fae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	011b      	lsls	r3, r3, #4
 8005fb4:	693a      	ldr	r2, [r7, #16]
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	697a      	ldr	r2, [r7, #20]
 8005fbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	693a      	ldr	r2, [r7, #16]
 8005fc4:	621a      	str	r2, [r3, #32]
}
 8005fc6:	bf00      	nop
 8005fc8:	371c      	adds	r7, #28
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd0:	4770      	bx	lr

08005fd2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005fd2:	b480      	push	{r7}
 8005fd4:	b085      	sub	sp, #20
 8005fd6:	af00      	add	r7, sp, #0
 8005fd8:	6078      	str	r0, [r7, #4]
 8005fda:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	689b      	ldr	r3, [r3, #8]
 8005fe0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fe8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005fea:	683a      	ldr	r2, [r7, #0]
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	f043 0307 	orr.w	r3, r3, #7
 8005ff4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	68fa      	ldr	r2, [r7, #12]
 8005ffa:	609a      	str	r2, [r3, #8]
}
 8005ffc:	bf00      	nop
 8005ffe:	3714      	adds	r7, #20
 8006000:	46bd      	mov	sp, r7
 8006002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006006:	4770      	bx	lr

08006008 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006008:	b480      	push	{r7}
 800600a:	b087      	sub	sp, #28
 800600c:	af00      	add	r7, sp, #0
 800600e:	60f8      	str	r0, [r7, #12]
 8006010:	60b9      	str	r1, [r7, #8]
 8006012:	607a      	str	r2, [r7, #4]
 8006014:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	689b      	ldr	r3, [r3, #8]
 800601a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006022:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	021a      	lsls	r2, r3, #8
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	431a      	orrs	r2, r3
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	4313      	orrs	r3, r2
 8006030:	697a      	ldr	r2, [r7, #20]
 8006032:	4313      	orrs	r3, r2
 8006034:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	697a      	ldr	r2, [r7, #20]
 800603a:	609a      	str	r2, [r3, #8]
}
 800603c:	bf00      	nop
 800603e:	371c      	adds	r7, #28
 8006040:	46bd      	mov	sp, r7
 8006042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006046:	4770      	bx	lr

08006048 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006048:	b480      	push	{r7}
 800604a:	b085      	sub	sp, #20
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
 8006050:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006058:	2b01      	cmp	r3, #1
 800605a:	d101      	bne.n	8006060 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800605c:	2302      	movs	r3, #2
 800605e:	e05a      	b.n	8006116 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2201      	movs	r2, #1
 8006064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2202      	movs	r2, #2
 800606c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	689b      	ldr	r3, [r3, #8]
 800607e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006086:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	68fa      	ldr	r2, [r7, #12]
 800608e:	4313      	orrs	r3, r2
 8006090:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	68fa      	ldr	r2, [r7, #12]
 8006098:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a21      	ldr	r2, [pc, #132]	; (8006124 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d022      	beq.n	80060ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060ac:	d01d      	beq.n	80060ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4a1d      	ldr	r2, [pc, #116]	; (8006128 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d018      	beq.n	80060ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a1b      	ldr	r2, [pc, #108]	; (800612c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d013      	beq.n	80060ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4a1a      	ldr	r2, [pc, #104]	; (8006130 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d00e      	beq.n	80060ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a18      	ldr	r2, [pc, #96]	; (8006134 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d009      	beq.n	80060ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a17      	ldr	r2, [pc, #92]	; (8006138 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d004      	beq.n	80060ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a15      	ldr	r2, [pc, #84]	; (800613c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d10c      	bne.n	8006104 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80060f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	685b      	ldr	r3, [r3, #4]
 80060f6:	68ba      	ldr	r2, [r7, #8]
 80060f8:	4313      	orrs	r3, r2
 80060fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	68ba      	ldr	r2, [r7, #8]
 8006102:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2201      	movs	r2, #1
 8006108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2200      	movs	r2, #0
 8006110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006114:	2300      	movs	r3, #0
}
 8006116:	4618      	mov	r0, r3
 8006118:	3714      	adds	r7, #20
 800611a:	46bd      	mov	sp, r7
 800611c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006120:	4770      	bx	lr
 8006122:	bf00      	nop
 8006124:	40010000 	.word	0x40010000
 8006128:	40000400 	.word	0x40000400
 800612c:	40000800 	.word	0x40000800
 8006130:	40000c00 	.word	0x40000c00
 8006134:	40010400 	.word	0x40010400
 8006138:	40014000 	.word	0x40014000
 800613c:	40001800 	.word	0x40001800

08006140 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006140:	b480      	push	{r7}
 8006142:	b083      	sub	sp, #12
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006148:	bf00      	nop
 800614a:	370c      	adds	r7, #12
 800614c:	46bd      	mov	sp, r7
 800614e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006152:	4770      	bx	lr

08006154 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006154:	b480      	push	{r7}
 8006156:	b083      	sub	sp, #12
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800615c:	bf00      	nop
 800615e:	370c      	adds	r7, #12
 8006160:	46bd      	mov	sp, r7
 8006162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006166:	4770      	bx	lr

08006168 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b082      	sub	sp, #8
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d101      	bne.n	800617a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006176:	2301      	movs	r3, #1
 8006178:	e03f      	b.n	80061fa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006180:	b2db      	uxtb	r3, r3
 8006182:	2b00      	cmp	r3, #0
 8006184:	d106      	bne.n	8006194 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2200      	movs	r2, #0
 800618a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f7fb fc04 	bl	800199c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2224      	movs	r2, #36	; 0x24
 8006198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	68da      	ldr	r2, [r3, #12]
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80061aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	f000 fc7b 	bl	8006aa8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	691a      	ldr	r2, [r3, #16]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80061c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	695a      	ldr	r2, [r3, #20]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80061d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	68da      	ldr	r2, [r3, #12]
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80061e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2200      	movs	r2, #0
 80061e6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2220      	movs	r2, #32
 80061ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2220      	movs	r2, #32
 80061f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80061f8:	2300      	movs	r3, #0
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	3708      	adds	r7, #8
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}
	...

08006204 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b0ba      	sub	sp, #232	; 0xe8
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	68db      	ldr	r3, [r3, #12]
 800621c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	695b      	ldr	r3, [r3, #20]
 8006226:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800622a:	2300      	movs	r3, #0
 800622c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006230:	2300      	movs	r3, #0
 8006232:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006236:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800623a:	f003 030f 	and.w	r3, r3, #15
 800623e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006242:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006246:	2b00      	cmp	r3, #0
 8006248:	d10f      	bne.n	800626a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800624a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800624e:	f003 0320 	and.w	r3, r3, #32
 8006252:	2b00      	cmp	r3, #0
 8006254:	d009      	beq.n	800626a <HAL_UART_IRQHandler+0x66>
 8006256:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800625a:	f003 0320 	and.w	r3, r3, #32
 800625e:	2b00      	cmp	r3, #0
 8006260:	d003      	beq.n	800626a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f000 fb65 	bl	8006932 <UART_Receive_IT>
      return;
 8006268:	e256      	b.n	8006718 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800626a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800626e:	2b00      	cmp	r3, #0
 8006270:	f000 80de 	beq.w	8006430 <HAL_UART_IRQHandler+0x22c>
 8006274:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006278:	f003 0301 	and.w	r3, r3, #1
 800627c:	2b00      	cmp	r3, #0
 800627e:	d106      	bne.n	800628e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006280:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006284:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006288:	2b00      	cmp	r3, #0
 800628a:	f000 80d1 	beq.w	8006430 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800628e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006292:	f003 0301 	and.w	r3, r3, #1
 8006296:	2b00      	cmp	r3, #0
 8006298:	d00b      	beq.n	80062b2 <HAL_UART_IRQHandler+0xae>
 800629a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800629e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d005      	beq.n	80062b2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062aa:	f043 0201 	orr.w	r2, r3, #1
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80062b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062b6:	f003 0304 	and.w	r3, r3, #4
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d00b      	beq.n	80062d6 <HAL_UART_IRQHandler+0xd2>
 80062be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80062c2:	f003 0301 	and.w	r3, r3, #1
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d005      	beq.n	80062d6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ce:	f043 0202 	orr.w	r2, r3, #2
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80062d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062da:	f003 0302 	and.w	r3, r3, #2
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d00b      	beq.n	80062fa <HAL_UART_IRQHandler+0xf6>
 80062e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80062e6:	f003 0301 	and.w	r3, r3, #1
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d005      	beq.n	80062fa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062f2:	f043 0204 	orr.w	r2, r3, #4
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80062fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062fe:	f003 0308 	and.w	r3, r3, #8
 8006302:	2b00      	cmp	r3, #0
 8006304:	d011      	beq.n	800632a <HAL_UART_IRQHandler+0x126>
 8006306:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800630a:	f003 0320 	and.w	r3, r3, #32
 800630e:	2b00      	cmp	r3, #0
 8006310:	d105      	bne.n	800631e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006312:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006316:	f003 0301 	and.w	r3, r3, #1
 800631a:	2b00      	cmp	r3, #0
 800631c:	d005      	beq.n	800632a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006322:	f043 0208 	orr.w	r2, r3, #8
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800632e:	2b00      	cmp	r3, #0
 8006330:	f000 81ed 	beq.w	800670e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006334:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006338:	f003 0320 	and.w	r3, r3, #32
 800633c:	2b00      	cmp	r3, #0
 800633e:	d008      	beq.n	8006352 <HAL_UART_IRQHandler+0x14e>
 8006340:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006344:	f003 0320 	and.w	r3, r3, #32
 8006348:	2b00      	cmp	r3, #0
 800634a:	d002      	beq.n	8006352 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f000 faf0 	bl	8006932 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	695b      	ldr	r3, [r3, #20]
 8006358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800635c:	2b40      	cmp	r3, #64	; 0x40
 800635e:	bf0c      	ite	eq
 8006360:	2301      	moveq	r3, #1
 8006362:	2300      	movne	r3, #0
 8006364:	b2db      	uxtb	r3, r3
 8006366:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800636e:	f003 0308 	and.w	r3, r3, #8
 8006372:	2b00      	cmp	r3, #0
 8006374:	d103      	bne.n	800637e <HAL_UART_IRQHandler+0x17a>
 8006376:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800637a:	2b00      	cmp	r3, #0
 800637c:	d04f      	beq.n	800641e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	f000 f9f8 	bl	8006774 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	695b      	ldr	r3, [r3, #20]
 800638a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800638e:	2b40      	cmp	r3, #64	; 0x40
 8006390:	d141      	bne.n	8006416 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	3314      	adds	r3, #20
 8006398:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800639c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80063a0:	e853 3f00 	ldrex	r3, [r3]
 80063a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80063a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80063ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	3314      	adds	r3, #20
 80063ba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80063be:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80063c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063c6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80063ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80063ce:	e841 2300 	strex	r3, r2, [r1]
 80063d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80063d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d1d9      	bne.n	8006392 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d013      	beq.n	800640e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ea:	4a7d      	ldr	r2, [pc, #500]	; (80065e0 <HAL_UART_IRQHandler+0x3dc>)
 80063ec:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063f2:	4618      	mov	r0, r3
 80063f4:	f7fc f94c 	bl	8002690 <HAL_DMA_Abort_IT>
 80063f8:	4603      	mov	r3, r0
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d016      	beq.n	800642c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006402:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006404:	687a      	ldr	r2, [r7, #4]
 8006406:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006408:	4610      	mov	r0, r2
 800640a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800640c:	e00e      	b.n	800642c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f000 f99a 	bl	8006748 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006414:	e00a      	b.n	800642c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f000 f996 	bl	8006748 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800641c:	e006      	b.n	800642c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f000 f992 	bl	8006748 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2200      	movs	r2, #0
 8006428:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800642a:	e170      	b.n	800670e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800642c:	bf00      	nop
    return;
 800642e:	e16e      	b.n	800670e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006434:	2b01      	cmp	r3, #1
 8006436:	f040 814a 	bne.w	80066ce <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800643a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800643e:	f003 0310 	and.w	r3, r3, #16
 8006442:	2b00      	cmp	r3, #0
 8006444:	f000 8143 	beq.w	80066ce <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006448:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800644c:	f003 0310 	and.w	r3, r3, #16
 8006450:	2b00      	cmp	r3, #0
 8006452:	f000 813c 	beq.w	80066ce <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006456:	2300      	movs	r3, #0
 8006458:	60bb      	str	r3, [r7, #8]
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	60bb      	str	r3, [r7, #8]
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	60bb      	str	r3, [r7, #8]
 800646a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	695b      	ldr	r3, [r3, #20]
 8006472:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006476:	2b40      	cmp	r3, #64	; 0x40
 8006478:	f040 80b4 	bne.w	80065e4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	685b      	ldr	r3, [r3, #4]
 8006484:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006488:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800648c:	2b00      	cmp	r3, #0
 800648e:	f000 8140 	beq.w	8006712 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006496:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800649a:	429a      	cmp	r2, r3
 800649c:	f080 8139 	bcs.w	8006712 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80064a6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ac:	69db      	ldr	r3, [r3, #28]
 80064ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064b2:	f000 8088 	beq.w	80065c6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	330c      	adds	r3, #12
 80064bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80064c4:	e853 3f00 	ldrex	r3, [r3]
 80064c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80064cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80064d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80064d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	330c      	adds	r3, #12
 80064de:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80064e2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80064e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ea:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80064ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80064f2:	e841 2300 	strex	r3, r2, [r1]
 80064f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80064fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d1d9      	bne.n	80064b6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	3314      	adds	r3, #20
 8006508:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800650a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800650c:	e853 3f00 	ldrex	r3, [r3]
 8006510:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006512:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006514:	f023 0301 	bic.w	r3, r3, #1
 8006518:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	3314      	adds	r3, #20
 8006522:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006526:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800652a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800652c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800652e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006532:	e841 2300 	strex	r3, r2, [r1]
 8006536:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006538:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800653a:	2b00      	cmp	r3, #0
 800653c:	d1e1      	bne.n	8006502 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	3314      	adds	r3, #20
 8006544:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006546:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006548:	e853 3f00 	ldrex	r3, [r3]
 800654c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800654e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006550:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006554:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	3314      	adds	r3, #20
 800655e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006562:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006564:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006566:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006568:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800656a:	e841 2300 	strex	r3, r2, [r1]
 800656e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006570:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006572:	2b00      	cmp	r3, #0
 8006574:	d1e3      	bne.n	800653e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2220      	movs	r2, #32
 800657a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2200      	movs	r2, #0
 8006582:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	330c      	adds	r3, #12
 800658a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800658c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800658e:	e853 3f00 	ldrex	r3, [r3]
 8006592:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006594:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006596:	f023 0310 	bic.w	r3, r3, #16
 800659a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	330c      	adds	r3, #12
 80065a4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80065a8:	65ba      	str	r2, [r7, #88]	; 0x58
 80065aa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80065ae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80065b0:	e841 2300 	strex	r3, r2, [r1]
 80065b4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80065b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d1e3      	bne.n	8006584 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065c0:	4618      	mov	r0, r3
 80065c2:	f7fb fff5 	bl	80025b0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80065ce:	b29b      	uxth	r3, r3
 80065d0:	1ad3      	subs	r3, r2, r3
 80065d2:	b29b      	uxth	r3, r3
 80065d4:	4619      	mov	r1, r3
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f000 f8c0 	bl	800675c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80065dc:	e099      	b.n	8006712 <HAL_UART_IRQHandler+0x50e>
 80065de:	bf00      	nop
 80065e0:	0800683b 	.word	0x0800683b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80065ec:	b29b      	uxth	r3, r3
 80065ee:	1ad3      	subs	r3, r2, r3
 80065f0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80065f8:	b29b      	uxth	r3, r3
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	f000 808b 	beq.w	8006716 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006600:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006604:	2b00      	cmp	r3, #0
 8006606:	f000 8086 	beq.w	8006716 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	330c      	adds	r3, #12
 8006610:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006614:	e853 3f00 	ldrex	r3, [r3]
 8006618:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800661a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800661c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006620:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	330c      	adds	r3, #12
 800662a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800662e:	647a      	str	r2, [r7, #68]	; 0x44
 8006630:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006632:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006634:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006636:	e841 2300 	strex	r3, r2, [r1]
 800663a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800663c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800663e:	2b00      	cmp	r3, #0
 8006640:	d1e3      	bne.n	800660a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	3314      	adds	r3, #20
 8006648:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800664a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800664c:	e853 3f00 	ldrex	r3, [r3]
 8006650:	623b      	str	r3, [r7, #32]
   return(result);
 8006652:	6a3b      	ldr	r3, [r7, #32]
 8006654:	f023 0301 	bic.w	r3, r3, #1
 8006658:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	3314      	adds	r3, #20
 8006662:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006666:	633a      	str	r2, [r7, #48]	; 0x30
 8006668:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800666a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800666c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800666e:	e841 2300 	strex	r3, r2, [r1]
 8006672:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006676:	2b00      	cmp	r3, #0
 8006678:	d1e3      	bne.n	8006642 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2220      	movs	r2, #32
 800667e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2200      	movs	r2, #0
 8006686:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	330c      	adds	r3, #12
 800668e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	e853 3f00 	ldrex	r3, [r3]
 8006696:	60fb      	str	r3, [r7, #12]
   return(result);
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	f023 0310 	bic.w	r3, r3, #16
 800669e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	330c      	adds	r3, #12
 80066a8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80066ac:	61fa      	str	r2, [r7, #28]
 80066ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066b0:	69b9      	ldr	r1, [r7, #24]
 80066b2:	69fa      	ldr	r2, [r7, #28]
 80066b4:	e841 2300 	strex	r3, r2, [r1]
 80066b8:	617b      	str	r3, [r7, #20]
   return(result);
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d1e3      	bne.n	8006688 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80066c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80066c4:	4619      	mov	r1, r3
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f000 f848 	bl	800675c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80066cc:	e023      	b.n	8006716 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80066ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d009      	beq.n	80066ee <HAL_UART_IRQHandler+0x4ea>
 80066da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d003      	beq.n	80066ee <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f000 f8bb 	bl	8006862 <UART_Transmit_IT>
    return;
 80066ec:	e014      	b.n	8006718 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80066ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d00e      	beq.n	8006718 <HAL_UART_IRQHandler+0x514>
 80066fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006702:	2b00      	cmp	r3, #0
 8006704:	d008      	beq.n	8006718 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f000 f8fb 	bl	8006902 <UART_EndTransmit_IT>
    return;
 800670c:	e004      	b.n	8006718 <HAL_UART_IRQHandler+0x514>
    return;
 800670e:	bf00      	nop
 8006710:	e002      	b.n	8006718 <HAL_UART_IRQHandler+0x514>
      return;
 8006712:	bf00      	nop
 8006714:	e000      	b.n	8006718 <HAL_UART_IRQHandler+0x514>
      return;
 8006716:	bf00      	nop
  }
}
 8006718:	37e8      	adds	r7, #232	; 0xe8
 800671a:	46bd      	mov	sp, r7
 800671c:	bd80      	pop	{r7, pc}
 800671e:	bf00      	nop

08006720 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006720:	b480      	push	{r7}
 8006722:	b083      	sub	sp, #12
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006728:	bf00      	nop
 800672a:	370c      	adds	r7, #12
 800672c:	46bd      	mov	sp, r7
 800672e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006732:	4770      	bx	lr

08006734 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006734:	b480      	push	{r7}
 8006736:	b083      	sub	sp, #12
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800673c:	bf00      	nop
 800673e:	370c      	adds	r7, #12
 8006740:	46bd      	mov	sp, r7
 8006742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006746:	4770      	bx	lr

08006748 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006748:	b480      	push	{r7}
 800674a:	b083      	sub	sp, #12
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006750:	bf00      	nop
 8006752:	370c      	adds	r7, #12
 8006754:	46bd      	mov	sp, r7
 8006756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675a:	4770      	bx	lr

0800675c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800675c:	b480      	push	{r7}
 800675e:	b083      	sub	sp, #12
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
 8006764:	460b      	mov	r3, r1
 8006766:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006768:	bf00      	nop
 800676a:	370c      	adds	r7, #12
 800676c:	46bd      	mov	sp, r7
 800676e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006772:	4770      	bx	lr

08006774 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006774:	b480      	push	{r7}
 8006776:	b095      	sub	sp, #84	; 0x54
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	330c      	adds	r3, #12
 8006782:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006784:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006786:	e853 3f00 	ldrex	r3, [r3]
 800678a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800678c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800678e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006792:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	330c      	adds	r3, #12
 800679a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800679c:	643a      	str	r2, [r7, #64]	; 0x40
 800679e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067a0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80067a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80067a4:	e841 2300 	strex	r3, r2, [r1]
 80067a8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80067aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d1e5      	bne.n	800677c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	3314      	adds	r3, #20
 80067b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067b8:	6a3b      	ldr	r3, [r7, #32]
 80067ba:	e853 3f00 	ldrex	r3, [r3]
 80067be:	61fb      	str	r3, [r7, #28]
   return(result);
 80067c0:	69fb      	ldr	r3, [r7, #28]
 80067c2:	f023 0301 	bic.w	r3, r3, #1
 80067c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	3314      	adds	r3, #20
 80067ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80067d0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80067d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80067d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80067d8:	e841 2300 	strex	r3, r2, [r1]
 80067dc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80067de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d1e5      	bne.n	80067b0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067e8:	2b01      	cmp	r3, #1
 80067ea:	d119      	bne.n	8006820 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	330c      	adds	r3, #12
 80067f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	e853 3f00 	ldrex	r3, [r3]
 80067fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	f023 0310 	bic.w	r3, r3, #16
 8006802:	647b      	str	r3, [r7, #68]	; 0x44
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	330c      	adds	r3, #12
 800680a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800680c:	61ba      	str	r2, [r7, #24]
 800680e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006810:	6979      	ldr	r1, [r7, #20]
 8006812:	69ba      	ldr	r2, [r7, #24]
 8006814:	e841 2300 	strex	r3, r2, [r1]
 8006818:	613b      	str	r3, [r7, #16]
   return(result);
 800681a:	693b      	ldr	r3, [r7, #16]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d1e5      	bne.n	80067ec <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2220      	movs	r2, #32
 8006824:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2200      	movs	r2, #0
 800682c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800682e:	bf00      	nop
 8006830:	3754      	adds	r7, #84	; 0x54
 8006832:	46bd      	mov	sp, r7
 8006834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006838:	4770      	bx	lr

0800683a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800683a:	b580      	push	{r7, lr}
 800683c:	b084      	sub	sp, #16
 800683e:	af00      	add	r7, sp, #0
 8006840:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006846:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	2200      	movs	r2, #0
 800684c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	2200      	movs	r2, #0
 8006852:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006854:	68f8      	ldr	r0, [r7, #12]
 8006856:	f7ff ff77 	bl	8006748 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800685a:	bf00      	nop
 800685c:	3710      	adds	r7, #16
 800685e:	46bd      	mov	sp, r7
 8006860:	bd80      	pop	{r7, pc}

08006862 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006862:	b480      	push	{r7}
 8006864:	b085      	sub	sp, #20
 8006866:	af00      	add	r7, sp, #0
 8006868:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006870:	b2db      	uxtb	r3, r3
 8006872:	2b21      	cmp	r3, #33	; 0x21
 8006874:	d13e      	bne.n	80068f4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	689b      	ldr	r3, [r3, #8]
 800687a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800687e:	d114      	bne.n	80068aa <UART_Transmit_IT+0x48>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	691b      	ldr	r3, [r3, #16]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d110      	bne.n	80068aa <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6a1b      	ldr	r3, [r3, #32]
 800688c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	881b      	ldrh	r3, [r3, #0]
 8006892:	461a      	mov	r2, r3
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800689c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6a1b      	ldr	r3, [r3, #32]
 80068a2:	1c9a      	adds	r2, r3, #2
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	621a      	str	r2, [r3, #32]
 80068a8:	e008      	b.n	80068bc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6a1b      	ldr	r3, [r3, #32]
 80068ae:	1c59      	adds	r1, r3, #1
 80068b0:	687a      	ldr	r2, [r7, #4]
 80068b2:	6211      	str	r1, [r2, #32]
 80068b4:	781a      	ldrb	r2, [r3, #0]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80068c0:	b29b      	uxth	r3, r3
 80068c2:	3b01      	subs	r3, #1
 80068c4:	b29b      	uxth	r3, r3
 80068c6:	687a      	ldr	r2, [r7, #4]
 80068c8:	4619      	mov	r1, r3
 80068ca:	84d1      	strh	r1, [r2, #38]	; 0x26
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d10f      	bne.n	80068f0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	68da      	ldr	r2, [r3, #12]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80068de:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	68da      	ldr	r2, [r3, #12]
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80068ee:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80068f0:	2300      	movs	r3, #0
 80068f2:	e000      	b.n	80068f6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80068f4:	2302      	movs	r3, #2
  }
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	3714      	adds	r7, #20
 80068fa:	46bd      	mov	sp, r7
 80068fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006900:	4770      	bx	lr

08006902 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006902:	b580      	push	{r7, lr}
 8006904:	b082      	sub	sp, #8
 8006906:	af00      	add	r7, sp, #0
 8006908:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	68da      	ldr	r2, [r3, #12]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006918:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2220      	movs	r2, #32
 800691e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f7ff fefc 	bl	8006720 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006928:	2300      	movs	r3, #0
}
 800692a:	4618      	mov	r0, r3
 800692c:	3708      	adds	r7, #8
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}

08006932 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006932:	b580      	push	{r7, lr}
 8006934:	b08c      	sub	sp, #48	; 0x30
 8006936:	af00      	add	r7, sp, #0
 8006938:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006940:	b2db      	uxtb	r3, r3
 8006942:	2b22      	cmp	r3, #34	; 0x22
 8006944:	f040 80ab 	bne.w	8006a9e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	689b      	ldr	r3, [r3, #8]
 800694c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006950:	d117      	bne.n	8006982 <UART_Receive_IT+0x50>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	691b      	ldr	r3, [r3, #16]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d113      	bne.n	8006982 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800695a:	2300      	movs	r3, #0
 800695c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006962:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	685b      	ldr	r3, [r3, #4]
 800696a:	b29b      	uxth	r3, r3
 800696c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006970:	b29a      	uxth	r2, r3
 8006972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006974:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800697a:	1c9a      	adds	r2, r3, #2
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	629a      	str	r2, [r3, #40]	; 0x28
 8006980:	e026      	b.n	80069d0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006986:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006988:	2300      	movs	r3, #0
 800698a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	689b      	ldr	r3, [r3, #8]
 8006990:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006994:	d007      	beq.n	80069a6 <UART_Receive_IT+0x74>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	689b      	ldr	r3, [r3, #8]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d10a      	bne.n	80069b4 <UART_Receive_IT+0x82>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	691b      	ldr	r3, [r3, #16]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d106      	bne.n	80069b4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	685b      	ldr	r3, [r3, #4]
 80069ac:	b2da      	uxtb	r2, r3
 80069ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069b0:	701a      	strb	r2, [r3, #0]
 80069b2:	e008      	b.n	80069c6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	685b      	ldr	r3, [r3, #4]
 80069ba:	b2db      	uxtb	r3, r3
 80069bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069c0:	b2da      	uxtb	r2, r3
 80069c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069c4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069ca:	1c5a      	adds	r2, r3, #1
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80069d4:	b29b      	uxth	r3, r3
 80069d6:	3b01      	subs	r3, #1
 80069d8:	b29b      	uxth	r3, r3
 80069da:	687a      	ldr	r2, [r7, #4]
 80069dc:	4619      	mov	r1, r3
 80069de:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d15a      	bne.n	8006a9a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	68da      	ldr	r2, [r3, #12]
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f022 0220 	bic.w	r2, r2, #32
 80069f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	68da      	ldr	r2, [r3, #12]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006a02:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	695a      	ldr	r2, [r3, #20]
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f022 0201 	bic.w	r2, r2, #1
 8006a12:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2220      	movs	r2, #32
 8006a18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a20:	2b01      	cmp	r3, #1
 8006a22:	d135      	bne.n	8006a90 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2200      	movs	r2, #0
 8006a28:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	330c      	adds	r3, #12
 8006a30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a32:	697b      	ldr	r3, [r7, #20]
 8006a34:	e853 3f00 	ldrex	r3, [r3]
 8006a38:	613b      	str	r3, [r7, #16]
   return(result);
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	f023 0310 	bic.w	r3, r3, #16
 8006a40:	627b      	str	r3, [r7, #36]	; 0x24
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	330c      	adds	r3, #12
 8006a48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a4a:	623a      	str	r2, [r7, #32]
 8006a4c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a4e:	69f9      	ldr	r1, [r7, #28]
 8006a50:	6a3a      	ldr	r2, [r7, #32]
 8006a52:	e841 2300 	strex	r3, r2, [r1]
 8006a56:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a58:	69bb      	ldr	r3, [r7, #24]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d1e5      	bne.n	8006a2a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f003 0310 	and.w	r3, r3, #16
 8006a68:	2b10      	cmp	r3, #16
 8006a6a:	d10a      	bne.n	8006a82 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	60fb      	str	r3, [r7, #12]
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	60fb      	str	r3, [r7, #12]
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	685b      	ldr	r3, [r3, #4]
 8006a7e:	60fb      	str	r3, [r7, #12]
 8006a80:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006a86:	4619      	mov	r1, r3
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	f7ff fe67 	bl	800675c <HAL_UARTEx_RxEventCallback>
 8006a8e:	e002      	b.n	8006a96 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f7ff fe4f 	bl	8006734 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006a96:	2300      	movs	r3, #0
 8006a98:	e002      	b.n	8006aa0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	e000      	b.n	8006aa0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006a9e:	2302      	movs	r3, #2
  }
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	3730      	adds	r7, #48	; 0x30
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bd80      	pop	{r7, pc}

08006aa8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006aac:	b09f      	sub	sp, #124	; 0x7c
 8006aae:	af00      	add	r7, sp, #0
 8006ab0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ab2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	691b      	ldr	r3, [r3, #16]
 8006ab8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006abc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006abe:	68d9      	ldr	r1, [r3, #12]
 8006ac0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ac2:	681a      	ldr	r2, [r3, #0]
 8006ac4:	ea40 0301 	orr.w	r3, r0, r1
 8006ac8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006aca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006acc:	689a      	ldr	r2, [r3, #8]
 8006ace:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ad0:	691b      	ldr	r3, [r3, #16]
 8006ad2:	431a      	orrs	r2, r3
 8006ad4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ad6:	695b      	ldr	r3, [r3, #20]
 8006ad8:	431a      	orrs	r2, r3
 8006ada:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006adc:	69db      	ldr	r3, [r3, #28]
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8006ae2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	68db      	ldr	r3, [r3, #12]
 8006ae8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006aec:	f021 010c 	bic.w	r1, r1, #12
 8006af0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006af2:	681a      	ldr	r2, [r3, #0]
 8006af4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006af6:	430b      	orrs	r3, r1
 8006af8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006afa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	695b      	ldr	r3, [r3, #20]
 8006b00:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006b04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b06:	6999      	ldr	r1, [r3, #24]
 8006b08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b0a:	681a      	ldr	r2, [r3, #0]
 8006b0c:	ea40 0301 	orr.w	r3, r0, r1
 8006b10:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006b12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b14:	681a      	ldr	r2, [r3, #0]
 8006b16:	4bc5      	ldr	r3, [pc, #788]	; (8006e2c <UART_SetConfig+0x384>)
 8006b18:	429a      	cmp	r2, r3
 8006b1a:	d004      	beq.n	8006b26 <UART_SetConfig+0x7e>
 8006b1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b1e:	681a      	ldr	r2, [r3, #0]
 8006b20:	4bc3      	ldr	r3, [pc, #780]	; (8006e30 <UART_SetConfig+0x388>)
 8006b22:	429a      	cmp	r2, r3
 8006b24:	d103      	bne.n	8006b2e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006b26:	f7fd f86d 	bl	8003c04 <HAL_RCC_GetPCLK2Freq>
 8006b2a:	6778      	str	r0, [r7, #116]	; 0x74
 8006b2c:	e002      	b.n	8006b34 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006b2e:	f7fd f855 	bl	8003bdc <HAL_RCC_GetPCLK1Freq>
 8006b32:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b36:	69db      	ldr	r3, [r3, #28]
 8006b38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b3c:	f040 80b6 	bne.w	8006cac <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006b40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b42:	461c      	mov	r4, r3
 8006b44:	f04f 0500 	mov.w	r5, #0
 8006b48:	4622      	mov	r2, r4
 8006b4a:	462b      	mov	r3, r5
 8006b4c:	1891      	adds	r1, r2, r2
 8006b4e:	6439      	str	r1, [r7, #64]	; 0x40
 8006b50:	415b      	adcs	r3, r3
 8006b52:	647b      	str	r3, [r7, #68]	; 0x44
 8006b54:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006b58:	1912      	adds	r2, r2, r4
 8006b5a:	eb45 0303 	adc.w	r3, r5, r3
 8006b5e:	f04f 0000 	mov.w	r0, #0
 8006b62:	f04f 0100 	mov.w	r1, #0
 8006b66:	00d9      	lsls	r1, r3, #3
 8006b68:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006b6c:	00d0      	lsls	r0, r2, #3
 8006b6e:	4602      	mov	r2, r0
 8006b70:	460b      	mov	r3, r1
 8006b72:	1911      	adds	r1, r2, r4
 8006b74:	6639      	str	r1, [r7, #96]	; 0x60
 8006b76:	416b      	adcs	r3, r5
 8006b78:	667b      	str	r3, [r7, #100]	; 0x64
 8006b7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b7c:	685b      	ldr	r3, [r3, #4]
 8006b7e:	461a      	mov	r2, r3
 8006b80:	f04f 0300 	mov.w	r3, #0
 8006b84:	1891      	adds	r1, r2, r2
 8006b86:	63b9      	str	r1, [r7, #56]	; 0x38
 8006b88:	415b      	adcs	r3, r3
 8006b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b8c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006b90:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006b94:	f7f9 fb2a 	bl	80001ec <__aeabi_uldivmod>
 8006b98:	4602      	mov	r2, r0
 8006b9a:	460b      	mov	r3, r1
 8006b9c:	4ba5      	ldr	r3, [pc, #660]	; (8006e34 <UART_SetConfig+0x38c>)
 8006b9e:	fba3 2302 	umull	r2, r3, r3, r2
 8006ba2:	095b      	lsrs	r3, r3, #5
 8006ba4:	011e      	lsls	r6, r3, #4
 8006ba6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ba8:	461c      	mov	r4, r3
 8006baa:	f04f 0500 	mov.w	r5, #0
 8006bae:	4622      	mov	r2, r4
 8006bb0:	462b      	mov	r3, r5
 8006bb2:	1891      	adds	r1, r2, r2
 8006bb4:	6339      	str	r1, [r7, #48]	; 0x30
 8006bb6:	415b      	adcs	r3, r3
 8006bb8:	637b      	str	r3, [r7, #52]	; 0x34
 8006bba:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006bbe:	1912      	adds	r2, r2, r4
 8006bc0:	eb45 0303 	adc.w	r3, r5, r3
 8006bc4:	f04f 0000 	mov.w	r0, #0
 8006bc8:	f04f 0100 	mov.w	r1, #0
 8006bcc:	00d9      	lsls	r1, r3, #3
 8006bce:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006bd2:	00d0      	lsls	r0, r2, #3
 8006bd4:	4602      	mov	r2, r0
 8006bd6:	460b      	mov	r3, r1
 8006bd8:	1911      	adds	r1, r2, r4
 8006bda:	65b9      	str	r1, [r7, #88]	; 0x58
 8006bdc:	416b      	adcs	r3, r5
 8006bde:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006be0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006be2:	685b      	ldr	r3, [r3, #4]
 8006be4:	461a      	mov	r2, r3
 8006be6:	f04f 0300 	mov.w	r3, #0
 8006bea:	1891      	adds	r1, r2, r2
 8006bec:	62b9      	str	r1, [r7, #40]	; 0x28
 8006bee:	415b      	adcs	r3, r3
 8006bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006bf2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006bf6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006bfa:	f7f9 faf7 	bl	80001ec <__aeabi_uldivmod>
 8006bfe:	4602      	mov	r2, r0
 8006c00:	460b      	mov	r3, r1
 8006c02:	4b8c      	ldr	r3, [pc, #560]	; (8006e34 <UART_SetConfig+0x38c>)
 8006c04:	fba3 1302 	umull	r1, r3, r3, r2
 8006c08:	095b      	lsrs	r3, r3, #5
 8006c0a:	2164      	movs	r1, #100	; 0x64
 8006c0c:	fb01 f303 	mul.w	r3, r1, r3
 8006c10:	1ad3      	subs	r3, r2, r3
 8006c12:	00db      	lsls	r3, r3, #3
 8006c14:	3332      	adds	r3, #50	; 0x32
 8006c16:	4a87      	ldr	r2, [pc, #540]	; (8006e34 <UART_SetConfig+0x38c>)
 8006c18:	fba2 2303 	umull	r2, r3, r2, r3
 8006c1c:	095b      	lsrs	r3, r3, #5
 8006c1e:	005b      	lsls	r3, r3, #1
 8006c20:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006c24:	441e      	add	r6, r3
 8006c26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c28:	4618      	mov	r0, r3
 8006c2a:	f04f 0100 	mov.w	r1, #0
 8006c2e:	4602      	mov	r2, r0
 8006c30:	460b      	mov	r3, r1
 8006c32:	1894      	adds	r4, r2, r2
 8006c34:	623c      	str	r4, [r7, #32]
 8006c36:	415b      	adcs	r3, r3
 8006c38:	627b      	str	r3, [r7, #36]	; 0x24
 8006c3a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006c3e:	1812      	adds	r2, r2, r0
 8006c40:	eb41 0303 	adc.w	r3, r1, r3
 8006c44:	f04f 0400 	mov.w	r4, #0
 8006c48:	f04f 0500 	mov.w	r5, #0
 8006c4c:	00dd      	lsls	r5, r3, #3
 8006c4e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006c52:	00d4      	lsls	r4, r2, #3
 8006c54:	4622      	mov	r2, r4
 8006c56:	462b      	mov	r3, r5
 8006c58:	1814      	adds	r4, r2, r0
 8006c5a:	653c      	str	r4, [r7, #80]	; 0x50
 8006c5c:	414b      	adcs	r3, r1
 8006c5e:	657b      	str	r3, [r7, #84]	; 0x54
 8006c60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c62:	685b      	ldr	r3, [r3, #4]
 8006c64:	461a      	mov	r2, r3
 8006c66:	f04f 0300 	mov.w	r3, #0
 8006c6a:	1891      	adds	r1, r2, r2
 8006c6c:	61b9      	str	r1, [r7, #24]
 8006c6e:	415b      	adcs	r3, r3
 8006c70:	61fb      	str	r3, [r7, #28]
 8006c72:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006c76:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006c7a:	f7f9 fab7 	bl	80001ec <__aeabi_uldivmod>
 8006c7e:	4602      	mov	r2, r0
 8006c80:	460b      	mov	r3, r1
 8006c82:	4b6c      	ldr	r3, [pc, #432]	; (8006e34 <UART_SetConfig+0x38c>)
 8006c84:	fba3 1302 	umull	r1, r3, r3, r2
 8006c88:	095b      	lsrs	r3, r3, #5
 8006c8a:	2164      	movs	r1, #100	; 0x64
 8006c8c:	fb01 f303 	mul.w	r3, r1, r3
 8006c90:	1ad3      	subs	r3, r2, r3
 8006c92:	00db      	lsls	r3, r3, #3
 8006c94:	3332      	adds	r3, #50	; 0x32
 8006c96:	4a67      	ldr	r2, [pc, #412]	; (8006e34 <UART_SetConfig+0x38c>)
 8006c98:	fba2 2303 	umull	r2, r3, r2, r3
 8006c9c:	095b      	lsrs	r3, r3, #5
 8006c9e:	f003 0207 	and.w	r2, r3, #7
 8006ca2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4432      	add	r2, r6
 8006ca8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006caa:	e0b9      	b.n	8006e20 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006cac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006cae:	461c      	mov	r4, r3
 8006cb0:	f04f 0500 	mov.w	r5, #0
 8006cb4:	4622      	mov	r2, r4
 8006cb6:	462b      	mov	r3, r5
 8006cb8:	1891      	adds	r1, r2, r2
 8006cba:	6139      	str	r1, [r7, #16]
 8006cbc:	415b      	adcs	r3, r3
 8006cbe:	617b      	str	r3, [r7, #20]
 8006cc0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006cc4:	1912      	adds	r2, r2, r4
 8006cc6:	eb45 0303 	adc.w	r3, r5, r3
 8006cca:	f04f 0000 	mov.w	r0, #0
 8006cce:	f04f 0100 	mov.w	r1, #0
 8006cd2:	00d9      	lsls	r1, r3, #3
 8006cd4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006cd8:	00d0      	lsls	r0, r2, #3
 8006cda:	4602      	mov	r2, r0
 8006cdc:	460b      	mov	r3, r1
 8006cde:	eb12 0804 	adds.w	r8, r2, r4
 8006ce2:	eb43 0905 	adc.w	r9, r3, r5
 8006ce6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ce8:	685b      	ldr	r3, [r3, #4]
 8006cea:	4618      	mov	r0, r3
 8006cec:	f04f 0100 	mov.w	r1, #0
 8006cf0:	f04f 0200 	mov.w	r2, #0
 8006cf4:	f04f 0300 	mov.w	r3, #0
 8006cf8:	008b      	lsls	r3, r1, #2
 8006cfa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006cfe:	0082      	lsls	r2, r0, #2
 8006d00:	4640      	mov	r0, r8
 8006d02:	4649      	mov	r1, r9
 8006d04:	f7f9 fa72 	bl	80001ec <__aeabi_uldivmod>
 8006d08:	4602      	mov	r2, r0
 8006d0a:	460b      	mov	r3, r1
 8006d0c:	4b49      	ldr	r3, [pc, #292]	; (8006e34 <UART_SetConfig+0x38c>)
 8006d0e:	fba3 2302 	umull	r2, r3, r3, r2
 8006d12:	095b      	lsrs	r3, r3, #5
 8006d14:	011e      	lsls	r6, r3, #4
 8006d16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d18:	4618      	mov	r0, r3
 8006d1a:	f04f 0100 	mov.w	r1, #0
 8006d1e:	4602      	mov	r2, r0
 8006d20:	460b      	mov	r3, r1
 8006d22:	1894      	adds	r4, r2, r2
 8006d24:	60bc      	str	r4, [r7, #8]
 8006d26:	415b      	adcs	r3, r3
 8006d28:	60fb      	str	r3, [r7, #12]
 8006d2a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006d2e:	1812      	adds	r2, r2, r0
 8006d30:	eb41 0303 	adc.w	r3, r1, r3
 8006d34:	f04f 0400 	mov.w	r4, #0
 8006d38:	f04f 0500 	mov.w	r5, #0
 8006d3c:	00dd      	lsls	r5, r3, #3
 8006d3e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006d42:	00d4      	lsls	r4, r2, #3
 8006d44:	4622      	mov	r2, r4
 8006d46:	462b      	mov	r3, r5
 8006d48:	1814      	adds	r4, r2, r0
 8006d4a:	64bc      	str	r4, [r7, #72]	; 0x48
 8006d4c:	414b      	adcs	r3, r1
 8006d4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d52:	685b      	ldr	r3, [r3, #4]
 8006d54:	4618      	mov	r0, r3
 8006d56:	f04f 0100 	mov.w	r1, #0
 8006d5a:	f04f 0200 	mov.w	r2, #0
 8006d5e:	f04f 0300 	mov.w	r3, #0
 8006d62:	008b      	lsls	r3, r1, #2
 8006d64:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006d68:	0082      	lsls	r2, r0, #2
 8006d6a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006d6e:	f7f9 fa3d 	bl	80001ec <__aeabi_uldivmod>
 8006d72:	4602      	mov	r2, r0
 8006d74:	460b      	mov	r3, r1
 8006d76:	4b2f      	ldr	r3, [pc, #188]	; (8006e34 <UART_SetConfig+0x38c>)
 8006d78:	fba3 1302 	umull	r1, r3, r3, r2
 8006d7c:	095b      	lsrs	r3, r3, #5
 8006d7e:	2164      	movs	r1, #100	; 0x64
 8006d80:	fb01 f303 	mul.w	r3, r1, r3
 8006d84:	1ad3      	subs	r3, r2, r3
 8006d86:	011b      	lsls	r3, r3, #4
 8006d88:	3332      	adds	r3, #50	; 0x32
 8006d8a:	4a2a      	ldr	r2, [pc, #168]	; (8006e34 <UART_SetConfig+0x38c>)
 8006d8c:	fba2 2303 	umull	r2, r3, r2, r3
 8006d90:	095b      	lsrs	r3, r3, #5
 8006d92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006d96:	441e      	add	r6, r3
 8006d98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	f04f 0100 	mov.w	r1, #0
 8006da0:	4602      	mov	r2, r0
 8006da2:	460b      	mov	r3, r1
 8006da4:	1894      	adds	r4, r2, r2
 8006da6:	603c      	str	r4, [r7, #0]
 8006da8:	415b      	adcs	r3, r3
 8006daa:	607b      	str	r3, [r7, #4]
 8006dac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006db0:	1812      	adds	r2, r2, r0
 8006db2:	eb41 0303 	adc.w	r3, r1, r3
 8006db6:	f04f 0400 	mov.w	r4, #0
 8006dba:	f04f 0500 	mov.w	r5, #0
 8006dbe:	00dd      	lsls	r5, r3, #3
 8006dc0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006dc4:	00d4      	lsls	r4, r2, #3
 8006dc6:	4622      	mov	r2, r4
 8006dc8:	462b      	mov	r3, r5
 8006dca:	eb12 0a00 	adds.w	sl, r2, r0
 8006dce:	eb43 0b01 	adc.w	fp, r3, r1
 8006dd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006dd4:	685b      	ldr	r3, [r3, #4]
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	f04f 0100 	mov.w	r1, #0
 8006ddc:	f04f 0200 	mov.w	r2, #0
 8006de0:	f04f 0300 	mov.w	r3, #0
 8006de4:	008b      	lsls	r3, r1, #2
 8006de6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006dea:	0082      	lsls	r2, r0, #2
 8006dec:	4650      	mov	r0, sl
 8006dee:	4659      	mov	r1, fp
 8006df0:	f7f9 f9fc 	bl	80001ec <__aeabi_uldivmod>
 8006df4:	4602      	mov	r2, r0
 8006df6:	460b      	mov	r3, r1
 8006df8:	4b0e      	ldr	r3, [pc, #56]	; (8006e34 <UART_SetConfig+0x38c>)
 8006dfa:	fba3 1302 	umull	r1, r3, r3, r2
 8006dfe:	095b      	lsrs	r3, r3, #5
 8006e00:	2164      	movs	r1, #100	; 0x64
 8006e02:	fb01 f303 	mul.w	r3, r1, r3
 8006e06:	1ad3      	subs	r3, r2, r3
 8006e08:	011b      	lsls	r3, r3, #4
 8006e0a:	3332      	adds	r3, #50	; 0x32
 8006e0c:	4a09      	ldr	r2, [pc, #36]	; (8006e34 <UART_SetConfig+0x38c>)
 8006e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8006e12:	095b      	lsrs	r3, r3, #5
 8006e14:	f003 020f 	and.w	r2, r3, #15
 8006e18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4432      	add	r2, r6
 8006e1e:	609a      	str	r2, [r3, #8]
}
 8006e20:	bf00      	nop
 8006e22:	377c      	adds	r7, #124	; 0x7c
 8006e24:	46bd      	mov	sp, r7
 8006e26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e2a:	bf00      	nop
 8006e2c:	40011000 	.word	0x40011000
 8006e30:	40011400 	.word	0x40011400
 8006e34:	51eb851f 	.word	0x51eb851f

08006e38 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8006e38:	b084      	sub	sp, #16
 8006e3a:	b480      	push	{r7}
 8006e3c:	b085      	sub	sp, #20
 8006e3e:	af00      	add	r7, sp, #0
 8006e40:	6078      	str	r0, [r7, #4]
 8006e42:	f107 001c 	add.w	r0, r7, #28
 8006e46:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8006e4e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8006e50:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8006e52:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8006e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8006e56:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8006e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8006e5a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8006e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8006e5e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8006e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8006e62:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8006e64:	68fa      	ldr	r2, [r7, #12]
 8006e66:	4313      	orrs	r3, r2
 8006e68:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	685b      	ldr	r3, [r3, #4]
 8006e6e:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8006e72:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006e76:	68fa      	ldr	r2, [r7, #12]
 8006e78:	431a      	orrs	r2, r3
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8006e7e:	2300      	movs	r3, #0
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	3714      	adds	r7, #20
 8006e84:	46bd      	mov	sp, r7
 8006e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8a:	b004      	add	sp, #16
 8006e8c:	4770      	bx	lr

08006e8e <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8006e8e:	b480      	push	{r7}
 8006e90:	b083      	sub	sp, #12
 8006e92:	af00      	add	r7, sp, #0
 8006e94:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	370c      	adds	r7, #12
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea6:	4770      	bx	lr

08006ea8 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8006ea8:	b480      	push	{r7}
 8006eaa:	b083      	sub	sp, #12
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
 8006eb0:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	681a      	ldr	r2, [r3, #0]
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006ebc:	2300      	movs	r3, #0
}
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	370c      	adds	r7, #12
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec8:	4770      	bx	lr

08006eca <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8006eca:	b580      	push	{r7, lr}
 8006ecc:	b082      	sub	sp, #8
 8006ece:	af00      	add	r7, sp, #0
 8006ed0:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2203      	movs	r2, #3
 8006ed6:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8006ed8:	2002      	movs	r0, #2
 8006eda:	f7fa fe4b 	bl	8001b74 <HAL_Delay>
  
  return HAL_OK;
 8006ede:	2300      	movs	r3, #0
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	3708      	adds	r7, #8
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}

08006ee8 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b083      	sub	sp, #12
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f003 0303 	and.w	r3, r3, #3
}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	370c      	adds	r7, #12
 8006efc:	46bd      	mov	sp, r7
 8006efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f02:	4770      	bx	lr

08006f04 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8006f04:	b480      	push	{r7}
 8006f06:	b085      	sub	sp, #20
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
 8006f0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006f0e:	2300      	movs	r3, #0
 8006f10:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	681a      	ldr	r2, [r3, #0]
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006f22:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8006f28:	431a      	orrs	r2, r3
                       Command->CPSM);
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8006f2e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006f30:	68fa      	ldr	r2, [r7, #12]
 8006f32:	4313      	orrs	r3, r2
 8006f34:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	68db      	ldr	r3, [r3, #12]
 8006f3a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8006f3e:	f023 030f 	bic.w	r3, r3, #15
 8006f42:	68fa      	ldr	r2, [r7, #12]
 8006f44:	431a      	orrs	r2, r3
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8006f4a:	2300      	movs	r3, #0
}
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	3714      	adds	r7, #20
 8006f50:	46bd      	mov	sp, r7
 8006f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f56:	4770      	bx	lr

08006f58 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8006f58:	b480      	push	{r7}
 8006f5a:	b083      	sub	sp, #12
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	691b      	ldr	r3, [r3, #16]
 8006f64:	b2db      	uxtb	r3, r3
}
 8006f66:	4618      	mov	r0, r3
 8006f68:	370c      	adds	r7, #12
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f70:	4770      	bx	lr

08006f72 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8006f72:	b480      	push	{r7}
 8006f74:	b085      	sub	sp, #20
 8006f76:	af00      	add	r7, sp, #0
 8006f78:	6078      	str	r0, [r7, #4]
 8006f7a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	3314      	adds	r3, #20
 8006f80:	461a      	mov	r2, r3
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	4413      	add	r3, r2
 8006f86:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
}  
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	3714      	adds	r7, #20
 8006f90:	46bd      	mov	sp, r7
 8006f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f96:	4770      	bx	lr

08006f98 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8006f98:	b480      	push	{r7}
 8006f9a:	b085      	sub	sp, #20
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
 8006fa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	681a      	ldr	r2, [r3, #0]
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	685a      	ldr	r2, [r3, #4]
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006fbe:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8006fc4:	431a      	orrs	r2, r3
                       Data->DPSM);
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8006fca:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006fcc:	68fa      	ldr	r2, [r7, #12]
 8006fce:	4313      	orrs	r3, r2
 8006fd0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fd6:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	431a      	orrs	r2, r3
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006fe2:	2300      	movs	r3, #0

}
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	3714      	adds	r7, #20
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fee:	4770      	bx	lr

08006ff0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b088      	sub	sp, #32
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
 8006ff8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8006ffe:	2310      	movs	r3, #16
 8007000:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007002:	2340      	movs	r3, #64	; 0x40
 8007004:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007006:	2300      	movs	r3, #0
 8007008:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800700a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800700e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007010:	f107 0308 	add.w	r3, r7, #8
 8007014:	4619      	mov	r1, r3
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f7ff ff74 	bl	8006f04 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800701c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007020:	2110      	movs	r1, #16
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f000 fa44 	bl	80074b0 <SDMMC_GetCmdResp1>
 8007028:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800702a:	69fb      	ldr	r3, [r7, #28]
}
 800702c:	4618      	mov	r0, r3
 800702e:	3720      	adds	r7, #32
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}

08007034 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b088      	sub	sp, #32
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
 800703c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8007042:	2311      	movs	r3, #17
 8007044:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007046:	2340      	movs	r3, #64	; 0x40
 8007048:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800704a:	2300      	movs	r3, #0
 800704c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800704e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007052:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007054:	f107 0308 	add.w	r3, r7, #8
 8007058:	4619      	mov	r1, r3
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f7ff ff52 	bl	8006f04 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8007060:	f241 3288 	movw	r2, #5000	; 0x1388
 8007064:	2111      	movs	r1, #17
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f000 fa22 	bl	80074b0 <SDMMC_GetCmdResp1>
 800706c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800706e:	69fb      	ldr	r3, [r7, #28]
}
 8007070:	4618      	mov	r0, r3
 8007072:	3720      	adds	r7, #32
 8007074:	46bd      	mov	sp, r7
 8007076:	bd80      	pop	{r7, pc}

08007078 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b088      	sub	sp, #32
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
 8007080:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8007086:	2312      	movs	r3, #18
 8007088:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800708a:	2340      	movs	r3, #64	; 0x40
 800708c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800708e:	2300      	movs	r3, #0
 8007090:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007092:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007096:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007098:	f107 0308 	add.w	r3, r7, #8
 800709c:	4619      	mov	r1, r3
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	f7ff ff30 	bl	8006f04 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80070a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80070a8:	2112      	movs	r1, #18
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f000 fa00 	bl	80074b0 <SDMMC_GetCmdResp1>
 80070b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80070b2:	69fb      	ldr	r3, [r7, #28]
}
 80070b4:	4618      	mov	r0, r3
 80070b6:	3720      	adds	r7, #32
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bd80      	pop	{r7, pc}

080070bc <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b088      	sub	sp, #32
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
 80070c4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80070ca:	2318      	movs	r3, #24
 80070cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80070ce:	2340      	movs	r3, #64	; 0x40
 80070d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80070d2:	2300      	movs	r3, #0
 80070d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80070d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80070da:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80070dc:	f107 0308 	add.w	r3, r7, #8
 80070e0:	4619      	mov	r1, r3
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	f7ff ff0e 	bl	8006f04 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80070e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80070ec:	2118      	movs	r1, #24
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f000 f9de 	bl	80074b0 <SDMMC_GetCmdResp1>
 80070f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80070f6:	69fb      	ldr	r3, [r7, #28]
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	3720      	adds	r7, #32
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bd80      	pop	{r7, pc}

08007100 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b088      	sub	sp, #32
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
 8007108:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800710e:	2319      	movs	r3, #25
 8007110:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007112:	2340      	movs	r3, #64	; 0x40
 8007114:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007116:	2300      	movs	r3, #0
 8007118:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800711a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800711e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007120:	f107 0308 	add.w	r3, r7, #8
 8007124:	4619      	mov	r1, r3
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f7ff feec 	bl	8006f04 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800712c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007130:	2119      	movs	r1, #25
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f000 f9bc 	bl	80074b0 <SDMMC_GetCmdResp1>
 8007138:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800713a:	69fb      	ldr	r3, [r7, #28]
}
 800713c:	4618      	mov	r0, r3
 800713e:	3720      	adds	r7, #32
 8007140:	46bd      	mov	sp, r7
 8007142:	bd80      	pop	{r7, pc}

08007144 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b088      	sub	sp, #32
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800714c:	2300      	movs	r3, #0
 800714e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8007150:	230c      	movs	r3, #12
 8007152:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007154:	2340      	movs	r3, #64	; 0x40
 8007156:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007158:	2300      	movs	r3, #0
 800715a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800715c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007160:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007162:	f107 0308 	add.w	r3, r7, #8
 8007166:	4619      	mov	r1, r3
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f7ff fecb 	bl	8006f04 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800716e:	4a05      	ldr	r2, [pc, #20]	; (8007184 <SDMMC_CmdStopTransfer+0x40>)
 8007170:	210c      	movs	r1, #12
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f000 f99c 	bl	80074b0 <SDMMC_GetCmdResp1>
 8007178:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800717a:	69fb      	ldr	r3, [r7, #28]
}
 800717c:	4618      	mov	r0, r3
 800717e:	3720      	adds	r7, #32
 8007180:	46bd      	mov	sp, r7
 8007182:	bd80      	pop	{r7, pc}
 8007184:	05f5e100 	.word	0x05f5e100

08007188 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b08a      	sub	sp, #40	; 0x28
 800718c:	af00      	add	r7, sp, #0
 800718e:	60f8      	str	r0, [r7, #12]
 8007190:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8007198:	2307      	movs	r3, #7
 800719a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800719c:	2340      	movs	r3, #64	; 0x40
 800719e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80071a0:	2300      	movs	r3, #0
 80071a2:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80071a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80071a8:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80071aa:	f107 0310 	add.w	r3, r7, #16
 80071ae:	4619      	mov	r1, r3
 80071b0:	68f8      	ldr	r0, [r7, #12]
 80071b2:	f7ff fea7 	bl	8006f04 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80071b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80071ba:	2107      	movs	r1, #7
 80071bc:	68f8      	ldr	r0, [r7, #12]
 80071be:	f000 f977 	bl	80074b0 <SDMMC_GetCmdResp1>
 80071c2:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80071c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	3728      	adds	r7, #40	; 0x28
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}

080071ce <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80071ce:	b580      	push	{r7, lr}
 80071d0:	b088      	sub	sp, #32
 80071d2:	af00      	add	r7, sp, #0
 80071d4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80071d6:	2300      	movs	r3, #0
 80071d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80071da:	2300      	movs	r3, #0
 80071dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80071de:	2300      	movs	r3, #0
 80071e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80071e2:	2300      	movs	r3, #0
 80071e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80071e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80071ea:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80071ec:	f107 0308 	add.w	r3, r7, #8
 80071f0:	4619      	mov	r1, r3
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	f7ff fe86 	bl	8006f04 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	f000 f92d 	bl	8007458 <SDMMC_GetCmdError>
 80071fe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007200:	69fb      	ldr	r3, [r7, #28]
}
 8007202:	4618      	mov	r0, r3
 8007204:	3720      	adds	r7, #32
 8007206:	46bd      	mov	sp, r7
 8007208:	bd80      	pop	{r7, pc}

0800720a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800720a:	b580      	push	{r7, lr}
 800720c:	b088      	sub	sp, #32
 800720e:	af00      	add	r7, sp, #0
 8007210:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8007212:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8007216:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8007218:	2308      	movs	r3, #8
 800721a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800721c:	2340      	movs	r3, #64	; 0x40
 800721e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007220:	2300      	movs	r3, #0
 8007222:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007224:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007228:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800722a:	f107 0308 	add.w	r3, r7, #8
 800722e:	4619      	mov	r1, r3
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f7ff fe67 	bl	8006f04 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f000 fb24 	bl	8007884 <SDMMC_GetCmdResp7>
 800723c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800723e:	69fb      	ldr	r3, [r7, #28]
}
 8007240:	4618      	mov	r0, r3
 8007242:	3720      	adds	r7, #32
 8007244:	46bd      	mov	sp, r7
 8007246:	bd80      	pop	{r7, pc}

08007248 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b088      	sub	sp, #32
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
 8007250:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8007256:	2337      	movs	r3, #55	; 0x37
 8007258:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800725a:	2340      	movs	r3, #64	; 0x40
 800725c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800725e:	2300      	movs	r3, #0
 8007260:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007262:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007266:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007268:	f107 0308 	add.w	r3, r7, #8
 800726c:	4619      	mov	r1, r3
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f7ff fe48 	bl	8006f04 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8007274:	f241 3288 	movw	r2, #5000	; 0x1388
 8007278:	2137      	movs	r1, #55	; 0x37
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	f000 f918 	bl	80074b0 <SDMMC_GetCmdResp1>
 8007280:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007282:	69fb      	ldr	r3, [r7, #28]
}
 8007284:	4618      	mov	r0, r3
 8007286:	3720      	adds	r7, #32
 8007288:	46bd      	mov	sp, r7
 800728a:	bd80      	pop	{r7, pc}

0800728c <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b088      	sub	sp, #32
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
 8007294:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800729c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80072a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80072a2:	2329      	movs	r3, #41	; 0x29
 80072a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80072a6:	2340      	movs	r3, #64	; 0x40
 80072a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80072aa:	2300      	movs	r3, #0
 80072ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80072ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80072b2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80072b4:	f107 0308 	add.w	r3, r7, #8
 80072b8:	4619      	mov	r1, r3
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f7ff fe22 	bl	8006f04 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f000 fa2b 	bl	800771c <SDMMC_GetCmdResp3>
 80072c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80072c8:	69fb      	ldr	r3, [r7, #28]
}
 80072ca:	4618      	mov	r0, r3
 80072cc:	3720      	adds	r7, #32
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd80      	pop	{r7, pc}

080072d2 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 80072d2:	b580      	push	{r7, lr}
 80072d4:	b088      	sub	sp, #32
 80072d6:	af00      	add	r7, sp, #0
 80072d8:	6078      	str	r0, [r7, #4]
 80072da:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80072e0:	2306      	movs	r3, #6
 80072e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80072e4:	2340      	movs	r3, #64	; 0x40
 80072e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80072e8:	2300      	movs	r3, #0
 80072ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80072ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80072f0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80072f2:	f107 0308 	add.w	r3, r7, #8
 80072f6:	4619      	mov	r1, r3
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	f7ff fe03 	bl	8006f04 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 80072fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8007302:	2106      	movs	r1, #6
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f000 f8d3 	bl	80074b0 <SDMMC_GetCmdResp1>
 800730a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800730c:	69fb      	ldr	r3, [r7, #28]
}
 800730e:	4618      	mov	r0, r3
 8007310:	3720      	adds	r7, #32
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}

08007316 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8007316:	b580      	push	{r7, lr}
 8007318:	b088      	sub	sp, #32
 800731a:	af00      	add	r7, sp, #0
 800731c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800731e:	2300      	movs	r3, #0
 8007320:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8007322:	2333      	movs	r3, #51	; 0x33
 8007324:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007326:	2340      	movs	r3, #64	; 0x40
 8007328:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800732a:	2300      	movs	r3, #0
 800732c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800732e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007332:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007334:	f107 0308 	add.w	r3, r7, #8
 8007338:	4619      	mov	r1, r3
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	f7ff fde2 	bl	8006f04 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8007340:	f241 3288 	movw	r2, #5000	; 0x1388
 8007344:	2133      	movs	r1, #51	; 0x33
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f000 f8b2 	bl	80074b0 <SDMMC_GetCmdResp1>
 800734c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800734e:	69fb      	ldr	r3, [r7, #28]
}
 8007350:	4618      	mov	r0, r3
 8007352:	3720      	adds	r7, #32
 8007354:	46bd      	mov	sp, r7
 8007356:	bd80      	pop	{r7, pc}

08007358 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b088      	sub	sp, #32
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8007360:	2300      	movs	r3, #0
 8007362:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8007364:	2302      	movs	r3, #2
 8007366:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8007368:	23c0      	movs	r3, #192	; 0xc0
 800736a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800736c:	2300      	movs	r3, #0
 800736e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007370:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007374:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007376:	f107 0308 	add.w	r3, r7, #8
 800737a:	4619      	mov	r1, r3
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f7ff fdc1 	bl	8006f04 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f000 f982 	bl	800768c <SDMMC_GetCmdResp2>
 8007388:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800738a:	69fb      	ldr	r3, [r7, #28]
}
 800738c:	4618      	mov	r0, r3
 800738e:	3720      	adds	r7, #32
 8007390:	46bd      	mov	sp, r7
 8007392:	bd80      	pop	{r7, pc}

08007394 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b088      	sub	sp, #32
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
 800739c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80073a2:	2309      	movs	r3, #9
 80073a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80073a6:	23c0      	movs	r3, #192	; 0xc0
 80073a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80073aa:	2300      	movs	r3, #0
 80073ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80073ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80073b2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80073b4:	f107 0308 	add.w	r3, r7, #8
 80073b8:	4619      	mov	r1, r3
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f7ff fda2 	bl	8006f04 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	f000 f963 	bl	800768c <SDMMC_GetCmdResp2>
 80073c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80073c8:	69fb      	ldr	r3, [r7, #28]
}
 80073ca:	4618      	mov	r0, r3
 80073cc:	3720      	adds	r7, #32
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd80      	pop	{r7, pc}

080073d2 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80073d2:	b580      	push	{r7, lr}
 80073d4:	b088      	sub	sp, #32
 80073d6:	af00      	add	r7, sp, #0
 80073d8:	6078      	str	r0, [r7, #4]
 80073da:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80073dc:	2300      	movs	r3, #0
 80073de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80073e0:	2303      	movs	r3, #3
 80073e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80073e4:	2340      	movs	r3, #64	; 0x40
 80073e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80073e8:	2300      	movs	r3, #0
 80073ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80073ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80073f0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80073f2:	f107 0308 	add.w	r3, r7, #8
 80073f6:	4619      	mov	r1, r3
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f7ff fd83 	bl	8006f04 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80073fe:	683a      	ldr	r2, [r7, #0]
 8007400:	2103      	movs	r1, #3
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f000 f9c8 	bl	8007798 <SDMMC_GetCmdResp6>
 8007408:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800740a:	69fb      	ldr	r3, [r7, #28]
}
 800740c:	4618      	mov	r0, r3
 800740e:	3720      	adds	r7, #32
 8007410:	46bd      	mov	sp, r7
 8007412:	bd80      	pop	{r7, pc}

08007414 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b088      	sub	sp, #32
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
 800741c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8007422:	230d      	movs	r3, #13
 8007424:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007426:	2340      	movs	r3, #64	; 0x40
 8007428:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800742a:	2300      	movs	r3, #0
 800742c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800742e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007432:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007434:	f107 0308 	add.w	r3, r7, #8
 8007438:	4619      	mov	r1, r3
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f7ff fd62 	bl	8006f04 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8007440:	f241 3288 	movw	r2, #5000	; 0x1388
 8007444:	210d      	movs	r1, #13
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f000 f832 	bl	80074b0 <SDMMC_GetCmdResp1>
 800744c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800744e:	69fb      	ldr	r3, [r7, #28]
}
 8007450:	4618      	mov	r0, r3
 8007452:	3720      	adds	r7, #32
 8007454:	46bd      	mov	sp, r7
 8007456:	bd80      	pop	{r7, pc}

08007458 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8007458:	b480      	push	{r7}
 800745a:	b085      	sub	sp, #20
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007460:	4b11      	ldr	r3, [pc, #68]	; (80074a8 <SDMMC_GetCmdError+0x50>)
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4a11      	ldr	r2, [pc, #68]	; (80074ac <SDMMC_GetCmdError+0x54>)
 8007466:	fba2 2303 	umull	r2, r3, r2, r3
 800746a:	0a5b      	lsrs	r3, r3, #9
 800746c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007470:	fb02 f303 	mul.w	r3, r2, r3
 8007474:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	1e5a      	subs	r2, r3, #1
 800747a:	60fa      	str	r2, [r7, #12]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d102      	bne.n	8007486 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007480:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007484:	e009      	b.n	800749a <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800748a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800748e:	2b00      	cmp	r3, #0
 8007490:	d0f1      	beq.n	8007476 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	22c5      	movs	r2, #197	; 0xc5
 8007496:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8007498:	2300      	movs	r3, #0
}
 800749a:	4618      	mov	r0, r3
 800749c:	3714      	adds	r7, #20
 800749e:	46bd      	mov	sp, r7
 80074a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a4:	4770      	bx	lr
 80074a6:	bf00      	nop
 80074a8:	20000000 	.word	0x20000000
 80074ac:	10624dd3 	.word	0x10624dd3

080074b0 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b088      	sub	sp, #32
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	60f8      	str	r0, [r7, #12]
 80074b8:	460b      	mov	r3, r1
 80074ba:	607a      	str	r2, [r7, #4]
 80074bc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80074be:	4b70      	ldr	r3, [pc, #448]	; (8007680 <SDMMC_GetCmdResp1+0x1d0>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	4a70      	ldr	r2, [pc, #448]	; (8007684 <SDMMC_GetCmdResp1+0x1d4>)
 80074c4:	fba2 2303 	umull	r2, r3, r2, r3
 80074c8:	0a5a      	lsrs	r2, r3, #9
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	fb02 f303 	mul.w	r3, r2, r3
 80074d0:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80074d2:	69fb      	ldr	r3, [r7, #28]
 80074d4:	1e5a      	subs	r2, r3, #1
 80074d6:	61fa      	str	r2, [r7, #28]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d102      	bne.n	80074e2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80074dc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80074e0:	e0c9      	b.n	8007676 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074e6:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80074e8:	69bb      	ldr	r3, [r7, #24]
 80074ea:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d0ef      	beq.n	80074d2 <SDMMC_GetCmdResp1+0x22>
 80074f2:	69bb      	ldr	r3, [r7, #24]
 80074f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d1ea      	bne.n	80074d2 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007500:	f003 0304 	and.w	r3, r3, #4
 8007504:	2b00      	cmp	r3, #0
 8007506:	d004      	beq.n	8007512 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	2204      	movs	r2, #4
 800750c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800750e:	2304      	movs	r3, #4
 8007510:	e0b1      	b.n	8007676 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007516:	f003 0301 	and.w	r3, r3, #1
 800751a:	2b00      	cmp	r3, #0
 800751c:	d004      	beq.n	8007528 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	2201      	movs	r2, #1
 8007522:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007524:	2301      	movs	r3, #1
 8007526:	e0a6      	b.n	8007676 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	22c5      	movs	r2, #197	; 0xc5
 800752c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800752e:	68f8      	ldr	r0, [r7, #12]
 8007530:	f7ff fd12 	bl	8006f58 <SDIO_GetCommandResponse>
 8007534:	4603      	mov	r3, r0
 8007536:	461a      	mov	r2, r3
 8007538:	7afb      	ldrb	r3, [r7, #11]
 800753a:	4293      	cmp	r3, r2
 800753c:	d001      	beq.n	8007542 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800753e:	2301      	movs	r3, #1
 8007540:	e099      	b.n	8007676 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8007542:	2100      	movs	r1, #0
 8007544:	68f8      	ldr	r0, [r7, #12]
 8007546:	f7ff fd14 	bl	8006f72 <SDIO_GetResponse>
 800754a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800754c:	697a      	ldr	r2, [r7, #20]
 800754e:	4b4e      	ldr	r3, [pc, #312]	; (8007688 <SDMMC_GetCmdResp1+0x1d8>)
 8007550:	4013      	ands	r3, r2
 8007552:	2b00      	cmp	r3, #0
 8007554:	d101      	bne.n	800755a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8007556:	2300      	movs	r3, #0
 8007558:	e08d      	b.n	8007676 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800755a:	697b      	ldr	r3, [r7, #20]
 800755c:	2b00      	cmp	r3, #0
 800755e:	da02      	bge.n	8007566 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8007560:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007564:	e087      	b.n	8007676 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8007566:	697b      	ldr	r3, [r7, #20]
 8007568:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800756c:	2b00      	cmp	r3, #0
 800756e:	d001      	beq.n	8007574 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8007570:	2340      	movs	r3, #64	; 0x40
 8007572:	e080      	b.n	8007676 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8007574:	697b      	ldr	r3, [r7, #20]
 8007576:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800757a:	2b00      	cmp	r3, #0
 800757c:	d001      	beq.n	8007582 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800757e:	2380      	movs	r3, #128	; 0x80
 8007580:	e079      	b.n	8007676 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8007582:	697b      	ldr	r3, [r7, #20]
 8007584:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007588:	2b00      	cmp	r3, #0
 800758a:	d002      	beq.n	8007592 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800758c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007590:	e071      	b.n	8007676 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8007592:	697b      	ldr	r3, [r7, #20]
 8007594:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007598:	2b00      	cmp	r3, #0
 800759a:	d002      	beq.n	80075a2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800759c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80075a0:	e069      	b.n	8007676 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80075a2:	697b      	ldr	r3, [r7, #20]
 80075a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d002      	beq.n	80075b2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80075ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80075b0:	e061      	b.n	8007676 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80075b2:	697b      	ldr	r3, [r7, #20]
 80075b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d002      	beq.n	80075c2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80075bc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80075c0:	e059      	b.n	8007676 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80075c2:	697b      	ldr	r3, [r7, #20]
 80075c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d002      	beq.n	80075d2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80075cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80075d0:	e051      	b.n	8007676 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80075d2:	697b      	ldr	r3, [r7, #20]
 80075d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d002      	beq.n	80075e2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80075dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80075e0:	e049      	b.n	8007676 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80075e2:	697b      	ldr	r3, [r7, #20]
 80075e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d002      	beq.n	80075f2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80075ec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80075f0:	e041      	b.n	8007676 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80075f2:	697b      	ldr	r3, [r7, #20]
 80075f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d002      	beq.n	8007602 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80075fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007600:	e039      	b.n	8007676 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8007602:	697b      	ldr	r3, [r7, #20]
 8007604:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007608:	2b00      	cmp	r3, #0
 800760a:	d002      	beq.n	8007612 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800760c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007610:	e031      	b.n	8007676 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007618:	2b00      	cmp	r3, #0
 800761a:	d002      	beq.n	8007622 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800761c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007620:	e029      	b.n	8007676 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8007622:	697b      	ldr	r3, [r7, #20]
 8007624:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007628:	2b00      	cmp	r3, #0
 800762a:	d002      	beq.n	8007632 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800762c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007630:	e021      	b.n	8007676 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8007632:	697b      	ldr	r3, [r7, #20]
 8007634:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007638:	2b00      	cmp	r3, #0
 800763a:	d002      	beq.n	8007642 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800763c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007640:	e019      	b.n	8007676 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8007642:	697b      	ldr	r3, [r7, #20]
 8007644:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007648:	2b00      	cmp	r3, #0
 800764a:	d002      	beq.n	8007652 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800764c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007650:	e011      	b.n	8007676 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8007652:	697b      	ldr	r3, [r7, #20]
 8007654:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007658:	2b00      	cmp	r3, #0
 800765a:	d002      	beq.n	8007662 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800765c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007660:	e009      	b.n	8007676 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8007662:	697b      	ldr	r3, [r7, #20]
 8007664:	f003 0308 	and.w	r3, r3, #8
 8007668:	2b00      	cmp	r3, #0
 800766a:	d002      	beq.n	8007672 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800766c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007670:	e001      	b.n	8007676 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007672:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007676:	4618      	mov	r0, r3
 8007678:	3720      	adds	r7, #32
 800767a:	46bd      	mov	sp, r7
 800767c:	bd80      	pop	{r7, pc}
 800767e:	bf00      	nop
 8007680:	20000000 	.word	0x20000000
 8007684:	10624dd3 	.word	0x10624dd3
 8007688:	fdffe008 	.word	0xfdffe008

0800768c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800768c:	b480      	push	{r7}
 800768e:	b085      	sub	sp, #20
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007694:	4b1f      	ldr	r3, [pc, #124]	; (8007714 <SDMMC_GetCmdResp2+0x88>)
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	4a1f      	ldr	r2, [pc, #124]	; (8007718 <SDMMC_GetCmdResp2+0x8c>)
 800769a:	fba2 2303 	umull	r2, r3, r2, r3
 800769e:	0a5b      	lsrs	r3, r3, #9
 80076a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80076a4:	fb02 f303 	mul.w	r3, r2, r3
 80076a8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	1e5a      	subs	r2, r3, #1
 80076ae:	60fa      	str	r2, [r7, #12]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d102      	bne.n	80076ba <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80076b4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80076b8:	e026      	b.n	8007708 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076be:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d0ef      	beq.n	80076aa <SDMMC_GetCmdResp2+0x1e>
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d1ea      	bne.n	80076aa <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076d8:	f003 0304 	and.w	r3, r3, #4
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d004      	beq.n	80076ea <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2204      	movs	r2, #4
 80076e4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80076e6:	2304      	movs	r3, #4
 80076e8:	e00e      	b.n	8007708 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076ee:	f003 0301 	and.w	r3, r3, #1
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d004      	beq.n	8007700 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2201      	movs	r2, #1
 80076fa:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80076fc:	2301      	movs	r3, #1
 80076fe:	e003      	b.n	8007708 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	22c5      	movs	r2, #197	; 0xc5
 8007704:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8007706:	2300      	movs	r3, #0
}
 8007708:	4618      	mov	r0, r3
 800770a:	3714      	adds	r7, #20
 800770c:	46bd      	mov	sp, r7
 800770e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007712:	4770      	bx	lr
 8007714:	20000000 	.word	0x20000000
 8007718:	10624dd3 	.word	0x10624dd3

0800771c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800771c:	b480      	push	{r7}
 800771e:	b085      	sub	sp, #20
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007724:	4b1a      	ldr	r3, [pc, #104]	; (8007790 <SDMMC_GetCmdResp3+0x74>)
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	4a1a      	ldr	r2, [pc, #104]	; (8007794 <SDMMC_GetCmdResp3+0x78>)
 800772a:	fba2 2303 	umull	r2, r3, r2, r3
 800772e:	0a5b      	lsrs	r3, r3, #9
 8007730:	f241 3288 	movw	r2, #5000	; 0x1388
 8007734:	fb02 f303 	mul.w	r3, r2, r3
 8007738:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	1e5a      	subs	r2, r3, #1
 800773e:	60fa      	str	r2, [r7, #12]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d102      	bne.n	800774a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007744:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007748:	e01b      	b.n	8007782 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800774e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007756:	2b00      	cmp	r3, #0
 8007758:	d0ef      	beq.n	800773a <SDMMC_GetCmdResp3+0x1e>
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007760:	2b00      	cmp	r3, #0
 8007762:	d1ea      	bne.n	800773a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007768:	f003 0304 	and.w	r3, r3, #4
 800776c:	2b00      	cmp	r3, #0
 800776e:	d004      	beq.n	800777a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2204      	movs	r2, #4
 8007774:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007776:	2304      	movs	r3, #4
 8007778:	e003      	b.n	8007782 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	22c5      	movs	r2, #197	; 0xc5
 800777e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007780:	2300      	movs	r3, #0
}
 8007782:	4618      	mov	r0, r3
 8007784:	3714      	adds	r7, #20
 8007786:	46bd      	mov	sp, r7
 8007788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778c:	4770      	bx	lr
 800778e:	bf00      	nop
 8007790:	20000000 	.word	0x20000000
 8007794:	10624dd3 	.word	0x10624dd3

08007798 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b088      	sub	sp, #32
 800779c:	af00      	add	r7, sp, #0
 800779e:	60f8      	str	r0, [r7, #12]
 80077a0:	460b      	mov	r3, r1
 80077a2:	607a      	str	r2, [r7, #4]
 80077a4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80077a6:	4b35      	ldr	r3, [pc, #212]	; (800787c <SDMMC_GetCmdResp6+0xe4>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4a35      	ldr	r2, [pc, #212]	; (8007880 <SDMMC_GetCmdResp6+0xe8>)
 80077ac:	fba2 2303 	umull	r2, r3, r2, r3
 80077b0:	0a5b      	lsrs	r3, r3, #9
 80077b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80077b6:	fb02 f303 	mul.w	r3, r2, r3
 80077ba:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80077bc:	69fb      	ldr	r3, [r7, #28]
 80077be:	1e5a      	subs	r2, r3, #1
 80077c0:	61fa      	str	r2, [r7, #28]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d102      	bne.n	80077cc <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80077c6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80077ca:	e052      	b.n	8007872 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077d0:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80077d2:	69bb      	ldr	r3, [r7, #24]
 80077d4:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d0ef      	beq.n	80077bc <SDMMC_GetCmdResp6+0x24>
 80077dc:	69bb      	ldr	r3, [r7, #24]
 80077de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d1ea      	bne.n	80077bc <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077ea:	f003 0304 	and.w	r3, r3, #4
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d004      	beq.n	80077fc <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	2204      	movs	r2, #4
 80077f6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80077f8:	2304      	movs	r3, #4
 80077fa:	e03a      	b.n	8007872 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007800:	f003 0301 	and.w	r3, r3, #1
 8007804:	2b00      	cmp	r3, #0
 8007806:	d004      	beq.n	8007812 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	2201      	movs	r2, #1
 800780c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800780e:	2301      	movs	r3, #1
 8007810:	e02f      	b.n	8007872 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8007812:	68f8      	ldr	r0, [r7, #12]
 8007814:	f7ff fba0 	bl	8006f58 <SDIO_GetCommandResponse>
 8007818:	4603      	mov	r3, r0
 800781a:	461a      	mov	r2, r3
 800781c:	7afb      	ldrb	r3, [r7, #11]
 800781e:	4293      	cmp	r3, r2
 8007820:	d001      	beq.n	8007826 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007822:	2301      	movs	r3, #1
 8007824:	e025      	b.n	8007872 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	22c5      	movs	r2, #197	; 0xc5
 800782a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800782c:	2100      	movs	r1, #0
 800782e:	68f8      	ldr	r0, [r7, #12]
 8007830:	f7ff fb9f 	bl	8006f72 <SDIO_GetResponse>
 8007834:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8007836:	697b      	ldr	r3, [r7, #20]
 8007838:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800783c:	2b00      	cmp	r3, #0
 800783e:	d106      	bne.n	800784e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8007840:	697b      	ldr	r3, [r7, #20]
 8007842:	0c1b      	lsrs	r3, r3, #16
 8007844:	b29a      	uxth	r2, r3
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800784a:	2300      	movs	r3, #0
 800784c:	e011      	b.n	8007872 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800784e:	697b      	ldr	r3, [r7, #20]
 8007850:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007854:	2b00      	cmp	r3, #0
 8007856:	d002      	beq.n	800785e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007858:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800785c:	e009      	b.n	8007872 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800785e:	697b      	ldr	r3, [r7, #20]
 8007860:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007864:	2b00      	cmp	r3, #0
 8007866:	d002      	beq.n	800786e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007868:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800786c:	e001      	b.n	8007872 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800786e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007872:	4618      	mov	r0, r3
 8007874:	3720      	adds	r7, #32
 8007876:	46bd      	mov	sp, r7
 8007878:	bd80      	pop	{r7, pc}
 800787a:	bf00      	nop
 800787c:	20000000 	.word	0x20000000
 8007880:	10624dd3 	.word	0x10624dd3

08007884 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8007884:	b480      	push	{r7}
 8007886:	b085      	sub	sp, #20
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800788c:	4b22      	ldr	r3, [pc, #136]	; (8007918 <SDMMC_GetCmdResp7+0x94>)
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4a22      	ldr	r2, [pc, #136]	; (800791c <SDMMC_GetCmdResp7+0x98>)
 8007892:	fba2 2303 	umull	r2, r3, r2, r3
 8007896:	0a5b      	lsrs	r3, r3, #9
 8007898:	f241 3288 	movw	r2, #5000	; 0x1388
 800789c:	fb02 f303 	mul.w	r3, r2, r3
 80078a0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	1e5a      	subs	r2, r3, #1
 80078a6:	60fa      	str	r2, [r7, #12]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d102      	bne.n	80078b2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80078ac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80078b0:	e02c      	b.n	800790c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078b6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d0ef      	beq.n	80078a2 <SDMMC_GetCmdResp7+0x1e>
 80078c2:	68bb      	ldr	r3, [r7, #8]
 80078c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d1ea      	bne.n	80078a2 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078d0:	f003 0304 	and.w	r3, r3, #4
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d004      	beq.n	80078e2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2204      	movs	r2, #4
 80078dc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80078de:	2304      	movs	r3, #4
 80078e0:	e014      	b.n	800790c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078e6:	f003 0301 	and.w	r3, r3, #1
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d004      	beq.n	80078f8 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2201      	movs	r2, #1
 80078f2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80078f4:	2301      	movs	r3, #1
 80078f6:	e009      	b.n	800790c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007900:	2b00      	cmp	r3, #0
 8007902:	d002      	beq.n	800790a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2240      	movs	r2, #64	; 0x40
 8007908:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800790a:	2300      	movs	r3, #0
  
}
 800790c:	4618      	mov	r0, r3
 800790e:	3714      	adds	r7, #20
 8007910:	46bd      	mov	sp, r7
 8007912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007916:	4770      	bx	lr
 8007918:	20000000 	.word	0x20000000
 800791c:	10624dd3 	.word	0x10624dd3

08007920 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8007924:	4904      	ldr	r1, [pc, #16]	; (8007938 <MX_FATFS_Init+0x18>)
 8007926:	4805      	ldr	r0, [pc, #20]	; (800793c <MX_FATFS_Init+0x1c>)
 8007928:	f000 faa0 	bl	8007e6c <FATFS_LinkDriver>
 800792c:	4603      	mov	r3, r0
 800792e:	461a      	mov	r2, r3
 8007930:	4b03      	ldr	r3, [pc, #12]	; (8007940 <MX_FATFS_Init+0x20>)
 8007932:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007934:	bf00      	nop
 8007936:	bd80      	pop	{r7, pc}
 8007938:	20000538 	.word	0x20000538
 800793c:	08007f1c 	.word	0x08007f1c
 8007940:	20000534 	.word	0x20000534

08007944 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b082      	sub	sp, #8
 8007948:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800794a:	2300      	movs	r3, #0
 800794c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800794e:	f000 f896 	bl	8007a7e <BSP_SD_IsDetected>
 8007952:	4603      	mov	r3, r0
 8007954:	2b01      	cmp	r3, #1
 8007956:	d001      	beq.n	800795c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8007958:	2301      	movs	r3, #1
 800795a:	e012      	b.n	8007982 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800795c:	480b      	ldr	r0, [pc, #44]	; (800798c <BSP_SD_Init+0x48>)
 800795e:	f7fc f965 	bl	8003c2c <HAL_SD_Init>
 8007962:	4603      	mov	r3, r0
 8007964:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8007966:	79fb      	ldrb	r3, [r7, #7]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d109      	bne.n	8007980 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800796c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007970:	4806      	ldr	r0, [pc, #24]	; (800798c <BSP_SD_Init+0x48>)
 8007972:	f7fc ff31 	bl	80047d8 <HAL_SD_ConfigWideBusOperation>
 8007976:	4603      	mov	r3, r0
 8007978:	2b00      	cmp	r3, #0
 800797a:	d001      	beq.n	8007980 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800797c:	2301      	movs	r3, #1
 800797e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8007980:	79fb      	ldrb	r3, [r7, #7]
}
 8007982:	4618      	mov	r0, r3
 8007984:	3708      	adds	r7, #8
 8007986:	46bd      	mov	sp, r7
 8007988:	bd80      	pop	{r7, pc}
 800798a:	bf00      	nop
 800798c:	20000260 	.word	0x20000260

08007990 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b086      	sub	sp, #24
 8007994:	af00      	add	r7, sp, #0
 8007996:	60f8      	str	r0, [r7, #12]
 8007998:	60b9      	str	r1, [r7, #8]
 800799a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800799c:	2300      	movs	r3, #0
 800799e:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	68ba      	ldr	r2, [r7, #8]
 80079a4:	68f9      	ldr	r1, [r7, #12]
 80079a6:	4806      	ldr	r0, [pc, #24]	; (80079c0 <BSP_SD_ReadBlocks_DMA+0x30>)
 80079a8:	f7fc f9ee 	bl	8003d88 <HAL_SD_ReadBlocks_DMA>
 80079ac:	4603      	mov	r3, r0
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d001      	beq.n	80079b6 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80079b2:	2301      	movs	r3, #1
 80079b4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80079b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80079b8:	4618      	mov	r0, r3
 80079ba:	3718      	adds	r7, #24
 80079bc:	46bd      	mov	sp, r7
 80079be:	bd80      	pop	{r7, pc}
 80079c0:	20000260 	.word	0x20000260

080079c4 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b086      	sub	sp, #24
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	60f8      	str	r0, [r7, #12]
 80079cc:	60b9      	str	r1, [r7, #8]
 80079ce:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80079d0:	2300      	movs	r3, #0
 80079d2:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	68ba      	ldr	r2, [r7, #8]
 80079d8:	68f9      	ldr	r1, [r7, #12]
 80079da:	4806      	ldr	r0, [pc, #24]	; (80079f4 <BSP_SD_WriteBlocks_DMA+0x30>)
 80079dc:	f7fc fab6 	bl	8003f4c <HAL_SD_WriteBlocks_DMA>
 80079e0:	4603      	mov	r3, r0
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d001      	beq.n	80079ea <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80079e6:	2301      	movs	r3, #1
 80079e8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80079ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80079ec:	4618      	mov	r0, r3
 80079ee:	3718      	adds	r7, #24
 80079f0:	46bd      	mov	sp, r7
 80079f2:	bd80      	pop	{r7, pc}
 80079f4:	20000260 	.word	0x20000260

080079f8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80079fc:	4805      	ldr	r0, [pc, #20]	; (8007a14 <BSP_SD_GetCardState+0x1c>)
 80079fe:	f7fc ff85 	bl	800490c <HAL_SD_GetCardState>
 8007a02:	4603      	mov	r3, r0
 8007a04:	2b04      	cmp	r3, #4
 8007a06:	bf14      	ite	ne
 8007a08:	2301      	movne	r3, #1
 8007a0a:	2300      	moveq	r3, #0
 8007a0c:	b2db      	uxtb	r3, r3
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	bd80      	pop	{r7, pc}
 8007a12:	bf00      	nop
 8007a14:	20000260 	.word	0x20000260

08007a18 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b082      	sub	sp, #8
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8007a20:	6879      	ldr	r1, [r7, #4]
 8007a22:	4803      	ldr	r0, [pc, #12]	; (8007a30 <BSP_SD_GetCardInfo+0x18>)
 8007a24:	f7fc feac 	bl	8004780 <HAL_SD_GetCardInfo>
}
 8007a28:	bf00      	nop
 8007a2a:	3708      	adds	r7, #8
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}
 8007a30:	20000260 	.word	0x20000260

08007a34 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b082      	sub	sp, #8
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8007a3c:	f000 f818 	bl	8007a70 <BSP_SD_AbortCallback>
}
 8007a40:	bf00      	nop
 8007a42:	3708      	adds	r7, #8
 8007a44:	46bd      	mov	sp, r7
 8007a46:	bd80      	pop	{r7, pc}

08007a48 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b082      	sub	sp, #8
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8007a50:	f000 f9a8 	bl	8007da4 <BSP_SD_WriteCpltCallback>
}
 8007a54:	bf00      	nop
 8007a56:	3708      	adds	r7, #8
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	bd80      	pop	{r7, pc}

08007a5c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b082      	sub	sp, #8
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8007a64:	f000 f9aa 	bl	8007dbc <BSP_SD_ReadCpltCallback>
}
 8007a68:	bf00      	nop
 8007a6a:	3708      	adds	r7, #8
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	bd80      	pop	{r7, pc}

08007a70 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8007a70:	b480      	push	{r7}
 8007a72:	af00      	add	r7, sp, #0

}
 8007a74:	bf00      	nop
 8007a76:	46bd      	mov	sp, r7
 8007a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7c:	4770      	bx	lr

08007a7e <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8007a7e:	b580      	push	{r7, lr}
 8007a80:	b082      	sub	sp, #8
 8007a82:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8007a84:	2301      	movs	r3, #1
 8007a86:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8007a88:	f000 f80c 	bl	8007aa4 <BSP_PlatformIsDetected>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d101      	bne.n	8007a96 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8007a92:	2300      	movs	r3, #0
 8007a94:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8007a96:	79fb      	ldrb	r3, [r7, #7]
 8007a98:	b2db      	uxtb	r3, r3
}
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	3708      	adds	r7, #8
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	bd80      	pop	{r7, pc}
	...

08007aa4 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b082      	sub	sp, #8
 8007aa8:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8007aaa:	2301      	movs	r3, #1
 8007aac:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8007aae:	2108      	movs	r1, #8
 8007ab0:	4806      	ldr	r0, [pc, #24]	; (8007acc <BSP_PlatformIsDetected+0x28>)
 8007ab2:	f7fb fa31 	bl	8002f18 <HAL_GPIO_ReadPin>
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d001      	beq.n	8007ac0 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8007abc:	2300      	movs	r3, #0
 8007abe:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8007ac0:	79fb      	ldrb	r3, [r7, #7]
}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	3708      	adds	r7, #8
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}
 8007aca:	bf00      	nop
 8007acc:	40020c00 	.word	0x40020c00

08007ad0 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b084      	sub	sp, #16
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8007ad8:	f7fa f840 	bl	8001b5c <HAL_GetTick>
 8007adc:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8007ade:	e006      	b.n	8007aee <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8007ae0:	f7ff ff8a 	bl	80079f8 <BSP_SD_GetCardState>
 8007ae4:	4603      	mov	r3, r0
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d101      	bne.n	8007aee <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8007aea:	2300      	movs	r3, #0
 8007aec:	e009      	b.n	8007b02 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8007aee:	f7fa f835 	bl	8001b5c <HAL_GetTick>
 8007af2:	4602      	mov	r2, r0
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	1ad3      	subs	r3, r2, r3
 8007af8:	687a      	ldr	r2, [r7, #4]
 8007afa:	429a      	cmp	r2, r3
 8007afc:	d8f0      	bhi.n	8007ae0 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8007afe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007b02:	4618      	mov	r0, r3
 8007b04:	3710      	adds	r7, #16
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bd80      	pop	{r7, pc}
	...

08007b0c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b082      	sub	sp, #8
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	4603      	mov	r3, r0
 8007b14:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8007b16:	4b0b      	ldr	r3, [pc, #44]	; (8007b44 <SD_CheckStatus+0x38>)
 8007b18:	2201      	movs	r2, #1
 8007b1a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8007b1c:	f7ff ff6c 	bl	80079f8 <BSP_SD_GetCardState>
 8007b20:	4603      	mov	r3, r0
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d107      	bne.n	8007b36 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8007b26:	4b07      	ldr	r3, [pc, #28]	; (8007b44 <SD_CheckStatus+0x38>)
 8007b28:	781b      	ldrb	r3, [r3, #0]
 8007b2a:	b2db      	uxtb	r3, r3
 8007b2c:	f023 0301 	bic.w	r3, r3, #1
 8007b30:	b2da      	uxtb	r2, r3
 8007b32:	4b04      	ldr	r3, [pc, #16]	; (8007b44 <SD_CheckStatus+0x38>)
 8007b34:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8007b36:	4b03      	ldr	r3, [pc, #12]	; (8007b44 <SD_CheckStatus+0x38>)
 8007b38:	781b      	ldrb	r3, [r3, #0]
 8007b3a:	b2db      	uxtb	r3, r3
}
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	3708      	adds	r7, #8
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd80      	pop	{r7, pc}
 8007b44:	20000009 	.word	0x20000009

08007b48 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b082      	sub	sp, #8
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	4603      	mov	r3, r0
 8007b50:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8007b52:	f7ff fef7 	bl	8007944 <BSP_SD_Init>
 8007b56:	4603      	mov	r3, r0
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d107      	bne.n	8007b6c <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8007b5c:	79fb      	ldrb	r3, [r7, #7]
 8007b5e:	4618      	mov	r0, r3
 8007b60:	f7ff ffd4 	bl	8007b0c <SD_CheckStatus>
 8007b64:	4603      	mov	r3, r0
 8007b66:	461a      	mov	r2, r3
 8007b68:	4b04      	ldr	r3, [pc, #16]	; (8007b7c <SD_initialize+0x34>)
 8007b6a:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8007b6c:	4b03      	ldr	r3, [pc, #12]	; (8007b7c <SD_initialize+0x34>)
 8007b6e:	781b      	ldrb	r3, [r3, #0]
 8007b70:	b2db      	uxtb	r3, r3
}
 8007b72:	4618      	mov	r0, r3
 8007b74:	3708      	adds	r7, #8
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd80      	pop	{r7, pc}
 8007b7a:	bf00      	nop
 8007b7c:	20000009 	.word	0x20000009

08007b80 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b082      	sub	sp, #8
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	4603      	mov	r3, r0
 8007b88:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8007b8a:	79fb      	ldrb	r3, [r7, #7]
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	f7ff ffbd 	bl	8007b0c <SD_CheckStatus>
 8007b92:	4603      	mov	r3, r0
}
 8007b94:	4618      	mov	r0, r3
 8007b96:	3708      	adds	r7, #8
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	bd80      	pop	{r7, pc}

08007b9c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b086      	sub	sp, #24
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	60b9      	str	r1, [r7, #8]
 8007ba4:	607a      	str	r2, [r7, #4]
 8007ba6:	603b      	str	r3, [r7, #0]
 8007ba8:	4603      	mov	r3, r0
 8007baa:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007bac:	2301      	movs	r3, #1
 8007bae:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8007bb0:	f247 5030 	movw	r0, #30000	; 0x7530
 8007bb4:	f7ff ff8c 	bl	8007ad0 <SD_CheckStatusWithTimeout>
 8007bb8:	4603      	mov	r3, r0
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	da01      	bge.n	8007bc2 <SD_read+0x26>
  {
    return res;
 8007bbe:	7dfb      	ldrb	r3, [r7, #23]
 8007bc0:	e03b      	b.n	8007c3a <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8007bc2:	683a      	ldr	r2, [r7, #0]
 8007bc4:	6879      	ldr	r1, [r7, #4]
 8007bc6:	68b8      	ldr	r0, [r7, #8]
 8007bc8:	f7ff fee2 	bl	8007990 <BSP_SD_ReadBlocks_DMA>
 8007bcc:	4603      	mov	r3, r0
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d132      	bne.n	8007c38 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8007bd2:	4b1c      	ldr	r3, [pc, #112]	; (8007c44 <SD_read+0xa8>)
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8007bd8:	f7f9 ffc0 	bl	8001b5c <HAL_GetTick>
 8007bdc:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8007bde:	bf00      	nop
 8007be0:	4b18      	ldr	r3, [pc, #96]	; (8007c44 <SD_read+0xa8>)
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d108      	bne.n	8007bfa <SD_read+0x5e>
 8007be8:	f7f9 ffb8 	bl	8001b5c <HAL_GetTick>
 8007bec:	4602      	mov	r2, r0
 8007bee:	693b      	ldr	r3, [r7, #16]
 8007bf0:	1ad3      	subs	r3, r2, r3
 8007bf2:	f247 522f 	movw	r2, #29999	; 0x752f
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d9f2      	bls.n	8007be0 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8007bfa:	4b12      	ldr	r3, [pc, #72]	; (8007c44 <SD_read+0xa8>)
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d102      	bne.n	8007c08 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8007c02:	2301      	movs	r3, #1
 8007c04:	75fb      	strb	r3, [r7, #23]
 8007c06:	e017      	b.n	8007c38 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8007c08:	4b0e      	ldr	r3, [pc, #56]	; (8007c44 <SD_read+0xa8>)
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8007c0e:	f7f9 ffa5 	bl	8001b5c <HAL_GetTick>
 8007c12:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8007c14:	e007      	b.n	8007c26 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8007c16:	f7ff feef 	bl	80079f8 <BSP_SD_GetCardState>
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d102      	bne.n	8007c26 <SD_read+0x8a>
          {
            res = RES_OK;
 8007c20:	2300      	movs	r3, #0
 8007c22:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8007c24:	e008      	b.n	8007c38 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8007c26:	f7f9 ff99 	bl	8001b5c <HAL_GetTick>
 8007c2a:	4602      	mov	r2, r0
 8007c2c:	693b      	ldr	r3, [r7, #16]
 8007c2e:	1ad3      	subs	r3, r2, r3
 8007c30:	f247 522f 	movw	r2, #29999	; 0x752f
 8007c34:	4293      	cmp	r3, r2
 8007c36:	d9ee      	bls.n	8007c16 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8007c38:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	3718      	adds	r7, #24
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	bd80      	pop	{r7, pc}
 8007c42:	bf00      	nop
 8007c44:	2000002c 	.word	0x2000002c

08007c48 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b086      	sub	sp, #24
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	60b9      	str	r1, [r7, #8]
 8007c50:	607a      	str	r2, [r7, #4]
 8007c52:	603b      	str	r3, [r7, #0]
 8007c54:	4603      	mov	r3, r0
 8007c56:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007c58:	2301      	movs	r3, #1
 8007c5a:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8007c5c:	4b24      	ldr	r3, [pc, #144]	; (8007cf0 <SD_write+0xa8>)
 8007c5e:	2200      	movs	r2, #0
 8007c60:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8007c62:	f247 5030 	movw	r0, #30000	; 0x7530
 8007c66:	f7ff ff33 	bl	8007ad0 <SD_CheckStatusWithTimeout>
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	da01      	bge.n	8007c74 <SD_write+0x2c>
  {
    return res;
 8007c70:	7dfb      	ldrb	r3, [r7, #23]
 8007c72:	e038      	b.n	8007ce6 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8007c74:	683a      	ldr	r2, [r7, #0]
 8007c76:	6879      	ldr	r1, [r7, #4]
 8007c78:	68b8      	ldr	r0, [r7, #8]
 8007c7a:	f7ff fea3 	bl	80079c4 <BSP_SD_WriteBlocks_DMA>
 8007c7e:	4603      	mov	r3, r0
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d12f      	bne.n	8007ce4 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8007c84:	f7f9 ff6a 	bl	8001b5c <HAL_GetTick>
 8007c88:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8007c8a:	bf00      	nop
 8007c8c:	4b18      	ldr	r3, [pc, #96]	; (8007cf0 <SD_write+0xa8>)
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d108      	bne.n	8007ca6 <SD_write+0x5e>
 8007c94:	f7f9 ff62 	bl	8001b5c <HAL_GetTick>
 8007c98:	4602      	mov	r2, r0
 8007c9a:	693b      	ldr	r3, [r7, #16]
 8007c9c:	1ad3      	subs	r3, r2, r3
 8007c9e:	f247 522f 	movw	r2, #29999	; 0x752f
 8007ca2:	4293      	cmp	r3, r2
 8007ca4:	d9f2      	bls.n	8007c8c <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8007ca6:	4b12      	ldr	r3, [pc, #72]	; (8007cf0 <SD_write+0xa8>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d102      	bne.n	8007cb4 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8007cae:	2301      	movs	r3, #1
 8007cb0:	75fb      	strb	r3, [r7, #23]
 8007cb2:	e017      	b.n	8007ce4 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8007cb4:	4b0e      	ldr	r3, [pc, #56]	; (8007cf0 <SD_write+0xa8>)
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8007cba:	f7f9 ff4f 	bl	8001b5c <HAL_GetTick>
 8007cbe:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8007cc0:	e007      	b.n	8007cd2 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8007cc2:	f7ff fe99 	bl	80079f8 <BSP_SD_GetCardState>
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d102      	bne.n	8007cd2 <SD_write+0x8a>
          {
            res = RES_OK;
 8007ccc:	2300      	movs	r3, #0
 8007cce:	75fb      	strb	r3, [r7, #23]
            break;
 8007cd0:	e008      	b.n	8007ce4 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8007cd2:	f7f9 ff43 	bl	8001b5c <HAL_GetTick>
 8007cd6:	4602      	mov	r2, r0
 8007cd8:	693b      	ldr	r3, [r7, #16]
 8007cda:	1ad3      	subs	r3, r2, r3
 8007cdc:	f247 522f 	movw	r2, #29999	; 0x752f
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	d9ee      	bls.n	8007cc2 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8007ce4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	3718      	adds	r7, #24
 8007cea:	46bd      	mov	sp, r7
 8007cec:	bd80      	pop	{r7, pc}
 8007cee:	bf00      	nop
 8007cf0:	20000028 	.word	0x20000028

08007cf4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b08c      	sub	sp, #48	; 0x30
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	603a      	str	r2, [r7, #0]
 8007cfe:	71fb      	strb	r3, [r7, #7]
 8007d00:	460b      	mov	r3, r1
 8007d02:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8007d04:	2301      	movs	r3, #1
 8007d06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8007d0a:	4b25      	ldr	r3, [pc, #148]	; (8007da0 <SD_ioctl+0xac>)
 8007d0c:	781b      	ldrb	r3, [r3, #0]
 8007d0e:	b2db      	uxtb	r3, r3
 8007d10:	f003 0301 	and.w	r3, r3, #1
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d001      	beq.n	8007d1c <SD_ioctl+0x28>
 8007d18:	2303      	movs	r3, #3
 8007d1a:	e03c      	b.n	8007d96 <SD_ioctl+0xa2>

  switch (cmd)
 8007d1c:	79bb      	ldrb	r3, [r7, #6]
 8007d1e:	2b03      	cmp	r3, #3
 8007d20:	d834      	bhi.n	8007d8c <SD_ioctl+0x98>
 8007d22:	a201      	add	r2, pc, #4	; (adr r2, 8007d28 <SD_ioctl+0x34>)
 8007d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d28:	08007d39 	.word	0x08007d39
 8007d2c:	08007d41 	.word	0x08007d41
 8007d30:	08007d59 	.word	0x08007d59
 8007d34:	08007d73 	.word	0x08007d73
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8007d38:	2300      	movs	r3, #0
 8007d3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007d3e:	e028      	b.n	8007d92 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8007d40:	f107 030c 	add.w	r3, r7, #12
 8007d44:	4618      	mov	r0, r3
 8007d46:	f7ff fe67 	bl	8007a18 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8007d4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8007d50:	2300      	movs	r3, #0
 8007d52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007d56:	e01c      	b.n	8007d92 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8007d58:	f107 030c 	add.w	r3, r7, #12
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	f7ff fe5b 	bl	8007a18 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8007d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d64:	b29a      	uxth	r2, r3
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007d70:	e00f      	b.n	8007d92 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8007d72:	f107 030c 	add.w	r3, r7, #12
 8007d76:	4618      	mov	r0, r3
 8007d78:	f7ff fe4e 	bl	8007a18 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8007d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d7e:	0a5a      	lsrs	r2, r3, #9
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8007d84:	2300      	movs	r3, #0
 8007d86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007d8a:	e002      	b.n	8007d92 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8007d8c:	2304      	movs	r3, #4
 8007d8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8007d92:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007d96:	4618      	mov	r0, r3
 8007d98:	3730      	adds	r7, #48	; 0x30
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}
 8007d9e:	bf00      	nop
 8007da0:	20000009 	.word	0x20000009

08007da4 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8007da4:	b480      	push	{r7}
 8007da6:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8007da8:	4b03      	ldr	r3, [pc, #12]	; (8007db8 <BSP_SD_WriteCpltCallback+0x14>)
 8007daa:	2201      	movs	r2, #1
 8007dac:	601a      	str	r2, [r3, #0]
}
 8007dae:	bf00      	nop
 8007db0:	46bd      	mov	sp, r7
 8007db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db6:	4770      	bx	lr
 8007db8:	20000028 	.word	0x20000028

08007dbc <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8007dc0:	4b03      	ldr	r3, [pc, #12]	; (8007dd0 <BSP_SD_ReadCpltCallback+0x14>)
 8007dc2:	2201      	movs	r2, #1
 8007dc4:	601a      	str	r2, [r3, #0]
}
 8007dc6:	bf00      	nop
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dce:	4770      	bx	lr
 8007dd0:	2000002c 	.word	0x2000002c

08007dd4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007dd4:	b480      	push	{r7}
 8007dd6:	b087      	sub	sp, #28
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	60f8      	str	r0, [r7, #12]
 8007ddc:	60b9      	str	r1, [r7, #8]
 8007dde:	4613      	mov	r3, r2
 8007de0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007de2:	2301      	movs	r3, #1
 8007de4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007de6:	2300      	movs	r3, #0
 8007de8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8007dea:	4b1f      	ldr	r3, [pc, #124]	; (8007e68 <FATFS_LinkDriverEx+0x94>)
 8007dec:	7a5b      	ldrb	r3, [r3, #9]
 8007dee:	b2db      	uxtb	r3, r3
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d131      	bne.n	8007e58 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007df4:	4b1c      	ldr	r3, [pc, #112]	; (8007e68 <FATFS_LinkDriverEx+0x94>)
 8007df6:	7a5b      	ldrb	r3, [r3, #9]
 8007df8:	b2db      	uxtb	r3, r3
 8007dfa:	461a      	mov	r2, r3
 8007dfc:	4b1a      	ldr	r3, [pc, #104]	; (8007e68 <FATFS_LinkDriverEx+0x94>)
 8007dfe:	2100      	movs	r1, #0
 8007e00:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8007e02:	4b19      	ldr	r3, [pc, #100]	; (8007e68 <FATFS_LinkDriverEx+0x94>)
 8007e04:	7a5b      	ldrb	r3, [r3, #9]
 8007e06:	b2db      	uxtb	r3, r3
 8007e08:	4a17      	ldr	r2, [pc, #92]	; (8007e68 <FATFS_LinkDriverEx+0x94>)
 8007e0a:	009b      	lsls	r3, r3, #2
 8007e0c:	4413      	add	r3, r2
 8007e0e:	68fa      	ldr	r2, [r7, #12]
 8007e10:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8007e12:	4b15      	ldr	r3, [pc, #84]	; (8007e68 <FATFS_LinkDriverEx+0x94>)
 8007e14:	7a5b      	ldrb	r3, [r3, #9]
 8007e16:	b2db      	uxtb	r3, r3
 8007e18:	461a      	mov	r2, r3
 8007e1a:	4b13      	ldr	r3, [pc, #76]	; (8007e68 <FATFS_LinkDriverEx+0x94>)
 8007e1c:	4413      	add	r3, r2
 8007e1e:	79fa      	ldrb	r2, [r7, #7]
 8007e20:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007e22:	4b11      	ldr	r3, [pc, #68]	; (8007e68 <FATFS_LinkDriverEx+0x94>)
 8007e24:	7a5b      	ldrb	r3, [r3, #9]
 8007e26:	b2db      	uxtb	r3, r3
 8007e28:	1c5a      	adds	r2, r3, #1
 8007e2a:	b2d1      	uxtb	r1, r2
 8007e2c:	4a0e      	ldr	r2, [pc, #56]	; (8007e68 <FATFS_LinkDriverEx+0x94>)
 8007e2e:	7251      	strb	r1, [r2, #9]
 8007e30:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007e32:	7dbb      	ldrb	r3, [r7, #22]
 8007e34:	3330      	adds	r3, #48	; 0x30
 8007e36:	b2da      	uxtb	r2, r3
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007e3c:	68bb      	ldr	r3, [r7, #8]
 8007e3e:	3301      	adds	r3, #1
 8007e40:	223a      	movs	r2, #58	; 0x3a
 8007e42:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	3302      	adds	r3, #2
 8007e48:	222f      	movs	r2, #47	; 0x2f
 8007e4a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	3303      	adds	r3, #3
 8007e50:	2200      	movs	r2, #0
 8007e52:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007e54:	2300      	movs	r3, #0
 8007e56:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8007e58:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	371c      	adds	r7, #28
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e64:	4770      	bx	lr
 8007e66:	bf00      	nop
 8007e68:	20000030 	.word	0x20000030

08007e6c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b082      	sub	sp, #8
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
 8007e74:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007e76:	2200      	movs	r2, #0
 8007e78:	6839      	ldr	r1, [r7, #0]
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	f7ff ffaa 	bl	8007dd4 <FATFS_LinkDriverEx>
 8007e80:	4603      	mov	r3, r0
}
 8007e82:	4618      	mov	r0, r3
 8007e84:	3708      	adds	r7, #8
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bd80      	pop	{r7, pc}
	...

08007e8c <__libc_init_array>:
 8007e8c:	b570      	push	{r4, r5, r6, lr}
 8007e8e:	4d0d      	ldr	r5, [pc, #52]	; (8007ec4 <__libc_init_array+0x38>)
 8007e90:	4c0d      	ldr	r4, [pc, #52]	; (8007ec8 <__libc_init_array+0x3c>)
 8007e92:	1b64      	subs	r4, r4, r5
 8007e94:	10a4      	asrs	r4, r4, #2
 8007e96:	2600      	movs	r6, #0
 8007e98:	42a6      	cmp	r6, r4
 8007e9a:	d109      	bne.n	8007eb0 <__libc_init_array+0x24>
 8007e9c:	4d0b      	ldr	r5, [pc, #44]	; (8007ecc <__libc_init_array+0x40>)
 8007e9e:	4c0c      	ldr	r4, [pc, #48]	; (8007ed0 <__libc_init_array+0x44>)
 8007ea0:	f000 f820 	bl	8007ee4 <_init>
 8007ea4:	1b64      	subs	r4, r4, r5
 8007ea6:	10a4      	asrs	r4, r4, #2
 8007ea8:	2600      	movs	r6, #0
 8007eaa:	42a6      	cmp	r6, r4
 8007eac:	d105      	bne.n	8007eba <__libc_init_array+0x2e>
 8007eae:	bd70      	pop	{r4, r5, r6, pc}
 8007eb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007eb4:	4798      	blx	r3
 8007eb6:	3601      	adds	r6, #1
 8007eb8:	e7ee      	b.n	8007e98 <__libc_init_array+0xc>
 8007eba:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ebe:	4798      	blx	r3
 8007ec0:	3601      	adds	r6, #1
 8007ec2:	e7f2      	b.n	8007eaa <__libc_init_array+0x1e>
 8007ec4:	08007f38 	.word	0x08007f38
 8007ec8:	08007f38 	.word	0x08007f38
 8007ecc:	08007f38 	.word	0x08007f38
 8007ed0:	08007f3c 	.word	0x08007f3c

08007ed4 <memset>:
 8007ed4:	4402      	add	r2, r0
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	4293      	cmp	r3, r2
 8007eda:	d100      	bne.n	8007ede <memset+0xa>
 8007edc:	4770      	bx	lr
 8007ede:	f803 1b01 	strb.w	r1, [r3], #1
 8007ee2:	e7f9      	b.n	8007ed8 <memset+0x4>

08007ee4 <_init>:
 8007ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ee6:	bf00      	nop
 8007ee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007eea:	bc08      	pop	{r3}
 8007eec:	469e      	mov	lr, r3
 8007eee:	4770      	bx	lr

08007ef0 <_fini>:
 8007ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ef2:	bf00      	nop
 8007ef4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ef6:	bc08      	pop	{r3}
 8007ef8:	469e      	mov	lr, r3
 8007efa:	4770      	bx	lr
