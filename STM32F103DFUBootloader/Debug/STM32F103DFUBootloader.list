
STM32F103DFUBootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002bf0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08002cfc  08002cfc  00012cfc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002dc8  08002dc8  00012dc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002dcc  08002dcc  00012dcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000000c0  20000000  08002dd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000de4  200000c0  08002e90  000200c0  2**3
                  ALLOC
  7 ._user_heap_stack 00000600  20000ea4  08002e90  00020ea4  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001ae0e  00000000  00000000  000200e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00004453  00000000  00000000  0003aef7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0000698a  00000000  00000000  0003f34a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000970  00000000  00000000  00045cd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000e48  00000000  00000000  00046648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00017821  00000000  00000000  00047490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000111f7  00000000  00000000  0005ecb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0006ddd8  00000000  00000000  0006fea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  000ddc80  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000016ac  00000000  00000000  000ddcd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000c0 	.word	0x200000c0
 8000128:	00000000 	.word	0x00000000
 800012c:	08002ce4 	.word	0x08002ce4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000c4 	.word	0x200000c4
 8000148:	08002ce4 	.word	0x08002ce4

0800014c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800014c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800014e:	4b0e      	ldr	r3, [pc, #56]	; (8000188 <HAL_InitTick+0x3c>)
{
 8000150:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000152:	7818      	ldrb	r0, [r3, #0]
 8000154:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000158:	fbb3 f3f0 	udiv	r3, r3, r0
 800015c:	4a0b      	ldr	r2, [pc, #44]	; (800018c <HAL_InitTick+0x40>)
 800015e:	6810      	ldr	r0, [r2, #0]
 8000160:	fbb0 f0f3 	udiv	r0, r0, r3
 8000164:	f000 f89c 	bl	80002a0 <HAL_SYSTICK_Config>
 8000168:	4604      	mov	r4, r0
 800016a:	b958      	cbnz	r0, 8000184 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800016c:	2d0f      	cmp	r5, #15
 800016e:	d809      	bhi.n	8000184 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000170:	4602      	mov	r2, r0
 8000172:	4629      	mov	r1, r5
 8000174:	f04f 30ff 	mov.w	r0, #4294967295
 8000178:	f000 f854 	bl	8000224 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800017c:	4620      	mov	r0, r4
 800017e:	4b04      	ldr	r3, [pc, #16]	; (8000190 <HAL_InitTick+0x44>)
 8000180:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000182:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000184:	2001      	movs	r0, #1
 8000186:	e7fc      	b.n	8000182 <HAL_InitTick+0x36>
 8000188:	20000000 	.word	0x20000000
 800018c:	2000006c 	.word	0x2000006c
 8000190:	20000004 	.word	0x20000004

08000194 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000194:	4a07      	ldr	r2, [pc, #28]	; (80001b4 <HAL_Init+0x20>)
{
 8000196:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000198:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800019a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800019c:	f043 0310 	orr.w	r3, r3, #16
 80001a0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001a2:	f000 f82d 	bl	8000200 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001a6:	2000      	movs	r0, #0
 80001a8:	f7ff ffd0 	bl	800014c <HAL_InitTick>
  HAL_MspInit();
 80001ac:	f002 faf6 	bl	800279c <HAL_MspInit>
}
 80001b0:	2000      	movs	r0, #0
 80001b2:	bd08      	pop	{r3, pc}
 80001b4:	40022000 	.word	0x40022000

080001b8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001b8:	4a03      	ldr	r2, [pc, #12]	; (80001c8 <HAL_IncTick+0x10>)
 80001ba:	4b04      	ldr	r3, [pc, #16]	; (80001cc <HAL_IncTick+0x14>)
 80001bc:	6811      	ldr	r1, [r2, #0]
 80001be:	781b      	ldrb	r3, [r3, #0]
 80001c0:	440b      	add	r3, r1
 80001c2:	6013      	str	r3, [r2, #0]
}
 80001c4:	4770      	bx	lr
 80001c6:	bf00      	nop
 80001c8:	200005f8 	.word	0x200005f8
 80001cc:	20000000 	.word	0x20000000

080001d0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001d0:	4b01      	ldr	r3, [pc, #4]	; (80001d8 <HAL_GetTick+0x8>)
 80001d2:	6818      	ldr	r0, [r3, #0]
}
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	200005f8 	.word	0x200005f8

080001dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80001dc:	b538      	push	{r3, r4, r5, lr}
 80001de:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80001e0:	f7ff fff6 	bl	80001d0 <HAL_GetTick>
 80001e4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80001e6:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80001e8:	bf1e      	ittt	ne
 80001ea:	4b04      	ldrne	r3, [pc, #16]	; (80001fc <HAL_Delay+0x20>)
 80001ec:	781b      	ldrbne	r3, [r3, #0]
 80001ee:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80001f0:	f7ff ffee 	bl	80001d0 <HAL_GetTick>
 80001f4:	1b43      	subs	r3, r0, r5
 80001f6:	42a3      	cmp	r3, r4
 80001f8:	d3fa      	bcc.n	80001f0 <HAL_Delay+0x14>
  {
  }
}
 80001fa:	bd38      	pop	{r3, r4, r5, pc}
 80001fc:	20000000 	.word	0x20000000

08000200 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000200:	4907      	ldr	r1, [pc, #28]	; (8000220 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000202:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000204:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000206:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800020a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800020e:	0412      	lsls	r2, r2, #16
 8000210:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000212:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000214:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000218:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800021c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800021e:	4770      	bx	lr
 8000220:	e000ed00 	.word	0xe000ed00

08000224 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000224:	4b16      	ldr	r3, [pc, #88]	; (8000280 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000226:	b530      	push	{r4, r5, lr}
 8000228:	68dc      	ldr	r4, [r3, #12]
 800022a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800022e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000232:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000234:	2b04      	cmp	r3, #4
 8000236:	bf28      	it	cs
 8000238:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800023a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800023c:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000240:	bf98      	it	ls
 8000242:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000244:	fa05 f303 	lsl.w	r3, r5, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000248:	bf88      	it	hi
 800024a:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800024c:	ea21 0303 	bic.w	r3, r1, r3
 8000250:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000252:	fa05 f404 	lsl.w	r4, r5, r4
 8000256:	ea22 0204 	bic.w	r2, r2, r4
  if ((int32_t)(IRQn) < 0)
 800025a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800025c:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000260:	bfac      	ite	ge
 8000262:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000266:	4a07      	ldrlt	r2, [pc, #28]	; (8000284 <HAL_NVIC_SetPriority+0x60>)
 8000268:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800026c:	b2db      	uxtb	r3, r3
 800026e:	bfb5      	itete	lt
 8000270:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000274:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000278:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800027a:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	e000ed00 	.word	0xe000ed00
 8000284:	e000ed14 	.word	0xe000ed14

08000288 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000288:	2301      	movs	r3, #1
 800028a:	0942      	lsrs	r2, r0, #5
 800028c:	f000 001f 	and.w	r0, r0, #31
 8000290:	fa03 f000 	lsl.w	r0, r3, r0
 8000294:	4b01      	ldr	r3, [pc, #4]	; (800029c <HAL_NVIC_EnableIRQ+0x14>)
 8000296:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800029a:	4770      	bx	lr
 800029c:	e000e100 	.word	0xe000e100

080002a0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80002a0:	3801      	subs	r0, #1
 80002a2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80002a6:	d20a      	bcs.n	80002be <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002a8:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002aa:	4b06      	ldr	r3, [pc, #24]	; (80002c4 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002ac:	4a06      	ldr	r2, [pc, #24]	; (80002c8 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002ae:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002b0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002b4:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002b6:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002b8:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80002bc:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80002be:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80002c0:	4770      	bx	lr
 80002c2:	bf00      	nop
 80002c4:	e000e010 	.word	0xe000e010
 80002c8:	e000ed00 	.word	0xe000ed00

080002cc <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80002cc:	4b04      	ldr	r3, [pc, #16]	; (80002e0 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 80002ce:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80002d0:	681a      	ldr	r2, [r3, #0]
 80002d2:	bf0c      	ite	eq
 80002d4:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80002d8:	f022 0204 	bicne.w	r2, r2, #4
 80002dc:	601a      	str	r2, [r3, #0]
  }
}
 80002de:	4770      	bx	lr
 80002e0:	e000e010 	.word	0xe000e010

080002e4 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80002e4:	4770      	bx	lr

080002e6 <HAL_SYSTICK_IRQHandler>:
{
 80002e6:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80002e8:	f7ff fffc 	bl	80002e4 <HAL_SYSTICK_Callback>
}
 80002ec:	bd08      	pop	{r3, pc}
	...

080002f0 <FLASH_SetErrorCode>:
  uint32_t flags = 0U;
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80002f0:	4a11      	ldr	r2, [pc, #68]	; (8000338 <FLASH_SetErrorCode+0x48>)
 80002f2:	68d3      	ldr	r3, [r2, #12]
 80002f4:	f013 0310 	ands.w	r3, r3, #16
 80002f8:	d005      	beq.n	8000306 <FLASH_SetErrorCode+0x16>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80002fa:	4910      	ldr	r1, [pc, #64]	; (800033c <FLASH_SetErrorCode+0x4c>)
 80002fc:	69cb      	ldr	r3, [r1, #28]
 80002fe:	f043 0302 	orr.w	r3, r3, #2
 8000302:	61cb      	str	r3, [r1, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8000304:	2310      	movs	r3, #16
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000306:	68d2      	ldr	r2, [r2, #12]
 8000308:	0750      	lsls	r0, r2, #29
 800030a:	d506      	bpl.n	800031a <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800030c:	490b      	ldr	r1, [pc, #44]	; (800033c <FLASH_SetErrorCode+0x4c>)
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 800030e:	f043 0304 	orr.w	r3, r3, #4
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8000312:	69ca      	ldr	r2, [r1, #28]
 8000314:	f042 0201 	orr.w	r2, r2, #1
 8000318:	61ca      	str	r2, [r1, #28]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800031a:	4a07      	ldr	r2, [pc, #28]	; (8000338 <FLASH_SetErrorCode+0x48>)
 800031c:	69d1      	ldr	r1, [r2, #28]
 800031e:	07c9      	lsls	r1, r1, #31
 8000320:	d508      	bpl.n	8000334 <FLASH_SetErrorCode+0x44>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8000322:	4806      	ldr	r0, [pc, #24]	; (800033c <FLASH_SetErrorCode+0x4c>)
 8000324:	69c1      	ldr	r1, [r0, #28]
 8000326:	f041 0104 	orr.w	r1, r1, #4
 800032a:	61c1      	str	r1, [r0, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800032c:	69d1      	ldr	r1, [r2, #28]
 800032e:	f021 0101 	bic.w	r1, r1, #1
 8000332:	61d1      	str	r1, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8000334:	60d3      	str	r3, [r2, #12]
}  
 8000336:	4770      	bx	lr
 8000338:	40022000 	.word	0x40022000
 800033c:	20000600 	.word	0x20000600

08000340 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000340:	4b06      	ldr	r3, [pc, #24]	; (800035c <HAL_FLASH_Unlock+0x1c>)
 8000342:	6918      	ldr	r0, [r3, #16]
 8000344:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000348:	d007      	beq.n	800035a <HAL_FLASH_Unlock+0x1a>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800034a:	4a05      	ldr	r2, [pc, #20]	; (8000360 <HAL_FLASH_Unlock+0x20>)
 800034c:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800034e:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 8000352:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000354:	6918      	ldr	r0, [r3, #16]
  HAL_StatusTypeDef status = HAL_OK;
 8000356:	f3c0 10c0 	ubfx	r0, r0, #7, #1
}
 800035a:	4770      	bx	lr
 800035c:	40022000 	.word	0x40022000
 8000360:	45670123 	.word	0x45670123

08000364 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8000364:	4a03      	ldr	r2, [pc, #12]	; (8000374 <HAL_FLASH_Lock+0x10>)
}
 8000366:	2000      	movs	r0, #0
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8000368:	6913      	ldr	r3, [r2, #16]
 800036a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800036e:	6113      	str	r3, [r2, #16]
}
 8000370:	4770      	bx	lr
 8000372:	bf00      	nop
 8000374:	40022000 	.word	0x40022000

08000378 <FLASH_WaitForLastOperation>:
{
 8000378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800037a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800037c:	f7ff ff28 	bl	80001d0 <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000380:	4d11      	ldr	r5, [pc, #68]	; (80003c8 <FLASH_WaitForLastOperation+0x50>)
  uint32_t tickstart = HAL_GetTick();
 8000382:	4607      	mov	r7, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000384:	462e      	mov	r6, r5
 8000386:	68eb      	ldr	r3, [r5, #12]
 8000388:	07d8      	lsls	r0, r3, #31
 800038a:	d412      	bmi.n	80003b2 <FLASH_WaitForLastOperation+0x3a>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800038c:	68eb      	ldr	r3, [r5, #12]
 800038e:	0699      	lsls	r1, r3, #26
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000390:	bf44      	itt	mi
 8000392:	2320      	movmi	r3, #32
 8000394:	60eb      	strmi	r3, [r5, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000396:	68f3      	ldr	r3, [r6, #12]
 8000398:	06da      	lsls	r2, r3, #27
 800039a:	d406      	bmi.n	80003aa <FLASH_WaitForLastOperation+0x32>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800039c:	69f3      	ldr	r3, [r6, #28]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800039e:	07db      	lsls	r3, r3, #31
 80003a0:	d403      	bmi.n	80003aa <FLASH_WaitForLastOperation+0x32>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80003a2:	68f0      	ldr	r0, [r6, #12]
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80003a4:	f010 0004 	ands.w	r0, r0, #4
 80003a8:	d007      	beq.n	80003ba <FLASH_WaitForLastOperation+0x42>
    FLASH_SetErrorCode();
 80003aa:	f7ff ffa1 	bl	80002f0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80003ae:	2001      	movs	r0, #1
 80003b0:	e003      	b.n	80003ba <FLASH_WaitForLastOperation+0x42>
    if (Timeout != HAL_MAX_DELAY)
 80003b2:	1c63      	adds	r3, r4, #1
 80003b4:	d0e7      	beq.n	8000386 <FLASH_WaitForLastOperation+0xe>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80003b6:	b90c      	cbnz	r4, 80003bc <FLASH_WaitForLastOperation+0x44>
        return HAL_TIMEOUT;
 80003b8:	2003      	movs	r0, #3
}
 80003ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80003bc:	f7ff ff08 	bl	80001d0 <HAL_GetTick>
 80003c0:	1bc0      	subs	r0, r0, r7
 80003c2:	42a0      	cmp	r0, r4
 80003c4:	d9df      	bls.n	8000386 <FLASH_WaitForLastOperation+0xe>
 80003c6:	e7f7      	b.n	80003b8 <FLASH_WaitForLastOperation+0x40>
 80003c8:	40022000 	.word	0x40022000

080003cc <HAL_FLASH_Program>:
{
 80003cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __HAL_LOCK(&pFlash);
 80003d0:	4e25      	ldr	r6, [pc, #148]	; (8000468 <HAL_FLASH_Program+0x9c>)
{
 80003d2:	461f      	mov	r7, r3
  __HAL_LOCK(&pFlash);
 80003d4:	7e33      	ldrb	r3, [r6, #24]
{
 80003d6:	4605      	mov	r5, r0
  __HAL_LOCK(&pFlash);
 80003d8:	2b01      	cmp	r3, #1
{
 80003da:	4688      	mov	r8, r1
 80003dc:	4691      	mov	r9, r2
  __HAL_LOCK(&pFlash);
 80003de:	d040      	beq.n	8000462 <HAL_FLASH_Program+0x96>
 80003e0:	2301      	movs	r3, #1
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80003e2:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 80003e6:	7633      	strb	r3, [r6, #24]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80003e8:	f7ff ffc6 	bl	8000378 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 80003ec:	bba8      	cbnz	r0, 800045a <HAL_FLASH_Program+0x8e>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80003ee:	2d01      	cmp	r5, #1
 80003f0:	d003      	beq.n	80003fa <HAL_FLASH_Program+0x2e>
      nbiterations = 4U;
 80003f2:	2d02      	cmp	r5, #2
 80003f4:	bf0c      	ite	eq
 80003f6:	2502      	moveq	r5, #2
 80003f8:	2504      	movne	r5, #4
 80003fa:	f04f 0a00 	mov.w	sl, #0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80003fe:	4653      	mov	r3, sl
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000400:	f8df b068 	ldr.w	fp, [pc, #104]	; 800046c <HAL_FLASH_Program+0xa0>
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000404:	ea4f 140a 	mov.w	r4, sl, lsl #4
 8000408:	f1c4 0120 	rsb	r1, r4, #32
 800040c:	f1a4 0220 	sub.w	r2, r4, #32
 8000410:	fa07 f101 	lsl.w	r1, r7, r1
 8000414:	fa29 f404 	lsr.w	r4, r9, r4
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000418:	61f3      	str	r3, [r6, #28]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 800041a:	430c      	orrs	r4, r1
 800041c:	fa27 f202 	lsr.w	r2, r7, r2
 8000420:	4314      	orrs	r4, r2
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000422:	f8db 2010 	ldr.w	r2, [fp, #16]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000426:	b2a4      	uxth	r4, r4
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000428:	f042 0201 	orr.w	r2, r2, #1
 800042c:	f8cb 2010 	str.w	r2, [fp, #16]
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000430:	f24c 3050 	movw	r0, #50000	; 0xc350
  *(__IO uint16_t*)Address = Data;
 8000434:	f828 401a 	strh.w	r4, [r8, sl, lsl #1]
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000438:	f7ff ff9e 	bl	8000378 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800043c:	f8db 2010 	ldr.w	r2, [fp, #16]
 8000440:	f022 0201 	bic.w	r2, r2, #1
 8000444:	f8cb 2010 	str.w	r2, [fp, #16]
      if (status != HAL_OK)
 8000448:	b938      	cbnz	r0, 800045a <HAL_FLASH_Program+0x8e>
    for (index = 0U; index < nbiterations; index++)
 800044a:	f10a 0a01 	add.w	sl, sl, #1
 800044e:	fa5f f28a 	uxtb.w	r2, sl
 8000452:	4295      	cmp	r5, r2
 8000454:	f04f 0300 	mov.w	r3, #0
 8000458:	d8d4      	bhi.n	8000404 <HAL_FLASH_Program+0x38>
  __HAL_UNLOCK(&pFlash);
 800045a:	2300      	movs	r3, #0
 800045c:	7633      	strb	r3, [r6, #24]
}
 800045e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  __HAL_LOCK(&pFlash);
 8000462:	2002      	movs	r0, #2
 8000464:	e7fb      	b.n	800045e <HAL_FLASH_Program+0x92>
 8000466:	bf00      	nop
 8000468:	20000600 	.word	0x20000600
 800046c:	40022000 	.word	0x40022000

08000470 <FLASH_MassErase.isra.0>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000470:	2200      	movs	r2, #0
 8000472:	4b06      	ldr	r3, [pc, #24]	; (800048c <FLASH_MassErase.isra.0+0x1c>)
 8000474:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8000476:	4b06      	ldr	r3, [pc, #24]	; (8000490 <FLASH_MassErase.isra.0+0x20>)
 8000478:	691a      	ldr	r2, [r3, #16]
 800047a:	f042 0204 	orr.w	r2, r2, #4
 800047e:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000480:	691a      	ldr	r2, [r3, #16]
 8000482:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000486:	611a      	str	r2, [r3, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8000488:	4770      	bx	lr
 800048a:	bf00      	nop
 800048c:	20000600 	.word	0x20000600
 8000490:	40022000 	.word	0x40022000

08000494 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000494:	2200      	movs	r2, #0
 8000496:	4b06      	ldr	r3, [pc, #24]	; (80004b0 <FLASH_PageErase+0x1c>)
 8000498:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800049a:	4b06      	ldr	r3, [pc, #24]	; (80004b4 <FLASH_PageErase+0x20>)
 800049c:	691a      	ldr	r2, [r3, #16]
 800049e:	f042 0202 	orr.w	r2, r2, #2
 80004a2:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80004a4:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80004a6:	691a      	ldr	r2, [r3, #16]
 80004a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80004ac:	611a      	str	r2, [r3, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80004ae:	4770      	bx	lr
 80004b0:	20000600 	.word	0x20000600
 80004b4:	40022000 	.word	0x40022000

080004b8 <HAL_FLASHEx_Erase>:
{
 80004b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(&pFlash);
 80004bc:	4e22      	ldr	r6, [pc, #136]	; (8000548 <HAL_FLASHEx_Erase+0x90>)
{
 80004be:	4605      	mov	r5, r0
  __HAL_LOCK(&pFlash);
 80004c0:	7e33      	ldrb	r3, [r6, #24]
{
 80004c2:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 80004c4:	2b01      	cmp	r3, #1
 80004c6:	d03d      	beq.n	8000544 <HAL_FLASHEx_Erase+0x8c>
 80004c8:	2401      	movs	r4, #1
 80004ca:	7634      	strb	r4, [r6, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80004cc:	6803      	ldr	r3, [r0, #0]
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80004ce:	f24c 3050 	movw	r0, #50000	; 0xc350
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80004d2:	2b02      	cmp	r3, #2
 80004d4:	d113      	bne.n	80004fe <HAL_FLASHEx_Erase+0x46>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80004d6:	f7ff ff4f 	bl	8000378 <FLASH_WaitForLastOperation>
 80004da:	b120      	cbz	r0, 80004e6 <HAL_FLASHEx_Erase+0x2e>
  HAL_StatusTypeDef status = HAL_ERROR;
 80004dc:	2001      	movs	r0, #1
  __HAL_UNLOCK(&pFlash);
 80004de:	2300      	movs	r3, #0
 80004e0:	7633      	strb	r3, [r6, #24]
}
 80004e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        FLASH_MassErase(FLASH_BANK_1);
 80004e6:	f7ff ffc3 	bl	8000470 <FLASH_MassErase.isra.0>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80004ea:	f24c 3050 	movw	r0, #50000	; 0xc350
 80004ee:	f7ff ff43 	bl	8000378 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80004f2:	4a16      	ldr	r2, [pc, #88]	; (800054c <HAL_FLASHEx_Erase+0x94>)
 80004f4:	6913      	ldr	r3, [r2, #16]
 80004f6:	f023 0304 	bic.w	r3, r3, #4
 80004fa:	6113      	str	r3, [r2, #16]
 80004fc:	e7ef      	b.n	80004de <HAL_FLASHEx_Erase+0x26>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80004fe:	f7ff ff3b 	bl	8000378 <FLASH_WaitForLastOperation>
 8000502:	2800      	cmp	r0, #0
 8000504:	d1ea      	bne.n	80004dc <HAL_FLASHEx_Erase+0x24>
        *PageError = 0xFFFFFFFFU;
 8000506:	f04f 33ff 	mov.w	r3, #4294967295
 800050a:	f8c8 3000 	str.w	r3, [r8]
  HAL_StatusTypeDef status = HAL_ERROR;
 800050e:	4620      	mov	r0, r4
        for(address = pEraseInit->PageAddress;
 8000510:	68af      	ldr	r7, [r5, #8]
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8000512:	4c0e      	ldr	r4, [pc, #56]	; (800054c <HAL_FLASHEx_Erase+0x94>)
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8000514:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
 8000518:	eb03 2382 	add.w	r3, r3, r2, lsl #10
        for(address = pEraseInit->PageAddress;
 800051c:	42bb      	cmp	r3, r7
 800051e:	d9de      	bls.n	80004de <HAL_FLASHEx_Erase+0x26>
          FLASH_PageErase(address);
 8000520:	4638      	mov	r0, r7
 8000522:	f7ff ffb7 	bl	8000494 <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000526:	f24c 3050 	movw	r0, #50000	; 0xc350
 800052a:	f7ff ff25 	bl	8000378 <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800052e:	6923      	ldr	r3, [r4, #16]
 8000530:	f023 0302 	bic.w	r3, r3, #2
 8000534:	6123      	str	r3, [r4, #16]
          if (status != HAL_OK)
 8000536:	b110      	cbz	r0, 800053e <HAL_FLASHEx_Erase+0x86>
            *PageError = address;
 8000538:	f8c8 7000 	str.w	r7, [r8]
            break;
 800053c:	e7cf      	b.n	80004de <HAL_FLASHEx_Erase+0x26>
            address += FLASH_PAGE_SIZE)
 800053e:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8000542:	e7e7      	b.n	8000514 <HAL_FLASHEx_Erase+0x5c>
  __HAL_LOCK(&pFlash);
 8000544:	2002      	movs	r0, #2
 8000546:	e7cc      	b.n	80004e2 <HAL_FLASHEx_Erase+0x2a>
 8000548:	20000600 	.word	0x20000600
 800054c:	40022000 	.word	0x40022000

08000550 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000550:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 8000554:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000556:	4616      	mov	r6, r2
 8000558:	4b64      	ldr	r3, [pc, #400]	; (80006ec <HAL_GPIO_Init+0x19c>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800055a:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 80006fc <HAL_GPIO_Init+0x1ac>
 800055e:	f8df e1a0 	ldr.w	lr, [pc, #416]	; 8000700 <HAL_GPIO_Init+0x1b0>
    ioposition = (0x01U << position);
 8000562:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000566:	680d      	ldr	r5, [r1, #0]
    ioposition = (0x01U << position);
 8000568:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800056c:	ea08 0405 	and.w	r4, r8, r5
    if (iocurrent == ioposition)
 8000570:	ea38 0505 	bics.w	r5, r8, r5
 8000574:	d17c      	bne.n	8000670 <HAL_GPIO_Init+0x120>
      switch (GPIO_Init->Mode)
 8000576:	684d      	ldr	r5, [r1, #4]
 8000578:	2d03      	cmp	r5, #3
 800057a:	d807      	bhi.n	800058c <HAL_GPIO_Init+0x3c>
 800057c:	3d01      	subs	r5, #1
 800057e:	2d02      	cmp	r5, #2
 8000580:	f200 808e 	bhi.w	80006a0 <HAL_GPIO_Init+0x150>
 8000584:	e8df f005 	tbb	[pc, r5]
 8000588:	a19c      	.short	0xa19c
 800058a:	a7          	.byte	0xa7
 800058b:	00          	.byte	0x00
 800058c:	2d12      	cmp	r5, #18
 800058e:	f000 809f 	beq.w	80006d0 <HAL_GPIO_Init+0x180>
 8000592:	d874      	bhi.n	800067e <HAL_GPIO_Init+0x12e>
 8000594:	2d11      	cmp	r5, #17
 8000596:	f000 8095 	beq.w	80006c4 <HAL_GPIO_Init+0x174>
          break;
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800059a:	2cff      	cmp	r4, #255	; 0xff
 800059c:	bf98      	it	ls
 800059e:	4682      	movls	sl, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80005a0:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80005a4:	bf88      	it	hi
 80005a6:	f100 0a04 	addhi.w	sl, r0, #4
 80005aa:	ea4f 0586 	mov.w	r5, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80005ae:	f8da 8000 	ldr.w	r8, [sl]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 80005b2:	bf88      	it	hi
 80005b4:	3d20      	subhi	r5, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80005b6:	fa09 fb05 	lsl.w	fp, r9, r5
 80005ba:	ea28 080b 	bic.w	r8, r8, fp
 80005be:	fa02 f505 	lsl.w	r5, r2, r5
 80005c2:	ea48 0505 	orr.w	r5, r8, r5
 80005c6:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80005ca:	f8d1 a004 	ldr.w	sl, [r1, #4]
 80005ce:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 80005d2:	d04d      	beq.n	8000670 <HAL_GPIO_Init+0x120>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80005d4:	4f46      	ldr	r7, [pc, #280]	; (80006f0 <HAL_GPIO_Init+0x1a0>)
 80005d6:	f026 0803 	bic.w	r8, r6, #3
 80005da:	69bd      	ldr	r5, [r7, #24]
 80005dc:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 80005e0:	f045 0501 	orr.w	r5, r5, #1
 80005e4:	61bd      	str	r5, [r7, #24]
 80005e6:	69bd      	ldr	r5, [r7, #24]
 80005e8:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
 80005ec:	f005 0501 	and.w	r5, r5, #1
 80005f0:	9501      	str	r5, [sp, #4]
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80005f2:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 80005f6:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80005f8:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 80005fc:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000600:	fa09 f90b 	lsl.w	r9, r9, fp
 8000604:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000608:	4d3a      	ldr	r5, [pc, #232]	; (80006f4 <HAL_GPIO_Init+0x1a4>)
 800060a:	42a8      	cmp	r0, r5
 800060c:	d067      	beq.n	80006de <HAL_GPIO_Init+0x18e>
 800060e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000612:	42a8      	cmp	r0, r5
 8000614:	d065      	beq.n	80006e2 <HAL_GPIO_Init+0x192>
 8000616:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800061a:	42a8      	cmp	r0, r5
 800061c:	d063      	beq.n	80006e6 <HAL_GPIO_Init+0x196>
 800061e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000622:	42a8      	cmp	r0, r5
 8000624:	bf0c      	ite	eq
 8000626:	2503      	moveq	r5, #3
 8000628:	2504      	movne	r5, #4
 800062a:	fa05 f50b 	lsl.w	r5, r5, fp
 800062e:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 8000632:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000636:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000638:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 800063c:	bf14      	ite	ne
 800063e:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000640:	43a5      	biceq	r5, r4
 8000642:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000644:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000646:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 800064a:	bf14      	ite	ne
 800064c:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800064e:	43a5      	biceq	r5, r4
 8000650:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000652:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000654:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8000658:	bf14      	ite	ne
 800065a:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800065c:	43a5      	biceq	r5, r4
 800065e:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000660:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000662:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8000666:	bf14      	ite	ne
 8000668:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800066a:	ea25 0404 	biceq.w	r4, r5, r4
 800066e:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000670:	3601      	adds	r6, #1
 8000672:	2e10      	cmp	r6, #16
 8000674:	f47f af75 	bne.w	8000562 <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 8000678:	b003      	add	sp, #12
 800067a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 800067e:	4f1e      	ldr	r7, [pc, #120]	; (80006f8 <HAL_GPIO_Init+0x1a8>)
 8000680:	42bd      	cmp	r5, r7
 8000682:	d00d      	beq.n	80006a0 <HAL_GPIO_Init+0x150>
 8000684:	d818      	bhi.n	80006b8 <HAL_GPIO_Init+0x168>
 8000686:	f8df 907c 	ldr.w	r9, [pc, #124]	; 8000704 <HAL_GPIO_Init+0x1b4>
 800068a:	454d      	cmp	r5, r9
 800068c:	d008      	beq.n	80006a0 <HAL_GPIO_Init+0x150>
 800068e:	f509 2970 	add.w	r9, r9, #983040	; 0xf0000
 8000692:	454d      	cmp	r5, r9
 8000694:	d004      	beq.n	80006a0 <HAL_GPIO_Init+0x150>
 8000696:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 800069a:	454d      	cmp	r5, r9
 800069c:	f47f af7d 	bne.w	800059a <HAL_GPIO_Init+0x4a>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80006a0:	688a      	ldr	r2, [r1, #8]
 80006a2:	b1d2      	cbz	r2, 80006da <HAL_GPIO_Init+0x18a>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80006a4:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 80006a6:	bf08      	it	eq
 80006a8:	f8c0 8010 	streq.w	r8, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80006ac:	f04f 0208 	mov.w	r2, #8
            GPIOx->BRR = ioposition;
 80006b0:	bf18      	it	ne
 80006b2:	f8c0 8014 	strne.w	r8, [r0, #20]
 80006b6:	e770      	b.n	800059a <HAL_GPIO_Init+0x4a>
      switch (GPIO_Init->Mode)
 80006b8:	4565      	cmp	r5, ip
 80006ba:	d0f1      	beq.n	80006a0 <HAL_GPIO_Init+0x150>
 80006bc:	4575      	cmp	r5, lr
 80006be:	e7ed      	b.n	800069c <HAL_GPIO_Init+0x14c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80006c0:	68ca      	ldr	r2, [r1, #12]
          break;
 80006c2:	e76a      	b.n	800059a <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80006c4:	68ca      	ldr	r2, [r1, #12]
 80006c6:	3204      	adds	r2, #4
          break;
 80006c8:	e767      	b.n	800059a <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80006ca:	68ca      	ldr	r2, [r1, #12]
 80006cc:	3208      	adds	r2, #8
          break;
 80006ce:	e764      	b.n	800059a <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80006d0:	68ca      	ldr	r2, [r1, #12]
 80006d2:	320c      	adds	r2, #12
          break;
 80006d4:	e761      	b.n	800059a <HAL_GPIO_Init+0x4a>
      switch (GPIO_Init->Mode)
 80006d6:	2200      	movs	r2, #0
 80006d8:	e75f      	b.n	800059a <HAL_GPIO_Init+0x4a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80006da:	2204      	movs	r2, #4
 80006dc:	e75d      	b.n	800059a <HAL_GPIO_Init+0x4a>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80006de:	2500      	movs	r5, #0
 80006e0:	e7a3      	b.n	800062a <HAL_GPIO_Init+0xda>
 80006e2:	2501      	movs	r5, #1
 80006e4:	e7a1      	b.n	800062a <HAL_GPIO_Init+0xda>
 80006e6:	2502      	movs	r5, #2
 80006e8:	e79f      	b.n	800062a <HAL_GPIO_Init+0xda>
 80006ea:	bf00      	nop
 80006ec:	40010400 	.word	0x40010400
 80006f0:	40021000 	.word	0x40021000
 80006f4:	40010800 	.word	0x40010800
 80006f8:	10220000 	.word	0x10220000
 80006fc:	10310000 	.word	0x10310000
 8000700:	10320000 	.word	0x10320000
 8000704:	10120000 	.word	0x10120000

08000708 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000708:	6883      	ldr	r3, [r0, #8]
 800070a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 800070c:	bf14      	ite	ne
 800070e:	2001      	movne	r0, #1
 8000710:	2000      	moveq	r0, #0
 8000712:	4770      	bx	lr

08000714 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and create the associated handle.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t index = 0U;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8000718:	4604      	mov	r4, r0
{
 800071a:	b086      	sub	sp, #24
  if(hpcd == NULL)
 800071c:	2800      	cmp	r0, #0
 800071e:	d05e      	beq.n	80007de <HAL_PCD_Init+0xca>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if(hpcd->State == HAL_PCD_STATE_RESET)
 8000720:	f890 3429 	ldrb.w	r3, [r0, #1065]	; 0x429
 8000724:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000728:	b91b      	cbnz	r3, 8000732 <HAL_PCD_Init+0x1e>
  {  
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800072a:	f880 2428 	strb.w	r2, [r0, #1064]	; 0x428

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800072e:	f002 f8dd 	bl	80028ec <HAL_PCD_MspInit>
  }
  
  hpcd->State = HAL_PCD_STATE_BUSY;
 8000732:	2303      	movs	r3, #3
  
  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000734:	4625      	mov	r5, r4

  /*Init the Core (common init.) */
  USB_CoreInit(hpcd->Instance, hpcd->Init);
 8000736:	466e      	mov	r6, sp
  hpcd->State = HAL_PCD_STATE_BUSY;
 8000738:	f884 3429 	strb.w	r3, [r4, #1065]	; 0x429
  __HAL_PCD_DISABLE(hpcd);
 800073c:	f855 0b10 	ldr.w	r0, [r5], #16
 8000740:	f000 feaa 	bl	8001498 <USB_DisableGlobalInt>
  USB_CoreInit(hpcd->Instance, hpcd->Init);
 8000744:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000746:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000748:	682b      	ldr	r3, [r5, #0]
 800074a:	f104 0804 	add.w	r8, r4, #4
 800074e:	6033      	str	r3, [r6, #0]
 8000750:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8000754:	6820      	ldr	r0, [r4, #0]
 8000756:	f000 fe8f 	bl	8001478 <USB_CoreInit>
 
  /* Force Device Mode*/
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 800075a:	2100      	movs	r1, #0
 800075c:	6820      	ldr	r0, [r4, #0]
 800075e:	f000 fea5 	bl	80014ac <USB_SetCurrentMode>
 
  /* Init endpoints structures */
  for (index = 0U; index < 15U ; index++)
 8000762:	2100      	movs	r1, #0
 8000764:	4623      	mov	r3, r4
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 8000766:	4622      	mov	r2, r4
  {
    /* Init ep structure */
    hpcd->IN_ep[index].is_in = 1U;
 8000768:	2601      	movs	r6, #1
    hpcd->IN_ep[index].num = index;
    hpcd->IN_ep[index].tx_fifo_num = index;
    /* Control until ep is actvated */
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 800076a:	4608      	mov	r0, r1
 800076c:	f104 0510 	add.w	r5, r4, #16
    hpcd->IN_ep[index].num = index;
 8000770:	f882 1028 	strb.w	r1, [r2, #40]	; 0x28
    hpcd->IN_ep[index].tx_fifo_num = index;
 8000774:	8691      	strh	r1, [r2, #52]	; 0x34
  for (index = 0U; index < 15U ; index++)
 8000776:	3101      	adds	r1, #1
 8000778:	290f      	cmp	r1, #15
    hpcd->IN_ep[index].maxpacket =  0U;
    hpcd->IN_ep[index].xfer_buff = 0U;
 800077a:	e9c2 000e 	strd	r0, r0, [r2, #56]	; 0x38
    hpcd->IN_ep[index].is_in = 1U;
 800077e:	f882 6029 	strb.w	r6, [r2, #41]	; 0x29
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 8000782:	f882 002b 	strb.w	r0, [r2, #43]	; 0x2b
    hpcd->IN_ep[index].xfer_len = 0U;
 8000786:	6410      	str	r0, [r2, #64]	; 0x40
  for (index = 0U; index < 15U ; index++)
 8000788:	f102 0220 	add.w	r2, r2, #32
 800078c:	d1f0      	bne.n	8000770 <HAL_PCD_Init+0x5c>
  }
 
  for (index = 0U; index < 15U ; index++)
 800078e:	2200      	movs	r2, #0
  {
    hpcd->OUT_ep[index].is_in = 0U;
 8000790:	4617      	mov	r7, r2
    hpcd->OUT_ep[index].num = index;
 8000792:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
    hpcd->IN_ep[index].tx_fifo_num = index;
 8000796:	869a      	strh	r2, [r3, #52]	; 0x34
  for (index = 0U; index < 15U ; index++)
 8000798:	3201      	adds	r2, #1
 800079a:	2a0f      	cmp	r2, #15
    /* Control until ep is activated */
    hpcd->OUT_ep[index].type = EP_TYPE_CTRL;
    hpcd->OUT_ep[index].maxpacket = 0U;
    hpcd->OUT_ep[index].xfer_buff = 0U;
 800079c:	e9c3 778e 	strd	r7, r7, [r3, #568]	; 0x238
    hpcd->OUT_ep[index].is_in = 0U;
 80007a0:	f883 7229 	strb.w	r7, [r3, #553]	; 0x229
    hpcd->OUT_ep[index].type = EP_TYPE_CTRL;
 80007a4:	f883 722b 	strb.w	r7, [r3, #555]	; 0x22b
    hpcd->OUT_ep[index].xfer_len = 0U;
 80007a8:	f8c3 7240 	str.w	r7, [r3, #576]	; 0x240
  for (index = 0U; index < 15U ; index++)
 80007ac:	f103 0320 	add.w	r3, r3, #32
 80007b0:	d1ef      	bne.n	8000792 <HAL_PCD_Init+0x7e>
  }
  
  /* Init Device */
  USB_DevInit(hpcd->Instance, hpcd->Init);
 80007b2:	466e      	mov	r6, sp
 80007b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007b6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80007b8:	682b      	ldr	r3, [r5, #0]
 80007ba:	6033      	str	r3, [r6, #0]
 80007bc:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 80007c0:	6820      	ldr	r0, [r4, #0]
 80007c2:	f000 fe75 	bl	80014b0 <USB_DevInit>
  
  hpcd->USB_Address = 0U;
  hpcd->State= HAL_PCD_STATE_READY;
 80007c6:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 80007c8:	f884 7024 	strb.w	r7, [r4, #36]	; 0x24
  
  USB_DevDisconnect (hpcd->Instance);  
 80007cc:	6820      	ldr	r0, [r4, #0]
  hpcd->State= HAL_PCD_STATE_READY;
 80007ce:	f884 3429 	strb.w	r3, [r4, #1065]	; 0x429
  USB_DevDisconnect (hpcd->Instance);  
 80007d2:	f001 f87c 	bl	80018ce <USB_DevDisconnect>
  return HAL_OK;
 80007d6:	2000      	movs	r0, #0
}
 80007d8:	b006      	add	sp, #24
 80007da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 80007de:	2001      	movs	r0, #1
 80007e0:	e7fa      	b.n	80007d8 <HAL_PCD_Init+0xc4>

080007e2 <HAL_PCD_Start>:
  * @brief  Start The USB Device.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80007e2:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 80007e4:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
{
 80007e8:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80007ea:	2b01      	cmp	r3, #1
 80007ec:	d00e      	beq.n	800080c <HAL_PCD_Start+0x2a>
 80007ee:	2101      	movs	r1, #1
 80007f0:	f880 1428 	strb.w	r1, [r0, #1064]	; 0x428
  HAL_PCDEx_SetConnectionState (hpcd, 1);
 80007f4:	f002 f98d 	bl	8002b12 <HAL_PCDEx_SetConnectionState>
  USB_DevConnect (hpcd->Instance);
 80007f8:	6820      	ldr	r0, [r4, #0]
 80007fa:	f001 f866 	bl	80018ca <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80007fe:	6820      	ldr	r0, [r4, #0]
 8000800:	f000 fe41 	bl	8001486 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8000804:	2000      	movs	r0, #0
 8000806:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return HAL_OK;
}
 800080a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800080c:	2002      	movs	r0, #2
 800080e:	e7fc      	b.n	800080a <HAL_PCD_Start+0x28>

08000810 <HAL_PCD_Stop>:
  * @brief  Stop The USB Device.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 8000810:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8000812:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
{
 8000816:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000818:	2b01      	cmp	r3, #1
 800081a:	d00f      	beq.n	800083c <HAL_PCD_Stop+0x2c>
 800081c:	2301      	movs	r3, #1
 800081e:	f880 3428 	strb.w	r3, [r0, #1064]	; 0x428
  __HAL_PCD_DISABLE(hpcd);
 8000822:	6800      	ldr	r0, [r0, #0]
 8000824:	f000 fe38 	bl	8001498 <USB_DisableGlobalInt>
  USB_StopDevice(hpcd->Instance);
 8000828:	6820      	ldr	r0, [r4, #0]
 800082a:	f001 f83d 	bl	80018a8 <USB_StopDevice>
  USB_DevDisconnect (hpcd->Instance);
 800082e:	6820      	ldr	r0, [r4, #0]
 8000830:	f001 f84d 	bl	80018ce <USB_DevDisconnect>
  __HAL_UNLOCK(hpcd);
 8000834:	2000      	movs	r0, #0
 8000836:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return HAL_OK;
}
 800083a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800083c:	2002      	movs	r0, #2
 800083e:	e7fc      	b.n	800083a <HAL_PCD_Stop+0x2a>

08000840 <HAL_PCD_SetAddress>:
  * @param  hpcd: PCD handle
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8000840:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8000842:	f890 2428 	ldrb.w	r2, [r0, #1064]	; 0x428
{
 8000846:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000848:	2a01      	cmp	r2, #1
 800084a:	d00b      	beq.n	8000864 <HAL_PCD_SetAddress+0x24>
 800084c:	2201      	movs	r2, #1
  hpcd->USB_Address = address;
 800084e:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
  __HAL_LOCK(hpcd);
 8000852:	f880 2428 	strb.w	r2, [r0, #1064]	; 0x428
  USB_SetDevAddress(hpcd->Instance, address);
 8000856:	6800      	ldr	r0, [r0, #0]
 8000858:	f001 f831 	bl	80018be <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800085c:	2000      	movs	r0, #0
 800085e:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return HAL_OK;
}
 8000862:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8000864:	2002      	movs	r0, #2
 8000866:	e7fc      	b.n	8000862 <HAL_PCD_SetAddress+0x22>

08000868 <HAL_PCD_EP_Open>:
  * @param  ep_mps: endpoint max packet size
  * @param  ep_type: endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8000868:	b538      	push	{r3, r4, r5, lr}
 800086a:	4604      	mov	r4, r0
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep = NULL;
  
  if ((ep_addr & 0x80U) == 0x80U)
 800086c:	b248      	sxtb	r0, r1
 800086e:	2800      	cmp	r0, #0
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000870:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 8000874:	bfb5      	itete	lt
 8000876:	eb04 1145 	addlt.w	r1, r4, r5, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 800087a:	eb04 1141 	addge.w	r1, r4, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 800087e:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8000880:	f501 710a 	addge.w	r1, r1, #552	; 0x228
  }
  ep->num   = ep_addr & 0x7FU;
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 8000884:	0fc0      	lsrs	r0, r0, #31
  ep->num   = ep_addr & 0x7FU;
 8000886:	700d      	strb	r5, [r1, #0]
  ep->is_in = (0x80U & ep_addr) != 0U;
 8000888:	7048      	strb	r0, [r1, #1]
  ep->maxpacket = ep_mps;
 800088a:	610a      	str	r2, [r1, #16]
  ep->type = ep_type;
 800088c:	70cb      	strb	r3, [r1, #3]
    
  __HAL_LOCK(hpcd);
 800088e:	f894 3428 	ldrb.w	r3, [r4, #1064]	; 0x428
 8000892:	2b01      	cmp	r3, #1
 8000894:	d009      	beq.n	80008aa <HAL_PCD_EP_Open+0x42>
 8000896:	2301      	movs	r3, #1
  USB_ActivateEndpoint(hpcd->Instance , ep);
 8000898:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800089a:	f884 3428 	strb.w	r3, [r4, #1064]	; 0x428
  USB_ActivateEndpoint(hpcd->Instance , ep);
 800089e:	f000 fe23 	bl	80014e8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80008a2:	2000      	movs	r0, #0
 80008a4:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return ret;
}
 80008a8:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 80008aa:	2002      	movs	r0, #2
 80008ac:	e7fc      	b.n	80008a8 <HAL_PCD_EP_Open+0x40>

080008ae <HAL_PCD_EP_Receive>:
  * @param  pBuf: pointer to the reception buffer
  * @param  len: amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80008ae:	b538      	push	{r3, r4, r5, lr}
  ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
  ep->xfer_len = len;
  ep->xfer_count = 0U;
 80008b0:	2500      	movs	r5, #0
 80008b2:	f001 017f 	and.w	r1, r1, #127	; 0x7f
  ep->xfer_buff = pBuf;  
 80008b6:	eb00 1441 	add.w	r4, r0, r1, lsl #5
  ep->is_in = 0U;
  ep->num = ep_addr & 0x7FU;
 80008ba:	f884 1228 	strb.w	r1, [r4, #552]	; 0x228
  ep->xfer_len = len;
 80008be:	e9c4 238f 	strd	r2, r3, [r4, #572]	; 0x23c
  ep->xfer_count = 0U;
 80008c2:	f8c4 5244 	str.w	r5, [r4, #580]	; 0x244
  ep->is_in = 0U;
 80008c6:	f884 5229 	strb.w	r5, [r4, #553]	; 0x229
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 80008ca:	f504 710a 	add.w	r1, r4, #552	; 0x228
 80008ce:	6800      	ldr	r0, [r0, #0]
 80008d0:	f001 f814 	bl	80018fc <USB_EPStartXfer>
  }

  return HAL_OK;
}
 80008d4:	4628      	mov	r0, r5
 80008d6:	bd38      	pop	{r3, r4, r5, pc}

080008d8 <HAL_PCD_EP_Transmit>:
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
  PCD_EPTypeDef *ep = NULL;
  
  ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 80008d8:	f001 017f 	and.w	r1, r1, #127	; 0x7f
{
 80008dc:	b538      	push	{r3, r4, r5, lr}
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 80008de:	eb00 1441 	add.w	r4, r0, r1, lsl #5
  ep->xfer_len = len;
  ep->xfer_count = 0U;
 80008e2:	2500      	movs	r5, #0
  ep->xfer_len = len;
 80008e4:	e9c4 230f 	strd	r2, r3, [r4, #60]	; 0x3c
  ep->is_in = 1U;
  ep->num = ep_addr & 0x7FU;
 80008e8:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
  ep->is_in = 1U;
 80008ec:	2301      	movs	r3, #1
  ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 80008ee:	4621      	mov	r1, r4
  ep->xfer_count = 0U;
 80008f0:	6465      	str	r5, [r4, #68]	; 0x44
  ep->is_in = 1U;
 80008f2:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 80008f6:	3128      	adds	r1, #40	; 0x28
 80008f8:	6800      	ldr	r0, [r0, #0]
 80008fa:	f000 ffff 	bl	80018fc <USB_EPStartXfer>
  }

  return HAL_OK;
}
 80008fe:	4628      	mov	r0, r5
 8000900:	bd38      	pop	{r3, r4, r5, pc}
	...

08000904 <HAL_PCD_IRQHandler>:
{ 
 8000904:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8000908:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 800090a:	6800      	ldr	r0, [r0, #0]
 800090c:	f000 ffe1 	bl	80018d2 <USB_ReadInterrupts>
 8000910:	0400      	lsls	r0, r0, #16
 8000912:	f100 8098 	bmi.w	8000a46 <HAL_PCD_IRQHandler+0x142>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))
 8000916:	6820      	ldr	r0, [r4, #0]
 8000918:	f000 ffdb 	bl	80018d2 <USB_ReadInterrupts>
 800091c:	0541      	lsls	r1, r0, #21
 800091e:	d50f      	bpl.n	8000940 <HAL_PCD_IRQHandler+0x3c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000920:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResetCallback(hpcd);
 8000922:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000924:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000928:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800092c:	041b      	lsls	r3, r3, #16
 800092e:	0c1b      	lsrs	r3, r3, #16
 8000930:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8000934:	f002 f813 	bl	800295e <HAL_PCD_ResetCallback>
    HAL_PCD_SetAddress(hpcd, 0U);
 8000938:	2100      	movs	r1, #0
 800093a:	4620      	mov	r0, r4
 800093c:	f7ff ff80 	bl	8000840 <HAL_PCD_SetAddress>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_PMAOVR))
 8000940:	6820      	ldr	r0, [r4, #0]
 8000942:	f000 ffc6 	bl	80018d2 <USB_ReadInterrupts>
 8000946:	0447      	lsls	r7, r0, #17
 8000948:	d508      	bpl.n	800095c <HAL_PCD_IRQHandler+0x58>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);    
 800094a:	6822      	ldr	r2, [r4, #0]
 800094c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000950:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000954:	041b      	lsls	r3, r3, #16
 8000956:	0c1b      	lsrs	r3, r3, #16
 8000958:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ERR))
 800095c:	6820      	ldr	r0, [r4, #0]
 800095e:	f000 ffb8 	bl	80018d2 <USB_ReadInterrupts>
 8000962:	0486      	lsls	r6, r0, #18
 8000964:	d508      	bpl.n	8000978 <HAL_PCD_IRQHandler+0x74>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR); 
 8000966:	6822      	ldr	r2, [r4, #0]
 8000968:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800096c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000970:	041b      	lsls	r3, r3, #16
 8000972:	0c1b      	lsrs	r3, r3, #16
 8000974:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP))
 8000978:	6820      	ldr	r0, [r4, #0]
 800097a:	f000 ffaa 	bl	80018d2 <USB_ReadInterrupts>
 800097e:	04c5      	lsls	r5, r0, #19
 8000980:	d51c      	bpl.n	80009bc <HAL_PCD_IRQHandler+0xb8>
    hpcd->Instance->CNTR &= ~(USB_CNTR_LP_MODE);
 8000982:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResumeCallback(hpcd);
 8000984:	4620      	mov	r0, r4
    hpcd->Instance->CNTR &= ~(USB_CNTR_LP_MODE);
 8000986:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 800098a:	f023 0304 	bic.w	r3, r3, #4
 800098e:	041b      	lsls	r3, r3, #16
 8000990:	0c1b      	lsrs	r3, r3, #16
 8000992:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= ~(USB_CNTR_FSUSP);
 8000996:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 800099a:	f023 0308 	bic.w	r3, r3, #8
 800099e:	041b      	lsls	r3, r3, #16
 80009a0:	0c1b      	lsrs	r3, r3, #16
 80009a2:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 80009a6:	f001 fff7 	bl	8002998 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);     
 80009aa:	6822      	ldr	r2, [r4, #0]
 80009ac:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80009b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80009b4:	041b      	lsls	r3, r3, #16
 80009b6:	0c1b      	lsrs	r3, r3, #16
 80009b8:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SUSP))
 80009bc:	6820      	ldr	r0, [r4, #0]
 80009be:	f000 ff88 	bl	80018d2 <USB_ReadInterrupts>
 80009c2:	0500      	lsls	r0, r0, #20
 80009c4:	d51d      	bpl.n	8000a02 <HAL_PCD_IRQHandler+0xfe>
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 80009c6:	6820      	ldr	r0, [r4, #0]
 80009c8:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 80009cc:	b29b      	uxth	r3, r3
 80009ce:	f043 0308 	orr.w	r3, r3, #8
 80009d2:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);  
 80009d6:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 80009da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80009de:	041b      	lsls	r3, r3, #16
 80009e0:	0c1b      	lsrs	r3, r3, #16
 80009e2:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 80009e6:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 80009ea:	b29b      	uxth	r3, r3
 80009ec:	f043 0304 	orr.w	r3, r3, #4
 80009f0:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP) == 0U)
 80009f4:	f000 ff6d 	bl	80018d2 <USB_ReadInterrupts>
 80009f8:	04c1      	lsls	r1, r0, #19
 80009fa:	d402      	bmi.n	8000a02 <HAL_PCD_IRQHandler+0xfe>
      HAL_PCD_SuspendCallback(hpcd);
 80009fc:	4620      	mov	r0, r4
 80009fe:	f001 ffbb 	bl	8002978 <HAL_PCD_SuspendCallback>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SOF))
 8000a02:	6820      	ldr	r0, [r4, #0]
 8000a04:	f000 ff65 	bl	80018d2 <USB_ReadInterrupts>
 8000a08:	0582      	lsls	r2, r0, #22
 8000a0a:	d50b      	bpl.n	8000a24 <HAL_PCD_IRQHandler+0x120>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 8000a0c:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SOFCallback(hpcd);
 8000a0e:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 8000a10:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000a14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000a18:	041b      	lsls	r3, r3, #16
 8000a1a:	0c1b      	lsrs	r3, r3, #16
 8000a1c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8000a20:	f001 ff99 	bl	8002956 <HAL_PCD_SOFCallback>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ESOF))
 8000a24:	6820      	ldr	r0, [r4, #0]
 8000a26:	f000 ff54 	bl	80018d2 <USB_ReadInterrupts>
 8000a2a:	05c3      	lsls	r3, r0, #23
 8000a2c:	d508      	bpl.n	8000a40 <HAL_PCD_IRQHandler+0x13c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF); 
 8000a2e:	6822      	ldr	r2, [r4, #0]
 8000a30:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000a34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000a38:	041b      	lsls	r3, r3, #16
 8000a3a:	0c1b      	lsrs	r3, r3, #16
 8000a3c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 8000a40:	b002      	add	sp, #8
 8000a42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
  PCD_EPTypeDef *ep = NULL;
  uint16_t count = 0;
  uint8_t epindex = 0;
  __IO uint16_t wIstr = 0;  
 8000a46:	2300      	movs	r3, #0
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
      {
        ep = &hpcd->IN_ep[epindex];
        
        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000a48:	4fc6      	ldr	r7, [pc, #792]	; (8000d64 <HAL_PCD_IRQHandler+0x460>)
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8000a4a:	f8df 831c 	ldr.w	r8, [pc, #796]	; 8000d68 <HAL_PCD_IRQHandler+0x464>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8000a4e:	f8df 931c 	ldr.w	r9, [pc, #796]	; 8000d6c <HAL_PCD_IRQHandler+0x468>
  __IO uint16_t wIstr = 0;  
 8000a52:	f8ad 3004 	strh.w	r3, [sp, #4]
  __IO uint16_t wEPVal = 0;
 8000a56:	f8ad 3006 	strh.w	r3, [sp, #6]
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0)
 8000a5a:	6820      	ldr	r0, [r4, #0]
 8000a5c:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8000a60:	b29b      	uxth	r3, r3
 8000a62:	f8ad 3004 	strh.w	r3, [sp, #4]
 8000a66:	041b      	lsls	r3, r3, #16
 8000a68:	f57f af55 	bpl.w	8000916 <HAL_PCD_IRQHandler+0x12>
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8000a6c:	f8bd 5004 	ldrh.w	r5, [sp, #4]
    if (epindex == 0)
 8000a70:	f015 050f 	ands.w	r5, r5, #15
 8000a74:	f040 80ab 	bne.w	8000bce <HAL_PCD_IRQHandler+0x2ca>
      if ((wIstr & USB_ISTR_DIR) == 0)
 8000a78:	f8bd 1004 	ldrh.w	r1, [sp, #4]
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000a7c:	8803      	ldrh	r3, [r0, #0]
      if ((wIstr & USB_ISTR_DIR) == 0)
 8000a7e:	f011 0110 	ands.w	r1, r1, #16
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000a82:	b29b      	uxth	r3, r3
      if ((wIstr & USB_ISTR_DIR) == 0)
 8000a84:	d126      	bne.n	8000ad4 <HAL_PCD_IRQHandler+0x1d0>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000a86:	403b      	ands	r3, r7
 8000a88:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000a8a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000a8e:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8000a92:	b29b      	uxth	r3, r3
 8000a94:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000a98:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8000a9c:	f8d0 3404 	ldr.w	r3, [r0, #1028]	; 0x404
        ep->xfer_buff += ep->xfer_count;
 8000aa0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000aa2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000aa6:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8000aa8:	4413      	add	r3, r2
 8000aaa:	63e3      	str	r3, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8000aac:	4620      	mov	r0, r4
 8000aae:	f001 ff4b 	bl	8002948 <HAL_PCD_DataInStageCallback>
        if((hpcd->USB_Address > 0U)&& ( ep->xfer_len == 0U))
 8000ab2:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d0cf      	beq.n	8000a5a <HAL_PCD_IRQHandler+0x156>
 8000aba:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000abc:	2a00      	cmp	r2, #0
 8000abe:	d1cc      	bne.n	8000a5a <HAL_PCD_IRQHandler+0x156>
          hpcd->Instance->DADDR = (hpcd->USB_Address | USB_DADDR_EF);
 8000ac0:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8000ac4:	6821      	ldr	r1, [r4, #0]
 8000ac6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000aca:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8000ace:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 8000ad2:	e7c2      	b.n	8000a5a <HAL_PCD_IRQHandler+0x156>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8000ad4:	f8ad 3006 	strh.w	r3, [sp, #6]
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8000ad8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8000adc:	051a      	lsls	r2, r3, #20
 8000ade:	d51f      	bpl.n	8000b20 <HAL_PCD_IRQHandler+0x21c>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000ae0:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000ae4:	f894 2228 	ldrb.w	r2, [r4, #552]	; 0x228
 8000ae8:	b29b      	uxth	r3, r3
 8000aea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000aee:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000af2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
          USB_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 8000af6:	f8b4 222c 	ldrh.w	r2, [r4, #556]	; 0x22c
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000afa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000afe:	f8c4 3244 	str.w	r3, [r4, #580]	; 0x244
          USB_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 8000b02:	f204 412c 	addw	r1, r4, #1068	; 0x42c
 8000b06:	f000 ffe7 	bl	8001ad8 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 8000b0a:	6822      	ldr	r2, [r4, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8000b0c:	4620      	mov	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 8000b0e:	8813      	ldrh	r3, [r2, #0]
 8000b10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000b14:	051b      	lsls	r3, r3, #20
 8000b16:	0d1b      	lsrs	r3, r3, #20
 8000b18:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8000b1a:	f001 ff07 	bl	800292c <HAL_PCD_SetupStageCallback>
 8000b1e:	e79c      	b.n	8000a5a <HAL_PCD_IRQHandler+0x156>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8000b20:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8000b24:	041b      	lsls	r3, r3, #16
 8000b26:	d598      	bpl.n	8000a5a <HAL_PCD_IRQHandler+0x156>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000b28:	8803      	ldrh	r3, [r0, #0]
 8000b2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000b2e:	051b      	lsls	r3, r3, #20
 8000b30:	0d1b      	lsrs	r3, r3, #20
 8000b32:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000b34:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000b38:	f894 2228 	ldrb.w	r2, [r4, #552]	; 0x228
 8000b3c:	b29b      	uxth	r3, r3
 8000b3e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000b42:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000b46:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8000b4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000b4e:	f8c4 3244 	str.w	r3, [r4, #580]	; 0x244
          if (ep->xfer_count != 0U)
 8000b52:	b163      	cbz	r3, 8000b6e <HAL_PCD_IRQHandler+0x26a>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8000b54:	f8b4 222c 	ldrh.w	r2, [r4, #556]	; 0x22c
 8000b58:	f8d4 123c 	ldr.w	r1, [r4, #572]	; 0x23c
 8000b5c:	f000 ffbc 	bl	8001ad8 <USB_ReadPMA>
            ep->xfer_buff+=ep->xfer_count;
 8000b60:	f8d4 323c 	ldr.w	r3, [r4, #572]	; 0x23c
 8000b64:	f8d4 2244 	ldr.w	r2, [r4, #580]	; 0x244
 8000b68:	4413      	add	r3, r2
 8000b6a:	f8c4 323c 	str.w	r3, [r4, #572]	; 0x23c
           HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8000b6e:	2100      	movs	r1, #0
 8000b70:	4620      	mov	r0, r4
 8000b72:	f001 fee1 	bl	8002938 <HAL_PCD_DataOutStageCallback>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8000b76:	6822      	ldr	r2, [r4, #0]
 8000b78:	f8d4 5238 	ldr.w	r5, [r4, #568]	; 0x238
 8000b7c:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 8000b80:	2d3e      	cmp	r5, #62	; 0x3e
 8000b82:	b289      	uxth	r1, r1
 8000b84:	f101 0106 	add.w	r1, r1, #6
 8000b88:	f502 6080 	add.w	r0, r2, #1024	; 0x400
 8000b8c:	d917      	bls.n	8000bbe <HAL_PCD_IRQHandler+0x2ba>
 8000b8e:	f3c5 134f 	ubfx	r3, r5, #5, #16
 8000b92:	06ee      	lsls	r6, r5, #27
 8000b94:	bf04      	itt	eq
 8000b96:	f103 33ff 	addeq.w	r3, r3, #4294967295
 8000b9a:	b29b      	uxtheq	r3, r3
 8000b9c:	ea49 2383 	orr.w	r3, r9, r3, lsl #10
 8000ba0:	b29b      	uxth	r3, r3
 8000ba2:	f840 3011 	str.w	r3, [r0, r1, lsl #1]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8000ba6:	8813      	ldrh	r3, [r2, #0]
 8000ba8:	b29b      	uxth	r3, r3
 8000baa:	ea03 0308 	and.w	r3, r3, r8
 8000bae:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8000bb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000bb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bba:	8013      	strh	r3, [r2, #0]
 8000bbc:	e74d      	b.n	8000a5a <HAL_PCD_IRQHandler+0x156>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8000bbe:	f3c5 034f 	ubfx	r3, r5, #1, #16
 8000bc2:	07ed      	lsls	r5, r5, #31
 8000bc4:	bf44      	itt	mi
 8000bc6:	3301      	addmi	r3, #1
 8000bc8:	b29b      	uxthmi	r3, r3
 8000bca:	029b      	lsls	r3, r3, #10
 8000bcc:	e7e8      	b.n	8000ba0 <HAL_PCD_IRQHandler+0x29c>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8000bce:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
 8000bd2:	b29b      	uxth	r3, r3
 8000bd4:	f8ad 3006 	strh.w	r3, [sp, #6]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8000bd8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8000bdc:	0419      	lsls	r1, r3, #16
 8000bde:	d53f      	bpl.n	8000c60 <HAL_PCD_IRQHandler+0x35c>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8000be0:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 8000be4:	eb04 1145 	add.w	r1, r4, r5, lsl #5
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8000be8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000bec:	051b      	lsls	r3, r3, #20
 8000bee:	0d1b      	lsrs	r3, r3, #20
 8000bf0:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 8000bf4:	f891 3232 	ldrb.w	r3, [r1, #562]	; 0x232
 8000bf8:	f500 6280 	add.w	r2, r0, #1024	; 0x400
 8000bfc:	ea4f 1a45 	mov.w	sl, r5, lsl #5
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d172      	bne.n	8000cea <HAL_PCD_IRQHandler+0x3e6>
          count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000c04:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000c08:	f891 6228 	ldrb.w	r6, [r1, #552]	; 0x228
 8000c0c:	b29b      	uxth	r3, r3
 8000c0e:	3306      	adds	r3, #6
 8000c10:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8000c14:	f852 6013 	ldr.w	r6, [r2, r3, lsl #1]
 8000c18:	f3c6 0609 	ubfx	r6, r6, #0, #10
          if (count != 0U)
 8000c1c:	b136      	cbz	r6, 8000c2c <HAL_PCD_IRQHandler+0x328>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8000c1e:	f8b1 222c 	ldrh.w	r2, [r1, #556]	; 0x22c
 8000c22:	4633      	mov	r3, r6
 8000c24:	f8d1 123c 	ldr.w	r1, [r1, #572]	; 0x23c
 8000c28:	f000 ff56 	bl	8001ad8 <USB_ReadPMA>
        ep->xfer_count+=count;
 8000c2c:	eb04 010a 	add.w	r1, r4, sl
 8000c30:	f8d1 3244 	ldr.w	r3, [r1, #580]	; 0x244
        ep->xfer_buff+=count;
 8000c34:	f8d1 223c 	ldr.w	r2, [r1, #572]	; 0x23c
        ep->xfer_count+=count;
 8000c38:	4433      	add	r3, r6
 8000c3a:	f8c1 3244 	str.w	r3, [r1, #580]	; 0x244
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8000c3e:	f8d1 3240 	ldr.w	r3, [r1, #576]	; 0x240
        ep->xfer_buff+=count;
 8000c42:	4432      	add	r2, r6
 8000c44:	f8c1 223c 	str.w	r2, [r1, #572]	; 0x23c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8000c48:	b123      	cbz	r3, 8000c54 <HAL_PCD_IRQHandler+0x350>
 8000c4a:	f8d1 0238 	ldr.w	r0, [r1, #568]	; 0x238
 8000c4e:	4286      	cmp	r6, r0
 8000c50:	f080 8081 	bcs.w	8000d56 <HAL_PCD_IRQHandler+0x452>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8000c54:	44a2      	add	sl, r4
 8000c56:	4620      	mov	r0, r4
 8000c58:	f89a 1228 	ldrb.w	r1, [sl, #552]	; 0x228
 8000c5c:	f001 fe6c 	bl	8002938 <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8000c60:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8000c64:	061a      	lsls	r2, r3, #24
 8000c66:	f57f aef8 	bpl.w	8000a5a <HAL_PCD_IRQHandler+0x156>
 8000c6a:	6820      	ldr	r0, [r4, #0]
        
        /* IN double Buffering*/
        if (ep->doublebuffer == 0U)
 8000c6c:	eb04 1145 	add.w	r1, r4, r5, lsl #5
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000c70:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 8000c74:	016e      	lsls	r6, r5, #5
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000c76:	b29b      	uxth	r3, r3
 8000c78:	403b      	ands	r3, r7
 8000c7a:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 8000c7e:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 8000c82:	f500 6280 	add.w	r2, r0, #1024	; 0x400
 8000c86:	3502      	adds	r5, #2
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d171      	bne.n	8000d70 <HAL_PCD_IRQHandler+0x46c>
        {
          ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000c8c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000c90:	f891 c028 	ldrb.w	ip, [r1, #40]	; 0x28
 8000c94:	b29b      	uxth	r3, r3
 8000c96:	3302      	adds	r3, #2
 8000c98:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 8000c9c:	f852 3013 	ldr.w	r3, [r2, r3, lsl #1]
 8000ca0:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 8000ca4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000ca8:	606b      	str	r3, [r5, #4]
          if (ep->xfer_count != 0U)
 8000caa:	b11b      	cbz	r3, 8000cb4 <HAL_PCD_IRQHandler+0x3b0>
          {
            USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8000cac:	8d8a      	ldrh	r2, [r1, #44]	; 0x2c
 8000cae:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8000cb0:	f000 fe15 	bl	80018de <USB_WritePMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000cb4:	6822      	ldr	r2, [r4, #0]
 8000cb6:	4426      	add	r6, r4
 8000cb8:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8000cbc:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 8000cc0:	b29b      	uxth	r3, r3
 8000cc2:	3302      	adds	r3, #2
 8000cc4:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8000cc8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8000ccc:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        ep->xfer_buff+=ep->xfer_count;
 8000cd0:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000cd2:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8000cd6:	6472      	str	r2, [r6, #68]	; 0x44
        ep->xfer_buff+=ep->xfer_count;
 8000cd8:	441a      	add	r2, r3
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8000cda:	6c33      	ldr	r3, [r6, #64]	; 0x40
        {
          /* TX COMPLETE */
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8000cdc:	4620      	mov	r0, r4
        ep->xfer_buff+=ep->xfer_count;
 8000cde:	63f2      	str	r2, [r6, #60]	; 0x3c
        if (ep->xfer_len == 0U)
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d17c      	bne.n	8000dde <HAL_PCD_IRQHandler+0x4da>
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8000ce4:	f001 fe30 	bl	8002948 <HAL_PCD_DataInStageCallback>
 8000ce8:	e6b7      	b.n	8000a5a <HAL_PCD_IRQHandler+0x156>
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 8000cea:	f891 3228 	ldrb.w	r3, [r1, #552]	; 0x228
 8000cee:	f830 c023 	ldrh.w	ip, [r0, r3, lsl #2]
 8000cf2:	00de      	lsls	r6, r3, #3
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000cf4:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 8000cf8:	f41c 4f80 	tst.w	ip, #16384	; 0x4000
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000cfc:	b29b      	uxth	r3, r3
 8000cfe:	4433      	add	r3, r6
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 8000d00:	d01e      	beq.n	8000d40 <HAL_PCD_IRQHandler+0x43c>
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000d02:	3302      	adds	r3, #2
 8000d04:	f852 6013 	ldr.w	r6, [r2, r3, lsl #1]
 8000d08:	f3c6 0609 	ubfx	r6, r6, #0, #10
            if (count != 0U)
 8000d0c:	b136      	cbz	r6, 8000d1c <HAL_PCD_IRQHandler+0x418>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8000d0e:	4633      	mov	r3, r6
 8000d10:	f8b1 222e 	ldrh.w	r2, [r1, #558]	; 0x22e
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8000d14:	f8d1 123c 	ldr.w	r1, [r1, #572]	; 0x23c
 8000d18:	f000 fede 	bl	8001ad8 <USB_ReadPMA>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);  
 8000d1c:	eb04 030a 	add.w	r3, r4, sl
 8000d20:	f893 1228 	ldrb.w	r1, [r3, #552]	; 0x228
 8000d24:	6822      	ldr	r2, [r4, #0]
 8000d26:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8000d2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000d2e:	051b      	lsls	r3, r3, #20
 8000d30:	0d1b      	lsrs	r3, r3, #20
 8000d32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d36:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000d3a:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8000d3e:	e775      	b.n	8000c2c <HAL_PCD_IRQHandler+0x328>
            count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8000d40:	3306      	adds	r3, #6
 8000d42:	f852 6013 	ldr.w	r6, [r2, r3, lsl #1]
 8000d46:	f3c6 0609 	ubfx	r6, r6, #0, #10
            if (count != 0U)
 8000d4a:	2e00      	cmp	r6, #0
 8000d4c:	d0e6      	beq.n	8000d1c <HAL_PCD_IRQHandler+0x418>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8000d4e:	4633      	mov	r3, r6
 8000d50:	f8b1 2230 	ldrh.w	r2, [r1, #560]	; 0x230
 8000d54:	e7de      	b.n	8000d14 <HAL_PCD_IRQHandler+0x410>
          HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8000d56:	4620      	mov	r0, r4
 8000d58:	f891 1228 	ldrb.w	r1, [r1, #552]	; 0x228
 8000d5c:	f7ff fda7 	bl	80008ae <HAL_PCD_EP_Receive>
 8000d60:	e77e      	b.n	8000c60 <HAL_PCD_IRQHandler+0x35c>
 8000d62:	bf00      	nop
 8000d64:	ffff8f0f 	.word	0xffff8f0f
 8000d68:	ffffbf8f 	.word	0xffffbf8f
 8000d6c:	ffff8000 	.word	0xffff8000
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 8000d70:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8000d74:	f830 e023 	ldrh.w	lr, [r0, r3, lsl #2]
 8000d78:	ea4f 0cc3 	mov.w	ip, r3, lsl #3
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000d7c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 8000d80:	f01e 0f40 	tst.w	lr, #64	; 0x40
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000d84:	b29b      	uxth	r3, r3
 8000d86:	4463      	add	r3, ip
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 8000d88:	d01d      	beq.n	8000dc6 <HAL_PCD_IRQHandler+0x4c2>
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000d8a:	3302      	adds	r3, #2
 8000d8c:	f852 3013 	ldr.w	r3, [r2, r3, lsl #1]
 8000d90:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 8000d94:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000d98:	606b      	str	r3, [r5, #4]
            if (ep->xfer_count != 0U)
 8000d9a:	b11b      	cbz	r3, 8000da4 <HAL_PCD_IRQHandler+0x4a0>
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, ep->xfer_count);
 8000d9c:	8dca      	ldrh	r2, [r1, #46]	; 0x2e
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 8000d9e:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8000da0:	f000 fd9d 	bl	80018de <USB_WritePMA>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
 8000da4:	19a3      	adds	r3, r4, r6
 8000da6:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
 8000daa:	6822      	ldr	r2, [r4, #0]
 8000dac:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8000db0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000db4:	051b      	lsls	r3, r3, #20
 8000db6:	0d1b      	lsrs	r3, r3, #20
 8000db8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000dbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dc0:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8000dc4:	e776      	b.n	8000cb4 <HAL_PCD_IRQHandler+0x3b0>
            ep->xfer_count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8000dc6:	3306      	adds	r3, #6
 8000dc8:	f852 3013 	ldr.w	r3, [r2, r3, lsl #1]
 8000dcc:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 8000dd0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000dd4:	606b      	str	r3, [r5, #4]
            if (ep->xfer_count != 0U)
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d0e4      	beq.n	8000da4 <HAL_PCD_IRQHandler+0x4a0>
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 8000dda:	8e0a      	ldrh	r2, [r1, #48]	; 0x30
 8000ddc:	e7df      	b.n	8000d9e <HAL_PCD_IRQHandler+0x49a>
        }
        else
        {
          HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8000dde:	f7ff fd7b 	bl	80008d8 <HAL_PCD_EP_Transmit>
 8000de2:	e63a      	b.n	8000a5a <HAL_PCD_IRQHandler+0x156>

08000de4 <HAL_PCD_EP_SetStall>:
  ep->is_stall = 1U;
 8000de4:	2201      	movs	r2, #1
{
 8000de6:	b538      	push	{r3, r4, r5, lr}
  if ((0x80U & ep_addr) == 0x80U)
 8000de8:	b24b      	sxtb	r3, r1
 8000dea:	2b00      	cmp	r3, #0
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000dec:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 8000df0:	bfb5      	itete	lt
 8000df2:	eb00 1145 	addlt.w	r1, r0, r5, lsl #5
    ep = &hpcd->OUT_ep[ep_addr];
 8000df6:	eb00 1141 	addge.w	r1, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000dfa:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 8000dfc:	f501 710a 	addge.w	r1, r1, #552	; 0x228
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8000e00:	0fdb      	lsrs	r3, r3, #31
  ep->is_stall = 1U;
 8000e02:	708a      	strb	r2, [r1, #2]
  ep->num   = ep_addr & 0x7FU;
 8000e04:	700d      	strb	r5, [r1, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8000e06:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd);
 8000e08:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
{
 8000e0c:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d00e      	beq.n	8000e30 <HAL_PCD_EP_SetStall+0x4c>
 8000e12:	f880 2428 	strb.w	r2, [r0, #1064]	; 0x428
  USB_EPSetStall(hpcd->Instance , ep);
 8000e16:	6800      	ldr	r0, [r0, #0]
 8000e18:	f000 fcd2 	bl	80017c0 <USB_EPSetStall>
  if((ep_addr & 0x7FU) == 0U)
 8000e1c:	b925      	cbnz	r5, 8000e28 <HAL_PCD_EP_SetStall+0x44>
    USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8000e1e:	6820      	ldr	r0, [r4, #0]
 8000e20:	f204 412c 	addw	r1, r4, #1068	; 0x42c
 8000e24:	f000 fd59 	bl	80018da <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd); 
 8000e28:	2000      	movs	r0, #0
 8000e2a:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
}
 8000e2e:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8000e30:	2002      	movs	r0, #2
 8000e32:	e7fc      	b.n	8000e2e <HAL_PCD_EP_SetStall+0x4a>

08000e34 <HAL_PCD_EP_ClrStall>:
{
 8000e34:	b538      	push	{r3, r4, r5, lr}
  ep->is_stall = 0U;
 8000e36:	2500      	movs	r5, #0
  if ((0x80U & ep_addr) == 0x80U)
 8000e38:	b24b      	sxtb	r3, r1
 8000e3a:	2b00      	cmp	r3, #0
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000e3c:	f001 027f 	and.w	r2, r1, #127	; 0x7f
 8000e40:	bfb5      	itete	lt
 8000e42:	eb00 1142 	addlt.w	r1, r0, r2, lsl #5
    ep = &hpcd->OUT_ep[ep_addr];
 8000e46:	eb00 1141 	addge.w	r1, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000e4a:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 8000e4c:	f501 710a 	addge.w	r1, r1, #552	; 0x228
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8000e50:	0fdb      	lsrs	r3, r3, #31
  ep->is_stall = 0U;
 8000e52:	708d      	strb	r5, [r1, #2]
  ep->num   = ep_addr & 0x7FU;
 8000e54:	700a      	strb	r2, [r1, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8000e56:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd); 
 8000e58:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
{
 8000e5c:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd); 
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d009      	beq.n	8000e76 <HAL_PCD_EP_ClrStall+0x42>
 8000e62:	2301      	movs	r3, #1
 8000e64:	f880 3428 	strb.w	r3, [r0, #1064]	; 0x428
  USB_EPClearStall(hpcd->Instance , ep);
 8000e68:	6800      	ldr	r0, [r0, #0]
 8000e6a:	f000 fcdb 	bl	8001824 <USB_EPClearStall>
  return HAL_OK;
 8000e6e:	4628      	mov	r0, r5
  __HAL_UNLOCK(hpcd); 
 8000e70:	f884 5428 	strb.w	r5, [r4, #1064]	; 0x428
}
 8000e74:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd); 
 8000e76:	2002      	movs	r0, #2
 8000e78:	e7fc      	b.n	8000e74 <HAL_PCD_EP_ClrStall+0x40>

08000e7a <HAL_PCDEx_PMAConfig>:

{
  PCD_EPTypeDef *ep = NULL;
  
  /* initialize ep structure*/
  if ((ep_addr & 0x80U) == 0x80U)
 8000e7a:	f011 0f80 	tst.w	r1, #128	; 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000e7e:	bf1b      	ittet	ne
 8000e80:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 8000e84:	eb00 1041 	addne.w	r0, r0, r1, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8000e88:	eb00 1041 	addeq.w	r0, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000e8c:	3028      	addne	r0, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 8000e8e:	bf08      	it	eq
 8000e90:	f500 700a 	addeq.w	r0, r0, #552	; 0x228
  }
  
  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8000e94:	b299      	uxth	r1, r3
 8000e96:	b91a      	cbnz	r2, 8000ea0 <HAL_PCDEx_PMAConfig+0x26>
  {
    /*Single Buffer*/
    ep->doublebuffer = 0U;
 8000e98:	7282      	strb	r2, [r0, #10]
    /*Configure te PMA*/
    ep->pmaadress = (uint16_t)pmaadress;
 8000e9a:	8081      	strh	r1, [r0, #4]
    ep->pmaaddr0 =  pmaadress & 0x0000FFFFU;
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
  }
  
  return HAL_OK; 
}
 8000e9c:	2000      	movs	r0, #0
 8000e9e:	4770      	bx	lr
    ep->doublebuffer = 1U;
 8000ea0:	2201      	movs	r2, #1
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
 8000ea2:	0c1b      	lsrs	r3, r3, #16
    ep->doublebuffer = 1U;
 8000ea4:	7282      	strb	r2, [r0, #10]
    ep->pmaaddr0 =  pmaadress & 0x0000FFFFU;
 8000ea6:	80c1      	strh	r1, [r0, #6]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
 8000ea8:	8103      	strh	r3, [r0, #8]
 8000eaa:	e7f7      	b.n	8000e9c <HAL_PCDEx_PMAConfig+0x22>

08000eac <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000eac:	6803      	ldr	r3, [r0, #0]
{
 8000eae:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000eb2:	07db      	lsls	r3, r3, #31
{
 8000eb4:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000eb6:	d410      	bmi.n	8000eda <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000eb8:	682b      	ldr	r3, [r5, #0]
 8000eba:	079f      	lsls	r7, r3, #30
 8000ebc:	d45e      	bmi.n	8000f7c <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ebe:	682b      	ldr	r3, [r5, #0]
 8000ec0:	0719      	lsls	r1, r3, #28
 8000ec2:	f100 8095 	bmi.w	8000ff0 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ec6:	682b      	ldr	r3, [r5, #0]
 8000ec8:	075a      	lsls	r2, r3, #29
 8000eca:	f100 80bf 	bmi.w	800104c <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000ece:	69ea      	ldr	r2, [r5, #28]
 8000ed0:	2a00      	cmp	r2, #0
 8000ed2:	f040 812d 	bne.w	8001130 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000ed6:	2000      	movs	r0, #0
 8000ed8:	e014      	b.n	8000f04 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000eda:	4c90      	ldr	r4, [pc, #576]	; (800111c <HAL_RCC_OscConfig+0x270>)
 8000edc:	6863      	ldr	r3, [r4, #4]
 8000ede:	f003 030c 	and.w	r3, r3, #12
 8000ee2:	2b04      	cmp	r3, #4
 8000ee4:	d007      	beq.n	8000ef6 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ee6:	6863      	ldr	r3, [r4, #4]
 8000ee8:	f003 030c 	and.w	r3, r3, #12
 8000eec:	2b08      	cmp	r3, #8
 8000eee:	d10c      	bne.n	8000f0a <HAL_RCC_OscConfig+0x5e>
 8000ef0:	6863      	ldr	r3, [r4, #4]
 8000ef2:	03de      	lsls	r6, r3, #15
 8000ef4:	d509      	bpl.n	8000f0a <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ef6:	6823      	ldr	r3, [r4, #0]
 8000ef8:	039c      	lsls	r4, r3, #14
 8000efa:	d5dd      	bpl.n	8000eb8 <HAL_RCC_OscConfig+0xc>
 8000efc:	686b      	ldr	r3, [r5, #4]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d1da      	bne.n	8000eb8 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000f02:	2001      	movs	r0, #1
}
 8000f04:	b002      	add	sp, #8
 8000f06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f0a:	686b      	ldr	r3, [r5, #4]
 8000f0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f10:	d110      	bne.n	8000f34 <HAL_RCC_OscConfig+0x88>
 8000f12:	6823      	ldr	r3, [r4, #0]
 8000f14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f18:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000f1a:	f7ff f959 	bl	80001d0 <HAL_GetTick>
 8000f1e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f20:	6823      	ldr	r3, [r4, #0]
 8000f22:	0398      	lsls	r0, r3, #14
 8000f24:	d4c8      	bmi.n	8000eb8 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f26:	f7ff f953 	bl	80001d0 <HAL_GetTick>
 8000f2a:	1b80      	subs	r0, r0, r6
 8000f2c:	2864      	cmp	r0, #100	; 0x64
 8000f2e:	d9f7      	bls.n	8000f20 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8000f30:	2003      	movs	r0, #3
 8000f32:	e7e7      	b.n	8000f04 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f34:	b99b      	cbnz	r3, 8000f5e <HAL_RCC_OscConfig+0xb2>
 8000f36:	6823      	ldr	r3, [r4, #0]
 8000f38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f3c:	6023      	str	r3, [r4, #0]
 8000f3e:	6823      	ldr	r3, [r4, #0]
 8000f40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f44:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000f46:	f7ff f943 	bl	80001d0 <HAL_GetTick>
 8000f4a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f4c:	6823      	ldr	r3, [r4, #0]
 8000f4e:	0399      	lsls	r1, r3, #14
 8000f50:	d5b2      	bpl.n	8000eb8 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f52:	f7ff f93d 	bl	80001d0 <HAL_GetTick>
 8000f56:	1b80      	subs	r0, r0, r6
 8000f58:	2864      	cmp	r0, #100	; 0x64
 8000f5a:	d9f7      	bls.n	8000f4c <HAL_RCC_OscConfig+0xa0>
 8000f5c:	e7e8      	b.n	8000f30 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f5e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f62:	6823      	ldr	r3, [r4, #0]
 8000f64:	d103      	bne.n	8000f6e <HAL_RCC_OscConfig+0xc2>
 8000f66:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f6a:	6023      	str	r3, [r4, #0]
 8000f6c:	e7d1      	b.n	8000f12 <HAL_RCC_OscConfig+0x66>
 8000f6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f72:	6023      	str	r3, [r4, #0]
 8000f74:	6823      	ldr	r3, [r4, #0]
 8000f76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f7a:	e7cd      	b.n	8000f18 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000f7c:	4c67      	ldr	r4, [pc, #412]	; (800111c <HAL_RCC_OscConfig+0x270>)
 8000f7e:	6863      	ldr	r3, [r4, #4]
 8000f80:	f013 0f0c 	tst.w	r3, #12
 8000f84:	d007      	beq.n	8000f96 <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000f86:	6863      	ldr	r3, [r4, #4]
 8000f88:	f003 030c 	and.w	r3, r3, #12
 8000f8c:	2b08      	cmp	r3, #8
 8000f8e:	d110      	bne.n	8000fb2 <HAL_RCC_OscConfig+0x106>
 8000f90:	6863      	ldr	r3, [r4, #4]
 8000f92:	03da      	lsls	r2, r3, #15
 8000f94:	d40d      	bmi.n	8000fb2 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f96:	6823      	ldr	r3, [r4, #0]
 8000f98:	079b      	lsls	r3, r3, #30
 8000f9a:	d502      	bpl.n	8000fa2 <HAL_RCC_OscConfig+0xf6>
 8000f9c:	692b      	ldr	r3, [r5, #16]
 8000f9e:	2b01      	cmp	r3, #1
 8000fa0:	d1af      	bne.n	8000f02 <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fa2:	6823      	ldr	r3, [r4, #0]
 8000fa4:	696a      	ldr	r2, [r5, #20]
 8000fa6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000faa:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000fae:	6023      	str	r3, [r4, #0]
 8000fb0:	e785      	b.n	8000ebe <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000fb2:	692a      	ldr	r2, [r5, #16]
 8000fb4:	4b5a      	ldr	r3, [pc, #360]	; (8001120 <HAL_RCC_OscConfig+0x274>)
 8000fb6:	b16a      	cbz	r2, 8000fd4 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 8000fb8:	2201      	movs	r2, #1
 8000fba:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000fbc:	f7ff f908 	bl	80001d0 <HAL_GetTick>
 8000fc0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fc2:	6823      	ldr	r3, [r4, #0]
 8000fc4:	079f      	lsls	r7, r3, #30
 8000fc6:	d4ec      	bmi.n	8000fa2 <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000fc8:	f7ff f902 	bl	80001d0 <HAL_GetTick>
 8000fcc:	1b80      	subs	r0, r0, r6
 8000fce:	2802      	cmp	r0, #2
 8000fd0:	d9f7      	bls.n	8000fc2 <HAL_RCC_OscConfig+0x116>
 8000fd2:	e7ad      	b.n	8000f30 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8000fd4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000fd6:	f7ff f8fb 	bl	80001d0 <HAL_GetTick>
 8000fda:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fdc:	6823      	ldr	r3, [r4, #0]
 8000fde:	0798      	lsls	r0, r3, #30
 8000fe0:	f57f af6d 	bpl.w	8000ebe <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000fe4:	f7ff f8f4 	bl	80001d0 <HAL_GetTick>
 8000fe8:	1b80      	subs	r0, r0, r6
 8000fea:	2802      	cmp	r0, #2
 8000fec:	d9f6      	bls.n	8000fdc <HAL_RCC_OscConfig+0x130>
 8000fee:	e79f      	b.n	8000f30 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ff0:	69aa      	ldr	r2, [r5, #24]
 8000ff2:	4e4a      	ldr	r6, [pc, #296]	; (800111c <HAL_RCC_OscConfig+0x270>)
 8000ff4:	4b4b      	ldr	r3, [pc, #300]	; (8001124 <HAL_RCC_OscConfig+0x278>)
 8000ff6:	b1da      	cbz	r2, 8001030 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000ffc:	f7ff f8e8 	bl	80001d0 <HAL_GetTick>
 8001000:	4604      	mov	r4, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001002:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8001004:	079b      	lsls	r3, r3, #30
 8001006:	d50d      	bpl.n	8001024 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001008:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800100c:	4b46      	ldr	r3, [pc, #280]	; (8001128 <HAL_RCC_OscConfig+0x27c>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	fbb3 f3f2 	udiv	r3, r3, r2
 8001014:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8001016:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8001018:	9b01      	ldr	r3, [sp, #4]
 800101a:	1e5a      	subs	r2, r3, #1
 800101c:	9201      	str	r2, [sp, #4]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d1f9      	bne.n	8001016 <HAL_RCC_OscConfig+0x16a>
 8001022:	e750      	b.n	8000ec6 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001024:	f7ff f8d4 	bl	80001d0 <HAL_GetTick>
 8001028:	1b00      	subs	r0, r0, r4
 800102a:	2802      	cmp	r0, #2
 800102c:	d9e9      	bls.n	8001002 <HAL_RCC_OscConfig+0x156>
 800102e:	e77f      	b.n	8000f30 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8001030:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001032:	f7ff f8cd 	bl	80001d0 <HAL_GetTick>
 8001036:	4604      	mov	r4, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001038:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800103a:	079f      	lsls	r7, r3, #30
 800103c:	f57f af43 	bpl.w	8000ec6 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001040:	f7ff f8c6 	bl	80001d0 <HAL_GetTick>
 8001044:	1b00      	subs	r0, r0, r4
 8001046:	2802      	cmp	r0, #2
 8001048:	d9f6      	bls.n	8001038 <HAL_RCC_OscConfig+0x18c>
 800104a:	e771      	b.n	8000f30 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800104c:	4c33      	ldr	r4, [pc, #204]	; (800111c <HAL_RCC_OscConfig+0x270>)
 800104e:	69e3      	ldr	r3, [r4, #28]
 8001050:	00d8      	lsls	r0, r3, #3
 8001052:	d424      	bmi.n	800109e <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8001054:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001056:	69e3      	ldr	r3, [r4, #28]
 8001058:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800105c:	61e3      	str	r3, [r4, #28]
 800105e:	69e3      	ldr	r3, [r4, #28]
 8001060:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001064:	9300      	str	r3, [sp, #0]
 8001066:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001068:	4e30      	ldr	r6, [pc, #192]	; (800112c <HAL_RCC_OscConfig+0x280>)
 800106a:	6833      	ldr	r3, [r6, #0]
 800106c:	05d9      	lsls	r1, r3, #23
 800106e:	d518      	bpl.n	80010a2 <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001070:	68eb      	ldr	r3, [r5, #12]
 8001072:	2b01      	cmp	r3, #1
 8001074:	d126      	bne.n	80010c4 <HAL_RCC_OscConfig+0x218>
 8001076:	6a23      	ldr	r3, [r4, #32]
 8001078:	f043 0301 	orr.w	r3, r3, #1
 800107c:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800107e:	f7ff f8a7 	bl	80001d0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001082:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001086:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001088:	6a23      	ldr	r3, [r4, #32]
 800108a:	079b      	lsls	r3, r3, #30
 800108c:	d53f      	bpl.n	800110e <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 800108e:	2f00      	cmp	r7, #0
 8001090:	f43f af1d 	beq.w	8000ece <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001094:	69e3      	ldr	r3, [r4, #28]
 8001096:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800109a:	61e3      	str	r3, [r4, #28]
 800109c:	e717      	b.n	8000ece <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 800109e:	2700      	movs	r7, #0
 80010a0:	e7e2      	b.n	8001068 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80010a2:	6833      	ldr	r3, [r6, #0]
 80010a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010a8:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80010aa:	f7ff f891 	bl	80001d0 <HAL_GetTick>
 80010ae:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010b0:	6833      	ldr	r3, [r6, #0]
 80010b2:	05da      	lsls	r2, r3, #23
 80010b4:	d4dc      	bmi.n	8001070 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010b6:	f7ff f88b 	bl	80001d0 <HAL_GetTick>
 80010ba:	eba0 0008 	sub.w	r0, r0, r8
 80010be:	2864      	cmp	r0, #100	; 0x64
 80010c0:	d9f6      	bls.n	80010b0 <HAL_RCC_OscConfig+0x204>
 80010c2:	e735      	b.n	8000f30 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010c4:	b9ab      	cbnz	r3, 80010f2 <HAL_RCC_OscConfig+0x246>
 80010c6:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010c8:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010cc:	f023 0301 	bic.w	r3, r3, #1
 80010d0:	6223      	str	r3, [r4, #32]
 80010d2:	6a23      	ldr	r3, [r4, #32]
 80010d4:	f023 0304 	bic.w	r3, r3, #4
 80010d8:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80010da:	f7ff f879 	bl	80001d0 <HAL_GetTick>
 80010de:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010e0:	6a23      	ldr	r3, [r4, #32]
 80010e2:	0798      	lsls	r0, r3, #30
 80010e4:	d5d3      	bpl.n	800108e <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010e6:	f7ff f873 	bl	80001d0 <HAL_GetTick>
 80010ea:	1b80      	subs	r0, r0, r6
 80010ec:	4540      	cmp	r0, r8
 80010ee:	d9f7      	bls.n	80010e0 <HAL_RCC_OscConfig+0x234>
 80010f0:	e71e      	b.n	8000f30 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010f2:	2b05      	cmp	r3, #5
 80010f4:	6a23      	ldr	r3, [r4, #32]
 80010f6:	d103      	bne.n	8001100 <HAL_RCC_OscConfig+0x254>
 80010f8:	f043 0304 	orr.w	r3, r3, #4
 80010fc:	6223      	str	r3, [r4, #32]
 80010fe:	e7ba      	b.n	8001076 <HAL_RCC_OscConfig+0x1ca>
 8001100:	f023 0301 	bic.w	r3, r3, #1
 8001104:	6223      	str	r3, [r4, #32]
 8001106:	6a23      	ldr	r3, [r4, #32]
 8001108:	f023 0304 	bic.w	r3, r3, #4
 800110c:	e7b6      	b.n	800107c <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800110e:	f7ff f85f 	bl	80001d0 <HAL_GetTick>
 8001112:	1b80      	subs	r0, r0, r6
 8001114:	4540      	cmp	r0, r8
 8001116:	d9b7      	bls.n	8001088 <HAL_RCC_OscConfig+0x1dc>
 8001118:	e70a      	b.n	8000f30 <HAL_RCC_OscConfig+0x84>
 800111a:	bf00      	nop
 800111c:	40021000 	.word	0x40021000
 8001120:	42420000 	.word	0x42420000
 8001124:	42420480 	.word	0x42420480
 8001128:	2000006c 	.word	0x2000006c
 800112c:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001130:	4c22      	ldr	r4, [pc, #136]	; (80011bc <HAL_RCC_OscConfig+0x310>)
 8001132:	6863      	ldr	r3, [r4, #4]
 8001134:	f003 030c 	and.w	r3, r3, #12
 8001138:	2b08      	cmp	r3, #8
 800113a:	f43f aee2 	beq.w	8000f02 <HAL_RCC_OscConfig+0x56>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800113e:	2300      	movs	r3, #0
 8001140:	4e1f      	ldr	r6, [pc, #124]	; (80011c0 <HAL_RCC_OscConfig+0x314>)
 8001142:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001144:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001146:	d12b      	bne.n	80011a0 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8001148:	f7ff f842 	bl	80001d0 <HAL_GetTick>
 800114c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800114e:	6823      	ldr	r3, [r4, #0]
 8001150:	0199      	lsls	r1, r3, #6
 8001152:	d41f      	bmi.n	8001194 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001154:	6a2b      	ldr	r3, [r5, #32]
 8001156:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800115a:	d105      	bne.n	8001168 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800115c:	6862      	ldr	r2, [r4, #4]
 800115e:	68a9      	ldr	r1, [r5, #8]
 8001160:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001164:	430a      	orrs	r2, r1
 8001166:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001168:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800116a:	6862      	ldr	r2, [r4, #4]
 800116c:	430b      	orrs	r3, r1
 800116e:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8001172:	4313      	orrs	r3, r2
 8001174:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8001176:	2301      	movs	r3, #1
 8001178:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800117a:	f7ff f829 	bl	80001d0 <HAL_GetTick>
 800117e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001180:	6823      	ldr	r3, [r4, #0]
 8001182:	019a      	lsls	r2, r3, #6
 8001184:	f53f aea7 	bmi.w	8000ed6 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001188:	f7ff f822 	bl	80001d0 <HAL_GetTick>
 800118c:	1b40      	subs	r0, r0, r5
 800118e:	2802      	cmp	r0, #2
 8001190:	d9f6      	bls.n	8001180 <HAL_RCC_OscConfig+0x2d4>
 8001192:	e6cd      	b.n	8000f30 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001194:	f7ff f81c 	bl	80001d0 <HAL_GetTick>
 8001198:	1bc0      	subs	r0, r0, r7
 800119a:	2802      	cmp	r0, #2
 800119c:	d9d7      	bls.n	800114e <HAL_RCC_OscConfig+0x2a2>
 800119e:	e6c7      	b.n	8000f30 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 80011a0:	f7ff f816 	bl	80001d0 <HAL_GetTick>
 80011a4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011a6:	6823      	ldr	r3, [r4, #0]
 80011a8:	019b      	lsls	r3, r3, #6
 80011aa:	f57f ae94 	bpl.w	8000ed6 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011ae:	f7ff f80f 	bl	80001d0 <HAL_GetTick>
 80011b2:	1b40      	subs	r0, r0, r5
 80011b4:	2802      	cmp	r0, #2
 80011b6:	d9f6      	bls.n	80011a6 <HAL_RCC_OscConfig+0x2fa>
 80011b8:	e6ba      	b.n	8000f30 <HAL_RCC_OscConfig+0x84>
 80011ba:	bf00      	nop
 80011bc:	40021000 	.word	0x40021000
 80011c0:	42420060 	.word	0x42420060

080011c4 <HAL_RCC_GetSysClockFreq>:
{
 80011c4:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80011c6:	4b18      	ldr	r3, [pc, #96]	; (8001228 <HAL_RCC_GetSysClockFreq+0x64>)
{
 80011c8:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80011ca:	ac02      	add	r4, sp, #8
 80011cc:	f103 0510 	add.w	r5, r3, #16
 80011d0:	4622      	mov	r2, r4
 80011d2:	6818      	ldr	r0, [r3, #0]
 80011d4:	6859      	ldr	r1, [r3, #4]
 80011d6:	3308      	adds	r3, #8
 80011d8:	c203      	stmia	r2!, {r0, r1}
 80011da:	42ab      	cmp	r3, r5
 80011dc:	4614      	mov	r4, r2
 80011de:	d1f7      	bne.n	80011d0 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80011e0:	f240 2301 	movw	r3, #513	; 0x201
  tmpreg = RCC->CFGR;
 80011e4:	4911      	ldr	r1, [pc, #68]	; (800122c <HAL_RCC_GetSysClockFreq+0x68>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80011e6:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 80011ea:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80011ec:	f003 020c 	and.w	r2, r3, #12
 80011f0:	2a08      	cmp	r2, #8
 80011f2:	d117      	bne.n	8001224 <HAL_RCC_GetSysClockFreq+0x60>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80011f4:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80011f8:	a806      	add	r0, sp, #24
 80011fa:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80011fc:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80011fe:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001202:	d50c      	bpl.n	800121e <HAL_RCC_GetSysClockFreq+0x5a>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001204:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001206:	480a      	ldr	r0, [pc, #40]	; (8001230 <HAL_RCC_GetSysClockFreq+0x6c>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001208:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800120c:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800120e:	aa06      	add	r2, sp, #24
 8001210:	4413      	add	r3, r2
 8001212:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001216:	fbb0 f0f3 	udiv	r0, r0, r3
}
 800121a:	b007      	add	sp, #28
 800121c:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800121e:	4805      	ldr	r0, [pc, #20]	; (8001234 <HAL_RCC_GetSysClockFreq+0x70>)
 8001220:	4350      	muls	r0, r2
 8001222:	e7fa      	b.n	800121a <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
 8001224:	4802      	ldr	r0, [pc, #8]	; (8001230 <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 8001226:	e7f8      	b.n	800121a <HAL_RCC_GetSysClockFreq+0x56>
 8001228:	08002cfc 	.word	0x08002cfc
 800122c:	40021000 	.word	0x40021000
 8001230:	007a1200 	.word	0x007a1200
 8001234:	003d0900 	.word	0x003d0900

08001238 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001238:	4a4c      	ldr	r2, [pc, #304]	; (800136c <HAL_RCC_ClockConfig+0x134>)
{
 800123a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800123e:	6813      	ldr	r3, [r2, #0]
{
 8001240:	4604      	mov	r4, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001242:	f003 0307 	and.w	r3, r3, #7
 8001246:	428b      	cmp	r3, r1
{
 8001248:	460d      	mov	r5, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800124a:	d327      	bcc.n	800129c <HAL_RCC_ClockConfig+0x64>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800124c:	6822      	ldr	r2, [r4, #0]
 800124e:	0791      	lsls	r1, r2, #30
 8001250:	d431      	bmi.n	80012b6 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001252:	07d2      	lsls	r2, r2, #31
 8001254:	d437      	bmi.n	80012c6 <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001256:	4a45      	ldr	r2, [pc, #276]	; (800136c <HAL_RCC_ClockConfig+0x134>)
 8001258:	6813      	ldr	r3, [r2, #0]
 800125a:	f003 0307 	and.w	r3, r3, #7
 800125e:	42ab      	cmp	r3, r5
 8001260:	d871      	bhi.n	8001346 <HAL_RCC_ClockConfig+0x10e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001262:	6822      	ldr	r2, [r4, #0]
 8001264:	4d42      	ldr	r5, [pc, #264]	; (8001370 <HAL_RCC_ClockConfig+0x138>)
 8001266:	f012 0f04 	tst.w	r2, #4
 800126a:	d177      	bne.n	800135c <HAL_RCC_ClockConfig+0x124>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800126c:	0713      	lsls	r3, r2, #28
 800126e:	d506      	bpl.n	800127e <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001270:	686b      	ldr	r3, [r5, #4]
 8001272:	6922      	ldr	r2, [r4, #16]
 8001274:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001278:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800127c:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800127e:	f7ff ffa1 	bl	80011c4 <HAL_RCC_GetSysClockFreq>
 8001282:	686b      	ldr	r3, [r5, #4]
 8001284:	4a3b      	ldr	r2, [pc, #236]	; (8001374 <HAL_RCC_ClockConfig+0x13c>)
 8001286:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800128a:	5cd3      	ldrb	r3, [r2, r3]
 800128c:	40d8      	lsrs	r0, r3
 800128e:	4b3a      	ldr	r3, [pc, #232]	; (8001378 <HAL_RCC_ClockConfig+0x140>)
 8001290:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001292:	2000      	movs	r0, #0
 8001294:	f7fe ff5a 	bl	800014c <HAL_InitTick>
  return HAL_OK;
 8001298:	2000      	movs	r0, #0
 800129a:	e00a      	b.n	80012b2 <HAL_RCC_ClockConfig+0x7a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800129c:	6813      	ldr	r3, [r2, #0]
 800129e:	f023 0307 	bic.w	r3, r3, #7
 80012a2:	430b      	orrs	r3, r1
 80012a4:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80012a6:	6813      	ldr	r3, [r2, #0]
 80012a8:	f003 0307 	and.w	r3, r3, #7
 80012ac:	428b      	cmp	r3, r1
 80012ae:	d0cd      	beq.n	800124c <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 80012b0:	2001      	movs	r0, #1
}
 80012b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012b6:	492e      	ldr	r1, [pc, #184]	; (8001370 <HAL_RCC_ClockConfig+0x138>)
 80012b8:	68a0      	ldr	r0, [r4, #8]
 80012ba:	684b      	ldr	r3, [r1, #4]
 80012bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80012c0:	4303      	orrs	r3, r0
 80012c2:	604b      	str	r3, [r1, #4]
 80012c4:	e7c5      	b.n	8001252 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012c6:	6862      	ldr	r2, [r4, #4]
 80012c8:	4e29      	ldr	r6, [pc, #164]	; (8001370 <HAL_RCC_ClockConfig+0x138>)
 80012ca:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012cc:	6833      	ldr	r3, [r6, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012ce:	d11b      	bne.n	8001308 <HAL_RCC_ClockConfig+0xd0>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012d0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012d4:	d0ec      	beq.n	80012b0 <HAL_RCC_ClockConfig+0x78>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012d6:	6873      	ldr	r3, [r6, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012d8:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012dc:	f023 0303 	bic.w	r3, r3, #3
 80012e0:	4313      	orrs	r3, r2
 80012e2:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 80012e4:	f7fe ff74 	bl	80001d0 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012e8:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 80012ea:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d113      	bne.n	8001318 <HAL_RCC_ClockConfig+0xe0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80012f0:	6873      	ldr	r3, [r6, #4]
 80012f2:	f003 030c 	and.w	r3, r3, #12
 80012f6:	2b04      	cmp	r3, #4
 80012f8:	d0ad      	beq.n	8001256 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012fa:	f7fe ff69 	bl	80001d0 <HAL_GetTick>
 80012fe:	1bc0      	subs	r0, r0, r7
 8001300:	4540      	cmp	r0, r8
 8001302:	d9f5      	bls.n	80012f0 <HAL_RCC_ClockConfig+0xb8>
          return HAL_TIMEOUT;
 8001304:	2003      	movs	r0, #3
 8001306:	e7d4      	b.n	80012b2 <HAL_RCC_ClockConfig+0x7a>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001308:	2a02      	cmp	r2, #2
 800130a:	d102      	bne.n	8001312 <HAL_RCC_ClockConfig+0xda>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800130c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001310:	e7e0      	b.n	80012d4 <HAL_RCC_ClockConfig+0x9c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001312:	f013 0f02 	tst.w	r3, #2
 8001316:	e7dd      	b.n	80012d4 <HAL_RCC_ClockConfig+0x9c>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001318:	2b02      	cmp	r3, #2
 800131a:	d10f      	bne.n	800133c <HAL_RCC_ClockConfig+0x104>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800131c:	6873      	ldr	r3, [r6, #4]
 800131e:	f003 030c 	and.w	r3, r3, #12
 8001322:	2b08      	cmp	r3, #8
 8001324:	d097      	beq.n	8001256 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001326:	f7fe ff53 	bl	80001d0 <HAL_GetTick>
 800132a:	1bc0      	subs	r0, r0, r7
 800132c:	4540      	cmp	r0, r8
 800132e:	d9f5      	bls.n	800131c <HAL_RCC_ClockConfig+0xe4>
 8001330:	e7e8      	b.n	8001304 <HAL_RCC_ClockConfig+0xcc>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001332:	f7fe ff4d 	bl	80001d0 <HAL_GetTick>
 8001336:	1bc0      	subs	r0, r0, r7
 8001338:	4540      	cmp	r0, r8
 800133a:	d8e3      	bhi.n	8001304 <HAL_RCC_ClockConfig+0xcc>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800133c:	6873      	ldr	r3, [r6, #4]
 800133e:	f013 0f0c 	tst.w	r3, #12
 8001342:	d1f6      	bne.n	8001332 <HAL_RCC_ClockConfig+0xfa>
 8001344:	e787      	b.n	8001256 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001346:	6813      	ldr	r3, [r2, #0]
 8001348:	f023 0307 	bic.w	r3, r3, #7
 800134c:	432b      	orrs	r3, r5
 800134e:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001350:	6813      	ldr	r3, [r2, #0]
 8001352:	f003 0307 	and.w	r3, r3, #7
 8001356:	42ab      	cmp	r3, r5
 8001358:	d1aa      	bne.n	80012b0 <HAL_RCC_ClockConfig+0x78>
 800135a:	e782      	b.n	8001262 <HAL_RCC_ClockConfig+0x2a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800135c:	686b      	ldr	r3, [r5, #4]
 800135e:	68e1      	ldr	r1, [r4, #12]
 8001360:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001364:	430b      	orrs	r3, r1
 8001366:	606b      	str	r3, [r5, #4]
 8001368:	e780      	b.n	800126c <HAL_RCC_ClockConfig+0x34>
 800136a:	bf00      	nop
 800136c:	40022000 	.word	0x40022000
 8001370:	40021000 	.word	0x40021000
 8001374:	08002d0d 	.word	0x08002d0d
 8001378:	2000006c 	.word	0x2000006c

0800137c <HAL_RCC_GetHCLKFreq>:
}
 800137c:	4b01      	ldr	r3, [pc, #4]	; (8001384 <HAL_RCC_GetHCLKFreq+0x8>)
 800137e:	6818      	ldr	r0, [r3, #0]
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	2000006c 	.word	0x2000006c

08001388 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001388:	6803      	ldr	r3, [r0, #0]
{
 800138a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800138e:	07d9      	lsls	r1, r3, #31
{
 8001390:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001392:	d520      	bpl.n	80013d6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001394:	4c35      	ldr	r4, [pc, #212]	; (800146c <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001396:	69e3      	ldr	r3, [r4, #28]
 8001398:	00da      	lsls	r2, r3, #3
 800139a:	d432      	bmi.n	8001402 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 800139c:	2701      	movs	r7, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 800139e:	69e3      	ldr	r3, [r4, #28]
 80013a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013a4:	61e3      	str	r3, [r4, #28]
 80013a6:	69e3      	ldr	r3, [r4, #28]
 80013a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ac:	9301      	str	r3, [sp, #4]
 80013ae:	9b01      	ldr	r3, [sp, #4]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013b0:	4e2f      	ldr	r6, [pc, #188]	; (8001470 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80013b2:	6833      	ldr	r3, [r6, #0]
 80013b4:	05db      	lsls	r3, r3, #23
 80013b6:	d526      	bpl.n	8001406 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80013b8:	6a23      	ldr	r3, [r4, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80013ba:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80013be:	d136      	bne.n	800142e <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80013c0:	6a23      	ldr	r3, [r4, #32]
 80013c2:	686a      	ldr	r2, [r5, #4]
 80013c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80013c8:	4313      	orrs	r3, r2
 80013ca:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80013cc:	b11f      	cbz	r7, 80013d6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013ce:	69e3      	ldr	r3, [r4, #28]
 80013d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013d4:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80013d6:	6828      	ldr	r0, [r5, #0]
 80013d8:	0783      	lsls	r3, r0, #30
 80013da:	d506      	bpl.n	80013ea <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80013dc:	4923      	ldr	r1, [pc, #140]	; (800146c <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80013de:	68ab      	ldr	r3, [r5, #8]
 80013e0:	684a      	ldr	r2, [r1, #4]
 80013e2:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80013e6:	431a      	orrs	r2, r3
 80013e8:	604a      	str	r2, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80013ea:	f010 0010 	ands.w	r0, r0, #16
 80013ee:	d01b      	beq.n	8001428 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80013f0:	4a1e      	ldr	r2, [pc, #120]	; (800146c <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80013f2:	68e9      	ldr	r1, [r5, #12]
 80013f4:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80013f6:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80013f8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80013fc:	430b      	orrs	r3, r1
 80013fe:	6053      	str	r3, [r2, #4]
 8001400:	e012      	b.n	8001428 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 8001402:	2700      	movs	r7, #0
 8001404:	e7d4      	b.n	80013b0 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001406:	6833      	ldr	r3, [r6, #0]
 8001408:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800140c:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800140e:	f7fe fedf 	bl	80001d0 <HAL_GetTick>
 8001412:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001414:	6833      	ldr	r3, [r6, #0]
 8001416:	05d8      	lsls	r0, r3, #23
 8001418:	d4ce      	bmi.n	80013b8 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800141a:	f7fe fed9 	bl	80001d0 <HAL_GetTick>
 800141e:	eba0 0008 	sub.w	r0, r0, r8
 8001422:	2864      	cmp	r0, #100	; 0x64
 8001424:	d9f6      	bls.n	8001414 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 8001426:	2003      	movs	r0, #3
}
 8001428:	b002      	add	sp, #8
 800142a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800142e:	686a      	ldr	r2, [r5, #4]
 8001430:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001434:	429a      	cmp	r2, r3
 8001436:	d0c3      	beq.n	80013c0 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8001438:	2001      	movs	r0, #1
 800143a:	4a0e      	ldr	r2, [pc, #56]	; (8001474 <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800143c:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 800143e:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001440:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001442:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001446:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 8001448:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800144a:	07d9      	lsls	r1, r3, #31
 800144c:	d5b8      	bpl.n	80013c0 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 800144e:	f7fe febf 	bl	80001d0 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001452:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001456:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001458:	6a23      	ldr	r3, [r4, #32]
 800145a:	079a      	lsls	r2, r3, #30
 800145c:	d4b0      	bmi.n	80013c0 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800145e:	f7fe feb7 	bl	80001d0 <HAL_GetTick>
 8001462:	1b80      	subs	r0, r0, r6
 8001464:	4540      	cmp	r0, r8
 8001466:	d9f7      	bls.n	8001458 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8001468:	e7dd      	b.n	8001426 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 800146a:	bf00      	nop
 800146c:	40021000 	.word	0x40021000
 8001470:	40007000 	.word	0x40007000
 8001474:	42420440 	.word	0x42420440

08001478 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8001478:	b084      	sub	sp, #16
 800147a:	a801      	add	r0, sp, #4
 800147c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8001480:	b004      	add	sp, #16
 8001482:	2000      	movs	r0, #0
 8001484:	4770      	bx	lr

08001486 <USB_EnableGlobalInt>:
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
     | USB_CNTR_SOFM | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8001486:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 800148a:	b29b      	uxth	r3, r3
 800148c:	f443 433f 	orr.w	r3, r3, #48896	; 0xbf00
 8001490:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  
  return HAL_OK;
}
 8001494:	2000      	movs	r0, #0
 8001496:	4770      	bx	lr

08001498 <USB_DisableGlobalInt>:
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
    | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8001498:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 800149c:	f423 5374 	bic.w	r3, r3, #15616	; 0x3d00
 80014a0:	045b      	lsls	r3, r3, #17
 80014a2:	0c5b      	lsrs	r3, r3, #17
 80014a4:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  
  return HAL_OK;
}
 80014a8:	2000      	movs	r0, #0
 80014aa:	4770      	bx	lr

080014ac <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 80014ac:	2000      	movs	r0, #0
 80014ae:	4770      	bx	lr

080014b0 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80014b0:	b084      	sub	sp, #16
 80014b2:	b510      	push	{r4, lr}
 80014b4:	4604      	mov	r4, r0
 80014b6:	a803      	add	r0, sp, #12
 80014b8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
  
  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 80014bc:	2000      	movs	r0, #0
  USBx->CNTR = USB_CNTR_FRES;
 80014be:	2301      	movs	r3, #1
 80014c0:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
  USBx->CNTR = 0;
 80014c4:	f8a4 0040 	strh.w	r0, [r4, #64]	; 0x40
 
  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 80014c8:	f8a4 0044 	strh.w	r0, [r4, #68]	; 0x44
  
  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80014cc:	f8a4 0050 	strh.w	r0, [r4, #80]	; 0x50
  USBx->CNTR |= winterruptmask;
 80014d0:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
 80014d4:	b29b      	uxth	r3, r3
 80014d6:	f443 433f 	orr.w	r3, r3, #48896	; 0xbf00
 80014da:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
  
  /* Enable USB Device Interrupt mask */
  USB_EnableGlobalInt(USBx);
    
  return HAL_OK;
}
 80014de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80014e2:	b004      	add	sp, #16
 80014e4:	4770      	bx	lr
	...

080014e8 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80014e8:	b570      	push	{r4, r5, r6, lr}
 80014ea:	78cb      	ldrb	r3, [r1, #3]
 80014ec:	780a      	ldrb	r2, [r1, #0]
 80014ee:	2b03      	cmp	r3, #3
 80014f0:	d80f      	bhi.n	8001512 <USB_ActivateEndpoint+0x2a>
 80014f2:	e8df f003 	tbb	[pc, r3]
 80014f6:	6402      	.short	0x6402
 80014f8:	5950      	.short	0x5950
  /* initialize Endpoint */
  switch (ep->type)
  {
  case EP_TYPE_CTRL:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_CONTROL);
 80014fa:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80014fe:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8001502:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001506:	041b      	lsls	r3, r3, #16
 8001508:	0c1b      	lsrs	r3, r3, #16
 800150a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    break;
  case EP_TYPE_INTR:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_INTERRUPT);
    break;
  case EP_TYPE_ISOC:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_ISOCHRONOUS);
 800150e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    break;
  default:
      break;
  } 
  
  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8001512:	f640 730f 	movw	r3, #3855	; 0xf0f
 8001516:	780c      	ldrb	r4, [r1, #0]
 8001518:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 800151c:	401a      	ands	r2, r3
 800151e:	4322      	orrs	r2, r4
 8001520:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001524:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001528:	f820 2024 	strh.w	r2, [r0, r4, lsl #2]
  
  if (ep->doublebuffer == 0) 
 800152c:	7a8a      	ldrb	r2, [r1, #10]
 800152e:	780d      	ldrb	r5, [r1, #0]
 8001530:	f500 6480 	add.w	r4, r0, #1024	; 0x400
 8001534:	2a00      	cmp	r2, #0
 8001536:	f040 8090 	bne.w	800165a <USB_ActivateEndpoint+0x172>
  {
    if (ep->is_in)
 800153a:	888a      	ldrh	r2, [r1, #4]
 800153c:	784e      	ldrb	r6, [r1, #1]
 800153e:	0852      	lsrs	r2, r2, #1
 8001540:	0052      	lsls	r2, r2, #1
 8001542:	00ed      	lsls	r5, r5, #3
 8001544:	2e00      	cmp	r6, #0
 8001546:	d045      	beq.n	80015d4 <USB_ActivateEndpoint+0xec>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8001548:	f8b0 6050 	ldrh.w	r6, [r0, #80]	; 0x50
 800154c:	b2b6      	uxth	r6, r6
 800154e:	4435      	add	r5, r6
 8001550:	f844 2015 	str.w	r2, [r4, r5, lsl #1]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001554:	780c      	ldrb	r4, [r1, #0]
 8001556:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 800155a:	0652      	lsls	r2, r2, #25
 800155c:	d508      	bpl.n	8001570 <USB_ActivateEndpoint+0x88>
 800155e:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 8001562:	4013      	ands	r3, r2
 8001564:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001568:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800156c:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      /* Configure NAK status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK); 
 8001570:	780a      	ldrb	r2, [r1, #0]
 8001572:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001576:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800157a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800157e:	041b      	lsls	r3, r3, #16
 8001580:	0c1b      	lsrs	r3, r3, #16
 8001582:	f083 0320 	eor.w	r3, r3, #32
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001586:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800158a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800158e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }
  
  return HAL_OK;
}
 8001592:	2000      	movs	r0, #0
 8001594:	bd70      	pop	{r4, r5, r6, pc}
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_BULK);
 8001596:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800159a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800159e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80015a2:	041b      	lsls	r3, r3, #16
 80015a4:	0c1b      	lsrs	r3, r3, #16
 80015a6:	e7b2      	b.n	800150e <USB_ActivateEndpoint+0x26>
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_INTERRUPT);
 80015a8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80015ac:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80015b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80015b4:	041b      	lsls	r3, r3, #16
 80015b6:	0c1b      	lsrs	r3, r3, #16
 80015b8:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80015bc:	e7a7      	b.n	800150e <USB_ActivateEndpoint+0x26>
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_ISOCHRONOUS);
 80015be:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80015c2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80015c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80015ca:	041b      	lsls	r3, r3, #16
 80015cc:	0c1b      	lsrs	r3, r3, #16
 80015ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015d2:	e79c      	b.n	800150e <USB_ActivateEndpoint+0x26>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80015d4:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80015d8:	b29b      	uxth	r3, r3
 80015da:	442b      	add	r3, r5
 80015dc:	3304      	adds	r3, #4
 80015de:	f844 2013 	str.w	r2, [r4, r3, lsl #1]
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80015e2:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80015e6:	690d      	ldr	r5, [r1, #16]
 80015e8:	780b      	ldrb	r3, [r1, #0]
 80015ea:	b292      	uxth	r2, r2
 80015ec:	3206      	adds	r2, #6
 80015ee:	2d3e      	cmp	r5, #62	; 0x3e
 80015f0:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80015f4:	d929      	bls.n	800164a <USB_ActivateEndpoint+0x162>
 80015f6:	f3c5 164f 	ubfx	r6, r5, #5, #16
 80015fa:	06eb      	lsls	r3, r5, #27
 80015fc:	bf04      	itt	eq
 80015fe:	f106 33ff 	addeq.w	r3, r6, #4294967295
 8001602:	b29e      	uxtheq	r6, r3
 8001604:	4b6d      	ldr	r3, [pc, #436]	; (80017bc <USB_ActivateEndpoint+0x2d4>)
 8001606:	ea43 2386 	orr.w	r3, r3, r6, lsl #10
 800160a:	b29b      	uxth	r3, r3
 800160c:	f844 3012 	str.w	r3, [r4, r2, lsl #1]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001610:	780a      	ldrb	r2, [r1, #0]
 8001612:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001616:	045e      	lsls	r6, r3, #17
 8001618:	d50b      	bpl.n	8001632 <USB_ActivateEndpoint+0x14a>
 800161a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800161e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001622:	051b      	lsls	r3, r3, #20
 8001624:	0d1b      	lsrs	r3, r3, #20
 8001626:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800162a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800162e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001632:	780a      	ldrb	r2, [r1, #0]
 8001634:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001638:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800163c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001640:	041b      	lsls	r3, r3, #16
 8001642:	0c1b      	lsrs	r3, r3, #16
 8001644:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8001648:	e79d      	b.n	8001586 <USB_ActivateEndpoint+0x9e>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800164a:	f3c5 034f 	ubfx	r3, r5, #1, #16
 800164e:	07ed      	lsls	r5, r5, #31
 8001650:	bf44      	itt	mi
 8001652:	3301      	addmi	r3, #1
 8001654:	b29b      	uxthmi	r3, r3
 8001656:	029b      	lsls	r3, r3, #10
 8001658:	e7d7      	b.n	800160a <USB_ActivateEndpoint+0x122>
    PCD_SET_EP_DBUF(USBx, ep->num);
 800165a:	f830 2025 	ldrh.w	r2, [r0, r5, lsl #2]
 800165e:	f422 72f8 	bic.w	r2, r2, #496	; 0x1f0
 8001662:	0512      	lsls	r2, r2, #20
 8001664:	0d12      	lsrs	r2, r2, #20
 8001666:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 800166a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800166e:	f820 2025 	strh.w	r2, [r0, r5, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num,ep->pmaaddr0, ep->pmaaddr1);
 8001672:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8001676:	780d      	ldrb	r5, [r1, #0]
 8001678:	b292      	uxth	r2, r2
 800167a:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 800167e:	88cd      	ldrh	r5, [r1, #6]
 8001680:	086d      	lsrs	r5, r5, #1
 8001682:	006d      	lsls	r5, r5, #1
 8001684:	f844 5012 	str.w	r5, [r4, r2, lsl #1]
 8001688:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800168c:	780d      	ldrb	r5, [r1, #0]
 800168e:	b292      	uxth	r2, r2
 8001690:	3204      	adds	r2, #4
 8001692:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 8001696:	890d      	ldrh	r5, [r1, #8]
 8001698:	086d      	lsrs	r5, r5, #1
 800169a:	006d      	lsls	r5, r5, #1
 800169c:	f844 5012 	str.w	r5, [r4, r2, lsl #1]
    if (ep->is_in==0)
 80016a0:	784a      	ldrb	r2, [r1, #1]
 80016a2:	780c      	ldrb	r4, [r1, #0]
 80016a4:	2a00      	cmp	r2, #0
 80016a6:	d147      	bne.n	8001738 <USB_ActivateEndpoint+0x250>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80016a8:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 80016ac:	0455      	lsls	r5, r2, #17
 80016ae:	d508      	bpl.n	80016c2 <USB_ActivateEndpoint+0x1da>
 80016b0:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 80016b4:	4013      	ands	r3, r2
 80016b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80016ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016be:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80016c2:	780a      	ldrb	r2, [r1, #0]
 80016c4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80016c8:	065c      	lsls	r4, r3, #25
 80016ca:	d50b      	bpl.n	80016e4 <USB_ActivateEndpoint+0x1fc>
 80016cc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80016d0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80016d4:	051b      	lsls	r3, r3, #20
 80016d6:	0d1b      	lsrs	r3, r3, #20
 80016d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016dc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80016e0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 80016e4:	780a      	ldrb	r2, [r1, #0]
 80016e6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80016ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80016ee:	051b      	lsls	r3, r3, #20
 80016f0:	0d1b      	lsrs	r3, r3, #20
 80016f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016f6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80016fa:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80016fe:	f248 0280 	movw	r2, #32896	; 0x8080
 8001702:	780c      	ldrb	r4, [r1, #0]
 8001704:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8001708:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800170c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001710:	041b      	lsls	r3, r3, #16
 8001712:	0c1b      	lsrs	r3, r3, #16
 8001714:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8001718:	4313      	orrs	r3, r2
 800171a:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800171e:	7809      	ldrb	r1, [r1, #0]
 8001720:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8001724:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001728:	f023 0340 	bic.w	r3, r3, #64	; 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800172c:	041b      	lsls	r3, r3, #16
 800172e:	0c1b      	lsrs	r3, r3, #16
 8001730:	4313      	orrs	r3, r2
 8001732:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
 8001736:	e72c      	b.n	8001592 <USB_ActivateEndpoint+0xaa>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001738:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 800173c:	0452      	lsls	r2, r2, #17
 800173e:	d508      	bpl.n	8001752 <USB_ActivateEndpoint+0x26a>
 8001740:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 8001744:	4013      	ands	r3, r2
 8001746:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800174a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800174e:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001752:	780a      	ldrb	r2, [r1, #0]
 8001754:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001758:	065b      	lsls	r3, r3, #25
 800175a:	d50b      	bpl.n	8001774 <USB_ActivateEndpoint+0x28c>
 800175c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001760:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001764:	051b      	lsls	r3, r3, #20
 8001766:	0d1b      	lsrs	r3, r3, #20
 8001768:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800176c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001770:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8001774:	780a      	ldrb	r2, [r1, #0]
 8001776:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800177a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800177e:	051b      	lsls	r3, r3, #20
 8001780:	0d1b      	lsrs	r3, r3, #20
 8001782:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001786:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800178a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800178e:	f248 0280 	movw	r2, #32896	; 0x8080
 8001792:	780c      	ldrb	r4, [r1, #0]
 8001794:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8001798:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800179c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80017a0:	041b      	lsls	r3, r3, #16
 80017a2:	0c1b      	lsrs	r3, r3, #16
 80017a4:	4313      	orrs	r3, r2
 80017a6:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80017aa:	7809      	ldrb	r1, [r1, #0]
 80017ac:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 80017b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80017b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80017b8:	e7b8      	b.n	800172c <USB_ActivateEndpoint+0x244>
 80017ba:	bf00      	nop
 80017bc:	ffff8000 	.word	0xffff8000

080017c0 <USB_EPSetStall>:
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx , USB_EPTypeDef *ep)
{
  if (ep->num == 0)
 80017c0:	780a      	ldrb	r2, [r1, #0]
 80017c2:	b98a      	cbnz	r2, 80017e8 <USB_EPSetStall+0x28>
  {
    /* This macro sets STALL status for RX & TX*/ 
    PCD_SET_EP_TXRX_STATUS(USBx, ep->num, USB_EP_RX_STALL, USB_EP_TX_STALL); 
 80017c4:	8803      	ldrh	r3, [r0, #0]
 80017c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80017ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80017ce:	041b      	lsls	r3, r3, #16
 80017d0:	0c1b      	lsrs	r3, r3, #16
 80017d2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80017d6:	f083 0310 	eor.w	r3, r3, #16
 80017da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017e2:	8003      	strh	r3, [r0, #0]
    {
      PCD_SET_EP_RX_STATUS(USBx, ep->num , USB_EP_RX_STALL);
    }
  }
  return HAL_OK;
}
 80017e4:	2000      	movs	r0, #0
 80017e6:	4770      	bx	lr
    if (ep->is_in)
 80017e8:	784b      	ldrb	r3, [r1, #1]
 80017ea:	b183      	cbz	r3, 800180e <USB_EPSetStall+0x4e>
      PCD_SET_EP_TX_STATUS(USBx, ep->num , USB_EP_TX_STALL); 
 80017ec:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80017f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80017f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80017f8:	041b      	lsls	r3, r3, #16
 80017fa:	0c1b      	lsrs	r3, r3, #16
 80017fc:	f083 0310 	eor.w	r3, r3, #16
      PCD_SET_EP_RX_STATUS(USBx, ep->num , USB_EP_RX_STALL);
 8001800:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001804:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001808:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 800180c:	e7ea      	b.n	80017e4 <USB_EPSetStall+0x24>
 800180e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001812:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001816:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800181a:	041b      	lsls	r3, r3, #16
 800181c:	0c1b      	lsrs	r3, r3, #16
 800181e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001822:	e7ed      	b.n	8001800 <USB_EPSetStall+0x40>

08001824 <USB_EPClearStall>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in)
 8001824:	784b      	ldrb	r3, [r1, #1]
 8001826:	780a      	ldrb	r2, [r1, #0]
 8001828:	b313      	cbz	r3, 8001870 <USB_EPClearStall+0x4c>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800182a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800182e:	065b      	lsls	r3, r3, #25
 8001830:	d50b      	bpl.n	800184a <USB_EPClearStall+0x26>
 8001832:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001836:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800183a:	051b      	lsls	r3, r3, #20
 800183c:	0d1b      	lsrs	r3, r3, #20
 800183e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001842:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001846:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800184a:	780a      	ldrb	r2, [r1, #0]
 800184c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001850:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001854:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001858:	041b      	lsls	r3, r3, #16
 800185a:	0c1b      	lsrs	r3, r3, #16
 800185c:	f083 0330 	eor.w	r3, r3, #48	; 0x30
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001860:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001864:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001868:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }
  return HAL_OK;
}
 800186c:	2000      	movs	r0, #0
 800186e:	4770      	bx	lr
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001870:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001874:	045b      	lsls	r3, r3, #17
 8001876:	d50b      	bpl.n	8001890 <USB_EPClearStall+0x6c>
 8001878:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800187c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001880:	051b      	lsls	r3, r3, #20
 8001882:	0d1b      	lsrs	r3, r3, #20
 8001884:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001888:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800188c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001890:	780a      	ldrb	r2, [r1, #0]
 8001892:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001896:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800189a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800189e:	041b      	lsls	r3, r3, #16
 80018a0:	0c1b      	lsrs	r3, r3, #16
 80018a2:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80018a6:	e7db      	b.n	8001860 <USB_EPClearStall+0x3c>

080018a8 <USB_StopDevice>:
  * @retval HAL status
  */
HAL_StatusTypeDef USB_StopDevice(USB_TypeDef *USBx)
{
  /* disable all interrupts and force USB reset */
  USBx->CNTR = USB_CNTR_FRES;
 80018a8:	2201      	movs	r2, #1
{
 80018aa:	4603      	mov	r3, r0
  USBx->CNTR = USB_CNTR_FRES;
 80018ac:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
  
  /* clear interrupt status register */
  USBx->ISTR = 0;
 80018b0:	2000      	movs	r0, #0
  
  /* switch-off device */
  USBx->CNTR = (USB_CNTR_FRES | USB_CNTR_PDWN);
 80018b2:	2203      	movs	r2, #3
  USBx->ISTR = 0;
 80018b4:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
  USBx->CNTR = (USB_CNTR_FRES | USB_CNTR_PDWN);
 80018b8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  
  return HAL_OK;
}
 80018bc:	4770      	bx	lr

080018be <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_TypeDef *USBx, uint8_t address)
{
  if(address == 0) 
 80018be:	b911      	cbnz	r1, 80018c6 <USB_SetDevAddress+0x8>
  {
   /* set device address and enable function */
   USBx->DADDR = USB_DADDR_EF;
 80018c0:	2380      	movs	r3, #128	; 0x80
 80018c2:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }
  
  return HAL_OK;
}
 80018c6:	2000      	movs	r0, #0
 80018c8:	4770      	bx	lr

080018ca <USB_DevConnect>:
 80018ca:	2000      	movs	r0, #0
 80018cc:	4770      	bx	lr

080018ce <USB_DevDisconnect>:
 80018ce:	2000      	movs	r0, #0
 80018d0:	4770      	bx	lr

080018d2 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts (USB_TypeDef *USBx)
{
  uint32_t tmpreg = 0;
  
  tmpreg = USBx->ISTR;
 80018d2:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 80018d6:	b280      	uxth	r0, r0
 80018d8:	4770      	bx	lr

080018da <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 80018da:	2000      	movs	r0, #0
 80018dc:	4770      	bx	lr

080018de <USB_WritePMA>:
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
 80018de:	3301      	adds	r3, #1
  uint32_t index = 0, temp1 = 0, temp2 = 0;
  uint16_t *pdwVal = NULL;
  
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 80018e0:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
 80018e4:	105b      	asrs	r3, r3, #1
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 80018e6:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  for (index = nbytes; index != 0; index--)
 80018ea:	b903      	cbnz	r3, 80018ee <USB_WritePMA+0x10>
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
    *pdwVal++ = temp2;
    pdwVal++;
    pbUsrBuf++;
  }
}
 80018ec:	4770      	bx	lr
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 80018ee:	f831 0b02 	ldrh.w	r0, [r1], #2
  for (index = nbytes; index != 0; index--)
 80018f2:	3b01      	subs	r3, #1
    *pdwVal++ = temp2;
 80018f4:	f822 0b04 	strh.w	r0, [r2], #4
  for (index = nbytes; index != 0; index--)
 80018f8:	e7f7      	b.n	80018ea <USB_WritePMA+0xc>
	...

080018fc <USB_EPStartXfer>:
{
 80018fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (ep->is_in == 1)
 80018fe:	784a      	ldrb	r2, [r1, #1]
{
 8001900:	4605      	mov	r5, r0
  if (ep->is_in == 1)
 8001902:	2a01      	cmp	r2, #1
{
 8001904:	460e      	mov	r6, r1
  uint32_t len = ep->xfer_len;
 8001906:	698c      	ldr	r4, [r1, #24]
  if (ep->is_in == 1)
 8001908:	690b      	ldr	r3, [r1, #16]
 800190a:	7a88      	ldrb	r0, [r1, #10]
 800190c:	d15b      	bne.n	80019c6 <USB_EPStartXfer+0xca>
    if (ep->xfer_len > ep->maxpacket)
 800190e:	429c      	cmp	r4, r3
      ep->xfer_len-=len; 
 8001910:	bf8a      	itet	hi
 8001912:	1ae2      	subhi	r2, r4, r3
      ep->xfer_len =0;
 8001914:	2200      	movls	r2, #0
 8001916:	461c      	movhi	r4, r3
 8001918:	618a      	str	r2, [r1, #24]
    if (ep->doublebuffer == 0) 
 800191a:	b2a3      	uxth	r3, r4
 800191c:	6949      	ldr	r1, [r1, #20]
 800191e:	f505 6780 	add.w	r7, r5, #1024	; 0x400
 8001922:	b9f8      	cbnz	r0, 8001964 <USB_EPStartXfer+0x68>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, len);
 8001924:	88b2      	ldrh	r2, [r6, #4]
 8001926:	4628      	mov	r0, r5
 8001928:	f7ff ffd9 	bl	80018de <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800192c:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8001930:	7832      	ldrb	r2, [r6, #0]
 8001932:	b29b      	uxth	r3, r3
 8001934:	3302      	adds	r3, #2
 8001936:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800193a:	f847 4013 	str.w	r4, [r7, r3, lsl #1]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800193e:	7832      	ldrb	r2, [r6, #0]
 8001940:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8001944:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001948:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800194c:	041b      	lsls	r3, r3, #16
 800194e:	0c1b      	lsrs	r3, r3, #16
 8001950:	f083 0330 	eor.w	r3, r3, #48	; 0x30
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001954:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001958:	f043 0380 	orr.w	r3, r3, #128	; 0x80
}
 800195c:	2000      	movs	r0, #0
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800195e:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
}
 8001962:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (PCD_GET_ENDPOINT(USBx, ep->num)& USB_EP_DTOG_TX)
 8001964:	7832      	ldrb	r2, [r6, #0]
 8001966:	f835 c022 	ldrh.w	ip, [r5, r2, lsl #2]
 800196a:	00d0      	lsls	r0, r2, #3
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800196c:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
      if (PCD_GET_ENDPOINT(USBx, ep->num)& USB_EP_DTOG_TX)
 8001970:	f01c 0f40 	tst.w	ip, #64	; 0x40
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8001974:	b292      	uxth	r2, r2
 8001976:	4402      	add	r2, r0
 8001978:	f102 0202 	add.w	r2, r2, #2
 800197c:	f847 4012 	str.w	r4, [r7, r2, lsl #1]
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, len);
 8001980:	4628      	mov	r0, r5
        pmabuffer = ep->pmaaddr1;
 8001982:	bf14      	ite	ne
 8001984:	8932      	ldrhne	r2, [r6, #8]
        pmabuffer = ep->pmaaddr0;
 8001986:	88f2      	ldrheq	r2, [r6, #6]
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, len);
 8001988:	f7ff ffa9 	bl	80018de <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 800198c:	7873      	ldrb	r3, [r6, #1]
 800198e:	7832      	ldrb	r2, [r6, #0]
 8001990:	b963      	cbnz	r3, 80019ac <USB_EPStartXfer+0xb0>
 8001992:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8001996:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800199a:	051b      	lsls	r3, r3, #20
 800199c:	0d1b      	lsrs	r3, r3, #20
 800199e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019a2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80019a6:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 80019aa:	e7c8      	b.n	800193e <USB_EPStartXfer+0x42>
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d1c6      	bne.n	800193e <USB_EPStartXfer+0x42>
 80019b0:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 80019b4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80019b8:	051b      	lsls	r3, r3, #20
 80019ba:	0d1b      	lsrs	r3, r3, #20
 80019bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80019c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019c4:	e7ef      	b.n	80019a6 <USB_EPStartXfer+0xaa>
    if (ep->xfer_len > ep->maxpacket)
 80019c6:	429c      	cmp	r4, r3
      ep->xfer_len =0;
 80019c8:	bf94      	ite	ls
 80019ca:	2100      	movls	r1, #0
      ep->xfer_len-=len; 
 80019cc:	1ae1      	subhi	r1, r4, r3
 80019ce:	61b1      	str	r1, [r6, #24]
 80019d0:	bf88      	it	hi
 80019d2:	461c      	movhi	r4, r3
    if (ep->doublebuffer == 0) 
 80019d4:	7833      	ldrb	r3, [r6, #0]
 80019d6:	bb58      	cbnz	r0, 8001a30 <USB_EPStartXfer+0x134>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80019d8:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 80019dc:	2c3e      	cmp	r4, #62	; 0x3e
 80019de:	b292      	uxth	r2, r2
 80019e0:	f102 0206 	add.w	r2, r2, #6
 80019e4:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80019e8:	f505 6080 	add.w	r0, r5, #1024	; 0x400
 80019ec:	d918      	bls.n	8001a20 <USB_EPStartXfer+0x124>
 80019ee:	f3c4 114f 	ubfx	r1, r4, #5, #16
 80019f2:	06e4      	lsls	r4, r4, #27
 80019f4:	bf04      	itt	eq
 80019f6:	f101 33ff 	addeq.w	r3, r1, #4294967295
 80019fa:	b299      	uxtheq	r1, r3
 80019fc:	4b35      	ldr	r3, [pc, #212]	; (8001ad4 <USB_EPStartXfer+0x1d8>)
 80019fe:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8001a02:	b29b      	uxth	r3, r3
 8001a04:	f840 3012 	str.w	r3, [r0, r2, lsl #1]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001a08:	7832      	ldrb	r2, [r6, #0]
 8001a0a:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8001a0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001a12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a16:	041b      	lsls	r3, r3, #16
 8001a18:	0c1b      	lsrs	r3, r3, #16
 8001a1a:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8001a1e:	e799      	b.n	8001954 <USB_EPStartXfer+0x58>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8001a20:	f3c4 034f 	ubfx	r3, r4, #1, #16
 8001a24:	07e1      	lsls	r1, r4, #31
 8001a26:	bf44      	itt	mi
 8001a28:	3301      	addmi	r3, #1
 8001a2a:	b29b      	uxthmi	r3, r3
 8001a2c:	029b      	lsls	r3, r3, #10
 8001a2e:	e7e8      	b.n	8001a02 <USB_EPStartXfer+0x106>
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8001a30:	b9ba      	cbnz	r2, 8001a62 <USB_EPStartXfer+0x166>
 8001a32:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8001a36:	2c3e      	cmp	r4, #62	; 0x3e
 8001a38:	b292      	uxth	r2, r2
 8001a3a:	f102 0202 	add.w	r2, r2, #2
 8001a3e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8001a42:	f505 6080 	add.w	r0, r5, #1024	; 0x400
 8001a46:	d928      	bls.n	8001a9a <USB_EPStartXfer+0x19e>
 8001a48:	f3c4 114f 	ubfx	r1, r4, #5, #16
 8001a4c:	06e3      	lsls	r3, r4, #27
 8001a4e:	bf04      	itt	eq
 8001a50:	f101 33ff 	addeq.w	r3, r1, #4294967295
 8001a54:	b299      	uxtheq	r1, r3
 8001a56:	4b1f      	ldr	r3, [pc, #124]	; (8001ad4 <USB_EPStartXfer+0x1d8>)
 8001a58:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8001a5c:	b29b      	uxth	r3, r3
 8001a5e:	f840 3012 	str.w	r3, [r0, r2, lsl #1]
 8001a62:	7873      	ldrb	r3, [r6, #1]
 8001a64:	7832      	ldrb	r2, [r6, #0]
 8001a66:	bb43      	cbnz	r3, 8001aba <USB_EPStartXfer+0x1be>
 8001a68:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8001a6c:	2c3e      	cmp	r4, #62	; 0x3e
 8001a6e:	b29b      	uxth	r3, r3
 8001a70:	f103 0306 	add.w	r3, r3, #6
 8001a74:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001a78:	f505 6080 	add.w	r0, r5, #1024	; 0x400
 8001a7c:	d915      	bls.n	8001aaa <USB_EPStartXfer+0x1ae>
 8001a7e:	f3c4 114f 	ubfx	r1, r4, #5, #16
 8001a82:	06e4      	lsls	r4, r4, #27
 8001a84:	bf04      	itt	eq
 8001a86:	f101 32ff 	addeq.w	r2, r1, #4294967295
 8001a8a:	b291      	uxtheq	r1, r2
 8001a8c:	4a11      	ldr	r2, [pc, #68]	; (8001ad4 <USB_EPStartXfer+0x1d8>)
 8001a8e:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8001a92:	b292      	uxth	r2, r2
 8001a94:	f840 2013 	str.w	r2, [r0, r3, lsl #1]
 8001a98:	e7b6      	b.n	8001a08 <USB_EPStartXfer+0x10c>
 8001a9a:	f3c4 034f 	ubfx	r3, r4, #1, #16
 8001a9e:	07e7      	lsls	r7, r4, #31
 8001aa0:	bf44      	itt	mi
 8001aa2:	3301      	addmi	r3, #1
 8001aa4:	b29b      	uxthmi	r3, r3
 8001aa6:	029b      	lsls	r3, r3, #10
 8001aa8:	e7d8      	b.n	8001a5c <USB_EPStartXfer+0x160>
 8001aaa:	f3c4 024f 	ubfx	r2, r4, #1, #16
 8001aae:	07e1      	lsls	r1, r4, #31
 8001ab0:	bf44      	itt	mi
 8001ab2:	3201      	addmi	r2, #1
 8001ab4:	b292      	uxthmi	r2, r2
 8001ab6:	0292      	lsls	r2, r2, #10
 8001ab8:	e7eb      	b.n	8001a92 <USB_EPStartXfer+0x196>
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d1a4      	bne.n	8001a08 <USB_EPStartXfer+0x10c>
 8001abe:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8001ac2:	b29b      	uxth	r3, r3
 8001ac4:	3302      	adds	r3, #2
 8001ac6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001aca:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8001ace:	f8c3 4400 	str.w	r4, [r3, #1024]	; 0x400
 8001ad2:	e799      	b.n	8001a08 <USB_EPStartXfer+0x10c>
 8001ad4:	ffff8000 	.word	0xffff8000

08001ad8 <USB_ReadPMA>:
  * @param  wPMABufAddr : address into PMA.
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8001ad8:	b510      	push	{r4, lr}
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
  uint32_t index = 0;
  uint32_t *pdwVal = NULL;
  
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
  for (index = nbytes; index != 0; index--)
 8001ada:	2400      	movs	r4, #0
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
 8001adc:	3301      	adds	r3, #1
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8001ade:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
 8001ae2:	105b      	asrs	r3, r3, #1
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8001ae4:	eb00 0042 	add.w	r0, r0, r2, lsl #1
  for (index = nbytes; index != 0; index--)
 8001ae8:	429c      	cmp	r4, r3
 8001aea:	d100      	bne.n	8001aee <USB_ReadPMA+0x16>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
    pbUsrBuf++;
  }
}
 8001aec:	bd10      	pop	{r4, pc}
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 8001aee:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
 8001af2:	f821 2014 	strh.w	r2, [r1, r4, lsl #1]
  for (index = nbytes; index != 0; index--)
 8001af6:	3401      	adds	r4, #1
 8001af8:	e7f6      	b.n	8001ae8 <USB_ReadPMA+0x10>
	...

08001afc <USBD_DFU_GetCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_DFU_GetCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_DFU_CfgDesc);
 8001afc:	231b      	movs	r3, #27
 8001afe:	8003      	strh	r3, [r0, #0]
  return USBD_DFU_CfgDesc;
}
 8001b00:	4800      	ldr	r0, [pc, #0]	; (8001b04 <USBD_DFU_GetCfgDesc+0x8>)
 8001b02:	4770      	bx	lr
 8001b04:	20000044 	.word	0x20000044

08001b08 <USBD_DFU_DataIn>:
static uint8_t  USBD_DFU_DataIn (USBD_HandleTypeDef *pdev, 
                              uint8_t epnum)
{

  return USBD_OK;
}
 8001b08:	2000      	movs	r0, #0
 8001b0a:	4770      	bx	lr

08001b0c <USBD_DFU_EP0_RxReady>:
  */
static uint8_t  USBD_DFU_EP0_RxReady (USBD_HandleTypeDef *pdev)
{

  return USBD_OK;
}
 8001b0c:	2000      	movs	r0, #0
 8001b0e:	4770      	bx	lr

08001b10 <USBD_DFU_GetDeviceQualifierDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_DFU_GetDeviceQualifierDesc (uint16_t *length)
{
  *length = sizeof (USBD_DFU_DeviceQualifierDesc);
 8001b10:	230a      	movs	r3, #10
 8001b12:	8003      	strh	r3, [r0, #0]
  return USBD_DFU_DeviceQualifierDesc;
}
 8001b14:	4800      	ldr	r0, [pc, #0]	; (8001b18 <USBD_DFU_GetDeviceQualifierDesc+0x8>)
 8001b16:	4770      	bx	lr
 8001b18:	20000060 	.word	0x20000060

08001b1c <USBD_DFU_EP0_TxReady>:
{
 8001b1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 hdfu = (USBD_DFU_HandleTypeDef*) pdev->pClassData;
 8001b1e:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
{
 8001b22:	4605      	mov	r5, r0
  if (hdfu->dev_state == DFU_STATE_DNLOAD_BUSY)
 8001b24:	f894 3400 	ldrb.w	r3, [r4, #1024]	; 0x400
 8001b28:	2b04      	cmp	r3, #4
 8001b2a:	d165      	bne.n	8001bf8 <USBD_DFU_EP0_TxReady+0xdc>
    if (hdfu->wblock_num == 0)   
 8001b2c:	f8d4 1408 	ldr.w	r1, [r4, #1032]	; 0x408
 8001b30:	2900      	cmp	r1, #0
 8001b32:	d152      	bne.n	8001bda <USBD_DFU_EP0_TxReady+0xbe>
      if ((hdfu->buffer.d8[0] ==  DFU_CMD_GETCOMMANDS) && (hdfu->wlength == 1))
 8001b34:	7823      	ldrb	r3, [r4, #0]
 8001b36:	b9a3      	cbnz	r3, 8001b62 <USBD_DFU_EP0_TxReady+0x46>
 8001b38:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d13d      	bne.n	8001bbc <USBD_DFU_EP0_TxReady+0xa0>
    hdfu->dev_state =  DFU_STATE_DNLOAD_SYNC;
 8001b40:	2203      	movs	r2, #3
    hdfu->wlength = 0;
 8001b42:	2300      	movs	r3, #0
    hdfu->dev_state =  DFU_STATE_DNLOAD_SYNC;
 8001b44:	f884 2400 	strb.w	r2, [r4, #1024]	; 0x400
    hdfu->dev_status[3] = 0;
 8001b48:	f44f 7240 	mov.w	r2, #768	; 0x300
    hdfu->wlength = 0;
 8001b4c:	f8c4 340c 	str.w	r3, [r4, #1036]	; 0x40c
    hdfu->wblock_num = 0;
 8001b50:	f8c4 3408 	str.w	r3, [r4, #1032]	; 0x408
    hdfu->dev_status[1] = 0;
 8001b54:	f8a4 3402 	strh.w	r3, [r4, #1026]	; 0x402
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;

    hdfu->dev_status[1] = 0;
    hdfu->dev_status[2] = 0;
    hdfu->dev_status[3] = 0;
 8001b58:	f8a4 2404 	strh.w	r2, [r4, #1028]	; 0x404
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	b003      	add	sp, #12
 8001b60:	bd30      	pop	{r4, r5, pc}
      else if  (( hdfu->buffer.d8[0] ==  DFU_CMD_SETADDRESSPOINTER ) && (hdfu->wlength == 5))
 8001b62:	2b21      	cmp	r3, #33	; 0x21
 8001b64:	d110      	bne.n	8001b88 <USBD_DFU_EP0_TxReady+0x6c>
 8001b66:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
 8001b6a:	2b05      	cmp	r3, #5
 8001b6c:	d126      	bne.n	8001bbc <USBD_DFU_EP0_TxReady+0xa0>
        hdfu->data_ptr += hdfu->buffer.d8[3] << 16;
 8001b6e:	78e3      	ldrb	r3, [r4, #3]
        hdfu->data_ptr += hdfu->buffer.d8[2] << 8;
 8001b70:	78a2      	ldrb	r2, [r4, #2]
        hdfu->data_ptr += hdfu->buffer.d8[3] << 16;
 8001b72:	041b      	lsls	r3, r3, #16
 8001b74:	eb03 2302 	add.w	r3, r3, r2, lsl #8
        hdfu->data_ptr  = hdfu->buffer.d8[1];
 8001b78:	7862      	ldrb	r2, [r4, #1]
        hdfu->data_ptr += hdfu->buffer.d8[3] << 16;
 8001b7a:	4413      	add	r3, r2
        hdfu->data_ptr += hdfu->buffer.d8[4] << 24;
 8001b7c:	7922      	ldrb	r2, [r4, #4]
 8001b7e:	eb03 6302 	add.w	r3, r3, r2, lsl #24
 8001b82:	f8c4 3410 	str.w	r3, [r4, #1040]	; 0x410
 8001b86:	e7db      	b.n	8001b40 <USBD_DFU_EP0_TxReady+0x24>
      else if (( hdfu->buffer.d8[0] ==  DFU_CMD_ERASE ) && (hdfu->wlength == 5))
 8001b88:	2b41      	cmp	r3, #65	; 0x41
 8001b8a:	d117      	bne.n	8001bbc <USBD_DFU_EP0_TxReady+0xa0>
 8001b8c:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
 8001b90:	2b05      	cmp	r3, #5
 8001b92:	d113      	bne.n	8001bbc <USBD_DFU_EP0_TxReady+0xa0>
        hdfu->data_ptr += hdfu->buffer.d8[3] << 16;
 8001b94:	78e3      	ldrb	r3, [r4, #3]
        hdfu->data_ptr += hdfu->buffer.d8[2] << 8;
 8001b96:	78a0      	ldrb	r0, [r4, #2]
        hdfu->data_ptr += hdfu->buffer.d8[3] << 16;
 8001b98:	041b      	lsls	r3, r3, #16
 8001b9a:	eb03 2300 	add.w	r3, r3, r0, lsl #8
        hdfu->data_ptr  = hdfu->buffer.d8[1];
 8001b9e:	7860      	ldrb	r0, [r4, #1]
        hdfu->data_ptr += hdfu->buffer.d8[3] << 16;
 8001ba0:	4403      	add	r3, r0
        hdfu->data_ptr += hdfu->buffer.d8[4] << 24;
 8001ba2:	7920      	ldrb	r0, [r4, #4]
 8001ba4:	eb03 6000 	add.w	r0, r3, r0, lsl #24
        if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Erase(hdfu->data_ptr) != USBD_OK)
 8001ba8:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
        hdfu->data_ptr += hdfu->buffer.d8[4] << 24;
 8001bac:	f8c4 0410 	str.w	r0, [r4, #1040]	; 0x410
        if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Erase(hdfu->data_ptr) != USBD_OK)
 8001bb0:	68db      	ldr	r3, [r3, #12]
 8001bb2:	4798      	blx	r3
      if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Write(hdfu->buffer.d8, (uint8_t *)addr, hdfu->wlength) != USBD_OK)
 8001bb4:	2800      	cmp	r0, #0
 8001bb6:	d0c3      	beq.n	8001b40 <USBD_DFU_EP0_TxReady+0x24>
          return USBD_FAIL;
 8001bb8:	2302      	movs	r3, #2
 8001bba:	e7cf      	b.n	8001b5c <USBD_DFU_EP0_TxReady+0x40>
        hdfu->wlength = 0;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	f8c4 340c 	str.w	r3, [r4, #1036]	; 0x40c
        hdfu->wblock_num = 0;     
 8001bc2:	f8c4 3408 	str.w	r3, [r4, #1032]	; 0x408
        req.bmRequest = 0;
 8001bc6:	f88d 3000 	strb.w	r3, [sp]
        req.wLength = 1;
 8001bca:	2301      	movs	r3, #1
        USBD_CtlError (pdev, &req);
 8001bcc:	4669      	mov	r1, sp
 8001bce:	4628      	mov	r0, r5
        req.wLength = 1;
 8001bd0:	f8ad 3006 	strh.w	r3, [sp, #6]
        USBD_CtlError (pdev, &req);
 8001bd4:	f000 fce9 	bl	80025aa <USBD_CtlError>
 8001bd8:	e7b2      	b.n	8001b40 <USBD_DFU_EP0_TxReady+0x24>
    else if (hdfu->wblock_num > 1)  
 8001bda:	2901      	cmp	r1, #1
 8001bdc:	d9b0      	bls.n	8001b40 <USBD_DFU_EP0_TxReady+0x24>
      addr = ((hdfu->wblock_num - 2) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 8001bde:	f8d4 0410 	ldr.w	r0, [r4, #1040]	; 0x410
      if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Write(hdfu->buffer.d8, (uint8_t *)addr, hdfu->wlength) != USBD_OK)
 8001be2:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
      addr = ((hdfu->wblock_num - 2) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 8001be6:	3902      	subs	r1, #2
      if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Write(hdfu->buffer.d8, (uint8_t *)addr, hdfu->wlength) != USBD_OK)
 8001be8:	eb00 2181 	add.w	r1, r0, r1, lsl #10
 8001bec:	691b      	ldr	r3, [r3, #16]
 8001bee:	4620      	mov	r0, r4
 8001bf0:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
 8001bf4:	4798      	blx	r3
 8001bf6:	e7dd      	b.n	8001bb4 <USBD_DFU_EP0_TxReady+0x98>
  else if (hdfu->dev_state == DFU_STATE_MANIFEST)/* Manifestation in progress*/
 8001bf8:	2b07      	cmp	r3, #7
 8001bfa:	f04f 0300 	mov.w	r3, #0
 8001bfe:	d1ad      	bne.n	8001b5c <USBD_DFU_EP0_TxReady+0x40>
  if ((USBD_DFU_CfgDesc[(11 + (9 * USBD_DFU_MAX_ITF_NUM))]) & 0x04)
 8001c00:	4a15      	ldr	r2, [pc, #84]	; (8001c58 <USBD_DFU_EP0_TxReady+0x13c>)
 hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 8001c02:	f884 3407 	strb.w	r3, [r4, #1031]	; 0x407
  if ((USBD_DFU_CfgDesc[(11 + (9 * USBD_DFU_MAX_ITF_NUM))]) & 0x04)
 8001c06:	7d12      	ldrb	r2, [r2, #20]
 8001c08:	f012 0204 	ands.w	r2, r2, #4
 8001c0c:	d007      	beq.n	8001c1e <USBD_DFU_EP0_TxReady+0x102>
    hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 8001c0e:	2206      	movs	r2, #6
    hdfu->dev_status[1] = 0;
 8001c10:	f8a4 3402 	strh.w	r3, [r4, #1026]	; 0x402
    hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 8001c14:	f884 2400 	strb.w	r2, [r4, #1024]	; 0x400
    hdfu->dev_status[3] = 0;
 8001c18:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8001c1c:	e79c      	b.n	8001b58 <USBD_DFU_EP0_TxReady+0x3c>
    return;
  }
  else
  {
    
    hdfu->dev_state = DFU_STATE_MANIFEST_WAIT_RESET;
 8001c1e:	2308      	movs	r3, #8
 8001c20:	f884 3400 	strb.w	r3, [r4, #1024]	; 0x400
    
    hdfu->dev_status[1] = 0;
    hdfu->dev_status[2] = 0;
    hdfu->dev_status[3] = 0;
 8001c24:	f44f 6300 	mov.w	r3, #2048	; 0x800
    hdfu->dev_status[1] = 0;
 8001c28:	f8a4 2402 	strh.w	r2, [r4, #1026]	; 0x402
    hdfu->dev_status[3] = 0;
 8001c2c:	f8a4 3404 	strh.w	r3, [r4, #1028]	; 0x404
    hdfu->dev_status[4] = hdfu->dev_state;     
    
    /* Disconnect the USB device */
    USBD_Stop (pdev);
 8001c30:	f000 fa1a 	bl	8002068 <USBD_Stop>

    /* DeInitilialize the MAL(Media Access Layer) */
    ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->DeInit();
 8001c34:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	4798      	blx	r3
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001c3c:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001c40:	4906      	ldr	r1, [pc, #24]	; (8001c5c <USBD_DFU_EP0_TxReady+0x140>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001c42:	4b07      	ldr	r3, [pc, #28]	; (8001c60 <USBD_DFU_EP0_TxReady+0x144>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001c44:	68ca      	ldr	r2, [r1, #12]
 8001c46:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	60cb      	str	r3, [r1, #12]
 8001c4e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8001c52:	bf00      	nop
 8001c54:	e7fd      	b.n	8001c52 <USBD_DFU_EP0_TxReady+0x136>
 8001c56:	bf00      	nop
 8001c58:	20000044 	.word	0x20000044
 8001c5c:	e000ed00 	.word	0xe000ed00
 8001c60:	05fa0004 	.word	0x05fa0004

08001c64 <USBD_DFU_DeInit>:
  hdfu->dev_state = DFU_STATE_IDLE;
 8001c64:	2202      	movs	r2, #2
{
 8001c66:	b538      	push	{r3, r4, r5, lr}
  hdfu->wblock_num = 0;
 8001c68:	2500      	movs	r5, #0
{
 8001c6a:	4604      	mov	r4, r0
  hdfu = (USBD_DFU_HandleTypeDef*) pdev->pClassData;
 8001c6c:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  hdfu->dev_state = DFU_STATE_IDLE;
 8001c70:	f8a3 2400 	strh.w	r2, [r3, #1024]	; 0x400
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 8001c74:	f883 2405 	strb.w	r2, [r3, #1029]	; 0x405
  hdfu->wblock_num = 0;
 8001c78:	f8c3 5408 	str.w	r5, [r3, #1032]	; 0x408
  hdfu->wlength = 0;
 8001c7c:	f8c3 540c 	str.w	r5, [r3, #1036]	; 0x40c
    ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->DeInit(); 
 8001c80:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8001c88:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 8001c8c:	f000 ff40 	bl	8002b10 <USBD_static_free>
}
 8001c90:	4628      	mov	r0, r5
    pdev->pClassData = NULL;
 8001c92:	f8c4 5218 	str.w	r5, [r4, #536]	; 0x218
}
 8001c96:	bd38      	pop	{r3, r4, r5, pc}

08001c98 <USBD_DFU_Init>:
{
 8001c98:	b510      	push	{r4, lr}
 8001c9a:	4604      	mov	r4, r0
  pdev->pClassData = USBD_malloc(sizeof (USBD_DFU_HandleTypeDef));
 8001c9c:	f44f 6083 	mov.w	r0, #1048	; 0x418
 8001ca0:	f000 ff32 	bl	8002b08 <USBD_static_malloc>
 8001ca4:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
  if(pdev->pClassData == NULL)
 8001ca8:	b1a8      	cbz	r0, 8001cd6 <USBD_DFU_Init+0x3e>
    hdfu->dev_state = DFU_STATE_IDLE;
 8001caa:	2202      	movs	r2, #2
    hdfu->alt_setting = 0;
 8001cac:	2300      	movs	r3, #0
    hdfu->dev_state = DFU_STATE_IDLE;
 8001cae:	f8c0 2400 	str.w	r2, [r0, #1024]	; 0x400
    hdfu->dev_status[3] = 0;
 8001cb2:	f44f 7200 	mov.w	r2, #512	; 0x200
    hdfu->alt_setting = 0;
 8001cb6:	f8c0 3414 	str.w	r3, [r0, #1044]	; 0x414
    hdfu->wblock_num = 0;
 8001cba:	f8c0 3408 	str.w	r3, [r0, #1032]	; 0x408
    hdfu->wlength = 0;
 8001cbe:	f8c0 340c 	str.w	r3, [r0, #1036]	; 0x40c
    hdfu->data_ptr = USBD_DFU_APP_DEFAULT_ADD;
 8001cc2:	4b06      	ldr	r3, [pc, #24]	; (8001cdc <USBD_DFU_Init+0x44>)
    hdfu->dev_status[3] = 0;
 8001cc4:	f8c0 2404 	str.w	r2, [r0, #1028]	; 0x404
    hdfu->data_ptr = USBD_DFU_APP_DEFAULT_ADD;
 8001cc8:	f8c0 3410 	str.w	r3, [r0, #1040]	; 0x410
    if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Init() != USBD_OK)
 8001ccc:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	4798      	blx	r3
 8001cd4:	b100      	cbz	r0, 8001cd8 <USBD_DFU_Init+0x40>
      return USBD_FAIL;
 8001cd6:	2002      	movs	r0, #2
}
 8001cd8:	bd10      	pop	{r4, pc}
 8001cda:	bf00      	nop
 8001cdc:	08010000 	.word	0x08010000

08001ce0 <USBD_DFU_GetUsrStringDesc>:
  if (index <= (USBD_IDX_INTERFACE_STR + USBD_DFU_MAX_ITF_NUM))
 8001ce0:	2906      	cmp	r1, #6
{
 8001ce2:	b508      	push	{r3, lr}
  if (index <= (USBD_IDX_INTERFACE_STR + USBD_DFU_MAX_ITF_NUM))
 8001ce4:	d807      	bhi.n	8001cf6 <USBD_DFU_GetUsrStringDesc+0x16>
    USBD_GetString ((uint8_t *)((USBD_DFU_MediaTypeDef *)pdev->pUserData)->pStrDesc, USBD_StrDesc, length);
 8001ce6:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 8001cea:	4904      	ldr	r1, [pc, #16]	; (8001cfc <USBD_DFU_GetUsrStringDesc+0x1c>)
 8001cec:	6818      	ldr	r0, [r3, #0]
 8001cee:	f000 fc67 	bl	80025c0 <USBD_GetString>
 8001cf2:	4802      	ldr	r0, [pc, #8]	; (8001cfc <USBD_DFU_GetUsrStringDesc+0x1c>)
}
 8001cf4:	bd08      	pop	{r3, pc}
    return NULL;
 8001cf6:	2000      	movs	r0, #0
 8001cf8:	e7fc      	b.n	8001cf4 <USBD_DFU_GetUsrStringDesc+0x14>
 8001cfa:	bf00      	nop
 8001cfc:	200000dc 	.word	0x200000dc

08001d00 <USBD_DFU_Setup>:
{
 8001d00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d04:	780d      	ldrb	r5, [r1, #0]
 8001d06:	4606      	mov	r6, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8001d08:	f015 0560 	ands.w	r5, r5, #96	; 0x60
{
 8001d0c:	468c      	mov	ip, r1
  hdfu = (USBD_DFU_HandleTypeDef*) pdev->pClassData;
 8001d0e:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8001d12:	f000 8158 	beq.w	8001fc6 <USBD_DFU_Setup+0x2c6>
 8001d16:	2d20      	cmp	r5, #32
 8001d18:	d125      	bne.n	8001d66 <USBD_DFU_Setup+0x66>
    switch (req->bRequest)
 8001d1a:	f891 8001 	ldrb.w	r8, [r1, #1]
 8001d1e:	f1b8 0f06 	cmp.w	r8, #6
 8001d22:	f200 814a 	bhi.w	8001fba <USBD_DFU_Setup+0x2ba>
 8001d26:	e8df f018 	tbh	[pc, r8, lsl #1]
 8001d2a:	011e      	.short	0x011e
 8001d2c:	00390007 	.word	0x00390007
 8001d30:	00e9009c 	.word	0x00e9009c
 8001d34:	010300ff 	.word	0x010300ff
  if (req->wLength > 0)
 8001d38:	88ca      	ldrh	r2, [r1, #6]
 8001d3a:	f894 3400 	ldrb.w	r3, [r4, #1024]	; 0x400
 8001d3e:	b1ca      	cbz	r2, 8001d74 <USBD_DFU_Setup+0x74>
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE))
 8001d40:	2b02      	cmp	r3, #2
 8001d42:	d001      	beq.n	8001d48 <USBD_DFU_Setup+0x48>
 8001d44:	2b05      	cmp	r3, #5
 8001d46:	d110      	bne.n	8001d6a <USBD_DFU_Setup+0x6a>
      hdfu->wblock_num = req->wValue;
 8001d48:	f8bc 3002 	ldrh.w	r3, [ip, #2]
      USBD_CtlPrepareRx (pdev,
 8001d4c:	4621      	mov	r1, r4
      hdfu->wblock_num = req->wValue;
 8001d4e:	f8c4 3408 	str.w	r3, [r4, #1032]	; 0x408
      hdfu->dev_state = DFU_STATE_DNLOAD_SYNC;
 8001d52:	2303      	movs	r3, #3
      USBD_CtlPrepareRx (pdev,
 8001d54:	4630      	mov	r0, r6
      hdfu->wlength = req->wLength;
 8001d56:	f8c4 240c 	str.w	r2, [r4, #1036]	; 0x40c
      hdfu->dev_state = DFU_STATE_DNLOAD_SYNC;
 8001d5a:	f884 3400 	strb.w	r3, [r4, #1024]	; 0x400
      hdfu->dev_status[4] = hdfu->dev_state;
 8001d5e:	f884 3405 	strb.w	r3, [r4, #1029]	; 0x405
      USBD_CtlPrepareRx (pdev,
 8001d62:	f000 fc5e 	bl	8002622 <USBD_CtlPrepareRx>
  uint8_t ret = USBD_OK;
 8001d66:	2500      	movs	r5, #0
 8001d68:	e015      	b.n	8001d96 <USBD_DFU_Setup+0x96>
      USBD_CtlError (pdev, req);
 8001d6a:	4661      	mov	r1, ip
 8001d6c:	4630      	mov	r0, r6
 8001d6e:	f000 fc1c 	bl	80025aa <USBD_CtlError>
 8001d72:	e7f8      	b.n	8001d66 <USBD_DFU_Setup+0x66>
    if (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE || hdfu->dev_state == DFU_STATE_IDLE )
 8001d74:	2b05      	cmp	r3, #5
 8001d76:	d001      	beq.n	8001d7c <USBD_DFU_Setup+0x7c>
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	d1f6      	bne.n	8001d6a <USBD_DFU_Setup+0x6a>
      hdfu->manif_state = DFU_MANIFEST_IN_PROGRESS;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	f884 3407 	strb.w	r3, [r4, #1031]	; 0x407
      hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 8001d82:	2306      	movs	r3, #6
      hdfu->dev_status[1] = 0;
 8001d84:	2500      	movs	r5, #0
      hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 8001d86:	f884 3400 	strb.w	r3, [r4, #1024]	; 0x400
      hdfu->dev_status[3] = 0;
 8001d8a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
      hdfu->dev_status[1] = 0;
 8001d8e:	f8a4 5402 	strh.w	r5, [r4, #1026]	; 0x402
      hdfu->dev_status[3] = 0;
 8001d92:	f8a4 3404 	strh.w	r3, [r4, #1028]	; 0x404
}
 8001d96:	4628      	mov	r0, r5
 8001d98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (req->wLength > 0)
 8001d9c:	88ca      	ldrh	r2, [r1, #6]
 8001d9e:	2a00      	cmp	r2, #0
 8001da0:	d055      	beq.n	8001e4e <USBD_DFU_Setup+0x14e>
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 8001da2:	f894 3400 	ldrb.w	r3, [r4, #1024]	; 0x400
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d001      	beq.n	8001dae <USBD_DFU_Setup+0xae>
 8001daa:	2b09      	cmp	r3, #9
 8001dac:	d149      	bne.n	8001e42 <USBD_DFU_Setup+0x142>
      hdfu->wblock_num = req->wValue;
 8001dae:	f8bc 7002 	ldrh.w	r7, [ip, #2]
      hdfu->wlength = req->wLength;
 8001db2:	f8c4 240c 	str.w	r2, [r4, #1036]	; 0x40c
      hdfu->wblock_num = req->wValue;
 8001db6:	f8c4 7408 	str.w	r7, [r4, #1032]	; 0x408
      if (hdfu->wblock_num == 0)  
 8001dba:	b9b7      	cbnz	r7, 8001dea <USBD_DFU_Setup+0xea>
        hdfu->buffer.d8[0] = DFU_CMD_GETCOMMANDS;
 8001dbc:	f44f 5304 	mov.w	r3, #8448	; 0x2100
        hdfu->dev_state = (hdfu->wlength > 3)? DFU_STATE_IDLE:DFU_STATE_UPLOAD_IDLE;        
 8001dc0:	2a03      	cmp	r2, #3
 8001dc2:	bf98      	it	ls
 8001dc4:	f04f 0809 	movls.w	r8, #9
        hdfu->buffer.d8[0] = DFU_CMD_GETCOMMANDS;
 8001dc8:	8023      	strh	r3, [r4, #0]
        hdfu->buffer.d8[2] = DFU_CMD_ERASE;
 8001dca:	2341      	movs	r3, #65	; 0x41
        USBD_CtlSendData (pdev,
 8001dcc:	2203      	movs	r2, #3
 8001dce:	4621      	mov	r1, r4
        hdfu->dev_state = (hdfu->wlength > 3)? DFU_STATE_IDLE:DFU_STATE_UPLOAD_IDLE;        
 8001dd0:	f884 8400 	strb.w	r8, [r4, #1024]	; 0x400
        hdfu->dev_status[1] = 0;
 8001dd4:	f8a4 7402 	strh.w	r7, [r4, #1026]	; 0x402
        hdfu->dev_status[3] = 0;
 8001dd8:	f884 7404 	strb.w	r7, [r4, #1028]	; 0x404
        hdfu->dev_status[4] = hdfu->dev_state;       
 8001ddc:	f884 8405 	strb.w	r8, [r4, #1029]	; 0x405
        hdfu->buffer.d8[2] = DFU_CMD_ERASE;
 8001de0:	70a3      	strb	r3, [r4, #2]
  USBD_CtlSendData (pdev,
 8001de2:	4630      	mov	r0, r6
 8001de4:	f000 fc08 	bl	80025f8 <USBD_CtlSendData>
 8001de8:	e7bd      	b.n	8001d66 <USBD_DFU_Setup+0x66>
      else if (hdfu->wblock_num > 1)
 8001dea:	2f01      	cmp	r7, #1
 8001dec:	f04f 0500 	mov.w	r5, #0
 8001df0:	d019      	beq.n	8001e26 <USBD_DFU_Setup+0x126>
        hdfu->dev_state = DFU_STATE_UPLOAD_IDLE ;
 8001df2:	2309      	movs	r3, #9
 8001df4:	f884 3400 	strb.w	r3, [r4, #1024]	; 0x400
        hdfu->dev_status[3] = 0;
 8001df8:	f44f 6310 	mov.w	r3, #2304	; 0x900
        hdfu->dev_status[1] = 0;
 8001dfc:	f8a4 5402 	strh.w	r5, [r4, #1026]	; 0x402
        hdfu->dev_status[3] = 0;
 8001e00:	f8a4 3404 	strh.w	r3, [r4, #1028]	; 0x404
        addr = ((hdfu->wblock_num - 2) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;  /* Change is Accelerated*/
 8001e04:	f8d4 0410 	ldr.w	r0, [r4, #1040]	; 0x410
        phaddr =  ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Read((uint8_t *)addr, hdfu->buffer.d8, hdfu->wlength);  
 8001e08:	f8d6 321c 	ldr.w	r3, [r6, #540]	; 0x21c
        addr = ((hdfu->wblock_num - 2) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;  /* Change is Accelerated*/
 8001e0c:	3f02      	subs	r7, #2
        phaddr =  ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Read((uint8_t *)addr, hdfu->buffer.d8, hdfu->wlength);  
 8001e0e:	4621      	mov	r1, r4
 8001e10:	695b      	ldr	r3, [r3, #20]
 8001e12:	eb00 2087 	add.w	r0, r0, r7, lsl #10
 8001e16:	4798      	blx	r3
 8001e18:	4601      	mov	r1, r0
        USBD_CtlSendData (pdev,
 8001e1a:	f8b4 240c 	ldrh.w	r2, [r4, #1036]	; 0x40c
      USBD_CtlSendData (pdev, 
 8001e1e:	4630      	mov	r0, r6
      USBD_CtlSendData (pdev,
 8001e20:	f000 fbea 	bl	80025f8 <USBD_CtlSendData>
      break;
 8001e24:	e7b7      	b.n	8001d96 <USBD_DFU_Setup+0x96>
        hdfu->dev_state = DFU_ERROR_STALLEDPKT;
 8001e26:	230f      	movs	r3, #15
 8001e28:	f884 3400 	strb.w	r3, [r4, #1024]	; 0x400
        hdfu->dev_status[3] = 0;
 8001e2c:	f44f 6370 	mov.w	r3, #3840	; 0xf00
        hdfu->dev_status[1] = 0;
 8001e30:	f8a4 5402 	strh.w	r5, [r4, #1026]	; 0x402
        hdfu->dev_status[3] = 0;
 8001e34:	f8a4 3404 	strh.w	r3, [r4, #1028]	; 0x404
      USBD_CtlError (pdev, req);
 8001e38:	4661      	mov	r1, ip
 8001e3a:	4630      	mov	r0, r6
 8001e3c:	f000 fbb5 	bl	80025aa <USBD_CtlError>
 8001e40:	e7a9      	b.n	8001d96 <USBD_DFU_Setup+0x96>
      hdfu->wlength = 0;
 8001e42:	2500      	movs	r5, #0
 8001e44:	f8c4 540c 	str.w	r5, [r4, #1036]	; 0x40c
      hdfu->wblock_num = 0;   
 8001e48:	f8c4 5408 	str.w	r5, [r4, #1032]	; 0x408
 8001e4c:	e7f4      	b.n	8001e38 <USBD_DFU_Setup+0x138>
    hdfu->dev_state = DFU_STATE_IDLE;
 8001e4e:	2302      	movs	r3, #2
 8001e50:	f884 3400 	strb.w	r3, [r4, #1024]	; 0x400
    hdfu->dev_status[3] = 0;
 8001e54:	f44f 7300 	mov.w	r3, #512	; 0x200
    hdfu->dev_status[1] = 0;
 8001e58:	f8a4 2402 	strh.w	r2, [r4, #1026]	; 0x402
    hdfu->dev_status[3] = 0;
 8001e5c:	f8a4 3404 	strh.w	r3, [r4, #1028]	; 0x404
 8001e60:	e781      	b.n	8001d66 <USBD_DFU_Setup+0x66>
  switch (hdfu->dev_state)
 8001e62:	f894 3400 	ldrb.w	r3, [r4, #1024]	; 0x400
 8001e66:	f204 4501 	addw	r5, r4, #1025	; 0x401
 8001e6a:	2b03      	cmp	r3, #3
 8001e6c:	d004      	beq.n	8001e78 <USBD_DFU_Setup+0x178>
 8001e6e:	2b06      	cmp	r3, #6
 8001e70:	d02a      	beq.n	8001ec8 <USBD_DFU_Setup+0x1c8>
  USBD_CtlSendData (pdev,
 8001e72:	2206      	movs	r2, #6
 8001e74:	4629      	mov	r1, r5
 8001e76:	e7b4      	b.n	8001de2 <USBD_DFU_Setup+0xe2>
    if (hdfu->wlength != 0)
 8001e78:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
 8001e7c:	b1d3      	cbz	r3, 8001eb4 <USBD_DFU_Setup+0x1b4>
      hdfu->dev_state = DFU_STATE_DNLOAD_BUSY;
 8001e7e:	2304      	movs	r3, #4
 8001e80:	f884 3400 	strb.w	r3, [r4, #1024]	; 0x400
      hdfu->dev_status[1] = 0;
 8001e84:	2300      	movs	r3, #0
 8001e86:	f8a4 3402 	strh.w	r3, [r4, #1026]	; 0x402
      hdfu->dev_status[3] = 0;
 8001e8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e8e:	f8a4 3404 	strh.w	r3, [r4, #1028]	; 0x404
      if ((hdfu->wblock_num == 0) && (hdfu->buffer.d8[0] == DFU_CMD_ERASE))
 8001e92:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 8001e96:	f8d4 1408 	ldr.w	r1, [r4, #1032]	; 0x408
 8001e9a:	699b      	ldr	r3, [r3, #24]
 8001e9c:	f8d4 0410 	ldr.w	r0, [r4, #1040]	; 0x410
 8001ea0:	b929      	cbnz	r1, 8001eae <USBD_DFU_Setup+0x1ae>
 8001ea2:	7822      	ldrb	r2, [r4, #0]
 8001ea4:	2a41      	cmp	r2, #65	; 0x41
 8001ea6:	d102      	bne.n	8001eae <USBD_DFU_Setup+0x1ae>
        ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->GetStatus(hdfu->data_ptr, DFU_MEDIA_ERASE, hdfu->dev_status);
 8001ea8:	462a      	mov	r2, r5
        ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->GetStatus(hdfu->data_ptr, DFU_MEDIA_PROGRAM, hdfu->dev_status);
 8001eaa:	4798      	blx	r3
 8001eac:	e7e1      	b.n	8001e72 <USBD_DFU_Setup+0x172>
 8001eae:	462a      	mov	r2, r5
 8001eb0:	2101      	movs	r1, #1
 8001eb2:	e7fa      	b.n	8001eaa <USBD_DFU_Setup+0x1aa>
      hdfu->dev_state = DFU_STATE_DNLOAD_IDLE;
 8001eb4:	2205      	movs	r2, #5
      hdfu->dev_status[1] = 0;
 8001eb6:	f8a4 3402 	strh.w	r3, [r4, #1026]	; 0x402
      hdfu->dev_status[3] = 0;
 8001eba:	f44f 63a0 	mov.w	r3, #1280	; 0x500
      hdfu->dev_state = DFU_STATE_DNLOAD_IDLE;
 8001ebe:	f884 2400 	strb.w	r2, [r4, #1024]	; 0x400
      hdfu->dev_status[3] = 0;
 8001ec2:	f8a4 3404 	strh.w	r3, [r4, #1028]	; 0x404
 8001ec6:	e7d4      	b.n	8001e72 <USBD_DFU_Setup+0x172>
    if (hdfu->manif_state == DFU_MANIFEST_IN_PROGRESS)
 8001ec8:	f894 3407 	ldrb.w	r3, [r4, #1031]	; 0x407
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d107      	bne.n	8001ee0 <USBD_DFU_Setup+0x1e0>
      hdfu->dev_state = DFU_STATE_MANIFEST;
 8001ed0:	2207      	movs	r2, #7
      hdfu->dev_status[1] = 1;             /*bwPollTimeout = 1ms*/
 8001ed2:	f8a4 3402 	strh.w	r3, [r4, #1026]	; 0x402
      hdfu->dev_state = DFU_STATE_MANIFEST;
 8001ed6:	f884 2400 	strb.w	r2, [r4, #1024]	; 0x400
      hdfu->dev_status[3] = 0;
 8001eda:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001ede:	e7f0      	b.n	8001ec2 <USBD_DFU_Setup+0x1c2>
    else if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) && \
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d1c6      	bne.n	8001e72 <USBD_DFU_Setup+0x172>
      ((USBD_DFU_CfgDesc[(11 + (9 * USBD_DFU_MAX_ITF_NUM))]) & 0x04))
 8001ee4:	4a47      	ldr	r2, [pc, #284]	; (8002004 <USBD_DFU_Setup+0x304>)
    else if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) && \
 8001ee6:	7d12      	ldrb	r2, [r2, #20]
 8001ee8:	0752      	lsls	r2, r2, #29
 8001eea:	d5c2      	bpl.n	8001e72 <USBD_DFU_Setup+0x172>
      hdfu->dev_state = DFU_STATE_IDLE;
 8001eec:	2202      	movs	r2, #2
      hdfu->dev_status[1] = 0;
 8001eee:	f8a4 3402 	strh.w	r3, [r4, #1026]	; 0x402
      hdfu->dev_state = DFU_STATE_IDLE;
 8001ef2:	f884 2400 	strb.w	r2, [r4, #1024]	; 0x400
      hdfu->dev_status[3] = 0;
 8001ef6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001efa:	e7e2      	b.n	8001ec2 <USBD_DFU_Setup+0x1c2>
  if (hdfu->dev_state == DFU_STATE_ERROR)
 8001efc:	f894 3400 	ldrb.w	r3, [r4, #1024]	; 0x400
    hdfu->dev_status[5] = 0;/*iString*/
 8001f00:	2500      	movs	r5, #0
  if (hdfu->dev_state == DFU_STATE_ERROR)
 8001f02:	2b0a      	cmp	r3, #10
    hdfu->dev_state = DFU_STATE_IDLE;
 8001f04:	bf0b      	itete	eq
 8001f06:	2302      	moveq	r3, #2
    hdfu->dev_state = DFU_STATE_ERROR;
 8001f08:	f640 630a 	movwne	r3, #3594	; 0xe0a
    hdfu->dev_state = DFU_STATE_IDLE;
 8001f0c:	f8c4 3400 	streq.w	r3, [r4, #1024]	; 0x400
    hdfu->dev_state = DFU_STATE_ERROR;
 8001f10:	f8c4 3400 	strne.w	r3, [r4, #1024]	; 0x400
    hdfu->dev_status[3] = 0; /*bwPollTimeout=0ms*/
 8001f14:	bf0c      	ite	eq
 8001f16:	f44f 7300 	moveq.w	r3, #512	; 0x200
    hdfu->dev_status[3] = 0; /*bwPollTimeout=0ms*/
 8001f1a:	f44f 6320 	movne.w	r3, #2560	; 0xa00
    hdfu->dev_status[5] = 0;/*iString*/
 8001f1e:	f884 5406 	strb.w	r5, [r4, #1030]	; 0x406
    hdfu->dev_status[3] = 0; /*bwPollTimeout=0ms*/
 8001f22:	f8a4 3404 	strh.w	r3, [r4, #1028]	; 0x404
 8001f26:	e736      	b.n	8001d96 <USBD_DFU_Setup+0x96>
  USBD_CtlSendData (pdev, 
 8001f28:	2201      	movs	r2, #1
 8001f2a:	f504 6180 	add.w	r1, r4, #1024	; 0x400
 8001f2e:	e758      	b.n	8001de2 <USBD_DFU_Setup+0xe2>
  if (hdfu->dev_state == DFU_STATE_IDLE || hdfu->dev_state == DFU_STATE_DNLOAD_SYNC
 8001f30:	f894 3400 	ldrb.w	r3, [r4, #1024]	; 0x400
 8001f34:	2b09      	cmp	r3, #9
 8001f36:	f63f af16 	bhi.w	8001d66 <USBD_DFU_Setup+0x66>
 8001f3a:	f44f 751b 	mov.w	r5, #620	; 0x26c
 8001f3e:	40dd      	lsrs	r5, r3
 8001f40:	43ed      	mvns	r5, r5
 8001f42:	f015 0501 	ands.w	r5, r5, #1
 8001f46:	f47f af0e 	bne.w	8001d66 <USBD_DFU_Setup+0x66>
    hdfu->dev_state = DFU_STATE_IDLE;
 8001f4a:	2302      	movs	r3, #2
 8001f4c:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
    hdfu->dev_status[3] = 0; /*bwPollTimeout=0ms*/
 8001f50:	f44f 7300 	mov.w	r3, #512	; 0x200
    hdfu->dev_status[5] = 0; /*iString*/
 8001f54:	f884 5406 	strb.w	r5, [r4, #1030]	; 0x406
    hdfu->dev_status[3] = 0; /*bwPollTimeout=0ms*/
 8001f58:	f8a4 3404 	strh.w	r3, [r4, #1028]	; 0x404
    hdfu->wblock_num = 0;
 8001f5c:	f8c4 5408 	str.w	r5, [r4, #1032]	; 0x408
    hdfu->wlength = 0;
 8001f60:	f8c4 540c 	str.w	r5, [r4, #1036]	; 0x40c
 8001f64:	e717      	b.n	8001d96 <USBD_DFU_Setup+0x96>
  if (hdfu->dev_state == DFU_STATE_IDLE || hdfu->dev_state == DFU_STATE_DNLOAD_SYNC
 8001f66:	f894 2400 	ldrb.w	r2, [r4, #1024]	; 0x400
 8001f6a:	2a09      	cmp	r2, #9
 8001f6c:	d813      	bhi.n	8001f96 <USBD_DFU_Setup+0x296>
 8001f6e:	f44f 731b 	mov.w	r3, #620	; 0x26c
 8001f72:	40d3      	lsrs	r3, r2
 8001f74:	43db      	mvns	r3, r3
 8001f76:	f013 0301 	ands.w	r3, r3, #1
 8001f7a:	d10c      	bne.n	8001f96 <USBD_DFU_Setup+0x296>
    hdfu->dev_state = DFU_STATE_IDLE;
 8001f7c:	2202      	movs	r2, #2
 8001f7e:	f8c4 2400 	str.w	r2, [r4, #1024]	; 0x400
    hdfu->dev_status[3] = 0; /*bwPollTimeout=0ms*/
 8001f82:	f44f 7200 	mov.w	r2, #512	; 0x200
    hdfu->dev_status[5] = 0; /*iString*/
 8001f86:	f884 3406 	strb.w	r3, [r4, #1030]	; 0x406
    hdfu->dev_status[3] = 0; /*bwPollTimeout=0ms*/
 8001f8a:	f8a4 2404 	strh.w	r2, [r4, #1028]	; 0x404
    hdfu->wblock_num = 0;
 8001f8e:	f8c4 3408 	str.w	r3, [r4, #1032]	; 0x408
    hdfu->wlength = 0;
 8001f92:	f8c4 340c 	str.w	r3, [r4, #1036]	; 0x40c
  if ((USBD_DFU_CfgDesc[12 + (9 * USBD_DFU_MAX_ITF_NUM)]) & DFU_DETACH_MASK)
 8001f96:	4b1b      	ldr	r3, [pc, #108]	; (8002004 <USBD_DFU_Setup+0x304>)
 8001f98:	7d5d      	ldrb	r5, [r3, #21]
 8001f9a:	f015 0510 	ands.w	r5, r5, #16
 8001f9e:	d007      	beq.n	8001fb0 <USBD_DFU_Setup+0x2b0>
    USBD_Stop (pdev);
 8001fa0:	4630      	mov	r0, r6
 8001fa2:	f000 f861 	bl	8002068 <USBD_Stop>
    USBD_Start (pdev);  
 8001fa6:	4630      	mov	r0, r6
 8001fa8:	f000 f859 	bl	800205e <USBD_Start>
  uint8_t ret = USBD_OK;
 8001fac:	4645      	mov	r5, r8
 8001fae:	e6f2      	b.n	8001d96 <USBD_DFU_Setup+0x96>
    USBD_Delay (req->wValue);  
 8001fb0:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 8001fb4:	f7fe f912 	bl	80001dc <HAL_Delay>
 8001fb8:	e6ed      	b.n	8001d96 <USBD_DFU_Setup+0x96>
      USBD_CtlError (pdev, req);
 8001fba:	4661      	mov	r1, ip
 8001fbc:	4630      	mov	r0, r6
        USBD_CtlError (pdev, req);
 8001fbe:	f000 faf4 	bl	80025aa <USBD_CtlError>
        ret = USBD_FAIL;  
 8001fc2:	2502      	movs	r5, #2
 8001fc4:	e6e7      	b.n	8001d96 <USBD_DFU_Setup+0x96>
    switch (req->bRequest)
 8001fc6:	784b      	ldrb	r3, [r1, #1]
 8001fc8:	2b0a      	cmp	r3, #10
 8001fca:	d010      	beq.n	8001fee <USBD_DFU_Setup+0x2ee>
 8001fcc:	2b0b      	cmp	r3, #11
 8001fce:	d012      	beq.n	8001ff6 <USBD_DFU_Setup+0x2f6>
 8001fd0:	2b06      	cmp	r3, #6
 8001fd2:	d1f2      	bne.n	8001fba <USBD_DFU_Setup+0x2ba>
      if( (req->wValue >> 8) == DFU_DESCRIPTOR_TYPE)
 8001fd4:	884b      	ldrh	r3, [r1, #2]
 8001fd6:	0a1b      	lsrs	r3, r3, #8
 8001fd8:	2b21      	cmp	r3, #33	; 0x21
 8001fda:	d105      	bne.n	8001fe8 <USBD_DFU_Setup+0x2e8>
        len = MIN(USB_DFU_DESC_SIZ , req->wLength);
 8001fdc:	88ca      	ldrh	r2, [r1, #6]
        pbuf = USBD_DFU_CfgDesc + (9 * (USBD_DFU_MAX_ITF_NUM + 1));
 8001fde:	490a      	ldr	r1, [pc, #40]	; (8002008 <USBD_DFU_Setup+0x308>)
        len = MIN(USB_DFU_DESC_SIZ , req->wLength);
 8001fe0:	2a09      	cmp	r2, #9
 8001fe2:	bf28      	it	cs
 8001fe4:	2209      	movcs	r2, #9
 8001fe6:	e71a      	b.n	8001e1e <USBD_DFU_Setup+0x11e>
  uint16_t len = 0;
 8001fe8:	462a      	mov	r2, r5
  uint8_t *pbuf = 0;
 8001fea:	4629      	mov	r1, r5
 8001fec:	e717      	b.n	8001e1e <USBD_DFU_Setup+0x11e>
      USBD_CtlSendData (pdev,
 8001fee:	2201      	movs	r2, #1
 8001ff0:	f204 4114 	addw	r1, r4, #1044	; 0x414
 8001ff4:	e714      	b.n	8001e20 <USBD_DFU_Setup+0x120>
      if ((uint8_t)(req->wValue) < USBD_DFU_MAX_ITF_NUM)
 8001ff6:	788d      	ldrb	r5, [r1, #2]
 8001ff8:	2d00      	cmp	r5, #0
 8001ffa:	d1e0      	bne.n	8001fbe <USBD_DFU_Setup+0x2be>
        hdfu->alt_setting = (uint8_t)(req->wValue);
 8001ffc:	f8c4 5414 	str.w	r5, [r4, #1044]	; 0x414
 8002000:	e6c9      	b.n	8001d96 <USBD_DFU_Setup+0x96>
 8002002:	bf00      	nop
 8002004:	20000044 	.word	0x20000044
 8002008:	20000056 	.word	0x20000056

0800200c <USBD_DFU_IsoOutIncomplete>:
 800200c:	2000      	movs	r0, #0
 800200e:	4770      	bx	lr

08002010 <USBD_DFU_DataOut>:
 8002010:	2000      	movs	r0, #0
 8002012:	4770      	bx	lr

08002014 <USBD_DFU_IsoINIncomplete>:
 8002014:	2000      	movs	r0, #0
 8002016:	4770      	bx	lr

08002018 <USBD_DFU_SOF>:
 8002018:	2000      	movs	r0, #0
 800201a:	4770      	bx	lr

0800201c <USBD_DFU_RegisterMedia>:
  if(fops != NULL)
 800201c:	b109      	cbz	r1, 8002022 <USBD_DFU_RegisterMedia+0x6>
    pdev->pUserData= fops;
 800201e:	f8c0 121c 	str.w	r1, [r0, #540]	; 0x21c
}
 8002022:	2000      	movs	r0, #0
 8002024:	4770      	bx	lr

08002026 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8002026:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8002028:	b180      	cbz	r0, 800204c <USBD_Init+0x26>
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800202a:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800202e:	b113      	cbz	r3, 8002036 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8002030:	2300      	movs	r3, #0
 8002032:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8002036:	b109      	cbz	r1, 800203c <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8002038:	f8c0 1210 	str.w	r1, [r0, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800203c:	2301      	movs	r3, #1
  pdev->id = id;
 800203e:	7002      	strb	r2, [r0, #0]
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8002040:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8002044:	f000 fcac 	bl	80029a0 <USBD_LL_Init>
  
  return USBD_OK; 
 8002048:	2000      	movs	r0, #0
}
 800204a:	bd08      	pop	{r3, pc}
    return USBD_FAIL; 
 800204c:	2002      	movs	r0, #2
 800204e:	e7fc      	b.n	800204a <USBD_Init+0x24>

08002050 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 8002050:	b119      	cbz	r1, 800205a <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8002052:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    status = USBD_OK;
 8002056:	2000      	movs	r0, #0
 8002058:	4770      	bx	lr
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 800205a:	2002      	movs	r0, #2
  }
  
  return status;
}
 800205c:	4770      	bx	lr

0800205e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800205e:	b508      	push	{r3, lr}
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 8002060:	f000 fcd0 	bl	8002a04 <USBD_LL_Start>
  
  return USBD_OK;  
}
 8002064:	2000      	movs	r0, #0
 8002066:	bd08      	pop	{r3, pc}

08002068 <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Stop   (USBD_HandleTypeDef *pdev)
{
 8002068:	b510      	push	{r4, lr}
 800206a:	4604      	mov	r4, r0
  /* Free Class Resources */
  pdev->pClass->DeInit(pdev, pdev->dev_config);  
 800206c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002070:	7901      	ldrb	r1, [r0, #4]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	4798      	blx	r3

  /* Stop the low level driver  */
  USBD_LL_Stop(pdev); 
 8002076:	4620      	mov	r0, r4
 8002078:	f000 fcd2 	bl	8002a20 <USBD_LL_Stop>
  
  return USBD_OK;  
}
 800207c:	2000      	movs	r0, #0
 800207e:	bd10      	pop	{r4, pc}

08002080 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8002080:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;
  
  if(pdev->pClass != NULL)
 8002082:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002086:	b90b      	cbnz	r3, 800208c <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8002088:	2002      	movs	r0, #2
    {
      ret = USBD_OK;
    }
  }
  return ret; 
}
 800208a:	bd08      	pop	{r3, pc}
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4798      	blx	r3
 8002090:	2800      	cmp	r0, #0
 8002092:	d0fa      	beq.n	800208a <USBD_SetClassConfig+0xa>
 8002094:	e7f8      	b.n	8002088 <USBD_SetClassConfig+0x8>

08002096 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8002096:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 8002098:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	4798      	blx	r3
  return USBD_OK;
}
 80020a0:	2000      	movs	r0, #0
 80020a2:	bd08      	pop	{r3, pc}

080020a4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80020a4:	b538      	push	{r3, r4, r5, lr}

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80020a6:	f500 7502 	add.w	r5, r0, #520	; 0x208
{
 80020aa:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80020ac:	4628      	mov	r0, r5
 80020ae:	f000 fa68 	bl	8002582 <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 80020b2:	2301      	movs	r3, #1
  pdev->ep0_data_len = pdev->request.wLength;
  
  switch (pdev->request.bmRequest & 0x1F) 
 80020b4:	f894 1208 	ldrb.w	r1, [r4, #520]	; 0x208
  pdev->ep0_state = USBD_EP0_SETUP;
 80020b8:	f8c4 31f4 	str.w	r3, [r4, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 80020bc:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 80020c0:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
  switch (pdev->request.bmRequest & 0x1F) 
 80020c4:	f001 031f 	and.w	r3, r1, #31
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d008      	beq.n	80020de <USBD_LL_SetupStage+0x3a>
 80020cc:	2b02      	cmp	r3, #2
 80020ce:	d00b      	beq.n	80020e8 <USBD_LL_SetupStage+0x44>
 80020d0:	b97b      	cbnz	r3, 80020f2 <USBD_LL_SetupStage+0x4e>
  {
  case USB_REQ_RECIPIENT_DEVICE:   
    USBD_StdDevReq (pdev, &pdev->request);
 80020d2:	4629      	mov	r1, r5
 80020d4:	4620      	mov	r0, r4
 80020d6:	f000 f8d9 	bl	800228c <USBD_StdDevReq>
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
    break;
  }  
  return USBD_OK;  
}
 80020da:	2000      	movs	r0, #0
 80020dc:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 80020de:	4629      	mov	r1, r5
 80020e0:	4620      	mov	r0, r4
 80020e2:	f000 f9d3 	bl	800248c <USBD_StdItfReq>
    break;
 80020e6:	e7f8      	b.n	80020da <USBD_LL_SetupStage+0x36>
    USBD_StdEPReq(pdev, &pdev->request);   
 80020e8:	4629      	mov	r1, r5
 80020ea:	4620      	mov	r0, r4
 80020ec:	f000 f9e6 	bl	80024bc <USBD_StdEPReq>
    break;
 80020f0:	e7f3      	b.n	80020da <USBD_LL_SetupStage+0x36>
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 80020f2:	4620      	mov	r0, r4
 80020f4:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80020f8:	f000 fcb0 	bl	8002a5c <USBD_LL_StallEP>
    break;
 80020fc:	e7ed      	b.n	80020da <USBD_LL_SetupStage+0x36>

080020fe <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 80020fe:	b538      	push	{r3, r4, r5, lr}
 8002100:	4604      	mov	r4, r0
 8002102:	4615      	mov	r5, r2
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 8002104:	bb01      	cbnz	r1, 8002148 <USBD_LL_DataOutStage+0x4a>
  {
    pep = &pdev->ep_out[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8002106:	f8d0 31f4 	ldr.w	r3, [r0, #500]	; 0x1f4
 800210a:	2b03      	cmp	r3, #3
 800210c:	d10d      	bne.n	800212a <USBD_LL_DataOutStage+0x2c>
    {
      if(pep->rem_length > pep->maxpacket)
 800210e:	e9d0 2343 	ldrd	r2, r3, [r0, #268]	; 0x10c
 8002112:	429a      	cmp	r2, r3
 8002114:	d90b      	bls.n	800212e <USBD_LL_DataOutStage+0x30>
      {
        pep->rem_length -=  pep->maxpacket;
 8002116:	1ad2      	subs	r2, r2, r3
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 8002118:	429a      	cmp	r2, r3
        pep->rem_length -=  pep->maxpacket;
 800211a:	f8c0 210c 	str.w	r2, [r0, #268]	; 0x10c
                            MIN(pep->rem_length ,pep->maxpacket));
 800211e:	bf28      	it	cs
 8002120:	461a      	movcs	r2, r3
        USBD_CtlContinueRx (pdev, 
 8002122:	4629      	mov	r1, r5
 8002124:	b292      	uxth	r2, r2
 8002126:	f000 fa89 	bl	800263c <USBD_CtlContinueRx>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum); 
  }  
  return USBD_OK;
}
 800212a:	2000      	movs	r0, #0
 800212c:	bd38      	pop	{r3, r4, r5, pc}
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800212e:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002132:	691b      	ldr	r3, [r3, #16]
 8002134:	b123      	cbz	r3, 8002140 <USBD_LL_DataOutStage+0x42>
 8002136:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800213a:	2a03      	cmp	r2, #3
 800213c:	d100      	bne.n	8002140 <USBD_LL_DataOutStage+0x42>
          pdev->pClass->EP0_RxReady(pdev); 
 800213e:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8002140:	4620      	mov	r0, r4
 8002142:	f000 fa83 	bl	800264c <USBD_CtlSendStatus>
 8002146:	e7f0      	b.n	800212a <USBD_LL_DataOutStage+0x2c>
  else if((pdev->pClass->DataOut != NULL)&&
 8002148:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800214c:	699b      	ldr	r3, [r3, #24]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d0eb      	beq.n	800212a <USBD_LL_DataOutStage+0x2c>
 8002152:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002156:	2a03      	cmp	r2, #3
 8002158:	d1e7      	bne.n	800212a <USBD_LL_DataOutStage+0x2c>
    pdev->pClass->DataOut(pdev, epnum); 
 800215a:	4798      	blx	r3
 800215c:	e7e5      	b.n	800212a <USBD_LL_DataOutStage+0x2c>

0800215e <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 800215e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002160:	4604      	mov	r4, r0
 8002162:	4613      	mov	r3, r2
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 8002164:	460f      	mov	r7, r1
 8002166:	2900      	cmp	r1, #0
 8002168:	d13d      	bne.n	80021e6 <USBD_LL_DataInStage+0x88>
  {
    pep = &pdev->ep_in[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800216a:	f8d0 21f4 	ldr.w	r2, [r0, #500]	; 0x1f4
 800216e:	2a02      	cmp	r2, #2
 8002170:	d10f      	bne.n	8002192 <USBD_LL_DataInStage+0x34>
    {
      if(pep->rem_length > pep->maxpacket)
 8002172:	e9d0 5607 	ldrd	r5, r6, [r0, #28]
 8002176:	42b5      	cmp	r5, r6
 8002178:	d914      	bls.n	80021a4 <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -=  pep->maxpacket;
 800217a:	1bae      	subs	r6, r5, r6
        
        USBD_CtlContinueSendData (pdev, 
 800217c:	4619      	mov	r1, r3
        pep->rem_length -=  pep->maxpacket;
 800217e:	61c6      	str	r6, [r0, #28]
        USBD_CtlContinueSendData (pdev, 
 8002180:	b2b2      	uxth	r2, r6
 8002182:	f000 fa46 	bl	8002612 <USBD_CtlContinueSendData>
                                  pdata, 
                                  pep->rem_length);
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8002186:	463b      	mov	r3, r7
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
          pdev->ep0_data_len = 0;
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8002188:	461a      	mov	r2, r3
 800218a:	4619      	mov	r1, r3
 800218c:	4620      	mov	r0, r4
 800218e:	f000 fcad 	bl	8002aec <USBD_LL_PrepareReceive>
          }          
          USBD_CtlReceiveStatus(pdev);
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 8002192:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8002196:	2b01      	cmp	r3, #1
 8002198:	d102      	bne.n	80021a0 <USBD_LL_DataInStage+0x42>
    {
      USBD_RunTestMode(pdev); 
      pdev->dev_test_mode = 0;
 800219a:	2300      	movs	r3, #0
 800219c:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
  }  
  return USBD_OK;
}
 80021a0:	2000      	movs	r0, #0
 80021a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if((pep->total_length % pep->maxpacket == 0) &&
 80021a4:	6983      	ldr	r3, [r0, #24]
 80021a6:	fbb3 f5f6 	udiv	r5, r3, r6
 80021aa:	fb06 3515 	mls	r5, r6, r5, r3
 80021ae:	b965      	cbnz	r5, 80021ca <USBD_LL_DataInStage+0x6c>
 80021b0:	429e      	cmp	r6, r3
 80021b2:	d80a      	bhi.n	80021ca <USBD_LL_DataInStage+0x6c>
           (pep->total_length >= pep->maxpacket) &&
 80021b4:	f8d0 21f8 	ldr.w	r2, [r0, #504]	; 0x1f8
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d206      	bcs.n	80021ca <USBD_LL_DataInStage+0x6c>
          USBD_CtlContinueSendData(pdev , NULL, 0);
 80021bc:	462a      	mov	r2, r5
 80021be:	f000 fa28 	bl	8002612 <USBD_CtlContinueSendData>
        USBD_LL_PrepareReceive (pdev,
 80021c2:	462b      	mov	r3, r5
          pdev->ep0_data_len = 0;
 80021c4:	f8c4 51f8 	str.w	r5, [r4, #504]	; 0x1f8
        USBD_LL_PrepareReceive (pdev,
 80021c8:	e7de      	b.n	8002188 <USBD_LL_DataInStage+0x2a>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80021ca:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	b12b      	cbz	r3, 80021de <USBD_LL_DataInStage+0x80>
 80021d2:	f894 21fc 	ldrb.w	r2, [r4, #508]	; 0x1fc
 80021d6:	2a03      	cmp	r2, #3
 80021d8:	d101      	bne.n	80021de <USBD_LL_DataInStage+0x80>
            pdev->pClass->EP0_TxSent(pdev); 
 80021da:	4620      	mov	r0, r4
 80021dc:	4798      	blx	r3
          USBD_CtlReceiveStatus(pdev);
 80021de:	4620      	mov	r0, r4
 80021e0:	f000 fa3f 	bl	8002662 <USBD_CtlReceiveStatus>
 80021e4:	e7d5      	b.n	8002192 <USBD_LL_DataInStage+0x34>
  else if((pdev->pClass->DataIn != NULL)&& 
 80021e6:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80021ea:	695b      	ldr	r3, [r3, #20]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d0d7      	beq.n	80021a0 <USBD_LL_DataInStage+0x42>
 80021f0:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80021f4:	2a03      	cmp	r2, #3
 80021f6:	d1d3      	bne.n	80021a0 <USBD_LL_DataInStage+0x42>
    pdev->pClass->DataIn(pdev, epnum); 
 80021f8:	4798      	blx	r3
 80021fa:	e7d1      	b.n	80021a0 <USBD_LL_DataInStage+0x42>

080021fc <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 80021fc:	2200      	movs	r2, #0
{
 80021fe:	b538      	push	{r3, r4, r5, lr}
 8002200:	4604      	mov	r4, r0
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8002202:	2540      	movs	r5, #64	; 0x40
  USBD_LL_OpenEP(pdev,
 8002204:	4611      	mov	r1, r2
 8002206:	2340      	movs	r3, #64	; 0x40
 8002208:	f000 fc18 	bl	8002a3c <USBD_LL_OpenEP>
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 800220c:	462b      	mov	r3, r5
 800220e:	2200      	movs	r2, #0
 8002210:	2180      	movs	r1, #128	; 0x80
 8002212:	4620      	mov	r0, r4
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8002214:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
  USBD_LL_OpenEP(pdev,
 8002218:	f000 fc10 	bl	8002a3c <USBD_LL_OpenEP>
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800221c:	2301      	movs	r3, #1
 800221e:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 8002222:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8002226:	6225      	str	r5, [r4, #32]
  if (pdev->pClassData) 
 8002228:	b12b      	cbz	r3, 8002236 <USBD_LL_Reset+0x3a>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 800222a:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 800222e:	4620      	mov	r0, r4
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	7921      	ldrb	r1, [r4, #4]
 8002234:	4798      	blx	r3
 
  
  return USBD_OK;
}
 8002236:	2000      	movs	r0, #0
 8002238:	bd38      	pop	{r3, r4, r5, pc}

0800223a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 800223a:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 800223c:	2000      	movs	r0, #0
 800223e:	4770      	bx	lr

08002240 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8002240:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8002244:	f880 31fd 	strb.w	r3, [r0, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8002248:	2304      	movs	r3, #4
 800224a:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 800224e:	2000      	movs	r0, #0
 8002250:	4770      	bx	lr

08002252 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;  
 8002252:	f890 31fd 	ldrb.w	r3, [r0, #509]	; 0x1fd
 8002256:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 800225a:	2000      	movs	r0, #0
 800225c:	4770      	bx	lr

0800225e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800225e:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8002260:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002264:	2a03      	cmp	r2, #3
 8002266:	d104      	bne.n	8002272 <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 8002268:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800226c:	69db      	ldr	r3, [r3, #28]
 800226e:	b103      	cbz	r3, 8002272 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 8002270:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 8002272:	2000      	movs	r0, #0
 8002274:	bd08      	pop	{r3, pc}

08002276 <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 8002276:	b510      	push	{r4, lr}
 8002278:	4604      	mov	r4, r0
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80);
 800227a:	2180      	movs	r1, #128	; 0x80
 800227c:	f000 fbee 	bl	8002a5c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 8002280:	4620      	mov	r0, r4
}
 8002282:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0);
 8002286:	2100      	movs	r1, #0
 8002288:	f000 bbe8 	b.w	8002a5c <USBD_LL_StallEP>

0800228c <USBD_StdDevReq>:
{
 800228c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800228e:	784b      	ldrb	r3, [r1, #1]
 8002290:	4604      	mov	r4, r0
 8002292:	460d      	mov	r5, r1
 8002294:	2b09      	cmp	r3, #9
 8002296:	d87d      	bhi.n	8002394 <USBD_StdDevReq+0x108>
 8002298:	e8df f013 	tbh	[pc, r3, lsl #1]
 800229c:	00ec00d0 	.word	0x00ec00d0
 80022a0:	00e0007c 	.word	0x00e0007c
 80022a4:	0074007c 	.word	0x0074007c
 80022a8:	007c000a 	.word	0x007c000a
 80022ac:	009400c0 	.word	0x009400c0
  switch (req->wValue >> 8)
 80022b0:	8849      	ldrh	r1, [r1, #2]
 80022b2:	0a0b      	lsrs	r3, r1, #8
 80022b4:	3b01      	subs	r3, #1
 80022b6:	2b06      	cmp	r3, #6
 80022b8:	d86c      	bhi.n	8002394 <USBD_StdDevReq+0x108>
 80022ba:	e8df f003 	tbb	[pc, r3]
 80022be:	1c04      	.short	0x1c04
 80022c0:	506b6b29 	.word	0x506b6b29
 80022c4:	59          	.byte	0x59
 80022c5:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80022c6:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80022ca:	681b      	ldr	r3, [r3, #0]
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 80022cc:	7c20      	ldrb	r0, [r4, #16]
 80022ce:	f10d 0106 	add.w	r1, sp, #6
 80022d2:	4798      	blx	r3
  if((len != 0)&& (req->wLength != 0))
 80022d4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80022d8:	2a00      	cmp	r2, #0
 80022da:	d06e      	beq.n	80023ba <USBD_StdDevReq+0x12e>
 80022dc:	88eb      	ldrh	r3, [r5, #6]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d06b      	beq.n	80023ba <USBD_StdDevReq+0x12e>
    len = MIN(len , req->wLength);
 80022e2:	429a      	cmp	r2, r3
 80022e4:	bf28      	it	cs
 80022e6:	461a      	movcs	r2, r3
    USBD_CtlSendData (pdev, 
 80022e8:	4601      	mov	r1, r0
    len = MIN(len , req->wLength);
 80022ea:	f8ad 2006 	strh.w	r2, [sp, #6]
    USBD_CtlSendData (pdev, 
 80022ee:	4620      	mov	r0, r4
 80022f0:	f000 f982 	bl	80025f8 <USBD_CtlSendData>
    break;
 80022f4:	e061      	b.n	80023ba <USBD_StdDevReq+0x12e>
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 80022f6:	7c02      	ldrb	r2, [r0, #16]
 80022f8:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80022fc:	b932      	cbnz	r2, 800230c <USBD_StdDevReq+0x80>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 80022fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8002300:	f10d 0006 	add.w	r0, sp, #6
 8002304:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8002306:	2302      	movs	r3, #2
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8002308:	7043      	strb	r3, [r0, #1]
      break; 
 800230a:	e7e3      	b.n	80022d4 <USBD_StdDevReq+0x48>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800230c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800230e:	e7f7      	b.n	8002300 <USBD_StdDevReq+0x74>
    switch ((uint8_t)(req->wValue))
 8002310:	b2c9      	uxtb	r1, r1
 8002312:	2905      	cmp	r1, #5
 8002314:	d81c      	bhi.n	8002350 <USBD_StdDevReq+0xc4>
 8002316:	e8df f001 	tbb	[pc, r1]
 800231a:	0703      	.short	0x0703
 800231c:	17130f0b 	.word	0x17130f0b
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8002320:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	e7d1      	b.n	80022cc <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8002328:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	e7cd      	b.n	80022cc <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8002330:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002334:	68db      	ldr	r3, [r3, #12]
 8002336:	e7c9      	b.n	80022cc <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8002338:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800233c:	691b      	ldr	r3, [r3, #16]
 800233e:	e7c5      	b.n	80022cc <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8002340:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002344:	695b      	ldr	r3, [r3, #20]
 8002346:	e7c1      	b.n	80022cc <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8002348:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800234c:	699b      	ldr	r3, [r3, #24]
 800234e:	e7bd      	b.n	80022cc <USBD_StdDevReq+0x40>
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
 8002350:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002354:	f10d 0206 	add.w	r2, sp, #6
 8002358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800235a:	4798      	blx	r3
      break;
 800235c:	e7ba      	b.n	80022d4 <USBD_StdDevReq+0x48>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 800235e:	7c03      	ldrb	r3, [r0, #16]
 8002360:	b9c3      	cbnz	r3, 8002394 <USBD_StdDevReq+0x108>
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8002362:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002366:	f10d 0006 	add.w	r0, sp, #6
 800236a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800236c:	4798      	blx	r3
      break;
 800236e:	e7b1      	b.n	80022d4 <USBD_StdDevReq+0x48>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8002370:	7c03      	ldrb	r3, [r0, #16]
 8002372:	b97b      	cbnz	r3, 8002394 <USBD_StdDevReq+0x108>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8002374:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002378:	f10d 0006 	add.w	r0, sp, #6
 800237c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237e:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8002380:	2307      	movs	r3, #7
 8002382:	e7c1      	b.n	8002308 <USBD_StdDevReq+0x7c>
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 8002384:	888b      	ldrh	r3, [r1, #4]
 8002386:	b92b      	cbnz	r3, 8002394 <USBD_StdDevReq+0x108>
 8002388:	88cb      	ldrh	r3, [r1, #6]
 800238a:	b91b      	cbnz	r3, 8002394 <USBD_StdDevReq+0x108>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 800238c:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8002390:	2b03      	cmp	r3, #3
 8002392:	d103      	bne.n	800239c <USBD_StdDevReq+0x110>
       USBD_CtlError(pdev , req);                     
 8002394:	4620      	mov	r0, r4
 8002396:	f7ff ff6e 	bl	8002276 <USBD_CtlError.constprop.0>
      break;
 800239a:	e00e      	b.n	80023ba <USBD_StdDevReq+0x12e>
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 800239c:	788d      	ldrb	r5, [r1, #2]
 800239e:	f005 057f 	and.w	r5, r5, #127	; 0x7f
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 80023a2:	4629      	mov	r1, r5
      pdev->dev_address = dev_addr;
 80023a4:	f880 51fe 	strb.w	r5, [r0, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 80023a8:	f000 fb84 	bl	8002ab4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 80023ac:	4620      	mov	r0, r4
 80023ae:	f000 f94d 	bl	800264c <USBD_CtlSendStatus>
      if (dev_addr != 0) 
 80023b2:	b12d      	cbz	r5, 80023c0 <USBD_StdDevReq+0x134>
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 80023b4:	2302      	movs	r3, #2
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 80023b6:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
}
 80023ba:	2000      	movs	r0, #0
 80023bc:	b003      	add	sp, #12
 80023be:	bd30      	pop	{r4, r5, pc}
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 80023c0:	2301      	movs	r3, #1
 80023c2:	e7f8      	b.n	80023b6 <USBD_StdDevReq+0x12a>
  cfgidx = (uint8_t)(req->wValue);                 
 80023c4:	7889      	ldrb	r1, [r1, #2]
 80023c6:	4d30      	ldr	r5, [pc, #192]	; (8002488 <USBD_StdDevReq+0x1fc>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 80023c8:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);                 
 80023ca:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 80023cc:	d8e2      	bhi.n	8002394 <USBD_StdDevReq+0x108>
    switch (pdev->dev_state) 
 80023ce:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d00c      	beq.n	80023f0 <USBD_StdDevReq+0x164>
 80023d6:	2b03      	cmp	r3, #3
 80023d8:	d1dc      	bne.n	8002394 <USBD_StdDevReq+0x108>
      if (cfgidx == 0) 
 80023da:	b9b1      	cbnz	r1, 800240a <USBD_StdDevReq+0x17e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80023dc:	2302      	movs	r3, #2
        pdev->dev_config = cfgidx;          
 80023de:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80023e0:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        USBD_ClrClassConfig(pdev , cfgidx);
 80023e4:	f7ff fe57 	bl	8002096 <USBD_ClrClassConfig>
      USBD_CtlSendStatus(pdev);
 80023e8:	4620      	mov	r0, r4
 80023ea:	f000 f92f 	bl	800264c <USBD_CtlSendStatus>
 80023ee:	e7e4      	b.n	80023ba <USBD_StdDevReq+0x12e>
      if (cfgidx) 
 80023f0:	2900      	cmp	r1, #0
 80023f2:	d0f9      	beq.n	80023e8 <USBD_StdDevReq+0x15c>
        pdev->dev_config = cfgidx;
 80023f4:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80023f6:	2303      	movs	r3, #3
        pdev->dev_config = cfgidx;
 80023f8:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80023fa:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 80023fe:	4620      	mov	r0, r4
 8002400:	f7ff fe3e 	bl	8002080 <USBD_SetClassConfig>
 8002404:	2802      	cmp	r0, #2
 8002406:	d1ef      	bne.n	80023e8 <USBD_StdDevReq+0x15c>
 8002408:	e7c4      	b.n	8002394 <USBD_StdDevReq+0x108>
      else  if (cfgidx != pdev->dev_config) 
 800240a:	6841      	ldr	r1, [r0, #4]
 800240c:	2901      	cmp	r1, #1
 800240e:	d0eb      	beq.n	80023e8 <USBD_StdDevReq+0x15c>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 8002410:	b2c9      	uxtb	r1, r1
 8002412:	f7ff fe40 	bl	8002096 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8002416:	7829      	ldrb	r1, [r5, #0]
 8002418:	6061      	str	r1, [r4, #4]
 800241a:	e7f0      	b.n	80023fe <USBD_StdDevReq+0x172>
  if (req->wLength != 1) 
 800241c:	88ca      	ldrh	r2, [r1, #6]
 800241e:	2a01      	cmp	r2, #1
 8002420:	d1b8      	bne.n	8002394 <USBD_StdDevReq+0x108>
    switch (pdev->dev_state )  
 8002422:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8002426:	2b02      	cmp	r3, #2
 8002428:	d003      	beq.n	8002432 <USBD_StdDevReq+0x1a6>
 800242a:	2b03      	cmp	r3, #3
 800242c:	d1b2      	bne.n	8002394 <USBD_StdDevReq+0x108>
      USBD_CtlSendData (pdev, 
 800242e:	1d01      	adds	r1, r0, #4
 8002430:	e75d      	b.n	80022ee <USBD_StdDevReq+0x62>
      pdev->dev_default_config = 0;
 8002432:	4601      	mov	r1, r0
 8002434:	2300      	movs	r3, #0
 8002436:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData (pdev, 
 800243a:	e758      	b.n	80022ee <USBD_StdDevReq+0x62>
  switch (pdev->dev_state) 
 800243c:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8002440:	3b02      	subs	r3, #2
 8002442:	2b01      	cmp	r3, #1
 8002444:	d8a6      	bhi.n	8002394 <USBD_StdDevReq+0x108>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 8002446:	2301      	movs	r3, #1
 8002448:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup) 
 800244a:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 800244e:	b10b      	cbz	r3, 8002454 <USBD_StdDevReq+0x1c8>
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 8002450:	2303      	movs	r3, #3
 8002452:	60c3      	str	r3, [r0, #12]
    USBD_CtlSendData (pdev, 
 8002454:	2202      	movs	r2, #2
 8002456:	f104 010c 	add.w	r1, r4, #12
 800245a:	e748      	b.n	80022ee <USBD_StdDevReq+0x62>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800245c:	884b      	ldrh	r3, [r1, #2]
 800245e:	2b01      	cmp	r3, #1
 8002460:	d1ab      	bne.n	80023ba <USBD_StdDevReq+0x12e>
      pdev->dev_remote_wakeup = 0; 
 8002462:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 8002466:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 800246a:	4629      	mov	r1, r5
 800246c:	4620      	mov	r0, r4
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	4798      	blx	r3
 8002472:	e7b9      	b.n	80023e8 <USBD_StdDevReq+0x15c>
  switch (pdev->dev_state)
 8002474:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8002478:	3b02      	subs	r3, #2
 800247a:	2b01      	cmp	r3, #1
 800247c:	d88a      	bhi.n	8002394 <USBD_StdDevReq+0x108>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 800247e:	884b      	ldrh	r3, [r1, #2]
 8002480:	2b01      	cmp	r3, #1
 8002482:	d19a      	bne.n	80023ba <USBD_StdDevReq+0x12e>
      pdev->dev_remote_wakeup = 0; 
 8002484:	2300      	movs	r3, #0
 8002486:	e7ec      	b.n	8002462 <USBD_StdDevReq+0x1d6>
 8002488:	200001db 	.word	0x200001db

0800248c <USBD_StdItfReq>:
{
 800248c:	b538      	push	{r3, r4, r5, lr}
  switch (pdev->dev_state) 
 800248e:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
{
 8002492:	4604      	mov	r4, r0
  switch (pdev->dev_state) 
 8002494:	2b03      	cmp	r3, #3
{
 8002496:	460d      	mov	r5, r1
  switch (pdev->dev_state) 
 8002498:	d10d      	bne.n	80024b6 <USBD_StdItfReq+0x2a>
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 800249a:	790b      	ldrb	r3, [r1, #4]
 800249c:	2b01      	cmp	r3, #1
 800249e:	d80a      	bhi.n	80024b6 <USBD_StdItfReq+0x2a>
      pdev->pClass->Setup (pdev, req); 
 80024a0:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	4798      	blx	r3
      if((req->wLength == 0)&& (ret == USBD_OK))
 80024a8:	88eb      	ldrh	r3, [r5, #6]
 80024aa:	b913      	cbnz	r3, 80024b2 <USBD_StdItfReq+0x26>
         USBD_CtlSendStatus(pdev);
 80024ac:	4620      	mov	r0, r4
 80024ae:	f000 f8cd 	bl	800264c <USBD_CtlSendStatus>
}
 80024b2:	2000      	movs	r0, #0
 80024b4:	bd38      	pop	{r3, r4, r5, pc}
     USBD_CtlError(pdev , req);
 80024b6:	f7ff fede 	bl	8002276 <USBD_CtlError.constprop.0>
    break;
 80024ba:	e7fa      	b.n	80024b2 <USBD_StdItfReq+0x26>

080024bc <USBD_StdEPReq>:
{
 80024bc:	b570      	push	{r4, r5, r6, lr}
  if ((req->bmRequest & 0x60) == 0x20)
 80024be:	780a      	ldrb	r2, [r1, #0]
{
 80024c0:	4604      	mov	r4, r0
  if ((req->bmRequest & 0x60) == 0x20)
 80024c2:	f002 0260 	and.w	r2, r2, #96	; 0x60
 80024c6:	2a20      	cmp	r2, #32
{
 80024c8:	460d      	mov	r5, r1
  ep_addr  = LOBYTE(req->wIndex);   
 80024ca:	888e      	ldrh	r6, [r1, #4]
 80024cc:	790b      	ldrb	r3, [r1, #4]
  if ((req->bmRequest & 0x60) == 0x20)
 80024ce:	d105      	bne.n	80024dc <USBD_StdEPReq+0x20>
    pdev->pClass->Setup (pdev, req);
 80024d0:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	4798      	blx	r3
}
 80024d8:	2000      	movs	r0, #0
 80024da:	bd70      	pop	{r4, r5, r6, pc}
  switch (req->bRequest) 
 80024dc:	784a      	ldrb	r2, [r1, #1]
 80024de:	2a01      	cmp	r2, #1
 80024e0:	d03a      	beq.n	8002558 <USBD_StdEPReq+0x9c>
 80024e2:	2a03      	cmp	r2, #3
 80024e4:	d01d      	beq.n	8002522 <USBD_StdEPReq+0x66>
 80024e6:	2a00      	cmp	r2, #0
 80024e8:	d1f6      	bne.n	80024d8 <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 80024ea:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80024ee:	2a02      	cmp	r2, #2
 80024f0:	d041      	beq.n	8002576 <USBD_StdEPReq+0xba>
 80024f2:	2a03      	cmp	r2, #3
 80024f4:	d11b      	bne.n	800252e <USBD_StdEPReq+0x72>
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 80024f6:	f003 057f 	and.w	r5, r3, #127	; 0x7f
 80024fa:	eb00 1505 	add.w	r5, r0, r5, lsl #4
 80024fe:	0632      	lsls	r2, r6, #24
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8002500:	4619      	mov	r1, r3
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8002502:	bf4c      	ite	mi
 8002504:	3514      	addmi	r5, #20
 8002506:	f505 7582 	addpl.w	r5, r5, #260	; 0x104
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 800250a:	f000 fac3 	bl	8002a94 <USBD_LL_IsStallEP>
 800250e:	3800      	subs	r0, #0
 8002510:	bf18      	it	ne
 8002512:	2001      	movne	r0, #1
      USBD_CtlSendData (pdev,
 8002514:	2202      	movs	r2, #2
 8002516:	6028      	str	r0, [r5, #0]
 8002518:	4629      	mov	r1, r5
 800251a:	4620      	mov	r0, r4
 800251c:	f000 f86c 	bl	80025f8 <USBD_CtlSendData>
      break;
 8002520:	e7da      	b.n	80024d8 <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 8002522:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002526:	2a02      	cmp	r2, #2
 8002528:	d025      	beq.n	8002576 <USBD_StdEPReq+0xba>
 800252a:	2a03      	cmp	r2, #3
 800252c:	d003      	beq.n	8002536 <USBD_StdEPReq+0x7a>
      USBD_CtlError(pdev , req);
 800252e:	4620      	mov	r0, r4
 8002530:	f7ff fea1 	bl	8002276 <USBD_CtlError.constprop.0>
      break;    
 8002534:	e7d0      	b.n	80024d8 <USBD_StdEPReq+0x1c>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8002536:	884a      	ldrh	r2, [r1, #2]
 8002538:	b922      	cbnz	r2, 8002544 <USBD_StdEPReq+0x88>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 800253a:	065a      	lsls	r2, r3, #25
 800253c:	d002      	beq.n	8002544 <USBD_StdEPReq+0x88>
          USBD_LL_StallEP(pdev , ep_addr);
 800253e:	4619      	mov	r1, r3
 8002540:	f000 fa8c 	bl	8002a5c <USBD_LL_StallEP>
          pdev->pClass->Setup (pdev, req);
 8002544:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8002548:	4629      	mov	r1, r5
 800254a:	4620      	mov	r0, r4
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8002550:	4620      	mov	r0, r4
 8002552:	f000 f87b 	bl	800264c <USBD_CtlSendStatus>
 8002556:	e7bf      	b.n	80024d8 <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 8002558:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800255c:	2a02      	cmp	r2, #2
 800255e:	d00a      	beq.n	8002576 <USBD_StdEPReq+0xba>
 8002560:	2a03      	cmp	r2, #3
 8002562:	d1e4      	bne.n	800252e <USBD_StdEPReq+0x72>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8002564:	884a      	ldrh	r2, [r1, #2]
 8002566:	2a00      	cmp	r2, #0
 8002568:	d1b6      	bne.n	80024d8 <USBD_StdEPReq+0x1c>
        if ((ep_addr & 0x7F) != 0x00) 
 800256a:	065e      	lsls	r6, r3, #25
 800256c:	d0f0      	beq.n	8002550 <USBD_StdEPReq+0x94>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 800256e:	4619      	mov	r1, r3
 8002570:	f000 fa82 	bl	8002a78 <USBD_LL_ClearStallEP>
 8002574:	e7e6      	b.n	8002544 <USBD_StdEPReq+0x88>
      if ((ep_addr & 0x7F) != 0x00) 
 8002576:	0659      	lsls	r1, r3, #25
 8002578:	d0ae      	beq.n	80024d8 <USBD_StdEPReq+0x1c>
        USBD_LL_StallEP(pdev , ep_addr);
 800257a:	4619      	mov	r1, r3
 800257c:	f000 fa6e 	bl	8002a5c <USBD_LL_StallEP>
 8002580:	e7aa      	b.n	80024d8 <USBD_StdEPReq+0x1c>

08002582 <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 8002582:	780b      	ldrb	r3, [r1, #0]
 8002584:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8002586:	784b      	ldrb	r3, [r1, #1]
 8002588:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800258a:	78ca      	ldrb	r2, [r1, #3]
 800258c:	788b      	ldrb	r3, [r1, #2]
 800258e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002592:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8002594:	794a      	ldrb	r2, [r1, #5]
 8002596:	790b      	ldrb	r3, [r1, #4]
 8002598:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800259c:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800259e:	79ca      	ldrb	r2, [r1, #7]
 80025a0:	798b      	ldrb	r3, [r1, #6]
 80025a2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80025a6:	80c3      	strh	r3, [r0, #6]
}
 80025a8:	4770      	bx	lr

080025aa <USBD_CtlError>:
{
 80025aa:	b510      	push	{r4, lr}
 80025ac:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80);
 80025ae:	2180      	movs	r1, #128	; 0x80
 80025b0:	f000 fa54 	bl	8002a5c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 80025b4:	4620      	mov	r0, r4
}
 80025b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0);
 80025ba:	2100      	movs	r1, #0
 80025bc:	f000 ba4e 	b.w	8002a5c <USBD_LL_StallEP>

080025c0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80025c0:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0;
  
  if (desc != NULL) 
 80025c2:	b188      	cbz	r0, 80025e8 <USBD_GetString+0x28>
 80025c4:	2500      	movs	r5, #0
 80025c6:	3801      	subs	r0, #1
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;

    while (*buf != '\0') 
 80025c8:	462b      	mov	r3, r5
 80025ca:	3501      	adds	r5, #1
 80025cc:	5d44      	ldrb	r4, [r0, r5]
 80025ce:	2c00      	cmp	r4, #0
 80025d0:	d1fa      	bne.n	80025c8 <USBD_GetString+0x8>
    *len =  USBD_GetLen(desc) * 2 + 2;    
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	3301      	adds	r3, #1
 80025d6:	005b      	lsls	r3, r3, #1
 80025d8:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *len;
 80025da:	700b      	strb	r3, [r1, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 80025dc:	2303      	movs	r3, #3
 80025de:	704b      	strb	r3, [r1, #1]
 80025e0:	2302      	movs	r3, #2
    while (*desc != '\0') 
 80025e2:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80025e6:	b905      	cbnz	r5, 80025ea <USBD_GetString+0x2a>
}
 80025e8:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 80025ea:	1c5a      	adds	r2, r3, #1
 80025ec:	54cd      	strb	r5, [r1, r3]
 80025ee:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0x00;
 80025f0:	3302      	adds	r3, #2
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	548c      	strb	r4, [r1, r2]
 80025f6:	e7f4      	b.n	80025e2 <USBD_GetString+0x22>

080025f8 <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 80025f8:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 80025fa:	2202      	movs	r2, #2
{
 80025fc:	b510      	push	{r4, lr}
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;
 80025fe:	e9c0 3306 	strd	r3, r3, [r0, #24]
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 8002602:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8002606:	460a      	mov	r2, r1
 8002608:	2100      	movs	r1, #0
 800260a:	f000 fa61 	bl	8002ad0 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 800260e:	2000      	movs	r0, #0
 8002610:	bd10      	pop	{r4, pc}

08002612 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 8002612:	b508      	push	{r3, lr}
 8002614:	4613      	mov	r3, r2
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 8002616:	460a      	mov	r2, r1
 8002618:	2100      	movs	r1, #0
 800261a:	f000 fa59 	bl	8002ad0 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 800261e:	2000      	movs	r0, #0
 8002620:	bd08      	pop	{r3, pc}

08002622 <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 8002622:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 8002624:	2203      	movs	r2, #3
{
 8002626:	b510      	push	{r4, lr}
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length   = len;
 8002628:	e9c0 3342 	strd	r3, r3, [r0, #264]	; 0x108
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 800262c:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 8002630:	460a      	mov	r2, r1
 8002632:	2100      	movs	r1, #0
 8002634:	f000 fa5a 	bl	8002aec <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
}
 8002638:	2000      	movs	r0, #0
 800263a:	bd10      	pop	{r4, pc}

0800263c <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 800263c:	b508      	push	{r3, lr}
 800263e:	4613      	mov	r3, r2

  USBD_LL_PrepareReceive (pdev,
 8002640:	460a      	mov	r2, r1
 8002642:	2100      	movs	r1, #0
 8002644:	f000 fa52 	bl	8002aec <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
}
 8002648:	2000      	movs	r0, #0
 800264a:	bd08      	pop	{r3, pc}

0800264c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 800264c:	b508      	push	{r3, lr}

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800264e:	2304      	movs	r3, #4
 8002650:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 8002654:	2300      	movs	r3, #0
 8002656:	461a      	mov	r2, r3
 8002658:	4619      	mov	r1, r3
 800265a:	f000 fa39 	bl	8002ad0 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 800265e:	2000      	movs	r0, #0
 8002660:	bd08      	pop	{r3, pc}

08002662 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 8002662:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 8002664:	2305      	movs	r3, #5
 8002666:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 800266a:	2300      	movs	r3, #0
 800266c:	461a      	mov	r2, r3
 800266e:	4619      	mov	r1, r3
 8002670:	f000 fa3c 	bl	8002aec <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
}
 8002674:	2000      	movs	r0, #0
 8002676:	bd08      	pop	{r3, pc}

08002678 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002678:	b530      	push	{r4, r5, lr}
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800267a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800267e:	2401      	movs	r4, #1
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002680:	2502      	movs	r5, #2
{
 8002682:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002684:	2200      	movs	r2, #0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002686:	e9cd 430a 	strd	r4, r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800268a:	e9cd 5311 	strd	r5, r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800268e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002692:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002694:	920c      	str	r2, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002696:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8002698:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800269a:	f7fe fc07 	bl	8000eac <HAL_RCC_OscConfig>
 800269e:	b100      	cbz	r0, 80026a2 <SystemClock_Config+0x2a>
  */
void _Error_Handler(char *file, int line)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 80026a0:	e7fe      	b.n	80026a0 <SystemClock_Config+0x28>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80026a2:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80026a4:	e9cd 3505 	strd	r3, r5, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80026a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80026ac:	9007      	str	r0, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80026ae:	e9cd 3008 	strd	r3, r0, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80026b2:	4621      	mov	r1, r4
 80026b4:	a805      	add	r0, sp, #20
 80026b6:	f7fe fdbf 	bl	8001238 <HAL_RCC_ClockConfig>
 80026ba:	b100      	cbz	r0, 80026be <SystemClock_Config+0x46>
  while(1)
 80026bc:	e7fe      	b.n	80026bc <SystemClock_Config+0x44>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80026be:	2310      	movs	r3, #16
 80026c0:	9301      	str	r3, [sp, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80026c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026c6:	a801      	add	r0, sp, #4
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80026c8:	9304      	str	r3, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026ca:	f7fe fe5d 	bl	8001388 <HAL_RCCEx_PeriphCLKConfig>
 80026ce:	4604      	mov	r4, r0
 80026d0:	b100      	cbz	r0, 80026d4 <SystemClock_Config+0x5c>
  while(1)
 80026d2:	e7fe      	b.n	80026d2 <SystemClock_Config+0x5a>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80026d4:	f7fe fe52 	bl	800137c <HAL_RCC_GetHCLKFreq>
 80026d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026dc:	fbb0 f0f3 	udiv	r0, r0, r3
 80026e0:	f7fd fdde 	bl	80002a0 <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80026e4:	2004      	movs	r0, #4
 80026e6:	f7fd fdf1 	bl	80002cc <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80026ea:	4622      	mov	r2, r4
 80026ec:	4621      	mov	r1, r4
 80026ee:	f04f 30ff 	mov.w	r0, #4294967295
 80026f2:	f7fd fd97 	bl	8000224 <HAL_NVIC_SetPriority>
}
 80026f6:	b015      	add	sp, #84	; 0x54
 80026f8:	bd30      	pop	{r4, r5, pc}
	...

080026fc <main>:
{
 80026fc:	b590      	push	{r4, r7, lr}
 80026fe:	b089      	sub	sp, #36	; 0x24
 8002700:	af00      	add	r7, sp, #0
  HAL_Init();
 8002702:	f7fd fd47 	bl	8000194 <HAL_Init>
  SystemClock_Config();
 8002706:	f7ff ffb7 	bl	8002678 <SystemClock_Config>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800270a:	4b1e      	ldr	r3, [pc, #120]	; (8002784 <main+0x88>)
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800270c:	f44f 4480 	mov.w	r4, #16384	; 0x4000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002710:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_Init(Firmup_Pin_GPIO_Port, &GPIO_InitStruct);
 8002712:	481d      	ldr	r0, [pc, #116]	; (8002788 <main+0x8c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002714:	f042 0210 	orr.w	r2, r2, #16
 8002718:	619a      	str	r2, [r3, #24]
 800271a:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_Init(Firmup_Pin_GPIO_Port, &GPIO_InitStruct);
 800271c:	f107 0110 	add.w	r1, r7, #16
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002720:	f002 0210 	and.w	r2, r2, #16
 8002724:	607a      	str	r2, [r7, #4]
 8002726:	687a      	ldr	r2, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002728:	699a      	ldr	r2, [r3, #24]
 800272a:	f042 0220 	orr.w	r2, r2, #32
 800272e:	619a      	str	r2, [r3, #24]
 8002730:	699a      	ldr	r2, [r3, #24]
 8002732:	f002 0220 	and.w	r2, r2, #32
 8002736:	60ba      	str	r2, [r7, #8]
 8002738:	68ba      	ldr	r2, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800273a:	699a      	ldr	r2, [r3, #24]
 800273c:	f042 0204 	orr.w	r2, r2, #4
 8002740:	619a      	str	r2, [r3, #24]
 8002742:	699b      	ldr	r3, [r3, #24]
 8002744:	f003 0304 	and.w	r3, r3, #4
 8002748:	60fb      	str	r3, [r7, #12]
 800274a:	68fb      	ldr	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800274c:	2300      	movs	r3, #0
 800274e:	e9c7 4304 	strd	r4, r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002752:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Firmup_Pin_GPIO_Port, &GPIO_InitStruct);
 8002754:	f7fd fefc 	bl	8000550 <HAL_GPIO_Init>
  if (HAL_GPIO_ReadPin(Firmup_Pin_GPIO_Port, Firmup_Pin_Pin) != GPIO_PIN_RESET)
 8002758:	4621      	mov	r1, r4
 800275a:	480b      	ldr	r0, [pc, #44]	; (8002788 <main+0x8c>)
 800275c:	f7fd ffd4 	bl	8000708 <HAL_GPIO_ReadPin>
 8002760:	b168      	cbz	r0, 800277e <main+0x82>
    if (((*(__IO uint32_t*)USBD_DFU_APP_DEFAULT_ADD - 1) & 0x2FFFB000 ) == 0x20000000)
 8002762:	490a      	ldr	r1, [pc, #40]	; (800278c <main+0x90>)
 8002764:	4b0a      	ldr	r3, [pc, #40]	; (8002790 <main+0x94>)
 8002766:	680a      	ldr	r2, [r1, #0]
 8002768:	3a01      	subs	r2, #1
 800276a:	4013      	ands	r3, r2
 800276c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002770:	d105      	bne.n	800277e <main+0x82>
      JumpAddress = *(__IO uint32_t*) (USBD_DFU_APP_DEFAULT_ADD + 4);
 8002772:	4b08      	ldr	r3, [pc, #32]	; (8002794 <main+0x98>)
 8002774:	681b      	ldr	r3, [r3, #0]
      __set_MSP(*(__IO uint32_t*) USBD_DFU_APP_DEFAULT_ADD);
 8002776:	680a      	ldr	r2, [r1, #0]
  __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 8002778:	f382 8808 	msr	MSP, r2
      Jump_To_Application();
 800277c:	4798      	blx	r3
  MX_USB_DEVICE_Init();
 800277e:	f000 f899 	bl	80028b4 <MX_USB_DEVICE_Init>
  while (1)
 8002782:	e7fe      	b.n	8002782 <main+0x86>
 8002784:	40021000 	.word	0x40021000
 8002788:	40011000 	.word	0x40011000
 800278c:	08010000 	.word	0x08010000
 8002790:	2fffb000 	.word	0x2fffb000
 8002794:	08010004 	.word	0x08010004

08002798 <_Error_Handler>:
  while(1)
 8002798:	e7fe      	b.n	8002798 <_Error_Handler>
	...

0800279c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800279c:	4b25      	ldr	r3, [pc, #148]	; (8002834 <HAL_MspInit+0x98>)
{
 800279e:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 80027a0:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027a2:	2003      	movs	r0, #3
  __HAL_RCC_AFIO_CLK_ENABLE();
 80027a4:	f042 0201 	orr.w	r2, r2, #1
 80027a8:	619a      	str	r2, [r3, #24]
 80027aa:	699a      	ldr	r2, [r3, #24]
 80027ac:	f002 0201 	and.w	r2, r2, #1
 80027b0:	9200      	str	r2, [sp, #0]
 80027b2:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027b4:	69da      	ldr	r2, [r3, #28]
 80027b6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80027ba:	61da      	str	r2, [r3, #28]
 80027bc:	69db      	ldr	r3, [r3, #28]
 80027be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027c2:	9301      	str	r3, [sp, #4]
 80027c4:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027c6:	f7fd fd1b 	bl	8000200 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80027ca:	2200      	movs	r2, #0
 80027cc:	f06f 000b 	mvn.w	r0, #11
 80027d0:	4611      	mov	r1, r2
 80027d2:	f7fd fd27 	bl	8000224 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80027d6:	2200      	movs	r2, #0
 80027d8:	f06f 000a 	mvn.w	r0, #10
 80027dc:	4611      	mov	r1, r2
 80027de:	f7fd fd21 	bl	8000224 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80027e2:	2200      	movs	r2, #0
 80027e4:	f06f 0009 	mvn.w	r0, #9
 80027e8:	4611      	mov	r1, r2
 80027ea:	f7fd fd1b 	bl	8000224 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80027ee:	2200      	movs	r2, #0
 80027f0:	f06f 0004 	mvn.w	r0, #4
 80027f4:	4611      	mov	r1, r2
 80027f6:	f7fd fd15 	bl	8000224 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80027fa:	2200      	movs	r2, #0
 80027fc:	f06f 0003 	mvn.w	r0, #3
 8002800:	4611      	mov	r1, r2
 8002802:	f7fd fd0f 	bl	8000224 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8002806:	2200      	movs	r2, #0
 8002808:	f06f 0001 	mvn.w	r0, #1
 800280c:	4611      	mov	r1, r2
 800280e:	f7fd fd09 	bl	8000224 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002812:	2200      	movs	r2, #0
 8002814:	f04f 30ff 	mov.w	r0, #4294967295
 8002818:	4611      	mov	r1, r2
 800281a:	f7fd fd03 	bl	8000224 <HAL_NVIC_SetPriority>

    /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
    */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800281e:	4a06      	ldr	r2, [pc, #24]	; (8002838 <HAL_MspInit+0x9c>)
 8002820:	6853      	ldr	r3, [r2, #4]
 8002822:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002826:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800282a:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800282c:	b003      	add	sp, #12
 800282e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002832:	bf00      	nop
 8002834:	40021000 	.word	0x40021000
 8002838:	40010000 	.word	0x40010000

0800283c <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800283c:	4770      	bx	lr

0800283e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800283e:	e7fe      	b.n	800283e <HardFault_Handler>

08002840 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002840:	e7fe      	b.n	8002840 <MemManage_Handler>

08002842 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002842:	e7fe      	b.n	8002842 <BusFault_Handler>

08002844 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002844:	e7fe      	b.n	8002844 <UsageFault_Handler>

08002846 <SVC_Handler>:
 8002846:	4770      	bx	lr

08002848 <DebugMon_Handler>:
 8002848:	4770      	bx	lr

0800284a <PendSV_Handler>:
 800284a:	4770      	bx	lr

0800284c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800284c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800284e:	f7fd fcb3 	bl	80001b8 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002852:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8002856:	f7fd bd46 	b.w	80002e6 <HAL_SYSTICK_IRQHandler>
	...

0800285c <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800285c:	4801      	ldr	r0, [pc, #4]	; (8002864 <USB_LP_CAN1_RX0_IRQHandler+0x8>)
 800285e:	f7fe b851 	b.w	8000904 <HAL_PCD_IRQHandler>
 8002862:	bf00      	nop
 8002864:	20000844 	.word	0x20000844

08002868 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002868:	4b0f      	ldr	r3, [pc, #60]	; (80028a8 <SystemInit+0x40>)
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	f042 0201 	orr.w	r2, r2, #1
 8002870:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002872:	6859      	ldr	r1, [r3, #4]
 8002874:	4a0d      	ldr	r2, [pc, #52]	; (80028ac <SystemInit+0x44>)
 8002876:	400a      	ands	r2, r1
 8002878:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002880:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002884:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800288c:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800288e:	685a      	ldr	r2, [r3, #4]
 8002890:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8002894:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002896:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800289a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800289c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80028a0:	4b03      	ldr	r3, [pc, #12]	; (80028b0 <SystemInit+0x48>)
 80028a2:	609a      	str	r2, [r3, #8]
#endif 
}
 80028a4:	4770      	bx	lr
 80028a6:	bf00      	nop
 80028a8:	40021000 	.word	0x40021000
 80028ac:	f8ff0000 	.word	0xf8ff0000
 80028b0:	e000ed00 	.word	0xe000ed00

080028b4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80028b4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 80028b6:	4c09      	ldr	r4, [pc, #36]	; (80028dc <MX_USB_DEVICE_Init+0x28>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	4620      	mov	r0, r4
 80028bc:	4908      	ldr	r1, [pc, #32]	; (80028e0 <MX_USB_DEVICE_Init+0x2c>)
 80028be:	f7ff fbb2 	bl	8002026 <USBD_Init>

  USBD_RegisterClass(&hUsbDeviceFS, &USBD_DFU);
 80028c2:	4620      	mov	r0, r4
 80028c4:	4907      	ldr	r1, [pc, #28]	; (80028e4 <MX_USB_DEVICE_Init+0x30>)
 80028c6:	f7ff fbc3 	bl	8002050 <USBD_RegisterClass>

  USBD_DFU_RegisterMedia(&hUsbDeviceFS, &USBD_DFU_fops_FS);
 80028ca:	4620      	mov	r0, r4
 80028cc:	4906      	ldr	r1, [pc, #24]	; (80028e8 <MX_USB_DEVICE_Init+0x34>)
 80028ce:	f7ff fba5 	bl	800201c <USBD_DFU_RegisterMedia>

  USBD_Start(&hUsbDeviceFS);
 80028d2:	4620      	mov	r0, r4

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80028d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_Start(&hUsbDeviceFS);
 80028d8:	f7ff bbc1 	b.w	800205e <USBD_Start>
 80028dc:	20000620 	.word	0x20000620
 80028e0:	20000070 	.word	0x20000070
 80028e4:	20000008 	.word	0x20000008
 80028e8:	200000a4 	.word	0x200000a4

080028ec <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80028ec:	b507      	push	{r0, r1, r2, lr}
  if(pcdHandle->Instance==USB)
 80028ee:	4b0e      	ldr	r3, [pc, #56]	; (8002928 <HAL_PCD_MspInit+0x3c>)
 80028f0:	6802      	ldr	r2, [r0, #0]
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d115      	bne.n	8002922 <HAL_PCD_MspInit+0x36>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80028f6:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 80028fa:	69da      	ldr	r2, [r3, #28]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80028fc:	2014      	movs	r0, #20
    __HAL_RCC_USB_CLK_ENABLE();
 80028fe:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002902:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8002904:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 8002906:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8002908:	4611      	mov	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 800290a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800290e:	9301      	str	r3, [sp, #4]
 8002910:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8002912:	f7fd fc87 	bl	8000224 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8002916:	2014      	movs	r0, #20
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8002918:	b003      	add	sp, #12
 800291a:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800291e:	f7fd bcb3 	b.w	8000288 <HAL_NVIC_EnableIRQ>
}
 8002922:	b003      	add	sp, #12
 8002924:	f85d fb04 	ldr.w	pc, [sp], #4
 8002928:	40005c00 	.word	0x40005c00

0800292c <HAL_PCD_SetupStageCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800292c:	f200 412c 	addw	r1, r0, #1068	; 0x42c
 8002930:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8002934:	f7ff bbb6 	b.w	80020a4 <USBD_LL_SetupStage>

08002938 <HAL_PCD_DataOutStageCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8002938:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 800293c:	f8d3 223c 	ldr.w	r2, [r3, #572]	; 0x23c
 8002940:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8002944:	f7ff bbdb 	b.w	80020fe <USBD_LL_DataOutStage>

08002948 <HAL_PCD_DataInStageCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8002948:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 800294c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800294e:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8002952:	f7ff bc04 	b.w	800215e <USBD_LL_DataInStage>

08002956 <HAL_PCD_SOFCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8002956:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 800295a:	f7ff bc80 	b.w	800225e <USBD_LL_SOF>

0800295e <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 800295e:	b510      	push	{r4, lr}
 8002960:	4604      	mov	r4, r0
	
  default:
    speed = USBD_SPEED_FULL;
    break;    
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8002962:	2101      	movs	r1, #1
 8002964:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8002968:	f7ff fc67 	bl	800223a <USBD_LL_SetSpeed>
  
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800296c:	f8d4 045c 	ldr.w	r0, [r4, #1116]	; 0x45c
}
 8002970:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8002974:	f7ff bc42 	b.w	80021fc <USBD_LL_Reset>

08002978 <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8002978:	b510      	push	{r4, lr}
 800297a:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800297c:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8002980:	f7ff fc5e 	bl	8002240 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8002984:	69a3      	ldr	r3, [r4, #24]
 8002986:	b123      	cbz	r3, 8002992 <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8002988:	4a02      	ldr	r2, [pc, #8]	; (8002994 <HAL_PCD_SuspendCallback+0x1c>)
 800298a:	6913      	ldr	r3, [r2, #16]
 800298c:	f043 0306 	orr.w	r3, r3, #6
 8002990:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8002992:	bd10      	pop	{r4, pc}
 8002994:	e000ed00 	.word	0xe000ed00

08002998 <HAL_PCD_ResumeCallback>:
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8002998:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 800299c:	f7ff bc59 	b.w	8002252 <USBD_LL_Resume>

080029a0 <USBD_LL_Init>:
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
  pdev->pData = &hpcd_USB_FS;

  hpcd_USB_FS.Instance = USB;
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80029a0:	2308      	movs	r3, #8
{
 80029a2:	b510      	push	{r4, lr}
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80029a4:	4a14      	ldr	r2, [pc, #80]	; (80029f8 <USBD_LL_Init+0x58>)
{
 80029a6:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 80029a8:	4814      	ldr	r0, [pc, #80]	; (80029fc <USBD_LL_Init+0x5c>)
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_8;
 80029aa:	2102      	movs	r1, #2
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80029ac:	e9c0 2300 	strd	r2, r3, [r0]
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_8;
 80029b0:	2303      	movs	r3, #3
 80029b2:	e9c0 1302 	strd	r1, r3, [r0, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80029b6:	2300      	movs	r3, #0
  hpcd_USB_FS.pData = pdev;
 80029b8:	f8c0 445c 	str.w	r4, [r0, #1116]	; 0x45c
  pdev->pData = &hpcd_USB_FS;
 80029bc:	f8c4 0220 	str.w	r0, [r4, #544]	; 0x220
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80029c0:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80029c4:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80029c6:	f7fd fea5 	bl	8000714 <HAL_PCD_Init>
 80029ca:	b120      	cbz	r0, 80029d6 <USBD_LL_Init+0x36>
  {
    _Error_Handler(__FILE__, __LINE__);
 80029cc:	f44f 7197 	mov.w	r1, #302	; 0x12e
 80029d0:	480b      	ldr	r0, [pc, #44]	; (8002a00 <USBD_LL_Init+0x60>)
 80029d2:	f7ff fee1 	bl	8002798 <_Error_Handler>
  }

  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80029d6:	2200      	movs	r2, #0
 80029d8:	2318      	movs	r3, #24
 80029da:	4611      	mov	r1, r2
 80029dc:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 80029e0:	f7fe fa4b 	bl	8000e7a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80029e4:	2358      	movs	r3, #88	; 0x58
 80029e6:	2200      	movs	r2, #0
 80029e8:	2180      	movs	r1, #128	; 0x80
 80029ea:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 80029ee:	f7fe fa44 	bl	8000e7a <HAL_PCDEx_PMAConfig>
  return USBD_OK;
}
 80029f2:	2000      	movs	r0, #0
 80029f4:	bd10      	pop	{r4, pc}
 80029f6:	bf00      	nop
 80029f8:	40005c00 	.word	0x40005c00
 80029fc:	20000844 	.word	0x20000844
 8002a00:	08002d1d 	.word	0x08002d1d

08002a04 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8002a04:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8002a06:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002a0a:	f7fd feea 	bl	80007e2 <HAL_PCD_Start>
     
  switch (hal_status) {
 8002a0e:	2803      	cmp	r0, #3
 8002a10:	bf96      	itet	ls
 8002a12:	4b02      	ldrls	r3, [pc, #8]	; (8002a1c <USBD_LL_Start+0x18>)
  hal_status = HAL_PCD_Start(pdev->pData);
 8002a14:	2002      	movhi	r0, #2
 8002a16:	5c18      	ldrbls	r0, [r3, r0]
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8002a18:	bd08      	pop	{r3, pc}
 8002a1a:	bf00      	nop
 8002a1c:	08002d30 	.word	0x08002d30

08002a20 <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 8002a20:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_Stop(pdev->pData);
 8002a22:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002a26:	f7fd fef3 	bl	8000810 <HAL_PCD_Stop>

  switch (hal_status) {
 8002a2a:	2803      	cmp	r0, #3
 8002a2c:	bf96      	itet	ls
 8002a2e:	4b02      	ldrls	r3, [pc, #8]	; (8002a38 <USBD_LL_Stop+0x18>)
  hal_status = HAL_PCD_Stop(pdev->pData);
 8002a30:	2002      	movhi	r0, #2
 8002a32:	5c18      	ldrbls	r0, [r3, r0]
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8002a34:	bd08      	pop	{r3, pc}
 8002a36:	bf00      	nop
 8002a38:	08002d30 	.word	0x08002d30

08002a3c <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8002a3c:	b510      	push	{r4, lr}
 8002a3e:	4614      	mov	r4, r2
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8002a40:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
{
 8002a44:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8002a46:	4623      	mov	r3, r4
 8002a48:	f7fd ff0e 	bl	8000868 <HAL_PCD_EP_Open>

  switch (hal_status) {
 8002a4c:	2803      	cmp	r0, #3
 8002a4e:	bf96      	itet	ls
 8002a50:	4b01      	ldrls	r3, [pc, #4]	; (8002a58 <USBD_LL_OpenEP+0x1c>)
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8002a52:	2002      	movhi	r0, #2
 8002a54:	5c18      	ldrbls	r0, [r3, r0]
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8002a56:	bd10      	pop	{r4, pc}
 8002a58:	08002d30 	.word	0x08002d30

08002a5c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8002a5c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8002a5e:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002a62:	f7fe f9bf 	bl	8000de4 <HAL_PCD_EP_SetStall>

  switch (hal_status) {
 8002a66:	2803      	cmp	r0, #3
 8002a68:	bf96      	itet	ls
 8002a6a:	4b02      	ldrls	r3, [pc, #8]	; (8002a74 <USBD_LL_StallEP+0x18>)
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8002a6c:	2002      	movhi	r0, #2
 8002a6e:	5c18      	ldrbls	r0, [r3, r0]
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8002a70:	bd08      	pop	{r3, pc}
 8002a72:	bf00      	nop
 8002a74:	08002d30 	.word	0x08002d30

08002a78 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8002a78:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8002a7a:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002a7e:	f7fe f9d9 	bl	8000e34 <HAL_PCD_EP_ClrStall>
     
  switch (hal_status) {
 8002a82:	2803      	cmp	r0, #3
 8002a84:	bf96      	itet	ls
 8002a86:	4b02      	ldrls	r3, [pc, #8]	; (8002a90 <USBD_LL_ClearStallEP+0x18>)
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8002a88:	2002      	movhi	r0, #2
 8002a8a:	5c18      	ldrbls	r0, [r3, r0]
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 8002a8c:	bd08      	pop	{r3, pc}
 8002a8e:	bf00      	nop
 8002a90:	08002d30 	.word	0x08002d30

08002a94 <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 8002a94:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8002a96:	f8d0 3220 	ldr.w	r3, [r0, #544]	; 0x220
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8002a9a:	bf45      	ittet	mi
 8002a9c:	f001 017f 	andmi.w	r1, r1, #127	; 0x7f
 8002aa0:	eb03 1141 	addmi.w	r1, r3, r1, lsl #5
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8002aa4:	eb03 1141 	addpl.w	r1, r3, r1, lsl #5
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8002aa8:	f891 002a 	ldrbmi.w	r0, [r1, #42]	; 0x2a
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8002aac:	bf58      	it	pl
 8002aae:	f891 022a 	ldrbpl.w	r0, [r1, #554]	; 0x22a
  }
}
 8002ab2:	4770      	bx	lr

08002ab4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8002ab4:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8002ab6:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002aba:	f7fd fec1 	bl	8000840 <HAL_PCD_SetAddress>
     
  switch (hal_status) {
 8002abe:	2803      	cmp	r0, #3
 8002ac0:	bf96      	itet	ls
 8002ac2:	4b02      	ldrls	r3, [pc, #8]	; (8002acc <USBD_LL_SetUSBAddress+0x18>)
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8002ac4:	2002      	movhi	r0, #2
 8002ac6:	5c18      	ldrbls	r0, [r3, r0]
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8002ac8:	bd08      	pop	{r3, pc}
 8002aca:	bf00      	nop
 8002acc:	08002d30 	.word	0x08002d30

08002ad0 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8002ad0:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8002ad2:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002ad6:	f7fd feff 	bl	80008d8 <HAL_PCD_EP_Transmit>
     
  switch (hal_status) {
 8002ada:	2803      	cmp	r0, #3
 8002adc:	bf96      	itet	ls
 8002ade:	4b02      	ldrls	r3, [pc, #8]	; (8002ae8 <USBD_LL_Transmit+0x18>)
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8002ae0:	2002      	movhi	r0, #2
 8002ae2:	5c18      	ldrbls	r0, [r3, r0]
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;    
}
 8002ae4:	bd08      	pop	{r3, pc}
 8002ae6:	bf00      	nop
 8002ae8:	08002d30 	.word	0x08002d30

08002aec <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8002aec:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8002aee:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002af2:	f7fd fedc 	bl	80008ae <HAL_PCD_EP_Receive>
     
  switch (hal_status) {
 8002af6:	2803      	cmp	r0, #3
 8002af8:	bf96      	itet	ls
 8002afa:	4b02      	ldrls	r3, [pc, #8]	; (8002b04 <USBD_LL_PrepareReceive+0x18>)
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8002afc:	2002      	movhi	r0, #2
 8002afe:	5c18      	ldrbls	r0, [r3, r0]
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 8002b00:	bd08      	pop	{r3, pc}
 8002b02:	bf00      	nop
 8002b04:	08002d30 	.word	0x08002d30

08002b08 <USBD_static_malloc>:
  */
void *USBD_static_malloc(uint32_t size)
{
  static uint32_t mem[(sizeof(USBD_DFU_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
}
 8002b08:	4800      	ldr	r0, [pc, #0]	; (8002b0c <USBD_static_malloc+0x4>)
 8002b0a:	4770      	bx	lr
 8002b0c:	200001dc 	.word	0x200001dc

08002b10 <USBD_static_free>:
  * @retval None
  */
void USBD_static_free(void *p)
{

}
 8002b10:	4770      	bx	lr

08002b12 <HAL_PCDEx_SetConnectionState>:
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8002b12:	4770      	bx	lr

08002b14 <USBD_FS_DeviceDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_FS_DeviceDesc);
 8002b14:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 8002b16:	4801      	ldr	r0, [pc, #4]	; (8002b1c <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8002b18:	800b      	strh	r3, [r1, #0]
}
 8002b1a:	4770      	bx	lr
 8002b1c:	2000008c 	.word	0x2000008c

08002b20 <USBD_FS_LangIDStrDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_LangIDDesc);
 8002b20:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 8002b22:	4801      	ldr	r0, [pc, #4]	; (8002b28 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8002b24:	800b      	strh	r3, [r1, #0]
}
 8002b26:	4770      	bx	lr
 8002b28:	200000a0 	.word	0x200000a0

08002b2c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8002b2c:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8002b2e:	4c04      	ldr	r4, [pc, #16]	; (8002b40 <USBD_FS_ManufacturerStrDescriptor+0x14>)
{
 8002b30:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8002b32:	4804      	ldr	r0, [pc, #16]	; (8002b44 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8002b34:	4621      	mov	r1, r4
 8002b36:	f7ff fd43 	bl	80025c0 <USBD_GetString>
  return USBD_StrDesc;
}
 8002b3a:	4620      	mov	r0, r4
 8002b3c:	bd10      	pop	{r4, pc}
 8002b3e:	bf00      	nop
 8002b40:	20000ca4 	.word	0x20000ca4
 8002b44:	08002d34 	.word	0x08002d34

08002b48 <USBD_FS_ProductStrDescriptor>:
{
 8002b48:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8002b4a:	4c04      	ldr	r4, [pc, #16]	; (8002b5c <USBD_FS_ProductStrDescriptor+0x14>)
{
 8002b4c:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8002b4e:	4804      	ldr	r0, [pc, #16]	; (8002b60 <USBD_FS_ProductStrDescriptor+0x18>)
 8002b50:	4621      	mov	r1, r4
 8002b52:	f7ff fd35 	bl	80025c0 <USBD_GetString>
}
 8002b56:	4620      	mov	r0, r4
 8002b58:	bd10      	pop	{r4, pc}
 8002b5a:	bf00      	nop
 8002b5c:	20000ca4 	.word	0x20000ca4
 8002b60:	08002d47 	.word	0x08002d47

08002b64 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8002b64:	b510      	push	{r4, lr}
  if(speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 8002b66:	4c04      	ldr	r4, [pc, #16]	; (8002b78 <USBD_FS_SerialStrDescriptor+0x14>)
{
 8002b68:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 8002b6a:	4804      	ldr	r0, [pc, #16]	; (8002b7c <USBD_FS_SerialStrDescriptor+0x18>)
 8002b6c:	4621      	mov	r1, r4
 8002b6e:	f7ff fd27 	bl	80025c0 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8002b72:	4620      	mov	r0, r4
 8002b74:	bd10      	pop	{r4, pc}
 8002b76:	bf00      	nop
 8002b78:	20000ca4 	.word	0x20000ca4
 8002b7c:	08002d66 	.word	0x08002d66

08002b80 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8002b80:	b510      	push	{r4, lr}
  if(speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8002b82:	4c04      	ldr	r4, [pc, #16]	; (8002b94 <USBD_FS_ConfigStrDescriptor+0x14>)
{
 8002b84:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8002b86:	4804      	ldr	r0, [pc, #16]	; (8002b98 <USBD_FS_ConfigStrDescriptor+0x18>)
 8002b88:	4621      	mov	r1, r4
 8002b8a:	f7ff fd19 	bl	80025c0 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8002b8e:	4620      	mov	r0, r4
 8002b90:	bd10      	pop	{r4, pc}
 8002b92:	bf00      	nop
 8002b94:	20000ca4 	.word	0x20000ca4
 8002b98:	08002d73 	.word	0x08002d73

08002b9c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8002b9c:	b510      	push	{r4, lr}
  if(speed == 0)
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8002b9e:	4c04      	ldr	r4, [pc, #16]	; (8002bb0 <USBD_FS_InterfaceStrDescriptor+0x14>)
{
 8002ba0:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8002ba2:	4804      	ldr	r0, [pc, #16]	; (8002bb4 <USBD_FS_InterfaceStrDescriptor+0x18>)
 8002ba4:	4621      	mov	r1, r4
 8002ba6:	f7ff fd0b 	bl	80025c0 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8002baa:	4620      	mov	r0, r4
 8002bac:	bd10      	pop	{r4, pc}
 8002bae:	bf00      	nop
 8002bb0:	20000ca4 	.word	0x20000ca4
 8002bb4:	08002d7e 	.word	0x08002d7e

08002bb8 <MEM_If_Read_FS>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be read (in bytes).
  * @retval Pointer to the physical address where data should be read.
  */
uint8_t *MEM_If_Read_FS(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 8002bb8:	4603      	mov	r3, r0
 8002bba:	b510      	push	{r4, lr}
 8002bbc:	4608      	mov	r0, r1
 8002bbe:	441a      	add	r2, r3
 8002bc0:	3901      	subs	r1, #1
  /* Return a valid address to avoid HardFault */
  /* USER CODE BEGIN 4 */
  uint32_t i = 0;
  uint8_t *psrc = src;
  for(i = 0;i < Len;i++) dest[i] = *psrc++;
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d100      	bne.n	8002bc8 <MEM_If_Read_FS+0x10>
  return dest;
  /* USER CODE END 4 */
}
 8002bc6:	bd10      	pop	{r4, pc}
  for(i = 0;i < Len;i++) dest[i] = *psrc++;
 8002bc8:	f813 4b01 	ldrb.w	r4, [r3], #1
 8002bcc:	f801 4f01 	strb.w	r4, [r1, #1]!
 8002bd0:	e7f7      	b.n	8002bc2 <MEM_If_Read_FS+0xa>

08002bd2 <MEM_If_GetStatus_FS>:

    break;
  }
  return (USBD_OK);
  /* USER CODE END 5 */
}
 8002bd2:	2000      	movs	r0, #0
 8002bd4:	4770      	bx	lr

08002bd6 <MEM_If_Write_FS>:
{
 8002bd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bd8:	4617      	mov	r7, r2
 8002bda:	460d      	mov	r5, r1
 8002bdc:	1f06      	subs	r6, r0, #4
  for(i = 0;i < Len;i += 4)
 8002bde:	f1c0 0404 	rsb	r4, r0, #4
 8002be2:	19a3      	adds	r3, r4, r6
 8002be4:	429f      	cmp	r7, r3
 8002be6:	d801      	bhi.n	8002bec <MEM_If_Write_FS+0x16>
  return (USBD_OK);
 8002be8:	2000      	movs	r0, #0
}
 8002bea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,(uint32_t)(dest + i),*(uint32_t *)(src + i)) == HAL_OK)
 8002bec:	2300      	movs	r3, #0
 8002bee:	4629      	mov	r1, r5
 8002bf0:	2002      	movs	r0, #2
 8002bf2:	6872      	ldr	r2, [r6, #4]
 8002bf4:	f7fd fbea 	bl	80003cc <HAL_FLASH_Program>
 8002bf8:	b938      	cbnz	r0, 8002c0a <MEM_If_Write_FS+0x34>
      if(*(uint32_t *)(src + i) != *(uint32_t *)(dest + i))
 8002bfa:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bfe:	f856 2f04 	ldr.w	r2, [r6, #4]!
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d0ed      	beq.n	8002be2 <MEM_If_Write_FS+0xc>
    	  return 2;
 8002c06:	2002      	movs	r0, #2
 8002c08:	e7ef      	b.n	8002bea <MEM_If_Write_FS+0x14>
      return 1;
 8002c0a:	2001      	movs	r0, #1
 8002c0c:	e7ed      	b.n	8002bea <MEM_If_Write_FS+0x14>

08002c0e <MEM_If_Erase_FS>:
{
 8002c0e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  pEraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 8002c10:	2300      	movs	r3, #0
 8002c12:	9302      	str	r3, [sp, #8]
  pEraseInit.NbPages = 1;
 8002c14:	2301      	movs	r3, #1
  if(HAL_FLASHEx_Erase(&pEraseInit,&SectorError)!=HAL_OK)
 8002c16:	a901      	add	r1, sp, #4
  pEraseInit.PageAddress = Add;
 8002c18:	e9cd 0304 	strd	r0, r3, [sp, #16]
  if(HAL_FLASHEx_Erase(&pEraseInit,&SectorError)!=HAL_OK)
 8002c1c:	a802      	add	r0, sp, #8
  pEraseInit.Banks = FLASH_BANK_1;
 8002c1e:	9303      	str	r3, [sp, #12]
  if(HAL_FLASHEx_Erase(&pEraseInit,&SectorError)!=HAL_OK)
 8002c20:	f7fd fc4a 	bl	80004b8 <HAL_FLASHEx_Erase>
 8002c24:	2800      	cmp	r0, #0
}
 8002c26:	bf14      	ite	ne
 8002c28:	2002      	movne	r0, #2
 8002c2a:	2000      	moveq	r0, #0
 8002c2c:	b007      	add	sp, #28
 8002c2e:	f85d fb04 	ldr.w	pc, [sp], #4

08002c32 <MEM_If_DeInit_FS>:
{
 8002c32:	b508      	push	{r3, lr}
  HAL_FLASH_Lock();
 8002c34:	f7fd fb96 	bl	8000364 <HAL_FLASH_Lock>
}
 8002c38:	2000      	movs	r0, #0
 8002c3a:	bd08      	pop	{r3, pc}

08002c3c <MEM_If_Init_FS>:
{
 8002c3c:	b508      	push	{r3, lr}
  HAL_FLASH_Unlock();
 8002c3e:	f7fd fb7f 	bl	8000340 <HAL_FLASH_Unlock>
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_WRPERR);
 8002c42:	2230      	movs	r2, #48	; 0x30
 8002c44:	4b01      	ldr	r3, [pc, #4]	; (8002c4c <MEM_If_Init_FS+0x10>)
}
 8002c46:	2000      	movs	r0, #0
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_WRPERR);
 8002c48:	60da      	str	r2, [r3, #12]
}
 8002c4a:	bd08      	pop	{r3, pc}
 8002c4c:	40022000 	.word	0x40022000

08002c50 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002c50:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002c52:	e003      	b.n	8002c5c <LoopCopyDataInit>

08002c54 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002c54:	4b0b      	ldr	r3, [pc, #44]	; (8002c84 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002c56:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002c58:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002c5a:	3104      	adds	r1, #4

08002c5c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002c5c:	480a      	ldr	r0, [pc, #40]	; (8002c88 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002c5e:	4b0b      	ldr	r3, [pc, #44]	; (8002c8c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002c60:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002c62:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002c64:	d3f6      	bcc.n	8002c54 <CopyDataInit>
  ldr r2, =_sbss
 8002c66:	4a0a      	ldr	r2, [pc, #40]	; (8002c90 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002c68:	e002      	b.n	8002c70 <LoopFillZerobss>

08002c6a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002c6a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002c6c:	f842 3b04 	str.w	r3, [r2], #4

08002c70 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002c70:	4b08      	ldr	r3, [pc, #32]	; (8002c94 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002c72:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002c74:	d3f9      	bcc.n	8002c6a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002c76:	f7ff fdf7 	bl	8002868 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c7a:	f000 f80f 	bl	8002c9c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002c7e:	f7ff fd3d 	bl	80026fc <main>
  bx lr
 8002c82:	4770      	bx	lr
  ldr r3, =_sidata
 8002c84:	08002dd0 	.word	0x08002dd0
  ldr r0, =_sdata
 8002c88:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002c8c:	200000c0 	.word	0x200000c0
  ldr r2, =_sbss
 8002c90:	200000c0 	.word	0x200000c0
  ldr r3, = _ebss
 8002c94:	20000ea4 	.word	0x20000ea4

08002c98 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002c98:	e7fe      	b.n	8002c98 <ADC1_2_IRQHandler>
	...

08002c9c <__libc_init_array>:
 8002c9c:	b570      	push	{r4, r5, r6, lr}
 8002c9e:	2600      	movs	r6, #0
 8002ca0:	4d0c      	ldr	r5, [pc, #48]	; (8002cd4 <__libc_init_array+0x38>)
 8002ca2:	4c0d      	ldr	r4, [pc, #52]	; (8002cd8 <__libc_init_array+0x3c>)
 8002ca4:	1b64      	subs	r4, r4, r5
 8002ca6:	10a4      	asrs	r4, r4, #2
 8002ca8:	42a6      	cmp	r6, r4
 8002caa:	d109      	bne.n	8002cc0 <__libc_init_array+0x24>
 8002cac:	f000 f81a 	bl	8002ce4 <_init>
 8002cb0:	2600      	movs	r6, #0
 8002cb2:	4d0a      	ldr	r5, [pc, #40]	; (8002cdc <__libc_init_array+0x40>)
 8002cb4:	4c0a      	ldr	r4, [pc, #40]	; (8002ce0 <__libc_init_array+0x44>)
 8002cb6:	1b64      	subs	r4, r4, r5
 8002cb8:	10a4      	asrs	r4, r4, #2
 8002cba:	42a6      	cmp	r6, r4
 8002cbc:	d105      	bne.n	8002cca <__libc_init_array+0x2e>
 8002cbe:	bd70      	pop	{r4, r5, r6, pc}
 8002cc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cc4:	4798      	blx	r3
 8002cc6:	3601      	adds	r6, #1
 8002cc8:	e7ee      	b.n	8002ca8 <__libc_init_array+0xc>
 8002cca:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cce:	4798      	blx	r3
 8002cd0:	3601      	adds	r6, #1
 8002cd2:	e7f2      	b.n	8002cba <__libc_init_array+0x1e>
 8002cd4:	08002dc8 	.word	0x08002dc8
 8002cd8:	08002dc8 	.word	0x08002dc8
 8002cdc:	08002dc8 	.word	0x08002dc8
 8002ce0:	08002dcc 	.word	0x08002dcc

08002ce4 <_init>:
 8002ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ce6:	bf00      	nop
 8002ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cea:	bc08      	pop	{r3}
 8002cec:	469e      	mov	lr, r3
 8002cee:	4770      	bx	lr

08002cf0 <_fini>:
 8002cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cf2:	bf00      	nop
 8002cf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cf6:	bc08      	pop	{r3}
 8002cf8:	469e      	mov	lr, r3
 8002cfa:	4770      	bx	lr
