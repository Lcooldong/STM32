
ADC_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052f4  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  080054a0  080054a0  000154a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005534  08005534  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005534  08005534  00015534  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800553c  0800553c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800553c  0800553c  0001553c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005540  08005540  00015540  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005544  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000228  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000298  20000298  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011c4b  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ada  00000000  00000000  00031ceb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f60  00000000  00000000  000347c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000e28  00000000  00000000  00035728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002658b  00000000  00000000  00036550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000135c7  00000000  00000000  0005cadb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e85f7  00000000  00000000  000700a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00158699  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004540  00000000  00000000  001586ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000070 	.word	0x20000070
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08005488 	.word	0x08005488

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000074 	.word	0x20000074
 80001e8:	08005488 	.word	0x08005488

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b974 	b.w	80004ec <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468e      	mov	lr, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14d      	bne.n	80002c6 <__udivmoddi4+0xaa>
 800022a:	428a      	cmp	r2, r1
 800022c:	4694      	mov	ip, r2
 800022e:	d969      	bls.n	8000304 <__udivmoddi4+0xe8>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b152      	cbz	r2, 800024c <__udivmoddi4+0x30>
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	f1c2 0120 	rsb	r1, r2, #32
 800023e:	fa20 f101 	lsr.w	r1, r0, r1
 8000242:	fa0c fc02 	lsl.w	ip, ip, r2
 8000246:	ea41 0e03 	orr.w	lr, r1, r3
 800024a:	4094      	lsls	r4, r2
 800024c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000250:	0c21      	lsrs	r1, r4, #16
 8000252:	fbbe f6f8 	udiv	r6, lr, r8
 8000256:	fa1f f78c 	uxth.w	r7, ip
 800025a:	fb08 e316 	mls	r3, r8, r6, lr
 800025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000262:	fb06 f107 	mul.w	r1, r6, r7
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000272:	f080 811f 	bcs.w	80004b4 <__udivmoddi4+0x298>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 811c 	bls.w	80004b4 <__udivmoddi4+0x298>
 800027c:	3e02      	subs	r6, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 f707 	mul.w	r7, r0, r7
 8000294:	42a7      	cmp	r7, r4
 8000296:	d90a      	bls.n	80002ae <__udivmoddi4+0x92>
 8000298:	eb1c 0404 	adds.w	r4, ip, r4
 800029c:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a0:	f080 810a 	bcs.w	80004b8 <__udivmoddi4+0x29c>
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	f240 8107 	bls.w	80004b8 <__udivmoddi4+0x29c>
 80002aa:	4464      	add	r4, ip
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b2:	1be4      	subs	r4, r4, r7
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa4>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xc2>
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	f000 80ef 	beq.w	80004ae <__udivmoddi4+0x292>
 80002d0:	2600      	movs	r6, #0
 80002d2:	e9c5 0100 	strd	r0, r1, [r5]
 80002d6:	4630      	mov	r0, r6
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f683 	clz	r6, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d14a      	bne.n	800037c <__udivmoddi4+0x160>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd4>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80f9 	bhi.w	80004e2 <__udivmoddi4+0x2c6>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	469e      	mov	lr, r3
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa4>
 80002fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa4>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xec>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 8092 	bne.w	8000436 <__udivmoddi4+0x21a>
 8000312:	eba1 010c 	sub.w	r1, r1, ip
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2601      	movs	r6, #1
 8000320:	0c20      	lsrs	r0, r4, #16
 8000322:	fbb1 f3f7 	udiv	r3, r1, r7
 8000326:	fb07 1113 	mls	r1, r7, r3, r1
 800032a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032e:	fb0e f003 	mul.w	r0, lr, r3
 8000332:	4288      	cmp	r0, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x12c>
 8000336:	eb1c 0101 	adds.w	r1, ip, r1
 800033a:	f103 38ff 	add.w	r8, r3, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x12a>
 8000340:	4288      	cmp	r0, r1
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2c0>
 8000346:	4643      	mov	r3, r8
 8000348:	1a09      	subs	r1, r1, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000350:	fb07 1110 	mls	r1, r7, r0, r1
 8000354:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x156>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 31ff 	add.w	r1, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x154>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000370:	4608      	mov	r0, r1
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037a:	e79c      	b.n	80002b6 <__udivmoddi4+0x9a>
 800037c:	f1c6 0720 	rsb	r7, r6, #32
 8000380:	40b3      	lsls	r3, r6
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa20 f407 	lsr.w	r4, r0, r7
 800038e:	fa01 f306 	lsl.w	r3, r1, r6
 8000392:	431c      	orrs	r4, r3
 8000394:	40f9      	lsrs	r1, r7
 8000396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039a:	fa00 f306 	lsl.w	r3, r0, r6
 800039e:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a2:	0c20      	lsrs	r0, r4, #16
 80003a4:	fa1f fe8c 	uxth.w	lr, ip
 80003a8:	fb09 1118 	mls	r1, r9, r8, r1
 80003ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b0:	fb08 f00e 	mul.w	r0, r8, lr
 80003b4:	4288      	cmp	r0, r1
 80003b6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b8>
 80003bc:	eb1c 0101 	adds.w	r1, ip, r1
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2bc>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2bc>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4461      	add	r1, ip
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003dc:	fb09 1110 	mls	r1, r9, r0, r1
 80003e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e8:	458e      	cmp	lr, r1
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1e2>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2b4>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2b4>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000402:	fba0 9402 	umull	r9, r4, r0, r2
 8000406:	eba1 010e 	sub.w	r1, r1, lr
 800040a:	42a1      	cmp	r1, r4
 800040c:	46c8      	mov	r8, r9
 800040e:	46a6      	mov	lr, r4
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x2a4>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x2a0>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x212>
 8000416:	ebb3 0208 	subs.w	r2, r3, r8
 800041a:	eb61 010e 	sbc.w	r1, r1, lr
 800041e:	fa01 f707 	lsl.w	r7, r1, r7
 8000422:	fa22 f306 	lsr.w	r3, r2, r6
 8000426:	40f1      	lsrs	r1, r6
 8000428:	431f      	orrs	r7, r3
 800042a:	e9c5 7100 	strd	r7, r1, [r5]
 800042e:	2600      	movs	r6, #0
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	f1c2 0320 	rsb	r3, r2, #32
 800043a:	40d8      	lsrs	r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa21 f303 	lsr.w	r3, r1, r3
 8000444:	4091      	lsls	r1, r2
 8000446:	4301      	orrs	r1, r0
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb3 f0f7 	udiv	r0, r3, r7
 8000454:	fb07 3610 	mls	r6, r7, r0, r3
 8000458:	0c0b      	lsrs	r3, r1, #16
 800045a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045e:	fb00 f60e 	mul.w	r6, r0, lr
 8000462:	429e      	cmp	r6, r3
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x260>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b8>
 8000474:	429e      	cmp	r6, r3
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b8>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1b9b      	subs	r3, r3, r6
 800047e:	b289      	uxth	r1, r1
 8000480:	fbb3 f6f7 	udiv	r6, r3, r7
 8000484:	fb07 3316 	mls	r3, r7, r6, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb06 f30e 	mul.w	r3, r6, lr
 8000490:	428b      	cmp	r3, r1
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x28a>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f106 38ff 	add.w	r8, r6, #4294967295
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2b0>
 80004a2:	3e02      	subs	r6, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0x104>
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e705      	b.n	80002c0 <__udivmoddi4+0xa4>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e3      	b.n	8000280 <__udivmoddi4+0x64>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6f8      	b.n	80002ae <__udivmoddi4+0x92>
 80004bc:	454b      	cmp	r3, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f8>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f8>
 80004cc:	4646      	mov	r6, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x28a>
 80004d0:	4620      	mov	r0, r4
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1e2>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x260>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b8>
 80004dc:	3b02      	subs	r3, #2
 80004de:	4461      	add	r1, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x12c>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e709      	b.n	80002fa <__udivmoddi4+0xde>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x156>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b084      	sub	sp, #16
 80004f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004f6:	463b      	mov	r3, r7
 80004f8:	2200      	movs	r2, #0
 80004fa:	601a      	str	r2, [r3, #0]
 80004fc:	605a      	str	r2, [r3, #4]
 80004fe:	609a      	str	r2, [r3, #8]
 8000500:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000502:	4b21      	ldr	r3, [pc, #132]	; (8000588 <MX_ADC1_Init+0x98>)
 8000504:	4a21      	ldr	r2, [pc, #132]	; (800058c <MX_ADC1_Init+0x9c>)
 8000506:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000508:	4b1f      	ldr	r3, [pc, #124]	; (8000588 <MX_ADC1_Init+0x98>)
 800050a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800050e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000510:	4b1d      	ldr	r3, [pc, #116]	; (8000588 <MX_ADC1_Init+0x98>)
 8000512:	2200      	movs	r2, #0
 8000514:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000516:	4b1c      	ldr	r3, [pc, #112]	; (8000588 <MX_ADC1_Init+0x98>)
 8000518:	2200      	movs	r2, #0
 800051a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800051c:	4b1a      	ldr	r3, [pc, #104]	; (8000588 <MX_ADC1_Init+0x98>)
 800051e:	2200      	movs	r2, #0
 8000520:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000522:	4b19      	ldr	r3, [pc, #100]	; (8000588 <MX_ADC1_Init+0x98>)
 8000524:	2200      	movs	r2, #0
 8000526:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800052a:	4b17      	ldr	r3, [pc, #92]	; (8000588 <MX_ADC1_Init+0x98>)
 800052c:	2200      	movs	r2, #0
 800052e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000530:	4b15      	ldr	r3, [pc, #84]	; (8000588 <MX_ADC1_Init+0x98>)
 8000532:	4a17      	ldr	r2, [pc, #92]	; (8000590 <MX_ADC1_Init+0xa0>)
 8000534:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000536:	4b14      	ldr	r3, [pc, #80]	; (8000588 <MX_ADC1_Init+0x98>)
 8000538:	2200      	movs	r2, #0
 800053a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800053c:	4b12      	ldr	r3, [pc, #72]	; (8000588 <MX_ADC1_Init+0x98>)
 800053e:	2201      	movs	r2, #1
 8000540:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000542:	4b11      	ldr	r3, [pc, #68]	; (8000588 <MX_ADC1_Init+0x98>)
 8000544:	2200      	movs	r2, #0
 8000546:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800054a:	4b0f      	ldr	r3, [pc, #60]	; (8000588 <MX_ADC1_Init+0x98>)
 800054c:	2201      	movs	r2, #1
 800054e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000550:	480d      	ldr	r0, [pc, #52]	; (8000588 <MX_ADC1_Init+0x98>)
 8000552:	f000 fe35 	bl	80011c0 <HAL_ADC_Init>
 8000556:	4603      	mov	r3, r0
 8000558:	2b00      	cmp	r3, #0
 800055a:	d001      	beq.n	8000560 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800055c:	f000 fa76 	bl	8000a4c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000560:	2303      	movs	r3, #3
 8000562:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000564:	2301      	movs	r3, #1
 8000566:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000568:	2300      	movs	r3, #0
 800056a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800056c:	463b      	mov	r3, r7
 800056e:	4619      	mov	r1, r3
 8000570:	4805      	ldr	r0, [pc, #20]	; (8000588 <MX_ADC1_Init+0x98>)
 8000572:	f000 ff97 	bl	80014a4 <HAL_ADC_ConfigChannel>
 8000576:	4603      	mov	r3, r0
 8000578:	2b00      	cmp	r3, #0
 800057a:	d001      	beq.n	8000580 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800057c:	f000 fa66 	bl	8000a4c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000580:	bf00      	nop
 8000582:	3710      	adds	r7, #16
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}
 8000588:	2000008c 	.word	0x2000008c
 800058c:	40012000 	.word	0x40012000
 8000590:	0f000001 	.word	0x0f000001

08000594 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b08a      	sub	sp, #40	; 0x28
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800059c:	f107 0314 	add.w	r3, r7, #20
 80005a0:	2200      	movs	r2, #0
 80005a2:	601a      	str	r2, [r3, #0]
 80005a4:	605a      	str	r2, [r3, #4]
 80005a6:	609a      	str	r2, [r3, #8]
 80005a8:	60da      	str	r2, [r3, #12]
 80005aa:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a33      	ldr	r2, [pc, #204]	; (8000680 <HAL_ADC_MspInit+0xec>)
 80005b2:	4293      	cmp	r3, r2
 80005b4:	d15f      	bne.n	8000676 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80005b6:	2300      	movs	r3, #0
 80005b8:	613b      	str	r3, [r7, #16]
 80005ba:	4b32      	ldr	r3, [pc, #200]	; (8000684 <HAL_ADC_MspInit+0xf0>)
 80005bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005be:	4a31      	ldr	r2, [pc, #196]	; (8000684 <HAL_ADC_MspInit+0xf0>)
 80005c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005c4:	6453      	str	r3, [r2, #68]	; 0x44
 80005c6:	4b2f      	ldr	r3, [pc, #188]	; (8000684 <HAL_ADC_MspInit+0xf0>)
 80005c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80005ce:	613b      	str	r3, [r7, #16]
 80005d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005d2:	2300      	movs	r3, #0
 80005d4:	60fb      	str	r3, [r7, #12]
 80005d6:	4b2b      	ldr	r3, [pc, #172]	; (8000684 <HAL_ADC_MspInit+0xf0>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	4a2a      	ldr	r2, [pc, #168]	; (8000684 <HAL_ADC_MspInit+0xf0>)
 80005dc:	f043 0301 	orr.w	r3, r3, #1
 80005e0:	6313      	str	r3, [r2, #48]	; 0x30
 80005e2:	4b28      	ldr	r3, [pc, #160]	; (8000684 <HAL_ADC_MspInit+0xf0>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e6:	f003 0301 	and.w	r3, r3, #1
 80005ea:	60fb      	str	r3, [r7, #12]
 80005ec:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80005ee:	2308      	movs	r3, #8
 80005f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005f2:	2303      	movs	r3, #3
 80005f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f6:	2300      	movs	r3, #0
 80005f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005fa:	f107 0314 	add.w	r3, r7, #20
 80005fe:	4619      	mov	r1, r3
 8000600:	4821      	ldr	r0, [pc, #132]	; (8000688 <HAL_ADC_MspInit+0xf4>)
 8000602:	f001 fe15 	bl	8002230 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000606:	4b21      	ldr	r3, [pc, #132]	; (800068c <HAL_ADC_MspInit+0xf8>)
 8000608:	4a21      	ldr	r2, [pc, #132]	; (8000690 <HAL_ADC_MspInit+0xfc>)
 800060a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800060c:	4b1f      	ldr	r3, [pc, #124]	; (800068c <HAL_ADC_MspInit+0xf8>)
 800060e:	2200      	movs	r2, #0
 8000610:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000612:	4b1e      	ldr	r3, [pc, #120]	; (800068c <HAL_ADC_MspInit+0xf8>)
 8000614:	2200      	movs	r2, #0
 8000616:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000618:	4b1c      	ldr	r3, [pc, #112]	; (800068c <HAL_ADC_MspInit+0xf8>)
 800061a:	2200      	movs	r2, #0
 800061c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800061e:	4b1b      	ldr	r3, [pc, #108]	; (800068c <HAL_ADC_MspInit+0xf8>)
 8000620:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000624:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000626:	4b19      	ldr	r3, [pc, #100]	; (800068c <HAL_ADC_MspInit+0xf8>)
 8000628:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800062c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800062e:	4b17      	ldr	r3, [pc, #92]	; (800068c <HAL_ADC_MspInit+0xf8>)
 8000630:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000634:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000636:	4b15      	ldr	r3, [pc, #84]	; (800068c <HAL_ADC_MspInit+0xf8>)
 8000638:	f44f 7280 	mov.w	r2, #256	; 0x100
 800063c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800063e:	4b13      	ldr	r3, [pc, #76]	; (800068c <HAL_ADC_MspInit+0xf8>)
 8000640:	2200      	movs	r2, #0
 8000642:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000644:	4b11      	ldr	r3, [pc, #68]	; (800068c <HAL_ADC_MspInit+0xf8>)
 8000646:	2200      	movs	r2, #0
 8000648:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800064a:	4810      	ldr	r0, [pc, #64]	; (800068c <HAL_ADC_MspInit+0xf8>)
 800064c:	f001 fa74 	bl	8001b38 <HAL_DMA_Init>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000656:	f000 f9f9 	bl	8000a4c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	4a0b      	ldr	r2, [pc, #44]	; (800068c <HAL_ADC_MspInit+0xf8>)
 800065e:	639a      	str	r2, [r3, #56]	; 0x38
 8000660:	4a0a      	ldr	r2, [pc, #40]	; (800068c <HAL_ADC_MspInit+0xf8>)
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000666:	2200      	movs	r2, #0
 8000668:	2100      	movs	r1, #0
 800066a:	2012      	movs	r0, #18
 800066c:	f001 fa2d 	bl	8001aca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000670:	2012      	movs	r0, #18
 8000672:	f001 fa46 	bl	8001b02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000676:	bf00      	nop
 8000678:	3728      	adds	r7, #40	; 0x28
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	40012000 	.word	0x40012000
 8000684:	40023800 	.word	0x40023800
 8000688:	40020000 	.word	0x40020000
 800068c:	200000d4 	.word	0x200000d4
 8000690:	40026410 	.word	0x40026410

08000694 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800069a:	2300      	movs	r3, #0
 800069c:	607b      	str	r3, [r7, #4]
 800069e:	4b1b      	ldr	r3, [pc, #108]	; (800070c <MX_DMA_Init+0x78>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a2:	4a1a      	ldr	r2, [pc, #104]	; (800070c <MX_DMA_Init+0x78>)
 80006a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006a8:	6313      	str	r3, [r2, #48]	; 0x30
 80006aa:	4b18      	ldr	r3, [pc, #96]	; (800070c <MX_DMA_Init+0x78>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006b2:	607b      	str	r3, [r7, #4]
 80006b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80006b6:	2300      	movs	r3, #0
 80006b8:	603b      	str	r3, [r7, #0]
 80006ba:	4b14      	ldr	r3, [pc, #80]	; (800070c <MX_DMA_Init+0x78>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	4a13      	ldr	r2, [pc, #76]	; (800070c <MX_DMA_Init+0x78>)
 80006c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80006c4:	6313      	str	r3, [r2, #48]	; 0x30
 80006c6:	4b11      	ldr	r3, [pc, #68]	; (800070c <MX_DMA_Init+0x78>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80006ce:	603b      	str	r3, [r7, #0]
 80006d0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80006d2:	2200      	movs	r2, #0
 80006d4:	2100      	movs	r1, #0
 80006d6:	200d      	movs	r0, #13
 80006d8:	f001 f9f7 	bl	8001aca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80006dc:	200d      	movs	r0, #13
 80006de:	f001 fa10 	bl	8001b02 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80006e2:	2200      	movs	r2, #0
 80006e4:	2100      	movs	r1, #0
 80006e6:	200f      	movs	r0, #15
 80006e8:	f001 f9ef 	bl	8001aca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80006ec:	200f      	movs	r0, #15
 80006ee:	f001 fa08 	bl	8001b02 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80006f2:	2200      	movs	r2, #0
 80006f4:	2100      	movs	r1, #0
 80006f6:	2038      	movs	r0, #56	; 0x38
 80006f8:	f001 f9e7 	bl	8001aca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80006fc:	2038      	movs	r0, #56	; 0x38
 80006fe:	f001 fa00 	bl	8001b02 <HAL_NVIC_EnableIRQ>

}
 8000702:	bf00      	nop
 8000704:	3708      	adds	r7, #8
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	40023800 	.word	0x40023800

08000710 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b08c      	sub	sp, #48	; 0x30
 8000714:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000716:	f107 031c 	add.w	r3, r7, #28
 800071a:	2200      	movs	r2, #0
 800071c:	601a      	str	r2, [r3, #0]
 800071e:	605a      	str	r2, [r3, #4]
 8000720:	609a      	str	r2, [r3, #8]
 8000722:	60da      	str	r2, [r3, #12]
 8000724:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000726:	2300      	movs	r3, #0
 8000728:	61bb      	str	r3, [r7, #24]
 800072a:	4b7c      	ldr	r3, [pc, #496]	; (800091c <MX_GPIO_Init+0x20c>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	4a7b      	ldr	r2, [pc, #492]	; (800091c <MX_GPIO_Init+0x20c>)
 8000730:	f043 0304 	orr.w	r3, r3, #4
 8000734:	6313      	str	r3, [r2, #48]	; 0x30
 8000736:	4b79      	ldr	r3, [pc, #484]	; (800091c <MX_GPIO_Init+0x20c>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	f003 0304 	and.w	r3, r3, #4
 800073e:	61bb      	str	r3, [r7, #24]
 8000740:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	617b      	str	r3, [r7, #20]
 8000746:	4b75      	ldr	r3, [pc, #468]	; (800091c <MX_GPIO_Init+0x20c>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	4a74      	ldr	r2, [pc, #464]	; (800091c <MX_GPIO_Init+0x20c>)
 800074c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000750:	6313      	str	r3, [r2, #48]	; 0x30
 8000752:	4b72      	ldr	r3, [pc, #456]	; (800091c <MX_GPIO_Init+0x20c>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800075a:	617b      	str	r3, [r7, #20]
 800075c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	613b      	str	r3, [r7, #16]
 8000762:	4b6e      	ldr	r3, [pc, #440]	; (800091c <MX_GPIO_Init+0x20c>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	4a6d      	ldr	r2, [pc, #436]	; (800091c <MX_GPIO_Init+0x20c>)
 8000768:	f043 0301 	orr.w	r3, r3, #1
 800076c:	6313      	str	r3, [r2, #48]	; 0x30
 800076e:	4b6b      	ldr	r3, [pc, #428]	; (800091c <MX_GPIO_Init+0x20c>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	f003 0301 	and.w	r3, r3, #1
 8000776:	613b      	str	r3, [r7, #16]
 8000778:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	60fb      	str	r3, [r7, #12]
 800077e:	4b67      	ldr	r3, [pc, #412]	; (800091c <MX_GPIO_Init+0x20c>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	4a66      	ldr	r2, [pc, #408]	; (800091c <MX_GPIO_Init+0x20c>)
 8000784:	f043 0302 	orr.w	r3, r3, #2
 8000788:	6313      	str	r3, [r2, #48]	; 0x30
 800078a:	4b64      	ldr	r3, [pc, #400]	; (800091c <MX_GPIO_Init+0x20c>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	f003 0302 	and.w	r3, r3, #2
 8000792:	60fb      	str	r3, [r7, #12]
 8000794:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	60bb      	str	r3, [r7, #8]
 800079a:	4b60      	ldr	r3, [pc, #384]	; (800091c <MX_GPIO_Init+0x20c>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	4a5f      	ldr	r2, [pc, #380]	; (800091c <MX_GPIO_Init+0x20c>)
 80007a0:	f043 0308 	orr.w	r3, r3, #8
 80007a4:	6313      	str	r3, [r2, #48]	; 0x30
 80007a6:	4b5d      	ldr	r3, [pc, #372]	; (800091c <MX_GPIO_Init+0x20c>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	f003 0308 	and.w	r3, r3, #8
 80007ae:	60bb      	str	r3, [r7, #8]
 80007b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	607b      	str	r3, [r7, #4]
 80007b6:	4b59      	ldr	r3, [pc, #356]	; (800091c <MX_GPIO_Init+0x20c>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	4a58      	ldr	r2, [pc, #352]	; (800091c <MX_GPIO_Init+0x20c>)
 80007bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007c0:	6313      	str	r3, [r2, #48]	; 0x30
 80007c2:	4b56      	ldr	r3, [pc, #344]	; (800091c <MX_GPIO_Init+0x20c>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007ca:	607b      	str	r3, [r7, #4]
 80007cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80007ce:	2200      	movs	r2, #0
 80007d0:	f244 0181 	movw	r1, #16513	; 0x4081
 80007d4:	4852      	ldr	r0, [pc, #328]	; (8000920 <MX_GPIO_Init+0x210>)
 80007d6:	f001 fed7 	bl	8002588 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80007da:	2200      	movs	r2, #0
 80007dc:	2140      	movs	r1, #64	; 0x40
 80007de:	4851      	ldr	r0, [pc, #324]	; (8000924 <MX_GPIO_Init+0x214>)
 80007e0:	f001 fed2 	bl	8002588 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80007e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007ea:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f0:	2300      	movs	r3, #0
 80007f2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80007f4:	f107 031c 	add.w	r3, r7, #28
 80007f8:	4619      	mov	r1, r3
 80007fa:	484b      	ldr	r0, [pc, #300]	; (8000928 <MX_GPIO_Init+0x218>)
 80007fc:	f001 fd18 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000800:	2332      	movs	r3, #50	; 0x32
 8000802:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000804:	2302      	movs	r3, #2
 8000806:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000808:	2300      	movs	r3, #0
 800080a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800080c:	2303      	movs	r3, #3
 800080e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000810:	230b      	movs	r3, #11
 8000812:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000814:	f107 031c 	add.w	r3, r7, #28
 8000818:	4619      	mov	r1, r3
 800081a:	4843      	ldr	r0, [pc, #268]	; (8000928 <MX_GPIO_Init+0x218>)
 800081c:	f001 fd08 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000820:	2386      	movs	r3, #134	; 0x86
 8000822:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000824:	2302      	movs	r3, #2
 8000826:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000828:	2300      	movs	r3, #0
 800082a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800082c:	2303      	movs	r3, #3
 800082e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000830:	230b      	movs	r3, #11
 8000832:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000834:	f107 031c 	add.w	r3, r7, #28
 8000838:	4619      	mov	r1, r3
 800083a:	483c      	ldr	r0, [pc, #240]	; (800092c <MX_GPIO_Init+0x21c>)
 800083c:	f001 fcf8 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000840:	f244 0381 	movw	r3, #16513	; 0x4081
 8000844:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000846:	2301      	movs	r3, #1
 8000848:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084a:	2300      	movs	r3, #0
 800084c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084e:	2300      	movs	r3, #0
 8000850:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000852:	f107 031c 	add.w	r3, r7, #28
 8000856:	4619      	mov	r1, r3
 8000858:	4831      	ldr	r0, [pc, #196]	; (8000920 <MX_GPIO_Init+0x210>)
 800085a:	f001 fce9 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800085e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000862:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000864:	2302      	movs	r3, #2
 8000866:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000868:	2300      	movs	r3, #0
 800086a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800086c:	2303      	movs	r3, #3
 800086e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000870:	230b      	movs	r3, #11
 8000872:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000874:	f107 031c 	add.w	r3, r7, #28
 8000878:	4619      	mov	r1, r3
 800087a:	4829      	ldr	r0, [pc, #164]	; (8000920 <MX_GPIO_Init+0x210>)
 800087c:	f001 fcd8 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000880:	2340      	movs	r3, #64	; 0x40
 8000882:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000884:	2301      	movs	r3, #1
 8000886:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000888:	2300      	movs	r3, #0
 800088a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088c:	2300      	movs	r3, #0
 800088e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000890:	f107 031c 	add.w	r3, r7, #28
 8000894:	4619      	mov	r1, r3
 8000896:	4823      	ldr	r0, [pc, #140]	; (8000924 <MX_GPIO_Init+0x214>)
 8000898:	f001 fcca 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800089c:	2380      	movs	r3, #128	; 0x80
 800089e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008a0:	2300      	movs	r3, #0
 80008a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a4:	2300      	movs	r3, #0
 80008a6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008a8:	f107 031c 	add.w	r3, r7, #28
 80008ac:	4619      	mov	r1, r3
 80008ae:	481d      	ldr	r0, [pc, #116]	; (8000924 <MX_GPIO_Init+0x214>)
 80008b0:	f001 fcbe 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80008b4:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80008b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ba:	2302      	movs	r3, #2
 80008bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	2300      	movs	r3, #0
 80008c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008c2:	2303      	movs	r3, #3
 80008c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80008c6:	230a      	movs	r3, #10
 80008c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ca:	f107 031c 	add.w	r3, r7, #28
 80008ce:	4619      	mov	r1, r3
 80008d0:	4816      	ldr	r0, [pc, #88]	; (800092c <MX_GPIO_Init+0x21c>)
 80008d2:	f001 fcad 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80008d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008dc:	2300      	movs	r3, #0
 80008de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e0:	2300      	movs	r3, #0
 80008e2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80008e4:	f107 031c 	add.w	r3, r7, #28
 80008e8:	4619      	mov	r1, r3
 80008ea:	4810      	ldr	r0, [pc, #64]	; (800092c <MX_GPIO_Init+0x21c>)
 80008ec:	f001 fca0 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80008f0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80008f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f6:	2302      	movs	r3, #2
 80008f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008fe:	2303      	movs	r3, #3
 8000900:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000902:	230b      	movs	r3, #11
 8000904:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000906:	f107 031c 	add.w	r3, r7, #28
 800090a:	4619      	mov	r1, r3
 800090c:	4805      	ldr	r0, [pc, #20]	; (8000924 <MX_GPIO_Init+0x214>)
 800090e:	f001 fc8f 	bl	8002230 <HAL_GPIO_Init>

}
 8000912:	bf00      	nop
 8000914:	3730      	adds	r7, #48	; 0x30
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	40023800 	.word	0x40023800
 8000920:	40020400 	.word	0x40020400
 8000924:	40021800 	.word	0x40021800
 8000928:	40020800 	.word	0x40020800
 800092c:	40020000 	.word	0x40020000

08000930 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
int main(void)
 8000936:	f107 0310 	add.w	r3, r7, #16
 800093a:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800093c:	f000 fbaa 	bl	8001094 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000940:	f000 f814 	bl	800096c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000944:	f7ff fee4 	bl	8000710 <MX_GPIO_Init>
  MX_DMA_Init();
 8000948:	f7ff fea4 	bl	8000694 <MX_DMA_Init>
  MX_TIM3_Init();
 800094c:	f000 f9c8 	bl	8000ce0 <MX_TIM3_Init>
  MX_USART3_UART_Init();
 8000950:	f000 fafc 	bl	8000f4c <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8000954:	f7ff fdcc 	bl	80004f0 <MX_ADC1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  printf("Hello World\r\n");
 8000958:	4803      	ldr	r0, [pc, #12]	; (8000968 <main+0x38>)
 800095a:	f004 f905 	bl	8004b68 <puts>
	  HAL_Delay(1000);
 800095e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000962:	f000 fc09 	bl	8001178 <HAL_Delay>
  {
 8000966:	e7f7      	b.n	8000958 <main+0x28>
 8000968:	080054a0 	.word	0x080054a0

0800096c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b094      	sub	sp, #80	; 0x50
 8000970:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000972:	f107 0320 	add.w	r3, r7, #32
 8000976:	2230      	movs	r2, #48	; 0x30
 8000978:	2100      	movs	r1, #0
 800097a:	4618      	mov	r0, r3
 800097c:	f004 f87e 	bl	8004a7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000980:	f107 030c 	add.w	r3, r7, #12
 8000984:	2200      	movs	r2, #0
 8000986:	601a      	str	r2, [r3, #0]
 8000988:	605a      	str	r2, [r3, #4]
 800098a:	609a      	str	r2, [r3, #8]
 800098c:	60da      	str	r2, [r3, #12]
 800098e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000990:	2300      	movs	r3, #0
 8000992:	60bb      	str	r3, [r7, #8]
 8000994:	4b2b      	ldr	r3, [pc, #172]	; (8000a44 <SystemClock_Config+0xd8>)
 8000996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000998:	4a2a      	ldr	r2, [pc, #168]	; (8000a44 <SystemClock_Config+0xd8>)
 800099a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800099e:	6413      	str	r3, [r2, #64]	; 0x40
 80009a0:	4b28      	ldr	r3, [pc, #160]	; (8000a44 <SystemClock_Config+0xd8>)
 80009a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009a8:	60bb      	str	r3, [r7, #8]
 80009aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009ac:	2300      	movs	r3, #0
 80009ae:	607b      	str	r3, [r7, #4]
 80009b0:	4b25      	ldr	r3, [pc, #148]	; (8000a48 <SystemClock_Config+0xdc>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a24      	ldr	r2, [pc, #144]	; (8000a48 <SystemClock_Config+0xdc>)
 80009b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80009ba:	6013      	str	r3, [r2, #0]
 80009bc:	4b22      	ldr	r3, [pc, #136]	; (8000a48 <SystemClock_Config+0xdc>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009c4:	607b      	str	r3, [r7, #4]
 80009c6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009c8:	2301      	movs	r3, #1
 80009ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009d0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009d2:	2302      	movs	r3, #2
 80009d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80009dc:	2304      	movs	r3, #4
 80009de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 80009e0:	23b4      	movs	r3, #180	; 0xb4
 80009e2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009e4:	2302      	movs	r3, #2
 80009e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80009e8:	2304      	movs	r3, #4
 80009ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009ec:	f107 0320 	add.w	r3, r7, #32
 80009f0:	4618      	mov	r0, r3
 80009f2:	f001 fe33 	bl	800265c <HAL_RCC_OscConfig>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80009fc:	f000 f826 	bl	8000a4c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000a00:	f001 fddc 	bl	80025bc <HAL_PWREx_EnableOverDrive>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000a0a:	f000 f81f 	bl	8000a4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a0e:	230f      	movs	r3, #15
 8000a10:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a12:	2302      	movs	r3, #2
 8000a14:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a16:	2300      	movs	r3, #0
 8000a18:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a1a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a1e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a24:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a26:	f107 030c 	add.w	r3, r7, #12
 8000a2a:	2105      	movs	r1, #5
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f002 f88d 	bl	8002b4c <HAL_RCC_ClockConfig>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000a38:	f000 f808 	bl	8000a4c <Error_Handler>
  }
}
 8000a3c:	bf00      	nop
 8000a3e:	3750      	adds	r7, #80	; 0x50
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	40023800 	.word	0x40023800
 8000a48:	40007000 	.word	0x40007000

08000a4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a50:	b672      	cpsid	i
}
 8000a52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a54:	e7fe      	b.n	8000a54 <Error_Handler+0x8>
	...

08000a58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a5e:	2300      	movs	r3, #0
 8000a60:	607b      	str	r3, [r7, #4]
 8000a62:	4b10      	ldr	r3, [pc, #64]	; (8000aa4 <HAL_MspInit+0x4c>)
 8000a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a66:	4a0f      	ldr	r2, [pc, #60]	; (8000aa4 <HAL_MspInit+0x4c>)
 8000a68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a6c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a6e:	4b0d      	ldr	r3, [pc, #52]	; (8000aa4 <HAL_MspInit+0x4c>)
 8000a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a76:	607b      	str	r3, [r7, #4]
 8000a78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	603b      	str	r3, [r7, #0]
 8000a7e:	4b09      	ldr	r3, [pc, #36]	; (8000aa4 <HAL_MspInit+0x4c>)
 8000a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a82:	4a08      	ldr	r2, [pc, #32]	; (8000aa4 <HAL_MspInit+0x4c>)
 8000a84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a88:	6413      	str	r3, [r2, #64]	; 0x40
 8000a8a:	4b06      	ldr	r3, [pc, #24]	; (8000aa4 <HAL_MspInit+0x4c>)
 8000a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a92:	603b      	str	r3, [r7, #0]
 8000a94:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a96:	bf00      	nop
 8000a98:	370c      	adds	r7, #12
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop
 8000aa4:	40023800 	.word	0x40023800

08000aa8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000aac:	e7fe      	b.n	8000aac <NMI_Handler+0x4>

08000aae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ab2:	e7fe      	b.n	8000ab2 <HardFault_Handler+0x4>

08000ab4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ab8:	e7fe      	b.n	8000ab8 <MemManage_Handler+0x4>

08000aba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aba:	b480      	push	{r7}
 8000abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000abe:	e7fe      	b.n	8000abe <BusFault_Handler+0x4>

08000ac0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ac4:	e7fe      	b.n	8000ac4 <UsageFault_Handler+0x4>

08000ac6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aca:	bf00      	nop
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr

08000ad4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ad8:	bf00      	nop
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr

08000ae2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ae2:	b480      	push	{r7}
 8000ae4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ae6:	bf00      	nop
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr

08000af0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000af4:	f000 fb20 	bl	8001138 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000af8:	bf00      	nop
 8000afa:	bd80      	pop	{r7, pc}

08000afc <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch4_up);
 8000b00:	4802      	ldr	r0, [pc, #8]	; (8000b0c <DMA1_Stream2_IRQHandler+0x10>)
 8000b02:	f001 f959 	bl	8001db8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8000b06:	bf00      	nop
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	200001e0 	.word	0x200001e0

08000b10 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 8000b14:	4802      	ldr	r0, [pc, #8]	; (8000b20 <DMA1_Stream4_IRQHandler+0x10>)
 8000b16:	f001 f94f 	bl	8001db8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8000b1a:	bf00      	nop
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	20000180 	.word	0x20000180

08000b24 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000b28:	4802      	ldr	r0, [pc, #8]	; (8000b34 <ADC_IRQHandler+0x10>)
 8000b2a:	f000 fb8c 	bl	8001246 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000b2e:	bf00      	nop
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	2000008c 	.word	0x2000008c

08000b38 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000b3c:	4802      	ldr	r0, [pc, #8]	; (8000b48 <TIM3_IRQHandler+0x10>)
 8000b3e:	f002 facd 	bl	80030dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000b42:	bf00      	nop
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	20000138 	.word	0x20000138

08000b4c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000b50:	4802      	ldr	r0, [pc, #8]	; (8000b5c <USART3_IRQHandler+0x10>)
 8000b52:	f003 f8a3 	bl	8003c9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000b56:	bf00      	nop
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	20000240 	.word	0x20000240

08000b60 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000b64:	4802      	ldr	r0, [pc, #8]	; (8000b70 <DMA2_Stream0_IRQHandler+0x10>)
 8000b66:	f001 f927 	bl	8001db8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000b6a:	bf00      	nop
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	200000d4 	.word	0x200000d4

08000b74 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b086      	sub	sp, #24
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	60f8      	str	r0, [r7, #12]
 8000b7c:	60b9      	str	r1, [r7, #8]
 8000b7e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b80:	2300      	movs	r3, #0
 8000b82:	617b      	str	r3, [r7, #20]
 8000b84:	e00a      	b.n	8000b9c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b86:	f3af 8000 	nop.w
 8000b8a:	4601      	mov	r1, r0
 8000b8c:	68bb      	ldr	r3, [r7, #8]
 8000b8e:	1c5a      	adds	r2, r3, #1
 8000b90:	60ba      	str	r2, [r7, #8]
 8000b92:	b2ca      	uxtb	r2, r1
 8000b94:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b96:	697b      	ldr	r3, [r7, #20]
 8000b98:	3301      	adds	r3, #1
 8000b9a:	617b      	str	r3, [r7, #20]
 8000b9c:	697a      	ldr	r2, [r7, #20]
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	429a      	cmp	r2, r3
 8000ba2:	dbf0      	blt.n	8000b86 <_read+0x12>
	}

return len;
 8000ba4:	687b      	ldr	r3, [r7, #4]
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	3718      	adds	r7, #24
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}

08000bae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000bae:	b580      	push	{r7, lr}
 8000bb0:	b086      	sub	sp, #24
 8000bb2:	af00      	add	r7, sp, #0
 8000bb4:	60f8      	str	r0, [r7, #12]
 8000bb6:	60b9      	str	r1, [r7, #8]
 8000bb8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bba:	2300      	movs	r3, #0
 8000bbc:	617b      	str	r3, [r7, #20]
 8000bbe:	e009      	b.n	8000bd4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000bc0:	68bb      	ldr	r3, [r7, #8]
 8000bc2:	1c5a      	adds	r2, r3, #1
 8000bc4:	60ba      	str	r2, [r7, #8]
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bce:	697b      	ldr	r3, [r7, #20]
 8000bd0:	3301      	adds	r3, #1
 8000bd2:	617b      	str	r3, [r7, #20]
 8000bd4:	697a      	ldr	r2, [r7, #20]
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	429a      	cmp	r2, r3
 8000bda:	dbf1      	blt.n	8000bc0 <_write+0x12>
	}
	return len;
 8000bdc:	687b      	ldr	r3, [r7, #4]
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	3718      	adds	r7, #24
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}

08000be6 <_close>:

int _close(int file)
{
 8000be6:	b480      	push	{r7}
 8000be8:	b083      	sub	sp, #12
 8000bea:	af00      	add	r7, sp, #0
 8000bec:	6078      	str	r0, [r7, #4]
	return -1;
 8000bee:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	370c      	adds	r7, #12
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr

08000bfe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bfe:	b480      	push	{r7}
 8000c00:	b083      	sub	sp, #12
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	6078      	str	r0, [r7, #4]
 8000c06:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c0e:	605a      	str	r2, [r3, #4]
	return 0;
 8000c10:	2300      	movs	r3, #0
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	370c      	adds	r7, #12
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr

08000c1e <_isatty>:

int _isatty(int file)
{
 8000c1e:	b480      	push	{r7}
 8000c20:	b083      	sub	sp, #12
 8000c22:	af00      	add	r7, sp, #0
 8000c24:	6078      	str	r0, [r7, #4]
	return 1;
 8000c26:	2301      	movs	r3, #1
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	370c      	adds	r7, #12
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr

08000c34 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b085      	sub	sp, #20
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	60f8      	str	r0, [r7, #12]
 8000c3c:	60b9      	str	r1, [r7, #8]
 8000c3e:	607a      	str	r2, [r7, #4]
	return 0;
 8000c40:	2300      	movs	r3, #0
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3714      	adds	r7, #20
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
	...

08000c50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b086      	sub	sp, #24
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c58:	4a14      	ldr	r2, [pc, #80]	; (8000cac <_sbrk+0x5c>)
 8000c5a:	4b15      	ldr	r3, [pc, #84]	; (8000cb0 <_sbrk+0x60>)
 8000c5c:	1ad3      	subs	r3, r2, r3
 8000c5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c64:	4b13      	ldr	r3, [pc, #76]	; (8000cb4 <_sbrk+0x64>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d102      	bne.n	8000c72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c6c:	4b11      	ldr	r3, [pc, #68]	; (8000cb4 <_sbrk+0x64>)
 8000c6e:	4a12      	ldr	r2, [pc, #72]	; (8000cb8 <_sbrk+0x68>)
 8000c70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c72:	4b10      	ldr	r3, [pc, #64]	; (8000cb4 <_sbrk+0x64>)
 8000c74:	681a      	ldr	r2, [r3, #0]
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	4413      	add	r3, r2
 8000c7a:	693a      	ldr	r2, [r7, #16]
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	d207      	bcs.n	8000c90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c80:	f003 fed2 	bl	8004a28 <__errno>
 8000c84:	4603      	mov	r3, r0
 8000c86:	220c      	movs	r2, #12
 8000c88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c8e:	e009      	b.n	8000ca4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c90:	4b08      	ldr	r3, [pc, #32]	; (8000cb4 <_sbrk+0x64>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c96:	4b07      	ldr	r3, [pc, #28]	; (8000cb4 <_sbrk+0x64>)
 8000c98:	681a      	ldr	r2, [r3, #0]
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	4413      	add	r3, r2
 8000c9e:	4a05      	ldr	r2, [pc, #20]	; (8000cb4 <_sbrk+0x64>)
 8000ca0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ca2:	68fb      	ldr	r3, [r7, #12]
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	3718      	adds	r7, #24
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	20030000 	.word	0x20030000
 8000cb0:	00000400 	.word	0x00000400
 8000cb4:	20000134 	.word	0x20000134
 8000cb8:	20000298 	.word	0x20000298

08000cbc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cc0:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <SystemInit+0x20>)
 8000cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cc6:	4a05      	ldr	r2, [pc, #20]	; (8000cdc <SystemInit+0x20>)
 8000cc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ccc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cd0:	bf00      	nop
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	e000ed00 	.word	0xe000ed00

08000ce0 <MX_TIM3_Init>:
DMA_HandleTypeDef hdma_tim3_ch1_trig;
DMA_HandleTypeDef hdma_tim3_ch4_up;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b08a      	sub	sp, #40	; 0x28
 8000ce4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ce6:	f107 0318 	add.w	r3, r7, #24
 8000cea:	2200      	movs	r2, #0
 8000cec:	601a      	str	r2, [r3, #0]
 8000cee:	605a      	str	r2, [r3, #4]
 8000cf0:	609a      	str	r2, [r3, #8]
 8000cf2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cf4:	f107 0310 	add.w	r3, r7, #16
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]
 8000cfc:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000cfe:	463b      	mov	r3, r7
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]
 8000d04:	605a      	str	r2, [r3, #4]
 8000d06:	609a      	str	r2, [r3, #8]
 8000d08:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d0a:	4b2b      	ldr	r3, [pc, #172]	; (8000db8 <MX_TIM3_Init+0xd8>)
 8000d0c:	4a2b      	ldr	r2, [pc, #172]	; (8000dbc <MX_TIM3_Init+0xdc>)
 8000d0e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000d10:	4b29      	ldr	r3, [pc, #164]	; (8000db8 <MX_TIM3_Init+0xd8>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d16:	4b28      	ldr	r3, [pc, #160]	; (8000db8 <MX_TIM3_Init+0xd8>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000d1c:	4b26      	ldr	r3, [pc, #152]	; (8000db8 <MX_TIM3_Init+0xd8>)
 8000d1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d22:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d24:	4b24      	ldr	r3, [pc, #144]	; (8000db8 <MX_TIM3_Init+0xd8>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d2a:	4b23      	ldr	r3, [pc, #140]	; (8000db8 <MX_TIM3_Init+0xd8>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000d30:	4821      	ldr	r0, [pc, #132]	; (8000db8 <MX_TIM3_Init+0xd8>)
 8000d32:	f002 f92b 	bl	8002f8c <HAL_TIM_Base_Init>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8000d3c:	f7ff fe86 	bl	8000a4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d44:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000d46:	f107 0318 	add.w	r3, r7, #24
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	481a      	ldr	r0, [pc, #104]	; (8000db8 <MX_TIM3_Init+0xd8>)
 8000d4e:	f002 fb69 	bl	8003424 <HAL_TIM_ConfigClockSource>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000d58:	f7ff fe78 	bl	8000a4c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8000d5c:	4816      	ldr	r0, [pc, #88]	; (8000db8 <MX_TIM3_Init+0xd8>)
 8000d5e:	f002 f964 	bl	800302a <HAL_TIM_IC_Init>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d001      	beq.n	8000d6c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000d68:	f7ff fe70 	bl	8000a4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d70:	2300      	movs	r3, #0
 8000d72:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d74:	f107 0310 	add.w	r3, r7, #16
 8000d78:	4619      	mov	r1, r3
 8000d7a:	480f      	ldr	r0, [pc, #60]	; (8000db8 <MX_TIM3_Init+0xd8>)
 8000d7c:	f002 feb0 	bl	8003ae0 <HAL_TIMEx_MasterConfigSynchronization>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 8000d86:	f7ff fe61 	bl	8000a4c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000d92:	2300      	movs	r3, #0
 8000d94:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000d96:	2300      	movs	r3, #0
 8000d98:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000d9a:	463b      	mov	r3, r7
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	4619      	mov	r1, r3
 8000da0:	4805      	ldr	r0, [pc, #20]	; (8000db8 <MX_TIM3_Init+0xd8>)
 8000da2:	f002 faa3 	bl	80032ec <HAL_TIM_IC_ConfigChannel>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8000dac:	f7ff fe4e 	bl	8000a4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000db0:	bf00      	nop
 8000db2:	3728      	adds	r7, #40	; 0x28
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	20000138 	.word	0x20000138
 8000dbc:	40000400 	.word	0x40000400

08000dc0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b08a      	sub	sp, #40	; 0x28
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc8:	f107 0314 	add.w	r3, r7, #20
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	605a      	str	r2, [r3, #4]
 8000dd2:	609a      	str	r2, [r3, #8]
 8000dd4:	60da      	str	r2, [r3, #12]
 8000dd6:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM3)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a54      	ldr	r2, [pc, #336]	; (8000f30 <HAL_TIM_Base_MspInit+0x170>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	f040 80a2 	bne.w	8000f28 <HAL_TIM_Base_MspInit+0x168>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000de4:	2300      	movs	r3, #0
 8000de6:	613b      	str	r3, [r7, #16]
 8000de8:	4b52      	ldr	r3, [pc, #328]	; (8000f34 <HAL_TIM_Base_MspInit+0x174>)
 8000dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dec:	4a51      	ldr	r2, [pc, #324]	; (8000f34 <HAL_TIM_Base_MspInit+0x174>)
 8000dee:	f043 0302 	orr.w	r3, r3, #2
 8000df2:	6413      	str	r3, [r2, #64]	; 0x40
 8000df4:	4b4f      	ldr	r3, [pc, #316]	; (8000f34 <HAL_TIM_Base_MspInit+0x174>)
 8000df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df8:	f003 0302 	and.w	r3, r3, #2
 8000dfc:	613b      	str	r3, [r7, #16]
 8000dfe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e00:	2300      	movs	r3, #0
 8000e02:	60fb      	str	r3, [r7, #12]
 8000e04:	4b4b      	ldr	r3, [pc, #300]	; (8000f34 <HAL_TIM_Base_MspInit+0x174>)
 8000e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e08:	4a4a      	ldr	r2, [pc, #296]	; (8000f34 <HAL_TIM_Base_MspInit+0x174>)
 8000e0a:	f043 0301 	orr.w	r3, r3, #1
 8000e0e:	6313      	str	r3, [r2, #48]	; 0x30
 8000e10:	4b48      	ldr	r3, [pc, #288]	; (8000f34 <HAL_TIM_Base_MspInit+0x174>)
 8000e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e14:	f003 0301 	and.w	r3, r3, #1
 8000e18:	60fb      	str	r3, [r7, #12]
 8000e1a:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000e1c:	2340      	movs	r3, #64	; 0x40
 8000e1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e20:	2302      	movs	r3, #2
 8000e22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e24:	2300      	movs	r3, #0
 8000e26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000e2c:	2302      	movs	r3, #2
 8000e2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e30:	f107 0314 	add.w	r3, r7, #20
 8000e34:	4619      	mov	r1, r3
 8000e36:	4840      	ldr	r0, [pc, #256]	; (8000f38 <HAL_TIM_Base_MspInit+0x178>)
 8000e38:	f001 f9fa 	bl	8002230 <HAL_GPIO_Init>

    /* TIM3 DMA Init */
    /* TIM3_CH1_TRIG Init */
    hdma_tim3_ch1_trig.Instance = DMA1_Stream4;
 8000e3c:	4b3f      	ldr	r3, [pc, #252]	; (8000f3c <HAL_TIM_Base_MspInit+0x17c>)
 8000e3e:	4a40      	ldr	r2, [pc, #256]	; (8000f40 <HAL_TIM_Base_MspInit+0x180>)
 8000e40:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Channel = DMA_CHANNEL_5;
 8000e42:	4b3e      	ldr	r3, [pc, #248]	; (8000f3c <HAL_TIM_Base_MspInit+0x17c>)
 8000e44:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8000e48:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e4a:	4b3c      	ldr	r3, [pc, #240]	; (8000f3c <HAL_TIM_Base_MspInit+0x17c>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e50:	4b3a      	ldr	r3, [pc, #232]	; (8000f3c <HAL_TIM_Base_MspInit+0x17c>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 8000e56:	4b39      	ldr	r3, [pc, #228]	; (8000f3c <HAL_TIM_Base_MspInit+0x17c>)
 8000e58:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e5c:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e5e:	4b37      	ldr	r3, [pc, #220]	; (8000f3c <HAL_TIM_Base_MspInit+0x17c>)
 8000e60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e64:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e66:	4b35      	ldr	r3, [pc, #212]	; (8000f3c <HAL_TIM_Base_MspInit+0x17c>)
 8000e68:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e6c:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Mode = DMA_CIRCULAR;
 8000e6e:	4b33      	ldr	r3, [pc, #204]	; (8000f3c <HAL_TIM_Base_MspInit+0x17c>)
 8000e70:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e74:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 8000e76:	4b31      	ldr	r3, [pc, #196]	; (8000f3c <HAL_TIM_Base_MspInit+0x17c>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1_trig.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e7c:	4b2f      	ldr	r3, [pc, #188]	; (8000f3c <HAL_TIM_Base_MspInit+0x17c>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 8000e82:	482e      	ldr	r0, [pc, #184]	; (8000f3c <HAL_TIM_Base_MspInit+0x17c>)
 8000e84:	f000 fe58 	bl	8001b38 <HAL_DMA_Init>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <HAL_TIM_Base_MspInit+0xd2>
    {
      Error_Handler();
 8000e8e:	f7ff fddd 	bl	8000a4c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4a29      	ldr	r2, [pc, #164]	; (8000f3c <HAL_TIM_Base_MspInit+0x17c>)
 8000e96:	625a      	str	r2, [r3, #36]	; 0x24
 8000e98:	4a28      	ldr	r2, [pc, #160]	; (8000f3c <HAL_TIM_Base_MspInit+0x17c>)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4a26      	ldr	r2, [pc, #152]	; (8000f3c <HAL_TIM_Base_MspInit+0x17c>)
 8000ea2:	639a      	str	r2, [r3, #56]	; 0x38
 8000ea4:	4a25      	ldr	r2, [pc, #148]	; (8000f3c <HAL_TIM_Base_MspInit+0x17c>)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM3_CH4_UP Init */
    hdma_tim3_ch4_up.Instance = DMA1_Stream2;
 8000eaa:	4b26      	ldr	r3, [pc, #152]	; (8000f44 <HAL_TIM_Base_MspInit+0x184>)
 8000eac:	4a26      	ldr	r2, [pc, #152]	; (8000f48 <HAL_TIM_Base_MspInit+0x188>)
 8000eae:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4_up.Init.Channel = DMA_CHANNEL_5;
 8000eb0:	4b24      	ldr	r3, [pc, #144]	; (8000f44 <HAL_TIM_Base_MspInit+0x184>)
 8000eb2:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8000eb6:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000eb8:	4b22      	ldr	r3, [pc, #136]	; (8000f44 <HAL_TIM_Base_MspInit+0x184>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ebe:	4b21      	ldr	r3, [pc, #132]	; (8000f44 <HAL_TIM_Base_MspInit+0x184>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4_up.Init.MemInc = DMA_MINC_ENABLE;
 8000ec4:	4b1f      	ldr	r3, [pc, #124]	; (8000f44 <HAL_TIM_Base_MspInit+0x184>)
 8000ec6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000eca:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ecc:	4b1d      	ldr	r3, [pc, #116]	; (8000f44 <HAL_TIM_Base_MspInit+0x184>)
 8000ece:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ed2:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ed4:	4b1b      	ldr	r3, [pc, #108]	; (8000f44 <HAL_TIM_Base_MspInit+0x184>)
 8000ed6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000eda:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4_up.Init.Mode = DMA_CIRCULAR;
 8000edc:	4b19      	ldr	r3, [pc, #100]	; (8000f44 <HAL_TIM_Base_MspInit+0x184>)
 8000ede:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ee2:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch4_up.Init.Priority = DMA_PRIORITY_LOW;
 8000ee4:	4b17      	ldr	r3, [pc, #92]	; (8000f44 <HAL_TIM_Base_MspInit+0x184>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch4_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000eea:	4b16      	ldr	r3, [pc, #88]	; (8000f44 <HAL_TIM_Base_MspInit+0x184>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch4_up) != HAL_OK)
 8000ef0:	4814      	ldr	r0, [pc, #80]	; (8000f44 <HAL_TIM_Base_MspInit+0x184>)
 8000ef2:	f000 fe21 	bl	8001b38 <HAL_DMA_Init>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <HAL_TIM_Base_MspInit+0x140>
    {
      Error_Handler();
 8000efc:	f7ff fda6 	bl	8000a4c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4_up);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	4a10      	ldr	r2, [pc, #64]	; (8000f44 <HAL_TIM_Base_MspInit+0x184>)
 8000f04:	631a      	str	r2, [r3, #48]	; 0x30
 8000f06:	4a0f      	ldr	r2, [pc, #60]	; (8000f44 <HAL_TIM_Base_MspInit+0x184>)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim3_ch4_up);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	4a0d      	ldr	r2, [pc, #52]	; (8000f44 <HAL_TIM_Base_MspInit+0x184>)
 8000f10:	621a      	str	r2, [r3, #32]
 8000f12:	4a0c      	ldr	r2, [pc, #48]	; (8000f44 <HAL_TIM_Base_MspInit+0x184>)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000f18:	2200      	movs	r2, #0
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	201d      	movs	r0, #29
 8000f1e:	f000 fdd4 	bl	8001aca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000f22:	201d      	movs	r0, #29
 8000f24:	f000 fded 	bl	8001b02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000f28:	bf00      	nop
 8000f2a:	3728      	adds	r7, #40	; 0x28
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	40000400 	.word	0x40000400
 8000f34:	40023800 	.word	0x40023800
 8000f38:	40020000 	.word	0x40020000
 8000f3c:	20000180 	.word	0x20000180
 8000f40:	40026070 	.word	0x40026070
 8000f44:	200001e0 	.word	0x200001e0
 8000f48:	40026040 	.word	0x40026040

08000f4c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f50:	4b11      	ldr	r3, [pc, #68]	; (8000f98 <MX_USART3_UART_Init+0x4c>)
 8000f52:	4a12      	ldr	r2, [pc, #72]	; (8000f9c <MX_USART3_UART_Init+0x50>)
 8000f54:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000f56:	4b10      	ldr	r3, [pc, #64]	; (8000f98 <MX_USART3_UART_Init+0x4c>)
 8000f58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f5c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f5e:	4b0e      	ldr	r3, [pc, #56]	; (8000f98 <MX_USART3_UART_Init+0x4c>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f64:	4b0c      	ldr	r3, [pc, #48]	; (8000f98 <MX_USART3_UART_Init+0x4c>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f6a:	4b0b      	ldr	r3, [pc, #44]	; (8000f98 <MX_USART3_UART_Init+0x4c>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f70:	4b09      	ldr	r3, [pc, #36]	; (8000f98 <MX_USART3_UART_Init+0x4c>)
 8000f72:	220c      	movs	r2, #12
 8000f74:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f76:	4b08      	ldr	r3, [pc, #32]	; (8000f98 <MX_USART3_UART_Init+0x4c>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f7c:	4b06      	ldr	r3, [pc, #24]	; (8000f98 <MX_USART3_UART_Init+0x4c>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f82:	4805      	ldr	r0, [pc, #20]	; (8000f98 <MX_USART3_UART_Init+0x4c>)
 8000f84:	f002 fe3c 	bl	8003c00 <HAL_UART_Init>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000f8e:	f7ff fd5d 	bl	8000a4c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f92:	bf00      	nop
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	20000240 	.word	0x20000240
 8000f9c:	40004800 	.word	0x40004800

08000fa0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b08a      	sub	sp, #40	; 0x28
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa8:	f107 0314 	add.w	r3, r7, #20
 8000fac:	2200      	movs	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
 8000fb0:	605a      	str	r2, [r3, #4]
 8000fb2:	609a      	str	r2, [r3, #8]
 8000fb4:	60da      	str	r2, [r3, #12]
 8000fb6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a1d      	ldr	r2, [pc, #116]	; (8001034 <HAL_UART_MspInit+0x94>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d134      	bne.n	800102c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	613b      	str	r3, [r7, #16]
 8000fc6:	4b1c      	ldr	r3, [pc, #112]	; (8001038 <HAL_UART_MspInit+0x98>)
 8000fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fca:	4a1b      	ldr	r2, [pc, #108]	; (8001038 <HAL_UART_MspInit+0x98>)
 8000fcc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fd0:	6413      	str	r3, [r2, #64]	; 0x40
 8000fd2:	4b19      	ldr	r3, [pc, #100]	; (8001038 <HAL_UART_MspInit+0x98>)
 8000fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000fda:	613b      	str	r3, [r7, #16]
 8000fdc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fde:	2300      	movs	r3, #0
 8000fe0:	60fb      	str	r3, [r7, #12]
 8000fe2:	4b15      	ldr	r3, [pc, #84]	; (8001038 <HAL_UART_MspInit+0x98>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe6:	4a14      	ldr	r2, [pc, #80]	; (8001038 <HAL_UART_MspInit+0x98>)
 8000fe8:	f043 0308 	orr.w	r3, r3, #8
 8000fec:	6313      	str	r3, [r2, #48]	; 0x30
 8000fee:	4b12      	ldr	r3, [pc, #72]	; (8001038 <HAL_UART_MspInit+0x98>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff2:	f003 0308 	and.w	r3, r3, #8
 8000ff6:	60fb      	str	r3, [r7, #12]
 8000ff8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000ffa:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ffe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001000:	2302      	movs	r3, #2
 8001002:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001004:	2300      	movs	r3, #0
 8001006:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001008:	2303      	movs	r3, #3
 800100a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800100c:	2307      	movs	r3, #7
 800100e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001010:	f107 0314 	add.w	r3, r7, #20
 8001014:	4619      	mov	r1, r3
 8001016:	4809      	ldr	r0, [pc, #36]	; (800103c <HAL_UART_MspInit+0x9c>)
 8001018:	f001 f90a 	bl	8002230 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800101c:	2200      	movs	r2, #0
 800101e:	2100      	movs	r1, #0
 8001020:	2027      	movs	r0, #39	; 0x27
 8001022:	f000 fd52 	bl	8001aca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001026:	2027      	movs	r0, #39	; 0x27
 8001028:	f000 fd6b 	bl	8001b02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800102c:	bf00      	nop
 800102e:	3728      	adds	r7, #40	; 0x28
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	40004800 	.word	0x40004800
 8001038:	40023800 	.word	0x40023800
 800103c:	40020c00 	.word	0x40020c00

08001040 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001040:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001078 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001044:	480d      	ldr	r0, [pc, #52]	; (800107c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001046:	490e      	ldr	r1, [pc, #56]	; (8001080 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001048:	4a0e      	ldr	r2, [pc, #56]	; (8001084 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800104a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800104c:	e002      	b.n	8001054 <LoopCopyDataInit>

0800104e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800104e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001050:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001052:	3304      	adds	r3, #4

08001054 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001054:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001056:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001058:	d3f9      	bcc.n	800104e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800105a:	4a0b      	ldr	r2, [pc, #44]	; (8001088 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800105c:	4c0b      	ldr	r4, [pc, #44]	; (800108c <LoopFillZerobss+0x26>)
  movs r3, #0
 800105e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001060:	e001      	b.n	8001066 <LoopFillZerobss>

08001062 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001062:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001064:	3204      	adds	r2, #4

08001066 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001066:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001068:	d3fb      	bcc.n	8001062 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800106a:	f7ff fe27 	bl	8000cbc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800106e:	f003 fce1 	bl	8004a34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001072:	f7ff fc5d 	bl	8000930 <main>
  bx  lr    
 8001076:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001078:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800107c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001080:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001084:	08005544 	.word	0x08005544
  ldr r2, =_sbss
 8001088:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800108c:	20000298 	.word	0x20000298

08001090 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001090:	e7fe      	b.n	8001090 <CAN1_RX0_IRQHandler>
	...

08001094 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001098:	4b0e      	ldr	r3, [pc, #56]	; (80010d4 <HAL_Init+0x40>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a0d      	ldr	r2, [pc, #52]	; (80010d4 <HAL_Init+0x40>)
 800109e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010a4:	4b0b      	ldr	r3, [pc, #44]	; (80010d4 <HAL_Init+0x40>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a0a      	ldr	r2, [pc, #40]	; (80010d4 <HAL_Init+0x40>)
 80010aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010b0:	4b08      	ldr	r3, [pc, #32]	; (80010d4 <HAL_Init+0x40>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a07      	ldr	r2, [pc, #28]	; (80010d4 <HAL_Init+0x40>)
 80010b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010bc:	2003      	movs	r0, #3
 80010be:	f000 fcf9 	bl	8001ab4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010c2:	2000      	movs	r0, #0
 80010c4:	f000 f808 	bl	80010d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010c8:	f7ff fcc6 	bl	8000a58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010cc:	2300      	movs	r3, #0
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	40023c00 	.word	0x40023c00

080010d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010e0:	4b12      	ldr	r3, [pc, #72]	; (800112c <HAL_InitTick+0x54>)
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	4b12      	ldr	r3, [pc, #72]	; (8001130 <HAL_InitTick+0x58>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	4619      	mov	r1, r3
 80010ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80010f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010f6:	4618      	mov	r0, r3
 80010f8:	f000 fd11 	bl	8001b1e <HAL_SYSTICK_Config>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001102:	2301      	movs	r3, #1
 8001104:	e00e      	b.n	8001124 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2b0f      	cmp	r3, #15
 800110a:	d80a      	bhi.n	8001122 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800110c:	2200      	movs	r2, #0
 800110e:	6879      	ldr	r1, [r7, #4]
 8001110:	f04f 30ff 	mov.w	r0, #4294967295
 8001114:	f000 fcd9 	bl	8001aca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001118:	4a06      	ldr	r2, [pc, #24]	; (8001134 <HAL_InitTick+0x5c>)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800111e:	2300      	movs	r3, #0
 8001120:	e000      	b.n	8001124 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001122:	2301      	movs	r3, #1
}
 8001124:	4618      	mov	r0, r3
 8001126:	3708      	adds	r7, #8
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	20000000 	.word	0x20000000
 8001130:	20000008 	.word	0x20000008
 8001134:	20000004 	.word	0x20000004

08001138 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800113c:	4b06      	ldr	r3, [pc, #24]	; (8001158 <HAL_IncTick+0x20>)
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	461a      	mov	r2, r3
 8001142:	4b06      	ldr	r3, [pc, #24]	; (800115c <HAL_IncTick+0x24>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4413      	add	r3, r2
 8001148:	4a04      	ldr	r2, [pc, #16]	; (800115c <HAL_IncTick+0x24>)
 800114a:	6013      	str	r3, [r2, #0]
}
 800114c:	bf00      	nop
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	20000008 	.word	0x20000008
 800115c:	20000284 	.word	0x20000284

08001160 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  return uwTick;
 8001164:	4b03      	ldr	r3, [pc, #12]	; (8001174 <HAL_GetTick+0x14>)
 8001166:	681b      	ldr	r3, [r3, #0]
}
 8001168:	4618      	mov	r0, r3
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	20000284 	.word	0x20000284

08001178 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001180:	f7ff ffee 	bl	8001160 <HAL_GetTick>
 8001184:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001190:	d005      	beq.n	800119e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001192:	4b0a      	ldr	r3, [pc, #40]	; (80011bc <HAL_Delay+0x44>)
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	461a      	mov	r2, r3
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	4413      	add	r3, r2
 800119c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800119e:	bf00      	nop
 80011a0:	f7ff ffde 	bl	8001160 <HAL_GetTick>
 80011a4:	4602      	mov	r2, r0
 80011a6:	68bb      	ldr	r3, [r7, #8]
 80011a8:	1ad3      	subs	r3, r2, r3
 80011aa:	68fa      	ldr	r2, [r7, #12]
 80011ac:	429a      	cmp	r2, r3
 80011ae:	d8f7      	bhi.n	80011a0 <HAL_Delay+0x28>
  {
  }
}
 80011b0:	bf00      	nop
 80011b2:	bf00      	nop
 80011b4:	3710      	adds	r7, #16
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	20000008 	.word	0x20000008

080011c0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011c8:	2300      	movs	r3, #0
 80011ca:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d101      	bne.n	80011d6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80011d2:	2301      	movs	r3, #1
 80011d4:	e033      	b.n	800123e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d109      	bne.n	80011f2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80011de:	6878      	ldr	r0, [r7, #4]
 80011e0:	f7ff f9d8 	bl	8000594 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2200      	movs	r2, #0
 80011e8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2200      	movs	r2, #0
 80011ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f6:	f003 0310 	and.w	r3, r3, #16
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d118      	bne.n	8001230 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001202:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001206:	f023 0302 	bic.w	r3, r3, #2
 800120a:	f043 0202 	orr.w	r2, r3, #2
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	f000 fa78 	bl	8001708 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2200      	movs	r2, #0
 800121c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001222:	f023 0303 	bic.w	r3, r3, #3
 8001226:	f043 0201 	orr.w	r2, r3, #1
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	641a      	str	r2, [r3, #64]	; 0x40
 800122e:	e001      	b.n	8001234 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001230:	2301      	movs	r3, #1
 8001232:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2200      	movs	r2, #0
 8001238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800123c:	7bfb      	ldrb	r3, [r7, #15]
}
 800123e:	4618      	mov	r0, r3
 8001240:	3710      	adds	r7, #16
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}

08001246 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001246:	b580      	push	{r7, lr}
 8001248:	b086      	sub	sp, #24
 800124a:	af00      	add	r7, sp, #0
 800124c:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800124e:	2300      	movs	r3, #0
 8001250:	617b      	str	r3, [r7, #20]
 8001252:	2300      	movs	r3, #0
 8001254:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	f003 0302 	and.w	r3, r3, #2
 800126c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800126e:	68bb      	ldr	r3, [r7, #8]
 8001270:	f003 0320 	and.w	r3, r3, #32
 8001274:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d049      	beq.n	8001310 <HAL_ADC_IRQHandler+0xca>
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d046      	beq.n	8001310 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001286:	f003 0310 	and.w	r3, r3, #16
 800128a:	2b00      	cmp	r3, #0
 800128c:	d105      	bne.n	800129a <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001292:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	689b      	ldr	r3, [r3, #8]
 80012a0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d12b      	bne.n	8001300 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d127      	bne.n	8001300 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012b6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d006      	beq.n	80012cc <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	689b      	ldr	r3, [r3, #8]
 80012c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d119      	bne.n	8001300 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	685a      	ldr	r2, [r3, #4]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f022 0220 	bic.w	r2, r2, #32
 80012da:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d105      	bne.n	8001300 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f8:	f043 0201 	orr.w	r2, r3, #1
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001300:	6878      	ldr	r0, [r7, #4]
 8001302:	f000 f8b0 	bl	8001466 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f06f 0212 	mvn.w	r2, #18
 800130e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	f003 0304 	and.w	r3, r3, #4
 8001316:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800131e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d057      	beq.n	80013d6 <HAL_ADC_IRQHandler+0x190>
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d054      	beq.n	80013d6 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001330:	f003 0310 	and.w	r3, r3, #16
 8001334:	2b00      	cmp	r3, #0
 8001336:	d105      	bne.n	8001344 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800134e:	2b00      	cmp	r3, #0
 8001350:	d139      	bne.n	80013c6 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001358:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800135c:	2b00      	cmp	r3, #0
 800135e:	d006      	beq.n	800136e <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800136a:	2b00      	cmp	r3, #0
 800136c:	d12b      	bne.n	80013c6 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001378:	2b00      	cmp	r3, #0
 800137a:	d124      	bne.n	80013c6 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	689b      	ldr	r3, [r3, #8]
 8001382:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001386:	2b00      	cmp	r3, #0
 8001388:	d11d      	bne.n	80013c6 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800138e:	2b00      	cmp	r3, #0
 8001390:	d119      	bne.n	80013c6 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	685a      	ldr	r2, [r3, #4]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80013a0:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d105      	bne.n	80013c6 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013be:	f043 0201 	orr.w	r2, r3, #1
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	f000 fa9a 	bl	8001900 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f06f 020c 	mvn.w	r2, #12
 80013d4:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	f003 0301 	and.w	r3, r3, #1
 80013dc:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80013de:	68bb      	ldr	r3, [r7, #8]
 80013e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013e4:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d017      	beq.n	800141c <HAL_ADC_IRQHandler+0x1d6>
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d014      	beq.n	800141c <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f003 0301 	and.w	r3, r3, #1
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	d10d      	bne.n	800141c <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001404:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800140c:	6878      	ldr	r0, [r7, #4]
 800140e:	f000 f834 	bl	800147a <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f06f 0201 	mvn.w	r2, #1
 800141a:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	f003 0320 	and.w	r3, r3, #32
 8001422:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800142a:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d015      	beq.n	800145e <HAL_ADC_IRQHandler+0x218>
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d012      	beq.n	800145e <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800143c:	f043 0202 	orr.w	r2, r3, #2
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f06f 0220 	mvn.w	r2, #32
 800144c:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	f000 f81d 	bl	800148e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f06f 0220 	mvn.w	r2, #32
 800145c:	601a      	str	r2, [r3, #0]
  }
}
 800145e:	bf00      	nop
 8001460:	3718      	adds	r7, #24
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}

08001466 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001466:	b480      	push	{r7}
 8001468:	b083      	sub	sp, #12
 800146a:	af00      	add	r7, sp, #0
 800146c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800146e:	bf00      	nop
 8001470:	370c      	adds	r7, #12
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr

0800147a <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800147a:	b480      	push	{r7}
 800147c:	b083      	sub	sp, #12
 800147e:	af00      	add	r7, sp, #0
 8001480:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001482:	bf00      	nop
 8001484:	370c      	adds	r7, #12
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr

0800148e <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800148e:	b480      	push	{r7}
 8001490:	b083      	sub	sp, #12
 8001492:	af00      	add	r7, sp, #0
 8001494:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001496:	bf00      	nop
 8001498:	370c      	adds	r7, #12
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
	...

080014a4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b085      	sub	sp, #20
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80014ae:	2300      	movs	r3, #0
 80014b0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d101      	bne.n	80014c0 <HAL_ADC_ConfigChannel+0x1c>
 80014bc:	2302      	movs	r3, #2
 80014be:	e113      	b.n	80016e8 <HAL_ADC_ConfigChannel+0x244>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2201      	movs	r2, #1
 80014c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2b09      	cmp	r3, #9
 80014ce:	d925      	bls.n	800151c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	68d9      	ldr	r1, [r3, #12]
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	b29b      	uxth	r3, r3
 80014dc:	461a      	mov	r2, r3
 80014de:	4613      	mov	r3, r2
 80014e0:	005b      	lsls	r3, r3, #1
 80014e2:	4413      	add	r3, r2
 80014e4:	3b1e      	subs	r3, #30
 80014e6:	2207      	movs	r2, #7
 80014e8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ec:	43da      	mvns	r2, r3
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	400a      	ands	r2, r1
 80014f4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	68d9      	ldr	r1, [r3, #12]
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	689a      	ldr	r2, [r3, #8]
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	b29b      	uxth	r3, r3
 8001506:	4618      	mov	r0, r3
 8001508:	4603      	mov	r3, r0
 800150a:	005b      	lsls	r3, r3, #1
 800150c:	4403      	add	r3, r0
 800150e:	3b1e      	subs	r3, #30
 8001510:	409a      	lsls	r2, r3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	430a      	orrs	r2, r1
 8001518:	60da      	str	r2, [r3, #12]
 800151a:	e022      	b.n	8001562 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	6919      	ldr	r1, [r3, #16]
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	b29b      	uxth	r3, r3
 8001528:	461a      	mov	r2, r3
 800152a:	4613      	mov	r3, r2
 800152c:	005b      	lsls	r3, r3, #1
 800152e:	4413      	add	r3, r2
 8001530:	2207      	movs	r2, #7
 8001532:	fa02 f303 	lsl.w	r3, r2, r3
 8001536:	43da      	mvns	r2, r3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	400a      	ands	r2, r1
 800153e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	6919      	ldr	r1, [r3, #16]
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	689a      	ldr	r2, [r3, #8]
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	b29b      	uxth	r3, r3
 8001550:	4618      	mov	r0, r3
 8001552:	4603      	mov	r3, r0
 8001554:	005b      	lsls	r3, r3, #1
 8001556:	4403      	add	r3, r0
 8001558:	409a      	lsls	r2, r3
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	430a      	orrs	r2, r1
 8001560:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	2b06      	cmp	r3, #6
 8001568:	d824      	bhi.n	80015b4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	685a      	ldr	r2, [r3, #4]
 8001574:	4613      	mov	r3, r2
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	4413      	add	r3, r2
 800157a:	3b05      	subs	r3, #5
 800157c:	221f      	movs	r2, #31
 800157e:	fa02 f303 	lsl.w	r3, r2, r3
 8001582:	43da      	mvns	r2, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	400a      	ands	r2, r1
 800158a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	b29b      	uxth	r3, r3
 8001598:	4618      	mov	r0, r3
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	685a      	ldr	r2, [r3, #4]
 800159e:	4613      	mov	r3, r2
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	4413      	add	r3, r2
 80015a4:	3b05      	subs	r3, #5
 80015a6:	fa00 f203 	lsl.w	r2, r0, r3
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	430a      	orrs	r2, r1
 80015b0:	635a      	str	r2, [r3, #52]	; 0x34
 80015b2:	e04c      	b.n	800164e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	2b0c      	cmp	r3, #12
 80015ba:	d824      	bhi.n	8001606 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	685a      	ldr	r2, [r3, #4]
 80015c6:	4613      	mov	r3, r2
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	4413      	add	r3, r2
 80015cc:	3b23      	subs	r3, #35	; 0x23
 80015ce:	221f      	movs	r2, #31
 80015d0:	fa02 f303 	lsl.w	r3, r2, r3
 80015d4:	43da      	mvns	r2, r3
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	400a      	ands	r2, r1
 80015dc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	b29b      	uxth	r3, r3
 80015ea:	4618      	mov	r0, r3
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	685a      	ldr	r2, [r3, #4]
 80015f0:	4613      	mov	r3, r2
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	4413      	add	r3, r2
 80015f6:	3b23      	subs	r3, #35	; 0x23
 80015f8:	fa00 f203 	lsl.w	r2, r0, r3
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	430a      	orrs	r2, r1
 8001602:	631a      	str	r2, [r3, #48]	; 0x30
 8001604:	e023      	b.n	800164e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	685a      	ldr	r2, [r3, #4]
 8001610:	4613      	mov	r3, r2
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	4413      	add	r3, r2
 8001616:	3b41      	subs	r3, #65	; 0x41
 8001618:	221f      	movs	r2, #31
 800161a:	fa02 f303 	lsl.w	r3, r2, r3
 800161e:	43da      	mvns	r2, r3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	400a      	ands	r2, r1
 8001626:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	b29b      	uxth	r3, r3
 8001634:	4618      	mov	r0, r3
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	685a      	ldr	r2, [r3, #4]
 800163a:	4613      	mov	r3, r2
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	4413      	add	r3, r2
 8001640:	3b41      	subs	r3, #65	; 0x41
 8001642:	fa00 f203 	lsl.w	r2, r0, r3
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	430a      	orrs	r2, r1
 800164c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800164e:	4b29      	ldr	r3, [pc, #164]	; (80016f4 <HAL_ADC_ConfigChannel+0x250>)
 8001650:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a28      	ldr	r2, [pc, #160]	; (80016f8 <HAL_ADC_ConfigChannel+0x254>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d10f      	bne.n	800167c <HAL_ADC_ConfigChannel+0x1d8>
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	2b12      	cmp	r3, #18
 8001662:	d10b      	bne.n	800167c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a1d      	ldr	r2, [pc, #116]	; (80016f8 <HAL_ADC_ConfigChannel+0x254>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d12b      	bne.n	80016de <HAL_ADC_ConfigChannel+0x23a>
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a1c      	ldr	r2, [pc, #112]	; (80016fc <HAL_ADC_ConfigChannel+0x258>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d003      	beq.n	8001698 <HAL_ADC_ConfigChannel+0x1f4>
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	2b11      	cmp	r3, #17
 8001696:	d122      	bne.n	80016de <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a11      	ldr	r2, [pc, #68]	; (80016fc <HAL_ADC_ConfigChannel+0x258>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d111      	bne.n	80016de <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80016ba:	4b11      	ldr	r3, [pc, #68]	; (8001700 <HAL_ADC_ConfigChannel+0x25c>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a11      	ldr	r2, [pc, #68]	; (8001704 <HAL_ADC_ConfigChannel+0x260>)
 80016c0:	fba2 2303 	umull	r2, r3, r2, r3
 80016c4:	0c9a      	lsrs	r2, r3, #18
 80016c6:	4613      	mov	r3, r2
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	4413      	add	r3, r2
 80016cc:	005b      	lsls	r3, r3, #1
 80016ce:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80016d0:	e002      	b.n	80016d8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	3b01      	subs	r3, #1
 80016d6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d1f9      	bne.n	80016d2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2200      	movs	r2, #0
 80016e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80016e6:	2300      	movs	r3, #0
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3714      	adds	r7, #20
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr
 80016f4:	40012300 	.word	0x40012300
 80016f8:	40012000 	.word	0x40012000
 80016fc:	10000012 	.word	0x10000012
 8001700:	20000000 	.word	0x20000000
 8001704:	431bde83 	.word	0x431bde83

08001708 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001708:	b480      	push	{r7}
 800170a:	b085      	sub	sp, #20
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001710:	4b79      	ldr	r3, [pc, #484]	; (80018f8 <ADC_Init+0x1f0>)
 8001712:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	685a      	ldr	r2, [r3, #4]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	431a      	orrs	r2, r3
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	685a      	ldr	r2, [r3, #4]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800173c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	6859      	ldr	r1, [r3, #4]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	691b      	ldr	r3, [r3, #16]
 8001748:	021a      	lsls	r2, r3, #8
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	430a      	orrs	r2, r1
 8001750:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	685a      	ldr	r2, [r3, #4]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001760:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	6859      	ldr	r1, [r3, #4]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	689a      	ldr	r2, [r3, #8]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	430a      	orrs	r2, r1
 8001772:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	689a      	ldr	r2, [r3, #8]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001782:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	6899      	ldr	r1, [r3, #8]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	68da      	ldr	r2, [r3, #12]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	430a      	orrs	r2, r1
 8001794:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800179a:	4a58      	ldr	r2, [pc, #352]	; (80018fc <ADC_Init+0x1f4>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d022      	beq.n	80017e6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	689a      	ldr	r2, [r3, #8]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80017ae:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	6899      	ldr	r1, [r3, #8]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	430a      	orrs	r2, r1
 80017c0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	689a      	ldr	r2, [r3, #8]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80017d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	6899      	ldr	r1, [r3, #8]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	430a      	orrs	r2, r1
 80017e2:	609a      	str	r2, [r3, #8]
 80017e4:	e00f      	b.n	8001806 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	689a      	ldr	r2, [r3, #8]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80017f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	689a      	ldr	r2, [r3, #8]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001804:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	689a      	ldr	r2, [r3, #8]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f022 0202 	bic.w	r2, r2, #2
 8001814:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	6899      	ldr	r1, [r3, #8]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	7e1b      	ldrb	r3, [r3, #24]
 8001820:	005a      	lsls	r2, r3, #1
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	430a      	orrs	r2, r1
 8001828:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d01b      	beq.n	800186c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	685a      	ldr	r2, [r3, #4]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001842:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	685a      	ldr	r2, [r3, #4]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001852:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	6859      	ldr	r1, [r3, #4]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800185e:	3b01      	subs	r3, #1
 8001860:	035a      	lsls	r2, r3, #13
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	430a      	orrs	r2, r1
 8001868:	605a      	str	r2, [r3, #4]
 800186a:	e007      	b.n	800187c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	685a      	ldr	r2, [r3, #4]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800187a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800188a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	69db      	ldr	r3, [r3, #28]
 8001896:	3b01      	subs	r3, #1
 8001898:	051a      	lsls	r2, r3, #20
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	430a      	orrs	r2, r1
 80018a0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	689a      	ldr	r2, [r3, #8]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80018b0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	6899      	ldr	r1, [r3, #8]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80018be:	025a      	lsls	r2, r3, #9
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	430a      	orrs	r2, r1
 80018c6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	689a      	ldr	r2, [r3, #8]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80018d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	6899      	ldr	r1, [r3, #8]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	695b      	ldr	r3, [r3, #20]
 80018e2:	029a      	lsls	r2, r3, #10
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	430a      	orrs	r2, r1
 80018ea:	609a      	str	r2, [r3, #8]
}
 80018ec:	bf00      	nop
 80018ee:	3714      	adds	r7, #20
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr
 80018f8:	40012300 	.word	0x40012300
 80018fc:	0f000001 	.word	0x0f000001

08001900 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001908:	bf00      	nop
 800190a:	370c      	adds	r7, #12
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr

08001914 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001914:	b480      	push	{r7}
 8001916:	b085      	sub	sp, #20
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	f003 0307 	and.w	r3, r3, #7
 8001922:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001924:	4b0c      	ldr	r3, [pc, #48]	; (8001958 <__NVIC_SetPriorityGrouping+0x44>)
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800192a:	68ba      	ldr	r2, [r7, #8]
 800192c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001930:	4013      	ands	r3, r2
 8001932:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800193c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001940:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001944:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001946:	4a04      	ldr	r2, [pc, #16]	; (8001958 <__NVIC_SetPriorityGrouping+0x44>)
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	60d3      	str	r3, [r2, #12]
}
 800194c:	bf00      	nop
 800194e:	3714      	adds	r7, #20
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr
 8001958:	e000ed00 	.word	0xe000ed00

0800195c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001960:	4b04      	ldr	r3, [pc, #16]	; (8001974 <__NVIC_GetPriorityGrouping+0x18>)
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	0a1b      	lsrs	r3, r3, #8
 8001966:	f003 0307 	and.w	r3, r3, #7
}
 800196a:	4618      	mov	r0, r3
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr
 8001974:	e000ed00 	.word	0xe000ed00

08001978 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	4603      	mov	r3, r0
 8001980:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001986:	2b00      	cmp	r3, #0
 8001988:	db0b      	blt.n	80019a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800198a:	79fb      	ldrb	r3, [r7, #7]
 800198c:	f003 021f 	and.w	r2, r3, #31
 8001990:	4907      	ldr	r1, [pc, #28]	; (80019b0 <__NVIC_EnableIRQ+0x38>)
 8001992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001996:	095b      	lsrs	r3, r3, #5
 8001998:	2001      	movs	r0, #1
 800199a:	fa00 f202 	lsl.w	r2, r0, r2
 800199e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019a2:	bf00      	nop
 80019a4:	370c      	adds	r7, #12
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop
 80019b0:	e000e100 	.word	0xe000e100

080019b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	4603      	mov	r3, r0
 80019bc:	6039      	str	r1, [r7, #0]
 80019be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	db0a      	blt.n	80019de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	b2da      	uxtb	r2, r3
 80019cc:	490c      	ldr	r1, [pc, #48]	; (8001a00 <__NVIC_SetPriority+0x4c>)
 80019ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d2:	0112      	lsls	r2, r2, #4
 80019d4:	b2d2      	uxtb	r2, r2
 80019d6:	440b      	add	r3, r1
 80019d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019dc:	e00a      	b.n	80019f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	b2da      	uxtb	r2, r3
 80019e2:	4908      	ldr	r1, [pc, #32]	; (8001a04 <__NVIC_SetPriority+0x50>)
 80019e4:	79fb      	ldrb	r3, [r7, #7]
 80019e6:	f003 030f 	and.w	r3, r3, #15
 80019ea:	3b04      	subs	r3, #4
 80019ec:	0112      	lsls	r2, r2, #4
 80019ee:	b2d2      	uxtb	r2, r2
 80019f0:	440b      	add	r3, r1
 80019f2:	761a      	strb	r2, [r3, #24]
}
 80019f4:	bf00      	nop
 80019f6:	370c      	adds	r7, #12
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr
 8001a00:	e000e100 	.word	0xe000e100
 8001a04:	e000ed00 	.word	0xe000ed00

08001a08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b089      	sub	sp, #36	; 0x24
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	60f8      	str	r0, [r7, #12]
 8001a10:	60b9      	str	r1, [r7, #8]
 8001a12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	f003 0307 	and.w	r3, r3, #7
 8001a1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a1c:	69fb      	ldr	r3, [r7, #28]
 8001a1e:	f1c3 0307 	rsb	r3, r3, #7
 8001a22:	2b04      	cmp	r3, #4
 8001a24:	bf28      	it	cs
 8001a26:	2304      	movcs	r3, #4
 8001a28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	3304      	adds	r3, #4
 8001a2e:	2b06      	cmp	r3, #6
 8001a30:	d902      	bls.n	8001a38 <NVIC_EncodePriority+0x30>
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	3b03      	subs	r3, #3
 8001a36:	e000      	b.n	8001a3a <NVIC_EncodePriority+0x32>
 8001a38:	2300      	movs	r3, #0
 8001a3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a3c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a40:	69bb      	ldr	r3, [r7, #24]
 8001a42:	fa02 f303 	lsl.w	r3, r2, r3
 8001a46:	43da      	mvns	r2, r3
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	401a      	ands	r2, r3
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a50:	f04f 31ff 	mov.w	r1, #4294967295
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	fa01 f303 	lsl.w	r3, r1, r3
 8001a5a:	43d9      	mvns	r1, r3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a60:	4313      	orrs	r3, r2
         );
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3724      	adds	r7, #36	; 0x24
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
	...

08001a70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	3b01      	subs	r3, #1
 8001a7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a80:	d301      	bcc.n	8001a86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a82:	2301      	movs	r3, #1
 8001a84:	e00f      	b.n	8001aa6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a86:	4a0a      	ldr	r2, [pc, #40]	; (8001ab0 <SysTick_Config+0x40>)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	3b01      	subs	r3, #1
 8001a8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a8e:	210f      	movs	r1, #15
 8001a90:	f04f 30ff 	mov.w	r0, #4294967295
 8001a94:	f7ff ff8e 	bl	80019b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a98:	4b05      	ldr	r3, [pc, #20]	; (8001ab0 <SysTick_Config+0x40>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a9e:	4b04      	ldr	r3, [pc, #16]	; (8001ab0 <SysTick_Config+0x40>)
 8001aa0:	2207      	movs	r2, #7
 8001aa2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001aa4:	2300      	movs	r3, #0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	e000e010 	.word	0xe000e010

08001ab4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001abc:	6878      	ldr	r0, [r7, #4]
 8001abe:	f7ff ff29 	bl	8001914 <__NVIC_SetPriorityGrouping>
}
 8001ac2:	bf00      	nop
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}

08001aca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001aca:	b580      	push	{r7, lr}
 8001acc:	b086      	sub	sp, #24
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	60b9      	str	r1, [r7, #8]
 8001ad4:	607a      	str	r2, [r7, #4]
 8001ad6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001adc:	f7ff ff3e 	bl	800195c <__NVIC_GetPriorityGrouping>
 8001ae0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ae2:	687a      	ldr	r2, [r7, #4]
 8001ae4:	68b9      	ldr	r1, [r7, #8]
 8001ae6:	6978      	ldr	r0, [r7, #20]
 8001ae8:	f7ff ff8e 	bl	8001a08 <NVIC_EncodePriority>
 8001aec:	4602      	mov	r2, r0
 8001aee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001af2:	4611      	mov	r1, r2
 8001af4:	4618      	mov	r0, r3
 8001af6:	f7ff ff5d 	bl	80019b4 <__NVIC_SetPriority>
}
 8001afa:	bf00      	nop
 8001afc:	3718      	adds	r7, #24
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}

08001b02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b02:	b580      	push	{r7, lr}
 8001b04:	b082      	sub	sp, #8
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	4603      	mov	r3, r0
 8001b0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b10:	4618      	mov	r0, r3
 8001b12:	f7ff ff31 	bl	8001978 <__NVIC_EnableIRQ>
}
 8001b16:	bf00      	nop
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}

08001b1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b1e:	b580      	push	{r7, lr}
 8001b20:	b082      	sub	sp, #8
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f7ff ffa2 	bl	8001a70 <SysTick_Config>
 8001b2c:	4603      	mov	r3, r0
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3708      	adds	r7, #8
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
	...

08001b38 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b086      	sub	sp, #24
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001b40:	2300      	movs	r3, #0
 8001b42:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001b44:	f7ff fb0c 	bl	8001160 <HAL_GetTick>
 8001b48:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d101      	bne.n	8001b54 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	e099      	b.n	8001c88 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2202      	movs	r2, #2
 8001b58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f022 0201 	bic.w	r2, r2, #1
 8001b72:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b74:	e00f      	b.n	8001b96 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b76:	f7ff faf3 	bl	8001160 <HAL_GetTick>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	1ad3      	subs	r3, r2, r3
 8001b80:	2b05      	cmp	r3, #5
 8001b82:	d908      	bls.n	8001b96 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2220      	movs	r2, #32
 8001b88:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2203      	movs	r2, #3
 8001b8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001b92:	2303      	movs	r3, #3
 8001b94:	e078      	b.n	8001c88 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 0301 	and.w	r3, r3, #1
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d1e8      	bne.n	8001b76 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001bac:	697a      	ldr	r2, [r7, #20]
 8001bae:	4b38      	ldr	r3, [pc, #224]	; (8001c90 <HAL_DMA_Init+0x158>)
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	685a      	ldr	r2, [r3, #4]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001bc2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	691b      	ldr	r3, [r3, #16]
 8001bc8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	699b      	ldr	r3, [r3, #24]
 8001bd4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bda:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6a1b      	ldr	r3, [r3, #32]
 8001be0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001be2:	697a      	ldr	r2, [r7, #20]
 8001be4:	4313      	orrs	r3, r2
 8001be6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bec:	2b04      	cmp	r3, #4
 8001bee:	d107      	bne.n	8001c00 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	697a      	ldr	r2, [r7, #20]
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	697a      	ldr	r2, [r7, #20]
 8001c06:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	695b      	ldr	r3, [r3, #20]
 8001c0e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	f023 0307 	bic.w	r3, r3, #7
 8001c16:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c1c:	697a      	ldr	r2, [r7, #20]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c26:	2b04      	cmp	r3, #4
 8001c28:	d117      	bne.n	8001c5a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c2e:	697a      	ldr	r2, [r7, #20]
 8001c30:	4313      	orrs	r3, r2
 8001c32:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d00e      	beq.n	8001c5a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f000 fa7b 	bl	8002138 <DMA_CheckFifoParam>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d008      	beq.n	8001c5a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2240      	movs	r2, #64	; 0x40
 8001c4c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2201      	movs	r2, #1
 8001c52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001c56:	2301      	movs	r3, #1
 8001c58:	e016      	b.n	8001c88 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	697a      	ldr	r2, [r7, #20]
 8001c60:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f000 fa32 	bl	80020cc <DMA_CalcBaseAndBitshift>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c70:	223f      	movs	r2, #63	; 0x3f
 8001c72:	409a      	lsls	r2, r3
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2201      	movs	r2, #1
 8001c82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001c86:	2300      	movs	r3, #0
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3718      	adds	r7, #24
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	f010803f 	.word	0xf010803f

08001c94 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b084      	sub	sp, #16
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ca0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001ca2:	f7ff fa5d 	bl	8001160 <HAL_GetTick>
 8001ca6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	2b02      	cmp	r3, #2
 8001cb2:	d008      	beq.n	8001cc6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2280      	movs	r2, #128	; 0x80
 8001cb8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e052      	b.n	8001d6c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f022 0216 	bic.w	r2, r2, #22
 8001cd4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	695a      	ldr	r2, [r3, #20]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ce4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d103      	bne.n	8001cf6 <HAL_DMA_Abort+0x62>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d007      	beq.n	8001d06 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f022 0208 	bic.w	r2, r2, #8
 8001d04:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f022 0201 	bic.w	r2, r2, #1
 8001d14:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d16:	e013      	b.n	8001d40 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d18:	f7ff fa22 	bl	8001160 <HAL_GetTick>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	2b05      	cmp	r3, #5
 8001d24:	d90c      	bls.n	8001d40 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2220      	movs	r2, #32
 8001d2a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2203      	movs	r2, #3
 8001d30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2200      	movs	r2, #0
 8001d38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	e015      	b.n	8001d6c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0301 	and.w	r3, r3, #1
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d1e4      	bne.n	8001d18 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d52:	223f      	movs	r2, #63	; 0x3f
 8001d54:	409a      	lsls	r2, r3
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2200      	movs	r2, #0
 8001d66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001d6a:	2300      	movs	r3, #0
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3710      	adds	r7, #16
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}

08001d74 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	2b02      	cmp	r3, #2
 8001d86:	d004      	beq.n	8001d92 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2280      	movs	r2, #128	; 0x80
 8001d8c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e00c      	b.n	8001dac <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2205      	movs	r2, #5
 8001d96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f022 0201 	bic.w	r2, r2, #1
 8001da8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001daa:	2300      	movs	r3, #0
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b086      	sub	sp, #24
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001dc4:	4b8e      	ldr	r3, [pc, #568]	; (8002000 <HAL_DMA_IRQHandler+0x248>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a8e      	ldr	r2, [pc, #568]	; (8002004 <HAL_DMA_IRQHandler+0x24c>)
 8001dca:	fba2 2303 	umull	r2, r3, r2, r3
 8001dce:	0a9b      	lsrs	r3, r3, #10
 8001dd0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dd6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001de2:	2208      	movs	r2, #8
 8001de4:	409a      	lsls	r2, r3
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	4013      	ands	r3, r2
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d01a      	beq.n	8001e24 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 0304 	and.w	r3, r3, #4
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d013      	beq.n	8001e24 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f022 0204 	bic.w	r2, r2, #4
 8001e0a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e10:	2208      	movs	r2, #8
 8001e12:	409a      	lsls	r2, r3
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e1c:	f043 0201 	orr.w	r2, r3, #1
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e28:	2201      	movs	r2, #1
 8001e2a:	409a      	lsls	r2, r3
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	4013      	ands	r3, r2
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d012      	beq.n	8001e5a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	695b      	ldr	r3, [r3, #20]
 8001e3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d00b      	beq.n	8001e5a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e46:	2201      	movs	r2, #1
 8001e48:	409a      	lsls	r2, r3
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e52:	f043 0202 	orr.w	r2, r3, #2
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e5e:	2204      	movs	r2, #4
 8001e60:	409a      	lsls	r2, r3
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	4013      	ands	r3, r2
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d012      	beq.n	8001e90 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 0302 	and.w	r3, r3, #2
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d00b      	beq.n	8001e90 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e7c:	2204      	movs	r2, #4
 8001e7e:	409a      	lsls	r2, r3
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e88:	f043 0204 	orr.w	r2, r3, #4
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e94:	2210      	movs	r2, #16
 8001e96:	409a      	lsls	r2, r3
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d043      	beq.n	8001f28 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 0308 	and.w	r3, r3, #8
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d03c      	beq.n	8001f28 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eb2:	2210      	movs	r2, #16
 8001eb4:	409a      	lsls	r2, r3
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d018      	beq.n	8001efa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d108      	bne.n	8001ee8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d024      	beq.n	8001f28 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	4798      	blx	r3
 8001ee6:	e01f      	b.n	8001f28 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d01b      	beq.n	8001f28 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	4798      	blx	r3
 8001ef8:	e016      	b.n	8001f28 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d107      	bne.n	8001f18 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f022 0208 	bic.w	r2, r2, #8
 8001f16:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d003      	beq.n	8001f28 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f2c:	2220      	movs	r2, #32
 8001f2e:	409a      	lsls	r2, r3
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	4013      	ands	r3, r2
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	f000 808f 	beq.w	8002058 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 0310 	and.w	r3, r3, #16
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	f000 8087 	beq.w	8002058 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f4e:	2220      	movs	r2, #32
 8001f50:	409a      	lsls	r2, r3
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	2b05      	cmp	r3, #5
 8001f60:	d136      	bne.n	8001fd0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f022 0216 	bic.w	r2, r2, #22
 8001f70:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	695a      	ldr	r2, [r3, #20]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f80:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d103      	bne.n	8001f92 <HAL_DMA_IRQHandler+0x1da>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d007      	beq.n	8001fa2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f022 0208 	bic.w	r2, r2, #8
 8001fa0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fa6:	223f      	movs	r2, #63	; 0x3f
 8001fa8:	409a      	lsls	r2, r3
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d07e      	beq.n	80020c4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	4798      	blx	r3
        }
        return;
 8001fce:	e079      	b.n	80020c4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d01d      	beq.n	800201a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d10d      	bne.n	8002008 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d031      	beq.n	8002058 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	4798      	blx	r3
 8001ffc:	e02c      	b.n	8002058 <HAL_DMA_IRQHandler+0x2a0>
 8001ffe:	bf00      	nop
 8002000:	20000000 	.word	0x20000000
 8002004:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800200c:	2b00      	cmp	r3, #0
 800200e:	d023      	beq.n	8002058 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	4798      	blx	r3
 8002018:	e01e      	b.n	8002058 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002024:	2b00      	cmp	r3, #0
 8002026:	d10f      	bne.n	8002048 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f022 0210 	bic.w	r2, r2, #16
 8002036:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2201      	movs	r2, #1
 800203c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2200      	movs	r2, #0
 8002044:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800204c:	2b00      	cmp	r3, #0
 800204e:	d003      	beq.n	8002058 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800205c:	2b00      	cmp	r3, #0
 800205e:	d032      	beq.n	80020c6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002064:	f003 0301 	and.w	r3, r3, #1
 8002068:	2b00      	cmp	r3, #0
 800206a:	d022      	beq.n	80020b2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2205      	movs	r2, #5
 8002070:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f022 0201 	bic.w	r2, r2, #1
 8002082:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	3301      	adds	r3, #1
 8002088:	60bb      	str	r3, [r7, #8]
 800208a:	697a      	ldr	r2, [r7, #20]
 800208c:	429a      	cmp	r2, r3
 800208e:	d307      	bcc.n	80020a0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0301 	and.w	r3, r3, #1
 800209a:	2b00      	cmp	r3, #0
 800209c:	d1f2      	bne.n	8002084 <HAL_DMA_IRQHandler+0x2cc>
 800209e:	e000      	b.n	80020a2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80020a0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2201      	movs	r2, #1
 80020a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2200      	movs	r2, #0
 80020ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d005      	beq.n	80020c6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	4798      	blx	r3
 80020c2:	e000      	b.n	80020c6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80020c4:	bf00      	nop
    }
  }
}
 80020c6:	3718      	adds	r7, #24
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}

080020cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b085      	sub	sp, #20
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	3b10      	subs	r3, #16
 80020dc:	4a14      	ldr	r2, [pc, #80]	; (8002130 <DMA_CalcBaseAndBitshift+0x64>)
 80020de:	fba2 2303 	umull	r2, r3, r2, r3
 80020e2:	091b      	lsrs	r3, r3, #4
 80020e4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80020e6:	4a13      	ldr	r2, [pc, #76]	; (8002134 <DMA_CalcBaseAndBitshift+0x68>)
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	4413      	add	r3, r2
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	461a      	mov	r2, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	2b03      	cmp	r3, #3
 80020f8:	d909      	bls.n	800210e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002102:	f023 0303 	bic.w	r3, r3, #3
 8002106:	1d1a      	adds	r2, r3, #4
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	659a      	str	r2, [r3, #88]	; 0x58
 800210c:	e007      	b.n	800211e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002116:	f023 0303 	bic.w	r3, r3, #3
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002122:	4618      	mov	r0, r3
 8002124:	3714      	adds	r7, #20
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	aaaaaaab 	.word	0xaaaaaaab
 8002134:	080054c8 	.word	0x080054c8

08002138 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002138:	b480      	push	{r7}
 800213a:	b085      	sub	sp, #20
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002140:	2300      	movs	r3, #0
 8002142:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002148:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	699b      	ldr	r3, [r3, #24]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d11f      	bne.n	8002192 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	2b03      	cmp	r3, #3
 8002156:	d856      	bhi.n	8002206 <DMA_CheckFifoParam+0xce>
 8002158:	a201      	add	r2, pc, #4	; (adr r2, 8002160 <DMA_CheckFifoParam+0x28>)
 800215a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800215e:	bf00      	nop
 8002160:	08002171 	.word	0x08002171
 8002164:	08002183 	.word	0x08002183
 8002168:	08002171 	.word	0x08002171
 800216c:	08002207 	.word	0x08002207
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002174:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002178:	2b00      	cmp	r3, #0
 800217a:	d046      	beq.n	800220a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002180:	e043      	b.n	800220a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002186:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800218a:	d140      	bne.n	800220e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002190:	e03d      	b.n	800220e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	699b      	ldr	r3, [r3, #24]
 8002196:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800219a:	d121      	bne.n	80021e0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	2b03      	cmp	r3, #3
 80021a0:	d837      	bhi.n	8002212 <DMA_CheckFifoParam+0xda>
 80021a2:	a201      	add	r2, pc, #4	; (adr r2, 80021a8 <DMA_CheckFifoParam+0x70>)
 80021a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021a8:	080021b9 	.word	0x080021b9
 80021ac:	080021bf 	.word	0x080021bf
 80021b0:	080021b9 	.word	0x080021b9
 80021b4:	080021d1 	.word	0x080021d1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	73fb      	strb	r3, [r7, #15]
      break;
 80021bc:	e030      	b.n	8002220 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d025      	beq.n	8002216 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021ce:	e022      	b.n	8002216 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80021d8:	d11f      	bne.n	800221a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80021de:	e01c      	b.n	800221a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d903      	bls.n	80021ee <DMA_CheckFifoParam+0xb6>
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	2b03      	cmp	r3, #3
 80021ea:	d003      	beq.n	80021f4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80021ec:	e018      	b.n	8002220 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	73fb      	strb	r3, [r7, #15]
      break;
 80021f2:	e015      	b.n	8002220 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d00e      	beq.n	800221e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	73fb      	strb	r3, [r7, #15]
      break;
 8002204:	e00b      	b.n	800221e <DMA_CheckFifoParam+0xe6>
      break;
 8002206:	bf00      	nop
 8002208:	e00a      	b.n	8002220 <DMA_CheckFifoParam+0xe8>
      break;
 800220a:	bf00      	nop
 800220c:	e008      	b.n	8002220 <DMA_CheckFifoParam+0xe8>
      break;
 800220e:	bf00      	nop
 8002210:	e006      	b.n	8002220 <DMA_CheckFifoParam+0xe8>
      break;
 8002212:	bf00      	nop
 8002214:	e004      	b.n	8002220 <DMA_CheckFifoParam+0xe8>
      break;
 8002216:	bf00      	nop
 8002218:	e002      	b.n	8002220 <DMA_CheckFifoParam+0xe8>
      break;   
 800221a:	bf00      	nop
 800221c:	e000      	b.n	8002220 <DMA_CheckFifoParam+0xe8>
      break;
 800221e:	bf00      	nop
    }
  } 
  
  return status; 
 8002220:	7bfb      	ldrb	r3, [r7, #15]
}
 8002222:	4618      	mov	r0, r3
 8002224:	3714      	adds	r7, #20
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop

08002230 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002230:	b480      	push	{r7}
 8002232:	b089      	sub	sp, #36	; 0x24
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800223a:	2300      	movs	r3, #0
 800223c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800223e:	2300      	movs	r3, #0
 8002240:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002242:	2300      	movs	r3, #0
 8002244:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002246:	2300      	movs	r3, #0
 8002248:	61fb      	str	r3, [r7, #28]
 800224a:	e177      	b.n	800253c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800224c:	2201      	movs	r2, #1
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	fa02 f303 	lsl.w	r3, r2, r3
 8002254:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	697a      	ldr	r2, [r7, #20]
 800225c:	4013      	ands	r3, r2
 800225e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002260:	693a      	ldr	r2, [r7, #16]
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	429a      	cmp	r2, r3
 8002266:	f040 8166 	bne.w	8002536 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	f003 0303 	and.w	r3, r3, #3
 8002272:	2b01      	cmp	r3, #1
 8002274:	d005      	beq.n	8002282 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800227e:	2b02      	cmp	r3, #2
 8002280:	d130      	bne.n	80022e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	005b      	lsls	r3, r3, #1
 800228c:	2203      	movs	r2, #3
 800228e:	fa02 f303 	lsl.w	r3, r2, r3
 8002292:	43db      	mvns	r3, r3
 8002294:	69ba      	ldr	r2, [r7, #24]
 8002296:	4013      	ands	r3, r2
 8002298:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	68da      	ldr	r2, [r3, #12]
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	005b      	lsls	r3, r3, #1
 80022a2:	fa02 f303 	lsl.w	r3, r2, r3
 80022a6:	69ba      	ldr	r2, [r7, #24]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	69ba      	ldr	r2, [r7, #24]
 80022b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022b8:	2201      	movs	r2, #1
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	fa02 f303 	lsl.w	r3, r2, r3
 80022c0:	43db      	mvns	r3, r3
 80022c2:	69ba      	ldr	r2, [r7, #24]
 80022c4:	4013      	ands	r3, r2
 80022c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	091b      	lsrs	r3, r3, #4
 80022ce:	f003 0201 	and.w	r2, r3, #1
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	fa02 f303 	lsl.w	r3, r2, r3
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	4313      	orrs	r3, r2
 80022dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	69ba      	ldr	r2, [r7, #24]
 80022e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f003 0303 	and.w	r3, r3, #3
 80022ec:	2b03      	cmp	r3, #3
 80022ee:	d017      	beq.n	8002320 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	005b      	lsls	r3, r3, #1
 80022fa:	2203      	movs	r2, #3
 80022fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002300:	43db      	mvns	r3, r3
 8002302:	69ba      	ldr	r2, [r7, #24]
 8002304:	4013      	ands	r3, r2
 8002306:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	689a      	ldr	r2, [r3, #8]
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	005b      	lsls	r3, r3, #1
 8002310:	fa02 f303 	lsl.w	r3, r2, r3
 8002314:	69ba      	ldr	r2, [r7, #24]
 8002316:	4313      	orrs	r3, r2
 8002318:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	69ba      	ldr	r2, [r7, #24]
 800231e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f003 0303 	and.w	r3, r3, #3
 8002328:	2b02      	cmp	r3, #2
 800232a:	d123      	bne.n	8002374 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	08da      	lsrs	r2, r3, #3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	3208      	adds	r2, #8
 8002334:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002338:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	f003 0307 	and.w	r3, r3, #7
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	220f      	movs	r2, #15
 8002344:	fa02 f303 	lsl.w	r3, r2, r3
 8002348:	43db      	mvns	r3, r3
 800234a:	69ba      	ldr	r2, [r7, #24]
 800234c:	4013      	ands	r3, r2
 800234e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	691a      	ldr	r2, [r3, #16]
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	f003 0307 	and.w	r3, r3, #7
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	fa02 f303 	lsl.w	r3, r2, r3
 8002360:	69ba      	ldr	r2, [r7, #24]
 8002362:	4313      	orrs	r3, r2
 8002364:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	08da      	lsrs	r2, r3, #3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	3208      	adds	r2, #8
 800236e:	69b9      	ldr	r1, [r7, #24]
 8002370:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	005b      	lsls	r3, r3, #1
 800237e:	2203      	movs	r2, #3
 8002380:	fa02 f303 	lsl.w	r3, r2, r3
 8002384:	43db      	mvns	r3, r3
 8002386:	69ba      	ldr	r2, [r7, #24]
 8002388:	4013      	ands	r3, r2
 800238a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f003 0203 	and.w	r2, r3, #3
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	005b      	lsls	r3, r3, #1
 8002398:	fa02 f303 	lsl.w	r3, r2, r3
 800239c:	69ba      	ldr	r2, [r7, #24]
 800239e:	4313      	orrs	r3, r2
 80023a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	69ba      	ldr	r2, [r7, #24]
 80023a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	f000 80c0 	beq.w	8002536 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023b6:	2300      	movs	r3, #0
 80023b8:	60fb      	str	r3, [r7, #12]
 80023ba:	4b66      	ldr	r3, [pc, #408]	; (8002554 <HAL_GPIO_Init+0x324>)
 80023bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023be:	4a65      	ldr	r2, [pc, #404]	; (8002554 <HAL_GPIO_Init+0x324>)
 80023c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023c4:	6453      	str	r3, [r2, #68]	; 0x44
 80023c6:	4b63      	ldr	r3, [pc, #396]	; (8002554 <HAL_GPIO_Init+0x324>)
 80023c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023ce:	60fb      	str	r3, [r7, #12]
 80023d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023d2:	4a61      	ldr	r2, [pc, #388]	; (8002558 <HAL_GPIO_Init+0x328>)
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	089b      	lsrs	r3, r3, #2
 80023d8:	3302      	adds	r3, #2
 80023da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	f003 0303 	and.w	r3, r3, #3
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	220f      	movs	r2, #15
 80023ea:	fa02 f303 	lsl.w	r3, r2, r3
 80023ee:	43db      	mvns	r3, r3
 80023f0:	69ba      	ldr	r2, [r7, #24]
 80023f2:	4013      	ands	r3, r2
 80023f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4a58      	ldr	r2, [pc, #352]	; (800255c <HAL_GPIO_Init+0x32c>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d037      	beq.n	800246e <HAL_GPIO_Init+0x23e>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a57      	ldr	r2, [pc, #348]	; (8002560 <HAL_GPIO_Init+0x330>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d031      	beq.n	800246a <HAL_GPIO_Init+0x23a>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4a56      	ldr	r2, [pc, #344]	; (8002564 <HAL_GPIO_Init+0x334>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d02b      	beq.n	8002466 <HAL_GPIO_Init+0x236>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4a55      	ldr	r2, [pc, #340]	; (8002568 <HAL_GPIO_Init+0x338>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d025      	beq.n	8002462 <HAL_GPIO_Init+0x232>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4a54      	ldr	r2, [pc, #336]	; (800256c <HAL_GPIO_Init+0x33c>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d01f      	beq.n	800245e <HAL_GPIO_Init+0x22e>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4a53      	ldr	r2, [pc, #332]	; (8002570 <HAL_GPIO_Init+0x340>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d019      	beq.n	800245a <HAL_GPIO_Init+0x22a>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4a52      	ldr	r2, [pc, #328]	; (8002574 <HAL_GPIO_Init+0x344>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d013      	beq.n	8002456 <HAL_GPIO_Init+0x226>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4a51      	ldr	r2, [pc, #324]	; (8002578 <HAL_GPIO_Init+0x348>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d00d      	beq.n	8002452 <HAL_GPIO_Init+0x222>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4a50      	ldr	r2, [pc, #320]	; (800257c <HAL_GPIO_Init+0x34c>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d007      	beq.n	800244e <HAL_GPIO_Init+0x21e>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4a4f      	ldr	r2, [pc, #316]	; (8002580 <HAL_GPIO_Init+0x350>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d101      	bne.n	800244a <HAL_GPIO_Init+0x21a>
 8002446:	2309      	movs	r3, #9
 8002448:	e012      	b.n	8002470 <HAL_GPIO_Init+0x240>
 800244a:	230a      	movs	r3, #10
 800244c:	e010      	b.n	8002470 <HAL_GPIO_Init+0x240>
 800244e:	2308      	movs	r3, #8
 8002450:	e00e      	b.n	8002470 <HAL_GPIO_Init+0x240>
 8002452:	2307      	movs	r3, #7
 8002454:	e00c      	b.n	8002470 <HAL_GPIO_Init+0x240>
 8002456:	2306      	movs	r3, #6
 8002458:	e00a      	b.n	8002470 <HAL_GPIO_Init+0x240>
 800245a:	2305      	movs	r3, #5
 800245c:	e008      	b.n	8002470 <HAL_GPIO_Init+0x240>
 800245e:	2304      	movs	r3, #4
 8002460:	e006      	b.n	8002470 <HAL_GPIO_Init+0x240>
 8002462:	2303      	movs	r3, #3
 8002464:	e004      	b.n	8002470 <HAL_GPIO_Init+0x240>
 8002466:	2302      	movs	r3, #2
 8002468:	e002      	b.n	8002470 <HAL_GPIO_Init+0x240>
 800246a:	2301      	movs	r3, #1
 800246c:	e000      	b.n	8002470 <HAL_GPIO_Init+0x240>
 800246e:	2300      	movs	r3, #0
 8002470:	69fa      	ldr	r2, [r7, #28]
 8002472:	f002 0203 	and.w	r2, r2, #3
 8002476:	0092      	lsls	r2, r2, #2
 8002478:	4093      	lsls	r3, r2
 800247a:	69ba      	ldr	r2, [r7, #24]
 800247c:	4313      	orrs	r3, r2
 800247e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002480:	4935      	ldr	r1, [pc, #212]	; (8002558 <HAL_GPIO_Init+0x328>)
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	089b      	lsrs	r3, r3, #2
 8002486:	3302      	adds	r3, #2
 8002488:	69ba      	ldr	r2, [r7, #24]
 800248a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800248e:	4b3d      	ldr	r3, [pc, #244]	; (8002584 <HAL_GPIO_Init+0x354>)
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	43db      	mvns	r3, r3
 8002498:	69ba      	ldr	r2, [r7, #24]
 800249a:	4013      	ands	r3, r2
 800249c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d003      	beq.n	80024b2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80024aa:	69ba      	ldr	r2, [r7, #24]
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024b2:	4a34      	ldr	r2, [pc, #208]	; (8002584 <HAL_GPIO_Init+0x354>)
 80024b4:	69bb      	ldr	r3, [r7, #24]
 80024b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024b8:	4b32      	ldr	r3, [pc, #200]	; (8002584 <HAL_GPIO_Init+0x354>)
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	43db      	mvns	r3, r3
 80024c2:	69ba      	ldr	r2, [r7, #24]
 80024c4:	4013      	ands	r3, r2
 80024c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d003      	beq.n	80024dc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80024d4:	69ba      	ldr	r2, [r7, #24]
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	4313      	orrs	r3, r2
 80024da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024dc:	4a29      	ldr	r2, [pc, #164]	; (8002584 <HAL_GPIO_Init+0x354>)
 80024de:	69bb      	ldr	r3, [r7, #24]
 80024e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024e2:	4b28      	ldr	r3, [pc, #160]	; (8002584 <HAL_GPIO_Init+0x354>)
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	43db      	mvns	r3, r3
 80024ec:	69ba      	ldr	r2, [r7, #24]
 80024ee:	4013      	ands	r3, r2
 80024f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d003      	beq.n	8002506 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80024fe:	69ba      	ldr	r2, [r7, #24]
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	4313      	orrs	r3, r2
 8002504:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002506:	4a1f      	ldr	r2, [pc, #124]	; (8002584 <HAL_GPIO_Init+0x354>)
 8002508:	69bb      	ldr	r3, [r7, #24]
 800250a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800250c:	4b1d      	ldr	r3, [pc, #116]	; (8002584 <HAL_GPIO_Init+0x354>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	43db      	mvns	r3, r3
 8002516:	69ba      	ldr	r2, [r7, #24]
 8002518:	4013      	ands	r3, r2
 800251a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002524:	2b00      	cmp	r3, #0
 8002526:	d003      	beq.n	8002530 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002528:	69ba      	ldr	r2, [r7, #24]
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	4313      	orrs	r3, r2
 800252e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002530:	4a14      	ldr	r2, [pc, #80]	; (8002584 <HAL_GPIO_Init+0x354>)
 8002532:	69bb      	ldr	r3, [r7, #24]
 8002534:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	3301      	adds	r3, #1
 800253a:	61fb      	str	r3, [r7, #28]
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	2b0f      	cmp	r3, #15
 8002540:	f67f ae84 	bls.w	800224c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002544:	bf00      	nop
 8002546:	bf00      	nop
 8002548:	3724      	adds	r7, #36	; 0x24
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr
 8002552:	bf00      	nop
 8002554:	40023800 	.word	0x40023800
 8002558:	40013800 	.word	0x40013800
 800255c:	40020000 	.word	0x40020000
 8002560:	40020400 	.word	0x40020400
 8002564:	40020800 	.word	0x40020800
 8002568:	40020c00 	.word	0x40020c00
 800256c:	40021000 	.word	0x40021000
 8002570:	40021400 	.word	0x40021400
 8002574:	40021800 	.word	0x40021800
 8002578:	40021c00 	.word	0x40021c00
 800257c:	40022000 	.word	0x40022000
 8002580:	40022400 	.word	0x40022400
 8002584:	40013c00 	.word	0x40013c00

08002588 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	460b      	mov	r3, r1
 8002592:	807b      	strh	r3, [r7, #2]
 8002594:	4613      	mov	r3, r2
 8002596:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002598:	787b      	ldrb	r3, [r7, #1]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d003      	beq.n	80025a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800259e:	887a      	ldrh	r2, [r7, #2]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80025a4:	e003      	b.n	80025ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80025a6:	887b      	ldrh	r3, [r7, #2]
 80025a8:	041a      	lsls	r2, r3, #16
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	619a      	str	r2, [r3, #24]
}
 80025ae:	bf00      	nop
 80025b0:	370c      	adds	r7, #12
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr
	...

080025bc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80025c2:	2300      	movs	r3, #0
 80025c4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80025c6:	2300      	movs	r3, #0
 80025c8:	603b      	str	r3, [r7, #0]
 80025ca:	4b20      	ldr	r3, [pc, #128]	; (800264c <HAL_PWREx_EnableOverDrive+0x90>)
 80025cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ce:	4a1f      	ldr	r2, [pc, #124]	; (800264c <HAL_PWREx_EnableOverDrive+0x90>)
 80025d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025d4:	6413      	str	r3, [r2, #64]	; 0x40
 80025d6:	4b1d      	ldr	r3, [pc, #116]	; (800264c <HAL_PWREx_EnableOverDrive+0x90>)
 80025d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025de:	603b      	str	r3, [r7, #0]
 80025e0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80025e2:	4b1b      	ldr	r3, [pc, #108]	; (8002650 <HAL_PWREx_EnableOverDrive+0x94>)
 80025e4:	2201      	movs	r2, #1
 80025e6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80025e8:	f7fe fdba 	bl	8001160 <HAL_GetTick>
 80025ec:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80025ee:	e009      	b.n	8002604 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80025f0:	f7fe fdb6 	bl	8001160 <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80025fe:	d901      	bls.n	8002604 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002600:	2303      	movs	r3, #3
 8002602:	e01f      	b.n	8002644 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002604:	4b13      	ldr	r3, [pc, #76]	; (8002654 <HAL_PWREx_EnableOverDrive+0x98>)
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800260c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002610:	d1ee      	bne.n	80025f0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002612:	4b11      	ldr	r3, [pc, #68]	; (8002658 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002614:	2201      	movs	r2, #1
 8002616:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002618:	f7fe fda2 	bl	8001160 <HAL_GetTick>
 800261c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800261e:	e009      	b.n	8002634 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002620:	f7fe fd9e 	bl	8001160 <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800262e:	d901      	bls.n	8002634 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002630:	2303      	movs	r3, #3
 8002632:	e007      	b.n	8002644 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002634:	4b07      	ldr	r3, [pc, #28]	; (8002654 <HAL_PWREx_EnableOverDrive+0x98>)
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800263c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002640:	d1ee      	bne.n	8002620 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002642:	2300      	movs	r3, #0
}
 8002644:	4618      	mov	r0, r3
 8002646:	3708      	adds	r7, #8
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}
 800264c:	40023800 	.word	0x40023800
 8002650:	420e0040 	.word	0x420e0040
 8002654:	40007000 	.word	0x40007000
 8002658:	420e0044 	.word	0x420e0044

0800265c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b086      	sub	sp, #24
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d101      	bne.n	800266e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e267      	b.n	8002b3e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0301 	and.w	r3, r3, #1
 8002676:	2b00      	cmp	r3, #0
 8002678:	d075      	beq.n	8002766 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800267a:	4b88      	ldr	r3, [pc, #544]	; (800289c <HAL_RCC_OscConfig+0x240>)
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	f003 030c 	and.w	r3, r3, #12
 8002682:	2b04      	cmp	r3, #4
 8002684:	d00c      	beq.n	80026a0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002686:	4b85      	ldr	r3, [pc, #532]	; (800289c <HAL_RCC_OscConfig+0x240>)
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800268e:	2b08      	cmp	r3, #8
 8002690:	d112      	bne.n	80026b8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002692:	4b82      	ldr	r3, [pc, #520]	; (800289c <HAL_RCC_OscConfig+0x240>)
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800269a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800269e:	d10b      	bne.n	80026b8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026a0:	4b7e      	ldr	r3, [pc, #504]	; (800289c <HAL_RCC_OscConfig+0x240>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d05b      	beq.n	8002764 <HAL_RCC_OscConfig+0x108>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d157      	bne.n	8002764 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e242      	b.n	8002b3e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026c0:	d106      	bne.n	80026d0 <HAL_RCC_OscConfig+0x74>
 80026c2:	4b76      	ldr	r3, [pc, #472]	; (800289c <HAL_RCC_OscConfig+0x240>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a75      	ldr	r2, [pc, #468]	; (800289c <HAL_RCC_OscConfig+0x240>)
 80026c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026cc:	6013      	str	r3, [r2, #0]
 80026ce:	e01d      	b.n	800270c <HAL_RCC_OscConfig+0xb0>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026d8:	d10c      	bne.n	80026f4 <HAL_RCC_OscConfig+0x98>
 80026da:	4b70      	ldr	r3, [pc, #448]	; (800289c <HAL_RCC_OscConfig+0x240>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a6f      	ldr	r2, [pc, #444]	; (800289c <HAL_RCC_OscConfig+0x240>)
 80026e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026e4:	6013      	str	r3, [r2, #0]
 80026e6:	4b6d      	ldr	r3, [pc, #436]	; (800289c <HAL_RCC_OscConfig+0x240>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a6c      	ldr	r2, [pc, #432]	; (800289c <HAL_RCC_OscConfig+0x240>)
 80026ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026f0:	6013      	str	r3, [r2, #0]
 80026f2:	e00b      	b.n	800270c <HAL_RCC_OscConfig+0xb0>
 80026f4:	4b69      	ldr	r3, [pc, #420]	; (800289c <HAL_RCC_OscConfig+0x240>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a68      	ldr	r2, [pc, #416]	; (800289c <HAL_RCC_OscConfig+0x240>)
 80026fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026fe:	6013      	str	r3, [r2, #0]
 8002700:	4b66      	ldr	r3, [pc, #408]	; (800289c <HAL_RCC_OscConfig+0x240>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a65      	ldr	r2, [pc, #404]	; (800289c <HAL_RCC_OscConfig+0x240>)
 8002706:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800270a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d013      	beq.n	800273c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002714:	f7fe fd24 	bl	8001160 <HAL_GetTick>
 8002718:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800271a:	e008      	b.n	800272e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800271c:	f7fe fd20 	bl	8001160 <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	2b64      	cmp	r3, #100	; 0x64
 8002728:	d901      	bls.n	800272e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e207      	b.n	8002b3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800272e:	4b5b      	ldr	r3, [pc, #364]	; (800289c <HAL_RCC_OscConfig+0x240>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d0f0      	beq.n	800271c <HAL_RCC_OscConfig+0xc0>
 800273a:	e014      	b.n	8002766 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800273c:	f7fe fd10 	bl	8001160 <HAL_GetTick>
 8002740:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002742:	e008      	b.n	8002756 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002744:	f7fe fd0c 	bl	8001160 <HAL_GetTick>
 8002748:	4602      	mov	r2, r0
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	2b64      	cmp	r3, #100	; 0x64
 8002750:	d901      	bls.n	8002756 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	e1f3      	b.n	8002b3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002756:	4b51      	ldr	r3, [pc, #324]	; (800289c <HAL_RCC_OscConfig+0x240>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d1f0      	bne.n	8002744 <HAL_RCC_OscConfig+0xe8>
 8002762:	e000      	b.n	8002766 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002764:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 0302 	and.w	r3, r3, #2
 800276e:	2b00      	cmp	r3, #0
 8002770:	d063      	beq.n	800283a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002772:	4b4a      	ldr	r3, [pc, #296]	; (800289c <HAL_RCC_OscConfig+0x240>)
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	f003 030c 	and.w	r3, r3, #12
 800277a:	2b00      	cmp	r3, #0
 800277c:	d00b      	beq.n	8002796 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800277e:	4b47      	ldr	r3, [pc, #284]	; (800289c <HAL_RCC_OscConfig+0x240>)
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002786:	2b08      	cmp	r3, #8
 8002788:	d11c      	bne.n	80027c4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800278a:	4b44      	ldr	r3, [pc, #272]	; (800289c <HAL_RCC_OscConfig+0x240>)
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d116      	bne.n	80027c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002796:	4b41      	ldr	r3, [pc, #260]	; (800289c <HAL_RCC_OscConfig+0x240>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0302 	and.w	r3, r3, #2
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d005      	beq.n	80027ae <HAL_RCC_OscConfig+0x152>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d001      	beq.n	80027ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e1c7      	b.n	8002b3e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027ae:	4b3b      	ldr	r3, [pc, #236]	; (800289c <HAL_RCC_OscConfig+0x240>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	691b      	ldr	r3, [r3, #16]
 80027ba:	00db      	lsls	r3, r3, #3
 80027bc:	4937      	ldr	r1, [pc, #220]	; (800289c <HAL_RCC_OscConfig+0x240>)
 80027be:	4313      	orrs	r3, r2
 80027c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027c2:	e03a      	b.n	800283a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d020      	beq.n	800280e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027cc:	4b34      	ldr	r3, [pc, #208]	; (80028a0 <HAL_RCC_OscConfig+0x244>)
 80027ce:	2201      	movs	r2, #1
 80027d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d2:	f7fe fcc5 	bl	8001160 <HAL_GetTick>
 80027d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027d8:	e008      	b.n	80027ec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027da:	f7fe fcc1 	bl	8001160 <HAL_GetTick>
 80027de:	4602      	mov	r2, r0
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	d901      	bls.n	80027ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80027e8:	2303      	movs	r3, #3
 80027ea:	e1a8      	b.n	8002b3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027ec:	4b2b      	ldr	r3, [pc, #172]	; (800289c <HAL_RCC_OscConfig+0x240>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 0302 	and.w	r3, r3, #2
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d0f0      	beq.n	80027da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027f8:	4b28      	ldr	r3, [pc, #160]	; (800289c <HAL_RCC_OscConfig+0x240>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	691b      	ldr	r3, [r3, #16]
 8002804:	00db      	lsls	r3, r3, #3
 8002806:	4925      	ldr	r1, [pc, #148]	; (800289c <HAL_RCC_OscConfig+0x240>)
 8002808:	4313      	orrs	r3, r2
 800280a:	600b      	str	r3, [r1, #0]
 800280c:	e015      	b.n	800283a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800280e:	4b24      	ldr	r3, [pc, #144]	; (80028a0 <HAL_RCC_OscConfig+0x244>)
 8002810:	2200      	movs	r2, #0
 8002812:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002814:	f7fe fca4 	bl	8001160 <HAL_GetTick>
 8002818:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800281a:	e008      	b.n	800282e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800281c:	f7fe fca0 	bl	8001160 <HAL_GetTick>
 8002820:	4602      	mov	r2, r0
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	2b02      	cmp	r3, #2
 8002828:	d901      	bls.n	800282e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	e187      	b.n	8002b3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800282e:	4b1b      	ldr	r3, [pc, #108]	; (800289c <HAL_RCC_OscConfig+0x240>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0302 	and.w	r3, r3, #2
 8002836:	2b00      	cmp	r3, #0
 8002838:	d1f0      	bne.n	800281c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0308 	and.w	r3, r3, #8
 8002842:	2b00      	cmp	r3, #0
 8002844:	d036      	beq.n	80028b4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	695b      	ldr	r3, [r3, #20]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d016      	beq.n	800287c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800284e:	4b15      	ldr	r3, [pc, #84]	; (80028a4 <HAL_RCC_OscConfig+0x248>)
 8002850:	2201      	movs	r2, #1
 8002852:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002854:	f7fe fc84 	bl	8001160 <HAL_GetTick>
 8002858:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800285a:	e008      	b.n	800286e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800285c:	f7fe fc80 	bl	8001160 <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	2b02      	cmp	r3, #2
 8002868:	d901      	bls.n	800286e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e167      	b.n	8002b3e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800286e:	4b0b      	ldr	r3, [pc, #44]	; (800289c <HAL_RCC_OscConfig+0x240>)
 8002870:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002872:	f003 0302 	and.w	r3, r3, #2
 8002876:	2b00      	cmp	r3, #0
 8002878:	d0f0      	beq.n	800285c <HAL_RCC_OscConfig+0x200>
 800287a:	e01b      	b.n	80028b4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800287c:	4b09      	ldr	r3, [pc, #36]	; (80028a4 <HAL_RCC_OscConfig+0x248>)
 800287e:	2200      	movs	r2, #0
 8002880:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002882:	f7fe fc6d 	bl	8001160 <HAL_GetTick>
 8002886:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002888:	e00e      	b.n	80028a8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800288a:	f7fe fc69 	bl	8001160 <HAL_GetTick>
 800288e:	4602      	mov	r2, r0
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	2b02      	cmp	r3, #2
 8002896:	d907      	bls.n	80028a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002898:	2303      	movs	r3, #3
 800289a:	e150      	b.n	8002b3e <HAL_RCC_OscConfig+0x4e2>
 800289c:	40023800 	.word	0x40023800
 80028a0:	42470000 	.word	0x42470000
 80028a4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028a8:	4b88      	ldr	r3, [pc, #544]	; (8002acc <HAL_RCC_OscConfig+0x470>)
 80028aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028ac:	f003 0302 	and.w	r3, r3, #2
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d1ea      	bne.n	800288a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 0304 	and.w	r3, r3, #4
 80028bc:	2b00      	cmp	r3, #0
 80028be:	f000 8097 	beq.w	80029f0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028c2:	2300      	movs	r3, #0
 80028c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028c6:	4b81      	ldr	r3, [pc, #516]	; (8002acc <HAL_RCC_OscConfig+0x470>)
 80028c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d10f      	bne.n	80028f2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028d2:	2300      	movs	r3, #0
 80028d4:	60bb      	str	r3, [r7, #8]
 80028d6:	4b7d      	ldr	r3, [pc, #500]	; (8002acc <HAL_RCC_OscConfig+0x470>)
 80028d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028da:	4a7c      	ldr	r2, [pc, #496]	; (8002acc <HAL_RCC_OscConfig+0x470>)
 80028dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028e0:	6413      	str	r3, [r2, #64]	; 0x40
 80028e2:	4b7a      	ldr	r3, [pc, #488]	; (8002acc <HAL_RCC_OscConfig+0x470>)
 80028e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ea:	60bb      	str	r3, [r7, #8]
 80028ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028ee:	2301      	movs	r3, #1
 80028f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028f2:	4b77      	ldr	r3, [pc, #476]	; (8002ad0 <HAL_RCC_OscConfig+0x474>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d118      	bne.n	8002930 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028fe:	4b74      	ldr	r3, [pc, #464]	; (8002ad0 <HAL_RCC_OscConfig+0x474>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a73      	ldr	r2, [pc, #460]	; (8002ad0 <HAL_RCC_OscConfig+0x474>)
 8002904:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002908:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800290a:	f7fe fc29 	bl	8001160 <HAL_GetTick>
 800290e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002910:	e008      	b.n	8002924 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002912:	f7fe fc25 	bl	8001160 <HAL_GetTick>
 8002916:	4602      	mov	r2, r0
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	2b02      	cmp	r3, #2
 800291e:	d901      	bls.n	8002924 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002920:	2303      	movs	r3, #3
 8002922:	e10c      	b.n	8002b3e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002924:	4b6a      	ldr	r3, [pc, #424]	; (8002ad0 <HAL_RCC_OscConfig+0x474>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800292c:	2b00      	cmp	r3, #0
 800292e:	d0f0      	beq.n	8002912 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	2b01      	cmp	r3, #1
 8002936:	d106      	bne.n	8002946 <HAL_RCC_OscConfig+0x2ea>
 8002938:	4b64      	ldr	r3, [pc, #400]	; (8002acc <HAL_RCC_OscConfig+0x470>)
 800293a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800293c:	4a63      	ldr	r2, [pc, #396]	; (8002acc <HAL_RCC_OscConfig+0x470>)
 800293e:	f043 0301 	orr.w	r3, r3, #1
 8002942:	6713      	str	r3, [r2, #112]	; 0x70
 8002944:	e01c      	b.n	8002980 <HAL_RCC_OscConfig+0x324>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	2b05      	cmp	r3, #5
 800294c:	d10c      	bne.n	8002968 <HAL_RCC_OscConfig+0x30c>
 800294e:	4b5f      	ldr	r3, [pc, #380]	; (8002acc <HAL_RCC_OscConfig+0x470>)
 8002950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002952:	4a5e      	ldr	r2, [pc, #376]	; (8002acc <HAL_RCC_OscConfig+0x470>)
 8002954:	f043 0304 	orr.w	r3, r3, #4
 8002958:	6713      	str	r3, [r2, #112]	; 0x70
 800295a:	4b5c      	ldr	r3, [pc, #368]	; (8002acc <HAL_RCC_OscConfig+0x470>)
 800295c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800295e:	4a5b      	ldr	r2, [pc, #364]	; (8002acc <HAL_RCC_OscConfig+0x470>)
 8002960:	f043 0301 	orr.w	r3, r3, #1
 8002964:	6713      	str	r3, [r2, #112]	; 0x70
 8002966:	e00b      	b.n	8002980 <HAL_RCC_OscConfig+0x324>
 8002968:	4b58      	ldr	r3, [pc, #352]	; (8002acc <HAL_RCC_OscConfig+0x470>)
 800296a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800296c:	4a57      	ldr	r2, [pc, #348]	; (8002acc <HAL_RCC_OscConfig+0x470>)
 800296e:	f023 0301 	bic.w	r3, r3, #1
 8002972:	6713      	str	r3, [r2, #112]	; 0x70
 8002974:	4b55      	ldr	r3, [pc, #340]	; (8002acc <HAL_RCC_OscConfig+0x470>)
 8002976:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002978:	4a54      	ldr	r2, [pc, #336]	; (8002acc <HAL_RCC_OscConfig+0x470>)
 800297a:	f023 0304 	bic.w	r3, r3, #4
 800297e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d015      	beq.n	80029b4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002988:	f7fe fbea 	bl	8001160 <HAL_GetTick>
 800298c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800298e:	e00a      	b.n	80029a6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002990:	f7fe fbe6 	bl	8001160 <HAL_GetTick>
 8002994:	4602      	mov	r2, r0
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	f241 3288 	movw	r2, #5000	; 0x1388
 800299e:	4293      	cmp	r3, r2
 80029a0:	d901      	bls.n	80029a6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	e0cb      	b.n	8002b3e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029a6:	4b49      	ldr	r3, [pc, #292]	; (8002acc <HAL_RCC_OscConfig+0x470>)
 80029a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029aa:	f003 0302 	and.w	r3, r3, #2
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d0ee      	beq.n	8002990 <HAL_RCC_OscConfig+0x334>
 80029b2:	e014      	b.n	80029de <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029b4:	f7fe fbd4 	bl	8001160 <HAL_GetTick>
 80029b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029ba:	e00a      	b.n	80029d2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029bc:	f7fe fbd0 	bl	8001160 <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d901      	bls.n	80029d2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e0b5      	b.n	8002b3e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029d2:	4b3e      	ldr	r3, [pc, #248]	; (8002acc <HAL_RCC_OscConfig+0x470>)
 80029d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029d6:	f003 0302 	and.w	r3, r3, #2
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d1ee      	bne.n	80029bc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029de:	7dfb      	ldrb	r3, [r7, #23]
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d105      	bne.n	80029f0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029e4:	4b39      	ldr	r3, [pc, #228]	; (8002acc <HAL_RCC_OscConfig+0x470>)
 80029e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e8:	4a38      	ldr	r2, [pc, #224]	; (8002acc <HAL_RCC_OscConfig+0x470>)
 80029ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029ee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	699b      	ldr	r3, [r3, #24]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	f000 80a1 	beq.w	8002b3c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80029fa:	4b34      	ldr	r3, [pc, #208]	; (8002acc <HAL_RCC_OscConfig+0x470>)
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	f003 030c 	and.w	r3, r3, #12
 8002a02:	2b08      	cmp	r3, #8
 8002a04:	d05c      	beq.n	8002ac0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	699b      	ldr	r3, [r3, #24]
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d141      	bne.n	8002a92 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a0e:	4b31      	ldr	r3, [pc, #196]	; (8002ad4 <HAL_RCC_OscConfig+0x478>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a14:	f7fe fba4 	bl	8001160 <HAL_GetTick>
 8002a18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a1a:	e008      	b.n	8002a2e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a1c:	f7fe fba0 	bl	8001160 <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d901      	bls.n	8002a2e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e087      	b.n	8002b3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a2e:	4b27      	ldr	r3, [pc, #156]	; (8002acc <HAL_RCC_OscConfig+0x470>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d1f0      	bne.n	8002a1c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	69da      	ldr	r2, [r3, #28]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6a1b      	ldr	r3, [r3, #32]
 8002a42:	431a      	orrs	r2, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a48:	019b      	lsls	r3, r3, #6
 8002a4a:	431a      	orrs	r2, r3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a50:	085b      	lsrs	r3, r3, #1
 8002a52:	3b01      	subs	r3, #1
 8002a54:	041b      	lsls	r3, r3, #16
 8002a56:	431a      	orrs	r2, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a5c:	061b      	lsls	r3, r3, #24
 8002a5e:	491b      	ldr	r1, [pc, #108]	; (8002acc <HAL_RCC_OscConfig+0x470>)
 8002a60:	4313      	orrs	r3, r2
 8002a62:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a64:	4b1b      	ldr	r3, [pc, #108]	; (8002ad4 <HAL_RCC_OscConfig+0x478>)
 8002a66:	2201      	movs	r2, #1
 8002a68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a6a:	f7fe fb79 	bl	8001160 <HAL_GetTick>
 8002a6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a70:	e008      	b.n	8002a84 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a72:	f7fe fb75 	bl	8001160 <HAL_GetTick>
 8002a76:	4602      	mov	r2, r0
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	1ad3      	subs	r3, r2, r3
 8002a7c:	2b02      	cmp	r3, #2
 8002a7e:	d901      	bls.n	8002a84 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a80:	2303      	movs	r3, #3
 8002a82:	e05c      	b.n	8002b3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a84:	4b11      	ldr	r3, [pc, #68]	; (8002acc <HAL_RCC_OscConfig+0x470>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d0f0      	beq.n	8002a72 <HAL_RCC_OscConfig+0x416>
 8002a90:	e054      	b.n	8002b3c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a92:	4b10      	ldr	r3, [pc, #64]	; (8002ad4 <HAL_RCC_OscConfig+0x478>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a98:	f7fe fb62 	bl	8001160 <HAL_GetTick>
 8002a9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a9e:	e008      	b.n	8002ab2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002aa0:	f7fe fb5e 	bl	8001160 <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d901      	bls.n	8002ab2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e045      	b.n	8002b3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ab2:	4b06      	ldr	r3, [pc, #24]	; (8002acc <HAL_RCC_OscConfig+0x470>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d1f0      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x444>
 8002abe:	e03d      	b.n	8002b3c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	699b      	ldr	r3, [r3, #24]
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d107      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e038      	b.n	8002b3e <HAL_RCC_OscConfig+0x4e2>
 8002acc:	40023800 	.word	0x40023800
 8002ad0:	40007000 	.word	0x40007000
 8002ad4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ad8:	4b1b      	ldr	r3, [pc, #108]	; (8002b48 <HAL_RCC_OscConfig+0x4ec>)
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	699b      	ldr	r3, [r3, #24]
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d028      	beq.n	8002b38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d121      	bne.n	8002b38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d11a      	bne.n	8002b38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b02:	68fa      	ldr	r2, [r7, #12]
 8002b04:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002b08:	4013      	ands	r3, r2
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b0e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d111      	bne.n	8002b38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b1e:	085b      	lsrs	r3, r3, #1
 8002b20:	3b01      	subs	r3, #1
 8002b22:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d107      	bne.n	8002b38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b32:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d001      	beq.n	8002b3c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e000      	b.n	8002b3e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002b3c:	2300      	movs	r3, #0
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3718      	adds	r7, #24
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	40023800 	.word	0x40023800

08002b4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b084      	sub	sp, #16
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d101      	bne.n	8002b60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e0cc      	b.n	8002cfa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b60:	4b68      	ldr	r3, [pc, #416]	; (8002d04 <HAL_RCC_ClockConfig+0x1b8>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 030f 	and.w	r3, r3, #15
 8002b68:	683a      	ldr	r2, [r7, #0]
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d90c      	bls.n	8002b88 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b6e:	4b65      	ldr	r3, [pc, #404]	; (8002d04 <HAL_RCC_ClockConfig+0x1b8>)
 8002b70:	683a      	ldr	r2, [r7, #0]
 8002b72:	b2d2      	uxtb	r2, r2
 8002b74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b76:	4b63      	ldr	r3, [pc, #396]	; (8002d04 <HAL_RCC_ClockConfig+0x1b8>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 030f 	and.w	r3, r3, #15
 8002b7e:	683a      	ldr	r2, [r7, #0]
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d001      	beq.n	8002b88 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e0b8      	b.n	8002cfa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 0302 	and.w	r3, r3, #2
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d020      	beq.n	8002bd6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0304 	and.w	r3, r3, #4
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d005      	beq.n	8002bac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ba0:	4b59      	ldr	r3, [pc, #356]	; (8002d08 <HAL_RCC_ClockConfig+0x1bc>)
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	4a58      	ldr	r2, [pc, #352]	; (8002d08 <HAL_RCC_ClockConfig+0x1bc>)
 8002ba6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002baa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0308 	and.w	r3, r3, #8
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d005      	beq.n	8002bc4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002bb8:	4b53      	ldr	r3, [pc, #332]	; (8002d08 <HAL_RCC_ClockConfig+0x1bc>)
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	4a52      	ldr	r2, [pc, #328]	; (8002d08 <HAL_RCC_ClockConfig+0x1bc>)
 8002bbe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002bc2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bc4:	4b50      	ldr	r3, [pc, #320]	; (8002d08 <HAL_RCC_ClockConfig+0x1bc>)
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	494d      	ldr	r1, [pc, #308]	; (8002d08 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0301 	and.w	r3, r3, #1
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d044      	beq.n	8002c6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d107      	bne.n	8002bfa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bea:	4b47      	ldr	r3, [pc, #284]	; (8002d08 <HAL_RCC_ClockConfig+0x1bc>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d119      	bne.n	8002c2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e07f      	b.n	8002cfa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	2b02      	cmp	r3, #2
 8002c00:	d003      	beq.n	8002c0a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c06:	2b03      	cmp	r3, #3
 8002c08:	d107      	bne.n	8002c1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c0a:	4b3f      	ldr	r3, [pc, #252]	; (8002d08 <HAL_RCC_ClockConfig+0x1bc>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d109      	bne.n	8002c2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e06f      	b.n	8002cfa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c1a:	4b3b      	ldr	r3, [pc, #236]	; (8002d08 <HAL_RCC_ClockConfig+0x1bc>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 0302 	and.w	r3, r3, #2
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d101      	bne.n	8002c2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e067      	b.n	8002cfa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c2a:	4b37      	ldr	r3, [pc, #220]	; (8002d08 <HAL_RCC_ClockConfig+0x1bc>)
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	f023 0203 	bic.w	r2, r3, #3
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	4934      	ldr	r1, [pc, #208]	; (8002d08 <HAL_RCC_ClockConfig+0x1bc>)
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c3c:	f7fe fa90 	bl	8001160 <HAL_GetTick>
 8002c40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c42:	e00a      	b.n	8002c5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c44:	f7fe fa8c 	bl	8001160 <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d901      	bls.n	8002c5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	e04f      	b.n	8002cfa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c5a:	4b2b      	ldr	r3, [pc, #172]	; (8002d08 <HAL_RCC_ClockConfig+0x1bc>)
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	f003 020c 	and.w	r2, r3, #12
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d1eb      	bne.n	8002c44 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c6c:	4b25      	ldr	r3, [pc, #148]	; (8002d04 <HAL_RCC_ClockConfig+0x1b8>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 030f 	and.w	r3, r3, #15
 8002c74:	683a      	ldr	r2, [r7, #0]
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d20c      	bcs.n	8002c94 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c7a:	4b22      	ldr	r3, [pc, #136]	; (8002d04 <HAL_RCC_ClockConfig+0x1b8>)
 8002c7c:	683a      	ldr	r2, [r7, #0]
 8002c7e:	b2d2      	uxtb	r2, r2
 8002c80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c82:	4b20      	ldr	r3, [pc, #128]	; (8002d04 <HAL_RCC_ClockConfig+0x1b8>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 030f 	and.w	r3, r3, #15
 8002c8a:	683a      	ldr	r2, [r7, #0]
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d001      	beq.n	8002c94 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	e032      	b.n	8002cfa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 0304 	and.w	r3, r3, #4
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d008      	beq.n	8002cb2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ca0:	4b19      	ldr	r3, [pc, #100]	; (8002d08 <HAL_RCC_ClockConfig+0x1bc>)
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	4916      	ldr	r1, [pc, #88]	; (8002d08 <HAL_RCC_ClockConfig+0x1bc>)
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0308 	and.w	r3, r3, #8
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d009      	beq.n	8002cd2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002cbe:	4b12      	ldr	r3, [pc, #72]	; (8002d08 <HAL_RCC_ClockConfig+0x1bc>)
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	691b      	ldr	r3, [r3, #16]
 8002cca:	00db      	lsls	r3, r3, #3
 8002ccc:	490e      	ldr	r1, [pc, #56]	; (8002d08 <HAL_RCC_ClockConfig+0x1bc>)
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002cd2:	f000 f821 	bl	8002d18 <HAL_RCC_GetSysClockFreq>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	4b0b      	ldr	r3, [pc, #44]	; (8002d08 <HAL_RCC_ClockConfig+0x1bc>)
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	091b      	lsrs	r3, r3, #4
 8002cde:	f003 030f 	and.w	r3, r3, #15
 8002ce2:	490a      	ldr	r1, [pc, #40]	; (8002d0c <HAL_RCC_ClockConfig+0x1c0>)
 8002ce4:	5ccb      	ldrb	r3, [r1, r3]
 8002ce6:	fa22 f303 	lsr.w	r3, r2, r3
 8002cea:	4a09      	ldr	r2, [pc, #36]	; (8002d10 <HAL_RCC_ClockConfig+0x1c4>)
 8002cec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002cee:	4b09      	ldr	r3, [pc, #36]	; (8002d14 <HAL_RCC_ClockConfig+0x1c8>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f7fe f9f0 	bl	80010d8 <HAL_InitTick>

  return HAL_OK;
 8002cf8:	2300      	movs	r3, #0
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3710      	adds	r7, #16
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	40023c00 	.word	0x40023c00
 8002d08:	40023800 	.word	0x40023800
 8002d0c:	080054b0 	.word	0x080054b0
 8002d10:	20000000 	.word	0x20000000
 8002d14:	20000004 	.word	0x20000004

08002d18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d1c:	b094      	sub	sp, #80	; 0x50
 8002d1e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002d20:	2300      	movs	r3, #0
 8002d22:	647b      	str	r3, [r7, #68]	; 0x44
 8002d24:	2300      	movs	r3, #0
 8002d26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d28:	2300      	movs	r3, #0
 8002d2a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d30:	4b79      	ldr	r3, [pc, #484]	; (8002f18 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	f003 030c 	and.w	r3, r3, #12
 8002d38:	2b08      	cmp	r3, #8
 8002d3a:	d00d      	beq.n	8002d58 <HAL_RCC_GetSysClockFreq+0x40>
 8002d3c:	2b08      	cmp	r3, #8
 8002d3e:	f200 80e1 	bhi.w	8002f04 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d002      	beq.n	8002d4c <HAL_RCC_GetSysClockFreq+0x34>
 8002d46:	2b04      	cmp	r3, #4
 8002d48:	d003      	beq.n	8002d52 <HAL_RCC_GetSysClockFreq+0x3a>
 8002d4a:	e0db      	b.n	8002f04 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d4c:	4b73      	ldr	r3, [pc, #460]	; (8002f1c <HAL_RCC_GetSysClockFreq+0x204>)
 8002d4e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002d50:	e0db      	b.n	8002f0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d52:	4b73      	ldr	r3, [pc, #460]	; (8002f20 <HAL_RCC_GetSysClockFreq+0x208>)
 8002d54:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d56:	e0d8      	b.n	8002f0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d58:	4b6f      	ldr	r3, [pc, #444]	; (8002f18 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d60:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d62:	4b6d      	ldr	r3, [pc, #436]	; (8002f18 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d063      	beq.n	8002e36 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d6e:	4b6a      	ldr	r3, [pc, #424]	; (8002f18 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	099b      	lsrs	r3, r3, #6
 8002d74:	2200      	movs	r2, #0
 8002d76:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d78:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d80:	633b      	str	r3, [r7, #48]	; 0x30
 8002d82:	2300      	movs	r3, #0
 8002d84:	637b      	str	r3, [r7, #52]	; 0x34
 8002d86:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002d8a:	4622      	mov	r2, r4
 8002d8c:	462b      	mov	r3, r5
 8002d8e:	f04f 0000 	mov.w	r0, #0
 8002d92:	f04f 0100 	mov.w	r1, #0
 8002d96:	0159      	lsls	r1, r3, #5
 8002d98:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d9c:	0150      	lsls	r0, r2, #5
 8002d9e:	4602      	mov	r2, r0
 8002da0:	460b      	mov	r3, r1
 8002da2:	4621      	mov	r1, r4
 8002da4:	1a51      	subs	r1, r2, r1
 8002da6:	6139      	str	r1, [r7, #16]
 8002da8:	4629      	mov	r1, r5
 8002daa:	eb63 0301 	sbc.w	r3, r3, r1
 8002dae:	617b      	str	r3, [r7, #20]
 8002db0:	f04f 0200 	mov.w	r2, #0
 8002db4:	f04f 0300 	mov.w	r3, #0
 8002db8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002dbc:	4659      	mov	r1, fp
 8002dbe:	018b      	lsls	r3, r1, #6
 8002dc0:	4651      	mov	r1, sl
 8002dc2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002dc6:	4651      	mov	r1, sl
 8002dc8:	018a      	lsls	r2, r1, #6
 8002dca:	4651      	mov	r1, sl
 8002dcc:	ebb2 0801 	subs.w	r8, r2, r1
 8002dd0:	4659      	mov	r1, fp
 8002dd2:	eb63 0901 	sbc.w	r9, r3, r1
 8002dd6:	f04f 0200 	mov.w	r2, #0
 8002dda:	f04f 0300 	mov.w	r3, #0
 8002dde:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002de2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002de6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002dea:	4690      	mov	r8, r2
 8002dec:	4699      	mov	r9, r3
 8002dee:	4623      	mov	r3, r4
 8002df0:	eb18 0303 	adds.w	r3, r8, r3
 8002df4:	60bb      	str	r3, [r7, #8]
 8002df6:	462b      	mov	r3, r5
 8002df8:	eb49 0303 	adc.w	r3, r9, r3
 8002dfc:	60fb      	str	r3, [r7, #12]
 8002dfe:	f04f 0200 	mov.w	r2, #0
 8002e02:	f04f 0300 	mov.w	r3, #0
 8002e06:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002e0a:	4629      	mov	r1, r5
 8002e0c:	024b      	lsls	r3, r1, #9
 8002e0e:	4621      	mov	r1, r4
 8002e10:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002e14:	4621      	mov	r1, r4
 8002e16:	024a      	lsls	r2, r1, #9
 8002e18:	4610      	mov	r0, r2
 8002e1a:	4619      	mov	r1, r3
 8002e1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e1e:	2200      	movs	r2, #0
 8002e20:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e22:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002e24:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002e28:	f7fd f9e0 	bl	80001ec <__aeabi_uldivmod>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	460b      	mov	r3, r1
 8002e30:	4613      	mov	r3, r2
 8002e32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e34:	e058      	b.n	8002ee8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e36:	4b38      	ldr	r3, [pc, #224]	; (8002f18 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	099b      	lsrs	r3, r3, #6
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	4618      	mov	r0, r3
 8002e40:	4611      	mov	r1, r2
 8002e42:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002e46:	623b      	str	r3, [r7, #32]
 8002e48:	2300      	movs	r3, #0
 8002e4a:	627b      	str	r3, [r7, #36]	; 0x24
 8002e4c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002e50:	4642      	mov	r2, r8
 8002e52:	464b      	mov	r3, r9
 8002e54:	f04f 0000 	mov.w	r0, #0
 8002e58:	f04f 0100 	mov.w	r1, #0
 8002e5c:	0159      	lsls	r1, r3, #5
 8002e5e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e62:	0150      	lsls	r0, r2, #5
 8002e64:	4602      	mov	r2, r0
 8002e66:	460b      	mov	r3, r1
 8002e68:	4641      	mov	r1, r8
 8002e6a:	ebb2 0a01 	subs.w	sl, r2, r1
 8002e6e:	4649      	mov	r1, r9
 8002e70:	eb63 0b01 	sbc.w	fp, r3, r1
 8002e74:	f04f 0200 	mov.w	r2, #0
 8002e78:	f04f 0300 	mov.w	r3, #0
 8002e7c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002e80:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002e84:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002e88:	ebb2 040a 	subs.w	r4, r2, sl
 8002e8c:	eb63 050b 	sbc.w	r5, r3, fp
 8002e90:	f04f 0200 	mov.w	r2, #0
 8002e94:	f04f 0300 	mov.w	r3, #0
 8002e98:	00eb      	lsls	r3, r5, #3
 8002e9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e9e:	00e2      	lsls	r2, r4, #3
 8002ea0:	4614      	mov	r4, r2
 8002ea2:	461d      	mov	r5, r3
 8002ea4:	4643      	mov	r3, r8
 8002ea6:	18e3      	adds	r3, r4, r3
 8002ea8:	603b      	str	r3, [r7, #0]
 8002eaa:	464b      	mov	r3, r9
 8002eac:	eb45 0303 	adc.w	r3, r5, r3
 8002eb0:	607b      	str	r3, [r7, #4]
 8002eb2:	f04f 0200 	mov.w	r2, #0
 8002eb6:	f04f 0300 	mov.w	r3, #0
 8002eba:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002ebe:	4629      	mov	r1, r5
 8002ec0:	028b      	lsls	r3, r1, #10
 8002ec2:	4621      	mov	r1, r4
 8002ec4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ec8:	4621      	mov	r1, r4
 8002eca:	028a      	lsls	r2, r1, #10
 8002ecc:	4610      	mov	r0, r2
 8002ece:	4619      	mov	r1, r3
 8002ed0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	61bb      	str	r3, [r7, #24]
 8002ed6:	61fa      	str	r2, [r7, #28]
 8002ed8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002edc:	f7fd f986 	bl	80001ec <__aeabi_uldivmod>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	460b      	mov	r3, r1
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ee8:	4b0b      	ldr	r3, [pc, #44]	; (8002f18 <HAL_RCC_GetSysClockFreq+0x200>)
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	0c1b      	lsrs	r3, r3, #16
 8002eee:	f003 0303 	and.w	r3, r3, #3
 8002ef2:	3301      	adds	r3, #1
 8002ef4:	005b      	lsls	r3, r3, #1
 8002ef6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002ef8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002efa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002efc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f00:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f02:	e002      	b.n	8002f0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f04:	4b05      	ldr	r3, [pc, #20]	; (8002f1c <HAL_RCC_GetSysClockFreq+0x204>)
 8002f06:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3750      	adds	r7, #80	; 0x50
 8002f10:	46bd      	mov	sp, r7
 8002f12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f16:	bf00      	nop
 8002f18:	40023800 	.word	0x40023800
 8002f1c:	00f42400 	.word	0x00f42400
 8002f20:	007a1200 	.word	0x007a1200

08002f24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f24:	b480      	push	{r7}
 8002f26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f28:	4b03      	ldr	r3, [pc, #12]	; (8002f38 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr
 8002f36:	bf00      	nop
 8002f38:	20000000 	.word	0x20000000

08002f3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002f40:	f7ff fff0 	bl	8002f24 <HAL_RCC_GetHCLKFreq>
 8002f44:	4602      	mov	r2, r0
 8002f46:	4b05      	ldr	r3, [pc, #20]	; (8002f5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	0a9b      	lsrs	r3, r3, #10
 8002f4c:	f003 0307 	and.w	r3, r3, #7
 8002f50:	4903      	ldr	r1, [pc, #12]	; (8002f60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f52:	5ccb      	ldrb	r3, [r1, r3]
 8002f54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	40023800 	.word	0x40023800
 8002f60:	080054c0 	.word	0x080054c0

08002f64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002f68:	f7ff ffdc 	bl	8002f24 <HAL_RCC_GetHCLKFreq>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	4b05      	ldr	r3, [pc, #20]	; (8002f84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	0b5b      	lsrs	r3, r3, #13
 8002f74:	f003 0307 	and.w	r3, r3, #7
 8002f78:	4903      	ldr	r1, [pc, #12]	; (8002f88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f7a:	5ccb      	ldrb	r3, [r1, r3]
 8002f7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	40023800 	.word	0x40023800
 8002f88:	080054c0 	.word	0x080054c0

08002f8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b082      	sub	sp, #8
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d101      	bne.n	8002f9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e041      	b.n	8003022 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d106      	bne.n	8002fb8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f7fd ff04 	bl	8000dc0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2202      	movs	r2, #2
 8002fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	3304      	adds	r3, #4
 8002fc8:	4619      	mov	r1, r3
 8002fca:	4610      	mov	r0, r2
 8002fcc:	f000 fb24 	bl	8003618 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2201      	movs	r2, #1
 8002fec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2201      	movs	r2, #1
 8003004:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2201      	movs	r2, #1
 800300c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2201      	movs	r2, #1
 8003014:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2201      	movs	r2, #1
 800301c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003020:	2300      	movs	r3, #0
}
 8003022:	4618      	mov	r0, r3
 8003024:	3708      	adds	r7, #8
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}

0800302a <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800302a:	b580      	push	{r7, lr}
 800302c:	b082      	sub	sp, #8
 800302e:	af00      	add	r7, sp, #0
 8003030:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d101      	bne.n	800303c <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e041      	b.n	80030c0 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003042:	b2db      	uxtb	r3, r3
 8003044:	2b00      	cmp	r3, #0
 8003046:	d106      	bne.n	8003056 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2200      	movs	r2, #0
 800304c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f000 f839 	bl	80030c8 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2202      	movs	r2, #2
 800305a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	3304      	adds	r3, #4
 8003066:	4619      	mov	r1, r3
 8003068:	4610      	mov	r0, r2
 800306a:	f000 fad5 	bl	8003618 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2201      	movs	r2, #1
 8003072:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2201      	movs	r2, #1
 800307a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2201      	movs	r2, #1
 8003082:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2201      	movs	r2, #1
 800308a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2201      	movs	r2, #1
 8003092:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2201      	movs	r2, #1
 800309a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2201      	movs	r2, #1
 80030a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2201      	movs	r2, #1
 80030aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2201      	movs	r2, #1
 80030b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2201      	movs	r2, #1
 80030ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030be:	2300      	movs	r3, #0
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3708      	adds	r7, #8
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}

080030c8 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80030d0:	bf00      	nop
 80030d2:	370c      	adds	r7, #12
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr

080030dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b082      	sub	sp, #8
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	691b      	ldr	r3, [r3, #16]
 80030ea:	f003 0302 	and.w	r3, r3, #2
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d122      	bne.n	8003138 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	f003 0302 	and.w	r3, r3, #2
 80030fc:	2b02      	cmp	r3, #2
 80030fe:	d11b      	bne.n	8003138 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f06f 0202 	mvn.w	r2, #2
 8003108:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2201      	movs	r2, #1
 800310e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	699b      	ldr	r3, [r3, #24]
 8003116:	f003 0303 	and.w	r3, r3, #3
 800311a:	2b00      	cmp	r3, #0
 800311c:	d003      	beq.n	8003126 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f000 fa5b 	bl	80035da <HAL_TIM_IC_CaptureCallback>
 8003124:	e005      	b.n	8003132 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f000 fa4d 	bl	80035c6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	f000 fa5e 	bl	80035ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2200      	movs	r2, #0
 8003136:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	691b      	ldr	r3, [r3, #16]
 800313e:	f003 0304 	and.w	r3, r3, #4
 8003142:	2b04      	cmp	r3, #4
 8003144:	d122      	bne.n	800318c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	f003 0304 	and.w	r3, r3, #4
 8003150:	2b04      	cmp	r3, #4
 8003152:	d11b      	bne.n	800318c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f06f 0204 	mvn.w	r2, #4
 800315c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2202      	movs	r2, #2
 8003162:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	699b      	ldr	r3, [r3, #24]
 800316a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800316e:	2b00      	cmp	r3, #0
 8003170:	d003      	beq.n	800317a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f000 fa31 	bl	80035da <HAL_TIM_IC_CaptureCallback>
 8003178:	e005      	b.n	8003186 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f000 fa23 	bl	80035c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	f000 fa34 	bl	80035ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2200      	movs	r2, #0
 800318a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	691b      	ldr	r3, [r3, #16]
 8003192:	f003 0308 	and.w	r3, r3, #8
 8003196:	2b08      	cmp	r3, #8
 8003198:	d122      	bne.n	80031e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	f003 0308 	and.w	r3, r3, #8
 80031a4:	2b08      	cmp	r3, #8
 80031a6:	d11b      	bne.n	80031e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f06f 0208 	mvn.w	r2, #8
 80031b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2204      	movs	r2, #4
 80031b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	69db      	ldr	r3, [r3, #28]
 80031be:	f003 0303 	and.w	r3, r3, #3
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d003      	beq.n	80031ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f000 fa07 	bl	80035da <HAL_TIM_IC_CaptureCallback>
 80031cc:	e005      	b.n	80031da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f000 f9f9 	bl	80035c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f000 fa0a 	bl	80035ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2200      	movs	r2, #0
 80031de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	691b      	ldr	r3, [r3, #16]
 80031e6:	f003 0310 	and.w	r3, r3, #16
 80031ea:	2b10      	cmp	r3, #16
 80031ec:	d122      	bne.n	8003234 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	f003 0310 	and.w	r3, r3, #16
 80031f8:	2b10      	cmp	r3, #16
 80031fa:	d11b      	bne.n	8003234 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f06f 0210 	mvn.w	r2, #16
 8003204:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2208      	movs	r2, #8
 800320a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	69db      	ldr	r3, [r3, #28]
 8003212:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003216:	2b00      	cmp	r3, #0
 8003218:	d003      	beq.n	8003222 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f000 f9dd 	bl	80035da <HAL_TIM_IC_CaptureCallback>
 8003220:	e005      	b.n	800322e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f000 f9cf 	bl	80035c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	f000 f9e0 	bl	80035ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	691b      	ldr	r3, [r3, #16]
 800323a:	f003 0301 	and.w	r3, r3, #1
 800323e:	2b01      	cmp	r3, #1
 8003240:	d10e      	bne.n	8003260 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	f003 0301 	and.w	r3, r3, #1
 800324c:	2b01      	cmp	r3, #1
 800324e:	d107      	bne.n	8003260 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f06f 0201 	mvn.w	r2, #1
 8003258:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f000 f9a9 	bl	80035b2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	691b      	ldr	r3, [r3, #16]
 8003266:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800326a:	2b80      	cmp	r3, #128	; 0x80
 800326c:	d10e      	bne.n	800328c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003278:	2b80      	cmp	r3, #128	; 0x80
 800327a:	d107      	bne.n	800328c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003284:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f000 fcb0 	bl	8003bec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	691b      	ldr	r3, [r3, #16]
 8003292:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003296:	2b40      	cmp	r3, #64	; 0x40
 8003298:	d10e      	bne.n	80032b8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032a4:	2b40      	cmp	r3, #64	; 0x40
 80032a6:	d107      	bne.n	80032b8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80032b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f000 f9a5 	bl	8003602 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	691b      	ldr	r3, [r3, #16]
 80032be:	f003 0320 	and.w	r3, r3, #32
 80032c2:	2b20      	cmp	r3, #32
 80032c4:	d10e      	bne.n	80032e4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	f003 0320 	and.w	r3, r3, #32
 80032d0:	2b20      	cmp	r3, #32
 80032d2:	d107      	bne.n	80032e4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f06f 0220 	mvn.w	r2, #32
 80032dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f000 fc7a 	bl	8003bd8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80032e4:	bf00      	nop
 80032e6:	3708      	adds	r7, #8
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}

080032ec <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b086      	sub	sp, #24
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	60f8      	str	r0, [r7, #12]
 80032f4:	60b9      	str	r1, [r7, #8]
 80032f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032f8:	2300      	movs	r3, #0
 80032fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003302:	2b01      	cmp	r3, #1
 8003304:	d101      	bne.n	800330a <HAL_TIM_IC_ConfigChannel+0x1e>
 8003306:	2302      	movs	r3, #2
 8003308:	e088      	b.n	800341c <HAL_TIM_IC_ConfigChannel+0x130>
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2201      	movs	r2, #1
 800330e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d11b      	bne.n	8003350 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	6818      	ldr	r0, [r3, #0]
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	6819      	ldr	r1, [r3, #0]
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	685a      	ldr	r2, [r3, #4]
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	f000 fa16 	bl	8003758 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	699a      	ldr	r2, [r3, #24]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f022 020c 	bic.w	r2, r2, #12
 800333a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	6999      	ldr	r1, [r3, #24]
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	689a      	ldr	r2, [r3, #8]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	430a      	orrs	r2, r1
 800334c:	619a      	str	r2, [r3, #24]
 800334e:	e060      	b.n	8003412 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2b04      	cmp	r3, #4
 8003354:	d11c      	bne.n	8003390 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	6818      	ldr	r0, [r3, #0]
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	6819      	ldr	r1, [r3, #0]
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	685a      	ldr	r2, [r3, #4]
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	68db      	ldr	r3, [r3, #12]
 8003366:	f000 fa9a 	bl	800389e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	699a      	ldr	r2, [r3, #24]
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003378:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	6999      	ldr	r1, [r3, #24]
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	021a      	lsls	r2, r3, #8
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	430a      	orrs	r2, r1
 800338c:	619a      	str	r2, [r3, #24]
 800338e:	e040      	b.n	8003412 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2b08      	cmp	r3, #8
 8003394:	d11b      	bne.n	80033ce <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	6818      	ldr	r0, [r3, #0]
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	6819      	ldr	r1, [r3, #0]
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	685a      	ldr	r2, [r3, #4]
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	f000 fae7 	bl	8003978 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	69da      	ldr	r2, [r3, #28]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f022 020c 	bic.w	r2, r2, #12
 80033b8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	69d9      	ldr	r1, [r3, #28]
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	689a      	ldr	r2, [r3, #8]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	430a      	orrs	r2, r1
 80033ca:	61da      	str	r2, [r3, #28]
 80033cc:	e021      	b.n	8003412 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2b0c      	cmp	r3, #12
 80033d2:	d11c      	bne.n	800340e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	6818      	ldr	r0, [r3, #0]
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	6819      	ldr	r1, [r3, #0]
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	685a      	ldr	r2, [r3, #4]
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	f000 fb04 	bl	80039f0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	69da      	ldr	r2, [r3, #28]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80033f6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	69d9      	ldr	r1, [r3, #28]
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	021a      	lsls	r2, r3, #8
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	430a      	orrs	r2, r1
 800340a:	61da      	str	r2, [r3, #28]
 800340c:	e001      	b.n	8003412 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2200      	movs	r2, #0
 8003416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800341a:	7dfb      	ldrb	r3, [r7, #23]
}
 800341c:	4618      	mov	r0, r3
 800341e:	3718      	adds	r7, #24
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}

08003424 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b084      	sub	sp, #16
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800342e:	2300      	movs	r3, #0
 8003430:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003438:	2b01      	cmp	r3, #1
 800343a:	d101      	bne.n	8003440 <HAL_TIM_ConfigClockSource+0x1c>
 800343c:	2302      	movs	r3, #2
 800343e:	e0b4      	b.n	80035aa <HAL_TIM_ConfigClockSource+0x186>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2201      	movs	r2, #1
 8003444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2202      	movs	r2, #2
 800344c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800345e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003466:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	68ba      	ldr	r2, [r7, #8]
 800346e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003478:	d03e      	beq.n	80034f8 <HAL_TIM_ConfigClockSource+0xd4>
 800347a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800347e:	f200 8087 	bhi.w	8003590 <HAL_TIM_ConfigClockSource+0x16c>
 8003482:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003486:	f000 8086 	beq.w	8003596 <HAL_TIM_ConfigClockSource+0x172>
 800348a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800348e:	d87f      	bhi.n	8003590 <HAL_TIM_ConfigClockSource+0x16c>
 8003490:	2b70      	cmp	r3, #112	; 0x70
 8003492:	d01a      	beq.n	80034ca <HAL_TIM_ConfigClockSource+0xa6>
 8003494:	2b70      	cmp	r3, #112	; 0x70
 8003496:	d87b      	bhi.n	8003590 <HAL_TIM_ConfigClockSource+0x16c>
 8003498:	2b60      	cmp	r3, #96	; 0x60
 800349a:	d050      	beq.n	800353e <HAL_TIM_ConfigClockSource+0x11a>
 800349c:	2b60      	cmp	r3, #96	; 0x60
 800349e:	d877      	bhi.n	8003590 <HAL_TIM_ConfigClockSource+0x16c>
 80034a0:	2b50      	cmp	r3, #80	; 0x50
 80034a2:	d03c      	beq.n	800351e <HAL_TIM_ConfigClockSource+0xfa>
 80034a4:	2b50      	cmp	r3, #80	; 0x50
 80034a6:	d873      	bhi.n	8003590 <HAL_TIM_ConfigClockSource+0x16c>
 80034a8:	2b40      	cmp	r3, #64	; 0x40
 80034aa:	d058      	beq.n	800355e <HAL_TIM_ConfigClockSource+0x13a>
 80034ac:	2b40      	cmp	r3, #64	; 0x40
 80034ae:	d86f      	bhi.n	8003590 <HAL_TIM_ConfigClockSource+0x16c>
 80034b0:	2b30      	cmp	r3, #48	; 0x30
 80034b2:	d064      	beq.n	800357e <HAL_TIM_ConfigClockSource+0x15a>
 80034b4:	2b30      	cmp	r3, #48	; 0x30
 80034b6:	d86b      	bhi.n	8003590 <HAL_TIM_ConfigClockSource+0x16c>
 80034b8:	2b20      	cmp	r3, #32
 80034ba:	d060      	beq.n	800357e <HAL_TIM_ConfigClockSource+0x15a>
 80034bc:	2b20      	cmp	r3, #32
 80034be:	d867      	bhi.n	8003590 <HAL_TIM_ConfigClockSource+0x16c>
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d05c      	beq.n	800357e <HAL_TIM_ConfigClockSource+0x15a>
 80034c4:	2b10      	cmp	r3, #16
 80034c6:	d05a      	beq.n	800357e <HAL_TIM_ConfigClockSource+0x15a>
 80034c8:	e062      	b.n	8003590 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6818      	ldr	r0, [r3, #0]
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	6899      	ldr	r1, [r3, #8]
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	685a      	ldr	r2, [r3, #4]
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	68db      	ldr	r3, [r3, #12]
 80034da:	f000 fae1 	bl	8003aa0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80034ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	68ba      	ldr	r2, [r7, #8]
 80034f4:	609a      	str	r2, [r3, #8]
      break;
 80034f6:	e04f      	b.n	8003598 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6818      	ldr	r0, [r3, #0]
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	6899      	ldr	r1, [r3, #8]
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	685a      	ldr	r2, [r3, #4]
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	f000 faca 	bl	8003aa0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	689a      	ldr	r2, [r3, #8]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800351a:	609a      	str	r2, [r3, #8]
      break;
 800351c:	e03c      	b.n	8003598 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6818      	ldr	r0, [r3, #0]
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	6859      	ldr	r1, [r3, #4]
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	68db      	ldr	r3, [r3, #12]
 800352a:	461a      	mov	r2, r3
 800352c:	f000 f988 	bl	8003840 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	2150      	movs	r1, #80	; 0x50
 8003536:	4618      	mov	r0, r3
 8003538:	f000 fa97 	bl	8003a6a <TIM_ITRx_SetConfig>
      break;
 800353c:	e02c      	b.n	8003598 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6818      	ldr	r0, [r3, #0]
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	6859      	ldr	r1, [r3, #4]
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	68db      	ldr	r3, [r3, #12]
 800354a:	461a      	mov	r2, r3
 800354c:	f000 f9e4 	bl	8003918 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	2160      	movs	r1, #96	; 0x60
 8003556:	4618      	mov	r0, r3
 8003558:	f000 fa87 	bl	8003a6a <TIM_ITRx_SetConfig>
      break;
 800355c:	e01c      	b.n	8003598 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6818      	ldr	r0, [r3, #0]
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	6859      	ldr	r1, [r3, #4]
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	68db      	ldr	r3, [r3, #12]
 800356a:	461a      	mov	r2, r3
 800356c:	f000 f968 	bl	8003840 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	2140      	movs	r1, #64	; 0x40
 8003576:	4618      	mov	r0, r3
 8003578:	f000 fa77 	bl	8003a6a <TIM_ITRx_SetConfig>
      break;
 800357c:	e00c      	b.n	8003598 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4619      	mov	r1, r3
 8003588:	4610      	mov	r0, r2
 800358a:	f000 fa6e 	bl	8003a6a <TIM_ITRx_SetConfig>
      break;
 800358e:	e003      	b.n	8003598 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	73fb      	strb	r3, [r7, #15]
      break;
 8003594:	e000      	b.n	8003598 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003596:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2201      	movs	r2, #1
 800359c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2200      	movs	r2, #0
 80035a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80035a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3710      	adds	r7, #16
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}

080035b2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80035b2:	b480      	push	{r7}
 80035b4:	b083      	sub	sp, #12
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80035ba:	bf00      	nop
 80035bc:	370c      	adds	r7, #12
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr

080035c6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80035c6:	b480      	push	{r7}
 80035c8:	b083      	sub	sp, #12
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80035ce:	bf00      	nop
 80035d0:	370c      	adds	r7, #12
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr

080035da <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80035da:	b480      	push	{r7}
 80035dc:	b083      	sub	sp, #12
 80035de:	af00      	add	r7, sp, #0
 80035e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80035e2:	bf00      	nop
 80035e4:	370c      	adds	r7, #12
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr

080035ee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80035ee:	b480      	push	{r7}
 80035f0:	b083      	sub	sp, #12
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80035f6:	bf00      	nop
 80035f8:	370c      	adds	r7, #12
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr

08003602 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003602:	b480      	push	{r7}
 8003604:	b083      	sub	sp, #12
 8003606:	af00      	add	r7, sp, #0
 8003608:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800360a:	bf00      	nop
 800360c:	370c      	adds	r7, #12
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr
	...

08003618 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003618:	b480      	push	{r7}
 800361a:	b085      	sub	sp, #20
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
 8003620:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	4a40      	ldr	r2, [pc, #256]	; (800372c <TIM_Base_SetConfig+0x114>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d013      	beq.n	8003658 <TIM_Base_SetConfig+0x40>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003636:	d00f      	beq.n	8003658 <TIM_Base_SetConfig+0x40>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	4a3d      	ldr	r2, [pc, #244]	; (8003730 <TIM_Base_SetConfig+0x118>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d00b      	beq.n	8003658 <TIM_Base_SetConfig+0x40>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	4a3c      	ldr	r2, [pc, #240]	; (8003734 <TIM_Base_SetConfig+0x11c>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d007      	beq.n	8003658 <TIM_Base_SetConfig+0x40>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	4a3b      	ldr	r2, [pc, #236]	; (8003738 <TIM_Base_SetConfig+0x120>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d003      	beq.n	8003658 <TIM_Base_SetConfig+0x40>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	4a3a      	ldr	r2, [pc, #232]	; (800373c <TIM_Base_SetConfig+0x124>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d108      	bne.n	800366a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800365e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	68fa      	ldr	r2, [r7, #12]
 8003666:	4313      	orrs	r3, r2
 8003668:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4a2f      	ldr	r2, [pc, #188]	; (800372c <TIM_Base_SetConfig+0x114>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d02b      	beq.n	80036ca <TIM_Base_SetConfig+0xb2>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003678:	d027      	beq.n	80036ca <TIM_Base_SetConfig+0xb2>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	4a2c      	ldr	r2, [pc, #176]	; (8003730 <TIM_Base_SetConfig+0x118>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d023      	beq.n	80036ca <TIM_Base_SetConfig+0xb2>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	4a2b      	ldr	r2, [pc, #172]	; (8003734 <TIM_Base_SetConfig+0x11c>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d01f      	beq.n	80036ca <TIM_Base_SetConfig+0xb2>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	4a2a      	ldr	r2, [pc, #168]	; (8003738 <TIM_Base_SetConfig+0x120>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d01b      	beq.n	80036ca <TIM_Base_SetConfig+0xb2>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	4a29      	ldr	r2, [pc, #164]	; (800373c <TIM_Base_SetConfig+0x124>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d017      	beq.n	80036ca <TIM_Base_SetConfig+0xb2>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	4a28      	ldr	r2, [pc, #160]	; (8003740 <TIM_Base_SetConfig+0x128>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d013      	beq.n	80036ca <TIM_Base_SetConfig+0xb2>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	4a27      	ldr	r2, [pc, #156]	; (8003744 <TIM_Base_SetConfig+0x12c>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d00f      	beq.n	80036ca <TIM_Base_SetConfig+0xb2>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	4a26      	ldr	r2, [pc, #152]	; (8003748 <TIM_Base_SetConfig+0x130>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d00b      	beq.n	80036ca <TIM_Base_SetConfig+0xb2>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	4a25      	ldr	r2, [pc, #148]	; (800374c <TIM_Base_SetConfig+0x134>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d007      	beq.n	80036ca <TIM_Base_SetConfig+0xb2>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	4a24      	ldr	r2, [pc, #144]	; (8003750 <TIM_Base_SetConfig+0x138>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d003      	beq.n	80036ca <TIM_Base_SetConfig+0xb2>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4a23      	ldr	r2, [pc, #140]	; (8003754 <TIM_Base_SetConfig+0x13c>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d108      	bne.n	80036dc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	68db      	ldr	r3, [r3, #12]
 80036d6:	68fa      	ldr	r2, [r7, #12]
 80036d8:	4313      	orrs	r3, r2
 80036da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	695b      	ldr	r3, [r3, #20]
 80036e6:	4313      	orrs	r3, r2
 80036e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	68fa      	ldr	r2, [r7, #12]
 80036ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	689a      	ldr	r2, [r3, #8]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	4a0a      	ldr	r2, [pc, #40]	; (800372c <TIM_Base_SetConfig+0x114>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d003      	beq.n	8003710 <TIM_Base_SetConfig+0xf8>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	4a0c      	ldr	r2, [pc, #48]	; (800373c <TIM_Base_SetConfig+0x124>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d103      	bne.n	8003718 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	691a      	ldr	r2, [r3, #16]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	615a      	str	r2, [r3, #20]
}
 800371e:	bf00      	nop
 8003720:	3714      	adds	r7, #20
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr
 800372a:	bf00      	nop
 800372c:	40010000 	.word	0x40010000
 8003730:	40000400 	.word	0x40000400
 8003734:	40000800 	.word	0x40000800
 8003738:	40000c00 	.word	0x40000c00
 800373c:	40010400 	.word	0x40010400
 8003740:	40014000 	.word	0x40014000
 8003744:	40014400 	.word	0x40014400
 8003748:	40014800 	.word	0x40014800
 800374c:	40001800 	.word	0x40001800
 8003750:	40001c00 	.word	0x40001c00
 8003754:	40002000 	.word	0x40002000

08003758 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003758:	b480      	push	{r7}
 800375a:	b087      	sub	sp, #28
 800375c:	af00      	add	r7, sp, #0
 800375e:	60f8      	str	r0, [r7, #12]
 8003760:	60b9      	str	r1, [r7, #8]
 8003762:	607a      	str	r2, [r7, #4]
 8003764:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	6a1b      	ldr	r3, [r3, #32]
 800376a:	f023 0201 	bic.w	r2, r3, #1
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	699b      	ldr	r3, [r3, #24]
 8003776:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	6a1b      	ldr	r3, [r3, #32]
 800377c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	4a28      	ldr	r2, [pc, #160]	; (8003824 <TIM_TI1_SetConfig+0xcc>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d01b      	beq.n	80037be <TIM_TI1_SetConfig+0x66>
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800378c:	d017      	beq.n	80037be <TIM_TI1_SetConfig+0x66>
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	4a25      	ldr	r2, [pc, #148]	; (8003828 <TIM_TI1_SetConfig+0xd0>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d013      	beq.n	80037be <TIM_TI1_SetConfig+0x66>
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	4a24      	ldr	r2, [pc, #144]	; (800382c <TIM_TI1_SetConfig+0xd4>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d00f      	beq.n	80037be <TIM_TI1_SetConfig+0x66>
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	4a23      	ldr	r2, [pc, #140]	; (8003830 <TIM_TI1_SetConfig+0xd8>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d00b      	beq.n	80037be <TIM_TI1_SetConfig+0x66>
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	4a22      	ldr	r2, [pc, #136]	; (8003834 <TIM_TI1_SetConfig+0xdc>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d007      	beq.n	80037be <TIM_TI1_SetConfig+0x66>
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	4a21      	ldr	r2, [pc, #132]	; (8003838 <TIM_TI1_SetConfig+0xe0>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d003      	beq.n	80037be <TIM_TI1_SetConfig+0x66>
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	4a20      	ldr	r2, [pc, #128]	; (800383c <TIM_TI1_SetConfig+0xe4>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d101      	bne.n	80037c2 <TIM_TI1_SetConfig+0x6a>
 80037be:	2301      	movs	r3, #1
 80037c0:	e000      	b.n	80037c4 <TIM_TI1_SetConfig+0x6c>
 80037c2:	2300      	movs	r3, #0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d008      	beq.n	80037da <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	f023 0303 	bic.w	r3, r3, #3
 80037ce:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80037d0:	697a      	ldr	r2, [r7, #20]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	4313      	orrs	r3, r2
 80037d6:	617b      	str	r3, [r7, #20]
 80037d8:	e003      	b.n	80037e2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	f043 0301 	orr.w	r3, r3, #1
 80037e0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80037e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	011b      	lsls	r3, r3, #4
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	697a      	ldr	r2, [r7, #20]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	f023 030a 	bic.w	r3, r3, #10
 80037fc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	f003 030a 	and.w	r3, r3, #10
 8003804:	693a      	ldr	r2, [r7, #16]
 8003806:	4313      	orrs	r3, r2
 8003808:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	697a      	ldr	r2, [r7, #20]
 800380e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	693a      	ldr	r2, [r7, #16]
 8003814:	621a      	str	r2, [r3, #32]
}
 8003816:	bf00      	nop
 8003818:	371c      	adds	r7, #28
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr
 8003822:	bf00      	nop
 8003824:	40010000 	.word	0x40010000
 8003828:	40000400 	.word	0x40000400
 800382c:	40000800 	.word	0x40000800
 8003830:	40000c00 	.word	0x40000c00
 8003834:	40010400 	.word	0x40010400
 8003838:	40014000 	.word	0x40014000
 800383c:	40001800 	.word	0x40001800

08003840 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003840:	b480      	push	{r7}
 8003842:	b087      	sub	sp, #28
 8003844:	af00      	add	r7, sp, #0
 8003846:	60f8      	str	r0, [r7, #12]
 8003848:	60b9      	str	r1, [r7, #8]
 800384a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	6a1b      	ldr	r3, [r3, #32]
 8003850:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	6a1b      	ldr	r3, [r3, #32]
 8003856:	f023 0201 	bic.w	r2, r3, #1
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	699b      	ldr	r3, [r3, #24]
 8003862:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800386a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	011b      	lsls	r3, r3, #4
 8003870:	693a      	ldr	r2, [r7, #16]
 8003872:	4313      	orrs	r3, r2
 8003874:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	f023 030a 	bic.w	r3, r3, #10
 800387c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800387e:	697a      	ldr	r2, [r7, #20]
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	4313      	orrs	r3, r2
 8003884:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	693a      	ldr	r2, [r7, #16]
 800388a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	697a      	ldr	r2, [r7, #20]
 8003890:	621a      	str	r2, [r3, #32]
}
 8003892:	bf00      	nop
 8003894:	371c      	adds	r7, #28
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr

0800389e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800389e:	b480      	push	{r7}
 80038a0:	b087      	sub	sp, #28
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	60f8      	str	r0, [r7, #12]
 80038a6:	60b9      	str	r1, [r7, #8]
 80038a8:	607a      	str	r2, [r7, #4]
 80038aa:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6a1b      	ldr	r3, [r3, #32]
 80038b0:	f023 0210 	bic.w	r2, r3, #16
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	699b      	ldr	r3, [r3, #24]
 80038bc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	6a1b      	ldr	r3, [r3, #32]
 80038c2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038ca:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	021b      	lsls	r3, r3, #8
 80038d0:	697a      	ldr	r2, [r7, #20]
 80038d2:	4313      	orrs	r3, r2
 80038d4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80038dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	031b      	lsls	r3, r3, #12
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	697a      	ldr	r2, [r7, #20]
 80038e6:	4313      	orrs	r3, r2
 80038e8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80038f0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	011b      	lsls	r3, r3, #4
 80038f6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80038fa:	693a      	ldr	r2, [r7, #16]
 80038fc:	4313      	orrs	r3, r2
 80038fe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	697a      	ldr	r2, [r7, #20]
 8003904:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	693a      	ldr	r2, [r7, #16]
 800390a:	621a      	str	r2, [r3, #32]
}
 800390c:	bf00      	nop
 800390e:	371c      	adds	r7, #28
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr

08003918 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003918:	b480      	push	{r7}
 800391a:	b087      	sub	sp, #28
 800391c:	af00      	add	r7, sp, #0
 800391e:	60f8      	str	r0, [r7, #12]
 8003920:	60b9      	str	r1, [r7, #8]
 8003922:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	6a1b      	ldr	r3, [r3, #32]
 8003928:	f023 0210 	bic.w	r2, r3, #16
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	699b      	ldr	r3, [r3, #24]
 8003934:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	6a1b      	ldr	r3, [r3, #32]
 800393a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003942:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	031b      	lsls	r3, r3, #12
 8003948:	697a      	ldr	r2, [r7, #20]
 800394a:	4313      	orrs	r3, r2
 800394c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003954:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	011b      	lsls	r3, r3, #4
 800395a:	693a      	ldr	r2, [r7, #16]
 800395c:	4313      	orrs	r3, r2
 800395e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	697a      	ldr	r2, [r7, #20]
 8003964:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	693a      	ldr	r2, [r7, #16]
 800396a:	621a      	str	r2, [r3, #32]
}
 800396c:	bf00      	nop
 800396e:	371c      	adds	r7, #28
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr

08003978 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003978:	b480      	push	{r7}
 800397a:	b087      	sub	sp, #28
 800397c:	af00      	add	r7, sp, #0
 800397e:	60f8      	str	r0, [r7, #12]
 8003980:	60b9      	str	r1, [r7, #8]
 8003982:	607a      	str	r2, [r7, #4]
 8003984:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	6a1b      	ldr	r3, [r3, #32]
 800398a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	69db      	ldr	r3, [r3, #28]
 8003996:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	6a1b      	ldr	r3, [r3, #32]
 800399c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	f023 0303 	bic.w	r3, r3, #3
 80039a4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80039a6:	697a      	ldr	r2, [r7, #20]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	4313      	orrs	r3, r2
 80039ac:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039b4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	011b      	lsls	r3, r3, #4
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	697a      	ldr	r2, [r7, #20]
 80039be:	4313      	orrs	r3, r2
 80039c0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80039c8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	021b      	lsls	r3, r3, #8
 80039ce:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80039d2:	693a      	ldr	r2, [r7, #16]
 80039d4:	4313      	orrs	r3, r2
 80039d6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	697a      	ldr	r2, [r7, #20]
 80039dc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	693a      	ldr	r2, [r7, #16]
 80039e2:	621a      	str	r2, [r3, #32]
}
 80039e4:	bf00      	nop
 80039e6:	371c      	adds	r7, #28
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr

080039f0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b087      	sub	sp, #28
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	60f8      	str	r0, [r7, #12]
 80039f8:	60b9      	str	r1, [r7, #8]
 80039fa:	607a      	str	r2, [r7, #4]
 80039fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	6a1b      	ldr	r3, [r3, #32]
 8003a02:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	69db      	ldr	r3, [r3, #28]
 8003a0e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	6a1b      	ldr	r3, [r3, #32]
 8003a14:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a1c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	021b      	lsls	r3, r3, #8
 8003a22:	697a      	ldr	r2, [r7, #20]
 8003a24:	4313      	orrs	r3, r2
 8003a26:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003a2e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	031b      	lsls	r3, r3, #12
 8003a34:	b29b      	uxth	r3, r3
 8003a36:	697a      	ldr	r2, [r7, #20]
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8003a42:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	031b      	lsls	r3, r3, #12
 8003a48:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8003a4c:	693a      	ldr	r2, [r7, #16]
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	697a      	ldr	r2, [r7, #20]
 8003a56:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	693a      	ldr	r2, [r7, #16]
 8003a5c:	621a      	str	r2, [r3, #32]
}
 8003a5e:	bf00      	nop
 8003a60:	371c      	adds	r7, #28
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr

08003a6a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003a6a:	b480      	push	{r7}
 8003a6c:	b085      	sub	sp, #20
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	6078      	str	r0, [r7, #4]
 8003a72:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a80:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a82:	683a      	ldr	r2, [r7, #0]
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	4313      	orrs	r3, r2
 8003a88:	f043 0307 	orr.w	r3, r3, #7
 8003a8c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	68fa      	ldr	r2, [r7, #12]
 8003a92:	609a      	str	r2, [r3, #8]
}
 8003a94:	bf00      	nop
 8003a96:	3714      	adds	r7, #20
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr

08003aa0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b087      	sub	sp, #28
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	60f8      	str	r0, [r7, #12]
 8003aa8:	60b9      	str	r1, [r7, #8]
 8003aaa:	607a      	str	r2, [r7, #4]
 8003aac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003aba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	021a      	lsls	r2, r3, #8
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	431a      	orrs	r2, r3
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	697a      	ldr	r2, [r7, #20]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	697a      	ldr	r2, [r7, #20]
 8003ad2:	609a      	str	r2, [r3, #8]
}
 8003ad4:	bf00      	nop
 8003ad6:	371c      	adds	r7, #28
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr

08003ae0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b085      	sub	sp, #20
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
 8003ae8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d101      	bne.n	8003af8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003af4:	2302      	movs	r3, #2
 8003af6:	e05a      	b.n	8003bae <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2201      	movs	r2, #1
 8003afc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2202      	movs	r2, #2
 8003b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b1e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	68fa      	ldr	r2, [r7, #12]
 8003b26:	4313      	orrs	r3, r2
 8003b28:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	68fa      	ldr	r2, [r7, #12]
 8003b30:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a21      	ldr	r2, [pc, #132]	; (8003bbc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d022      	beq.n	8003b82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b44:	d01d      	beq.n	8003b82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a1d      	ldr	r2, [pc, #116]	; (8003bc0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d018      	beq.n	8003b82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a1b      	ldr	r2, [pc, #108]	; (8003bc4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d013      	beq.n	8003b82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a1a      	ldr	r2, [pc, #104]	; (8003bc8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d00e      	beq.n	8003b82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a18      	ldr	r2, [pc, #96]	; (8003bcc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d009      	beq.n	8003b82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a17      	ldr	r2, [pc, #92]	; (8003bd0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d004      	beq.n	8003b82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a15      	ldr	r2, [pc, #84]	; (8003bd4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d10c      	bne.n	8003b9c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b88:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	68ba      	ldr	r2, [r7, #8]
 8003b90:	4313      	orrs	r3, r2
 8003b92:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	68ba      	ldr	r2, [r7, #8]
 8003b9a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003bac:	2300      	movs	r3, #0
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3714      	adds	r7, #20
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr
 8003bba:	bf00      	nop
 8003bbc:	40010000 	.word	0x40010000
 8003bc0:	40000400 	.word	0x40000400
 8003bc4:	40000800 	.word	0x40000800
 8003bc8:	40000c00 	.word	0x40000c00
 8003bcc:	40010400 	.word	0x40010400
 8003bd0:	40014000 	.word	0x40014000
 8003bd4:	40001800 	.word	0x40001800

08003bd8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b083      	sub	sp, #12
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003be0:	bf00      	nop
 8003be2:	370c      	adds	r7, #12
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr

08003bec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b083      	sub	sp, #12
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003bf4:	bf00      	nop
 8003bf6:	370c      	adds	r7, #12
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr

08003c00 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b082      	sub	sp, #8
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d101      	bne.n	8003c12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e03f      	b.n	8003c92 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d106      	bne.n	8003c2c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2200      	movs	r2, #0
 8003c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f7fd f9ba 	bl	8000fa0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2224      	movs	r2, #36	; 0x24
 8003c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	68da      	ldr	r2, [r3, #12]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c42:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	f000 fc7b 	bl	8004540 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	691a      	ldr	r2, [r3, #16]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c58:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	695a      	ldr	r2, [r3, #20]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c68:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	68da      	ldr	r2, [r3, #12]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c78:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2220      	movs	r2, #32
 8003c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2220      	movs	r2, #32
 8003c8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c90:	2300      	movs	r3, #0
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3708      	adds	r7, #8
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}
	...

08003c9c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b0ba      	sub	sp, #232	; 0xe8
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	695b      	ldr	r3, [r3, #20]
 8003cbe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003cce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cd2:	f003 030f 	and.w	r3, r3, #15
 8003cd6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003cda:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d10f      	bne.n	8003d02 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ce2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ce6:	f003 0320 	and.w	r3, r3, #32
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d009      	beq.n	8003d02 <HAL_UART_IRQHandler+0x66>
 8003cee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cf2:	f003 0320 	and.w	r3, r3, #32
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d003      	beq.n	8003d02 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f000 fb65 	bl	80043ca <UART_Receive_IT>
      return;
 8003d00:	e256      	b.n	80041b0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003d02:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	f000 80de 	beq.w	8003ec8 <HAL_UART_IRQHandler+0x22c>
 8003d0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d10:	f003 0301 	and.w	r3, r3, #1
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d106      	bne.n	8003d26 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003d18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d1c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	f000 80d1 	beq.w	8003ec8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003d26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d2a:	f003 0301 	and.w	r3, r3, #1
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d00b      	beq.n	8003d4a <HAL_UART_IRQHandler+0xae>
 8003d32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d005      	beq.n	8003d4a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d42:	f043 0201 	orr.w	r2, r3, #1
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d4e:	f003 0304 	and.w	r3, r3, #4
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d00b      	beq.n	8003d6e <HAL_UART_IRQHandler+0xd2>
 8003d56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d5a:	f003 0301 	and.w	r3, r3, #1
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d005      	beq.n	8003d6e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d66:	f043 0202 	orr.w	r2, r3, #2
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d72:	f003 0302 	and.w	r3, r3, #2
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d00b      	beq.n	8003d92 <HAL_UART_IRQHandler+0xf6>
 8003d7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d7e:	f003 0301 	and.w	r3, r3, #1
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d005      	beq.n	8003d92 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8a:	f043 0204 	orr.w	r2, r3, #4
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003d92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d96:	f003 0308 	and.w	r3, r3, #8
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d011      	beq.n	8003dc2 <HAL_UART_IRQHandler+0x126>
 8003d9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003da2:	f003 0320 	and.w	r3, r3, #32
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d105      	bne.n	8003db6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003daa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003dae:	f003 0301 	and.w	r3, r3, #1
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d005      	beq.n	8003dc2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dba:	f043 0208 	orr.w	r2, r3, #8
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	f000 81ed 	beq.w	80041a6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003dcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dd0:	f003 0320 	and.w	r3, r3, #32
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d008      	beq.n	8003dea <HAL_UART_IRQHandler+0x14e>
 8003dd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ddc:	f003 0320 	and.w	r3, r3, #32
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d002      	beq.n	8003dea <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	f000 faf0 	bl	80043ca <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	695b      	ldr	r3, [r3, #20]
 8003df0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003df4:	2b40      	cmp	r3, #64	; 0x40
 8003df6:	bf0c      	ite	eq
 8003df8:	2301      	moveq	r3, #1
 8003dfa:	2300      	movne	r3, #0
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e06:	f003 0308 	and.w	r3, r3, #8
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d103      	bne.n	8003e16 <HAL_UART_IRQHandler+0x17a>
 8003e0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d04f      	beq.n	8003eb6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f000 f9f8 	bl	800420c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	695b      	ldr	r3, [r3, #20]
 8003e22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e26:	2b40      	cmp	r3, #64	; 0x40
 8003e28:	d141      	bne.n	8003eae <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	3314      	adds	r3, #20
 8003e30:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e34:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003e38:	e853 3f00 	ldrex	r3, [r3]
 8003e3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003e40:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003e44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e48:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	3314      	adds	r3, #20
 8003e52:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003e56:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003e5a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e5e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003e62:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003e66:	e841 2300 	strex	r3, r2, [r1]
 8003e6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003e6e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d1d9      	bne.n	8003e2a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d013      	beq.n	8003ea6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e82:	4a7d      	ldr	r2, [pc, #500]	; (8004078 <HAL_UART_IRQHandler+0x3dc>)
 8003e84:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f7fd ff72 	bl	8001d74 <HAL_DMA_Abort_IT>
 8003e90:	4603      	mov	r3, r0
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d016      	beq.n	8003ec4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e9c:	687a      	ldr	r2, [r7, #4]
 8003e9e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ea0:	4610      	mov	r0, r2
 8003ea2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ea4:	e00e      	b.n	8003ec4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f000 f99a 	bl	80041e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003eac:	e00a      	b.n	8003ec4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f000 f996 	bl	80041e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003eb4:	e006      	b.n	8003ec4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f000 f992 	bl	80041e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003ec2:	e170      	b.n	80041a6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ec4:	bf00      	nop
    return;
 8003ec6:	e16e      	b.n	80041a6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	f040 814a 	bne.w	8004166 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003ed2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ed6:	f003 0310 	and.w	r3, r3, #16
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	f000 8143 	beq.w	8004166 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003ee0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ee4:	f003 0310 	and.w	r3, r3, #16
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	f000 813c 	beq.w	8004166 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003eee:	2300      	movs	r3, #0
 8003ef0:	60bb      	str	r3, [r7, #8]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	60bb      	str	r3, [r7, #8]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	60bb      	str	r3, [r7, #8]
 8003f02:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	695b      	ldr	r3, [r3, #20]
 8003f0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f0e:	2b40      	cmp	r3, #64	; 0x40
 8003f10:	f040 80b4 	bne.w	800407c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003f20:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	f000 8140 	beq.w	80041aa <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003f2e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003f32:	429a      	cmp	r2, r3
 8003f34:	f080 8139 	bcs.w	80041aa <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003f3e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f44:	69db      	ldr	r3, [r3, #28]
 8003f46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f4a:	f000 8088 	beq.w	800405e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	330c      	adds	r3, #12
 8003f54:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f58:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003f5c:	e853 3f00 	ldrex	r3, [r3]
 8003f60:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003f64:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003f68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f6c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	330c      	adds	r3, #12
 8003f76:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003f7a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003f7e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f82:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003f86:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003f8a:	e841 2300 	strex	r3, r2, [r1]
 8003f8e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003f92:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d1d9      	bne.n	8003f4e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	3314      	adds	r3, #20
 8003fa0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fa2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fa4:	e853 3f00 	ldrex	r3, [r3]
 8003fa8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003faa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003fac:	f023 0301 	bic.w	r3, r3, #1
 8003fb0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	3314      	adds	r3, #20
 8003fba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003fbe:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003fc2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fc4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003fc6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003fca:	e841 2300 	strex	r3, r2, [r1]
 8003fce:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003fd0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d1e1      	bne.n	8003f9a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	3314      	adds	r3, #20
 8003fdc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fde:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003fe0:	e853 3f00 	ldrex	r3, [r3]
 8003fe4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003fe6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fe8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003fec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	3314      	adds	r3, #20
 8003ff6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003ffa:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003ffc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ffe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004000:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004002:	e841 2300 	strex	r3, r2, [r1]
 8004006:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004008:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800400a:	2b00      	cmp	r3, #0
 800400c:	d1e3      	bne.n	8003fd6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2220      	movs	r2, #32
 8004012:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2200      	movs	r2, #0
 800401a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	330c      	adds	r3, #12
 8004022:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004024:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004026:	e853 3f00 	ldrex	r3, [r3]
 800402a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800402c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800402e:	f023 0310 	bic.w	r3, r3, #16
 8004032:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	330c      	adds	r3, #12
 800403c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004040:	65ba      	str	r2, [r7, #88]	; 0x58
 8004042:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004044:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004046:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004048:	e841 2300 	strex	r3, r2, [r1]
 800404c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800404e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004050:	2b00      	cmp	r3, #0
 8004052:	d1e3      	bne.n	800401c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004058:	4618      	mov	r0, r3
 800405a:	f7fd fe1b 	bl	8001c94 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004066:	b29b      	uxth	r3, r3
 8004068:	1ad3      	subs	r3, r2, r3
 800406a:	b29b      	uxth	r3, r3
 800406c:	4619      	mov	r1, r3
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f000 f8c0 	bl	80041f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004074:	e099      	b.n	80041aa <HAL_UART_IRQHandler+0x50e>
 8004076:	bf00      	nop
 8004078:	080042d3 	.word	0x080042d3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004084:	b29b      	uxth	r3, r3
 8004086:	1ad3      	subs	r3, r2, r3
 8004088:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004090:	b29b      	uxth	r3, r3
 8004092:	2b00      	cmp	r3, #0
 8004094:	f000 808b 	beq.w	80041ae <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004098:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800409c:	2b00      	cmp	r3, #0
 800409e:	f000 8086 	beq.w	80041ae <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	330c      	adds	r3, #12
 80040a8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040ac:	e853 3f00 	ldrex	r3, [r3]
 80040b0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80040b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80040b8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	330c      	adds	r3, #12
 80040c2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80040c6:	647a      	str	r2, [r7, #68]	; 0x44
 80040c8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80040cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80040ce:	e841 2300 	strex	r3, r2, [r1]
 80040d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80040d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d1e3      	bne.n	80040a2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	3314      	adds	r3, #20
 80040e0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e4:	e853 3f00 	ldrex	r3, [r3]
 80040e8:	623b      	str	r3, [r7, #32]
   return(result);
 80040ea:	6a3b      	ldr	r3, [r7, #32]
 80040ec:	f023 0301 	bic.w	r3, r3, #1
 80040f0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	3314      	adds	r3, #20
 80040fa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80040fe:	633a      	str	r2, [r7, #48]	; 0x30
 8004100:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004102:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004104:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004106:	e841 2300 	strex	r3, r2, [r1]
 800410a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800410c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800410e:	2b00      	cmp	r3, #0
 8004110:	d1e3      	bne.n	80040da <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2220      	movs	r2, #32
 8004116:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2200      	movs	r2, #0
 800411e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	330c      	adds	r3, #12
 8004126:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	e853 3f00 	ldrex	r3, [r3]
 800412e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	f023 0310 	bic.w	r3, r3, #16
 8004136:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	330c      	adds	r3, #12
 8004140:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004144:	61fa      	str	r2, [r7, #28]
 8004146:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004148:	69b9      	ldr	r1, [r7, #24]
 800414a:	69fa      	ldr	r2, [r7, #28]
 800414c:	e841 2300 	strex	r3, r2, [r1]
 8004150:	617b      	str	r3, [r7, #20]
   return(result);
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d1e3      	bne.n	8004120 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004158:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800415c:	4619      	mov	r1, r3
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f000 f848 	bl	80041f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004164:	e023      	b.n	80041ae <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004166:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800416a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800416e:	2b00      	cmp	r3, #0
 8004170:	d009      	beq.n	8004186 <HAL_UART_IRQHandler+0x4ea>
 8004172:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004176:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800417a:	2b00      	cmp	r3, #0
 800417c:	d003      	beq.n	8004186 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f000 f8bb 	bl	80042fa <UART_Transmit_IT>
    return;
 8004184:	e014      	b.n	80041b0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004186:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800418a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800418e:	2b00      	cmp	r3, #0
 8004190:	d00e      	beq.n	80041b0 <HAL_UART_IRQHandler+0x514>
 8004192:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004196:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800419a:	2b00      	cmp	r3, #0
 800419c:	d008      	beq.n	80041b0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f000 f8fb 	bl	800439a <UART_EndTransmit_IT>
    return;
 80041a4:	e004      	b.n	80041b0 <HAL_UART_IRQHandler+0x514>
    return;
 80041a6:	bf00      	nop
 80041a8:	e002      	b.n	80041b0 <HAL_UART_IRQHandler+0x514>
      return;
 80041aa:	bf00      	nop
 80041ac:	e000      	b.n	80041b0 <HAL_UART_IRQHandler+0x514>
      return;
 80041ae:	bf00      	nop
  }
}
 80041b0:	37e8      	adds	r7, #232	; 0xe8
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	bf00      	nop

080041b8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b083      	sub	sp, #12
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80041c0:	bf00      	nop
 80041c2:	370c      	adds	r7, #12
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr

080041cc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b083      	sub	sp, #12
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80041d4:	bf00      	nop
 80041d6:	370c      	adds	r7, #12
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr

080041e0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b083      	sub	sp, #12
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80041e8:	bf00      	nop
 80041ea:	370c      	adds	r7, #12
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr

080041f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b083      	sub	sp, #12
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
 80041fc:	460b      	mov	r3, r1
 80041fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004200:	bf00      	nop
 8004202:	370c      	adds	r7, #12
 8004204:	46bd      	mov	sp, r7
 8004206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420a:	4770      	bx	lr

0800420c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800420c:	b480      	push	{r7}
 800420e:	b095      	sub	sp, #84	; 0x54
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	330c      	adds	r3, #12
 800421a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800421c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800421e:	e853 3f00 	ldrex	r3, [r3]
 8004222:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004226:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800422a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	330c      	adds	r3, #12
 8004232:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004234:	643a      	str	r2, [r7, #64]	; 0x40
 8004236:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004238:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800423a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800423c:	e841 2300 	strex	r3, r2, [r1]
 8004240:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004244:	2b00      	cmp	r3, #0
 8004246:	d1e5      	bne.n	8004214 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	3314      	adds	r3, #20
 800424e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004250:	6a3b      	ldr	r3, [r7, #32]
 8004252:	e853 3f00 	ldrex	r3, [r3]
 8004256:	61fb      	str	r3, [r7, #28]
   return(result);
 8004258:	69fb      	ldr	r3, [r7, #28]
 800425a:	f023 0301 	bic.w	r3, r3, #1
 800425e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	3314      	adds	r3, #20
 8004266:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004268:	62fa      	str	r2, [r7, #44]	; 0x2c
 800426a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800426c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800426e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004270:	e841 2300 	strex	r3, r2, [r1]
 8004274:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004278:	2b00      	cmp	r3, #0
 800427a:	d1e5      	bne.n	8004248 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004280:	2b01      	cmp	r3, #1
 8004282:	d119      	bne.n	80042b8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	330c      	adds	r3, #12
 800428a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	e853 3f00 	ldrex	r3, [r3]
 8004292:	60bb      	str	r3, [r7, #8]
   return(result);
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	f023 0310 	bic.w	r3, r3, #16
 800429a:	647b      	str	r3, [r7, #68]	; 0x44
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	330c      	adds	r3, #12
 80042a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80042a4:	61ba      	str	r2, [r7, #24]
 80042a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042a8:	6979      	ldr	r1, [r7, #20]
 80042aa:	69ba      	ldr	r2, [r7, #24]
 80042ac:	e841 2300 	strex	r3, r2, [r1]
 80042b0:	613b      	str	r3, [r7, #16]
   return(result);
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d1e5      	bne.n	8004284 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2220      	movs	r2, #32
 80042bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2200      	movs	r2, #0
 80042c4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80042c6:	bf00      	nop
 80042c8:	3754      	adds	r7, #84	; 0x54
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr

080042d2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80042d2:	b580      	push	{r7, lr}
 80042d4:	b084      	sub	sp, #16
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042de:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2200      	movs	r2, #0
 80042e4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2200      	movs	r2, #0
 80042ea:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80042ec:	68f8      	ldr	r0, [r7, #12]
 80042ee:	f7ff ff77 	bl	80041e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80042f2:	bf00      	nop
 80042f4:	3710      	adds	r7, #16
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}

080042fa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80042fa:	b480      	push	{r7}
 80042fc:	b085      	sub	sp, #20
 80042fe:	af00      	add	r7, sp, #0
 8004300:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004308:	b2db      	uxtb	r3, r3
 800430a:	2b21      	cmp	r3, #33	; 0x21
 800430c:	d13e      	bne.n	800438c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004316:	d114      	bne.n	8004342 <UART_Transmit_IT+0x48>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	691b      	ldr	r3, [r3, #16]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d110      	bne.n	8004342 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6a1b      	ldr	r3, [r3, #32]
 8004324:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	881b      	ldrh	r3, [r3, #0]
 800432a:	461a      	mov	r2, r3
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004334:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6a1b      	ldr	r3, [r3, #32]
 800433a:	1c9a      	adds	r2, r3, #2
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	621a      	str	r2, [r3, #32]
 8004340:	e008      	b.n	8004354 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6a1b      	ldr	r3, [r3, #32]
 8004346:	1c59      	adds	r1, r3, #1
 8004348:	687a      	ldr	r2, [r7, #4]
 800434a:	6211      	str	r1, [r2, #32]
 800434c:	781a      	ldrb	r2, [r3, #0]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004358:	b29b      	uxth	r3, r3
 800435a:	3b01      	subs	r3, #1
 800435c:	b29b      	uxth	r3, r3
 800435e:	687a      	ldr	r2, [r7, #4]
 8004360:	4619      	mov	r1, r3
 8004362:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004364:	2b00      	cmp	r3, #0
 8004366:	d10f      	bne.n	8004388 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	68da      	ldr	r2, [r3, #12]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004376:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	68da      	ldr	r2, [r3, #12]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004386:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004388:	2300      	movs	r3, #0
 800438a:	e000      	b.n	800438e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800438c:	2302      	movs	r3, #2
  }
}
 800438e:	4618      	mov	r0, r3
 8004390:	3714      	adds	r7, #20
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr

0800439a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800439a:	b580      	push	{r7, lr}
 800439c:	b082      	sub	sp, #8
 800439e:	af00      	add	r7, sp, #0
 80043a0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	68da      	ldr	r2, [r3, #12]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043b0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2220      	movs	r2, #32
 80043b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f7ff fefc 	bl	80041b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80043c0:	2300      	movs	r3, #0
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3708      	adds	r7, #8
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}

080043ca <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80043ca:	b580      	push	{r7, lr}
 80043cc:	b08c      	sub	sp, #48	; 0x30
 80043ce:	af00      	add	r7, sp, #0
 80043d0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	2b22      	cmp	r3, #34	; 0x22
 80043dc:	f040 80ab 	bne.w	8004536 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043e8:	d117      	bne.n	800441a <UART_Receive_IT+0x50>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	691b      	ldr	r3, [r3, #16]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d113      	bne.n	800441a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80043f2:	2300      	movs	r3, #0
 80043f4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043fa:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	b29b      	uxth	r3, r3
 8004404:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004408:	b29a      	uxth	r2, r3
 800440a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800440c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004412:	1c9a      	adds	r2, r3, #2
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	629a      	str	r2, [r3, #40]	; 0x28
 8004418:	e026      	b.n	8004468 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800441e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004420:	2300      	movs	r3, #0
 8004422:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800442c:	d007      	beq.n	800443e <UART_Receive_IT+0x74>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d10a      	bne.n	800444c <UART_Receive_IT+0x82>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	691b      	ldr	r3, [r3, #16]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d106      	bne.n	800444c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	b2da      	uxtb	r2, r3
 8004446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004448:	701a      	strb	r2, [r3, #0]
 800444a:	e008      	b.n	800445e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	b2db      	uxtb	r3, r3
 8004454:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004458:	b2da      	uxtb	r2, r3
 800445a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800445c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004462:	1c5a      	adds	r2, r3, #1
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800446c:	b29b      	uxth	r3, r3
 800446e:	3b01      	subs	r3, #1
 8004470:	b29b      	uxth	r3, r3
 8004472:	687a      	ldr	r2, [r7, #4]
 8004474:	4619      	mov	r1, r3
 8004476:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004478:	2b00      	cmp	r3, #0
 800447a:	d15a      	bne.n	8004532 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	68da      	ldr	r2, [r3, #12]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f022 0220 	bic.w	r2, r2, #32
 800448a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	68da      	ldr	r2, [r3, #12]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800449a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	695a      	ldr	r2, [r3, #20]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f022 0201 	bic.w	r2, r2, #1
 80044aa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2220      	movs	r2, #32
 80044b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d135      	bne.n	8004528 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2200      	movs	r2, #0
 80044c0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	330c      	adds	r3, #12
 80044c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	e853 3f00 	ldrex	r3, [r3]
 80044d0:	613b      	str	r3, [r7, #16]
   return(result);
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	f023 0310 	bic.w	r3, r3, #16
 80044d8:	627b      	str	r3, [r7, #36]	; 0x24
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	330c      	adds	r3, #12
 80044e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044e2:	623a      	str	r2, [r7, #32]
 80044e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044e6:	69f9      	ldr	r1, [r7, #28]
 80044e8:	6a3a      	ldr	r2, [r7, #32]
 80044ea:	e841 2300 	strex	r3, r2, [r1]
 80044ee:	61bb      	str	r3, [r7, #24]
   return(result);
 80044f0:	69bb      	ldr	r3, [r7, #24]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d1e5      	bne.n	80044c2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f003 0310 	and.w	r3, r3, #16
 8004500:	2b10      	cmp	r3, #16
 8004502:	d10a      	bne.n	800451a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004504:	2300      	movs	r3, #0
 8004506:	60fb      	str	r3, [r7, #12]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	60fb      	str	r3, [r7, #12]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	60fb      	str	r3, [r7, #12]
 8004518:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800451e:	4619      	mov	r1, r3
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	f7ff fe67 	bl	80041f4 <HAL_UARTEx_RxEventCallback>
 8004526:	e002      	b.n	800452e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	f7ff fe4f 	bl	80041cc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800452e:	2300      	movs	r3, #0
 8004530:	e002      	b.n	8004538 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004532:	2300      	movs	r3, #0
 8004534:	e000      	b.n	8004538 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004536:	2302      	movs	r3, #2
  }
}
 8004538:	4618      	mov	r0, r3
 800453a:	3730      	adds	r7, #48	; 0x30
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}

08004540 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004540:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004544:	b0c0      	sub	sp, #256	; 0x100
 8004546:	af00      	add	r7, sp, #0
 8004548:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800454c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	691b      	ldr	r3, [r3, #16]
 8004554:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800455c:	68d9      	ldr	r1, [r3, #12]
 800455e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	ea40 0301 	orr.w	r3, r0, r1
 8004568:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800456a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800456e:	689a      	ldr	r2, [r3, #8]
 8004570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004574:	691b      	ldr	r3, [r3, #16]
 8004576:	431a      	orrs	r2, r3
 8004578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800457c:	695b      	ldr	r3, [r3, #20]
 800457e:	431a      	orrs	r2, r3
 8004580:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004584:	69db      	ldr	r3, [r3, #28]
 8004586:	4313      	orrs	r3, r2
 8004588:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800458c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	68db      	ldr	r3, [r3, #12]
 8004594:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004598:	f021 010c 	bic.w	r1, r1, #12
 800459c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80045a6:	430b      	orrs	r3, r1
 80045a8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80045aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	695b      	ldr	r3, [r3, #20]
 80045b2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80045b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045ba:	6999      	ldr	r1, [r3, #24]
 80045bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	ea40 0301 	orr.w	r3, r0, r1
 80045c6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80045c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	4b8f      	ldr	r3, [pc, #572]	; (800480c <UART_SetConfig+0x2cc>)
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d005      	beq.n	80045e0 <UART_SetConfig+0xa0>
 80045d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	4b8d      	ldr	r3, [pc, #564]	; (8004810 <UART_SetConfig+0x2d0>)
 80045dc:	429a      	cmp	r2, r3
 80045de:	d104      	bne.n	80045ea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80045e0:	f7fe fcc0 	bl	8002f64 <HAL_RCC_GetPCLK2Freq>
 80045e4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80045e8:	e003      	b.n	80045f2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80045ea:	f7fe fca7 	bl	8002f3c <HAL_RCC_GetPCLK1Freq>
 80045ee:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045f6:	69db      	ldr	r3, [r3, #28]
 80045f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045fc:	f040 810c 	bne.w	8004818 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004600:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004604:	2200      	movs	r2, #0
 8004606:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800460a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800460e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004612:	4622      	mov	r2, r4
 8004614:	462b      	mov	r3, r5
 8004616:	1891      	adds	r1, r2, r2
 8004618:	65b9      	str	r1, [r7, #88]	; 0x58
 800461a:	415b      	adcs	r3, r3
 800461c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800461e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004622:	4621      	mov	r1, r4
 8004624:	eb12 0801 	adds.w	r8, r2, r1
 8004628:	4629      	mov	r1, r5
 800462a:	eb43 0901 	adc.w	r9, r3, r1
 800462e:	f04f 0200 	mov.w	r2, #0
 8004632:	f04f 0300 	mov.w	r3, #0
 8004636:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800463a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800463e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004642:	4690      	mov	r8, r2
 8004644:	4699      	mov	r9, r3
 8004646:	4623      	mov	r3, r4
 8004648:	eb18 0303 	adds.w	r3, r8, r3
 800464c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004650:	462b      	mov	r3, r5
 8004652:	eb49 0303 	adc.w	r3, r9, r3
 8004656:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800465a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	2200      	movs	r2, #0
 8004662:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004666:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800466a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800466e:	460b      	mov	r3, r1
 8004670:	18db      	adds	r3, r3, r3
 8004672:	653b      	str	r3, [r7, #80]	; 0x50
 8004674:	4613      	mov	r3, r2
 8004676:	eb42 0303 	adc.w	r3, r2, r3
 800467a:	657b      	str	r3, [r7, #84]	; 0x54
 800467c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004680:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004684:	f7fb fdb2 	bl	80001ec <__aeabi_uldivmod>
 8004688:	4602      	mov	r2, r0
 800468a:	460b      	mov	r3, r1
 800468c:	4b61      	ldr	r3, [pc, #388]	; (8004814 <UART_SetConfig+0x2d4>)
 800468e:	fba3 2302 	umull	r2, r3, r3, r2
 8004692:	095b      	lsrs	r3, r3, #5
 8004694:	011c      	lsls	r4, r3, #4
 8004696:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800469a:	2200      	movs	r2, #0
 800469c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80046a0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80046a4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80046a8:	4642      	mov	r2, r8
 80046aa:	464b      	mov	r3, r9
 80046ac:	1891      	adds	r1, r2, r2
 80046ae:	64b9      	str	r1, [r7, #72]	; 0x48
 80046b0:	415b      	adcs	r3, r3
 80046b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046b4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80046b8:	4641      	mov	r1, r8
 80046ba:	eb12 0a01 	adds.w	sl, r2, r1
 80046be:	4649      	mov	r1, r9
 80046c0:	eb43 0b01 	adc.w	fp, r3, r1
 80046c4:	f04f 0200 	mov.w	r2, #0
 80046c8:	f04f 0300 	mov.w	r3, #0
 80046cc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80046d0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80046d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80046d8:	4692      	mov	sl, r2
 80046da:	469b      	mov	fp, r3
 80046dc:	4643      	mov	r3, r8
 80046de:	eb1a 0303 	adds.w	r3, sl, r3
 80046e2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80046e6:	464b      	mov	r3, r9
 80046e8:	eb4b 0303 	adc.w	r3, fp, r3
 80046ec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80046f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	2200      	movs	r2, #0
 80046f8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80046fc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004700:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004704:	460b      	mov	r3, r1
 8004706:	18db      	adds	r3, r3, r3
 8004708:	643b      	str	r3, [r7, #64]	; 0x40
 800470a:	4613      	mov	r3, r2
 800470c:	eb42 0303 	adc.w	r3, r2, r3
 8004710:	647b      	str	r3, [r7, #68]	; 0x44
 8004712:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004716:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800471a:	f7fb fd67 	bl	80001ec <__aeabi_uldivmod>
 800471e:	4602      	mov	r2, r0
 8004720:	460b      	mov	r3, r1
 8004722:	4611      	mov	r1, r2
 8004724:	4b3b      	ldr	r3, [pc, #236]	; (8004814 <UART_SetConfig+0x2d4>)
 8004726:	fba3 2301 	umull	r2, r3, r3, r1
 800472a:	095b      	lsrs	r3, r3, #5
 800472c:	2264      	movs	r2, #100	; 0x64
 800472e:	fb02 f303 	mul.w	r3, r2, r3
 8004732:	1acb      	subs	r3, r1, r3
 8004734:	00db      	lsls	r3, r3, #3
 8004736:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800473a:	4b36      	ldr	r3, [pc, #216]	; (8004814 <UART_SetConfig+0x2d4>)
 800473c:	fba3 2302 	umull	r2, r3, r3, r2
 8004740:	095b      	lsrs	r3, r3, #5
 8004742:	005b      	lsls	r3, r3, #1
 8004744:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004748:	441c      	add	r4, r3
 800474a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800474e:	2200      	movs	r2, #0
 8004750:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004754:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004758:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800475c:	4642      	mov	r2, r8
 800475e:	464b      	mov	r3, r9
 8004760:	1891      	adds	r1, r2, r2
 8004762:	63b9      	str	r1, [r7, #56]	; 0x38
 8004764:	415b      	adcs	r3, r3
 8004766:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004768:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800476c:	4641      	mov	r1, r8
 800476e:	1851      	adds	r1, r2, r1
 8004770:	6339      	str	r1, [r7, #48]	; 0x30
 8004772:	4649      	mov	r1, r9
 8004774:	414b      	adcs	r3, r1
 8004776:	637b      	str	r3, [r7, #52]	; 0x34
 8004778:	f04f 0200 	mov.w	r2, #0
 800477c:	f04f 0300 	mov.w	r3, #0
 8004780:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004784:	4659      	mov	r1, fp
 8004786:	00cb      	lsls	r3, r1, #3
 8004788:	4651      	mov	r1, sl
 800478a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800478e:	4651      	mov	r1, sl
 8004790:	00ca      	lsls	r2, r1, #3
 8004792:	4610      	mov	r0, r2
 8004794:	4619      	mov	r1, r3
 8004796:	4603      	mov	r3, r0
 8004798:	4642      	mov	r2, r8
 800479a:	189b      	adds	r3, r3, r2
 800479c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80047a0:	464b      	mov	r3, r9
 80047a2:	460a      	mov	r2, r1
 80047a4:	eb42 0303 	adc.w	r3, r2, r3
 80047a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80047ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	2200      	movs	r2, #0
 80047b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80047b8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80047bc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80047c0:	460b      	mov	r3, r1
 80047c2:	18db      	adds	r3, r3, r3
 80047c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80047c6:	4613      	mov	r3, r2
 80047c8:	eb42 0303 	adc.w	r3, r2, r3
 80047cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047ce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80047d2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80047d6:	f7fb fd09 	bl	80001ec <__aeabi_uldivmod>
 80047da:	4602      	mov	r2, r0
 80047dc:	460b      	mov	r3, r1
 80047de:	4b0d      	ldr	r3, [pc, #52]	; (8004814 <UART_SetConfig+0x2d4>)
 80047e0:	fba3 1302 	umull	r1, r3, r3, r2
 80047e4:	095b      	lsrs	r3, r3, #5
 80047e6:	2164      	movs	r1, #100	; 0x64
 80047e8:	fb01 f303 	mul.w	r3, r1, r3
 80047ec:	1ad3      	subs	r3, r2, r3
 80047ee:	00db      	lsls	r3, r3, #3
 80047f0:	3332      	adds	r3, #50	; 0x32
 80047f2:	4a08      	ldr	r2, [pc, #32]	; (8004814 <UART_SetConfig+0x2d4>)
 80047f4:	fba2 2303 	umull	r2, r3, r2, r3
 80047f8:	095b      	lsrs	r3, r3, #5
 80047fa:	f003 0207 	and.w	r2, r3, #7
 80047fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4422      	add	r2, r4
 8004806:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004808:	e105      	b.n	8004a16 <UART_SetConfig+0x4d6>
 800480a:	bf00      	nop
 800480c:	40011000 	.word	0x40011000
 8004810:	40011400 	.word	0x40011400
 8004814:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004818:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800481c:	2200      	movs	r2, #0
 800481e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004822:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004826:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800482a:	4642      	mov	r2, r8
 800482c:	464b      	mov	r3, r9
 800482e:	1891      	adds	r1, r2, r2
 8004830:	6239      	str	r1, [r7, #32]
 8004832:	415b      	adcs	r3, r3
 8004834:	627b      	str	r3, [r7, #36]	; 0x24
 8004836:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800483a:	4641      	mov	r1, r8
 800483c:	1854      	adds	r4, r2, r1
 800483e:	4649      	mov	r1, r9
 8004840:	eb43 0501 	adc.w	r5, r3, r1
 8004844:	f04f 0200 	mov.w	r2, #0
 8004848:	f04f 0300 	mov.w	r3, #0
 800484c:	00eb      	lsls	r3, r5, #3
 800484e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004852:	00e2      	lsls	r2, r4, #3
 8004854:	4614      	mov	r4, r2
 8004856:	461d      	mov	r5, r3
 8004858:	4643      	mov	r3, r8
 800485a:	18e3      	adds	r3, r4, r3
 800485c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004860:	464b      	mov	r3, r9
 8004862:	eb45 0303 	adc.w	r3, r5, r3
 8004866:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800486a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	2200      	movs	r2, #0
 8004872:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004876:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800487a:	f04f 0200 	mov.w	r2, #0
 800487e:	f04f 0300 	mov.w	r3, #0
 8004882:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004886:	4629      	mov	r1, r5
 8004888:	008b      	lsls	r3, r1, #2
 800488a:	4621      	mov	r1, r4
 800488c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004890:	4621      	mov	r1, r4
 8004892:	008a      	lsls	r2, r1, #2
 8004894:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004898:	f7fb fca8 	bl	80001ec <__aeabi_uldivmod>
 800489c:	4602      	mov	r2, r0
 800489e:	460b      	mov	r3, r1
 80048a0:	4b60      	ldr	r3, [pc, #384]	; (8004a24 <UART_SetConfig+0x4e4>)
 80048a2:	fba3 2302 	umull	r2, r3, r3, r2
 80048a6:	095b      	lsrs	r3, r3, #5
 80048a8:	011c      	lsls	r4, r3, #4
 80048aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048ae:	2200      	movs	r2, #0
 80048b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80048b4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80048b8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80048bc:	4642      	mov	r2, r8
 80048be:	464b      	mov	r3, r9
 80048c0:	1891      	adds	r1, r2, r2
 80048c2:	61b9      	str	r1, [r7, #24]
 80048c4:	415b      	adcs	r3, r3
 80048c6:	61fb      	str	r3, [r7, #28]
 80048c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80048cc:	4641      	mov	r1, r8
 80048ce:	1851      	adds	r1, r2, r1
 80048d0:	6139      	str	r1, [r7, #16]
 80048d2:	4649      	mov	r1, r9
 80048d4:	414b      	adcs	r3, r1
 80048d6:	617b      	str	r3, [r7, #20]
 80048d8:	f04f 0200 	mov.w	r2, #0
 80048dc:	f04f 0300 	mov.w	r3, #0
 80048e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80048e4:	4659      	mov	r1, fp
 80048e6:	00cb      	lsls	r3, r1, #3
 80048e8:	4651      	mov	r1, sl
 80048ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048ee:	4651      	mov	r1, sl
 80048f0:	00ca      	lsls	r2, r1, #3
 80048f2:	4610      	mov	r0, r2
 80048f4:	4619      	mov	r1, r3
 80048f6:	4603      	mov	r3, r0
 80048f8:	4642      	mov	r2, r8
 80048fa:	189b      	adds	r3, r3, r2
 80048fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004900:	464b      	mov	r3, r9
 8004902:	460a      	mov	r2, r1
 8004904:	eb42 0303 	adc.w	r3, r2, r3
 8004908:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800490c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	2200      	movs	r2, #0
 8004914:	67bb      	str	r3, [r7, #120]	; 0x78
 8004916:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004918:	f04f 0200 	mov.w	r2, #0
 800491c:	f04f 0300 	mov.w	r3, #0
 8004920:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004924:	4649      	mov	r1, r9
 8004926:	008b      	lsls	r3, r1, #2
 8004928:	4641      	mov	r1, r8
 800492a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800492e:	4641      	mov	r1, r8
 8004930:	008a      	lsls	r2, r1, #2
 8004932:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004936:	f7fb fc59 	bl	80001ec <__aeabi_uldivmod>
 800493a:	4602      	mov	r2, r0
 800493c:	460b      	mov	r3, r1
 800493e:	4b39      	ldr	r3, [pc, #228]	; (8004a24 <UART_SetConfig+0x4e4>)
 8004940:	fba3 1302 	umull	r1, r3, r3, r2
 8004944:	095b      	lsrs	r3, r3, #5
 8004946:	2164      	movs	r1, #100	; 0x64
 8004948:	fb01 f303 	mul.w	r3, r1, r3
 800494c:	1ad3      	subs	r3, r2, r3
 800494e:	011b      	lsls	r3, r3, #4
 8004950:	3332      	adds	r3, #50	; 0x32
 8004952:	4a34      	ldr	r2, [pc, #208]	; (8004a24 <UART_SetConfig+0x4e4>)
 8004954:	fba2 2303 	umull	r2, r3, r2, r3
 8004958:	095b      	lsrs	r3, r3, #5
 800495a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800495e:	441c      	add	r4, r3
 8004960:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004964:	2200      	movs	r2, #0
 8004966:	673b      	str	r3, [r7, #112]	; 0x70
 8004968:	677a      	str	r2, [r7, #116]	; 0x74
 800496a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800496e:	4642      	mov	r2, r8
 8004970:	464b      	mov	r3, r9
 8004972:	1891      	adds	r1, r2, r2
 8004974:	60b9      	str	r1, [r7, #8]
 8004976:	415b      	adcs	r3, r3
 8004978:	60fb      	str	r3, [r7, #12]
 800497a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800497e:	4641      	mov	r1, r8
 8004980:	1851      	adds	r1, r2, r1
 8004982:	6039      	str	r1, [r7, #0]
 8004984:	4649      	mov	r1, r9
 8004986:	414b      	adcs	r3, r1
 8004988:	607b      	str	r3, [r7, #4]
 800498a:	f04f 0200 	mov.w	r2, #0
 800498e:	f04f 0300 	mov.w	r3, #0
 8004992:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004996:	4659      	mov	r1, fp
 8004998:	00cb      	lsls	r3, r1, #3
 800499a:	4651      	mov	r1, sl
 800499c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049a0:	4651      	mov	r1, sl
 80049a2:	00ca      	lsls	r2, r1, #3
 80049a4:	4610      	mov	r0, r2
 80049a6:	4619      	mov	r1, r3
 80049a8:	4603      	mov	r3, r0
 80049aa:	4642      	mov	r2, r8
 80049ac:	189b      	adds	r3, r3, r2
 80049ae:	66bb      	str	r3, [r7, #104]	; 0x68
 80049b0:	464b      	mov	r3, r9
 80049b2:	460a      	mov	r2, r1
 80049b4:	eb42 0303 	adc.w	r3, r2, r3
 80049b8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80049ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	2200      	movs	r2, #0
 80049c2:	663b      	str	r3, [r7, #96]	; 0x60
 80049c4:	667a      	str	r2, [r7, #100]	; 0x64
 80049c6:	f04f 0200 	mov.w	r2, #0
 80049ca:	f04f 0300 	mov.w	r3, #0
 80049ce:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80049d2:	4649      	mov	r1, r9
 80049d4:	008b      	lsls	r3, r1, #2
 80049d6:	4641      	mov	r1, r8
 80049d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80049dc:	4641      	mov	r1, r8
 80049de:	008a      	lsls	r2, r1, #2
 80049e0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80049e4:	f7fb fc02 	bl	80001ec <__aeabi_uldivmod>
 80049e8:	4602      	mov	r2, r0
 80049ea:	460b      	mov	r3, r1
 80049ec:	4b0d      	ldr	r3, [pc, #52]	; (8004a24 <UART_SetConfig+0x4e4>)
 80049ee:	fba3 1302 	umull	r1, r3, r3, r2
 80049f2:	095b      	lsrs	r3, r3, #5
 80049f4:	2164      	movs	r1, #100	; 0x64
 80049f6:	fb01 f303 	mul.w	r3, r1, r3
 80049fa:	1ad3      	subs	r3, r2, r3
 80049fc:	011b      	lsls	r3, r3, #4
 80049fe:	3332      	adds	r3, #50	; 0x32
 8004a00:	4a08      	ldr	r2, [pc, #32]	; (8004a24 <UART_SetConfig+0x4e4>)
 8004a02:	fba2 2303 	umull	r2, r3, r2, r3
 8004a06:	095b      	lsrs	r3, r3, #5
 8004a08:	f003 020f 	and.w	r2, r3, #15
 8004a0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4422      	add	r2, r4
 8004a14:	609a      	str	r2, [r3, #8]
}
 8004a16:	bf00      	nop
 8004a18:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a22:	bf00      	nop
 8004a24:	51eb851f 	.word	0x51eb851f

08004a28 <__errno>:
 8004a28:	4b01      	ldr	r3, [pc, #4]	; (8004a30 <__errno+0x8>)
 8004a2a:	6818      	ldr	r0, [r3, #0]
 8004a2c:	4770      	bx	lr
 8004a2e:	bf00      	nop
 8004a30:	2000000c 	.word	0x2000000c

08004a34 <__libc_init_array>:
 8004a34:	b570      	push	{r4, r5, r6, lr}
 8004a36:	4d0d      	ldr	r5, [pc, #52]	; (8004a6c <__libc_init_array+0x38>)
 8004a38:	4c0d      	ldr	r4, [pc, #52]	; (8004a70 <__libc_init_array+0x3c>)
 8004a3a:	1b64      	subs	r4, r4, r5
 8004a3c:	10a4      	asrs	r4, r4, #2
 8004a3e:	2600      	movs	r6, #0
 8004a40:	42a6      	cmp	r6, r4
 8004a42:	d109      	bne.n	8004a58 <__libc_init_array+0x24>
 8004a44:	4d0b      	ldr	r5, [pc, #44]	; (8004a74 <__libc_init_array+0x40>)
 8004a46:	4c0c      	ldr	r4, [pc, #48]	; (8004a78 <__libc_init_array+0x44>)
 8004a48:	f000 fd1e 	bl	8005488 <_init>
 8004a4c:	1b64      	subs	r4, r4, r5
 8004a4e:	10a4      	asrs	r4, r4, #2
 8004a50:	2600      	movs	r6, #0
 8004a52:	42a6      	cmp	r6, r4
 8004a54:	d105      	bne.n	8004a62 <__libc_init_array+0x2e>
 8004a56:	bd70      	pop	{r4, r5, r6, pc}
 8004a58:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a5c:	4798      	blx	r3
 8004a5e:	3601      	adds	r6, #1
 8004a60:	e7ee      	b.n	8004a40 <__libc_init_array+0xc>
 8004a62:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a66:	4798      	blx	r3
 8004a68:	3601      	adds	r6, #1
 8004a6a:	e7f2      	b.n	8004a52 <__libc_init_array+0x1e>
 8004a6c:	0800553c 	.word	0x0800553c
 8004a70:	0800553c 	.word	0x0800553c
 8004a74:	0800553c 	.word	0x0800553c
 8004a78:	08005540 	.word	0x08005540

08004a7c <memset>:
 8004a7c:	4402      	add	r2, r0
 8004a7e:	4603      	mov	r3, r0
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d100      	bne.n	8004a86 <memset+0xa>
 8004a84:	4770      	bx	lr
 8004a86:	f803 1b01 	strb.w	r1, [r3], #1
 8004a8a:	e7f9      	b.n	8004a80 <memset+0x4>

08004a8c <_puts_r>:
 8004a8c:	b570      	push	{r4, r5, r6, lr}
 8004a8e:	460e      	mov	r6, r1
 8004a90:	4605      	mov	r5, r0
 8004a92:	b118      	cbz	r0, 8004a9c <_puts_r+0x10>
 8004a94:	6983      	ldr	r3, [r0, #24]
 8004a96:	b90b      	cbnz	r3, 8004a9c <_puts_r+0x10>
 8004a98:	f000 fa48 	bl	8004f2c <__sinit>
 8004a9c:	69ab      	ldr	r3, [r5, #24]
 8004a9e:	68ac      	ldr	r4, [r5, #8]
 8004aa0:	b913      	cbnz	r3, 8004aa8 <_puts_r+0x1c>
 8004aa2:	4628      	mov	r0, r5
 8004aa4:	f000 fa42 	bl	8004f2c <__sinit>
 8004aa8:	4b2c      	ldr	r3, [pc, #176]	; (8004b5c <_puts_r+0xd0>)
 8004aaa:	429c      	cmp	r4, r3
 8004aac:	d120      	bne.n	8004af0 <_puts_r+0x64>
 8004aae:	686c      	ldr	r4, [r5, #4]
 8004ab0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004ab2:	07db      	lsls	r3, r3, #31
 8004ab4:	d405      	bmi.n	8004ac2 <_puts_r+0x36>
 8004ab6:	89a3      	ldrh	r3, [r4, #12]
 8004ab8:	0598      	lsls	r0, r3, #22
 8004aba:	d402      	bmi.n	8004ac2 <_puts_r+0x36>
 8004abc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004abe:	f000 fad3 	bl	8005068 <__retarget_lock_acquire_recursive>
 8004ac2:	89a3      	ldrh	r3, [r4, #12]
 8004ac4:	0719      	lsls	r1, r3, #28
 8004ac6:	d51d      	bpl.n	8004b04 <_puts_r+0x78>
 8004ac8:	6923      	ldr	r3, [r4, #16]
 8004aca:	b1db      	cbz	r3, 8004b04 <_puts_r+0x78>
 8004acc:	3e01      	subs	r6, #1
 8004ace:	68a3      	ldr	r3, [r4, #8]
 8004ad0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004ad4:	3b01      	subs	r3, #1
 8004ad6:	60a3      	str	r3, [r4, #8]
 8004ad8:	bb39      	cbnz	r1, 8004b2a <_puts_r+0x9e>
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	da38      	bge.n	8004b50 <_puts_r+0xc4>
 8004ade:	4622      	mov	r2, r4
 8004ae0:	210a      	movs	r1, #10
 8004ae2:	4628      	mov	r0, r5
 8004ae4:	f000 f848 	bl	8004b78 <__swbuf_r>
 8004ae8:	3001      	adds	r0, #1
 8004aea:	d011      	beq.n	8004b10 <_puts_r+0x84>
 8004aec:	250a      	movs	r5, #10
 8004aee:	e011      	b.n	8004b14 <_puts_r+0x88>
 8004af0:	4b1b      	ldr	r3, [pc, #108]	; (8004b60 <_puts_r+0xd4>)
 8004af2:	429c      	cmp	r4, r3
 8004af4:	d101      	bne.n	8004afa <_puts_r+0x6e>
 8004af6:	68ac      	ldr	r4, [r5, #8]
 8004af8:	e7da      	b.n	8004ab0 <_puts_r+0x24>
 8004afa:	4b1a      	ldr	r3, [pc, #104]	; (8004b64 <_puts_r+0xd8>)
 8004afc:	429c      	cmp	r4, r3
 8004afe:	bf08      	it	eq
 8004b00:	68ec      	ldreq	r4, [r5, #12]
 8004b02:	e7d5      	b.n	8004ab0 <_puts_r+0x24>
 8004b04:	4621      	mov	r1, r4
 8004b06:	4628      	mov	r0, r5
 8004b08:	f000 f888 	bl	8004c1c <__swsetup_r>
 8004b0c:	2800      	cmp	r0, #0
 8004b0e:	d0dd      	beq.n	8004acc <_puts_r+0x40>
 8004b10:	f04f 35ff 	mov.w	r5, #4294967295
 8004b14:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004b16:	07da      	lsls	r2, r3, #31
 8004b18:	d405      	bmi.n	8004b26 <_puts_r+0x9a>
 8004b1a:	89a3      	ldrh	r3, [r4, #12]
 8004b1c:	059b      	lsls	r3, r3, #22
 8004b1e:	d402      	bmi.n	8004b26 <_puts_r+0x9a>
 8004b20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b22:	f000 faa2 	bl	800506a <__retarget_lock_release_recursive>
 8004b26:	4628      	mov	r0, r5
 8004b28:	bd70      	pop	{r4, r5, r6, pc}
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	da04      	bge.n	8004b38 <_puts_r+0xac>
 8004b2e:	69a2      	ldr	r2, [r4, #24]
 8004b30:	429a      	cmp	r2, r3
 8004b32:	dc06      	bgt.n	8004b42 <_puts_r+0xb6>
 8004b34:	290a      	cmp	r1, #10
 8004b36:	d004      	beq.n	8004b42 <_puts_r+0xb6>
 8004b38:	6823      	ldr	r3, [r4, #0]
 8004b3a:	1c5a      	adds	r2, r3, #1
 8004b3c:	6022      	str	r2, [r4, #0]
 8004b3e:	7019      	strb	r1, [r3, #0]
 8004b40:	e7c5      	b.n	8004ace <_puts_r+0x42>
 8004b42:	4622      	mov	r2, r4
 8004b44:	4628      	mov	r0, r5
 8004b46:	f000 f817 	bl	8004b78 <__swbuf_r>
 8004b4a:	3001      	adds	r0, #1
 8004b4c:	d1bf      	bne.n	8004ace <_puts_r+0x42>
 8004b4e:	e7df      	b.n	8004b10 <_puts_r+0x84>
 8004b50:	6823      	ldr	r3, [r4, #0]
 8004b52:	250a      	movs	r5, #10
 8004b54:	1c5a      	adds	r2, r3, #1
 8004b56:	6022      	str	r2, [r4, #0]
 8004b58:	701d      	strb	r5, [r3, #0]
 8004b5a:	e7db      	b.n	8004b14 <_puts_r+0x88>
 8004b5c:	080054f4 	.word	0x080054f4
 8004b60:	08005514 	.word	0x08005514
 8004b64:	080054d4 	.word	0x080054d4

08004b68 <puts>:
 8004b68:	4b02      	ldr	r3, [pc, #8]	; (8004b74 <puts+0xc>)
 8004b6a:	4601      	mov	r1, r0
 8004b6c:	6818      	ldr	r0, [r3, #0]
 8004b6e:	f7ff bf8d 	b.w	8004a8c <_puts_r>
 8004b72:	bf00      	nop
 8004b74:	2000000c 	.word	0x2000000c

08004b78 <__swbuf_r>:
 8004b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b7a:	460e      	mov	r6, r1
 8004b7c:	4614      	mov	r4, r2
 8004b7e:	4605      	mov	r5, r0
 8004b80:	b118      	cbz	r0, 8004b8a <__swbuf_r+0x12>
 8004b82:	6983      	ldr	r3, [r0, #24]
 8004b84:	b90b      	cbnz	r3, 8004b8a <__swbuf_r+0x12>
 8004b86:	f000 f9d1 	bl	8004f2c <__sinit>
 8004b8a:	4b21      	ldr	r3, [pc, #132]	; (8004c10 <__swbuf_r+0x98>)
 8004b8c:	429c      	cmp	r4, r3
 8004b8e:	d12b      	bne.n	8004be8 <__swbuf_r+0x70>
 8004b90:	686c      	ldr	r4, [r5, #4]
 8004b92:	69a3      	ldr	r3, [r4, #24]
 8004b94:	60a3      	str	r3, [r4, #8]
 8004b96:	89a3      	ldrh	r3, [r4, #12]
 8004b98:	071a      	lsls	r2, r3, #28
 8004b9a:	d52f      	bpl.n	8004bfc <__swbuf_r+0x84>
 8004b9c:	6923      	ldr	r3, [r4, #16]
 8004b9e:	b36b      	cbz	r3, 8004bfc <__swbuf_r+0x84>
 8004ba0:	6923      	ldr	r3, [r4, #16]
 8004ba2:	6820      	ldr	r0, [r4, #0]
 8004ba4:	1ac0      	subs	r0, r0, r3
 8004ba6:	6963      	ldr	r3, [r4, #20]
 8004ba8:	b2f6      	uxtb	r6, r6
 8004baa:	4283      	cmp	r3, r0
 8004bac:	4637      	mov	r7, r6
 8004bae:	dc04      	bgt.n	8004bba <__swbuf_r+0x42>
 8004bb0:	4621      	mov	r1, r4
 8004bb2:	4628      	mov	r0, r5
 8004bb4:	f000 f926 	bl	8004e04 <_fflush_r>
 8004bb8:	bb30      	cbnz	r0, 8004c08 <__swbuf_r+0x90>
 8004bba:	68a3      	ldr	r3, [r4, #8]
 8004bbc:	3b01      	subs	r3, #1
 8004bbe:	60a3      	str	r3, [r4, #8]
 8004bc0:	6823      	ldr	r3, [r4, #0]
 8004bc2:	1c5a      	adds	r2, r3, #1
 8004bc4:	6022      	str	r2, [r4, #0]
 8004bc6:	701e      	strb	r6, [r3, #0]
 8004bc8:	6963      	ldr	r3, [r4, #20]
 8004bca:	3001      	adds	r0, #1
 8004bcc:	4283      	cmp	r3, r0
 8004bce:	d004      	beq.n	8004bda <__swbuf_r+0x62>
 8004bd0:	89a3      	ldrh	r3, [r4, #12]
 8004bd2:	07db      	lsls	r3, r3, #31
 8004bd4:	d506      	bpl.n	8004be4 <__swbuf_r+0x6c>
 8004bd6:	2e0a      	cmp	r6, #10
 8004bd8:	d104      	bne.n	8004be4 <__swbuf_r+0x6c>
 8004bda:	4621      	mov	r1, r4
 8004bdc:	4628      	mov	r0, r5
 8004bde:	f000 f911 	bl	8004e04 <_fflush_r>
 8004be2:	b988      	cbnz	r0, 8004c08 <__swbuf_r+0x90>
 8004be4:	4638      	mov	r0, r7
 8004be6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004be8:	4b0a      	ldr	r3, [pc, #40]	; (8004c14 <__swbuf_r+0x9c>)
 8004bea:	429c      	cmp	r4, r3
 8004bec:	d101      	bne.n	8004bf2 <__swbuf_r+0x7a>
 8004bee:	68ac      	ldr	r4, [r5, #8]
 8004bf0:	e7cf      	b.n	8004b92 <__swbuf_r+0x1a>
 8004bf2:	4b09      	ldr	r3, [pc, #36]	; (8004c18 <__swbuf_r+0xa0>)
 8004bf4:	429c      	cmp	r4, r3
 8004bf6:	bf08      	it	eq
 8004bf8:	68ec      	ldreq	r4, [r5, #12]
 8004bfa:	e7ca      	b.n	8004b92 <__swbuf_r+0x1a>
 8004bfc:	4621      	mov	r1, r4
 8004bfe:	4628      	mov	r0, r5
 8004c00:	f000 f80c 	bl	8004c1c <__swsetup_r>
 8004c04:	2800      	cmp	r0, #0
 8004c06:	d0cb      	beq.n	8004ba0 <__swbuf_r+0x28>
 8004c08:	f04f 37ff 	mov.w	r7, #4294967295
 8004c0c:	e7ea      	b.n	8004be4 <__swbuf_r+0x6c>
 8004c0e:	bf00      	nop
 8004c10:	080054f4 	.word	0x080054f4
 8004c14:	08005514 	.word	0x08005514
 8004c18:	080054d4 	.word	0x080054d4

08004c1c <__swsetup_r>:
 8004c1c:	4b32      	ldr	r3, [pc, #200]	; (8004ce8 <__swsetup_r+0xcc>)
 8004c1e:	b570      	push	{r4, r5, r6, lr}
 8004c20:	681d      	ldr	r5, [r3, #0]
 8004c22:	4606      	mov	r6, r0
 8004c24:	460c      	mov	r4, r1
 8004c26:	b125      	cbz	r5, 8004c32 <__swsetup_r+0x16>
 8004c28:	69ab      	ldr	r3, [r5, #24]
 8004c2a:	b913      	cbnz	r3, 8004c32 <__swsetup_r+0x16>
 8004c2c:	4628      	mov	r0, r5
 8004c2e:	f000 f97d 	bl	8004f2c <__sinit>
 8004c32:	4b2e      	ldr	r3, [pc, #184]	; (8004cec <__swsetup_r+0xd0>)
 8004c34:	429c      	cmp	r4, r3
 8004c36:	d10f      	bne.n	8004c58 <__swsetup_r+0x3c>
 8004c38:	686c      	ldr	r4, [r5, #4]
 8004c3a:	89a3      	ldrh	r3, [r4, #12]
 8004c3c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004c40:	0719      	lsls	r1, r3, #28
 8004c42:	d42c      	bmi.n	8004c9e <__swsetup_r+0x82>
 8004c44:	06dd      	lsls	r5, r3, #27
 8004c46:	d411      	bmi.n	8004c6c <__swsetup_r+0x50>
 8004c48:	2309      	movs	r3, #9
 8004c4a:	6033      	str	r3, [r6, #0]
 8004c4c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004c50:	81a3      	strh	r3, [r4, #12]
 8004c52:	f04f 30ff 	mov.w	r0, #4294967295
 8004c56:	e03e      	b.n	8004cd6 <__swsetup_r+0xba>
 8004c58:	4b25      	ldr	r3, [pc, #148]	; (8004cf0 <__swsetup_r+0xd4>)
 8004c5a:	429c      	cmp	r4, r3
 8004c5c:	d101      	bne.n	8004c62 <__swsetup_r+0x46>
 8004c5e:	68ac      	ldr	r4, [r5, #8]
 8004c60:	e7eb      	b.n	8004c3a <__swsetup_r+0x1e>
 8004c62:	4b24      	ldr	r3, [pc, #144]	; (8004cf4 <__swsetup_r+0xd8>)
 8004c64:	429c      	cmp	r4, r3
 8004c66:	bf08      	it	eq
 8004c68:	68ec      	ldreq	r4, [r5, #12]
 8004c6a:	e7e6      	b.n	8004c3a <__swsetup_r+0x1e>
 8004c6c:	0758      	lsls	r0, r3, #29
 8004c6e:	d512      	bpl.n	8004c96 <__swsetup_r+0x7a>
 8004c70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004c72:	b141      	cbz	r1, 8004c86 <__swsetup_r+0x6a>
 8004c74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004c78:	4299      	cmp	r1, r3
 8004c7a:	d002      	beq.n	8004c82 <__swsetup_r+0x66>
 8004c7c:	4630      	mov	r0, r6
 8004c7e:	f000 fa5b 	bl	8005138 <_free_r>
 8004c82:	2300      	movs	r3, #0
 8004c84:	6363      	str	r3, [r4, #52]	; 0x34
 8004c86:	89a3      	ldrh	r3, [r4, #12]
 8004c88:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004c8c:	81a3      	strh	r3, [r4, #12]
 8004c8e:	2300      	movs	r3, #0
 8004c90:	6063      	str	r3, [r4, #4]
 8004c92:	6923      	ldr	r3, [r4, #16]
 8004c94:	6023      	str	r3, [r4, #0]
 8004c96:	89a3      	ldrh	r3, [r4, #12]
 8004c98:	f043 0308 	orr.w	r3, r3, #8
 8004c9c:	81a3      	strh	r3, [r4, #12]
 8004c9e:	6923      	ldr	r3, [r4, #16]
 8004ca0:	b94b      	cbnz	r3, 8004cb6 <__swsetup_r+0x9a>
 8004ca2:	89a3      	ldrh	r3, [r4, #12]
 8004ca4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004ca8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cac:	d003      	beq.n	8004cb6 <__swsetup_r+0x9a>
 8004cae:	4621      	mov	r1, r4
 8004cb0:	4630      	mov	r0, r6
 8004cb2:	f000 fa01 	bl	80050b8 <__smakebuf_r>
 8004cb6:	89a0      	ldrh	r0, [r4, #12]
 8004cb8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004cbc:	f010 0301 	ands.w	r3, r0, #1
 8004cc0:	d00a      	beq.n	8004cd8 <__swsetup_r+0xbc>
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	60a3      	str	r3, [r4, #8]
 8004cc6:	6963      	ldr	r3, [r4, #20]
 8004cc8:	425b      	negs	r3, r3
 8004cca:	61a3      	str	r3, [r4, #24]
 8004ccc:	6923      	ldr	r3, [r4, #16]
 8004cce:	b943      	cbnz	r3, 8004ce2 <__swsetup_r+0xc6>
 8004cd0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004cd4:	d1ba      	bne.n	8004c4c <__swsetup_r+0x30>
 8004cd6:	bd70      	pop	{r4, r5, r6, pc}
 8004cd8:	0781      	lsls	r1, r0, #30
 8004cda:	bf58      	it	pl
 8004cdc:	6963      	ldrpl	r3, [r4, #20]
 8004cde:	60a3      	str	r3, [r4, #8]
 8004ce0:	e7f4      	b.n	8004ccc <__swsetup_r+0xb0>
 8004ce2:	2000      	movs	r0, #0
 8004ce4:	e7f7      	b.n	8004cd6 <__swsetup_r+0xba>
 8004ce6:	bf00      	nop
 8004ce8:	2000000c 	.word	0x2000000c
 8004cec:	080054f4 	.word	0x080054f4
 8004cf0:	08005514 	.word	0x08005514
 8004cf4:	080054d4 	.word	0x080054d4

08004cf8 <__sflush_r>:
 8004cf8:	898a      	ldrh	r2, [r1, #12]
 8004cfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cfe:	4605      	mov	r5, r0
 8004d00:	0710      	lsls	r0, r2, #28
 8004d02:	460c      	mov	r4, r1
 8004d04:	d458      	bmi.n	8004db8 <__sflush_r+0xc0>
 8004d06:	684b      	ldr	r3, [r1, #4]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	dc05      	bgt.n	8004d18 <__sflush_r+0x20>
 8004d0c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	dc02      	bgt.n	8004d18 <__sflush_r+0x20>
 8004d12:	2000      	movs	r0, #0
 8004d14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004d1a:	2e00      	cmp	r6, #0
 8004d1c:	d0f9      	beq.n	8004d12 <__sflush_r+0x1a>
 8004d1e:	2300      	movs	r3, #0
 8004d20:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004d24:	682f      	ldr	r7, [r5, #0]
 8004d26:	602b      	str	r3, [r5, #0]
 8004d28:	d032      	beq.n	8004d90 <__sflush_r+0x98>
 8004d2a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004d2c:	89a3      	ldrh	r3, [r4, #12]
 8004d2e:	075a      	lsls	r2, r3, #29
 8004d30:	d505      	bpl.n	8004d3e <__sflush_r+0x46>
 8004d32:	6863      	ldr	r3, [r4, #4]
 8004d34:	1ac0      	subs	r0, r0, r3
 8004d36:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004d38:	b10b      	cbz	r3, 8004d3e <__sflush_r+0x46>
 8004d3a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004d3c:	1ac0      	subs	r0, r0, r3
 8004d3e:	2300      	movs	r3, #0
 8004d40:	4602      	mov	r2, r0
 8004d42:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004d44:	6a21      	ldr	r1, [r4, #32]
 8004d46:	4628      	mov	r0, r5
 8004d48:	47b0      	blx	r6
 8004d4a:	1c43      	adds	r3, r0, #1
 8004d4c:	89a3      	ldrh	r3, [r4, #12]
 8004d4e:	d106      	bne.n	8004d5e <__sflush_r+0x66>
 8004d50:	6829      	ldr	r1, [r5, #0]
 8004d52:	291d      	cmp	r1, #29
 8004d54:	d82c      	bhi.n	8004db0 <__sflush_r+0xb8>
 8004d56:	4a2a      	ldr	r2, [pc, #168]	; (8004e00 <__sflush_r+0x108>)
 8004d58:	40ca      	lsrs	r2, r1
 8004d5a:	07d6      	lsls	r6, r2, #31
 8004d5c:	d528      	bpl.n	8004db0 <__sflush_r+0xb8>
 8004d5e:	2200      	movs	r2, #0
 8004d60:	6062      	str	r2, [r4, #4]
 8004d62:	04d9      	lsls	r1, r3, #19
 8004d64:	6922      	ldr	r2, [r4, #16]
 8004d66:	6022      	str	r2, [r4, #0]
 8004d68:	d504      	bpl.n	8004d74 <__sflush_r+0x7c>
 8004d6a:	1c42      	adds	r2, r0, #1
 8004d6c:	d101      	bne.n	8004d72 <__sflush_r+0x7a>
 8004d6e:	682b      	ldr	r3, [r5, #0]
 8004d70:	b903      	cbnz	r3, 8004d74 <__sflush_r+0x7c>
 8004d72:	6560      	str	r0, [r4, #84]	; 0x54
 8004d74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004d76:	602f      	str	r7, [r5, #0]
 8004d78:	2900      	cmp	r1, #0
 8004d7a:	d0ca      	beq.n	8004d12 <__sflush_r+0x1a>
 8004d7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004d80:	4299      	cmp	r1, r3
 8004d82:	d002      	beq.n	8004d8a <__sflush_r+0x92>
 8004d84:	4628      	mov	r0, r5
 8004d86:	f000 f9d7 	bl	8005138 <_free_r>
 8004d8a:	2000      	movs	r0, #0
 8004d8c:	6360      	str	r0, [r4, #52]	; 0x34
 8004d8e:	e7c1      	b.n	8004d14 <__sflush_r+0x1c>
 8004d90:	6a21      	ldr	r1, [r4, #32]
 8004d92:	2301      	movs	r3, #1
 8004d94:	4628      	mov	r0, r5
 8004d96:	47b0      	blx	r6
 8004d98:	1c41      	adds	r1, r0, #1
 8004d9a:	d1c7      	bne.n	8004d2c <__sflush_r+0x34>
 8004d9c:	682b      	ldr	r3, [r5, #0]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d0c4      	beq.n	8004d2c <__sflush_r+0x34>
 8004da2:	2b1d      	cmp	r3, #29
 8004da4:	d001      	beq.n	8004daa <__sflush_r+0xb2>
 8004da6:	2b16      	cmp	r3, #22
 8004da8:	d101      	bne.n	8004dae <__sflush_r+0xb6>
 8004daa:	602f      	str	r7, [r5, #0]
 8004dac:	e7b1      	b.n	8004d12 <__sflush_r+0x1a>
 8004dae:	89a3      	ldrh	r3, [r4, #12]
 8004db0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004db4:	81a3      	strh	r3, [r4, #12]
 8004db6:	e7ad      	b.n	8004d14 <__sflush_r+0x1c>
 8004db8:	690f      	ldr	r7, [r1, #16]
 8004dba:	2f00      	cmp	r7, #0
 8004dbc:	d0a9      	beq.n	8004d12 <__sflush_r+0x1a>
 8004dbe:	0793      	lsls	r3, r2, #30
 8004dc0:	680e      	ldr	r6, [r1, #0]
 8004dc2:	bf08      	it	eq
 8004dc4:	694b      	ldreq	r3, [r1, #20]
 8004dc6:	600f      	str	r7, [r1, #0]
 8004dc8:	bf18      	it	ne
 8004dca:	2300      	movne	r3, #0
 8004dcc:	eba6 0807 	sub.w	r8, r6, r7
 8004dd0:	608b      	str	r3, [r1, #8]
 8004dd2:	f1b8 0f00 	cmp.w	r8, #0
 8004dd6:	dd9c      	ble.n	8004d12 <__sflush_r+0x1a>
 8004dd8:	6a21      	ldr	r1, [r4, #32]
 8004dda:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004ddc:	4643      	mov	r3, r8
 8004dde:	463a      	mov	r2, r7
 8004de0:	4628      	mov	r0, r5
 8004de2:	47b0      	blx	r6
 8004de4:	2800      	cmp	r0, #0
 8004de6:	dc06      	bgt.n	8004df6 <__sflush_r+0xfe>
 8004de8:	89a3      	ldrh	r3, [r4, #12]
 8004dea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004dee:	81a3      	strh	r3, [r4, #12]
 8004df0:	f04f 30ff 	mov.w	r0, #4294967295
 8004df4:	e78e      	b.n	8004d14 <__sflush_r+0x1c>
 8004df6:	4407      	add	r7, r0
 8004df8:	eba8 0800 	sub.w	r8, r8, r0
 8004dfc:	e7e9      	b.n	8004dd2 <__sflush_r+0xda>
 8004dfe:	bf00      	nop
 8004e00:	20400001 	.word	0x20400001

08004e04 <_fflush_r>:
 8004e04:	b538      	push	{r3, r4, r5, lr}
 8004e06:	690b      	ldr	r3, [r1, #16]
 8004e08:	4605      	mov	r5, r0
 8004e0a:	460c      	mov	r4, r1
 8004e0c:	b913      	cbnz	r3, 8004e14 <_fflush_r+0x10>
 8004e0e:	2500      	movs	r5, #0
 8004e10:	4628      	mov	r0, r5
 8004e12:	bd38      	pop	{r3, r4, r5, pc}
 8004e14:	b118      	cbz	r0, 8004e1e <_fflush_r+0x1a>
 8004e16:	6983      	ldr	r3, [r0, #24]
 8004e18:	b90b      	cbnz	r3, 8004e1e <_fflush_r+0x1a>
 8004e1a:	f000 f887 	bl	8004f2c <__sinit>
 8004e1e:	4b14      	ldr	r3, [pc, #80]	; (8004e70 <_fflush_r+0x6c>)
 8004e20:	429c      	cmp	r4, r3
 8004e22:	d11b      	bne.n	8004e5c <_fflush_r+0x58>
 8004e24:	686c      	ldr	r4, [r5, #4]
 8004e26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d0ef      	beq.n	8004e0e <_fflush_r+0xa>
 8004e2e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004e30:	07d0      	lsls	r0, r2, #31
 8004e32:	d404      	bmi.n	8004e3e <_fflush_r+0x3a>
 8004e34:	0599      	lsls	r1, r3, #22
 8004e36:	d402      	bmi.n	8004e3e <_fflush_r+0x3a>
 8004e38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004e3a:	f000 f915 	bl	8005068 <__retarget_lock_acquire_recursive>
 8004e3e:	4628      	mov	r0, r5
 8004e40:	4621      	mov	r1, r4
 8004e42:	f7ff ff59 	bl	8004cf8 <__sflush_r>
 8004e46:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004e48:	07da      	lsls	r2, r3, #31
 8004e4a:	4605      	mov	r5, r0
 8004e4c:	d4e0      	bmi.n	8004e10 <_fflush_r+0xc>
 8004e4e:	89a3      	ldrh	r3, [r4, #12]
 8004e50:	059b      	lsls	r3, r3, #22
 8004e52:	d4dd      	bmi.n	8004e10 <_fflush_r+0xc>
 8004e54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004e56:	f000 f908 	bl	800506a <__retarget_lock_release_recursive>
 8004e5a:	e7d9      	b.n	8004e10 <_fflush_r+0xc>
 8004e5c:	4b05      	ldr	r3, [pc, #20]	; (8004e74 <_fflush_r+0x70>)
 8004e5e:	429c      	cmp	r4, r3
 8004e60:	d101      	bne.n	8004e66 <_fflush_r+0x62>
 8004e62:	68ac      	ldr	r4, [r5, #8]
 8004e64:	e7df      	b.n	8004e26 <_fflush_r+0x22>
 8004e66:	4b04      	ldr	r3, [pc, #16]	; (8004e78 <_fflush_r+0x74>)
 8004e68:	429c      	cmp	r4, r3
 8004e6a:	bf08      	it	eq
 8004e6c:	68ec      	ldreq	r4, [r5, #12]
 8004e6e:	e7da      	b.n	8004e26 <_fflush_r+0x22>
 8004e70:	080054f4 	.word	0x080054f4
 8004e74:	08005514 	.word	0x08005514
 8004e78:	080054d4 	.word	0x080054d4

08004e7c <std>:
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	b510      	push	{r4, lr}
 8004e80:	4604      	mov	r4, r0
 8004e82:	e9c0 3300 	strd	r3, r3, [r0]
 8004e86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004e8a:	6083      	str	r3, [r0, #8]
 8004e8c:	8181      	strh	r1, [r0, #12]
 8004e8e:	6643      	str	r3, [r0, #100]	; 0x64
 8004e90:	81c2      	strh	r2, [r0, #14]
 8004e92:	6183      	str	r3, [r0, #24]
 8004e94:	4619      	mov	r1, r3
 8004e96:	2208      	movs	r2, #8
 8004e98:	305c      	adds	r0, #92	; 0x5c
 8004e9a:	f7ff fdef 	bl	8004a7c <memset>
 8004e9e:	4b05      	ldr	r3, [pc, #20]	; (8004eb4 <std+0x38>)
 8004ea0:	6263      	str	r3, [r4, #36]	; 0x24
 8004ea2:	4b05      	ldr	r3, [pc, #20]	; (8004eb8 <std+0x3c>)
 8004ea4:	62a3      	str	r3, [r4, #40]	; 0x28
 8004ea6:	4b05      	ldr	r3, [pc, #20]	; (8004ebc <std+0x40>)
 8004ea8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004eaa:	4b05      	ldr	r3, [pc, #20]	; (8004ec0 <std+0x44>)
 8004eac:	6224      	str	r4, [r4, #32]
 8004eae:	6323      	str	r3, [r4, #48]	; 0x30
 8004eb0:	bd10      	pop	{r4, pc}
 8004eb2:	bf00      	nop
 8004eb4:	08005319 	.word	0x08005319
 8004eb8:	0800533b 	.word	0x0800533b
 8004ebc:	08005373 	.word	0x08005373
 8004ec0:	08005397 	.word	0x08005397

08004ec4 <_cleanup_r>:
 8004ec4:	4901      	ldr	r1, [pc, #4]	; (8004ecc <_cleanup_r+0x8>)
 8004ec6:	f000 b8af 	b.w	8005028 <_fwalk_reent>
 8004eca:	bf00      	nop
 8004ecc:	08004e05 	.word	0x08004e05

08004ed0 <__sfmoreglue>:
 8004ed0:	b570      	push	{r4, r5, r6, lr}
 8004ed2:	2268      	movs	r2, #104	; 0x68
 8004ed4:	1e4d      	subs	r5, r1, #1
 8004ed6:	4355      	muls	r5, r2
 8004ed8:	460e      	mov	r6, r1
 8004eda:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004ede:	f000 f997 	bl	8005210 <_malloc_r>
 8004ee2:	4604      	mov	r4, r0
 8004ee4:	b140      	cbz	r0, 8004ef8 <__sfmoreglue+0x28>
 8004ee6:	2100      	movs	r1, #0
 8004ee8:	e9c0 1600 	strd	r1, r6, [r0]
 8004eec:	300c      	adds	r0, #12
 8004eee:	60a0      	str	r0, [r4, #8]
 8004ef0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004ef4:	f7ff fdc2 	bl	8004a7c <memset>
 8004ef8:	4620      	mov	r0, r4
 8004efa:	bd70      	pop	{r4, r5, r6, pc}

08004efc <__sfp_lock_acquire>:
 8004efc:	4801      	ldr	r0, [pc, #4]	; (8004f04 <__sfp_lock_acquire+0x8>)
 8004efe:	f000 b8b3 	b.w	8005068 <__retarget_lock_acquire_recursive>
 8004f02:	bf00      	nop
 8004f04:	20000289 	.word	0x20000289

08004f08 <__sfp_lock_release>:
 8004f08:	4801      	ldr	r0, [pc, #4]	; (8004f10 <__sfp_lock_release+0x8>)
 8004f0a:	f000 b8ae 	b.w	800506a <__retarget_lock_release_recursive>
 8004f0e:	bf00      	nop
 8004f10:	20000289 	.word	0x20000289

08004f14 <__sinit_lock_acquire>:
 8004f14:	4801      	ldr	r0, [pc, #4]	; (8004f1c <__sinit_lock_acquire+0x8>)
 8004f16:	f000 b8a7 	b.w	8005068 <__retarget_lock_acquire_recursive>
 8004f1a:	bf00      	nop
 8004f1c:	2000028a 	.word	0x2000028a

08004f20 <__sinit_lock_release>:
 8004f20:	4801      	ldr	r0, [pc, #4]	; (8004f28 <__sinit_lock_release+0x8>)
 8004f22:	f000 b8a2 	b.w	800506a <__retarget_lock_release_recursive>
 8004f26:	bf00      	nop
 8004f28:	2000028a 	.word	0x2000028a

08004f2c <__sinit>:
 8004f2c:	b510      	push	{r4, lr}
 8004f2e:	4604      	mov	r4, r0
 8004f30:	f7ff fff0 	bl	8004f14 <__sinit_lock_acquire>
 8004f34:	69a3      	ldr	r3, [r4, #24]
 8004f36:	b11b      	cbz	r3, 8004f40 <__sinit+0x14>
 8004f38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f3c:	f7ff bff0 	b.w	8004f20 <__sinit_lock_release>
 8004f40:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004f44:	6523      	str	r3, [r4, #80]	; 0x50
 8004f46:	4b13      	ldr	r3, [pc, #76]	; (8004f94 <__sinit+0x68>)
 8004f48:	4a13      	ldr	r2, [pc, #76]	; (8004f98 <__sinit+0x6c>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	62a2      	str	r2, [r4, #40]	; 0x28
 8004f4e:	42a3      	cmp	r3, r4
 8004f50:	bf04      	itt	eq
 8004f52:	2301      	moveq	r3, #1
 8004f54:	61a3      	streq	r3, [r4, #24]
 8004f56:	4620      	mov	r0, r4
 8004f58:	f000 f820 	bl	8004f9c <__sfp>
 8004f5c:	6060      	str	r0, [r4, #4]
 8004f5e:	4620      	mov	r0, r4
 8004f60:	f000 f81c 	bl	8004f9c <__sfp>
 8004f64:	60a0      	str	r0, [r4, #8]
 8004f66:	4620      	mov	r0, r4
 8004f68:	f000 f818 	bl	8004f9c <__sfp>
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	60e0      	str	r0, [r4, #12]
 8004f70:	2104      	movs	r1, #4
 8004f72:	6860      	ldr	r0, [r4, #4]
 8004f74:	f7ff ff82 	bl	8004e7c <std>
 8004f78:	68a0      	ldr	r0, [r4, #8]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	2109      	movs	r1, #9
 8004f7e:	f7ff ff7d 	bl	8004e7c <std>
 8004f82:	68e0      	ldr	r0, [r4, #12]
 8004f84:	2202      	movs	r2, #2
 8004f86:	2112      	movs	r1, #18
 8004f88:	f7ff ff78 	bl	8004e7c <std>
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	61a3      	str	r3, [r4, #24]
 8004f90:	e7d2      	b.n	8004f38 <__sinit+0xc>
 8004f92:	bf00      	nop
 8004f94:	080054d0 	.word	0x080054d0
 8004f98:	08004ec5 	.word	0x08004ec5

08004f9c <__sfp>:
 8004f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f9e:	4607      	mov	r7, r0
 8004fa0:	f7ff ffac 	bl	8004efc <__sfp_lock_acquire>
 8004fa4:	4b1e      	ldr	r3, [pc, #120]	; (8005020 <__sfp+0x84>)
 8004fa6:	681e      	ldr	r6, [r3, #0]
 8004fa8:	69b3      	ldr	r3, [r6, #24]
 8004faa:	b913      	cbnz	r3, 8004fb2 <__sfp+0x16>
 8004fac:	4630      	mov	r0, r6
 8004fae:	f7ff ffbd 	bl	8004f2c <__sinit>
 8004fb2:	3648      	adds	r6, #72	; 0x48
 8004fb4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004fb8:	3b01      	subs	r3, #1
 8004fba:	d503      	bpl.n	8004fc4 <__sfp+0x28>
 8004fbc:	6833      	ldr	r3, [r6, #0]
 8004fbe:	b30b      	cbz	r3, 8005004 <__sfp+0x68>
 8004fc0:	6836      	ldr	r6, [r6, #0]
 8004fc2:	e7f7      	b.n	8004fb4 <__sfp+0x18>
 8004fc4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004fc8:	b9d5      	cbnz	r5, 8005000 <__sfp+0x64>
 8004fca:	4b16      	ldr	r3, [pc, #88]	; (8005024 <__sfp+0x88>)
 8004fcc:	60e3      	str	r3, [r4, #12]
 8004fce:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004fd2:	6665      	str	r5, [r4, #100]	; 0x64
 8004fd4:	f000 f847 	bl	8005066 <__retarget_lock_init_recursive>
 8004fd8:	f7ff ff96 	bl	8004f08 <__sfp_lock_release>
 8004fdc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004fe0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004fe4:	6025      	str	r5, [r4, #0]
 8004fe6:	61a5      	str	r5, [r4, #24]
 8004fe8:	2208      	movs	r2, #8
 8004fea:	4629      	mov	r1, r5
 8004fec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004ff0:	f7ff fd44 	bl	8004a7c <memset>
 8004ff4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004ff8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004ffc:	4620      	mov	r0, r4
 8004ffe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005000:	3468      	adds	r4, #104	; 0x68
 8005002:	e7d9      	b.n	8004fb8 <__sfp+0x1c>
 8005004:	2104      	movs	r1, #4
 8005006:	4638      	mov	r0, r7
 8005008:	f7ff ff62 	bl	8004ed0 <__sfmoreglue>
 800500c:	4604      	mov	r4, r0
 800500e:	6030      	str	r0, [r6, #0]
 8005010:	2800      	cmp	r0, #0
 8005012:	d1d5      	bne.n	8004fc0 <__sfp+0x24>
 8005014:	f7ff ff78 	bl	8004f08 <__sfp_lock_release>
 8005018:	230c      	movs	r3, #12
 800501a:	603b      	str	r3, [r7, #0]
 800501c:	e7ee      	b.n	8004ffc <__sfp+0x60>
 800501e:	bf00      	nop
 8005020:	080054d0 	.word	0x080054d0
 8005024:	ffff0001 	.word	0xffff0001

08005028 <_fwalk_reent>:
 8005028:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800502c:	4606      	mov	r6, r0
 800502e:	4688      	mov	r8, r1
 8005030:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005034:	2700      	movs	r7, #0
 8005036:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800503a:	f1b9 0901 	subs.w	r9, r9, #1
 800503e:	d505      	bpl.n	800504c <_fwalk_reent+0x24>
 8005040:	6824      	ldr	r4, [r4, #0]
 8005042:	2c00      	cmp	r4, #0
 8005044:	d1f7      	bne.n	8005036 <_fwalk_reent+0xe>
 8005046:	4638      	mov	r0, r7
 8005048:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800504c:	89ab      	ldrh	r3, [r5, #12]
 800504e:	2b01      	cmp	r3, #1
 8005050:	d907      	bls.n	8005062 <_fwalk_reent+0x3a>
 8005052:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005056:	3301      	adds	r3, #1
 8005058:	d003      	beq.n	8005062 <_fwalk_reent+0x3a>
 800505a:	4629      	mov	r1, r5
 800505c:	4630      	mov	r0, r6
 800505e:	47c0      	blx	r8
 8005060:	4307      	orrs	r7, r0
 8005062:	3568      	adds	r5, #104	; 0x68
 8005064:	e7e9      	b.n	800503a <_fwalk_reent+0x12>

08005066 <__retarget_lock_init_recursive>:
 8005066:	4770      	bx	lr

08005068 <__retarget_lock_acquire_recursive>:
 8005068:	4770      	bx	lr

0800506a <__retarget_lock_release_recursive>:
 800506a:	4770      	bx	lr

0800506c <__swhatbuf_r>:
 800506c:	b570      	push	{r4, r5, r6, lr}
 800506e:	460e      	mov	r6, r1
 8005070:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005074:	2900      	cmp	r1, #0
 8005076:	b096      	sub	sp, #88	; 0x58
 8005078:	4614      	mov	r4, r2
 800507a:	461d      	mov	r5, r3
 800507c:	da08      	bge.n	8005090 <__swhatbuf_r+0x24>
 800507e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005082:	2200      	movs	r2, #0
 8005084:	602a      	str	r2, [r5, #0]
 8005086:	061a      	lsls	r2, r3, #24
 8005088:	d410      	bmi.n	80050ac <__swhatbuf_r+0x40>
 800508a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800508e:	e00e      	b.n	80050ae <__swhatbuf_r+0x42>
 8005090:	466a      	mov	r2, sp
 8005092:	f000 f9a7 	bl	80053e4 <_fstat_r>
 8005096:	2800      	cmp	r0, #0
 8005098:	dbf1      	blt.n	800507e <__swhatbuf_r+0x12>
 800509a:	9a01      	ldr	r2, [sp, #4]
 800509c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80050a0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80050a4:	425a      	negs	r2, r3
 80050a6:	415a      	adcs	r2, r3
 80050a8:	602a      	str	r2, [r5, #0]
 80050aa:	e7ee      	b.n	800508a <__swhatbuf_r+0x1e>
 80050ac:	2340      	movs	r3, #64	; 0x40
 80050ae:	2000      	movs	r0, #0
 80050b0:	6023      	str	r3, [r4, #0]
 80050b2:	b016      	add	sp, #88	; 0x58
 80050b4:	bd70      	pop	{r4, r5, r6, pc}
	...

080050b8 <__smakebuf_r>:
 80050b8:	898b      	ldrh	r3, [r1, #12]
 80050ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80050bc:	079d      	lsls	r5, r3, #30
 80050be:	4606      	mov	r6, r0
 80050c0:	460c      	mov	r4, r1
 80050c2:	d507      	bpl.n	80050d4 <__smakebuf_r+0x1c>
 80050c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80050c8:	6023      	str	r3, [r4, #0]
 80050ca:	6123      	str	r3, [r4, #16]
 80050cc:	2301      	movs	r3, #1
 80050ce:	6163      	str	r3, [r4, #20]
 80050d0:	b002      	add	sp, #8
 80050d2:	bd70      	pop	{r4, r5, r6, pc}
 80050d4:	ab01      	add	r3, sp, #4
 80050d6:	466a      	mov	r2, sp
 80050d8:	f7ff ffc8 	bl	800506c <__swhatbuf_r>
 80050dc:	9900      	ldr	r1, [sp, #0]
 80050de:	4605      	mov	r5, r0
 80050e0:	4630      	mov	r0, r6
 80050e2:	f000 f895 	bl	8005210 <_malloc_r>
 80050e6:	b948      	cbnz	r0, 80050fc <__smakebuf_r+0x44>
 80050e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80050ec:	059a      	lsls	r2, r3, #22
 80050ee:	d4ef      	bmi.n	80050d0 <__smakebuf_r+0x18>
 80050f0:	f023 0303 	bic.w	r3, r3, #3
 80050f4:	f043 0302 	orr.w	r3, r3, #2
 80050f8:	81a3      	strh	r3, [r4, #12]
 80050fa:	e7e3      	b.n	80050c4 <__smakebuf_r+0xc>
 80050fc:	4b0d      	ldr	r3, [pc, #52]	; (8005134 <__smakebuf_r+0x7c>)
 80050fe:	62b3      	str	r3, [r6, #40]	; 0x28
 8005100:	89a3      	ldrh	r3, [r4, #12]
 8005102:	6020      	str	r0, [r4, #0]
 8005104:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005108:	81a3      	strh	r3, [r4, #12]
 800510a:	9b00      	ldr	r3, [sp, #0]
 800510c:	6163      	str	r3, [r4, #20]
 800510e:	9b01      	ldr	r3, [sp, #4]
 8005110:	6120      	str	r0, [r4, #16]
 8005112:	b15b      	cbz	r3, 800512c <__smakebuf_r+0x74>
 8005114:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005118:	4630      	mov	r0, r6
 800511a:	f000 f975 	bl	8005408 <_isatty_r>
 800511e:	b128      	cbz	r0, 800512c <__smakebuf_r+0x74>
 8005120:	89a3      	ldrh	r3, [r4, #12]
 8005122:	f023 0303 	bic.w	r3, r3, #3
 8005126:	f043 0301 	orr.w	r3, r3, #1
 800512a:	81a3      	strh	r3, [r4, #12]
 800512c:	89a0      	ldrh	r0, [r4, #12]
 800512e:	4305      	orrs	r5, r0
 8005130:	81a5      	strh	r5, [r4, #12]
 8005132:	e7cd      	b.n	80050d0 <__smakebuf_r+0x18>
 8005134:	08004ec5 	.word	0x08004ec5

08005138 <_free_r>:
 8005138:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800513a:	2900      	cmp	r1, #0
 800513c:	d044      	beq.n	80051c8 <_free_r+0x90>
 800513e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005142:	9001      	str	r0, [sp, #4]
 8005144:	2b00      	cmp	r3, #0
 8005146:	f1a1 0404 	sub.w	r4, r1, #4
 800514a:	bfb8      	it	lt
 800514c:	18e4      	addlt	r4, r4, r3
 800514e:	f000 f97d 	bl	800544c <__malloc_lock>
 8005152:	4a1e      	ldr	r2, [pc, #120]	; (80051cc <_free_r+0x94>)
 8005154:	9801      	ldr	r0, [sp, #4]
 8005156:	6813      	ldr	r3, [r2, #0]
 8005158:	b933      	cbnz	r3, 8005168 <_free_r+0x30>
 800515a:	6063      	str	r3, [r4, #4]
 800515c:	6014      	str	r4, [r2, #0]
 800515e:	b003      	add	sp, #12
 8005160:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005164:	f000 b978 	b.w	8005458 <__malloc_unlock>
 8005168:	42a3      	cmp	r3, r4
 800516a:	d908      	bls.n	800517e <_free_r+0x46>
 800516c:	6825      	ldr	r5, [r4, #0]
 800516e:	1961      	adds	r1, r4, r5
 8005170:	428b      	cmp	r3, r1
 8005172:	bf01      	itttt	eq
 8005174:	6819      	ldreq	r1, [r3, #0]
 8005176:	685b      	ldreq	r3, [r3, #4]
 8005178:	1949      	addeq	r1, r1, r5
 800517a:	6021      	streq	r1, [r4, #0]
 800517c:	e7ed      	b.n	800515a <_free_r+0x22>
 800517e:	461a      	mov	r2, r3
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	b10b      	cbz	r3, 8005188 <_free_r+0x50>
 8005184:	42a3      	cmp	r3, r4
 8005186:	d9fa      	bls.n	800517e <_free_r+0x46>
 8005188:	6811      	ldr	r1, [r2, #0]
 800518a:	1855      	adds	r5, r2, r1
 800518c:	42a5      	cmp	r5, r4
 800518e:	d10b      	bne.n	80051a8 <_free_r+0x70>
 8005190:	6824      	ldr	r4, [r4, #0]
 8005192:	4421      	add	r1, r4
 8005194:	1854      	adds	r4, r2, r1
 8005196:	42a3      	cmp	r3, r4
 8005198:	6011      	str	r1, [r2, #0]
 800519a:	d1e0      	bne.n	800515e <_free_r+0x26>
 800519c:	681c      	ldr	r4, [r3, #0]
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	6053      	str	r3, [r2, #4]
 80051a2:	4421      	add	r1, r4
 80051a4:	6011      	str	r1, [r2, #0]
 80051a6:	e7da      	b.n	800515e <_free_r+0x26>
 80051a8:	d902      	bls.n	80051b0 <_free_r+0x78>
 80051aa:	230c      	movs	r3, #12
 80051ac:	6003      	str	r3, [r0, #0]
 80051ae:	e7d6      	b.n	800515e <_free_r+0x26>
 80051b0:	6825      	ldr	r5, [r4, #0]
 80051b2:	1961      	adds	r1, r4, r5
 80051b4:	428b      	cmp	r3, r1
 80051b6:	bf04      	itt	eq
 80051b8:	6819      	ldreq	r1, [r3, #0]
 80051ba:	685b      	ldreq	r3, [r3, #4]
 80051bc:	6063      	str	r3, [r4, #4]
 80051be:	bf04      	itt	eq
 80051c0:	1949      	addeq	r1, r1, r5
 80051c2:	6021      	streq	r1, [r4, #0]
 80051c4:	6054      	str	r4, [r2, #4]
 80051c6:	e7ca      	b.n	800515e <_free_r+0x26>
 80051c8:	b003      	add	sp, #12
 80051ca:	bd30      	pop	{r4, r5, pc}
 80051cc:	2000028c 	.word	0x2000028c

080051d0 <sbrk_aligned>:
 80051d0:	b570      	push	{r4, r5, r6, lr}
 80051d2:	4e0e      	ldr	r6, [pc, #56]	; (800520c <sbrk_aligned+0x3c>)
 80051d4:	460c      	mov	r4, r1
 80051d6:	6831      	ldr	r1, [r6, #0]
 80051d8:	4605      	mov	r5, r0
 80051da:	b911      	cbnz	r1, 80051e2 <sbrk_aligned+0x12>
 80051dc:	f000 f88c 	bl	80052f8 <_sbrk_r>
 80051e0:	6030      	str	r0, [r6, #0]
 80051e2:	4621      	mov	r1, r4
 80051e4:	4628      	mov	r0, r5
 80051e6:	f000 f887 	bl	80052f8 <_sbrk_r>
 80051ea:	1c43      	adds	r3, r0, #1
 80051ec:	d00a      	beq.n	8005204 <sbrk_aligned+0x34>
 80051ee:	1cc4      	adds	r4, r0, #3
 80051f0:	f024 0403 	bic.w	r4, r4, #3
 80051f4:	42a0      	cmp	r0, r4
 80051f6:	d007      	beq.n	8005208 <sbrk_aligned+0x38>
 80051f8:	1a21      	subs	r1, r4, r0
 80051fa:	4628      	mov	r0, r5
 80051fc:	f000 f87c 	bl	80052f8 <_sbrk_r>
 8005200:	3001      	adds	r0, #1
 8005202:	d101      	bne.n	8005208 <sbrk_aligned+0x38>
 8005204:	f04f 34ff 	mov.w	r4, #4294967295
 8005208:	4620      	mov	r0, r4
 800520a:	bd70      	pop	{r4, r5, r6, pc}
 800520c:	20000290 	.word	0x20000290

08005210 <_malloc_r>:
 8005210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005214:	1ccd      	adds	r5, r1, #3
 8005216:	f025 0503 	bic.w	r5, r5, #3
 800521a:	3508      	adds	r5, #8
 800521c:	2d0c      	cmp	r5, #12
 800521e:	bf38      	it	cc
 8005220:	250c      	movcc	r5, #12
 8005222:	2d00      	cmp	r5, #0
 8005224:	4607      	mov	r7, r0
 8005226:	db01      	blt.n	800522c <_malloc_r+0x1c>
 8005228:	42a9      	cmp	r1, r5
 800522a:	d905      	bls.n	8005238 <_malloc_r+0x28>
 800522c:	230c      	movs	r3, #12
 800522e:	603b      	str	r3, [r7, #0]
 8005230:	2600      	movs	r6, #0
 8005232:	4630      	mov	r0, r6
 8005234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005238:	4e2e      	ldr	r6, [pc, #184]	; (80052f4 <_malloc_r+0xe4>)
 800523a:	f000 f907 	bl	800544c <__malloc_lock>
 800523e:	6833      	ldr	r3, [r6, #0]
 8005240:	461c      	mov	r4, r3
 8005242:	bb34      	cbnz	r4, 8005292 <_malloc_r+0x82>
 8005244:	4629      	mov	r1, r5
 8005246:	4638      	mov	r0, r7
 8005248:	f7ff ffc2 	bl	80051d0 <sbrk_aligned>
 800524c:	1c43      	adds	r3, r0, #1
 800524e:	4604      	mov	r4, r0
 8005250:	d14d      	bne.n	80052ee <_malloc_r+0xde>
 8005252:	6834      	ldr	r4, [r6, #0]
 8005254:	4626      	mov	r6, r4
 8005256:	2e00      	cmp	r6, #0
 8005258:	d140      	bne.n	80052dc <_malloc_r+0xcc>
 800525a:	6823      	ldr	r3, [r4, #0]
 800525c:	4631      	mov	r1, r6
 800525e:	4638      	mov	r0, r7
 8005260:	eb04 0803 	add.w	r8, r4, r3
 8005264:	f000 f848 	bl	80052f8 <_sbrk_r>
 8005268:	4580      	cmp	r8, r0
 800526a:	d13a      	bne.n	80052e2 <_malloc_r+0xd2>
 800526c:	6821      	ldr	r1, [r4, #0]
 800526e:	3503      	adds	r5, #3
 8005270:	1a6d      	subs	r5, r5, r1
 8005272:	f025 0503 	bic.w	r5, r5, #3
 8005276:	3508      	adds	r5, #8
 8005278:	2d0c      	cmp	r5, #12
 800527a:	bf38      	it	cc
 800527c:	250c      	movcc	r5, #12
 800527e:	4629      	mov	r1, r5
 8005280:	4638      	mov	r0, r7
 8005282:	f7ff ffa5 	bl	80051d0 <sbrk_aligned>
 8005286:	3001      	adds	r0, #1
 8005288:	d02b      	beq.n	80052e2 <_malloc_r+0xd2>
 800528a:	6823      	ldr	r3, [r4, #0]
 800528c:	442b      	add	r3, r5
 800528e:	6023      	str	r3, [r4, #0]
 8005290:	e00e      	b.n	80052b0 <_malloc_r+0xa0>
 8005292:	6822      	ldr	r2, [r4, #0]
 8005294:	1b52      	subs	r2, r2, r5
 8005296:	d41e      	bmi.n	80052d6 <_malloc_r+0xc6>
 8005298:	2a0b      	cmp	r2, #11
 800529a:	d916      	bls.n	80052ca <_malloc_r+0xba>
 800529c:	1961      	adds	r1, r4, r5
 800529e:	42a3      	cmp	r3, r4
 80052a0:	6025      	str	r5, [r4, #0]
 80052a2:	bf18      	it	ne
 80052a4:	6059      	strne	r1, [r3, #4]
 80052a6:	6863      	ldr	r3, [r4, #4]
 80052a8:	bf08      	it	eq
 80052aa:	6031      	streq	r1, [r6, #0]
 80052ac:	5162      	str	r2, [r4, r5]
 80052ae:	604b      	str	r3, [r1, #4]
 80052b0:	4638      	mov	r0, r7
 80052b2:	f104 060b 	add.w	r6, r4, #11
 80052b6:	f000 f8cf 	bl	8005458 <__malloc_unlock>
 80052ba:	f026 0607 	bic.w	r6, r6, #7
 80052be:	1d23      	adds	r3, r4, #4
 80052c0:	1af2      	subs	r2, r6, r3
 80052c2:	d0b6      	beq.n	8005232 <_malloc_r+0x22>
 80052c4:	1b9b      	subs	r3, r3, r6
 80052c6:	50a3      	str	r3, [r4, r2]
 80052c8:	e7b3      	b.n	8005232 <_malloc_r+0x22>
 80052ca:	6862      	ldr	r2, [r4, #4]
 80052cc:	42a3      	cmp	r3, r4
 80052ce:	bf0c      	ite	eq
 80052d0:	6032      	streq	r2, [r6, #0]
 80052d2:	605a      	strne	r2, [r3, #4]
 80052d4:	e7ec      	b.n	80052b0 <_malloc_r+0xa0>
 80052d6:	4623      	mov	r3, r4
 80052d8:	6864      	ldr	r4, [r4, #4]
 80052da:	e7b2      	b.n	8005242 <_malloc_r+0x32>
 80052dc:	4634      	mov	r4, r6
 80052de:	6876      	ldr	r6, [r6, #4]
 80052e0:	e7b9      	b.n	8005256 <_malloc_r+0x46>
 80052e2:	230c      	movs	r3, #12
 80052e4:	603b      	str	r3, [r7, #0]
 80052e6:	4638      	mov	r0, r7
 80052e8:	f000 f8b6 	bl	8005458 <__malloc_unlock>
 80052ec:	e7a1      	b.n	8005232 <_malloc_r+0x22>
 80052ee:	6025      	str	r5, [r4, #0]
 80052f0:	e7de      	b.n	80052b0 <_malloc_r+0xa0>
 80052f2:	bf00      	nop
 80052f4:	2000028c 	.word	0x2000028c

080052f8 <_sbrk_r>:
 80052f8:	b538      	push	{r3, r4, r5, lr}
 80052fa:	4d06      	ldr	r5, [pc, #24]	; (8005314 <_sbrk_r+0x1c>)
 80052fc:	2300      	movs	r3, #0
 80052fe:	4604      	mov	r4, r0
 8005300:	4608      	mov	r0, r1
 8005302:	602b      	str	r3, [r5, #0]
 8005304:	f7fb fca4 	bl	8000c50 <_sbrk>
 8005308:	1c43      	adds	r3, r0, #1
 800530a:	d102      	bne.n	8005312 <_sbrk_r+0x1a>
 800530c:	682b      	ldr	r3, [r5, #0]
 800530e:	b103      	cbz	r3, 8005312 <_sbrk_r+0x1a>
 8005310:	6023      	str	r3, [r4, #0]
 8005312:	bd38      	pop	{r3, r4, r5, pc}
 8005314:	20000294 	.word	0x20000294

08005318 <__sread>:
 8005318:	b510      	push	{r4, lr}
 800531a:	460c      	mov	r4, r1
 800531c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005320:	f000 f8a0 	bl	8005464 <_read_r>
 8005324:	2800      	cmp	r0, #0
 8005326:	bfab      	itete	ge
 8005328:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800532a:	89a3      	ldrhlt	r3, [r4, #12]
 800532c:	181b      	addge	r3, r3, r0
 800532e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005332:	bfac      	ite	ge
 8005334:	6563      	strge	r3, [r4, #84]	; 0x54
 8005336:	81a3      	strhlt	r3, [r4, #12]
 8005338:	bd10      	pop	{r4, pc}

0800533a <__swrite>:
 800533a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800533e:	461f      	mov	r7, r3
 8005340:	898b      	ldrh	r3, [r1, #12]
 8005342:	05db      	lsls	r3, r3, #23
 8005344:	4605      	mov	r5, r0
 8005346:	460c      	mov	r4, r1
 8005348:	4616      	mov	r6, r2
 800534a:	d505      	bpl.n	8005358 <__swrite+0x1e>
 800534c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005350:	2302      	movs	r3, #2
 8005352:	2200      	movs	r2, #0
 8005354:	f000 f868 	bl	8005428 <_lseek_r>
 8005358:	89a3      	ldrh	r3, [r4, #12]
 800535a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800535e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005362:	81a3      	strh	r3, [r4, #12]
 8005364:	4632      	mov	r2, r6
 8005366:	463b      	mov	r3, r7
 8005368:	4628      	mov	r0, r5
 800536a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800536e:	f000 b817 	b.w	80053a0 <_write_r>

08005372 <__sseek>:
 8005372:	b510      	push	{r4, lr}
 8005374:	460c      	mov	r4, r1
 8005376:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800537a:	f000 f855 	bl	8005428 <_lseek_r>
 800537e:	1c43      	adds	r3, r0, #1
 8005380:	89a3      	ldrh	r3, [r4, #12]
 8005382:	bf15      	itete	ne
 8005384:	6560      	strne	r0, [r4, #84]	; 0x54
 8005386:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800538a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800538e:	81a3      	strheq	r3, [r4, #12]
 8005390:	bf18      	it	ne
 8005392:	81a3      	strhne	r3, [r4, #12]
 8005394:	bd10      	pop	{r4, pc}

08005396 <__sclose>:
 8005396:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800539a:	f000 b813 	b.w	80053c4 <_close_r>
	...

080053a0 <_write_r>:
 80053a0:	b538      	push	{r3, r4, r5, lr}
 80053a2:	4d07      	ldr	r5, [pc, #28]	; (80053c0 <_write_r+0x20>)
 80053a4:	4604      	mov	r4, r0
 80053a6:	4608      	mov	r0, r1
 80053a8:	4611      	mov	r1, r2
 80053aa:	2200      	movs	r2, #0
 80053ac:	602a      	str	r2, [r5, #0]
 80053ae:	461a      	mov	r2, r3
 80053b0:	f7fb fbfd 	bl	8000bae <_write>
 80053b4:	1c43      	adds	r3, r0, #1
 80053b6:	d102      	bne.n	80053be <_write_r+0x1e>
 80053b8:	682b      	ldr	r3, [r5, #0]
 80053ba:	b103      	cbz	r3, 80053be <_write_r+0x1e>
 80053bc:	6023      	str	r3, [r4, #0]
 80053be:	bd38      	pop	{r3, r4, r5, pc}
 80053c0:	20000294 	.word	0x20000294

080053c4 <_close_r>:
 80053c4:	b538      	push	{r3, r4, r5, lr}
 80053c6:	4d06      	ldr	r5, [pc, #24]	; (80053e0 <_close_r+0x1c>)
 80053c8:	2300      	movs	r3, #0
 80053ca:	4604      	mov	r4, r0
 80053cc:	4608      	mov	r0, r1
 80053ce:	602b      	str	r3, [r5, #0]
 80053d0:	f7fb fc09 	bl	8000be6 <_close>
 80053d4:	1c43      	adds	r3, r0, #1
 80053d6:	d102      	bne.n	80053de <_close_r+0x1a>
 80053d8:	682b      	ldr	r3, [r5, #0]
 80053da:	b103      	cbz	r3, 80053de <_close_r+0x1a>
 80053dc:	6023      	str	r3, [r4, #0]
 80053de:	bd38      	pop	{r3, r4, r5, pc}
 80053e0:	20000294 	.word	0x20000294

080053e4 <_fstat_r>:
 80053e4:	b538      	push	{r3, r4, r5, lr}
 80053e6:	4d07      	ldr	r5, [pc, #28]	; (8005404 <_fstat_r+0x20>)
 80053e8:	2300      	movs	r3, #0
 80053ea:	4604      	mov	r4, r0
 80053ec:	4608      	mov	r0, r1
 80053ee:	4611      	mov	r1, r2
 80053f0:	602b      	str	r3, [r5, #0]
 80053f2:	f7fb fc04 	bl	8000bfe <_fstat>
 80053f6:	1c43      	adds	r3, r0, #1
 80053f8:	d102      	bne.n	8005400 <_fstat_r+0x1c>
 80053fa:	682b      	ldr	r3, [r5, #0]
 80053fc:	b103      	cbz	r3, 8005400 <_fstat_r+0x1c>
 80053fe:	6023      	str	r3, [r4, #0]
 8005400:	bd38      	pop	{r3, r4, r5, pc}
 8005402:	bf00      	nop
 8005404:	20000294 	.word	0x20000294

08005408 <_isatty_r>:
 8005408:	b538      	push	{r3, r4, r5, lr}
 800540a:	4d06      	ldr	r5, [pc, #24]	; (8005424 <_isatty_r+0x1c>)
 800540c:	2300      	movs	r3, #0
 800540e:	4604      	mov	r4, r0
 8005410:	4608      	mov	r0, r1
 8005412:	602b      	str	r3, [r5, #0]
 8005414:	f7fb fc03 	bl	8000c1e <_isatty>
 8005418:	1c43      	adds	r3, r0, #1
 800541a:	d102      	bne.n	8005422 <_isatty_r+0x1a>
 800541c:	682b      	ldr	r3, [r5, #0]
 800541e:	b103      	cbz	r3, 8005422 <_isatty_r+0x1a>
 8005420:	6023      	str	r3, [r4, #0]
 8005422:	bd38      	pop	{r3, r4, r5, pc}
 8005424:	20000294 	.word	0x20000294

08005428 <_lseek_r>:
 8005428:	b538      	push	{r3, r4, r5, lr}
 800542a:	4d07      	ldr	r5, [pc, #28]	; (8005448 <_lseek_r+0x20>)
 800542c:	4604      	mov	r4, r0
 800542e:	4608      	mov	r0, r1
 8005430:	4611      	mov	r1, r2
 8005432:	2200      	movs	r2, #0
 8005434:	602a      	str	r2, [r5, #0]
 8005436:	461a      	mov	r2, r3
 8005438:	f7fb fbfc 	bl	8000c34 <_lseek>
 800543c:	1c43      	adds	r3, r0, #1
 800543e:	d102      	bne.n	8005446 <_lseek_r+0x1e>
 8005440:	682b      	ldr	r3, [r5, #0]
 8005442:	b103      	cbz	r3, 8005446 <_lseek_r+0x1e>
 8005444:	6023      	str	r3, [r4, #0]
 8005446:	bd38      	pop	{r3, r4, r5, pc}
 8005448:	20000294 	.word	0x20000294

0800544c <__malloc_lock>:
 800544c:	4801      	ldr	r0, [pc, #4]	; (8005454 <__malloc_lock+0x8>)
 800544e:	f7ff be0b 	b.w	8005068 <__retarget_lock_acquire_recursive>
 8005452:	bf00      	nop
 8005454:	20000288 	.word	0x20000288

08005458 <__malloc_unlock>:
 8005458:	4801      	ldr	r0, [pc, #4]	; (8005460 <__malloc_unlock+0x8>)
 800545a:	f7ff be06 	b.w	800506a <__retarget_lock_release_recursive>
 800545e:	bf00      	nop
 8005460:	20000288 	.word	0x20000288

08005464 <_read_r>:
 8005464:	b538      	push	{r3, r4, r5, lr}
 8005466:	4d07      	ldr	r5, [pc, #28]	; (8005484 <_read_r+0x20>)
 8005468:	4604      	mov	r4, r0
 800546a:	4608      	mov	r0, r1
 800546c:	4611      	mov	r1, r2
 800546e:	2200      	movs	r2, #0
 8005470:	602a      	str	r2, [r5, #0]
 8005472:	461a      	mov	r2, r3
 8005474:	f7fb fb7e 	bl	8000b74 <_read>
 8005478:	1c43      	adds	r3, r0, #1
 800547a:	d102      	bne.n	8005482 <_read_r+0x1e>
 800547c:	682b      	ldr	r3, [r5, #0]
 800547e:	b103      	cbz	r3, 8005482 <_read_r+0x1e>
 8005480:	6023      	str	r3, [r4, #0]
 8005482:	bd38      	pop	{r3, r4, r5, pc}
 8005484:	20000294 	.word	0x20000294

08005488 <_init>:
 8005488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800548a:	bf00      	nop
 800548c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800548e:	bc08      	pop	{r3}
 8005490:	469e      	mov	lr, r3
 8005492:	4770      	bx	lr

08005494 <_fini>:
 8005494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005496:	bf00      	nop
 8005498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800549a:	bc08      	pop	{r3}
 800549c:	469e      	mov	lr, r3
 800549e:	4770      	bx	lr
