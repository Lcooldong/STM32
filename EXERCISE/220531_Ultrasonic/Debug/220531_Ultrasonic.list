
220531_Ultrasonic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004168  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08004318  08004318  00014318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080043e4  080043e4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080043e4  080043e4  000143e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080043ec  080043ec  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080043ec  080043ec  000143ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080043f0  080043f0  000143f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080043f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000000cc  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000013c  2000013c  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e2af  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002020  00000000  00000000  0002e34f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d08  00000000  00000000  00030370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c20  00000000  00000000  00031078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024989  00000000  00000000  00031c98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f46f  00000000  00000000  00056621  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000db7e0  00000000  00000000  00065a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00141270  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003da0  00000000  00000000  001412c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08004300 	.word	0x08004300

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	08004300 	.word	0x08004300

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b08c      	sub	sp, #48	; 0x30
 8000598:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800059a:	f107 031c 	add.w	r3, r7, #28
 800059e:	2200      	movs	r2, #0
 80005a0:	601a      	str	r2, [r3, #0]
 80005a2:	605a      	str	r2, [r3, #4]
 80005a4:	609a      	str	r2, [r3, #8]
 80005a6:	60da      	str	r2, [r3, #12]
 80005a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005aa:	2300      	movs	r3, #0
 80005ac:	61bb      	str	r3, [r7, #24]
 80005ae:	4b86      	ldr	r3, [pc, #536]	; (80007c8 <MX_GPIO_Init+0x234>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b2:	4a85      	ldr	r2, [pc, #532]	; (80007c8 <MX_GPIO_Init+0x234>)
 80005b4:	f043 0304 	orr.w	r3, r3, #4
 80005b8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ba:	4b83      	ldr	r3, [pc, #524]	; (80007c8 <MX_GPIO_Init+0x234>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	f003 0304 	and.w	r3, r3, #4
 80005c2:	61bb      	str	r3, [r7, #24]
 80005c4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005c6:	2300      	movs	r3, #0
 80005c8:	617b      	str	r3, [r7, #20]
 80005ca:	4b7f      	ldr	r3, [pc, #508]	; (80007c8 <MX_GPIO_Init+0x234>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	4a7e      	ldr	r2, [pc, #504]	; (80007c8 <MX_GPIO_Init+0x234>)
 80005d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005d4:	6313      	str	r3, [r2, #48]	; 0x30
 80005d6:	4b7c      	ldr	r3, [pc, #496]	; (80007c8 <MX_GPIO_Init+0x234>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005de:	617b      	str	r3, [r7, #20]
 80005e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e2:	2300      	movs	r3, #0
 80005e4:	613b      	str	r3, [r7, #16]
 80005e6:	4b78      	ldr	r3, [pc, #480]	; (80007c8 <MX_GPIO_Init+0x234>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	4a77      	ldr	r2, [pc, #476]	; (80007c8 <MX_GPIO_Init+0x234>)
 80005ec:	f043 0301 	orr.w	r3, r3, #1
 80005f0:	6313      	str	r3, [r2, #48]	; 0x30
 80005f2:	4b75      	ldr	r3, [pc, #468]	; (80007c8 <MX_GPIO_Init+0x234>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f6:	f003 0301 	and.w	r3, r3, #1
 80005fa:	613b      	str	r3, [r7, #16]
 80005fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005fe:	2300      	movs	r3, #0
 8000600:	60fb      	str	r3, [r7, #12]
 8000602:	4b71      	ldr	r3, [pc, #452]	; (80007c8 <MX_GPIO_Init+0x234>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000606:	4a70      	ldr	r2, [pc, #448]	; (80007c8 <MX_GPIO_Init+0x234>)
 8000608:	f043 0302 	orr.w	r3, r3, #2
 800060c:	6313      	str	r3, [r2, #48]	; 0x30
 800060e:	4b6e      	ldr	r3, [pc, #440]	; (80007c8 <MX_GPIO_Init+0x234>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000612:	f003 0302 	and.w	r3, r3, #2
 8000616:	60fb      	str	r3, [r7, #12]
 8000618:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800061a:	2300      	movs	r3, #0
 800061c:	60bb      	str	r3, [r7, #8]
 800061e:	4b6a      	ldr	r3, [pc, #424]	; (80007c8 <MX_GPIO_Init+0x234>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000622:	4a69      	ldr	r2, [pc, #420]	; (80007c8 <MX_GPIO_Init+0x234>)
 8000624:	f043 0308 	orr.w	r3, r3, #8
 8000628:	6313      	str	r3, [r2, #48]	; 0x30
 800062a:	4b67      	ldr	r3, [pc, #412]	; (80007c8 <MX_GPIO_Init+0x234>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062e:	f003 0308 	and.w	r3, r3, #8
 8000632:	60bb      	str	r3, [r7, #8]
 8000634:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000636:	2300      	movs	r3, #0
 8000638:	607b      	str	r3, [r7, #4]
 800063a:	4b63      	ldr	r3, [pc, #396]	; (80007c8 <MX_GPIO_Init+0x234>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	4a62      	ldr	r2, [pc, #392]	; (80007c8 <MX_GPIO_Init+0x234>)
 8000640:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000644:	6313      	str	r3, [r2, #48]	; 0x30
 8000646:	4b60      	ldr	r3, [pc, #384]	; (80007c8 <MX_GPIO_Init+0x234>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|TRIGGER_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000652:	2200      	movs	r2, #0
 8000654:	f244 01c1 	movw	r1, #16577	; 0x40c1
 8000658:	485c      	ldr	r0, [pc, #368]	; (80007cc <MX_GPIO_Init+0x238>)
 800065a:	f000 ffa3 	bl	80015a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800065e:	2200      	movs	r2, #0
 8000660:	2140      	movs	r1, #64	; 0x40
 8000662:	485b      	ldr	r0, [pc, #364]	; (80007d0 <MX_GPIO_Init+0x23c>)
 8000664:	f000 ff9e 	bl	80015a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000668:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800066c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800066e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000672:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000674:	2300      	movs	r3, #0
 8000676:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000678:	f107 031c 	add.w	r3, r7, #28
 800067c:	4619      	mov	r1, r3
 800067e:	4855      	ldr	r0, [pc, #340]	; (80007d4 <MX_GPIO_Init+0x240>)
 8000680:	f000 fde4 	bl	800124c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000684:	2332      	movs	r3, #50	; 0x32
 8000686:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000688:	2302      	movs	r3, #2
 800068a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068c:	2300      	movs	r3, #0
 800068e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000690:	2303      	movs	r3, #3
 8000692:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000694:	230b      	movs	r3, #11
 8000696:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000698:	f107 031c 	add.w	r3, r7, #28
 800069c:	4619      	mov	r1, r3
 800069e:	484d      	ldr	r0, [pc, #308]	; (80007d4 <MX_GPIO_Init+0x240>)
 80006a0:	f000 fdd4 	bl	800124c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80006a4:	2386      	movs	r3, #134	; 0x86
 80006a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006a8:	2302      	movs	r3, #2
 80006aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ac:	2300      	movs	r3, #0
 80006ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006b0:	2303      	movs	r3, #3
 80006b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006b4:	230b      	movs	r3, #11
 80006b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b8:	f107 031c 	add.w	r3, r7, #28
 80006bc:	4619      	mov	r1, r3
 80006be:	4846      	ldr	r0, [pc, #280]	; (80007d8 <MX_GPIO_Init+0x244>)
 80006c0:	f000 fdc4 	bl	800124c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80006c4:	2340      	movs	r3, #64	; 0x40
 80006c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80006c8:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80006cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80006ce:	2302      	movs	r3, #2
 80006d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d2:	f107 031c 	add.w	r3, r7, #28
 80006d6:	4619      	mov	r1, r3
 80006d8:	483f      	ldr	r0, [pc, #252]	; (80007d8 <MX_GPIO_Init+0x244>)
 80006da:	f000 fdb7 	bl	800124c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|TRIGGER_Pin|LD2_Pin;
 80006de:	f244 03c1 	movw	r3, #16577	; 0x40c1
 80006e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e4:	2301      	movs	r3, #1
 80006e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e8:	2300      	movs	r3, #0
 80006ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ec:	2300      	movs	r3, #0
 80006ee:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006f0:	f107 031c 	add.w	r3, r7, #28
 80006f4:	4619      	mov	r1, r3
 80006f6:	4835      	ldr	r0, [pc, #212]	; (80007cc <MX_GPIO_Init+0x238>)
 80006f8:	f000 fda8 	bl	800124c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80006fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000700:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000702:	2302      	movs	r3, #2
 8000704:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000706:	2300      	movs	r3, #0
 8000708:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800070a:	2303      	movs	r3, #3
 800070c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800070e:	230b      	movs	r3, #11
 8000710:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000712:	f107 031c 	add.w	r3, r7, #28
 8000716:	4619      	mov	r1, r3
 8000718:	482c      	ldr	r0, [pc, #176]	; (80007cc <MX_GPIO_Init+0x238>)
 800071a:	f000 fd97 	bl	800124c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800071e:	2340      	movs	r3, #64	; 0x40
 8000720:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000722:	2301      	movs	r3, #1
 8000724:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000726:	2300      	movs	r3, #0
 8000728:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800072a:	2300      	movs	r3, #0
 800072c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800072e:	f107 031c 	add.w	r3, r7, #28
 8000732:	4619      	mov	r1, r3
 8000734:	4826      	ldr	r0, [pc, #152]	; (80007d0 <MX_GPIO_Init+0x23c>)
 8000736:	f000 fd89 	bl	800124c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800073a:	2380      	movs	r3, #128	; 0x80
 800073c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800073e:	2300      	movs	r3, #0
 8000740:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000742:	2300      	movs	r3, #0
 8000744:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000746:	f107 031c 	add.w	r3, r7, #28
 800074a:	4619      	mov	r1, r3
 800074c:	4820      	ldr	r0, [pc, #128]	; (80007d0 <MX_GPIO_Init+0x23c>)
 800074e:	f000 fd7d 	bl	800124c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000752:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000756:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000758:	2302      	movs	r3, #2
 800075a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075c:	2300      	movs	r3, #0
 800075e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000760:	2303      	movs	r3, #3
 8000762:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000764:	230a      	movs	r3, #10
 8000766:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000768:	f107 031c 	add.w	r3, r7, #28
 800076c:	4619      	mov	r1, r3
 800076e:	481a      	ldr	r0, [pc, #104]	; (80007d8 <MX_GPIO_Init+0x244>)
 8000770:	f000 fd6c 	bl	800124c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000774:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000778:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800077a:	2300      	movs	r3, #0
 800077c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077e:	2300      	movs	r3, #0
 8000780:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000782:	f107 031c 	add.w	r3, r7, #28
 8000786:	4619      	mov	r1, r3
 8000788:	4813      	ldr	r0, [pc, #76]	; (80007d8 <MX_GPIO_Init+0x244>)
 800078a:	f000 fd5f 	bl	800124c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800078e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000792:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000794:	2302      	movs	r3, #2
 8000796:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000798:	2300      	movs	r3, #0
 800079a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800079c:	2303      	movs	r3, #3
 800079e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007a0:	230b      	movs	r3, #11
 80007a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007a4:	f107 031c 	add.w	r3, r7, #28
 80007a8:	4619      	mov	r1, r3
 80007aa:	4809      	ldr	r0, [pc, #36]	; (80007d0 <MX_GPIO_Init+0x23c>)
 80007ac:	f000 fd4e 	bl	800124c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80007b0:	2200      	movs	r2, #0
 80007b2:	2100      	movs	r1, #0
 80007b4:	2017      	movs	r0, #23
 80007b6:	f000 fd12 	bl	80011de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80007ba:	2017      	movs	r0, #23
 80007bc:	f000 fd2b 	bl	8001216 <HAL_NVIC_EnableIRQ>

}
 80007c0:	bf00      	nop
 80007c2:	3730      	adds	r7, #48	; 0x30
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	40023800 	.word	0x40023800
 80007cc:	40020400 	.word	0x40020400
 80007d0:	40021800 	.word	0x40021800
 80007d4:	40020800 	.word	0x40020800
 80007d8:	40020000 	.word	0x40020000

080007dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007e0:	f000 fb8c 	bl	8000efc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007e4:	f000 f81c 	bl	8000820 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007e8:	f7ff fed4 	bl	8000594 <MX_GPIO_Init>
  MX_TIM3_Init();
 80007ec:	f000 fa18 	bl	8000c20 <MX_TIM3_Init>
  MX_USART3_UART_Init();
 80007f0:	f000 fae8 	bl	8000dc4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim3);
 80007f4:	4807      	ldr	r0, [pc, #28]	; (8000814 <main+0x38>)
 80007f6:	f001 fc3f 	bl	8002078 <HAL_TIM_Base_Start>
//	  GPIOB->ODR ^= (1 << 7);
//	  for(uint8_t i=0; i < 50; i++)
//	  {
//		  delay_us(10000); // 0.1
//	  }
	startTrigger();
 80007fa:	f000 f8c1 	bl	8000980 <startTrigger>
	printf("Distance : %d\r\n", distance);
 80007fe:	4b06      	ldr	r3, [pc, #24]	; (8000818 <main+0x3c>)
 8000800:	881b      	ldrh	r3, [r3, #0]
 8000802:	4619      	mov	r1, r3
 8000804:	4805      	ldr	r0, [pc, #20]	; (800081c <main+0x40>)
 8000806:	f002 fd77 	bl	80032f8 <iprintf>
	HAL_Delay(100);
 800080a:	2064      	movs	r0, #100	; 0x64
 800080c:	f000 fbe8 	bl	8000fe0 <HAL_Delay>
	startTrigger();
 8000810:	e7f3      	b.n	80007fa <main+0x1e>
 8000812:	bf00      	nop
 8000814:	2000009c 	.word	0x2000009c
 8000818:	2000008e 	.word	0x2000008e
 800081c:	08004318 	.word	0x08004318

08000820 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b094      	sub	sp, #80	; 0x50
 8000824:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000826:	f107 0320 	add.w	r3, r7, #32
 800082a:	2230      	movs	r2, #48	; 0x30
 800082c:	2100      	movs	r1, #0
 800082e:	4618      	mov	r0, r3
 8000830:	f002 fd5a 	bl	80032e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000834:	f107 030c 	add.w	r3, r7, #12
 8000838:	2200      	movs	r2, #0
 800083a:	601a      	str	r2, [r3, #0]
 800083c:	605a      	str	r2, [r3, #4]
 800083e:	609a      	str	r2, [r3, #8]
 8000840:	60da      	str	r2, [r3, #12]
 8000842:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000844:	2300      	movs	r3, #0
 8000846:	60bb      	str	r3, [r7, #8]
 8000848:	4b2b      	ldr	r3, [pc, #172]	; (80008f8 <SystemClock_Config+0xd8>)
 800084a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800084c:	4a2a      	ldr	r2, [pc, #168]	; (80008f8 <SystemClock_Config+0xd8>)
 800084e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000852:	6413      	str	r3, [r2, #64]	; 0x40
 8000854:	4b28      	ldr	r3, [pc, #160]	; (80008f8 <SystemClock_Config+0xd8>)
 8000856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000858:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800085c:	60bb      	str	r3, [r7, #8]
 800085e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000860:	2300      	movs	r3, #0
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	4b25      	ldr	r3, [pc, #148]	; (80008fc <SystemClock_Config+0xdc>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a24      	ldr	r2, [pc, #144]	; (80008fc <SystemClock_Config+0xdc>)
 800086a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800086e:	6013      	str	r3, [r2, #0]
 8000870:	4b22      	ldr	r3, [pc, #136]	; (80008fc <SystemClock_Config+0xdc>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000878:	607b      	str	r3, [r7, #4]
 800087a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800087c:	2301      	movs	r3, #1
 800087e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000880:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000884:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000886:	2302      	movs	r3, #2
 8000888:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800088a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800088e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000890:	2304      	movs	r3, #4
 8000892:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000894:	23b4      	movs	r3, #180	; 0xb4
 8000896:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000898:	2302      	movs	r3, #2
 800089a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800089c:	2304      	movs	r3, #4
 800089e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008a0:	f107 0320 	add.w	r3, r7, #32
 80008a4:	4618      	mov	r0, r3
 80008a6:	f000 feff 	bl	80016a8 <HAL_RCC_OscConfig>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008b0:	f000 f8be 	bl	8000a30 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80008b4:	f000 fea8 	bl	8001608 <HAL_PWREx_EnableOverDrive>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80008be:	f000 f8b7 	bl	8000a30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008c2:	230f      	movs	r3, #15
 80008c4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008c6:	2302      	movs	r3, #2
 80008c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008ca:	2300      	movs	r3, #0
 80008cc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008ce:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008d2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008d8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80008da:	f107 030c 	add.w	r3, r7, #12
 80008de:	2105      	movs	r1, #5
 80008e0:	4618      	mov	r0, r3
 80008e2:	f001 f959 	bl	8001b98 <HAL_RCC_ClockConfig>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80008ec:	f000 f8a0 	bl	8000a30 <Error_Handler>
  }
}
 80008f0:	bf00      	nop
 80008f2:	3750      	adds	r7, #80	; 0x50
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	40023800 	.word	0x40023800
 80008fc:	40007000 	.word	0x40007000

08000900 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000900:	b480      	push	{r7}
 8000902:	b085      	sub	sp, #20
 8000904:	af00      	add	r7, sp, #0
 8000906:	4603      	mov	r3, r0
 8000908:	80fb      	strh	r3, [r7, #6]
	static uint32_t rising_time;
	static uint32_t falling_time;
	if(GPIO_Pin == GPIO_PIN_6)
 800090a:	88fb      	ldrh	r3, [r7, #6]
 800090c:	2b40      	cmp	r3, #64	; 0x40
 800090e:	d114      	bne.n	800093a <HAL_GPIO_EXTI_Callback+0x3a>
	{
		// rising
		if(echo_time_Flag == 1)
 8000910:	4b15      	ldr	r3, [pc, #84]	; (8000968 <HAL_GPIO_EXTI_Callback+0x68>)
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	b2db      	uxtb	r3, r3
 8000916:	2b01      	cmp	r3, #1
 8000918:	d108      	bne.n	800092c <HAL_GPIO_EXTI_Callback+0x2c>
		{

			falling_time = __HAL_TIM_GET_COUNTER(&htim3);
 800091a:	4b14      	ldr	r3, [pc, #80]	; (800096c <HAL_GPIO_EXTI_Callback+0x6c>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000920:	4a13      	ldr	r2, [pc, #76]	; (8000970 <HAL_GPIO_EXTI_Callback+0x70>)
 8000922:	6013      	str	r3, [r2, #0]
//			falling_time = HAL_GetTick();	// -> milliseconds
			echo_time_Flag = 0;
 8000924:	4b10      	ldr	r3, [pc, #64]	; (8000968 <HAL_GPIO_EXTI_Callback+0x68>)
 8000926:	2200      	movs	r2, #0
 8000928:	701a      	strb	r2, [r3, #0]
 800092a:	e006      	b.n	800093a <HAL_GPIO_EXTI_Callback+0x3a>
//			printf("falling %d\r\n", falling_time);
		}
		else
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
 800092c:	4b0f      	ldr	r3, [pc, #60]	; (800096c <HAL_GPIO_EXTI_Callback+0x6c>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	2200      	movs	r2, #0
 8000932:	625a      	str	r2, [r3, #36]	; 0x24
//			rising_time = HAL_GetTick();

			echo_time_Flag = 1;
 8000934:	4b0c      	ldr	r3, [pc, #48]	; (8000968 <HAL_GPIO_EXTI_Callback+0x68>)
 8000936:	2201      	movs	r2, #1
 8000938:	701a      	strb	r2, [r3, #0]
//			printf("rising %d\r\n", rising_time);
		}
	}

	if(rising_time < falling_time)
 800093a:	4b0e      	ldr	r3, [pc, #56]	; (8000974 <HAL_GPIO_EXTI_Callback+0x74>)
 800093c:	681a      	ldr	r2, [r3, #0]
 800093e:	4b0c      	ldr	r3, [pc, #48]	; (8000970 <HAL_GPIO_EXTI_Callback+0x70>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	429a      	cmp	r2, r3
 8000944:	d20a      	bcs.n	800095c <HAL_GPIO_EXTI_Callback+0x5c>
	{
//		printf("Get result\r\n");
//		uint16_t width = falling_time - rising_time;
		uint16_t width = falling_time;
 8000946:	4b0a      	ldr	r3, [pc, #40]	; (8000970 <HAL_GPIO_EXTI_Callback+0x70>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	81fb      	strh	r3, [r7, #14]
		distance = width / 58;
 800094c:	89fb      	ldrh	r3, [r7, #14]
 800094e:	4a0a      	ldr	r2, [pc, #40]	; (8000978 <HAL_GPIO_EXTI_Callback+0x78>)
 8000950:	fba2 2303 	umull	r2, r3, r2, r3
 8000954:	095b      	lsrs	r3, r3, #5
 8000956:	b29a      	uxth	r2, r3
 8000958:	4b08      	ldr	r3, [pc, #32]	; (800097c <HAL_GPIO_EXTI_Callback+0x7c>)
 800095a:	801a      	strh	r2, [r3, #0]

	}
}
 800095c:	bf00      	nop
 800095e:	3714      	adds	r7, #20
 8000960:	46bd      	mov	sp, r7
 8000962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000966:	4770      	bx	lr
 8000968:	2000008c 	.word	0x2000008c
 800096c:	2000009c 	.word	0x2000009c
 8000970:	20000090 	.word	0x20000090
 8000974:	20000094 	.word	0x20000094
 8000978:	8d3dcb09 	.word	0x8d3dcb09
 800097c:	2000008e 	.word	0x2000008e

08000980 <startTrigger>:

void startTrigger(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
	GPIOB->ODR &= ~(1 << 6);
 8000984:	4b0e      	ldr	r3, [pc, #56]	; (80009c0 <startTrigger+0x40>)
 8000986:	695b      	ldr	r3, [r3, #20]
 8000988:	4a0d      	ldr	r2, [pc, #52]	; (80009c0 <startTrigger+0x40>)
 800098a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800098e:	6153      	str	r3, [r2, #20]
	delay_us(2);
 8000990:	2002      	movs	r0, #2
 8000992:	f000 f833 	bl	80009fc <delay_us>
	GPIOB->ODR |= (1 << 6);
 8000996:	4b0a      	ldr	r3, [pc, #40]	; (80009c0 <startTrigger+0x40>)
 8000998:	695b      	ldr	r3, [r3, #20]
 800099a:	4a09      	ldr	r2, [pc, #36]	; (80009c0 <startTrigger+0x40>)
 800099c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009a0:	6153      	str	r3, [r2, #20]
	delay_us(11);
 80009a2:	200b      	movs	r0, #11
 80009a4:	f000 f82a 	bl	80009fc <delay_us>
	GPIOB->ODR &= ~(1 << 6);
 80009a8:	4b05      	ldr	r3, [pc, #20]	; (80009c0 <startTrigger+0x40>)
 80009aa:	695b      	ldr	r3, [r3, #20]
 80009ac:	4a04      	ldr	r2, [pc, #16]	; (80009c0 <startTrigger+0x40>)
 80009ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80009b2:	6153      	str	r3, [r2, #20]
	printf("Trigger On\r\n");
 80009b4:	4803      	ldr	r0, [pc, #12]	; (80009c4 <startTrigger+0x44>)
 80009b6:	f002 fd25 	bl	8003404 <puts>
}
 80009ba:	bf00      	nop
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	40020400 	.word	0x40020400
 80009c4:	08004328 	.word	0x08004328

080009c8 <_write>:

int _write(int file, char* p, int len)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b084      	sub	sp, #16
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	60f8      	str	r0, [r7, #12]
 80009d0:	60b9      	str	r1, [r7, #8]
 80009d2:	607a      	str	r2, [r7, #4]
	if(HAL_UART_Transmit(&huart3, (uint8_t *)p, len, 10) == HAL_OK) return len;
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	b29a      	uxth	r2, r3
 80009d8:	230a      	movs	r3, #10
 80009da:	68b9      	ldr	r1, [r7, #8]
 80009dc:	4806      	ldr	r0, [pc, #24]	; (80009f8 <_write+0x30>)
 80009de:	f002 f8e4 	bl	8002baa <HAL_UART_Transmit>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d101      	bne.n	80009ec <_write+0x24>
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	e001      	b.n	80009f0 <_write+0x28>
	else return -1;
 80009ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009f0:	4618      	mov	r0, r3
 80009f2:	3710      	adds	r7, #16
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	200000e4 	.word	0x200000e4

080009fc <delay_us>:

void delay_us(uint16_t us)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	4603      	mov	r3, r0
 8000a04:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8000a06:	4b09      	ldr	r3, [pc, #36]	; (8000a2c <delay_us+0x30>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim3) < us);
 8000a0e:	bf00      	nop
 8000a10:	4b06      	ldr	r3, [pc, #24]	; (8000a2c <delay_us+0x30>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000a16:	88fb      	ldrh	r3, [r7, #6]
 8000a18:	429a      	cmp	r2, r3
 8000a1a:	d3f9      	bcc.n	8000a10 <delay_us+0x14>
}
 8000a1c:	bf00      	nop
 8000a1e:	bf00      	nop
 8000a20:	370c      	adds	r7, #12
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	2000009c 	.word	0x2000009c

08000a30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a34:	b672      	cpsid	i
}
 8000a36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a38:	e7fe      	b.n	8000a38 <Error_Handler+0x8>
	...

08000a3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b083      	sub	sp, #12
 8000a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a42:	2300      	movs	r3, #0
 8000a44:	607b      	str	r3, [r7, #4]
 8000a46:	4b10      	ldr	r3, [pc, #64]	; (8000a88 <HAL_MspInit+0x4c>)
 8000a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a4a:	4a0f      	ldr	r2, [pc, #60]	; (8000a88 <HAL_MspInit+0x4c>)
 8000a4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a50:	6453      	str	r3, [r2, #68]	; 0x44
 8000a52:	4b0d      	ldr	r3, [pc, #52]	; (8000a88 <HAL_MspInit+0x4c>)
 8000a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a5a:	607b      	str	r3, [r7, #4]
 8000a5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a5e:	2300      	movs	r3, #0
 8000a60:	603b      	str	r3, [r7, #0]
 8000a62:	4b09      	ldr	r3, [pc, #36]	; (8000a88 <HAL_MspInit+0x4c>)
 8000a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a66:	4a08      	ldr	r2, [pc, #32]	; (8000a88 <HAL_MspInit+0x4c>)
 8000a68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a6c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a6e:	4b06      	ldr	r3, [pc, #24]	; (8000a88 <HAL_MspInit+0x4c>)
 8000a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a76:	603b      	str	r3, [r7, #0]
 8000a78:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a7a:	bf00      	nop
 8000a7c:	370c      	adds	r7, #12
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop
 8000a88:	40023800 	.word	0x40023800

08000a8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a90:	e7fe      	b.n	8000a90 <NMI_Handler+0x4>

08000a92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a92:	b480      	push	{r7}
 8000a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a96:	e7fe      	b.n	8000a96 <HardFault_Handler+0x4>

08000a98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a9c:	e7fe      	b.n	8000a9c <MemManage_Handler+0x4>

08000a9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a9e:	b480      	push	{r7}
 8000aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aa2:	e7fe      	b.n	8000aa2 <BusFault_Handler+0x4>

08000aa4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000aa8:	e7fe      	b.n	8000aa8 <UsageFault_Handler+0x4>

08000aaa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aaa:	b480      	push	{r7}
 8000aac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aae:	bf00      	nop
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr

08000ab8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000abc:	bf00      	nop
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr

08000ac6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aca:	bf00      	nop
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr

08000ad4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ad8:	f000 fa62 	bl	8000fa0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000adc:	bf00      	nop
 8000ade:	bd80      	pop	{r7, pc}

08000ae0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8000ae4:	2040      	movs	r0, #64	; 0x40
 8000ae6:	f000 fd77 	bl	80015d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000aea:	bf00      	nop
 8000aec:	bd80      	pop	{r7, pc}

08000aee <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000aee:	b580      	push	{r7, lr}
 8000af0:	b086      	sub	sp, #24
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	60f8      	str	r0, [r7, #12]
 8000af6:	60b9      	str	r1, [r7, #8]
 8000af8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000afa:	2300      	movs	r3, #0
 8000afc:	617b      	str	r3, [r7, #20]
 8000afe:	e00a      	b.n	8000b16 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b00:	f3af 8000 	nop.w
 8000b04:	4601      	mov	r1, r0
 8000b06:	68bb      	ldr	r3, [r7, #8]
 8000b08:	1c5a      	adds	r2, r3, #1
 8000b0a:	60ba      	str	r2, [r7, #8]
 8000b0c:	b2ca      	uxtb	r2, r1
 8000b0e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	3301      	adds	r3, #1
 8000b14:	617b      	str	r3, [r7, #20]
 8000b16:	697a      	ldr	r2, [r7, #20]
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	429a      	cmp	r2, r3
 8000b1c:	dbf0      	blt.n	8000b00 <_read+0x12>
	}

return len;
 8000b1e:	687b      	ldr	r3, [r7, #4]
}
 8000b20:	4618      	mov	r0, r3
 8000b22:	3718      	adds	r7, #24
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}

08000b28 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
	return -1;
 8000b30:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	370c      	adds	r7, #12
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr

08000b40 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
 8000b48:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b50:	605a      	str	r2, [r3, #4]
	return 0;
 8000b52:	2300      	movs	r3, #0
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	370c      	adds	r7, #12
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr

08000b60 <_isatty>:

int _isatty(int file)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
	return 1;
 8000b68:	2301      	movs	r3, #1
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	370c      	adds	r7, #12
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr

08000b76 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b76:	b480      	push	{r7}
 8000b78:	b085      	sub	sp, #20
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	60f8      	str	r0, [r7, #12]
 8000b7e:	60b9      	str	r1, [r7, #8]
 8000b80:	607a      	str	r2, [r7, #4]
	return 0;
 8000b82:	2300      	movs	r3, #0
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	3714      	adds	r7, #20
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr

08000b90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b086      	sub	sp, #24
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b98:	4a14      	ldr	r2, [pc, #80]	; (8000bec <_sbrk+0x5c>)
 8000b9a:	4b15      	ldr	r3, [pc, #84]	; (8000bf0 <_sbrk+0x60>)
 8000b9c:	1ad3      	subs	r3, r2, r3
 8000b9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ba4:	4b13      	ldr	r3, [pc, #76]	; (8000bf4 <_sbrk+0x64>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d102      	bne.n	8000bb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bac:	4b11      	ldr	r3, [pc, #68]	; (8000bf4 <_sbrk+0x64>)
 8000bae:	4a12      	ldr	r2, [pc, #72]	; (8000bf8 <_sbrk+0x68>)
 8000bb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bb2:	4b10      	ldr	r3, [pc, #64]	; (8000bf4 <_sbrk+0x64>)
 8000bb4:	681a      	ldr	r2, [r3, #0]
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	4413      	add	r3, r2
 8000bba:	693a      	ldr	r2, [r7, #16]
 8000bbc:	429a      	cmp	r2, r3
 8000bbe:	d207      	bcs.n	8000bd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bc0:	f002 fb68 	bl	8003294 <__errno>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	220c      	movs	r2, #12
 8000bc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bca:	f04f 33ff 	mov.w	r3, #4294967295
 8000bce:	e009      	b.n	8000be4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bd0:	4b08      	ldr	r3, [pc, #32]	; (8000bf4 <_sbrk+0x64>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bd6:	4b07      	ldr	r3, [pc, #28]	; (8000bf4 <_sbrk+0x64>)
 8000bd8:	681a      	ldr	r2, [r3, #0]
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	4413      	add	r3, r2
 8000bde:	4a05      	ldr	r2, [pc, #20]	; (8000bf4 <_sbrk+0x64>)
 8000be0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000be2:	68fb      	ldr	r3, [r7, #12]
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	3718      	adds	r7, #24
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	20030000 	.word	0x20030000
 8000bf0:	00000400 	.word	0x00000400
 8000bf4:	20000098 	.word	0x20000098
 8000bf8:	20000140 	.word	0x20000140

08000bfc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c00:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <SystemInit+0x20>)
 8000c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c06:	4a05      	ldr	r2, [pc, #20]	; (8000c1c <SystemInit+0x20>)
 8000c08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c10:	bf00      	nop
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	e000ed00 	.word	0xe000ed00

08000c20 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b08e      	sub	sp, #56	; 0x38
 8000c24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c26:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	601a      	str	r2, [r3, #0]
 8000c2e:	605a      	str	r2, [r3, #4]
 8000c30:	609a      	str	r2, [r3, #8]
 8000c32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c34:	f107 0320 	add.w	r3, r7, #32
 8000c38:	2200      	movs	r2, #0
 8000c3a:	601a      	str	r2, [r3, #0]
 8000c3c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c3e:	1d3b      	adds	r3, r7, #4
 8000c40:	2200      	movs	r2, #0
 8000c42:	601a      	str	r2, [r3, #0]
 8000c44:	605a      	str	r2, [r3, #4]
 8000c46:	609a      	str	r2, [r3, #8]
 8000c48:	60da      	str	r2, [r3, #12]
 8000c4a:	611a      	str	r2, [r3, #16]
 8000c4c:	615a      	str	r2, [r3, #20]
 8000c4e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c50:	4b2c      	ldr	r3, [pc, #176]	; (8000d04 <MX_TIM3_Init+0xe4>)
 8000c52:	4a2d      	ldr	r2, [pc, #180]	; (8000d08 <MX_TIM3_Init+0xe8>)
 8000c54:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 90-1;
 8000c56:	4b2b      	ldr	r3, [pc, #172]	; (8000d04 <MX_TIM3_Init+0xe4>)
 8000c58:	2259      	movs	r2, #89	; 0x59
 8000c5a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c5c:	4b29      	ldr	r3, [pc, #164]	; (8000d04 <MX_TIM3_Init+0xe4>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xffff;
 8000c62:	4b28      	ldr	r3, [pc, #160]	; (8000d04 <MX_TIM3_Init+0xe4>)
 8000c64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c68:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c6a:	4b26      	ldr	r3, [pc, #152]	; (8000d04 <MX_TIM3_Init+0xe4>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c70:	4b24      	ldr	r3, [pc, #144]	; (8000d04 <MX_TIM3_Init+0xe4>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000c76:	4823      	ldr	r0, [pc, #140]	; (8000d04 <MX_TIM3_Init+0xe4>)
 8000c78:	f001 f9ae 	bl	8001fd8 <HAL_TIM_Base_Init>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000c82:	f7ff fed5 	bl	8000a30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c8a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000c8c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c90:	4619      	mov	r1, r3
 8000c92:	481c      	ldr	r0, [pc, #112]	; (8000d04 <MX_TIM3_Init+0xe4>)
 8000c94:	f001 fb0e 	bl	80022b4 <HAL_TIM_ConfigClockSource>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000c9e:	f7ff fec7 	bl	8000a30 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8000ca2:	4818      	ldr	r0, [pc, #96]	; (8000d04 <MX_TIM3_Init+0xe4>)
 8000ca4:	f001 fa50 	bl	8002148 <HAL_TIM_OC_Init>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000cae:	f7ff febf 	bl	8000a30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000cba:	f107 0320 	add.w	r3, r7, #32
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	4810      	ldr	r0, [pc, #64]	; (8000d04 <MX_TIM3_Init+0xe4>)
 8000cc2:	f001 fea9 	bl	8002a18 <HAL_TIMEx_MasterConfigSynchronization>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000ccc:	f7ff feb0 	bl	8000a30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ce0:	1d3b      	adds	r3, r7, #4
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	4807      	ldr	r0, [pc, #28]	; (8000d04 <MX_TIM3_Init+0xe4>)
 8000ce8:	f001 fa88 	bl	80021fc <HAL_TIM_OC_ConfigChannel>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000cf2:	f7ff fe9d 	bl	8000a30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000cf6:	4803      	ldr	r0, [pc, #12]	; (8000d04 <MX_TIM3_Init+0xe4>)
 8000cf8:	f000 f82a 	bl	8000d50 <HAL_TIM_MspPostInit>

}
 8000cfc:	bf00      	nop
 8000cfe:	3738      	adds	r7, #56	; 0x38
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	2000009c 	.word	0x2000009c
 8000d08:	40000400 	.word	0x40000400

08000d0c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b085      	sub	sp, #20
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a0b      	ldr	r2, [pc, #44]	; (8000d48 <HAL_TIM_Base_MspInit+0x3c>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d10d      	bne.n	8000d3a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d1e:	2300      	movs	r3, #0
 8000d20:	60fb      	str	r3, [r7, #12]
 8000d22:	4b0a      	ldr	r3, [pc, #40]	; (8000d4c <HAL_TIM_Base_MspInit+0x40>)
 8000d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d26:	4a09      	ldr	r2, [pc, #36]	; (8000d4c <HAL_TIM_Base_MspInit+0x40>)
 8000d28:	f043 0302 	orr.w	r3, r3, #2
 8000d2c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d2e:	4b07      	ldr	r3, [pc, #28]	; (8000d4c <HAL_TIM_Base_MspInit+0x40>)
 8000d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d32:	f003 0302 	and.w	r3, r3, #2
 8000d36:	60fb      	str	r3, [r7, #12]
 8000d38:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000d3a:	bf00      	nop
 8000d3c:	3714      	adds	r7, #20
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	40000400 	.word	0x40000400
 8000d4c:	40023800 	.word	0x40023800

08000d50 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b088      	sub	sp, #32
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d58:	f107 030c 	add.w	r3, r7, #12
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	605a      	str	r2, [r3, #4]
 8000d62:	609a      	str	r2, [r3, #8]
 8000d64:	60da      	str	r2, [r3, #12]
 8000d66:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a12      	ldr	r2, [pc, #72]	; (8000db8 <HAL_TIM_MspPostInit+0x68>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d11d      	bne.n	8000dae <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d72:	2300      	movs	r3, #0
 8000d74:	60bb      	str	r3, [r7, #8]
 8000d76:	4b11      	ldr	r3, [pc, #68]	; (8000dbc <HAL_TIM_MspPostInit+0x6c>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7a:	4a10      	ldr	r2, [pc, #64]	; (8000dbc <HAL_TIM_MspPostInit+0x6c>)
 8000d7c:	f043 0304 	orr.w	r3, r3, #4
 8000d80:	6313      	str	r3, [r2, #48]	; 0x30
 8000d82:	4b0e      	ldr	r3, [pc, #56]	; (8000dbc <HAL_TIM_MspPostInit+0x6c>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d86:	f003 0304 	and.w	r3, r3, #4
 8000d8a:	60bb      	str	r3, [r7, #8]
 8000d8c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000d8e:	2340      	movs	r3, #64	; 0x40
 8000d90:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d92:	2302      	movs	r3, #2
 8000d94:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d96:	2300      	movs	r3, #0
 8000d98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000d9e:	2302      	movs	r3, #2
 8000da0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000da2:	f107 030c 	add.w	r3, r7, #12
 8000da6:	4619      	mov	r1, r3
 8000da8:	4805      	ldr	r0, [pc, #20]	; (8000dc0 <HAL_TIM_MspPostInit+0x70>)
 8000daa:	f000 fa4f 	bl	800124c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000dae:	bf00      	nop
 8000db0:	3720      	adds	r7, #32
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	40000400 	.word	0x40000400
 8000dbc:	40023800 	.word	0x40023800
 8000dc0:	40020800 	.word	0x40020800

08000dc4 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000dc8:	4b11      	ldr	r3, [pc, #68]	; (8000e10 <MX_USART3_UART_Init+0x4c>)
 8000dca:	4a12      	ldr	r2, [pc, #72]	; (8000e14 <MX_USART3_UART_Init+0x50>)
 8000dcc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000dce:	4b10      	ldr	r3, [pc, #64]	; (8000e10 <MX_USART3_UART_Init+0x4c>)
 8000dd0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000dd4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000dd6:	4b0e      	ldr	r3, [pc, #56]	; (8000e10 <MX_USART3_UART_Init+0x4c>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ddc:	4b0c      	ldr	r3, [pc, #48]	; (8000e10 <MX_USART3_UART_Init+0x4c>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000de2:	4b0b      	ldr	r3, [pc, #44]	; (8000e10 <MX_USART3_UART_Init+0x4c>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000de8:	4b09      	ldr	r3, [pc, #36]	; (8000e10 <MX_USART3_UART_Init+0x4c>)
 8000dea:	220c      	movs	r2, #12
 8000dec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dee:	4b08      	ldr	r3, [pc, #32]	; (8000e10 <MX_USART3_UART_Init+0x4c>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000df4:	4b06      	ldr	r3, [pc, #24]	; (8000e10 <MX_USART3_UART_Init+0x4c>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000dfa:	4805      	ldr	r0, [pc, #20]	; (8000e10 <MX_USART3_UART_Init+0x4c>)
 8000dfc:	f001 fe88 	bl	8002b10 <HAL_UART_Init>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000e06:	f7ff fe13 	bl	8000a30 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e0a:	bf00      	nop
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	200000e4 	.word	0x200000e4
 8000e14:	40004800 	.word	0x40004800

08000e18 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b08a      	sub	sp, #40	; 0x28
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e20:	f107 0314 	add.w	r3, r7, #20
 8000e24:	2200      	movs	r2, #0
 8000e26:	601a      	str	r2, [r3, #0]
 8000e28:	605a      	str	r2, [r3, #4]
 8000e2a:	609a      	str	r2, [r3, #8]
 8000e2c:	60da      	str	r2, [r3, #12]
 8000e2e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a19      	ldr	r2, [pc, #100]	; (8000e9c <HAL_UART_MspInit+0x84>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d12c      	bne.n	8000e94 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	613b      	str	r3, [r7, #16]
 8000e3e:	4b18      	ldr	r3, [pc, #96]	; (8000ea0 <HAL_UART_MspInit+0x88>)
 8000e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e42:	4a17      	ldr	r2, [pc, #92]	; (8000ea0 <HAL_UART_MspInit+0x88>)
 8000e44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e48:	6413      	str	r3, [r2, #64]	; 0x40
 8000e4a:	4b15      	ldr	r3, [pc, #84]	; (8000ea0 <HAL_UART_MspInit+0x88>)
 8000e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e52:	613b      	str	r3, [r7, #16]
 8000e54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e56:	2300      	movs	r3, #0
 8000e58:	60fb      	str	r3, [r7, #12]
 8000e5a:	4b11      	ldr	r3, [pc, #68]	; (8000ea0 <HAL_UART_MspInit+0x88>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5e:	4a10      	ldr	r2, [pc, #64]	; (8000ea0 <HAL_UART_MspInit+0x88>)
 8000e60:	f043 0308 	orr.w	r3, r3, #8
 8000e64:	6313      	str	r3, [r2, #48]	; 0x30
 8000e66:	4b0e      	ldr	r3, [pc, #56]	; (8000ea0 <HAL_UART_MspInit+0x88>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6a:	f003 0308 	and.w	r3, r3, #8
 8000e6e:	60fb      	str	r3, [r7, #12]
 8000e70:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000e72:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e78:	2302      	movs	r3, #2
 8000e7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e80:	2303      	movs	r3, #3
 8000e82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e84:	2307      	movs	r3, #7
 8000e86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e88:	f107 0314 	add.w	r3, r7, #20
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	4805      	ldr	r0, [pc, #20]	; (8000ea4 <HAL_UART_MspInit+0x8c>)
 8000e90:	f000 f9dc 	bl	800124c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000e94:	bf00      	nop
 8000e96:	3728      	adds	r7, #40	; 0x28
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	40004800 	.word	0x40004800
 8000ea0:	40023800 	.word	0x40023800
 8000ea4:	40020c00 	.word	0x40020c00

08000ea8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000ea8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ee0 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000eac:	480d      	ldr	r0, [pc, #52]	; (8000ee4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000eae:	490e      	ldr	r1, [pc, #56]	; (8000ee8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000eb0:	4a0e      	ldr	r2, [pc, #56]	; (8000eec <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000eb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000eb4:	e002      	b.n	8000ebc <LoopCopyDataInit>

08000eb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000eb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eba:	3304      	adds	r3, #4

08000ebc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ebc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ebe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ec0:	d3f9      	bcc.n	8000eb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ec2:	4a0b      	ldr	r2, [pc, #44]	; (8000ef0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ec4:	4c0b      	ldr	r4, [pc, #44]	; (8000ef4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ec6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ec8:	e001      	b.n	8000ece <LoopFillZerobss>

08000eca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ecc:	3204      	adds	r2, #4

08000ece <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ece:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ed0:	d3fb      	bcc.n	8000eca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ed2:	f7ff fe93 	bl	8000bfc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ed6:	f002 f9e3 	bl	80032a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eda:	f7ff fc7f 	bl	80007dc <main>
  bx  lr    
 8000ede:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000ee0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000ee4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ee8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000eec:	080043f4 	.word	0x080043f4
  ldr r2, =_sbss
 8000ef0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000ef4:	2000013c 	.word	0x2000013c

08000ef8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ef8:	e7fe      	b.n	8000ef8 <ADC_IRQHandler>
	...

08000efc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f00:	4b0e      	ldr	r3, [pc, #56]	; (8000f3c <HAL_Init+0x40>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a0d      	ldr	r2, [pc, #52]	; (8000f3c <HAL_Init+0x40>)
 8000f06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f0c:	4b0b      	ldr	r3, [pc, #44]	; (8000f3c <HAL_Init+0x40>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a0a      	ldr	r2, [pc, #40]	; (8000f3c <HAL_Init+0x40>)
 8000f12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f18:	4b08      	ldr	r3, [pc, #32]	; (8000f3c <HAL_Init+0x40>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a07      	ldr	r2, [pc, #28]	; (8000f3c <HAL_Init+0x40>)
 8000f1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f24:	2003      	movs	r0, #3
 8000f26:	f000 f94f 	bl	80011c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f2a:	2000      	movs	r0, #0
 8000f2c:	f000 f808 	bl	8000f40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f30:	f7ff fd84 	bl	8000a3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f34:	2300      	movs	r3, #0
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	40023c00 	.word	0x40023c00

08000f40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f48:	4b12      	ldr	r3, [pc, #72]	; (8000f94 <HAL_InitTick+0x54>)
 8000f4a:	681a      	ldr	r2, [r3, #0]
 8000f4c:	4b12      	ldr	r3, [pc, #72]	; (8000f98 <HAL_InitTick+0x58>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	4619      	mov	r1, r3
 8000f52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f56:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f000 f967 	bl	8001232 <HAL_SYSTICK_Config>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	e00e      	b.n	8000f8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2b0f      	cmp	r3, #15
 8000f72:	d80a      	bhi.n	8000f8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f74:	2200      	movs	r2, #0
 8000f76:	6879      	ldr	r1, [r7, #4]
 8000f78:	f04f 30ff 	mov.w	r0, #4294967295
 8000f7c:	f000 f92f 	bl	80011de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f80:	4a06      	ldr	r2, [pc, #24]	; (8000f9c <HAL_InitTick+0x5c>)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f86:	2300      	movs	r3, #0
 8000f88:	e000      	b.n	8000f8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	3708      	adds	r7, #8
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	20000000 	.word	0x20000000
 8000f98:	20000008 	.word	0x20000008
 8000f9c:	20000004 	.word	0x20000004

08000fa0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fa4:	4b06      	ldr	r3, [pc, #24]	; (8000fc0 <HAL_IncTick+0x20>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	461a      	mov	r2, r3
 8000faa:	4b06      	ldr	r3, [pc, #24]	; (8000fc4 <HAL_IncTick+0x24>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4413      	add	r3, r2
 8000fb0:	4a04      	ldr	r2, [pc, #16]	; (8000fc4 <HAL_IncTick+0x24>)
 8000fb2:	6013      	str	r3, [r2, #0]
}
 8000fb4:	bf00      	nop
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	20000008 	.word	0x20000008
 8000fc4:	20000128 	.word	0x20000128

08000fc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  return uwTick;
 8000fcc:	4b03      	ldr	r3, [pc, #12]	; (8000fdc <HAL_GetTick+0x14>)
 8000fce:	681b      	ldr	r3, [r3, #0]
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	20000128 	.word	0x20000128

08000fe0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fe8:	f7ff ffee 	bl	8000fc8 <HAL_GetTick>
 8000fec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ff8:	d005      	beq.n	8001006 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ffa:	4b0a      	ldr	r3, [pc, #40]	; (8001024 <HAL_Delay+0x44>)
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	461a      	mov	r2, r3
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	4413      	add	r3, r2
 8001004:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001006:	bf00      	nop
 8001008:	f7ff ffde 	bl	8000fc8 <HAL_GetTick>
 800100c:	4602      	mov	r2, r0
 800100e:	68bb      	ldr	r3, [r7, #8]
 8001010:	1ad3      	subs	r3, r2, r3
 8001012:	68fa      	ldr	r2, [r7, #12]
 8001014:	429a      	cmp	r2, r3
 8001016:	d8f7      	bhi.n	8001008 <HAL_Delay+0x28>
  {
  }
}
 8001018:	bf00      	nop
 800101a:	bf00      	nop
 800101c:	3710      	adds	r7, #16
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	20000008 	.word	0x20000008

08001028 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001028:	b480      	push	{r7}
 800102a:	b085      	sub	sp, #20
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	f003 0307 	and.w	r3, r3, #7
 8001036:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001038:	4b0c      	ldr	r3, [pc, #48]	; (800106c <__NVIC_SetPriorityGrouping+0x44>)
 800103a:	68db      	ldr	r3, [r3, #12]
 800103c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800103e:	68ba      	ldr	r2, [r7, #8]
 8001040:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001044:	4013      	ands	r3, r2
 8001046:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001050:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001054:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001058:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800105a:	4a04      	ldr	r2, [pc, #16]	; (800106c <__NVIC_SetPriorityGrouping+0x44>)
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	60d3      	str	r3, [r2, #12]
}
 8001060:	bf00      	nop
 8001062:	3714      	adds	r7, #20
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr
 800106c:	e000ed00 	.word	0xe000ed00

08001070 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001074:	4b04      	ldr	r3, [pc, #16]	; (8001088 <__NVIC_GetPriorityGrouping+0x18>)
 8001076:	68db      	ldr	r3, [r3, #12]
 8001078:	0a1b      	lsrs	r3, r3, #8
 800107a:	f003 0307 	and.w	r3, r3, #7
}
 800107e:	4618      	mov	r0, r3
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr
 8001088:	e000ed00 	.word	0xe000ed00

0800108c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	4603      	mov	r3, r0
 8001094:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109a:	2b00      	cmp	r3, #0
 800109c:	db0b      	blt.n	80010b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800109e:	79fb      	ldrb	r3, [r7, #7]
 80010a0:	f003 021f 	and.w	r2, r3, #31
 80010a4:	4907      	ldr	r1, [pc, #28]	; (80010c4 <__NVIC_EnableIRQ+0x38>)
 80010a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010aa:	095b      	lsrs	r3, r3, #5
 80010ac:	2001      	movs	r0, #1
 80010ae:	fa00 f202 	lsl.w	r2, r0, r2
 80010b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010b6:	bf00      	nop
 80010b8:	370c      	adds	r7, #12
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	e000e100 	.word	0xe000e100

080010c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	6039      	str	r1, [r7, #0]
 80010d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	db0a      	blt.n	80010f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	b2da      	uxtb	r2, r3
 80010e0:	490c      	ldr	r1, [pc, #48]	; (8001114 <__NVIC_SetPriority+0x4c>)
 80010e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e6:	0112      	lsls	r2, r2, #4
 80010e8:	b2d2      	uxtb	r2, r2
 80010ea:	440b      	add	r3, r1
 80010ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010f0:	e00a      	b.n	8001108 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	b2da      	uxtb	r2, r3
 80010f6:	4908      	ldr	r1, [pc, #32]	; (8001118 <__NVIC_SetPriority+0x50>)
 80010f8:	79fb      	ldrb	r3, [r7, #7]
 80010fa:	f003 030f 	and.w	r3, r3, #15
 80010fe:	3b04      	subs	r3, #4
 8001100:	0112      	lsls	r2, r2, #4
 8001102:	b2d2      	uxtb	r2, r2
 8001104:	440b      	add	r3, r1
 8001106:	761a      	strb	r2, [r3, #24]
}
 8001108:	bf00      	nop
 800110a:	370c      	adds	r7, #12
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr
 8001114:	e000e100 	.word	0xe000e100
 8001118:	e000ed00 	.word	0xe000ed00

0800111c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800111c:	b480      	push	{r7}
 800111e:	b089      	sub	sp, #36	; 0x24
 8001120:	af00      	add	r7, sp, #0
 8001122:	60f8      	str	r0, [r7, #12]
 8001124:	60b9      	str	r1, [r7, #8]
 8001126:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	f003 0307 	and.w	r3, r3, #7
 800112e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	f1c3 0307 	rsb	r3, r3, #7
 8001136:	2b04      	cmp	r3, #4
 8001138:	bf28      	it	cs
 800113a:	2304      	movcs	r3, #4
 800113c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	3304      	adds	r3, #4
 8001142:	2b06      	cmp	r3, #6
 8001144:	d902      	bls.n	800114c <NVIC_EncodePriority+0x30>
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	3b03      	subs	r3, #3
 800114a:	e000      	b.n	800114e <NVIC_EncodePriority+0x32>
 800114c:	2300      	movs	r3, #0
 800114e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001150:	f04f 32ff 	mov.w	r2, #4294967295
 8001154:	69bb      	ldr	r3, [r7, #24]
 8001156:	fa02 f303 	lsl.w	r3, r2, r3
 800115a:	43da      	mvns	r2, r3
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	401a      	ands	r2, r3
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001164:	f04f 31ff 	mov.w	r1, #4294967295
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	fa01 f303 	lsl.w	r3, r1, r3
 800116e:	43d9      	mvns	r1, r3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001174:	4313      	orrs	r3, r2
         );
}
 8001176:	4618      	mov	r0, r3
 8001178:	3724      	adds	r7, #36	; 0x24
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
	...

08001184 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	3b01      	subs	r3, #1
 8001190:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001194:	d301      	bcc.n	800119a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001196:	2301      	movs	r3, #1
 8001198:	e00f      	b.n	80011ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800119a:	4a0a      	ldr	r2, [pc, #40]	; (80011c4 <SysTick_Config+0x40>)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	3b01      	subs	r3, #1
 80011a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011a2:	210f      	movs	r1, #15
 80011a4:	f04f 30ff 	mov.w	r0, #4294967295
 80011a8:	f7ff ff8e 	bl	80010c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011ac:	4b05      	ldr	r3, [pc, #20]	; (80011c4 <SysTick_Config+0x40>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011b2:	4b04      	ldr	r3, [pc, #16]	; (80011c4 <SysTick_Config+0x40>)
 80011b4:	2207      	movs	r2, #7
 80011b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011b8:	2300      	movs	r3, #0
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	e000e010 	.word	0xe000e010

080011c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011d0:	6878      	ldr	r0, [r7, #4]
 80011d2:	f7ff ff29 	bl	8001028 <__NVIC_SetPriorityGrouping>
}
 80011d6:	bf00      	nop
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}

080011de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011de:	b580      	push	{r7, lr}
 80011e0:	b086      	sub	sp, #24
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	4603      	mov	r3, r0
 80011e6:	60b9      	str	r1, [r7, #8]
 80011e8:	607a      	str	r2, [r7, #4]
 80011ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011ec:	2300      	movs	r3, #0
 80011ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011f0:	f7ff ff3e 	bl	8001070 <__NVIC_GetPriorityGrouping>
 80011f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011f6:	687a      	ldr	r2, [r7, #4]
 80011f8:	68b9      	ldr	r1, [r7, #8]
 80011fa:	6978      	ldr	r0, [r7, #20]
 80011fc:	f7ff ff8e 	bl	800111c <NVIC_EncodePriority>
 8001200:	4602      	mov	r2, r0
 8001202:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001206:	4611      	mov	r1, r2
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff ff5d 	bl	80010c8 <__NVIC_SetPriority>
}
 800120e:	bf00      	nop
 8001210:	3718      	adds	r7, #24
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}

08001216 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001216:	b580      	push	{r7, lr}
 8001218:	b082      	sub	sp, #8
 800121a:	af00      	add	r7, sp, #0
 800121c:	4603      	mov	r3, r0
 800121e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001220:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001224:	4618      	mov	r0, r3
 8001226:	f7ff ff31 	bl	800108c <__NVIC_EnableIRQ>
}
 800122a:	bf00      	nop
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}

08001232 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001232:	b580      	push	{r7, lr}
 8001234:	b082      	sub	sp, #8
 8001236:	af00      	add	r7, sp, #0
 8001238:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	f7ff ffa2 	bl	8001184 <SysTick_Config>
 8001240:	4603      	mov	r3, r0
}
 8001242:	4618      	mov	r0, r3
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
	...

0800124c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800124c:	b480      	push	{r7}
 800124e:	b089      	sub	sp, #36	; 0x24
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001256:	2300      	movs	r3, #0
 8001258:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800125a:	2300      	movs	r3, #0
 800125c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800125e:	2300      	movs	r3, #0
 8001260:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001262:	2300      	movs	r3, #0
 8001264:	61fb      	str	r3, [r7, #28]
 8001266:	e177      	b.n	8001558 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001268:	2201      	movs	r2, #1
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	697a      	ldr	r2, [r7, #20]
 8001278:	4013      	ands	r3, r2
 800127a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800127c:	693a      	ldr	r2, [r7, #16]
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	429a      	cmp	r2, r3
 8001282:	f040 8166 	bne.w	8001552 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	f003 0303 	and.w	r3, r3, #3
 800128e:	2b01      	cmp	r3, #1
 8001290:	d005      	beq.n	800129e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800129a:	2b02      	cmp	r3, #2
 800129c:	d130      	bne.n	8001300 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	005b      	lsls	r3, r3, #1
 80012a8:	2203      	movs	r2, #3
 80012aa:	fa02 f303 	lsl.w	r3, r2, r3
 80012ae:	43db      	mvns	r3, r3
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	4013      	ands	r3, r2
 80012b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	68da      	ldr	r2, [r3, #12]
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	fa02 f303 	lsl.w	r3, r2, r3
 80012c2:	69ba      	ldr	r2, [r7, #24]
 80012c4:	4313      	orrs	r3, r2
 80012c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	69ba      	ldr	r2, [r7, #24]
 80012cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012d4:	2201      	movs	r2, #1
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	fa02 f303 	lsl.w	r3, r2, r3
 80012dc:	43db      	mvns	r3, r3
 80012de:	69ba      	ldr	r2, [r7, #24]
 80012e0:	4013      	ands	r3, r2
 80012e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	091b      	lsrs	r3, r3, #4
 80012ea:	f003 0201 	and.w	r2, r3, #1
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	fa02 f303 	lsl.w	r3, r2, r3
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	4313      	orrs	r3, r2
 80012f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f003 0303 	and.w	r3, r3, #3
 8001308:	2b03      	cmp	r3, #3
 800130a:	d017      	beq.n	800133c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	005b      	lsls	r3, r3, #1
 8001316:	2203      	movs	r2, #3
 8001318:	fa02 f303 	lsl.w	r3, r2, r3
 800131c:	43db      	mvns	r3, r3
 800131e:	69ba      	ldr	r2, [r7, #24]
 8001320:	4013      	ands	r3, r2
 8001322:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	689a      	ldr	r2, [r3, #8]
 8001328:	69fb      	ldr	r3, [r7, #28]
 800132a:	005b      	lsls	r3, r3, #1
 800132c:	fa02 f303 	lsl.w	r3, r2, r3
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	4313      	orrs	r3, r2
 8001334:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f003 0303 	and.w	r3, r3, #3
 8001344:	2b02      	cmp	r3, #2
 8001346:	d123      	bne.n	8001390 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	08da      	lsrs	r2, r3, #3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	3208      	adds	r2, #8
 8001350:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001354:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	f003 0307 	and.w	r3, r3, #7
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	220f      	movs	r2, #15
 8001360:	fa02 f303 	lsl.w	r3, r2, r3
 8001364:	43db      	mvns	r3, r3
 8001366:	69ba      	ldr	r2, [r7, #24]
 8001368:	4013      	ands	r3, r2
 800136a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	691a      	ldr	r2, [r3, #16]
 8001370:	69fb      	ldr	r3, [r7, #28]
 8001372:	f003 0307 	and.w	r3, r3, #7
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	fa02 f303 	lsl.w	r3, r2, r3
 800137c:	69ba      	ldr	r2, [r7, #24]
 800137e:	4313      	orrs	r3, r2
 8001380:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	08da      	lsrs	r2, r3, #3
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	3208      	adds	r2, #8
 800138a:	69b9      	ldr	r1, [r7, #24]
 800138c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	005b      	lsls	r3, r3, #1
 800139a:	2203      	movs	r2, #3
 800139c:	fa02 f303 	lsl.w	r3, r2, r3
 80013a0:	43db      	mvns	r3, r3
 80013a2:	69ba      	ldr	r2, [r7, #24]
 80013a4:	4013      	ands	r3, r2
 80013a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f003 0203 	and.w	r2, r3, #3
 80013b0:	69fb      	ldr	r3, [r7, #28]
 80013b2:	005b      	lsls	r3, r3, #1
 80013b4:	fa02 f303 	lsl.w	r3, r2, r3
 80013b8:	69ba      	ldr	r2, [r7, #24]
 80013ba:	4313      	orrs	r3, r2
 80013bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	f000 80c0 	beq.w	8001552 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013d2:	2300      	movs	r3, #0
 80013d4:	60fb      	str	r3, [r7, #12]
 80013d6:	4b66      	ldr	r3, [pc, #408]	; (8001570 <HAL_GPIO_Init+0x324>)
 80013d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013da:	4a65      	ldr	r2, [pc, #404]	; (8001570 <HAL_GPIO_Init+0x324>)
 80013dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013e0:	6453      	str	r3, [r2, #68]	; 0x44
 80013e2:	4b63      	ldr	r3, [pc, #396]	; (8001570 <HAL_GPIO_Init+0x324>)
 80013e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013ea:	60fb      	str	r3, [r7, #12]
 80013ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013ee:	4a61      	ldr	r2, [pc, #388]	; (8001574 <HAL_GPIO_Init+0x328>)
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	089b      	lsrs	r3, r3, #2
 80013f4:	3302      	adds	r3, #2
 80013f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013fc:	69fb      	ldr	r3, [r7, #28]
 80013fe:	f003 0303 	and.w	r3, r3, #3
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	220f      	movs	r2, #15
 8001406:	fa02 f303 	lsl.w	r3, r2, r3
 800140a:	43db      	mvns	r3, r3
 800140c:	69ba      	ldr	r2, [r7, #24]
 800140e:	4013      	ands	r3, r2
 8001410:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4a58      	ldr	r2, [pc, #352]	; (8001578 <HAL_GPIO_Init+0x32c>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d037      	beq.n	800148a <HAL_GPIO_Init+0x23e>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4a57      	ldr	r2, [pc, #348]	; (800157c <HAL_GPIO_Init+0x330>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d031      	beq.n	8001486 <HAL_GPIO_Init+0x23a>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4a56      	ldr	r2, [pc, #344]	; (8001580 <HAL_GPIO_Init+0x334>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d02b      	beq.n	8001482 <HAL_GPIO_Init+0x236>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4a55      	ldr	r2, [pc, #340]	; (8001584 <HAL_GPIO_Init+0x338>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d025      	beq.n	800147e <HAL_GPIO_Init+0x232>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4a54      	ldr	r2, [pc, #336]	; (8001588 <HAL_GPIO_Init+0x33c>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d01f      	beq.n	800147a <HAL_GPIO_Init+0x22e>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4a53      	ldr	r2, [pc, #332]	; (800158c <HAL_GPIO_Init+0x340>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d019      	beq.n	8001476 <HAL_GPIO_Init+0x22a>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4a52      	ldr	r2, [pc, #328]	; (8001590 <HAL_GPIO_Init+0x344>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d013      	beq.n	8001472 <HAL_GPIO_Init+0x226>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4a51      	ldr	r2, [pc, #324]	; (8001594 <HAL_GPIO_Init+0x348>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d00d      	beq.n	800146e <HAL_GPIO_Init+0x222>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4a50      	ldr	r2, [pc, #320]	; (8001598 <HAL_GPIO_Init+0x34c>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d007      	beq.n	800146a <HAL_GPIO_Init+0x21e>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4a4f      	ldr	r2, [pc, #316]	; (800159c <HAL_GPIO_Init+0x350>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d101      	bne.n	8001466 <HAL_GPIO_Init+0x21a>
 8001462:	2309      	movs	r3, #9
 8001464:	e012      	b.n	800148c <HAL_GPIO_Init+0x240>
 8001466:	230a      	movs	r3, #10
 8001468:	e010      	b.n	800148c <HAL_GPIO_Init+0x240>
 800146a:	2308      	movs	r3, #8
 800146c:	e00e      	b.n	800148c <HAL_GPIO_Init+0x240>
 800146e:	2307      	movs	r3, #7
 8001470:	e00c      	b.n	800148c <HAL_GPIO_Init+0x240>
 8001472:	2306      	movs	r3, #6
 8001474:	e00a      	b.n	800148c <HAL_GPIO_Init+0x240>
 8001476:	2305      	movs	r3, #5
 8001478:	e008      	b.n	800148c <HAL_GPIO_Init+0x240>
 800147a:	2304      	movs	r3, #4
 800147c:	e006      	b.n	800148c <HAL_GPIO_Init+0x240>
 800147e:	2303      	movs	r3, #3
 8001480:	e004      	b.n	800148c <HAL_GPIO_Init+0x240>
 8001482:	2302      	movs	r3, #2
 8001484:	e002      	b.n	800148c <HAL_GPIO_Init+0x240>
 8001486:	2301      	movs	r3, #1
 8001488:	e000      	b.n	800148c <HAL_GPIO_Init+0x240>
 800148a:	2300      	movs	r3, #0
 800148c:	69fa      	ldr	r2, [r7, #28]
 800148e:	f002 0203 	and.w	r2, r2, #3
 8001492:	0092      	lsls	r2, r2, #2
 8001494:	4093      	lsls	r3, r2
 8001496:	69ba      	ldr	r2, [r7, #24]
 8001498:	4313      	orrs	r3, r2
 800149a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800149c:	4935      	ldr	r1, [pc, #212]	; (8001574 <HAL_GPIO_Init+0x328>)
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	089b      	lsrs	r3, r3, #2
 80014a2:	3302      	adds	r3, #2
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014aa:	4b3d      	ldr	r3, [pc, #244]	; (80015a0 <HAL_GPIO_Init+0x354>)
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	43db      	mvns	r3, r3
 80014b4:	69ba      	ldr	r2, [r7, #24]
 80014b6:	4013      	ands	r3, r2
 80014b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d003      	beq.n	80014ce <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80014c6:	69ba      	ldr	r2, [r7, #24]
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	4313      	orrs	r3, r2
 80014cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014ce:	4a34      	ldr	r2, [pc, #208]	; (80015a0 <HAL_GPIO_Init+0x354>)
 80014d0:	69bb      	ldr	r3, [r7, #24]
 80014d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014d4:	4b32      	ldr	r3, [pc, #200]	; (80015a0 <HAL_GPIO_Init+0x354>)
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	43db      	mvns	r3, r3
 80014de:	69ba      	ldr	r2, [r7, #24]
 80014e0:	4013      	ands	r3, r2
 80014e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d003      	beq.n	80014f8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80014f0:	69ba      	ldr	r2, [r7, #24]
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	4313      	orrs	r3, r2
 80014f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014f8:	4a29      	ldr	r2, [pc, #164]	; (80015a0 <HAL_GPIO_Init+0x354>)
 80014fa:	69bb      	ldr	r3, [r7, #24]
 80014fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014fe:	4b28      	ldr	r3, [pc, #160]	; (80015a0 <HAL_GPIO_Init+0x354>)
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	43db      	mvns	r3, r3
 8001508:	69ba      	ldr	r2, [r7, #24]
 800150a:	4013      	ands	r3, r2
 800150c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001516:	2b00      	cmp	r3, #0
 8001518:	d003      	beq.n	8001522 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800151a:	69ba      	ldr	r2, [r7, #24]
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	4313      	orrs	r3, r2
 8001520:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001522:	4a1f      	ldr	r2, [pc, #124]	; (80015a0 <HAL_GPIO_Init+0x354>)
 8001524:	69bb      	ldr	r3, [r7, #24]
 8001526:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001528:	4b1d      	ldr	r3, [pc, #116]	; (80015a0 <HAL_GPIO_Init+0x354>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	43db      	mvns	r3, r3
 8001532:	69ba      	ldr	r2, [r7, #24]
 8001534:	4013      	ands	r3, r2
 8001536:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001540:	2b00      	cmp	r3, #0
 8001542:	d003      	beq.n	800154c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001544:	69ba      	ldr	r2, [r7, #24]
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	4313      	orrs	r3, r2
 800154a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800154c:	4a14      	ldr	r2, [pc, #80]	; (80015a0 <HAL_GPIO_Init+0x354>)
 800154e:	69bb      	ldr	r3, [r7, #24]
 8001550:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	3301      	adds	r3, #1
 8001556:	61fb      	str	r3, [r7, #28]
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	2b0f      	cmp	r3, #15
 800155c:	f67f ae84 	bls.w	8001268 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001560:	bf00      	nop
 8001562:	bf00      	nop
 8001564:	3724      	adds	r7, #36	; 0x24
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	40023800 	.word	0x40023800
 8001574:	40013800 	.word	0x40013800
 8001578:	40020000 	.word	0x40020000
 800157c:	40020400 	.word	0x40020400
 8001580:	40020800 	.word	0x40020800
 8001584:	40020c00 	.word	0x40020c00
 8001588:	40021000 	.word	0x40021000
 800158c:	40021400 	.word	0x40021400
 8001590:	40021800 	.word	0x40021800
 8001594:	40021c00 	.word	0x40021c00
 8001598:	40022000 	.word	0x40022000
 800159c:	40022400 	.word	0x40022400
 80015a0:	40013c00 	.word	0x40013c00

080015a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	460b      	mov	r3, r1
 80015ae:	807b      	strh	r3, [r7, #2]
 80015b0:	4613      	mov	r3, r2
 80015b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015b4:	787b      	ldrb	r3, [r7, #1]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d003      	beq.n	80015c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015ba:	887a      	ldrh	r2, [r7, #2]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80015c0:	e003      	b.n	80015ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015c2:	887b      	ldrh	r3, [r7, #2]
 80015c4:	041a      	lsls	r2, r3, #16
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	619a      	str	r2, [r3, #24]
}
 80015ca:	bf00      	nop
 80015cc:	370c      	adds	r7, #12
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
	...

080015d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	4603      	mov	r3, r0
 80015e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80015e2:	4b08      	ldr	r3, [pc, #32]	; (8001604 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015e4:	695a      	ldr	r2, [r3, #20]
 80015e6:	88fb      	ldrh	r3, [r7, #6]
 80015e8:	4013      	ands	r3, r2
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d006      	beq.n	80015fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80015ee:	4a05      	ldr	r2, [pc, #20]	; (8001604 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015f0:	88fb      	ldrh	r3, [r7, #6]
 80015f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80015f4:	88fb      	ldrh	r3, [r7, #6]
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7ff f982 	bl	8000900 <HAL_GPIO_EXTI_Callback>
  }
}
 80015fc:	bf00      	nop
 80015fe:	3708      	adds	r7, #8
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	40013c00 	.word	0x40013c00

08001608 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800160e:	2300      	movs	r3, #0
 8001610:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001612:	2300      	movs	r3, #0
 8001614:	603b      	str	r3, [r7, #0]
 8001616:	4b20      	ldr	r3, [pc, #128]	; (8001698 <HAL_PWREx_EnableOverDrive+0x90>)
 8001618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161a:	4a1f      	ldr	r2, [pc, #124]	; (8001698 <HAL_PWREx_EnableOverDrive+0x90>)
 800161c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001620:	6413      	str	r3, [r2, #64]	; 0x40
 8001622:	4b1d      	ldr	r3, [pc, #116]	; (8001698 <HAL_PWREx_EnableOverDrive+0x90>)
 8001624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001626:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800162a:	603b      	str	r3, [r7, #0]
 800162c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800162e:	4b1b      	ldr	r3, [pc, #108]	; (800169c <HAL_PWREx_EnableOverDrive+0x94>)
 8001630:	2201      	movs	r2, #1
 8001632:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001634:	f7ff fcc8 	bl	8000fc8 <HAL_GetTick>
 8001638:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800163a:	e009      	b.n	8001650 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800163c:	f7ff fcc4 	bl	8000fc8 <HAL_GetTick>
 8001640:	4602      	mov	r2, r0
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800164a:	d901      	bls.n	8001650 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800164c:	2303      	movs	r3, #3
 800164e:	e01f      	b.n	8001690 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001650:	4b13      	ldr	r3, [pc, #76]	; (80016a0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001658:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800165c:	d1ee      	bne.n	800163c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800165e:	4b11      	ldr	r3, [pc, #68]	; (80016a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001660:	2201      	movs	r2, #1
 8001662:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001664:	f7ff fcb0 	bl	8000fc8 <HAL_GetTick>
 8001668:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800166a:	e009      	b.n	8001680 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800166c:	f7ff fcac 	bl	8000fc8 <HAL_GetTick>
 8001670:	4602      	mov	r2, r0
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800167a:	d901      	bls.n	8001680 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800167c:	2303      	movs	r3, #3
 800167e:	e007      	b.n	8001690 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001680:	4b07      	ldr	r3, [pc, #28]	; (80016a0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001688:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800168c:	d1ee      	bne.n	800166c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800168e:	2300      	movs	r3, #0
}
 8001690:	4618      	mov	r0, r3
 8001692:	3708      	adds	r7, #8
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	40023800 	.word	0x40023800
 800169c:	420e0040 	.word	0x420e0040
 80016a0:	40007000 	.word	0x40007000
 80016a4:	420e0044 	.word	0x420e0044

080016a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b086      	sub	sp, #24
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d101      	bne.n	80016ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	e267      	b.n	8001b8a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 0301 	and.w	r3, r3, #1
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d075      	beq.n	80017b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80016c6:	4b88      	ldr	r3, [pc, #544]	; (80018e8 <HAL_RCC_OscConfig+0x240>)
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	f003 030c 	and.w	r3, r3, #12
 80016ce:	2b04      	cmp	r3, #4
 80016d0:	d00c      	beq.n	80016ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016d2:	4b85      	ldr	r3, [pc, #532]	; (80018e8 <HAL_RCC_OscConfig+0x240>)
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80016da:	2b08      	cmp	r3, #8
 80016dc:	d112      	bne.n	8001704 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016de:	4b82      	ldr	r3, [pc, #520]	; (80018e8 <HAL_RCC_OscConfig+0x240>)
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80016ea:	d10b      	bne.n	8001704 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016ec:	4b7e      	ldr	r3, [pc, #504]	; (80018e8 <HAL_RCC_OscConfig+0x240>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d05b      	beq.n	80017b0 <HAL_RCC_OscConfig+0x108>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d157      	bne.n	80017b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	e242      	b.n	8001b8a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800170c:	d106      	bne.n	800171c <HAL_RCC_OscConfig+0x74>
 800170e:	4b76      	ldr	r3, [pc, #472]	; (80018e8 <HAL_RCC_OscConfig+0x240>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a75      	ldr	r2, [pc, #468]	; (80018e8 <HAL_RCC_OscConfig+0x240>)
 8001714:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001718:	6013      	str	r3, [r2, #0]
 800171a:	e01d      	b.n	8001758 <HAL_RCC_OscConfig+0xb0>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001724:	d10c      	bne.n	8001740 <HAL_RCC_OscConfig+0x98>
 8001726:	4b70      	ldr	r3, [pc, #448]	; (80018e8 <HAL_RCC_OscConfig+0x240>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a6f      	ldr	r2, [pc, #444]	; (80018e8 <HAL_RCC_OscConfig+0x240>)
 800172c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001730:	6013      	str	r3, [r2, #0]
 8001732:	4b6d      	ldr	r3, [pc, #436]	; (80018e8 <HAL_RCC_OscConfig+0x240>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a6c      	ldr	r2, [pc, #432]	; (80018e8 <HAL_RCC_OscConfig+0x240>)
 8001738:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800173c:	6013      	str	r3, [r2, #0]
 800173e:	e00b      	b.n	8001758 <HAL_RCC_OscConfig+0xb0>
 8001740:	4b69      	ldr	r3, [pc, #420]	; (80018e8 <HAL_RCC_OscConfig+0x240>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a68      	ldr	r2, [pc, #416]	; (80018e8 <HAL_RCC_OscConfig+0x240>)
 8001746:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800174a:	6013      	str	r3, [r2, #0]
 800174c:	4b66      	ldr	r3, [pc, #408]	; (80018e8 <HAL_RCC_OscConfig+0x240>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a65      	ldr	r2, [pc, #404]	; (80018e8 <HAL_RCC_OscConfig+0x240>)
 8001752:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001756:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d013      	beq.n	8001788 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001760:	f7ff fc32 	bl	8000fc8 <HAL_GetTick>
 8001764:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001766:	e008      	b.n	800177a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001768:	f7ff fc2e 	bl	8000fc8 <HAL_GetTick>
 800176c:	4602      	mov	r2, r0
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	2b64      	cmp	r3, #100	; 0x64
 8001774:	d901      	bls.n	800177a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001776:	2303      	movs	r3, #3
 8001778:	e207      	b.n	8001b8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800177a:	4b5b      	ldr	r3, [pc, #364]	; (80018e8 <HAL_RCC_OscConfig+0x240>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d0f0      	beq.n	8001768 <HAL_RCC_OscConfig+0xc0>
 8001786:	e014      	b.n	80017b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001788:	f7ff fc1e 	bl	8000fc8 <HAL_GetTick>
 800178c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800178e:	e008      	b.n	80017a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001790:	f7ff fc1a 	bl	8000fc8 <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	2b64      	cmp	r3, #100	; 0x64
 800179c:	d901      	bls.n	80017a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800179e:	2303      	movs	r3, #3
 80017a0:	e1f3      	b.n	8001b8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017a2:	4b51      	ldr	r3, [pc, #324]	; (80018e8 <HAL_RCC_OscConfig+0x240>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d1f0      	bne.n	8001790 <HAL_RCC_OscConfig+0xe8>
 80017ae:	e000      	b.n	80017b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0302 	and.w	r3, r3, #2
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d063      	beq.n	8001886 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80017be:	4b4a      	ldr	r3, [pc, #296]	; (80018e8 <HAL_RCC_OscConfig+0x240>)
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	f003 030c 	and.w	r3, r3, #12
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d00b      	beq.n	80017e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017ca:	4b47      	ldr	r3, [pc, #284]	; (80018e8 <HAL_RCC_OscConfig+0x240>)
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80017d2:	2b08      	cmp	r3, #8
 80017d4:	d11c      	bne.n	8001810 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017d6:	4b44      	ldr	r3, [pc, #272]	; (80018e8 <HAL_RCC_OscConfig+0x240>)
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d116      	bne.n	8001810 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017e2:	4b41      	ldr	r3, [pc, #260]	; (80018e8 <HAL_RCC_OscConfig+0x240>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 0302 	and.w	r3, r3, #2
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d005      	beq.n	80017fa <HAL_RCC_OscConfig+0x152>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	68db      	ldr	r3, [r3, #12]
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d001      	beq.n	80017fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e1c7      	b.n	8001b8a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017fa:	4b3b      	ldr	r3, [pc, #236]	; (80018e8 <HAL_RCC_OscConfig+0x240>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	691b      	ldr	r3, [r3, #16]
 8001806:	00db      	lsls	r3, r3, #3
 8001808:	4937      	ldr	r1, [pc, #220]	; (80018e8 <HAL_RCC_OscConfig+0x240>)
 800180a:	4313      	orrs	r3, r2
 800180c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800180e:	e03a      	b.n	8001886 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	68db      	ldr	r3, [r3, #12]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d020      	beq.n	800185a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001818:	4b34      	ldr	r3, [pc, #208]	; (80018ec <HAL_RCC_OscConfig+0x244>)
 800181a:	2201      	movs	r2, #1
 800181c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800181e:	f7ff fbd3 	bl	8000fc8 <HAL_GetTick>
 8001822:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001824:	e008      	b.n	8001838 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001826:	f7ff fbcf 	bl	8000fc8 <HAL_GetTick>
 800182a:	4602      	mov	r2, r0
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	2b02      	cmp	r3, #2
 8001832:	d901      	bls.n	8001838 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001834:	2303      	movs	r3, #3
 8001836:	e1a8      	b.n	8001b8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001838:	4b2b      	ldr	r3, [pc, #172]	; (80018e8 <HAL_RCC_OscConfig+0x240>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 0302 	and.w	r3, r3, #2
 8001840:	2b00      	cmp	r3, #0
 8001842:	d0f0      	beq.n	8001826 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001844:	4b28      	ldr	r3, [pc, #160]	; (80018e8 <HAL_RCC_OscConfig+0x240>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	691b      	ldr	r3, [r3, #16]
 8001850:	00db      	lsls	r3, r3, #3
 8001852:	4925      	ldr	r1, [pc, #148]	; (80018e8 <HAL_RCC_OscConfig+0x240>)
 8001854:	4313      	orrs	r3, r2
 8001856:	600b      	str	r3, [r1, #0]
 8001858:	e015      	b.n	8001886 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800185a:	4b24      	ldr	r3, [pc, #144]	; (80018ec <HAL_RCC_OscConfig+0x244>)
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001860:	f7ff fbb2 	bl	8000fc8 <HAL_GetTick>
 8001864:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001866:	e008      	b.n	800187a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001868:	f7ff fbae 	bl	8000fc8 <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	2b02      	cmp	r3, #2
 8001874:	d901      	bls.n	800187a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001876:	2303      	movs	r3, #3
 8001878:	e187      	b.n	8001b8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800187a:	4b1b      	ldr	r3, [pc, #108]	; (80018e8 <HAL_RCC_OscConfig+0x240>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0302 	and.w	r3, r3, #2
 8001882:	2b00      	cmp	r3, #0
 8001884:	d1f0      	bne.n	8001868 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 0308 	and.w	r3, r3, #8
 800188e:	2b00      	cmp	r3, #0
 8001890:	d036      	beq.n	8001900 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	695b      	ldr	r3, [r3, #20]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d016      	beq.n	80018c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800189a:	4b15      	ldr	r3, [pc, #84]	; (80018f0 <HAL_RCC_OscConfig+0x248>)
 800189c:	2201      	movs	r2, #1
 800189e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018a0:	f7ff fb92 	bl	8000fc8 <HAL_GetTick>
 80018a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018a6:	e008      	b.n	80018ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018a8:	f7ff fb8e 	bl	8000fc8 <HAL_GetTick>
 80018ac:	4602      	mov	r2, r0
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	d901      	bls.n	80018ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80018b6:	2303      	movs	r3, #3
 80018b8:	e167      	b.n	8001b8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018ba:	4b0b      	ldr	r3, [pc, #44]	; (80018e8 <HAL_RCC_OscConfig+0x240>)
 80018bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018be:	f003 0302 	and.w	r3, r3, #2
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d0f0      	beq.n	80018a8 <HAL_RCC_OscConfig+0x200>
 80018c6:	e01b      	b.n	8001900 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018c8:	4b09      	ldr	r3, [pc, #36]	; (80018f0 <HAL_RCC_OscConfig+0x248>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018ce:	f7ff fb7b 	bl	8000fc8 <HAL_GetTick>
 80018d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018d4:	e00e      	b.n	80018f4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018d6:	f7ff fb77 	bl	8000fc8 <HAL_GetTick>
 80018da:	4602      	mov	r2, r0
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	1ad3      	subs	r3, r2, r3
 80018e0:	2b02      	cmp	r3, #2
 80018e2:	d907      	bls.n	80018f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80018e4:	2303      	movs	r3, #3
 80018e6:	e150      	b.n	8001b8a <HAL_RCC_OscConfig+0x4e2>
 80018e8:	40023800 	.word	0x40023800
 80018ec:	42470000 	.word	0x42470000
 80018f0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018f4:	4b88      	ldr	r3, [pc, #544]	; (8001b18 <HAL_RCC_OscConfig+0x470>)
 80018f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018f8:	f003 0302 	and.w	r3, r3, #2
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d1ea      	bne.n	80018d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f003 0304 	and.w	r3, r3, #4
 8001908:	2b00      	cmp	r3, #0
 800190a:	f000 8097 	beq.w	8001a3c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800190e:	2300      	movs	r3, #0
 8001910:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001912:	4b81      	ldr	r3, [pc, #516]	; (8001b18 <HAL_RCC_OscConfig+0x470>)
 8001914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d10f      	bne.n	800193e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800191e:	2300      	movs	r3, #0
 8001920:	60bb      	str	r3, [r7, #8]
 8001922:	4b7d      	ldr	r3, [pc, #500]	; (8001b18 <HAL_RCC_OscConfig+0x470>)
 8001924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001926:	4a7c      	ldr	r2, [pc, #496]	; (8001b18 <HAL_RCC_OscConfig+0x470>)
 8001928:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800192c:	6413      	str	r3, [r2, #64]	; 0x40
 800192e:	4b7a      	ldr	r3, [pc, #488]	; (8001b18 <HAL_RCC_OscConfig+0x470>)
 8001930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001936:	60bb      	str	r3, [r7, #8]
 8001938:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800193a:	2301      	movs	r3, #1
 800193c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800193e:	4b77      	ldr	r3, [pc, #476]	; (8001b1c <HAL_RCC_OscConfig+0x474>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001946:	2b00      	cmp	r3, #0
 8001948:	d118      	bne.n	800197c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800194a:	4b74      	ldr	r3, [pc, #464]	; (8001b1c <HAL_RCC_OscConfig+0x474>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a73      	ldr	r2, [pc, #460]	; (8001b1c <HAL_RCC_OscConfig+0x474>)
 8001950:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001954:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001956:	f7ff fb37 	bl	8000fc8 <HAL_GetTick>
 800195a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800195c:	e008      	b.n	8001970 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800195e:	f7ff fb33 	bl	8000fc8 <HAL_GetTick>
 8001962:	4602      	mov	r2, r0
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	1ad3      	subs	r3, r2, r3
 8001968:	2b02      	cmp	r3, #2
 800196a:	d901      	bls.n	8001970 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800196c:	2303      	movs	r3, #3
 800196e:	e10c      	b.n	8001b8a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001970:	4b6a      	ldr	r3, [pc, #424]	; (8001b1c <HAL_RCC_OscConfig+0x474>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001978:	2b00      	cmp	r3, #0
 800197a:	d0f0      	beq.n	800195e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	2b01      	cmp	r3, #1
 8001982:	d106      	bne.n	8001992 <HAL_RCC_OscConfig+0x2ea>
 8001984:	4b64      	ldr	r3, [pc, #400]	; (8001b18 <HAL_RCC_OscConfig+0x470>)
 8001986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001988:	4a63      	ldr	r2, [pc, #396]	; (8001b18 <HAL_RCC_OscConfig+0x470>)
 800198a:	f043 0301 	orr.w	r3, r3, #1
 800198e:	6713      	str	r3, [r2, #112]	; 0x70
 8001990:	e01c      	b.n	80019cc <HAL_RCC_OscConfig+0x324>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	2b05      	cmp	r3, #5
 8001998:	d10c      	bne.n	80019b4 <HAL_RCC_OscConfig+0x30c>
 800199a:	4b5f      	ldr	r3, [pc, #380]	; (8001b18 <HAL_RCC_OscConfig+0x470>)
 800199c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800199e:	4a5e      	ldr	r2, [pc, #376]	; (8001b18 <HAL_RCC_OscConfig+0x470>)
 80019a0:	f043 0304 	orr.w	r3, r3, #4
 80019a4:	6713      	str	r3, [r2, #112]	; 0x70
 80019a6:	4b5c      	ldr	r3, [pc, #368]	; (8001b18 <HAL_RCC_OscConfig+0x470>)
 80019a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019aa:	4a5b      	ldr	r2, [pc, #364]	; (8001b18 <HAL_RCC_OscConfig+0x470>)
 80019ac:	f043 0301 	orr.w	r3, r3, #1
 80019b0:	6713      	str	r3, [r2, #112]	; 0x70
 80019b2:	e00b      	b.n	80019cc <HAL_RCC_OscConfig+0x324>
 80019b4:	4b58      	ldr	r3, [pc, #352]	; (8001b18 <HAL_RCC_OscConfig+0x470>)
 80019b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019b8:	4a57      	ldr	r2, [pc, #348]	; (8001b18 <HAL_RCC_OscConfig+0x470>)
 80019ba:	f023 0301 	bic.w	r3, r3, #1
 80019be:	6713      	str	r3, [r2, #112]	; 0x70
 80019c0:	4b55      	ldr	r3, [pc, #340]	; (8001b18 <HAL_RCC_OscConfig+0x470>)
 80019c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019c4:	4a54      	ldr	r2, [pc, #336]	; (8001b18 <HAL_RCC_OscConfig+0x470>)
 80019c6:	f023 0304 	bic.w	r3, r3, #4
 80019ca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d015      	beq.n	8001a00 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019d4:	f7ff faf8 	bl	8000fc8 <HAL_GetTick>
 80019d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019da:	e00a      	b.n	80019f2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019dc:	f7ff faf4 	bl	8000fc8 <HAL_GetTick>
 80019e0:	4602      	mov	r2, r0
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d901      	bls.n	80019f2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	e0cb      	b.n	8001b8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019f2:	4b49      	ldr	r3, [pc, #292]	; (8001b18 <HAL_RCC_OscConfig+0x470>)
 80019f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019f6:	f003 0302 	and.w	r3, r3, #2
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d0ee      	beq.n	80019dc <HAL_RCC_OscConfig+0x334>
 80019fe:	e014      	b.n	8001a2a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a00:	f7ff fae2 	bl	8000fc8 <HAL_GetTick>
 8001a04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a06:	e00a      	b.n	8001a1e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a08:	f7ff fade 	bl	8000fc8 <HAL_GetTick>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d901      	bls.n	8001a1e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e0b5      	b.n	8001b8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a1e:	4b3e      	ldr	r3, [pc, #248]	; (8001b18 <HAL_RCC_OscConfig+0x470>)
 8001a20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a22:	f003 0302 	and.w	r3, r3, #2
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d1ee      	bne.n	8001a08 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a2a:	7dfb      	ldrb	r3, [r7, #23]
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d105      	bne.n	8001a3c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a30:	4b39      	ldr	r3, [pc, #228]	; (8001b18 <HAL_RCC_OscConfig+0x470>)
 8001a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a34:	4a38      	ldr	r2, [pc, #224]	; (8001b18 <HAL_RCC_OscConfig+0x470>)
 8001a36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a3a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	699b      	ldr	r3, [r3, #24]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	f000 80a1 	beq.w	8001b88 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a46:	4b34      	ldr	r3, [pc, #208]	; (8001b18 <HAL_RCC_OscConfig+0x470>)
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	f003 030c 	and.w	r3, r3, #12
 8001a4e:	2b08      	cmp	r3, #8
 8001a50:	d05c      	beq.n	8001b0c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	699b      	ldr	r3, [r3, #24]
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d141      	bne.n	8001ade <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a5a:	4b31      	ldr	r3, [pc, #196]	; (8001b20 <HAL_RCC_OscConfig+0x478>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a60:	f7ff fab2 	bl	8000fc8 <HAL_GetTick>
 8001a64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a66:	e008      	b.n	8001a7a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a68:	f7ff faae 	bl	8000fc8 <HAL_GetTick>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	2b02      	cmp	r3, #2
 8001a74:	d901      	bls.n	8001a7a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e087      	b.n	8001b8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a7a:	4b27      	ldr	r3, [pc, #156]	; (8001b18 <HAL_RCC_OscConfig+0x470>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d1f0      	bne.n	8001a68 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	69da      	ldr	r2, [r3, #28]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6a1b      	ldr	r3, [r3, #32]
 8001a8e:	431a      	orrs	r2, r3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a94:	019b      	lsls	r3, r3, #6
 8001a96:	431a      	orrs	r2, r3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a9c:	085b      	lsrs	r3, r3, #1
 8001a9e:	3b01      	subs	r3, #1
 8001aa0:	041b      	lsls	r3, r3, #16
 8001aa2:	431a      	orrs	r2, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa8:	061b      	lsls	r3, r3, #24
 8001aaa:	491b      	ldr	r1, [pc, #108]	; (8001b18 <HAL_RCC_OscConfig+0x470>)
 8001aac:	4313      	orrs	r3, r2
 8001aae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ab0:	4b1b      	ldr	r3, [pc, #108]	; (8001b20 <HAL_RCC_OscConfig+0x478>)
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ab6:	f7ff fa87 	bl	8000fc8 <HAL_GetTick>
 8001aba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001abc:	e008      	b.n	8001ad0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001abe:	f7ff fa83 	bl	8000fc8 <HAL_GetTick>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	1ad3      	subs	r3, r2, r3
 8001ac8:	2b02      	cmp	r3, #2
 8001aca:	d901      	bls.n	8001ad0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001acc:	2303      	movs	r3, #3
 8001ace:	e05c      	b.n	8001b8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ad0:	4b11      	ldr	r3, [pc, #68]	; (8001b18 <HAL_RCC_OscConfig+0x470>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d0f0      	beq.n	8001abe <HAL_RCC_OscConfig+0x416>
 8001adc:	e054      	b.n	8001b88 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ade:	4b10      	ldr	r3, [pc, #64]	; (8001b20 <HAL_RCC_OscConfig+0x478>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae4:	f7ff fa70 	bl	8000fc8 <HAL_GetTick>
 8001ae8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001aea:	e008      	b.n	8001afe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001aec:	f7ff fa6c 	bl	8000fc8 <HAL_GetTick>
 8001af0:	4602      	mov	r2, r0
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	2b02      	cmp	r3, #2
 8001af8:	d901      	bls.n	8001afe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001afa:	2303      	movs	r3, #3
 8001afc:	e045      	b.n	8001b8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001afe:	4b06      	ldr	r3, [pc, #24]	; (8001b18 <HAL_RCC_OscConfig+0x470>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d1f0      	bne.n	8001aec <HAL_RCC_OscConfig+0x444>
 8001b0a:	e03d      	b.n	8001b88 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	699b      	ldr	r3, [r3, #24]
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d107      	bne.n	8001b24 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e038      	b.n	8001b8a <HAL_RCC_OscConfig+0x4e2>
 8001b18:	40023800 	.word	0x40023800
 8001b1c:	40007000 	.word	0x40007000
 8001b20:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001b24:	4b1b      	ldr	r3, [pc, #108]	; (8001b94 <HAL_RCC_OscConfig+0x4ec>)
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	699b      	ldr	r3, [r3, #24]
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d028      	beq.n	8001b84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d121      	bne.n	8001b84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	d11a      	bne.n	8001b84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b4e:	68fa      	ldr	r2, [r7, #12]
 8001b50:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001b54:	4013      	ands	r3, r2
 8001b56:	687a      	ldr	r2, [r7, #4]
 8001b58:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001b5a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d111      	bne.n	8001b84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b6a:	085b      	lsrs	r3, r3, #1
 8001b6c:	3b01      	subs	r3, #1
 8001b6e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d107      	bne.n	8001b84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b7e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d001      	beq.n	8001b88 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	e000      	b.n	8001b8a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001b88:	2300      	movs	r3, #0
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3718      	adds	r7, #24
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	40023800 	.word	0x40023800

08001b98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d101      	bne.n	8001bac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e0cc      	b.n	8001d46 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bac:	4b68      	ldr	r3, [pc, #416]	; (8001d50 <HAL_RCC_ClockConfig+0x1b8>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 030f 	and.w	r3, r3, #15
 8001bb4:	683a      	ldr	r2, [r7, #0]
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	d90c      	bls.n	8001bd4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bba:	4b65      	ldr	r3, [pc, #404]	; (8001d50 <HAL_RCC_ClockConfig+0x1b8>)
 8001bbc:	683a      	ldr	r2, [r7, #0]
 8001bbe:	b2d2      	uxtb	r2, r2
 8001bc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bc2:	4b63      	ldr	r3, [pc, #396]	; (8001d50 <HAL_RCC_ClockConfig+0x1b8>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 030f 	and.w	r3, r3, #15
 8001bca:	683a      	ldr	r2, [r7, #0]
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d001      	beq.n	8001bd4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e0b8      	b.n	8001d46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0302 	and.w	r3, r3, #2
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d020      	beq.n	8001c22 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 0304 	and.w	r3, r3, #4
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d005      	beq.n	8001bf8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bec:	4b59      	ldr	r3, [pc, #356]	; (8001d54 <HAL_RCC_ClockConfig+0x1bc>)
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	4a58      	ldr	r2, [pc, #352]	; (8001d54 <HAL_RCC_ClockConfig+0x1bc>)
 8001bf2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001bf6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 0308 	and.w	r3, r3, #8
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d005      	beq.n	8001c10 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c04:	4b53      	ldr	r3, [pc, #332]	; (8001d54 <HAL_RCC_ClockConfig+0x1bc>)
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	4a52      	ldr	r2, [pc, #328]	; (8001d54 <HAL_RCC_ClockConfig+0x1bc>)
 8001c0a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001c0e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c10:	4b50      	ldr	r3, [pc, #320]	; (8001d54 <HAL_RCC_ClockConfig+0x1bc>)
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	494d      	ldr	r1, [pc, #308]	; (8001d54 <HAL_RCC_ClockConfig+0x1bc>)
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 0301 	and.w	r3, r3, #1
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d044      	beq.n	8001cb8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d107      	bne.n	8001c46 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c36:	4b47      	ldr	r3, [pc, #284]	; (8001d54 <HAL_RCC_ClockConfig+0x1bc>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d119      	bne.n	8001c76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e07f      	b.n	8001d46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	d003      	beq.n	8001c56 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c52:	2b03      	cmp	r3, #3
 8001c54:	d107      	bne.n	8001c66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c56:	4b3f      	ldr	r3, [pc, #252]	; (8001d54 <HAL_RCC_ClockConfig+0x1bc>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d109      	bne.n	8001c76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e06f      	b.n	8001d46 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c66:	4b3b      	ldr	r3, [pc, #236]	; (8001d54 <HAL_RCC_ClockConfig+0x1bc>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0302 	and.w	r3, r3, #2
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d101      	bne.n	8001c76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e067      	b.n	8001d46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c76:	4b37      	ldr	r3, [pc, #220]	; (8001d54 <HAL_RCC_ClockConfig+0x1bc>)
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	f023 0203 	bic.w	r2, r3, #3
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	4934      	ldr	r1, [pc, #208]	; (8001d54 <HAL_RCC_ClockConfig+0x1bc>)
 8001c84:	4313      	orrs	r3, r2
 8001c86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c88:	f7ff f99e 	bl	8000fc8 <HAL_GetTick>
 8001c8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c8e:	e00a      	b.n	8001ca6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c90:	f7ff f99a 	bl	8000fc8 <HAL_GetTick>
 8001c94:	4602      	mov	r2, r0
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d901      	bls.n	8001ca6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	e04f      	b.n	8001d46 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ca6:	4b2b      	ldr	r3, [pc, #172]	; (8001d54 <HAL_RCC_ClockConfig+0x1bc>)
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	f003 020c 	and.w	r2, r3, #12
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d1eb      	bne.n	8001c90 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001cb8:	4b25      	ldr	r3, [pc, #148]	; (8001d50 <HAL_RCC_ClockConfig+0x1b8>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 030f 	and.w	r3, r3, #15
 8001cc0:	683a      	ldr	r2, [r7, #0]
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	d20c      	bcs.n	8001ce0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cc6:	4b22      	ldr	r3, [pc, #136]	; (8001d50 <HAL_RCC_ClockConfig+0x1b8>)
 8001cc8:	683a      	ldr	r2, [r7, #0]
 8001cca:	b2d2      	uxtb	r2, r2
 8001ccc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cce:	4b20      	ldr	r3, [pc, #128]	; (8001d50 <HAL_RCC_ClockConfig+0x1b8>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 030f 	and.w	r3, r3, #15
 8001cd6:	683a      	ldr	r2, [r7, #0]
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d001      	beq.n	8001ce0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e032      	b.n	8001d46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 0304 	and.w	r3, r3, #4
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d008      	beq.n	8001cfe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cec:	4b19      	ldr	r3, [pc, #100]	; (8001d54 <HAL_RCC_ClockConfig+0x1bc>)
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	4916      	ldr	r1, [pc, #88]	; (8001d54 <HAL_RCC_ClockConfig+0x1bc>)
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0308 	and.w	r3, r3, #8
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d009      	beq.n	8001d1e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d0a:	4b12      	ldr	r3, [pc, #72]	; (8001d54 <HAL_RCC_ClockConfig+0x1bc>)
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	691b      	ldr	r3, [r3, #16]
 8001d16:	00db      	lsls	r3, r3, #3
 8001d18:	490e      	ldr	r1, [pc, #56]	; (8001d54 <HAL_RCC_ClockConfig+0x1bc>)
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d1e:	f000 f821 	bl	8001d64 <HAL_RCC_GetSysClockFreq>
 8001d22:	4602      	mov	r2, r0
 8001d24:	4b0b      	ldr	r3, [pc, #44]	; (8001d54 <HAL_RCC_ClockConfig+0x1bc>)
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	091b      	lsrs	r3, r3, #4
 8001d2a:	f003 030f 	and.w	r3, r3, #15
 8001d2e:	490a      	ldr	r1, [pc, #40]	; (8001d58 <HAL_RCC_ClockConfig+0x1c0>)
 8001d30:	5ccb      	ldrb	r3, [r1, r3]
 8001d32:	fa22 f303 	lsr.w	r3, r2, r3
 8001d36:	4a09      	ldr	r2, [pc, #36]	; (8001d5c <HAL_RCC_ClockConfig+0x1c4>)
 8001d38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001d3a:	4b09      	ldr	r3, [pc, #36]	; (8001d60 <HAL_RCC_ClockConfig+0x1c8>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7ff f8fe 	bl	8000f40 <HAL_InitTick>

  return HAL_OK;
 8001d44:	2300      	movs	r3, #0
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3710      	adds	r7, #16
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	40023c00 	.word	0x40023c00
 8001d54:	40023800 	.word	0x40023800
 8001d58:	08004334 	.word	0x08004334
 8001d5c:	20000000 	.word	0x20000000
 8001d60:	20000004 	.word	0x20000004

08001d64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d68:	b094      	sub	sp, #80	; 0x50
 8001d6a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	647b      	str	r3, [r7, #68]	; 0x44
 8001d70:	2300      	movs	r3, #0
 8001d72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001d74:	2300      	movs	r3, #0
 8001d76:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d7c:	4b79      	ldr	r3, [pc, #484]	; (8001f64 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	f003 030c 	and.w	r3, r3, #12
 8001d84:	2b08      	cmp	r3, #8
 8001d86:	d00d      	beq.n	8001da4 <HAL_RCC_GetSysClockFreq+0x40>
 8001d88:	2b08      	cmp	r3, #8
 8001d8a:	f200 80e1 	bhi.w	8001f50 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d002      	beq.n	8001d98 <HAL_RCC_GetSysClockFreq+0x34>
 8001d92:	2b04      	cmp	r3, #4
 8001d94:	d003      	beq.n	8001d9e <HAL_RCC_GetSysClockFreq+0x3a>
 8001d96:	e0db      	b.n	8001f50 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d98:	4b73      	ldr	r3, [pc, #460]	; (8001f68 <HAL_RCC_GetSysClockFreq+0x204>)
 8001d9a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001d9c:	e0db      	b.n	8001f56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d9e:	4b73      	ldr	r3, [pc, #460]	; (8001f6c <HAL_RCC_GetSysClockFreq+0x208>)
 8001da0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001da2:	e0d8      	b.n	8001f56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001da4:	4b6f      	ldr	r3, [pc, #444]	; (8001f64 <HAL_RCC_GetSysClockFreq+0x200>)
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001dac:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001dae:	4b6d      	ldr	r3, [pc, #436]	; (8001f64 <HAL_RCC_GetSysClockFreq+0x200>)
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d063      	beq.n	8001e82 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dba:	4b6a      	ldr	r3, [pc, #424]	; (8001f64 <HAL_RCC_GetSysClockFreq+0x200>)
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	099b      	lsrs	r3, r3, #6
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	63bb      	str	r3, [r7, #56]	; 0x38
 8001dc4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001dc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001dcc:	633b      	str	r3, [r7, #48]	; 0x30
 8001dce:	2300      	movs	r3, #0
 8001dd0:	637b      	str	r3, [r7, #52]	; 0x34
 8001dd2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001dd6:	4622      	mov	r2, r4
 8001dd8:	462b      	mov	r3, r5
 8001dda:	f04f 0000 	mov.w	r0, #0
 8001dde:	f04f 0100 	mov.w	r1, #0
 8001de2:	0159      	lsls	r1, r3, #5
 8001de4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001de8:	0150      	lsls	r0, r2, #5
 8001dea:	4602      	mov	r2, r0
 8001dec:	460b      	mov	r3, r1
 8001dee:	4621      	mov	r1, r4
 8001df0:	1a51      	subs	r1, r2, r1
 8001df2:	6139      	str	r1, [r7, #16]
 8001df4:	4629      	mov	r1, r5
 8001df6:	eb63 0301 	sbc.w	r3, r3, r1
 8001dfa:	617b      	str	r3, [r7, #20]
 8001dfc:	f04f 0200 	mov.w	r2, #0
 8001e00:	f04f 0300 	mov.w	r3, #0
 8001e04:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001e08:	4659      	mov	r1, fp
 8001e0a:	018b      	lsls	r3, r1, #6
 8001e0c:	4651      	mov	r1, sl
 8001e0e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e12:	4651      	mov	r1, sl
 8001e14:	018a      	lsls	r2, r1, #6
 8001e16:	4651      	mov	r1, sl
 8001e18:	ebb2 0801 	subs.w	r8, r2, r1
 8001e1c:	4659      	mov	r1, fp
 8001e1e:	eb63 0901 	sbc.w	r9, r3, r1
 8001e22:	f04f 0200 	mov.w	r2, #0
 8001e26:	f04f 0300 	mov.w	r3, #0
 8001e2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001e2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001e32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001e36:	4690      	mov	r8, r2
 8001e38:	4699      	mov	r9, r3
 8001e3a:	4623      	mov	r3, r4
 8001e3c:	eb18 0303 	adds.w	r3, r8, r3
 8001e40:	60bb      	str	r3, [r7, #8]
 8001e42:	462b      	mov	r3, r5
 8001e44:	eb49 0303 	adc.w	r3, r9, r3
 8001e48:	60fb      	str	r3, [r7, #12]
 8001e4a:	f04f 0200 	mov.w	r2, #0
 8001e4e:	f04f 0300 	mov.w	r3, #0
 8001e52:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001e56:	4629      	mov	r1, r5
 8001e58:	024b      	lsls	r3, r1, #9
 8001e5a:	4621      	mov	r1, r4
 8001e5c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001e60:	4621      	mov	r1, r4
 8001e62:	024a      	lsls	r2, r1, #9
 8001e64:	4610      	mov	r0, r2
 8001e66:	4619      	mov	r1, r3
 8001e68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e6e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001e70:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001e74:	f7fe fa0c 	bl	8000290 <__aeabi_uldivmod>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	460b      	mov	r3, r1
 8001e7c:	4613      	mov	r3, r2
 8001e7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001e80:	e058      	b.n	8001f34 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e82:	4b38      	ldr	r3, [pc, #224]	; (8001f64 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	099b      	lsrs	r3, r3, #6
 8001e88:	2200      	movs	r2, #0
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	4611      	mov	r1, r2
 8001e8e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001e92:	623b      	str	r3, [r7, #32]
 8001e94:	2300      	movs	r3, #0
 8001e96:	627b      	str	r3, [r7, #36]	; 0x24
 8001e98:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001e9c:	4642      	mov	r2, r8
 8001e9e:	464b      	mov	r3, r9
 8001ea0:	f04f 0000 	mov.w	r0, #0
 8001ea4:	f04f 0100 	mov.w	r1, #0
 8001ea8:	0159      	lsls	r1, r3, #5
 8001eaa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001eae:	0150      	lsls	r0, r2, #5
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	460b      	mov	r3, r1
 8001eb4:	4641      	mov	r1, r8
 8001eb6:	ebb2 0a01 	subs.w	sl, r2, r1
 8001eba:	4649      	mov	r1, r9
 8001ebc:	eb63 0b01 	sbc.w	fp, r3, r1
 8001ec0:	f04f 0200 	mov.w	r2, #0
 8001ec4:	f04f 0300 	mov.w	r3, #0
 8001ec8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001ecc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001ed0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001ed4:	ebb2 040a 	subs.w	r4, r2, sl
 8001ed8:	eb63 050b 	sbc.w	r5, r3, fp
 8001edc:	f04f 0200 	mov.w	r2, #0
 8001ee0:	f04f 0300 	mov.w	r3, #0
 8001ee4:	00eb      	lsls	r3, r5, #3
 8001ee6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001eea:	00e2      	lsls	r2, r4, #3
 8001eec:	4614      	mov	r4, r2
 8001eee:	461d      	mov	r5, r3
 8001ef0:	4643      	mov	r3, r8
 8001ef2:	18e3      	adds	r3, r4, r3
 8001ef4:	603b      	str	r3, [r7, #0]
 8001ef6:	464b      	mov	r3, r9
 8001ef8:	eb45 0303 	adc.w	r3, r5, r3
 8001efc:	607b      	str	r3, [r7, #4]
 8001efe:	f04f 0200 	mov.w	r2, #0
 8001f02:	f04f 0300 	mov.w	r3, #0
 8001f06:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001f0a:	4629      	mov	r1, r5
 8001f0c:	028b      	lsls	r3, r1, #10
 8001f0e:	4621      	mov	r1, r4
 8001f10:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f14:	4621      	mov	r1, r4
 8001f16:	028a      	lsls	r2, r1, #10
 8001f18:	4610      	mov	r0, r2
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f1e:	2200      	movs	r2, #0
 8001f20:	61bb      	str	r3, [r7, #24]
 8001f22:	61fa      	str	r2, [r7, #28]
 8001f24:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f28:	f7fe f9b2 	bl	8000290 <__aeabi_uldivmod>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	460b      	mov	r3, r1
 8001f30:	4613      	mov	r3, r2
 8001f32:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001f34:	4b0b      	ldr	r3, [pc, #44]	; (8001f64 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	0c1b      	lsrs	r3, r3, #16
 8001f3a:	f003 0303 	and.w	r3, r3, #3
 8001f3e:	3301      	adds	r3, #1
 8001f40:	005b      	lsls	r3, r3, #1
 8001f42:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001f44:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001f46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f48:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f4c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001f4e:	e002      	b.n	8001f56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f50:	4b05      	ldr	r3, [pc, #20]	; (8001f68 <HAL_RCC_GetSysClockFreq+0x204>)
 8001f52:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001f54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3750      	adds	r7, #80	; 0x50
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f62:	bf00      	nop
 8001f64:	40023800 	.word	0x40023800
 8001f68:	00f42400 	.word	0x00f42400
 8001f6c:	007a1200 	.word	0x007a1200

08001f70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f74:	4b03      	ldr	r3, [pc, #12]	; (8001f84 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f76:	681b      	ldr	r3, [r3, #0]
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	20000000 	.word	0x20000000

08001f88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001f8c:	f7ff fff0 	bl	8001f70 <HAL_RCC_GetHCLKFreq>
 8001f90:	4602      	mov	r2, r0
 8001f92:	4b05      	ldr	r3, [pc, #20]	; (8001fa8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	0a9b      	lsrs	r3, r3, #10
 8001f98:	f003 0307 	and.w	r3, r3, #7
 8001f9c:	4903      	ldr	r1, [pc, #12]	; (8001fac <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f9e:	5ccb      	ldrb	r3, [r1, r3]
 8001fa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	40023800 	.word	0x40023800
 8001fac:	08004344 	.word	0x08004344

08001fb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001fb4:	f7ff ffdc 	bl	8001f70 <HAL_RCC_GetHCLKFreq>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	4b05      	ldr	r3, [pc, #20]	; (8001fd0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	0b5b      	lsrs	r3, r3, #13
 8001fc0:	f003 0307 	and.w	r3, r3, #7
 8001fc4:	4903      	ldr	r1, [pc, #12]	; (8001fd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fc6:	5ccb      	ldrb	r3, [r1, r3]
 8001fc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	40023800 	.word	0x40023800
 8001fd4:	08004344 	.word	0x08004344

08001fd8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d101      	bne.n	8001fea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e041      	b.n	800206e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d106      	bne.n	8002004 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f7fe fe84 	bl	8000d0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2202      	movs	r2, #2
 8002008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	3304      	adds	r3, #4
 8002014:	4619      	mov	r1, r3
 8002016:	4610      	mov	r0, r2
 8002018:	f000 fa14 	bl	8002444 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2201      	movs	r2, #1
 8002020:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2201      	movs	r2, #1
 8002028:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2201      	movs	r2, #1
 8002030:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2201      	movs	r2, #1
 8002038:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2201      	movs	r2, #1
 8002040:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2201      	movs	r2, #1
 8002048:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2201      	movs	r2, #1
 8002050:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2201      	movs	r2, #1
 8002058:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2201      	movs	r2, #1
 8002060:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2201      	movs	r2, #1
 8002068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800206c:	2300      	movs	r3, #0
}
 800206e:	4618      	mov	r0, r3
 8002070:	3708      	adds	r7, #8
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
	...

08002078 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002078:	b480      	push	{r7}
 800207a:	b085      	sub	sp, #20
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002086:	b2db      	uxtb	r3, r3
 8002088:	2b01      	cmp	r3, #1
 800208a:	d001      	beq.n	8002090 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e046      	b.n	800211e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2202      	movs	r2, #2
 8002094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a23      	ldr	r2, [pc, #140]	; (800212c <HAL_TIM_Base_Start+0xb4>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d022      	beq.n	80020e8 <HAL_TIM_Base_Start+0x70>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020aa:	d01d      	beq.n	80020e8 <HAL_TIM_Base_Start+0x70>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a1f      	ldr	r2, [pc, #124]	; (8002130 <HAL_TIM_Base_Start+0xb8>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d018      	beq.n	80020e8 <HAL_TIM_Base_Start+0x70>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a1e      	ldr	r2, [pc, #120]	; (8002134 <HAL_TIM_Base_Start+0xbc>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d013      	beq.n	80020e8 <HAL_TIM_Base_Start+0x70>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a1c      	ldr	r2, [pc, #112]	; (8002138 <HAL_TIM_Base_Start+0xc0>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d00e      	beq.n	80020e8 <HAL_TIM_Base_Start+0x70>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a1b      	ldr	r2, [pc, #108]	; (800213c <HAL_TIM_Base_Start+0xc4>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d009      	beq.n	80020e8 <HAL_TIM_Base_Start+0x70>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a19      	ldr	r2, [pc, #100]	; (8002140 <HAL_TIM_Base_Start+0xc8>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d004      	beq.n	80020e8 <HAL_TIM_Base_Start+0x70>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a18      	ldr	r2, [pc, #96]	; (8002144 <HAL_TIM_Base_Start+0xcc>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d111      	bne.n	800210c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	f003 0307 	and.w	r3, r3, #7
 80020f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	2b06      	cmp	r3, #6
 80020f8:	d010      	beq.n	800211c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f042 0201 	orr.w	r2, r2, #1
 8002108:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800210a:	e007      	b.n	800211c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f042 0201 	orr.w	r2, r2, #1
 800211a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800211c:	2300      	movs	r3, #0
}
 800211e:	4618      	mov	r0, r3
 8002120:	3714      	adds	r7, #20
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop
 800212c:	40010000 	.word	0x40010000
 8002130:	40000400 	.word	0x40000400
 8002134:	40000800 	.word	0x40000800
 8002138:	40000c00 	.word	0x40000c00
 800213c:	40010400 	.word	0x40010400
 8002140:	40014000 	.word	0x40014000
 8002144:	40001800 	.word	0x40001800

08002148 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d101      	bne.n	800215a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e041      	b.n	80021de <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002160:	b2db      	uxtb	r3, r3
 8002162:	2b00      	cmp	r3, #0
 8002164:	d106      	bne.n	8002174 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2200      	movs	r2, #0
 800216a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f000 f839 	bl	80021e6 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2202      	movs	r2, #2
 8002178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	3304      	adds	r3, #4
 8002184:	4619      	mov	r1, r3
 8002186:	4610      	mov	r0, r2
 8002188:	f000 f95c 	bl	8002444 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2201      	movs	r2, #1
 8002190:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2201      	movs	r2, #1
 8002198:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2201      	movs	r2, #1
 80021a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2201      	movs	r2, #1
 80021a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2201      	movs	r2, #1
 80021b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2201      	movs	r2, #1
 80021b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2201      	movs	r2, #1
 80021c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2201      	movs	r2, #1
 80021c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2201      	movs	r2, #1
 80021d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2201      	movs	r2, #1
 80021d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80021dc:	2300      	movs	r3, #0
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3708      	adds	r7, #8
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}

080021e6 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80021e6:	b480      	push	{r7}
 80021e8:	b083      	sub	sp, #12
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80021ee:	bf00      	nop
 80021f0:	370c      	adds	r7, #12
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr
	...

080021fc <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b086      	sub	sp, #24
 8002200:	af00      	add	r7, sp, #0
 8002202:	60f8      	str	r0, [r7, #12]
 8002204:	60b9      	str	r1, [r7, #8]
 8002206:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002208:	2300      	movs	r3, #0
 800220a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002212:	2b01      	cmp	r3, #1
 8002214:	d101      	bne.n	800221a <HAL_TIM_OC_ConfigChannel+0x1e>
 8002216:	2302      	movs	r3, #2
 8002218:	e048      	b.n	80022ac <HAL_TIM_OC_ConfigChannel+0xb0>
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	2201      	movs	r2, #1
 800221e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2b0c      	cmp	r3, #12
 8002226:	d839      	bhi.n	800229c <HAL_TIM_OC_ConfigChannel+0xa0>
 8002228:	a201      	add	r2, pc, #4	; (adr r2, 8002230 <HAL_TIM_OC_ConfigChannel+0x34>)
 800222a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800222e:	bf00      	nop
 8002230:	08002265 	.word	0x08002265
 8002234:	0800229d 	.word	0x0800229d
 8002238:	0800229d 	.word	0x0800229d
 800223c:	0800229d 	.word	0x0800229d
 8002240:	08002273 	.word	0x08002273
 8002244:	0800229d 	.word	0x0800229d
 8002248:	0800229d 	.word	0x0800229d
 800224c:	0800229d 	.word	0x0800229d
 8002250:	08002281 	.word	0x08002281
 8002254:	0800229d 	.word	0x0800229d
 8002258:	0800229d 	.word	0x0800229d
 800225c:	0800229d 	.word	0x0800229d
 8002260:	0800228f 	.word	0x0800228f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	68b9      	ldr	r1, [r7, #8]
 800226a:	4618      	mov	r0, r3
 800226c:	f000 f98a 	bl	8002584 <TIM_OC1_SetConfig>
      break;
 8002270:	e017      	b.n	80022a2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	68b9      	ldr	r1, [r7, #8]
 8002278:	4618      	mov	r0, r3
 800227a:	f000 f9f3 	bl	8002664 <TIM_OC2_SetConfig>
      break;
 800227e:	e010      	b.n	80022a2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	68b9      	ldr	r1, [r7, #8]
 8002286:	4618      	mov	r0, r3
 8002288:	f000 fa62 	bl	8002750 <TIM_OC3_SetConfig>
      break;
 800228c:	e009      	b.n	80022a2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	68b9      	ldr	r1, [r7, #8]
 8002294:	4618      	mov	r0, r3
 8002296:	f000 facf 	bl	8002838 <TIM_OC4_SetConfig>
      break;
 800229a:	e002      	b.n	80022a2 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	75fb      	strb	r3, [r7, #23]
      break;
 80022a0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	2200      	movs	r2, #0
 80022a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80022aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3718      	adds	r7, #24
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}

080022b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b084      	sub	sp, #16
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80022be:	2300      	movs	r3, #0
 80022c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d101      	bne.n	80022d0 <HAL_TIM_ConfigClockSource+0x1c>
 80022cc:	2302      	movs	r3, #2
 80022ce:	e0b4      	b.n	800243a <HAL_TIM_ConfigClockSource+0x186>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2201      	movs	r2, #1
 80022d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2202      	movs	r2, #2
 80022dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80022ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80022f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	68ba      	ldr	r2, [r7, #8]
 80022fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002308:	d03e      	beq.n	8002388 <HAL_TIM_ConfigClockSource+0xd4>
 800230a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800230e:	f200 8087 	bhi.w	8002420 <HAL_TIM_ConfigClockSource+0x16c>
 8002312:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002316:	f000 8086 	beq.w	8002426 <HAL_TIM_ConfigClockSource+0x172>
 800231a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800231e:	d87f      	bhi.n	8002420 <HAL_TIM_ConfigClockSource+0x16c>
 8002320:	2b70      	cmp	r3, #112	; 0x70
 8002322:	d01a      	beq.n	800235a <HAL_TIM_ConfigClockSource+0xa6>
 8002324:	2b70      	cmp	r3, #112	; 0x70
 8002326:	d87b      	bhi.n	8002420 <HAL_TIM_ConfigClockSource+0x16c>
 8002328:	2b60      	cmp	r3, #96	; 0x60
 800232a:	d050      	beq.n	80023ce <HAL_TIM_ConfigClockSource+0x11a>
 800232c:	2b60      	cmp	r3, #96	; 0x60
 800232e:	d877      	bhi.n	8002420 <HAL_TIM_ConfigClockSource+0x16c>
 8002330:	2b50      	cmp	r3, #80	; 0x50
 8002332:	d03c      	beq.n	80023ae <HAL_TIM_ConfigClockSource+0xfa>
 8002334:	2b50      	cmp	r3, #80	; 0x50
 8002336:	d873      	bhi.n	8002420 <HAL_TIM_ConfigClockSource+0x16c>
 8002338:	2b40      	cmp	r3, #64	; 0x40
 800233a:	d058      	beq.n	80023ee <HAL_TIM_ConfigClockSource+0x13a>
 800233c:	2b40      	cmp	r3, #64	; 0x40
 800233e:	d86f      	bhi.n	8002420 <HAL_TIM_ConfigClockSource+0x16c>
 8002340:	2b30      	cmp	r3, #48	; 0x30
 8002342:	d064      	beq.n	800240e <HAL_TIM_ConfigClockSource+0x15a>
 8002344:	2b30      	cmp	r3, #48	; 0x30
 8002346:	d86b      	bhi.n	8002420 <HAL_TIM_ConfigClockSource+0x16c>
 8002348:	2b20      	cmp	r3, #32
 800234a:	d060      	beq.n	800240e <HAL_TIM_ConfigClockSource+0x15a>
 800234c:	2b20      	cmp	r3, #32
 800234e:	d867      	bhi.n	8002420 <HAL_TIM_ConfigClockSource+0x16c>
 8002350:	2b00      	cmp	r3, #0
 8002352:	d05c      	beq.n	800240e <HAL_TIM_ConfigClockSource+0x15a>
 8002354:	2b10      	cmp	r3, #16
 8002356:	d05a      	beq.n	800240e <HAL_TIM_ConfigClockSource+0x15a>
 8002358:	e062      	b.n	8002420 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6818      	ldr	r0, [r3, #0]
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	6899      	ldr	r1, [r3, #8]
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	685a      	ldr	r2, [r3, #4]
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	f000 fb35 	bl	80029d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800237c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	68ba      	ldr	r2, [r7, #8]
 8002384:	609a      	str	r2, [r3, #8]
      break;
 8002386:	e04f      	b.n	8002428 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6818      	ldr	r0, [r3, #0]
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	6899      	ldr	r1, [r3, #8]
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685a      	ldr	r2, [r3, #4]
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	f000 fb1e 	bl	80029d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	689a      	ldr	r2, [r3, #8]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80023aa:	609a      	str	r2, [r3, #8]
      break;
 80023ac:	e03c      	b.n	8002428 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6818      	ldr	r0, [r3, #0]
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	6859      	ldr	r1, [r3, #4]
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	68db      	ldr	r3, [r3, #12]
 80023ba:	461a      	mov	r2, r3
 80023bc:	f000 fa92 	bl	80028e4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	2150      	movs	r1, #80	; 0x50
 80023c6:	4618      	mov	r0, r3
 80023c8:	f000 faeb 	bl	80029a2 <TIM_ITRx_SetConfig>
      break;
 80023cc:	e02c      	b.n	8002428 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6818      	ldr	r0, [r3, #0]
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	6859      	ldr	r1, [r3, #4]
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	68db      	ldr	r3, [r3, #12]
 80023da:	461a      	mov	r2, r3
 80023dc:	f000 fab1 	bl	8002942 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	2160      	movs	r1, #96	; 0x60
 80023e6:	4618      	mov	r0, r3
 80023e8:	f000 fadb 	bl	80029a2 <TIM_ITRx_SetConfig>
      break;
 80023ec:	e01c      	b.n	8002428 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6818      	ldr	r0, [r3, #0]
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	6859      	ldr	r1, [r3, #4]
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	68db      	ldr	r3, [r3, #12]
 80023fa:	461a      	mov	r2, r3
 80023fc:	f000 fa72 	bl	80028e4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	2140      	movs	r1, #64	; 0x40
 8002406:	4618      	mov	r0, r3
 8002408:	f000 facb 	bl	80029a2 <TIM_ITRx_SetConfig>
      break;
 800240c:	e00c      	b.n	8002428 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4619      	mov	r1, r3
 8002418:	4610      	mov	r0, r2
 800241a:	f000 fac2 	bl	80029a2 <TIM_ITRx_SetConfig>
      break;
 800241e:	e003      	b.n	8002428 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	73fb      	strb	r3, [r7, #15]
      break;
 8002424:	e000      	b.n	8002428 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002426:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2201      	movs	r2, #1
 800242c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2200      	movs	r2, #0
 8002434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002438:	7bfb      	ldrb	r3, [r7, #15]
}
 800243a:	4618      	mov	r0, r3
 800243c:	3710      	adds	r7, #16
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
	...

08002444 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002444:	b480      	push	{r7}
 8002446:	b085      	sub	sp, #20
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	4a40      	ldr	r2, [pc, #256]	; (8002558 <TIM_Base_SetConfig+0x114>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d013      	beq.n	8002484 <TIM_Base_SetConfig+0x40>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002462:	d00f      	beq.n	8002484 <TIM_Base_SetConfig+0x40>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	4a3d      	ldr	r2, [pc, #244]	; (800255c <TIM_Base_SetConfig+0x118>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d00b      	beq.n	8002484 <TIM_Base_SetConfig+0x40>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	4a3c      	ldr	r2, [pc, #240]	; (8002560 <TIM_Base_SetConfig+0x11c>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d007      	beq.n	8002484 <TIM_Base_SetConfig+0x40>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	4a3b      	ldr	r2, [pc, #236]	; (8002564 <TIM_Base_SetConfig+0x120>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d003      	beq.n	8002484 <TIM_Base_SetConfig+0x40>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	4a3a      	ldr	r2, [pc, #232]	; (8002568 <TIM_Base_SetConfig+0x124>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d108      	bne.n	8002496 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800248a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	68fa      	ldr	r2, [r7, #12]
 8002492:	4313      	orrs	r3, r2
 8002494:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4a2f      	ldr	r2, [pc, #188]	; (8002558 <TIM_Base_SetConfig+0x114>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d02b      	beq.n	80024f6 <TIM_Base_SetConfig+0xb2>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024a4:	d027      	beq.n	80024f6 <TIM_Base_SetConfig+0xb2>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4a2c      	ldr	r2, [pc, #176]	; (800255c <TIM_Base_SetConfig+0x118>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d023      	beq.n	80024f6 <TIM_Base_SetConfig+0xb2>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4a2b      	ldr	r2, [pc, #172]	; (8002560 <TIM_Base_SetConfig+0x11c>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d01f      	beq.n	80024f6 <TIM_Base_SetConfig+0xb2>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4a2a      	ldr	r2, [pc, #168]	; (8002564 <TIM_Base_SetConfig+0x120>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d01b      	beq.n	80024f6 <TIM_Base_SetConfig+0xb2>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4a29      	ldr	r2, [pc, #164]	; (8002568 <TIM_Base_SetConfig+0x124>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d017      	beq.n	80024f6 <TIM_Base_SetConfig+0xb2>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4a28      	ldr	r2, [pc, #160]	; (800256c <TIM_Base_SetConfig+0x128>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d013      	beq.n	80024f6 <TIM_Base_SetConfig+0xb2>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4a27      	ldr	r2, [pc, #156]	; (8002570 <TIM_Base_SetConfig+0x12c>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d00f      	beq.n	80024f6 <TIM_Base_SetConfig+0xb2>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4a26      	ldr	r2, [pc, #152]	; (8002574 <TIM_Base_SetConfig+0x130>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d00b      	beq.n	80024f6 <TIM_Base_SetConfig+0xb2>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4a25      	ldr	r2, [pc, #148]	; (8002578 <TIM_Base_SetConfig+0x134>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d007      	beq.n	80024f6 <TIM_Base_SetConfig+0xb2>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4a24      	ldr	r2, [pc, #144]	; (800257c <TIM_Base_SetConfig+0x138>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d003      	beq.n	80024f6 <TIM_Base_SetConfig+0xb2>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	4a23      	ldr	r2, [pc, #140]	; (8002580 <TIM_Base_SetConfig+0x13c>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d108      	bne.n	8002508 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	68fa      	ldr	r2, [r7, #12]
 8002504:	4313      	orrs	r3, r2
 8002506:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	695b      	ldr	r3, [r3, #20]
 8002512:	4313      	orrs	r3, r2
 8002514:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	68fa      	ldr	r2, [r7, #12]
 800251a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	689a      	ldr	r2, [r3, #8]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	4a0a      	ldr	r2, [pc, #40]	; (8002558 <TIM_Base_SetConfig+0x114>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d003      	beq.n	800253c <TIM_Base_SetConfig+0xf8>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	4a0c      	ldr	r2, [pc, #48]	; (8002568 <TIM_Base_SetConfig+0x124>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d103      	bne.n	8002544 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	691a      	ldr	r2, [r3, #16]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2201      	movs	r2, #1
 8002548:	615a      	str	r2, [r3, #20]
}
 800254a:	bf00      	nop
 800254c:	3714      	adds	r7, #20
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop
 8002558:	40010000 	.word	0x40010000
 800255c:	40000400 	.word	0x40000400
 8002560:	40000800 	.word	0x40000800
 8002564:	40000c00 	.word	0x40000c00
 8002568:	40010400 	.word	0x40010400
 800256c:	40014000 	.word	0x40014000
 8002570:	40014400 	.word	0x40014400
 8002574:	40014800 	.word	0x40014800
 8002578:	40001800 	.word	0x40001800
 800257c:	40001c00 	.word	0x40001c00
 8002580:	40002000 	.word	0x40002000

08002584 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002584:	b480      	push	{r7}
 8002586:	b087      	sub	sp, #28
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6a1b      	ldr	r3, [r3, #32]
 8002592:	f023 0201 	bic.w	r2, r3, #1
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6a1b      	ldr	r3, [r3, #32]
 800259e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	699b      	ldr	r3, [r3, #24]
 80025aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	f023 0303 	bic.w	r3, r3, #3
 80025ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	68fa      	ldr	r2, [r7, #12]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	f023 0302 	bic.w	r3, r3, #2
 80025cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	697a      	ldr	r2, [r7, #20]
 80025d4:	4313      	orrs	r3, r2
 80025d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	4a20      	ldr	r2, [pc, #128]	; (800265c <TIM_OC1_SetConfig+0xd8>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d003      	beq.n	80025e8 <TIM_OC1_SetConfig+0x64>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	4a1f      	ldr	r2, [pc, #124]	; (8002660 <TIM_OC1_SetConfig+0xdc>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d10c      	bne.n	8002602 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	f023 0308 	bic.w	r3, r3, #8
 80025ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	697a      	ldr	r2, [r7, #20]
 80025f6:	4313      	orrs	r3, r2
 80025f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	f023 0304 	bic.w	r3, r3, #4
 8002600:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4a15      	ldr	r2, [pc, #84]	; (800265c <TIM_OC1_SetConfig+0xd8>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d003      	beq.n	8002612 <TIM_OC1_SetConfig+0x8e>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4a14      	ldr	r2, [pc, #80]	; (8002660 <TIM_OC1_SetConfig+0xdc>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d111      	bne.n	8002636 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002618:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002620:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	695b      	ldr	r3, [r3, #20]
 8002626:	693a      	ldr	r2, [r7, #16]
 8002628:	4313      	orrs	r3, r2
 800262a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	699b      	ldr	r3, [r3, #24]
 8002630:	693a      	ldr	r2, [r7, #16]
 8002632:	4313      	orrs	r3, r2
 8002634:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	693a      	ldr	r2, [r7, #16]
 800263a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	68fa      	ldr	r2, [r7, #12]
 8002640:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	685a      	ldr	r2, [r3, #4]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	697a      	ldr	r2, [r7, #20]
 800264e:	621a      	str	r2, [r3, #32]
}
 8002650:	bf00      	nop
 8002652:	371c      	adds	r7, #28
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr
 800265c:	40010000 	.word	0x40010000
 8002660:	40010400 	.word	0x40010400

08002664 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002664:	b480      	push	{r7}
 8002666:	b087      	sub	sp, #28
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6a1b      	ldr	r3, [r3, #32]
 8002672:	f023 0210 	bic.w	r2, r3, #16
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6a1b      	ldr	r3, [r3, #32]
 800267e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	699b      	ldr	r3, [r3, #24]
 800268a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002692:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800269a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	021b      	lsls	r3, r3, #8
 80026a2:	68fa      	ldr	r2, [r7, #12]
 80026a4:	4313      	orrs	r3, r2
 80026a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	f023 0320 	bic.w	r3, r3, #32
 80026ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	011b      	lsls	r3, r3, #4
 80026b6:	697a      	ldr	r2, [r7, #20]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	4a22      	ldr	r2, [pc, #136]	; (8002748 <TIM_OC2_SetConfig+0xe4>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d003      	beq.n	80026cc <TIM_OC2_SetConfig+0x68>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	4a21      	ldr	r2, [pc, #132]	; (800274c <TIM_OC2_SetConfig+0xe8>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d10d      	bne.n	80026e8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80026d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	011b      	lsls	r3, r3, #4
 80026da:	697a      	ldr	r2, [r7, #20]
 80026dc:	4313      	orrs	r3, r2
 80026de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80026e6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	4a17      	ldr	r2, [pc, #92]	; (8002748 <TIM_OC2_SetConfig+0xe4>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d003      	beq.n	80026f8 <TIM_OC2_SetConfig+0x94>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	4a16      	ldr	r2, [pc, #88]	; (800274c <TIM_OC2_SetConfig+0xe8>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d113      	bne.n	8002720 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80026fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002706:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	695b      	ldr	r3, [r3, #20]
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	693a      	ldr	r2, [r7, #16]
 8002710:	4313      	orrs	r3, r2
 8002712:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	699b      	ldr	r3, [r3, #24]
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	693a      	ldr	r2, [r7, #16]
 800271c:	4313      	orrs	r3, r2
 800271e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	693a      	ldr	r2, [r7, #16]
 8002724:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	68fa      	ldr	r2, [r7, #12]
 800272a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	685a      	ldr	r2, [r3, #4]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	697a      	ldr	r2, [r7, #20]
 8002738:	621a      	str	r2, [r3, #32]
}
 800273a:	bf00      	nop
 800273c:	371c      	adds	r7, #28
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr
 8002746:	bf00      	nop
 8002748:	40010000 	.word	0x40010000
 800274c:	40010400 	.word	0x40010400

08002750 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002750:	b480      	push	{r7}
 8002752:	b087      	sub	sp, #28
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6a1b      	ldr	r3, [r3, #32]
 800275e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6a1b      	ldr	r3, [r3, #32]
 800276a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	69db      	ldr	r3, [r3, #28]
 8002776:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800277e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f023 0303 	bic.w	r3, r3, #3
 8002786:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	68fa      	ldr	r2, [r7, #12]
 800278e:	4313      	orrs	r3, r2
 8002790:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002798:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	021b      	lsls	r3, r3, #8
 80027a0:	697a      	ldr	r2, [r7, #20]
 80027a2:	4313      	orrs	r3, r2
 80027a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4a21      	ldr	r2, [pc, #132]	; (8002830 <TIM_OC3_SetConfig+0xe0>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d003      	beq.n	80027b6 <TIM_OC3_SetConfig+0x66>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4a20      	ldr	r2, [pc, #128]	; (8002834 <TIM_OC3_SetConfig+0xe4>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d10d      	bne.n	80027d2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80027bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	68db      	ldr	r3, [r3, #12]
 80027c2:	021b      	lsls	r3, r3, #8
 80027c4:	697a      	ldr	r2, [r7, #20]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80027d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4a16      	ldr	r2, [pc, #88]	; (8002830 <TIM_OC3_SetConfig+0xe0>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d003      	beq.n	80027e2 <TIM_OC3_SetConfig+0x92>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	4a15      	ldr	r2, [pc, #84]	; (8002834 <TIM_OC3_SetConfig+0xe4>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d113      	bne.n	800280a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80027e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80027f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	695b      	ldr	r3, [r3, #20]
 80027f6:	011b      	lsls	r3, r3, #4
 80027f8:	693a      	ldr	r2, [r7, #16]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	699b      	ldr	r3, [r3, #24]
 8002802:	011b      	lsls	r3, r3, #4
 8002804:	693a      	ldr	r2, [r7, #16]
 8002806:	4313      	orrs	r3, r2
 8002808:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	693a      	ldr	r2, [r7, #16]
 800280e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	68fa      	ldr	r2, [r7, #12]
 8002814:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	685a      	ldr	r2, [r3, #4]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	697a      	ldr	r2, [r7, #20]
 8002822:	621a      	str	r2, [r3, #32]
}
 8002824:	bf00      	nop
 8002826:	371c      	adds	r7, #28
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr
 8002830:	40010000 	.word	0x40010000
 8002834:	40010400 	.word	0x40010400

08002838 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002838:	b480      	push	{r7}
 800283a:	b087      	sub	sp, #28
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6a1b      	ldr	r3, [r3, #32]
 8002846:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6a1b      	ldr	r3, [r3, #32]
 8002852:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	69db      	ldr	r3, [r3, #28]
 800285e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002866:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800286e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	021b      	lsls	r3, r3, #8
 8002876:	68fa      	ldr	r2, [r7, #12]
 8002878:	4313      	orrs	r3, r2
 800287a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002882:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	031b      	lsls	r3, r3, #12
 800288a:	693a      	ldr	r2, [r7, #16]
 800288c:	4313      	orrs	r3, r2
 800288e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	4a12      	ldr	r2, [pc, #72]	; (80028dc <TIM_OC4_SetConfig+0xa4>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d003      	beq.n	80028a0 <TIM_OC4_SetConfig+0x68>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	4a11      	ldr	r2, [pc, #68]	; (80028e0 <TIM_OC4_SetConfig+0xa8>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d109      	bne.n	80028b4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80028a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	695b      	ldr	r3, [r3, #20]
 80028ac:	019b      	lsls	r3, r3, #6
 80028ae:	697a      	ldr	r2, [r7, #20]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	697a      	ldr	r2, [r7, #20]
 80028b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	68fa      	ldr	r2, [r7, #12]
 80028be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	685a      	ldr	r2, [r3, #4]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	693a      	ldr	r2, [r7, #16]
 80028cc:	621a      	str	r2, [r3, #32]
}
 80028ce:	bf00      	nop
 80028d0:	371c      	adds	r7, #28
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr
 80028da:	bf00      	nop
 80028dc:	40010000 	.word	0x40010000
 80028e0:	40010400 	.word	0x40010400

080028e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b087      	sub	sp, #28
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	60f8      	str	r0, [r7, #12]
 80028ec:	60b9      	str	r1, [r7, #8]
 80028ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	6a1b      	ldr	r3, [r3, #32]
 80028f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	6a1b      	ldr	r3, [r3, #32]
 80028fa:	f023 0201 	bic.w	r2, r3, #1
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	699b      	ldr	r3, [r3, #24]
 8002906:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800290e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	011b      	lsls	r3, r3, #4
 8002914:	693a      	ldr	r2, [r7, #16]
 8002916:	4313      	orrs	r3, r2
 8002918:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	f023 030a 	bic.w	r3, r3, #10
 8002920:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002922:	697a      	ldr	r2, [r7, #20]
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	4313      	orrs	r3, r2
 8002928:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	693a      	ldr	r2, [r7, #16]
 800292e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	697a      	ldr	r2, [r7, #20]
 8002934:	621a      	str	r2, [r3, #32]
}
 8002936:	bf00      	nop
 8002938:	371c      	adds	r7, #28
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr

08002942 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002942:	b480      	push	{r7}
 8002944:	b087      	sub	sp, #28
 8002946:	af00      	add	r7, sp, #0
 8002948:	60f8      	str	r0, [r7, #12]
 800294a:	60b9      	str	r1, [r7, #8]
 800294c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	6a1b      	ldr	r3, [r3, #32]
 8002952:	f023 0210 	bic.w	r2, r3, #16
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	699b      	ldr	r3, [r3, #24]
 800295e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	6a1b      	ldr	r3, [r3, #32]
 8002964:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800296c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	031b      	lsls	r3, r3, #12
 8002972:	697a      	ldr	r2, [r7, #20]
 8002974:	4313      	orrs	r3, r2
 8002976:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800297e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	011b      	lsls	r3, r3, #4
 8002984:	693a      	ldr	r2, [r7, #16]
 8002986:	4313      	orrs	r3, r2
 8002988:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	697a      	ldr	r2, [r7, #20]
 800298e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	693a      	ldr	r2, [r7, #16]
 8002994:	621a      	str	r2, [r3, #32]
}
 8002996:	bf00      	nop
 8002998:	371c      	adds	r7, #28
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr

080029a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80029a2:	b480      	push	{r7}
 80029a4:	b085      	sub	sp, #20
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	6078      	str	r0, [r7, #4]
 80029aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80029ba:	683a      	ldr	r2, [r7, #0]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	4313      	orrs	r3, r2
 80029c0:	f043 0307 	orr.w	r3, r3, #7
 80029c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	68fa      	ldr	r2, [r7, #12]
 80029ca:	609a      	str	r2, [r3, #8]
}
 80029cc:	bf00      	nop
 80029ce:	3714      	adds	r7, #20
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr

080029d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80029d8:	b480      	push	{r7}
 80029da:	b087      	sub	sp, #28
 80029dc:	af00      	add	r7, sp, #0
 80029de:	60f8      	str	r0, [r7, #12]
 80029e0:	60b9      	str	r1, [r7, #8]
 80029e2:	607a      	str	r2, [r7, #4]
 80029e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80029f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	021a      	lsls	r2, r3, #8
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	431a      	orrs	r2, r3
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	4313      	orrs	r3, r2
 8002a00:	697a      	ldr	r2, [r7, #20]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	697a      	ldr	r2, [r7, #20]
 8002a0a:	609a      	str	r2, [r3, #8]
}
 8002a0c:	bf00      	nop
 8002a0e:	371c      	adds	r7, #28
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr

08002a18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b085      	sub	sp, #20
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d101      	bne.n	8002a30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a2c:	2302      	movs	r3, #2
 8002a2e:	e05a      	b.n	8002ae6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2201      	movs	r2, #1
 8002a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2202      	movs	r2, #2
 8002a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a56:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	68fa      	ldr	r2, [r7, #12]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	68fa      	ldr	r2, [r7, #12]
 8002a68:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a21      	ldr	r2, [pc, #132]	; (8002af4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d022      	beq.n	8002aba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a7c:	d01d      	beq.n	8002aba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a1d      	ldr	r2, [pc, #116]	; (8002af8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d018      	beq.n	8002aba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a1b      	ldr	r2, [pc, #108]	; (8002afc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d013      	beq.n	8002aba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a1a      	ldr	r2, [pc, #104]	; (8002b00 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d00e      	beq.n	8002aba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a18      	ldr	r2, [pc, #96]	; (8002b04 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d009      	beq.n	8002aba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a17      	ldr	r2, [pc, #92]	; (8002b08 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d004      	beq.n	8002aba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a15      	ldr	r2, [pc, #84]	; (8002b0c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d10c      	bne.n	8002ad4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ac0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	68ba      	ldr	r2, [r7, #8]
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	68ba      	ldr	r2, [r7, #8]
 8002ad2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3714      	adds	r7, #20
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr
 8002af2:	bf00      	nop
 8002af4:	40010000 	.word	0x40010000
 8002af8:	40000400 	.word	0x40000400
 8002afc:	40000800 	.word	0x40000800
 8002b00:	40000c00 	.word	0x40000c00
 8002b04:	40010400 	.word	0x40010400
 8002b08:	40014000 	.word	0x40014000
 8002b0c:	40001800 	.word	0x40001800

08002b10 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b082      	sub	sp, #8
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d101      	bne.n	8002b22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e03f      	b.n	8002ba2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d106      	bne.n	8002b3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2200      	movs	r2, #0
 8002b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f7fe f96e 	bl	8000e18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2224      	movs	r2, #36	; 0x24
 8002b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	68da      	ldr	r2, [r3, #12]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b52:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f000 f929 	bl	8002dac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	691a      	ldr	r2, [r3, #16]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	695a      	ldr	r2, [r3, #20]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b78:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	68da      	ldr	r2, [r3, #12]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b88:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2220      	movs	r2, #32
 8002b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2220      	movs	r2, #32
 8002b9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ba0:	2300      	movs	r3, #0
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3708      	adds	r7, #8
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}

08002baa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002baa:	b580      	push	{r7, lr}
 8002bac:	b08a      	sub	sp, #40	; 0x28
 8002bae:	af02      	add	r7, sp, #8
 8002bb0:	60f8      	str	r0, [r7, #12]
 8002bb2:	60b9      	str	r1, [r7, #8]
 8002bb4:	603b      	str	r3, [r7, #0]
 8002bb6:	4613      	mov	r3, r2
 8002bb8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	2b20      	cmp	r3, #32
 8002bc8:	d17c      	bne.n	8002cc4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d002      	beq.n	8002bd6 <HAL_UART_Transmit+0x2c>
 8002bd0:	88fb      	ldrh	r3, [r7, #6]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d101      	bne.n	8002bda <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e075      	b.n	8002cc6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d101      	bne.n	8002be8 <HAL_UART_Transmit+0x3e>
 8002be4:	2302      	movs	r3, #2
 8002be6:	e06e      	b.n	8002cc6 <HAL_UART_Transmit+0x11c>
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2201      	movs	r2, #1
 8002bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2221      	movs	r2, #33	; 0x21
 8002bfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002bfe:	f7fe f9e3 	bl	8000fc8 <HAL_GetTick>
 8002c02:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	88fa      	ldrh	r2, [r7, #6]
 8002c08:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	88fa      	ldrh	r2, [r7, #6]
 8002c0e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c18:	d108      	bne.n	8002c2c <HAL_UART_Transmit+0x82>
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	691b      	ldr	r3, [r3, #16]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d104      	bne.n	8002c2c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002c22:	2300      	movs	r3, #0
 8002c24:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	61bb      	str	r3, [r7, #24]
 8002c2a:	e003      	b.n	8002c34 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c30:	2300      	movs	r3, #0
 8002c32:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2200      	movs	r2, #0
 8002c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002c3c:	e02a      	b.n	8002c94 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	9300      	str	r3, [sp, #0]
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	2200      	movs	r2, #0
 8002c46:	2180      	movs	r1, #128	; 0x80
 8002c48:	68f8      	ldr	r0, [r7, #12]
 8002c4a:	f000 f840 	bl	8002cce <UART_WaitOnFlagUntilTimeout>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d001      	beq.n	8002c58 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002c54:	2303      	movs	r3, #3
 8002c56:	e036      	b.n	8002cc6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d10b      	bne.n	8002c76 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002c5e:	69bb      	ldr	r3, [r7, #24]
 8002c60:	881b      	ldrh	r3, [r3, #0]
 8002c62:	461a      	mov	r2, r3
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c6c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002c6e:	69bb      	ldr	r3, [r7, #24]
 8002c70:	3302      	adds	r3, #2
 8002c72:	61bb      	str	r3, [r7, #24]
 8002c74:	e007      	b.n	8002c86 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	781a      	ldrb	r2, [r3, #0]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	3301      	adds	r3, #1
 8002c84:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002c8a:	b29b      	uxth	r3, r3
 8002c8c:	3b01      	subs	r3, #1
 8002c8e:	b29a      	uxth	r2, r3
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002c98:	b29b      	uxth	r3, r3
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d1cf      	bne.n	8002c3e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	9300      	str	r3, [sp, #0]
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	2140      	movs	r1, #64	; 0x40
 8002ca8:	68f8      	ldr	r0, [r7, #12]
 8002caa:	f000 f810 	bl	8002cce <UART_WaitOnFlagUntilTimeout>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d001      	beq.n	8002cb8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002cb4:	2303      	movs	r3, #3
 8002cb6:	e006      	b.n	8002cc6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2220      	movs	r2, #32
 8002cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	e000      	b.n	8002cc6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002cc4:	2302      	movs	r3, #2
  }
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3720      	adds	r7, #32
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}

08002cce <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002cce:	b580      	push	{r7, lr}
 8002cd0:	b090      	sub	sp, #64	; 0x40
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	60f8      	str	r0, [r7, #12]
 8002cd6:	60b9      	str	r1, [r7, #8]
 8002cd8:	603b      	str	r3, [r7, #0]
 8002cda:	4613      	mov	r3, r2
 8002cdc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cde:	e050      	b.n	8002d82 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ce0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ce6:	d04c      	beq.n	8002d82 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002ce8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d007      	beq.n	8002cfe <UART_WaitOnFlagUntilTimeout+0x30>
 8002cee:	f7fe f96b 	bl	8000fc8 <HAL_GetTick>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d241      	bcs.n	8002d82 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	330c      	adds	r3, #12
 8002d04:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d08:	e853 3f00 	ldrex	r3, [r3]
 8002d0c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d10:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002d14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	330c      	adds	r3, #12
 8002d1c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002d1e:	637a      	str	r2, [r7, #52]	; 0x34
 8002d20:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d22:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002d24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d26:	e841 2300 	strex	r3, r2, [r1]
 8002d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d1e5      	bne.n	8002cfe <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	3314      	adds	r3, #20
 8002d38:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	e853 3f00 	ldrex	r3, [r3]
 8002d40:	613b      	str	r3, [r7, #16]
   return(result);
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	f023 0301 	bic.w	r3, r3, #1
 8002d48:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	3314      	adds	r3, #20
 8002d50:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d52:	623a      	str	r2, [r7, #32]
 8002d54:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d56:	69f9      	ldr	r1, [r7, #28]
 8002d58:	6a3a      	ldr	r2, [r7, #32]
 8002d5a:	e841 2300 	strex	r3, r2, [r1]
 8002d5e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002d60:	69bb      	ldr	r3, [r7, #24]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d1e5      	bne.n	8002d32 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2220      	movs	r2, #32
 8002d6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2220      	movs	r2, #32
 8002d72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e00f      	b.n	8002da2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	68ba      	ldr	r2, [r7, #8]
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	bf0c      	ite	eq
 8002d92:	2301      	moveq	r3, #1
 8002d94:	2300      	movne	r3, #0
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	461a      	mov	r2, r3
 8002d9a:	79fb      	ldrb	r3, [r7, #7]
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d09f      	beq.n	8002ce0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002da0:	2300      	movs	r3, #0
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3740      	adds	r7, #64	; 0x40
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
	...

08002dac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002dac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002db0:	b0c0      	sub	sp, #256	; 0x100
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	691b      	ldr	r3, [r3, #16]
 8002dc0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dc8:	68d9      	ldr	r1, [r3, #12]
 8002dca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	ea40 0301 	orr.w	r3, r0, r1
 8002dd4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002dd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dda:	689a      	ldr	r2, [r3, #8]
 8002ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002de0:	691b      	ldr	r3, [r3, #16]
 8002de2:	431a      	orrs	r2, r3
 8002de4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002de8:	695b      	ldr	r3, [r3, #20]
 8002dea:	431a      	orrs	r2, r3
 8002dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002df0:	69db      	ldr	r3, [r3, #28]
 8002df2:	4313      	orrs	r3, r2
 8002df4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002e04:	f021 010c 	bic.w	r1, r1, #12
 8002e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002e12:	430b      	orrs	r3, r1
 8002e14:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	695b      	ldr	r3, [r3, #20]
 8002e1e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002e22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e26:	6999      	ldr	r1, [r3, #24]
 8002e28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	ea40 0301 	orr.w	r3, r0, r1
 8002e32:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	4b8f      	ldr	r3, [pc, #572]	; (8003078 <UART_SetConfig+0x2cc>)
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d005      	beq.n	8002e4c <UART_SetConfig+0xa0>
 8002e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	4b8d      	ldr	r3, [pc, #564]	; (800307c <UART_SetConfig+0x2d0>)
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d104      	bne.n	8002e56 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002e4c:	f7ff f8b0 	bl	8001fb0 <HAL_RCC_GetPCLK2Freq>
 8002e50:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002e54:	e003      	b.n	8002e5e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002e56:	f7ff f897 	bl	8001f88 <HAL_RCC_GetPCLK1Freq>
 8002e5a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e62:	69db      	ldr	r3, [r3, #28]
 8002e64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e68:	f040 810c 	bne.w	8003084 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002e6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e70:	2200      	movs	r2, #0
 8002e72:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002e76:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002e7a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002e7e:	4622      	mov	r2, r4
 8002e80:	462b      	mov	r3, r5
 8002e82:	1891      	adds	r1, r2, r2
 8002e84:	65b9      	str	r1, [r7, #88]	; 0x58
 8002e86:	415b      	adcs	r3, r3
 8002e88:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002e8a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002e8e:	4621      	mov	r1, r4
 8002e90:	eb12 0801 	adds.w	r8, r2, r1
 8002e94:	4629      	mov	r1, r5
 8002e96:	eb43 0901 	adc.w	r9, r3, r1
 8002e9a:	f04f 0200 	mov.w	r2, #0
 8002e9e:	f04f 0300 	mov.w	r3, #0
 8002ea2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ea6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002eaa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002eae:	4690      	mov	r8, r2
 8002eb0:	4699      	mov	r9, r3
 8002eb2:	4623      	mov	r3, r4
 8002eb4:	eb18 0303 	adds.w	r3, r8, r3
 8002eb8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002ebc:	462b      	mov	r3, r5
 8002ebe:	eb49 0303 	adc.w	r3, r9, r3
 8002ec2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002ec6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002ed2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002ed6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002eda:	460b      	mov	r3, r1
 8002edc:	18db      	adds	r3, r3, r3
 8002ede:	653b      	str	r3, [r7, #80]	; 0x50
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	eb42 0303 	adc.w	r3, r2, r3
 8002ee6:	657b      	str	r3, [r7, #84]	; 0x54
 8002ee8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002eec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002ef0:	f7fd f9ce 	bl	8000290 <__aeabi_uldivmod>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	460b      	mov	r3, r1
 8002ef8:	4b61      	ldr	r3, [pc, #388]	; (8003080 <UART_SetConfig+0x2d4>)
 8002efa:	fba3 2302 	umull	r2, r3, r3, r2
 8002efe:	095b      	lsrs	r3, r3, #5
 8002f00:	011c      	lsls	r4, r3, #4
 8002f02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f06:	2200      	movs	r2, #0
 8002f08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002f0c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002f10:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002f14:	4642      	mov	r2, r8
 8002f16:	464b      	mov	r3, r9
 8002f18:	1891      	adds	r1, r2, r2
 8002f1a:	64b9      	str	r1, [r7, #72]	; 0x48
 8002f1c:	415b      	adcs	r3, r3
 8002f1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f20:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002f24:	4641      	mov	r1, r8
 8002f26:	eb12 0a01 	adds.w	sl, r2, r1
 8002f2a:	4649      	mov	r1, r9
 8002f2c:	eb43 0b01 	adc.w	fp, r3, r1
 8002f30:	f04f 0200 	mov.w	r2, #0
 8002f34:	f04f 0300 	mov.w	r3, #0
 8002f38:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002f3c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002f40:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f44:	4692      	mov	sl, r2
 8002f46:	469b      	mov	fp, r3
 8002f48:	4643      	mov	r3, r8
 8002f4a:	eb1a 0303 	adds.w	r3, sl, r3
 8002f4e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002f52:	464b      	mov	r3, r9
 8002f54:	eb4b 0303 	adc.w	r3, fp, r3
 8002f58:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002f5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	2200      	movs	r2, #0
 8002f64:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002f68:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002f6c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002f70:	460b      	mov	r3, r1
 8002f72:	18db      	adds	r3, r3, r3
 8002f74:	643b      	str	r3, [r7, #64]	; 0x40
 8002f76:	4613      	mov	r3, r2
 8002f78:	eb42 0303 	adc.w	r3, r2, r3
 8002f7c:	647b      	str	r3, [r7, #68]	; 0x44
 8002f7e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002f82:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002f86:	f7fd f983 	bl	8000290 <__aeabi_uldivmod>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	460b      	mov	r3, r1
 8002f8e:	4611      	mov	r1, r2
 8002f90:	4b3b      	ldr	r3, [pc, #236]	; (8003080 <UART_SetConfig+0x2d4>)
 8002f92:	fba3 2301 	umull	r2, r3, r3, r1
 8002f96:	095b      	lsrs	r3, r3, #5
 8002f98:	2264      	movs	r2, #100	; 0x64
 8002f9a:	fb02 f303 	mul.w	r3, r2, r3
 8002f9e:	1acb      	subs	r3, r1, r3
 8002fa0:	00db      	lsls	r3, r3, #3
 8002fa2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002fa6:	4b36      	ldr	r3, [pc, #216]	; (8003080 <UART_SetConfig+0x2d4>)
 8002fa8:	fba3 2302 	umull	r2, r3, r3, r2
 8002fac:	095b      	lsrs	r3, r3, #5
 8002fae:	005b      	lsls	r3, r3, #1
 8002fb0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002fb4:	441c      	add	r4, r3
 8002fb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002fc0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002fc4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002fc8:	4642      	mov	r2, r8
 8002fca:	464b      	mov	r3, r9
 8002fcc:	1891      	adds	r1, r2, r2
 8002fce:	63b9      	str	r1, [r7, #56]	; 0x38
 8002fd0:	415b      	adcs	r3, r3
 8002fd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fd4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002fd8:	4641      	mov	r1, r8
 8002fda:	1851      	adds	r1, r2, r1
 8002fdc:	6339      	str	r1, [r7, #48]	; 0x30
 8002fde:	4649      	mov	r1, r9
 8002fe0:	414b      	adcs	r3, r1
 8002fe2:	637b      	str	r3, [r7, #52]	; 0x34
 8002fe4:	f04f 0200 	mov.w	r2, #0
 8002fe8:	f04f 0300 	mov.w	r3, #0
 8002fec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002ff0:	4659      	mov	r1, fp
 8002ff2:	00cb      	lsls	r3, r1, #3
 8002ff4:	4651      	mov	r1, sl
 8002ff6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ffa:	4651      	mov	r1, sl
 8002ffc:	00ca      	lsls	r2, r1, #3
 8002ffe:	4610      	mov	r0, r2
 8003000:	4619      	mov	r1, r3
 8003002:	4603      	mov	r3, r0
 8003004:	4642      	mov	r2, r8
 8003006:	189b      	adds	r3, r3, r2
 8003008:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800300c:	464b      	mov	r3, r9
 800300e:	460a      	mov	r2, r1
 8003010:	eb42 0303 	adc.w	r3, r2, r3
 8003014:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	2200      	movs	r2, #0
 8003020:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003024:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003028:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800302c:	460b      	mov	r3, r1
 800302e:	18db      	adds	r3, r3, r3
 8003030:	62bb      	str	r3, [r7, #40]	; 0x28
 8003032:	4613      	mov	r3, r2
 8003034:	eb42 0303 	adc.w	r3, r2, r3
 8003038:	62fb      	str	r3, [r7, #44]	; 0x2c
 800303a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800303e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003042:	f7fd f925 	bl	8000290 <__aeabi_uldivmod>
 8003046:	4602      	mov	r2, r0
 8003048:	460b      	mov	r3, r1
 800304a:	4b0d      	ldr	r3, [pc, #52]	; (8003080 <UART_SetConfig+0x2d4>)
 800304c:	fba3 1302 	umull	r1, r3, r3, r2
 8003050:	095b      	lsrs	r3, r3, #5
 8003052:	2164      	movs	r1, #100	; 0x64
 8003054:	fb01 f303 	mul.w	r3, r1, r3
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	00db      	lsls	r3, r3, #3
 800305c:	3332      	adds	r3, #50	; 0x32
 800305e:	4a08      	ldr	r2, [pc, #32]	; (8003080 <UART_SetConfig+0x2d4>)
 8003060:	fba2 2303 	umull	r2, r3, r2, r3
 8003064:	095b      	lsrs	r3, r3, #5
 8003066:	f003 0207 	and.w	r2, r3, #7
 800306a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4422      	add	r2, r4
 8003072:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003074:	e105      	b.n	8003282 <UART_SetConfig+0x4d6>
 8003076:	bf00      	nop
 8003078:	40011000 	.word	0x40011000
 800307c:	40011400 	.word	0x40011400
 8003080:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003084:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003088:	2200      	movs	r2, #0
 800308a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800308e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003092:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003096:	4642      	mov	r2, r8
 8003098:	464b      	mov	r3, r9
 800309a:	1891      	adds	r1, r2, r2
 800309c:	6239      	str	r1, [r7, #32]
 800309e:	415b      	adcs	r3, r3
 80030a0:	627b      	str	r3, [r7, #36]	; 0x24
 80030a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80030a6:	4641      	mov	r1, r8
 80030a8:	1854      	adds	r4, r2, r1
 80030aa:	4649      	mov	r1, r9
 80030ac:	eb43 0501 	adc.w	r5, r3, r1
 80030b0:	f04f 0200 	mov.w	r2, #0
 80030b4:	f04f 0300 	mov.w	r3, #0
 80030b8:	00eb      	lsls	r3, r5, #3
 80030ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030be:	00e2      	lsls	r2, r4, #3
 80030c0:	4614      	mov	r4, r2
 80030c2:	461d      	mov	r5, r3
 80030c4:	4643      	mov	r3, r8
 80030c6:	18e3      	adds	r3, r4, r3
 80030c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80030cc:	464b      	mov	r3, r9
 80030ce:	eb45 0303 	adc.w	r3, r5, r3
 80030d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80030d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	2200      	movs	r2, #0
 80030de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80030e2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80030e6:	f04f 0200 	mov.w	r2, #0
 80030ea:	f04f 0300 	mov.w	r3, #0
 80030ee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80030f2:	4629      	mov	r1, r5
 80030f4:	008b      	lsls	r3, r1, #2
 80030f6:	4621      	mov	r1, r4
 80030f8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80030fc:	4621      	mov	r1, r4
 80030fe:	008a      	lsls	r2, r1, #2
 8003100:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003104:	f7fd f8c4 	bl	8000290 <__aeabi_uldivmod>
 8003108:	4602      	mov	r2, r0
 800310a:	460b      	mov	r3, r1
 800310c:	4b60      	ldr	r3, [pc, #384]	; (8003290 <UART_SetConfig+0x4e4>)
 800310e:	fba3 2302 	umull	r2, r3, r3, r2
 8003112:	095b      	lsrs	r3, r3, #5
 8003114:	011c      	lsls	r4, r3, #4
 8003116:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800311a:	2200      	movs	r2, #0
 800311c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003120:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003124:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003128:	4642      	mov	r2, r8
 800312a:	464b      	mov	r3, r9
 800312c:	1891      	adds	r1, r2, r2
 800312e:	61b9      	str	r1, [r7, #24]
 8003130:	415b      	adcs	r3, r3
 8003132:	61fb      	str	r3, [r7, #28]
 8003134:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003138:	4641      	mov	r1, r8
 800313a:	1851      	adds	r1, r2, r1
 800313c:	6139      	str	r1, [r7, #16]
 800313e:	4649      	mov	r1, r9
 8003140:	414b      	adcs	r3, r1
 8003142:	617b      	str	r3, [r7, #20]
 8003144:	f04f 0200 	mov.w	r2, #0
 8003148:	f04f 0300 	mov.w	r3, #0
 800314c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003150:	4659      	mov	r1, fp
 8003152:	00cb      	lsls	r3, r1, #3
 8003154:	4651      	mov	r1, sl
 8003156:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800315a:	4651      	mov	r1, sl
 800315c:	00ca      	lsls	r2, r1, #3
 800315e:	4610      	mov	r0, r2
 8003160:	4619      	mov	r1, r3
 8003162:	4603      	mov	r3, r0
 8003164:	4642      	mov	r2, r8
 8003166:	189b      	adds	r3, r3, r2
 8003168:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800316c:	464b      	mov	r3, r9
 800316e:	460a      	mov	r2, r1
 8003170:	eb42 0303 	adc.w	r3, r2, r3
 8003174:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	2200      	movs	r2, #0
 8003180:	67bb      	str	r3, [r7, #120]	; 0x78
 8003182:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003184:	f04f 0200 	mov.w	r2, #0
 8003188:	f04f 0300 	mov.w	r3, #0
 800318c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003190:	4649      	mov	r1, r9
 8003192:	008b      	lsls	r3, r1, #2
 8003194:	4641      	mov	r1, r8
 8003196:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800319a:	4641      	mov	r1, r8
 800319c:	008a      	lsls	r2, r1, #2
 800319e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80031a2:	f7fd f875 	bl	8000290 <__aeabi_uldivmod>
 80031a6:	4602      	mov	r2, r0
 80031a8:	460b      	mov	r3, r1
 80031aa:	4b39      	ldr	r3, [pc, #228]	; (8003290 <UART_SetConfig+0x4e4>)
 80031ac:	fba3 1302 	umull	r1, r3, r3, r2
 80031b0:	095b      	lsrs	r3, r3, #5
 80031b2:	2164      	movs	r1, #100	; 0x64
 80031b4:	fb01 f303 	mul.w	r3, r1, r3
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	011b      	lsls	r3, r3, #4
 80031bc:	3332      	adds	r3, #50	; 0x32
 80031be:	4a34      	ldr	r2, [pc, #208]	; (8003290 <UART_SetConfig+0x4e4>)
 80031c0:	fba2 2303 	umull	r2, r3, r2, r3
 80031c4:	095b      	lsrs	r3, r3, #5
 80031c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031ca:	441c      	add	r4, r3
 80031cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031d0:	2200      	movs	r2, #0
 80031d2:	673b      	str	r3, [r7, #112]	; 0x70
 80031d4:	677a      	str	r2, [r7, #116]	; 0x74
 80031d6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80031da:	4642      	mov	r2, r8
 80031dc:	464b      	mov	r3, r9
 80031de:	1891      	adds	r1, r2, r2
 80031e0:	60b9      	str	r1, [r7, #8]
 80031e2:	415b      	adcs	r3, r3
 80031e4:	60fb      	str	r3, [r7, #12]
 80031e6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80031ea:	4641      	mov	r1, r8
 80031ec:	1851      	adds	r1, r2, r1
 80031ee:	6039      	str	r1, [r7, #0]
 80031f0:	4649      	mov	r1, r9
 80031f2:	414b      	adcs	r3, r1
 80031f4:	607b      	str	r3, [r7, #4]
 80031f6:	f04f 0200 	mov.w	r2, #0
 80031fa:	f04f 0300 	mov.w	r3, #0
 80031fe:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003202:	4659      	mov	r1, fp
 8003204:	00cb      	lsls	r3, r1, #3
 8003206:	4651      	mov	r1, sl
 8003208:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800320c:	4651      	mov	r1, sl
 800320e:	00ca      	lsls	r2, r1, #3
 8003210:	4610      	mov	r0, r2
 8003212:	4619      	mov	r1, r3
 8003214:	4603      	mov	r3, r0
 8003216:	4642      	mov	r2, r8
 8003218:	189b      	adds	r3, r3, r2
 800321a:	66bb      	str	r3, [r7, #104]	; 0x68
 800321c:	464b      	mov	r3, r9
 800321e:	460a      	mov	r2, r1
 8003220:	eb42 0303 	adc.w	r3, r2, r3
 8003224:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003226:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	2200      	movs	r2, #0
 800322e:	663b      	str	r3, [r7, #96]	; 0x60
 8003230:	667a      	str	r2, [r7, #100]	; 0x64
 8003232:	f04f 0200 	mov.w	r2, #0
 8003236:	f04f 0300 	mov.w	r3, #0
 800323a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800323e:	4649      	mov	r1, r9
 8003240:	008b      	lsls	r3, r1, #2
 8003242:	4641      	mov	r1, r8
 8003244:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003248:	4641      	mov	r1, r8
 800324a:	008a      	lsls	r2, r1, #2
 800324c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003250:	f7fd f81e 	bl	8000290 <__aeabi_uldivmod>
 8003254:	4602      	mov	r2, r0
 8003256:	460b      	mov	r3, r1
 8003258:	4b0d      	ldr	r3, [pc, #52]	; (8003290 <UART_SetConfig+0x4e4>)
 800325a:	fba3 1302 	umull	r1, r3, r3, r2
 800325e:	095b      	lsrs	r3, r3, #5
 8003260:	2164      	movs	r1, #100	; 0x64
 8003262:	fb01 f303 	mul.w	r3, r1, r3
 8003266:	1ad3      	subs	r3, r2, r3
 8003268:	011b      	lsls	r3, r3, #4
 800326a:	3332      	adds	r3, #50	; 0x32
 800326c:	4a08      	ldr	r2, [pc, #32]	; (8003290 <UART_SetConfig+0x4e4>)
 800326e:	fba2 2303 	umull	r2, r3, r2, r3
 8003272:	095b      	lsrs	r3, r3, #5
 8003274:	f003 020f 	and.w	r2, r3, #15
 8003278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4422      	add	r2, r4
 8003280:	609a      	str	r2, [r3, #8]
}
 8003282:	bf00      	nop
 8003284:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003288:	46bd      	mov	sp, r7
 800328a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800328e:	bf00      	nop
 8003290:	51eb851f 	.word	0x51eb851f

08003294 <__errno>:
 8003294:	4b01      	ldr	r3, [pc, #4]	; (800329c <__errno+0x8>)
 8003296:	6818      	ldr	r0, [r3, #0]
 8003298:	4770      	bx	lr
 800329a:	bf00      	nop
 800329c:	2000000c 	.word	0x2000000c

080032a0 <__libc_init_array>:
 80032a0:	b570      	push	{r4, r5, r6, lr}
 80032a2:	4d0d      	ldr	r5, [pc, #52]	; (80032d8 <__libc_init_array+0x38>)
 80032a4:	4c0d      	ldr	r4, [pc, #52]	; (80032dc <__libc_init_array+0x3c>)
 80032a6:	1b64      	subs	r4, r4, r5
 80032a8:	10a4      	asrs	r4, r4, #2
 80032aa:	2600      	movs	r6, #0
 80032ac:	42a6      	cmp	r6, r4
 80032ae:	d109      	bne.n	80032c4 <__libc_init_array+0x24>
 80032b0:	4d0b      	ldr	r5, [pc, #44]	; (80032e0 <__libc_init_array+0x40>)
 80032b2:	4c0c      	ldr	r4, [pc, #48]	; (80032e4 <__libc_init_array+0x44>)
 80032b4:	f001 f824 	bl	8004300 <_init>
 80032b8:	1b64      	subs	r4, r4, r5
 80032ba:	10a4      	asrs	r4, r4, #2
 80032bc:	2600      	movs	r6, #0
 80032be:	42a6      	cmp	r6, r4
 80032c0:	d105      	bne.n	80032ce <__libc_init_array+0x2e>
 80032c2:	bd70      	pop	{r4, r5, r6, pc}
 80032c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80032c8:	4798      	blx	r3
 80032ca:	3601      	adds	r6, #1
 80032cc:	e7ee      	b.n	80032ac <__libc_init_array+0xc>
 80032ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80032d2:	4798      	blx	r3
 80032d4:	3601      	adds	r6, #1
 80032d6:	e7f2      	b.n	80032be <__libc_init_array+0x1e>
 80032d8:	080043ec 	.word	0x080043ec
 80032dc:	080043ec 	.word	0x080043ec
 80032e0:	080043ec 	.word	0x080043ec
 80032e4:	080043f0 	.word	0x080043f0

080032e8 <memset>:
 80032e8:	4402      	add	r2, r0
 80032ea:	4603      	mov	r3, r0
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d100      	bne.n	80032f2 <memset+0xa>
 80032f0:	4770      	bx	lr
 80032f2:	f803 1b01 	strb.w	r1, [r3], #1
 80032f6:	e7f9      	b.n	80032ec <memset+0x4>

080032f8 <iprintf>:
 80032f8:	b40f      	push	{r0, r1, r2, r3}
 80032fa:	4b0a      	ldr	r3, [pc, #40]	; (8003324 <iprintf+0x2c>)
 80032fc:	b513      	push	{r0, r1, r4, lr}
 80032fe:	681c      	ldr	r4, [r3, #0]
 8003300:	b124      	cbz	r4, 800330c <iprintf+0x14>
 8003302:	69a3      	ldr	r3, [r4, #24]
 8003304:	b913      	cbnz	r3, 800330c <iprintf+0x14>
 8003306:	4620      	mov	r0, r4
 8003308:	f000 fa5e 	bl	80037c8 <__sinit>
 800330c:	ab05      	add	r3, sp, #20
 800330e:	9a04      	ldr	r2, [sp, #16]
 8003310:	68a1      	ldr	r1, [r4, #8]
 8003312:	9301      	str	r3, [sp, #4]
 8003314:	4620      	mov	r0, r4
 8003316:	f000 fc67 	bl	8003be8 <_vfiprintf_r>
 800331a:	b002      	add	sp, #8
 800331c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003320:	b004      	add	sp, #16
 8003322:	4770      	bx	lr
 8003324:	2000000c 	.word	0x2000000c

08003328 <_puts_r>:
 8003328:	b570      	push	{r4, r5, r6, lr}
 800332a:	460e      	mov	r6, r1
 800332c:	4605      	mov	r5, r0
 800332e:	b118      	cbz	r0, 8003338 <_puts_r+0x10>
 8003330:	6983      	ldr	r3, [r0, #24]
 8003332:	b90b      	cbnz	r3, 8003338 <_puts_r+0x10>
 8003334:	f000 fa48 	bl	80037c8 <__sinit>
 8003338:	69ab      	ldr	r3, [r5, #24]
 800333a:	68ac      	ldr	r4, [r5, #8]
 800333c:	b913      	cbnz	r3, 8003344 <_puts_r+0x1c>
 800333e:	4628      	mov	r0, r5
 8003340:	f000 fa42 	bl	80037c8 <__sinit>
 8003344:	4b2c      	ldr	r3, [pc, #176]	; (80033f8 <_puts_r+0xd0>)
 8003346:	429c      	cmp	r4, r3
 8003348:	d120      	bne.n	800338c <_puts_r+0x64>
 800334a:	686c      	ldr	r4, [r5, #4]
 800334c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800334e:	07db      	lsls	r3, r3, #31
 8003350:	d405      	bmi.n	800335e <_puts_r+0x36>
 8003352:	89a3      	ldrh	r3, [r4, #12]
 8003354:	0598      	lsls	r0, r3, #22
 8003356:	d402      	bmi.n	800335e <_puts_r+0x36>
 8003358:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800335a:	f000 fad3 	bl	8003904 <__retarget_lock_acquire_recursive>
 800335e:	89a3      	ldrh	r3, [r4, #12]
 8003360:	0719      	lsls	r1, r3, #28
 8003362:	d51d      	bpl.n	80033a0 <_puts_r+0x78>
 8003364:	6923      	ldr	r3, [r4, #16]
 8003366:	b1db      	cbz	r3, 80033a0 <_puts_r+0x78>
 8003368:	3e01      	subs	r6, #1
 800336a:	68a3      	ldr	r3, [r4, #8]
 800336c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003370:	3b01      	subs	r3, #1
 8003372:	60a3      	str	r3, [r4, #8]
 8003374:	bb39      	cbnz	r1, 80033c6 <_puts_r+0x9e>
 8003376:	2b00      	cmp	r3, #0
 8003378:	da38      	bge.n	80033ec <_puts_r+0xc4>
 800337a:	4622      	mov	r2, r4
 800337c:	210a      	movs	r1, #10
 800337e:	4628      	mov	r0, r5
 8003380:	f000 f848 	bl	8003414 <__swbuf_r>
 8003384:	3001      	adds	r0, #1
 8003386:	d011      	beq.n	80033ac <_puts_r+0x84>
 8003388:	250a      	movs	r5, #10
 800338a:	e011      	b.n	80033b0 <_puts_r+0x88>
 800338c:	4b1b      	ldr	r3, [pc, #108]	; (80033fc <_puts_r+0xd4>)
 800338e:	429c      	cmp	r4, r3
 8003390:	d101      	bne.n	8003396 <_puts_r+0x6e>
 8003392:	68ac      	ldr	r4, [r5, #8]
 8003394:	e7da      	b.n	800334c <_puts_r+0x24>
 8003396:	4b1a      	ldr	r3, [pc, #104]	; (8003400 <_puts_r+0xd8>)
 8003398:	429c      	cmp	r4, r3
 800339a:	bf08      	it	eq
 800339c:	68ec      	ldreq	r4, [r5, #12]
 800339e:	e7d5      	b.n	800334c <_puts_r+0x24>
 80033a0:	4621      	mov	r1, r4
 80033a2:	4628      	mov	r0, r5
 80033a4:	f000 f888 	bl	80034b8 <__swsetup_r>
 80033a8:	2800      	cmp	r0, #0
 80033aa:	d0dd      	beq.n	8003368 <_puts_r+0x40>
 80033ac:	f04f 35ff 	mov.w	r5, #4294967295
 80033b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80033b2:	07da      	lsls	r2, r3, #31
 80033b4:	d405      	bmi.n	80033c2 <_puts_r+0x9a>
 80033b6:	89a3      	ldrh	r3, [r4, #12]
 80033b8:	059b      	lsls	r3, r3, #22
 80033ba:	d402      	bmi.n	80033c2 <_puts_r+0x9a>
 80033bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80033be:	f000 faa2 	bl	8003906 <__retarget_lock_release_recursive>
 80033c2:	4628      	mov	r0, r5
 80033c4:	bd70      	pop	{r4, r5, r6, pc}
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	da04      	bge.n	80033d4 <_puts_r+0xac>
 80033ca:	69a2      	ldr	r2, [r4, #24]
 80033cc:	429a      	cmp	r2, r3
 80033ce:	dc06      	bgt.n	80033de <_puts_r+0xb6>
 80033d0:	290a      	cmp	r1, #10
 80033d2:	d004      	beq.n	80033de <_puts_r+0xb6>
 80033d4:	6823      	ldr	r3, [r4, #0]
 80033d6:	1c5a      	adds	r2, r3, #1
 80033d8:	6022      	str	r2, [r4, #0]
 80033da:	7019      	strb	r1, [r3, #0]
 80033dc:	e7c5      	b.n	800336a <_puts_r+0x42>
 80033de:	4622      	mov	r2, r4
 80033e0:	4628      	mov	r0, r5
 80033e2:	f000 f817 	bl	8003414 <__swbuf_r>
 80033e6:	3001      	adds	r0, #1
 80033e8:	d1bf      	bne.n	800336a <_puts_r+0x42>
 80033ea:	e7df      	b.n	80033ac <_puts_r+0x84>
 80033ec:	6823      	ldr	r3, [r4, #0]
 80033ee:	250a      	movs	r5, #10
 80033f0:	1c5a      	adds	r2, r3, #1
 80033f2:	6022      	str	r2, [r4, #0]
 80033f4:	701d      	strb	r5, [r3, #0]
 80033f6:	e7db      	b.n	80033b0 <_puts_r+0x88>
 80033f8:	08004370 	.word	0x08004370
 80033fc:	08004390 	.word	0x08004390
 8003400:	08004350 	.word	0x08004350

08003404 <puts>:
 8003404:	4b02      	ldr	r3, [pc, #8]	; (8003410 <puts+0xc>)
 8003406:	4601      	mov	r1, r0
 8003408:	6818      	ldr	r0, [r3, #0]
 800340a:	f7ff bf8d 	b.w	8003328 <_puts_r>
 800340e:	bf00      	nop
 8003410:	2000000c 	.word	0x2000000c

08003414 <__swbuf_r>:
 8003414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003416:	460e      	mov	r6, r1
 8003418:	4614      	mov	r4, r2
 800341a:	4605      	mov	r5, r0
 800341c:	b118      	cbz	r0, 8003426 <__swbuf_r+0x12>
 800341e:	6983      	ldr	r3, [r0, #24]
 8003420:	b90b      	cbnz	r3, 8003426 <__swbuf_r+0x12>
 8003422:	f000 f9d1 	bl	80037c8 <__sinit>
 8003426:	4b21      	ldr	r3, [pc, #132]	; (80034ac <__swbuf_r+0x98>)
 8003428:	429c      	cmp	r4, r3
 800342a:	d12b      	bne.n	8003484 <__swbuf_r+0x70>
 800342c:	686c      	ldr	r4, [r5, #4]
 800342e:	69a3      	ldr	r3, [r4, #24]
 8003430:	60a3      	str	r3, [r4, #8]
 8003432:	89a3      	ldrh	r3, [r4, #12]
 8003434:	071a      	lsls	r2, r3, #28
 8003436:	d52f      	bpl.n	8003498 <__swbuf_r+0x84>
 8003438:	6923      	ldr	r3, [r4, #16]
 800343a:	b36b      	cbz	r3, 8003498 <__swbuf_r+0x84>
 800343c:	6923      	ldr	r3, [r4, #16]
 800343e:	6820      	ldr	r0, [r4, #0]
 8003440:	1ac0      	subs	r0, r0, r3
 8003442:	6963      	ldr	r3, [r4, #20]
 8003444:	b2f6      	uxtb	r6, r6
 8003446:	4283      	cmp	r3, r0
 8003448:	4637      	mov	r7, r6
 800344a:	dc04      	bgt.n	8003456 <__swbuf_r+0x42>
 800344c:	4621      	mov	r1, r4
 800344e:	4628      	mov	r0, r5
 8003450:	f000 f926 	bl	80036a0 <_fflush_r>
 8003454:	bb30      	cbnz	r0, 80034a4 <__swbuf_r+0x90>
 8003456:	68a3      	ldr	r3, [r4, #8]
 8003458:	3b01      	subs	r3, #1
 800345a:	60a3      	str	r3, [r4, #8]
 800345c:	6823      	ldr	r3, [r4, #0]
 800345e:	1c5a      	adds	r2, r3, #1
 8003460:	6022      	str	r2, [r4, #0]
 8003462:	701e      	strb	r6, [r3, #0]
 8003464:	6963      	ldr	r3, [r4, #20]
 8003466:	3001      	adds	r0, #1
 8003468:	4283      	cmp	r3, r0
 800346a:	d004      	beq.n	8003476 <__swbuf_r+0x62>
 800346c:	89a3      	ldrh	r3, [r4, #12]
 800346e:	07db      	lsls	r3, r3, #31
 8003470:	d506      	bpl.n	8003480 <__swbuf_r+0x6c>
 8003472:	2e0a      	cmp	r6, #10
 8003474:	d104      	bne.n	8003480 <__swbuf_r+0x6c>
 8003476:	4621      	mov	r1, r4
 8003478:	4628      	mov	r0, r5
 800347a:	f000 f911 	bl	80036a0 <_fflush_r>
 800347e:	b988      	cbnz	r0, 80034a4 <__swbuf_r+0x90>
 8003480:	4638      	mov	r0, r7
 8003482:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003484:	4b0a      	ldr	r3, [pc, #40]	; (80034b0 <__swbuf_r+0x9c>)
 8003486:	429c      	cmp	r4, r3
 8003488:	d101      	bne.n	800348e <__swbuf_r+0x7a>
 800348a:	68ac      	ldr	r4, [r5, #8]
 800348c:	e7cf      	b.n	800342e <__swbuf_r+0x1a>
 800348e:	4b09      	ldr	r3, [pc, #36]	; (80034b4 <__swbuf_r+0xa0>)
 8003490:	429c      	cmp	r4, r3
 8003492:	bf08      	it	eq
 8003494:	68ec      	ldreq	r4, [r5, #12]
 8003496:	e7ca      	b.n	800342e <__swbuf_r+0x1a>
 8003498:	4621      	mov	r1, r4
 800349a:	4628      	mov	r0, r5
 800349c:	f000 f80c 	bl	80034b8 <__swsetup_r>
 80034a0:	2800      	cmp	r0, #0
 80034a2:	d0cb      	beq.n	800343c <__swbuf_r+0x28>
 80034a4:	f04f 37ff 	mov.w	r7, #4294967295
 80034a8:	e7ea      	b.n	8003480 <__swbuf_r+0x6c>
 80034aa:	bf00      	nop
 80034ac:	08004370 	.word	0x08004370
 80034b0:	08004390 	.word	0x08004390
 80034b4:	08004350 	.word	0x08004350

080034b8 <__swsetup_r>:
 80034b8:	4b32      	ldr	r3, [pc, #200]	; (8003584 <__swsetup_r+0xcc>)
 80034ba:	b570      	push	{r4, r5, r6, lr}
 80034bc:	681d      	ldr	r5, [r3, #0]
 80034be:	4606      	mov	r6, r0
 80034c0:	460c      	mov	r4, r1
 80034c2:	b125      	cbz	r5, 80034ce <__swsetup_r+0x16>
 80034c4:	69ab      	ldr	r3, [r5, #24]
 80034c6:	b913      	cbnz	r3, 80034ce <__swsetup_r+0x16>
 80034c8:	4628      	mov	r0, r5
 80034ca:	f000 f97d 	bl	80037c8 <__sinit>
 80034ce:	4b2e      	ldr	r3, [pc, #184]	; (8003588 <__swsetup_r+0xd0>)
 80034d0:	429c      	cmp	r4, r3
 80034d2:	d10f      	bne.n	80034f4 <__swsetup_r+0x3c>
 80034d4:	686c      	ldr	r4, [r5, #4]
 80034d6:	89a3      	ldrh	r3, [r4, #12]
 80034d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80034dc:	0719      	lsls	r1, r3, #28
 80034de:	d42c      	bmi.n	800353a <__swsetup_r+0x82>
 80034e0:	06dd      	lsls	r5, r3, #27
 80034e2:	d411      	bmi.n	8003508 <__swsetup_r+0x50>
 80034e4:	2309      	movs	r3, #9
 80034e6:	6033      	str	r3, [r6, #0]
 80034e8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80034ec:	81a3      	strh	r3, [r4, #12]
 80034ee:	f04f 30ff 	mov.w	r0, #4294967295
 80034f2:	e03e      	b.n	8003572 <__swsetup_r+0xba>
 80034f4:	4b25      	ldr	r3, [pc, #148]	; (800358c <__swsetup_r+0xd4>)
 80034f6:	429c      	cmp	r4, r3
 80034f8:	d101      	bne.n	80034fe <__swsetup_r+0x46>
 80034fa:	68ac      	ldr	r4, [r5, #8]
 80034fc:	e7eb      	b.n	80034d6 <__swsetup_r+0x1e>
 80034fe:	4b24      	ldr	r3, [pc, #144]	; (8003590 <__swsetup_r+0xd8>)
 8003500:	429c      	cmp	r4, r3
 8003502:	bf08      	it	eq
 8003504:	68ec      	ldreq	r4, [r5, #12]
 8003506:	e7e6      	b.n	80034d6 <__swsetup_r+0x1e>
 8003508:	0758      	lsls	r0, r3, #29
 800350a:	d512      	bpl.n	8003532 <__swsetup_r+0x7a>
 800350c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800350e:	b141      	cbz	r1, 8003522 <__swsetup_r+0x6a>
 8003510:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003514:	4299      	cmp	r1, r3
 8003516:	d002      	beq.n	800351e <__swsetup_r+0x66>
 8003518:	4630      	mov	r0, r6
 800351a:	f000 fa5b 	bl	80039d4 <_free_r>
 800351e:	2300      	movs	r3, #0
 8003520:	6363      	str	r3, [r4, #52]	; 0x34
 8003522:	89a3      	ldrh	r3, [r4, #12]
 8003524:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003528:	81a3      	strh	r3, [r4, #12]
 800352a:	2300      	movs	r3, #0
 800352c:	6063      	str	r3, [r4, #4]
 800352e:	6923      	ldr	r3, [r4, #16]
 8003530:	6023      	str	r3, [r4, #0]
 8003532:	89a3      	ldrh	r3, [r4, #12]
 8003534:	f043 0308 	orr.w	r3, r3, #8
 8003538:	81a3      	strh	r3, [r4, #12]
 800353a:	6923      	ldr	r3, [r4, #16]
 800353c:	b94b      	cbnz	r3, 8003552 <__swsetup_r+0x9a>
 800353e:	89a3      	ldrh	r3, [r4, #12]
 8003540:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003544:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003548:	d003      	beq.n	8003552 <__swsetup_r+0x9a>
 800354a:	4621      	mov	r1, r4
 800354c:	4630      	mov	r0, r6
 800354e:	f000 fa01 	bl	8003954 <__smakebuf_r>
 8003552:	89a0      	ldrh	r0, [r4, #12]
 8003554:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003558:	f010 0301 	ands.w	r3, r0, #1
 800355c:	d00a      	beq.n	8003574 <__swsetup_r+0xbc>
 800355e:	2300      	movs	r3, #0
 8003560:	60a3      	str	r3, [r4, #8]
 8003562:	6963      	ldr	r3, [r4, #20]
 8003564:	425b      	negs	r3, r3
 8003566:	61a3      	str	r3, [r4, #24]
 8003568:	6923      	ldr	r3, [r4, #16]
 800356a:	b943      	cbnz	r3, 800357e <__swsetup_r+0xc6>
 800356c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003570:	d1ba      	bne.n	80034e8 <__swsetup_r+0x30>
 8003572:	bd70      	pop	{r4, r5, r6, pc}
 8003574:	0781      	lsls	r1, r0, #30
 8003576:	bf58      	it	pl
 8003578:	6963      	ldrpl	r3, [r4, #20]
 800357a:	60a3      	str	r3, [r4, #8]
 800357c:	e7f4      	b.n	8003568 <__swsetup_r+0xb0>
 800357e:	2000      	movs	r0, #0
 8003580:	e7f7      	b.n	8003572 <__swsetup_r+0xba>
 8003582:	bf00      	nop
 8003584:	2000000c 	.word	0x2000000c
 8003588:	08004370 	.word	0x08004370
 800358c:	08004390 	.word	0x08004390
 8003590:	08004350 	.word	0x08004350

08003594 <__sflush_r>:
 8003594:	898a      	ldrh	r2, [r1, #12]
 8003596:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800359a:	4605      	mov	r5, r0
 800359c:	0710      	lsls	r0, r2, #28
 800359e:	460c      	mov	r4, r1
 80035a0:	d458      	bmi.n	8003654 <__sflush_r+0xc0>
 80035a2:	684b      	ldr	r3, [r1, #4]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	dc05      	bgt.n	80035b4 <__sflush_r+0x20>
 80035a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	dc02      	bgt.n	80035b4 <__sflush_r+0x20>
 80035ae:	2000      	movs	r0, #0
 80035b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80035b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80035b6:	2e00      	cmp	r6, #0
 80035b8:	d0f9      	beq.n	80035ae <__sflush_r+0x1a>
 80035ba:	2300      	movs	r3, #0
 80035bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80035c0:	682f      	ldr	r7, [r5, #0]
 80035c2:	602b      	str	r3, [r5, #0]
 80035c4:	d032      	beq.n	800362c <__sflush_r+0x98>
 80035c6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80035c8:	89a3      	ldrh	r3, [r4, #12]
 80035ca:	075a      	lsls	r2, r3, #29
 80035cc:	d505      	bpl.n	80035da <__sflush_r+0x46>
 80035ce:	6863      	ldr	r3, [r4, #4]
 80035d0:	1ac0      	subs	r0, r0, r3
 80035d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80035d4:	b10b      	cbz	r3, 80035da <__sflush_r+0x46>
 80035d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80035d8:	1ac0      	subs	r0, r0, r3
 80035da:	2300      	movs	r3, #0
 80035dc:	4602      	mov	r2, r0
 80035de:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80035e0:	6a21      	ldr	r1, [r4, #32]
 80035e2:	4628      	mov	r0, r5
 80035e4:	47b0      	blx	r6
 80035e6:	1c43      	adds	r3, r0, #1
 80035e8:	89a3      	ldrh	r3, [r4, #12]
 80035ea:	d106      	bne.n	80035fa <__sflush_r+0x66>
 80035ec:	6829      	ldr	r1, [r5, #0]
 80035ee:	291d      	cmp	r1, #29
 80035f0:	d82c      	bhi.n	800364c <__sflush_r+0xb8>
 80035f2:	4a2a      	ldr	r2, [pc, #168]	; (800369c <__sflush_r+0x108>)
 80035f4:	40ca      	lsrs	r2, r1
 80035f6:	07d6      	lsls	r6, r2, #31
 80035f8:	d528      	bpl.n	800364c <__sflush_r+0xb8>
 80035fa:	2200      	movs	r2, #0
 80035fc:	6062      	str	r2, [r4, #4]
 80035fe:	04d9      	lsls	r1, r3, #19
 8003600:	6922      	ldr	r2, [r4, #16]
 8003602:	6022      	str	r2, [r4, #0]
 8003604:	d504      	bpl.n	8003610 <__sflush_r+0x7c>
 8003606:	1c42      	adds	r2, r0, #1
 8003608:	d101      	bne.n	800360e <__sflush_r+0x7a>
 800360a:	682b      	ldr	r3, [r5, #0]
 800360c:	b903      	cbnz	r3, 8003610 <__sflush_r+0x7c>
 800360e:	6560      	str	r0, [r4, #84]	; 0x54
 8003610:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003612:	602f      	str	r7, [r5, #0]
 8003614:	2900      	cmp	r1, #0
 8003616:	d0ca      	beq.n	80035ae <__sflush_r+0x1a>
 8003618:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800361c:	4299      	cmp	r1, r3
 800361e:	d002      	beq.n	8003626 <__sflush_r+0x92>
 8003620:	4628      	mov	r0, r5
 8003622:	f000 f9d7 	bl	80039d4 <_free_r>
 8003626:	2000      	movs	r0, #0
 8003628:	6360      	str	r0, [r4, #52]	; 0x34
 800362a:	e7c1      	b.n	80035b0 <__sflush_r+0x1c>
 800362c:	6a21      	ldr	r1, [r4, #32]
 800362e:	2301      	movs	r3, #1
 8003630:	4628      	mov	r0, r5
 8003632:	47b0      	blx	r6
 8003634:	1c41      	adds	r1, r0, #1
 8003636:	d1c7      	bne.n	80035c8 <__sflush_r+0x34>
 8003638:	682b      	ldr	r3, [r5, #0]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d0c4      	beq.n	80035c8 <__sflush_r+0x34>
 800363e:	2b1d      	cmp	r3, #29
 8003640:	d001      	beq.n	8003646 <__sflush_r+0xb2>
 8003642:	2b16      	cmp	r3, #22
 8003644:	d101      	bne.n	800364a <__sflush_r+0xb6>
 8003646:	602f      	str	r7, [r5, #0]
 8003648:	e7b1      	b.n	80035ae <__sflush_r+0x1a>
 800364a:	89a3      	ldrh	r3, [r4, #12]
 800364c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003650:	81a3      	strh	r3, [r4, #12]
 8003652:	e7ad      	b.n	80035b0 <__sflush_r+0x1c>
 8003654:	690f      	ldr	r7, [r1, #16]
 8003656:	2f00      	cmp	r7, #0
 8003658:	d0a9      	beq.n	80035ae <__sflush_r+0x1a>
 800365a:	0793      	lsls	r3, r2, #30
 800365c:	680e      	ldr	r6, [r1, #0]
 800365e:	bf08      	it	eq
 8003660:	694b      	ldreq	r3, [r1, #20]
 8003662:	600f      	str	r7, [r1, #0]
 8003664:	bf18      	it	ne
 8003666:	2300      	movne	r3, #0
 8003668:	eba6 0807 	sub.w	r8, r6, r7
 800366c:	608b      	str	r3, [r1, #8]
 800366e:	f1b8 0f00 	cmp.w	r8, #0
 8003672:	dd9c      	ble.n	80035ae <__sflush_r+0x1a>
 8003674:	6a21      	ldr	r1, [r4, #32]
 8003676:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003678:	4643      	mov	r3, r8
 800367a:	463a      	mov	r2, r7
 800367c:	4628      	mov	r0, r5
 800367e:	47b0      	blx	r6
 8003680:	2800      	cmp	r0, #0
 8003682:	dc06      	bgt.n	8003692 <__sflush_r+0xfe>
 8003684:	89a3      	ldrh	r3, [r4, #12]
 8003686:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800368a:	81a3      	strh	r3, [r4, #12]
 800368c:	f04f 30ff 	mov.w	r0, #4294967295
 8003690:	e78e      	b.n	80035b0 <__sflush_r+0x1c>
 8003692:	4407      	add	r7, r0
 8003694:	eba8 0800 	sub.w	r8, r8, r0
 8003698:	e7e9      	b.n	800366e <__sflush_r+0xda>
 800369a:	bf00      	nop
 800369c:	20400001 	.word	0x20400001

080036a0 <_fflush_r>:
 80036a0:	b538      	push	{r3, r4, r5, lr}
 80036a2:	690b      	ldr	r3, [r1, #16]
 80036a4:	4605      	mov	r5, r0
 80036a6:	460c      	mov	r4, r1
 80036a8:	b913      	cbnz	r3, 80036b0 <_fflush_r+0x10>
 80036aa:	2500      	movs	r5, #0
 80036ac:	4628      	mov	r0, r5
 80036ae:	bd38      	pop	{r3, r4, r5, pc}
 80036b0:	b118      	cbz	r0, 80036ba <_fflush_r+0x1a>
 80036b2:	6983      	ldr	r3, [r0, #24]
 80036b4:	b90b      	cbnz	r3, 80036ba <_fflush_r+0x1a>
 80036b6:	f000 f887 	bl	80037c8 <__sinit>
 80036ba:	4b14      	ldr	r3, [pc, #80]	; (800370c <_fflush_r+0x6c>)
 80036bc:	429c      	cmp	r4, r3
 80036be:	d11b      	bne.n	80036f8 <_fflush_r+0x58>
 80036c0:	686c      	ldr	r4, [r5, #4]
 80036c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d0ef      	beq.n	80036aa <_fflush_r+0xa>
 80036ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80036cc:	07d0      	lsls	r0, r2, #31
 80036ce:	d404      	bmi.n	80036da <_fflush_r+0x3a>
 80036d0:	0599      	lsls	r1, r3, #22
 80036d2:	d402      	bmi.n	80036da <_fflush_r+0x3a>
 80036d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80036d6:	f000 f915 	bl	8003904 <__retarget_lock_acquire_recursive>
 80036da:	4628      	mov	r0, r5
 80036dc:	4621      	mov	r1, r4
 80036de:	f7ff ff59 	bl	8003594 <__sflush_r>
 80036e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80036e4:	07da      	lsls	r2, r3, #31
 80036e6:	4605      	mov	r5, r0
 80036e8:	d4e0      	bmi.n	80036ac <_fflush_r+0xc>
 80036ea:	89a3      	ldrh	r3, [r4, #12]
 80036ec:	059b      	lsls	r3, r3, #22
 80036ee:	d4dd      	bmi.n	80036ac <_fflush_r+0xc>
 80036f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80036f2:	f000 f908 	bl	8003906 <__retarget_lock_release_recursive>
 80036f6:	e7d9      	b.n	80036ac <_fflush_r+0xc>
 80036f8:	4b05      	ldr	r3, [pc, #20]	; (8003710 <_fflush_r+0x70>)
 80036fa:	429c      	cmp	r4, r3
 80036fc:	d101      	bne.n	8003702 <_fflush_r+0x62>
 80036fe:	68ac      	ldr	r4, [r5, #8]
 8003700:	e7df      	b.n	80036c2 <_fflush_r+0x22>
 8003702:	4b04      	ldr	r3, [pc, #16]	; (8003714 <_fflush_r+0x74>)
 8003704:	429c      	cmp	r4, r3
 8003706:	bf08      	it	eq
 8003708:	68ec      	ldreq	r4, [r5, #12]
 800370a:	e7da      	b.n	80036c2 <_fflush_r+0x22>
 800370c:	08004370 	.word	0x08004370
 8003710:	08004390 	.word	0x08004390
 8003714:	08004350 	.word	0x08004350

08003718 <std>:
 8003718:	2300      	movs	r3, #0
 800371a:	b510      	push	{r4, lr}
 800371c:	4604      	mov	r4, r0
 800371e:	e9c0 3300 	strd	r3, r3, [r0]
 8003722:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003726:	6083      	str	r3, [r0, #8]
 8003728:	8181      	strh	r1, [r0, #12]
 800372a:	6643      	str	r3, [r0, #100]	; 0x64
 800372c:	81c2      	strh	r2, [r0, #14]
 800372e:	6183      	str	r3, [r0, #24]
 8003730:	4619      	mov	r1, r3
 8003732:	2208      	movs	r2, #8
 8003734:	305c      	adds	r0, #92	; 0x5c
 8003736:	f7ff fdd7 	bl	80032e8 <memset>
 800373a:	4b05      	ldr	r3, [pc, #20]	; (8003750 <std+0x38>)
 800373c:	6263      	str	r3, [r4, #36]	; 0x24
 800373e:	4b05      	ldr	r3, [pc, #20]	; (8003754 <std+0x3c>)
 8003740:	62a3      	str	r3, [r4, #40]	; 0x28
 8003742:	4b05      	ldr	r3, [pc, #20]	; (8003758 <std+0x40>)
 8003744:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003746:	4b05      	ldr	r3, [pc, #20]	; (800375c <std+0x44>)
 8003748:	6224      	str	r4, [r4, #32]
 800374a:	6323      	str	r3, [r4, #48]	; 0x30
 800374c:	bd10      	pop	{r4, pc}
 800374e:	bf00      	nop
 8003750:	08004191 	.word	0x08004191
 8003754:	080041b3 	.word	0x080041b3
 8003758:	080041eb 	.word	0x080041eb
 800375c:	0800420f 	.word	0x0800420f

08003760 <_cleanup_r>:
 8003760:	4901      	ldr	r1, [pc, #4]	; (8003768 <_cleanup_r+0x8>)
 8003762:	f000 b8af 	b.w	80038c4 <_fwalk_reent>
 8003766:	bf00      	nop
 8003768:	080036a1 	.word	0x080036a1

0800376c <__sfmoreglue>:
 800376c:	b570      	push	{r4, r5, r6, lr}
 800376e:	2268      	movs	r2, #104	; 0x68
 8003770:	1e4d      	subs	r5, r1, #1
 8003772:	4355      	muls	r5, r2
 8003774:	460e      	mov	r6, r1
 8003776:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800377a:	f000 f997 	bl	8003aac <_malloc_r>
 800377e:	4604      	mov	r4, r0
 8003780:	b140      	cbz	r0, 8003794 <__sfmoreglue+0x28>
 8003782:	2100      	movs	r1, #0
 8003784:	e9c0 1600 	strd	r1, r6, [r0]
 8003788:	300c      	adds	r0, #12
 800378a:	60a0      	str	r0, [r4, #8]
 800378c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003790:	f7ff fdaa 	bl	80032e8 <memset>
 8003794:	4620      	mov	r0, r4
 8003796:	bd70      	pop	{r4, r5, r6, pc}

08003798 <__sfp_lock_acquire>:
 8003798:	4801      	ldr	r0, [pc, #4]	; (80037a0 <__sfp_lock_acquire+0x8>)
 800379a:	f000 b8b3 	b.w	8003904 <__retarget_lock_acquire_recursive>
 800379e:	bf00      	nop
 80037a0:	2000012d 	.word	0x2000012d

080037a4 <__sfp_lock_release>:
 80037a4:	4801      	ldr	r0, [pc, #4]	; (80037ac <__sfp_lock_release+0x8>)
 80037a6:	f000 b8ae 	b.w	8003906 <__retarget_lock_release_recursive>
 80037aa:	bf00      	nop
 80037ac:	2000012d 	.word	0x2000012d

080037b0 <__sinit_lock_acquire>:
 80037b0:	4801      	ldr	r0, [pc, #4]	; (80037b8 <__sinit_lock_acquire+0x8>)
 80037b2:	f000 b8a7 	b.w	8003904 <__retarget_lock_acquire_recursive>
 80037b6:	bf00      	nop
 80037b8:	2000012e 	.word	0x2000012e

080037bc <__sinit_lock_release>:
 80037bc:	4801      	ldr	r0, [pc, #4]	; (80037c4 <__sinit_lock_release+0x8>)
 80037be:	f000 b8a2 	b.w	8003906 <__retarget_lock_release_recursive>
 80037c2:	bf00      	nop
 80037c4:	2000012e 	.word	0x2000012e

080037c8 <__sinit>:
 80037c8:	b510      	push	{r4, lr}
 80037ca:	4604      	mov	r4, r0
 80037cc:	f7ff fff0 	bl	80037b0 <__sinit_lock_acquire>
 80037d0:	69a3      	ldr	r3, [r4, #24]
 80037d2:	b11b      	cbz	r3, 80037dc <__sinit+0x14>
 80037d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80037d8:	f7ff bff0 	b.w	80037bc <__sinit_lock_release>
 80037dc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80037e0:	6523      	str	r3, [r4, #80]	; 0x50
 80037e2:	4b13      	ldr	r3, [pc, #76]	; (8003830 <__sinit+0x68>)
 80037e4:	4a13      	ldr	r2, [pc, #76]	; (8003834 <__sinit+0x6c>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	62a2      	str	r2, [r4, #40]	; 0x28
 80037ea:	42a3      	cmp	r3, r4
 80037ec:	bf04      	itt	eq
 80037ee:	2301      	moveq	r3, #1
 80037f0:	61a3      	streq	r3, [r4, #24]
 80037f2:	4620      	mov	r0, r4
 80037f4:	f000 f820 	bl	8003838 <__sfp>
 80037f8:	6060      	str	r0, [r4, #4]
 80037fa:	4620      	mov	r0, r4
 80037fc:	f000 f81c 	bl	8003838 <__sfp>
 8003800:	60a0      	str	r0, [r4, #8]
 8003802:	4620      	mov	r0, r4
 8003804:	f000 f818 	bl	8003838 <__sfp>
 8003808:	2200      	movs	r2, #0
 800380a:	60e0      	str	r0, [r4, #12]
 800380c:	2104      	movs	r1, #4
 800380e:	6860      	ldr	r0, [r4, #4]
 8003810:	f7ff ff82 	bl	8003718 <std>
 8003814:	68a0      	ldr	r0, [r4, #8]
 8003816:	2201      	movs	r2, #1
 8003818:	2109      	movs	r1, #9
 800381a:	f7ff ff7d 	bl	8003718 <std>
 800381e:	68e0      	ldr	r0, [r4, #12]
 8003820:	2202      	movs	r2, #2
 8003822:	2112      	movs	r1, #18
 8003824:	f7ff ff78 	bl	8003718 <std>
 8003828:	2301      	movs	r3, #1
 800382a:	61a3      	str	r3, [r4, #24]
 800382c:	e7d2      	b.n	80037d4 <__sinit+0xc>
 800382e:	bf00      	nop
 8003830:	0800434c 	.word	0x0800434c
 8003834:	08003761 	.word	0x08003761

08003838 <__sfp>:
 8003838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800383a:	4607      	mov	r7, r0
 800383c:	f7ff ffac 	bl	8003798 <__sfp_lock_acquire>
 8003840:	4b1e      	ldr	r3, [pc, #120]	; (80038bc <__sfp+0x84>)
 8003842:	681e      	ldr	r6, [r3, #0]
 8003844:	69b3      	ldr	r3, [r6, #24]
 8003846:	b913      	cbnz	r3, 800384e <__sfp+0x16>
 8003848:	4630      	mov	r0, r6
 800384a:	f7ff ffbd 	bl	80037c8 <__sinit>
 800384e:	3648      	adds	r6, #72	; 0x48
 8003850:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003854:	3b01      	subs	r3, #1
 8003856:	d503      	bpl.n	8003860 <__sfp+0x28>
 8003858:	6833      	ldr	r3, [r6, #0]
 800385a:	b30b      	cbz	r3, 80038a0 <__sfp+0x68>
 800385c:	6836      	ldr	r6, [r6, #0]
 800385e:	e7f7      	b.n	8003850 <__sfp+0x18>
 8003860:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003864:	b9d5      	cbnz	r5, 800389c <__sfp+0x64>
 8003866:	4b16      	ldr	r3, [pc, #88]	; (80038c0 <__sfp+0x88>)
 8003868:	60e3      	str	r3, [r4, #12]
 800386a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800386e:	6665      	str	r5, [r4, #100]	; 0x64
 8003870:	f000 f847 	bl	8003902 <__retarget_lock_init_recursive>
 8003874:	f7ff ff96 	bl	80037a4 <__sfp_lock_release>
 8003878:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800387c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003880:	6025      	str	r5, [r4, #0]
 8003882:	61a5      	str	r5, [r4, #24]
 8003884:	2208      	movs	r2, #8
 8003886:	4629      	mov	r1, r5
 8003888:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800388c:	f7ff fd2c 	bl	80032e8 <memset>
 8003890:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003894:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003898:	4620      	mov	r0, r4
 800389a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800389c:	3468      	adds	r4, #104	; 0x68
 800389e:	e7d9      	b.n	8003854 <__sfp+0x1c>
 80038a0:	2104      	movs	r1, #4
 80038a2:	4638      	mov	r0, r7
 80038a4:	f7ff ff62 	bl	800376c <__sfmoreglue>
 80038a8:	4604      	mov	r4, r0
 80038aa:	6030      	str	r0, [r6, #0]
 80038ac:	2800      	cmp	r0, #0
 80038ae:	d1d5      	bne.n	800385c <__sfp+0x24>
 80038b0:	f7ff ff78 	bl	80037a4 <__sfp_lock_release>
 80038b4:	230c      	movs	r3, #12
 80038b6:	603b      	str	r3, [r7, #0]
 80038b8:	e7ee      	b.n	8003898 <__sfp+0x60>
 80038ba:	bf00      	nop
 80038bc:	0800434c 	.word	0x0800434c
 80038c0:	ffff0001 	.word	0xffff0001

080038c4 <_fwalk_reent>:
 80038c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80038c8:	4606      	mov	r6, r0
 80038ca:	4688      	mov	r8, r1
 80038cc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80038d0:	2700      	movs	r7, #0
 80038d2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80038d6:	f1b9 0901 	subs.w	r9, r9, #1
 80038da:	d505      	bpl.n	80038e8 <_fwalk_reent+0x24>
 80038dc:	6824      	ldr	r4, [r4, #0]
 80038de:	2c00      	cmp	r4, #0
 80038e0:	d1f7      	bne.n	80038d2 <_fwalk_reent+0xe>
 80038e2:	4638      	mov	r0, r7
 80038e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80038e8:	89ab      	ldrh	r3, [r5, #12]
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d907      	bls.n	80038fe <_fwalk_reent+0x3a>
 80038ee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80038f2:	3301      	adds	r3, #1
 80038f4:	d003      	beq.n	80038fe <_fwalk_reent+0x3a>
 80038f6:	4629      	mov	r1, r5
 80038f8:	4630      	mov	r0, r6
 80038fa:	47c0      	blx	r8
 80038fc:	4307      	orrs	r7, r0
 80038fe:	3568      	adds	r5, #104	; 0x68
 8003900:	e7e9      	b.n	80038d6 <_fwalk_reent+0x12>

08003902 <__retarget_lock_init_recursive>:
 8003902:	4770      	bx	lr

08003904 <__retarget_lock_acquire_recursive>:
 8003904:	4770      	bx	lr

08003906 <__retarget_lock_release_recursive>:
 8003906:	4770      	bx	lr

08003908 <__swhatbuf_r>:
 8003908:	b570      	push	{r4, r5, r6, lr}
 800390a:	460e      	mov	r6, r1
 800390c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003910:	2900      	cmp	r1, #0
 8003912:	b096      	sub	sp, #88	; 0x58
 8003914:	4614      	mov	r4, r2
 8003916:	461d      	mov	r5, r3
 8003918:	da08      	bge.n	800392c <__swhatbuf_r+0x24>
 800391a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800391e:	2200      	movs	r2, #0
 8003920:	602a      	str	r2, [r5, #0]
 8003922:	061a      	lsls	r2, r3, #24
 8003924:	d410      	bmi.n	8003948 <__swhatbuf_r+0x40>
 8003926:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800392a:	e00e      	b.n	800394a <__swhatbuf_r+0x42>
 800392c:	466a      	mov	r2, sp
 800392e:	f000 fc95 	bl	800425c <_fstat_r>
 8003932:	2800      	cmp	r0, #0
 8003934:	dbf1      	blt.n	800391a <__swhatbuf_r+0x12>
 8003936:	9a01      	ldr	r2, [sp, #4]
 8003938:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800393c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003940:	425a      	negs	r2, r3
 8003942:	415a      	adcs	r2, r3
 8003944:	602a      	str	r2, [r5, #0]
 8003946:	e7ee      	b.n	8003926 <__swhatbuf_r+0x1e>
 8003948:	2340      	movs	r3, #64	; 0x40
 800394a:	2000      	movs	r0, #0
 800394c:	6023      	str	r3, [r4, #0]
 800394e:	b016      	add	sp, #88	; 0x58
 8003950:	bd70      	pop	{r4, r5, r6, pc}
	...

08003954 <__smakebuf_r>:
 8003954:	898b      	ldrh	r3, [r1, #12]
 8003956:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003958:	079d      	lsls	r5, r3, #30
 800395a:	4606      	mov	r6, r0
 800395c:	460c      	mov	r4, r1
 800395e:	d507      	bpl.n	8003970 <__smakebuf_r+0x1c>
 8003960:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003964:	6023      	str	r3, [r4, #0]
 8003966:	6123      	str	r3, [r4, #16]
 8003968:	2301      	movs	r3, #1
 800396a:	6163      	str	r3, [r4, #20]
 800396c:	b002      	add	sp, #8
 800396e:	bd70      	pop	{r4, r5, r6, pc}
 8003970:	ab01      	add	r3, sp, #4
 8003972:	466a      	mov	r2, sp
 8003974:	f7ff ffc8 	bl	8003908 <__swhatbuf_r>
 8003978:	9900      	ldr	r1, [sp, #0]
 800397a:	4605      	mov	r5, r0
 800397c:	4630      	mov	r0, r6
 800397e:	f000 f895 	bl	8003aac <_malloc_r>
 8003982:	b948      	cbnz	r0, 8003998 <__smakebuf_r+0x44>
 8003984:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003988:	059a      	lsls	r2, r3, #22
 800398a:	d4ef      	bmi.n	800396c <__smakebuf_r+0x18>
 800398c:	f023 0303 	bic.w	r3, r3, #3
 8003990:	f043 0302 	orr.w	r3, r3, #2
 8003994:	81a3      	strh	r3, [r4, #12]
 8003996:	e7e3      	b.n	8003960 <__smakebuf_r+0xc>
 8003998:	4b0d      	ldr	r3, [pc, #52]	; (80039d0 <__smakebuf_r+0x7c>)
 800399a:	62b3      	str	r3, [r6, #40]	; 0x28
 800399c:	89a3      	ldrh	r3, [r4, #12]
 800399e:	6020      	str	r0, [r4, #0]
 80039a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039a4:	81a3      	strh	r3, [r4, #12]
 80039a6:	9b00      	ldr	r3, [sp, #0]
 80039a8:	6163      	str	r3, [r4, #20]
 80039aa:	9b01      	ldr	r3, [sp, #4]
 80039ac:	6120      	str	r0, [r4, #16]
 80039ae:	b15b      	cbz	r3, 80039c8 <__smakebuf_r+0x74>
 80039b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80039b4:	4630      	mov	r0, r6
 80039b6:	f000 fc63 	bl	8004280 <_isatty_r>
 80039ba:	b128      	cbz	r0, 80039c8 <__smakebuf_r+0x74>
 80039bc:	89a3      	ldrh	r3, [r4, #12]
 80039be:	f023 0303 	bic.w	r3, r3, #3
 80039c2:	f043 0301 	orr.w	r3, r3, #1
 80039c6:	81a3      	strh	r3, [r4, #12]
 80039c8:	89a0      	ldrh	r0, [r4, #12]
 80039ca:	4305      	orrs	r5, r0
 80039cc:	81a5      	strh	r5, [r4, #12]
 80039ce:	e7cd      	b.n	800396c <__smakebuf_r+0x18>
 80039d0:	08003761 	.word	0x08003761

080039d4 <_free_r>:
 80039d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80039d6:	2900      	cmp	r1, #0
 80039d8:	d044      	beq.n	8003a64 <_free_r+0x90>
 80039da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80039de:	9001      	str	r0, [sp, #4]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	f1a1 0404 	sub.w	r4, r1, #4
 80039e6:	bfb8      	it	lt
 80039e8:	18e4      	addlt	r4, r4, r3
 80039ea:	f000 fc6b 	bl	80042c4 <__malloc_lock>
 80039ee:	4a1e      	ldr	r2, [pc, #120]	; (8003a68 <_free_r+0x94>)
 80039f0:	9801      	ldr	r0, [sp, #4]
 80039f2:	6813      	ldr	r3, [r2, #0]
 80039f4:	b933      	cbnz	r3, 8003a04 <_free_r+0x30>
 80039f6:	6063      	str	r3, [r4, #4]
 80039f8:	6014      	str	r4, [r2, #0]
 80039fa:	b003      	add	sp, #12
 80039fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003a00:	f000 bc66 	b.w	80042d0 <__malloc_unlock>
 8003a04:	42a3      	cmp	r3, r4
 8003a06:	d908      	bls.n	8003a1a <_free_r+0x46>
 8003a08:	6825      	ldr	r5, [r4, #0]
 8003a0a:	1961      	adds	r1, r4, r5
 8003a0c:	428b      	cmp	r3, r1
 8003a0e:	bf01      	itttt	eq
 8003a10:	6819      	ldreq	r1, [r3, #0]
 8003a12:	685b      	ldreq	r3, [r3, #4]
 8003a14:	1949      	addeq	r1, r1, r5
 8003a16:	6021      	streq	r1, [r4, #0]
 8003a18:	e7ed      	b.n	80039f6 <_free_r+0x22>
 8003a1a:	461a      	mov	r2, r3
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	b10b      	cbz	r3, 8003a24 <_free_r+0x50>
 8003a20:	42a3      	cmp	r3, r4
 8003a22:	d9fa      	bls.n	8003a1a <_free_r+0x46>
 8003a24:	6811      	ldr	r1, [r2, #0]
 8003a26:	1855      	adds	r5, r2, r1
 8003a28:	42a5      	cmp	r5, r4
 8003a2a:	d10b      	bne.n	8003a44 <_free_r+0x70>
 8003a2c:	6824      	ldr	r4, [r4, #0]
 8003a2e:	4421      	add	r1, r4
 8003a30:	1854      	adds	r4, r2, r1
 8003a32:	42a3      	cmp	r3, r4
 8003a34:	6011      	str	r1, [r2, #0]
 8003a36:	d1e0      	bne.n	80039fa <_free_r+0x26>
 8003a38:	681c      	ldr	r4, [r3, #0]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	6053      	str	r3, [r2, #4]
 8003a3e:	4421      	add	r1, r4
 8003a40:	6011      	str	r1, [r2, #0]
 8003a42:	e7da      	b.n	80039fa <_free_r+0x26>
 8003a44:	d902      	bls.n	8003a4c <_free_r+0x78>
 8003a46:	230c      	movs	r3, #12
 8003a48:	6003      	str	r3, [r0, #0]
 8003a4a:	e7d6      	b.n	80039fa <_free_r+0x26>
 8003a4c:	6825      	ldr	r5, [r4, #0]
 8003a4e:	1961      	adds	r1, r4, r5
 8003a50:	428b      	cmp	r3, r1
 8003a52:	bf04      	itt	eq
 8003a54:	6819      	ldreq	r1, [r3, #0]
 8003a56:	685b      	ldreq	r3, [r3, #4]
 8003a58:	6063      	str	r3, [r4, #4]
 8003a5a:	bf04      	itt	eq
 8003a5c:	1949      	addeq	r1, r1, r5
 8003a5e:	6021      	streq	r1, [r4, #0]
 8003a60:	6054      	str	r4, [r2, #4]
 8003a62:	e7ca      	b.n	80039fa <_free_r+0x26>
 8003a64:	b003      	add	sp, #12
 8003a66:	bd30      	pop	{r4, r5, pc}
 8003a68:	20000130 	.word	0x20000130

08003a6c <sbrk_aligned>:
 8003a6c:	b570      	push	{r4, r5, r6, lr}
 8003a6e:	4e0e      	ldr	r6, [pc, #56]	; (8003aa8 <sbrk_aligned+0x3c>)
 8003a70:	460c      	mov	r4, r1
 8003a72:	6831      	ldr	r1, [r6, #0]
 8003a74:	4605      	mov	r5, r0
 8003a76:	b911      	cbnz	r1, 8003a7e <sbrk_aligned+0x12>
 8003a78:	f000 fb7a 	bl	8004170 <_sbrk_r>
 8003a7c:	6030      	str	r0, [r6, #0]
 8003a7e:	4621      	mov	r1, r4
 8003a80:	4628      	mov	r0, r5
 8003a82:	f000 fb75 	bl	8004170 <_sbrk_r>
 8003a86:	1c43      	adds	r3, r0, #1
 8003a88:	d00a      	beq.n	8003aa0 <sbrk_aligned+0x34>
 8003a8a:	1cc4      	adds	r4, r0, #3
 8003a8c:	f024 0403 	bic.w	r4, r4, #3
 8003a90:	42a0      	cmp	r0, r4
 8003a92:	d007      	beq.n	8003aa4 <sbrk_aligned+0x38>
 8003a94:	1a21      	subs	r1, r4, r0
 8003a96:	4628      	mov	r0, r5
 8003a98:	f000 fb6a 	bl	8004170 <_sbrk_r>
 8003a9c:	3001      	adds	r0, #1
 8003a9e:	d101      	bne.n	8003aa4 <sbrk_aligned+0x38>
 8003aa0:	f04f 34ff 	mov.w	r4, #4294967295
 8003aa4:	4620      	mov	r0, r4
 8003aa6:	bd70      	pop	{r4, r5, r6, pc}
 8003aa8:	20000134 	.word	0x20000134

08003aac <_malloc_r>:
 8003aac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ab0:	1ccd      	adds	r5, r1, #3
 8003ab2:	f025 0503 	bic.w	r5, r5, #3
 8003ab6:	3508      	adds	r5, #8
 8003ab8:	2d0c      	cmp	r5, #12
 8003aba:	bf38      	it	cc
 8003abc:	250c      	movcc	r5, #12
 8003abe:	2d00      	cmp	r5, #0
 8003ac0:	4607      	mov	r7, r0
 8003ac2:	db01      	blt.n	8003ac8 <_malloc_r+0x1c>
 8003ac4:	42a9      	cmp	r1, r5
 8003ac6:	d905      	bls.n	8003ad4 <_malloc_r+0x28>
 8003ac8:	230c      	movs	r3, #12
 8003aca:	603b      	str	r3, [r7, #0]
 8003acc:	2600      	movs	r6, #0
 8003ace:	4630      	mov	r0, r6
 8003ad0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ad4:	4e2e      	ldr	r6, [pc, #184]	; (8003b90 <_malloc_r+0xe4>)
 8003ad6:	f000 fbf5 	bl	80042c4 <__malloc_lock>
 8003ada:	6833      	ldr	r3, [r6, #0]
 8003adc:	461c      	mov	r4, r3
 8003ade:	bb34      	cbnz	r4, 8003b2e <_malloc_r+0x82>
 8003ae0:	4629      	mov	r1, r5
 8003ae2:	4638      	mov	r0, r7
 8003ae4:	f7ff ffc2 	bl	8003a6c <sbrk_aligned>
 8003ae8:	1c43      	adds	r3, r0, #1
 8003aea:	4604      	mov	r4, r0
 8003aec:	d14d      	bne.n	8003b8a <_malloc_r+0xde>
 8003aee:	6834      	ldr	r4, [r6, #0]
 8003af0:	4626      	mov	r6, r4
 8003af2:	2e00      	cmp	r6, #0
 8003af4:	d140      	bne.n	8003b78 <_malloc_r+0xcc>
 8003af6:	6823      	ldr	r3, [r4, #0]
 8003af8:	4631      	mov	r1, r6
 8003afa:	4638      	mov	r0, r7
 8003afc:	eb04 0803 	add.w	r8, r4, r3
 8003b00:	f000 fb36 	bl	8004170 <_sbrk_r>
 8003b04:	4580      	cmp	r8, r0
 8003b06:	d13a      	bne.n	8003b7e <_malloc_r+0xd2>
 8003b08:	6821      	ldr	r1, [r4, #0]
 8003b0a:	3503      	adds	r5, #3
 8003b0c:	1a6d      	subs	r5, r5, r1
 8003b0e:	f025 0503 	bic.w	r5, r5, #3
 8003b12:	3508      	adds	r5, #8
 8003b14:	2d0c      	cmp	r5, #12
 8003b16:	bf38      	it	cc
 8003b18:	250c      	movcc	r5, #12
 8003b1a:	4629      	mov	r1, r5
 8003b1c:	4638      	mov	r0, r7
 8003b1e:	f7ff ffa5 	bl	8003a6c <sbrk_aligned>
 8003b22:	3001      	adds	r0, #1
 8003b24:	d02b      	beq.n	8003b7e <_malloc_r+0xd2>
 8003b26:	6823      	ldr	r3, [r4, #0]
 8003b28:	442b      	add	r3, r5
 8003b2a:	6023      	str	r3, [r4, #0]
 8003b2c:	e00e      	b.n	8003b4c <_malloc_r+0xa0>
 8003b2e:	6822      	ldr	r2, [r4, #0]
 8003b30:	1b52      	subs	r2, r2, r5
 8003b32:	d41e      	bmi.n	8003b72 <_malloc_r+0xc6>
 8003b34:	2a0b      	cmp	r2, #11
 8003b36:	d916      	bls.n	8003b66 <_malloc_r+0xba>
 8003b38:	1961      	adds	r1, r4, r5
 8003b3a:	42a3      	cmp	r3, r4
 8003b3c:	6025      	str	r5, [r4, #0]
 8003b3e:	bf18      	it	ne
 8003b40:	6059      	strne	r1, [r3, #4]
 8003b42:	6863      	ldr	r3, [r4, #4]
 8003b44:	bf08      	it	eq
 8003b46:	6031      	streq	r1, [r6, #0]
 8003b48:	5162      	str	r2, [r4, r5]
 8003b4a:	604b      	str	r3, [r1, #4]
 8003b4c:	4638      	mov	r0, r7
 8003b4e:	f104 060b 	add.w	r6, r4, #11
 8003b52:	f000 fbbd 	bl	80042d0 <__malloc_unlock>
 8003b56:	f026 0607 	bic.w	r6, r6, #7
 8003b5a:	1d23      	adds	r3, r4, #4
 8003b5c:	1af2      	subs	r2, r6, r3
 8003b5e:	d0b6      	beq.n	8003ace <_malloc_r+0x22>
 8003b60:	1b9b      	subs	r3, r3, r6
 8003b62:	50a3      	str	r3, [r4, r2]
 8003b64:	e7b3      	b.n	8003ace <_malloc_r+0x22>
 8003b66:	6862      	ldr	r2, [r4, #4]
 8003b68:	42a3      	cmp	r3, r4
 8003b6a:	bf0c      	ite	eq
 8003b6c:	6032      	streq	r2, [r6, #0]
 8003b6e:	605a      	strne	r2, [r3, #4]
 8003b70:	e7ec      	b.n	8003b4c <_malloc_r+0xa0>
 8003b72:	4623      	mov	r3, r4
 8003b74:	6864      	ldr	r4, [r4, #4]
 8003b76:	e7b2      	b.n	8003ade <_malloc_r+0x32>
 8003b78:	4634      	mov	r4, r6
 8003b7a:	6876      	ldr	r6, [r6, #4]
 8003b7c:	e7b9      	b.n	8003af2 <_malloc_r+0x46>
 8003b7e:	230c      	movs	r3, #12
 8003b80:	603b      	str	r3, [r7, #0]
 8003b82:	4638      	mov	r0, r7
 8003b84:	f000 fba4 	bl	80042d0 <__malloc_unlock>
 8003b88:	e7a1      	b.n	8003ace <_malloc_r+0x22>
 8003b8a:	6025      	str	r5, [r4, #0]
 8003b8c:	e7de      	b.n	8003b4c <_malloc_r+0xa0>
 8003b8e:	bf00      	nop
 8003b90:	20000130 	.word	0x20000130

08003b94 <__sfputc_r>:
 8003b94:	6893      	ldr	r3, [r2, #8]
 8003b96:	3b01      	subs	r3, #1
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	b410      	push	{r4}
 8003b9c:	6093      	str	r3, [r2, #8]
 8003b9e:	da08      	bge.n	8003bb2 <__sfputc_r+0x1e>
 8003ba0:	6994      	ldr	r4, [r2, #24]
 8003ba2:	42a3      	cmp	r3, r4
 8003ba4:	db01      	blt.n	8003baa <__sfputc_r+0x16>
 8003ba6:	290a      	cmp	r1, #10
 8003ba8:	d103      	bne.n	8003bb2 <__sfputc_r+0x1e>
 8003baa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003bae:	f7ff bc31 	b.w	8003414 <__swbuf_r>
 8003bb2:	6813      	ldr	r3, [r2, #0]
 8003bb4:	1c58      	adds	r0, r3, #1
 8003bb6:	6010      	str	r0, [r2, #0]
 8003bb8:	7019      	strb	r1, [r3, #0]
 8003bba:	4608      	mov	r0, r1
 8003bbc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003bc0:	4770      	bx	lr

08003bc2 <__sfputs_r>:
 8003bc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bc4:	4606      	mov	r6, r0
 8003bc6:	460f      	mov	r7, r1
 8003bc8:	4614      	mov	r4, r2
 8003bca:	18d5      	adds	r5, r2, r3
 8003bcc:	42ac      	cmp	r4, r5
 8003bce:	d101      	bne.n	8003bd4 <__sfputs_r+0x12>
 8003bd0:	2000      	movs	r0, #0
 8003bd2:	e007      	b.n	8003be4 <__sfputs_r+0x22>
 8003bd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003bd8:	463a      	mov	r2, r7
 8003bda:	4630      	mov	r0, r6
 8003bdc:	f7ff ffda 	bl	8003b94 <__sfputc_r>
 8003be0:	1c43      	adds	r3, r0, #1
 8003be2:	d1f3      	bne.n	8003bcc <__sfputs_r+0xa>
 8003be4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003be8 <_vfiprintf_r>:
 8003be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bec:	460d      	mov	r5, r1
 8003bee:	b09d      	sub	sp, #116	; 0x74
 8003bf0:	4614      	mov	r4, r2
 8003bf2:	4698      	mov	r8, r3
 8003bf4:	4606      	mov	r6, r0
 8003bf6:	b118      	cbz	r0, 8003c00 <_vfiprintf_r+0x18>
 8003bf8:	6983      	ldr	r3, [r0, #24]
 8003bfa:	b90b      	cbnz	r3, 8003c00 <_vfiprintf_r+0x18>
 8003bfc:	f7ff fde4 	bl	80037c8 <__sinit>
 8003c00:	4b89      	ldr	r3, [pc, #548]	; (8003e28 <_vfiprintf_r+0x240>)
 8003c02:	429d      	cmp	r5, r3
 8003c04:	d11b      	bne.n	8003c3e <_vfiprintf_r+0x56>
 8003c06:	6875      	ldr	r5, [r6, #4]
 8003c08:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003c0a:	07d9      	lsls	r1, r3, #31
 8003c0c:	d405      	bmi.n	8003c1a <_vfiprintf_r+0x32>
 8003c0e:	89ab      	ldrh	r3, [r5, #12]
 8003c10:	059a      	lsls	r2, r3, #22
 8003c12:	d402      	bmi.n	8003c1a <_vfiprintf_r+0x32>
 8003c14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003c16:	f7ff fe75 	bl	8003904 <__retarget_lock_acquire_recursive>
 8003c1a:	89ab      	ldrh	r3, [r5, #12]
 8003c1c:	071b      	lsls	r3, r3, #28
 8003c1e:	d501      	bpl.n	8003c24 <_vfiprintf_r+0x3c>
 8003c20:	692b      	ldr	r3, [r5, #16]
 8003c22:	b9eb      	cbnz	r3, 8003c60 <_vfiprintf_r+0x78>
 8003c24:	4629      	mov	r1, r5
 8003c26:	4630      	mov	r0, r6
 8003c28:	f7ff fc46 	bl	80034b8 <__swsetup_r>
 8003c2c:	b1c0      	cbz	r0, 8003c60 <_vfiprintf_r+0x78>
 8003c2e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003c30:	07dc      	lsls	r4, r3, #31
 8003c32:	d50e      	bpl.n	8003c52 <_vfiprintf_r+0x6a>
 8003c34:	f04f 30ff 	mov.w	r0, #4294967295
 8003c38:	b01d      	add	sp, #116	; 0x74
 8003c3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c3e:	4b7b      	ldr	r3, [pc, #492]	; (8003e2c <_vfiprintf_r+0x244>)
 8003c40:	429d      	cmp	r5, r3
 8003c42:	d101      	bne.n	8003c48 <_vfiprintf_r+0x60>
 8003c44:	68b5      	ldr	r5, [r6, #8]
 8003c46:	e7df      	b.n	8003c08 <_vfiprintf_r+0x20>
 8003c48:	4b79      	ldr	r3, [pc, #484]	; (8003e30 <_vfiprintf_r+0x248>)
 8003c4a:	429d      	cmp	r5, r3
 8003c4c:	bf08      	it	eq
 8003c4e:	68f5      	ldreq	r5, [r6, #12]
 8003c50:	e7da      	b.n	8003c08 <_vfiprintf_r+0x20>
 8003c52:	89ab      	ldrh	r3, [r5, #12]
 8003c54:	0598      	lsls	r0, r3, #22
 8003c56:	d4ed      	bmi.n	8003c34 <_vfiprintf_r+0x4c>
 8003c58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003c5a:	f7ff fe54 	bl	8003906 <__retarget_lock_release_recursive>
 8003c5e:	e7e9      	b.n	8003c34 <_vfiprintf_r+0x4c>
 8003c60:	2300      	movs	r3, #0
 8003c62:	9309      	str	r3, [sp, #36]	; 0x24
 8003c64:	2320      	movs	r3, #32
 8003c66:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003c6a:	f8cd 800c 	str.w	r8, [sp, #12]
 8003c6e:	2330      	movs	r3, #48	; 0x30
 8003c70:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003e34 <_vfiprintf_r+0x24c>
 8003c74:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003c78:	f04f 0901 	mov.w	r9, #1
 8003c7c:	4623      	mov	r3, r4
 8003c7e:	469a      	mov	sl, r3
 8003c80:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003c84:	b10a      	cbz	r2, 8003c8a <_vfiprintf_r+0xa2>
 8003c86:	2a25      	cmp	r2, #37	; 0x25
 8003c88:	d1f9      	bne.n	8003c7e <_vfiprintf_r+0x96>
 8003c8a:	ebba 0b04 	subs.w	fp, sl, r4
 8003c8e:	d00b      	beq.n	8003ca8 <_vfiprintf_r+0xc0>
 8003c90:	465b      	mov	r3, fp
 8003c92:	4622      	mov	r2, r4
 8003c94:	4629      	mov	r1, r5
 8003c96:	4630      	mov	r0, r6
 8003c98:	f7ff ff93 	bl	8003bc2 <__sfputs_r>
 8003c9c:	3001      	adds	r0, #1
 8003c9e:	f000 80aa 	beq.w	8003df6 <_vfiprintf_r+0x20e>
 8003ca2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003ca4:	445a      	add	r2, fp
 8003ca6:	9209      	str	r2, [sp, #36]	; 0x24
 8003ca8:	f89a 3000 	ldrb.w	r3, [sl]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	f000 80a2 	beq.w	8003df6 <_vfiprintf_r+0x20e>
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	f04f 32ff 	mov.w	r2, #4294967295
 8003cb8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003cbc:	f10a 0a01 	add.w	sl, sl, #1
 8003cc0:	9304      	str	r3, [sp, #16]
 8003cc2:	9307      	str	r3, [sp, #28]
 8003cc4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003cc8:	931a      	str	r3, [sp, #104]	; 0x68
 8003cca:	4654      	mov	r4, sl
 8003ccc:	2205      	movs	r2, #5
 8003cce:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003cd2:	4858      	ldr	r0, [pc, #352]	; (8003e34 <_vfiprintf_r+0x24c>)
 8003cd4:	f7fc fa8c 	bl	80001f0 <memchr>
 8003cd8:	9a04      	ldr	r2, [sp, #16]
 8003cda:	b9d8      	cbnz	r0, 8003d14 <_vfiprintf_r+0x12c>
 8003cdc:	06d1      	lsls	r1, r2, #27
 8003cde:	bf44      	itt	mi
 8003ce0:	2320      	movmi	r3, #32
 8003ce2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003ce6:	0713      	lsls	r3, r2, #28
 8003ce8:	bf44      	itt	mi
 8003cea:	232b      	movmi	r3, #43	; 0x2b
 8003cec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003cf0:	f89a 3000 	ldrb.w	r3, [sl]
 8003cf4:	2b2a      	cmp	r3, #42	; 0x2a
 8003cf6:	d015      	beq.n	8003d24 <_vfiprintf_r+0x13c>
 8003cf8:	9a07      	ldr	r2, [sp, #28]
 8003cfa:	4654      	mov	r4, sl
 8003cfc:	2000      	movs	r0, #0
 8003cfe:	f04f 0c0a 	mov.w	ip, #10
 8003d02:	4621      	mov	r1, r4
 8003d04:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003d08:	3b30      	subs	r3, #48	; 0x30
 8003d0a:	2b09      	cmp	r3, #9
 8003d0c:	d94e      	bls.n	8003dac <_vfiprintf_r+0x1c4>
 8003d0e:	b1b0      	cbz	r0, 8003d3e <_vfiprintf_r+0x156>
 8003d10:	9207      	str	r2, [sp, #28]
 8003d12:	e014      	b.n	8003d3e <_vfiprintf_r+0x156>
 8003d14:	eba0 0308 	sub.w	r3, r0, r8
 8003d18:	fa09 f303 	lsl.w	r3, r9, r3
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	9304      	str	r3, [sp, #16]
 8003d20:	46a2      	mov	sl, r4
 8003d22:	e7d2      	b.n	8003cca <_vfiprintf_r+0xe2>
 8003d24:	9b03      	ldr	r3, [sp, #12]
 8003d26:	1d19      	adds	r1, r3, #4
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	9103      	str	r1, [sp, #12]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	bfbb      	ittet	lt
 8003d30:	425b      	neglt	r3, r3
 8003d32:	f042 0202 	orrlt.w	r2, r2, #2
 8003d36:	9307      	strge	r3, [sp, #28]
 8003d38:	9307      	strlt	r3, [sp, #28]
 8003d3a:	bfb8      	it	lt
 8003d3c:	9204      	strlt	r2, [sp, #16]
 8003d3e:	7823      	ldrb	r3, [r4, #0]
 8003d40:	2b2e      	cmp	r3, #46	; 0x2e
 8003d42:	d10c      	bne.n	8003d5e <_vfiprintf_r+0x176>
 8003d44:	7863      	ldrb	r3, [r4, #1]
 8003d46:	2b2a      	cmp	r3, #42	; 0x2a
 8003d48:	d135      	bne.n	8003db6 <_vfiprintf_r+0x1ce>
 8003d4a:	9b03      	ldr	r3, [sp, #12]
 8003d4c:	1d1a      	adds	r2, r3, #4
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	9203      	str	r2, [sp, #12]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	bfb8      	it	lt
 8003d56:	f04f 33ff 	movlt.w	r3, #4294967295
 8003d5a:	3402      	adds	r4, #2
 8003d5c:	9305      	str	r3, [sp, #20]
 8003d5e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003e44 <_vfiprintf_r+0x25c>
 8003d62:	7821      	ldrb	r1, [r4, #0]
 8003d64:	2203      	movs	r2, #3
 8003d66:	4650      	mov	r0, sl
 8003d68:	f7fc fa42 	bl	80001f0 <memchr>
 8003d6c:	b140      	cbz	r0, 8003d80 <_vfiprintf_r+0x198>
 8003d6e:	2340      	movs	r3, #64	; 0x40
 8003d70:	eba0 000a 	sub.w	r0, r0, sl
 8003d74:	fa03 f000 	lsl.w	r0, r3, r0
 8003d78:	9b04      	ldr	r3, [sp, #16]
 8003d7a:	4303      	orrs	r3, r0
 8003d7c:	3401      	adds	r4, #1
 8003d7e:	9304      	str	r3, [sp, #16]
 8003d80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d84:	482c      	ldr	r0, [pc, #176]	; (8003e38 <_vfiprintf_r+0x250>)
 8003d86:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003d8a:	2206      	movs	r2, #6
 8003d8c:	f7fc fa30 	bl	80001f0 <memchr>
 8003d90:	2800      	cmp	r0, #0
 8003d92:	d03f      	beq.n	8003e14 <_vfiprintf_r+0x22c>
 8003d94:	4b29      	ldr	r3, [pc, #164]	; (8003e3c <_vfiprintf_r+0x254>)
 8003d96:	bb1b      	cbnz	r3, 8003de0 <_vfiprintf_r+0x1f8>
 8003d98:	9b03      	ldr	r3, [sp, #12]
 8003d9a:	3307      	adds	r3, #7
 8003d9c:	f023 0307 	bic.w	r3, r3, #7
 8003da0:	3308      	adds	r3, #8
 8003da2:	9303      	str	r3, [sp, #12]
 8003da4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003da6:	443b      	add	r3, r7
 8003da8:	9309      	str	r3, [sp, #36]	; 0x24
 8003daa:	e767      	b.n	8003c7c <_vfiprintf_r+0x94>
 8003dac:	fb0c 3202 	mla	r2, ip, r2, r3
 8003db0:	460c      	mov	r4, r1
 8003db2:	2001      	movs	r0, #1
 8003db4:	e7a5      	b.n	8003d02 <_vfiprintf_r+0x11a>
 8003db6:	2300      	movs	r3, #0
 8003db8:	3401      	adds	r4, #1
 8003dba:	9305      	str	r3, [sp, #20]
 8003dbc:	4619      	mov	r1, r3
 8003dbe:	f04f 0c0a 	mov.w	ip, #10
 8003dc2:	4620      	mov	r0, r4
 8003dc4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003dc8:	3a30      	subs	r2, #48	; 0x30
 8003dca:	2a09      	cmp	r2, #9
 8003dcc:	d903      	bls.n	8003dd6 <_vfiprintf_r+0x1ee>
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d0c5      	beq.n	8003d5e <_vfiprintf_r+0x176>
 8003dd2:	9105      	str	r1, [sp, #20]
 8003dd4:	e7c3      	b.n	8003d5e <_vfiprintf_r+0x176>
 8003dd6:	fb0c 2101 	mla	r1, ip, r1, r2
 8003dda:	4604      	mov	r4, r0
 8003ddc:	2301      	movs	r3, #1
 8003dde:	e7f0      	b.n	8003dc2 <_vfiprintf_r+0x1da>
 8003de0:	ab03      	add	r3, sp, #12
 8003de2:	9300      	str	r3, [sp, #0]
 8003de4:	462a      	mov	r2, r5
 8003de6:	4b16      	ldr	r3, [pc, #88]	; (8003e40 <_vfiprintf_r+0x258>)
 8003de8:	a904      	add	r1, sp, #16
 8003dea:	4630      	mov	r0, r6
 8003dec:	f3af 8000 	nop.w
 8003df0:	4607      	mov	r7, r0
 8003df2:	1c78      	adds	r0, r7, #1
 8003df4:	d1d6      	bne.n	8003da4 <_vfiprintf_r+0x1bc>
 8003df6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003df8:	07d9      	lsls	r1, r3, #31
 8003dfa:	d405      	bmi.n	8003e08 <_vfiprintf_r+0x220>
 8003dfc:	89ab      	ldrh	r3, [r5, #12]
 8003dfe:	059a      	lsls	r2, r3, #22
 8003e00:	d402      	bmi.n	8003e08 <_vfiprintf_r+0x220>
 8003e02:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003e04:	f7ff fd7f 	bl	8003906 <__retarget_lock_release_recursive>
 8003e08:	89ab      	ldrh	r3, [r5, #12]
 8003e0a:	065b      	lsls	r3, r3, #25
 8003e0c:	f53f af12 	bmi.w	8003c34 <_vfiprintf_r+0x4c>
 8003e10:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003e12:	e711      	b.n	8003c38 <_vfiprintf_r+0x50>
 8003e14:	ab03      	add	r3, sp, #12
 8003e16:	9300      	str	r3, [sp, #0]
 8003e18:	462a      	mov	r2, r5
 8003e1a:	4b09      	ldr	r3, [pc, #36]	; (8003e40 <_vfiprintf_r+0x258>)
 8003e1c:	a904      	add	r1, sp, #16
 8003e1e:	4630      	mov	r0, r6
 8003e20:	f000 f880 	bl	8003f24 <_printf_i>
 8003e24:	e7e4      	b.n	8003df0 <_vfiprintf_r+0x208>
 8003e26:	bf00      	nop
 8003e28:	08004370 	.word	0x08004370
 8003e2c:	08004390 	.word	0x08004390
 8003e30:	08004350 	.word	0x08004350
 8003e34:	080043b0 	.word	0x080043b0
 8003e38:	080043ba 	.word	0x080043ba
 8003e3c:	00000000 	.word	0x00000000
 8003e40:	08003bc3 	.word	0x08003bc3
 8003e44:	080043b6 	.word	0x080043b6

08003e48 <_printf_common>:
 8003e48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e4c:	4616      	mov	r6, r2
 8003e4e:	4699      	mov	r9, r3
 8003e50:	688a      	ldr	r2, [r1, #8]
 8003e52:	690b      	ldr	r3, [r1, #16]
 8003e54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	bfb8      	it	lt
 8003e5c:	4613      	movlt	r3, r2
 8003e5e:	6033      	str	r3, [r6, #0]
 8003e60:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003e64:	4607      	mov	r7, r0
 8003e66:	460c      	mov	r4, r1
 8003e68:	b10a      	cbz	r2, 8003e6e <_printf_common+0x26>
 8003e6a:	3301      	adds	r3, #1
 8003e6c:	6033      	str	r3, [r6, #0]
 8003e6e:	6823      	ldr	r3, [r4, #0]
 8003e70:	0699      	lsls	r1, r3, #26
 8003e72:	bf42      	ittt	mi
 8003e74:	6833      	ldrmi	r3, [r6, #0]
 8003e76:	3302      	addmi	r3, #2
 8003e78:	6033      	strmi	r3, [r6, #0]
 8003e7a:	6825      	ldr	r5, [r4, #0]
 8003e7c:	f015 0506 	ands.w	r5, r5, #6
 8003e80:	d106      	bne.n	8003e90 <_printf_common+0x48>
 8003e82:	f104 0a19 	add.w	sl, r4, #25
 8003e86:	68e3      	ldr	r3, [r4, #12]
 8003e88:	6832      	ldr	r2, [r6, #0]
 8003e8a:	1a9b      	subs	r3, r3, r2
 8003e8c:	42ab      	cmp	r3, r5
 8003e8e:	dc26      	bgt.n	8003ede <_printf_common+0x96>
 8003e90:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003e94:	1e13      	subs	r3, r2, #0
 8003e96:	6822      	ldr	r2, [r4, #0]
 8003e98:	bf18      	it	ne
 8003e9a:	2301      	movne	r3, #1
 8003e9c:	0692      	lsls	r2, r2, #26
 8003e9e:	d42b      	bmi.n	8003ef8 <_printf_common+0xb0>
 8003ea0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003ea4:	4649      	mov	r1, r9
 8003ea6:	4638      	mov	r0, r7
 8003ea8:	47c0      	blx	r8
 8003eaa:	3001      	adds	r0, #1
 8003eac:	d01e      	beq.n	8003eec <_printf_common+0xa4>
 8003eae:	6823      	ldr	r3, [r4, #0]
 8003eb0:	68e5      	ldr	r5, [r4, #12]
 8003eb2:	6832      	ldr	r2, [r6, #0]
 8003eb4:	f003 0306 	and.w	r3, r3, #6
 8003eb8:	2b04      	cmp	r3, #4
 8003eba:	bf08      	it	eq
 8003ebc:	1aad      	subeq	r5, r5, r2
 8003ebe:	68a3      	ldr	r3, [r4, #8]
 8003ec0:	6922      	ldr	r2, [r4, #16]
 8003ec2:	bf0c      	ite	eq
 8003ec4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003ec8:	2500      	movne	r5, #0
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	bfc4      	itt	gt
 8003ece:	1a9b      	subgt	r3, r3, r2
 8003ed0:	18ed      	addgt	r5, r5, r3
 8003ed2:	2600      	movs	r6, #0
 8003ed4:	341a      	adds	r4, #26
 8003ed6:	42b5      	cmp	r5, r6
 8003ed8:	d11a      	bne.n	8003f10 <_printf_common+0xc8>
 8003eda:	2000      	movs	r0, #0
 8003edc:	e008      	b.n	8003ef0 <_printf_common+0xa8>
 8003ede:	2301      	movs	r3, #1
 8003ee0:	4652      	mov	r2, sl
 8003ee2:	4649      	mov	r1, r9
 8003ee4:	4638      	mov	r0, r7
 8003ee6:	47c0      	blx	r8
 8003ee8:	3001      	adds	r0, #1
 8003eea:	d103      	bne.n	8003ef4 <_printf_common+0xac>
 8003eec:	f04f 30ff 	mov.w	r0, #4294967295
 8003ef0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ef4:	3501      	adds	r5, #1
 8003ef6:	e7c6      	b.n	8003e86 <_printf_common+0x3e>
 8003ef8:	18e1      	adds	r1, r4, r3
 8003efa:	1c5a      	adds	r2, r3, #1
 8003efc:	2030      	movs	r0, #48	; 0x30
 8003efe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003f02:	4422      	add	r2, r4
 8003f04:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003f08:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003f0c:	3302      	adds	r3, #2
 8003f0e:	e7c7      	b.n	8003ea0 <_printf_common+0x58>
 8003f10:	2301      	movs	r3, #1
 8003f12:	4622      	mov	r2, r4
 8003f14:	4649      	mov	r1, r9
 8003f16:	4638      	mov	r0, r7
 8003f18:	47c0      	blx	r8
 8003f1a:	3001      	adds	r0, #1
 8003f1c:	d0e6      	beq.n	8003eec <_printf_common+0xa4>
 8003f1e:	3601      	adds	r6, #1
 8003f20:	e7d9      	b.n	8003ed6 <_printf_common+0x8e>
	...

08003f24 <_printf_i>:
 8003f24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003f28:	7e0f      	ldrb	r7, [r1, #24]
 8003f2a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003f2c:	2f78      	cmp	r7, #120	; 0x78
 8003f2e:	4691      	mov	r9, r2
 8003f30:	4680      	mov	r8, r0
 8003f32:	460c      	mov	r4, r1
 8003f34:	469a      	mov	sl, r3
 8003f36:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003f3a:	d807      	bhi.n	8003f4c <_printf_i+0x28>
 8003f3c:	2f62      	cmp	r7, #98	; 0x62
 8003f3e:	d80a      	bhi.n	8003f56 <_printf_i+0x32>
 8003f40:	2f00      	cmp	r7, #0
 8003f42:	f000 80d8 	beq.w	80040f6 <_printf_i+0x1d2>
 8003f46:	2f58      	cmp	r7, #88	; 0x58
 8003f48:	f000 80a3 	beq.w	8004092 <_printf_i+0x16e>
 8003f4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f50:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003f54:	e03a      	b.n	8003fcc <_printf_i+0xa8>
 8003f56:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003f5a:	2b15      	cmp	r3, #21
 8003f5c:	d8f6      	bhi.n	8003f4c <_printf_i+0x28>
 8003f5e:	a101      	add	r1, pc, #4	; (adr r1, 8003f64 <_printf_i+0x40>)
 8003f60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003f64:	08003fbd 	.word	0x08003fbd
 8003f68:	08003fd1 	.word	0x08003fd1
 8003f6c:	08003f4d 	.word	0x08003f4d
 8003f70:	08003f4d 	.word	0x08003f4d
 8003f74:	08003f4d 	.word	0x08003f4d
 8003f78:	08003f4d 	.word	0x08003f4d
 8003f7c:	08003fd1 	.word	0x08003fd1
 8003f80:	08003f4d 	.word	0x08003f4d
 8003f84:	08003f4d 	.word	0x08003f4d
 8003f88:	08003f4d 	.word	0x08003f4d
 8003f8c:	08003f4d 	.word	0x08003f4d
 8003f90:	080040dd 	.word	0x080040dd
 8003f94:	08004001 	.word	0x08004001
 8003f98:	080040bf 	.word	0x080040bf
 8003f9c:	08003f4d 	.word	0x08003f4d
 8003fa0:	08003f4d 	.word	0x08003f4d
 8003fa4:	080040ff 	.word	0x080040ff
 8003fa8:	08003f4d 	.word	0x08003f4d
 8003fac:	08004001 	.word	0x08004001
 8003fb0:	08003f4d 	.word	0x08003f4d
 8003fb4:	08003f4d 	.word	0x08003f4d
 8003fb8:	080040c7 	.word	0x080040c7
 8003fbc:	682b      	ldr	r3, [r5, #0]
 8003fbe:	1d1a      	adds	r2, r3, #4
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	602a      	str	r2, [r5, #0]
 8003fc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003fc8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e0a3      	b.n	8004118 <_printf_i+0x1f4>
 8003fd0:	6820      	ldr	r0, [r4, #0]
 8003fd2:	6829      	ldr	r1, [r5, #0]
 8003fd4:	0606      	lsls	r6, r0, #24
 8003fd6:	f101 0304 	add.w	r3, r1, #4
 8003fda:	d50a      	bpl.n	8003ff2 <_printf_i+0xce>
 8003fdc:	680e      	ldr	r6, [r1, #0]
 8003fde:	602b      	str	r3, [r5, #0]
 8003fe0:	2e00      	cmp	r6, #0
 8003fe2:	da03      	bge.n	8003fec <_printf_i+0xc8>
 8003fe4:	232d      	movs	r3, #45	; 0x2d
 8003fe6:	4276      	negs	r6, r6
 8003fe8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003fec:	485e      	ldr	r0, [pc, #376]	; (8004168 <_printf_i+0x244>)
 8003fee:	230a      	movs	r3, #10
 8003ff0:	e019      	b.n	8004026 <_printf_i+0x102>
 8003ff2:	680e      	ldr	r6, [r1, #0]
 8003ff4:	602b      	str	r3, [r5, #0]
 8003ff6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003ffa:	bf18      	it	ne
 8003ffc:	b236      	sxthne	r6, r6
 8003ffe:	e7ef      	b.n	8003fe0 <_printf_i+0xbc>
 8004000:	682b      	ldr	r3, [r5, #0]
 8004002:	6820      	ldr	r0, [r4, #0]
 8004004:	1d19      	adds	r1, r3, #4
 8004006:	6029      	str	r1, [r5, #0]
 8004008:	0601      	lsls	r1, r0, #24
 800400a:	d501      	bpl.n	8004010 <_printf_i+0xec>
 800400c:	681e      	ldr	r6, [r3, #0]
 800400e:	e002      	b.n	8004016 <_printf_i+0xf2>
 8004010:	0646      	lsls	r6, r0, #25
 8004012:	d5fb      	bpl.n	800400c <_printf_i+0xe8>
 8004014:	881e      	ldrh	r6, [r3, #0]
 8004016:	4854      	ldr	r0, [pc, #336]	; (8004168 <_printf_i+0x244>)
 8004018:	2f6f      	cmp	r7, #111	; 0x6f
 800401a:	bf0c      	ite	eq
 800401c:	2308      	moveq	r3, #8
 800401e:	230a      	movne	r3, #10
 8004020:	2100      	movs	r1, #0
 8004022:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004026:	6865      	ldr	r5, [r4, #4]
 8004028:	60a5      	str	r5, [r4, #8]
 800402a:	2d00      	cmp	r5, #0
 800402c:	bfa2      	ittt	ge
 800402e:	6821      	ldrge	r1, [r4, #0]
 8004030:	f021 0104 	bicge.w	r1, r1, #4
 8004034:	6021      	strge	r1, [r4, #0]
 8004036:	b90e      	cbnz	r6, 800403c <_printf_i+0x118>
 8004038:	2d00      	cmp	r5, #0
 800403a:	d04d      	beq.n	80040d8 <_printf_i+0x1b4>
 800403c:	4615      	mov	r5, r2
 800403e:	fbb6 f1f3 	udiv	r1, r6, r3
 8004042:	fb03 6711 	mls	r7, r3, r1, r6
 8004046:	5dc7      	ldrb	r7, [r0, r7]
 8004048:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800404c:	4637      	mov	r7, r6
 800404e:	42bb      	cmp	r3, r7
 8004050:	460e      	mov	r6, r1
 8004052:	d9f4      	bls.n	800403e <_printf_i+0x11a>
 8004054:	2b08      	cmp	r3, #8
 8004056:	d10b      	bne.n	8004070 <_printf_i+0x14c>
 8004058:	6823      	ldr	r3, [r4, #0]
 800405a:	07de      	lsls	r6, r3, #31
 800405c:	d508      	bpl.n	8004070 <_printf_i+0x14c>
 800405e:	6923      	ldr	r3, [r4, #16]
 8004060:	6861      	ldr	r1, [r4, #4]
 8004062:	4299      	cmp	r1, r3
 8004064:	bfde      	ittt	le
 8004066:	2330      	movle	r3, #48	; 0x30
 8004068:	f805 3c01 	strble.w	r3, [r5, #-1]
 800406c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004070:	1b52      	subs	r2, r2, r5
 8004072:	6122      	str	r2, [r4, #16]
 8004074:	f8cd a000 	str.w	sl, [sp]
 8004078:	464b      	mov	r3, r9
 800407a:	aa03      	add	r2, sp, #12
 800407c:	4621      	mov	r1, r4
 800407e:	4640      	mov	r0, r8
 8004080:	f7ff fee2 	bl	8003e48 <_printf_common>
 8004084:	3001      	adds	r0, #1
 8004086:	d14c      	bne.n	8004122 <_printf_i+0x1fe>
 8004088:	f04f 30ff 	mov.w	r0, #4294967295
 800408c:	b004      	add	sp, #16
 800408e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004092:	4835      	ldr	r0, [pc, #212]	; (8004168 <_printf_i+0x244>)
 8004094:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004098:	6829      	ldr	r1, [r5, #0]
 800409a:	6823      	ldr	r3, [r4, #0]
 800409c:	f851 6b04 	ldr.w	r6, [r1], #4
 80040a0:	6029      	str	r1, [r5, #0]
 80040a2:	061d      	lsls	r5, r3, #24
 80040a4:	d514      	bpl.n	80040d0 <_printf_i+0x1ac>
 80040a6:	07df      	lsls	r7, r3, #31
 80040a8:	bf44      	itt	mi
 80040aa:	f043 0320 	orrmi.w	r3, r3, #32
 80040ae:	6023      	strmi	r3, [r4, #0]
 80040b0:	b91e      	cbnz	r6, 80040ba <_printf_i+0x196>
 80040b2:	6823      	ldr	r3, [r4, #0]
 80040b4:	f023 0320 	bic.w	r3, r3, #32
 80040b8:	6023      	str	r3, [r4, #0]
 80040ba:	2310      	movs	r3, #16
 80040bc:	e7b0      	b.n	8004020 <_printf_i+0xfc>
 80040be:	6823      	ldr	r3, [r4, #0]
 80040c0:	f043 0320 	orr.w	r3, r3, #32
 80040c4:	6023      	str	r3, [r4, #0]
 80040c6:	2378      	movs	r3, #120	; 0x78
 80040c8:	4828      	ldr	r0, [pc, #160]	; (800416c <_printf_i+0x248>)
 80040ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80040ce:	e7e3      	b.n	8004098 <_printf_i+0x174>
 80040d0:	0659      	lsls	r1, r3, #25
 80040d2:	bf48      	it	mi
 80040d4:	b2b6      	uxthmi	r6, r6
 80040d6:	e7e6      	b.n	80040a6 <_printf_i+0x182>
 80040d8:	4615      	mov	r5, r2
 80040da:	e7bb      	b.n	8004054 <_printf_i+0x130>
 80040dc:	682b      	ldr	r3, [r5, #0]
 80040de:	6826      	ldr	r6, [r4, #0]
 80040e0:	6961      	ldr	r1, [r4, #20]
 80040e2:	1d18      	adds	r0, r3, #4
 80040e4:	6028      	str	r0, [r5, #0]
 80040e6:	0635      	lsls	r5, r6, #24
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	d501      	bpl.n	80040f0 <_printf_i+0x1cc>
 80040ec:	6019      	str	r1, [r3, #0]
 80040ee:	e002      	b.n	80040f6 <_printf_i+0x1d2>
 80040f0:	0670      	lsls	r0, r6, #25
 80040f2:	d5fb      	bpl.n	80040ec <_printf_i+0x1c8>
 80040f4:	8019      	strh	r1, [r3, #0]
 80040f6:	2300      	movs	r3, #0
 80040f8:	6123      	str	r3, [r4, #16]
 80040fa:	4615      	mov	r5, r2
 80040fc:	e7ba      	b.n	8004074 <_printf_i+0x150>
 80040fe:	682b      	ldr	r3, [r5, #0]
 8004100:	1d1a      	adds	r2, r3, #4
 8004102:	602a      	str	r2, [r5, #0]
 8004104:	681d      	ldr	r5, [r3, #0]
 8004106:	6862      	ldr	r2, [r4, #4]
 8004108:	2100      	movs	r1, #0
 800410a:	4628      	mov	r0, r5
 800410c:	f7fc f870 	bl	80001f0 <memchr>
 8004110:	b108      	cbz	r0, 8004116 <_printf_i+0x1f2>
 8004112:	1b40      	subs	r0, r0, r5
 8004114:	6060      	str	r0, [r4, #4]
 8004116:	6863      	ldr	r3, [r4, #4]
 8004118:	6123      	str	r3, [r4, #16]
 800411a:	2300      	movs	r3, #0
 800411c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004120:	e7a8      	b.n	8004074 <_printf_i+0x150>
 8004122:	6923      	ldr	r3, [r4, #16]
 8004124:	462a      	mov	r2, r5
 8004126:	4649      	mov	r1, r9
 8004128:	4640      	mov	r0, r8
 800412a:	47d0      	blx	sl
 800412c:	3001      	adds	r0, #1
 800412e:	d0ab      	beq.n	8004088 <_printf_i+0x164>
 8004130:	6823      	ldr	r3, [r4, #0]
 8004132:	079b      	lsls	r3, r3, #30
 8004134:	d413      	bmi.n	800415e <_printf_i+0x23a>
 8004136:	68e0      	ldr	r0, [r4, #12]
 8004138:	9b03      	ldr	r3, [sp, #12]
 800413a:	4298      	cmp	r0, r3
 800413c:	bfb8      	it	lt
 800413e:	4618      	movlt	r0, r3
 8004140:	e7a4      	b.n	800408c <_printf_i+0x168>
 8004142:	2301      	movs	r3, #1
 8004144:	4632      	mov	r2, r6
 8004146:	4649      	mov	r1, r9
 8004148:	4640      	mov	r0, r8
 800414a:	47d0      	blx	sl
 800414c:	3001      	adds	r0, #1
 800414e:	d09b      	beq.n	8004088 <_printf_i+0x164>
 8004150:	3501      	adds	r5, #1
 8004152:	68e3      	ldr	r3, [r4, #12]
 8004154:	9903      	ldr	r1, [sp, #12]
 8004156:	1a5b      	subs	r3, r3, r1
 8004158:	42ab      	cmp	r3, r5
 800415a:	dcf2      	bgt.n	8004142 <_printf_i+0x21e>
 800415c:	e7eb      	b.n	8004136 <_printf_i+0x212>
 800415e:	2500      	movs	r5, #0
 8004160:	f104 0619 	add.w	r6, r4, #25
 8004164:	e7f5      	b.n	8004152 <_printf_i+0x22e>
 8004166:	bf00      	nop
 8004168:	080043c1 	.word	0x080043c1
 800416c:	080043d2 	.word	0x080043d2

08004170 <_sbrk_r>:
 8004170:	b538      	push	{r3, r4, r5, lr}
 8004172:	4d06      	ldr	r5, [pc, #24]	; (800418c <_sbrk_r+0x1c>)
 8004174:	2300      	movs	r3, #0
 8004176:	4604      	mov	r4, r0
 8004178:	4608      	mov	r0, r1
 800417a:	602b      	str	r3, [r5, #0]
 800417c:	f7fc fd08 	bl	8000b90 <_sbrk>
 8004180:	1c43      	adds	r3, r0, #1
 8004182:	d102      	bne.n	800418a <_sbrk_r+0x1a>
 8004184:	682b      	ldr	r3, [r5, #0]
 8004186:	b103      	cbz	r3, 800418a <_sbrk_r+0x1a>
 8004188:	6023      	str	r3, [r4, #0]
 800418a:	bd38      	pop	{r3, r4, r5, pc}
 800418c:	20000138 	.word	0x20000138

08004190 <__sread>:
 8004190:	b510      	push	{r4, lr}
 8004192:	460c      	mov	r4, r1
 8004194:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004198:	f000 f8a0 	bl	80042dc <_read_r>
 800419c:	2800      	cmp	r0, #0
 800419e:	bfab      	itete	ge
 80041a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80041a2:	89a3      	ldrhlt	r3, [r4, #12]
 80041a4:	181b      	addge	r3, r3, r0
 80041a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80041aa:	bfac      	ite	ge
 80041ac:	6563      	strge	r3, [r4, #84]	; 0x54
 80041ae:	81a3      	strhlt	r3, [r4, #12]
 80041b0:	bd10      	pop	{r4, pc}

080041b2 <__swrite>:
 80041b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041b6:	461f      	mov	r7, r3
 80041b8:	898b      	ldrh	r3, [r1, #12]
 80041ba:	05db      	lsls	r3, r3, #23
 80041bc:	4605      	mov	r5, r0
 80041be:	460c      	mov	r4, r1
 80041c0:	4616      	mov	r6, r2
 80041c2:	d505      	bpl.n	80041d0 <__swrite+0x1e>
 80041c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041c8:	2302      	movs	r3, #2
 80041ca:	2200      	movs	r2, #0
 80041cc:	f000 f868 	bl	80042a0 <_lseek_r>
 80041d0:	89a3      	ldrh	r3, [r4, #12]
 80041d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80041d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80041da:	81a3      	strh	r3, [r4, #12]
 80041dc:	4632      	mov	r2, r6
 80041de:	463b      	mov	r3, r7
 80041e0:	4628      	mov	r0, r5
 80041e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80041e6:	f000 b817 	b.w	8004218 <_write_r>

080041ea <__sseek>:
 80041ea:	b510      	push	{r4, lr}
 80041ec:	460c      	mov	r4, r1
 80041ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041f2:	f000 f855 	bl	80042a0 <_lseek_r>
 80041f6:	1c43      	adds	r3, r0, #1
 80041f8:	89a3      	ldrh	r3, [r4, #12]
 80041fa:	bf15      	itete	ne
 80041fc:	6560      	strne	r0, [r4, #84]	; 0x54
 80041fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004202:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004206:	81a3      	strheq	r3, [r4, #12]
 8004208:	bf18      	it	ne
 800420a:	81a3      	strhne	r3, [r4, #12]
 800420c:	bd10      	pop	{r4, pc}

0800420e <__sclose>:
 800420e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004212:	f000 b813 	b.w	800423c <_close_r>
	...

08004218 <_write_r>:
 8004218:	b538      	push	{r3, r4, r5, lr}
 800421a:	4d07      	ldr	r5, [pc, #28]	; (8004238 <_write_r+0x20>)
 800421c:	4604      	mov	r4, r0
 800421e:	4608      	mov	r0, r1
 8004220:	4611      	mov	r1, r2
 8004222:	2200      	movs	r2, #0
 8004224:	602a      	str	r2, [r5, #0]
 8004226:	461a      	mov	r2, r3
 8004228:	f7fc fbce 	bl	80009c8 <_write>
 800422c:	1c43      	adds	r3, r0, #1
 800422e:	d102      	bne.n	8004236 <_write_r+0x1e>
 8004230:	682b      	ldr	r3, [r5, #0]
 8004232:	b103      	cbz	r3, 8004236 <_write_r+0x1e>
 8004234:	6023      	str	r3, [r4, #0]
 8004236:	bd38      	pop	{r3, r4, r5, pc}
 8004238:	20000138 	.word	0x20000138

0800423c <_close_r>:
 800423c:	b538      	push	{r3, r4, r5, lr}
 800423e:	4d06      	ldr	r5, [pc, #24]	; (8004258 <_close_r+0x1c>)
 8004240:	2300      	movs	r3, #0
 8004242:	4604      	mov	r4, r0
 8004244:	4608      	mov	r0, r1
 8004246:	602b      	str	r3, [r5, #0]
 8004248:	f7fc fc6e 	bl	8000b28 <_close>
 800424c:	1c43      	adds	r3, r0, #1
 800424e:	d102      	bne.n	8004256 <_close_r+0x1a>
 8004250:	682b      	ldr	r3, [r5, #0]
 8004252:	b103      	cbz	r3, 8004256 <_close_r+0x1a>
 8004254:	6023      	str	r3, [r4, #0]
 8004256:	bd38      	pop	{r3, r4, r5, pc}
 8004258:	20000138 	.word	0x20000138

0800425c <_fstat_r>:
 800425c:	b538      	push	{r3, r4, r5, lr}
 800425e:	4d07      	ldr	r5, [pc, #28]	; (800427c <_fstat_r+0x20>)
 8004260:	2300      	movs	r3, #0
 8004262:	4604      	mov	r4, r0
 8004264:	4608      	mov	r0, r1
 8004266:	4611      	mov	r1, r2
 8004268:	602b      	str	r3, [r5, #0]
 800426a:	f7fc fc69 	bl	8000b40 <_fstat>
 800426e:	1c43      	adds	r3, r0, #1
 8004270:	d102      	bne.n	8004278 <_fstat_r+0x1c>
 8004272:	682b      	ldr	r3, [r5, #0]
 8004274:	b103      	cbz	r3, 8004278 <_fstat_r+0x1c>
 8004276:	6023      	str	r3, [r4, #0]
 8004278:	bd38      	pop	{r3, r4, r5, pc}
 800427a:	bf00      	nop
 800427c:	20000138 	.word	0x20000138

08004280 <_isatty_r>:
 8004280:	b538      	push	{r3, r4, r5, lr}
 8004282:	4d06      	ldr	r5, [pc, #24]	; (800429c <_isatty_r+0x1c>)
 8004284:	2300      	movs	r3, #0
 8004286:	4604      	mov	r4, r0
 8004288:	4608      	mov	r0, r1
 800428a:	602b      	str	r3, [r5, #0]
 800428c:	f7fc fc68 	bl	8000b60 <_isatty>
 8004290:	1c43      	adds	r3, r0, #1
 8004292:	d102      	bne.n	800429a <_isatty_r+0x1a>
 8004294:	682b      	ldr	r3, [r5, #0]
 8004296:	b103      	cbz	r3, 800429a <_isatty_r+0x1a>
 8004298:	6023      	str	r3, [r4, #0]
 800429a:	bd38      	pop	{r3, r4, r5, pc}
 800429c:	20000138 	.word	0x20000138

080042a0 <_lseek_r>:
 80042a0:	b538      	push	{r3, r4, r5, lr}
 80042a2:	4d07      	ldr	r5, [pc, #28]	; (80042c0 <_lseek_r+0x20>)
 80042a4:	4604      	mov	r4, r0
 80042a6:	4608      	mov	r0, r1
 80042a8:	4611      	mov	r1, r2
 80042aa:	2200      	movs	r2, #0
 80042ac:	602a      	str	r2, [r5, #0]
 80042ae:	461a      	mov	r2, r3
 80042b0:	f7fc fc61 	bl	8000b76 <_lseek>
 80042b4:	1c43      	adds	r3, r0, #1
 80042b6:	d102      	bne.n	80042be <_lseek_r+0x1e>
 80042b8:	682b      	ldr	r3, [r5, #0]
 80042ba:	b103      	cbz	r3, 80042be <_lseek_r+0x1e>
 80042bc:	6023      	str	r3, [r4, #0]
 80042be:	bd38      	pop	{r3, r4, r5, pc}
 80042c0:	20000138 	.word	0x20000138

080042c4 <__malloc_lock>:
 80042c4:	4801      	ldr	r0, [pc, #4]	; (80042cc <__malloc_lock+0x8>)
 80042c6:	f7ff bb1d 	b.w	8003904 <__retarget_lock_acquire_recursive>
 80042ca:	bf00      	nop
 80042cc:	2000012c 	.word	0x2000012c

080042d0 <__malloc_unlock>:
 80042d0:	4801      	ldr	r0, [pc, #4]	; (80042d8 <__malloc_unlock+0x8>)
 80042d2:	f7ff bb18 	b.w	8003906 <__retarget_lock_release_recursive>
 80042d6:	bf00      	nop
 80042d8:	2000012c 	.word	0x2000012c

080042dc <_read_r>:
 80042dc:	b538      	push	{r3, r4, r5, lr}
 80042de:	4d07      	ldr	r5, [pc, #28]	; (80042fc <_read_r+0x20>)
 80042e0:	4604      	mov	r4, r0
 80042e2:	4608      	mov	r0, r1
 80042e4:	4611      	mov	r1, r2
 80042e6:	2200      	movs	r2, #0
 80042e8:	602a      	str	r2, [r5, #0]
 80042ea:	461a      	mov	r2, r3
 80042ec:	f7fc fbff 	bl	8000aee <_read>
 80042f0:	1c43      	adds	r3, r0, #1
 80042f2:	d102      	bne.n	80042fa <_read_r+0x1e>
 80042f4:	682b      	ldr	r3, [r5, #0]
 80042f6:	b103      	cbz	r3, 80042fa <_read_r+0x1e>
 80042f8:	6023      	str	r3, [r4, #0]
 80042fa:	bd38      	pop	{r3, r4, r5, pc}
 80042fc:	20000138 	.word	0x20000138

08004300 <_init>:
 8004300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004302:	bf00      	nop
 8004304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004306:	bc08      	pop	{r3}
 8004308:	469e      	mov	lr, r3
 800430a:	4770      	bx	lr

0800430c <_fini>:
 800430c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800430e:	bf00      	nop
 8004310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004312:	bc08      	pop	{r3}
 8004314:	469e      	mov	lr, r3
 8004316:	4770      	bx	lr
