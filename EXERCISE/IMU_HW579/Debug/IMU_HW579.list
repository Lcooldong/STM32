
IMU_HW579.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b0fc  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e4  0800b2b0  0800b2b0  0001b2b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b794  0800b794  000203a8  2**0
                  CONTENTS
  4 .ARM          00000008  0800b794  0800b794  0001b794  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b79c  0800b79c  000203a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b79c  0800b79c  0001b79c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b7a0  0800b7a0  0001b7a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003a8  20000000  0800b7a4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000203a8  2**0
                  CONTENTS
 10 .bss          00000120  200003a8  200003a8  000203a8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200004c8  200004c8  000203a8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000203a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011787  00000000  00000000  000203d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002996  00000000  00000000  00031b5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f68  00000000  00000000  000344f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000e58  00000000  00000000  00035460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025250  00000000  00000000  000362b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011bec  00000000  00000000  0005b508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d7dd5  00000000  00000000  0006d0f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00144ec9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000054e0  00000000  00000000  00144f1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200003a8 	.word	0x200003a8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800b294 	.word	0x0800b294

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200003ac 	.word	0x200003ac
 80001ec:	0800b294 	.word	0x0800b294

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9aa 	b.w	8001014 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468e      	mov	lr, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d14d      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d52:	428a      	cmp	r2, r1
 8000d54:	4694      	mov	ip, r2
 8000d56:	d969      	bls.n	8000e2c <__udivmoddi4+0xe8>
 8000d58:	fab2 f282 	clz	r2, r2
 8000d5c:	b152      	cbz	r2, 8000d74 <__udivmoddi4+0x30>
 8000d5e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d62:	f1c2 0120 	rsb	r1, r2, #32
 8000d66:	fa20 f101 	lsr.w	r1, r0, r1
 8000d6a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d72:	4094      	lsls	r4, r2
 8000d74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d78:	0c21      	lsrs	r1, r4, #16
 8000d7a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d7e:	fa1f f78c 	uxth.w	r7, ip
 8000d82:	fb08 e316 	mls	r3, r8, r6, lr
 8000d86:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d8a:	fb06 f107 	mul.w	r1, r6, r7
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d9a:	f080 811f 	bcs.w	8000fdc <__udivmoddi4+0x298>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 811c 	bls.w	8000fdc <__udivmoddi4+0x298>
 8000da4:	3e02      	subs	r6, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a5b      	subs	r3, r3, r1
 8000daa:	b2a4      	uxth	r4, r4
 8000dac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db0:	fb08 3310 	mls	r3, r8, r0, r3
 8000db4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db8:	fb00 f707 	mul.w	r7, r0, r7
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	d90a      	bls.n	8000dd6 <__udivmoddi4+0x92>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc8:	f080 810a 	bcs.w	8000fe0 <__udivmoddi4+0x29c>
 8000dcc:	42a7      	cmp	r7, r4
 8000dce:	f240 8107 	bls.w	8000fe0 <__udivmoddi4+0x29c>
 8000dd2:	4464      	add	r4, ip
 8000dd4:	3802      	subs	r0, #2
 8000dd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dda:	1be4      	subs	r4, r4, r7
 8000ddc:	2600      	movs	r6, #0
 8000dde:	b11d      	cbz	r5, 8000de8 <__udivmoddi4+0xa4>
 8000de0:	40d4      	lsrs	r4, r2
 8000de2:	2300      	movs	r3, #0
 8000de4:	e9c5 4300 	strd	r4, r3, [r5]
 8000de8:	4631      	mov	r1, r6
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d909      	bls.n	8000e06 <__udivmoddi4+0xc2>
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	f000 80ef 	beq.w	8000fd6 <__udivmoddi4+0x292>
 8000df8:	2600      	movs	r6, #0
 8000dfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dfe:	4630      	mov	r0, r6
 8000e00:	4631      	mov	r1, r6
 8000e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e06:	fab3 f683 	clz	r6, r3
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	d14a      	bne.n	8000ea4 <__udivmoddi4+0x160>
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d302      	bcc.n	8000e18 <__udivmoddi4+0xd4>
 8000e12:	4282      	cmp	r2, r0
 8000e14:	f200 80f9 	bhi.w	800100a <__udivmoddi4+0x2c6>
 8000e18:	1a84      	subs	r4, r0, r2
 8000e1a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e1e:	2001      	movs	r0, #1
 8000e20:	469e      	mov	lr, r3
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	d0e0      	beq.n	8000de8 <__udivmoddi4+0xa4>
 8000e26:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e2a:	e7dd      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000e2c:	b902      	cbnz	r2, 8000e30 <__udivmoddi4+0xec>
 8000e2e:	deff      	udf	#255	; 0xff
 8000e30:	fab2 f282 	clz	r2, r2
 8000e34:	2a00      	cmp	r2, #0
 8000e36:	f040 8092 	bne.w	8000f5e <__udivmoddi4+0x21a>
 8000e3a:	eba1 010c 	sub.w	r1, r1, ip
 8000e3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e42:	fa1f fe8c 	uxth.w	lr, ip
 8000e46:	2601      	movs	r6, #1
 8000e48:	0c20      	lsrs	r0, r4, #16
 8000e4a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e4e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e56:	fb0e f003 	mul.w	r0, lr, r3
 8000e5a:	4288      	cmp	r0, r1
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x12c>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x12a>
 8000e68:	4288      	cmp	r0, r1
 8000e6a:	f200 80cb 	bhi.w	8001004 <__udivmoddi4+0x2c0>
 8000e6e:	4643      	mov	r3, r8
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e78:	fb07 1110 	mls	r1, r7, r0, r1
 8000e7c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e80:	fb0e fe00 	mul.w	lr, lr, r0
 8000e84:	45a6      	cmp	lr, r4
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x156>
 8000e88:	eb1c 0404 	adds.w	r4, ip, r4
 8000e8c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e90:	d202      	bcs.n	8000e98 <__udivmoddi4+0x154>
 8000e92:	45a6      	cmp	lr, r4
 8000e94:	f200 80bb 	bhi.w	800100e <__udivmoddi4+0x2ca>
 8000e98:	4608      	mov	r0, r1
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ea2:	e79c      	b.n	8000dde <__udivmoddi4+0x9a>
 8000ea4:	f1c6 0720 	rsb	r7, r6, #32
 8000ea8:	40b3      	lsls	r3, r6
 8000eaa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eb2:	fa20 f407 	lsr.w	r4, r0, r7
 8000eb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eba:	431c      	orrs	r4, r3
 8000ebc:	40f9      	lsrs	r1, r7
 8000ebe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ec2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eca:	0c20      	lsrs	r0, r4, #16
 8000ecc:	fa1f fe8c 	uxth.w	lr, ip
 8000ed0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ed4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ed8:	fb08 f00e 	mul.w	r0, r8, lr
 8000edc:	4288      	cmp	r0, r1
 8000ede:	fa02 f206 	lsl.w	r2, r2, r6
 8000ee2:	d90b      	bls.n	8000efc <__udivmoddi4+0x1b8>
 8000ee4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000eec:	f080 8088 	bcs.w	8001000 <__udivmoddi4+0x2bc>
 8000ef0:	4288      	cmp	r0, r1
 8000ef2:	f240 8085 	bls.w	8001000 <__udivmoddi4+0x2bc>
 8000ef6:	f1a8 0802 	sub.w	r8, r8, #2
 8000efa:	4461      	add	r1, ip
 8000efc:	1a09      	subs	r1, r1, r0
 8000efe:	b2a4      	uxth	r4, r4
 8000f00:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f04:	fb09 1110 	mls	r1, r9, r0, r1
 8000f08:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f10:	458e      	cmp	lr, r1
 8000f12:	d908      	bls.n	8000f26 <__udivmoddi4+0x1e2>
 8000f14:	eb1c 0101 	adds.w	r1, ip, r1
 8000f18:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f1c:	d26c      	bcs.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f1e:	458e      	cmp	lr, r1
 8000f20:	d96a      	bls.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f22:	3802      	subs	r0, #2
 8000f24:	4461      	add	r1, ip
 8000f26:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f2a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f2e:	eba1 010e 	sub.w	r1, r1, lr
 8000f32:	42a1      	cmp	r1, r4
 8000f34:	46c8      	mov	r8, r9
 8000f36:	46a6      	mov	lr, r4
 8000f38:	d356      	bcc.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f3a:	d053      	beq.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f3c:	b15d      	cbz	r5, 8000f56 <__udivmoddi4+0x212>
 8000f3e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f42:	eb61 010e 	sbc.w	r1, r1, lr
 8000f46:	fa01 f707 	lsl.w	r7, r1, r7
 8000f4a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f4e:	40f1      	lsrs	r1, r6
 8000f50:	431f      	orrs	r7, r3
 8000f52:	e9c5 7100 	strd	r7, r1, [r5]
 8000f56:	2600      	movs	r6, #0
 8000f58:	4631      	mov	r1, r6
 8000f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f5e:	f1c2 0320 	rsb	r3, r2, #32
 8000f62:	40d8      	lsrs	r0, r3
 8000f64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f68:	fa21 f303 	lsr.w	r3, r1, r3
 8000f6c:	4091      	lsls	r1, r2
 8000f6e:	4301      	orrs	r1, r0
 8000f70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f74:	fa1f fe8c 	uxth.w	lr, ip
 8000f78:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f7c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f80:	0c0b      	lsrs	r3, r1, #16
 8000f82:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f86:	fb00 f60e 	mul.w	r6, r0, lr
 8000f8a:	429e      	cmp	r6, r3
 8000f8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f90:	d908      	bls.n	8000fa4 <__udivmoddi4+0x260>
 8000f92:	eb1c 0303 	adds.w	r3, ip, r3
 8000f96:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f9a:	d22f      	bcs.n	8000ffc <__udivmoddi4+0x2b8>
 8000f9c:	429e      	cmp	r6, r3
 8000f9e:	d92d      	bls.n	8000ffc <__udivmoddi4+0x2b8>
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	4463      	add	r3, ip
 8000fa4:	1b9b      	subs	r3, r3, r6
 8000fa6:	b289      	uxth	r1, r1
 8000fa8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fac:	fb07 3316 	mls	r3, r7, r6, r3
 8000fb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fb4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fb8:	428b      	cmp	r3, r1
 8000fba:	d908      	bls.n	8000fce <__udivmoddi4+0x28a>
 8000fbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fc0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fc4:	d216      	bcs.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fc6:	428b      	cmp	r3, r1
 8000fc8:	d914      	bls.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fca:	3e02      	subs	r6, #2
 8000fcc:	4461      	add	r1, ip
 8000fce:	1ac9      	subs	r1, r1, r3
 8000fd0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fd4:	e738      	b.n	8000e48 <__udivmoddi4+0x104>
 8000fd6:	462e      	mov	r6, r5
 8000fd8:	4628      	mov	r0, r5
 8000fda:	e705      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000fdc:	4606      	mov	r6, r0
 8000fde:	e6e3      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	e6f8      	b.n	8000dd6 <__udivmoddi4+0x92>
 8000fe4:	454b      	cmp	r3, r9
 8000fe6:	d2a9      	bcs.n	8000f3c <__udivmoddi4+0x1f8>
 8000fe8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fec:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ff0:	3801      	subs	r0, #1
 8000ff2:	e7a3      	b.n	8000f3c <__udivmoddi4+0x1f8>
 8000ff4:	4646      	mov	r6, r8
 8000ff6:	e7ea      	b.n	8000fce <__udivmoddi4+0x28a>
 8000ff8:	4620      	mov	r0, r4
 8000ffa:	e794      	b.n	8000f26 <__udivmoddi4+0x1e2>
 8000ffc:	4640      	mov	r0, r8
 8000ffe:	e7d1      	b.n	8000fa4 <__udivmoddi4+0x260>
 8001000:	46d0      	mov	r8, sl
 8001002:	e77b      	b.n	8000efc <__udivmoddi4+0x1b8>
 8001004:	3b02      	subs	r3, #2
 8001006:	4461      	add	r1, ip
 8001008:	e732      	b.n	8000e70 <__udivmoddi4+0x12c>
 800100a:	4630      	mov	r0, r6
 800100c:	e709      	b.n	8000e22 <__udivmoddi4+0xde>
 800100e:	4464      	add	r4, ip
 8001010:	3802      	subs	r0, #2
 8001012:	e742      	b.n	8000e9a <__udivmoddi4+0x156>

08001014 <__aeabi_idiv0>:
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <Accel_Writebyte>:

ADXL345 ACCEL = { .accel_address = 0xA6, .gain_X = 0.00376390, .gain_Y = 0.00376009, .gain_Z = 0.00349265};


void Accel_Writebyte(ADXL345 * SENSOR, uint8_t register_address, uint8_t data)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b086      	sub	sp, #24
 800101c:	af02      	add	r7, sp, #8
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	460b      	mov	r3, r1
 8001022:	70fb      	strb	r3, [r7, #3]
 8001024:	4613      	mov	r3, r2
 8001026:	70bb      	strb	r3, [r7, #2]
    uint8_t Trans[2]={register_address, data};
 8001028:	78fb      	ldrb	r3, [r7, #3]
 800102a:	733b      	strb	r3, [r7, #12]
 800102c:	78bb      	ldrb	r3, [r7, #2]
 800102e:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(&(SENSOR->i2c), SENSOR->accel_address, Trans,2,10);
 8001030:	6878      	ldr	r0, [r7, #4]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001038:	b299      	uxth	r1, r3
 800103a:	f107 020c 	add.w	r2, r7, #12
 800103e:	230a      	movs	r3, #10
 8001040:	9300      	str	r3, [sp, #0]
 8001042:	2302      	movs	r3, #2
 8001044:	f001 fbb0 	bl	80027a8 <HAL_I2C_Master_Transmit>
}
 8001048:	bf00      	nop
 800104a:	3710      	adds	r7, #16
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}

08001050 <Accel_Init>:
    return Receive[0];
}


void Accel_Init(ADXL345* SENSOR)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
	SENSOR->i2c = hi2c1;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	4a0f      	ldr	r2, [pc, #60]	; (8001098 <Accel_Init+0x48>)
 800105c:	4618      	mov	r0, r3
 800105e:	4611      	mov	r1, r2
 8001060:	2354      	movs	r3, #84	; 0x54
 8001062:	461a      	mov	r2, r3
 8001064:	f005 fc88 	bl	8006978 <memcpy>

	Accel_Writebyte(SENSOR, ADXL345_POWER_CTL, 0);
 8001068:	2200      	movs	r2, #0
 800106a:	212d      	movs	r1, #45	; 0x2d
 800106c:	6878      	ldr	r0, [r7, #4]
 800106e:	f7ff ffd3 	bl	8001018 <Accel_Writebyte>
	Accel_Writebyte(SENSOR, ADXL345_POWER_CTL, 16);
 8001072:	2210      	movs	r2, #16
 8001074:	212d      	movs	r1, #45	; 0x2d
 8001076:	6878      	ldr	r0, [r7, #4]
 8001078:	f7ff ffce 	bl	8001018 <Accel_Writebyte>
	Accel_Writebyte(SENSOR, ADXL345_DATA_FORMAT, 2);
 800107c:	2202      	movs	r2, #2
 800107e:	2131      	movs	r1, #49	; 0x31
 8001080:	6878      	ldr	r0, [r7, #4]
 8001082:	f7ff ffc9 	bl	8001018 <Accel_Writebyte>
	Accel_Writebyte(SENSOR, ADXL345_POWER_CTL, 8);
 8001086:	2208      	movs	r2, #8
 8001088:	212d      	movs	r1, #45	; 0x2d
 800108a:	6878      	ldr	r0, [r7, #4]
 800108c:	f7ff ffc4 	bl	8001018 <Accel_Writebyte>

}
 8001090:	bf00      	nop
 8001092:	3708      	adds	r7, #8
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	200003c4 	.word	0x200003c4

0800109c <Read_Accel>:



void Read_Accel(ADXL345* SENSOR)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b088      	sub	sp, #32
 80010a0:	af04      	add	r7, sp, #16
 80010a2:	6078      	str	r0, [r7, #4]
	uint8_t accel_buf[6];
	//SENSOR->i2c = hi2c1;

	HAL_I2C_Mem_Read(&(SENSOR->i2c), SENSOR->accel_address , ADXL345_DATAX0, I2C_MEMADD_SIZE_8BIT, accel_buf, sizeof(accel_buf), 10);
 80010a4:	6878      	ldr	r0, [r7, #4]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80010ac:	b299      	uxth	r1, r3
 80010ae:	230a      	movs	r3, #10
 80010b0:	9302      	str	r3, [sp, #8]
 80010b2:	2306      	movs	r3, #6
 80010b4:	9301      	str	r3, [sp, #4]
 80010b6:	f107 0308 	add.w	r3, r7, #8
 80010ba:	9300      	str	r3, [sp, #0]
 80010bc:	2301      	movs	r3, #1
 80010be:	2232      	movs	r2, #50	; 0x32
 80010c0:	f001 fc70 	bl	80029a4 <HAL_I2C_Mem_Read>
	SENSOR->raw_accel_X = (int16_t)((accel_buf[1]) << 8) | accel_buf[0];
 80010c4:	7a7b      	ldrb	r3, [r7, #9]
 80010c6:	021b      	lsls	r3, r3, #8
 80010c8:	b21a      	sxth	r2, r3
 80010ca:	7a3b      	ldrb	r3, [r7, #8]
 80010cc:	b21b      	sxth	r3, r3
 80010ce:	4313      	orrs	r3, r2
 80010d0:	b21a      	sxth	r2, r3
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
	SENSOR->raw_accel_Y = (int16_t)((accel_buf[3]) << 8) | accel_buf[2];
 80010d8:	7afb      	ldrb	r3, [r7, #11]
 80010da:	021b      	lsls	r3, r3, #8
 80010dc:	b21a      	sxth	r2, r3
 80010de:	7abb      	ldrb	r3, [r7, #10]
 80010e0:	b21b      	sxth	r3, r3
 80010e2:	4313      	orrs	r3, r2
 80010e4:	b21a      	sxth	r2, r3
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
	SENSOR->raw_accel_Z = (int16_t)((accel_buf[5]) << 8) | accel_buf[4];
 80010ec:	7b7b      	ldrb	r3, [r7, #13]
 80010ee:	021b      	lsls	r3, r3, #8
 80010f0:	b21a      	sxth	r2, r3
 80010f2:	7b3b      	ldrb	r3, [r7, #12]
 80010f4:	b21b      	sxth	r3, r3
 80010f6:	4313      	orrs	r3, r2
 80010f8:	b21a      	sxth	r2, r3
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c

	SENSOR->scaled_accel_X = SENSOR->raw_accel_X * SENSOR->gain_X;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	f9b3 3078 	ldrsh.w	r3, [r3, #120]	; 0x78
 8001106:	4618      	mov	r0, r3
 8001108:	f7ff fa1c 	bl	8000544 <__aeabi_i2d>
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8001112:	f7ff fa81 	bl	8000618 <__aeabi_dmul>
 8001116:	4602      	mov	r2, r0
 8001118:	460b      	mov	r3, r1
 800111a:	4610      	mov	r0, r2
 800111c:	4619      	mov	r1, r3
 800111e:	f7ff fd73 	bl	8000c08 <__aeabi_d2f>
 8001122:	4602      	mov	r2, r0
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	SENSOR->scaled_accel_Y = SENSOR->raw_accel_Y * SENSOR->gain_Y;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	f9b3 307a 	ldrsh.w	r3, [r3, #122]	; 0x7a
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff fa07 	bl	8000544 <__aeabi_i2d>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800113c:	f7ff fa6c 	bl	8000618 <__aeabi_dmul>
 8001140:	4602      	mov	r2, r0
 8001142:	460b      	mov	r3, r1
 8001144:	4610      	mov	r0, r2
 8001146:	4619      	mov	r1, r3
 8001148:	f7ff fd5e 	bl	8000c08 <__aeabi_d2f>
 800114c:	4602      	mov	r2, r0
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	SENSOR->scaled_accel_Z = SENSOR->raw_accel_Z * SENSOR->gain_Z;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	f9b3 307c 	ldrsh.w	r3, [r3, #124]	; 0x7c
 800115a:	4618      	mov	r0, r3
 800115c:	f7ff f9f2 	bl	8000544 <__aeabi_i2d>
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8001166:	f7ff fa57 	bl	8000618 <__aeabi_dmul>
 800116a:	4602      	mov	r2, r0
 800116c:	460b      	mov	r3, r1
 800116e:	4610      	mov	r0, r2
 8001170:	4619      	mov	r1, r3
 8001172:	f7ff fd49 	bl	8000c08 <__aeabi_d2f>
 8001176:	4602      	mov	r2, r0
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88


}
 800117e:	bf00      	nop
 8001180:	3710      	adds	r7, #16
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}

08001186 <Magneto_Init>:

HMC5883L MAGNETO = {.m_Scale = 1};


void Magneto_Init(HMC5883L* SENSOR)
{
 8001186:	b480      	push	{r7}
 8001188:	b083      	sub	sp, #12
 800118a:	af00      	add	r7, sp, #0
 800118c:	6078      	str	r0, [r7, #4]
	//printf("0x%X\r\n", MAGNETO.magneto_address);
}
 800118e:	bf00      	nop
 8001190:	370c      	adds	r7, #12
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr

0800119a <Gyro_Writebyte>:

extern I2C_HandleTypeDef hi2c1;

ITG3205 GYRO = {.gyro_address = 0xD0};

void Gyro_Writebyte(ITG3205 * SENSOR,uint8_t register_address,uint8_t data){
 800119a:	b580      	push	{r7, lr}
 800119c:	b086      	sub	sp, #24
 800119e:	af02      	add	r7, sp, #8
 80011a0:	6078      	str	r0, [r7, #4]
 80011a2:	460b      	mov	r3, r1
 80011a4:	70fb      	strb	r3, [r7, #3]
 80011a6:	4613      	mov	r3, r2
 80011a8:	70bb      	strb	r3, [r7, #2]
    uint8_t Trans[2]={register_address, data};
 80011aa:	78fb      	ldrb	r3, [r7, #3]
 80011ac:	733b      	strb	r3, [r7, #12]
 80011ae:	78bb      	ldrb	r3, [r7, #2]
 80011b0:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(&(SENSOR->i2c), SENSOR->gyro_address,Trans,2,10);
 80011b2:	6878      	ldr	r0, [r7, #4]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80011ba:	b299      	uxth	r1, r3
 80011bc:	f107 020c 	add.w	r2, r7, #12
 80011c0:	230a      	movs	r3, #10
 80011c2:	9300      	str	r3, [sp, #0]
 80011c4:	2302      	movs	r3, #2
 80011c6:	f001 faef 	bl	80027a8 <HAL_I2C_Master_Transmit>
}
 80011ca:	bf00      	nop
 80011cc:	3710      	adds	r7, #16
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
	...

080011d4 <Gyro_Init>:
    HAL_I2C_Master_Receive(&(SENSOR->i2c),SENSOR->gyro_address,Receive,1,10);

    return Receive[0];
}

void Gyro_Init(ITG3205* SENSOR){
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]

	SENSOR->i2c = hi2c1;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	4a1c      	ldr	r2, [pc, #112]	; (8001250 <Gyro_Init+0x7c>)
 80011e0:	4618      	mov	r0, r3
 80011e2:	4611      	mov	r1, r2
 80011e4:	2354      	movs	r3, #84	; 0x54
 80011e6:	461a      	mov	r2, r3
 80011e8:	f005 fbc6 	bl	8006978 <memcpy>

    Gyro_Writebyte(SENSOR,PWR_MGM,0x00);
 80011ec:	2200      	movs	r2, #0
 80011ee:	213e      	movs	r1, #62	; 0x3e
 80011f0:	6878      	ldr	r0, [r7, #4]
 80011f2:	f7ff ffd2 	bl	800119a <Gyro_Writebyte>

    HAL_Delay(10);
 80011f6:	200a      	movs	r0, #10
 80011f8:	f000 fdf6 	bl	8001de8 <HAL_Delay>
    Gyro_Writebyte(SENSOR,PWR_MGM,0x01);
 80011fc:	2201      	movs	r2, #1
 80011fe:	213e      	movs	r1, #62	; 0x3e
 8001200:	6878      	ldr	r0, [r7, #4]
 8001202:	f7ff ffca 	bl	800119a <Gyro_Writebyte>

    Gyro_Writebyte(SENSOR,SMPLRT_DIV,0X00);
 8001206:	2200      	movs	r2, #0
 8001208:	2115      	movs	r1, #21
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	f7ff ffc5 	bl	800119a <Gyro_Writebyte>

    Gyro_Writebyte(SENSOR,DLPFFS_FS_SEL, RANGE2000 << 3);
 8001210:	2218      	movs	r2, #24
 8001212:	2118      	movs	r1, #24
 8001214:	6878      	ldr	r0, [r7, #4]
 8001216:	f7ff ffc0 	bl	800119a <Gyro_Writebyte>

    Gyro_Writebyte(SENSOR,DLPFFS_DLPF_CFG, BW256_SR8);
 800121a:	2200      	movs	r2, #0
 800121c:	2107      	movs	r1, #7
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	f7ff ffbb 	bl	800119a <Gyro_Writebyte>

    Gyro_Writebyte(SENSOR,PWRMGM_CLK_SEL, PLL_ZGYRO_REF);
 8001224:	2203      	movs	r2, #3
 8001226:	2107      	movs	r1, #7
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	f7ff ffb6 	bl	800119a <Gyro_Writebyte>

    Gyro_Writebyte(SENSOR,INTCFG_ITG_RDY_EN, INTSTATUS_ITG_RDY);
 800122e:	2204      	movs	r2, #4
 8001230:	2104      	movs	r1, #4
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	f7ff ffb1 	bl	800119a <Gyro_Writebyte>

    Gyro_Writebyte(SENSOR,INTCFG_RAW_RDY_EN, INTSTATUS_RAW_DATA_RDY);
 8001238:	2201      	movs	r2, #1
 800123a:	2101      	movs	r1, #1
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f7ff ffac 	bl	800119a <Gyro_Writebyte>

    HAL_Delay(GYROSTART_UP_DELAY);
 8001242:	2046      	movs	r0, #70	; 0x46
 8001244:	f000 fdd0 	bl	8001de8 <HAL_Delay>

}
 8001248:	bf00      	nop
 800124a:	3708      	adds	r7, #8
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	200003c4 	.word	0x200003c4

08001254 <Read_Gyro_Temperature>:
	SENSOR->scaled_gyro_Z = (SENSOR->raw_gyro_Z - SENSOR->base_gyro_Z)/DLPFFS_FS_SEL;

}

void Read_Gyro_Temperature(ITG3205* SENSOR)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b088      	sub	sp, #32
 8001258:	af04      	add	r7, sp, #16
 800125a:	6078      	str	r0, [r7, #4]
	uint8_t databuf[2];
	uint16_t raw_Temp;

	SENSOR = &GYRO;
 800125c:	4b2f      	ldr	r3, [pc, #188]	; (800131c <Read_Gyro_Temperature+0xc8>)
 800125e:	607b      	str	r3, [r7, #4]
	SENSOR->i2c = hi2c1;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	4a2f      	ldr	r2, [pc, #188]	; (8001320 <Read_Gyro_Temperature+0xcc>)
 8001264:	4618      	mov	r0, r3
 8001266:	4611      	mov	r1, r2
 8001268:	2354      	movs	r3, #84	; 0x54
 800126a:	461a      	mov	r2, r3
 800126c:	f005 fb84 	bl	8006978 <memcpy>

	HAL_I2C_Mem_Read(&(SENSOR->i2c), SENSOR->gyro_address,TEMP_OUT,I2C_MEMADD_SIZE_8BIT,databuf,sizeof(databuf),10);
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001278:	b299      	uxth	r1, r3
 800127a:	230a      	movs	r3, #10
 800127c:	9302      	str	r3, [sp, #8]
 800127e:	2302      	movs	r3, #2
 8001280:	9301      	str	r3, [sp, #4]
 8001282:	f107 030c 	add.w	r3, r7, #12
 8001286:	9300      	str	r3, [sp, #0]
 8001288:	2301      	movs	r3, #1
 800128a:	221b      	movs	r2, #27
 800128c:	f001 fb8a 	bl	80029a4 <HAL_I2C_Mem_Read>
	raw_Temp = ((databuf[0]<<8)|databuf[1]);
 8001290:	7b3b      	ldrb	r3, [r7, #12]
 8001292:	021b      	lsls	r3, r3, #8
 8001294:	b21a      	sxth	r2, r3
 8001296:	7b7b      	ldrb	r3, [r7, #13]
 8001298:	b21b      	sxth	r3, r3
 800129a:	4313      	orrs	r3, r2
 800129c:	b21b      	sxth	r3, r3
 800129e:	81fb      	strh	r3, [r7, #14]

	SENSOR->gyro_Temp = ((raw_Temp -13200) / 280.0 -32 ) *5 /9 - 31;
 80012a0:	89fb      	ldrh	r3, [r7, #14]
 80012a2:	f5a3 534e 	sub.w	r3, r3, #13184	; 0x3380
 80012a6:	3b10      	subs	r3, #16
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff f94b 	bl	8000544 <__aeabi_i2d>
 80012ae:	f04f 0200 	mov.w	r2, #0
 80012b2:	4b1c      	ldr	r3, [pc, #112]	; (8001324 <Read_Gyro_Temperature+0xd0>)
 80012b4:	f7ff fada 	bl	800086c <__aeabi_ddiv>
 80012b8:	4602      	mov	r2, r0
 80012ba:	460b      	mov	r3, r1
 80012bc:	4610      	mov	r0, r2
 80012be:	4619      	mov	r1, r3
 80012c0:	f04f 0200 	mov.w	r2, #0
 80012c4:	4b18      	ldr	r3, [pc, #96]	; (8001328 <Read_Gyro_Temperature+0xd4>)
 80012c6:	f7fe ffef 	bl	80002a8 <__aeabi_dsub>
 80012ca:	4602      	mov	r2, r0
 80012cc:	460b      	mov	r3, r1
 80012ce:	4610      	mov	r0, r2
 80012d0:	4619      	mov	r1, r3
 80012d2:	f04f 0200 	mov.w	r2, #0
 80012d6:	4b15      	ldr	r3, [pc, #84]	; (800132c <Read_Gyro_Temperature+0xd8>)
 80012d8:	f7ff f99e 	bl	8000618 <__aeabi_dmul>
 80012dc:	4602      	mov	r2, r0
 80012de:	460b      	mov	r3, r1
 80012e0:	4610      	mov	r0, r2
 80012e2:	4619      	mov	r1, r3
 80012e4:	f04f 0200 	mov.w	r2, #0
 80012e8:	4b11      	ldr	r3, [pc, #68]	; (8001330 <Read_Gyro_Temperature+0xdc>)
 80012ea:	f7ff fabf 	bl	800086c <__aeabi_ddiv>
 80012ee:	4602      	mov	r2, r0
 80012f0:	460b      	mov	r3, r1
 80012f2:	4610      	mov	r0, r2
 80012f4:	4619      	mov	r1, r3
 80012f6:	f04f 0200 	mov.w	r2, #0
 80012fa:	4b0e      	ldr	r3, [pc, #56]	; (8001334 <Read_Gyro_Temperature+0xe0>)
 80012fc:	f7fe ffd4 	bl	80002a8 <__aeabi_dsub>
 8001300:	4602      	mov	r2, r0
 8001302:	460b      	mov	r3, r1
 8001304:	4610      	mov	r0, r2
 8001306:	4619      	mov	r1, r3
 8001308:	f7ff fc7e 	bl	8000c08 <__aeabi_d2f>
 800130c:	4602      	mov	r2, r0
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	//SENSOR->gyro_Temp = raw_Temp;
}
 8001314:	bf00      	nop
 8001316:	3710      	adds	r7, #16
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	20000100 	.word	0x20000100
 8001320:	200003c4 	.word	0x200003c4
 8001324:	40718000 	.word	0x40718000
 8001328:	40400000 	.word	0x40400000
 800132c:	40140000 	.word	0x40140000
 8001330:	40220000 	.word	0x40220000
 8001334:	403f0000 	.word	0x403f0000

08001338 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b08c      	sub	sp, #48	; 0x30
 800133c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800133e:	f107 031c 	add.w	r3, r7, #28
 8001342:	2200      	movs	r2, #0
 8001344:	601a      	str	r2, [r3, #0]
 8001346:	605a      	str	r2, [r3, #4]
 8001348:	609a      	str	r2, [r3, #8]
 800134a:	60da      	str	r2, [r3, #12]
 800134c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800134e:	2300      	movs	r3, #0
 8001350:	61bb      	str	r3, [r7, #24]
 8001352:	4b7c      	ldr	r3, [pc, #496]	; (8001544 <MX_GPIO_Init+0x20c>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001356:	4a7b      	ldr	r2, [pc, #492]	; (8001544 <MX_GPIO_Init+0x20c>)
 8001358:	f043 0304 	orr.w	r3, r3, #4
 800135c:	6313      	str	r3, [r2, #48]	; 0x30
 800135e:	4b79      	ldr	r3, [pc, #484]	; (8001544 <MX_GPIO_Init+0x20c>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001362:	f003 0304 	and.w	r3, r3, #4
 8001366:	61bb      	str	r3, [r7, #24]
 8001368:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800136a:	2300      	movs	r3, #0
 800136c:	617b      	str	r3, [r7, #20]
 800136e:	4b75      	ldr	r3, [pc, #468]	; (8001544 <MX_GPIO_Init+0x20c>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001372:	4a74      	ldr	r2, [pc, #464]	; (8001544 <MX_GPIO_Init+0x20c>)
 8001374:	f043 0320 	orr.w	r3, r3, #32
 8001378:	6313      	str	r3, [r2, #48]	; 0x30
 800137a:	4b72      	ldr	r3, [pc, #456]	; (8001544 <MX_GPIO_Init+0x20c>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137e:	f003 0320 	and.w	r3, r3, #32
 8001382:	617b      	str	r3, [r7, #20]
 8001384:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001386:	2300      	movs	r3, #0
 8001388:	613b      	str	r3, [r7, #16]
 800138a:	4b6e      	ldr	r3, [pc, #440]	; (8001544 <MX_GPIO_Init+0x20c>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	4a6d      	ldr	r2, [pc, #436]	; (8001544 <MX_GPIO_Init+0x20c>)
 8001390:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001394:	6313      	str	r3, [r2, #48]	; 0x30
 8001396:	4b6b      	ldr	r3, [pc, #428]	; (8001544 <MX_GPIO_Init+0x20c>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800139e:	613b      	str	r3, [r7, #16]
 80013a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a2:	2300      	movs	r3, #0
 80013a4:	60fb      	str	r3, [r7, #12]
 80013a6:	4b67      	ldr	r3, [pc, #412]	; (8001544 <MX_GPIO_Init+0x20c>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013aa:	4a66      	ldr	r2, [pc, #408]	; (8001544 <MX_GPIO_Init+0x20c>)
 80013ac:	f043 0301 	orr.w	r3, r3, #1
 80013b0:	6313      	str	r3, [r2, #48]	; 0x30
 80013b2:	4b64      	ldr	r3, [pc, #400]	; (8001544 <MX_GPIO_Init+0x20c>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b6:	f003 0301 	and.w	r3, r3, #1
 80013ba:	60fb      	str	r3, [r7, #12]
 80013bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013be:	2300      	movs	r3, #0
 80013c0:	60bb      	str	r3, [r7, #8]
 80013c2:	4b60      	ldr	r3, [pc, #384]	; (8001544 <MX_GPIO_Init+0x20c>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c6:	4a5f      	ldr	r2, [pc, #380]	; (8001544 <MX_GPIO_Init+0x20c>)
 80013c8:	f043 0302 	orr.w	r3, r3, #2
 80013cc:	6313      	str	r3, [r2, #48]	; 0x30
 80013ce:	4b5d      	ldr	r3, [pc, #372]	; (8001544 <MX_GPIO_Init+0x20c>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d2:	f003 0302 	and.w	r3, r3, #2
 80013d6:	60bb      	str	r3, [r7, #8]
 80013d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80013da:	2300      	movs	r3, #0
 80013dc:	607b      	str	r3, [r7, #4]
 80013de:	4b59      	ldr	r3, [pc, #356]	; (8001544 <MX_GPIO_Init+0x20c>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e2:	4a58      	ldr	r2, [pc, #352]	; (8001544 <MX_GPIO_Init+0x20c>)
 80013e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013e8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ea:	4b56      	ldr	r3, [pc, #344]	; (8001544 <MX_GPIO_Init+0x20c>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013f2:	607b      	str	r3, [r7, #4]
 80013f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80013f6:	2200      	movs	r2, #0
 80013f8:	f244 0181 	movw	r1, #16513	; 0x4081
 80013fc:	4852      	ldr	r0, [pc, #328]	; (8001548 <MX_GPIO_Init+0x210>)
 80013fe:	f001 f875 	bl	80024ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001402:	2200      	movs	r2, #0
 8001404:	2140      	movs	r1, #64	; 0x40
 8001406:	4851      	ldr	r0, [pc, #324]	; (800154c <MX_GPIO_Init+0x214>)
 8001408:	f001 f870 	bl	80024ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800140c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001410:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001412:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001416:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001418:	2300      	movs	r3, #0
 800141a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800141c:	f107 031c 	add.w	r3, r7, #28
 8001420:	4619      	mov	r1, r3
 8001422:	484b      	ldr	r0, [pc, #300]	; (8001550 <MX_GPIO_Init+0x218>)
 8001424:	f000 feb6 	bl	8002194 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001428:	2332      	movs	r3, #50	; 0x32
 800142a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142c:	2302      	movs	r3, #2
 800142e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001430:	2300      	movs	r3, #0
 8001432:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001434:	2303      	movs	r3, #3
 8001436:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001438:	230b      	movs	r3, #11
 800143a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800143c:	f107 031c 	add.w	r3, r7, #28
 8001440:	4619      	mov	r1, r3
 8001442:	4843      	ldr	r0, [pc, #268]	; (8001550 <MX_GPIO_Init+0x218>)
 8001444:	f000 fea6 	bl	8002194 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001448:	2386      	movs	r3, #134	; 0x86
 800144a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144c:	2302      	movs	r3, #2
 800144e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001450:	2300      	movs	r3, #0
 8001452:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001454:	2303      	movs	r3, #3
 8001456:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001458:	230b      	movs	r3, #11
 800145a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800145c:	f107 031c 	add.w	r3, r7, #28
 8001460:	4619      	mov	r1, r3
 8001462:	483c      	ldr	r0, [pc, #240]	; (8001554 <MX_GPIO_Init+0x21c>)
 8001464:	f000 fe96 	bl	8002194 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001468:	f244 0381 	movw	r3, #16513	; 0x4081
 800146c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800146e:	2301      	movs	r3, #1
 8001470:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001472:	2300      	movs	r3, #0
 8001474:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001476:	2300      	movs	r3, #0
 8001478:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800147a:	f107 031c 	add.w	r3, r7, #28
 800147e:	4619      	mov	r1, r3
 8001480:	4831      	ldr	r0, [pc, #196]	; (8001548 <MX_GPIO_Init+0x210>)
 8001482:	f000 fe87 	bl	8002194 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001486:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800148a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800148c:	2302      	movs	r3, #2
 800148e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001490:	2300      	movs	r3, #0
 8001492:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001494:	2303      	movs	r3, #3
 8001496:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001498:	230b      	movs	r3, #11
 800149a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800149c:	f107 031c 	add.w	r3, r7, #28
 80014a0:	4619      	mov	r1, r3
 80014a2:	4829      	ldr	r0, [pc, #164]	; (8001548 <MX_GPIO_Init+0x210>)
 80014a4:	f000 fe76 	bl	8002194 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80014a8:	2340      	movs	r3, #64	; 0x40
 80014aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ac:	2301      	movs	r3, #1
 80014ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b0:	2300      	movs	r3, #0
 80014b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b4:	2300      	movs	r3, #0
 80014b6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80014b8:	f107 031c 	add.w	r3, r7, #28
 80014bc:	4619      	mov	r1, r3
 80014be:	4823      	ldr	r0, [pc, #140]	; (800154c <MX_GPIO_Init+0x214>)
 80014c0:	f000 fe68 	bl	8002194 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80014c4:	2380      	movs	r3, #128	; 0x80
 80014c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014c8:	2300      	movs	r3, #0
 80014ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014cc:	2300      	movs	r3, #0
 80014ce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80014d0:	f107 031c 	add.w	r3, r7, #28
 80014d4:	4619      	mov	r1, r3
 80014d6:	481d      	ldr	r0, [pc, #116]	; (800154c <MX_GPIO_Init+0x214>)
 80014d8:	f000 fe5c 	bl	8002194 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80014dc:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80014e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e2:	2302      	movs	r3, #2
 80014e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e6:	2300      	movs	r3, #0
 80014e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ea:	2303      	movs	r3, #3
 80014ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80014ee:	230a      	movs	r3, #10
 80014f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f2:	f107 031c 	add.w	r3, r7, #28
 80014f6:	4619      	mov	r1, r3
 80014f8:	4816      	ldr	r0, [pc, #88]	; (8001554 <MX_GPIO_Init+0x21c>)
 80014fa:	f000 fe4b 	bl	8002194 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80014fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001502:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001504:	2300      	movs	r3, #0
 8001506:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001508:	2300      	movs	r3, #0
 800150a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800150c:	f107 031c 	add.w	r3, r7, #28
 8001510:	4619      	mov	r1, r3
 8001512:	4810      	ldr	r0, [pc, #64]	; (8001554 <MX_GPIO_Init+0x21c>)
 8001514:	f000 fe3e 	bl	8002194 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001518:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800151c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151e:	2302      	movs	r3, #2
 8001520:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001522:	2300      	movs	r3, #0
 8001524:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001526:	2303      	movs	r3, #3
 8001528:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800152a:	230b      	movs	r3, #11
 800152c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800152e:	f107 031c 	add.w	r3, r7, #28
 8001532:	4619      	mov	r1, r3
 8001534:	4805      	ldr	r0, [pc, #20]	; (800154c <MX_GPIO_Init+0x214>)
 8001536:	f000 fe2d 	bl	8002194 <HAL_GPIO_Init>

}
 800153a:	bf00      	nop
 800153c:	3730      	adds	r7, #48	; 0x30
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	40023800 	.word	0x40023800
 8001548:	40020400 	.word	0x40020400
 800154c:	40021800 	.word	0x40021800
 8001550:	40020800 	.word	0x40020800
 8001554:	40020000 	.word	0x40020000

08001558 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800155c:	4b1b      	ldr	r3, [pc, #108]	; (80015cc <MX_I2C1_Init+0x74>)
 800155e:	4a1c      	ldr	r2, [pc, #112]	; (80015d0 <MX_I2C1_Init+0x78>)
 8001560:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001562:	4b1a      	ldr	r3, [pc, #104]	; (80015cc <MX_I2C1_Init+0x74>)
 8001564:	4a1b      	ldr	r2, [pc, #108]	; (80015d4 <MX_I2C1_Init+0x7c>)
 8001566:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001568:	4b18      	ldr	r3, [pc, #96]	; (80015cc <MX_I2C1_Init+0x74>)
 800156a:	2200      	movs	r2, #0
 800156c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800156e:	4b17      	ldr	r3, [pc, #92]	; (80015cc <MX_I2C1_Init+0x74>)
 8001570:	2200      	movs	r2, #0
 8001572:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001574:	4b15      	ldr	r3, [pc, #84]	; (80015cc <MX_I2C1_Init+0x74>)
 8001576:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800157a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800157c:	4b13      	ldr	r3, [pc, #76]	; (80015cc <MX_I2C1_Init+0x74>)
 800157e:	2200      	movs	r2, #0
 8001580:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001582:	4b12      	ldr	r3, [pc, #72]	; (80015cc <MX_I2C1_Init+0x74>)
 8001584:	2200      	movs	r2, #0
 8001586:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001588:	4b10      	ldr	r3, [pc, #64]	; (80015cc <MX_I2C1_Init+0x74>)
 800158a:	2200      	movs	r2, #0
 800158c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800158e:	4b0f      	ldr	r3, [pc, #60]	; (80015cc <MX_I2C1_Init+0x74>)
 8001590:	2200      	movs	r2, #0
 8001592:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001594:	480d      	ldr	r0, [pc, #52]	; (80015cc <MX_I2C1_Init+0x74>)
 8001596:	f000 ffc3 	bl	8002520 <HAL_I2C_Init>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80015a0:	f000 f9c6 	bl	8001930 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80015a4:	2100      	movs	r1, #0
 80015a6:	4809      	ldr	r0, [pc, #36]	; (80015cc <MX_I2C1_Init+0x74>)
 80015a8:	f003 fc44 	bl	8004e34 <HAL_I2CEx_ConfigAnalogFilter>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80015b2:	f000 f9bd 	bl	8001930 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80015b6:	2100      	movs	r1, #0
 80015b8:	4804      	ldr	r0, [pc, #16]	; (80015cc <MX_I2C1_Init+0x74>)
 80015ba:	f003 fc77 	bl	8004eac <HAL_I2CEx_ConfigDigitalFilter>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80015c4:	f000 f9b4 	bl	8001930 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015c8:	bf00      	nop
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	200003c4 	.word	0x200003c4
 80015d0:	40005400 	.word	0x40005400
 80015d4:	000186a0 	.word	0x000186a0

080015d8 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80015dc:	4b1b      	ldr	r3, [pc, #108]	; (800164c <MX_I2C2_Init+0x74>)
 80015de:	4a1c      	ldr	r2, [pc, #112]	; (8001650 <MX_I2C2_Init+0x78>)
 80015e0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80015e2:	4b1a      	ldr	r3, [pc, #104]	; (800164c <MX_I2C2_Init+0x74>)
 80015e4:	4a1b      	ldr	r2, [pc, #108]	; (8001654 <MX_I2C2_Init+0x7c>)
 80015e6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015e8:	4b18      	ldr	r3, [pc, #96]	; (800164c <MX_I2C2_Init+0x74>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80015ee:	4b17      	ldr	r3, [pc, #92]	; (800164c <MX_I2C2_Init+0x74>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015f4:	4b15      	ldr	r3, [pc, #84]	; (800164c <MX_I2C2_Init+0x74>)
 80015f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015fa:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015fc:	4b13      	ldr	r3, [pc, #76]	; (800164c <MX_I2C2_Init+0x74>)
 80015fe:	2200      	movs	r2, #0
 8001600:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001602:	4b12      	ldr	r3, [pc, #72]	; (800164c <MX_I2C2_Init+0x74>)
 8001604:	2200      	movs	r2, #0
 8001606:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001608:	4b10      	ldr	r3, [pc, #64]	; (800164c <MX_I2C2_Init+0x74>)
 800160a:	2200      	movs	r2, #0
 800160c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800160e:	4b0f      	ldr	r3, [pc, #60]	; (800164c <MX_I2C2_Init+0x74>)
 8001610:	2200      	movs	r2, #0
 8001612:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001614:	480d      	ldr	r0, [pc, #52]	; (800164c <MX_I2C2_Init+0x74>)
 8001616:	f000 ff83 	bl	8002520 <HAL_I2C_Init>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001620:	f000 f986 	bl	8001930 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001624:	2100      	movs	r1, #0
 8001626:	4809      	ldr	r0, [pc, #36]	; (800164c <MX_I2C2_Init+0x74>)
 8001628:	f003 fc04 	bl	8004e34 <HAL_I2CEx_ConfigAnalogFilter>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8001632:	f000 f97d 	bl	8001930 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001636:	2100      	movs	r1, #0
 8001638:	4804      	ldr	r0, [pc, #16]	; (800164c <MX_I2C2_Init+0x74>)
 800163a:	f003 fc37 	bl	8004eac <HAL_I2CEx_ConfigDigitalFilter>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8001644:	f000 f974 	bl	8001930 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001648:	bf00      	nop
 800164a:	bd80      	pop	{r7, pc}
 800164c:	20000418 	.word	0x20000418
 8001650:	40005800 	.word	0x40005800
 8001654:	000186a0 	.word	0x000186a0

08001658 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b08c      	sub	sp, #48	; 0x30
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001660:	f107 031c 	add.w	r3, r7, #28
 8001664:	2200      	movs	r2, #0
 8001666:	601a      	str	r2, [r3, #0]
 8001668:	605a      	str	r2, [r3, #4]
 800166a:	609a      	str	r2, [r3, #8]
 800166c:	60da      	str	r2, [r3, #12]
 800166e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a42      	ldr	r2, [pc, #264]	; (8001780 <HAL_I2C_MspInit+0x128>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d13d      	bne.n	80016f6 <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800167a:	2300      	movs	r3, #0
 800167c:	61bb      	str	r3, [r7, #24]
 800167e:	4b41      	ldr	r3, [pc, #260]	; (8001784 <HAL_I2C_MspInit+0x12c>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001682:	4a40      	ldr	r2, [pc, #256]	; (8001784 <HAL_I2C_MspInit+0x12c>)
 8001684:	f043 0302 	orr.w	r3, r3, #2
 8001688:	6313      	str	r3, [r2, #48]	; 0x30
 800168a:	4b3e      	ldr	r3, [pc, #248]	; (8001784 <HAL_I2C_MspInit+0x12c>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168e:	f003 0302 	and.w	r3, r3, #2
 8001692:	61bb      	str	r3, [r7, #24]
 8001694:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001696:	f44f 7340 	mov.w	r3, #768	; 0x300
 800169a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800169c:	2312      	movs	r3, #18
 800169e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a0:	2300      	movs	r3, #0
 80016a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016a4:	2303      	movs	r3, #3
 80016a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016a8:	2304      	movs	r3, #4
 80016aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ac:	f107 031c 	add.w	r3, r7, #28
 80016b0:	4619      	mov	r1, r3
 80016b2:	4835      	ldr	r0, [pc, #212]	; (8001788 <HAL_I2C_MspInit+0x130>)
 80016b4:	f000 fd6e 	bl	8002194 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016b8:	2300      	movs	r3, #0
 80016ba:	617b      	str	r3, [r7, #20]
 80016bc:	4b31      	ldr	r3, [pc, #196]	; (8001784 <HAL_I2C_MspInit+0x12c>)
 80016be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c0:	4a30      	ldr	r2, [pc, #192]	; (8001784 <HAL_I2C_MspInit+0x12c>)
 80016c2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016c6:	6413      	str	r3, [r2, #64]	; 0x40
 80016c8:	4b2e      	ldr	r3, [pc, #184]	; (8001784 <HAL_I2C_MspInit+0x12c>)
 80016ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016d0:	617b      	str	r3, [r7, #20]
 80016d2:	697b      	ldr	r3, [r7, #20]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80016d4:	2200      	movs	r2, #0
 80016d6:	2100      	movs	r1, #0
 80016d8:	201f      	movs	r0, #31
 80016da:	f000 fc84 	bl	8001fe6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80016de:	201f      	movs	r0, #31
 80016e0:	f000 fc9d 	bl	800201e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80016e4:	2200      	movs	r2, #0
 80016e6:	2100      	movs	r1, #0
 80016e8:	2020      	movs	r0, #32
 80016ea:	f000 fc7c 	bl	8001fe6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80016ee:	2020      	movs	r0, #32
 80016f0:	f000 fc95 	bl	800201e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80016f4:	e040      	b.n	8001778 <HAL_I2C_MspInit+0x120>
  else if(i2cHandle->Instance==I2C2)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a24      	ldr	r2, [pc, #144]	; (800178c <HAL_I2C_MspInit+0x134>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d13b      	bne.n	8001778 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001700:	2300      	movs	r3, #0
 8001702:	613b      	str	r3, [r7, #16]
 8001704:	4b1f      	ldr	r3, [pc, #124]	; (8001784 <HAL_I2C_MspInit+0x12c>)
 8001706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001708:	4a1e      	ldr	r2, [pc, #120]	; (8001784 <HAL_I2C_MspInit+0x12c>)
 800170a:	f043 0320 	orr.w	r3, r3, #32
 800170e:	6313      	str	r3, [r2, #48]	; 0x30
 8001710:	4b1c      	ldr	r3, [pc, #112]	; (8001784 <HAL_I2C_MspInit+0x12c>)
 8001712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001714:	f003 0320 	and.w	r3, r3, #32
 8001718:	613b      	str	r3, [r7, #16]
 800171a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800171c:	2303      	movs	r3, #3
 800171e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001720:	2312      	movs	r3, #18
 8001722:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001724:	2300      	movs	r3, #0
 8001726:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001728:	2303      	movs	r3, #3
 800172a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800172c:	2304      	movs	r3, #4
 800172e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001730:	f107 031c 	add.w	r3, r7, #28
 8001734:	4619      	mov	r1, r3
 8001736:	4816      	ldr	r0, [pc, #88]	; (8001790 <HAL_I2C_MspInit+0x138>)
 8001738:	f000 fd2c 	bl	8002194 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800173c:	2300      	movs	r3, #0
 800173e:	60fb      	str	r3, [r7, #12]
 8001740:	4b10      	ldr	r3, [pc, #64]	; (8001784 <HAL_I2C_MspInit+0x12c>)
 8001742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001744:	4a0f      	ldr	r2, [pc, #60]	; (8001784 <HAL_I2C_MspInit+0x12c>)
 8001746:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800174a:	6413      	str	r3, [r2, #64]	; 0x40
 800174c:	4b0d      	ldr	r3, [pc, #52]	; (8001784 <HAL_I2C_MspInit+0x12c>)
 800174e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001750:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001754:	60fb      	str	r3, [r7, #12]
 8001756:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8001758:	2200      	movs	r2, #0
 800175a:	2100      	movs	r1, #0
 800175c:	2021      	movs	r0, #33	; 0x21
 800175e:	f000 fc42 	bl	8001fe6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001762:	2021      	movs	r0, #33	; 0x21
 8001764:	f000 fc5b 	bl	800201e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8001768:	2200      	movs	r2, #0
 800176a:	2100      	movs	r1, #0
 800176c:	2022      	movs	r0, #34	; 0x22
 800176e:	f000 fc3a 	bl	8001fe6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8001772:	2022      	movs	r0, #34	; 0x22
 8001774:	f000 fc53 	bl	800201e <HAL_NVIC_EnableIRQ>
}
 8001778:	bf00      	nop
 800177a:	3730      	adds	r7, #48	; 0x30
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	40005400 	.word	0x40005400
 8001784:	40023800 	.word	0x40023800
 8001788:	40020400 	.word	0x40020400
 800178c:	40005800 	.word	0x40005800
 8001790:	40021400 	.word	0x40021400

08001794 <_write>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
int _write(int file, char *p, int len)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	60f8      	str	r0, [r7, #12]
 800179c:	60b9      	str	r1, [r7, #8]
 800179e:	607a      	str	r2, [r7, #4]
	if(HAL_UART_Transmit(&huart3, (uint8_t *)p, len, 10) == HAL_OK) return len;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	b29a      	uxth	r2, r3
 80017a4:	230a      	movs	r3, #10
 80017a6:	68b9      	ldr	r1, [r7, #8]
 80017a8:	4806      	ldr	r0, [pc, #24]	; (80017c4 <_write+0x30>)
 80017aa:	f004 f8f4 	bl	8005996 <HAL_UART_Transmit>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d101      	bne.n	80017b8 <_write+0x24>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	e000      	b.n	80017ba <_write+0x26>
	else return 0;
 80017b8:	2300      	movs	r3, #0
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3710      	adds	r7, #16
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	20000470 	.word	0x20000470

080017c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017c8:	b590      	push	{r4, r7, lr}
 80017ca:	b085      	sub	sp, #20
 80017cc:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017ce:	f000 fa99 	bl	8001d04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017d2:	f000 f83d 	bl	8001850 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017d6:	f7ff fdaf 	bl	8001338 <MX_GPIO_Init>
  MX_I2C1_Init();
 80017da:	f7ff febd 	bl	8001558 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 80017de:	f000 f9ed 	bl	8001bbc <MX_USART3_UART_Init>
  MX_I2C2_Init();
 80017e2:	f7ff fef9 	bl	80015d8 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  Gyro_Init(&GYRO);
 80017e6:	4816      	ldr	r0, [pc, #88]	; (8001840 <main+0x78>)
 80017e8:	f7ff fcf4 	bl	80011d4 <Gyro_Init>
  Accel_Init(&ACCEL);
 80017ec:	4815      	ldr	r0, [pc, #84]	; (8001844 <main+0x7c>)
 80017ee:	f7ff fc2f 	bl	8001050 <Accel_Init>
  Magneto_Init(&MAGNETO);
 80017f2:	4815      	ldr	r0, [pc, #84]	; (8001848 <main+0x80>)
 80017f4:	f7ff fcc7 	bl	8001186 <Magneto_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  //Read_Gyro(&GYRO);
	  Read_Gyro_Temperature(&GYRO);
 80017f8:	4811      	ldr	r0, [pc, #68]	; (8001840 <main+0x78>)
 80017fa:	f7ff fd2b 	bl	8001254 <Read_Gyro_Temperature>
	  Read_Accel(&ACCEL);
 80017fe:	4811      	ldr	r0, [pc, #68]	; (8001844 <main+0x7c>)
 8001800:	f7ff fc4c 	bl	800109c <Read_Accel>
	  printf("%8.2f  %8.2d %8.2d %8.2d\r\n", GYRO.gyro_Temp, ACCEL.raw_accel_X, ACCEL.raw_accel_Y, ACCEL.raw_accel_Z);
 8001804:	4b0e      	ldr	r3, [pc, #56]	; (8001840 <main+0x78>)
 8001806:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800180a:	4618      	mov	r0, r3
 800180c:	f7fe feac 	bl	8000568 <__aeabi_f2d>
 8001810:	4602      	mov	r2, r0
 8001812:	460b      	mov	r3, r1
 8001814:	490b      	ldr	r1, [pc, #44]	; (8001844 <main+0x7c>)
 8001816:	f9b1 1078 	ldrsh.w	r1, [r1, #120]	; 0x78
 800181a:	4608      	mov	r0, r1
 800181c:	4909      	ldr	r1, [pc, #36]	; (8001844 <main+0x7c>)
 800181e:	f9b1 107a 	ldrsh.w	r1, [r1, #122]	; 0x7a
 8001822:	460c      	mov	r4, r1
 8001824:	4907      	ldr	r1, [pc, #28]	; (8001844 <main+0x7c>)
 8001826:	f9b1 107c 	ldrsh.w	r1, [r1, #124]	; 0x7c
 800182a:	9102      	str	r1, [sp, #8]
 800182c:	9401      	str	r4, [sp, #4]
 800182e:	9000      	str	r0, [sp, #0]
 8001830:	4806      	ldr	r0, [pc, #24]	; (800184c <main+0x84>)
 8001832:	f005 ff31 	bl	8007698 <iprintf>

	  //printf("%8.2f %8.2f %8.2f\r\n", GYRO.gyro_X, GYRO.gyro_Y, GYRO.gyro_Z);
	  HAL_Delay(100);
 8001836:	2064      	movs	r0, #100	; 0x64
 8001838:	f000 fad6 	bl	8001de8 <HAL_Delay>
	  Read_Gyro_Temperature(&GYRO);
 800183c:	e7dc      	b.n	80017f8 <main+0x30>
 800183e:	bf00      	nop
 8001840:	20000100 	.word	0x20000100
 8001844:	20000000 	.word	0x20000000
 8001848:	20000090 	.word	0x20000090
 800184c:	0800b2b0 	.word	0x0800b2b0

08001850 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b094      	sub	sp, #80	; 0x50
 8001854:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001856:	f107 0320 	add.w	r3, r7, #32
 800185a:	2230      	movs	r2, #48	; 0x30
 800185c:	2100      	movs	r1, #0
 800185e:	4618      	mov	r0, r3
 8001860:	f005 f898 	bl	8006994 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001864:	f107 030c 	add.w	r3, r7, #12
 8001868:	2200      	movs	r2, #0
 800186a:	601a      	str	r2, [r3, #0]
 800186c:	605a      	str	r2, [r3, #4]
 800186e:	609a      	str	r2, [r3, #8]
 8001870:	60da      	str	r2, [r3, #12]
 8001872:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001874:	2300      	movs	r3, #0
 8001876:	60bb      	str	r3, [r7, #8]
 8001878:	4b2b      	ldr	r3, [pc, #172]	; (8001928 <SystemClock_Config+0xd8>)
 800187a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187c:	4a2a      	ldr	r2, [pc, #168]	; (8001928 <SystemClock_Config+0xd8>)
 800187e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001882:	6413      	str	r3, [r2, #64]	; 0x40
 8001884:	4b28      	ldr	r3, [pc, #160]	; (8001928 <SystemClock_Config+0xd8>)
 8001886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001888:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800188c:	60bb      	str	r3, [r7, #8]
 800188e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001890:	2300      	movs	r3, #0
 8001892:	607b      	str	r3, [r7, #4]
 8001894:	4b25      	ldr	r3, [pc, #148]	; (800192c <SystemClock_Config+0xdc>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a24      	ldr	r2, [pc, #144]	; (800192c <SystemClock_Config+0xdc>)
 800189a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800189e:	6013      	str	r3, [r2, #0]
 80018a0:	4b22      	ldr	r3, [pc, #136]	; (800192c <SystemClock_Config+0xdc>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80018a8:	607b      	str	r3, [r7, #4]
 80018aa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80018ac:	2301      	movs	r3, #1
 80018ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80018b0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80018b4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018b6:	2302      	movs	r3, #2
 80018b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018ba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80018be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80018c0:	2304      	movs	r3, #4
 80018c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 80018c4:	23b4      	movs	r3, #180	; 0xb4
 80018c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018c8:	2302      	movs	r3, #2
 80018ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80018cc:	2304      	movs	r3, #4
 80018ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018d0:	f107 0320 	add.w	r3, r7, #32
 80018d4:	4618      	mov	r0, r3
 80018d6:	f003 fb79 	bl	8004fcc <HAL_RCC_OscConfig>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d001      	beq.n	80018e4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80018e0:	f000 f826 	bl	8001930 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80018e4:	f003 fb22 	bl	8004f2c <HAL_PWREx_EnableOverDrive>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80018ee:	f000 f81f 	bl	8001930 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018f2:	230f      	movs	r3, #15
 80018f4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018f6:	2302      	movs	r3, #2
 80018f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018fa:	2300      	movs	r3, #0
 80018fc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80018fe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001902:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001904:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001908:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800190a:	f107 030c 	add.w	r3, r7, #12
 800190e:	2105      	movs	r1, #5
 8001910:	4618      	mov	r0, r3
 8001912:	f003 fdd3 	bl	80054bc <HAL_RCC_ClockConfig>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 800191c:	f000 f808 	bl	8001930 <Error_Handler>
  }
}
 8001920:	bf00      	nop
 8001922:	3750      	adds	r7, #80	; 0x50
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	40023800 	.word	0x40023800
 800192c:	40007000 	.word	0x40007000

08001930 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001934:	b672      	cpsid	i
}
 8001936:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001938:	e7fe      	b.n	8001938 <Error_Handler+0x8>
	...

0800193c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001942:	2300      	movs	r3, #0
 8001944:	607b      	str	r3, [r7, #4]
 8001946:	4b10      	ldr	r3, [pc, #64]	; (8001988 <HAL_MspInit+0x4c>)
 8001948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800194a:	4a0f      	ldr	r2, [pc, #60]	; (8001988 <HAL_MspInit+0x4c>)
 800194c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001950:	6453      	str	r3, [r2, #68]	; 0x44
 8001952:	4b0d      	ldr	r3, [pc, #52]	; (8001988 <HAL_MspInit+0x4c>)
 8001954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001956:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800195a:	607b      	str	r3, [r7, #4]
 800195c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800195e:	2300      	movs	r3, #0
 8001960:	603b      	str	r3, [r7, #0]
 8001962:	4b09      	ldr	r3, [pc, #36]	; (8001988 <HAL_MspInit+0x4c>)
 8001964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001966:	4a08      	ldr	r2, [pc, #32]	; (8001988 <HAL_MspInit+0x4c>)
 8001968:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800196c:	6413      	str	r3, [r2, #64]	; 0x40
 800196e:	4b06      	ldr	r3, [pc, #24]	; (8001988 <HAL_MspInit+0x4c>)
 8001970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001976:	603b      	str	r3, [r7, #0]
 8001978:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800197a:	bf00      	nop
 800197c:	370c      	adds	r7, #12
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	40023800 	.word	0x40023800

0800198c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001990:	e7fe      	b.n	8001990 <NMI_Handler+0x4>

08001992 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001992:	b480      	push	{r7}
 8001994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001996:	e7fe      	b.n	8001996 <HardFault_Handler+0x4>

08001998 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800199c:	e7fe      	b.n	800199c <MemManage_Handler+0x4>

0800199e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800199e:	b480      	push	{r7}
 80019a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019a2:	e7fe      	b.n	80019a2 <BusFault_Handler+0x4>

080019a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019a8:	e7fe      	b.n	80019a8 <UsageFault_Handler+0x4>

080019aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019aa:	b480      	push	{r7}
 80019ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019ae:	bf00      	nop
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr

080019b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019bc:	bf00      	nop
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr

080019c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019c6:	b480      	push	{r7}
 80019c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019ca:	bf00      	nop
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr

080019d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019d8:	f000 f9e6 	bl	8001da8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019dc:	bf00      	nop
 80019de:	bd80      	pop	{r7, pc}

080019e0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80019e4:	4802      	ldr	r0, [pc, #8]	; (80019f0 <I2C1_EV_IRQHandler+0x10>)
 80019e6:	f001 fa03 	bl	8002df0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80019ea:	bf00      	nop
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	200003c4 	.word	0x200003c4

080019f4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80019f8:	4802      	ldr	r0, [pc, #8]	; (8001a04 <I2C1_ER_IRQHandler+0x10>)
 80019fa:	f001 fb6a 	bl	80030d2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80019fe:	bf00      	nop
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	200003c4 	.word	0x200003c4

08001a08 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001a0c:	4802      	ldr	r0, [pc, #8]	; (8001a18 <I2C2_EV_IRQHandler+0x10>)
 8001a0e:	f001 f9ef 	bl	8002df0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8001a12:	bf00      	nop
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	20000418 	.word	0x20000418

08001a1c <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8001a20:	4802      	ldr	r0, [pc, #8]	; (8001a2c <I2C2_ER_IRQHandler+0x10>)
 8001a22:	f001 fb56 	bl	80030d2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8001a26:	bf00      	nop
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	20000418 	.word	0x20000418

08001a30 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001a34:	4802      	ldr	r0, [pc, #8]	; (8001a40 <USART3_IRQHandler+0x10>)
 8001a36:	f004 f841 	bl	8005abc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001a3a:	bf00      	nop
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	20000470 	.word	0x20000470

08001a44 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
	return 1;
 8001a48:	2301      	movs	r3, #1
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr

08001a54 <_kill>:

int _kill(int pid, int sig)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001a5e:	f004 ff61 	bl	8006924 <__errno>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2216      	movs	r2, #22
 8001a66:	601a      	str	r2, [r3, #0]
	return -1;
 8001a68:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3708      	adds	r7, #8
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}

08001a74 <_exit>:

void _exit (int status)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001a7c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a80:	6878      	ldr	r0, [r7, #4]
 8001a82:	f7ff ffe7 	bl	8001a54 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001a86:	e7fe      	b.n	8001a86 <_exit+0x12>

08001a88 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b086      	sub	sp, #24
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	60f8      	str	r0, [r7, #12]
 8001a90:	60b9      	str	r1, [r7, #8]
 8001a92:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a94:	2300      	movs	r3, #0
 8001a96:	617b      	str	r3, [r7, #20]
 8001a98:	e00a      	b.n	8001ab0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001a9a:	f3af 8000 	nop.w
 8001a9e:	4601      	mov	r1, r0
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	1c5a      	adds	r2, r3, #1
 8001aa4:	60ba      	str	r2, [r7, #8]
 8001aa6:	b2ca      	uxtb	r2, r1
 8001aa8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	3301      	adds	r3, #1
 8001aae:	617b      	str	r3, [r7, #20]
 8001ab0:	697a      	ldr	r2, [r7, #20]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	dbf0      	blt.n	8001a9a <_read+0x12>
	}

return len;
 8001ab8:	687b      	ldr	r3, [r7, #4]
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3718      	adds	r7, #24
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}

08001ac2 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001ac2:	b480      	push	{r7}
 8001ac4:	b083      	sub	sp, #12
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	6078      	str	r0, [r7, #4]
	return -1;
 8001aca:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	370c      	adds	r7, #12
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr

08001ada <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ada:	b480      	push	{r7}
 8001adc:	b083      	sub	sp, #12
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	6078      	str	r0, [r7, #4]
 8001ae2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001aea:	605a      	str	r2, [r3, #4]
	return 0;
 8001aec:	2300      	movs	r3, #0
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	370c      	adds	r7, #12
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr

08001afa <_isatty>:

int _isatty(int file)
{
 8001afa:	b480      	push	{r7}
 8001afc:	b083      	sub	sp, #12
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	6078      	str	r0, [r7, #4]
	return 1;
 8001b02:	2301      	movs	r3, #1
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	370c      	adds	r7, #12
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr

08001b10 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b085      	sub	sp, #20
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	60f8      	str	r0, [r7, #12]
 8001b18:	60b9      	str	r1, [r7, #8]
 8001b1a:	607a      	str	r2, [r7, #4]
	return 0;
 8001b1c:	2300      	movs	r3, #0
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3714      	adds	r7, #20
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
	...

08001b2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b086      	sub	sp, #24
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b34:	4a14      	ldr	r2, [pc, #80]	; (8001b88 <_sbrk+0x5c>)
 8001b36:	4b15      	ldr	r3, [pc, #84]	; (8001b8c <_sbrk+0x60>)
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b40:	4b13      	ldr	r3, [pc, #76]	; (8001b90 <_sbrk+0x64>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d102      	bne.n	8001b4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b48:	4b11      	ldr	r3, [pc, #68]	; (8001b90 <_sbrk+0x64>)
 8001b4a:	4a12      	ldr	r2, [pc, #72]	; (8001b94 <_sbrk+0x68>)
 8001b4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b4e:	4b10      	ldr	r3, [pc, #64]	; (8001b90 <_sbrk+0x64>)
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4413      	add	r3, r2
 8001b56:	693a      	ldr	r2, [r7, #16]
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d207      	bcs.n	8001b6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b5c:	f004 fee2 	bl	8006924 <__errno>
 8001b60:	4603      	mov	r3, r0
 8001b62:	220c      	movs	r2, #12
 8001b64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b66:	f04f 33ff 	mov.w	r3, #4294967295
 8001b6a:	e009      	b.n	8001b80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b6c:	4b08      	ldr	r3, [pc, #32]	; (8001b90 <_sbrk+0x64>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b72:	4b07      	ldr	r3, [pc, #28]	; (8001b90 <_sbrk+0x64>)
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4413      	add	r3, r2
 8001b7a:	4a05      	ldr	r2, [pc, #20]	; (8001b90 <_sbrk+0x64>)
 8001b7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3718      	adds	r7, #24
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	20030000 	.word	0x20030000
 8001b8c:	00000400 	.word	0x00000400
 8001b90:	2000046c 	.word	0x2000046c
 8001b94:	200004c8 	.word	0x200004c8

08001b98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b9c:	4b06      	ldr	r3, [pc, #24]	; (8001bb8 <SystemInit+0x20>)
 8001b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ba2:	4a05      	ldr	r2, [pc, #20]	; (8001bb8 <SystemInit+0x20>)
 8001ba4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ba8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bac:	bf00      	nop
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	e000ed00 	.word	0xe000ed00

08001bbc <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001bc0:	4b11      	ldr	r3, [pc, #68]	; (8001c08 <MX_USART3_UART_Init+0x4c>)
 8001bc2:	4a12      	ldr	r2, [pc, #72]	; (8001c0c <MX_USART3_UART_Init+0x50>)
 8001bc4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001bc6:	4b10      	ldr	r3, [pc, #64]	; (8001c08 <MX_USART3_UART_Init+0x4c>)
 8001bc8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001bcc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001bce:	4b0e      	ldr	r3, [pc, #56]	; (8001c08 <MX_USART3_UART_Init+0x4c>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001bd4:	4b0c      	ldr	r3, [pc, #48]	; (8001c08 <MX_USART3_UART_Init+0x4c>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001bda:	4b0b      	ldr	r3, [pc, #44]	; (8001c08 <MX_USART3_UART_Init+0x4c>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001be0:	4b09      	ldr	r3, [pc, #36]	; (8001c08 <MX_USART3_UART_Init+0x4c>)
 8001be2:	220c      	movs	r2, #12
 8001be4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001be6:	4b08      	ldr	r3, [pc, #32]	; (8001c08 <MX_USART3_UART_Init+0x4c>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bec:	4b06      	ldr	r3, [pc, #24]	; (8001c08 <MX_USART3_UART_Init+0x4c>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001bf2:	4805      	ldr	r0, [pc, #20]	; (8001c08 <MX_USART3_UART_Init+0x4c>)
 8001bf4:	f003 fe82 	bl	80058fc <HAL_UART_Init>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001bfe:	f7ff fe97 	bl	8001930 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001c02:	bf00      	nop
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	20000470 	.word	0x20000470
 8001c0c:	40004800 	.word	0x40004800

08001c10 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b08a      	sub	sp, #40	; 0x28
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c18:	f107 0314 	add.w	r3, r7, #20
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	601a      	str	r2, [r3, #0]
 8001c20:	605a      	str	r2, [r3, #4]
 8001c22:	609a      	str	r2, [r3, #8]
 8001c24:	60da      	str	r2, [r3, #12]
 8001c26:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a1d      	ldr	r2, [pc, #116]	; (8001ca4 <HAL_UART_MspInit+0x94>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d134      	bne.n	8001c9c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001c32:	2300      	movs	r3, #0
 8001c34:	613b      	str	r3, [r7, #16]
 8001c36:	4b1c      	ldr	r3, [pc, #112]	; (8001ca8 <HAL_UART_MspInit+0x98>)
 8001c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3a:	4a1b      	ldr	r2, [pc, #108]	; (8001ca8 <HAL_UART_MspInit+0x98>)
 8001c3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c40:	6413      	str	r3, [r2, #64]	; 0x40
 8001c42:	4b19      	ldr	r3, [pc, #100]	; (8001ca8 <HAL_UART_MspInit+0x98>)
 8001c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c4a:	613b      	str	r3, [r7, #16]
 8001c4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c4e:	2300      	movs	r3, #0
 8001c50:	60fb      	str	r3, [r7, #12]
 8001c52:	4b15      	ldr	r3, [pc, #84]	; (8001ca8 <HAL_UART_MspInit+0x98>)
 8001c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c56:	4a14      	ldr	r2, [pc, #80]	; (8001ca8 <HAL_UART_MspInit+0x98>)
 8001c58:	f043 0302 	orr.w	r3, r3, #2
 8001c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c5e:	4b12      	ldr	r3, [pc, #72]	; (8001ca8 <HAL_UART_MspInit+0x98>)
 8001c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c62:	f003 0302 	and.w	r3, r3, #2
 8001c66:	60fb      	str	r3, [r7, #12]
 8001c68:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001c6a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001c6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c70:	2302      	movs	r3, #2
 8001c72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c74:	2300      	movs	r3, #0
 8001c76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001c7c:	2307      	movs	r3, #7
 8001c7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c80:	f107 0314 	add.w	r3, r7, #20
 8001c84:	4619      	mov	r1, r3
 8001c86:	4809      	ldr	r0, [pc, #36]	; (8001cac <HAL_UART_MspInit+0x9c>)
 8001c88:	f000 fa84 	bl	8002194 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	2100      	movs	r1, #0
 8001c90:	2027      	movs	r0, #39	; 0x27
 8001c92:	f000 f9a8 	bl	8001fe6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001c96:	2027      	movs	r0, #39	; 0x27
 8001c98:	f000 f9c1 	bl	800201e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001c9c:	bf00      	nop
 8001c9e:	3728      	adds	r7, #40	; 0x28
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	40004800 	.word	0x40004800
 8001ca8:	40023800 	.word	0x40023800
 8001cac:	40020400 	.word	0x40020400

08001cb0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001cb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ce8 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001cb4:	480d      	ldr	r0, [pc, #52]	; (8001cec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001cb6:	490e      	ldr	r1, [pc, #56]	; (8001cf0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001cb8:	4a0e      	ldr	r2, [pc, #56]	; (8001cf4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001cba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cbc:	e002      	b.n	8001cc4 <LoopCopyDataInit>

08001cbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cc2:	3304      	adds	r3, #4

08001cc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cc8:	d3f9      	bcc.n	8001cbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cca:	4a0b      	ldr	r2, [pc, #44]	; (8001cf8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ccc:	4c0b      	ldr	r4, [pc, #44]	; (8001cfc <LoopFillZerobss+0x26>)
  movs r3, #0
 8001cce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cd0:	e001      	b.n	8001cd6 <LoopFillZerobss>

08001cd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cd4:	3204      	adds	r2, #4

08001cd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cd8:	d3fb      	bcc.n	8001cd2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001cda:	f7ff ff5d 	bl	8001b98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001cde:	f004 fe27 	bl	8006930 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ce2:	f7ff fd71 	bl	80017c8 <main>
  bx  lr    
 8001ce6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001ce8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001cec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cf0:	200003a8 	.word	0x200003a8
  ldr r2, =_sidata
 8001cf4:	0800b7a4 	.word	0x0800b7a4
  ldr r2, =_sbss
 8001cf8:	200003a8 	.word	0x200003a8
  ldr r4, =_ebss
 8001cfc:	200004c8 	.word	0x200004c8

08001d00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d00:	e7fe      	b.n	8001d00 <ADC_IRQHandler>
	...

08001d04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d08:	4b0e      	ldr	r3, [pc, #56]	; (8001d44 <HAL_Init+0x40>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a0d      	ldr	r2, [pc, #52]	; (8001d44 <HAL_Init+0x40>)
 8001d0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d14:	4b0b      	ldr	r3, [pc, #44]	; (8001d44 <HAL_Init+0x40>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a0a      	ldr	r2, [pc, #40]	; (8001d44 <HAL_Init+0x40>)
 8001d1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d20:	4b08      	ldr	r3, [pc, #32]	; (8001d44 <HAL_Init+0x40>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a07      	ldr	r2, [pc, #28]	; (8001d44 <HAL_Init+0x40>)
 8001d26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d2c:	2003      	movs	r0, #3
 8001d2e:	f000 f94f 	bl	8001fd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d32:	2000      	movs	r0, #0
 8001d34:	f000 f808 	bl	8001d48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d38:	f7ff fe00 	bl	800193c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d3c:	2300      	movs	r3, #0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	40023c00 	.word	0x40023c00

08001d48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d50:	4b12      	ldr	r3, [pc, #72]	; (8001d9c <HAL_InitTick+0x54>)
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	4b12      	ldr	r3, [pc, #72]	; (8001da0 <HAL_InitTick+0x58>)
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	4619      	mov	r1, r3
 8001d5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d62:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d66:	4618      	mov	r0, r3
 8001d68:	f000 f967 	bl	800203a <HAL_SYSTICK_Config>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e00e      	b.n	8001d94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2b0f      	cmp	r3, #15
 8001d7a:	d80a      	bhi.n	8001d92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	6879      	ldr	r1, [r7, #4]
 8001d80:	f04f 30ff 	mov.w	r0, #4294967295
 8001d84:	f000 f92f 	bl	8001fe6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d88:	4a06      	ldr	r2, [pc, #24]	; (8001da4 <HAL_InitTick+0x5c>)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	e000      	b.n	8001d94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3708      	adds	r7, #8
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	200001c8 	.word	0x200001c8
 8001da0:	200001d0 	.word	0x200001d0
 8001da4:	200001cc 	.word	0x200001cc

08001da8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001dac:	4b06      	ldr	r3, [pc, #24]	; (8001dc8 <HAL_IncTick+0x20>)
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	461a      	mov	r2, r3
 8001db2:	4b06      	ldr	r3, [pc, #24]	; (8001dcc <HAL_IncTick+0x24>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4413      	add	r3, r2
 8001db8:	4a04      	ldr	r2, [pc, #16]	; (8001dcc <HAL_IncTick+0x24>)
 8001dba:	6013      	str	r3, [r2, #0]
}
 8001dbc:	bf00      	nop
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	200001d0 	.word	0x200001d0
 8001dcc:	200004b4 	.word	0x200004b4

08001dd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
  return uwTick;
 8001dd4:	4b03      	ldr	r3, [pc, #12]	; (8001de4 <HAL_GetTick+0x14>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	200004b4 	.word	0x200004b4

08001de8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b084      	sub	sp, #16
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001df0:	f7ff ffee 	bl	8001dd0 <HAL_GetTick>
 8001df4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e00:	d005      	beq.n	8001e0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e02:	4b0a      	ldr	r3, [pc, #40]	; (8001e2c <HAL_Delay+0x44>)
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	461a      	mov	r2, r3
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	4413      	add	r3, r2
 8001e0c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e0e:	bf00      	nop
 8001e10:	f7ff ffde 	bl	8001dd0 <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	68fa      	ldr	r2, [r7, #12]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d8f7      	bhi.n	8001e10 <HAL_Delay+0x28>
  {
  }
}
 8001e20:	bf00      	nop
 8001e22:	bf00      	nop
 8001e24:	3710      	adds	r7, #16
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	200001d0 	.word	0x200001d0

08001e30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b085      	sub	sp, #20
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	f003 0307 	and.w	r3, r3, #7
 8001e3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e40:	4b0c      	ldr	r3, [pc, #48]	; (8001e74 <__NVIC_SetPriorityGrouping+0x44>)
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e46:	68ba      	ldr	r2, [r7, #8]
 8001e48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e62:	4a04      	ldr	r2, [pc, #16]	; (8001e74 <__NVIC_SetPriorityGrouping+0x44>)
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	60d3      	str	r3, [r2, #12]
}
 8001e68:	bf00      	nop
 8001e6a:	3714      	adds	r7, #20
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr
 8001e74:	e000ed00 	.word	0xe000ed00

08001e78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e7c:	4b04      	ldr	r3, [pc, #16]	; (8001e90 <__NVIC_GetPriorityGrouping+0x18>)
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	0a1b      	lsrs	r3, r3, #8
 8001e82:	f003 0307 	and.w	r3, r3, #7
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr
 8001e90:	e000ed00 	.word	0xe000ed00

08001e94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	db0b      	blt.n	8001ebe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ea6:	79fb      	ldrb	r3, [r7, #7]
 8001ea8:	f003 021f 	and.w	r2, r3, #31
 8001eac:	4907      	ldr	r1, [pc, #28]	; (8001ecc <__NVIC_EnableIRQ+0x38>)
 8001eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb2:	095b      	lsrs	r3, r3, #5
 8001eb4:	2001      	movs	r0, #1
 8001eb6:	fa00 f202 	lsl.w	r2, r0, r2
 8001eba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ebe:	bf00      	nop
 8001ec0:	370c      	adds	r7, #12
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	e000e100 	.word	0xe000e100

08001ed0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	6039      	str	r1, [r7, #0]
 8001eda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001edc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	db0a      	blt.n	8001efa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	b2da      	uxtb	r2, r3
 8001ee8:	490c      	ldr	r1, [pc, #48]	; (8001f1c <__NVIC_SetPriority+0x4c>)
 8001eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eee:	0112      	lsls	r2, r2, #4
 8001ef0:	b2d2      	uxtb	r2, r2
 8001ef2:	440b      	add	r3, r1
 8001ef4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ef8:	e00a      	b.n	8001f10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	b2da      	uxtb	r2, r3
 8001efe:	4908      	ldr	r1, [pc, #32]	; (8001f20 <__NVIC_SetPriority+0x50>)
 8001f00:	79fb      	ldrb	r3, [r7, #7]
 8001f02:	f003 030f 	and.w	r3, r3, #15
 8001f06:	3b04      	subs	r3, #4
 8001f08:	0112      	lsls	r2, r2, #4
 8001f0a:	b2d2      	uxtb	r2, r2
 8001f0c:	440b      	add	r3, r1
 8001f0e:	761a      	strb	r2, [r3, #24]
}
 8001f10:	bf00      	nop
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr
 8001f1c:	e000e100 	.word	0xe000e100
 8001f20:	e000ed00 	.word	0xe000ed00

08001f24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b089      	sub	sp, #36	; 0x24
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	60f8      	str	r0, [r7, #12]
 8001f2c:	60b9      	str	r1, [r7, #8]
 8001f2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	f003 0307 	and.w	r3, r3, #7
 8001f36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	f1c3 0307 	rsb	r3, r3, #7
 8001f3e:	2b04      	cmp	r3, #4
 8001f40:	bf28      	it	cs
 8001f42:	2304      	movcs	r3, #4
 8001f44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	3304      	adds	r3, #4
 8001f4a:	2b06      	cmp	r3, #6
 8001f4c:	d902      	bls.n	8001f54 <NVIC_EncodePriority+0x30>
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	3b03      	subs	r3, #3
 8001f52:	e000      	b.n	8001f56 <NVIC_EncodePriority+0x32>
 8001f54:	2300      	movs	r3, #0
 8001f56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f58:	f04f 32ff 	mov.w	r2, #4294967295
 8001f5c:	69bb      	ldr	r3, [r7, #24]
 8001f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f62:	43da      	mvns	r2, r3
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	401a      	ands	r2, r3
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f6c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	fa01 f303 	lsl.w	r3, r1, r3
 8001f76:	43d9      	mvns	r1, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f7c:	4313      	orrs	r3, r2
         );
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3724      	adds	r7, #36	; 0x24
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
	...

08001f8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	3b01      	subs	r3, #1
 8001f98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f9c:	d301      	bcc.n	8001fa2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e00f      	b.n	8001fc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fa2:	4a0a      	ldr	r2, [pc, #40]	; (8001fcc <SysTick_Config+0x40>)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	3b01      	subs	r3, #1
 8001fa8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001faa:	210f      	movs	r1, #15
 8001fac:	f04f 30ff 	mov.w	r0, #4294967295
 8001fb0:	f7ff ff8e 	bl	8001ed0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fb4:	4b05      	ldr	r3, [pc, #20]	; (8001fcc <SysTick_Config+0x40>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fba:	4b04      	ldr	r3, [pc, #16]	; (8001fcc <SysTick_Config+0x40>)
 8001fbc:	2207      	movs	r2, #7
 8001fbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fc0:	2300      	movs	r3, #0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3708      	adds	r7, #8
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	e000e010 	.word	0xe000e010

08001fd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	f7ff ff29 	bl	8001e30 <__NVIC_SetPriorityGrouping>
}
 8001fde:	bf00      	nop
 8001fe0:	3708      	adds	r7, #8
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}

08001fe6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fe6:	b580      	push	{r7, lr}
 8001fe8:	b086      	sub	sp, #24
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	4603      	mov	r3, r0
 8001fee:	60b9      	str	r1, [r7, #8]
 8001ff0:	607a      	str	r2, [r7, #4]
 8001ff2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ff8:	f7ff ff3e 	bl	8001e78 <__NVIC_GetPriorityGrouping>
 8001ffc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	68b9      	ldr	r1, [r7, #8]
 8002002:	6978      	ldr	r0, [r7, #20]
 8002004:	f7ff ff8e 	bl	8001f24 <NVIC_EncodePriority>
 8002008:	4602      	mov	r2, r0
 800200a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800200e:	4611      	mov	r1, r2
 8002010:	4618      	mov	r0, r3
 8002012:	f7ff ff5d 	bl	8001ed0 <__NVIC_SetPriority>
}
 8002016:	bf00      	nop
 8002018:	3718      	adds	r7, #24
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}

0800201e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800201e:	b580      	push	{r7, lr}
 8002020:	b082      	sub	sp, #8
 8002022:	af00      	add	r7, sp, #0
 8002024:	4603      	mov	r3, r0
 8002026:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002028:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800202c:	4618      	mov	r0, r3
 800202e:	f7ff ff31 	bl	8001e94 <__NVIC_EnableIRQ>
}
 8002032:	bf00      	nop
 8002034:	3708      	adds	r7, #8
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}

0800203a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800203a:	b580      	push	{r7, lr}
 800203c:	b082      	sub	sp, #8
 800203e:	af00      	add	r7, sp, #0
 8002040:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f7ff ffa2 	bl	8001f8c <SysTick_Config>
 8002048:	4603      	mov	r3, r0
}
 800204a:	4618      	mov	r0, r3
 800204c:	3708      	adds	r7, #8
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}

08002052 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002052:	b580      	push	{r7, lr}
 8002054:	b084      	sub	sp, #16
 8002056:	af00      	add	r7, sp, #0
 8002058:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800205e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002060:	f7ff feb6 	bl	8001dd0 <HAL_GetTick>
 8002064:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800206c:	b2db      	uxtb	r3, r3
 800206e:	2b02      	cmp	r3, #2
 8002070:	d008      	beq.n	8002084 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2280      	movs	r2, #128	; 0x80
 8002076:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2200      	movs	r2, #0
 800207c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	e052      	b.n	800212a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f022 0216 	bic.w	r2, r2, #22
 8002092:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	695a      	ldr	r2, [r3, #20]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80020a2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d103      	bne.n	80020b4 <HAL_DMA_Abort+0x62>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d007      	beq.n	80020c4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f022 0208 	bic.w	r2, r2, #8
 80020c2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f022 0201 	bic.w	r2, r2, #1
 80020d2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020d4:	e013      	b.n	80020fe <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80020d6:	f7ff fe7b 	bl	8001dd0 <HAL_GetTick>
 80020da:	4602      	mov	r2, r0
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	2b05      	cmp	r3, #5
 80020e2:	d90c      	bls.n	80020fe <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2220      	movs	r2, #32
 80020e8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2203      	movs	r2, #3
 80020ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2200      	movs	r2, #0
 80020f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	e015      	b.n	800212a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0301 	and.w	r3, r3, #1
 8002108:	2b00      	cmp	r3, #0
 800210a:	d1e4      	bne.n	80020d6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002110:	223f      	movs	r2, #63	; 0x3f
 8002112:	409a      	lsls	r2, r3
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2201      	movs	r2, #1
 800211c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2200      	movs	r2, #0
 8002124:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002128:	2300      	movs	r3, #0
}
 800212a:	4618      	mov	r0, r3
 800212c:	3710      	adds	r7, #16
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}

08002132 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002132:	b480      	push	{r7}
 8002134:	b083      	sub	sp, #12
 8002136:	af00      	add	r7, sp, #0
 8002138:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002140:	b2db      	uxtb	r3, r3
 8002142:	2b02      	cmp	r3, #2
 8002144:	d004      	beq.n	8002150 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2280      	movs	r2, #128	; 0x80
 800214a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e00c      	b.n	800216a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2205      	movs	r2, #5
 8002154:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f022 0201 	bic.w	r2, r2, #1
 8002166:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002168:	2300      	movs	r3, #0
}
 800216a:	4618      	mov	r0, r3
 800216c:	370c      	adds	r7, #12
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr

08002176 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002176:	b480      	push	{r7}
 8002178:	b083      	sub	sp, #12
 800217a:	af00      	add	r7, sp, #0
 800217c:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002184:	b2db      	uxtb	r3, r3
}
 8002186:	4618      	mov	r0, r3
 8002188:	370c      	adds	r7, #12
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
	...

08002194 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002194:	b480      	push	{r7}
 8002196:	b089      	sub	sp, #36	; 0x24
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800219e:	2300      	movs	r3, #0
 80021a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021a2:	2300      	movs	r3, #0
 80021a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021a6:	2300      	movs	r3, #0
 80021a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021aa:	2300      	movs	r3, #0
 80021ac:	61fb      	str	r3, [r7, #28]
 80021ae:	e177      	b.n	80024a0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021b0:	2201      	movs	r2, #1
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	fa02 f303 	lsl.w	r3, r2, r3
 80021b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	697a      	ldr	r2, [r7, #20]
 80021c0:	4013      	ands	r3, r2
 80021c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021c4:	693a      	ldr	r2, [r7, #16]
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	f040 8166 	bne.w	800249a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	f003 0303 	and.w	r3, r3, #3
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d005      	beq.n	80021e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d130      	bne.n	8002248 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	005b      	lsls	r3, r3, #1
 80021f0:	2203      	movs	r2, #3
 80021f2:	fa02 f303 	lsl.w	r3, r2, r3
 80021f6:	43db      	mvns	r3, r3
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	4013      	ands	r3, r2
 80021fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	68da      	ldr	r2, [r3, #12]
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	005b      	lsls	r3, r3, #1
 8002206:	fa02 f303 	lsl.w	r3, r2, r3
 800220a:	69ba      	ldr	r2, [r7, #24]
 800220c:	4313      	orrs	r3, r2
 800220e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	69ba      	ldr	r2, [r7, #24]
 8002214:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800221c:	2201      	movs	r2, #1
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	fa02 f303 	lsl.w	r3, r2, r3
 8002224:	43db      	mvns	r3, r3
 8002226:	69ba      	ldr	r2, [r7, #24]
 8002228:	4013      	ands	r3, r2
 800222a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	091b      	lsrs	r3, r3, #4
 8002232:	f003 0201 	and.w	r2, r3, #1
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	fa02 f303 	lsl.w	r3, r2, r3
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	4313      	orrs	r3, r2
 8002240:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f003 0303 	and.w	r3, r3, #3
 8002250:	2b03      	cmp	r3, #3
 8002252:	d017      	beq.n	8002284 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	005b      	lsls	r3, r3, #1
 800225e:	2203      	movs	r2, #3
 8002260:	fa02 f303 	lsl.w	r3, r2, r3
 8002264:	43db      	mvns	r3, r3
 8002266:	69ba      	ldr	r2, [r7, #24]
 8002268:	4013      	ands	r3, r2
 800226a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	689a      	ldr	r2, [r3, #8]
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	005b      	lsls	r3, r3, #1
 8002274:	fa02 f303 	lsl.w	r3, r2, r3
 8002278:	69ba      	ldr	r2, [r7, #24]
 800227a:	4313      	orrs	r3, r2
 800227c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f003 0303 	and.w	r3, r3, #3
 800228c:	2b02      	cmp	r3, #2
 800228e:	d123      	bne.n	80022d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	08da      	lsrs	r2, r3, #3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	3208      	adds	r2, #8
 8002298:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800229c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	f003 0307 	and.w	r3, r3, #7
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	220f      	movs	r2, #15
 80022a8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ac:	43db      	mvns	r3, r3
 80022ae:	69ba      	ldr	r2, [r7, #24]
 80022b0:	4013      	ands	r3, r2
 80022b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	691a      	ldr	r2, [r3, #16]
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	f003 0307 	and.w	r3, r3, #7
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	fa02 f303 	lsl.w	r3, r2, r3
 80022c4:	69ba      	ldr	r2, [r7, #24]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	08da      	lsrs	r2, r3, #3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	3208      	adds	r2, #8
 80022d2:	69b9      	ldr	r1, [r7, #24]
 80022d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	005b      	lsls	r3, r3, #1
 80022e2:	2203      	movs	r2, #3
 80022e4:	fa02 f303 	lsl.w	r3, r2, r3
 80022e8:	43db      	mvns	r3, r3
 80022ea:	69ba      	ldr	r2, [r7, #24]
 80022ec:	4013      	ands	r3, r2
 80022ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	f003 0203 	and.w	r2, r3, #3
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	005b      	lsls	r3, r3, #1
 80022fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002300:	69ba      	ldr	r2, [r7, #24]
 8002302:	4313      	orrs	r3, r2
 8002304:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002314:	2b00      	cmp	r3, #0
 8002316:	f000 80c0 	beq.w	800249a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800231a:	2300      	movs	r3, #0
 800231c:	60fb      	str	r3, [r7, #12]
 800231e:	4b66      	ldr	r3, [pc, #408]	; (80024b8 <HAL_GPIO_Init+0x324>)
 8002320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002322:	4a65      	ldr	r2, [pc, #404]	; (80024b8 <HAL_GPIO_Init+0x324>)
 8002324:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002328:	6453      	str	r3, [r2, #68]	; 0x44
 800232a:	4b63      	ldr	r3, [pc, #396]	; (80024b8 <HAL_GPIO_Init+0x324>)
 800232c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800232e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002332:	60fb      	str	r3, [r7, #12]
 8002334:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002336:	4a61      	ldr	r2, [pc, #388]	; (80024bc <HAL_GPIO_Init+0x328>)
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	089b      	lsrs	r3, r3, #2
 800233c:	3302      	adds	r3, #2
 800233e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002342:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	f003 0303 	and.w	r3, r3, #3
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	220f      	movs	r2, #15
 800234e:	fa02 f303 	lsl.w	r3, r2, r3
 8002352:	43db      	mvns	r3, r3
 8002354:	69ba      	ldr	r2, [r7, #24]
 8002356:	4013      	ands	r3, r2
 8002358:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4a58      	ldr	r2, [pc, #352]	; (80024c0 <HAL_GPIO_Init+0x32c>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d037      	beq.n	80023d2 <HAL_GPIO_Init+0x23e>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a57      	ldr	r2, [pc, #348]	; (80024c4 <HAL_GPIO_Init+0x330>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d031      	beq.n	80023ce <HAL_GPIO_Init+0x23a>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4a56      	ldr	r2, [pc, #344]	; (80024c8 <HAL_GPIO_Init+0x334>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d02b      	beq.n	80023ca <HAL_GPIO_Init+0x236>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4a55      	ldr	r2, [pc, #340]	; (80024cc <HAL_GPIO_Init+0x338>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d025      	beq.n	80023c6 <HAL_GPIO_Init+0x232>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4a54      	ldr	r2, [pc, #336]	; (80024d0 <HAL_GPIO_Init+0x33c>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d01f      	beq.n	80023c2 <HAL_GPIO_Init+0x22e>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4a53      	ldr	r2, [pc, #332]	; (80024d4 <HAL_GPIO_Init+0x340>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d019      	beq.n	80023be <HAL_GPIO_Init+0x22a>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4a52      	ldr	r2, [pc, #328]	; (80024d8 <HAL_GPIO_Init+0x344>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d013      	beq.n	80023ba <HAL_GPIO_Init+0x226>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4a51      	ldr	r2, [pc, #324]	; (80024dc <HAL_GPIO_Init+0x348>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d00d      	beq.n	80023b6 <HAL_GPIO_Init+0x222>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4a50      	ldr	r2, [pc, #320]	; (80024e0 <HAL_GPIO_Init+0x34c>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d007      	beq.n	80023b2 <HAL_GPIO_Init+0x21e>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4a4f      	ldr	r2, [pc, #316]	; (80024e4 <HAL_GPIO_Init+0x350>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d101      	bne.n	80023ae <HAL_GPIO_Init+0x21a>
 80023aa:	2309      	movs	r3, #9
 80023ac:	e012      	b.n	80023d4 <HAL_GPIO_Init+0x240>
 80023ae:	230a      	movs	r3, #10
 80023b0:	e010      	b.n	80023d4 <HAL_GPIO_Init+0x240>
 80023b2:	2308      	movs	r3, #8
 80023b4:	e00e      	b.n	80023d4 <HAL_GPIO_Init+0x240>
 80023b6:	2307      	movs	r3, #7
 80023b8:	e00c      	b.n	80023d4 <HAL_GPIO_Init+0x240>
 80023ba:	2306      	movs	r3, #6
 80023bc:	e00a      	b.n	80023d4 <HAL_GPIO_Init+0x240>
 80023be:	2305      	movs	r3, #5
 80023c0:	e008      	b.n	80023d4 <HAL_GPIO_Init+0x240>
 80023c2:	2304      	movs	r3, #4
 80023c4:	e006      	b.n	80023d4 <HAL_GPIO_Init+0x240>
 80023c6:	2303      	movs	r3, #3
 80023c8:	e004      	b.n	80023d4 <HAL_GPIO_Init+0x240>
 80023ca:	2302      	movs	r3, #2
 80023cc:	e002      	b.n	80023d4 <HAL_GPIO_Init+0x240>
 80023ce:	2301      	movs	r3, #1
 80023d0:	e000      	b.n	80023d4 <HAL_GPIO_Init+0x240>
 80023d2:	2300      	movs	r3, #0
 80023d4:	69fa      	ldr	r2, [r7, #28]
 80023d6:	f002 0203 	and.w	r2, r2, #3
 80023da:	0092      	lsls	r2, r2, #2
 80023dc:	4093      	lsls	r3, r2
 80023de:	69ba      	ldr	r2, [r7, #24]
 80023e0:	4313      	orrs	r3, r2
 80023e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023e4:	4935      	ldr	r1, [pc, #212]	; (80024bc <HAL_GPIO_Init+0x328>)
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	089b      	lsrs	r3, r3, #2
 80023ea:	3302      	adds	r3, #2
 80023ec:	69ba      	ldr	r2, [r7, #24]
 80023ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023f2:	4b3d      	ldr	r3, [pc, #244]	; (80024e8 <HAL_GPIO_Init+0x354>)
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	43db      	mvns	r3, r3
 80023fc:	69ba      	ldr	r2, [r7, #24]
 80023fe:	4013      	ands	r3, r2
 8002400:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d003      	beq.n	8002416 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800240e:	69ba      	ldr	r2, [r7, #24]
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	4313      	orrs	r3, r2
 8002414:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002416:	4a34      	ldr	r2, [pc, #208]	; (80024e8 <HAL_GPIO_Init+0x354>)
 8002418:	69bb      	ldr	r3, [r7, #24]
 800241a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800241c:	4b32      	ldr	r3, [pc, #200]	; (80024e8 <HAL_GPIO_Init+0x354>)
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	43db      	mvns	r3, r3
 8002426:	69ba      	ldr	r2, [r7, #24]
 8002428:	4013      	ands	r3, r2
 800242a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002434:	2b00      	cmp	r3, #0
 8002436:	d003      	beq.n	8002440 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002438:	69ba      	ldr	r2, [r7, #24]
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	4313      	orrs	r3, r2
 800243e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002440:	4a29      	ldr	r2, [pc, #164]	; (80024e8 <HAL_GPIO_Init+0x354>)
 8002442:	69bb      	ldr	r3, [r7, #24]
 8002444:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002446:	4b28      	ldr	r3, [pc, #160]	; (80024e8 <HAL_GPIO_Init+0x354>)
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	43db      	mvns	r3, r3
 8002450:	69ba      	ldr	r2, [r7, #24]
 8002452:	4013      	ands	r3, r2
 8002454:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d003      	beq.n	800246a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002462:	69ba      	ldr	r2, [r7, #24]
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	4313      	orrs	r3, r2
 8002468:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800246a:	4a1f      	ldr	r2, [pc, #124]	; (80024e8 <HAL_GPIO_Init+0x354>)
 800246c:	69bb      	ldr	r3, [r7, #24]
 800246e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002470:	4b1d      	ldr	r3, [pc, #116]	; (80024e8 <HAL_GPIO_Init+0x354>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	43db      	mvns	r3, r3
 800247a:	69ba      	ldr	r2, [r7, #24]
 800247c:	4013      	ands	r3, r2
 800247e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002488:	2b00      	cmp	r3, #0
 800248a:	d003      	beq.n	8002494 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800248c:	69ba      	ldr	r2, [r7, #24]
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	4313      	orrs	r3, r2
 8002492:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002494:	4a14      	ldr	r2, [pc, #80]	; (80024e8 <HAL_GPIO_Init+0x354>)
 8002496:	69bb      	ldr	r3, [r7, #24]
 8002498:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	3301      	adds	r3, #1
 800249e:	61fb      	str	r3, [r7, #28]
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	2b0f      	cmp	r3, #15
 80024a4:	f67f ae84 	bls.w	80021b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024a8:	bf00      	nop
 80024aa:	bf00      	nop
 80024ac:	3724      	adds	r7, #36	; 0x24
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr
 80024b6:	bf00      	nop
 80024b8:	40023800 	.word	0x40023800
 80024bc:	40013800 	.word	0x40013800
 80024c0:	40020000 	.word	0x40020000
 80024c4:	40020400 	.word	0x40020400
 80024c8:	40020800 	.word	0x40020800
 80024cc:	40020c00 	.word	0x40020c00
 80024d0:	40021000 	.word	0x40021000
 80024d4:	40021400 	.word	0x40021400
 80024d8:	40021800 	.word	0x40021800
 80024dc:	40021c00 	.word	0x40021c00
 80024e0:	40022000 	.word	0x40022000
 80024e4:	40022400 	.word	0x40022400
 80024e8:	40013c00 	.word	0x40013c00

080024ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	460b      	mov	r3, r1
 80024f6:	807b      	strh	r3, [r7, #2]
 80024f8:	4613      	mov	r3, r2
 80024fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024fc:	787b      	ldrb	r3, [r7, #1]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d003      	beq.n	800250a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002502:	887a      	ldrh	r2, [r7, #2]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002508:	e003      	b.n	8002512 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800250a:	887b      	ldrh	r3, [r7, #2]
 800250c:	041a      	lsls	r2, r3, #16
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	619a      	str	r2, [r3, #24]
}
 8002512:	bf00      	nop
 8002514:	370c      	adds	r7, #12
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
	...

08002520 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d101      	bne.n	8002532 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e12b      	b.n	800278a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002538:	b2db      	uxtb	r3, r3
 800253a:	2b00      	cmp	r3, #0
 800253c:	d106      	bne.n	800254c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2200      	movs	r2, #0
 8002542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f7ff f886 	bl	8001658 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2224      	movs	r2, #36	; 0x24
 8002550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f022 0201 	bic.w	r2, r2, #1
 8002562:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002572:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002582:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002584:	f003 f992 	bl	80058ac <HAL_RCC_GetPCLK1Freq>
 8002588:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	4a81      	ldr	r2, [pc, #516]	; (8002794 <HAL_I2C_Init+0x274>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d807      	bhi.n	80025a4 <HAL_I2C_Init+0x84>
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	4a80      	ldr	r2, [pc, #512]	; (8002798 <HAL_I2C_Init+0x278>)
 8002598:	4293      	cmp	r3, r2
 800259a:	bf94      	ite	ls
 800259c:	2301      	movls	r3, #1
 800259e:	2300      	movhi	r3, #0
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	e006      	b.n	80025b2 <HAL_I2C_Init+0x92>
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	4a7d      	ldr	r2, [pc, #500]	; (800279c <HAL_I2C_Init+0x27c>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	bf94      	ite	ls
 80025ac:	2301      	movls	r3, #1
 80025ae:	2300      	movhi	r3, #0
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d001      	beq.n	80025ba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e0e7      	b.n	800278a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	4a78      	ldr	r2, [pc, #480]	; (80027a0 <HAL_I2C_Init+0x280>)
 80025be:	fba2 2303 	umull	r2, r3, r2, r3
 80025c2:	0c9b      	lsrs	r3, r3, #18
 80025c4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	68ba      	ldr	r2, [r7, #8]
 80025d6:	430a      	orrs	r2, r1
 80025d8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	6a1b      	ldr	r3, [r3, #32]
 80025e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	4a6a      	ldr	r2, [pc, #424]	; (8002794 <HAL_I2C_Init+0x274>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d802      	bhi.n	80025f4 <HAL_I2C_Init+0xd4>
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	3301      	adds	r3, #1
 80025f2:	e009      	b.n	8002608 <HAL_I2C_Init+0xe8>
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80025fa:	fb02 f303 	mul.w	r3, r2, r3
 80025fe:	4a69      	ldr	r2, [pc, #420]	; (80027a4 <HAL_I2C_Init+0x284>)
 8002600:	fba2 2303 	umull	r2, r3, r2, r3
 8002604:	099b      	lsrs	r3, r3, #6
 8002606:	3301      	adds	r3, #1
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	6812      	ldr	r2, [r2, #0]
 800260c:	430b      	orrs	r3, r1
 800260e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	69db      	ldr	r3, [r3, #28]
 8002616:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800261a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	495c      	ldr	r1, [pc, #368]	; (8002794 <HAL_I2C_Init+0x274>)
 8002624:	428b      	cmp	r3, r1
 8002626:	d819      	bhi.n	800265c <HAL_I2C_Init+0x13c>
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	1e59      	subs	r1, r3, #1
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	005b      	lsls	r3, r3, #1
 8002632:	fbb1 f3f3 	udiv	r3, r1, r3
 8002636:	1c59      	adds	r1, r3, #1
 8002638:	f640 73fc 	movw	r3, #4092	; 0xffc
 800263c:	400b      	ands	r3, r1
 800263e:	2b00      	cmp	r3, #0
 8002640:	d00a      	beq.n	8002658 <HAL_I2C_Init+0x138>
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	1e59      	subs	r1, r3, #1
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	005b      	lsls	r3, r3, #1
 800264c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002650:	3301      	adds	r3, #1
 8002652:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002656:	e051      	b.n	80026fc <HAL_I2C_Init+0x1dc>
 8002658:	2304      	movs	r3, #4
 800265a:	e04f      	b.n	80026fc <HAL_I2C_Init+0x1dc>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d111      	bne.n	8002688 <HAL_I2C_Init+0x168>
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	1e58      	subs	r0, r3, #1
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6859      	ldr	r1, [r3, #4]
 800266c:	460b      	mov	r3, r1
 800266e:	005b      	lsls	r3, r3, #1
 8002670:	440b      	add	r3, r1
 8002672:	fbb0 f3f3 	udiv	r3, r0, r3
 8002676:	3301      	adds	r3, #1
 8002678:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800267c:	2b00      	cmp	r3, #0
 800267e:	bf0c      	ite	eq
 8002680:	2301      	moveq	r3, #1
 8002682:	2300      	movne	r3, #0
 8002684:	b2db      	uxtb	r3, r3
 8002686:	e012      	b.n	80026ae <HAL_I2C_Init+0x18e>
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	1e58      	subs	r0, r3, #1
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6859      	ldr	r1, [r3, #4]
 8002690:	460b      	mov	r3, r1
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	440b      	add	r3, r1
 8002696:	0099      	lsls	r1, r3, #2
 8002698:	440b      	add	r3, r1
 800269a:	fbb0 f3f3 	udiv	r3, r0, r3
 800269e:	3301      	adds	r3, #1
 80026a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	bf0c      	ite	eq
 80026a8:	2301      	moveq	r3, #1
 80026aa:	2300      	movne	r3, #0
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d001      	beq.n	80026b6 <HAL_I2C_Init+0x196>
 80026b2:	2301      	movs	r3, #1
 80026b4:	e022      	b.n	80026fc <HAL_I2C_Init+0x1dc>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d10e      	bne.n	80026dc <HAL_I2C_Init+0x1bc>
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	1e58      	subs	r0, r3, #1
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6859      	ldr	r1, [r3, #4]
 80026c6:	460b      	mov	r3, r1
 80026c8:	005b      	lsls	r3, r3, #1
 80026ca:	440b      	add	r3, r1
 80026cc:	fbb0 f3f3 	udiv	r3, r0, r3
 80026d0:	3301      	adds	r3, #1
 80026d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026da:	e00f      	b.n	80026fc <HAL_I2C_Init+0x1dc>
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	1e58      	subs	r0, r3, #1
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6859      	ldr	r1, [r3, #4]
 80026e4:	460b      	mov	r3, r1
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	440b      	add	r3, r1
 80026ea:	0099      	lsls	r1, r3, #2
 80026ec:	440b      	add	r3, r1
 80026ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80026f2:	3301      	adds	r3, #1
 80026f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026fc:	6879      	ldr	r1, [r7, #4]
 80026fe:	6809      	ldr	r1, [r1, #0]
 8002700:	4313      	orrs	r3, r2
 8002702:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	69da      	ldr	r2, [r3, #28]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6a1b      	ldr	r3, [r3, #32]
 8002716:	431a      	orrs	r2, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	430a      	orrs	r2, r1
 800271e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800272a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	6911      	ldr	r1, [r2, #16]
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	68d2      	ldr	r2, [r2, #12]
 8002736:	4311      	orrs	r1, r2
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	6812      	ldr	r2, [r2, #0]
 800273c:	430b      	orrs	r3, r1
 800273e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	68db      	ldr	r3, [r3, #12]
 8002746:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	695a      	ldr	r2, [r3, #20]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	699b      	ldr	r3, [r3, #24]
 8002752:	431a      	orrs	r2, r3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	430a      	orrs	r2, r1
 800275a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f042 0201 	orr.w	r2, r2, #1
 800276a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2200      	movs	r2, #0
 8002770:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2220      	movs	r2, #32
 8002776:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2200      	movs	r2, #0
 800277e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2200      	movs	r2, #0
 8002784:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002788:	2300      	movs	r3, #0
}
 800278a:	4618      	mov	r0, r3
 800278c:	3710      	adds	r7, #16
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	000186a0 	.word	0x000186a0
 8002798:	001e847f 	.word	0x001e847f
 800279c:	003d08ff 	.word	0x003d08ff
 80027a0:	431bde83 	.word	0x431bde83
 80027a4:	10624dd3 	.word	0x10624dd3

080027a8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b088      	sub	sp, #32
 80027ac:	af02      	add	r7, sp, #8
 80027ae:	60f8      	str	r0, [r7, #12]
 80027b0:	607a      	str	r2, [r7, #4]
 80027b2:	461a      	mov	r2, r3
 80027b4:	460b      	mov	r3, r1
 80027b6:	817b      	strh	r3, [r7, #10]
 80027b8:	4613      	mov	r3, r2
 80027ba:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80027bc:	f7ff fb08 	bl	8001dd0 <HAL_GetTick>
 80027c0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	2b20      	cmp	r3, #32
 80027cc:	f040 80e0 	bne.w	8002990 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	9300      	str	r3, [sp, #0]
 80027d4:	2319      	movs	r3, #25
 80027d6:	2201      	movs	r2, #1
 80027d8:	4970      	ldr	r1, [pc, #448]	; (800299c <HAL_I2C_Master_Transmit+0x1f4>)
 80027da:	68f8      	ldr	r0, [r7, #12]
 80027dc:	f002 f900 	bl	80049e0 <I2C_WaitOnFlagUntilTimeout>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d001      	beq.n	80027ea <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80027e6:	2302      	movs	r3, #2
 80027e8:	e0d3      	b.n	8002992 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d101      	bne.n	80027f8 <HAL_I2C_Master_Transmit+0x50>
 80027f4:	2302      	movs	r3, #2
 80027f6:	e0cc      	b.n	8002992 <HAL_I2C_Master_Transmit+0x1ea>
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2201      	movs	r2, #1
 80027fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0301 	and.w	r3, r3, #1
 800280a:	2b01      	cmp	r3, #1
 800280c:	d007      	beq.n	800281e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f042 0201 	orr.w	r2, r2, #1
 800281c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800282c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2221      	movs	r2, #33	; 0x21
 8002832:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2210      	movs	r2, #16
 800283a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2200      	movs	r2, #0
 8002842:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	893a      	ldrh	r2, [r7, #8]
 800284e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002854:	b29a      	uxth	r2, r3
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	4a50      	ldr	r2, [pc, #320]	; (80029a0 <HAL_I2C_Master_Transmit+0x1f8>)
 800285e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002860:	8979      	ldrh	r1, [r7, #10]
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	6a3a      	ldr	r2, [r7, #32]
 8002866:	68f8      	ldr	r0, [r7, #12]
 8002868:	f001 fea8 	bl	80045bc <I2C_MasterRequestWrite>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d001      	beq.n	8002876 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e08d      	b.n	8002992 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002876:	2300      	movs	r3, #0
 8002878:	613b      	str	r3, [r7, #16]
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	695b      	ldr	r3, [r3, #20]
 8002880:	613b      	str	r3, [r7, #16]
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	699b      	ldr	r3, [r3, #24]
 8002888:	613b      	str	r3, [r7, #16]
 800288a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800288c:	e066      	b.n	800295c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800288e:	697a      	ldr	r2, [r7, #20]
 8002890:	6a39      	ldr	r1, [r7, #32]
 8002892:	68f8      	ldr	r0, [r7, #12]
 8002894:	f002 f97a 	bl	8004b8c <I2C_WaitOnTXEFlagUntilTimeout>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d00d      	beq.n	80028ba <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a2:	2b04      	cmp	r3, #4
 80028a4:	d107      	bne.n	80028b6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028b4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e06b      	b.n	8002992 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028be:	781a      	ldrb	r2, [r3, #0]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ca:	1c5a      	adds	r2, r3, #1
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	3b01      	subs	r3, #1
 80028d8:	b29a      	uxth	r2, r3
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028e2:	3b01      	subs	r3, #1
 80028e4:	b29a      	uxth	r2, r3
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	695b      	ldr	r3, [r3, #20]
 80028f0:	f003 0304 	and.w	r3, r3, #4
 80028f4:	2b04      	cmp	r3, #4
 80028f6:	d11b      	bne.n	8002930 <HAL_I2C_Master_Transmit+0x188>
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d017      	beq.n	8002930 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002904:	781a      	ldrb	r2, [r3, #0]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002910:	1c5a      	adds	r2, r3, #1
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800291a:	b29b      	uxth	r3, r3
 800291c:	3b01      	subs	r3, #1
 800291e:	b29a      	uxth	r2, r3
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002928:	3b01      	subs	r3, #1
 800292a:	b29a      	uxth	r2, r3
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002930:	697a      	ldr	r2, [r7, #20]
 8002932:	6a39      	ldr	r1, [r7, #32]
 8002934:	68f8      	ldr	r0, [r7, #12]
 8002936:	f002 f96a 	bl	8004c0e <I2C_WaitOnBTFFlagUntilTimeout>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d00d      	beq.n	800295c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002944:	2b04      	cmp	r3, #4
 8002946:	d107      	bne.n	8002958 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002956:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	e01a      	b.n	8002992 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002960:	2b00      	cmp	r3, #0
 8002962:	d194      	bne.n	800288e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002972:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2220      	movs	r2, #32
 8002978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2200      	movs	r2, #0
 8002980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2200      	movs	r2, #0
 8002988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800298c:	2300      	movs	r3, #0
 800298e:	e000      	b.n	8002992 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002990:	2302      	movs	r3, #2
  }
}
 8002992:	4618      	mov	r0, r3
 8002994:	3718      	adds	r7, #24
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	00100002 	.word	0x00100002
 80029a0:	ffff0000 	.word	0xffff0000

080029a4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b08c      	sub	sp, #48	; 0x30
 80029a8:	af02      	add	r7, sp, #8
 80029aa:	60f8      	str	r0, [r7, #12]
 80029ac:	4608      	mov	r0, r1
 80029ae:	4611      	mov	r1, r2
 80029b0:	461a      	mov	r2, r3
 80029b2:	4603      	mov	r3, r0
 80029b4:	817b      	strh	r3, [r7, #10]
 80029b6:	460b      	mov	r3, r1
 80029b8:	813b      	strh	r3, [r7, #8]
 80029ba:	4613      	mov	r3, r2
 80029bc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80029be:	f7ff fa07 	bl	8001dd0 <HAL_GetTick>
 80029c2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	2b20      	cmp	r3, #32
 80029ce:	f040 8208 	bne.w	8002de2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80029d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d4:	9300      	str	r3, [sp, #0]
 80029d6:	2319      	movs	r3, #25
 80029d8:	2201      	movs	r2, #1
 80029da:	497b      	ldr	r1, [pc, #492]	; (8002bc8 <HAL_I2C_Mem_Read+0x224>)
 80029dc:	68f8      	ldr	r0, [r7, #12]
 80029de:	f001 ffff 	bl	80049e0 <I2C_WaitOnFlagUntilTimeout>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d001      	beq.n	80029ec <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80029e8:	2302      	movs	r3, #2
 80029ea:	e1fb      	b.n	8002de4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d101      	bne.n	80029fa <HAL_I2C_Mem_Read+0x56>
 80029f6:	2302      	movs	r3, #2
 80029f8:	e1f4      	b.n	8002de4 <HAL_I2C_Mem_Read+0x440>
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2201      	movs	r2, #1
 80029fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0301 	and.w	r3, r3, #1
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d007      	beq.n	8002a20 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f042 0201 	orr.w	r2, r2, #1
 8002a1e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a2e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2222      	movs	r2, #34	; 0x22
 8002a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2240      	movs	r2, #64	; 0x40
 8002a3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2200      	movs	r2, #0
 8002a44:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a4a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002a50:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a56:	b29a      	uxth	r2, r3
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	4a5b      	ldr	r2, [pc, #364]	; (8002bcc <HAL_I2C_Mem_Read+0x228>)
 8002a60:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a62:	88f8      	ldrh	r0, [r7, #6]
 8002a64:	893a      	ldrh	r2, [r7, #8]
 8002a66:	8979      	ldrh	r1, [r7, #10]
 8002a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6a:	9301      	str	r3, [sp, #4]
 8002a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a6e:	9300      	str	r3, [sp, #0]
 8002a70:	4603      	mov	r3, r0
 8002a72:	68f8      	ldr	r0, [r7, #12]
 8002a74:	f001 fe24 	bl	80046c0 <I2C_RequestMemoryRead>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d001      	beq.n	8002a82 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e1b0      	b.n	8002de4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d113      	bne.n	8002ab2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	623b      	str	r3, [r7, #32]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	695b      	ldr	r3, [r3, #20]
 8002a94:	623b      	str	r3, [r7, #32]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	699b      	ldr	r3, [r3, #24]
 8002a9c:	623b      	str	r3, [r7, #32]
 8002a9e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002aae:	601a      	str	r2, [r3, #0]
 8002ab0:	e184      	b.n	8002dbc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d11b      	bne.n	8002af2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ac8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002aca:	2300      	movs	r3, #0
 8002acc:	61fb      	str	r3, [r7, #28]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	695b      	ldr	r3, [r3, #20]
 8002ad4:	61fb      	str	r3, [r7, #28]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	699b      	ldr	r3, [r3, #24]
 8002adc:	61fb      	str	r3, [r7, #28]
 8002ade:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002aee:	601a      	str	r2, [r3, #0]
 8002af0:	e164      	b.n	8002dbc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d11b      	bne.n	8002b32 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b08:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b18:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	61bb      	str	r3, [r7, #24]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	695b      	ldr	r3, [r3, #20]
 8002b24:	61bb      	str	r3, [r7, #24]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	699b      	ldr	r3, [r3, #24]
 8002b2c:	61bb      	str	r3, [r7, #24]
 8002b2e:	69bb      	ldr	r3, [r7, #24]
 8002b30:	e144      	b.n	8002dbc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b32:	2300      	movs	r3, #0
 8002b34:	617b      	str	r3, [r7, #20]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	695b      	ldr	r3, [r3, #20]
 8002b3c:	617b      	str	r3, [r7, #20]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	699b      	ldr	r3, [r3, #24]
 8002b44:	617b      	str	r3, [r7, #20]
 8002b46:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002b48:	e138      	b.n	8002dbc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b4e:	2b03      	cmp	r3, #3
 8002b50:	f200 80f1 	bhi.w	8002d36 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d123      	bne.n	8002ba4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b5e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002b60:	68f8      	ldr	r0, [r7, #12]
 8002b62:	f002 f8c7 	bl	8004cf4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d001      	beq.n	8002b70 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e139      	b.n	8002de4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	691a      	ldr	r2, [r3, #16]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7a:	b2d2      	uxtb	r2, r2
 8002b7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b82:	1c5a      	adds	r2, r3, #1
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b8c:	3b01      	subs	r3, #1
 8002b8e:	b29a      	uxth	r2, r3
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	3b01      	subs	r3, #1
 8002b9c:	b29a      	uxth	r2, r3
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002ba2:	e10b      	b.n	8002dbc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ba8:	2b02      	cmp	r3, #2
 8002baa:	d14e      	bne.n	8002c4a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bae:	9300      	str	r3, [sp, #0]
 8002bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	4906      	ldr	r1, [pc, #24]	; (8002bd0 <HAL_I2C_Mem_Read+0x22c>)
 8002bb6:	68f8      	ldr	r0, [r7, #12]
 8002bb8:	f001 ff12 	bl	80049e0 <I2C_WaitOnFlagUntilTimeout>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d008      	beq.n	8002bd4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e10e      	b.n	8002de4 <HAL_I2C_Mem_Read+0x440>
 8002bc6:	bf00      	nop
 8002bc8:	00100002 	.word	0x00100002
 8002bcc:	ffff0000 	.word	0xffff0000
 8002bd0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002be2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	691a      	ldr	r2, [r3, #16]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bee:	b2d2      	uxtb	r2, r2
 8002bf0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf6:	1c5a      	adds	r2, r3, #1
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c00:	3b01      	subs	r3, #1
 8002c02:	b29a      	uxth	r2, r3
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	3b01      	subs	r3, #1
 8002c10:	b29a      	uxth	r2, r3
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	691a      	ldr	r2, [r3, #16]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c20:	b2d2      	uxtb	r2, r2
 8002c22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c28:	1c5a      	adds	r2, r3, #1
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c32:	3b01      	subs	r3, #1
 8002c34:	b29a      	uxth	r2, r3
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c3e:	b29b      	uxth	r3, r3
 8002c40:	3b01      	subs	r3, #1
 8002c42:	b29a      	uxth	r2, r3
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002c48:	e0b8      	b.n	8002dbc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4c:	9300      	str	r3, [sp, #0]
 8002c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c50:	2200      	movs	r2, #0
 8002c52:	4966      	ldr	r1, [pc, #408]	; (8002dec <HAL_I2C_Mem_Read+0x448>)
 8002c54:	68f8      	ldr	r0, [r7, #12]
 8002c56:	f001 fec3 	bl	80049e0 <I2C_WaitOnFlagUntilTimeout>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d001      	beq.n	8002c64 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e0bf      	b.n	8002de4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c72:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	691a      	ldr	r2, [r3, #16]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7e:	b2d2      	uxtb	r2, r2
 8002c80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c86:	1c5a      	adds	r2, r3, #1
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c90:	3b01      	subs	r3, #1
 8002c92:	b29a      	uxth	r2, r3
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	3b01      	subs	r3, #1
 8002ca0:	b29a      	uxth	r2, r3
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca8:	9300      	str	r3, [sp, #0]
 8002caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cac:	2200      	movs	r2, #0
 8002cae:	494f      	ldr	r1, [pc, #316]	; (8002dec <HAL_I2C_Mem_Read+0x448>)
 8002cb0:	68f8      	ldr	r0, [r7, #12]
 8002cb2:	f001 fe95 	bl	80049e0 <I2C_WaitOnFlagUntilTimeout>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d001      	beq.n	8002cc0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e091      	b.n	8002de4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	691a      	ldr	r2, [r3, #16]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cda:	b2d2      	uxtb	r2, r2
 8002cdc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce2:	1c5a      	adds	r2, r3, #1
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cec:	3b01      	subs	r3, #1
 8002cee:	b29a      	uxth	r2, r3
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	3b01      	subs	r3, #1
 8002cfc:	b29a      	uxth	r2, r3
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	691a      	ldr	r2, [r3, #16]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0c:	b2d2      	uxtb	r2, r2
 8002d0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d14:	1c5a      	adds	r2, r3, #1
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d1e:	3b01      	subs	r3, #1
 8002d20:	b29a      	uxth	r2, r3
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	3b01      	subs	r3, #1
 8002d2e:	b29a      	uxth	r2, r3
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002d34:	e042      	b.n	8002dbc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d38:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002d3a:	68f8      	ldr	r0, [r7, #12]
 8002d3c:	f001 ffda 	bl	8004cf4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d001      	beq.n	8002d4a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e04c      	b.n	8002de4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	691a      	ldr	r2, [r3, #16]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d54:	b2d2      	uxtb	r2, r2
 8002d56:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5c:	1c5a      	adds	r2, r3, #1
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d66:	3b01      	subs	r3, #1
 8002d68:	b29a      	uxth	r2, r3
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d72:	b29b      	uxth	r3, r3
 8002d74:	3b01      	subs	r3, #1
 8002d76:	b29a      	uxth	r2, r3
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	695b      	ldr	r3, [r3, #20]
 8002d82:	f003 0304 	and.w	r3, r3, #4
 8002d86:	2b04      	cmp	r3, #4
 8002d88:	d118      	bne.n	8002dbc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	691a      	ldr	r2, [r3, #16]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d94:	b2d2      	uxtb	r2, r2
 8002d96:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9c:	1c5a      	adds	r2, r3, #1
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002da6:	3b01      	subs	r3, #1
 8002da8:	b29a      	uxth	r2, r3
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002db2:	b29b      	uxth	r3, r3
 8002db4:	3b01      	subs	r3, #1
 8002db6:	b29a      	uxth	r2, r3
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	f47f aec2 	bne.w	8002b4a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2220      	movs	r2, #32
 8002dca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002dde:	2300      	movs	r3, #0
 8002de0:	e000      	b.n	8002de4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002de2:	2302      	movs	r3, #2
  }
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3728      	adds	r7, #40	; 0x28
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	00010004 	.word	0x00010004

08002df0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b088      	sub	sp, #32
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e08:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e10:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e18:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002e1a:	7bfb      	ldrb	r3, [r7, #15]
 8002e1c:	2b10      	cmp	r3, #16
 8002e1e:	d003      	beq.n	8002e28 <HAL_I2C_EV_IRQHandler+0x38>
 8002e20:	7bfb      	ldrb	r3, [r7, #15]
 8002e22:	2b40      	cmp	r3, #64	; 0x40
 8002e24:	f040 80c1 	bne.w	8002faa <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	699b      	ldr	r3, [r3, #24]
 8002e2e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	695b      	ldr	r3, [r3, #20]
 8002e36:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	f003 0301 	and.w	r3, r3, #1
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d10d      	bne.n	8002e5e <HAL_I2C_EV_IRQHandler+0x6e>
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002e48:	d003      	beq.n	8002e52 <HAL_I2C_EV_IRQHandler+0x62>
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002e50:	d101      	bne.n	8002e56 <HAL_I2C_EV_IRQHandler+0x66>
 8002e52:	2301      	movs	r3, #1
 8002e54:	e000      	b.n	8002e58 <HAL_I2C_EV_IRQHandler+0x68>
 8002e56:	2300      	movs	r3, #0
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	f000 8132 	beq.w	80030c2 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e5e:	69fb      	ldr	r3, [r7, #28]
 8002e60:	f003 0301 	and.w	r3, r3, #1
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d00c      	beq.n	8002e82 <HAL_I2C_EV_IRQHandler+0x92>
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	0a5b      	lsrs	r3, r3, #9
 8002e6c:	f003 0301 	and.w	r3, r3, #1
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d006      	beq.n	8002e82 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002e74:	6878      	ldr	r0, [r7, #4]
 8002e76:	f001 ffc2 	bl	8004dfe <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f000 fd83 	bl	8003986 <I2C_Master_SB>
 8002e80:	e092      	b.n	8002fa8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	08db      	lsrs	r3, r3, #3
 8002e86:	f003 0301 	and.w	r3, r3, #1
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d009      	beq.n	8002ea2 <HAL_I2C_EV_IRQHandler+0xb2>
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	0a5b      	lsrs	r3, r3, #9
 8002e92:	f003 0301 	and.w	r3, r3, #1
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d003      	beq.n	8002ea2 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f000 fdf9 	bl	8003a92 <I2C_Master_ADD10>
 8002ea0:	e082      	b.n	8002fa8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	085b      	lsrs	r3, r3, #1
 8002ea6:	f003 0301 	and.w	r3, r3, #1
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d009      	beq.n	8002ec2 <HAL_I2C_EV_IRQHandler+0xd2>
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	0a5b      	lsrs	r3, r3, #9
 8002eb2:	f003 0301 	and.w	r3, r3, #1
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d003      	beq.n	8002ec2 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f000 fe13 	bl	8003ae6 <I2C_Master_ADDR>
 8002ec0:	e072      	b.n	8002fa8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002ec2:	69bb      	ldr	r3, [r7, #24]
 8002ec4:	089b      	lsrs	r3, r3, #2
 8002ec6:	f003 0301 	and.w	r3, r3, #1
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d03b      	beq.n	8002f46 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ed8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002edc:	f000 80f3 	beq.w	80030c6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	09db      	lsrs	r3, r3, #7
 8002ee4:	f003 0301 	and.w	r3, r3, #1
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d00f      	beq.n	8002f0c <HAL_I2C_EV_IRQHandler+0x11c>
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	0a9b      	lsrs	r3, r3, #10
 8002ef0:	f003 0301 	and.w	r3, r3, #1
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d009      	beq.n	8002f0c <HAL_I2C_EV_IRQHandler+0x11c>
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	089b      	lsrs	r3, r3, #2
 8002efc:	f003 0301 	and.w	r3, r3, #1
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d103      	bne.n	8002f0c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	f000 f9f3 	bl	80032f0 <I2C_MasterTransmit_TXE>
 8002f0a:	e04d      	b.n	8002fa8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	089b      	lsrs	r3, r3, #2
 8002f10:	f003 0301 	and.w	r3, r3, #1
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	f000 80d6 	beq.w	80030c6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	0a5b      	lsrs	r3, r3, #9
 8002f1e:	f003 0301 	and.w	r3, r3, #1
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	f000 80cf 	beq.w	80030c6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002f28:	7bbb      	ldrb	r3, [r7, #14]
 8002f2a:	2b21      	cmp	r3, #33	; 0x21
 8002f2c:	d103      	bne.n	8002f36 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f000 fa7a 	bl	8003428 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f34:	e0c7      	b.n	80030c6 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002f36:	7bfb      	ldrb	r3, [r7, #15]
 8002f38:	2b40      	cmp	r3, #64	; 0x40
 8002f3a:	f040 80c4 	bne.w	80030c6 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f000 fae8 	bl	8003514 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f44:	e0bf      	b.n	80030c6 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f54:	f000 80b7 	beq.w	80030c6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	099b      	lsrs	r3, r3, #6
 8002f5c:	f003 0301 	and.w	r3, r3, #1
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d00f      	beq.n	8002f84 <HAL_I2C_EV_IRQHandler+0x194>
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	0a9b      	lsrs	r3, r3, #10
 8002f68:	f003 0301 	and.w	r3, r3, #1
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d009      	beq.n	8002f84 <HAL_I2C_EV_IRQHandler+0x194>
 8002f70:	69fb      	ldr	r3, [r7, #28]
 8002f72:	089b      	lsrs	r3, r3, #2
 8002f74:	f003 0301 	and.w	r3, r3, #1
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d103      	bne.n	8002f84 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f000 fb5d 	bl	800363c <I2C_MasterReceive_RXNE>
 8002f82:	e011      	b.n	8002fa8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f84:	69fb      	ldr	r3, [r7, #28]
 8002f86:	089b      	lsrs	r3, r3, #2
 8002f88:	f003 0301 	and.w	r3, r3, #1
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	f000 809a 	beq.w	80030c6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	0a5b      	lsrs	r3, r3, #9
 8002f96:	f003 0301 	and.w	r3, r3, #1
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	f000 8093 	beq.w	80030c6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002fa0:	6878      	ldr	r0, [r7, #4]
 8002fa2:	f000 fc06 	bl	80037b2 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002fa6:	e08e      	b.n	80030c6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002fa8:	e08d      	b.n	80030c6 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d004      	beq.n	8002fbc <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	695b      	ldr	r3, [r3, #20]
 8002fb8:	61fb      	str	r3, [r7, #28]
 8002fba:	e007      	b.n	8002fcc <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	699b      	ldr	r3, [r3, #24]
 8002fc2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	695b      	ldr	r3, [r3, #20]
 8002fca:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	085b      	lsrs	r3, r3, #1
 8002fd0:	f003 0301 	and.w	r3, r3, #1
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d012      	beq.n	8002ffe <HAL_I2C_EV_IRQHandler+0x20e>
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	0a5b      	lsrs	r3, r3, #9
 8002fdc:	f003 0301 	and.w	r3, r3, #1
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d00c      	beq.n	8002ffe <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d003      	beq.n	8002ff4 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	699b      	ldr	r3, [r3, #24]
 8002ff2:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002ff4:	69b9      	ldr	r1, [r7, #24]
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f000 ffc4 	bl	8003f84 <I2C_Slave_ADDR>
 8002ffc:	e066      	b.n	80030cc <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	091b      	lsrs	r3, r3, #4
 8003002:	f003 0301 	and.w	r3, r3, #1
 8003006:	2b00      	cmp	r3, #0
 8003008:	d009      	beq.n	800301e <HAL_I2C_EV_IRQHandler+0x22e>
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	0a5b      	lsrs	r3, r3, #9
 800300e:	f003 0301 	and.w	r3, r3, #1
 8003012:	2b00      	cmp	r3, #0
 8003014:	d003      	beq.n	800301e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f000 fffe 	bl	8004018 <I2C_Slave_STOPF>
 800301c:	e056      	b.n	80030cc <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800301e:	7bbb      	ldrb	r3, [r7, #14]
 8003020:	2b21      	cmp	r3, #33	; 0x21
 8003022:	d002      	beq.n	800302a <HAL_I2C_EV_IRQHandler+0x23a>
 8003024:	7bbb      	ldrb	r3, [r7, #14]
 8003026:	2b29      	cmp	r3, #41	; 0x29
 8003028:	d125      	bne.n	8003076 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800302a:	69fb      	ldr	r3, [r7, #28]
 800302c:	09db      	lsrs	r3, r3, #7
 800302e:	f003 0301 	and.w	r3, r3, #1
 8003032:	2b00      	cmp	r3, #0
 8003034:	d00f      	beq.n	8003056 <HAL_I2C_EV_IRQHandler+0x266>
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	0a9b      	lsrs	r3, r3, #10
 800303a:	f003 0301 	and.w	r3, r3, #1
 800303e:	2b00      	cmp	r3, #0
 8003040:	d009      	beq.n	8003056 <HAL_I2C_EV_IRQHandler+0x266>
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	089b      	lsrs	r3, r3, #2
 8003046:	f003 0301 	and.w	r3, r3, #1
 800304a:	2b00      	cmp	r3, #0
 800304c:	d103      	bne.n	8003056 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f000 feda 	bl	8003e08 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003054:	e039      	b.n	80030ca <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	089b      	lsrs	r3, r3, #2
 800305a:	f003 0301 	and.w	r3, r3, #1
 800305e:	2b00      	cmp	r3, #0
 8003060:	d033      	beq.n	80030ca <HAL_I2C_EV_IRQHandler+0x2da>
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	0a5b      	lsrs	r3, r3, #9
 8003066:	f003 0301 	and.w	r3, r3, #1
 800306a:	2b00      	cmp	r3, #0
 800306c:	d02d      	beq.n	80030ca <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f000 ff07 	bl	8003e82 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003074:	e029      	b.n	80030ca <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	099b      	lsrs	r3, r3, #6
 800307a:	f003 0301 	and.w	r3, r3, #1
 800307e:	2b00      	cmp	r3, #0
 8003080:	d00f      	beq.n	80030a2 <HAL_I2C_EV_IRQHandler+0x2b2>
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	0a9b      	lsrs	r3, r3, #10
 8003086:	f003 0301 	and.w	r3, r3, #1
 800308a:	2b00      	cmp	r3, #0
 800308c:	d009      	beq.n	80030a2 <HAL_I2C_EV_IRQHandler+0x2b2>
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	089b      	lsrs	r3, r3, #2
 8003092:	f003 0301 	and.w	r3, r3, #1
 8003096:	2b00      	cmp	r3, #0
 8003098:	d103      	bne.n	80030a2 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f000 ff12 	bl	8003ec4 <I2C_SlaveReceive_RXNE>
 80030a0:	e014      	b.n	80030cc <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	089b      	lsrs	r3, r3, #2
 80030a6:	f003 0301 	and.w	r3, r3, #1
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d00e      	beq.n	80030cc <HAL_I2C_EV_IRQHandler+0x2dc>
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	0a5b      	lsrs	r3, r3, #9
 80030b2:	f003 0301 	and.w	r3, r3, #1
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d008      	beq.n	80030cc <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f000 ff40 	bl	8003f40 <I2C_SlaveReceive_BTF>
 80030c0:	e004      	b.n	80030cc <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80030c2:	bf00      	nop
 80030c4:	e002      	b.n	80030cc <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80030c6:	bf00      	nop
 80030c8:	e000      	b.n	80030cc <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80030ca:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80030cc:	3720      	adds	r7, #32
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}

080030d2 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80030d2:	b580      	push	{r7, lr}
 80030d4:	b08a      	sub	sp, #40	; 0x28
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	695b      	ldr	r3, [r3, #20]
 80030e0:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80030ea:	2300      	movs	r3, #0
 80030ec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030f4:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80030f6:	6a3b      	ldr	r3, [r7, #32]
 80030f8:	0a1b      	lsrs	r3, r3, #8
 80030fa:	f003 0301 	and.w	r3, r3, #1
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d00e      	beq.n	8003120 <HAL_I2C_ER_IRQHandler+0x4e>
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	0a1b      	lsrs	r3, r3, #8
 8003106:	f003 0301 	and.w	r3, r3, #1
 800310a:	2b00      	cmp	r3, #0
 800310c:	d008      	beq.n	8003120 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800310e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003110:	f043 0301 	orr.w	r3, r3, #1
 8003114:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800311e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003120:	6a3b      	ldr	r3, [r7, #32]
 8003122:	0a5b      	lsrs	r3, r3, #9
 8003124:	f003 0301 	and.w	r3, r3, #1
 8003128:	2b00      	cmp	r3, #0
 800312a:	d00e      	beq.n	800314a <HAL_I2C_ER_IRQHandler+0x78>
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	0a1b      	lsrs	r3, r3, #8
 8003130:	f003 0301 	and.w	r3, r3, #1
 8003134:	2b00      	cmp	r3, #0
 8003136:	d008      	beq.n	800314a <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800313a:	f043 0302 	orr.w	r3, r3, #2
 800313e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8003148:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800314a:	6a3b      	ldr	r3, [r7, #32]
 800314c:	0a9b      	lsrs	r3, r3, #10
 800314e:	f003 0301 	and.w	r3, r3, #1
 8003152:	2b00      	cmp	r3, #0
 8003154:	d03f      	beq.n	80031d6 <HAL_I2C_ER_IRQHandler+0x104>
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	0a1b      	lsrs	r3, r3, #8
 800315a:	f003 0301 	and.w	r3, r3, #1
 800315e:	2b00      	cmp	r3, #0
 8003160:	d039      	beq.n	80031d6 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8003162:	7efb      	ldrb	r3, [r7, #27]
 8003164:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800316a:	b29b      	uxth	r3, r3
 800316c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003174:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800317a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800317c:	7ebb      	ldrb	r3, [r7, #26]
 800317e:	2b20      	cmp	r3, #32
 8003180:	d112      	bne.n	80031a8 <HAL_I2C_ER_IRQHandler+0xd6>
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d10f      	bne.n	80031a8 <HAL_I2C_ER_IRQHandler+0xd6>
 8003188:	7cfb      	ldrb	r3, [r7, #19]
 800318a:	2b21      	cmp	r3, #33	; 0x21
 800318c:	d008      	beq.n	80031a0 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800318e:	7cfb      	ldrb	r3, [r7, #19]
 8003190:	2b29      	cmp	r3, #41	; 0x29
 8003192:	d005      	beq.n	80031a0 <HAL_I2C_ER_IRQHandler+0xce>
 8003194:	7cfb      	ldrb	r3, [r7, #19]
 8003196:	2b28      	cmp	r3, #40	; 0x28
 8003198:	d106      	bne.n	80031a8 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2b21      	cmp	r3, #33	; 0x21
 800319e:	d103      	bne.n	80031a8 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	f001 f869 	bl	8004278 <I2C_Slave_AF>
 80031a6:	e016      	b.n	80031d6 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80031b0:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80031b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b4:	f043 0304 	orr.w	r3, r3, #4
 80031b8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80031ba:	7efb      	ldrb	r3, [r7, #27]
 80031bc:	2b10      	cmp	r3, #16
 80031be:	d002      	beq.n	80031c6 <HAL_I2C_ER_IRQHandler+0xf4>
 80031c0:	7efb      	ldrb	r3, [r7, #27]
 80031c2:	2b40      	cmp	r3, #64	; 0x40
 80031c4:	d107      	bne.n	80031d6 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031d4:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80031d6:	6a3b      	ldr	r3, [r7, #32]
 80031d8:	0adb      	lsrs	r3, r3, #11
 80031da:	f003 0301 	and.w	r3, r3, #1
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d00e      	beq.n	8003200 <HAL_I2C_ER_IRQHandler+0x12e>
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	0a1b      	lsrs	r3, r3, #8
 80031e6:	f003 0301 	and.w	r3, r3, #1
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d008      	beq.n	8003200 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80031ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f0:	f043 0308 	orr.w	r3, r3, #8
 80031f4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80031fe:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003202:	2b00      	cmp	r3, #0
 8003204:	d008      	beq.n	8003218 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800320a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320c:	431a      	orrs	r2, r3
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f001 f8a0 	bl	8004358 <I2C_ITError>
  }
}
 8003218:	bf00      	nop
 800321a:	3728      	adds	r7, #40	; 0x28
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}

08003220 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003220:	b480      	push	{r7}
 8003222:	b083      	sub	sp, #12
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003228:	bf00      	nop
 800322a:	370c      	adds	r7, #12
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr

08003234 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003234:	b480      	push	{r7}
 8003236:	b083      	sub	sp, #12
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800323c:	bf00      	nop
 800323e:	370c      	adds	r7, #12
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr

08003248 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003248:	b480      	push	{r7}
 800324a:	b083      	sub	sp, #12
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003250:	bf00      	nop
 8003252:	370c      	adds	r7, #12
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr

0800325c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800325c:	b480      	push	{r7}
 800325e:	b083      	sub	sp, #12
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003264:	bf00      	nop
 8003266:	370c      	adds	r7, #12
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr

08003270 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003270:	b480      	push	{r7}
 8003272:	b083      	sub	sp, #12
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
 8003278:	460b      	mov	r3, r1
 800327a:	70fb      	strb	r3, [r7, #3]
 800327c:	4613      	mov	r3, r2
 800327e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003280:	bf00      	nop
 8003282:	370c      	adds	r7, #12
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr

0800328c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800328c:	b480      	push	{r7}
 800328e:	b083      	sub	sp, #12
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003294:	bf00      	nop
 8003296:	370c      	adds	r7, #12
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr

080032a0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80032a8:	bf00      	nop
 80032aa:	370c      	adds	r7, #12
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr

080032b4 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80032bc:	bf00      	nop
 80032be:	370c      	adds	r7, #12
 80032c0:	46bd      	mov	sp, r7
 80032c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c6:	4770      	bx	lr

080032c8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b083      	sub	sp, #12
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80032d0:	bf00      	nop
 80032d2:	370c      	adds	r7, #12
 80032d4:	46bd      	mov	sp, r7
 80032d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032da:	4770      	bx	lr

080032dc <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80032dc:	b480      	push	{r7}
 80032de:	b083      	sub	sp, #12
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80032e4:	bf00      	nop
 80032e6:	370c      	adds	r7, #12
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr

080032f0 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b084      	sub	sp, #16
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032fe:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003306:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800330c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003312:	2b00      	cmp	r3, #0
 8003314:	d150      	bne.n	80033b8 <I2C_MasterTransmit_TXE+0xc8>
 8003316:	7bfb      	ldrb	r3, [r7, #15]
 8003318:	2b21      	cmp	r3, #33	; 0x21
 800331a:	d14d      	bne.n	80033b8 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	2b08      	cmp	r3, #8
 8003320:	d01d      	beq.n	800335e <I2C_MasterTransmit_TXE+0x6e>
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	2b20      	cmp	r3, #32
 8003326:	d01a      	beq.n	800335e <I2C_MasterTransmit_TXE+0x6e>
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800332e:	d016      	beq.n	800335e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	685a      	ldr	r2, [r3, #4]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800333e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2211      	movs	r2, #17
 8003344:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2220      	movs	r2, #32
 8003352:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f7ff ff62 	bl	8003220 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800335c:	e060      	b.n	8003420 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	685a      	ldr	r2, [r3, #4]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800336c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800337c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2220      	movs	r2, #32
 8003388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003392:	b2db      	uxtb	r3, r3
 8003394:	2b40      	cmp	r3, #64	; 0x40
 8003396:	d107      	bne.n	80033a8 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2200      	movs	r2, #0
 800339c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	f7ff ff7d 	bl	80032a0 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80033a6:	e03b      	b.n	8003420 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2200      	movs	r2, #0
 80033ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f7ff ff35 	bl	8003220 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80033b6:	e033      	b.n	8003420 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80033b8:	7bfb      	ldrb	r3, [r7, #15]
 80033ba:	2b21      	cmp	r3, #33	; 0x21
 80033bc:	d005      	beq.n	80033ca <I2C_MasterTransmit_TXE+0xda>
 80033be:	7bbb      	ldrb	r3, [r7, #14]
 80033c0:	2b40      	cmp	r3, #64	; 0x40
 80033c2:	d12d      	bne.n	8003420 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80033c4:	7bfb      	ldrb	r3, [r7, #15]
 80033c6:	2b22      	cmp	r3, #34	; 0x22
 80033c8:	d12a      	bne.n	8003420 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d108      	bne.n	80033e6 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	685a      	ldr	r2, [r3, #4]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033e2:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80033e4:	e01c      	b.n	8003420 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	2b40      	cmp	r3, #64	; 0x40
 80033f0:	d103      	bne.n	80033fa <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f000 f88e 	bl	8003514 <I2C_MemoryTransmit_TXE_BTF>
}
 80033f8:	e012      	b.n	8003420 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fe:	781a      	ldrb	r2, [r3, #0]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340a:	1c5a      	adds	r2, r3, #1
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003414:	b29b      	uxth	r3, r3
 8003416:	3b01      	subs	r3, #1
 8003418:	b29a      	uxth	r2, r3
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800341e:	e7ff      	b.n	8003420 <I2C_MasterTransmit_TXE+0x130>
 8003420:	bf00      	nop
 8003422:	3710      	adds	r7, #16
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}

08003428 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b084      	sub	sp, #16
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003434:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800343c:	b2db      	uxtb	r3, r3
 800343e:	2b21      	cmp	r3, #33	; 0x21
 8003440:	d164      	bne.n	800350c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003446:	b29b      	uxth	r3, r3
 8003448:	2b00      	cmp	r3, #0
 800344a:	d012      	beq.n	8003472 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003450:	781a      	ldrb	r2, [r3, #0]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345c:	1c5a      	adds	r2, r3, #1
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003466:	b29b      	uxth	r3, r3
 8003468:	3b01      	subs	r3, #1
 800346a:	b29a      	uxth	r2, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003470:	e04c      	b.n	800350c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2b08      	cmp	r3, #8
 8003476:	d01d      	beq.n	80034b4 <I2C_MasterTransmit_BTF+0x8c>
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2b20      	cmp	r3, #32
 800347c:	d01a      	beq.n	80034b4 <I2C_MasterTransmit_BTF+0x8c>
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003484:	d016      	beq.n	80034b4 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	685a      	ldr	r2, [r3, #4]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003494:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2211      	movs	r2, #17
 800349a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2200      	movs	r2, #0
 80034a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2220      	movs	r2, #32
 80034a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	f7ff feb7 	bl	8003220 <HAL_I2C_MasterTxCpltCallback>
}
 80034b2:	e02b      	b.n	800350c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	685a      	ldr	r2, [r3, #4]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80034c2:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034d2:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2200      	movs	r2, #0
 80034d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2220      	movs	r2, #32
 80034de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	2b40      	cmp	r3, #64	; 0x40
 80034ec:	d107      	bne.n	80034fe <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2200      	movs	r2, #0
 80034f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f7ff fed2 	bl	80032a0 <HAL_I2C_MemTxCpltCallback>
}
 80034fc:	e006      	b.n	800350c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f7ff fe8a 	bl	8003220 <HAL_I2C_MasterTxCpltCallback>
}
 800350c:	bf00      	nop
 800350e:	3710      	adds	r7, #16
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}

08003514 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b084      	sub	sp, #16
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003522:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003528:	2b00      	cmp	r3, #0
 800352a:	d11d      	bne.n	8003568 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003530:	2b01      	cmp	r3, #1
 8003532:	d10b      	bne.n	800354c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003538:	b2da      	uxtb	r2, r3
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003544:	1c9a      	adds	r2, r3, #2
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800354a:	e073      	b.n	8003634 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003550:	b29b      	uxth	r3, r3
 8003552:	121b      	asrs	r3, r3, #8
 8003554:	b2da      	uxtb	r2, r3
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003560:	1c5a      	adds	r2, r3, #1
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003566:	e065      	b.n	8003634 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800356c:	2b01      	cmp	r3, #1
 800356e:	d10b      	bne.n	8003588 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003574:	b2da      	uxtb	r2, r3
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003580:	1c5a      	adds	r2, r3, #1
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003586:	e055      	b.n	8003634 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800358c:	2b02      	cmp	r3, #2
 800358e:	d151      	bne.n	8003634 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003590:	7bfb      	ldrb	r3, [r7, #15]
 8003592:	2b22      	cmp	r3, #34	; 0x22
 8003594:	d10d      	bne.n	80035b2 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035a4:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035aa:	1c5a      	adds	r2, r3, #1
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	651a      	str	r2, [r3, #80]	; 0x50
}
 80035b0:	e040      	b.n	8003634 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035b6:	b29b      	uxth	r3, r3
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d015      	beq.n	80035e8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80035bc:	7bfb      	ldrb	r3, [r7, #15]
 80035be:	2b21      	cmp	r3, #33	; 0x21
 80035c0:	d112      	bne.n	80035e8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c6:	781a      	ldrb	r2, [r3, #0]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d2:	1c5a      	adds	r2, r3, #1
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035dc:	b29b      	uxth	r3, r3
 80035de:	3b01      	subs	r3, #1
 80035e0:	b29a      	uxth	r2, r3
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80035e6:	e025      	b.n	8003634 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035ec:	b29b      	uxth	r3, r3
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d120      	bne.n	8003634 <I2C_MemoryTransmit_TXE_BTF+0x120>
 80035f2:	7bfb      	ldrb	r3, [r7, #15]
 80035f4:	2b21      	cmp	r3, #33	; 0x21
 80035f6:	d11d      	bne.n	8003634 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	685a      	ldr	r2, [r3, #4]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003606:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003616:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2200      	movs	r2, #0
 800361c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2220      	movs	r2, #32
 8003622:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2200      	movs	r2, #0
 800362a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f7ff fe36 	bl	80032a0 <HAL_I2C_MemTxCpltCallback>
}
 8003634:	bf00      	nop
 8003636:	3710      	adds	r7, #16
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}

0800363c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b084      	sub	sp, #16
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800364a:	b2db      	uxtb	r3, r3
 800364c:	2b22      	cmp	r3, #34	; 0x22
 800364e:	f040 80ac 	bne.w	80037aa <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003656:	b29b      	uxth	r3, r3
 8003658:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2b03      	cmp	r3, #3
 800365e:	d921      	bls.n	80036a4 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	691a      	ldr	r2, [r3, #16]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366a:	b2d2      	uxtb	r2, r2
 800366c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003672:	1c5a      	adds	r2, r3, #1
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800367c:	b29b      	uxth	r3, r3
 800367e:	3b01      	subs	r3, #1
 8003680:	b29a      	uxth	r2, r3
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800368a:	b29b      	uxth	r3, r3
 800368c:	2b03      	cmp	r3, #3
 800368e:	f040 808c 	bne.w	80037aa <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	685a      	ldr	r2, [r3, #4]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036a0:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80036a2:	e082      	b.n	80037aa <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a8:	2b02      	cmp	r3, #2
 80036aa:	d075      	beq.n	8003798 <I2C_MasterReceive_RXNE+0x15c>
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d002      	beq.n	80036b8 <I2C_MasterReceive_RXNE+0x7c>
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d16f      	bne.n	8003798 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f001 fae9 	bl	8004c90 <I2C_WaitOnSTOPRequestThroughIT>
 80036be:	4603      	mov	r3, r0
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d142      	bne.n	800374a <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036d2:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	685a      	ldr	r2, [r3, #4]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80036e2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	691a      	ldr	r2, [r3, #16]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ee:	b2d2      	uxtb	r2, r2
 80036f0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f6:	1c5a      	adds	r2, r3, #1
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003700:	b29b      	uxth	r3, r3
 8003702:	3b01      	subs	r3, #1
 8003704:	b29a      	uxth	r2, r3
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2220      	movs	r2, #32
 800370e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003718:	b2db      	uxtb	r3, r3
 800371a:	2b40      	cmp	r3, #64	; 0x40
 800371c:	d10a      	bne.n	8003734 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2200      	movs	r2, #0
 8003722:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	f7ff fdc1 	bl	80032b4 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003732:	e03a      	b.n	80037aa <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2200      	movs	r2, #0
 8003738:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2212      	movs	r2, #18
 8003740:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f7ff fd76 	bl	8003234 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003748:	e02f      	b.n	80037aa <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	685a      	ldr	r2, [r3, #4]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003758:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	691a      	ldr	r2, [r3, #16]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003764:	b2d2      	uxtb	r2, r2
 8003766:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376c:	1c5a      	adds	r2, r3, #1
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003776:	b29b      	uxth	r3, r3
 8003778:	3b01      	subs	r3, #1
 800377a:	b29a      	uxth	r2, r3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2220      	movs	r2, #32
 8003784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f7ff fd99 	bl	80032c8 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003796:	e008      	b.n	80037aa <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	685a      	ldr	r2, [r3, #4]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037a6:	605a      	str	r2, [r3, #4]
}
 80037a8:	e7ff      	b.n	80037aa <I2C_MasterReceive_RXNE+0x16e>
 80037aa:	bf00      	nop
 80037ac:	3710      	adds	r7, #16
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}

080037b2 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80037b2:	b580      	push	{r7, lr}
 80037b4:	b084      	sub	sp, #16
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037be:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	2b04      	cmp	r3, #4
 80037c8:	d11b      	bne.n	8003802 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	685a      	ldr	r2, [r3, #4]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037d8:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	691a      	ldr	r2, [r3, #16]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e4:	b2d2      	uxtb	r2, r2
 80037e6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ec:	1c5a      	adds	r2, r3, #1
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037f6:	b29b      	uxth	r3, r3
 80037f8:	3b01      	subs	r3, #1
 80037fa:	b29a      	uxth	r2, r3
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003800:	e0bd      	b.n	800397e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003806:	b29b      	uxth	r3, r3
 8003808:	2b03      	cmp	r3, #3
 800380a:	d129      	bne.n	8003860 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	685a      	ldr	r2, [r3, #4]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800381a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2b04      	cmp	r3, #4
 8003820:	d00a      	beq.n	8003838 <I2C_MasterReceive_BTF+0x86>
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2b02      	cmp	r3, #2
 8003826:	d007      	beq.n	8003838 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003836:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	691a      	ldr	r2, [r3, #16]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003842:	b2d2      	uxtb	r2, r2
 8003844:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384a:	1c5a      	adds	r2, r3, #1
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003854:	b29b      	uxth	r3, r3
 8003856:	3b01      	subs	r3, #1
 8003858:	b29a      	uxth	r2, r3
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800385e:	e08e      	b.n	800397e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003864:	b29b      	uxth	r3, r3
 8003866:	2b02      	cmp	r3, #2
 8003868:	d176      	bne.n	8003958 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2b01      	cmp	r3, #1
 800386e:	d002      	beq.n	8003876 <I2C_MasterReceive_BTF+0xc4>
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2b10      	cmp	r3, #16
 8003874:	d108      	bne.n	8003888 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003884:	601a      	str	r2, [r3, #0]
 8003886:	e019      	b.n	80038bc <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2b04      	cmp	r3, #4
 800388c:	d002      	beq.n	8003894 <I2C_MasterReceive_BTF+0xe2>
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2b02      	cmp	r3, #2
 8003892:	d108      	bne.n	80038a6 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80038a2:	601a      	str	r2, [r3, #0]
 80038a4:	e00a      	b.n	80038bc <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2b10      	cmp	r3, #16
 80038aa:	d007      	beq.n	80038bc <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038ba:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	691a      	ldr	r2, [r3, #16]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c6:	b2d2      	uxtb	r2, r2
 80038c8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ce:	1c5a      	adds	r2, r3, #1
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038d8:	b29b      	uxth	r3, r3
 80038da:	3b01      	subs	r3, #1
 80038dc:	b29a      	uxth	r2, r3
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	691a      	ldr	r2, [r3, #16]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ec:	b2d2      	uxtb	r2, r2
 80038ee:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f4:	1c5a      	adds	r2, r3, #1
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038fe:	b29b      	uxth	r3, r3
 8003900:	3b01      	subs	r3, #1
 8003902:	b29a      	uxth	r2, r3
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	685a      	ldr	r2, [r3, #4]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003916:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2220      	movs	r2, #32
 800391c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003926:	b2db      	uxtb	r3, r3
 8003928:	2b40      	cmp	r3, #64	; 0x40
 800392a:	d10a      	bne.n	8003942 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2200      	movs	r2, #0
 8003930:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2200      	movs	r2, #0
 8003938:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f7ff fcba 	bl	80032b4 <HAL_I2C_MemRxCpltCallback>
}
 8003940:	e01d      	b.n	800397e <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2212      	movs	r2, #18
 800394e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	f7ff fc6f 	bl	8003234 <HAL_I2C_MasterRxCpltCallback>
}
 8003956:	e012      	b.n	800397e <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	691a      	ldr	r2, [r3, #16]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003962:	b2d2      	uxtb	r2, r2
 8003964:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800396a:	1c5a      	adds	r2, r3, #1
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003974:	b29b      	uxth	r3, r3
 8003976:	3b01      	subs	r3, #1
 8003978:	b29a      	uxth	r2, r3
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800397e:	bf00      	nop
 8003980:	3710      	adds	r7, #16
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}

08003986 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003986:	b480      	push	{r7}
 8003988:	b083      	sub	sp, #12
 800398a:	af00      	add	r7, sp, #0
 800398c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003994:	b2db      	uxtb	r3, r3
 8003996:	2b40      	cmp	r3, #64	; 0x40
 8003998:	d117      	bne.n	80039ca <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d109      	bne.n	80039b6 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	461a      	mov	r2, r3
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80039b2:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80039b4:	e067      	b.n	8003a86 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	f043 0301 	orr.w	r3, r3, #1
 80039c0:	b2da      	uxtb	r2, r3
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	611a      	str	r2, [r3, #16]
}
 80039c8:	e05d      	b.n	8003a86 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	691b      	ldr	r3, [r3, #16]
 80039ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039d2:	d133      	bne.n	8003a3c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	2b21      	cmp	r3, #33	; 0x21
 80039de:	d109      	bne.n	80039f4 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	461a      	mov	r2, r3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80039f0:	611a      	str	r2, [r3, #16]
 80039f2:	e008      	b.n	8003a06 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	f043 0301 	orr.w	r3, r3, #1
 80039fe:	b2da      	uxtb	r2, r3
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d004      	beq.n	8003a18 <I2C_Master_SB+0x92>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d108      	bne.n	8003a2a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d032      	beq.n	8003a86 <I2C_Master_SB+0x100>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d02d      	beq.n	8003a86 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	685a      	ldr	r2, [r3, #4]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a38:	605a      	str	r2, [r3, #4]
}
 8003a3a:	e024      	b.n	8003a86 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d10e      	bne.n	8003a62 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	11db      	asrs	r3, r3, #7
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	f003 0306 	and.w	r3, r3, #6
 8003a52:	b2db      	uxtb	r3, r3
 8003a54:	f063 030f 	orn	r3, r3, #15
 8003a58:	b2da      	uxtb	r2, r3
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	611a      	str	r2, [r3, #16]
}
 8003a60:	e011      	b.n	8003a86 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d10d      	bne.n	8003a86 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a6e:	b29b      	uxth	r3, r3
 8003a70:	11db      	asrs	r3, r3, #7
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	f003 0306 	and.w	r3, r3, #6
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	f063 030e 	orn	r3, r3, #14
 8003a7e:	b2da      	uxtb	r2, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	611a      	str	r2, [r3, #16]
}
 8003a86:	bf00      	nop
 8003a88:	370c      	adds	r7, #12
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr

08003a92 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003a92:	b480      	push	{r7}
 8003a94:	b083      	sub	sp, #12
 8003a96:	af00      	add	r7, sp, #0
 8003a98:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a9e:	b2da      	uxtb	r2, r3
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d004      	beq.n	8003ab8 <I2C_Master_ADD10+0x26>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ab2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d108      	bne.n	8003aca <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d00c      	beq.n	8003ada <I2C_Master_ADD10+0x48>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ac4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d007      	beq.n	8003ada <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	685a      	ldr	r2, [r3, #4]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ad8:	605a      	str	r2, [r3, #4]
  }
}
 8003ada:	bf00      	nop
 8003adc:	370c      	adds	r7, #12
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae4:	4770      	bx	lr

08003ae6 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003ae6:	b480      	push	{r7}
 8003ae8:	b091      	sub	sp, #68	; 0x44
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003af4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003afc:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b02:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	2b22      	cmp	r3, #34	; 0x22
 8003b0e:	f040 8169 	bne.w	8003de4 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d10f      	bne.n	8003b3a <I2C_Master_ADDR+0x54>
 8003b1a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003b1e:	2b40      	cmp	r3, #64	; 0x40
 8003b20:	d10b      	bne.n	8003b3a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b22:	2300      	movs	r3, #0
 8003b24:	633b      	str	r3, [r7, #48]	; 0x30
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	695b      	ldr	r3, [r3, #20]
 8003b2c:	633b      	str	r3, [r7, #48]	; 0x30
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	699b      	ldr	r3, [r3, #24]
 8003b34:	633b      	str	r3, [r7, #48]	; 0x30
 8003b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b38:	e160      	b.n	8003dfc <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d11d      	bne.n	8003b7e <I2C_Master_ADDR+0x98>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	691b      	ldr	r3, [r3, #16]
 8003b46:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003b4a:	d118      	bne.n	8003b7e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	695b      	ldr	r3, [r3, #20]
 8003b56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	699b      	ldr	r3, [r3, #24]
 8003b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b70:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b76:	1c5a      	adds	r2, r3, #1
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	651a      	str	r2, [r3, #80]	; 0x50
 8003b7c:	e13e      	b.n	8003dfc <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b82:	b29b      	uxth	r3, r3
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d113      	bne.n	8003bb0 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b88:	2300      	movs	r3, #0
 8003b8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	695b      	ldr	r3, [r3, #20]
 8003b92:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	699b      	ldr	r3, [r3, #24]
 8003b9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bac:	601a      	str	r2, [r3, #0]
 8003bae:	e115      	b.n	8003ddc <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bb4:	b29b      	uxth	r3, r3
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	f040 808a 	bne.w	8003cd0 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bbe:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003bc2:	d137      	bne.n	8003c34 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bd2:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bde:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003be2:	d113      	bne.n	8003c0c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bf2:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	627b      	str	r3, [r7, #36]	; 0x24
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	695b      	ldr	r3, [r3, #20]
 8003bfe:	627b      	str	r3, [r7, #36]	; 0x24
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	699b      	ldr	r3, [r3, #24]
 8003c06:	627b      	str	r3, [r7, #36]	; 0x24
 8003c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c0a:	e0e7      	b.n	8003ddc <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	623b      	str	r3, [r7, #32]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	695b      	ldr	r3, [r3, #20]
 8003c16:	623b      	str	r3, [r7, #32]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	699b      	ldr	r3, [r3, #24]
 8003c1e:	623b      	str	r3, [r7, #32]
 8003c20:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c30:	601a      	str	r2, [r3, #0]
 8003c32:	e0d3      	b.n	8003ddc <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c36:	2b08      	cmp	r3, #8
 8003c38:	d02e      	beq.n	8003c98 <I2C_Master_ADDR+0x1b2>
 8003c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c3c:	2b20      	cmp	r3, #32
 8003c3e:	d02b      	beq.n	8003c98 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003c40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c42:	2b12      	cmp	r3, #18
 8003c44:	d102      	bne.n	8003c4c <I2C_Master_ADDR+0x166>
 8003c46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d125      	bne.n	8003c98 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003c4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c4e:	2b04      	cmp	r3, #4
 8003c50:	d00e      	beq.n	8003c70 <I2C_Master_ADDR+0x18a>
 8003c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c54:	2b02      	cmp	r3, #2
 8003c56:	d00b      	beq.n	8003c70 <I2C_Master_ADDR+0x18a>
 8003c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c5a:	2b10      	cmp	r3, #16
 8003c5c:	d008      	beq.n	8003c70 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c6c:	601a      	str	r2, [r3, #0]
 8003c6e:	e007      	b.n	8003c80 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003c7e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c80:	2300      	movs	r3, #0
 8003c82:	61fb      	str	r3, [r7, #28]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	695b      	ldr	r3, [r3, #20]
 8003c8a:	61fb      	str	r3, [r7, #28]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	699b      	ldr	r3, [r3, #24]
 8003c92:	61fb      	str	r3, [r7, #28]
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	e0a1      	b.n	8003ddc <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ca6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ca8:	2300      	movs	r3, #0
 8003caa:	61bb      	str	r3, [r7, #24]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	695b      	ldr	r3, [r3, #20]
 8003cb2:	61bb      	str	r3, [r7, #24]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	699b      	ldr	r3, [r3, #24]
 8003cba:	61bb      	str	r3, [r7, #24]
 8003cbc:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ccc:	601a      	str	r2, [r3, #0]
 8003cce:	e085      	b.n	8003ddc <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	2b02      	cmp	r3, #2
 8003cd8:	d14d      	bne.n	8003d76 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cdc:	2b04      	cmp	r3, #4
 8003cde:	d016      	beq.n	8003d0e <I2C_Master_ADDR+0x228>
 8003ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ce2:	2b02      	cmp	r3, #2
 8003ce4:	d013      	beq.n	8003d0e <I2C_Master_ADDR+0x228>
 8003ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ce8:	2b10      	cmp	r3, #16
 8003cea:	d010      	beq.n	8003d0e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cfa:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d0a:	601a      	str	r2, [r3, #0]
 8003d0c:	e007      	b.n	8003d1e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d1c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d2c:	d117      	bne.n	8003d5e <I2C_Master_ADDR+0x278>
 8003d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d30:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003d34:	d00b      	beq.n	8003d4e <I2C_Master_ADDR+0x268>
 8003d36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d008      	beq.n	8003d4e <I2C_Master_ADDR+0x268>
 8003d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d3e:	2b08      	cmp	r3, #8
 8003d40:	d005      	beq.n	8003d4e <I2C_Master_ADDR+0x268>
 8003d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d44:	2b10      	cmp	r3, #16
 8003d46:	d002      	beq.n	8003d4e <I2C_Master_ADDR+0x268>
 8003d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d4a:	2b20      	cmp	r3, #32
 8003d4c:	d107      	bne.n	8003d5e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	685a      	ldr	r2, [r3, #4]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003d5c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d5e:	2300      	movs	r3, #0
 8003d60:	617b      	str	r3, [r7, #20]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	695b      	ldr	r3, [r3, #20]
 8003d68:	617b      	str	r3, [r7, #20]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	699b      	ldr	r3, [r3, #24]
 8003d70:	617b      	str	r3, [r7, #20]
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	e032      	b.n	8003ddc <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d84:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d94:	d117      	bne.n	8003dc6 <I2C_Master_ADDR+0x2e0>
 8003d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d98:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003d9c:	d00b      	beq.n	8003db6 <I2C_Master_ADDR+0x2d0>
 8003d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d008      	beq.n	8003db6 <I2C_Master_ADDR+0x2d0>
 8003da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003da6:	2b08      	cmp	r3, #8
 8003da8:	d005      	beq.n	8003db6 <I2C_Master_ADDR+0x2d0>
 8003daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dac:	2b10      	cmp	r3, #16
 8003dae:	d002      	beq.n	8003db6 <I2C_Master_ADDR+0x2d0>
 8003db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003db2:	2b20      	cmp	r3, #32
 8003db4:	d107      	bne.n	8003dc6 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	685a      	ldr	r2, [r3, #4]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003dc4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	613b      	str	r3, [r7, #16]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	695b      	ldr	r3, [r3, #20]
 8003dd0:	613b      	str	r3, [r7, #16]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	699b      	ldr	r3, [r3, #24]
 8003dd8:	613b      	str	r3, [r7, #16]
 8003dda:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003de2:	e00b      	b.n	8003dfc <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003de4:	2300      	movs	r3, #0
 8003de6:	60fb      	str	r3, [r7, #12]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	695b      	ldr	r3, [r3, #20]
 8003dee:	60fb      	str	r3, [r7, #12]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	699b      	ldr	r3, [r3, #24]
 8003df6:	60fb      	str	r3, [r7, #12]
 8003df8:	68fb      	ldr	r3, [r7, #12]
}
 8003dfa:	e7ff      	b.n	8003dfc <I2C_Master_ADDR+0x316>
 8003dfc:	bf00      	nop
 8003dfe:	3744      	adds	r7, #68	; 0x44
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr

08003e08 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b084      	sub	sp, #16
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e16:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e1c:	b29b      	uxth	r3, r3
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d02b      	beq.n	8003e7a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e26:	781a      	ldrb	r2, [r3, #0]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e32:	1c5a      	adds	r2, r3, #1
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e3c:	b29b      	uxth	r3, r3
 8003e3e:	3b01      	subs	r3, #1
 8003e40:	b29a      	uxth	r2, r3
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e4a:	b29b      	uxth	r3, r3
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d114      	bne.n	8003e7a <I2C_SlaveTransmit_TXE+0x72>
 8003e50:	7bfb      	ldrb	r3, [r7, #15]
 8003e52:	2b29      	cmp	r3, #41	; 0x29
 8003e54:	d111      	bne.n	8003e7a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	685a      	ldr	r2, [r3, #4]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e64:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2221      	movs	r2, #33	; 0x21
 8003e6a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2228      	movs	r2, #40	; 0x28
 8003e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	f7ff f9e7 	bl	8003248 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003e7a:	bf00      	nop
 8003e7c:	3710      	adds	r7, #16
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}

08003e82 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003e82:	b480      	push	{r7}
 8003e84:	b083      	sub	sp, #12
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d011      	beq.n	8003eb8 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e98:	781a      	ldrb	r2, [r3, #0]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea4:	1c5a      	adds	r2, r3, #1
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	3b01      	subs	r3, #1
 8003eb2:	b29a      	uxth	r2, r3
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003eb8:	bf00      	nop
 8003eba:	370c      	adds	r7, #12
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr

08003ec4 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b084      	sub	sp, #16
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ed2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d02c      	beq.n	8003f38 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	691a      	ldr	r2, [r3, #16]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee8:	b2d2      	uxtb	r2, r2
 8003eea:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef0:	1c5a      	adds	r2, r3, #1
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	3b01      	subs	r3, #1
 8003efe:	b29a      	uxth	r2, r3
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f08:	b29b      	uxth	r3, r3
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d114      	bne.n	8003f38 <I2C_SlaveReceive_RXNE+0x74>
 8003f0e:	7bfb      	ldrb	r3, [r7, #15]
 8003f10:	2b2a      	cmp	r3, #42	; 0x2a
 8003f12:	d111      	bne.n	8003f38 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	685a      	ldr	r2, [r3, #4]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f22:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2222      	movs	r2, #34	; 0x22
 8003f28:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2228      	movs	r2, #40	; 0x28
 8003f2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f7ff f992 	bl	800325c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003f38:	bf00      	nop
 8003f3a:	3710      	adds	r7, #16
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}

08003f40 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b083      	sub	sp, #12
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d012      	beq.n	8003f78 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	691a      	ldr	r2, [r3, #16]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5c:	b2d2      	uxtb	r2, r2
 8003f5e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f64:	1c5a      	adds	r2, r3, #1
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	3b01      	subs	r3, #1
 8003f72:	b29a      	uxth	r2, r3
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003f78:	bf00      	nop
 8003f7a:	370c      	adds	r7, #12
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr

08003f84 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b084      	sub	sp, #16
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
 8003f8c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003f9e:	2b28      	cmp	r3, #40	; 0x28
 8003fa0:	d127      	bne.n	8003ff2 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	685a      	ldr	r2, [r3, #4]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fb0:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	089b      	lsrs	r3, r3, #2
 8003fb6:	f003 0301 	and.w	r3, r3, #1
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d101      	bne.n	8003fc2 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	09db      	lsrs	r3, r3, #7
 8003fc6:	f003 0301 	and.w	r3, r3, #1
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d103      	bne.n	8003fd6 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	68db      	ldr	r3, [r3, #12]
 8003fd2:	81bb      	strh	r3, [r7, #12]
 8003fd4:	e002      	b.n	8003fdc <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	699b      	ldr	r3, [r3, #24]
 8003fda:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003fe4:	89ba      	ldrh	r2, [r7, #12]
 8003fe6:	7bfb      	ldrb	r3, [r7, #15]
 8003fe8:	4619      	mov	r1, r3
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f7ff f940 	bl	8003270 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003ff0:	e00e      	b.n	8004010 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	60bb      	str	r3, [r7, #8]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	695b      	ldr	r3, [r3, #20]
 8003ffc:	60bb      	str	r3, [r7, #8]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	699b      	ldr	r3, [r3, #24]
 8004004:	60bb      	str	r3, [r7, #8]
 8004006:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2200      	movs	r2, #0
 800400c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004010:	bf00      	nop
 8004012:	3710      	adds	r7, #16
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}

08004018 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b084      	sub	sp, #16
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004026:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	685a      	ldr	r2, [r3, #4]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004036:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004038:	2300      	movs	r3, #0
 800403a:	60bb      	str	r3, [r7, #8]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	695b      	ldr	r3, [r3, #20]
 8004042:	60bb      	str	r3, [r7, #8]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f042 0201 	orr.w	r2, r2, #1
 8004052:	601a      	str	r2, [r3, #0]
 8004054:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004064:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004070:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004074:	d172      	bne.n	800415c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004076:	7bfb      	ldrb	r3, [r7, #15]
 8004078:	2b22      	cmp	r3, #34	; 0x22
 800407a:	d002      	beq.n	8004082 <I2C_Slave_STOPF+0x6a>
 800407c:	7bfb      	ldrb	r3, [r7, #15]
 800407e:	2b2a      	cmp	r3, #42	; 0x2a
 8004080:	d135      	bne.n	80040ee <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	b29a      	uxth	r2, r3
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004094:	b29b      	uxth	r3, r3
 8004096:	2b00      	cmp	r3, #0
 8004098:	d005      	beq.n	80040a6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409e:	f043 0204 	orr.w	r2, r3, #4
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	685a      	ldr	r2, [r3, #4]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040b4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ba:	4618      	mov	r0, r3
 80040bc:	f7fe f85b 	bl	8002176 <HAL_DMA_GetState>
 80040c0:	4603      	mov	r3, r0
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d049      	beq.n	800415a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ca:	4a69      	ldr	r2, [pc, #420]	; (8004270 <I2C_Slave_STOPF+0x258>)
 80040cc:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040d2:	4618      	mov	r0, r3
 80040d4:	f7fe f82d 	bl	8002132 <HAL_DMA_Abort_IT>
 80040d8:	4603      	mov	r3, r0
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d03d      	beq.n	800415a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040e4:	687a      	ldr	r2, [r7, #4]
 80040e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80040e8:	4610      	mov	r0, r2
 80040ea:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80040ec:	e035      	b.n	800415a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	b29a      	uxth	r2, r3
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004100:	b29b      	uxth	r3, r3
 8004102:	2b00      	cmp	r3, #0
 8004104:	d005      	beq.n	8004112 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800410a:	f043 0204 	orr.w	r2, r3, #4
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	685a      	ldr	r2, [r3, #4]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004120:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004126:	4618      	mov	r0, r3
 8004128:	f7fe f825 	bl	8002176 <HAL_DMA_GetState>
 800412c:	4603      	mov	r3, r0
 800412e:	2b01      	cmp	r3, #1
 8004130:	d014      	beq.n	800415c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004136:	4a4e      	ldr	r2, [pc, #312]	; (8004270 <I2C_Slave_STOPF+0x258>)
 8004138:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800413e:	4618      	mov	r0, r3
 8004140:	f7fd fff7 	bl	8002132 <HAL_DMA_Abort_IT>
 8004144:	4603      	mov	r3, r0
 8004146:	2b00      	cmp	r3, #0
 8004148:	d008      	beq.n	800415c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800414e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004154:	4610      	mov	r0, r2
 8004156:	4798      	blx	r3
 8004158:	e000      	b.n	800415c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800415a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004160:	b29b      	uxth	r3, r3
 8004162:	2b00      	cmp	r3, #0
 8004164:	d03e      	beq.n	80041e4 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	695b      	ldr	r3, [r3, #20]
 800416c:	f003 0304 	and.w	r3, r3, #4
 8004170:	2b04      	cmp	r3, #4
 8004172:	d112      	bne.n	800419a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	691a      	ldr	r2, [r3, #16]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417e:	b2d2      	uxtb	r2, r2
 8004180:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004186:	1c5a      	adds	r2, r3, #1
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004190:	b29b      	uxth	r3, r3
 8004192:	3b01      	subs	r3, #1
 8004194:	b29a      	uxth	r2, r3
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	695b      	ldr	r3, [r3, #20]
 80041a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041a4:	2b40      	cmp	r3, #64	; 0x40
 80041a6:	d112      	bne.n	80041ce <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	691a      	ldr	r2, [r3, #16]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b2:	b2d2      	uxtb	r2, r2
 80041b4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ba:	1c5a      	adds	r2, r3, #1
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	3b01      	subs	r3, #1
 80041c8:	b29a      	uxth	r2, r3
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041d2:	b29b      	uxth	r3, r3
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d005      	beq.n	80041e4 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041dc:	f043 0204 	orr.w	r2, r3, #4
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d003      	beq.n	80041f4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	f000 f8b3 	bl	8004358 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80041f2:	e039      	b.n	8004268 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80041f4:	7bfb      	ldrb	r3, [r7, #15]
 80041f6:	2b2a      	cmp	r3, #42	; 0x2a
 80041f8:	d109      	bne.n	800420e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2200      	movs	r2, #0
 80041fe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2228      	movs	r2, #40	; 0x28
 8004204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f7ff f827 	bl	800325c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004214:	b2db      	uxtb	r3, r3
 8004216:	2b28      	cmp	r3, #40	; 0x28
 8004218:	d111      	bne.n	800423e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	4a15      	ldr	r2, [pc, #84]	; (8004274 <I2C_Slave_STOPF+0x25c>)
 800421e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2200      	movs	r2, #0
 8004224:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2220      	movs	r2, #32
 800422a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2200      	movs	r2, #0
 8004232:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f7ff f828 	bl	800328c <HAL_I2C_ListenCpltCallback>
}
 800423c:	e014      	b.n	8004268 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004242:	2b22      	cmp	r3, #34	; 0x22
 8004244:	d002      	beq.n	800424c <I2C_Slave_STOPF+0x234>
 8004246:	7bfb      	ldrb	r3, [r7, #15]
 8004248:	2b22      	cmp	r3, #34	; 0x22
 800424a:	d10d      	bne.n	8004268 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2200      	movs	r2, #0
 8004250:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2220      	movs	r2, #32
 8004256:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f7fe fffa 	bl	800325c <HAL_I2C_SlaveRxCpltCallback>
}
 8004268:	bf00      	nop
 800426a:	3710      	adds	r7, #16
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}
 8004270:	08004891 	.word	0x08004891
 8004274:	ffff0000 	.word	0xffff0000

08004278 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b084      	sub	sp, #16
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004286:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800428c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	2b08      	cmp	r3, #8
 8004292:	d002      	beq.n	800429a <I2C_Slave_AF+0x22>
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	2b20      	cmp	r3, #32
 8004298:	d129      	bne.n	80042ee <I2C_Slave_AF+0x76>
 800429a:	7bfb      	ldrb	r3, [r7, #15]
 800429c:	2b28      	cmp	r3, #40	; 0x28
 800429e:	d126      	bne.n	80042ee <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	4a2c      	ldr	r2, [pc, #176]	; (8004354 <I2C_Slave_AF+0xdc>)
 80042a4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	685a      	ldr	r2, [r3, #4]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80042b4:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80042be:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042ce:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2200      	movs	r2, #0
 80042d4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2220      	movs	r2, #32
 80042da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2200      	movs	r2, #0
 80042e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f7fe ffd0 	bl	800328c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80042ec:	e02e      	b.n	800434c <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80042ee:	7bfb      	ldrb	r3, [r7, #15]
 80042f0:	2b21      	cmp	r3, #33	; 0x21
 80042f2:	d126      	bne.n	8004342 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	4a17      	ldr	r2, [pc, #92]	; (8004354 <I2C_Slave_AF+0xdc>)
 80042f8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2221      	movs	r2, #33	; 0x21
 80042fe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2220      	movs	r2, #32
 8004304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2200      	movs	r2, #0
 800430c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	685a      	ldr	r2, [r3, #4]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800431e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004328:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004338:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f7fe ff84 	bl	8003248 <HAL_I2C_SlaveTxCpltCallback>
}
 8004340:	e004      	b.n	800434c <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800434a:	615a      	str	r2, [r3, #20]
}
 800434c:	bf00      	nop
 800434e:	3710      	adds	r7, #16
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}
 8004354:	ffff0000 	.word	0xffff0000

08004358 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b084      	sub	sp, #16
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004366:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800436e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004370:	7bbb      	ldrb	r3, [r7, #14]
 8004372:	2b10      	cmp	r3, #16
 8004374:	d002      	beq.n	800437c <I2C_ITError+0x24>
 8004376:	7bbb      	ldrb	r3, [r7, #14]
 8004378:	2b40      	cmp	r3, #64	; 0x40
 800437a:	d10a      	bne.n	8004392 <I2C_ITError+0x3a>
 800437c:	7bfb      	ldrb	r3, [r7, #15]
 800437e:	2b22      	cmp	r3, #34	; 0x22
 8004380:	d107      	bne.n	8004392 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004390:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004392:	7bfb      	ldrb	r3, [r7, #15]
 8004394:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004398:	2b28      	cmp	r3, #40	; 0x28
 800439a:	d107      	bne.n	80043ac <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2200      	movs	r2, #0
 80043a0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2228      	movs	r2, #40	; 0x28
 80043a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80043aa:	e015      	b.n	80043d8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043ba:	d00a      	beq.n	80043d2 <I2C_ITError+0x7a>
 80043bc:	7bfb      	ldrb	r3, [r7, #15]
 80043be:	2b60      	cmp	r3, #96	; 0x60
 80043c0:	d007      	beq.n	80043d2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2220      	movs	r2, #32
 80043c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2200      	movs	r2, #0
 80043ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2200      	movs	r2, #0
 80043d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043e6:	d162      	bne.n	80044ae <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	685a      	ldr	r2, [r3, #4]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043f6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004400:	b2db      	uxtb	r3, r3
 8004402:	2b01      	cmp	r3, #1
 8004404:	d020      	beq.n	8004448 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800440a:	4a6a      	ldr	r2, [pc, #424]	; (80045b4 <I2C_ITError+0x25c>)
 800440c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004412:	4618      	mov	r0, r3
 8004414:	f7fd fe8d 	bl	8002132 <HAL_DMA_Abort_IT>
 8004418:	4603      	mov	r3, r0
 800441a:	2b00      	cmp	r3, #0
 800441c:	f000 8089 	beq.w	8004532 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f022 0201 	bic.w	r2, r2, #1
 800442e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2220      	movs	r2, #32
 8004434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800443c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800443e:	687a      	ldr	r2, [r7, #4]
 8004440:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004442:	4610      	mov	r0, r2
 8004444:	4798      	blx	r3
 8004446:	e074      	b.n	8004532 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800444c:	4a59      	ldr	r2, [pc, #356]	; (80045b4 <I2C_ITError+0x25c>)
 800444e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004454:	4618      	mov	r0, r3
 8004456:	f7fd fe6c 	bl	8002132 <HAL_DMA_Abort_IT>
 800445a:	4603      	mov	r3, r0
 800445c:	2b00      	cmp	r3, #0
 800445e:	d068      	beq.n	8004532 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	695b      	ldr	r3, [r3, #20]
 8004466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800446a:	2b40      	cmp	r3, #64	; 0x40
 800446c:	d10b      	bne.n	8004486 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	691a      	ldr	r2, [r3, #16]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004478:	b2d2      	uxtb	r2, r2
 800447a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004480:	1c5a      	adds	r2, r3, #1
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f022 0201 	bic.w	r2, r2, #1
 8004494:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2220      	movs	r2, #32
 800449a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044a4:	687a      	ldr	r2, [r7, #4]
 80044a6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80044a8:	4610      	mov	r0, r2
 80044aa:	4798      	blx	r3
 80044ac:	e041      	b.n	8004532 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	2b60      	cmp	r3, #96	; 0x60
 80044b8:	d125      	bne.n	8004506 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2220      	movs	r2, #32
 80044be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2200      	movs	r2, #0
 80044c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	695b      	ldr	r3, [r3, #20]
 80044ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044d2:	2b40      	cmp	r3, #64	; 0x40
 80044d4:	d10b      	bne.n	80044ee <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	691a      	ldr	r2, [r3, #16]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e0:	b2d2      	uxtb	r2, r2
 80044e2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e8:	1c5a      	adds	r2, r3, #1
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f022 0201 	bic.w	r2, r2, #1
 80044fc:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f7fe feec 	bl	80032dc <HAL_I2C_AbortCpltCallback>
 8004504:	e015      	b.n	8004532 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	695b      	ldr	r3, [r3, #20]
 800450c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004510:	2b40      	cmp	r3, #64	; 0x40
 8004512:	d10b      	bne.n	800452c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	691a      	ldr	r2, [r3, #16]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800451e:	b2d2      	uxtb	r2, r2
 8004520:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004526:	1c5a      	adds	r2, r3, #1
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	f7fe fecb 	bl	80032c8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004536:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	f003 0301 	and.w	r3, r3, #1
 800453e:	2b00      	cmp	r3, #0
 8004540:	d10e      	bne.n	8004560 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004548:	2b00      	cmp	r3, #0
 800454a:	d109      	bne.n	8004560 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004552:	2b00      	cmp	r3, #0
 8004554:	d104      	bne.n	8004560 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800455c:	2b00      	cmp	r3, #0
 800455e:	d007      	beq.n	8004570 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	685a      	ldr	r2, [r3, #4]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800456e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004576:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800457c:	f003 0304 	and.w	r3, r3, #4
 8004580:	2b04      	cmp	r3, #4
 8004582:	d113      	bne.n	80045ac <I2C_ITError+0x254>
 8004584:	7bfb      	ldrb	r3, [r7, #15]
 8004586:	2b28      	cmp	r3, #40	; 0x28
 8004588:	d110      	bne.n	80045ac <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	4a0a      	ldr	r2, [pc, #40]	; (80045b8 <I2C_ITError+0x260>)
 800458e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2200      	movs	r2, #0
 8004594:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2220      	movs	r2, #32
 800459a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2200      	movs	r2, #0
 80045a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f7fe fe70 	bl	800328c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80045ac:	bf00      	nop
 80045ae:	3710      	adds	r7, #16
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}
 80045b4:	08004891 	.word	0x08004891
 80045b8:	ffff0000 	.word	0xffff0000

080045bc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b088      	sub	sp, #32
 80045c0:	af02      	add	r7, sp, #8
 80045c2:	60f8      	str	r0, [r7, #12]
 80045c4:	607a      	str	r2, [r7, #4]
 80045c6:	603b      	str	r3, [r7, #0]
 80045c8:	460b      	mov	r3, r1
 80045ca:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	2b08      	cmp	r3, #8
 80045d6:	d006      	beq.n	80045e6 <I2C_MasterRequestWrite+0x2a>
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d003      	beq.n	80045e6 <I2C_MasterRequestWrite+0x2a>
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80045e4:	d108      	bne.n	80045f8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045f4:	601a      	str	r2, [r3, #0]
 80045f6:	e00b      	b.n	8004610 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045fc:	2b12      	cmp	r3, #18
 80045fe:	d107      	bne.n	8004610 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	681a      	ldr	r2, [r3, #0]
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800460e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	9300      	str	r3, [sp, #0]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2200      	movs	r2, #0
 8004618:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800461c:	68f8      	ldr	r0, [r7, #12]
 800461e:	f000 f9df 	bl	80049e0 <I2C_WaitOnFlagUntilTimeout>
 8004622:	4603      	mov	r3, r0
 8004624:	2b00      	cmp	r3, #0
 8004626:	d00d      	beq.n	8004644 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004632:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004636:	d103      	bne.n	8004640 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800463e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004640:	2303      	movs	r3, #3
 8004642:	e035      	b.n	80046b0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	691b      	ldr	r3, [r3, #16]
 8004648:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800464c:	d108      	bne.n	8004660 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800464e:	897b      	ldrh	r3, [r7, #10]
 8004650:	b2db      	uxtb	r3, r3
 8004652:	461a      	mov	r2, r3
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800465c:	611a      	str	r2, [r3, #16]
 800465e:	e01b      	b.n	8004698 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004660:	897b      	ldrh	r3, [r7, #10]
 8004662:	11db      	asrs	r3, r3, #7
 8004664:	b2db      	uxtb	r3, r3
 8004666:	f003 0306 	and.w	r3, r3, #6
 800466a:	b2db      	uxtb	r3, r3
 800466c:	f063 030f 	orn	r3, r3, #15
 8004670:	b2da      	uxtb	r2, r3
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	490e      	ldr	r1, [pc, #56]	; (80046b8 <I2C_MasterRequestWrite+0xfc>)
 800467e:	68f8      	ldr	r0, [r7, #12]
 8004680:	f000 fa05 	bl	8004a8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004684:	4603      	mov	r3, r0
 8004686:	2b00      	cmp	r3, #0
 8004688:	d001      	beq.n	800468e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	e010      	b.n	80046b0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800468e:	897b      	ldrh	r3, [r7, #10]
 8004690:	b2da      	uxtb	r2, r3
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	4907      	ldr	r1, [pc, #28]	; (80046bc <I2C_MasterRequestWrite+0x100>)
 800469e:	68f8      	ldr	r0, [r7, #12]
 80046a0:	f000 f9f5 	bl	8004a8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80046a4:	4603      	mov	r3, r0
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d001      	beq.n	80046ae <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	e000      	b.n	80046b0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80046ae:	2300      	movs	r3, #0
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3718      	adds	r7, #24
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}
 80046b8:	00010008 	.word	0x00010008
 80046bc:	00010002 	.word	0x00010002

080046c0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b088      	sub	sp, #32
 80046c4:	af02      	add	r7, sp, #8
 80046c6:	60f8      	str	r0, [r7, #12]
 80046c8:	4608      	mov	r0, r1
 80046ca:	4611      	mov	r1, r2
 80046cc:	461a      	mov	r2, r3
 80046ce:	4603      	mov	r3, r0
 80046d0:	817b      	strh	r3, [r7, #10]
 80046d2:	460b      	mov	r3, r1
 80046d4:	813b      	strh	r3, [r7, #8]
 80046d6:	4613      	mov	r3, r2
 80046d8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	681a      	ldr	r2, [r3, #0]
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80046e8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046f8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80046fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fc:	9300      	str	r3, [sp, #0]
 80046fe:	6a3b      	ldr	r3, [r7, #32]
 8004700:	2200      	movs	r2, #0
 8004702:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004706:	68f8      	ldr	r0, [r7, #12]
 8004708:	f000 f96a 	bl	80049e0 <I2C_WaitOnFlagUntilTimeout>
 800470c:	4603      	mov	r3, r0
 800470e:	2b00      	cmp	r3, #0
 8004710:	d00d      	beq.n	800472e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800471c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004720:	d103      	bne.n	800472a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004728:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800472a:	2303      	movs	r3, #3
 800472c:	e0aa      	b.n	8004884 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800472e:	897b      	ldrh	r3, [r7, #10]
 8004730:	b2db      	uxtb	r3, r3
 8004732:	461a      	mov	r2, r3
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800473c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800473e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004740:	6a3a      	ldr	r2, [r7, #32]
 8004742:	4952      	ldr	r1, [pc, #328]	; (800488c <I2C_RequestMemoryRead+0x1cc>)
 8004744:	68f8      	ldr	r0, [r7, #12]
 8004746:	f000 f9a2 	bl	8004a8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800474a:	4603      	mov	r3, r0
 800474c:	2b00      	cmp	r3, #0
 800474e:	d001      	beq.n	8004754 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	e097      	b.n	8004884 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004754:	2300      	movs	r3, #0
 8004756:	617b      	str	r3, [r7, #20]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	695b      	ldr	r3, [r3, #20]
 800475e:	617b      	str	r3, [r7, #20]
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	699b      	ldr	r3, [r3, #24]
 8004766:	617b      	str	r3, [r7, #20]
 8004768:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800476a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800476c:	6a39      	ldr	r1, [r7, #32]
 800476e:	68f8      	ldr	r0, [r7, #12]
 8004770:	f000 fa0c 	bl	8004b8c <I2C_WaitOnTXEFlagUntilTimeout>
 8004774:	4603      	mov	r3, r0
 8004776:	2b00      	cmp	r3, #0
 8004778:	d00d      	beq.n	8004796 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800477e:	2b04      	cmp	r3, #4
 8004780:	d107      	bne.n	8004792 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004790:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	e076      	b.n	8004884 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004796:	88fb      	ldrh	r3, [r7, #6]
 8004798:	2b01      	cmp	r3, #1
 800479a:	d105      	bne.n	80047a8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800479c:	893b      	ldrh	r3, [r7, #8]
 800479e:	b2da      	uxtb	r2, r3
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	611a      	str	r2, [r3, #16]
 80047a6:	e021      	b.n	80047ec <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80047a8:	893b      	ldrh	r3, [r7, #8]
 80047aa:	0a1b      	lsrs	r3, r3, #8
 80047ac:	b29b      	uxth	r3, r3
 80047ae:	b2da      	uxtb	r2, r3
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80047b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047b8:	6a39      	ldr	r1, [r7, #32]
 80047ba:	68f8      	ldr	r0, [r7, #12]
 80047bc:	f000 f9e6 	bl	8004b8c <I2C_WaitOnTXEFlagUntilTimeout>
 80047c0:	4603      	mov	r3, r0
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d00d      	beq.n	80047e2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ca:	2b04      	cmp	r3, #4
 80047cc:	d107      	bne.n	80047de <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047dc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	e050      	b.n	8004884 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80047e2:	893b      	ldrh	r3, [r7, #8]
 80047e4:	b2da      	uxtb	r2, r3
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80047ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047ee:	6a39      	ldr	r1, [r7, #32]
 80047f0:	68f8      	ldr	r0, [r7, #12]
 80047f2:	f000 f9cb 	bl	8004b8c <I2C_WaitOnTXEFlagUntilTimeout>
 80047f6:	4603      	mov	r3, r0
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d00d      	beq.n	8004818 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004800:	2b04      	cmp	r3, #4
 8004802:	d107      	bne.n	8004814 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004812:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	e035      	b.n	8004884 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004826:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482a:	9300      	str	r3, [sp, #0]
 800482c:	6a3b      	ldr	r3, [r7, #32]
 800482e:	2200      	movs	r2, #0
 8004830:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004834:	68f8      	ldr	r0, [r7, #12]
 8004836:	f000 f8d3 	bl	80049e0 <I2C_WaitOnFlagUntilTimeout>
 800483a:	4603      	mov	r3, r0
 800483c:	2b00      	cmp	r3, #0
 800483e:	d00d      	beq.n	800485c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800484a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800484e:	d103      	bne.n	8004858 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004856:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004858:	2303      	movs	r3, #3
 800485a:	e013      	b.n	8004884 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800485c:	897b      	ldrh	r3, [r7, #10]
 800485e:	b2db      	uxtb	r3, r3
 8004860:	f043 0301 	orr.w	r3, r3, #1
 8004864:	b2da      	uxtb	r2, r3
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800486c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800486e:	6a3a      	ldr	r2, [r7, #32]
 8004870:	4906      	ldr	r1, [pc, #24]	; (800488c <I2C_RequestMemoryRead+0x1cc>)
 8004872:	68f8      	ldr	r0, [r7, #12]
 8004874:	f000 f90b 	bl	8004a8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004878:	4603      	mov	r3, r0
 800487a:	2b00      	cmp	r3, #0
 800487c:	d001      	beq.n	8004882 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e000      	b.n	8004884 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004882:	2300      	movs	r3, #0
}
 8004884:	4618      	mov	r0, r3
 8004886:	3718      	adds	r7, #24
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}
 800488c:	00010002 	.word	0x00010002

08004890 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b086      	sub	sp, #24
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004898:	2300      	movs	r3, #0
 800489a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048a0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048a8:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80048aa:	4b4b      	ldr	r3, [pc, #300]	; (80049d8 <I2C_DMAAbort+0x148>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	08db      	lsrs	r3, r3, #3
 80048b0:	4a4a      	ldr	r2, [pc, #296]	; (80049dc <I2C_DMAAbort+0x14c>)
 80048b2:	fba2 2303 	umull	r2, r3, r2, r3
 80048b6:	0a1a      	lsrs	r2, r3, #8
 80048b8:	4613      	mov	r3, r2
 80048ba:	009b      	lsls	r3, r3, #2
 80048bc:	4413      	add	r3, r2
 80048be:	00da      	lsls	r2, r3, #3
 80048c0:	1ad3      	subs	r3, r2, r3
 80048c2:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d106      	bne.n	80048d8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ce:	f043 0220 	orr.w	r2, r3, #32
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80048d6:	e00a      	b.n	80048ee <I2C_DMAAbort+0x5e>
    }
    count--;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	3b01      	subs	r3, #1
 80048dc:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048ec:	d0ea      	beq.n	80048c4 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d003      	beq.n	80048fe <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048fa:	2200      	movs	r2, #0
 80048fc:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004902:	2b00      	cmp	r3, #0
 8004904:	d003      	beq.n	800490e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800490a:	2200      	movs	r2, #0
 800490c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800491c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	2200      	movs	r2, #0
 8004922:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004928:	2b00      	cmp	r3, #0
 800492a:	d003      	beq.n	8004934 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004930:	2200      	movs	r2, #0
 8004932:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004938:	2b00      	cmp	r3, #0
 800493a:	d003      	beq.n	8004944 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004940:	2200      	movs	r2, #0
 8004942:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f022 0201 	bic.w	r2, r2, #1
 8004952:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800495a:	b2db      	uxtb	r3, r3
 800495c:	2b60      	cmp	r3, #96	; 0x60
 800495e:	d10e      	bne.n	800497e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	2220      	movs	r2, #32
 8004964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	2200      	movs	r2, #0
 800496c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	2200      	movs	r2, #0
 8004974:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004976:	6978      	ldr	r0, [r7, #20]
 8004978:	f7fe fcb0 	bl	80032dc <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800497c:	e027      	b.n	80049ce <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800497e:	7cfb      	ldrb	r3, [r7, #19]
 8004980:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004984:	2b28      	cmp	r3, #40	; 0x28
 8004986:	d117      	bne.n	80049b8 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f042 0201 	orr.w	r2, r2, #1
 8004996:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80049a6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	2200      	movs	r2, #0
 80049ac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	2228      	movs	r2, #40	; 0x28
 80049b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80049b6:	e007      	b.n	80049c8 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	2220      	movs	r2, #32
 80049bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	2200      	movs	r2, #0
 80049c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80049c8:	6978      	ldr	r0, [r7, #20]
 80049ca:	f7fe fc7d 	bl	80032c8 <HAL_I2C_ErrorCallback>
}
 80049ce:	bf00      	nop
 80049d0:	3718      	adds	r7, #24
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	bf00      	nop
 80049d8:	200001c8 	.word	0x200001c8
 80049dc:	14f8b589 	.word	0x14f8b589

080049e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b084      	sub	sp, #16
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	60f8      	str	r0, [r7, #12]
 80049e8:	60b9      	str	r1, [r7, #8]
 80049ea:	603b      	str	r3, [r7, #0]
 80049ec:	4613      	mov	r3, r2
 80049ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80049f0:	e025      	b.n	8004a3e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049f8:	d021      	beq.n	8004a3e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049fa:	f7fd f9e9 	bl	8001dd0 <HAL_GetTick>
 80049fe:	4602      	mov	r2, r0
 8004a00:	69bb      	ldr	r3, [r7, #24]
 8004a02:	1ad3      	subs	r3, r2, r3
 8004a04:	683a      	ldr	r2, [r7, #0]
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d302      	bcc.n	8004a10 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d116      	bne.n	8004a3e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2200      	movs	r2, #0
 8004a14:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2220      	movs	r2, #32
 8004a1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2200      	movs	r2, #0
 8004a22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a2a:	f043 0220 	orr.w	r2, r3, #32
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2200      	movs	r2, #0
 8004a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e023      	b.n	8004a86 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	0c1b      	lsrs	r3, r3, #16
 8004a42:	b2db      	uxtb	r3, r3
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d10d      	bne.n	8004a64 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	695b      	ldr	r3, [r3, #20]
 8004a4e:	43da      	mvns	r2, r3
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	4013      	ands	r3, r2
 8004a54:	b29b      	uxth	r3, r3
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	bf0c      	ite	eq
 8004a5a:	2301      	moveq	r3, #1
 8004a5c:	2300      	movne	r3, #0
 8004a5e:	b2db      	uxtb	r3, r3
 8004a60:	461a      	mov	r2, r3
 8004a62:	e00c      	b.n	8004a7e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	699b      	ldr	r3, [r3, #24]
 8004a6a:	43da      	mvns	r2, r3
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	4013      	ands	r3, r2
 8004a70:	b29b      	uxth	r3, r3
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	bf0c      	ite	eq
 8004a76:	2301      	moveq	r3, #1
 8004a78:	2300      	movne	r3, #0
 8004a7a:	b2db      	uxtb	r3, r3
 8004a7c:	461a      	mov	r2, r3
 8004a7e:	79fb      	ldrb	r3, [r7, #7]
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d0b6      	beq.n	80049f2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004a84:	2300      	movs	r3, #0
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	3710      	adds	r7, #16
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}

08004a8e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004a8e:	b580      	push	{r7, lr}
 8004a90:	b084      	sub	sp, #16
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	60f8      	str	r0, [r7, #12]
 8004a96:	60b9      	str	r1, [r7, #8]
 8004a98:	607a      	str	r2, [r7, #4]
 8004a9a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004a9c:	e051      	b.n	8004b42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	695b      	ldr	r3, [r3, #20]
 8004aa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004aa8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004aac:	d123      	bne.n	8004af6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004abc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004ac6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2200      	movs	r2, #0
 8004acc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2220      	movs	r2, #32
 8004ad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae2:	f043 0204 	orr.w	r2, r3, #4
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2200      	movs	r2, #0
 8004aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e046      	b.n	8004b84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004afc:	d021      	beq.n	8004b42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004afe:	f7fd f967 	bl	8001dd0 <HAL_GetTick>
 8004b02:	4602      	mov	r2, r0
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	1ad3      	subs	r3, r2, r3
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	d302      	bcc.n	8004b14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d116      	bne.n	8004b42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2200      	movs	r2, #0
 8004b18:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2220      	movs	r2, #32
 8004b1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2200      	movs	r2, #0
 8004b26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b2e:	f043 0220 	orr.w	r2, r3, #32
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e020      	b.n	8004b84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	0c1b      	lsrs	r3, r3, #16
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d10c      	bne.n	8004b66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	695b      	ldr	r3, [r3, #20]
 8004b52:	43da      	mvns	r2, r3
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	4013      	ands	r3, r2
 8004b58:	b29b      	uxth	r3, r3
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	bf14      	ite	ne
 8004b5e:	2301      	movne	r3, #1
 8004b60:	2300      	moveq	r3, #0
 8004b62:	b2db      	uxtb	r3, r3
 8004b64:	e00b      	b.n	8004b7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	699b      	ldr	r3, [r3, #24]
 8004b6c:	43da      	mvns	r2, r3
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	4013      	ands	r3, r2
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	bf14      	ite	ne
 8004b78:	2301      	movne	r3, #1
 8004b7a:	2300      	moveq	r3, #0
 8004b7c:	b2db      	uxtb	r3, r3
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d18d      	bne.n	8004a9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004b82:	2300      	movs	r3, #0
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	3710      	adds	r7, #16
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}

08004b8c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b084      	sub	sp, #16
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	60f8      	str	r0, [r7, #12]
 8004b94:	60b9      	str	r1, [r7, #8]
 8004b96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b98:	e02d      	b.n	8004bf6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004b9a:	68f8      	ldr	r0, [r7, #12]
 8004b9c:	f000 f900 	bl	8004da0 <I2C_IsAcknowledgeFailed>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d001      	beq.n	8004baa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	e02d      	b.n	8004c06 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bb0:	d021      	beq.n	8004bf6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bb2:	f7fd f90d 	bl	8001dd0 <HAL_GetTick>
 8004bb6:	4602      	mov	r2, r0
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	1ad3      	subs	r3, r2, r3
 8004bbc:	68ba      	ldr	r2, [r7, #8]
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	d302      	bcc.n	8004bc8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d116      	bne.n	8004bf6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2220      	movs	r2, #32
 8004bd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be2:	f043 0220 	orr.w	r2, r3, #32
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2200      	movs	r2, #0
 8004bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e007      	b.n	8004c06 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	695b      	ldr	r3, [r3, #20]
 8004bfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c00:	2b80      	cmp	r3, #128	; 0x80
 8004c02:	d1ca      	bne.n	8004b9a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004c04:	2300      	movs	r3, #0
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	3710      	adds	r7, #16
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}

08004c0e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c0e:	b580      	push	{r7, lr}
 8004c10:	b084      	sub	sp, #16
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	60f8      	str	r0, [r7, #12]
 8004c16:	60b9      	str	r1, [r7, #8]
 8004c18:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004c1a:	e02d      	b.n	8004c78 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004c1c:	68f8      	ldr	r0, [r7, #12]
 8004c1e:	f000 f8bf 	bl	8004da0 <I2C_IsAcknowledgeFailed>
 8004c22:	4603      	mov	r3, r0
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d001      	beq.n	8004c2c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	e02d      	b.n	8004c88 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c32:	d021      	beq.n	8004c78 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c34:	f7fd f8cc 	bl	8001dd0 <HAL_GetTick>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	1ad3      	subs	r3, r2, r3
 8004c3e:	68ba      	ldr	r2, [r7, #8]
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d302      	bcc.n	8004c4a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d116      	bne.n	8004c78 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2220      	movs	r2, #32
 8004c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c64:	f043 0220 	orr.w	r2, r3, #32
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c74:	2301      	movs	r3, #1
 8004c76:	e007      	b.n	8004c88 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	695b      	ldr	r3, [r3, #20]
 8004c7e:	f003 0304 	and.w	r3, r3, #4
 8004c82:	2b04      	cmp	r3, #4
 8004c84:	d1ca      	bne.n	8004c1c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004c86:	2300      	movs	r3, #0
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3710      	adds	r7, #16
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}

08004c90 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b085      	sub	sp, #20
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004c9c:	4b13      	ldr	r3, [pc, #76]	; (8004cec <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	08db      	lsrs	r3, r3, #3
 8004ca2:	4a13      	ldr	r2, [pc, #76]	; (8004cf0 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004ca4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ca8:	0a1a      	lsrs	r2, r3, #8
 8004caa:	4613      	mov	r3, r2
 8004cac:	009b      	lsls	r3, r3, #2
 8004cae:	4413      	add	r3, r2
 8004cb0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	3b01      	subs	r3, #1
 8004cb6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d107      	bne.n	8004cce <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc2:	f043 0220 	orr.w	r2, r3, #32
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e008      	b.n	8004ce0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cdc:	d0e9      	beq.n	8004cb2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004cde:	2300      	movs	r3, #0
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	3714      	adds	r7, #20
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cea:	4770      	bx	lr
 8004cec:	200001c8 	.word	0x200001c8
 8004cf0:	14f8b589 	.word	0x14f8b589

08004cf4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b084      	sub	sp, #16
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	60f8      	str	r0, [r7, #12]
 8004cfc:	60b9      	str	r1, [r7, #8]
 8004cfe:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004d00:	e042      	b.n	8004d88 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	695b      	ldr	r3, [r3, #20]
 8004d08:	f003 0310 	and.w	r3, r3, #16
 8004d0c:	2b10      	cmp	r3, #16
 8004d0e:	d119      	bne.n	8004d44 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f06f 0210 	mvn.w	r2, #16
 8004d18:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2220      	movs	r2, #32
 8004d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	e029      	b.n	8004d98 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d44:	f7fd f844 	bl	8001dd0 <HAL_GetTick>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	1ad3      	subs	r3, r2, r3
 8004d4e:	68ba      	ldr	r2, [r7, #8]
 8004d50:	429a      	cmp	r2, r3
 8004d52:	d302      	bcc.n	8004d5a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d116      	bne.n	8004d88 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2220      	movs	r2, #32
 8004d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d74:	f043 0220 	orr.w	r2, r3, #32
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004d84:	2301      	movs	r3, #1
 8004d86:	e007      	b.n	8004d98 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	695b      	ldr	r3, [r3, #20]
 8004d8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d92:	2b40      	cmp	r3, #64	; 0x40
 8004d94:	d1b5      	bne.n	8004d02 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004d96:	2300      	movs	r3, #0
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3710      	adds	r7, #16
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}

08004da0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b083      	sub	sp, #12
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	695b      	ldr	r3, [r3, #20]
 8004dae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004db2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004db6:	d11b      	bne.n	8004df0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004dc0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2220      	movs	r2, #32
 8004dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ddc:	f043 0204 	orr.w	r2, r3, #4
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2200      	movs	r2, #0
 8004de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	e000      	b.n	8004df2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004df0:	2300      	movs	r3, #0
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	370c      	adds	r7, #12
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr

08004dfe <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004dfe:	b480      	push	{r7}
 8004e00:	b083      	sub	sp, #12
 8004e02:	af00      	add	r7, sp, #0
 8004e04:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e0a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004e0e:	d103      	bne.n	8004e18 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2201      	movs	r2, #1
 8004e14:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004e16:	e007      	b.n	8004e28 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e1c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004e20:	d102      	bne.n	8004e28 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2208      	movs	r2, #8
 8004e26:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004e28:	bf00      	nop
 8004e2a:	370c      	adds	r7, #12
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e32:	4770      	bx	lr

08004e34 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b083      	sub	sp, #12
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
 8004e3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e44:	b2db      	uxtb	r3, r3
 8004e46:	2b20      	cmp	r3, #32
 8004e48:	d129      	bne.n	8004e9e <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2224      	movs	r2, #36	; 0x24
 8004e4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f022 0201 	bic.w	r2, r2, #1
 8004e60:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f022 0210 	bic.w	r2, r2, #16
 8004e70:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	683a      	ldr	r2, [r7, #0]
 8004e7e:	430a      	orrs	r2, r1
 8004e80:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f042 0201 	orr.w	r2, r2, #1
 8004e90:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2220      	movs	r2, #32
 8004e96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	e000      	b.n	8004ea0 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004e9e:	2302      	movs	r3, #2
  }
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	370c      	adds	r7, #12
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eaa:	4770      	bx	lr

08004eac <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b085      	sub	sp, #20
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
 8004eb4:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ec0:	b2db      	uxtb	r3, r3
 8004ec2:	2b20      	cmp	r3, #32
 8004ec4:	d12a      	bne.n	8004f1c <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2224      	movs	r2, #36	; 0x24
 8004eca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f022 0201 	bic.w	r2, r2, #1
 8004edc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee4:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004ee6:	89fb      	ldrh	r3, [r7, #14]
 8004ee8:	f023 030f 	bic.w	r3, r3, #15
 8004eec:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	b29a      	uxth	r2, r3
 8004ef2:	89fb      	ldrh	r3, [r7, #14]
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	89fa      	ldrh	r2, [r7, #14]
 8004efe:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	681a      	ldr	r2, [r3, #0]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f042 0201 	orr.w	r2, r2, #1
 8004f0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2220      	movs	r2, #32
 8004f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004f18:	2300      	movs	r3, #0
 8004f1a:	e000      	b.n	8004f1e <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004f1c:	2302      	movs	r3, #2
  }
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	3714      	adds	r7, #20
 8004f22:	46bd      	mov	sp, r7
 8004f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f28:	4770      	bx	lr
	...

08004f2c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b082      	sub	sp, #8
 8004f30:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8004f32:	2300      	movs	r3, #0
 8004f34:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004f36:	2300      	movs	r3, #0
 8004f38:	603b      	str	r3, [r7, #0]
 8004f3a:	4b20      	ldr	r3, [pc, #128]	; (8004fbc <HAL_PWREx_EnableOverDrive+0x90>)
 8004f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f3e:	4a1f      	ldr	r2, [pc, #124]	; (8004fbc <HAL_PWREx_EnableOverDrive+0x90>)
 8004f40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f44:	6413      	str	r3, [r2, #64]	; 0x40
 8004f46:	4b1d      	ldr	r3, [pc, #116]	; (8004fbc <HAL_PWREx_EnableOverDrive+0x90>)
 8004f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f4e:	603b      	str	r3, [r7, #0]
 8004f50:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004f52:	4b1b      	ldr	r3, [pc, #108]	; (8004fc0 <HAL_PWREx_EnableOverDrive+0x94>)
 8004f54:	2201      	movs	r2, #1
 8004f56:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004f58:	f7fc ff3a 	bl	8001dd0 <HAL_GetTick>
 8004f5c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004f5e:	e009      	b.n	8004f74 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004f60:	f7fc ff36 	bl	8001dd0 <HAL_GetTick>
 8004f64:	4602      	mov	r2, r0
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	1ad3      	subs	r3, r2, r3
 8004f6a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f6e:	d901      	bls.n	8004f74 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8004f70:	2303      	movs	r3, #3
 8004f72:	e01f      	b.n	8004fb4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004f74:	4b13      	ldr	r3, [pc, #76]	; (8004fc4 <HAL_PWREx_EnableOverDrive+0x98>)
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f80:	d1ee      	bne.n	8004f60 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004f82:	4b11      	ldr	r3, [pc, #68]	; (8004fc8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004f84:	2201      	movs	r2, #1
 8004f86:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004f88:	f7fc ff22 	bl	8001dd0 <HAL_GetTick>
 8004f8c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004f8e:	e009      	b.n	8004fa4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004f90:	f7fc ff1e 	bl	8001dd0 <HAL_GetTick>
 8004f94:	4602      	mov	r2, r0
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	1ad3      	subs	r3, r2, r3
 8004f9a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f9e:	d901      	bls.n	8004fa4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004fa0:	2303      	movs	r3, #3
 8004fa2:	e007      	b.n	8004fb4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004fa4:	4b07      	ldr	r3, [pc, #28]	; (8004fc4 <HAL_PWREx_EnableOverDrive+0x98>)
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004fb0:	d1ee      	bne.n	8004f90 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8004fb2:	2300      	movs	r3, #0
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	3708      	adds	r7, #8
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}
 8004fbc:	40023800 	.word	0x40023800
 8004fc0:	420e0040 	.word	0x420e0040
 8004fc4:	40007000 	.word	0x40007000
 8004fc8:	420e0044 	.word	0x420e0044

08004fcc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b086      	sub	sp, #24
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d101      	bne.n	8004fde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e267      	b.n	80054ae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f003 0301 	and.w	r3, r3, #1
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d075      	beq.n	80050d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004fea:	4b88      	ldr	r3, [pc, #544]	; (800520c <HAL_RCC_OscConfig+0x240>)
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	f003 030c 	and.w	r3, r3, #12
 8004ff2:	2b04      	cmp	r3, #4
 8004ff4:	d00c      	beq.n	8005010 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ff6:	4b85      	ldr	r3, [pc, #532]	; (800520c <HAL_RCC_OscConfig+0x240>)
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004ffe:	2b08      	cmp	r3, #8
 8005000:	d112      	bne.n	8005028 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005002:	4b82      	ldr	r3, [pc, #520]	; (800520c <HAL_RCC_OscConfig+0x240>)
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800500a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800500e:	d10b      	bne.n	8005028 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005010:	4b7e      	ldr	r3, [pc, #504]	; (800520c <HAL_RCC_OscConfig+0x240>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005018:	2b00      	cmp	r3, #0
 800501a:	d05b      	beq.n	80050d4 <HAL_RCC_OscConfig+0x108>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d157      	bne.n	80050d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005024:	2301      	movs	r3, #1
 8005026:	e242      	b.n	80054ae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005030:	d106      	bne.n	8005040 <HAL_RCC_OscConfig+0x74>
 8005032:	4b76      	ldr	r3, [pc, #472]	; (800520c <HAL_RCC_OscConfig+0x240>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a75      	ldr	r2, [pc, #468]	; (800520c <HAL_RCC_OscConfig+0x240>)
 8005038:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800503c:	6013      	str	r3, [r2, #0]
 800503e:	e01d      	b.n	800507c <HAL_RCC_OscConfig+0xb0>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005048:	d10c      	bne.n	8005064 <HAL_RCC_OscConfig+0x98>
 800504a:	4b70      	ldr	r3, [pc, #448]	; (800520c <HAL_RCC_OscConfig+0x240>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a6f      	ldr	r2, [pc, #444]	; (800520c <HAL_RCC_OscConfig+0x240>)
 8005050:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005054:	6013      	str	r3, [r2, #0]
 8005056:	4b6d      	ldr	r3, [pc, #436]	; (800520c <HAL_RCC_OscConfig+0x240>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a6c      	ldr	r2, [pc, #432]	; (800520c <HAL_RCC_OscConfig+0x240>)
 800505c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005060:	6013      	str	r3, [r2, #0]
 8005062:	e00b      	b.n	800507c <HAL_RCC_OscConfig+0xb0>
 8005064:	4b69      	ldr	r3, [pc, #420]	; (800520c <HAL_RCC_OscConfig+0x240>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a68      	ldr	r2, [pc, #416]	; (800520c <HAL_RCC_OscConfig+0x240>)
 800506a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800506e:	6013      	str	r3, [r2, #0]
 8005070:	4b66      	ldr	r3, [pc, #408]	; (800520c <HAL_RCC_OscConfig+0x240>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a65      	ldr	r2, [pc, #404]	; (800520c <HAL_RCC_OscConfig+0x240>)
 8005076:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800507a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d013      	beq.n	80050ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005084:	f7fc fea4 	bl	8001dd0 <HAL_GetTick>
 8005088:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800508a:	e008      	b.n	800509e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800508c:	f7fc fea0 	bl	8001dd0 <HAL_GetTick>
 8005090:	4602      	mov	r2, r0
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	1ad3      	subs	r3, r2, r3
 8005096:	2b64      	cmp	r3, #100	; 0x64
 8005098:	d901      	bls.n	800509e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800509a:	2303      	movs	r3, #3
 800509c:	e207      	b.n	80054ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800509e:	4b5b      	ldr	r3, [pc, #364]	; (800520c <HAL_RCC_OscConfig+0x240>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d0f0      	beq.n	800508c <HAL_RCC_OscConfig+0xc0>
 80050aa:	e014      	b.n	80050d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050ac:	f7fc fe90 	bl	8001dd0 <HAL_GetTick>
 80050b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050b2:	e008      	b.n	80050c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80050b4:	f7fc fe8c 	bl	8001dd0 <HAL_GetTick>
 80050b8:	4602      	mov	r2, r0
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	1ad3      	subs	r3, r2, r3
 80050be:	2b64      	cmp	r3, #100	; 0x64
 80050c0:	d901      	bls.n	80050c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80050c2:	2303      	movs	r3, #3
 80050c4:	e1f3      	b.n	80054ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050c6:	4b51      	ldr	r3, [pc, #324]	; (800520c <HAL_RCC_OscConfig+0x240>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d1f0      	bne.n	80050b4 <HAL_RCC_OscConfig+0xe8>
 80050d2:	e000      	b.n	80050d6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f003 0302 	and.w	r3, r3, #2
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d063      	beq.n	80051aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80050e2:	4b4a      	ldr	r3, [pc, #296]	; (800520c <HAL_RCC_OscConfig+0x240>)
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	f003 030c 	and.w	r3, r3, #12
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d00b      	beq.n	8005106 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80050ee:	4b47      	ldr	r3, [pc, #284]	; (800520c <HAL_RCC_OscConfig+0x240>)
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80050f6:	2b08      	cmp	r3, #8
 80050f8:	d11c      	bne.n	8005134 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80050fa:	4b44      	ldr	r3, [pc, #272]	; (800520c <HAL_RCC_OscConfig+0x240>)
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005102:	2b00      	cmp	r3, #0
 8005104:	d116      	bne.n	8005134 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005106:	4b41      	ldr	r3, [pc, #260]	; (800520c <HAL_RCC_OscConfig+0x240>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f003 0302 	and.w	r3, r3, #2
 800510e:	2b00      	cmp	r3, #0
 8005110:	d005      	beq.n	800511e <HAL_RCC_OscConfig+0x152>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	68db      	ldr	r3, [r3, #12]
 8005116:	2b01      	cmp	r3, #1
 8005118:	d001      	beq.n	800511e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	e1c7      	b.n	80054ae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800511e:	4b3b      	ldr	r3, [pc, #236]	; (800520c <HAL_RCC_OscConfig+0x240>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	691b      	ldr	r3, [r3, #16]
 800512a:	00db      	lsls	r3, r3, #3
 800512c:	4937      	ldr	r1, [pc, #220]	; (800520c <HAL_RCC_OscConfig+0x240>)
 800512e:	4313      	orrs	r3, r2
 8005130:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005132:	e03a      	b.n	80051aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	68db      	ldr	r3, [r3, #12]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d020      	beq.n	800517e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800513c:	4b34      	ldr	r3, [pc, #208]	; (8005210 <HAL_RCC_OscConfig+0x244>)
 800513e:	2201      	movs	r2, #1
 8005140:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005142:	f7fc fe45 	bl	8001dd0 <HAL_GetTick>
 8005146:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005148:	e008      	b.n	800515c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800514a:	f7fc fe41 	bl	8001dd0 <HAL_GetTick>
 800514e:	4602      	mov	r2, r0
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	1ad3      	subs	r3, r2, r3
 8005154:	2b02      	cmp	r3, #2
 8005156:	d901      	bls.n	800515c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005158:	2303      	movs	r3, #3
 800515a:	e1a8      	b.n	80054ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800515c:	4b2b      	ldr	r3, [pc, #172]	; (800520c <HAL_RCC_OscConfig+0x240>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f003 0302 	and.w	r3, r3, #2
 8005164:	2b00      	cmp	r3, #0
 8005166:	d0f0      	beq.n	800514a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005168:	4b28      	ldr	r3, [pc, #160]	; (800520c <HAL_RCC_OscConfig+0x240>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	691b      	ldr	r3, [r3, #16]
 8005174:	00db      	lsls	r3, r3, #3
 8005176:	4925      	ldr	r1, [pc, #148]	; (800520c <HAL_RCC_OscConfig+0x240>)
 8005178:	4313      	orrs	r3, r2
 800517a:	600b      	str	r3, [r1, #0]
 800517c:	e015      	b.n	80051aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800517e:	4b24      	ldr	r3, [pc, #144]	; (8005210 <HAL_RCC_OscConfig+0x244>)
 8005180:	2200      	movs	r2, #0
 8005182:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005184:	f7fc fe24 	bl	8001dd0 <HAL_GetTick>
 8005188:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800518a:	e008      	b.n	800519e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800518c:	f7fc fe20 	bl	8001dd0 <HAL_GetTick>
 8005190:	4602      	mov	r2, r0
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	1ad3      	subs	r3, r2, r3
 8005196:	2b02      	cmp	r3, #2
 8005198:	d901      	bls.n	800519e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800519a:	2303      	movs	r3, #3
 800519c:	e187      	b.n	80054ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800519e:	4b1b      	ldr	r3, [pc, #108]	; (800520c <HAL_RCC_OscConfig+0x240>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f003 0302 	and.w	r3, r3, #2
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d1f0      	bne.n	800518c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f003 0308 	and.w	r3, r3, #8
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d036      	beq.n	8005224 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	695b      	ldr	r3, [r3, #20]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d016      	beq.n	80051ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80051be:	4b15      	ldr	r3, [pc, #84]	; (8005214 <HAL_RCC_OscConfig+0x248>)
 80051c0:	2201      	movs	r2, #1
 80051c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051c4:	f7fc fe04 	bl	8001dd0 <HAL_GetTick>
 80051c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051ca:	e008      	b.n	80051de <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80051cc:	f7fc fe00 	bl	8001dd0 <HAL_GetTick>
 80051d0:	4602      	mov	r2, r0
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	1ad3      	subs	r3, r2, r3
 80051d6:	2b02      	cmp	r3, #2
 80051d8:	d901      	bls.n	80051de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80051da:	2303      	movs	r3, #3
 80051dc:	e167      	b.n	80054ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051de:	4b0b      	ldr	r3, [pc, #44]	; (800520c <HAL_RCC_OscConfig+0x240>)
 80051e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051e2:	f003 0302 	and.w	r3, r3, #2
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d0f0      	beq.n	80051cc <HAL_RCC_OscConfig+0x200>
 80051ea:	e01b      	b.n	8005224 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80051ec:	4b09      	ldr	r3, [pc, #36]	; (8005214 <HAL_RCC_OscConfig+0x248>)
 80051ee:	2200      	movs	r2, #0
 80051f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051f2:	f7fc fded 	bl	8001dd0 <HAL_GetTick>
 80051f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051f8:	e00e      	b.n	8005218 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80051fa:	f7fc fde9 	bl	8001dd0 <HAL_GetTick>
 80051fe:	4602      	mov	r2, r0
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	1ad3      	subs	r3, r2, r3
 8005204:	2b02      	cmp	r3, #2
 8005206:	d907      	bls.n	8005218 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005208:	2303      	movs	r3, #3
 800520a:	e150      	b.n	80054ae <HAL_RCC_OscConfig+0x4e2>
 800520c:	40023800 	.word	0x40023800
 8005210:	42470000 	.word	0x42470000
 8005214:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005218:	4b88      	ldr	r3, [pc, #544]	; (800543c <HAL_RCC_OscConfig+0x470>)
 800521a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800521c:	f003 0302 	and.w	r3, r3, #2
 8005220:	2b00      	cmp	r3, #0
 8005222:	d1ea      	bne.n	80051fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f003 0304 	and.w	r3, r3, #4
 800522c:	2b00      	cmp	r3, #0
 800522e:	f000 8097 	beq.w	8005360 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005232:	2300      	movs	r3, #0
 8005234:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005236:	4b81      	ldr	r3, [pc, #516]	; (800543c <HAL_RCC_OscConfig+0x470>)
 8005238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800523a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800523e:	2b00      	cmp	r3, #0
 8005240:	d10f      	bne.n	8005262 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005242:	2300      	movs	r3, #0
 8005244:	60bb      	str	r3, [r7, #8]
 8005246:	4b7d      	ldr	r3, [pc, #500]	; (800543c <HAL_RCC_OscConfig+0x470>)
 8005248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800524a:	4a7c      	ldr	r2, [pc, #496]	; (800543c <HAL_RCC_OscConfig+0x470>)
 800524c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005250:	6413      	str	r3, [r2, #64]	; 0x40
 8005252:	4b7a      	ldr	r3, [pc, #488]	; (800543c <HAL_RCC_OscConfig+0x470>)
 8005254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005256:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800525a:	60bb      	str	r3, [r7, #8]
 800525c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800525e:	2301      	movs	r3, #1
 8005260:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005262:	4b77      	ldr	r3, [pc, #476]	; (8005440 <HAL_RCC_OscConfig+0x474>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800526a:	2b00      	cmp	r3, #0
 800526c:	d118      	bne.n	80052a0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800526e:	4b74      	ldr	r3, [pc, #464]	; (8005440 <HAL_RCC_OscConfig+0x474>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a73      	ldr	r2, [pc, #460]	; (8005440 <HAL_RCC_OscConfig+0x474>)
 8005274:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005278:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800527a:	f7fc fda9 	bl	8001dd0 <HAL_GetTick>
 800527e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005280:	e008      	b.n	8005294 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005282:	f7fc fda5 	bl	8001dd0 <HAL_GetTick>
 8005286:	4602      	mov	r2, r0
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	1ad3      	subs	r3, r2, r3
 800528c:	2b02      	cmp	r3, #2
 800528e:	d901      	bls.n	8005294 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005290:	2303      	movs	r3, #3
 8005292:	e10c      	b.n	80054ae <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005294:	4b6a      	ldr	r3, [pc, #424]	; (8005440 <HAL_RCC_OscConfig+0x474>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800529c:	2b00      	cmp	r3, #0
 800529e:	d0f0      	beq.n	8005282 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d106      	bne.n	80052b6 <HAL_RCC_OscConfig+0x2ea>
 80052a8:	4b64      	ldr	r3, [pc, #400]	; (800543c <HAL_RCC_OscConfig+0x470>)
 80052aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052ac:	4a63      	ldr	r2, [pc, #396]	; (800543c <HAL_RCC_OscConfig+0x470>)
 80052ae:	f043 0301 	orr.w	r3, r3, #1
 80052b2:	6713      	str	r3, [r2, #112]	; 0x70
 80052b4:	e01c      	b.n	80052f0 <HAL_RCC_OscConfig+0x324>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	2b05      	cmp	r3, #5
 80052bc:	d10c      	bne.n	80052d8 <HAL_RCC_OscConfig+0x30c>
 80052be:	4b5f      	ldr	r3, [pc, #380]	; (800543c <HAL_RCC_OscConfig+0x470>)
 80052c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052c2:	4a5e      	ldr	r2, [pc, #376]	; (800543c <HAL_RCC_OscConfig+0x470>)
 80052c4:	f043 0304 	orr.w	r3, r3, #4
 80052c8:	6713      	str	r3, [r2, #112]	; 0x70
 80052ca:	4b5c      	ldr	r3, [pc, #368]	; (800543c <HAL_RCC_OscConfig+0x470>)
 80052cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052ce:	4a5b      	ldr	r2, [pc, #364]	; (800543c <HAL_RCC_OscConfig+0x470>)
 80052d0:	f043 0301 	orr.w	r3, r3, #1
 80052d4:	6713      	str	r3, [r2, #112]	; 0x70
 80052d6:	e00b      	b.n	80052f0 <HAL_RCC_OscConfig+0x324>
 80052d8:	4b58      	ldr	r3, [pc, #352]	; (800543c <HAL_RCC_OscConfig+0x470>)
 80052da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052dc:	4a57      	ldr	r2, [pc, #348]	; (800543c <HAL_RCC_OscConfig+0x470>)
 80052de:	f023 0301 	bic.w	r3, r3, #1
 80052e2:	6713      	str	r3, [r2, #112]	; 0x70
 80052e4:	4b55      	ldr	r3, [pc, #340]	; (800543c <HAL_RCC_OscConfig+0x470>)
 80052e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052e8:	4a54      	ldr	r2, [pc, #336]	; (800543c <HAL_RCC_OscConfig+0x470>)
 80052ea:	f023 0304 	bic.w	r3, r3, #4
 80052ee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d015      	beq.n	8005324 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052f8:	f7fc fd6a 	bl	8001dd0 <HAL_GetTick>
 80052fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052fe:	e00a      	b.n	8005316 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005300:	f7fc fd66 	bl	8001dd0 <HAL_GetTick>
 8005304:	4602      	mov	r2, r0
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	1ad3      	subs	r3, r2, r3
 800530a:	f241 3288 	movw	r2, #5000	; 0x1388
 800530e:	4293      	cmp	r3, r2
 8005310:	d901      	bls.n	8005316 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005312:	2303      	movs	r3, #3
 8005314:	e0cb      	b.n	80054ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005316:	4b49      	ldr	r3, [pc, #292]	; (800543c <HAL_RCC_OscConfig+0x470>)
 8005318:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800531a:	f003 0302 	and.w	r3, r3, #2
 800531e:	2b00      	cmp	r3, #0
 8005320:	d0ee      	beq.n	8005300 <HAL_RCC_OscConfig+0x334>
 8005322:	e014      	b.n	800534e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005324:	f7fc fd54 	bl	8001dd0 <HAL_GetTick>
 8005328:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800532a:	e00a      	b.n	8005342 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800532c:	f7fc fd50 	bl	8001dd0 <HAL_GetTick>
 8005330:	4602      	mov	r2, r0
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	1ad3      	subs	r3, r2, r3
 8005336:	f241 3288 	movw	r2, #5000	; 0x1388
 800533a:	4293      	cmp	r3, r2
 800533c:	d901      	bls.n	8005342 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800533e:	2303      	movs	r3, #3
 8005340:	e0b5      	b.n	80054ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005342:	4b3e      	ldr	r3, [pc, #248]	; (800543c <HAL_RCC_OscConfig+0x470>)
 8005344:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005346:	f003 0302 	and.w	r3, r3, #2
 800534a:	2b00      	cmp	r3, #0
 800534c:	d1ee      	bne.n	800532c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800534e:	7dfb      	ldrb	r3, [r7, #23]
 8005350:	2b01      	cmp	r3, #1
 8005352:	d105      	bne.n	8005360 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005354:	4b39      	ldr	r3, [pc, #228]	; (800543c <HAL_RCC_OscConfig+0x470>)
 8005356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005358:	4a38      	ldr	r2, [pc, #224]	; (800543c <HAL_RCC_OscConfig+0x470>)
 800535a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800535e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	699b      	ldr	r3, [r3, #24]
 8005364:	2b00      	cmp	r3, #0
 8005366:	f000 80a1 	beq.w	80054ac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800536a:	4b34      	ldr	r3, [pc, #208]	; (800543c <HAL_RCC_OscConfig+0x470>)
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	f003 030c 	and.w	r3, r3, #12
 8005372:	2b08      	cmp	r3, #8
 8005374:	d05c      	beq.n	8005430 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	699b      	ldr	r3, [r3, #24]
 800537a:	2b02      	cmp	r3, #2
 800537c:	d141      	bne.n	8005402 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800537e:	4b31      	ldr	r3, [pc, #196]	; (8005444 <HAL_RCC_OscConfig+0x478>)
 8005380:	2200      	movs	r2, #0
 8005382:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005384:	f7fc fd24 	bl	8001dd0 <HAL_GetTick>
 8005388:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800538a:	e008      	b.n	800539e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800538c:	f7fc fd20 	bl	8001dd0 <HAL_GetTick>
 8005390:	4602      	mov	r2, r0
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	1ad3      	subs	r3, r2, r3
 8005396:	2b02      	cmp	r3, #2
 8005398:	d901      	bls.n	800539e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800539a:	2303      	movs	r3, #3
 800539c:	e087      	b.n	80054ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800539e:	4b27      	ldr	r3, [pc, #156]	; (800543c <HAL_RCC_OscConfig+0x470>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d1f0      	bne.n	800538c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	69da      	ldr	r2, [r3, #28]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6a1b      	ldr	r3, [r3, #32]
 80053b2:	431a      	orrs	r2, r3
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b8:	019b      	lsls	r3, r3, #6
 80053ba:	431a      	orrs	r2, r3
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053c0:	085b      	lsrs	r3, r3, #1
 80053c2:	3b01      	subs	r3, #1
 80053c4:	041b      	lsls	r3, r3, #16
 80053c6:	431a      	orrs	r2, r3
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053cc:	061b      	lsls	r3, r3, #24
 80053ce:	491b      	ldr	r1, [pc, #108]	; (800543c <HAL_RCC_OscConfig+0x470>)
 80053d0:	4313      	orrs	r3, r2
 80053d2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80053d4:	4b1b      	ldr	r3, [pc, #108]	; (8005444 <HAL_RCC_OscConfig+0x478>)
 80053d6:	2201      	movs	r2, #1
 80053d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053da:	f7fc fcf9 	bl	8001dd0 <HAL_GetTick>
 80053de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053e0:	e008      	b.n	80053f4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053e2:	f7fc fcf5 	bl	8001dd0 <HAL_GetTick>
 80053e6:	4602      	mov	r2, r0
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	1ad3      	subs	r3, r2, r3
 80053ec:	2b02      	cmp	r3, #2
 80053ee:	d901      	bls.n	80053f4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80053f0:	2303      	movs	r3, #3
 80053f2:	e05c      	b.n	80054ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053f4:	4b11      	ldr	r3, [pc, #68]	; (800543c <HAL_RCC_OscConfig+0x470>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d0f0      	beq.n	80053e2 <HAL_RCC_OscConfig+0x416>
 8005400:	e054      	b.n	80054ac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005402:	4b10      	ldr	r3, [pc, #64]	; (8005444 <HAL_RCC_OscConfig+0x478>)
 8005404:	2200      	movs	r2, #0
 8005406:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005408:	f7fc fce2 	bl	8001dd0 <HAL_GetTick>
 800540c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800540e:	e008      	b.n	8005422 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005410:	f7fc fcde 	bl	8001dd0 <HAL_GetTick>
 8005414:	4602      	mov	r2, r0
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	1ad3      	subs	r3, r2, r3
 800541a:	2b02      	cmp	r3, #2
 800541c:	d901      	bls.n	8005422 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800541e:	2303      	movs	r3, #3
 8005420:	e045      	b.n	80054ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005422:	4b06      	ldr	r3, [pc, #24]	; (800543c <HAL_RCC_OscConfig+0x470>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800542a:	2b00      	cmp	r3, #0
 800542c:	d1f0      	bne.n	8005410 <HAL_RCC_OscConfig+0x444>
 800542e:	e03d      	b.n	80054ac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	699b      	ldr	r3, [r3, #24]
 8005434:	2b01      	cmp	r3, #1
 8005436:	d107      	bne.n	8005448 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005438:	2301      	movs	r3, #1
 800543a:	e038      	b.n	80054ae <HAL_RCC_OscConfig+0x4e2>
 800543c:	40023800 	.word	0x40023800
 8005440:	40007000 	.word	0x40007000
 8005444:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005448:	4b1b      	ldr	r3, [pc, #108]	; (80054b8 <HAL_RCC_OscConfig+0x4ec>)
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	699b      	ldr	r3, [r3, #24]
 8005452:	2b01      	cmp	r3, #1
 8005454:	d028      	beq.n	80054a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005460:	429a      	cmp	r2, r3
 8005462:	d121      	bne.n	80054a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800546e:	429a      	cmp	r2, r3
 8005470:	d11a      	bne.n	80054a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005472:	68fa      	ldr	r2, [r7, #12]
 8005474:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005478:	4013      	ands	r3, r2
 800547a:	687a      	ldr	r2, [r7, #4]
 800547c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800547e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005480:	4293      	cmp	r3, r2
 8005482:	d111      	bne.n	80054a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800548e:	085b      	lsrs	r3, r3, #1
 8005490:	3b01      	subs	r3, #1
 8005492:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005494:	429a      	cmp	r2, r3
 8005496:	d107      	bne.n	80054a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80054a4:	429a      	cmp	r2, r3
 80054a6:	d001      	beq.n	80054ac <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	e000      	b.n	80054ae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80054ac:	2300      	movs	r3, #0
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3718      	adds	r7, #24
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}
 80054b6:	bf00      	nop
 80054b8:	40023800 	.word	0x40023800

080054bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b084      	sub	sp, #16
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
 80054c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d101      	bne.n	80054d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80054cc:	2301      	movs	r3, #1
 80054ce:	e0cc      	b.n	800566a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80054d0:	4b68      	ldr	r3, [pc, #416]	; (8005674 <HAL_RCC_ClockConfig+0x1b8>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f003 030f 	and.w	r3, r3, #15
 80054d8:	683a      	ldr	r2, [r7, #0]
 80054da:	429a      	cmp	r2, r3
 80054dc:	d90c      	bls.n	80054f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054de:	4b65      	ldr	r3, [pc, #404]	; (8005674 <HAL_RCC_ClockConfig+0x1b8>)
 80054e0:	683a      	ldr	r2, [r7, #0]
 80054e2:	b2d2      	uxtb	r2, r2
 80054e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054e6:	4b63      	ldr	r3, [pc, #396]	; (8005674 <HAL_RCC_ClockConfig+0x1b8>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f003 030f 	and.w	r3, r3, #15
 80054ee:	683a      	ldr	r2, [r7, #0]
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d001      	beq.n	80054f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80054f4:	2301      	movs	r3, #1
 80054f6:	e0b8      	b.n	800566a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f003 0302 	and.w	r3, r3, #2
 8005500:	2b00      	cmp	r3, #0
 8005502:	d020      	beq.n	8005546 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f003 0304 	and.w	r3, r3, #4
 800550c:	2b00      	cmp	r3, #0
 800550e:	d005      	beq.n	800551c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005510:	4b59      	ldr	r3, [pc, #356]	; (8005678 <HAL_RCC_ClockConfig+0x1bc>)
 8005512:	689b      	ldr	r3, [r3, #8]
 8005514:	4a58      	ldr	r2, [pc, #352]	; (8005678 <HAL_RCC_ClockConfig+0x1bc>)
 8005516:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800551a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f003 0308 	and.w	r3, r3, #8
 8005524:	2b00      	cmp	r3, #0
 8005526:	d005      	beq.n	8005534 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005528:	4b53      	ldr	r3, [pc, #332]	; (8005678 <HAL_RCC_ClockConfig+0x1bc>)
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	4a52      	ldr	r2, [pc, #328]	; (8005678 <HAL_RCC_ClockConfig+0x1bc>)
 800552e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005532:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005534:	4b50      	ldr	r3, [pc, #320]	; (8005678 <HAL_RCC_ClockConfig+0x1bc>)
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	689b      	ldr	r3, [r3, #8]
 8005540:	494d      	ldr	r1, [pc, #308]	; (8005678 <HAL_RCC_ClockConfig+0x1bc>)
 8005542:	4313      	orrs	r3, r2
 8005544:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f003 0301 	and.w	r3, r3, #1
 800554e:	2b00      	cmp	r3, #0
 8005550:	d044      	beq.n	80055dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	2b01      	cmp	r3, #1
 8005558:	d107      	bne.n	800556a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800555a:	4b47      	ldr	r3, [pc, #284]	; (8005678 <HAL_RCC_ClockConfig+0x1bc>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005562:	2b00      	cmp	r3, #0
 8005564:	d119      	bne.n	800559a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005566:	2301      	movs	r3, #1
 8005568:	e07f      	b.n	800566a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	2b02      	cmp	r3, #2
 8005570:	d003      	beq.n	800557a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005576:	2b03      	cmp	r3, #3
 8005578:	d107      	bne.n	800558a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800557a:	4b3f      	ldr	r3, [pc, #252]	; (8005678 <HAL_RCC_ClockConfig+0x1bc>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005582:	2b00      	cmp	r3, #0
 8005584:	d109      	bne.n	800559a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005586:	2301      	movs	r3, #1
 8005588:	e06f      	b.n	800566a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800558a:	4b3b      	ldr	r3, [pc, #236]	; (8005678 <HAL_RCC_ClockConfig+0x1bc>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f003 0302 	and.w	r3, r3, #2
 8005592:	2b00      	cmp	r3, #0
 8005594:	d101      	bne.n	800559a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	e067      	b.n	800566a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800559a:	4b37      	ldr	r3, [pc, #220]	; (8005678 <HAL_RCC_ClockConfig+0x1bc>)
 800559c:	689b      	ldr	r3, [r3, #8]
 800559e:	f023 0203 	bic.w	r2, r3, #3
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	4934      	ldr	r1, [pc, #208]	; (8005678 <HAL_RCC_ClockConfig+0x1bc>)
 80055a8:	4313      	orrs	r3, r2
 80055aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80055ac:	f7fc fc10 	bl	8001dd0 <HAL_GetTick>
 80055b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055b2:	e00a      	b.n	80055ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055b4:	f7fc fc0c 	bl	8001dd0 <HAL_GetTick>
 80055b8:	4602      	mov	r2, r0
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	1ad3      	subs	r3, r2, r3
 80055be:	f241 3288 	movw	r2, #5000	; 0x1388
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d901      	bls.n	80055ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80055c6:	2303      	movs	r3, #3
 80055c8:	e04f      	b.n	800566a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055ca:	4b2b      	ldr	r3, [pc, #172]	; (8005678 <HAL_RCC_ClockConfig+0x1bc>)
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	f003 020c 	and.w	r2, r3, #12
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	009b      	lsls	r3, r3, #2
 80055d8:	429a      	cmp	r2, r3
 80055da:	d1eb      	bne.n	80055b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80055dc:	4b25      	ldr	r3, [pc, #148]	; (8005674 <HAL_RCC_ClockConfig+0x1b8>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f003 030f 	and.w	r3, r3, #15
 80055e4:	683a      	ldr	r2, [r7, #0]
 80055e6:	429a      	cmp	r2, r3
 80055e8:	d20c      	bcs.n	8005604 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055ea:	4b22      	ldr	r3, [pc, #136]	; (8005674 <HAL_RCC_ClockConfig+0x1b8>)
 80055ec:	683a      	ldr	r2, [r7, #0]
 80055ee:	b2d2      	uxtb	r2, r2
 80055f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80055f2:	4b20      	ldr	r3, [pc, #128]	; (8005674 <HAL_RCC_ClockConfig+0x1b8>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f003 030f 	and.w	r3, r3, #15
 80055fa:	683a      	ldr	r2, [r7, #0]
 80055fc:	429a      	cmp	r2, r3
 80055fe:	d001      	beq.n	8005604 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005600:	2301      	movs	r3, #1
 8005602:	e032      	b.n	800566a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f003 0304 	and.w	r3, r3, #4
 800560c:	2b00      	cmp	r3, #0
 800560e:	d008      	beq.n	8005622 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005610:	4b19      	ldr	r3, [pc, #100]	; (8005678 <HAL_RCC_ClockConfig+0x1bc>)
 8005612:	689b      	ldr	r3, [r3, #8]
 8005614:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	68db      	ldr	r3, [r3, #12]
 800561c:	4916      	ldr	r1, [pc, #88]	; (8005678 <HAL_RCC_ClockConfig+0x1bc>)
 800561e:	4313      	orrs	r3, r2
 8005620:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f003 0308 	and.w	r3, r3, #8
 800562a:	2b00      	cmp	r3, #0
 800562c:	d009      	beq.n	8005642 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800562e:	4b12      	ldr	r3, [pc, #72]	; (8005678 <HAL_RCC_ClockConfig+0x1bc>)
 8005630:	689b      	ldr	r3, [r3, #8]
 8005632:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	691b      	ldr	r3, [r3, #16]
 800563a:	00db      	lsls	r3, r3, #3
 800563c:	490e      	ldr	r1, [pc, #56]	; (8005678 <HAL_RCC_ClockConfig+0x1bc>)
 800563e:	4313      	orrs	r3, r2
 8005640:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005642:	f000 f821 	bl	8005688 <HAL_RCC_GetSysClockFreq>
 8005646:	4602      	mov	r2, r0
 8005648:	4b0b      	ldr	r3, [pc, #44]	; (8005678 <HAL_RCC_ClockConfig+0x1bc>)
 800564a:	689b      	ldr	r3, [r3, #8]
 800564c:	091b      	lsrs	r3, r3, #4
 800564e:	f003 030f 	and.w	r3, r3, #15
 8005652:	490a      	ldr	r1, [pc, #40]	; (800567c <HAL_RCC_ClockConfig+0x1c0>)
 8005654:	5ccb      	ldrb	r3, [r1, r3]
 8005656:	fa22 f303 	lsr.w	r3, r2, r3
 800565a:	4a09      	ldr	r2, [pc, #36]	; (8005680 <HAL_RCC_ClockConfig+0x1c4>)
 800565c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800565e:	4b09      	ldr	r3, [pc, #36]	; (8005684 <HAL_RCC_ClockConfig+0x1c8>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4618      	mov	r0, r3
 8005664:	f7fc fb70 	bl	8001d48 <HAL_InitTick>

  return HAL_OK;
 8005668:	2300      	movs	r3, #0
}
 800566a:	4618      	mov	r0, r3
 800566c:	3710      	adds	r7, #16
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}
 8005672:	bf00      	nop
 8005674:	40023c00 	.word	0x40023c00
 8005678:	40023800 	.word	0x40023800
 800567c:	0800b2cc 	.word	0x0800b2cc
 8005680:	200001c8 	.word	0x200001c8
 8005684:	200001cc 	.word	0x200001cc

08005688 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005688:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800568c:	b094      	sub	sp, #80	; 0x50
 800568e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005690:	2300      	movs	r3, #0
 8005692:	647b      	str	r3, [r7, #68]	; 0x44
 8005694:	2300      	movs	r3, #0
 8005696:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005698:	2300      	movs	r3, #0
 800569a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800569c:	2300      	movs	r3, #0
 800569e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80056a0:	4b79      	ldr	r3, [pc, #484]	; (8005888 <HAL_RCC_GetSysClockFreq+0x200>)
 80056a2:	689b      	ldr	r3, [r3, #8]
 80056a4:	f003 030c 	and.w	r3, r3, #12
 80056a8:	2b08      	cmp	r3, #8
 80056aa:	d00d      	beq.n	80056c8 <HAL_RCC_GetSysClockFreq+0x40>
 80056ac:	2b08      	cmp	r3, #8
 80056ae:	f200 80e1 	bhi.w	8005874 <HAL_RCC_GetSysClockFreq+0x1ec>
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d002      	beq.n	80056bc <HAL_RCC_GetSysClockFreq+0x34>
 80056b6:	2b04      	cmp	r3, #4
 80056b8:	d003      	beq.n	80056c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80056ba:	e0db      	b.n	8005874 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80056bc:	4b73      	ldr	r3, [pc, #460]	; (800588c <HAL_RCC_GetSysClockFreq+0x204>)
 80056be:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80056c0:	e0db      	b.n	800587a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80056c2:	4b73      	ldr	r3, [pc, #460]	; (8005890 <HAL_RCC_GetSysClockFreq+0x208>)
 80056c4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80056c6:	e0d8      	b.n	800587a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80056c8:	4b6f      	ldr	r3, [pc, #444]	; (8005888 <HAL_RCC_GetSysClockFreq+0x200>)
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80056d0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80056d2:	4b6d      	ldr	r3, [pc, #436]	; (8005888 <HAL_RCC_GetSysClockFreq+0x200>)
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d063      	beq.n	80057a6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80056de:	4b6a      	ldr	r3, [pc, #424]	; (8005888 <HAL_RCC_GetSysClockFreq+0x200>)
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	099b      	lsrs	r3, r3, #6
 80056e4:	2200      	movs	r2, #0
 80056e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80056e8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80056ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056f0:	633b      	str	r3, [r7, #48]	; 0x30
 80056f2:	2300      	movs	r3, #0
 80056f4:	637b      	str	r3, [r7, #52]	; 0x34
 80056f6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80056fa:	4622      	mov	r2, r4
 80056fc:	462b      	mov	r3, r5
 80056fe:	f04f 0000 	mov.w	r0, #0
 8005702:	f04f 0100 	mov.w	r1, #0
 8005706:	0159      	lsls	r1, r3, #5
 8005708:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800570c:	0150      	lsls	r0, r2, #5
 800570e:	4602      	mov	r2, r0
 8005710:	460b      	mov	r3, r1
 8005712:	4621      	mov	r1, r4
 8005714:	1a51      	subs	r1, r2, r1
 8005716:	6139      	str	r1, [r7, #16]
 8005718:	4629      	mov	r1, r5
 800571a:	eb63 0301 	sbc.w	r3, r3, r1
 800571e:	617b      	str	r3, [r7, #20]
 8005720:	f04f 0200 	mov.w	r2, #0
 8005724:	f04f 0300 	mov.w	r3, #0
 8005728:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800572c:	4659      	mov	r1, fp
 800572e:	018b      	lsls	r3, r1, #6
 8005730:	4651      	mov	r1, sl
 8005732:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005736:	4651      	mov	r1, sl
 8005738:	018a      	lsls	r2, r1, #6
 800573a:	4651      	mov	r1, sl
 800573c:	ebb2 0801 	subs.w	r8, r2, r1
 8005740:	4659      	mov	r1, fp
 8005742:	eb63 0901 	sbc.w	r9, r3, r1
 8005746:	f04f 0200 	mov.w	r2, #0
 800574a:	f04f 0300 	mov.w	r3, #0
 800574e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005752:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005756:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800575a:	4690      	mov	r8, r2
 800575c:	4699      	mov	r9, r3
 800575e:	4623      	mov	r3, r4
 8005760:	eb18 0303 	adds.w	r3, r8, r3
 8005764:	60bb      	str	r3, [r7, #8]
 8005766:	462b      	mov	r3, r5
 8005768:	eb49 0303 	adc.w	r3, r9, r3
 800576c:	60fb      	str	r3, [r7, #12]
 800576e:	f04f 0200 	mov.w	r2, #0
 8005772:	f04f 0300 	mov.w	r3, #0
 8005776:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800577a:	4629      	mov	r1, r5
 800577c:	024b      	lsls	r3, r1, #9
 800577e:	4621      	mov	r1, r4
 8005780:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005784:	4621      	mov	r1, r4
 8005786:	024a      	lsls	r2, r1, #9
 8005788:	4610      	mov	r0, r2
 800578a:	4619      	mov	r1, r3
 800578c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800578e:	2200      	movs	r2, #0
 8005790:	62bb      	str	r3, [r7, #40]	; 0x28
 8005792:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005794:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005798:	f7fb fa86 	bl	8000ca8 <__aeabi_uldivmod>
 800579c:	4602      	mov	r2, r0
 800579e:	460b      	mov	r3, r1
 80057a0:	4613      	mov	r3, r2
 80057a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057a4:	e058      	b.n	8005858 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80057a6:	4b38      	ldr	r3, [pc, #224]	; (8005888 <HAL_RCC_GetSysClockFreq+0x200>)
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	099b      	lsrs	r3, r3, #6
 80057ac:	2200      	movs	r2, #0
 80057ae:	4618      	mov	r0, r3
 80057b0:	4611      	mov	r1, r2
 80057b2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80057b6:	623b      	str	r3, [r7, #32]
 80057b8:	2300      	movs	r3, #0
 80057ba:	627b      	str	r3, [r7, #36]	; 0x24
 80057bc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80057c0:	4642      	mov	r2, r8
 80057c2:	464b      	mov	r3, r9
 80057c4:	f04f 0000 	mov.w	r0, #0
 80057c8:	f04f 0100 	mov.w	r1, #0
 80057cc:	0159      	lsls	r1, r3, #5
 80057ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80057d2:	0150      	lsls	r0, r2, #5
 80057d4:	4602      	mov	r2, r0
 80057d6:	460b      	mov	r3, r1
 80057d8:	4641      	mov	r1, r8
 80057da:	ebb2 0a01 	subs.w	sl, r2, r1
 80057de:	4649      	mov	r1, r9
 80057e0:	eb63 0b01 	sbc.w	fp, r3, r1
 80057e4:	f04f 0200 	mov.w	r2, #0
 80057e8:	f04f 0300 	mov.w	r3, #0
 80057ec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80057f0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80057f4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80057f8:	ebb2 040a 	subs.w	r4, r2, sl
 80057fc:	eb63 050b 	sbc.w	r5, r3, fp
 8005800:	f04f 0200 	mov.w	r2, #0
 8005804:	f04f 0300 	mov.w	r3, #0
 8005808:	00eb      	lsls	r3, r5, #3
 800580a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800580e:	00e2      	lsls	r2, r4, #3
 8005810:	4614      	mov	r4, r2
 8005812:	461d      	mov	r5, r3
 8005814:	4643      	mov	r3, r8
 8005816:	18e3      	adds	r3, r4, r3
 8005818:	603b      	str	r3, [r7, #0]
 800581a:	464b      	mov	r3, r9
 800581c:	eb45 0303 	adc.w	r3, r5, r3
 8005820:	607b      	str	r3, [r7, #4]
 8005822:	f04f 0200 	mov.w	r2, #0
 8005826:	f04f 0300 	mov.w	r3, #0
 800582a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800582e:	4629      	mov	r1, r5
 8005830:	028b      	lsls	r3, r1, #10
 8005832:	4621      	mov	r1, r4
 8005834:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005838:	4621      	mov	r1, r4
 800583a:	028a      	lsls	r2, r1, #10
 800583c:	4610      	mov	r0, r2
 800583e:	4619      	mov	r1, r3
 8005840:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005842:	2200      	movs	r2, #0
 8005844:	61bb      	str	r3, [r7, #24]
 8005846:	61fa      	str	r2, [r7, #28]
 8005848:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800584c:	f7fb fa2c 	bl	8000ca8 <__aeabi_uldivmod>
 8005850:	4602      	mov	r2, r0
 8005852:	460b      	mov	r3, r1
 8005854:	4613      	mov	r3, r2
 8005856:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005858:	4b0b      	ldr	r3, [pc, #44]	; (8005888 <HAL_RCC_GetSysClockFreq+0x200>)
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	0c1b      	lsrs	r3, r3, #16
 800585e:	f003 0303 	and.w	r3, r3, #3
 8005862:	3301      	adds	r3, #1
 8005864:	005b      	lsls	r3, r3, #1
 8005866:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005868:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800586a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800586c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005870:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005872:	e002      	b.n	800587a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005874:	4b05      	ldr	r3, [pc, #20]	; (800588c <HAL_RCC_GetSysClockFreq+0x204>)
 8005876:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005878:	bf00      	nop
    }
  }
  return sysclockfreq;
 800587a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800587c:	4618      	mov	r0, r3
 800587e:	3750      	adds	r7, #80	; 0x50
 8005880:	46bd      	mov	sp, r7
 8005882:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005886:	bf00      	nop
 8005888:	40023800 	.word	0x40023800
 800588c:	00f42400 	.word	0x00f42400
 8005890:	007a1200 	.word	0x007a1200

08005894 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005894:	b480      	push	{r7}
 8005896:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005898:	4b03      	ldr	r3, [pc, #12]	; (80058a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800589a:	681b      	ldr	r3, [r3, #0]
}
 800589c:	4618      	mov	r0, r3
 800589e:	46bd      	mov	sp, r7
 80058a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a4:	4770      	bx	lr
 80058a6:	bf00      	nop
 80058a8:	200001c8 	.word	0x200001c8

080058ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80058b0:	f7ff fff0 	bl	8005894 <HAL_RCC_GetHCLKFreq>
 80058b4:	4602      	mov	r2, r0
 80058b6:	4b05      	ldr	r3, [pc, #20]	; (80058cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80058b8:	689b      	ldr	r3, [r3, #8]
 80058ba:	0a9b      	lsrs	r3, r3, #10
 80058bc:	f003 0307 	and.w	r3, r3, #7
 80058c0:	4903      	ldr	r1, [pc, #12]	; (80058d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80058c2:	5ccb      	ldrb	r3, [r1, r3]
 80058c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	bd80      	pop	{r7, pc}
 80058cc:	40023800 	.word	0x40023800
 80058d0:	0800b2dc 	.word	0x0800b2dc

080058d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80058d8:	f7ff ffdc 	bl	8005894 <HAL_RCC_GetHCLKFreq>
 80058dc:	4602      	mov	r2, r0
 80058de:	4b05      	ldr	r3, [pc, #20]	; (80058f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80058e0:	689b      	ldr	r3, [r3, #8]
 80058e2:	0b5b      	lsrs	r3, r3, #13
 80058e4:	f003 0307 	and.w	r3, r3, #7
 80058e8:	4903      	ldr	r1, [pc, #12]	; (80058f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80058ea:	5ccb      	ldrb	r3, [r1, r3]
 80058ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	bd80      	pop	{r7, pc}
 80058f4:	40023800 	.word	0x40023800
 80058f8:	0800b2dc 	.word	0x0800b2dc

080058fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b082      	sub	sp, #8
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d101      	bne.n	800590e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	e03f      	b.n	800598e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005914:	b2db      	uxtb	r3, r3
 8005916:	2b00      	cmp	r3, #0
 8005918:	d106      	bne.n	8005928 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2200      	movs	r2, #0
 800591e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f7fc f974 	bl	8001c10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2224      	movs	r2, #36	; 0x24
 800592c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	68da      	ldr	r2, [r3, #12]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800593e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	f000 fd7b 	bl	800643c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	691a      	ldr	r2, [r3, #16]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005954:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	695a      	ldr	r2, [r3, #20]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005964:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	68da      	ldr	r2, [r3, #12]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005974:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2200      	movs	r2, #0
 800597a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2220      	movs	r2, #32
 8005980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2220      	movs	r2, #32
 8005988:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800598c:	2300      	movs	r3, #0
}
 800598e:	4618      	mov	r0, r3
 8005990:	3708      	adds	r7, #8
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}

08005996 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005996:	b580      	push	{r7, lr}
 8005998:	b08a      	sub	sp, #40	; 0x28
 800599a:	af02      	add	r7, sp, #8
 800599c:	60f8      	str	r0, [r7, #12]
 800599e:	60b9      	str	r1, [r7, #8]
 80059a0:	603b      	str	r3, [r7, #0]
 80059a2:	4613      	mov	r3, r2
 80059a4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80059a6:	2300      	movs	r3, #0
 80059a8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059b0:	b2db      	uxtb	r3, r3
 80059b2:	2b20      	cmp	r3, #32
 80059b4:	d17c      	bne.n	8005ab0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d002      	beq.n	80059c2 <HAL_UART_Transmit+0x2c>
 80059bc:	88fb      	ldrh	r3, [r7, #6]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d101      	bne.n	80059c6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80059c2:	2301      	movs	r3, #1
 80059c4:	e075      	b.n	8005ab2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	d101      	bne.n	80059d4 <HAL_UART_Transmit+0x3e>
 80059d0:	2302      	movs	r3, #2
 80059d2:	e06e      	b.n	8005ab2 <HAL_UART_Transmit+0x11c>
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	2201      	movs	r2, #1
 80059d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2200      	movs	r2, #0
 80059e0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2221      	movs	r2, #33	; 0x21
 80059e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80059ea:	f7fc f9f1 	bl	8001dd0 <HAL_GetTick>
 80059ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	88fa      	ldrh	r2, [r7, #6]
 80059f4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	88fa      	ldrh	r2, [r7, #6]
 80059fa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	689b      	ldr	r3, [r3, #8]
 8005a00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a04:	d108      	bne.n	8005a18 <HAL_UART_Transmit+0x82>
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	691b      	ldr	r3, [r3, #16]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d104      	bne.n	8005a18 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	61bb      	str	r3, [r7, #24]
 8005a16:	e003      	b.n	8005a20 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2200      	movs	r2, #0
 8005a24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005a28:	e02a      	b.n	8005a80 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	9300      	str	r3, [sp, #0]
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	2200      	movs	r2, #0
 8005a32:	2180      	movs	r1, #128	; 0x80
 8005a34:	68f8      	ldr	r0, [r7, #12]
 8005a36:	f000 faf9 	bl	800602c <UART_WaitOnFlagUntilTimeout>
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d001      	beq.n	8005a44 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005a40:	2303      	movs	r3, #3
 8005a42:	e036      	b.n	8005ab2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005a44:	69fb      	ldr	r3, [r7, #28]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d10b      	bne.n	8005a62 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005a4a:	69bb      	ldr	r3, [r7, #24]
 8005a4c:	881b      	ldrh	r3, [r3, #0]
 8005a4e:	461a      	mov	r2, r3
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a58:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005a5a:	69bb      	ldr	r3, [r7, #24]
 8005a5c:	3302      	adds	r3, #2
 8005a5e:	61bb      	str	r3, [r7, #24]
 8005a60:	e007      	b.n	8005a72 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005a62:	69fb      	ldr	r3, [r7, #28]
 8005a64:	781a      	ldrb	r2, [r3, #0]
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005a6c:	69fb      	ldr	r3, [r7, #28]
 8005a6e:	3301      	adds	r3, #1
 8005a70:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005a76:	b29b      	uxth	r3, r3
 8005a78:	3b01      	subs	r3, #1
 8005a7a:	b29a      	uxth	r2, r3
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005a84:	b29b      	uxth	r3, r3
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d1cf      	bne.n	8005a2a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	9300      	str	r3, [sp, #0]
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	2200      	movs	r2, #0
 8005a92:	2140      	movs	r1, #64	; 0x40
 8005a94:	68f8      	ldr	r0, [r7, #12]
 8005a96:	f000 fac9 	bl	800602c <UART_WaitOnFlagUntilTimeout>
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d001      	beq.n	8005aa4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005aa0:	2303      	movs	r3, #3
 8005aa2:	e006      	b.n	8005ab2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2220      	movs	r2, #32
 8005aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005aac:	2300      	movs	r3, #0
 8005aae:	e000      	b.n	8005ab2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005ab0:	2302      	movs	r3, #2
  }
}
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	3720      	adds	r7, #32
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd80      	pop	{r7, pc}
	...

08005abc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b0ba      	sub	sp, #232	; 0xe8
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	68db      	ldr	r3, [r3, #12]
 8005ad4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	695b      	ldr	r3, [r3, #20]
 8005ade:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005aee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005af2:	f003 030f 	and.w	r3, r3, #15
 8005af6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005afa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d10f      	bne.n	8005b22 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005b02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b06:	f003 0320 	and.w	r3, r3, #32
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d009      	beq.n	8005b22 <HAL_UART_IRQHandler+0x66>
 8005b0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b12:	f003 0320 	and.w	r3, r3, #32
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d003      	beq.n	8005b22 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f000 fbd3 	bl	80062c6 <UART_Receive_IT>
      return;
 8005b20:	e256      	b.n	8005fd0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005b22:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	f000 80de 	beq.w	8005ce8 <HAL_UART_IRQHandler+0x22c>
 8005b2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b30:	f003 0301 	and.w	r3, r3, #1
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d106      	bne.n	8005b46 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005b38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b3c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	f000 80d1 	beq.w	8005ce8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005b46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b4a:	f003 0301 	and.w	r3, r3, #1
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d00b      	beq.n	8005b6a <HAL_UART_IRQHandler+0xae>
 8005b52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d005      	beq.n	8005b6a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b62:	f043 0201 	orr.w	r2, r3, #1
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005b6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b6e:	f003 0304 	and.w	r3, r3, #4
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d00b      	beq.n	8005b8e <HAL_UART_IRQHandler+0xd2>
 8005b76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b7a:	f003 0301 	and.w	r3, r3, #1
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d005      	beq.n	8005b8e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b86:	f043 0202 	orr.w	r2, r3, #2
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005b8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b92:	f003 0302 	and.w	r3, r3, #2
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d00b      	beq.n	8005bb2 <HAL_UART_IRQHandler+0xf6>
 8005b9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b9e:	f003 0301 	and.w	r3, r3, #1
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d005      	beq.n	8005bb2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005baa:	f043 0204 	orr.w	r2, r3, #4
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005bb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bb6:	f003 0308 	and.w	r3, r3, #8
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d011      	beq.n	8005be2 <HAL_UART_IRQHandler+0x126>
 8005bbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bc2:	f003 0320 	and.w	r3, r3, #32
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d105      	bne.n	8005bd6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005bca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005bce:	f003 0301 	and.w	r3, r3, #1
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d005      	beq.n	8005be2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bda:	f043 0208 	orr.w	r2, r3, #8
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	f000 81ed 	beq.w	8005fc6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005bec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bf0:	f003 0320 	and.w	r3, r3, #32
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d008      	beq.n	8005c0a <HAL_UART_IRQHandler+0x14e>
 8005bf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bfc:	f003 0320 	and.w	r3, r3, #32
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d002      	beq.n	8005c0a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f000 fb5e 	bl	80062c6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	695b      	ldr	r3, [r3, #20]
 8005c10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c14:	2b40      	cmp	r3, #64	; 0x40
 8005c16:	bf0c      	ite	eq
 8005c18:	2301      	moveq	r3, #1
 8005c1a:	2300      	movne	r3, #0
 8005c1c:	b2db      	uxtb	r3, r3
 8005c1e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c26:	f003 0308 	and.w	r3, r3, #8
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d103      	bne.n	8005c36 <HAL_UART_IRQHandler+0x17a>
 8005c2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d04f      	beq.n	8005cd6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	f000 fa66 	bl	8006108 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	695b      	ldr	r3, [r3, #20]
 8005c42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c46:	2b40      	cmp	r3, #64	; 0x40
 8005c48:	d141      	bne.n	8005cce <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	3314      	adds	r3, #20
 8005c50:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c54:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005c58:	e853 3f00 	ldrex	r3, [r3]
 8005c5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005c60:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005c64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c68:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	3314      	adds	r3, #20
 8005c72:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005c76:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005c7a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c7e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005c82:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005c86:	e841 2300 	strex	r3, r2, [r1]
 8005c8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005c8e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d1d9      	bne.n	8005c4a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d013      	beq.n	8005cc6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ca2:	4a7d      	ldr	r2, [pc, #500]	; (8005e98 <HAL_UART_IRQHandler+0x3dc>)
 8005ca4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005caa:	4618      	mov	r0, r3
 8005cac:	f7fc fa41 	bl	8002132 <HAL_DMA_Abort_IT>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d016      	beq.n	8005ce4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cbc:	687a      	ldr	r2, [r7, #4]
 8005cbe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005cc0:	4610      	mov	r0, r2
 8005cc2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cc4:	e00e      	b.n	8005ce4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f000 f99a 	bl	8006000 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ccc:	e00a      	b.n	8005ce4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f000 f996 	bl	8006000 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cd4:	e006      	b.n	8005ce4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f000 f992 	bl	8006000 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005ce2:	e170      	b.n	8005fc6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ce4:	bf00      	nop
    return;
 8005ce6:	e16e      	b.n	8005fc6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cec:	2b01      	cmp	r3, #1
 8005cee:	f040 814a 	bne.w	8005f86 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005cf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cf6:	f003 0310 	and.w	r3, r3, #16
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	f000 8143 	beq.w	8005f86 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005d00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d04:	f003 0310 	and.w	r3, r3, #16
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	f000 813c 	beq.w	8005f86 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005d0e:	2300      	movs	r3, #0
 8005d10:	60bb      	str	r3, [r7, #8]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	60bb      	str	r3, [r7, #8]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	60bb      	str	r3, [r7, #8]
 8005d22:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	695b      	ldr	r3, [r3, #20]
 8005d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d2e:	2b40      	cmp	r3, #64	; 0x40
 8005d30:	f040 80b4 	bne.w	8005e9c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005d40:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	f000 8140 	beq.w	8005fca <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005d4e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005d52:	429a      	cmp	r2, r3
 8005d54:	f080 8139 	bcs.w	8005fca <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005d5e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d64:	69db      	ldr	r3, [r3, #28]
 8005d66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d6a:	f000 8088 	beq.w	8005e7e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	330c      	adds	r3, #12
 8005d74:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d78:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005d7c:	e853 3f00 	ldrex	r3, [r3]
 8005d80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005d84:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005d88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d8c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	330c      	adds	r3, #12
 8005d96:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005d9a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005d9e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005da2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005da6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005daa:	e841 2300 	strex	r3, r2, [r1]
 8005dae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005db2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d1d9      	bne.n	8005d6e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	3314      	adds	r3, #20
 8005dc0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dc2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005dc4:	e853 3f00 	ldrex	r3, [r3]
 8005dc8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005dca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005dcc:	f023 0301 	bic.w	r3, r3, #1
 8005dd0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	3314      	adds	r3, #20
 8005dda:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005dde:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005de2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005de4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005de6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005dea:	e841 2300 	strex	r3, r2, [r1]
 8005dee:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005df0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d1e1      	bne.n	8005dba <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	3314      	adds	r3, #20
 8005dfc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dfe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e00:	e853 3f00 	ldrex	r3, [r3]
 8005e04:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005e06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	3314      	adds	r3, #20
 8005e16:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005e1a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005e1c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e1e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005e20:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005e22:	e841 2300 	strex	r3, r2, [r1]
 8005e26:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005e28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d1e3      	bne.n	8005df6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2220      	movs	r2, #32
 8005e32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	330c      	adds	r3, #12
 8005e42:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e46:	e853 3f00 	ldrex	r3, [r3]
 8005e4a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005e4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e4e:	f023 0310 	bic.w	r3, r3, #16
 8005e52:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	330c      	adds	r3, #12
 8005e5c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005e60:	65ba      	str	r2, [r7, #88]	; 0x58
 8005e62:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e64:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005e66:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005e68:	e841 2300 	strex	r3, r2, [r1]
 8005e6c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005e6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d1e3      	bne.n	8005e3c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e78:	4618      	mov	r0, r3
 8005e7a:	f7fc f8ea 	bl	8002052 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005e86:	b29b      	uxth	r3, r3
 8005e88:	1ad3      	subs	r3, r2, r3
 8005e8a:	b29b      	uxth	r3, r3
 8005e8c:	4619      	mov	r1, r3
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	f000 f8c0 	bl	8006014 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005e94:	e099      	b.n	8005fca <HAL_UART_IRQHandler+0x50e>
 8005e96:	bf00      	nop
 8005e98:	080061cf 	.word	0x080061cf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005ea4:	b29b      	uxth	r3, r3
 8005ea6:	1ad3      	subs	r3, r2, r3
 8005ea8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005eb0:	b29b      	uxth	r3, r3
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	f000 808b 	beq.w	8005fce <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005eb8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	f000 8086 	beq.w	8005fce <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	330c      	adds	r3, #12
 8005ec8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ecc:	e853 3f00 	ldrex	r3, [r3]
 8005ed0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005ed2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ed4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005ed8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	330c      	adds	r3, #12
 8005ee2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005ee6:	647a      	str	r2, [r7, #68]	; 0x44
 8005ee8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005eec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005eee:	e841 2300 	strex	r3, r2, [r1]
 8005ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005ef4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d1e3      	bne.n	8005ec2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	3314      	adds	r3, #20
 8005f00:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f04:	e853 3f00 	ldrex	r3, [r3]
 8005f08:	623b      	str	r3, [r7, #32]
   return(result);
 8005f0a:	6a3b      	ldr	r3, [r7, #32]
 8005f0c:	f023 0301 	bic.w	r3, r3, #1
 8005f10:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	3314      	adds	r3, #20
 8005f1a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005f1e:	633a      	str	r2, [r7, #48]	; 0x30
 8005f20:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f22:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005f24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f26:	e841 2300 	strex	r3, r2, [r1]
 8005f2a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d1e3      	bne.n	8005efa <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2220      	movs	r2, #32
 8005f36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	330c      	adds	r3, #12
 8005f46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	e853 3f00 	ldrex	r3, [r3]
 8005f4e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	f023 0310 	bic.w	r3, r3, #16
 8005f56:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	330c      	adds	r3, #12
 8005f60:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005f64:	61fa      	str	r2, [r7, #28]
 8005f66:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f68:	69b9      	ldr	r1, [r7, #24]
 8005f6a:	69fa      	ldr	r2, [r7, #28]
 8005f6c:	e841 2300 	strex	r3, r2, [r1]
 8005f70:	617b      	str	r3, [r7, #20]
   return(result);
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d1e3      	bne.n	8005f40 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005f78:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005f7c:	4619      	mov	r1, r3
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f000 f848 	bl	8006014 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005f84:	e023      	b.n	8005fce <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005f86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d009      	beq.n	8005fa6 <HAL_UART_IRQHandler+0x4ea>
 8005f92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d003      	beq.n	8005fa6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f000 f929 	bl	80061f6 <UART_Transmit_IT>
    return;
 8005fa4:	e014      	b.n	8005fd0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005fa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005faa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d00e      	beq.n	8005fd0 <HAL_UART_IRQHandler+0x514>
 8005fb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d008      	beq.n	8005fd0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f000 f969 	bl	8006296 <UART_EndTransmit_IT>
    return;
 8005fc4:	e004      	b.n	8005fd0 <HAL_UART_IRQHandler+0x514>
    return;
 8005fc6:	bf00      	nop
 8005fc8:	e002      	b.n	8005fd0 <HAL_UART_IRQHandler+0x514>
      return;
 8005fca:	bf00      	nop
 8005fcc:	e000      	b.n	8005fd0 <HAL_UART_IRQHandler+0x514>
      return;
 8005fce:	bf00      	nop
  }
}
 8005fd0:	37e8      	adds	r7, #232	; 0xe8
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}
 8005fd6:	bf00      	nop

08005fd8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b083      	sub	sp, #12
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005fe0:	bf00      	nop
 8005fe2:	370c      	adds	r7, #12
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fea:	4770      	bx	lr

08005fec <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b083      	sub	sp, #12
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005ff4:	bf00      	nop
 8005ff6:	370c      	adds	r7, #12
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffe:	4770      	bx	lr

08006000 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006000:	b480      	push	{r7}
 8006002:	b083      	sub	sp, #12
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006008:	bf00      	nop
 800600a:	370c      	adds	r7, #12
 800600c:	46bd      	mov	sp, r7
 800600e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006012:	4770      	bx	lr

08006014 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006014:	b480      	push	{r7}
 8006016:	b083      	sub	sp, #12
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
 800601c:	460b      	mov	r3, r1
 800601e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006020:	bf00      	nop
 8006022:	370c      	adds	r7, #12
 8006024:	46bd      	mov	sp, r7
 8006026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602a:	4770      	bx	lr

0800602c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b090      	sub	sp, #64	; 0x40
 8006030:	af00      	add	r7, sp, #0
 8006032:	60f8      	str	r0, [r7, #12]
 8006034:	60b9      	str	r1, [r7, #8]
 8006036:	603b      	str	r3, [r7, #0]
 8006038:	4613      	mov	r3, r2
 800603a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800603c:	e050      	b.n	80060e0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800603e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006044:	d04c      	beq.n	80060e0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006046:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006048:	2b00      	cmp	r3, #0
 800604a:	d007      	beq.n	800605c <UART_WaitOnFlagUntilTimeout+0x30>
 800604c:	f7fb fec0 	bl	8001dd0 <HAL_GetTick>
 8006050:	4602      	mov	r2, r0
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	1ad3      	subs	r3, r2, r3
 8006056:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006058:	429a      	cmp	r2, r3
 800605a:	d241      	bcs.n	80060e0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	330c      	adds	r3, #12
 8006062:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006066:	e853 3f00 	ldrex	r3, [r3]
 800606a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800606c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800606e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006072:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	330c      	adds	r3, #12
 800607a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800607c:	637a      	str	r2, [r7, #52]	; 0x34
 800607e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006080:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006082:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006084:	e841 2300 	strex	r3, r2, [r1]
 8006088:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800608a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800608c:	2b00      	cmp	r3, #0
 800608e:	d1e5      	bne.n	800605c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	3314      	adds	r3, #20
 8006096:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	e853 3f00 	ldrex	r3, [r3]
 800609e:	613b      	str	r3, [r7, #16]
   return(result);
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	f023 0301 	bic.w	r3, r3, #1
 80060a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	3314      	adds	r3, #20
 80060ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80060b0:	623a      	str	r2, [r7, #32]
 80060b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060b4:	69f9      	ldr	r1, [r7, #28]
 80060b6:	6a3a      	ldr	r2, [r7, #32]
 80060b8:	e841 2300 	strex	r3, r2, [r1]
 80060bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80060be:	69bb      	ldr	r3, [r7, #24]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d1e5      	bne.n	8006090 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	2220      	movs	r2, #32
 80060c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	2220      	movs	r2, #32
 80060d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	2200      	movs	r2, #0
 80060d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80060dc:	2303      	movs	r3, #3
 80060de:	e00f      	b.n	8006100 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	681a      	ldr	r2, [r3, #0]
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	4013      	ands	r3, r2
 80060ea:	68ba      	ldr	r2, [r7, #8]
 80060ec:	429a      	cmp	r2, r3
 80060ee:	bf0c      	ite	eq
 80060f0:	2301      	moveq	r3, #1
 80060f2:	2300      	movne	r3, #0
 80060f4:	b2db      	uxtb	r3, r3
 80060f6:	461a      	mov	r2, r3
 80060f8:	79fb      	ldrb	r3, [r7, #7]
 80060fa:	429a      	cmp	r2, r3
 80060fc:	d09f      	beq.n	800603e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80060fe:	2300      	movs	r3, #0
}
 8006100:	4618      	mov	r0, r3
 8006102:	3740      	adds	r7, #64	; 0x40
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}

08006108 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006108:	b480      	push	{r7}
 800610a:	b095      	sub	sp, #84	; 0x54
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	330c      	adds	r3, #12
 8006116:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006118:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800611a:	e853 3f00 	ldrex	r3, [r3]
 800611e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006122:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006126:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	330c      	adds	r3, #12
 800612e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006130:	643a      	str	r2, [r7, #64]	; 0x40
 8006132:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006134:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006136:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006138:	e841 2300 	strex	r3, r2, [r1]
 800613c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800613e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006140:	2b00      	cmp	r3, #0
 8006142:	d1e5      	bne.n	8006110 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	3314      	adds	r3, #20
 800614a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800614c:	6a3b      	ldr	r3, [r7, #32]
 800614e:	e853 3f00 	ldrex	r3, [r3]
 8006152:	61fb      	str	r3, [r7, #28]
   return(result);
 8006154:	69fb      	ldr	r3, [r7, #28]
 8006156:	f023 0301 	bic.w	r3, r3, #1
 800615a:	64bb      	str	r3, [r7, #72]	; 0x48
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	3314      	adds	r3, #20
 8006162:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006164:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006166:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006168:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800616a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800616c:	e841 2300 	strex	r3, r2, [r1]
 8006170:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006174:	2b00      	cmp	r3, #0
 8006176:	d1e5      	bne.n	8006144 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800617c:	2b01      	cmp	r3, #1
 800617e:	d119      	bne.n	80061b4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	330c      	adds	r3, #12
 8006186:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	e853 3f00 	ldrex	r3, [r3]
 800618e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	f023 0310 	bic.w	r3, r3, #16
 8006196:	647b      	str	r3, [r7, #68]	; 0x44
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	330c      	adds	r3, #12
 800619e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80061a0:	61ba      	str	r2, [r7, #24]
 80061a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061a4:	6979      	ldr	r1, [r7, #20]
 80061a6:	69ba      	ldr	r2, [r7, #24]
 80061a8:	e841 2300 	strex	r3, r2, [r1]
 80061ac:	613b      	str	r3, [r7, #16]
   return(result);
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d1e5      	bne.n	8006180 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2220      	movs	r2, #32
 80061b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2200      	movs	r2, #0
 80061c0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80061c2:	bf00      	nop
 80061c4:	3754      	adds	r7, #84	; 0x54
 80061c6:	46bd      	mov	sp, r7
 80061c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061cc:	4770      	bx	lr

080061ce <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80061ce:	b580      	push	{r7, lr}
 80061d0:	b084      	sub	sp, #16
 80061d2:	af00      	add	r7, sp, #0
 80061d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061da:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	2200      	movs	r2, #0
 80061e0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2200      	movs	r2, #0
 80061e6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80061e8:	68f8      	ldr	r0, [r7, #12]
 80061ea:	f7ff ff09 	bl	8006000 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80061ee:	bf00      	nop
 80061f0:	3710      	adds	r7, #16
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}

080061f6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80061f6:	b480      	push	{r7}
 80061f8:	b085      	sub	sp, #20
 80061fa:	af00      	add	r7, sp, #0
 80061fc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006204:	b2db      	uxtb	r3, r3
 8006206:	2b21      	cmp	r3, #33	; 0x21
 8006208:	d13e      	bne.n	8006288 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	689b      	ldr	r3, [r3, #8]
 800620e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006212:	d114      	bne.n	800623e <UART_Transmit_IT+0x48>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	691b      	ldr	r3, [r3, #16]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d110      	bne.n	800623e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6a1b      	ldr	r3, [r3, #32]
 8006220:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	881b      	ldrh	r3, [r3, #0]
 8006226:	461a      	mov	r2, r3
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006230:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6a1b      	ldr	r3, [r3, #32]
 8006236:	1c9a      	adds	r2, r3, #2
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	621a      	str	r2, [r3, #32]
 800623c:	e008      	b.n	8006250 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6a1b      	ldr	r3, [r3, #32]
 8006242:	1c59      	adds	r1, r3, #1
 8006244:	687a      	ldr	r2, [r7, #4]
 8006246:	6211      	str	r1, [r2, #32]
 8006248:	781a      	ldrb	r2, [r3, #0]
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006254:	b29b      	uxth	r3, r3
 8006256:	3b01      	subs	r3, #1
 8006258:	b29b      	uxth	r3, r3
 800625a:	687a      	ldr	r2, [r7, #4]
 800625c:	4619      	mov	r1, r3
 800625e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006260:	2b00      	cmp	r3, #0
 8006262:	d10f      	bne.n	8006284 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	68da      	ldr	r2, [r3, #12]
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006272:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	68da      	ldr	r2, [r3, #12]
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006282:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006284:	2300      	movs	r3, #0
 8006286:	e000      	b.n	800628a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006288:	2302      	movs	r3, #2
  }
}
 800628a:	4618      	mov	r0, r3
 800628c:	3714      	adds	r7, #20
 800628e:	46bd      	mov	sp, r7
 8006290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006294:	4770      	bx	lr

08006296 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006296:	b580      	push	{r7, lr}
 8006298:	b082      	sub	sp, #8
 800629a:	af00      	add	r7, sp, #0
 800629c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	68da      	ldr	r2, [r3, #12]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062ac:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2220      	movs	r2, #32
 80062b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f7ff fe8e 	bl	8005fd8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80062bc:	2300      	movs	r3, #0
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3708      	adds	r7, #8
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}

080062c6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80062c6:	b580      	push	{r7, lr}
 80062c8:	b08c      	sub	sp, #48	; 0x30
 80062ca:	af00      	add	r7, sp, #0
 80062cc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80062d4:	b2db      	uxtb	r3, r3
 80062d6:	2b22      	cmp	r3, #34	; 0x22
 80062d8:	f040 80ab 	bne.w	8006432 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	689b      	ldr	r3, [r3, #8]
 80062e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062e4:	d117      	bne.n	8006316 <UART_Receive_IT+0x50>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	691b      	ldr	r3, [r3, #16]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d113      	bne.n	8006316 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80062ee:	2300      	movs	r3, #0
 80062f0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062f6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	685b      	ldr	r3, [r3, #4]
 80062fe:	b29b      	uxth	r3, r3
 8006300:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006304:	b29a      	uxth	r2, r3
 8006306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006308:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800630e:	1c9a      	adds	r2, r3, #2
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	629a      	str	r2, [r3, #40]	; 0x28
 8006314:	e026      	b.n	8006364 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800631a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800631c:	2300      	movs	r3, #0
 800631e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	689b      	ldr	r3, [r3, #8]
 8006324:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006328:	d007      	beq.n	800633a <UART_Receive_IT+0x74>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	689b      	ldr	r3, [r3, #8]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d10a      	bne.n	8006348 <UART_Receive_IT+0x82>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	691b      	ldr	r3, [r3, #16]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d106      	bne.n	8006348 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	685b      	ldr	r3, [r3, #4]
 8006340:	b2da      	uxtb	r2, r3
 8006342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006344:	701a      	strb	r2, [r3, #0]
 8006346:	e008      	b.n	800635a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	b2db      	uxtb	r3, r3
 8006350:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006354:	b2da      	uxtb	r2, r3
 8006356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006358:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800635e:	1c5a      	adds	r2, r3, #1
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006368:	b29b      	uxth	r3, r3
 800636a:	3b01      	subs	r3, #1
 800636c:	b29b      	uxth	r3, r3
 800636e:	687a      	ldr	r2, [r7, #4]
 8006370:	4619      	mov	r1, r3
 8006372:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006374:	2b00      	cmp	r3, #0
 8006376:	d15a      	bne.n	800642e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	68da      	ldr	r2, [r3, #12]
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f022 0220 	bic.w	r2, r2, #32
 8006386:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	68da      	ldr	r2, [r3, #12]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006396:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	695a      	ldr	r2, [r3, #20]
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f022 0201 	bic.w	r2, r2, #1
 80063a6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2220      	movs	r2, #32
 80063ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063b4:	2b01      	cmp	r3, #1
 80063b6:	d135      	bne.n	8006424 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2200      	movs	r2, #0
 80063bc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	330c      	adds	r3, #12
 80063c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	e853 3f00 	ldrex	r3, [r3]
 80063cc:	613b      	str	r3, [r7, #16]
   return(result);
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	f023 0310 	bic.w	r3, r3, #16
 80063d4:	627b      	str	r3, [r7, #36]	; 0x24
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	330c      	adds	r3, #12
 80063dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063de:	623a      	str	r2, [r7, #32]
 80063e0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063e2:	69f9      	ldr	r1, [r7, #28]
 80063e4:	6a3a      	ldr	r2, [r7, #32]
 80063e6:	e841 2300 	strex	r3, r2, [r1]
 80063ea:	61bb      	str	r3, [r7, #24]
   return(result);
 80063ec:	69bb      	ldr	r3, [r7, #24]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d1e5      	bne.n	80063be <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f003 0310 	and.w	r3, r3, #16
 80063fc:	2b10      	cmp	r3, #16
 80063fe:	d10a      	bne.n	8006416 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006400:	2300      	movs	r3, #0
 8006402:	60fb      	str	r3, [r7, #12]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	60fb      	str	r3, [r7, #12]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	60fb      	str	r3, [r7, #12]
 8006414:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800641a:	4619      	mov	r1, r3
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	f7ff fdf9 	bl	8006014 <HAL_UARTEx_RxEventCallback>
 8006422:	e002      	b.n	800642a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f7ff fde1 	bl	8005fec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800642a:	2300      	movs	r3, #0
 800642c:	e002      	b.n	8006434 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800642e:	2300      	movs	r3, #0
 8006430:	e000      	b.n	8006434 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006432:	2302      	movs	r3, #2
  }
}
 8006434:	4618      	mov	r0, r3
 8006436:	3730      	adds	r7, #48	; 0x30
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}

0800643c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800643c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006440:	b0c0      	sub	sp, #256	; 0x100
 8006442:	af00      	add	r7, sp, #0
 8006444:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	691b      	ldr	r3, [r3, #16]
 8006450:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006458:	68d9      	ldr	r1, [r3, #12]
 800645a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800645e:	681a      	ldr	r2, [r3, #0]
 8006460:	ea40 0301 	orr.w	r3, r0, r1
 8006464:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006466:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800646a:	689a      	ldr	r2, [r3, #8]
 800646c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006470:	691b      	ldr	r3, [r3, #16]
 8006472:	431a      	orrs	r2, r3
 8006474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006478:	695b      	ldr	r3, [r3, #20]
 800647a:	431a      	orrs	r2, r3
 800647c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006480:	69db      	ldr	r3, [r3, #28]
 8006482:	4313      	orrs	r3, r2
 8006484:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006488:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	68db      	ldr	r3, [r3, #12]
 8006490:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006494:	f021 010c 	bic.w	r1, r1, #12
 8006498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800649c:	681a      	ldr	r2, [r3, #0]
 800649e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80064a2:	430b      	orrs	r3, r1
 80064a4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80064a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	695b      	ldr	r3, [r3, #20]
 80064ae:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80064b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064b6:	6999      	ldr	r1, [r3, #24]
 80064b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064bc:	681a      	ldr	r2, [r3, #0]
 80064be:	ea40 0301 	orr.w	r3, r0, r1
 80064c2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80064c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064c8:	681a      	ldr	r2, [r3, #0]
 80064ca:	4b8f      	ldr	r3, [pc, #572]	; (8006708 <UART_SetConfig+0x2cc>)
 80064cc:	429a      	cmp	r2, r3
 80064ce:	d005      	beq.n	80064dc <UART_SetConfig+0xa0>
 80064d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064d4:	681a      	ldr	r2, [r3, #0]
 80064d6:	4b8d      	ldr	r3, [pc, #564]	; (800670c <UART_SetConfig+0x2d0>)
 80064d8:	429a      	cmp	r2, r3
 80064da:	d104      	bne.n	80064e6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80064dc:	f7ff f9fa 	bl	80058d4 <HAL_RCC_GetPCLK2Freq>
 80064e0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80064e4:	e003      	b.n	80064ee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80064e6:	f7ff f9e1 	bl	80058ac <HAL_RCC_GetPCLK1Freq>
 80064ea:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80064ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064f2:	69db      	ldr	r3, [r3, #28]
 80064f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064f8:	f040 810c 	bne.w	8006714 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80064fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006500:	2200      	movs	r2, #0
 8006502:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006506:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800650a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800650e:	4622      	mov	r2, r4
 8006510:	462b      	mov	r3, r5
 8006512:	1891      	adds	r1, r2, r2
 8006514:	65b9      	str	r1, [r7, #88]	; 0x58
 8006516:	415b      	adcs	r3, r3
 8006518:	65fb      	str	r3, [r7, #92]	; 0x5c
 800651a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800651e:	4621      	mov	r1, r4
 8006520:	eb12 0801 	adds.w	r8, r2, r1
 8006524:	4629      	mov	r1, r5
 8006526:	eb43 0901 	adc.w	r9, r3, r1
 800652a:	f04f 0200 	mov.w	r2, #0
 800652e:	f04f 0300 	mov.w	r3, #0
 8006532:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006536:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800653a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800653e:	4690      	mov	r8, r2
 8006540:	4699      	mov	r9, r3
 8006542:	4623      	mov	r3, r4
 8006544:	eb18 0303 	adds.w	r3, r8, r3
 8006548:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800654c:	462b      	mov	r3, r5
 800654e:	eb49 0303 	adc.w	r3, r9, r3
 8006552:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006556:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800655a:	685b      	ldr	r3, [r3, #4]
 800655c:	2200      	movs	r2, #0
 800655e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006562:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006566:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800656a:	460b      	mov	r3, r1
 800656c:	18db      	adds	r3, r3, r3
 800656e:	653b      	str	r3, [r7, #80]	; 0x50
 8006570:	4613      	mov	r3, r2
 8006572:	eb42 0303 	adc.w	r3, r2, r3
 8006576:	657b      	str	r3, [r7, #84]	; 0x54
 8006578:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800657c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006580:	f7fa fb92 	bl	8000ca8 <__aeabi_uldivmod>
 8006584:	4602      	mov	r2, r0
 8006586:	460b      	mov	r3, r1
 8006588:	4b61      	ldr	r3, [pc, #388]	; (8006710 <UART_SetConfig+0x2d4>)
 800658a:	fba3 2302 	umull	r2, r3, r3, r2
 800658e:	095b      	lsrs	r3, r3, #5
 8006590:	011c      	lsls	r4, r3, #4
 8006592:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006596:	2200      	movs	r2, #0
 8006598:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800659c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80065a0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80065a4:	4642      	mov	r2, r8
 80065a6:	464b      	mov	r3, r9
 80065a8:	1891      	adds	r1, r2, r2
 80065aa:	64b9      	str	r1, [r7, #72]	; 0x48
 80065ac:	415b      	adcs	r3, r3
 80065ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80065b0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80065b4:	4641      	mov	r1, r8
 80065b6:	eb12 0a01 	adds.w	sl, r2, r1
 80065ba:	4649      	mov	r1, r9
 80065bc:	eb43 0b01 	adc.w	fp, r3, r1
 80065c0:	f04f 0200 	mov.w	r2, #0
 80065c4:	f04f 0300 	mov.w	r3, #0
 80065c8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80065cc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80065d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80065d4:	4692      	mov	sl, r2
 80065d6:	469b      	mov	fp, r3
 80065d8:	4643      	mov	r3, r8
 80065da:	eb1a 0303 	adds.w	r3, sl, r3
 80065de:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80065e2:	464b      	mov	r3, r9
 80065e4:	eb4b 0303 	adc.w	r3, fp, r3
 80065e8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80065ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	2200      	movs	r2, #0
 80065f4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80065f8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80065fc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006600:	460b      	mov	r3, r1
 8006602:	18db      	adds	r3, r3, r3
 8006604:	643b      	str	r3, [r7, #64]	; 0x40
 8006606:	4613      	mov	r3, r2
 8006608:	eb42 0303 	adc.w	r3, r2, r3
 800660c:	647b      	str	r3, [r7, #68]	; 0x44
 800660e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006612:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006616:	f7fa fb47 	bl	8000ca8 <__aeabi_uldivmod>
 800661a:	4602      	mov	r2, r0
 800661c:	460b      	mov	r3, r1
 800661e:	4611      	mov	r1, r2
 8006620:	4b3b      	ldr	r3, [pc, #236]	; (8006710 <UART_SetConfig+0x2d4>)
 8006622:	fba3 2301 	umull	r2, r3, r3, r1
 8006626:	095b      	lsrs	r3, r3, #5
 8006628:	2264      	movs	r2, #100	; 0x64
 800662a:	fb02 f303 	mul.w	r3, r2, r3
 800662e:	1acb      	subs	r3, r1, r3
 8006630:	00db      	lsls	r3, r3, #3
 8006632:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006636:	4b36      	ldr	r3, [pc, #216]	; (8006710 <UART_SetConfig+0x2d4>)
 8006638:	fba3 2302 	umull	r2, r3, r3, r2
 800663c:	095b      	lsrs	r3, r3, #5
 800663e:	005b      	lsls	r3, r3, #1
 8006640:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006644:	441c      	add	r4, r3
 8006646:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800664a:	2200      	movs	r2, #0
 800664c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006650:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006654:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006658:	4642      	mov	r2, r8
 800665a:	464b      	mov	r3, r9
 800665c:	1891      	adds	r1, r2, r2
 800665e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006660:	415b      	adcs	r3, r3
 8006662:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006664:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006668:	4641      	mov	r1, r8
 800666a:	1851      	adds	r1, r2, r1
 800666c:	6339      	str	r1, [r7, #48]	; 0x30
 800666e:	4649      	mov	r1, r9
 8006670:	414b      	adcs	r3, r1
 8006672:	637b      	str	r3, [r7, #52]	; 0x34
 8006674:	f04f 0200 	mov.w	r2, #0
 8006678:	f04f 0300 	mov.w	r3, #0
 800667c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006680:	4659      	mov	r1, fp
 8006682:	00cb      	lsls	r3, r1, #3
 8006684:	4651      	mov	r1, sl
 8006686:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800668a:	4651      	mov	r1, sl
 800668c:	00ca      	lsls	r2, r1, #3
 800668e:	4610      	mov	r0, r2
 8006690:	4619      	mov	r1, r3
 8006692:	4603      	mov	r3, r0
 8006694:	4642      	mov	r2, r8
 8006696:	189b      	adds	r3, r3, r2
 8006698:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800669c:	464b      	mov	r3, r9
 800669e:	460a      	mov	r2, r1
 80066a0:	eb42 0303 	adc.w	r3, r2, r3
 80066a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80066a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	2200      	movs	r2, #0
 80066b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80066b4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80066b8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80066bc:	460b      	mov	r3, r1
 80066be:	18db      	adds	r3, r3, r3
 80066c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80066c2:	4613      	mov	r3, r2
 80066c4:	eb42 0303 	adc.w	r3, r2, r3
 80066c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80066ce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80066d2:	f7fa fae9 	bl	8000ca8 <__aeabi_uldivmod>
 80066d6:	4602      	mov	r2, r0
 80066d8:	460b      	mov	r3, r1
 80066da:	4b0d      	ldr	r3, [pc, #52]	; (8006710 <UART_SetConfig+0x2d4>)
 80066dc:	fba3 1302 	umull	r1, r3, r3, r2
 80066e0:	095b      	lsrs	r3, r3, #5
 80066e2:	2164      	movs	r1, #100	; 0x64
 80066e4:	fb01 f303 	mul.w	r3, r1, r3
 80066e8:	1ad3      	subs	r3, r2, r3
 80066ea:	00db      	lsls	r3, r3, #3
 80066ec:	3332      	adds	r3, #50	; 0x32
 80066ee:	4a08      	ldr	r2, [pc, #32]	; (8006710 <UART_SetConfig+0x2d4>)
 80066f0:	fba2 2303 	umull	r2, r3, r2, r3
 80066f4:	095b      	lsrs	r3, r3, #5
 80066f6:	f003 0207 	and.w	r2, r3, #7
 80066fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4422      	add	r2, r4
 8006702:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006704:	e105      	b.n	8006912 <UART_SetConfig+0x4d6>
 8006706:	bf00      	nop
 8006708:	40011000 	.word	0x40011000
 800670c:	40011400 	.word	0x40011400
 8006710:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006714:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006718:	2200      	movs	r2, #0
 800671a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800671e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006722:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006726:	4642      	mov	r2, r8
 8006728:	464b      	mov	r3, r9
 800672a:	1891      	adds	r1, r2, r2
 800672c:	6239      	str	r1, [r7, #32]
 800672e:	415b      	adcs	r3, r3
 8006730:	627b      	str	r3, [r7, #36]	; 0x24
 8006732:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006736:	4641      	mov	r1, r8
 8006738:	1854      	adds	r4, r2, r1
 800673a:	4649      	mov	r1, r9
 800673c:	eb43 0501 	adc.w	r5, r3, r1
 8006740:	f04f 0200 	mov.w	r2, #0
 8006744:	f04f 0300 	mov.w	r3, #0
 8006748:	00eb      	lsls	r3, r5, #3
 800674a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800674e:	00e2      	lsls	r2, r4, #3
 8006750:	4614      	mov	r4, r2
 8006752:	461d      	mov	r5, r3
 8006754:	4643      	mov	r3, r8
 8006756:	18e3      	adds	r3, r4, r3
 8006758:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800675c:	464b      	mov	r3, r9
 800675e:	eb45 0303 	adc.w	r3, r5, r3
 8006762:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006766:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	2200      	movs	r2, #0
 800676e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006772:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006776:	f04f 0200 	mov.w	r2, #0
 800677a:	f04f 0300 	mov.w	r3, #0
 800677e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006782:	4629      	mov	r1, r5
 8006784:	008b      	lsls	r3, r1, #2
 8006786:	4621      	mov	r1, r4
 8006788:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800678c:	4621      	mov	r1, r4
 800678e:	008a      	lsls	r2, r1, #2
 8006790:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006794:	f7fa fa88 	bl	8000ca8 <__aeabi_uldivmod>
 8006798:	4602      	mov	r2, r0
 800679a:	460b      	mov	r3, r1
 800679c:	4b60      	ldr	r3, [pc, #384]	; (8006920 <UART_SetConfig+0x4e4>)
 800679e:	fba3 2302 	umull	r2, r3, r3, r2
 80067a2:	095b      	lsrs	r3, r3, #5
 80067a4:	011c      	lsls	r4, r3, #4
 80067a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067aa:	2200      	movs	r2, #0
 80067ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80067b0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80067b4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80067b8:	4642      	mov	r2, r8
 80067ba:	464b      	mov	r3, r9
 80067bc:	1891      	adds	r1, r2, r2
 80067be:	61b9      	str	r1, [r7, #24]
 80067c0:	415b      	adcs	r3, r3
 80067c2:	61fb      	str	r3, [r7, #28]
 80067c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80067c8:	4641      	mov	r1, r8
 80067ca:	1851      	adds	r1, r2, r1
 80067cc:	6139      	str	r1, [r7, #16]
 80067ce:	4649      	mov	r1, r9
 80067d0:	414b      	adcs	r3, r1
 80067d2:	617b      	str	r3, [r7, #20]
 80067d4:	f04f 0200 	mov.w	r2, #0
 80067d8:	f04f 0300 	mov.w	r3, #0
 80067dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80067e0:	4659      	mov	r1, fp
 80067e2:	00cb      	lsls	r3, r1, #3
 80067e4:	4651      	mov	r1, sl
 80067e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80067ea:	4651      	mov	r1, sl
 80067ec:	00ca      	lsls	r2, r1, #3
 80067ee:	4610      	mov	r0, r2
 80067f0:	4619      	mov	r1, r3
 80067f2:	4603      	mov	r3, r0
 80067f4:	4642      	mov	r2, r8
 80067f6:	189b      	adds	r3, r3, r2
 80067f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80067fc:	464b      	mov	r3, r9
 80067fe:	460a      	mov	r2, r1
 8006800:	eb42 0303 	adc.w	r3, r2, r3
 8006804:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800680c:	685b      	ldr	r3, [r3, #4]
 800680e:	2200      	movs	r2, #0
 8006810:	67bb      	str	r3, [r7, #120]	; 0x78
 8006812:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006814:	f04f 0200 	mov.w	r2, #0
 8006818:	f04f 0300 	mov.w	r3, #0
 800681c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006820:	4649      	mov	r1, r9
 8006822:	008b      	lsls	r3, r1, #2
 8006824:	4641      	mov	r1, r8
 8006826:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800682a:	4641      	mov	r1, r8
 800682c:	008a      	lsls	r2, r1, #2
 800682e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006832:	f7fa fa39 	bl	8000ca8 <__aeabi_uldivmod>
 8006836:	4602      	mov	r2, r0
 8006838:	460b      	mov	r3, r1
 800683a:	4b39      	ldr	r3, [pc, #228]	; (8006920 <UART_SetConfig+0x4e4>)
 800683c:	fba3 1302 	umull	r1, r3, r3, r2
 8006840:	095b      	lsrs	r3, r3, #5
 8006842:	2164      	movs	r1, #100	; 0x64
 8006844:	fb01 f303 	mul.w	r3, r1, r3
 8006848:	1ad3      	subs	r3, r2, r3
 800684a:	011b      	lsls	r3, r3, #4
 800684c:	3332      	adds	r3, #50	; 0x32
 800684e:	4a34      	ldr	r2, [pc, #208]	; (8006920 <UART_SetConfig+0x4e4>)
 8006850:	fba2 2303 	umull	r2, r3, r2, r3
 8006854:	095b      	lsrs	r3, r3, #5
 8006856:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800685a:	441c      	add	r4, r3
 800685c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006860:	2200      	movs	r2, #0
 8006862:	673b      	str	r3, [r7, #112]	; 0x70
 8006864:	677a      	str	r2, [r7, #116]	; 0x74
 8006866:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800686a:	4642      	mov	r2, r8
 800686c:	464b      	mov	r3, r9
 800686e:	1891      	adds	r1, r2, r2
 8006870:	60b9      	str	r1, [r7, #8]
 8006872:	415b      	adcs	r3, r3
 8006874:	60fb      	str	r3, [r7, #12]
 8006876:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800687a:	4641      	mov	r1, r8
 800687c:	1851      	adds	r1, r2, r1
 800687e:	6039      	str	r1, [r7, #0]
 8006880:	4649      	mov	r1, r9
 8006882:	414b      	adcs	r3, r1
 8006884:	607b      	str	r3, [r7, #4]
 8006886:	f04f 0200 	mov.w	r2, #0
 800688a:	f04f 0300 	mov.w	r3, #0
 800688e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006892:	4659      	mov	r1, fp
 8006894:	00cb      	lsls	r3, r1, #3
 8006896:	4651      	mov	r1, sl
 8006898:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800689c:	4651      	mov	r1, sl
 800689e:	00ca      	lsls	r2, r1, #3
 80068a0:	4610      	mov	r0, r2
 80068a2:	4619      	mov	r1, r3
 80068a4:	4603      	mov	r3, r0
 80068a6:	4642      	mov	r2, r8
 80068a8:	189b      	adds	r3, r3, r2
 80068aa:	66bb      	str	r3, [r7, #104]	; 0x68
 80068ac:	464b      	mov	r3, r9
 80068ae:	460a      	mov	r2, r1
 80068b0:	eb42 0303 	adc.w	r3, r2, r3
 80068b4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80068b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068ba:	685b      	ldr	r3, [r3, #4]
 80068bc:	2200      	movs	r2, #0
 80068be:	663b      	str	r3, [r7, #96]	; 0x60
 80068c0:	667a      	str	r2, [r7, #100]	; 0x64
 80068c2:	f04f 0200 	mov.w	r2, #0
 80068c6:	f04f 0300 	mov.w	r3, #0
 80068ca:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80068ce:	4649      	mov	r1, r9
 80068d0:	008b      	lsls	r3, r1, #2
 80068d2:	4641      	mov	r1, r8
 80068d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80068d8:	4641      	mov	r1, r8
 80068da:	008a      	lsls	r2, r1, #2
 80068dc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80068e0:	f7fa f9e2 	bl	8000ca8 <__aeabi_uldivmod>
 80068e4:	4602      	mov	r2, r0
 80068e6:	460b      	mov	r3, r1
 80068e8:	4b0d      	ldr	r3, [pc, #52]	; (8006920 <UART_SetConfig+0x4e4>)
 80068ea:	fba3 1302 	umull	r1, r3, r3, r2
 80068ee:	095b      	lsrs	r3, r3, #5
 80068f0:	2164      	movs	r1, #100	; 0x64
 80068f2:	fb01 f303 	mul.w	r3, r1, r3
 80068f6:	1ad3      	subs	r3, r2, r3
 80068f8:	011b      	lsls	r3, r3, #4
 80068fa:	3332      	adds	r3, #50	; 0x32
 80068fc:	4a08      	ldr	r2, [pc, #32]	; (8006920 <UART_SetConfig+0x4e4>)
 80068fe:	fba2 2303 	umull	r2, r3, r2, r3
 8006902:	095b      	lsrs	r3, r3, #5
 8006904:	f003 020f 	and.w	r2, r3, #15
 8006908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4422      	add	r2, r4
 8006910:	609a      	str	r2, [r3, #8]
}
 8006912:	bf00      	nop
 8006914:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006918:	46bd      	mov	sp, r7
 800691a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800691e:	bf00      	nop
 8006920:	51eb851f 	.word	0x51eb851f

08006924 <__errno>:
 8006924:	4b01      	ldr	r3, [pc, #4]	; (800692c <__errno+0x8>)
 8006926:	6818      	ldr	r0, [r3, #0]
 8006928:	4770      	bx	lr
 800692a:	bf00      	nop
 800692c:	200001d4 	.word	0x200001d4

08006930 <__libc_init_array>:
 8006930:	b570      	push	{r4, r5, r6, lr}
 8006932:	4d0d      	ldr	r5, [pc, #52]	; (8006968 <__libc_init_array+0x38>)
 8006934:	4c0d      	ldr	r4, [pc, #52]	; (800696c <__libc_init_array+0x3c>)
 8006936:	1b64      	subs	r4, r4, r5
 8006938:	10a4      	asrs	r4, r4, #2
 800693a:	2600      	movs	r6, #0
 800693c:	42a6      	cmp	r6, r4
 800693e:	d109      	bne.n	8006954 <__libc_init_array+0x24>
 8006940:	4d0b      	ldr	r5, [pc, #44]	; (8006970 <__libc_init_array+0x40>)
 8006942:	4c0c      	ldr	r4, [pc, #48]	; (8006974 <__libc_init_array+0x44>)
 8006944:	f004 fca6 	bl	800b294 <_init>
 8006948:	1b64      	subs	r4, r4, r5
 800694a:	10a4      	asrs	r4, r4, #2
 800694c:	2600      	movs	r6, #0
 800694e:	42a6      	cmp	r6, r4
 8006950:	d105      	bne.n	800695e <__libc_init_array+0x2e>
 8006952:	bd70      	pop	{r4, r5, r6, pc}
 8006954:	f855 3b04 	ldr.w	r3, [r5], #4
 8006958:	4798      	blx	r3
 800695a:	3601      	adds	r6, #1
 800695c:	e7ee      	b.n	800693c <__libc_init_array+0xc>
 800695e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006962:	4798      	blx	r3
 8006964:	3601      	adds	r6, #1
 8006966:	e7f2      	b.n	800694e <__libc_init_array+0x1e>
 8006968:	0800b79c 	.word	0x0800b79c
 800696c:	0800b79c 	.word	0x0800b79c
 8006970:	0800b79c 	.word	0x0800b79c
 8006974:	0800b7a0 	.word	0x0800b7a0

08006978 <memcpy>:
 8006978:	440a      	add	r2, r1
 800697a:	4291      	cmp	r1, r2
 800697c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006980:	d100      	bne.n	8006984 <memcpy+0xc>
 8006982:	4770      	bx	lr
 8006984:	b510      	push	{r4, lr}
 8006986:	f811 4b01 	ldrb.w	r4, [r1], #1
 800698a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800698e:	4291      	cmp	r1, r2
 8006990:	d1f9      	bne.n	8006986 <memcpy+0xe>
 8006992:	bd10      	pop	{r4, pc}

08006994 <memset>:
 8006994:	4402      	add	r2, r0
 8006996:	4603      	mov	r3, r0
 8006998:	4293      	cmp	r3, r2
 800699a:	d100      	bne.n	800699e <memset+0xa>
 800699c:	4770      	bx	lr
 800699e:	f803 1b01 	strb.w	r1, [r3], #1
 80069a2:	e7f9      	b.n	8006998 <memset+0x4>

080069a4 <__cvt>:
 80069a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80069a8:	ec55 4b10 	vmov	r4, r5, d0
 80069ac:	2d00      	cmp	r5, #0
 80069ae:	460e      	mov	r6, r1
 80069b0:	4619      	mov	r1, r3
 80069b2:	462b      	mov	r3, r5
 80069b4:	bfbb      	ittet	lt
 80069b6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80069ba:	461d      	movlt	r5, r3
 80069bc:	2300      	movge	r3, #0
 80069be:	232d      	movlt	r3, #45	; 0x2d
 80069c0:	700b      	strb	r3, [r1, #0]
 80069c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80069c4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80069c8:	4691      	mov	r9, r2
 80069ca:	f023 0820 	bic.w	r8, r3, #32
 80069ce:	bfbc      	itt	lt
 80069d0:	4622      	movlt	r2, r4
 80069d2:	4614      	movlt	r4, r2
 80069d4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80069d8:	d005      	beq.n	80069e6 <__cvt+0x42>
 80069da:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80069de:	d100      	bne.n	80069e2 <__cvt+0x3e>
 80069e0:	3601      	adds	r6, #1
 80069e2:	2102      	movs	r1, #2
 80069e4:	e000      	b.n	80069e8 <__cvt+0x44>
 80069e6:	2103      	movs	r1, #3
 80069e8:	ab03      	add	r3, sp, #12
 80069ea:	9301      	str	r3, [sp, #4]
 80069ec:	ab02      	add	r3, sp, #8
 80069ee:	9300      	str	r3, [sp, #0]
 80069f0:	ec45 4b10 	vmov	d0, r4, r5
 80069f4:	4653      	mov	r3, sl
 80069f6:	4632      	mov	r2, r6
 80069f8:	f001 fe86 	bl	8008708 <_dtoa_r>
 80069fc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006a00:	4607      	mov	r7, r0
 8006a02:	d102      	bne.n	8006a0a <__cvt+0x66>
 8006a04:	f019 0f01 	tst.w	r9, #1
 8006a08:	d022      	beq.n	8006a50 <__cvt+0xac>
 8006a0a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006a0e:	eb07 0906 	add.w	r9, r7, r6
 8006a12:	d110      	bne.n	8006a36 <__cvt+0x92>
 8006a14:	783b      	ldrb	r3, [r7, #0]
 8006a16:	2b30      	cmp	r3, #48	; 0x30
 8006a18:	d10a      	bne.n	8006a30 <__cvt+0x8c>
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	4620      	mov	r0, r4
 8006a20:	4629      	mov	r1, r5
 8006a22:	f7fa f861 	bl	8000ae8 <__aeabi_dcmpeq>
 8006a26:	b918      	cbnz	r0, 8006a30 <__cvt+0x8c>
 8006a28:	f1c6 0601 	rsb	r6, r6, #1
 8006a2c:	f8ca 6000 	str.w	r6, [sl]
 8006a30:	f8da 3000 	ldr.w	r3, [sl]
 8006a34:	4499      	add	r9, r3
 8006a36:	2200      	movs	r2, #0
 8006a38:	2300      	movs	r3, #0
 8006a3a:	4620      	mov	r0, r4
 8006a3c:	4629      	mov	r1, r5
 8006a3e:	f7fa f853 	bl	8000ae8 <__aeabi_dcmpeq>
 8006a42:	b108      	cbz	r0, 8006a48 <__cvt+0xa4>
 8006a44:	f8cd 900c 	str.w	r9, [sp, #12]
 8006a48:	2230      	movs	r2, #48	; 0x30
 8006a4a:	9b03      	ldr	r3, [sp, #12]
 8006a4c:	454b      	cmp	r3, r9
 8006a4e:	d307      	bcc.n	8006a60 <__cvt+0xbc>
 8006a50:	9b03      	ldr	r3, [sp, #12]
 8006a52:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006a54:	1bdb      	subs	r3, r3, r7
 8006a56:	4638      	mov	r0, r7
 8006a58:	6013      	str	r3, [r2, #0]
 8006a5a:	b004      	add	sp, #16
 8006a5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a60:	1c59      	adds	r1, r3, #1
 8006a62:	9103      	str	r1, [sp, #12]
 8006a64:	701a      	strb	r2, [r3, #0]
 8006a66:	e7f0      	b.n	8006a4a <__cvt+0xa6>

08006a68 <__exponent>:
 8006a68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	2900      	cmp	r1, #0
 8006a6e:	bfb8      	it	lt
 8006a70:	4249      	neglt	r1, r1
 8006a72:	f803 2b02 	strb.w	r2, [r3], #2
 8006a76:	bfb4      	ite	lt
 8006a78:	222d      	movlt	r2, #45	; 0x2d
 8006a7a:	222b      	movge	r2, #43	; 0x2b
 8006a7c:	2909      	cmp	r1, #9
 8006a7e:	7042      	strb	r2, [r0, #1]
 8006a80:	dd2a      	ble.n	8006ad8 <__exponent+0x70>
 8006a82:	f10d 0407 	add.w	r4, sp, #7
 8006a86:	46a4      	mov	ip, r4
 8006a88:	270a      	movs	r7, #10
 8006a8a:	46a6      	mov	lr, r4
 8006a8c:	460a      	mov	r2, r1
 8006a8e:	fb91 f6f7 	sdiv	r6, r1, r7
 8006a92:	fb07 1516 	mls	r5, r7, r6, r1
 8006a96:	3530      	adds	r5, #48	; 0x30
 8006a98:	2a63      	cmp	r2, #99	; 0x63
 8006a9a:	f104 34ff 	add.w	r4, r4, #4294967295
 8006a9e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006aa2:	4631      	mov	r1, r6
 8006aa4:	dcf1      	bgt.n	8006a8a <__exponent+0x22>
 8006aa6:	3130      	adds	r1, #48	; 0x30
 8006aa8:	f1ae 0502 	sub.w	r5, lr, #2
 8006aac:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006ab0:	1c44      	adds	r4, r0, #1
 8006ab2:	4629      	mov	r1, r5
 8006ab4:	4561      	cmp	r1, ip
 8006ab6:	d30a      	bcc.n	8006ace <__exponent+0x66>
 8006ab8:	f10d 0209 	add.w	r2, sp, #9
 8006abc:	eba2 020e 	sub.w	r2, r2, lr
 8006ac0:	4565      	cmp	r5, ip
 8006ac2:	bf88      	it	hi
 8006ac4:	2200      	movhi	r2, #0
 8006ac6:	4413      	add	r3, r2
 8006ac8:	1a18      	subs	r0, r3, r0
 8006aca:	b003      	add	sp, #12
 8006acc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ace:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006ad2:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006ad6:	e7ed      	b.n	8006ab4 <__exponent+0x4c>
 8006ad8:	2330      	movs	r3, #48	; 0x30
 8006ada:	3130      	adds	r1, #48	; 0x30
 8006adc:	7083      	strb	r3, [r0, #2]
 8006ade:	70c1      	strb	r1, [r0, #3]
 8006ae0:	1d03      	adds	r3, r0, #4
 8006ae2:	e7f1      	b.n	8006ac8 <__exponent+0x60>

08006ae4 <_printf_float>:
 8006ae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ae8:	ed2d 8b02 	vpush	{d8}
 8006aec:	b08d      	sub	sp, #52	; 0x34
 8006aee:	460c      	mov	r4, r1
 8006af0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006af4:	4616      	mov	r6, r2
 8006af6:	461f      	mov	r7, r3
 8006af8:	4605      	mov	r5, r0
 8006afa:	f003 f919 	bl	8009d30 <_localeconv_r>
 8006afe:	f8d0 a000 	ldr.w	sl, [r0]
 8006b02:	4650      	mov	r0, sl
 8006b04:	f7f9 fb74 	bl	80001f0 <strlen>
 8006b08:	2300      	movs	r3, #0
 8006b0a:	930a      	str	r3, [sp, #40]	; 0x28
 8006b0c:	6823      	ldr	r3, [r4, #0]
 8006b0e:	9305      	str	r3, [sp, #20]
 8006b10:	f8d8 3000 	ldr.w	r3, [r8]
 8006b14:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006b18:	3307      	adds	r3, #7
 8006b1a:	f023 0307 	bic.w	r3, r3, #7
 8006b1e:	f103 0208 	add.w	r2, r3, #8
 8006b22:	f8c8 2000 	str.w	r2, [r8]
 8006b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b2a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006b2e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006b32:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006b36:	9307      	str	r3, [sp, #28]
 8006b38:	f8cd 8018 	str.w	r8, [sp, #24]
 8006b3c:	ee08 0a10 	vmov	s16, r0
 8006b40:	4b9f      	ldr	r3, [pc, #636]	; (8006dc0 <_printf_float+0x2dc>)
 8006b42:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006b46:	f04f 32ff 	mov.w	r2, #4294967295
 8006b4a:	f7f9 ffff 	bl	8000b4c <__aeabi_dcmpun>
 8006b4e:	bb88      	cbnz	r0, 8006bb4 <_printf_float+0xd0>
 8006b50:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006b54:	4b9a      	ldr	r3, [pc, #616]	; (8006dc0 <_printf_float+0x2dc>)
 8006b56:	f04f 32ff 	mov.w	r2, #4294967295
 8006b5a:	f7f9 ffd9 	bl	8000b10 <__aeabi_dcmple>
 8006b5e:	bb48      	cbnz	r0, 8006bb4 <_printf_float+0xd0>
 8006b60:	2200      	movs	r2, #0
 8006b62:	2300      	movs	r3, #0
 8006b64:	4640      	mov	r0, r8
 8006b66:	4649      	mov	r1, r9
 8006b68:	f7f9 ffc8 	bl	8000afc <__aeabi_dcmplt>
 8006b6c:	b110      	cbz	r0, 8006b74 <_printf_float+0x90>
 8006b6e:	232d      	movs	r3, #45	; 0x2d
 8006b70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b74:	4b93      	ldr	r3, [pc, #588]	; (8006dc4 <_printf_float+0x2e0>)
 8006b76:	4894      	ldr	r0, [pc, #592]	; (8006dc8 <_printf_float+0x2e4>)
 8006b78:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006b7c:	bf94      	ite	ls
 8006b7e:	4698      	movls	r8, r3
 8006b80:	4680      	movhi	r8, r0
 8006b82:	2303      	movs	r3, #3
 8006b84:	6123      	str	r3, [r4, #16]
 8006b86:	9b05      	ldr	r3, [sp, #20]
 8006b88:	f023 0204 	bic.w	r2, r3, #4
 8006b8c:	6022      	str	r2, [r4, #0]
 8006b8e:	f04f 0900 	mov.w	r9, #0
 8006b92:	9700      	str	r7, [sp, #0]
 8006b94:	4633      	mov	r3, r6
 8006b96:	aa0b      	add	r2, sp, #44	; 0x2c
 8006b98:	4621      	mov	r1, r4
 8006b9a:	4628      	mov	r0, r5
 8006b9c:	f000 f9d8 	bl	8006f50 <_printf_common>
 8006ba0:	3001      	adds	r0, #1
 8006ba2:	f040 8090 	bne.w	8006cc6 <_printf_float+0x1e2>
 8006ba6:	f04f 30ff 	mov.w	r0, #4294967295
 8006baa:	b00d      	add	sp, #52	; 0x34
 8006bac:	ecbd 8b02 	vpop	{d8}
 8006bb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bb4:	4642      	mov	r2, r8
 8006bb6:	464b      	mov	r3, r9
 8006bb8:	4640      	mov	r0, r8
 8006bba:	4649      	mov	r1, r9
 8006bbc:	f7f9 ffc6 	bl	8000b4c <__aeabi_dcmpun>
 8006bc0:	b140      	cbz	r0, 8006bd4 <_printf_float+0xf0>
 8006bc2:	464b      	mov	r3, r9
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	bfbc      	itt	lt
 8006bc8:	232d      	movlt	r3, #45	; 0x2d
 8006bca:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006bce:	487f      	ldr	r0, [pc, #508]	; (8006dcc <_printf_float+0x2e8>)
 8006bd0:	4b7f      	ldr	r3, [pc, #508]	; (8006dd0 <_printf_float+0x2ec>)
 8006bd2:	e7d1      	b.n	8006b78 <_printf_float+0x94>
 8006bd4:	6863      	ldr	r3, [r4, #4]
 8006bd6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006bda:	9206      	str	r2, [sp, #24]
 8006bdc:	1c5a      	adds	r2, r3, #1
 8006bde:	d13f      	bne.n	8006c60 <_printf_float+0x17c>
 8006be0:	2306      	movs	r3, #6
 8006be2:	6063      	str	r3, [r4, #4]
 8006be4:	9b05      	ldr	r3, [sp, #20]
 8006be6:	6861      	ldr	r1, [r4, #4]
 8006be8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006bec:	2300      	movs	r3, #0
 8006bee:	9303      	str	r3, [sp, #12]
 8006bf0:	ab0a      	add	r3, sp, #40	; 0x28
 8006bf2:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006bf6:	ab09      	add	r3, sp, #36	; 0x24
 8006bf8:	ec49 8b10 	vmov	d0, r8, r9
 8006bfc:	9300      	str	r3, [sp, #0]
 8006bfe:	6022      	str	r2, [r4, #0]
 8006c00:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006c04:	4628      	mov	r0, r5
 8006c06:	f7ff fecd 	bl	80069a4 <__cvt>
 8006c0a:	9b06      	ldr	r3, [sp, #24]
 8006c0c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006c0e:	2b47      	cmp	r3, #71	; 0x47
 8006c10:	4680      	mov	r8, r0
 8006c12:	d108      	bne.n	8006c26 <_printf_float+0x142>
 8006c14:	1cc8      	adds	r0, r1, #3
 8006c16:	db02      	blt.n	8006c1e <_printf_float+0x13a>
 8006c18:	6863      	ldr	r3, [r4, #4]
 8006c1a:	4299      	cmp	r1, r3
 8006c1c:	dd41      	ble.n	8006ca2 <_printf_float+0x1be>
 8006c1e:	f1ab 0b02 	sub.w	fp, fp, #2
 8006c22:	fa5f fb8b 	uxtb.w	fp, fp
 8006c26:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006c2a:	d820      	bhi.n	8006c6e <_printf_float+0x18a>
 8006c2c:	3901      	subs	r1, #1
 8006c2e:	465a      	mov	r2, fp
 8006c30:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006c34:	9109      	str	r1, [sp, #36]	; 0x24
 8006c36:	f7ff ff17 	bl	8006a68 <__exponent>
 8006c3a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006c3c:	1813      	adds	r3, r2, r0
 8006c3e:	2a01      	cmp	r2, #1
 8006c40:	4681      	mov	r9, r0
 8006c42:	6123      	str	r3, [r4, #16]
 8006c44:	dc02      	bgt.n	8006c4c <_printf_float+0x168>
 8006c46:	6822      	ldr	r2, [r4, #0]
 8006c48:	07d2      	lsls	r2, r2, #31
 8006c4a:	d501      	bpl.n	8006c50 <_printf_float+0x16c>
 8006c4c:	3301      	adds	r3, #1
 8006c4e:	6123      	str	r3, [r4, #16]
 8006c50:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d09c      	beq.n	8006b92 <_printf_float+0xae>
 8006c58:	232d      	movs	r3, #45	; 0x2d
 8006c5a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c5e:	e798      	b.n	8006b92 <_printf_float+0xae>
 8006c60:	9a06      	ldr	r2, [sp, #24]
 8006c62:	2a47      	cmp	r2, #71	; 0x47
 8006c64:	d1be      	bne.n	8006be4 <_printf_float+0x100>
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d1bc      	bne.n	8006be4 <_printf_float+0x100>
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	e7b9      	b.n	8006be2 <_printf_float+0xfe>
 8006c6e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006c72:	d118      	bne.n	8006ca6 <_printf_float+0x1c2>
 8006c74:	2900      	cmp	r1, #0
 8006c76:	6863      	ldr	r3, [r4, #4]
 8006c78:	dd0b      	ble.n	8006c92 <_printf_float+0x1ae>
 8006c7a:	6121      	str	r1, [r4, #16]
 8006c7c:	b913      	cbnz	r3, 8006c84 <_printf_float+0x1a0>
 8006c7e:	6822      	ldr	r2, [r4, #0]
 8006c80:	07d0      	lsls	r0, r2, #31
 8006c82:	d502      	bpl.n	8006c8a <_printf_float+0x1a6>
 8006c84:	3301      	adds	r3, #1
 8006c86:	440b      	add	r3, r1
 8006c88:	6123      	str	r3, [r4, #16]
 8006c8a:	65a1      	str	r1, [r4, #88]	; 0x58
 8006c8c:	f04f 0900 	mov.w	r9, #0
 8006c90:	e7de      	b.n	8006c50 <_printf_float+0x16c>
 8006c92:	b913      	cbnz	r3, 8006c9a <_printf_float+0x1b6>
 8006c94:	6822      	ldr	r2, [r4, #0]
 8006c96:	07d2      	lsls	r2, r2, #31
 8006c98:	d501      	bpl.n	8006c9e <_printf_float+0x1ba>
 8006c9a:	3302      	adds	r3, #2
 8006c9c:	e7f4      	b.n	8006c88 <_printf_float+0x1a4>
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	e7f2      	b.n	8006c88 <_printf_float+0x1a4>
 8006ca2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006ca6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ca8:	4299      	cmp	r1, r3
 8006caa:	db05      	blt.n	8006cb8 <_printf_float+0x1d4>
 8006cac:	6823      	ldr	r3, [r4, #0]
 8006cae:	6121      	str	r1, [r4, #16]
 8006cb0:	07d8      	lsls	r0, r3, #31
 8006cb2:	d5ea      	bpl.n	8006c8a <_printf_float+0x1a6>
 8006cb4:	1c4b      	adds	r3, r1, #1
 8006cb6:	e7e7      	b.n	8006c88 <_printf_float+0x1a4>
 8006cb8:	2900      	cmp	r1, #0
 8006cba:	bfd4      	ite	le
 8006cbc:	f1c1 0202 	rsble	r2, r1, #2
 8006cc0:	2201      	movgt	r2, #1
 8006cc2:	4413      	add	r3, r2
 8006cc4:	e7e0      	b.n	8006c88 <_printf_float+0x1a4>
 8006cc6:	6823      	ldr	r3, [r4, #0]
 8006cc8:	055a      	lsls	r2, r3, #21
 8006cca:	d407      	bmi.n	8006cdc <_printf_float+0x1f8>
 8006ccc:	6923      	ldr	r3, [r4, #16]
 8006cce:	4642      	mov	r2, r8
 8006cd0:	4631      	mov	r1, r6
 8006cd2:	4628      	mov	r0, r5
 8006cd4:	47b8      	blx	r7
 8006cd6:	3001      	adds	r0, #1
 8006cd8:	d12c      	bne.n	8006d34 <_printf_float+0x250>
 8006cda:	e764      	b.n	8006ba6 <_printf_float+0xc2>
 8006cdc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006ce0:	f240 80e0 	bls.w	8006ea4 <_printf_float+0x3c0>
 8006ce4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006ce8:	2200      	movs	r2, #0
 8006cea:	2300      	movs	r3, #0
 8006cec:	f7f9 fefc 	bl	8000ae8 <__aeabi_dcmpeq>
 8006cf0:	2800      	cmp	r0, #0
 8006cf2:	d034      	beq.n	8006d5e <_printf_float+0x27a>
 8006cf4:	4a37      	ldr	r2, [pc, #220]	; (8006dd4 <_printf_float+0x2f0>)
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	4631      	mov	r1, r6
 8006cfa:	4628      	mov	r0, r5
 8006cfc:	47b8      	blx	r7
 8006cfe:	3001      	adds	r0, #1
 8006d00:	f43f af51 	beq.w	8006ba6 <_printf_float+0xc2>
 8006d04:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006d08:	429a      	cmp	r2, r3
 8006d0a:	db02      	blt.n	8006d12 <_printf_float+0x22e>
 8006d0c:	6823      	ldr	r3, [r4, #0]
 8006d0e:	07d8      	lsls	r0, r3, #31
 8006d10:	d510      	bpl.n	8006d34 <_printf_float+0x250>
 8006d12:	ee18 3a10 	vmov	r3, s16
 8006d16:	4652      	mov	r2, sl
 8006d18:	4631      	mov	r1, r6
 8006d1a:	4628      	mov	r0, r5
 8006d1c:	47b8      	blx	r7
 8006d1e:	3001      	adds	r0, #1
 8006d20:	f43f af41 	beq.w	8006ba6 <_printf_float+0xc2>
 8006d24:	f04f 0800 	mov.w	r8, #0
 8006d28:	f104 091a 	add.w	r9, r4, #26
 8006d2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d2e:	3b01      	subs	r3, #1
 8006d30:	4543      	cmp	r3, r8
 8006d32:	dc09      	bgt.n	8006d48 <_printf_float+0x264>
 8006d34:	6823      	ldr	r3, [r4, #0]
 8006d36:	079b      	lsls	r3, r3, #30
 8006d38:	f100 8105 	bmi.w	8006f46 <_printf_float+0x462>
 8006d3c:	68e0      	ldr	r0, [r4, #12]
 8006d3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d40:	4298      	cmp	r0, r3
 8006d42:	bfb8      	it	lt
 8006d44:	4618      	movlt	r0, r3
 8006d46:	e730      	b.n	8006baa <_printf_float+0xc6>
 8006d48:	2301      	movs	r3, #1
 8006d4a:	464a      	mov	r2, r9
 8006d4c:	4631      	mov	r1, r6
 8006d4e:	4628      	mov	r0, r5
 8006d50:	47b8      	blx	r7
 8006d52:	3001      	adds	r0, #1
 8006d54:	f43f af27 	beq.w	8006ba6 <_printf_float+0xc2>
 8006d58:	f108 0801 	add.w	r8, r8, #1
 8006d5c:	e7e6      	b.n	8006d2c <_printf_float+0x248>
 8006d5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	dc39      	bgt.n	8006dd8 <_printf_float+0x2f4>
 8006d64:	4a1b      	ldr	r2, [pc, #108]	; (8006dd4 <_printf_float+0x2f0>)
 8006d66:	2301      	movs	r3, #1
 8006d68:	4631      	mov	r1, r6
 8006d6a:	4628      	mov	r0, r5
 8006d6c:	47b8      	blx	r7
 8006d6e:	3001      	adds	r0, #1
 8006d70:	f43f af19 	beq.w	8006ba6 <_printf_float+0xc2>
 8006d74:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006d78:	4313      	orrs	r3, r2
 8006d7a:	d102      	bne.n	8006d82 <_printf_float+0x29e>
 8006d7c:	6823      	ldr	r3, [r4, #0]
 8006d7e:	07d9      	lsls	r1, r3, #31
 8006d80:	d5d8      	bpl.n	8006d34 <_printf_float+0x250>
 8006d82:	ee18 3a10 	vmov	r3, s16
 8006d86:	4652      	mov	r2, sl
 8006d88:	4631      	mov	r1, r6
 8006d8a:	4628      	mov	r0, r5
 8006d8c:	47b8      	blx	r7
 8006d8e:	3001      	adds	r0, #1
 8006d90:	f43f af09 	beq.w	8006ba6 <_printf_float+0xc2>
 8006d94:	f04f 0900 	mov.w	r9, #0
 8006d98:	f104 0a1a 	add.w	sl, r4, #26
 8006d9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d9e:	425b      	negs	r3, r3
 8006da0:	454b      	cmp	r3, r9
 8006da2:	dc01      	bgt.n	8006da8 <_printf_float+0x2c4>
 8006da4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006da6:	e792      	b.n	8006cce <_printf_float+0x1ea>
 8006da8:	2301      	movs	r3, #1
 8006daa:	4652      	mov	r2, sl
 8006dac:	4631      	mov	r1, r6
 8006dae:	4628      	mov	r0, r5
 8006db0:	47b8      	blx	r7
 8006db2:	3001      	adds	r0, #1
 8006db4:	f43f aef7 	beq.w	8006ba6 <_printf_float+0xc2>
 8006db8:	f109 0901 	add.w	r9, r9, #1
 8006dbc:	e7ee      	b.n	8006d9c <_printf_float+0x2b8>
 8006dbe:	bf00      	nop
 8006dc0:	7fefffff 	.word	0x7fefffff
 8006dc4:	0800b2e8 	.word	0x0800b2e8
 8006dc8:	0800b2ec 	.word	0x0800b2ec
 8006dcc:	0800b2f4 	.word	0x0800b2f4
 8006dd0:	0800b2f0 	.word	0x0800b2f0
 8006dd4:	0800b2f8 	.word	0x0800b2f8
 8006dd8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006dda:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006ddc:	429a      	cmp	r2, r3
 8006dde:	bfa8      	it	ge
 8006de0:	461a      	movge	r2, r3
 8006de2:	2a00      	cmp	r2, #0
 8006de4:	4691      	mov	r9, r2
 8006de6:	dc37      	bgt.n	8006e58 <_printf_float+0x374>
 8006de8:	f04f 0b00 	mov.w	fp, #0
 8006dec:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006df0:	f104 021a 	add.w	r2, r4, #26
 8006df4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006df6:	9305      	str	r3, [sp, #20]
 8006df8:	eba3 0309 	sub.w	r3, r3, r9
 8006dfc:	455b      	cmp	r3, fp
 8006dfe:	dc33      	bgt.n	8006e68 <_printf_float+0x384>
 8006e00:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006e04:	429a      	cmp	r2, r3
 8006e06:	db3b      	blt.n	8006e80 <_printf_float+0x39c>
 8006e08:	6823      	ldr	r3, [r4, #0]
 8006e0a:	07da      	lsls	r2, r3, #31
 8006e0c:	d438      	bmi.n	8006e80 <_printf_float+0x39c>
 8006e0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e10:	9a05      	ldr	r2, [sp, #20]
 8006e12:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006e14:	1a9a      	subs	r2, r3, r2
 8006e16:	eba3 0901 	sub.w	r9, r3, r1
 8006e1a:	4591      	cmp	r9, r2
 8006e1c:	bfa8      	it	ge
 8006e1e:	4691      	movge	r9, r2
 8006e20:	f1b9 0f00 	cmp.w	r9, #0
 8006e24:	dc35      	bgt.n	8006e92 <_printf_float+0x3ae>
 8006e26:	f04f 0800 	mov.w	r8, #0
 8006e2a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006e2e:	f104 0a1a 	add.w	sl, r4, #26
 8006e32:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006e36:	1a9b      	subs	r3, r3, r2
 8006e38:	eba3 0309 	sub.w	r3, r3, r9
 8006e3c:	4543      	cmp	r3, r8
 8006e3e:	f77f af79 	ble.w	8006d34 <_printf_float+0x250>
 8006e42:	2301      	movs	r3, #1
 8006e44:	4652      	mov	r2, sl
 8006e46:	4631      	mov	r1, r6
 8006e48:	4628      	mov	r0, r5
 8006e4a:	47b8      	blx	r7
 8006e4c:	3001      	adds	r0, #1
 8006e4e:	f43f aeaa 	beq.w	8006ba6 <_printf_float+0xc2>
 8006e52:	f108 0801 	add.w	r8, r8, #1
 8006e56:	e7ec      	b.n	8006e32 <_printf_float+0x34e>
 8006e58:	4613      	mov	r3, r2
 8006e5a:	4631      	mov	r1, r6
 8006e5c:	4642      	mov	r2, r8
 8006e5e:	4628      	mov	r0, r5
 8006e60:	47b8      	blx	r7
 8006e62:	3001      	adds	r0, #1
 8006e64:	d1c0      	bne.n	8006de8 <_printf_float+0x304>
 8006e66:	e69e      	b.n	8006ba6 <_printf_float+0xc2>
 8006e68:	2301      	movs	r3, #1
 8006e6a:	4631      	mov	r1, r6
 8006e6c:	4628      	mov	r0, r5
 8006e6e:	9205      	str	r2, [sp, #20]
 8006e70:	47b8      	blx	r7
 8006e72:	3001      	adds	r0, #1
 8006e74:	f43f ae97 	beq.w	8006ba6 <_printf_float+0xc2>
 8006e78:	9a05      	ldr	r2, [sp, #20]
 8006e7a:	f10b 0b01 	add.w	fp, fp, #1
 8006e7e:	e7b9      	b.n	8006df4 <_printf_float+0x310>
 8006e80:	ee18 3a10 	vmov	r3, s16
 8006e84:	4652      	mov	r2, sl
 8006e86:	4631      	mov	r1, r6
 8006e88:	4628      	mov	r0, r5
 8006e8a:	47b8      	blx	r7
 8006e8c:	3001      	adds	r0, #1
 8006e8e:	d1be      	bne.n	8006e0e <_printf_float+0x32a>
 8006e90:	e689      	b.n	8006ba6 <_printf_float+0xc2>
 8006e92:	9a05      	ldr	r2, [sp, #20]
 8006e94:	464b      	mov	r3, r9
 8006e96:	4442      	add	r2, r8
 8006e98:	4631      	mov	r1, r6
 8006e9a:	4628      	mov	r0, r5
 8006e9c:	47b8      	blx	r7
 8006e9e:	3001      	adds	r0, #1
 8006ea0:	d1c1      	bne.n	8006e26 <_printf_float+0x342>
 8006ea2:	e680      	b.n	8006ba6 <_printf_float+0xc2>
 8006ea4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006ea6:	2a01      	cmp	r2, #1
 8006ea8:	dc01      	bgt.n	8006eae <_printf_float+0x3ca>
 8006eaa:	07db      	lsls	r3, r3, #31
 8006eac:	d538      	bpl.n	8006f20 <_printf_float+0x43c>
 8006eae:	2301      	movs	r3, #1
 8006eb0:	4642      	mov	r2, r8
 8006eb2:	4631      	mov	r1, r6
 8006eb4:	4628      	mov	r0, r5
 8006eb6:	47b8      	blx	r7
 8006eb8:	3001      	adds	r0, #1
 8006eba:	f43f ae74 	beq.w	8006ba6 <_printf_float+0xc2>
 8006ebe:	ee18 3a10 	vmov	r3, s16
 8006ec2:	4652      	mov	r2, sl
 8006ec4:	4631      	mov	r1, r6
 8006ec6:	4628      	mov	r0, r5
 8006ec8:	47b8      	blx	r7
 8006eca:	3001      	adds	r0, #1
 8006ecc:	f43f ae6b 	beq.w	8006ba6 <_printf_float+0xc2>
 8006ed0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	f7f9 fe06 	bl	8000ae8 <__aeabi_dcmpeq>
 8006edc:	b9d8      	cbnz	r0, 8006f16 <_printf_float+0x432>
 8006ede:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ee0:	f108 0201 	add.w	r2, r8, #1
 8006ee4:	3b01      	subs	r3, #1
 8006ee6:	4631      	mov	r1, r6
 8006ee8:	4628      	mov	r0, r5
 8006eea:	47b8      	blx	r7
 8006eec:	3001      	adds	r0, #1
 8006eee:	d10e      	bne.n	8006f0e <_printf_float+0x42a>
 8006ef0:	e659      	b.n	8006ba6 <_printf_float+0xc2>
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	4652      	mov	r2, sl
 8006ef6:	4631      	mov	r1, r6
 8006ef8:	4628      	mov	r0, r5
 8006efa:	47b8      	blx	r7
 8006efc:	3001      	adds	r0, #1
 8006efe:	f43f ae52 	beq.w	8006ba6 <_printf_float+0xc2>
 8006f02:	f108 0801 	add.w	r8, r8, #1
 8006f06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f08:	3b01      	subs	r3, #1
 8006f0a:	4543      	cmp	r3, r8
 8006f0c:	dcf1      	bgt.n	8006ef2 <_printf_float+0x40e>
 8006f0e:	464b      	mov	r3, r9
 8006f10:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006f14:	e6dc      	b.n	8006cd0 <_printf_float+0x1ec>
 8006f16:	f04f 0800 	mov.w	r8, #0
 8006f1a:	f104 0a1a 	add.w	sl, r4, #26
 8006f1e:	e7f2      	b.n	8006f06 <_printf_float+0x422>
 8006f20:	2301      	movs	r3, #1
 8006f22:	4642      	mov	r2, r8
 8006f24:	e7df      	b.n	8006ee6 <_printf_float+0x402>
 8006f26:	2301      	movs	r3, #1
 8006f28:	464a      	mov	r2, r9
 8006f2a:	4631      	mov	r1, r6
 8006f2c:	4628      	mov	r0, r5
 8006f2e:	47b8      	blx	r7
 8006f30:	3001      	adds	r0, #1
 8006f32:	f43f ae38 	beq.w	8006ba6 <_printf_float+0xc2>
 8006f36:	f108 0801 	add.w	r8, r8, #1
 8006f3a:	68e3      	ldr	r3, [r4, #12]
 8006f3c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006f3e:	1a5b      	subs	r3, r3, r1
 8006f40:	4543      	cmp	r3, r8
 8006f42:	dcf0      	bgt.n	8006f26 <_printf_float+0x442>
 8006f44:	e6fa      	b.n	8006d3c <_printf_float+0x258>
 8006f46:	f04f 0800 	mov.w	r8, #0
 8006f4a:	f104 0919 	add.w	r9, r4, #25
 8006f4e:	e7f4      	b.n	8006f3a <_printf_float+0x456>

08006f50 <_printf_common>:
 8006f50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f54:	4616      	mov	r6, r2
 8006f56:	4699      	mov	r9, r3
 8006f58:	688a      	ldr	r2, [r1, #8]
 8006f5a:	690b      	ldr	r3, [r1, #16]
 8006f5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006f60:	4293      	cmp	r3, r2
 8006f62:	bfb8      	it	lt
 8006f64:	4613      	movlt	r3, r2
 8006f66:	6033      	str	r3, [r6, #0]
 8006f68:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006f6c:	4607      	mov	r7, r0
 8006f6e:	460c      	mov	r4, r1
 8006f70:	b10a      	cbz	r2, 8006f76 <_printf_common+0x26>
 8006f72:	3301      	adds	r3, #1
 8006f74:	6033      	str	r3, [r6, #0]
 8006f76:	6823      	ldr	r3, [r4, #0]
 8006f78:	0699      	lsls	r1, r3, #26
 8006f7a:	bf42      	ittt	mi
 8006f7c:	6833      	ldrmi	r3, [r6, #0]
 8006f7e:	3302      	addmi	r3, #2
 8006f80:	6033      	strmi	r3, [r6, #0]
 8006f82:	6825      	ldr	r5, [r4, #0]
 8006f84:	f015 0506 	ands.w	r5, r5, #6
 8006f88:	d106      	bne.n	8006f98 <_printf_common+0x48>
 8006f8a:	f104 0a19 	add.w	sl, r4, #25
 8006f8e:	68e3      	ldr	r3, [r4, #12]
 8006f90:	6832      	ldr	r2, [r6, #0]
 8006f92:	1a9b      	subs	r3, r3, r2
 8006f94:	42ab      	cmp	r3, r5
 8006f96:	dc26      	bgt.n	8006fe6 <_printf_common+0x96>
 8006f98:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006f9c:	1e13      	subs	r3, r2, #0
 8006f9e:	6822      	ldr	r2, [r4, #0]
 8006fa0:	bf18      	it	ne
 8006fa2:	2301      	movne	r3, #1
 8006fa4:	0692      	lsls	r2, r2, #26
 8006fa6:	d42b      	bmi.n	8007000 <_printf_common+0xb0>
 8006fa8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006fac:	4649      	mov	r1, r9
 8006fae:	4638      	mov	r0, r7
 8006fb0:	47c0      	blx	r8
 8006fb2:	3001      	adds	r0, #1
 8006fb4:	d01e      	beq.n	8006ff4 <_printf_common+0xa4>
 8006fb6:	6823      	ldr	r3, [r4, #0]
 8006fb8:	68e5      	ldr	r5, [r4, #12]
 8006fba:	6832      	ldr	r2, [r6, #0]
 8006fbc:	f003 0306 	and.w	r3, r3, #6
 8006fc0:	2b04      	cmp	r3, #4
 8006fc2:	bf08      	it	eq
 8006fc4:	1aad      	subeq	r5, r5, r2
 8006fc6:	68a3      	ldr	r3, [r4, #8]
 8006fc8:	6922      	ldr	r2, [r4, #16]
 8006fca:	bf0c      	ite	eq
 8006fcc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006fd0:	2500      	movne	r5, #0
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	bfc4      	itt	gt
 8006fd6:	1a9b      	subgt	r3, r3, r2
 8006fd8:	18ed      	addgt	r5, r5, r3
 8006fda:	2600      	movs	r6, #0
 8006fdc:	341a      	adds	r4, #26
 8006fde:	42b5      	cmp	r5, r6
 8006fe0:	d11a      	bne.n	8007018 <_printf_common+0xc8>
 8006fe2:	2000      	movs	r0, #0
 8006fe4:	e008      	b.n	8006ff8 <_printf_common+0xa8>
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	4652      	mov	r2, sl
 8006fea:	4649      	mov	r1, r9
 8006fec:	4638      	mov	r0, r7
 8006fee:	47c0      	blx	r8
 8006ff0:	3001      	adds	r0, #1
 8006ff2:	d103      	bne.n	8006ffc <_printf_common+0xac>
 8006ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ff8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ffc:	3501      	adds	r5, #1
 8006ffe:	e7c6      	b.n	8006f8e <_printf_common+0x3e>
 8007000:	18e1      	adds	r1, r4, r3
 8007002:	1c5a      	adds	r2, r3, #1
 8007004:	2030      	movs	r0, #48	; 0x30
 8007006:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800700a:	4422      	add	r2, r4
 800700c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007010:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007014:	3302      	adds	r3, #2
 8007016:	e7c7      	b.n	8006fa8 <_printf_common+0x58>
 8007018:	2301      	movs	r3, #1
 800701a:	4622      	mov	r2, r4
 800701c:	4649      	mov	r1, r9
 800701e:	4638      	mov	r0, r7
 8007020:	47c0      	blx	r8
 8007022:	3001      	adds	r0, #1
 8007024:	d0e6      	beq.n	8006ff4 <_printf_common+0xa4>
 8007026:	3601      	adds	r6, #1
 8007028:	e7d9      	b.n	8006fde <_printf_common+0x8e>
	...

0800702c <_printf_i>:
 800702c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007030:	7e0f      	ldrb	r7, [r1, #24]
 8007032:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007034:	2f78      	cmp	r7, #120	; 0x78
 8007036:	4691      	mov	r9, r2
 8007038:	4680      	mov	r8, r0
 800703a:	460c      	mov	r4, r1
 800703c:	469a      	mov	sl, r3
 800703e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007042:	d807      	bhi.n	8007054 <_printf_i+0x28>
 8007044:	2f62      	cmp	r7, #98	; 0x62
 8007046:	d80a      	bhi.n	800705e <_printf_i+0x32>
 8007048:	2f00      	cmp	r7, #0
 800704a:	f000 80d8 	beq.w	80071fe <_printf_i+0x1d2>
 800704e:	2f58      	cmp	r7, #88	; 0x58
 8007050:	f000 80a3 	beq.w	800719a <_printf_i+0x16e>
 8007054:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007058:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800705c:	e03a      	b.n	80070d4 <_printf_i+0xa8>
 800705e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007062:	2b15      	cmp	r3, #21
 8007064:	d8f6      	bhi.n	8007054 <_printf_i+0x28>
 8007066:	a101      	add	r1, pc, #4	; (adr r1, 800706c <_printf_i+0x40>)
 8007068:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800706c:	080070c5 	.word	0x080070c5
 8007070:	080070d9 	.word	0x080070d9
 8007074:	08007055 	.word	0x08007055
 8007078:	08007055 	.word	0x08007055
 800707c:	08007055 	.word	0x08007055
 8007080:	08007055 	.word	0x08007055
 8007084:	080070d9 	.word	0x080070d9
 8007088:	08007055 	.word	0x08007055
 800708c:	08007055 	.word	0x08007055
 8007090:	08007055 	.word	0x08007055
 8007094:	08007055 	.word	0x08007055
 8007098:	080071e5 	.word	0x080071e5
 800709c:	08007109 	.word	0x08007109
 80070a0:	080071c7 	.word	0x080071c7
 80070a4:	08007055 	.word	0x08007055
 80070a8:	08007055 	.word	0x08007055
 80070ac:	08007207 	.word	0x08007207
 80070b0:	08007055 	.word	0x08007055
 80070b4:	08007109 	.word	0x08007109
 80070b8:	08007055 	.word	0x08007055
 80070bc:	08007055 	.word	0x08007055
 80070c0:	080071cf 	.word	0x080071cf
 80070c4:	682b      	ldr	r3, [r5, #0]
 80070c6:	1d1a      	adds	r2, r3, #4
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	602a      	str	r2, [r5, #0]
 80070cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80070d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80070d4:	2301      	movs	r3, #1
 80070d6:	e0a3      	b.n	8007220 <_printf_i+0x1f4>
 80070d8:	6820      	ldr	r0, [r4, #0]
 80070da:	6829      	ldr	r1, [r5, #0]
 80070dc:	0606      	lsls	r6, r0, #24
 80070de:	f101 0304 	add.w	r3, r1, #4
 80070e2:	d50a      	bpl.n	80070fa <_printf_i+0xce>
 80070e4:	680e      	ldr	r6, [r1, #0]
 80070e6:	602b      	str	r3, [r5, #0]
 80070e8:	2e00      	cmp	r6, #0
 80070ea:	da03      	bge.n	80070f4 <_printf_i+0xc8>
 80070ec:	232d      	movs	r3, #45	; 0x2d
 80070ee:	4276      	negs	r6, r6
 80070f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80070f4:	485e      	ldr	r0, [pc, #376]	; (8007270 <_printf_i+0x244>)
 80070f6:	230a      	movs	r3, #10
 80070f8:	e019      	b.n	800712e <_printf_i+0x102>
 80070fa:	680e      	ldr	r6, [r1, #0]
 80070fc:	602b      	str	r3, [r5, #0]
 80070fe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007102:	bf18      	it	ne
 8007104:	b236      	sxthne	r6, r6
 8007106:	e7ef      	b.n	80070e8 <_printf_i+0xbc>
 8007108:	682b      	ldr	r3, [r5, #0]
 800710a:	6820      	ldr	r0, [r4, #0]
 800710c:	1d19      	adds	r1, r3, #4
 800710e:	6029      	str	r1, [r5, #0]
 8007110:	0601      	lsls	r1, r0, #24
 8007112:	d501      	bpl.n	8007118 <_printf_i+0xec>
 8007114:	681e      	ldr	r6, [r3, #0]
 8007116:	e002      	b.n	800711e <_printf_i+0xf2>
 8007118:	0646      	lsls	r6, r0, #25
 800711a:	d5fb      	bpl.n	8007114 <_printf_i+0xe8>
 800711c:	881e      	ldrh	r6, [r3, #0]
 800711e:	4854      	ldr	r0, [pc, #336]	; (8007270 <_printf_i+0x244>)
 8007120:	2f6f      	cmp	r7, #111	; 0x6f
 8007122:	bf0c      	ite	eq
 8007124:	2308      	moveq	r3, #8
 8007126:	230a      	movne	r3, #10
 8007128:	2100      	movs	r1, #0
 800712a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800712e:	6865      	ldr	r5, [r4, #4]
 8007130:	60a5      	str	r5, [r4, #8]
 8007132:	2d00      	cmp	r5, #0
 8007134:	bfa2      	ittt	ge
 8007136:	6821      	ldrge	r1, [r4, #0]
 8007138:	f021 0104 	bicge.w	r1, r1, #4
 800713c:	6021      	strge	r1, [r4, #0]
 800713e:	b90e      	cbnz	r6, 8007144 <_printf_i+0x118>
 8007140:	2d00      	cmp	r5, #0
 8007142:	d04d      	beq.n	80071e0 <_printf_i+0x1b4>
 8007144:	4615      	mov	r5, r2
 8007146:	fbb6 f1f3 	udiv	r1, r6, r3
 800714a:	fb03 6711 	mls	r7, r3, r1, r6
 800714e:	5dc7      	ldrb	r7, [r0, r7]
 8007150:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007154:	4637      	mov	r7, r6
 8007156:	42bb      	cmp	r3, r7
 8007158:	460e      	mov	r6, r1
 800715a:	d9f4      	bls.n	8007146 <_printf_i+0x11a>
 800715c:	2b08      	cmp	r3, #8
 800715e:	d10b      	bne.n	8007178 <_printf_i+0x14c>
 8007160:	6823      	ldr	r3, [r4, #0]
 8007162:	07de      	lsls	r6, r3, #31
 8007164:	d508      	bpl.n	8007178 <_printf_i+0x14c>
 8007166:	6923      	ldr	r3, [r4, #16]
 8007168:	6861      	ldr	r1, [r4, #4]
 800716a:	4299      	cmp	r1, r3
 800716c:	bfde      	ittt	le
 800716e:	2330      	movle	r3, #48	; 0x30
 8007170:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007174:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007178:	1b52      	subs	r2, r2, r5
 800717a:	6122      	str	r2, [r4, #16]
 800717c:	f8cd a000 	str.w	sl, [sp]
 8007180:	464b      	mov	r3, r9
 8007182:	aa03      	add	r2, sp, #12
 8007184:	4621      	mov	r1, r4
 8007186:	4640      	mov	r0, r8
 8007188:	f7ff fee2 	bl	8006f50 <_printf_common>
 800718c:	3001      	adds	r0, #1
 800718e:	d14c      	bne.n	800722a <_printf_i+0x1fe>
 8007190:	f04f 30ff 	mov.w	r0, #4294967295
 8007194:	b004      	add	sp, #16
 8007196:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800719a:	4835      	ldr	r0, [pc, #212]	; (8007270 <_printf_i+0x244>)
 800719c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80071a0:	6829      	ldr	r1, [r5, #0]
 80071a2:	6823      	ldr	r3, [r4, #0]
 80071a4:	f851 6b04 	ldr.w	r6, [r1], #4
 80071a8:	6029      	str	r1, [r5, #0]
 80071aa:	061d      	lsls	r5, r3, #24
 80071ac:	d514      	bpl.n	80071d8 <_printf_i+0x1ac>
 80071ae:	07df      	lsls	r7, r3, #31
 80071b0:	bf44      	itt	mi
 80071b2:	f043 0320 	orrmi.w	r3, r3, #32
 80071b6:	6023      	strmi	r3, [r4, #0]
 80071b8:	b91e      	cbnz	r6, 80071c2 <_printf_i+0x196>
 80071ba:	6823      	ldr	r3, [r4, #0]
 80071bc:	f023 0320 	bic.w	r3, r3, #32
 80071c0:	6023      	str	r3, [r4, #0]
 80071c2:	2310      	movs	r3, #16
 80071c4:	e7b0      	b.n	8007128 <_printf_i+0xfc>
 80071c6:	6823      	ldr	r3, [r4, #0]
 80071c8:	f043 0320 	orr.w	r3, r3, #32
 80071cc:	6023      	str	r3, [r4, #0]
 80071ce:	2378      	movs	r3, #120	; 0x78
 80071d0:	4828      	ldr	r0, [pc, #160]	; (8007274 <_printf_i+0x248>)
 80071d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80071d6:	e7e3      	b.n	80071a0 <_printf_i+0x174>
 80071d8:	0659      	lsls	r1, r3, #25
 80071da:	bf48      	it	mi
 80071dc:	b2b6      	uxthmi	r6, r6
 80071de:	e7e6      	b.n	80071ae <_printf_i+0x182>
 80071e0:	4615      	mov	r5, r2
 80071e2:	e7bb      	b.n	800715c <_printf_i+0x130>
 80071e4:	682b      	ldr	r3, [r5, #0]
 80071e6:	6826      	ldr	r6, [r4, #0]
 80071e8:	6961      	ldr	r1, [r4, #20]
 80071ea:	1d18      	adds	r0, r3, #4
 80071ec:	6028      	str	r0, [r5, #0]
 80071ee:	0635      	lsls	r5, r6, #24
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	d501      	bpl.n	80071f8 <_printf_i+0x1cc>
 80071f4:	6019      	str	r1, [r3, #0]
 80071f6:	e002      	b.n	80071fe <_printf_i+0x1d2>
 80071f8:	0670      	lsls	r0, r6, #25
 80071fa:	d5fb      	bpl.n	80071f4 <_printf_i+0x1c8>
 80071fc:	8019      	strh	r1, [r3, #0]
 80071fe:	2300      	movs	r3, #0
 8007200:	6123      	str	r3, [r4, #16]
 8007202:	4615      	mov	r5, r2
 8007204:	e7ba      	b.n	800717c <_printf_i+0x150>
 8007206:	682b      	ldr	r3, [r5, #0]
 8007208:	1d1a      	adds	r2, r3, #4
 800720a:	602a      	str	r2, [r5, #0]
 800720c:	681d      	ldr	r5, [r3, #0]
 800720e:	6862      	ldr	r2, [r4, #4]
 8007210:	2100      	movs	r1, #0
 8007212:	4628      	mov	r0, r5
 8007214:	f7f8 fff4 	bl	8000200 <memchr>
 8007218:	b108      	cbz	r0, 800721e <_printf_i+0x1f2>
 800721a:	1b40      	subs	r0, r0, r5
 800721c:	6060      	str	r0, [r4, #4]
 800721e:	6863      	ldr	r3, [r4, #4]
 8007220:	6123      	str	r3, [r4, #16]
 8007222:	2300      	movs	r3, #0
 8007224:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007228:	e7a8      	b.n	800717c <_printf_i+0x150>
 800722a:	6923      	ldr	r3, [r4, #16]
 800722c:	462a      	mov	r2, r5
 800722e:	4649      	mov	r1, r9
 8007230:	4640      	mov	r0, r8
 8007232:	47d0      	blx	sl
 8007234:	3001      	adds	r0, #1
 8007236:	d0ab      	beq.n	8007190 <_printf_i+0x164>
 8007238:	6823      	ldr	r3, [r4, #0]
 800723a:	079b      	lsls	r3, r3, #30
 800723c:	d413      	bmi.n	8007266 <_printf_i+0x23a>
 800723e:	68e0      	ldr	r0, [r4, #12]
 8007240:	9b03      	ldr	r3, [sp, #12]
 8007242:	4298      	cmp	r0, r3
 8007244:	bfb8      	it	lt
 8007246:	4618      	movlt	r0, r3
 8007248:	e7a4      	b.n	8007194 <_printf_i+0x168>
 800724a:	2301      	movs	r3, #1
 800724c:	4632      	mov	r2, r6
 800724e:	4649      	mov	r1, r9
 8007250:	4640      	mov	r0, r8
 8007252:	47d0      	blx	sl
 8007254:	3001      	adds	r0, #1
 8007256:	d09b      	beq.n	8007190 <_printf_i+0x164>
 8007258:	3501      	adds	r5, #1
 800725a:	68e3      	ldr	r3, [r4, #12]
 800725c:	9903      	ldr	r1, [sp, #12]
 800725e:	1a5b      	subs	r3, r3, r1
 8007260:	42ab      	cmp	r3, r5
 8007262:	dcf2      	bgt.n	800724a <_printf_i+0x21e>
 8007264:	e7eb      	b.n	800723e <_printf_i+0x212>
 8007266:	2500      	movs	r5, #0
 8007268:	f104 0619 	add.w	r6, r4, #25
 800726c:	e7f5      	b.n	800725a <_printf_i+0x22e>
 800726e:	bf00      	nop
 8007270:	0800b2fa 	.word	0x0800b2fa
 8007274:	0800b30b 	.word	0x0800b30b

08007278 <_scanf_float>:
 8007278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800727c:	b087      	sub	sp, #28
 800727e:	4617      	mov	r7, r2
 8007280:	9303      	str	r3, [sp, #12]
 8007282:	688b      	ldr	r3, [r1, #8]
 8007284:	1e5a      	subs	r2, r3, #1
 8007286:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800728a:	bf83      	ittte	hi
 800728c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007290:	195b      	addhi	r3, r3, r5
 8007292:	9302      	strhi	r3, [sp, #8]
 8007294:	2300      	movls	r3, #0
 8007296:	bf86      	itte	hi
 8007298:	f240 135d 	movwhi	r3, #349	; 0x15d
 800729c:	608b      	strhi	r3, [r1, #8]
 800729e:	9302      	strls	r3, [sp, #8]
 80072a0:	680b      	ldr	r3, [r1, #0]
 80072a2:	468b      	mov	fp, r1
 80072a4:	2500      	movs	r5, #0
 80072a6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80072aa:	f84b 3b1c 	str.w	r3, [fp], #28
 80072ae:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80072b2:	4680      	mov	r8, r0
 80072b4:	460c      	mov	r4, r1
 80072b6:	465e      	mov	r6, fp
 80072b8:	46aa      	mov	sl, r5
 80072ba:	46a9      	mov	r9, r5
 80072bc:	9501      	str	r5, [sp, #4]
 80072be:	68a2      	ldr	r2, [r4, #8]
 80072c0:	b152      	cbz	r2, 80072d8 <_scanf_float+0x60>
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	781b      	ldrb	r3, [r3, #0]
 80072c6:	2b4e      	cmp	r3, #78	; 0x4e
 80072c8:	d864      	bhi.n	8007394 <_scanf_float+0x11c>
 80072ca:	2b40      	cmp	r3, #64	; 0x40
 80072cc:	d83c      	bhi.n	8007348 <_scanf_float+0xd0>
 80072ce:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80072d2:	b2c8      	uxtb	r0, r1
 80072d4:	280e      	cmp	r0, #14
 80072d6:	d93a      	bls.n	800734e <_scanf_float+0xd6>
 80072d8:	f1b9 0f00 	cmp.w	r9, #0
 80072dc:	d003      	beq.n	80072e6 <_scanf_float+0x6e>
 80072de:	6823      	ldr	r3, [r4, #0]
 80072e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80072e4:	6023      	str	r3, [r4, #0]
 80072e6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80072ea:	f1ba 0f01 	cmp.w	sl, #1
 80072ee:	f200 8113 	bhi.w	8007518 <_scanf_float+0x2a0>
 80072f2:	455e      	cmp	r6, fp
 80072f4:	f200 8105 	bhi.w	8007502 <_scanf_float+0x28a>
 80072f8:	2501      	movs	r5, #1
 80072fa:	4628      	mov	r0, r5
 80072fc:	b007      	add	sp, #28
 80072fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007302:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8007306:	2a0d      	cmp	r2, #13
 8007308:	d8e6      	bhi.n	80072d8 <_scanf_float+0x60>
 800730a:	a101      	add	r1, pc, #4	; (adr r1, 8007310 <_scanf_float+0x98>)
 800730c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007310:	0800744f 	.word	0x0800744f
 8007314:	080072d9 	.word	0x080072d9
 8007318:	080072d9 	.word	0x080072d9
 800731c:	080072d9 	.word	0x080072d9
 8007320:	080074af 	.word	0x080074af
 8007324:	08007487 	.word	0x08007487
 8007328:	080072d9 	.word	0x080072d9
 800732c:	080072d9 	.word	0x080072d9
 8007330:	0800745d 	.word	0x0800745d
 8007334:	080072d9 	.word	0x080072d9
 8007338:	080072d9 	.word	0x080072d9
 800733c:	080072d9 	.word	0x080072d9
 8007340:	080072d9 	.word	0x080072d9
 8007344:	08007415 	.word	0x08007415
 8007348:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800734c:	e7db      	b.n	8007306 <_scanf_float+0x8e>
 800734e:	290e      	cmp	r1, #14
 8007350:	d8c2      	bhi.n	80072d8 <_scanf_float+0x60>
 8007352:	a001      	add	r0, pc, #4	; (adr r0, 8007358 <_scanf_float+0xe0>)
 8007354:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007358:	08007407 	.word	0x08007407
 800735c:	080072d9 	.word	0x080072d9
 8007360:	08007407 	.word	0x08007407
 8007364:	0800749b 	.word	0x0800749b
 8007368:	080072d9 	.word	0x080072d9
 800736c:	080073b5 	.word	0x080073b5
 8007370:	080073f1 	.word	0x080073f1
 8007374:	080073f1 	.word	0x080073f1
 8007378:	080073f1 	.word	0x080073f1
 800737c:	080073f1 	.word	0x080073f1
 8007380:	080073f1 	.word	0x080073f1
 8007384:	080073f1 	.word	0x080073f1
 8007388:	080073f1 	.word	0x080073f1
 800738c:	080073f1 	.word	0x080073f1
 8007390:	080073f1 	.word	0x080073f1
 8007394:	2b6e      	cmp	r3, #110	; 0x6e
 8007396:	d809      	bhi.n	80073ac <_scanf_float+0x134>
 8007398:	2b60      	cmp	r3, #96	; 0x60
 800739a:	d8b2      	bhi.n	8007302 <_scanf_float+0x8a>
 800739c:	2b54      	cmp	r3, #84	; 0x54
 800739e:	d077      	beq.n	8007490 <_scanf_float+0x218>
 80073a0:	2b59      	cmp	r3, #89	; 0x59
 80073a2:	d199      	bne.n	80072d8 <_scanf_float+0x60>
 80073a4:	2d07      	cmp	r5, #7
 80073a6:	d197      	bne.n	80072d8 <_scanf_float+0x60>
 80073a8:	2508      	movs	r5, #8
 80073aa:	e029      	b.n	8007400 <_scanf_float+0x188>
 80073ac:	2b74      	cmp	r3, #116	; 0x74
 80073ae:	d06f      	beq.n	8007490 <_scanf_float+0x218>
 80073b0:	2b79      	cmp	r3, #121	; 0x79
 80073b2:	e7f6      	b.n	80073a2 <_scanf_float+0x12a>
 80073b4:	6821      	ldr	r1, [r4, #0]
 80073b6:	05c8      	lsls	r0, r1, #23
 80073b8:	d51a      	bpl.n	80073f0 <_scanf_float+0x178>
 80073ba:	9b02      	ldr	r3, [sp, #8]
 80073bc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80073c0:	6021      	str	r1, [r4, #0]
 80073c2:	f109 0901 	add.w	r9, r9, #1
 80073c6:	b11b      	cbz	r3, 80073d0 <_scanf_float+0x158>
 80073c8:	3b01      	subs	r3, #1
 80073ca:	3201      	adds	r2, #1
 80073cc:	9302      	str	r3, [sp, #8]
 80073ce:	60a2      	str	r2, [r4, #8]
 80073d0:	68a3      	ldr	r3, [r4, #8]
 80073d2:	3b01      	subs	r3, #1
 80073d4:	60a3      	str	r3, [r4, #8]
 80073d6:	6923      	ldr	r3, [r4, #16]
 80073d8:	3301      	adds	r3, #1
 80073da:	6123      	str	r3, [r4, #16]
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	3b01      	subs	r3, #1
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	607b      	str	r3, [r7, #4]
 80073e4:	f340 8084 	ble.w	80074f0 <_scanf_float+0x278>
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	3301      	adds	r3, #1
 80073ec:	603b      	str	r3, [r7, #0]
 80073ee:	e766      	b.n	80072be <_scanf_float+0x46>
 80073f0:	eb1a 0f05 	cmn.w	sl, r5
 80073f4:	f47f af70 	bne.w	80072d8 <_scanf_float+0x60>
 80073f8:	6822      	ldr	r2, [r4, #0]
 80073fa:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80073fe:	6022      	str	r2, [r4, #0]
 8007400:	f806 3b01 	strb.w	r3, [r6], #1
 8007404:	e7e4      	b.n	80073d0 <_scanf_float+0x158>
 8007406:	6822      	ldr	r2, [r4, #0]
 8007408:	0610      	lsls	r0, r2, #24
 800740a:	f57f af65 	bpl.w	80072d8 <_scanf_float+0x60>
 800740e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007412:	e7f4      	b.n	80073fe <_scanf_float+0x186>
 8007414:	f1ba 0f00 	cmp.w	sl, #0
 8007418:	d10e      	bne.n	8007438 <_scanf_float+0x1c0>
 800741a:	f1b9 0f00 	cmp.w	r9, #0
 800741e:	d10e      	bne.n	800743e <_scanf_float+0x1c6>
 8007420:	6822      	ldr	r2, [r4, #0]
 8007422:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007426:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800742a:	d108      	bne.n	800743e <_scanf_float+0x1c6>
 800742c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007430:	6022      	str	r2, [r4, #0]
 8007432:	f04f 0a01 	mov.w	sl, #1
 8007436:	e7e3      	b.n	8007400 <_scanf_float+0x188>
 8007438:	f1ba 0f02 	cmp.w	sl, #2
 800743c:	d055      	beq.n	80074ea <_scanf_float+0x272>
 800743e:	2d01      	cmp	r5, #1
 8007440:	d002      	beq.n	8007448 <_scanf_float+0x1d0>
 8007442:	2d04      	cmp	r5, #4
 8007444:	f47f af48 	bne.w	80072d8 <_scanf_float+0x60>
 8007448:	3501      	adds	r5, #1
 800744a:	b2ed      	uxtb	r5, r5
 800744c:	e7d8      	b.n	8007400 <_scanf_float+0x188>
 800744e:	f1ba 0f01 	cmp.w	sl, #1
 8007452:	f47f af41 	bne.w	80072d8 <_scanf_float+0x60>
 8007456:	f04f 0a02 	mov.w	sl, #2
 800745a:	e7d1      	b.n	8007400 <_scanf_float+0x188>
 800745c:	b97d      	cbnz	r5, 800747e <_scanf_float+0x206>
 800745e:	f1b9 0f00 	cmp.w	r9, #0
 8007462:	f47f af3c 	bne.w	80072de <_scanf_float+0x66>
 8007466:	6822      	ldr	r2, [r4, #0]
 8007468:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800746c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007470:	f47f af39 	bne.w	80072e6 <_scanf_float+0x6e>
 8007474:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007478:	6022      	str	r2, [r4, #0]
 800747a:	2501      	movs	r5, #1
 800747c:	e7c0      	b.n	8007400 <_scanf_float+0x188>
 800747e:	2d03      	cmp	r5, #3
 8007480:	d0e2      	beq.n	8007448 <_scanf_float+0x1d0>
 8007482:	2d05      	cmp	r5, #5
 8007484:	e7de      	b.n	8007444 <_scanf_float+0x1cc>
 8007486:	2d02      	cmp	r5, #2
 8007488:	f47f af26 	bne.w	80072d8 <_scanf_float+0x60>
 800748c:	2503      	movs	r5, #3
 800748e:	e7b7      	b.n	8007400 <_scanf_float+0x188>
 8007490:	2d06      	cmp	r5, #6
 8007492:	f47f af21 	bne.w	80072d8 <_scanf_float+0x60>
 8007496:	2507      	movs	r5, #7
 8007498:	e7b2      	b.n	8007400 <_scanf_float+0x188>
 800749a:	6822      	ldr	r2, [r4, #0]
 800749c:	0591      	lsls	r1, r2, #22
 800749e:	f57f af1b 	bpl.w	80072d8 <_scanf_float+0x60>
 80074a2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80074a6:	6022      	str	r2, [r4, #0]
 80074a8:	f8cd 9004 	str.w	r9, [sp, #4]
 80074ac:	e7a8      	b.n	8007400 <_scanf_float+0x188>
 80074ae:	6822      	ldr	r2, [r4, #0]
 80074b0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80074b4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80074b8:	d006      	beq.n	80074c8 <_scanf_float+0x250>
 80074ba:	0550      	lsls	r0, r2, #21
 80074bc:	f57f af0c 	bpl.w	80072d8 <_scanf_float+0x60>
 80074c0:	f1b9 0f00 	cmp.w	r9, #0
 80074c4:	f43f af0f 	beq.w	80072e6 <_scanf_float+0x6e>
 80074c8:	0591      	lsls	r1, r2, #22
 80074ca:	bf58      	it	pl
 80074cc:	9901      	ldrpl	r1, [sp, #4]
 80074ce:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80074d2:	bf58      	it	pl
 80074d4:	eba9 0101 	subpl.w	r1, r9, r1
 80074d8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80074dc:	bf58      	it	pl
 80074de:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80074e2:	6022      	str	r2, [r4, #0]
 80074e4:	f04f 0900 	mov.w	r9, #0
 80074e8:	e78a      	b.n	8007400 <_scanf_float+0x188>
 80074ea:	f04f 0a03 	mov.w	sl, #3
 80074ee:	e787      	b.n	8007400 <_scanf_float+0x188>
 80074f0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80074f4:	4639      	mov	r1, r7
 80074f6:	4640      	mov	r0, r8
 80074f8:	4798      	blx	r3
 80074fa:	2800      	cmp	r0, #0
 80074fc:	f43f aedf 	beq.w	80072be <_scanf_float+0x46>
 8007500:	e6ea      	b.n	80072d8 <_scanf_float+0x60>
 8007502:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007506:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800750a:	463a      	mov	r2, r7
 800750c:	4640      	mov	r0, r8
 800750e:	4798      	blx	r3
 8007510:	6923      	ldr	r3, [r4, #16]
 8007512:	3b01      	subs	r3, #1
 8007514:	6123      	str	r3, [r4, #16]
 8007516:	e6ec      	b.n	80072f2 <_scanf_float+0x7a>
 8007518:	1e6b      	subs	r3, r5, #1
 800751a:	2b06      	cmp	r3, #6
 800751c:	d825      	bhi.n	800756a <_scanf_float+0x2f2>
 800751e:	2d02      	cmp	r5, #2
 8007520:	d836      	bhi.n	8007590 <_scanf_float+0x318>
 8007522:	455e      	cmp	r6, fp
 8007524:	f67f aee8 	bls.w	80072f8 <_scanf_float+0x80>
 8007528:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800752c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007530:	463a      	mov	r2, r7
 8007532:	4640      	mov	r0, r8
 8007534:	4798      	blx	r3
 8007536:	6923      	ldr	r3, [r4, #16]
 8007538:	3b01      	subs	r3, #1
 800753a:	6123      	str	r3, [r4, #16]
 800753c:	e7f1      	b.n	8007522 <_scanf_float+0x2aa>
 800753e:	9802      	ldr	r0, [sp, #8]
 8007540:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007544:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8007548:	9002      	str	r0, [sp, #8]
 800754a:	463a      	mov	r2, r7
 800754c:	4640      	mov	r0, r8
 800754e:	4798      	blx	r3
 8007550:	6923      	ldr	r3, [r4, #16]
 8007552:	3b01      	subs	r3, #1
 8007554:	6123      	str	r3, [r4, #16]
 8007556:	f10a 3aff 	add.w	sl, sl, #4294967295
 800755a:	fa5f fa8a 	uxtb.w	sl, sl
 800755e:	f1ba 0f02 	cmp.w	sl, #2
 8007562:	d1ec      	bne.n	800753e <_scanf_float+0x2c6>
 8007564:	3d03      	subs	r5, #3
 8007566:	b2ed      	uxtb	r5, r5
 8007568:	1b76      	subs	r6, r6, r5
 800756a:	6823      	ldr	r3, [r4, #0]
 800756c:	05da      	lsls	r2, r3, #23
 800756e:	d52f      	bpl.n	80075d0 <_scanf_float+0x358>
 8007570:	055b      	lsls	r3, r3, #21
 8007572:	d510      	bpl.n	8007596 <_scanf_float+0x31e>
 8007574:	455e      	cmp	r6, fp
 8007576:	f67f aebf 	bls.w	80072f8 <_scanf_float+0x80>
 800757a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800757e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007582:	463a      	mov	r2, r7
 8007584:	4640      	mov	r0, r8
 8007586:	4798      	blx	r3
 8007588:	6923      	ldr	r3, [r4, #16]
 800758a:	3b01      	subs	r3, #1
 800758c:	6123      	str	r3, [r4, #16]
 800758e:	e7f1      	b.n	8007574 <_scanf_float+0x2fc>
 8007590:	46aa      	mov	sl, r5
 8007592:	9602      	str	r6, [sp, #8]
 8007594:	e7df      	b.n	8007556 <_scanf_float+0x2de>
 8007596:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800759a:	6923      	ldr	r3, [r4, #16]
 800759c:	2965      	cmp	r1, #101	; 0x65
 800759e:	f103 33ff 	add.w	r3, r3, #4294967295
 80075a2:	f106 35ff 	add.w	r5, r6, #4294967295
 80075a6:	6123      	str	r3, [r4, #16]
 80075a8:	d00c      	beq.n	80075c4 <_scanf_float+0x34c>
 80075aa:	2945      	cmp	r1, #69	; 0x45
 80075ac:	d00a      	beq.n	80075c4 <_scanf_float+0x34c>
 80075ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80075b2:	463a      	mov	r2, r7
 80075b4:	4640      	mov	r0, r8
 80075b6:	4798      	blx	r3
 80075b8:	6923      	ldr	r3, [r4, #16]
 80075ba:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80075be:	3b01      	subs	r3, #1
 80075c0:	1eb5      	subs	r5, r6, #2
 80075c2:	6123      	str	r3, [r4, #16]
 80075c4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80075c8:	463a      	mov	r2, r7
 80075ca:	4640      	mov	r0, r8
 80075cc:	4798      	blx	r3
 80075ce:	462e      	mov	r6, r5
 80075d0:	6825      	ldr	r5, [r4, #0]
 80075d2:	f015 0510 	ands.w	r5, r5, #16
 80075d6:	d159      	bne.n	800768c <_scanf_float+0x414>
 80075d8:	7035      	strb	r5, [r6, #0]
 80075da:	6823      	ldr	r3, [r4, #0]
 80075dc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80075e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075e4:	d11b      	bne.n	800761e <_scanf_float+0x3a6>
 80075e6:	9b01      	ldr	r3, [sp, #4]
 80075e8:	454b      	cmp	r3, r9
 80075ea:	eba3 0209 	sub.w	r2, r3, r9
 80075ee:	d123      	bne.n	8007638 <_scanf_float+0x3c0>
 80075f0:	2200      	movs	r2, #0
 80075f2:	4659      	mov	r1, fp
 80075f4:	4640      	mov	r0, r8
 80075f6:	f000 feb1 	bl	800835c <_strtod_r>
 80075fa:	6822      	ldr	r2, [r4, #0]
 80075fc:	9b03      	ldr	r3, [sp, #12]
 80075fe:	f012 0f02 	tst.w	r2, #2
 8007602:	ec57 6b10 	vmov	r6, r7, d0
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	d021      	beq.n	800764e <_scanf_float+0x3d6>
 800760a:	9903      	ldr	r1, [sp, #12]
 800760c:	1d1a      	adds	r2, r3, #4
 800760e:	600a      	str	r2, [r1, #0]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	e9c3 6700 	strd	r6, r7, [r3]
 8007616:	68e3      	ldr	r3, [r4, #12]
 8007618:	3301      	adds	r3, #1
 800761a:	60e3      	str	r3, [r4, #12]
 800761c:	e66d      	b.n	80072fa <_scanf_float+0x82>
 800761e:	9b04      	ldr	r3, [sp, #16]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d0e5      	beq.n	80075f0 <_scanf_float+0x378>
 8007624:	9905      	ldr	r1, [sp, #20]
 8007626:	230a      	movs	r3, #10
 8007628:	462a      	mov	r2, r5
 800762a:	3101      	adds	r1, #1
 800762c:	4640      	mov	r0, r8
 800762e:	f000 ff1d 	bl	800846c <_strtol_r>
 8007632:	9b04      	ldr	r3, [sp, #16]
 8007634:	9e05      	ldr	r6, [sp, #20]
 8007636:	1ac2      	subs	r2, r0, r3
 8007638:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800763c:	429e      	cmp	r6, r3
 800763e:	bf28      	it	cs
 8007640:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8007644:	4912      	ldr	r1, [pc, #72]	; (8007690 <_scanf_float+0x418>)
 8007646:	4630      	mov	r0, r6
 8007648:	f000 f844 	bl	80076d4 <siprintf>
 800764c:	e7d0      	b.n	80075f0 <_scanf_float+0x378>
 800764e:	9903      	ldr	r1, [sp, #12]
 8007650:	f012 0f04 	tst.w	r2, #4
 8007654:	f103 0204 	add.w	r2, r3, #4
 8007658:	600a      	str	r2, [r1, #0]
 800765a:	d1d9      	bne.n	8007610 <_scanf_float+0x398>
 800765c:	f8d3 8000 	ldr.w	r8, [r3]
 8007660:	ee10 2a10 	vmov	r2, s0
 8007664:	ee10 0a10 	vmov	r0, s0
 8007668:	463b      	mov	r3, r7
 800766a:	4639      	mov	r1, r7
 800766c:	f7f9 fa6e 	bl	8000b4c <__aeabi_dcmpun>
 8007670:	b128      	cbz	r0, 800767e <_scanf_float+0x406>
 8007672:	4808      	ldr	r0, [pc, #32]	; (8007694 <_scanf_float+0x41c>)
 8007674:	f000 f828 	bl	80076c8 <nanf>
 8007678:	ed88 0a00 	vstr	s0, [r8]
 800767c:	e7cb      	b.n	8007616 <_scanf_float+0x39e>
 800767e:	4630      	mov	r0, r6
 8007680:	4639      	mov	r1, r7
 8007682:	f7f9 fac1 	bl	8000c08 <__aeabi_d2f>
 8007686:	f8c8 0000 	str.w	r0, [r8]
 800768a:	e7c4      	b.n	8007616 <_scanf_float+0x39e>
 800768c:	2500      	movs	r5, #0
 800768e:	e634      	b.n	80072fa <_scanf_float+0x82>
 8007690:	0800b31c 	.word	0x0800b31c
 8007694:	0800b790 	.word	0x0800b790

08007698 <iprintf>:
 8007698:	b40f      	push	{r0, r1, r2, r3}
 800769a:	4b0a      	ldr	r3, [pc, #40]	; (80076c4 <iprintf+0x2c>)
 800769c:	b513      	push	{r0, r1, r4, lr}
 800769e:	681c      	ldr	r4, [r3, #0]
 80076a0:	b124      	cbz	r4, 80076ac <iprintf+0x14>
 80076a2:	69a3      	ldr	r3, [r4, #24]
 80076a4:	b913      	cbnz	r3, 80076ac <iprintf+0x14>
 80076a6:	4620      	mov	r0, r4
 80076a8:	f001 ff36 	bl	8009518 <__sinit>
 80076ac:	ab05      	add	r3, sp, #20
 80076ae:	9a04      	ldr	r2, [sp, #16]
 80076b0:	68a1      	ldr	r1, [r4, #8]
 80076b2:	9301      	str	r3, [sp, #4]
 80076b4:	4620      	mov	r0, r4
 80076b6:	f003 faff 	bl	800acb8 <_vfiprintf_r>
 80076ba:	b002      	add	sp, #8
 80076bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076c0:	b004      	add	sp, #16
 80076c2:	4770      	bx	lr
 80076c4:	200001d4 	.word	0x200001d4

080076c8 <nanf>:
 80076c8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80076d0 <nanf+0x8>
 80076cc:	4770      	bx	lr
 80076ce:	bf00      	nop
 80076d0:	7fc00000 	.word	0x7fc00000

080076d4 <siprintf>:
 80076d4:	b40e      	push	{r1, r2, r3}
 80076d6:	b500      	push	{lr}
 80076d8:	b09c      	sub	sp, #112	; 0x70
 80076da:	ab1d      	add	r3, sp, #116	; 0x74
 80076dc:	9002      	str	r0, [sp, #8]
 80076de:	9006      	str	r0, [sp, #24]
 80076e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80076e4:	4809      	ldr	r0, [pc, #36]	; (800770c <siprintf+0x38>)
 80076e6:	9107      	str	r1, [sp, #28]
 80076e8:	9104      	str	r1, [sp, #16]
 80076ea:	4909      	ldr	r1, [pc, #36]	; (8007710 <siprintf+0x3c>)
 80076ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80076f0:	9105      	str	r1, [sp, #20]
 80076f2:	6800      	ldr	r0, [r0, #0]
 80076f4:	9301      	str	r3, [sp, #4]
 80076f6:	a902      	add	r1, sp, #8
 80076f8:	f003 f9b4 	bl	800aa64 <_svfiprintf_r>
 80076fc:	9b02      	ldr	r3, [sp, #8]
 80076fe:	2200      	movs	r2, #0
 8007700:	701a      	strb	r2, [r3, #0]
 8007702:	b01c      	add	sp, #112	; 0x70
 8007704:	f85d eb04 	ldr.w	lr, [sp], #4
 8007708:	b003      	add	sp, #12
 800770a:	4770      	bx	lr
 800770c:	200001d4 	.word	0x200001d4
 8007710:	ffff0208 	.word	0xffff0208

08007714 <sulp>:
 8007714:	b570      	push	{r4, r5, r6, lr}
 8007716:	4604      	mov	r4, r0
 8007718:	460d      	mov	r5, r1
 800771a:	ec45 4b10 	vmov	d0, r4, r5
 800771e:	4616      	mov	r6, r2
 8007720:	f002 fefe 	bl	800a520 <__ulp>
 8007724:	ec51 0b10 	vmov	r0, r1, d0
 8007728:	b17e      	cbz	r6, 800774a <sulp+0x36>
 800772a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800772e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007732:	2b00      	cmp	r3, #0
 8007734:	dd09      	ble.n	800774a <sulp+0x36>
 8007736:	051b      	lsls	r3, r3, #20
 8007738:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800773c:	2400      	movs	r4, #0
 800773e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007742:	4622      	mov	r2, r4
 8007744:	462b      	mov	r3, r5
 8007746:	f7f8 ff67 	bl	8000618 <__aeabi_dmul>
 800774a:	bd70      	pop	{r4, r5, r6, pc}
 800774c:	0000      	movs	r0, r0
	...

08007750 <_strtod_l>:
 8007750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007754:	ed2d 8b02 	vpush	{d8}
 8007758:	b09d      	sub	sp, #116	; 0x74
 800775a:	461f      	mov	r7, r3
 800775c:	2300      	movs	r3, #0
 800775e:	9318      	str	r3, [sp, #96]	; 0x60
 8007760:	4ba2      	ldr	r3, [pc, #648]	; (80079ec <_strtod_l+0x29c>)
 8007762:	9213      	str	r2, [sp, #76]	; 0x4c
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	9305      	str	r3, [sp, #20]
 8007768:	4604      	mov	r4, r0
 800776a:	4618      	mov	r0, r3
 800776c:	4688      	mov	r8, r1
 800776e:	f7f8 fd3f 	bl	80001f0 <strlen>
 8007772:	f04f 0a00 	mov.w	sl, #0
 8007776:	4605      	mov	r5, r0
 8007778:	f04f 0b00 	mov.w	fp, #0
 800777c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007780:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007782:	781a      	ldrb	r2, [r3, #0]
 8007784:	2a2b      	cmp	r2, #43	; 0x2b
 8007786:	d04e      	beq.n	8007826 <_strtod_l+0xd6>
 8007788:	d83b      	bhi.n	8007802 <_strtod_l+0xb2>
 800778a:	2a0d      	cmp	r2, #13
 800778c:	d834      	bhi.n	80077f8 <_strtod_l+0xa8>
 800778e:	2a08      	cmp	r2, #8
 8007790:	d834      	bhi.n	80077fc <_strtod_l+0xac>
 8007792:	2a00      	cmp	r2, #0
 8007794:	d03e      	beq.n	8007814 <_strtod_l+0xc4>
 8007796:	2300      	movs	r3, #0
 8007798:	930a      	str	r3, [sp, #40]	; 0x28
 800779a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800779c:	7833      	ldrb	r3, [r6, #0]
 800779e:	2b30      	cmp	r3, #48	; 0x30
 80077a0:	f040 80b0 	bne.w	8007904 <_strtod_l+0x1b4>
 80077a4:	7873      	ldrb	r3, [r6, #1]
 80077a6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80077aa:	2b58      	cmp	r3, #88	; 0x58
 80077ac:	d168      	bne.n	8007880 <_strtod_l+0x130>
 80077ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077b0:	9301      	str	r3, [sp, #4]
 80077b2:	ab18      	add	r3, sp, #96	; 0x60
 80077b4:	9702      	str	r7, [sp, #8]
 80077b6:	9300      	str	r3, [sp, #0]
 80077b8:	4a8d      	ldr	r2, [pc, #564]	; (80079f0 <_strtod_l+0x2a0>)
 80077ba:	ab19      	add	r3, sp, #100	; 0x64
 80077bc:	a917      	add	r1, sp, #92	; 0x5c
 80077be:	4620      	mov	r0, r4
 80077c0:	f001 ffae 	bl	8009720 <__gethex>
 80077c4:	f010 0707 	ands.w	r7, r0, #7
 80077c8:	4605      	mov	r5, r0
 80077ca:	d005      	beq.n	80077d8 <_strtod_l+0x88>
 80077cc:	2f06      	cmp	r7, #6
 80077ce:	d12c      	bne.n	800782a <_strtod_l+0xda>
 80077d0:	3601      	adds	r6, #1
 80077d2:	2300      	movs	r3, #0
 80077d4:	9617      	str	r6, [sp, #92]	; 0x5c
 80077d6:	930a      	str	r3, [sp, #40]	; 0x28
 80077d8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80077da:	2b00      	cmp	r3, #0
 80077dc:	f040 8590 	bne.w	8008300 <_strtod_l+0xbb0>
 80077e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077e2:	b1eb      	cbz	r3, 8007820 <_strtod_l+0xd0>
 80077e4:	4652      	mov	r2, sl
 80077e6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80077ea:	ec43 2b10 	vmov	d0, r2, r3
 80077ee:	b01d      	add	sp, #116	; 0x74
 80077f0:	ecbd 8b02 	vpop	{d8}
 80077f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077f8:	2a20      	cmp	r2, #32
 80077fa:	d1cc      	bne.n	8007796 <_strtod_l+0x46>
 80077fc:	3301      	adds	r3, #1
 80077fe:	9317      	str	r3, [sp, #92]	; 0x5c
 8007800:	e7be      	b.n	8007780 <_strtod_l+0x30>
 8007802:	2a2d      	cmp	r2, #45	; 0x2d
 8007804:	d1c7      	bne.n	8007796 <_strtod_l+0x46>
 8007806:	2201      	movs	r2, #1
 8007808:	920a      	str	r2, [sp, #40]	; 0x28
 800780a:	1c5a      	adds	r2, r3, #1
 800780c:	9217      	str	r2, [sp, #92]	; 0x5c
 800780e:	785b      	ldrb	r3, [r3, #1]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d1c2      	bne.n	800779a <_strtod_l+0x4a>
 8007814:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007816:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800781a:	2b00      	cmp	r3, #0
 800781c:	f040 856e 	bne.w	80082fc <_strtod_l+0xbac>
 8007820:	4652      	mov	r2, sl
 8007822:	465b      	mov	r3, fp
 8007824:	e7e1      	b.n	80077ea <_strtod_l+0x9a>
 8007826:	2200      	movs	r2, #0
 8007828:	e7ee      	b.n	8007808 <_strtod_l+0xb8>
 800782a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800782c:	b13a      	cbz	r2, 800783e <_strtod_l+0xee>
 800782e:	2135      	movs	r1, #53	; 0x35
 8007830:	a81a      	add	r0, sp, #104	; 0x68
 8007832:	f002 ff80 	bl	800a736 <__copybits>
 8007836:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007838:	4620      	mov	r0, r4
 800783a:	f002 fb3f 	bl	8009ebc <_Bfree>
 800783e:	3f01      	subs	r7, #1
 8007840:	2f04      	cmp	r7, #4
 8007842:	d806      	bhi.n	8007852 <_strtod_l+0x102>
 8007844:	e8df f007 	tbb	[pc, r7]
 8007848:	1714030a 	.word	0x1714030a
 800784c:	0a          	.byte	0x0a
 800784d:	00          	.byte	0x00
 800784e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8007852:	0728      	lsls	r0, r5, #28
 8007854:	d5c0      	bpl.n	80077d8 <_strtod_l+0x88>
 8007856:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800785a:	e7bd      	b.n	80077d8 <_strtod_l+0x88>
 800785c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8007860:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007862:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007866:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800786a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800786e:	e7f0      	b.n	8007852 <_strtod_l+0x102>
 8007870:	f8df b180 	ldr.w	fp, [pc, #384]	; 80079f4 <_strtod_l+0x2a4>
 8007874:	e7ed      	b.n	8007852 <_strtod_l+0x102>
 8007876:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800787a:	f04f 3aff 	mov.w	sl, #4294967295
 800787e:	e7e8      	b.n	8007852 <_strtod_l+0x102>
 8007880:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007882:	1c5a      	adds	r2, r3, #1
 8007884:	9217      	str	r2, [sp, #92]	; 0x5c
 8007886:	785b      	ldrb	r3, [r3, #1]
 8007888:	2b30      	cmp	r3, #48	; 0x30
 800788a:	d0f9      	beq.n	8007880 <_strtod_l+0x130>
 800788c:	2b00      	cmp	r3, #0
 800788e:	d0a3      	beq.n	80077d8 <_strtod_l+0x88>
 8007890:	2301      	movs	r3, #1
 8007892:	f04f 0900 	mov.w	r9, #0
 8007896:	9304      	str	r3, [sp, #16]
 8007898:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800789a:	9308      	str	r3, [sp, #32]
 800789c:	f8cd 901c 	str.w	r9, [sp, #28]
 80078a0:	464f      	mov	r7, r9
 80078a2:	220a      	movs	r2, #10
 80078a4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80078a6:	7806      	ldrb	r6, [r0, #0]
 80078a8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80078ac:	b2d9      	uxtb	r1, r3
 80078ae:	2909      	cmp	r1, #9
 80078b0:	d92a      	bls.n	8007908 <_strtod_l+0x1b8>
 80078b2:	9905      	ldr	r1, [sp, #20]
 80078b4:	462a      	mov	r2, r5
 80078b6:	f003 fb8a 	bl	800afce <strncmp>
 80078ba:	b398      	cbz	r0, 8007924 <_strtod_l+0x1d4>
 80078bc:	2000      	movs	r0, #0
 80078be:	4632      	mov	r2, r6
 80078c0:	463d      	mov	r5, r7
 80078c2:	9005      	str	r0, [sp, #20]
 80078c4:	4603      	mov	r3, r0
 80078c6:	2a65      	cmp	r2, #101	; 0x65
 80078c8:	d001      	beq.n	80078ce <_strtod_l+0x17e>
 80078ca:	2a45      	cmp	r2, #69	; 0x45
 80078cc:	d118      	bne.n	8007900 <_strtod_l+0x1b0>
 80078ce:	b91d      	cbnz	r5, 80078d8 <_strtod_l+0x188>
 80078d0:	9a04      	ldr	r2, [sp, #16]
 80078d2:	4302      	orrs	r2, r0
 80078d4:	d09e      	beq.n	8007814 <_strtod_l+0xc4>
 80078d6:	2500      	movs	r5, #0
 80078d8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 80078dc:	f108 0201 	add.w	r2, r8, #1
 80078e0:	9217      	str	r2, [sp, #92]	; 0x5c
 80078e2:	f898 2001 	ldrb.w	r2, [r8, #1]
 80078e6:	2a2b      	cmp	r2, #43	; 0x2b
 80078e8:	d075      	beq.n	80079d6 <_strtod_l+0x286>
 80078ea:	2a2d      	cmp	r2, #45	; 0x2d
 80078ec:	d07b      	beq.n	80079e6 <_strtod_l+0x296>
 80078ee:	f04f 0c00 	mov.w	ip, #0
 80078f2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80078f6:	2909      	cmp	r1, #9
 80078f8:	f240 8082 	bls.w	8007a00 <_strtod_l+0x2b0>
 80078fc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007900:	2600      	movs	r6, #0
 8007902:	e09d      	b.n	8007a40 <_strtod_l+0x2f0>
 8007904:	2300      	movs	r3, #0
 8007906:	e7c4      	b.n	8007892 <_strtod_l+0x142>
 8007908:	2f08      	cmp	r7, #8
 800790a:	bfd8      	it	le
 800790c:	9907      	ldrle	r1, [sp, #28]
 800790e:	f100 0001 	add.w	r0, r0, #1
 8007912:	bfda      	itte	le
 8007914:	fb02 3301 	mlale	r3, r2, r1, r3
 8007918:	9307      	strle	r3, [sp, #28]
 800791a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800791e:	3701      	adds	r7, #1
 8007920:	9017      	str	r0, [sp, #92]	; 0x5c
 8007922:	e7bf      	b.n	80078a4 <_strtod_l+0x154>
 8007924:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007926:	195a      	adds	r2, r3, r5
 8007928:	9217      	str	r2, [sp, #92]	; 0x5c
 800792a:	5d5a      	ldrb	r2, [r3, r5]
 800792c:	2f00      	cmp	r7, #0
 800792e:	d037      	beq.n	80079a0 <_strtod_l+0x250>
 8007930:	9005      	str	r0, [sp, #20]
 8007932:	463d      	mov	r5, r7
 8007934:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007938:	2b09      	cmp	r3, #9
 800793a:	d912      	bls.n	8007962 <_strtod_l+0x212>
 800793c:	2301      	movs	r3, #1
 800793e:	e7c2      	b.n	80078c6 <_strtod_l+0x176>
 8007940:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007942:	1c5a      	adds	r2, r3, #1
 8007944:	9217      	str	r2, [sp, #92]	; 0x5c
 8007946:	785a      	ldrb	r2, [r3, #1]
 8007948:	3001      	adds	r0, #1
 800794a:	2a30      	cmp	r2, #48	; 0x30
 800794c:	d0f8      	beq.n	8007940 <_strtod_l+0x1f0>
 800794e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007952:	2b08      	cmp	r3, #8
 8007954:	f200 84d9 	bhi.w	800830a <_strtod_l+0xbba>
 8007958:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800795a:	9005      	str	r0, [sp, #20]
 800795c:	2000      	movs	r0, #0
 800795e:	9308      	str	r3, [sp, #32]
 8007960:	4605      	mov	r5, r0
 8007962:	3a30      	subs	r2, #48	; 0x30
 8007964:	f100 0301 	add.w	r3, r0, #1
 8007968:	d014      	beq.n	8007994 <_strtod_l+0x244>
 800796a:	9905      	ldr	r1, [sp, #20]
 800796c:	4419      	add	r1, r3
 800796e:	9105      	str	r1, [sp, #20]
 8007970:	462b      	mov	r3, r5
 8007972:	eb00 0e05 	add.w	lr, r0, r5
 8007976:	210a      	movs	r1, #10
 8007978:	4573      	cmp	r3, lr
 800797a:	d113      	bne.n	80079a4 <_strtod_l+0x254>
 800797c:	182b      	adds	r3, r5, r0
 800797e:	2b08      	cmp	r3, #8
 8007980:	f105 0501 	add.w	r5, r5, #1
 8007984:	4405      	add	r5, r0
 8007986:	dc1c      	bgt.n	80079c2 <_strtod_l+0x272>
 8007988:	9907      	ldr	r1, [sp, #28]
 800798a:	230a      	movs	r3, #10
 800798c:	fb03 2301 	mla	r3, r3, r1, r2
 8007990:	9307      	str	r3, [sp, #28]
 8007992:	2300      	movs	r3, #0
 8007994:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007996:	1c51      	adds	r1, r2, #1
 8007998:	9117      	str	r1, [sp, #92]	; 0x5c
 800799a:	7852      	ldrb	r2, [r2, #1]
 800799c:	4618      	mov	r0, r3
 800799e:	e7c9      	b.n	8007934 <_strtod_l+0x1e4>
 80079a0:	4638      	mov	r0, r7
 80079a2:	e7d2      	b.n	800794a <_strtod_l+0x1fa>
 80079a4:	2b08      	cmp	r3, #8
 80079a6:	dc04      	bgt.n	80079b2 <_strtod_l+0x262>
 80079a8:	9e07      	ldr	r6, [sp, #28]
 80079aa:	434e      	muls	r6, r1
 80079ac:	9607      	str	r6, [sp, #28]
 80079ae:	3301      	adds	r3, #1
 80079b0:	e7e2      	b.n	8007978 <_strtod_l+0x228>
 80079b2:	f103 0c01 	add.w	ip, r3, #1
 80079b6:	f1bc 0f10 	cmp.w	ip, #16
 80079ba:	bfd8      	it	le
 80079bc:	fb01 f909 	mulle.w	r9, r1, r9
 80079c0:	e7f5      	b.n	80079ae <_strtod_l+0x25e>
 80079c2:	2d10      	cmp	r5, #16
 80079c4:	bfdc      	itt	le
 80079c6:	230a      	movle	r3, #10
 80079c8:	fb03 2909 	mlale	r9, r3, r9, r2
 80079cc:	e7e1      	b.n	8007992 <_strtod_l+0x242>
 80079ce:	2300      	movs	r3, #0
 80079d0:	9305      	str	r3, [sp, #20]
 80079d2:	2301      	movs	r3, #1
 80079d4:	e77c      	b.n	80078d0 <_strtod_l+0x180>
 80079d6:	f04f 0c00 	mov.w	ip, #0
 80079da:	f108 0202 	add.w	r2, r8, #2
 80079de:	9217      	str	r2, [sp, #92]	; 0x5c
 80079e0:	f898 2002 	ldrb.w	r2, [r8, #2]
 80079e4:	e785      	b.n	80078f2 <_strtod_l+0x1a2>
 80079e6:	f04f 0c01 	mov.w	ip, #1
 80079ea:	e7f6      	b.n	80079da <_strtod_l+0x28a>
 80079ec:	0800b5d4 	.word	0x0800b5d4
 80079f0:	0800b324 	.word	0x0800b324
 80079f4:	7ff00000 	.word	0x7ff00000
 80079f8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80079fa:	1c51      	adds	r1, r2, #1
 80079fc:	9117      	str	r1, [sp, #92]	; 0x5c
 80079fe:	7852      	ldrb	r2, [r2, #1]
 8007a00:	2a30      	cmp	r2, #48	; 0x30
 8007a02:	d0f9      	beq.n	80079f8 <_strtod_l+0x2a8>
 8007a04:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007a08:	2908      	cmp	r1, #8
 8007a0a:	f63f af79 	bhi.w	8007900 <_strtod_l+0x1b0>
 8007a0e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8007a12:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007a14:	9206      	str	r2, [sp, #24]
 8007a16:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007a18:	1c51      	adds	r1, r2, #1
 8007a1a:	9117      	str	r1, [sp, #92]	; 0x5c
 8007a1c:	7852      	ldrb	r2, [r2, #1]
 8007a1e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8007a22:	2e09      	cmp	r6, #9
 8007a24:	d937      	bls.n	8007a96 <_strtod_l+0x346>
 8007a26:	9e06      	ldr	r6, [sp, #24]
 8007a28:	1b89      	subs	r1, r1, r6
 8007a2a:	2908      	cmp	r1, #8
 8007a2c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8007a30:	dc02      	bgt.n	8007a38 <_strtod_l+0x2e8>
 8007a32:	4576      	cmp	r6, lr
 8007a34:	bfa8      	it	ge
 8007a36:	4676      	movge	r6, lr
 8007a38:	f1bc 0f00 	cmp.w	ip, #0
 8007a3c:	d000      	beq.n	8007a40 <_strtod_l+0x2f0>
 8007a3e:	4276      	negs	r6, r6
 8007a40:	2d00      	cmp	r5, #0
 8007a42:	d14d      	bne.n	8007ae0 <_strtod_l+0x390>
 8007a44:	9904      	ldr	r1, [sp, #16]
 8007a46:	4301      	orrs	r1, r0
 8007a48:	f47f aec6 	bne.w	80077d8 <_strtod_l+0x88>
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	f47f aee1 	bne.w	8007814 <_strtod_l+0xc4>
 8007a52:	2a69      	cmp	r2, #105	; 0x69
 8007a54:	d027      	beq.n	8007aa6 <_strtod_l+0x356>
 8007a56:	dc24      	bgt.n	8007aa2 <_strtod_l+0x352>
 8007a58:	2a49      	cmp	r2, #73	; 0x49
 8007a5a:	d024      	beq.n	8007aa6 <_strtod_l+0x356>
 8007a5c:	2a4e      	cmp	r2, #78	; 0x4e
 8007a5e:	f47f aed9 	bne.w	8007814 <_strtod_l+0xc4>
 8007a62:	499f      	ldr	r1, [pc, #636]	; (8007ce0 <_strtod_l+0x590>)
 8007a64:	a817      	add	r0, sp, #92	; 0x5c
 8007a66:	f002 f8b3 	bl	8009bd0 <__match>
 8007a6a:	2800      	cmp	r0, #0
 8007a6c:	f43f aed2 	beq.w	8007814 <_strtod_l+0xc4>
 8007a70:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007a72:	781b      	ldrb	r3, [r3, #0]
 8007a74:	2b28      	cmp	r3, #40	; 0x28
 8007a76:	d12d      	bne.n	8007ad4 <_strtod_l+0x384>
 8007a78:	499a      	ldr	r1, [pc, #616]	; (8007ce4 <_strtod_l+0x594>)
 8007a7a:	aa1a      	add	r2, sp, #104	; 0x68
 8007a7c:	a817      	add	r0, sp, #92	; 0x5c
 8007a7e:	f002 f8bb 	bl	8009bf8 <__hexnan>
 8007a82:	2805      	cmp	r0, #5
 8007a84:	d126      	bne.n	8007ad4 <_strtod_l+0x384>
 8007a86:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007a88:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8007a8c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8007a90:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8007a94:	e6a0      	b.n	80077d8 <_strtod_l+0x88>
 8007a96:	210a      	movs	r1, #10
 8007a98:	fb01 2e0e 	mla	lr, r1, lr, r2
 8007a9c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8007aa0:	e7b9      	b.n	8007a16 <_strtod_l+0x2c6>
 8007aa2:	2a6e      	cmp	r2, #110	; 0x6e
 8007aa4:	e7db      	b.n	8007a5e <_strtod_l+0x30e>
 8007aa6:	4990      	ldr	r1, [pc, #576]	; (8007ce8 <_strtod_l+0x598>)
 8007aa8:	a817      	add	r0, sp, #92	; 0x5c
 8007aaa:	f002 f891 	bl	8009bd0 <__match>
 8007aae:	2800      	cmp	r0, #0
 8007ab0:	f43f aeb0 	beq.w	8007814 <_strtod_l+0xc4>
 8007ab4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007ab6:	498d      	ldr	r1, [pc, #564]	; (8007cec <_strtod_l+0x59c>)
 8007ab8:	3b01      	subs	r3, #1
 8007aba:	a817      	add	r0, sp, #92	; 0x5c
 8007abc:	9317      	str	r3, [sp, #92]	; 0x5c
 8007abe:	f002 f887 	bl	8009bd0 <__match>
 8007ac2:	b910      	cbnz	r0, 8007aca <_strtod_l+0x37a>
 8007ac4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007ac6:	3301      	adds	r3, #1
 8007ac8:	9317      	str	r3, [sp, #92]	; 0x5c
 8007aca:	f8df b230 	ldr.w	fp, [pc, #560]	; 8007cfc <_strtod_l+0x5ac>
 8007ace:	f04f 0a00 	mov.w	sl, #0
 8007ad2:	e681      	b.n	80077d8 <_strtod_l+0x88>
 8007ad4:	4886      	ldr	r0, [pc, #536]	; (8007cf0 <_strtod_l+0x5a0>)
 8007ad6:	f003 fa1f 	bl	800af18 <nan>
 8007ada:	ec5b ab10 	vmov	sl, fp, d0
 8007ade:	e67b      	b.n	80077d8 <_strtod_l+0x88>
 8007ae0:	9b05      	ldr	r3, [sp, #20]
 8007ae2:	9807      	ldr	r0, [sp, #28]
 8007ae4:	1af3      	subs	r3, r6, r3
 8007ae6:	2f00      	cmp	r7, #0
 8007ae8:	bf08      	it	eq
 8007aea:	462f      	moveq	r7, r5
 8007aec:	2d10      	cmp	r5, #16
 8007aee:	9306      	str	r3, [sp, #24]
 8007af0:	46a8      	mov	r8, r5
 8007af2:	bfa8      	it	ge
 8007af4:	f04f 0810 	movge.w	r8, #16
 8007af8:	f7f8 fd14 	bl	8000524 <__aeabi_ui2d>
 8007afc:	2d09      	cmp	r5, #9
 8007afe:	4682      	mov	sl, r0
 8007b00:	468b      	mov	fp, r1
 8007b02:	dd13      	ble.n	8007b2c <_strtod_l+0x3dc>
 8007b04:	4b7b      	ldr	r3, [pc, #492]	; (8007cf4 <_strtod_l+0x5a4>)
 8007b06:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8007b0a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007b0e:	f7f8 fd83 	bl	8000618 <__aeabi_dmul>
 8007b12:	4682      	mov	sl, r0
 8007b14:	4648      	mov	r0, r9
 8007b16:	468b      	mov	fp, r1
 8007b18:	f7f8 fd04 	bl	8000524 <__aeabi_ui2d>
 8007b1c:	4602      	mov	r2, r0
 8007b1e:	460b      	mov	r3, r1
 8007b20:	4650      	mov	r0, sl
 8007b22:	4659      	mov	r1, fp
 8007b24:	f7f8 fbc2 	bl	80002ac <__adddf3>
 8007b28:	4682      	mov	sl, r0
 8007b2a:	468b      	mov	fp, r1
 8007b2c:	2d0f      	cmp	r5, #15
 8007b2e:	dc38      	bgt.n	8007ba2 <_strtod_l+0x452>
 8007b30:	9b06      	ldr	r3, [sp, #24]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	f43f ae50 	beq.w	80077d8 <_strtod_l+0x88>
 8007b38:	dd24      	ble.n	8007b84 <_strtod_l+0x434>
 8007b3a:	2b16      	cmp	r3, #22
 8007b3c:	dc0b      	bgt.n	8007b56 <_strtod_l+0x406>
 8007b3e:	496d      	ldr	r1, [pc, #436]	; (8007cf4 <_strtod_l+0x5a4>)
 8007b40:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007b44:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b48:	4652      	mov	r2, sl
 8007b4a:	465b      	mov	r3, fp
 8007b4c:	f7f8 fd64 	bl	8000618 <__aeabi_dmul>
 8007b50:	4682      	mov	sl, r0
 8007b52:	468b      	mov	fp, r1
 8007b54:	e640      	b.n	80077d8 <_strtod_l+0x88>
 8007b56:	9a06      	ldr	r2, [sp, #24]
 8007b58:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	db20      	blt.n	8007ba2 <_strtod_l+0x452>
 8007b60:	4c64      	ldr	r4, [pc, #400]	; (8007cf4 <_strtod_l+0x5a4>)
 8007b62:	f1c5 050f 	rsb	r5, r5, #15
 8007b66:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007b6a:	4652      	mov	r2, sl
 8007b6c:	465b      	mov	r3, fp
 8007b6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b72:	f7f8 fd51 	bl	8000618 <__aeabi_dmul>
 8007b76:	9b06      	ldr	r3, [sp, #24]
 8007b78:	1b5d      	subs	r5, r3, r5
 8007b7a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007b7e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007b82:	e7e3      	b.n	8007b4c <_strtod_l+0x3fc>
 8007b84:	9b06      	ldr	r3, [sp, #24]
 8007b86:	3316      	adds	r3, #22
 8007b88:	db0b      	blt.n	8007ba2 <_strtod_l+0x452>
 8007b8a:	9b05      	ldr	r3, [sp, #20]
 8007b8c:	1b9e      	subs	r6, r3, r6
 8007b8e:	4b59      	ldr	r3, [pc, #356]	; (8007cf4 <_strtod_l+0x5a4>)
 8007b90:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8007b94:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007b98:	4650      	mov	r0, sl
 8007b9a:	4659      	mov	r1, fp
 8007b9c:	f7f8 fe66 	bl	800086c <__aeabi_ddiv>
 8007ba0:	e7d6      	b.n	8007b50 <_strtod_l+0x400>
 8007ba2:	9b06      	ldr	r3, [sp, #24]
 8007ba4:	eba5 0808 	sub.w	r8, r5, r8
 8007ba8:	4498      	add	r8, r3
 8007baa:	f1b8 0f00 	cmp.w	r8, #0
 8007bae:	dd74      	ble.n	8007c9a <_strtod_l+0x54a>
 8007bb0:	f018 030f 	ands.w	r3, r8, #15
 8007bb4:	d00a      	beq.n	8007bcc <_strtod_l+0x47c>
 8007bb6:	494f      	ldr	r1, [pc, #316]	; (8007cf4 <_strtod_l+0x5a4>)
 8007bb8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007bbc:	4652      	mov	r2, sl
 8007bbe:	465b      	mov	r3, fp
 8007bc0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007bc4:	f7f8 fd28 	bl	8000618 <__aeabi_dmul>
 8007bc8:	4682      	mov	sl, r0
 8007bca:	468b      	mov	fp, r1
 8007bcc:	f038 080f 	bics.w	r8, r8, #15
 8007bd0:	d04f      	beq.n	8007c72 <_strtod_l+0x522>
 8007bd2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8007bd6:	dd22      	ble.n	8007c1e <_strtod_l+0x4ce>
 8007bd8:	2500      	movs	r5, #0
 8007bda:	462e      	mov	r6, r5
 8007bdc:	9507      	str	r5, [sp, #28]
 8007bde:	9505      	str	r5, [sp, #20]
 8007be0:	2322      	movs	r3, #34	; 0x22
 8007be2:	f8df b118 	ldr.w	fp, [pc, #280]	; 8007cfc <_strtod_l+0x5ac>
 8007be6:	6023      	str	r3, [r4, #0]
 8007be8:	f04f 0a00 	mov.w	sl, #0
 8007bec:	9b07      	ldr	r3, [sp, #28]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	f43f adf2 	beq.w	80077d8 <_strtod_l+0x88>
 8007bf4:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007bf6:	4620      	mov	r0, r4
 8007bf8:	f002 f960 	bl	8009ebc <_Bfree>
 8007bfc:	9905      	ldr	r1, [sp, #20]
 8007bfe:	4620      	mov	r0, r4
 8007c00:	f002 f95c 	bl	8009ebc <_Bfree>
 8007c04:	4631      	mov	r1, r6
 8007c06:	4620      	mov	r0, r4
 8007c08:	f002 f958 	bl	8009ebc <_Bfree>
 8007c0c:	9907      	ldr	r1, [sp, #28]
 8007c0e:	4620      	mov	r0, r4
 8007c10:	f002 f954 	bl	8009ebc <_Bfree>
 8007c14:	4629      	mov	r1, r5
 8007c16:	4620      	mov	r0, r4
 8007c18:	f002 f950 	bl	8009ebc <_Bfree>
 8007c1c:	e5dc      	b.n	80077d8 <_strtod_l+0x88>
 8007c1e:	4b36      	ldr	r3, [pc, #216]	; (8007cf8 <_strtod_l+0x5a8>)
 8007c20:	9304      	str	r3, [sp, #16]
 8007c22:	2300      	movs	r3, #0
 8007c24:	ea4f 1828 	mov.w	r8, r8, asr #4
 8007c28:	4650      	mov	r0, sl
 8007c2a:	4659      	mov	r1, fp
 8007c2c:	4699      	mov	r9, r3
 8007c2e:	f1b8 0f01 	cmp.w	r8, #1
 8007c32:	dc21      	bgt.n	8007c78 <_strtod_l+0x528>
 8007c34:	b10b      	cbz	r3, 8007c3a <_strtod_l+0x4ea>
 8007c36:	4682      	mov	sl, r0
 8007c38:	468b      	mov	fp, r1
 8007c3a:	4b2f      	ldr	r3, [pc, #188]	; (8007cf8 <_strtod_l+0x5a8>)
 8007c3c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8007c40:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8007c44:	4652      	mov	r2, sl
 8007c46:	465b      	mov	r3, fp
 8007c48:	e9d9 0100 	ldrd	r0, r1, [r9]
 8007c4c:	f7f8 fce4 	bl	8000618 <__aeabi_dmul>
 8007c50:	4b2a      	ldr	r3, [pc, #168]	; (8007cfc <_strtod_l+0x5ac>)
 8007c52:	460a      	mov	r2, r1
 8007c54:	400b      	ands	r3, r1
 8007c56:	492a      	ldr	r1, [pc, #168]	; (8007d00 <_strtod_l+0x5b0>)
 8007c58:	428b      	cmp	r3, r1
 8007c5a:	4682      	mov	sl, r0
 8007c5c:	d8bc      	bhi.n	8007bd8 <_strtod_l+0x488>
 8007c5e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007c62:	428b      	cmp	r3, r1
 8007c64:	bf86      	itte	hi
 8007c66:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8007d04 <_strtod_l+0x5b4>
 8007c6a:	f04f 3aff 	movhi.w	sl, #4294967295
 8007c6e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8007c72:	2300      	movs	r3, #0
 8007c74:	9304      	str	r3, [sp, #16]
 8007c76:	e084      	b.n	8007d82 <_strtod_l+0x632>
 8007c78:	f018 0f01 	tst.w	r8, #1
 8007c7c:	d005      	beq.n	8007c8a <_strtod_l+0x53a>
 8007c7e:	9b04      	ldr	r3, [sp, #16]
 8007c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c84:	f7f8 fcc8 	bl	8000618 <__aeabi_dmul>
 8007c88:	2301      	movs	r3, #1
 8007c8a:	9a04      	ldr	r2, [sp, #16]
 8007c8c:	3208      	adds	r2, #8
 8007c8e:	f109 0901 	add.w	r9, r9, #1
 8007c92:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007c96:	9204      	str	r2, [sp, #16]
 8007c98:	e7c9      	b.n	8007c2e <_strtod_l+0x4de>
 8007c9a:	d0ea      	beq.n	8007c72 <_strtod_l+0x522>
 8007c9c:	f1c8 0800 	rsb	r8, r8, #0
 8007ca0:	f018 020f 	ands.w	r2, r8, #15
 8007ca4:	d00a      	beq.n	8007cbc <_strtod_l+0x56c>
 8007ca6:	4b13      	ldr	r3, [pc, #76]	; (8007cf4 <_strtod_l+0x5a4>)
 8007ca8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007cac:	4650      	mov	r0, sl
 8007cae:	4659      	mov	r1, fp
 8007cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cb4:	f7f8 fdda 	bl	800086c <__aeabi_ddiv>
 8007cb8:	4682      	mov	sl, r0
 8007cba:	468b      	mov	fp, r1
 8007cbc:	ea5f 1828 	movs.w	r8, r8, asr #4
 8007cc0:	d0d7      	beq.n	8007c72 <_strtod_l+0x522>
 8007cc2:	f1b8 0f1f 	cmp.w	r8, #31
 8007cc6:	dd1f      	ble.n	8007d08 <_strtod_l+0x5b8>
 8007cc8:	2500      	movs	r5, #0
 8007cca:	462e      	mov	r6, r5
 8007ccc:	9507      	str	r5, [sp, #28]
 8007cce:	9505      	str	r5, [sp, #20]
 8007cd0:	2322      	movs	r3, #34	; 0x22
 8007cd2:	f04f 0a00 	mov.w	sl, #0
 8007cd6:	f04f 0b00 	mov.w	fp, #0
 8007cda:	6023      	str	r3, [r4, #0]
 8007cdc:	e786      	b.n	8007bec <_strtod_l+0x49c>
 8007cde:	bf00      	nop
 8007ce0:	0800b2f5 	.word	0x0800b2f5
 8007ce4:	0800b338 	.word	0x0800b338
 8007ce8:	0800b2ed 	.word	0x0800b2ed
 8007cec:	0800b47c 	.word	0x0800b47c
 8007cf0:	0800b790 	.word	0x0800b790
 8007cf4:	0800b670 	.word	0x0800b670
 8007cf8:	0800b648 	.word	0x0800b648
 8007cfc:	7ff00000 	.word	0x7ff00000
 8007d00:	7ca00000 	.word	0x7ca00000
 8007d04:	7fefffff 	.word	0x7fefffff
 8007d08:	f018 0310 	ands.w	r3, r8, #16
 8007d0c:	bf18      	it	ne
 8007d0e:	236a      	movne	r3, #106	; 0x6a
 8007d10:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 80080c0 <_strtod_l+0x970>
 8007d14:	9304      	str	r3, [sp, #16]
 8007d16:	4650      	mov	r0, sl
 8007d18:	4659      	mov	r1, fp
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	f018 0f01 	tst.w	r8, #1
 8007d20:	d004      	beq.n	8007d2c <_strtod_l+0x5dc>
 8007d22:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007d26:	f7f8 fc77 	bl	8000618 <__aeabi_dmul>
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8007d30:	f109 0908 	add.w	r9, r9, #8
 8007d34:	d1f2      	bne.n	8007d1c <_strtod_l+0x5cc>
 8007d36:	b10b      	cbz	r3, 8007d3c <_strtod_l+0x5ec>
 8007d38:	4682      	mov	sl, r0
 8007d3a:	468b      	mov	fp, r1
 8007d3c:	9b04      	ldr	r3, [sp, #16]
 8007d3e:	b1c3      	cbz	r3, 8007d72 <_strtod_l+0x622>
 8007d40:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007d44:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	4659      	mov	r1, fp
 8007d4c:	dd11      	ble.n	8007d72 <_strtod_l+0x622>
 8007d4e:	2b1f      	cmp	r3, #31
 8007d50:	f340 8124 	ble.w	8007f9c <_strtod_l+0x84c>
 8007d54:	2b34      	cmp	r3, #52	; 0x34
 8007d56:	bfde      	ittt	le
 8007d58:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8007d5c:	f04f 33ff 	movle.w	r3, #4294967295
 8007d60:	fa03 f202 	lslle.w	r2, r3, r2
 8007d64:	f04f 0a00 	mov.w	sl, #0
 8007d68:	bfcc      	ite	gt
 8007d6a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8007d6e:	ea02 0b01 	andle.w	fp, r2, r1
 8007d72:	2200      	movs	r2, #0
 8007d74:	2300      	movs	r3, #0
 8007d76:	4650      	mov	r0, sl
 8007d78:	4659      	mov	r1, fp
 8007d7a:	f7f8 feb5 	bl	8000ae8 <__aeabi_dcmpeq>
 8007d7e:	2800      	cmp	r0, #0
 8007d80:	d1a2      	bne.n	8007cc8 <_strtod_l+0x578>
 8007d82:	9b07      	ldr	r3, [sp, #28]
 8007d84:	9300      	str	r3, [sp, #0]
 8007d86:	9908      	ldr	r1, [sp, #32]
 8007d88:	462b      	mov	r3, r5
 8007d8a:	463a      	mov	r2, r7
 8007d8c:	4620      	mov	r0, r4
 8007d8e:	f002 f8fd 	bl	8009f8c <__s2b>
 8007d92:	9007      	str	r0, [sp, #28]
 8007d94:	2800      	cmp	r0, #0
 8007d96:	f43f af1f 	beq.w	8007bd8 <_strtod_l+0x488>
 8007d9a:	9b05      	ldr	r3, [sp, #20]
 8007d9c:	1b9e      	subs	r6, r3, r6
 8007d9e:	9b06      	ldr	r3, [sp, #24]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	bfb4      	ite	lt
 8007da4:	4633      	movlt	r3, r6
 8007da6:	2300      	movge	r3, #0
 8007da8:	930c      	str	r3, [sp, #48]	; 0x30
 8007daa:	9b06      	ldr	r3, [sp, #24]
 8007dac:	2500      	movs	r5, #0
 8007dae:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007db2:	9312      	str	r3, [sp, #72]	; 0x48
 8007db4:	462e      	mov	r6, r5
 8007db6:	9b07      	ldr	r3, [sp, #28]
 8007db8:	4620      	mov	r0, r4
 8007dba:	6859      	ldr	r1, [r3, #4]
 8007dbc:	f002 f83e 	bl	8009e3c <_Balloc>
 8007dc0:	9005      	str	r0, [sp, #20]
 8007dc2:	2800      	cmp	r0, #0
 8007dc4:	f43f af0c 	beq.w	8007be0 <_strtod_l+0x490>
 8007dc8:	9b07      	ldr	r3, [sp, #28]
 8007dca:	691a      	ldr	r2, [r3, #16]
 8007dcc:	3202      	adds	r2, #2
 8007dce:	f103 010c 	add.w	r1, r3, #12
 8007dd2:	0092      	lsls	r2, r2, #2
 8007dd4:	300c      	adds	r0, #12
 8007dd6:	f7fe fdcf 	bl	8006978 <memcpy>
 8007dda:	ec4b ab10 	vmov	d0, sl, fp
 8007dde:	aa1a      	add	r2, sp, #104	; 0x68
 8007de0:	a919      	add	r1, sp, #100	; 0x64
 8007de2:	4620      	mov	r0, r4
 8007de4:	f002 fc18 	bl	800a618 <__d2b>
 8007de8:	ec4b ab18 	vmov	d8, sl, fp
 8007dec:	9018      	str	r0, [sp, #96]	; 0x60
 8007dee:	2800      	cmp	r0, #0
 8007df0:	f43f aef6 	beq.w	8007be0 <_strtod_l+0x490>
 8007df4:	2101      	movs	r1, #1
 8007df6:	4620      	mov	r0, r4
 8007df8:	f002 f962 	bl	800a0c0 <__i2b>
 8007dfc:	4606      	mov	r6, r0
 8007dfe:	2800      	cmp	r0, #0
 8007e00:	f43f aeee 	beq.w	8007be0 <_strtod_l+0x490>
 8007e04:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007e06:	9904      	ldr	r1, [sp, #16]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	bfab      	itete	ge
 8007e0c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8007e0e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8007e10:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8007e12:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8007e16:	bfac      	ite	ge
 8007e18:	eb03 0902 	addge.w	r9, r3, r2
 8007e1c:	1ad7      	sublt	r7, r2, r3
 8007e1e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007e20:	eba3 0801 	sub.w	r8, r3, r1
 8007e24:	4490      	add	r8, r2
 8007e26:	4ba1      	ldr	r3, [pc, #644]	; (80080ac <_strtod_l+0x95c>)
 8007e28:	f108 38ff 	add.w	r8, r8, #4294967295
 8007e2c:	4598      	cmp	r8, r3
 8007e2e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007e32:	f280 80c7 	bge.w	8007fc4 <_strtod_l+0x874>
 8007e36:	eba3 0308 	sub.w	r3, r3, r8
 8007e3a:	2b1f      	cmp	r3, #31
 8007e3c:	eba2 0203 	sub.w	r2, r2, r3
 8007e40:	f04f 0101 	mov.w	r1, #1
 8007e44:	f300 80b1 	bgt.w	8007faa <_strtod_l+0x85a>
 8007e48:	fa01 f303 	lsl.w	r3, r1, r3
 8007e4c:	930d      	str	r3, [sp, #52]	; 0x34
 8007e4e:	2300      	movs	r3, #0
 8007e50:	9308      	str	r3, [sp, #32]
 8007e52:	eb09 0802 	add.w	r8, r9, r2
 8007e56:	9b04      	ldr	r3, [sp, #16]
 8007e58:	45c1      	cmp	r9, r8
 8007e5a:	4417      	add	r7, r2
 8007e5c:	441f      	add	r7, r3
 8007e5e:	464b      	mov	r3, r9
 8007e60:	bfa8      	it	ge
 8007e62:	4643      	movge	r3, r8
 8007e64:	42bb      	cmp	r3, r7
 8007e66:	bfa8      	it	ge
 8007e68:	463b      	movge	r3, r7
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	bfc2      	ittt	gt
 8007e6e:	eba8 0803 	subgt.w	r8, r8, r3
 8007e72:	1aff      	subgt	r7, r7, r3
 8007e74:	eba9 0903 	subgt.w	r9, r9, r3
 8007e78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	dd17      	ble.n	8007eae <_strtod_l+0x75e>
 8007e7e:	4631      	mov	r1, r6
 8007e80:	461a      	mov	r2, r3
 8007e82:	4620      	mov	r0, r4
 8007e84:	f002 f9dc 	bl	800a240 <__pow5mult>
 8007e88:	4606      	mov	r6, r0
 8007e8a:	2800      	cmp	r0, #0
 8007e8c:	f43f aea8 	beq.w	8007be0 <_strtod_l+0x490>
 8007e90:	4601      	mov	r1, r0
 8007e92:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007e94:	4620      	mov	r0, r4
 8007e96:	f002 f929 	bl	800a0ec <__multiply>
 8007e9a:	900b      	str	r0, [sp, #44]	; 0x2c
 8007e9c:	2800      	cmp	r0, #0
 8007e9e:	f43f ae9f 	beq.w	8007be0 <_strtod_l+0x490>
 8007ea2:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007ea4:	4620      	mov	r0, r4
 8007ea6:	f002 f809 	bl	8009ebc <_Bfree>
 8007eaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007eac:	9318      	str	r3, [sp, #96]	; 0x60
 8007eae:	f1b8 0f00 	cmp.w	r8, #0
 8007eb2:	f300 808c 	bgt.w	8007fce <_strtod_l+0x87e>
 8007eb6:	9b06      	ldr	r3, [sp, #24]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	dd08      	ble.n	8007ece <_strtod_l+0x77e>
 8007ebc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007ebe:	9905      	ldr	r1, [sp, #20]
 8007ec0:	4620      	mov	r0, r4
 8007ec2:	f002 f9bd 	bl	800a240 <__pow5mult>
 8007ec6:	9005      	str	r0, [sp, #20]
 8007ec8:	2800      	cmp	r0, #0
 8007eca:	f43f ae89 	beq.w	8007be0 <_strtod_l+0x490>
 8007ece:	2f00      	cmp	r7, #0
 8007ed0:	dd08      	ble.n	8007ee4 <_strtod_l+0x794>
 8007ed2:	9905      	ldr	r1, [sp, #20]
 8007ed4:	463a      	mov	r2, r7
 8007ed6:	4620      	mov	r0, r4
 8007ed8:	f002 fa0c 	bl	800a2f4 <__lshift>
 8007edc:	9005      	str	r0, [sp, #20]
 8007ede:	2800      	cmp	r0, #0
 8007ee0:	f43f ae7e 	beq.w	8007be0 <_strtod_l+0x490>
 8007ee4:	f1b9 0f00 	cmp.w	r9, #0
 8007ee8:	dd08      	ble.n	8007efc <_strtod_l+0x7ac>
 8007eea:	4631      	mov	r1, r6
 8007eec:	464a      	mov	r2, r9
 8007eee:	4620      	mov	r0, r4
 8007ef0:	f002 fa00 	bl	800a2f4 <__lshift>
 8007ef4:	4606      	mov	r6, r0
 8007ef6:	2800      	cmp	r0, #0
 8007ef8:	f43f ae72 	beq.w	8007be0 <_strtod_l+0x490>
 8007efc:	9a05      	ldr	r2, [sp, #20]
 8007efe:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007f00:	4620      	mov	r0, r4
 8007f02:	f002 fa83 	bl	800a40c <__mdiff>
 8007f06:	4605      	mov	r5, r0
 8007f08:	2800      	cmp	r0, #0
 8007f0a:	f43f ae69 	beq.w	8007be0 <_strtod_l+0x490>
 8007f0e:	68c3      	ldr	r3, [r0, #12]
 8007f10:	930b      	str	r3, [sp, #44]	; 0x2c
 8007f12:	2300      	movs	r3, #0
 8007f14:	60c3      	str	r3, [r0, #12]
 8007f16:	4631      	mov	r1, r6
 8007f18:	f002 fa5c 	bl	800a3d4 <__mcmp>
 8007f1c:	2800      	cmp	r0, #0
 8007f1e:	da60      	bge.n	8007fe2 <_strtod_l+0x892>
 8007f20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f22:	ea53 030a 	orrs.w	r3, r3, sl
 8007f26:	f040 8082 	bne.w	800802e <_strtod_l+0x8de>
 8007f2a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d17d      	bne.n	800802e <_strtod_l+0x8de>
 8007f32:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007f36:	0d1b      	lsrs	r3, r3, #20
 8007f38:	051b      	lsls	r3, r3, #20
 8007f3a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007f3e:	d976      	bls.n	800802e <_strtod_l+0x8de>
 8007f40:	696b      	ldr	r3, [r5, #20]
 8007f42:	b913      	cbnz	r3, 8007f4a <_strtod_l+0x7fa>
 8007f44:	692b      	ldr	r3, [r5, #16]
 8007f46:	2b01      	cmp	r3, #1
 8007f48:	dd71      	ble.n	800802e <_strtod_l+0x8de>
 8007f4a:	4629      	mov	r1, r5
 8007f4c:	2201      	movs	r2, #1
 8007f4e:	4620      	mov	r0, r4
 8007f50:	f002 f9d0 	bl	800a2f4 <__lshift>
 8007f54:	4631      	mov	r1, r6
 8007f56:	4605      	mov	r5, r0
 8007f58:	f002 fa3c 	bl	800a3d4 <__mcmp>
 8007f5c:	2800      	cmp	r0, #0
 8007f5e:	dd66      	ble.n	800802e <_strtod_l+0x8de>
 8007f60:	9904      	ldr	r1, [sp, #16]
 8007f62:	4a53      	ldr	r2, [pc, #332]	; (80080b0 <_strtod_l+0x960>)
 8007f64:	465b      	mov	r3, fp
 8007f66:	2900      	cmp	r1, #0
 8007f68:	f000 8081 	beq.w	800806e <_strtod_l+0x91e>
 8007f6c:	ea02 010b 	and.w	r1, r2, fp
 8007f70:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007f74:	dc7b      	bgt.n	800806e <_strtod_l+0x91e>
 8007f76:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007f7a:	f77f aea9 	ble.w	8007cd0 <_strtod_l+0x580>
 8007f7e:	4b4d      	ldr	r3, [pc, #308]	; (80080b4 <_strtod_l+0x964>)
 8007f80:	4650      	mov	r0, sl
 8007f82:	4659      	mov	r1, fp
 8007f84:	2200      	movs	r2, #0
 8007f86:	f7f8 fb47 	bl	8000618 <__aeabi_dmul>
 8007f8a:	460b      	mov	r3, r1
 8007f8c:	4303      	orrs	r3, r0
 8007f8e:	bf08      	it	eq
 8007f90:	2322      	moveq	r3, #34	; 0x22
 8007f92:	4682      	mov	sl, r0
 8007f94:	468b      	mov	fp, r1
 8007f96:	bf08      	it	eq
 8007f98:	6023      	streq	r3, [r4, #0]
 8007f9a:	e62b      	b.n	8007bf4 <_strtod_l+0x4a4>
 8007f9c:	f04f 32ff 	mov.w	r2, #4294967295
 8007fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8007fa4:	ea03 0a0a 	and.w	sl, r3, sl
 8007fa8:	e6e3      	b.n	8007d72 <_strtod_l+0x622>
 8007faa:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8007fae:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8007fb2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8007fb6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8007fba:	fa01 f308 	lsl.w	r3, r1, r8
 8007fbe:	9308      	str	r3, [sp, #32]
 8007fc0:	910d      	str	r1, [sp, #52]	; 0x34
 8007fc2:	e746      	b.n	8007e52 <_strtod_l+0x702>
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	9308      	str	r3, [sp, #32]
 8007fc8:	2301      	movs	r3, #1
 8007fca:	930d      	str	r3, [sp, #52]	; 0x34
 8007fcc:	e741      	b.n	8007e52 <_strtod_l+0x702>
 8007fce:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007fd0:	4642      	mov	r2, r8
 8007fd2:	4620      	mov	r0, r4
 8007fd4:	f002 f98e 	bl	800a2f4 <__lshift>
 8007fd8:	9018      	str	r0, [sp, #96]	; 0x60
 8007fda:	2800      	cmp	r0, #0
 8007fdc:	f47f af6b 	bne.w	8007eb6 <_strtod_l+0x766>
 8007fe0:	e5fe      	b.n	8007be0 <_strtod_l+0x490>
 8007fe2:	465f      	mov	r7, fp
 8007fe4:	d16e      	bne.n	80080c4 <_strtod_l+0x974>
 8007fe6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007fe8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007fec:	b342      	cbz	r2, 8008040 <_strtod_l+0x8f0>
 8007fee:	4a32      	ldr	r2, [pc, #200]	; (80080b8 <_strtod_l+0x968>)
 8007ff0:	4293      	cmp	r3, r2
 8007ff2:	d128      	bne.n	8008046 <_strtod_l+0x8f6>
 8007ff4:	9b04      	ldr	r3, [sp, #16]
 8007ff6:	4651      	mov	r1, sl
 8007ff8:	b1eb      	cbz	r3, 8008036 <_strtod_l+0x8e6>
 8007ffa:	4b2d      	ldr	r3, [pc, #180]	; (80080b0 <_strtod_l+0x960>)
 8007ffc:	403b      	ands	r3, r7
 8007ffe:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008002:	f04f 32ff 	mov.w	r2, #4294967295
 8008006:	d819      	bhi.n	800803c <_strtod_l+0x8ec>
 8008008:	0d1b      	lsrs	r3, r3, #20
 800800a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800800e:	fa02 f303 	lsl.w	r3, r2, r3
 8008012:	4299      	cmp	r1, r3
 8008014:	d117      	bne.n	8008046 <_strtod_l+0x8f6>
 8008016:	4b29      	ldr	r3, [pc, #164]	; (80080bc <_strtod_l+0x96c>)
 8008018:	429f      	cmp	r7, r3
 800801a:	d102      	bne.n	8008022 <_strtod_l+0x8d2>
 800801c:	3101      	adds	r1, #1
 800801e:	f43f addf 	beq.w	8007be0 <_strtod_l+0x490>
 8008022:	4b23      	ldr	r3, [pc, #140]	; (80080b0 <_strtod_l+0x960>)
 8008024:	403b      	ands	r3, r7
 8008026:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800802a:	f04f 0a00 	mov.w	sl, #0
 800802e:	9b04      	ldr	r3, [sp, #16]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d1a4      	bne.n	8007f7e <_strtod_l+0x82e>
 8008034:	e5de      	b.n	8007bf4 <_strtod_l+0x4a4>
 8008036:	f04f 33ff 	mov.w	r3, #4294967295
 800803a:	e7ea      	b.n	8008012 <_strtod_l+0x8c2>
 800803c:	4613      	mov	r3, r2
 800803e:	e7e8      	b.n	8008012 <_strtod_l+0x8c2>
 8008040:	ea53 030a 	orrs.w	r3, r3, sl
 8008044:	d08c      	beq.n	8007f60 <_strtod_l+0x810>
 8008046:	9b08      	ldr	r3, [sp, #32]
 8008048:	b1db      	cbz	r3, 8008082 <_strtod_l+0x932>
 800804a:	423b      	tst	r3, r7
 800804c:	d0ef      	beq.n	800802e <_strtod_l+0x8de>
 800804e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008050:	9a04      	ldr	r2, [sp, #16]
 8008052:	4650      	mov	r0, sl
 8008054:	4659      	mov	r1, fp
 8008056:	b1c3      	cbz	r3, 800808a <_strtod_l+0x93a>
 8008058:	f7ff fb5c 	bl	8007714 <sulp>
 800805c:	4602      	mov	r2, r0
 800805e:	460b      	mov	r3, r1
 8008060:	ec51 0b18 	vmov	r0, r1, d8
 8008064:	f7f8 f922 	bl	80002ac <__adddf3>
 8008068:	4682      	mov	sl, r0
 800806a:	468b      	mov	fp, r1
 800806c:	e7df      	b.n	800802e <_strtod_l+0x8de>
 800806e:	4013      	ands	r3, r2
 8008070:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008074:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008078:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800807c:	f04f 3aff 	mov.w	sl, #4294967295
 8008080:	e7d5      	b.n	800802e <_strtod_l+0x8de>
 8008082:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008084:	ea13 0f0a 	tst.w	r3, sl
 8008088:	e7e0      	b.n	800804c <_strtod_l+0x8fc>
 800808a:	f7ff fb43 	bl	8007714 <sulp>
 800808e:	4602      	mov	r2, r0
 8008090:	460b      	mov	r3, r1
 8008092:	ec51 0b18 	vmov	r0, r1, d8
 8008096:	f7f8 f907 	bl	80002a8 <__aeabi_dsub>
 800809a:	2200      	movs	r2, #0
 800809c:	2300      	movs	r3, #0
 800809e:	4682      	mov	sl, r0
 80080a0:	468b      	mov	fp, r1
 80080a2:	f7f8 fd21 	bl	8000ae8 <__aeabi_dcmpeq>
 80080a6:	2800      	cmp	r0, #0
 80080a8:	d0c1      	beq.n	800802e <_strtod_l+0x8de>
 80080aa:	e611      	b.n	8007cd0 <_strtod_l+0x580>
 80080ac:	fffffc02 	.word	0xfffffc02
 80080b0:	7ff00000 	.word	0x7ff00000
 80080b4:	39500000 	.word	0x39500000
 80080b8:	000fffff 	.word	0x000fffff
 80080bc:	7fefffff 	.word	0x7fefffff
 80080c0:	0800b350 	.word	0x0800b350
 80080c4:	4631      	mov	r1, r6
 80080c6:	4628      	mov	r0, r5
 80080c8:	f002 fb02 	bl	800a6d0 <__ratio>
 80080cc:	ec59 8b10 	vmov	r8, r9, d0
 80080d0:	ee10 0a10 	vmov	r0, s0
 80080d4:	2200      	movs	r2, #0
 80080d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80080da:	4649      	mov	r1, r9
 80080dc:	f7f8 fd18 	bl	8000b10 <__aeabi_dcmple>
 80080e0:	2800      	cmp	r0, #0
 80080e2:	d07a      	beq.n	80081da <_strtod_l+0xa8a>
 80080e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d04a      	beq.n	8008180 <_strtod_l+0xa30>
 80080ea:	4b95      	ldr	r3, [pc, #596]	; (8008340 <_strtod_l+0xbf0>)
 80080ec:	2200      	movs	r2, #0
 80080ee:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80080f2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8008340 <_strtod_l+0xbf0>
 80080f6:	f04f 0800 	mov.w	r8, #0
 80080fa:	4b92      	ldr	r3, [pc, #584]	; (8008344 <_strtod_l+0xbf4>)
 80080fc:	403b      	ands	r3, r7
 80080fe:	930d      	str	r3, [sp, #52]	; 0x34
 8008100:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008102:	4b91      	ldr	r3, [pc, #580]	; (8008348 <_strtod_l+0xbf8>)
 8008104:	429a      	cmp	r2, r3
 8008106:	f040 80b0 	bne.w	800826a <_strtod_l+0xb1a>
 800810a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800810e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8008112:	ec4b ab10 	vmov	d0, sl, fp
 8008116:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800811a:	f002 fa01 	bl	800a520 <__ulp>
 800811e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008122:	ec53 2b10 	vmov	r2, r3, d0
 8008126:	f7f8 fa77 	bl	8000618 <__aeabi_dmul>
 800812a:	4652      	mov	r2, sl
 800812c:	465b      	mov	r3, fp
 800812e:	f7f8 f8bd 	bl	80002ac <__adddf3>
 8008132:	460b      	mov	r3, r1
 8008134:	4983      	ldr	r1, [pc, #524]	; (8008344 <_strtod_l+0xbf4>)
 8008136:	4a85      	ldr	r2, [pc, #532]	; (800834c <_strtod_l+0xbfc>)
 8008138:	4019      	ands	r1, r3
 800813a:	4291      	cmp	r1, r2
 800813c:	4682      	mov	sl, r0
 800813e:	d960      	bls.n	8008202 <_strtod_l+0xab2>
 8008140:	ee18 3a90 	vmov	r3, s17
 8008144:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008148:	4293      	cmp	r3, r2
 800814a:	d104      	bne.n	8008156 <_strtod_l+0xa06>
 800814c:	ee18 3a10 	vmov	r3, s16
 8008150:	3301      	adds	r3, #1
 8008152:	f43f ad45 	beq.w	8007be0 <_strtod_l+0x490>
 8008156:	f8df b200 	ldr.w	fp, [pc, #512]	; 8008358 <_strtod_l+0xc08>
 800815a:	f04f 3aff 	mov.w	sl, #4294967295
 800815e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008160:	4620      	mov	r0, r4
 8008162:	f001 feab 	bl	8009ebc <_Bfree>
 8008166:	9905      	ldr	r1, [sp, #20]
 8008168:	4620      	mov	r0, r4
 800816a:	f001 fea7 	bl	8009ebc <_Bfree>
 800816e:	4631      	mov	r1, r6
 8008170:	4620      	mov	r0, r4
 8008172:	f001 fea3 	bl	8009ebc <_Bfree>
 8008176:	4629      	mov	r1, r5
 8008178:	4620      	mov	r0, r4
 800817a:	f001 fe9f 	bl	8009ebc <_Bfree>
 800817e:	e61a      	b.n	8007db6 <_strtod_l+0x666>
 8008180:	f1ba 0f00 	cmp.w	sl, #0
 8008184:	d11b      	bne.n	80081be <_strtod_l+0xa6e>
 8008186:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800818a:	b9f3      	cbnz	r3, 80081ca <_strtod_l+0xa7a>
 800818c:	4b6c      	ldr	r3, [pc, #432]	; (8008340 <_strtod_l+0xbf0>)
 800818e:	2200      	movs	r2, #0
 8008190:	4640      	mov	r0, r8
 8008192:	4649      	mov	r1, r9
 8008194:	f7f8 fcb2 	bl	8000afc <__aeabi_dcmplt>
 8008198:	b9d0      	cbnz	r0, 80081d0 <_strtod_l+0xa80>
 800819a:	4640      	mov	r0, r8
 800819c:	4649      	mov	r1, r9
 800819e:	4b6c      	ldr	r3, [pc, #432]	; (8008350 <_strtod_l+0xc00>)
 80081a0:	2200      	movs	r2, #0
 80081a2:	f7f8 fa39 	bl	8000618 <__aeabi_dmul>
 80081a6:	4680      	mov	r8, r0
 80081a8:	4689      	mov	r9, r1
 80081aa:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80081ae:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80081b2:	9315      	str	r3, [sp, #84]	; 0x54
 80081b4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80081b8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80081bc:	e79d      	b.n	80080fa <_strtod_l+0x9aa>
 80081be:	f1ba 0f01 	cmp.w	sl, #1
 80081c2:	d102      	bne.n	80081ca <_strtod_l+0xa7a>
 80081c4:	2f00      	cmp	r7, #0
 80081c6:	f43f ad83 	beq.w	8007cd0 <_strtod_l+0x580>
 80081ca:	4b62      	ldr	r3, [pc, #392]	; (8008354 <_strtod_l+0xc04>)
 80081cc:	2200      	movs	r2, #0
 80081ce:	e78e      	b.n	80080ee <_strtod_l+0x99e>
 80081d0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8008350 <_strtod_l+0xc00>
 80081d4:	f04f 0800 	mov.w	r8, #0
 80081d8:	e7e7      	b.n	80081aa <_strtod_l+0xa5a>
 80081da:	4b5d      	ldr	r3, [pc, #372]	; (8008350 <_strtod_l+0xc00>)
 80081dc:	4640      	mov	r0, r8
 80081de:	4649      	mov	r1, r9
 80081e0:	2200      	movs	r2, #0
 80081e2:	f7f8 fa19 	bl	8000618 <__aeabi_dmul>
 80081e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80081e8:	4680      	mov	r8, r0
 80081ea:	4689      	mov	r9, r1
 80081ec:	b933      	cbnz	r3, 80081fc <_strtod_l+0xaac>
 80081ee:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80081f2:	900e      	str	r0, [sp, #56]	; 0x38
 80081f4:	930f      	str	r3, [sp, #60]	; 0x3c
 80081f6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80081fa:	e7dd      	b.n	80081b8 <_strtod_l+0xa68>
 80081fc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8008200:	e7f9      	b.n	80081f6 <_strtod_l+0xaa6>
 8008202:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8008206:	9b04      	ldr	r3, [sp, #16]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d1a8      	bne.n	800815e <_strtod_l+0xa0e>
 800820c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008210:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008212:	0d1b      	lsrs	r3, r3, #20
 8008214:	051b      	lsls	r3, r3, #20
 8008216:	429a      	cmp	r2, r3
 8008218:	d1a1      	bne.n	800815e <_strtod_l+0xa0e>
 800821a:	4640      	mov	r0, r8
 800821c:	4649      	mov	r1, r9
 800821e:	f7f8 fd5b 	bl	8000cd8 <__aeabi_d2lz>
 8008222:	f7f8 f9cb 	bl	80005bc <__aeabi_l2d>
 8008226:	4602      	mov	r2, r0
 8008228:	460b      	mov	r3, r1
 800822a:	4640      	mov	r0, r8
 800822c:	4649      	mov	r1, r9
 800822e:	f7f8 f83b 	bl	80002a8 <__aeabi_dsub>
 8008232:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008234:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008238:	ea43 030a 	orr.w	r3, r3, sl
 800823c:	4313      	orrs	r3, r2
 800823e:	4680      	mov	r8, r0
 8008240:	4689      	mov	r9, r1
 8008242:	d055      	beq.n	80082f0 <_strtod_l+0xba0>
 8008244:	a336      	add	r3, pc, #216	; (adr r3, 8008320 <_strtod_l+0xbd0>)
 8008246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800824a:	f7f8 fc57 	bl	8000afc <__aeabi_dcmplt>
 800824e:	2800      	cmp	r0, #0
 8008250:	f47f acd0 	bne.w	8007bf4 <_strtod_l+0x4a4>
 8008254:	a334      	add	r3, pc, #208	; (adr r3, 8008328 <_strtod_l+0xbd8>)
 8008256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800825a:	4640      	mov	r0, r8
 800825c:	4649      	mov	r1, r9
 800825e:	f7f8 fc6b 	bl	8000b38 <__aeabi_dcmpgt>
 8008262:	2800      	cmp	r0, #0
 8008264:	f43f af7b 	beq.w	800815e <_strtod_l+0xa0e>
 8008268:	e4c4      	b.n	8007bf4 <_strtod_l+0x4a4>
 800826a:	9b04      	ldr	r3, [sp, #16]
 800826c:	b333      	cbz	r3, 80082bc <_strtod_l+0xb6c>
 800826e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008270:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008274:	d822      	bhi.n	80082bc <_strtod_l+0xb6c>
 8008276:	a32e      	add	r3, pc, #184	; (adr r3, 8008330 <_strtod_l+0xbe0>)
 8008278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800827c:	4640      	mov	r0, r8
 800827e:	4649      	mov	r1, r9
 8008280:	f7f8 fc46 	bl	8000b10 <__aeabi_dcmple>
 8008284:	b1a0      	cbz	r0, 80082b0 <_strtod_l+0xb60>
 8008286:	4649      	mov	r1, r9
 8008288:	4640      	mov	r0, r8
 800828a:	f7f8 fc9d 	bl	8000bc8 <__aeabi_d2uiz>
 800828e:	2801      	cmp	r0, #1
 8008290:	bf38      	it	cc
 8008292:	2001      	movcc	r0, #1
 8008294:	f7f8 f946 	bl	8000524 <__aeabi_ui2d>
 8008298:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800829a:	4680      	mov	r8, r0
 800829c:	4689      	mov	r9, r1
 800829e:	bb23      	cbnz	r3, 80082ea <_strtod_l+0xb9a>
 80082a0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80082a4:	9010      	str	r0, [sp, #64]	; 0x40
 80082a6:	9311      	str	r3, [sp, #68]	; 0x44
 80082a8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80082ac:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80082b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082b2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80082b4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80082b8:	1a9b      	subs	r3, r3, r2
 80082ba:	9309      	str	r3, [sp, #36]	; 0x24
 80082bc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80082c0:	eeb0 0a48 	vmov.f32	s0, s16
 80082c4:	eef0 0a68 	vmov.f32	s1, s17
 80082c8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80082cc:	f002 f928 	bl	800a520 <__ulp>
 80082d0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80082d4:	ec53 2b10 	vmov	r2, r3, d0
 80082d8:	f7f8 f99e 	bl	8000618 <__aeabi_dmul>
 80082dc:	ec53 2b18 	vmov	r2, r3, d8
 80082e0:	f7f7 ffe4 	bl	80002ac <__adddf3>
 80082e4:	4682      	mov	sl, r0
 80082e6:	468b      	mov	fp, r1
 80082e8:	e78d      	b.n	8008206 <_strtod_l+0xab6>
 80082ea:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 80082ee:	e7db      	b.n	80082a8 <_strtod_l+0xb58>
 80082f0:	a311      	add	r3, pc, #68	; (adr r3, 8008338 <_strtod_l+0xbe8>)
 80082f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082f6:	f7f8 fc01 	bl	8000afc <__aeabi_dcmplt>
 80082fa:	e7b2      	b.n	8008262 <_strtod_l+0xb12>
 80082fc:	2300      	movs	r3, #0
 80082fe:	930a      	str	r3, [sp, #40]	; 0x28
 8008300:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008302:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008304:	6013      	str	r3, [r2, #0]
 8008306:	f7ff ba6b 	b.w	80077e0 <_strtod_l+0x90>
 800830a:	2a65      	cmp	r2, #101	; 0x65
 800830c:	f43f ab5f 	beq.w	80079ce <_strtod_l+0x27e>
 8008310:	2a45      	cmp	r2, #69	; 0x45
 8008312:	f43f ab5c 	beq.w	80079ce <_strtod_l+0x27e>
 8008316:	2301      	movs	r3, #1
 8008318:	f7ff bb94 	b.w	8007a44 <_strtod_l+0x2f4>
 800831c:	f3af 8000 	nop.w
 8008320:	94a03595 	.word	0x94a03595
 8008324:	3fdfffff 	.word	0x3fdfffff
 8008328:	35afe535 	.word	0x35afe535
 800832c:	3fe00000 	.word	0x3fe00000
 8008330:	ffc00000 	.word	0xffc00000
 8008334:	41dfffff 	.word	0x41dfffff
 8008338:	94a03595 	.word	0x94a03595
 800833c:	3fcfffff 	.word	0x3fcfffff
 8008340:	3ff00000 	.word	0x3ff00000
 8008344:	7ff00000 	.word	0x7ff00000
 8008348:	7fe00000 	.word	0x7fe00000
 800834c:	7c9fffff 	.word	0x7c9fffff
 8008350:	3fe00000 	.word	0x3fe00000
 8008354:	bff00000 	.word	0xbff00000
 8008358:	7fefffff 	.word	0x7fefffff

0800835c <_strtod_r>:
 800835c:	4b01      	ldr	r3, [pc, #4]	; (8008364 <_strtod_r+0x8>)
 800835e:	f7ff b9f7 	b.w	8007750 <_strtod_l>
 8008362:	bf00      	nop
 8008364:	2000023c 	.word	0x2000023c

08008368 <_strtol_l.constprop.0>:
 8008368:	2b01      	cmp	r3, #1
 800836a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800836e:	d001      	beq.n	8008374 <_strtol_l.constprop.0+0xc>
 8008370:	2b24      	cmp	r3, #36	; 0x24
 8008372:	d906      	bls.n	8008382 <_strtol_l.constprop.0+0x1a>
 8008374:	f7fe fad6 	bl	8006924 <__errno>
 8008378:	2316      	movs	r3, #22
 800837a:	6003      	str	r3, [r0, #0]
 800837c:	2000      	movs	r0, #0
 800837e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008382:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008468 <_strtol_l.constprop.0+0x100>
 8008386:	460d      	mov	r5, r1
 8008388:	462e      	mov	r6, r5
 800838a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800838e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8008392:	f017 0708 	ands.w	r7, r7, #8
 8008396:	d1f7      	bne.n	8008388 <_strtol_l.constprop.0+0x20>
 8008398:	2c2d      	cmp	r4, #45	; 0x2d
 800839a:	d132      	bne.n	8008402 <_strtol_l.constprop.0+0x9a>
 800839c:	782c      	ldrb	r4, [r5, #0]
 800839e:	2701      	movs	r7, #1
 80083a0:	1cb5      	adds	r5, r6, #2
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d05b      	beq.n	800845e <_strtol_l.constprop.0+0xf6>
 80083a6:	2b10      	cmp	r3, #16
 80083a8:	d109      	bne.n	80083be <_strtol_l.constprop.0+0x56>
 80083aa:	2c30      	cmp	r4, #48	; 0x30
 80083ac:	d107      	bne.n	80083be <_strtol_l.constprop.0+0x56>
 80083ae:	782c      	ldrb	r4, [r5, #0]
 80083b0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80083b4:	2c58      	cmp	r4, #88	; 0x58
 80083b6:	d14d      	bne.n	8008454 <_strtol_l.constprop.0+0xec>
 80083b8:	786c      	ldrb	r4, [r5, #1]
 80083ba:	2310      	movs	r3, #16
 80083bc:	3502      	adds	r5, #2
 80083be:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80083c2:	f108 38ff 	add.w	r8, r8, #4294967295
 80083c6:	f04f 0c00 	mov.w	ip, #0
 80083ca:	fbb8 f9f3 	udiv	r9, r8, r3
 80083ce:	4666      	mov	r6, ip
 80083d0:	fb03 8a19 	mls	sl, r3, r9, r8
 80083d4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80083d8:	f1be 0f09 	cmp.w	lr, #9
 80083dc:	d816      	bhi.n	800840c <_strtol_l.constprop.0+0xa4>
 80083de:	4674      	mov	r4, lr
 80083e0:	42a3      	cmp	r3, r4
 80083e2:	dd24      	ble.n	800842e <_strtol_l.constprop.0+0xc6>
 80083e4:	f1bc 0f00 	cmp.w	ip, #0
 80083e8:	db1e      	blt.n	8008428 <_strtol_l.constprop.0+0xc0>
 80083ea:	45b1      	cmp	r9, r6
 80083ec:	d31c      	bcc.n	8008428 <_strtol_l.constprop.0+0xc0>
 80083ee:	d101      	bne.n	80083f4 <_strtol_l.constprop.0+0x8c>
 80083f0:	45a2      	cmp	sl, r4
 80083f2:	db19      	blt.n	8008428 <_strtol_l.constprop.0+0xc0>
 80083f4:	fb06 4603 	mla	r6, r6, r3, r4
 80083f8:	f04f 0c01 	mov.w	ip, #1
 80083fc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008400:	e7e8      	b.n	80083d4 <_strtol_l.constprop.0+0x6c>
 8008402:	2c2b      	cmp	r4, #43	; 0x2b
 8008404:	bf04      	itt	eq
 8008406:	782c      	ldrbeq	r4, [r5, #0]
 8008408:	1cb5      	addeq	r5, r6, #2
 800840a:	e7ca      	b.n	80083a2 <_strtol_l.constprop.0+0x3a>
 800840c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8008410:	f1be 0f19 	cmp.w	lr, #25
 8008414:	d801      	bhi.n	800841a <_strtol_l.constprop.0+0xb2>
 8008416:	3c37      	subs	r4, #55	; 0x37
 8008418:	e7e2      	b.n	80083e0 <_strtol_l.constprop.0+0x78>
 800841a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800841e:	f1be 0f19 	cmp.w	lr, #25
 8008422:	d804      	bhi.n	800842e <_strtol_l.constprop.0+0xc6>
 8008424:	3c57      	subs	r4, #87	; 0x57
 8008426:	e7db      	b.n	80083e0 <_strtol_l.constprop.0+0x78>
 8008428:	f04f 3cff 	mov.w	ip, #4294967295
 800842c:	e7e6      	b.n	80083fc <_strtol_l.constprop.0+0x94>
 800842e:	f1bc 0f00 	cmp.w	ip, #0
 8008432:	da05      	bge.n	8008440 <_strtol_l.constprop.0+0xd8>
 8008434:	2322      	movs	r3, #34	; 0x22
 8008436:	6003      	str	r3, [r0, #0]
 8008438:	4646      	mov	r6, r8
 800843a:	b942      	cbnz	r2, 800844e <_strtol_l.constprop.0+0xe6>
 800843c:	4630      	mov	r0, r6
 800843e:	e79e      	b.n	800837e <_strtol_l.constprop.0+0x16>
 8008440:	b107      	cbz	r7, 8008444 <_strtol_l.constprop.0+0xdc>
 8008442:	4276      	negs	r6, r6
 8008444:	2a00      	cmp	r2, #0
 8008446:	d0f9      	beq.n	800843c <_strtol_l.constprop.0+0xd4>
 8008448:	f1bc 0f00 	cmp.w	ip, #0
 800844c:	d000      	beq.n	8008450 <_strtol_l.constprop.0+0xe8>
 800844e:	1e69      	subs	r1, r5, #1
 8008450:	6011      	str	r1, [r2, #0]
 8008452:	e7f3      	b.n	800843c <_strtol_l.constprop.0+0xd4>
 8008454:	2430      	movs	r4, #48	; 0x30
 8008456:	2b00      	cmp	r3, #0
 8008458:	d1b1      	bne.n	80083be <_strtol_l.constprop.0+0x56>
 800845a:	2308      	movs	r3, #8
 800845c:	e7af      	b.n	80083be <_strtol_l.constprop.0+0x56>
 800845e:	2c30      	cmp	r4, #48	; 0x30
 8008460:	d0a5      	beq.n	80083ae <_strtol_l.constprop.0+0x46>
 8008462:	230a      	movs	r3, #10
 8008464:	e7ab      	b.n	80083be <_strtol_l.constprop.0+0x56>
 8008466:	bf00      	nop
 8008468:	0800b379 	.word	0x0800b379

0800846c <_strtol_r>:
 800846c:	f7ff bf7c 	b.w	8008368 <_strtol_l.constprop.0>

08008470 <__swbuf_r>:
 8008470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008472:	460e      	mov	r6, r1
 8008474:	4614      	mov	r4, r2
 8008476:	4605      	mov	r5, r0
 8008478:	b118      	cbz	r0, 8008482 <__swbuf_r+0x12>
 800847a:	6983      	ldr	r3, [r0, #24]
 800847c:	b90b      	cbnz	r3, 8008482 <__swbuf_r+0x12>
 800847e:	f001 f84b 	bl	8009518 <__sinit>
 8008482:	4b21      	ldr	r3, [pc, #132]	; (8008508 <__swbuf_r+0x98>)
 8008484:	429c      	cmp	r4, r3
 8008486:	d12b      	bne.n	80084e0 <__swbuf_r+0x70>
 8008488:	686c      	ldr	r4, [r5, #4]
 800848a:	69a3      	ldr	r3, [r4, #24]
 800848c:	60a3      	str	r3, [r4, #8]
 800848e:	89a3      	ldrh	r3, [r4, #12]
 8008490:	071a      	lsls	r2, r3, #28
 8008492:	d52f      	bpl.n	80084f4 <__swbuf_r+0x84>
 8008494:	6923      	ldr	r3, [r4, #16]
 8008496:	b36b      	cbz	r3, 80084f4 <__swbuf_r+0x84>
 8008498:	6923      	ldr	r3, [r4, #16]
 800849a:	6820      	ldr	r0, [r4, #0]
 800849c:	1ac0      	subs	r0, r0, r3
 800849e:	6963      	ldr	r3, [r4, #20]
 80084a0:	b2f6      	uxtb	r6, r6
 80084a2:	4283      	cmp	r3, r0
 80084a4:	4637      	mov	r7, r6
 80084a6:	dc04      	bgt.n	80084b2 <__swbuf_r+0x42>
 80084a8:	4621      	mov	r1, r4
 80084aa:	4628      	mov	r0, r5
 80084ac:	f000 ffa0 	bl	80093f0 <_fflush_r>
 80084b0:	bb30      	cbnz	r0, 8008500 <__swbuf_r+0x90>
 80084b2:	68a3      	ldr	r3, [r4, #8]
 80084b4:	3b01      	subs	r3, #1
 80084b6:	60a3      	str	r3, [r4, #8]
 80084b8:	6823      	ldr	r3, [r4, #0]
 80084ba:	1c5a      	adds	r2, r3, #1
 80084bc:	6022      	str	r2, [r4, #0]
 80084be:	701e      	strb	r6, [r3, #0]
 80084c0:	6963      	ldr	r3, [r4, #20]
 80084c2:	3001      	adds	r0, #1
 80084c4:	4283      	cmp	r3, r0
 80084c6:	d004      	beq.n	80084d2 <__swbuf_r+0x62>
 80084c8:	89a3      	ldrh	r3, [r4, #12]
 80084ca:	07db      	lsls	r3, r3, #31
 80084cc:	d506      	bpl.n	80084dc <__swbuf_r+0x6c>
 80084ce:	2e0a      	cmp	r6, #10
 80084d0:	d104      	bne.n	80084dc <__swbuf_r+0x6c>
 80084d2:	4621      	mov	r1, r4
 80084d4:	4628      	mov	r0, r5
 80084d6:	f000 ff8b 	bl	80093f0 <_fflush_r>
 80084da:	b988      	cbnz	r0, 8008500 <__swbuf_r+0x90>
 80084dc:	4638      	mov	r0, r7
 80084de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80084e0:	4b0a      	ldr	r3, [pc, #40]	; (800850c <__swbuf_r+0x9c>)
 80084e2:	429c      	cmp	r4, r3
 80084e4:	d101      	bne.n	80084ea <__swbuf_r+0x7a>
 80084e6:	68ac      	ldr	r4, [r5, #8]
 80084e8:	e7cf      	b.n	800848a <__swbuf_r+0x1a>
 80084ea:	4b09      	ldr	r3, [pc, #36]	; (8008510 <__swbuf_r+0xa0>)
 80084ec:	429c      	cmp	r4, r3
 80084ee:	bf08      	it	eq
 80084f0:	68ec      	ldreq	r4, [r5, #12]
 80084f2:	e7ca      	b.n	800848a <__swbuf_r+0x1a>
 80084f4:	4621      	mov	r1, r4
 80084f6:	4628      	mov	r0, r5
 80084f8:	f000 f80c 	bl	8008514 <__swsetup_r>
 80084fc:	2800      	cmp	r0, #0
 80084fe:	d0cb      	beq.n	8008498 <__swbuf_r+0x28>
 8008500:	f04f 37ff 	mov.w	r7, #4294967295
 8008504:	e7ea      	b.n	80084dc <__swbuf_r+0x6c>
 8008506:	bf00      	nop
 8008508:	0800b52c 	.word	0x0800b52c
 800850c:	0800b54c 	.word	0x0800b54c
 8008510:	0800b50c 	.word	0x0800b50c

08008514 <__swsetup_r>:
 8008514:	4b32      	ldr	r3, [pc, #200]	; (80085e0 <__swsetup_r+0xcc>)
 8008516:	b570      	push	{r4, r5, r6, lr}
 8008518:	681d      	ldr	r5, [r3, #0]
 800851a:	4606      	mov	r6, r0
 800851c:	460c      	mov	r4, r1
 800851e:	b125      	cbz	r5, 800852a <__swsetup_r+0x16>
 8008520:	69ab      	ldr	r3, [r5, #24]
 8008522:	b913      	cbnz	r3, 800852a <__swsetup_r+0x16>
 8008524:	4628      	mov	r0, r5
 8008526:	f000 fff7 	bl	8009518 <__sinit>
 800852a:	4b2e      	ldr	r3, [pc, #184]	; (80085e4 <__swsetup_r+0xd0>)
 800852c:	429c      	cmp	r4, r3
 800852e:	d10f      	bne.n	8008550 <__swsetup_r+0x3c>
 8008530:	686c      	ldr	r4, [r5, #4]
 8008532:	89a3      	ldrh	r3, [r4, #12]
 8008534:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008538:	0719      	lsls	r1, r3, #28
 800853a:	d42c      	bmi.n	8008596 <__swsetup_r+0x82>
 800853c:	06dd      	lsls	r5, r3, #27
 800853e:	d411      	bmi.n	8008564 <__swsetup_r+0x50>
 8008540:	2309      	movs	r3, #9
 8008542:	6033      	str	r3, [r6, #0]
 8008544:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008548:	81a3      	strh	r3, [r4, #12]
 800854a:	f04f 30ff 	mov.w	r0, #4294967295
 800854e:	e03e      	b.n	80085ce <__swsetup_r+0xba>
 8008550:	4b25      	ldr	r3, [pc, #148]	; (80085e8 <__swsetup_r+0xd4>)
 8008552:	429c      	cmp	r4, r3
 8008554:	d101      	bne.n	800855a <__swsetup_r+0x46>
 8008556:	68ac      	ldr	r4, [r5, #8]
 8008558:	e7eb      	b.n	8008532 <__swsetup_r+0x1e>
 800855a:	4b24      	ldr	r3, [pc, #144]	; (80085ec <__swsetup_r+0xd8>)
 800855c:	429c      	cmp	r4, r3
 800855e:	bf08      	it	eq
 8008560:	68ec      	ldreq	r4, [r5, #12]
 8008562:	e7e6      	b.n	8008532 <__swsetup_r+0x1e>
 8008564:	0758      	lsls	r0, r3, #29
 8008566:	d512      	bpl.n	800858e <__swsetup_r+0x7a>
 8008568:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800856a:	b141      	cbz	r1, 800857e <__swsetup_r+0x6a>
 800856c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008570:	4299      	cmp	r1, r3
 8008572:	d002      	beq.n	800857a <__swsetup_r+0x66>
 8008574:	4630      	mov	r0, r6
 8008576:	f002 f939 	bl	800a7ec <_free_r>
 800857a:	2300      	movs	r3, #0
 800857c:	6363      	str	r3, [r4, #52]	; 0x34
 800857e:	89a3      	ldrh	r3, [r4, #12]
 8008580:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008584:	81a3      	strh	r3, [r4, #12]
 8008586:	2300      	movs	r3, #0
 8008588:	6063      	str	r3, [r4, #4]
 800858a:	6923      	ldr	r3, [r4, #16]
 800858c:	6023      	str	r3, [r4, #0]
 800858e:	89a3      	ldrh	r3, [r4, #12]
 8008590:	f043 0308 	orr.w	r3, r3, #8
 8008594:	81a3      	strh	r3, [r4, #12]
 8008596:	6923      	ldr	r3, [r4, #16]
 8008598:	b94b      	cbnz	r3, 80085ae <__swsetup_r+0x9a>
 800859a:	89a3      	ldrh	r3, [r4, #12]
 800859c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80085a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80085a4:	d003      	beq.n	80085ae <__swsetup_r+0x9a>
 80085a6:	4621      	mov	r1, r4
 80085a8:	4630      	mov	r0, r6
 80085aa:	f001 fbed 	bl	8009d88 <__smakebuf_r>
 80085ae:	89a0      	ldrh	r0, [r4, #12]
 80085b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80085b4:	f010 0301 	ands.w	r3, r0, #1
 80085b8:	d00a      	beq.n	80085d0 <__swsetup_r+0xbc>
 80085ba:	2300      	movs	r3, #0
 80085bc:	60a3      	str	r3, [r4, #8]
 80085be:	6963      	ldr	r3, [r4, #20]
 80085c0:	425b      	negs	r3, r3
 80085c2:	61a3      	str	r3, [r4, #24]
 80085c4:	6923      	ldr	r3, [r4, #16]
 80085c6:	b943      	cbnz	r3, 80085da <__swsetup_r+0xc6>
 80085c8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80085cc:	d1ba      	bne.n	8008544 <__swsetup_r+0x30>
 80085ce:	bd70      	pop	{r4, r5, r6, pc}
 80085d0:	0781      	lsls	r1, r0, #30
 80085d2:	bf58      	it	pl
 80085d4:	6963      	ldrpl	r3, [r4, #20]
 80085d6:	60a3      	str	r3, [r4, #8]
 80085d8:	e7f4      	b.n	80085c4 <__swsetup_r+0xb0>
 80085da:	2000      	movs	r0, #0
 80085dc:	e7f7      	b.n	80085ce <__swsetup_r+0xba>
 80085de:	bf00      	nop
 80085e0:	200001d4 	.word	0x200001d4
 80085e4:	0800b52c 	.word	0x0800b52c
 80085e8:	0800b54c 	.word	0x0800b54c
 80085ec:	0800b50c 	.word	0x0800b50c

080085f0 <quorem>:
 80085f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085f4:	6903      	ldr	r3, [r0, #16]
 80085f6:	690c      	ldr	r4, [r1, #16]
 80085f8:	42a3      	cmp	r3, r4
 80085fa:	4607      	mov	r7, r0
 80085fc:	f2c0 8081 	blt.w	8008702 <quorem+0x112>
 8008600:	3c01      	subs	r4, #1
 8008602:	f101 0814 	add.w	r8, r1, #20
 8008606:	f100 0514 	add.w	r5, r0, #20
 800860a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800860e:	9301      	str	r3, [sp, #4]
 8008610:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008614:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008618:	3301      	adds	r3, #1
 800861a:	429a      	cmp	r2, r3
 800861c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008620:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008624:	fbb2 f6f3 	udiv	r6, r2, r3
 8008628:	d331      	bcc.n	800868e <quorem+0x9e>
 800862a:	f04f 0e00 	mov.w	lr, #0
 800862e:	4640      	mov	r0, r8
 8008630:	46ac      	mov	ip, r5
 8008632:	46f2      	mov	sl, lr
 8008634:	f850 2b04 	ldr.w	r2, [r0], #4
 8008638:	b293      	uxth	r3, r2
 800863a:	fb06 e303 	mla	r3, r6, r3, lr
 800863e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008642:	b29b      	uxth	r3, r3
 8008644:	ebaa 0303 	sub.w	r3, sl, r3
 8008648:	f8dc a000 	ldr.w	sl, [ip]
 800864c:	0c12      	lsrs	r2, r2, #16
 800864e:	fa13 f38a 	uxtah	r3, r3, sl
 8008652:	fb06 e202 	mla	r2, r6, r2, lr
 8008656:	9300      	str	r3, [sp, #0]
 8008658:	9b00      	ldr	r3, [sp, #0]
 800865a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800865e:	b292      	uxth	r2, r2
 8008660:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008664:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008668:	f8bd 3000 	ldrh.w	r3, [sp]
 800866c:	4581      	cmp	r9, r0
 800866e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008672:	f84c 3b04 	str.w	r3, [ip], #4
 8008676:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800867a:	d2db      	bcs.n	8008634 <quorem+0x44>
 800867c:	f855 300b 	ldr.w	r3, [r5, fp]
 8008680:	b92b      	cbnz	r3, 800868e <quorem+0x9e>
 8008682:	9b01      	ldr	r3, [sp, #4]
 8008684:	3b04      	subs	r3, #4
 8008686:	429d      	cmp	r5, r3
 8008688:	461a      	mov	r2, r3
 800868a:	d32e      	bcc.n	80086ea <quorem+0xfa>
 800868c:	613c      	str	r4, [r7, #16]
 800868e:	4638      	mov	r0, r7
 8008690:	f001 fea0 	bl	800a3d4 <__mcmp>
 8008694:	2800      	cmp	r0, #0
 8008696:	db24      	blt.n	80086e2 <quorem+0xf2>
 8008698:	3601      	adds	r6, #1
 800869a:	4628      	mov	r0, r5
 800869c:	f04f 0c00 	mov.w	ip, #0
 80086a0:	f858 2b04 	ldr.w	r2, [r8], #4
 80086a4:	f8d0 e000 	ldr.w	lr, [r0]
 80086a8:	b293      	uxth	r3, r2
 80086aa:	ebac 0303 	sub.w	r3, ip, r3
 80086ae:	0c12      	lsrs	r2, r2, #16
 80086b0:	fa13 f38e 	uxtah	r3, r3, lr
 80086b4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80086b8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80086bc:	b29b      	uxth	r3, r3
 80086be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80086c2:	45c1      	cmp	r9, r8
 80086c4:	f840 3b04 	str.w	r3, [r0], #4
 80086c8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80086cc:	d2e8      	bcs.n	80086a0 <quorem+0xb0>
 80086ce:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80086d2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80086d6:	b922      	cbnz	r2, 80086e2 <quorem+0xf2>
 80086d8:	3b04      	subs	r3, #4
 80086da:	429d      	cmp	r5, r3
 80086dc:	461a      	mov	r2, r3
 80086de:	d30a      	bcc.n	80086f6 <quorem+0x106>
 80086e0:	613c      	str	r4, [r7, #16]
 80086e2:	4630      	mov	r0, r6
 80086e4:	b003      	add	sp, #12
 80086e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086ea:	6812      	ldr	r2, [r2, #0]
 80086ec:	3b04      	subs	r3, #4
 80086ee:	2a00      	cmp	r2, #0
 80086f0:	d1cc      	bne.n	800868c <quorem+0x9c>
 80086f2:	3c01      	subs	r4, #1
 80086f4:	e7c7      	b.n	8008686 <quorem+0x96>
 80086f6:	6812      	ldr	r2, [r2, #0]
 80086f8:	3b04      	subs	r3, #4
 80086fa:	2a00      	cmp	r2, #0
 80086fc:	d1f0      	bne.n	80086e0 <quorem+0xf0>
 80086fe:	3c01      	subs	r4, #1
 8008700:	e7eb      	b.n	80086da <quorem+0xea>
 8008702:	2000      	movs	r0, #0
 8008704:	e7ee      	b.n	80086e4 <quorem+0xf4>
	...

08008708 <_dtoa_r>:
 8008708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800870c:	ed2d 8b04 	vpush	{d8-d9}
 8008710:	ec57 6b10 	vmov	r6, r7, d0
 8008714:	b093      	sub	sp, #76	; 0x4c
 8008716:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008718:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800871c:	9106      	str	r1, [sp, #24]
 800871e:	ee10 aa10 	vmov	sl, s0
 8008722:	4604      	mov	r4, r0
 8008724:	9209      	str	r2, [sp, #36]	; 0x24
 8008726:	930c      	str	r3, [sp, #48]	; 0x30
 8008728:	46bb      	mov	fp, r7
 800872a:	b975      	cbnz	r5, 800874a <_dtoa_r+0x42>
 800872c:	2010      	movs	r0, #16
 800872e:	f001 fb6b 	bl	8009e08 <malloc>
 8008732:	4602      	mov	r2, r0
 8008734:	6260      	str	r0, [r4, #36]	; 0x24
 8008736:	b920      	cbnz	r0, 8008742 <_dtoa_r+0x3a>
 8008738:	4ba7      	ldr	r3, [pc, #668]	; (80089d8 <_dtoa_r+0x2d0>)
 800873a:	21ea      	movs	r1, #234	; 0xea
 800873c:	48a7      	ldr	r0, [pc, #668]	; (80089dc <_dtoa_r+0x2d4>)
 800873e:	f002 fc79 	bl	800b034 <__assert_func>
 8008742:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008746:	6005      	str	r5, [r0, #0]
 8008748:	60c5      	str	r5, [r0, #12]
 800874a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800874c:	6819      	ldr	r1, [r3, #0]
 800874e:	b151      	cbz	r1, 8008766 <_dtoa_r+0x5e>
 8008750:	685a      	ldr	r2, [r3, #4]
 8008752:	604a      	str	r2, [r1, #4]
 8008754:	2301      	movs	r3, #1
 8008756:	4093      	lsls	r3, r2
 8008758:	608b      	str	r3, [r1, #8]
 800875a:	4620      	mov	r0, r4
 800875c:	f001 fbae 	bl	8009ebc <_Bfree>
 8008760:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008762:	2200      	movs	r2, #0
 8008764:	601a      	str	r2, [r3, #0]
 8008766:	1e3b      	subs	r3, r7, #0
 8008768:	bfaa      	itet	ge
 800876a:	2300      	movge	r3, #0
 800876c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008770:	f8c8 3000 	strge.w	r3, [r8]
 8008774:	4b9a      	ldr	r3, [pc, #616]	; (80089e0 <_dtoa_r+0x2d8>)
 8008776:	bfbc      	itt	lt
 8008778:	2201      	movlt	r2, #1
 800877a:	f8c8 2000 	strlt.w	r2, [r8]
 800877e:	ea33 030b 	bics.w	r3, r3, fp
 8008782:	d11b      	bne.n	80087bc <_dtoa_r+0xb4>
 8008784:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008786:	f242 730f 	movw	r3, #9999	; 0x270f
 800878a:	6013      	str	r3, [r2, #0]
 800878c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008790:	4333      	orrs	r3, r6
 8008792:	f000 8592 	beq.w	80092ba <_dtoa_r+0xbb2>
 8008796:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008798:	b963      	cbnz	r3, 80087b4 <_dtoa_r+0xac>
 800879a:	4b92      	ldr	r3, [pc, #584]	; (80089e4 <_dtoa_r+0x2dc>)
 800879c:	e022      	b.n	80087e4 <_dtoa_r+0xdc>
 800879e:	4b92      	ldr	r3, [pc, #584]	; (80089e8 <_dtoa_r+0x2e0>)
 80087a0:	9301      	str	r3, [sp, #4]
 80087a2:	3308      	adds	r3, #8
 80087a4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80087a6:	6013      	str	r3, [r2, #0]
 80087a8:	9801      	ldr	r0, [sp, #4]
 80087aa:	b013      	add	sp, #76	; 0x4c
 80087ac:	ecbd 8b04 	vpop	{d8-d9}
 80087b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087b4:	4b8b      	ldr	r3, [pc, #556]	; (80089e4 <_dtoa_r+0x2dc>)
 80087b6:	9301      	str	r3, [sp, #4]
 80087b8:	3303      	adds	r3, #3
 80087ba:	e7f3      	b.n	80087a4 <_dtoa_r+0x9c>
 80087bc:	2200      	movs	r2, #0
 80087be:	2300      	movs	r3, #0
 80087c0:	4650      	mov	r0, sl
 80087c2:	4659      	mov	r1, fp
 80087c4:	f7f8 f990 	bl	8000ae8 <__aeabi_dcmpeq>
 80087c8:	ec4b ab19 	vmov	d9, sl, fp
 80087cc:	4680      	mov	r8, r0
 80087ce:	b158      	cbz	r0, 80087e8 <_dtoa_r+0xe0>
 80087d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80087d2:	2301      	movs	r3, #1
 80087d4:	6013      	str	r3, [r2, #0]
 80087d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80087d8:	2b00      	cmp	r3, #0
 80087da:	f000 856b 	beq.w	80092b4 <_dtoa_r+0xbac>
 80087de:	4883      	ldr	r0, [pc, #524]	; (80089ec <_dtoa_r+0x2e4>)
 80087e0:	6018      	str	r0, [r3, #0]
 80087e2:	1e43      	subs	r3, r0, #1
 80087e4:	9301      	str	r3, [sp, #4]
 80087e6:	e7df      	b.n	80087a8 <_dtoa_r+0xa0>
 80087e8:	ec4b ab10 	vmov	d0, sl, fp
 80087ec:	aa10      	add	r2, sp, #64	; 0x40
 80087ee:	a911      	add	r1, sp, #68	; 0x44
 80087f0:	4620      	mov	r0, r4
 80087f2:	f001 ff11 	bl	800a618 <__d2b>
 80087f6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80087fa:	ee08 0a10 	vmov	s16, r0
 80087fe:	2d00      	cmp	r5, #0
 8008800:	f000 8084 	beq.w	800890c <_dtoa_r+0x204>
 8008804:	ee19 3a90 	vmov	r3, s19
 8008808:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800880c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008810:	4656      	mov	r6, sl
 8008812:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008816:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800881a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800881e:	4b74      	ldr	r3, [pc, #464]	; (80089f0 <_dtoa_r+0x2e8>)
 8008820:	2200      	movs	r2, #0
 8008822:	4630      	mov	r0, r6
 8008824:	4639      	mov	r1, r7
 8008826:	f7f7 fd3f 	bl	80002a8 <__aeabi_dsub>
 800882a:	a365      	add	r3, pc, #404	; (adr r3, 80089c0 <_dtoa_r+0x2b8>)
 800882c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008830:	f7f7 fef2 	bl	8000618 <__aeabi_dmul>
 8008834:	a364      	add	r3, pc, #400	; (adr r3, 80089c8 <_dtoa_r+0x2c0>)
 8008836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800883a:	f7f7 fd37 	bl	80002ac <__adddf3>
 800883e:	4606      	mov	r6, r0
 8008840:	4628      	mov	r0, r5
 8008842:	460f      	mov	r7, r1
 8008844:	f7f7 fe7e 	bl	8000544 <__aeabi_i2d>
 8008848:	a361      	add	r3, pc, #388	; (adr r3, 80089d0 <_dtoa_r+0x2c8>)
 800884a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800884e:	f7f7 fee3 	bl	8000618 <__aeabi_dmul>
 8008852:	4602      	mov	r2, r0
 8008854:	460b      	mov	r3, r1
 8008856:	4630      	mov	r0, r6
 8008858:	4639      	mov	r1, r7
 800885a:	f7f7 fd27 	bl	80002ac <__adddf3>
 800885e:	4606      	mov	r6, r0
 8008860:	460f      	mov	r7, r1
 8008862:	f7f8 f989 	bl	8000b78 <__aeabi_d2iz>
 8008866:	2200      	movs	r2, #0
 8008868:	9000      	str	r0, [sp, #0]
 800886a:	2300      	movs	r3, #0
 800886c:	4630      	mov	r0, r6
 800886e:	4639      	mov	r1, r7
 8008870:	f7f8 f944 	bl	8000afc <__aeabi_dcmplt>
 8008874:	b150      	cbz	r0, 800888c <_dtoa_r+0x184>
 8008876:	9800      	ldr	r0, [sp, #0]
 8008878:	f7f7 fe64 	bl	8000544 <__aeabi_i2d>
 800887c:	4632      	mov	r2, r6
 800887e:	463b      	mov	r3, r7
 8008880:	f7f8 f932 	bl	8000ae8 <__aeabi_dcmpeq>
 8008884:	b910      	cbnz	r0, 800888c <_dtoa_r+0x184>
 8008886:	9b00      	ldr	r3, [sp, #0]
 8008888:	3b01      	subs	r3, #1
 800888a:	9300      	str	r3, [sp, #0]
 800888c:	9b00      	ldr	r3, [sp, #0]
 800888e:	2b16      	cmp	r3, #22
 8008890:	d85a      	bhi.n	8008948 <_dtoa_r+0x240>
 8008892:	9a00      	ldr	r2, [sp, #0]
 8008894:	4b57      	ldr	r3, [pc, #348]	; (80089f4 <_dtoa_r+0x2ec>)
 8008896:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800889a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800889e:	ec51 0b19 	vmov	r0, r1, d9
 80088a2:	f7f8 f92b 	bl	8000afc <__aeabi_dcmplt>
 80088a6:	2800      	cmp	r0, #0
 80088a8:	d050      	beq.n	800894c <_dtoa_r+0x244>
 80088aa:	9b00      	ldr	r3, [sp, #0]
 80088ac:	3b01      	subs	r3, #1
 80088ae:	9300      	str	r3, [sp, #0]
 80088b0:	2300      	movs	r3, #0
 80088b2:	930b      	str	r3, [sp, #44]	; 0x2c
 80088b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80088b6:	1b5d      	subs	r5, r3, r5
 80088b8:	1e6b      	subs	r3, r5, #1
 80088ba:	9305      	str	r3, [sp, #20]
 80088bc:	bf45      	ittet	mi
 80088be:	f1c5 0301 	rsbmi	r3, r5, #1
 80088c2:	9304      	strmi	r3, [sp, #16]
 80088c4:	2300      	movpl	r3, #0
 80088c6:	2300      	movmi	r3, #0
 80088c8:	bf4c      	ite	mi
 80088ca:	9305      	strmi	r3, [sp, #20]
 80088cc:	9304      	strpl	r3, [sp, #16]
 80088ce:	9b00      	ldr	r3, [sp, #0]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	db3d      	blt.n	8008950 <_dtoa_r+0x248>
 80088d4:	9b05      	ldr	r3, [sp, #20]
 80088d6:	9a00      	ldr	r2, [sp, #0]
 80088d8:	920a      	str	r2, [sp, #40]	; 0x28
 80088da:	4413      	add	r3, r2
 80088dc:	9305      	str	r3, [sp, #20]
 80088de:	2300      	movs	r3, #0
 80088e0:	9307      	str	r3, [sp, #28]
 80088e2:	9b06      	ldr	r3, [sp, #24]
 80088e4:	2b09      	cmp	r3, #9
 80088e6:	f200 8089 	bhi.w	80089fc <_dtoa_r+0x2f4>
 80088ea:	2b05      	cmp	r3, #5
 80088ec:	bfc4      	itt	gt
 80088ee:	3b04      	subgt	r3, #4
 80088f0:	9306      	strgt	r3, [sp, #24]
 80088f2:	9b06      	ldr	r3, [sp, #24]
 80088f4:	f1a3 0302 	sub.w	r3, r3, #2
 80088f8:	bfcc      	ite	gt
 80088fa:	2500      	movgt	r5, #0
 80088fc:	2501      	movle	r5, #1
 80088fe:	2b03      	cmp	r3, #3
 8008900:	f200 8087 	bhi.w	8008a12 <_dtoa_r+0x30a>
 8008904:	e8df f003 	tbb	[pc, r3]
 8008908:	59383a2d 	.word	0x59383a2d
 800890c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008910:	441d      	add	r5, r3
 8008912:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008916:	2b20      	cmp	r3, #32
 8008918:	bfc1      	itttt	gt
 800891a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800891e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008922:	fa0b f303 	lslgt.w	r3, fp, r3
 8008926:	fa26 f000 	lsrgt.w	r0, r6, r0
 800892a:	bfda      	itte	le
 800892c:	f1c3 0320 	rsble	r3, r3, #32
 8008930:	fa06 f003 	lslle.w	r0, r6, r3
 8008934:	4318      	orrgt	r0, r3
 8008936:	f7f7 fdf5 	bl	8000524 <__aeabi_ui2d>
 800893a:	2301      	movs	r3, #1
 800893c:	4606      	mov	r6, r0
 800893e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008942:	3d01      	subs	r5, #1
 8008944:	930e      	str	r3, [sp, #56]	; 0x38
 8008946:	e76a      	b.n	800881e <_dtoa_r+0x116>
 8008948:	2301      	movs	r3, #1
 800894a:	e7b2      	b.n	80088b2 <_dtoa_r+0x1aa>
 800894c:	900b      	str	r0, [sp, #44]	; 0x2c
 800894e:	e7b1      	b.n	80088b4 <_dtoa_r+0x1ac>
 8008950:	9b04      	ldr	r3, [sp, #16]
 8008952:	9a00      	ldr	r2, [sp, #0]
 8008954:	1a9b      	subs	r3, r3, r2
 8008956:	9304      	str	r3, [sp, #16]
 8008958:	4253      	negs	r3, r2
 800895a:	9307      	str	r3, [sp, #28]
 800895c:	2300      	movs	r3, #0
 800895e:	930a      	str	r3, [sp, #40]	; 0x28
 8008960:	e7bf      	b.n	80088e2 <_dtoa_r+0x1da>
 8008962:	2300      	movs	r3, #0
 8008964:	9308      	str	r3, [sp, #32]
 8008966:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008968:	2b00      	cmp	r3, #0
 800896a:	dc55      	bgt.n	8008a18 <_dtoa_r+0x310>
 800896c:	2301      	movs	r3, #1
 800896e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008972:	461a      	mov	r2, r3
 8008974:	9209      	str	r2, [sp, #36]	; 0x24
 8008976:	e00c      	b.n	8008992 <_dtoa_r+0x28a>
 8008978:	2301      	movs	r3, #1
 800897a:	e7f3      	b.n	8008964 <_dtoa_r+0x25c>
 800897c:	2300      	movs	r3, #0
 800897e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008980:	9308      	str	r3, [sp, #32]
 8008982:	9b00      	ldr	r3, [sp, #0]
 8008984:	4413      	add	r3, r2
 8008986:	9302      	str	r3, [sp, #8]
 8008988:	3301      	adds	r3, #1
 800898a:	2b01      	cmp	r3, #1
 800898c:	9303      	str	r3, [sp, #12]
 800898e:	bfb8      	it	lt
 8008990:	2301      	movlt	r3, #1
 8008992:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008994:	2200      	movs	r2, #0
 8008996:	6042      	str	r2, [r0, #4]
 8008998:	2204      	movs	r2, #4
 800899a:	f102 0614 	add.w	r6, r2, #20
 800899e:	429e      	cmp	r6, r3
 80089a0:	6841      	ldr	r1, [r0, #4]
 80089a2:	d93d      	bls.n	8008a20 <_dtoa_r+0x318>
 80089a4:	4620      	mov	r0, r4
 80089a6:	f001 fa49 	bl	8009e3c <_Balloc>
 80089aa:	9001      	str	r0, [sp, #4]
 80089ac:	2800      	cmp	r0, #0
 80089ae:	d13b      	bne.n	8008a28 <_dtoa_r+0x320>
 80089b0:	4b11      	ldr	r3, [pc, #68]	; (80089f8 <_dtoa_r+0x2f0>)
 80089b2:	4602      	mov	r2, r0
 80089b4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80089b8:	e6c0      	b.n	800873c <_dtoa_r+0x34>
 80089ba:	2301      	movs	r3, #1
 80089bc:	e7df      	b.n	800897e <_dtoa_r+0x276>
 80089be:	bf00      	nop
 80089c0:	636f4361 	.word	0x636f4361
 80089c4:	3fd287a7 	.word	0x3fd287a7
 80089c8:	8b60c8b3 	.word	0x8b60c8b3
 80089cc:	3fc68a28 	.word	0x3fc68a28
 80089d0:	509f79fb 	.word	0x509f79fb
 80089d4:	3fd34413 	.word	0x3fd34413
 80089d8:	0800b486 	.word	0x0800b486
 80089dc:	0800b49d 	.word	0x0800b49d
 80089e0:	7ff00000 	.word	0x7ff00000
 80089e4:	0800b482 	.word	0x0800b482
 80089e8:	0800b479 	.word	0x0800b479
 80089ec:	0800b2f9 	.word	0x0800b2f9
 80089f0:	3ff80000 	.word	0x3ff80000
 80089f4:	0800b670 	.word	0x0800b670
 80089f8:	0800b4f8 	.word	0x0800b4f8
 80089fc:	2501      	movs	r5, #1
 80089fe:	2300      	movs	r3, #0
 8008a00:	9306      	str	r3, [sp, #24]
 8008a02:	9508      	str	r5, [sp, #32]
 8008a04:	f04f 33ff 	mov.w	r3, #4294967295
 8008a08:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	2312      	movs	r3, #18
 8008a10:	e7b0      	b.n	8008974 <_dtoa_r+0x26c>
 8008a12:	2301      	movs	r3, #1
 8008a14:	9308      	str	r3, [sp, #32]
 8008a16:	e7f5      	b.n	8008a04 <_dtoa_r+0x2fc>
 8008a18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a1a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008a1e:	e7b8      	b.n	8008992 <_dtoa_r+0x28a>
 8008a20:	3101      	adds	r1, #1
 8008a22:	6041      	str	r1, [r0, #4]
 8008a24:	0052      	lsls	r2, r2, #1
 8008a26:	e7b8      	b.n	800899a <_dtoa_r+0x292>
 8008a28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a2a:	9a01      	ldr	r2, [sp, #4]
 8008a2c:	601a      	str	r2, [r3, #0]
 8008a2e:	9b03      	ldr	r3, [sp, #12]
 8008a30:	2b0e      	cmp	r3, #14
 8008a32:	f200 809d 	bhi.w	8008b70 <_dtoa_r+0x468>
 8008a36:	2d00      	cmp	r5, #0
 8008a38:	f000 809a 	beq.w	8008b70 <_dtoa_r+0x468>
 8008a3c:	9b00      	ldr	r3, [sp, #0]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	dd32      	ble.n	8008aa8 <_dtoa_r+0x3a0>
 8008a42:	4ab7      	ldr	r2, [pc, #732]	; (8008d20 <_dtoa_r+0x618>)
 8008a44:	f003 030f 	and.w	r3, r3, #15
 8008a48:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008a4c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008a50:	9b00      	ldr	r3, [sp, #0]
 8008a52:	05d8      	lsls	r0, r3, #23
 8008a54:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008a58:	d516      	bpl.n	8008a88 <_dtoa_r+0x380>
 8008a5a:	4bb2      	ldr	r3, [pc, #712]	; (8008d24 <_dtoa_r+0x61c>)
 8008a5c:	ec51 0b19 	vmov	r0, r1, d9
 8008a60:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008a64:	f7f7 ff02 	bl	800086c <__aeabi_ddiv>
 8008a68:	f007 070f 	and.w	r7, r7, #15
 8008a6c:	4682      	mov	sl, r0
 8008a6e:	468b      	mov	fp, r1
 8008a70:	2503      	movs	r5, #3
 8008a72:	4eac      	ldr	r6, [pc, #688]	; (8008d24 <_dtoa_r+0x61c>)
 8008a74:	b957      	cbnz	r7, 8008a8c <_dtoa_r+0x384>
 8008a76:	4642      	mov	r2, r8
 8008a78:	464b      	mov	r3, r9
 8008a7a:	4650      	mov	r0, sl
 8008a7c:	4659      	mov	r1, fp
 8008a7e:	f7f7 fef5 	bl	800086c <__aeabi_ddiv>
 8008a82:	4682      	mov	sl, r0
 8008a84:	468b      	mov	fp, r1
 8008a86:	e028      	b.n	8008ada <_dtoa_r+0x3d2>
 8008a88:	2502      	movs	r5, #2
 8008a8a:	e7f2      	b.n	8008a72 <_dtoa_r+0x36a>
 8008a8c:	07f9      	lsls	r1, r7, #31
 8008a8e:	d508      	bpl.n	8008aa2 <_dtoa_r+0x39a>
 8008a90:	4640      	mov	r0, r8
 8008a92:	4649      	mov	r1, r9
 8008a94:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008a98:	f7f7 fdbe 	bl	8000618 <__aeabi_dmul>
 8008a9c:	3501      	adds	r5, #1
 8008a9e:	4680      	mov	r8, r0
 8008aa0:	4689      	mov	r9, r1
 8008aa2:	107f      	asrs	r7, r7, #1
 8008aa4:	3608      	adds	r6, #8
 8008aa6:	e7e5      	b.n	8008a74 <_dtoa_r+0x36c>
 8008aa8:	f000 809b 	beq.w	8008be2 <_dtoa_r+0x4da>
 8008aac:	9b00      	ldr	r3, [sp, #0]
 8008aae:	4f9d      	ldr	r7, [pc, #628]	; (8008d24 <_dtoa_r+0x61c>)
 8008ab0:	425e      	negs	r6, r3
 8008ab2:	4b9b      	ldr	r3, [pc, #620]	; (8008d20 <_dtoa_r+0x618>)
 8008ab4:	f006 020f 	and.w	r2, r6, #15
 8008ab8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ac0:	ec51 0b19 	vmov	r0, r1, d9
 8008ac4:	f7f7 fda8 	bl	8000618 <__aeabi_dmul>
 8008ac8:	1136      	asrs	r6, r6, #4
 8008aca:	4682      	mov	sl, r0
 8008acc:	468b      	mov	fp, r1
 8008ace:	2300      	movs	r3, #0
 8008ad0:	2502      	movs	r5, #2
 8008ad2:	2e00      	cmp	r6, #0
 8008ad4:	d17a      	bne.n	8008bcc <_dtoa_r+0x4c4>
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d1d3      	bne.n	8008a82 <_dtoa_r+0x37a>
 8008ada:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	f000 8082 	beq.w	8008be6 <_dtoa_r+0x4de>
 8008ae2:	4b91      	ldr	r3, [pc, #580]	; (8008d28 <_dtoa_r+0x620>)
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	4650      	mov	r0, sl
 8008ae8:	4659      	mov	r1, fp
 8008aea:	f7f8 f807 	bl	8000afc <__aeabi_dcmplt>
 8008aee:	2800      	cmp	r0, #0
 8008af0:	d079      	beq.n	8008be6 <_dtoa_r+0x4de>
 8008af2:	9b03      	ldr	r3, [sp, #12]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d076      	beq.n	8008be6 <_dtoa_r+0x4de>
 8008af8:	9b02      	ldr	r3, [sp, #8]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	dd36      	ble.n	8008b6c <_dtoa_r+0x464>
 8008afe:	9b00      	ldr	r3, [sp, #0]
 8008b00:	4650      	mov	r0, sl
 8008b02:	4659      	mov	r1, fp
 8008b04:	1e5f      	subs	r7, r3, #1
 8008b06:	2200      	movs	r2, #0
 8008b08:	4b88      	ldr	r3, [pc, #544]	; (8008d2c <_dtoa_r+0x624>)
 8008b0a:	f7f7 fd85 	bl	8000618 <__aeabi_dmul>
 8008b0e:	9e02      	ldr	r6, [sp, #8]
 8008b10:	4682      	mov	sl, r0
 8008b12:	468b      	mov	fp, r1
 8008b14:	3501      	adds	r5, #1
 8008b16:	4628      	mov	r0, r5
 8008b18:	f7f7 fd14 	bl	8000544 <__aeabi_i2d>
 8008b1c:	4652      	mov	r2, sl
 8008b1e:	465b      	mov	r3, fp
 8008b20:	f7f7 fd7a 	bl	8000618 <__aeabi_dmul>
 8008b24:	4b82      	ldr	r3, [pc, #520]	; (8008d30 <_dtoa_r+0x628>)
 8008b26:	2200      	movs	r2, #0
 8008b28:	f7f7 fbc0 	bl	80002ac <__adddf3>
 8008b2c:	46d0      	mov	r8, sl
 8008b2e:	46d9      	mov	r9, fp
 8008b30:	4682      	mov	sl, r0
 8008b32:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8008b36:	2e00      	cmp	r6, #0
 8008b38:	d158      	bne.n	8008bec <_dtoa_r+0x4e4>
 8008b3a:	4b7e      	ldr	r3, [pc, #504]	; (8008d34 <_dtoa_r+0x62c>)
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	4640      	mov	r0, r8
 8008b40:	4649      	mov	r1, r9
 8008b42:	f7f7 fbb1 	bl	80002a8 <__aeabi_dsub>
 8008b46:	4652      	mov	r2, sl
 8008b48:	465b      	mov	r3, fp
 8008b4a:	4680      	mov	r8, r0
 8008b4c:	4689      	mov	r9, r1
 8008b4e:	f7f7 fff3 	bl	8000b38 <__aeabi_dcmpgt>
 8008b52:	2800      	cmp	r0, #0
 8008b54:	f040 8295 	bne.w	8009082 <_dtoa_r+0x97a>
 8008b58:	4652      	mov	r2, sl
 8008b5a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008b5e:	4640      	mov	r0, r8
 8008b60:	4649      	mov	r1, r9
 8008b62:	f7f7 ffcb 	bl	8000afc <__aeabi_dcmplt>
 8008b66:	2800      	cmp	r0, #0
 8008b68:	f040 8289 	bne.w	800907e <_dtoa_r+0x976>
 8008b6c:	ec5b ab19 	vmov	sl, fp, d9
 8008b70:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	f2c0 8148 	blt.w	8008e08 <_dtoa_r+0x700>
 8008b78:	9a00      	ldr	r2, [sp, #0]
 8008b7a:	2a0e      	cmp	r2, #14
 8008b7c:	f300 8144 	bgt.w	8008e08 <_dtoa_r+0x700>
 8008b80:	4b67      	ldr	r3, [pc, #412]	; (8008d20 <_dtoa_r+0x618>)
 8008b82:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008b86:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008b8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	f280 80d5 	bge.w	8008d3c <_dtoa_r+0x634>
 8008b92:	9b03      	ldr	r3, [sp, #12]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	f300 80d1 	bgt.w	8008d3c <_dtoa_r+0x634>
 8008b9a:	f040 826f 	bne.w	800907c <_dtoa_r+0x974>
 8008b9e:	4b65      	ldr	r3, [pc, #404]	; (8008d34 <_dtoa_r+0x62c>)
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	4640      	mov	r0, r8
 8008ba4:	4649      	mov	r1, r9
 8008ba6:	f7f7 fd37 	bl	8000618 <__aeabi_dmul>
 8008baa:	4652      	mov	r2, sl
 8008bac:	465b      	mov	r3, fp
 8008bae:	f7f7 ffb9 	bl	8000b24 <__aeabi_dcmpge>
 8008bb2:	9e03      	ldr	r6, [sp, #12]
 8008bb4:	4637      	mov	r7, r6
 8008bb6:	2800      	cmp	r0, #0
 8008bb8:	f040 8245 	bne.w	8009046 <_dtoa_r+0x93e>
 8008bbc:	9d01      	ldr	r5, [sp, #4]
 8008bbe:	2331      	movs	r3, #49	; 0x31
 8008bc0:	f805 3b01 	strb.w	r3, [r5], #1
 8008bc4:	9b00      	ldr	r3, [sp, #0]
 8008bc6:	3301      	adds	r3, #1
 8008bc8:	9300      	str	r3, [sp, #0]
 8008bca:	e240      	b.n	800904e <_dtoa_r+0x946>
 8008bcc:	07f2      	lsls	r2, r6, #31
 8008bce:	d505      	bpl.n	8008bdc <_dtoa_r+0x4d4>
 8008bd0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008bd4:	f7f7 fd20 	bl	8000618 <__aeabi_dmul>
 8008bd8:	3501      	adds	r5, #1
 8008bda:	2301      	movs	r3, #1
 8008bdc:	1076      	asrs	r6, r6, #1
 8008bde:	3708      	adds	r7, #8
 8008be0:	e777      	b.n	8008ad2 <_dtoa_r+0x3ca>
 8008be2:	2502      	movs	r5, #2
 8008be4:	e779      	b.n	8008ada <_dtoa_r+0x3d2>
 8008be6:	9f00      	ldr	r7, [sp, #0]
 8008be8:	9e03      	ldr	r6, [sp, #12]
 8008bea:	e794      	b.n	8008b16 <_dtoa_r+0x40e>
 8008bec:	9901      	ldr	r1, [sp, #4]
 8008bee:	4b4c      	ldr	r3, [pc, #304]	; (8008d20 <_dtoa_r+0x618>)
 8008bf0:	4431      	add	r1, r6
 8008bf2:	910d      	str	r1, [sp, #52]	; 0x34
 8008bf4:	9908      	ldr	r1, [sp, #32]
 8008bf6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008bfa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008bfe:	2900      	cmp	r1, #0
 8008c00:	d043      	beq.n	8008c8a <_dtoa_r+0x582>
 8008c02:	494d      	ldr	r1, [pc, #308]	; (8008d38 <_dtoa_r+0x630>)
 8008c04:	2000      	movs	r0, #0
 8008c06:	f7f7 fe31 	bl	800086c <__aeabi_ddiv>
 8008c0a:	4652      	mov	r2, sl
 8008c0c:	465b      	mov	r3, fp
 8008c0e:	f7f7 fb4b 	bl	80002a8 <__aeabi_dsub>
 8008c12:	9d01      	ldr	r5, [sp, #4]
 8008c14:	4682      	mov	sl, r0
 8008c16:	468b      	mov	fp, r1
 8008c18:	4649      	mov	r1, r9
 8008c1a:	4640      	mov	r0, r8
 8008c1c:	f7f7 ffac 	bl	8000b78 <__aeabi_d2iz>
 8008c20:	4606      	mov	r6, r0
 8008c22:	f7f7 fc8f 	bl	8000544 <__aeabi_i2d>
 8008c26:	4602      	mov	r2, r0
 8008c28:	460b      	mov	r3, r1
 8008c2a:	4640      	mov	r0, r8
 8008c2c:	4649      	mov	r1, r9
 8008c2e:	f7f7 fb3b 	bl	80002a8 <__aeabi_dsub>
 8008c32:	3630      	adds	r6, #48	; 0x30
 8008c34:	f805 6b01 	strb.w	r6, [r5], #1
 8008c38:	4652      	mov	r2, sl
 8008c3a:	465b      	mov	r3, fp
 8008c3c:	4680      	mov	r8, r0
 8008c3e:	4689      	mov	r9, r1
 8008c40:	f7f7 ff5c 	bl	8000afc <__aeabi_dcmplt>
 8008c44:	2800      	cmp	r0, #0
 8008c46:	d163      	bne.n	8008d10 <_dtoa_r+0x608>
 8008c48:	4642      	mov	r2, r8
 8008c4a:	464b      	mov	r3, r9
 8008c4c:	4936      	ldr	r1, [pc, #216]	; (8008d28 <_dtoa_r+0x620>)
 8008c4e:	2000      	movs	r0, #0
 8008c50:	f7f7 fb2a 	bl	80002a8 <__aeabi_dsub>
 8008c54:	4652      	mov	r2, sl
 8008c56:	465b      	mov	r3, fp
 8008c58:	f7f7 ff50 	bl	8000afc <__aeabi_dcmplt>
 8008c5c:	2800      	cmp	r0, #0
 8008c5e:	f040 80b5 	bne.w	8008dcc <_dtoa_r+0x6c4>
 8008c62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008c64:	429d      	cmp	r5, r3
 8008c66:	d081      	beq.n	8008b6c <_dtoa_r+0x464>
 8008c68:	4b30      	ldr	r3, [pc, #192]	; (8008d2c <_dtoa_r+0x624>)
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	4650      	mov	r0, sl
 8008c6e:	4659      	mov	r1, fp
 8008c70:	f7f7 fcd2 	bl	8000618 <__aeabi_dmul>
 8008c74:	4b2d      	ldr	r3, [pc, #180]	; (8008d2c <_dtoa_r+0x624>)
 8008c76:	4682      	mov	sl, r0
 8008c78:	468b      	mov	fp, r1
 8008c7a:	4640      	mov	r0, r8
 8008c7c:	4649      	mov	r1, r9
 8008c7e:	2200      	movs	r2, #0
 8008c80:	f7f7 fcca 	bl	8000618 <__aeabi_dmul>
 8008c84:	4680      	mov	r8, r0
 8008c86:	4689      	mov	r9, r1
 8008c88:	e7c6      	b.n	8008c18 <_dtoa_r+0x510>
 8008c8a:	4650      	mov	r0, sl
 8008c8c:	4659      	mov	r1, fp
 8008c8e:	f7f7 fcc3 	bl	8000618 <__aeabi_dmul>
 8008c92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008c94:	9d01      	ldr	r5, [sp, #4]
 8008c96:	930f      	str	r3, [sp, #60]	; 0x3c
 8008c98:	4682      	mov	sl, r0
 8008c9a:	468b      	mov	fp, r1
 8008c9c:	4649      	mov	r1, r9
 8008c9e:	4640      	mov	r0, r8
 8008ca0:	f7f7 ff6a 	bl	8000b78 <__aeabi_d2iz>
 8008ca4:	4606      	mov	r6, r0
 8008ca6:	f7f7 fc4d 	bl	8000544 <__aeabi_i2d>
 8008caa:	3630      	adds	r6, #48	; 0x30
 8008cac:	4602      	mov	r2, r0
 8008cae:	460b      	mov	r3, r1
 8008cb0:	4640      	mov	r0, r8
 8008cb2:	4649      	mov	r1, r9
 8008cb4:	f7f7 faf8 	bl	80002a8 <__aeabi_dsub>
 8008cb8:	f805 6b01 	strb.w	r6, [r5], #1
 8008cbc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008cbe:	429d      	cmp	r5, r3
 8008cc0:	4680      	mov	r8, r0
 8008cc2:	4689      	mov	r9, r1
 8008cc4:	f04f 0200 	mov.w	r2, #0
 8008cc8:	d124      	bne.n	8008d14 <_dtoa_r+0x60c>
 8008cca:	4b1b      	ldr	r3, [pc, #108]	; (8008d38 <_dtoa_r+0x630>)
 8008ccc:	4650      	mov	r0, sl
 8008cce:	4659      	mov	r1, fp
 8008cd0:	f7f7 faec 	bl	80002ac <__adddf3>
 8008cd4:	4602      	mov	r2, r0
 8008cd6:	460b      	mov	r3, r1
 8008cd8:	4640      	mov	r0, r8
 8008cda:	4649      	mov	r1, r9
 8008cdc:	f7f7 ff2c 	bl	8000b38 <__aeabi_dcmpgt>
 8008ce0:	2800      	cmp	r0, #0
 8008ce2:	d173      	bne.n	8008dcc <_dtoa_r+0x6c4>
 8008ce4:	4652      	mov	r2, sl
 8008ce6:	465b      	mov	r3, fp
 8008ce8:	4913      	ldr	r1, [pc, #76]	; (8008d38 <_dtoa_r+0x630>)
 8008cea:	2000      	movs	r0, #0
 8008cec:	f7f7 fadc 	bl	80002a8 <__aeabi_dsub>
 8008cf0:	4602      	mov	r2, r0
 8008cf2:	460b      	mov	r3, r1
 8008cf4:	4640      	mov	r0, r8
 8008cf6:	4649      	mov	r1, r9
 8008cf8:	f7f7 ff00 	bl	8000afc <__aeabi_dcmplt>
 8008cfc:	2800      	cmp	r0, #0
 8008cfe:	f43f af35 	beq.w	8008b6c <_dtoa_r+0x464>
 8008d02:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008d04:	1e6b      	subs	r3, r5, #1
 8008d06:	930f      	str	r3, [sp, #60]	; 0x3c
 8008d08:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008d0c:	2b30      	cmp	r3, #48	; 0x30
 8008d0e:	d0f8      	beq.n	8008d02 <_dtoa_r+0x5fa>
 8008d10:	9700      	str	r7, [sp, #0]
 8008d12:	e049      	b.n	8008da8 <_dtoa_r+0x6a0>
 8008d14:	4b05      	ldr	r3, [pc, #20]	; (8008d2c <_dtoa_r+0x624>)
 8008d16:	f7f7 fc7f 	bl	8000618 <__aeabi_dmul>
 8008d1a:	4680      	mov	r8, r0
 8008d1c:	4689      	mov	r9, r1
 8008d1e:	e7bd      	b.n	8008c9c <_dtoa_r+0x594>
 8008d20:	0800b670 	.word	0x0800b670
 8008d24:	0800b648 	.word	0x0800b648
 8008d28:	3ff00000 	.word	0x3ff00000
 8008d2c:	40240000 	.word	0x40240000
 8008d30:	401c0000 	.word	0x401c0000
 8008d34:	40140000 	.word	0x40140000
 8008d38:	3fe00000 	.word	0x3fe00000
 8008d3c:	9d01      	ldr	r5, [sp, #4]
 8008d3e:	4656      	mov	r6, sl
 8008d40:	465f      	mov	r7, fp
 8008d42:	4642      	mov	r2, r8
 8008d44:	464b      	mov	r3, r9
 8008d46:	4630      	mov	r0, r6
 8008d48:	4639      	mov	r1, r7
 8008d4a:	f7f7 fd8f 	bl	800086c <__aeabi_ddiv>
 8008d4e:	f7f7 ff13 	bl	8000b78 <__aeabi_d2iz>
 8008d52:	4682      	mov	sl, r0
 8008d54:	f7f7 fbf6 	bl	8000544 <__aeabi_i2d>
 8008d58:	4642      	mov	r2, r8
 8008d5a:	464b      	mov	r3, r9
 8008d5c:	f7f7 fc5c 	bl	8000618 <__aeabi_dmul>
 8008d60:	4602      	mov	r2, r0
 8008d62:	460b      	mov	r3, r1
 8008d64:	4630      	mov	r0, r6
 8008d66:	4639      	mov	r1, r7
 8008d68:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8008d6c:	f7f7 fa9c 	bl	80002a8 <__aeabi_dsub>
 8008d70:	f805 6b01 	strb.w	r6, [r5], #1
 8008d74:	9e01      	ldr	r6, [sp, #4]
 8008d76:	9f03      	ldr	r7, [sp, #12]
 8008d78:	1bae      	subs	r6, r5, r6
 8008d7a:	42b7      	cmp	r7, r6
 8008d7c:	4602      	mov	r2, r0
 8008d7e:	460b      	mov	r3, r1
 8008d80:	d135      	bne.n	8008dee <_dtoa_r+0x6e6>
 8008d82:	f7f7 fa93 	bl	80002ac <__adddf3>
 8008d86:	4642      	mov	r2, r8
 8008d88:	464b      	mov	r3, r9
 8008d8a:	4606      	mov	r6, r0
 8008d8c:	460f      	mov	r7, r1
 8008d8e:	f7f7 fed3 	bl	8000b38 <__aeabi_dcmpgt>
 8008d92:	b9d0      	cbnz	r0, 8008dca <_dtoa_r+0x6c2>
 8008d94:	4642      	mov	r2, r8
 8008d96:	464b      	mov	r3, r9
 8008d98:	4630      	mov	r0, r6
 8008d9a:	4639      	mov	r1, r7
 8008d9c:	f7f7 fea4 	bl	8000ae8 <__aeabi_dcmpeq>
 8008da0:	b110      	cbz	r0, 8008da8 <_dtoa_r+0x6a0>
 8008da2:	f01a 0f01 	tst.w	sl, #1
 8008da6:	d110      	bne.n	8008dca <_dtoa_r+0x6c2>
 8008da8:	4620      	mov	r0, r4
 8008daa:	ee18 1a10 	vmov	r1, s16
 8008dae:	f001 f885 	bl	8009ebc <_Bfree>
 8008db2:	2300      	movs	r3, #0
 8008db4:	9800      	ldr	r0, [sp, #0]
 8008db6:	702b      	strb	r3, [r5, #0]
 8008db8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008dba:	3001      	adds	r0, #1
 8008dbc:	6018      	str	r0, [r3, #0]
 8008dbe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	f43f acf1 	beq.w	80087a8 <_dtoa_r+0xa0>
 8008dc6:	601d      	str	r5, [r3, #0]
 8008dc8:	e4ee      	b.n	80087a8 <_dtoa_r+0xa0>
 8008dca:	9f00      	ldr	r7, [sp, #0]
 8008dcc:	462b      	mov	r3, r5
 8008dce:	461d      	mov	r5, r3
 8008dd0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008dd4:	2a39      	cmp	r2, #57	; 0x39
 8008dd6:	d106      	bne.n	8008de6 <_dtoa_r+0x6de>
 8008dd8:	9a01      	ldr	r2, [sp, #4]
 8008dda:	429a      	cmp	r2, r3
 8008ddc:	d1f7      	bne.n	8008dce <_dtoa_r+0x6c6>
 8008dde:	9901      	ldr	r1, [sp, #4]
 8008de0:	2230      	movs	r2, #48	; 0x30
 8008de2:	3701      	adds	r7, #1
 8008de4:	700a      	strb	r2, [r1, #0]
 8008de6:	781a      	ldrb	r2, [r3, #0]
 8008de8:	3201      	adds	r2, #1
 8008dea:	701a      	strb	r2, [r3, #0]
 8008dec:	e790      	b.n	8008d10 <_dtoa_r+0x608>
 8008dee:	4ba6      	ldr	r3, [pc, #664]	; (8009088 <_dtoa_r+0x980>)
 8008df0:	2200      	movs	r2, #0
 8008df2:	f7f7 fc11 	bl	8000618 <__aeabi_dmul>
 8008df6:	2200      	movs	r2, #0
 8008df8:	2300      	movs	r3, #0
 8008dfa:	4606      	mov	r6, r0
 8008dfc:	460f      	mov	r7, r1
 8008dfe:	f7f7 fe73 	bl	8000ae8 <__aeabi_dcmpeq>
 8008e02:	2800      	cmp	r0, #0
 8008e04:	d09d      	beq.n	8008d42 <_dtoa_r+0x63a>
 8008e06:	e7cf      	b.n	8008da8 <_dtoa_r+0x6a0>
 8008e08:	9a08      	ldr	r2, [sp, #32]
 8008e0a:	2a00      	cmp	r2, #0
 8008e0c:	f000 80d7 	beq.w	8008fbe <_dtoa_r+0x8b6>
 8008e10:	9a06      	ldr	r2, [sp, #24]
 8008e12:	2a01      	cmp	r2, #1
 8008e14:	f300 80ba 	bgt.w	8008f8c <_dtoa_r+0x884>
 8008e18:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008e1a:	2a00      	cmp	r2, #0
 8008e1c:	f000 80b2 	beq.w	8008f84 <_dtoa_r+0x87c>
 8008e20:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008e24:	9e07      	ldr	r6, [sp, #28]
 8008e26:	9d04      	ldr	r5, [sp, #16]
 8008e28:	9a04      	ldr	r2, [sp, #16]
 8008e2a:	441a      	add	r2, r3
 8008e2c:	9204      	str	r2, [sp, #16]
 8008e2e:	9a05      	ldr	r2, [sp, #20]
 8008e30:	2101      	movs	r1, #1
 8008e32:	441a      	add	r2, r3
 8008e34:	4620      	mov	r0, r4
 8008e36:	9205      	str	r2, [sp, #20]
 8008e38:	f001 f942 	bl	800a0c0 <__i2b>
 8008e3c:	4607      	mov	r7, r0
 8008e3e:	2d00      	cmp	r5, #0
 8008e40:	dd0c      	ble.n	8008e5c <_dtoa_r+0x754>
 8008e42:	9b05      	ldr	r3, [sp, #20]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	dd09      	ble.n	8008e5c <_dtoa_r+0x754>
 8008e48:	42ab      	cmp	r3, r5
 8008e4a:	9a04      	ldr	r2, [sp, #16]
 8008e4c:	bfa8      	it	ge
 8008e4e:	462b      	movge	r3, r5
 8008e50:	1ad2      	subs	r2, r2, r3
 8008e52:	9204      	str	r2, [sp, #16]
 8008e54:	9a05      	ldr	r2, [sp, #20]
 8008e56:	1aed      	subs	r5, r5, r3
 8008e58:	1ad3      	subs	r3, r2, r3
 8008e5a:	9305      	str	r3, [sp, #20]
 8008e5c:	9b07      	ldr	r3, [sp, #28]
 8008e5e:	b31b      	cbz	r3, 8008ea8 <_dtoa_r+0x7a0>
 8008e60:	9b08      	ldr	r3, [sp, #32]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	f000 80af 	beq.w	8008fc6 <_dtoa_r+0x8be>
 8008e68:	2e00      	cmp	r6, #0
 8008e6a:	dd13      	ble.n	8008e94 <_dtoa_r+0x78c>
 8008e6c:	4639      	mov	r1, r7
 8008e6e:	4632      	mov	r2, r6
 8008e70:	4620      	mov	r0, r4
 8008e72:	f001 f9e5 	bl	800a240 <__pow5mult>
 8008e76:	ee18 2a10 	vmov	r2, s16
 8008e7a:	4601      	mov	r1, r0
 8008e7c:	4607      	mov	r7, r0
 8008e7e:	4620      	mov	r0, r4
 8008e80:	f001 f934 	bl	800a0ec <__multiply>
 8008e84:	ee18 1a10 	vmov	r1, s16
 8008e88:	4680      	mov	r8, r0
 8008e8a:	4620      	mov	r0, r4
 8008e8c:	f001 f816 	bl	8009ebc <_Bfree>
 8008e90:	ee08 8a10 	vmov	s16, r8
 8008e94:	9b07      	ldr	r3, [sp, #28]
 8008e96:	1b9a      	subs	r2, r3, r6
 8008e98:	d006      	beq.n	8008ea8 <_dtoa_r+0x7a0>
 8008e9a:	ee18 1a10 	vmov	r1, s16
 8008e9e:	4620      	mov	r0, r4
 8008ea0:	f001 f9ce 	bl	800a240 <__pow5mult>
 8008ea4:	ee08 0a10 	vmov	s16, r0
 8008ea8:	2101      	movs	r1, #1
 8008eaa:	4620      	mov	r0, r4
 8008eac:	f001 f908 	bl	800a0c0 <__i2b>
 8008eb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	4606      	mov	r6, r0
 8008eb6:	f340 8088 	ble.w	8008fca <_dtoa_r+0x8c2>
 8008eba:	461a      	mov	r2, r3
 8008ebc:	4601      	mov	r1, r0
 8008ebe:	4620      	mov	r0, r4
 8008ec0:	f001 f9be 	bl	800a240 <__pow5mult>
 8008ec4:	9b06      	ldr	r3, [sp, #24]
 8008ec6:	2b01      	cmp	r3, #1
 8008ec8:	4606      	mov	r6, r0
 8008eca:	f340 8081 	ble.w	8008fd0 <_dtoa_r+0x8c8>
 8008ece:	f04f 0800 	mov.w	r8, #0
 8008ed2:	6933      	ldr	r3, [r6, #16]
 8008ed4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008ed8:	6918      	ldr	r0, [r3, #16]
 8008eda:	f001 f8a1 	bl	800a020 <__hi0bits>
 8008ede:	f1c0 0020 	rsb	r0, r0, #32
 8008ee2:	9b05      	ldr	r3, [sp, #20]
 8008ee4:	4418      	add	r0, r3
 8008ee6:	f010 001f 	ands.w	r0, r0, #31
 8008eea:	f000 8092 	beq.w	8009012 <_dtoa_r+0x90a>
 8008eee:	f1c0 0320 	rsb	r3, r0, #32
 8008ef2:	2b04      	cmp	r3, #4
 8008ef4:	f340 808a 	ble.w	800900c <_dtoa_r+0x904>
 8008ef8:	f1c0 001c 	rsb	r0, r0, #28
 8008efc:	9b04      	ldr	r3, [sp, #16]
 8008efe:	4403      	add	r3, r0
 8008f00:	9304      	str	r3, [sp, #16]
 8008f02:	9b05      	ldr	r3, [sp, #20]
 8008f04:	4403      	add	r3, r0
 8008f06:	4405      	add	r5, r0
 8008f08:	9305      	str	r3, [sp, #20]
 8008f0a:	9b04      	ldr	r3, [sp, #16]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	dd07      	ble.n	8008f20 <_dtoa_r+0x818>
 8008f10:	ee18 1a10 	vmov	r1, s16
 8008f14:	461a      	mov	r2, r3
 8008f16:	4620      	mov	r0, r4
 8008f18:	f001 f9ec 	bl	800a2f4 <__lshift>
 8008f1c:	ee08 0a10 	vmov	s16, r0
 8008f20:	9b05      	ldr	r3, [sp, #20]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	dd05      	ble.n	8008f32 <_dtoa_r+0x82a>
 8008f26:	4631      	mov	r1, r6
 8008f28:	461a      	mov	r2, r3
 8008f2a:	4620      	mov	r0, r4
 8008f2c:	f001 f9e2 	bl	800a2f4 <__lshift>
 8008f30:	4606      	mov	r6, r0
 8008f32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d06e      	beq.n	8009016 <_dtoa_r+0x90e>
 8008f38:	ee18 0a10 	vmov	r0, s16
 8008f3c:	4631      	mov	r1, r6
 8008f3e:	f001 fa49 	bl	800a3d4 <__mcmp>
 8008f42:	2800      	cmp	r0, #0
 8008f44:	da67      	bge.n	8009016 <_dtoa_r+0x90e>
 8008f46:	9b00      	ldr	r3, [sp, #0]
 8008f48:	3b01      	subs	r3, #1
 8008f4a:	ee18 1a10 	vmov	r1, s16
 8008f4e:	9300      	str	r3, [sp, #0]
 8008f50:	220a      	movs	r2, #10
 8008f52:	2300      	movs	r3, #0
 8008f54:	4620      	mov	r0, r4
 8008f56:	f000 ffd3 	bl	8009f00 <__multadd>
 8008f5a:	9b08      	ldr	r3, [sp, #32]
 8008f5c:	ee08 0a10 	vmov	s16, r0
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	f000 81b1 	beq.w	80092c8 <_dtoa_r+0xbc0>
 8008f66:	2300      	movs	r3, #0
 8008f68:	4639      	mov	r1, r7
 8008f6a:	220a      	movs	r2, #10
 8008f6c:	4620      	mov	r0, r4
 8008f6e:	f000 ffc7 	bl	8009f00 <__multadd>
 8008f72:	9b02      	ldr	r3, [sp, #8]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	4607      	mov	r7, r0
 8008f78:	f300 808e 	bgt.w	8009098 <_dtoa_r+0x990>
 8008f7c:	9b06      	ldr	r3, [sp, #24]
 8008f7e:	2b02      	cmp	r3, #2
 8008f80:	dc51      	bgt.n	8009026 <_dtoa_r+0x91e>
 8008f82:	e089      	b.n	8009098 <_dtoa_r+0x990>
 8008f84:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008f86:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008f8a:	e74b      	b.n	8008e24 <_dtoa_r+0x71c>
 8008f8c:	9b03      	ldr	r3, [sp, #12]
 8008f8e:	1e5e      	subs	r6, r3, #1
 8008f90:	9b07      	ldr	r3, [sp, #28]
 8008f92:	42b3      	cmp	r3, r6
 8008f94:	bfbf      	itttt	lt
 8008f96:	9b07      	ldrlt	r3, [sp, #28]
 8008f98:	9607      	strlt	r6, [sp, #28]
 8008f9a:	1af2      	sublt	r2, r6, r3
 8008f9c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008f9e:	bfb6      	itet	lt
 8008fa0:	189b      	addlt	r3, r3, r2
 8008fa2:	1b9e      	subge	r6, r3, r6
 8008fa4:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008fa6:	9b03      	ldr	r3, [sp, #12]
 8008fa8:	bfb8      	it	lt
 8008faa:	2600      	movlt	r6, #0
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	bfb7      	itett	lt
 8008fb0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008fb4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008fb8:	1a9d      	sublt	r5, r3, r2
 8008fba:	2300      	movlt	r3, #0
 8008fbc:	e734      	b.n	8008e28 <_dtoa_r+0x720>
 8008fbe:	9e07      	ldr	r6, [sp, #28]
 8008fc0:	9d04      	ldr	r5, [sp, #16]
 8008fc2:	9f08      	ldr	r7, [sp, #32]
 8008fc4:	e73b      	b.n	8008e3e <_dtoa_r+0x736>
 8008fc6:	9a07      	ldr	r2, [sp, #28]
 8008fc8:	e767      	b.n	8008e9a <_dtoa_r+0x792>
 8008fca:	9b06      	ldr	r3, [sp, #24]
 8008fcc:	2b01      	cmp	r3, #1
 8008fce:	dc18      	bgt.n	8009002 <_dtoa_r+0x8fa>
 8008fd0:	f1ba 0f00 	cmp.w	sl, #0
 8008fd4:	d115      	bne.n	8009002 <_dtoa_r+0x8fa>
 8008fd6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008fda:	b993      	cbnz	r3, 8009002 <_dtoa_r+0x8fa>
 8008fdc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008fe0:	0d1b      	lsrs	r3, r3, #20
 8008fe2:	051b      	lsls	r3, r3, #20
 8008fe4:	b183      	cbz	r3, 8009008 <_dtoa_r+0x900>
 8008fe6:	9b04      	ldr	r3, [sp, #16]
 8008fe8:	3301      	adds	r3, #1
 8008fea:	9304      	str	r3, [sp, #16]
 8008fec:	9b05      	ldr	r3, [sp, #20]
 8008fee:	3301      	adds	r3, #1
 8008ff0:	9305      	str	r3, [sp, #20]
 8008ff2:	f04f 0801 	mov.w	r8, #1
 8008ff6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	f47f af6a 	bne.w	8008ed2 <_dtoa_r+0x7ca>
 8008ffe:	2001      	movs	r0, #1
 8009000:	e76f      	b.n	8008ee2 <_dtoa_r+0x7da>
 8009002:	f04f 0800 	mov.w	r8, #0
 8009006:	e7f6      	b.n	8008ff6 <_dtoa_r+0x8ee>
 8009008:	4698      	mov	r8, r3
 800900a:	e7f4      	b.n	8008ff6 <_dtoa_r+0x8ee>
 800900c:	f43f af7d 	beq.w	8008f0a <_dtoa_r+0x802>
 8009010:	4618      	mov	r0, r3
 8009012:	301c      	adds	r0, #28
 8009014:	e772      	b.n	8008efc <_dtoa_r+0x7f4>
 8009016:	9b03      	ldr	r3, [sp, #12]
 8009018:	2b00      	cmp	r3, #0
 800901a:	dc37      	bgt.n	800908c <_dtoa_r+0x984>
 800901c:	9b06      	ldr	r3, [sp, #24]
 800901e:	2b02      	cmp	r3, #2
 8009020:	dd34      	ble.n	800908c <_dtoa_r+0x984>
 8009022:	9b03      	ldr	r3, [sp, #12]
 8009024:	9302      	str	r3, [sp, #8]
 8009026:	9b02      	ldr	r3, [sp, #8]
 8009028:	b96b      	cbnz	r3, 8009046 <_dtoa_r+0x93e>
 800902a:	4631      	mov	r1, r6
 800902c:	2205      	movs	r2, #5
 800902e:	4620      	mov	r0, r4
 8009030:	f000 ff66 	bl	8009f00 <__multadd>
 8009034:	4601      	mov	r1, r0
 8009036:	4606      	mov	r6, r0
 8009038:	ee18 0a10 	vmov	r0, s16
 800903c:	f001 f9ca 	bl	800a3d4 <__mcmp>
 8009040:	2800      	cmp	r0, #0
 8009042:	f73f adbb 	bgt.w	8008bbc <_dtoa_r+0x4b4>
 8009046:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009048:	9d01      	ldr	r5, [sp, #4]
 800904a:	43db      	mvns	r3, r3
 800904c:	9300      	str	r3, [sp, #0]
 800904e:	f04f 0800 	mov.w	r8, #0
 8009052:	4631      	mov	r1, r6
 8009054:	4620      	mov	r0, r4
 8009056:	f000 ff31 	bl	8009ebc <_Bfree>
 800905a:	2f00      	cmp	r7, #0
 800905c:	f43f aea4 	beq.w	8008da8 <_dtoa_r+0x6a0>
 8009060:	f1b8 0f00 	cmp.w	r8, #0
 8009064:	d005      	beq.n	8009072 <_dtoa_r+0x96a>
 8009066:	45b8      	cmp	r8, r7
 8009068:	d003      	beq.n	8009072 <_dtoa_r+0x96a>
 800906a:	4641      	mov	r1, r8
 800906c:	4620      	mov	r0, r4
 800906e:	f000 ff25 	bl	8009ebc <_Bfree>
 8009072:	4639      	mov	r1, r7
 8009074:	4620      	mov	r0, r4
 8009076:	f000 ff21 	bl	8009ebc <_Bfree>
 800907a:	e695      	b.n	8008da8 <_dtoa_r+0x6a0>
 800907c:	2600      	movs	r6, #0
 800907e:	4637      	mov	r7, r6
 8009080:	e7e1      	b.n	8009046 <_dtoa_r+0x93e>
 8009082:	9700      	str	r7, [sp, #0]
 8009084:	4637      	mov	r7, r6
 8009086:	e599      	b.n	8008bbc <_dtoa_r+0x4b4>
 8009088:	40240000 	.word	0x40240000
 800908c:	9b08      	ldr	r3, [sp, #32]
 800908e:	2b00      	cmp	r3, #0
 8009090:	f000 80ca 	beq.w	8009228 <_dtoa_r+0xb20>
 8009094:	9b03      	ldr	r3, [sp, #12]
 8009096:	9302      	str	r3, [sp, #8]
 8009098:	2d00      	cmp	r5, #0
 800909a:	dd05      	ble.n	80090a8 <_dtoa_r+0x9a0>
 800909c:	4639      	mov	r1, r7
 800909e:	462a      	mov	r2, r5
 80090a0:	4620      	mov	r0, r4
 80090a2:	f001 f927 	bl	800a2f4 <__lshift>
 80090a6:	4607      	mov	r7, r0
 80090a8:	f1b8 0f00 	cmp.w	r8, #0
 80090ac:	d05b      	beq.n	8009166 <_dtoa_r+0xa5e>
 80090ae:	6879      	ldr	r1, [r7, #4]
 80090b0:	4620      	mov	r0, r4
 80090b2:	f000 fec3 	bl	8009e3c <_Balloc>
 80090b6:	4605      	mov	r5, r0
 80090b8:	b928      	cbnz	r0, 80090c6 <_dtoa_r+0x9be>
 80090ba:	4b87      	ldr	r3, [pc, #540]	; (80092d8 <_dtoa_r+0xbd0>)
 80090bc:	4602      	mov	r2, r0
 80090be:	f240 21ea 	movw	r1, #746	; 0x2ea
 80090c2:	f7ff bb3b 	b.w	800873c <_dtoa_r+0x34>
 80090c6:	693a      	ldr	r2, [r7, #16]
 80090c8:	3202      	adds	r2, #2
 80090ca:	0092      	lsls	r2, r2, #2
 80090cc:	f107 010c 	add.w	r1, r7, #12
 80090d0:	300c      	adds	r0, #12
 80090d2:	f7fd fc51 	bl	8006978 <memcpy>
 80090d6:	2201      	movs	r2, #1
 80090d8:	4629      	mov	r1, r5
 80090da:	4620      	mov	r0, r4
 80090dc:	f001 f90a 	bl	800a2f4 <__lshift>
 80090e0:	9b01      	ldr	r3, [sp, #4]
 80090e2:	f103 0901 	add.w	r9, r3, #1
 80090e6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80090ea:	4413      	add	r3, r2
 80090ec:	9305      	str	r3, [sp, #20]
 80090ee:	f00a 0301 	and.w	r3, sl, #1
 80090f2:	46b8      	mov	r8, r7
 80090f4:	9304      	str	r3, [sp, #16]
 80090f6:	4607      	mov	r7, r0
 80090f8:	4631      	mov	r1, r6
 80090fa:	ee18 0a10 	vmov	r0, s16
 80090fe:	f7ff fa77 	bl	80085f0 <quorem>
 8009102:	4641      	mov	r1, r8
 8009104:	9002      	str	r0, [sp, #8]
 8009106:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800910a:	ee18 0a10 	vmov	r0, s16
 800910e:	f001 f961 	bl	800a3d4 <__mcmp>
 8009112:	463a      	mov	r2, r7
 8009114:	9003      	str	r0, [sp, #12]
 8009116:	4631      	mov	r1, r6
 8009118:	4620      	mov	r0, r4
 800911a:	f001 f977 	bl	800a40c <__mdiff>
 800911e:	68c2      	ldr	r2, [r0, #12]
 8009120:	f109 3bff 	add.w	fp, r9, #4294967295
 8009124:	4605      	mov	r5, r0
 8009126:	bb02      	cbnz	r2, 800916a <_dtoa_r+0xa62>
 8009128:	4601      	mov	r1, r0
 800912a:	ee18 0a10 	vmov	r0, s16
 800912e:	f001 f951 	bl	800a3d4 <__mcmp>
 8009132:	4602      	mov	r2, r0
 8009134:	4629      	mov	r1, r5
 8009136:	4620      	mov	r0, r4
 8009138:	9207      	str	r2, [sp, #28]
 800913a:	f000 febf 	bl	8009ebc <_Bfree>
 800913e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8009142:	ea43 0102 	orr.w	r1, r3, r2
 8009146:	9b04      	ldr	r3, [sp, #16]
 8009148:	430b      	orrs	r3, r1
 800914a:	464d      	mov	r5, r9
 800914c:	d10f      	bne.n	800916e <_dtoa_r+0xa66>
 800914e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009152:	d02a      	beq.n	80091aa <_dtoa_r+0xaa2>
 8009154:	9b03      	ldr	r3, [sp, #12]
 8009156:	2b00      	cmp	r3, #0
 8009158:	dd02      	ble.n	8009160 <_dtoa_r+0xa58>
 800915a:	9b02      	ldr	r3, [sp, #8]
 800915c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009160:	f88b a000 	strb.w	sl, [fp]
 8009164:	e775      	b.n	8009052 <_dtoa_r+0x94a>
 8009166:	4638      	mov	r0, r7
 8009168:	e7ba      	b.n	80090e0 <_dtoa_r+0x9d8>
 800916a:	2201      	movs	r2, #1
 800916c:	e7e2      	b.n	8009134 <_dtoa_r+0xa2c>
 800916e:	9b03      	ldr	r3, [sp, #12]
 8009170:	2b00      	cmp	r3, #0
 8009172:	db04      	blt.n	800917e <_dtoa_r+0xa76>
 8009174:	9906      	ldr	r1, [sp, #24]
 8009176:	430b      	orrs	r3, r1
 8009178:	9904      	ldr	r1, [sp, #16]
 800917a:	430b      	orrs	r3, r1
 800917c:	d122      	bne.n	80091c4 <_dtoa_r+0xabc>
 800917e:	2a00      	cmp	r2, #0
 8009180:	ddee      	ble.n	8009160 <_dtoa_r+0xa58>
 8009182:	ee18 1a10 	vmov	r1, s16
 8009186:	2201      	movs	r2, #1
 8009188:	4620      	mov	r0, r4
 800918a:	f001 f8b3 	bl	800a2f4 <__lshift>
 800918e:	4631      	mov	r1, r6
 8009190:	ee08 0a10 	vmov	s16, r0
 8009194:	f001 f91e 	bl	800a3d4 <__mcmp>
 8009198:	2800      	cmp	r0, #0
 800919a:	dc03      	bgt.n	80091a4 <_dtoa_r+0xa9c>
 800919c:	d1e0      	bne.n	8009160 <_dtoa_r+0xa58>
 800919e:	f01a 0f01 	tst.w	sl, #1
 80091a2:	d0dd      	beq.n	8009160 <_dtoa_r+0xa58>
 80091a4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80091a8:	d1d7      	bne.n	800915a <_dtoa_r+0xa52>
 80091aa:	2339      	movs	r3, #57	; 0x39
 80091ac:	f88b 3000 	strb.w	r3, [fp]
 80091b0:	462b      	mov	r3, r5
 80091b2:	461d      	mov	r5, r3
 80091b4:	3b01      	subs	r3, #1
 80091b6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80091ba:	2a39      	cmp	r2, #57	; 0x39
 80091bc:	d071      	beq.n	80092a2 <_dtoa_r+0xb9a>
 80091be:	3201      	adds	r2, #1
 80091c0:	701a      	strb	r2, [r3, #0]
 80091c2:	e746      	b.n	8009052 <_dtoa_r+0x94a>
 80091c4:	2a00      	cmp	r2, #0
 80091c6:	dd07      	ble.n	80091d8 <_dtoa_r+0xad0>
 80091c8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80091cc:	d0ed      	beq.n	80091aa <_dtoa_r+0xaa2>
 80091ce:	f10a 0301 	add.w	r3, sl, #1
 80091d2:	f88b 3000 	strb.w	r3, [fp]
 80091d6:	e73c      	b.n	8009052 <_dtoa_r+0x94a>
 80091d8:	9b05      	ldr	r3, [sp, #20]
 80091da:	f809 ac01 	strb.w	sl, [r9, #-1]
 80091de:	4599      	cmp	r9, r3
 80091e0:	d047      	beq.n	8009272 <_dtoa_r+0xb6a>
 80091e2:	ee18 1a10 	vmov	r1, s16
 80091e6:	2300      	movs	r3, #0
 80091e8:	220a      	movs	r2, #10
 80091ea:	4620      	mov	r0, r4
 80091ec:	f000 fe88 	bl	8009f00 <__multadd>
 80091f0:	45b8      	cmp	r8, r7
 80091f2:	ee08 0a10 	vmov	s16, r0
 80091f6:	f04f 0300 	mov.w	r3, #0
 80091fa:	f04f 020a 	mov.w	r2, #10
 80091fe:	4641      	mov	r1, r8
 8009200:	4620      	mov	r0, r4
 8009202:	d106      	bne.n	8009212 <_dtoa_r+0xb0a>
 8009204:	f000 fe7c 	bl	8009f00 <__multadd>
 8009208:	4680      	mov	r8, r0
 800920a:	4607      	mov	r7, r0
 800920c:	f109 0901 	add.w	r9, r9, #1
 8009210:	e772      	b.n	80090f8 <_dtoa_r+0x9f0>
 8009212:	f000 fe75 	bl	8009f00 <__multadd>
 8009216:	4639      	mov	r1, r7
 8009218:	4680      	mov	r8, r0
 800921a:	2300      	movs	r3, #0
 800921c:	220a      	movs	r2, #10
 800921e:	4620      	mov	r0, r4
 8009220:	f000 fe6e 	bl	8009f00 <__multadd>
 8009224:	4607      	mov	r7, r0
 8009226:	e7f1      	b.n	800920c <_dtoa_r+0xb04>
 8009228:	9b03      	ldr	r3, [sp, #12]
 800922a:	9302      	str	r3, [sp, #8]
 800922c:	9d01      	ldr	r5, [sp, #4]
 800922e:	ee18 0a10 	vmov	r0, s16
 8009232:	4631      	mov	r1, r6
 8009234:	f7ff f9dc 	bl	80085f0 <quorem>
 8009238:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800923c:	9b01      	ldr	r3, [sp, #4]
 800923e:	f805 ab01 	strb.w	sl, [r5], #1
 8009242:	1aea      	subs	r2, r5, r3
 8009244:	9b02      	ldr	r3, [sp, #8]
 8009246:	4293      	cmp	r3, r2
 8009248:	dd09      	ble.n	800925e <_dtoa_r+0xb56>
 800924a:	ee18 1a10 	vmov	r1, s16
 800924e:	2300      	movs	r3, #0
 8009250:	220a      	movs	r2, #10
 8009252:	4620      	mov	r0, r4
 8009254:	f000 fe54 	bl	8009f00 <__multadd>
 8009258:	ee08 0a10 	vmov	s16, r0
 800925c:	e7e7      	b.n	800922e <_dtoa_r+0xb26>
 800925e:	9b02      	ldr	r3, [sp, #8]
 8009260:	2b00      	cmp	r3, #0
 8009262:	bfc8      	it	gt
 8009264:	461d      	movgt	r5, r3
 8009266:	9b01      	ldr	r3, [sp, #4]
 8009268:	bfd8      	it	le
 800926a:	2501      	movle	r5, #1
 800926c:	441d      	add	r5, r3
 800926e:	f04f 0800 	mov.w	r8, #0
 8009272:	ee18 1a10 	vmov	r1, s16
 8009276:	2201      	movs	r2, #1
 8009278:	4620      	mov	r0, r4
 800927a:	f001 f83b 	bl	800a2f4 <__lshift>
 800927e:	4631      	mov	r1, r6
 8009280:	ee08 0a10 	vmov	s16, r0
 8009284:	f001 f8a6 	bl	800a3d4 <__mcmp>
 8009288:	2800      	cmp	r0, #0
 800928a:	dc91      	bgt.n	80091b0 <_dtoa_r+0xaa8>
 800928c:	d102      	bne.n	8009294 <_dtoa_r+0xb8c>
 800928e:	f01a 0f01 	tst.w	sl, #1
 8009292:	d18d      	bne.n	80091b0 <_dtoa_r+0xaa8>
 8009294:	462b      	mov	r3, r5
 8009296:	461d      	mov	r5, r3
 8009298:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800929c:	2a30      	cmp	r2, #48	; 0x30
 800929e:	d0fa      	beq.n	8009296 <_dtoa_r+0xb8e>
 80092a0:	e6d7      	b.n	8009052 <_dtoa_r+0x94a>
 80092a2:	9a01      	ldr	r2, [sp, #4]
 80092a4:	429a      	cmp	r2, r3
 80092a6:	d184      	bne.n	80091b2 <_dtoa_r+0xaaa>
 80092a8:	9b00      	ldr	r3, [sp, #0]
 80092aa:	3301      	adds	r3, #1
 80092ac:	9300      	str	r3, [sp, #0]
 80092ae:	2331      	movs	r3, #49	; 0x31
 80092b0:	7013      	strb	r3, [r2, #0]
 80092b2:	e6ce      	b.n	8009052 <_dtoa_r+0x94a>
 80092b4:	4b09      	ldr	r3, [pc, #36]	; (80092dc <_dtoa_r+0xbd4>)
 80092b6:	f7ff ba95 	b.w	80087e4 <_dtoa_r+0xdc>
 80092ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80092bc:	2b00      	cmp	r3, #0
 80092be:	f47f aa6e 	bne.w	800879e <_dtoa_r+0x96>
 80092c2:	4b07      	ldr	r3, [pc, #28]	; (80092e0 <_dtoa_r+0xbd8>)
 80092c4:	f7ff ba8e 	b.w	80087e4 <_dtoa_r+0xdc>
 80092c8:	9b02      	ldr	r3, [sp, #8]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	dcae      	bgt.n	800922c <_dtoa_r+0xb24>
 80092ce:	9b06      	ldr	r3, [sp, #24]
 80092d0:	2b02      	cmp	r3, #2
 80092d2:	f73f aea8 	bgt.w	8009026 <_dtoa_r+0x91e>
 80092d6:	e7a9      	b.n	800922c <_dtoa_r+0xb24>
 80092d8:	0800b4f8 	.word	0x0800b4f8
 80092dc:	0800b2f8 	.word	0x0800b2f8
 80092e0:	0800b479 	.word	0x0800b479

080092e4 <__sflush_r>:
 80092e4:	898a      	ldrh	r2, [r1, #12]
 80092e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092ea:	4605      	mov	r5, r0
 80092ec:	0710      	lsls	r0, r2, #28
 80092ee:	460c      	mov	r4, r1
 80092f0:	d458      	bmi.n	80093a4 <__sflush_r+0xc0>
 80092f2:	684b      	ldr	r3, [r1, #4]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	dc05      	bgt.n	8009304 <__sflush_r+0x20>
 80092f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	dc02      	bgt.n	8009304 <__sflush_r+0x20>
 80092fe:	2000      	movs	r0, #0
 8009300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009304:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009306:	2e00      	cmp	r6, #0
 8009308:	d0f9      	beq.n	80092fe <__sflush_r+0x1a>
 800930a:	2300      	movs	r3, #0
 800930c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009310:	682f      	ldr	r7, [r5, #0]
 8009312:	602b      	str	r3, [r5, #0]
 8009314:	d032      	beq.n	800937c <__sflush_r+0x98>
 8009316:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009318:	89a3      	ldrh	r3, [r4, #12]
 800931a:	075a      	lsls	r2, r3, #29
 800931c:	d505      	bpl.n	800932a <__sflush_r+0x46>
 800931e:	6863      	ldr	r3, [r4, #4]
 8009320:	1ac0      	subs	r0, r0, r3
 8009322:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009324:	b10b      	cbz	r3, 800932a <__sflush_r+0x46>
 8009326:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009328:	1ac0      	subs	r0, r0, r3
 800932a:	2300      	movs	r3, #0
 800932c:	4602      	mov	r2, r0
 800932e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009330:	6a21      	ldr	r1, [r4, #32]
 8009332:	4628      	mov	r0, r5
 8009334:	47b0      	blx	r6
 8009336:	1c43      	adds	r3, r0, #1
 8009338:	89a3      	ldrh	r3, [r4, #12]
 800933a:	d106      	bne.n	800934a <__sflush_r+0x66>
 800933c:	6829      	ldr	r1, [r5, #0]
 800933e:	291d      	cmp	r1, #29
 8009340:	d82c      	bhi.n	800939c <__sflush_r+0xb8>
 8009342:	4a2a      	ldr	r2, [pc, #168]	; (80093ec <__sflush_r+0x108>)
 8009344:	40ca      	lsrs	r2, r1
 8009346:	07d6      	lsls	r6, r2, #31
 8009348:	d528      	bpl.n	800939c <__sflush_r+0xb8>
 800934a:	2200      	movs	r2, #0
 800934c:	6062      	str	r2, [r4, #4]
 800934e:	04d9      	lsls	r1, r3, #19
 8009350:	6922      	ldr	r2, [r4, #16]
 8009352:	6022      	str	r2, [r4, #0]
 8009354:	d504      	bpl.n	8009360 <__sflush_r+0x7c>
 8009356:	1c42      	adds	r2, r0, #1
 8009358:	d101      	bne.n	800935e <__sflush_r+0x7a>
 800935a:	682b      	ldr	r3, [r5, #0]
 800935c:	b903      	cbnz	r3, 8009360 <__sflush_r+0x7c>
 800935e:	6560      	str	r0, [r4, #84]	; 0x54
 8009360:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009362:	602f      	str	r7, [r5, #0]
 8009364:	2900      	cmp	r1, #0
 8009366:	d0ca      	beq.n	80092fe <__sflush_r+0x1a>
 8009368:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800936c:	4299      	cmp	r1, r3
 800936e:	d002      	beq.n	8009376 <__sflush_r+0x92>
 8009370:	4628      	mov	r0, r5
 8009372:	f001 fa3b 	bl	800a7ec <_free_r>
 8009376:	2000      	movs	r0, #0
 8009378:	6360      	str	r0, [r4, #52]	; 0x34
 800937a:	e7c1      	b.n	8009300 <__sflush_r+0x1c>
 800937c:	6a21      	ldr	r1, [r4, #32]
 800937e:	2301      	movs	r3, #1
 8009380:	4628      	mov	r0, r5
 8009382:	47b0      	blx	r6
 8009384:	1c41      	adds	r1, r0, #1
 8009386:	d1c7      	bne.n	8009318 <__sflush_r+0x34>
 8009388:	682b      	ldr	r3, [r5, #0]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d0c4      	beq.n	8009318 <__sflush_r+0x34>
 800938e:	2b1d      	cmp	r3, #29
 8009390:	d001      	beq.n	8009396 <__sflush_r+0xb2>
 8009392:	2b16      	cmp	r3, #22
 8009394:	d101      	bne.n	800939a <__sflush_r+0xb6>
 8009396:	602f      	str	r7, [r5, #0]
 8009398:	e7b1      	b.n	80092fe <__sflush_r+0x1a>
 800939a:	89a3      	ldrh	r3, [r4, #12]
 800939c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80093a0:	81a3      	strh	r3, [r4, #12]
 80093a2:	e7ad      	b.n	8009300 <__sflush_r+0x1c>
 80093a4:	690f      	ldr	r7, [r1, #16]
 80093a6:	2f00      	cmp	r7, #0
 80093a8:	d0a9      	beq.n	80092fe <__sflush_r+0x1a>
 80093aa:	0793      	lsls	r3, r2, #30
 80093ac:	680e      	ldr	r6, [r1, #0]
 80093ae:	bf08      	it	eq
 80093b0:	694b      	ldreq	r3, [r1, #20]
 80093b2:	600f      	str	r7, [r1, #0]
 80093b4:	bf18      	it	ne
 80093b6:	2300      	movne	r3, #0
 80093b8:	eba6 0807 	sub.w	r8, r6, r7
 80093bc:	608b      	str	r3, [r1, #8]
 80093be:	f1b8 0f00 	cmp.w	r8, #0
 80093c2:	dd9c      	ble.n	80092fe <__sflush_r+0x1a>
 80093c4:	6a21      	ldr	r1, [r4, #32]
 80093c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80093c8:	4643      	mov	r3, r8
 80093ca:	463a      	mov	r2, r7
 80093cc:	4628      	mov	r0, r5
 80093ce:	47b0      	blx	r6
 80093d0:	2800      	cmp	r0, #0
 80093d2:	dc06      	bgt.n	80093e2 <__sflush_r+0xfe>
 80093d4:	89a3      	ldrh	r3, [r4, #12]
 80093d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80093da:	81a3      	strh	r3, [r4, #12]
 80093dc:	f04f 30ff 	mov.w	r0, #4294967295
 80093e0:	e78e      	b.n	8009300 <__sflush_r+0x1c>
 80093e2:	4407      	add	r7, r0
 80093e4:	eba8 0800 	sub.w	r8, r8, r0
 80093e8:	e7e9      	b.n	80093be <__sflush_r+0xda>
 80093ea:	bf00      	nop
 80093ec:	20400001 	.word	0x20400001

080093f0 <_fflush_r>:
 80093f0:	b538      	push	{r3, r4, r5, lr}
 80093f2:	690b      	ldr	r3, [r1, #16]
 80093f4:	4605      	mov	r5, r0
 80093f6:	460c      	mov	r4, r1
 80093f8:	b913      	cbnz	r3, 8009400 <_fflush_r+0x10>
 80093fa:	2500      	movs	r5, #0
 80093fc:	4628      	mov	r0, r5
 80093fe:	bd38      	pop	{r3, r4, r5, pc}
 8009400:	b118      	cbz	r0, 800940a <_fflush_r+0x1a>
 8009402:	6983      	ldr	r3, [r0, #24]
 8009404:	b90b      	cbnz	r3, 800940a <_fflush_r+0x1a>
 8009406:	f000 f887 	bl	8009518 <__sinit>
 800940a:	4b14      	ldr	r3, [pc, #80]	; (800945c <_fflush_r+0x6c>)
 800940c:	429c      	cmp	r4, r3
 800940e:	d11b      	bne.n	8009448 <_fflush_r+0x58>
 8009410:	686c      	ldr	r4, [r5, #4]
 8009412:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009416:	2b00      	cmp	r3, #0
 8009418:	d0ef      	beq.n	80093fa <_fflush_r+0xa>
 800941a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800941c:	07d0      	lsls	r0, r2, #31
 800941e:	d404      	bmi.n	800942a <_fflush_r+0x3a>
 8009420:	0599      	lsls	r1, r3, #22
 8009422:	d402      	bmi.n	800942a <_fflush_r+0x3a>
 8009424:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009426:	f000 fc88 	bl	8009d3a <__retarget_lock_acquire_recursive>
 800942a:	4628      	mov	r0, r5
 800942c:	4621      	mov	r1, r4
 800942e:	f7ff ff59 	bl	80092e4 <__sflush_r>
 8009432:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009434:	07da      	lsls	r2, r3, #31
 8009436:	4605      	mov	r5, r0
 8009438:	d4e0      	bmi.n	80093fc <_fflush_r+0xc>
 800943a:	89a3      	ldrh	r3, [r4, #12]
 800943c:	059b      	lsls	r3, r3, #22
 800943e:	d4dd      	bmi.n	80093fc <_fflush_r+0xc>
 8009440:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009442:	f000 fc7b 	bl	8009d3c <__retarget_lock_release_recursive>
 8009446:	e7d9      	b.n	80093fc <_fflush_r+0xc>
 8009448:	4b05      	ldr	r3, [pc, #20]	; (8009460 <_fflush_r+0x70>)
 800944a:	429c      	cmp	r4, r3
 800944c:	d101      	bne.n	8009452 <_fflush_r+0x62>
 800944e:	68ac      	ldr	r4, [r5, #8]
 8009450:	e7df      	b.n	8009412 <_fflush_r+0x22>
 8009452:	4b04      	ldr	r3, [pc, #16]	; (8009464 <_fflush_r+0x74>)
 8009454:	429c      	cmp	r4, r3
 8009456:	bf08      	it	eq
 8009458:	68ec      	ldreq	r4, [r5, #12]
 800945a:	e7da      	b.n	8009412 <_fflush_r+0x22>
 800945c:	0800b52c 	.word	0x0800b52c
 8009460:	0800b54c 	.word	0x0800b54c
 8009464:	0800b50c 	.word	0x0800b50c

08009468 <std>:
 8009468:	2300      	movs	r3, #0
 800946a:	b510      	push	{r4, lr}
 800946c:	4604      	mov	r4, r0
 800946e:	e9c0 3300 	strd	r3, r3, [r0]
 8009472:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009476:	6083      	str	r3, [r0, #8]
 8009478:	8181      	strh	r1, [r0, #12]
 800947a:	6643      	str	r3, [r0, #100]	; 0x64
 800947c:	81c2      	strh	r2, [r0, #14]
 800947e:	6183      	str	r3, [r0, #24]
 8009480:	4619      	mov	r1, r3
 8009482:	2208      	movs	r2, #8
 8009484:	305c      	adds	r0, #92	; 0x5c
 8009486:	f7fd fa85 	bl	8006994 <memset>
 800948a:	4b05      	ldr	r3, [pc, #20]	; (80094a0 <std+0x38>)
 800948c:	6263      	str	r3, [r4, #36]	; 0x24
 800948e:	4b05      	ldr	r3, [pc, #20]	; (80094a4 <std+0x3c>)
 8009490:	62a3      	str	r3, [r4, #40]	; 0x28
 8009492:	4b05      	ldr	r3, [pc, #20]	; (80094a8 <std+0x40>)
 8009494:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009496:	4b05      	ldr	r3, [pc, #20]	; (80094ac <std+0x44>)
 8009498:	6224      	str	r4, [r4, #32]
 800949a:	6323      	str	r3, [r4, #48]	; 0x30
 800949c:	bd10      	pop	{r4, pc}
 800949e:	bf00      	nop
 80094a0:	0800af49 	.word	0x0800af49
 80094a4:	0800af6b 	.word	0x0800af6b
 80094a8:	0800afa3 	.word	0x0800afa3
 80094ac:	0800afc7 	.word	0x0800afc7

080094b0 <_cleanup_r>:
 80094b0:	4901      	ldr	r1, [pc, #4]	; (80094b8 <_cleanup_r+0x8>)
 80094b2:	f000 b8af 	b.w	8009614 <_fwalk_reent>
 80094b6:	bf00      	nop
 80094b8:	080093f1 	.word	0x080093f1

080094bc <__sfmoreglue>:
 80094bc:	b570      	push	{r4, r5, r6, lr}
 80094be:	2268      	movs	r2, #104	; 0x68
 80094c0:	1e4d      	subs	r5, r1, #1
 80094c2:	4355      	muls	r5, r2
 80094c4:	460e      	mov	r6, r1
 80094c6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80094ca:	f001 f9fb 	bl	800a8c4 <_malloc_r>
 80094ce:	4604      	mov	r4, r0
 80094d0:	b140      	cbz	r0, 80094e4 <__sfmoreglue+0x28>
 80094d2:	2100      	movs	r1, #0
 80094d4:	e9c0 1600 	strd	r1, r6, [r0]
 80094d8:	300c      	adds	r0, #12
 80094da:	60a0      	str	r0, [r4, #8]
 80094dc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80094e0:	f7fd fa58 	bl	8006994 <memset>
 80094e4:	4620      	mov	r0, r4
 80094e6:	bd70      	pop	{r4, r5, r6, pc}

080094e8 <__sfp_lock_acquire>:
 80094e8:	4801      	ldr	r0, [pc, #4]	; (80094f0 <__sfp_lock_acquire+0x8>)
 80094ea:	f000 bc26 	b.w	8009d3a <__retarget_lock_acquire_recursive>
 80094ee:	bf00      	nop
 80094f0:	200004b9 	.word	0x200004b9

080094f4 <__sfp_lock_release>:
 80094f4:	4801      	ldr	r0, [pc, #4]	; (80094fc <__sfp_lock_release+0x8>)
 80094f6:	f000 bc21 	b.w	8009d3c <__retarget_lock_release_recursive>
 80094fa:	bf00      	nop
 80094fc:	200004b9 	.word	0x200004b9

08009500 <__sinit_lock_acquire>:
 8009500:	4801      	ldr	r0, [pc, #4]	; (8009508 <__sinit_lock_acquire+0x8>)
 8009502:	f000 bc1a 	b.w	8009d3a <__retarget_lock_acquire_recursive>
 8009506:	bf00      	nop
 8009508:	200004ba 	.word	0x200004ba

0800950c <__sinit_lock_release>:
 800950c:	4801      	ldr	r0, [pc, #4]	; (8009514 <__sinit_lock_release+0x8>)
 800950e:	f000 bc15 	b.w	8009d3c <__retarget_lock_release_recursive>
 8009512:	bf00      	nop
 8009514:	200004ba 	.word	0x200004ba

08009518 <__sinit>:
 8009518:	b510      	push	{r4, lr}
 800951a:	4604      	mov	r4, r0
 800951c:	f7ff fff0 	bl	8009500 <__sinit_lock_acquire>
 8009520:	69a3      	ldr	r3, [r4, #24]
 8009522:	b11b      	cbz	r3, 800952c <__sinit+0x14>
 8009524:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009528:	f7ff bff0 	b.w	800950c <__sinit_lock_release>
 800952c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009530:	6523      	str	r3, [r4, #80]	; 0x50
 8009532:	4b13      	ldr	r3, [pc, #76]	; (8009580 <__sinit+0x68>)
 8009534:	4a13      	ldr	r2, [pc, #76]	; (8009584 <__sinit+0x6c>)
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	62a2      	str	r2, [r4, #40]	; 0x28
 800953a:	42a3      	cmp	r3, r4
 800953c:	bf04      	itt	eq
 800953e:	2301      	moveq	r3, #1
 8009540:	61a3      	streq	r3, [r4, #24]
 8009542:	4620      	mov	r0, r4
 8009544:	f000 f820 	bl	8009588 <__sfp>
 8009548:	6060      	str	r0, [r4, #4]
 800954a:	4620      	mov	r0, r4
 800954c:	f000 f81c 	bl	8009588 <__sfp>
 8009550:	60a0      	str	r0, [r4, #8]
 8009552:	4620      	mov	r0, r4
 8009554:	f000 f818 	bl	8009588 <__sfp>
 8009558:	2200      	movs	r2, #0
 800955a:	60e0      	str	r0, [r4, #12]
 800955c:	2104      	movs	r1, #4
 800955e:	6860      	ldr	r0, [r4, #4]
 8009560:	f7ff ff82 	bl	8009468 <std>
 8009564:	68a0      	ldr	r0, [r4, #8]
 8009566:	2201      	movs	r2, #1
 8009568:	2109      	movs	r1, #9
 800956a:	f7ff ff7d 	bl	8009468 <std>
 800956e:	68e0      	ldr	r0, [r4, #12]
 8009570:	2202      	movs	r2, #2
 8009572:	2112      	movs	r1, #18
 8009574:	f7ff ff78 	bl	8009468 <std>
 8009578:	2301      	movs	r3, #1
 800957a:	61a3      	str	r3, [r4, #24]
 800957c:	e7d2      	b.n	8009524 <__sinit+0xc>
 800957e:	bf00      	nop
 8009580:	0800b2e4 	.word	0x0800b2e4
 8009584:	080094b1 	.word	0x080094b1

08009588 <__sfp>:
 8009588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800958a:	4607      	mov	r7, r0
 800958c:	f7ff ffac 	bl	80094e8 <__sfp_lock_acquire>
 8009590:	4b1e      	ldr	r3, [pc, #120]	; (800960c <__sfp+0x84>)
 8009592:	681e      	ldr	r6, [r3, #0]
 8009594:	69b3      	ldr	r3, [r6, #24]
 8009596:	b913      	cbnz	r3, 800959e <__sfp+0x16>
 8009598:	4630      	mov	r0, r6
 800959a:	f7ff ffbd 	bl	8009518 <__sinit>
 800959e:	3648      	adds	r6, #72	; 0x48
 80095a0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80095a4:	3b01      	subs	r3, #1
 80095a6:	d503      	bpl.n	80095b0 <__sfp+0x28>
 80095a8:	6833      	ldr	r3, [r6, #0]
 80095aa:	b30b      	cbz	r3, 80095f0 <__sfp+0x68>
 80095ac:	6836      	ldr	r6, [r6, #0]
 80095ae:	e7f7      	b.n	80095a0 <__sfp+0x18>
 80095b0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80095b4:	b9d5      	cbnz	r5, 80095ec <__sfp+0x64>
 80095b6:	4b16      	ldr	r3, [pc, #88]	; (8009610 <__sfp+0x88>)
 80095b8:	60e3      	str	r3, [r4, #12]
 80095ba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80095be:	6665      	str	r5, [r4, #100]	; 0x64
 80095c0:	f000 fbba 	bl	8009d38 <__retarget_lock_init_recursive>
 80095c4:	f7ff ff96 	bl	80094f4 <__sfp_lock_release>
 80095c8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80095cc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80095d0:	6025      	str	r5, [r4, #0]
 80095d2:	61a5      	str	r5, [r4, #24]
 80095d4:	2208      	movs	r2, #8
 80095d6:	4629      	mov	r1, r5
 80095d8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80095dc:	f7fd f9da 	bl	8006994 <memset>
 80095e0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80095e4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80095e8:	4620      	mov	r0, r4
 80095ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80095ec:	3468      	adds	r4, #104	; 0x68
 80095ee:	e7d9      	b.n	80095a4 <__sfp+0x1c>
 80095f0:	2104      	movs	r1, #4
 80095f2:	4638      	mov	r0, r7
 80095f4:	f7ff ff62 	bl	80094bc <__sfmoreglue>
 80095f8:	4604      	mov	r4, r0
 80095fa:	6030      	str	r0, [r6, #0]
 80095fc:	2800      	cmp	r0, #0
 80095fe:	d1d5      	bne.n	80095ac <__sfp+0x24>
 8009600:	f7ff ff78 	bl	80094f4 <__sfp_lock_release>
 8009604:	230c      	movs	r3, #12
 8009606:	603b      	str	r3, [r7, #0]
 8009608:	e7ee      	b.n	80095e8 <__sfp+0x60>
 800960a:	bf00      	nop
 800960c:	0800b2e4 	.word	0x0800b2e4
 8009610:	ffff0001 	.word	0xffff0001

08009614 <_fwalk_reent>:
 8009614:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009618:	4606      	mov	r6, r0
 800961a:	4688      	mov	r8, r1
 800961c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009620:	2700      	movs	r7, #0
 8009622:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009626:	f1b9 0901 	subs.w	r9, r9, #1
 800962a:	d505      	bpl.n	8009638 <_fwalk_reent+0x24>
 800962c:	6824      	ldr	r4, [r4, #0]
 800962e:	2c00      	cmp	r4, #0
 8009630:	d1f7      	bne.n	8009622 <_fwalk_reent+0xe>
 8009632:	4638      	mov	r0, r7
 8009634:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009638:	89ab      	ldrh	r3, [r5, #12]
 800963a:	2b01      	cmp	r3, #1
 800963c:	d907      	bls.n	800964e <_fwalk_reent+0x3a>
 800963e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009642:	3301      	adds	r3, #1
 8009644:	d003      	beq.n	800964e <_fwalk_reent+0x3a>
 8009646:	4629      	mov	r1, r5
 8009648:	4630      	mov	r0, r6
 800964a:	47c0      	blx	r8
 800964c:	4307      	orrs	r7, r0
 800964e:	3568      	adds	r5, #104	; 0x68
 8009650:	e7e9      	b.n	8009626 <_fwalk_reent+0x12>

08009652 <rshift>:
 8009652:	6903      	ldr	r3, [r0, #16]
 8009654:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009658:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800965c:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009660:	f100 0414 	add.w	r4, r0, #20
 8009664:	dd45      	ble.n	80096f2 <rshift+0xa0>
 8009666:	f011 011f 	ands.w	r1, r1, #31
 800966a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800966e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009672:	d10c      	bne.n	800968e <rshift+0x3c>
 8009674:	f100 0710 	add.w	r7, r0, #16
 8009678:	4629      	mov	r1, r5
 800967a:	42b1      	cmp	r1, r6
 800967c:	d334      	bcc.n	80096e8 <rshift+0x96>
 800967e:	1a9b      	subs	r3, r3, r2
 8009680:	009b      	lsls	r3, r3, #2
 8009682:	1eea      	subs	r2, r5, #3
 8009684:	4296      	cmp	r6, r2
 8009686:	bf38      	it	cc
 8009688:	2300      	movcc	r3, #0
 800968a:	4423      	add	r3, r4
 800968c:	e015      	b.n	80096ba <rshift+0x68>
 800968e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009692:	f1c1 0820 	rsb	r8, r1, #32
 8009696:	40cf      	lsrs	r7, r1
 8009698:	f105 0e04 	add.w	lr, r5, #4
 800969c:	46a1      	mov	r9, r4
 800969e:	4576      	cmp	r6, lr
 80096a0:	46f4      	mov	ip, lr
 80096a2:	d815      	bhi.n	80096d0 <rshift+0x7e>
 80096a4:	1a9a      	subs	r2, r3, r2
 80096a6:	0092      	lsls	r2, r2, #2
 80096a8:	3a04      	subs	r2, #4
 80096aa:	3501      	adds	r5, #1
 80096ac:	42ae      	cmp	r6, r5
 80096ae:	bf38      	it	cc
 80096b0:	2200      	movcc	r2, #0
 80096b2:	18a3      	adds	r3, r4, r2
 80096b4:	50a7      	str	r7, [r4, r2]
 80096b6:	b107      	cbz	r7, 80096ba <rshift+0x68>
 80096b8:	3304      	adds	r3, #4
 80096ba:	1b1a      	subs	r2, r3, r4
 80096bc:	42a3      	cmp	r3, r4
 80096be:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80096c2:	bf08      	it	eq
 80096c4:	2300      	moveq	r3, #0
 80096c6:	6102      	str	r2, [r0, #16]
 80096c8:	bf08      	it	eq
 80096ca:	6143      	streq	r3, [r0, #20]
 80096cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80096d0:	f8dc c000 	ldr.w	ip, [ip]
 80096d4:	fa0c fc08 	lsl.w	ip, ip, r8
 80096d8:	ea4c 0707 	orr.w	r7, ip, r7
 80096dc:	f849 7b04 	str.w	r7, [r9], #4
 80096e0:	f85e 7b04 	ldr.w	r7, [lr], #4
 80096e4:	40cf      	lsrs	r7, r1
 80096e6:	e7da      	b.n	800969e <rshift+0x4c>
 80096e8:	f851 cb04 	ldr.w	ip, [r1], #4
 80096ec:	f847 cf04 	str.w	ip, [r7, #4]!
 80096f0:	e7c3      	b.n	800967a <rshift+0x28>
 80096f2:	4623      	mov	r3, r4
 80096f4:	e7e1      	b.n	80096ba <rshift+0x68>

080096f6 <__hexdig_fun>:
 80096f6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80096fa:	2b09      	cmp	r3, #9
 80096fc:	d802      	bhi.n	8009704 <__hexdig_fun+0xe>
 80096fe:	3820      	subs	r0, #32
 8009700:	b2c0      	uxtb	r0, r0
 8009702:	4770      	bx	lr
 8009704:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009708:	2b05      	cmp	r3, #5
 800970a:	d801      	bhi.n	8009710 <__hexdig_fun+0x1a>
 800970c:	3847      	subs	r0, #71	; 0x47
 800970e:	e7f7      	b.n	8009700 <__hexdig_fun+0xa>
 8009710:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009714:	2b05      	cmp	r3, #5
 8009716:	d801      	bhi.n	800971c <__hexdig_fun+0x26>
 8009718:	3827      	subs	r0, #39	; 0x27
 800971a:	e7f1      	b.n	8009700 <__hexdig_fun+0xa>
 800971c:	2000      	movs	r0, #0
 800971e:	4770      	bx	lr

08009720 <__gethex>:
 8009720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009724:	ed2d 8b02 	vpush	{d8}
 8009728:	b089      	sub	sp, #36	; 0x24
 800972a:	ee08 0a10 	vmov	s16, r0
 800972e:	9304      	str	r3, [sp, #16]
 8009730:	4bb4      	ldr	r3, [pc, #720]	; (8009a04 <__gethex+0x2e4>)
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	9301      	str	r3, [sp, #4]
 8009736:	4618      	mov	r0, r3
 8009738:	468b      	mov	fp, r1
 800973a:	4690      	mov	r8, r2
 800973c:	f7f6 fd58 	bl	80001f0 <strlen>
 8009740:	9b01      	ldr	r3, [sp, #4]
 8009742:	f8db 2000 	ldr.w	r2, [fp]
 8009746:	4403      	add	r3, r0
 8009748:	4682      	mov	sl, r0
 800974a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800974e:	9305      	str	r3, [sp, #20]
 8009750:	1c93      	adds	r3, r2, #2
 8009752:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009756:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800975a:	32fe      	adds	r2, #254	; 0xfe
 800975c:	18d1      	adds	r1, r2, r3
 800975e:	461f      	mov	r7, r3
 8009760:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009764:	9100      	str	r1, [sp, #0]
 8009766:	2830      	cmp	r0, #48	; 0x30
 8009768:	d0f8      	beq.n	800975c <__gethex+0x3c>
 800976a:	f7ff ffc4 	bl	80096f6 <__hexdig_fun>
 800976e:	4604      	mov	r4, r0
 8009770:	2800      	cmp	r0, #0
 8009772:	d13a      	bne.n	80097ea <__gethex+0xca>
 8009774:	9901      	ldr	r1, [sp, #4]
 8009776:	4652      	mov	r2, sl
 8009778:	4638      	mov	r0, r7
 800977a:	f001 fc28 	bl	800afce <strncmp>
 800977e:	4605      	mov	r5, r0
 8009780:	2800      	cmp	r0, #0
 8009782:	d168      	bne.n	8009856 <__gethex+0x136>
 8009784:	f817 000a 	ldrb.w	r0, [r7, sl]
 8009788:	eb07 060a 	add.w	r6, r7, sl
 800978c:	f7ff ffb3 	bl	80096f6 <__hexdig_fun>
 8009790:	2800      	cmp	r0, #0
 8009792:	d062      	beq.n	800985a <__gethex+0x13a>
 8009794:	4633      	mov	r3, r6
 8009796:	7818      	ldrb	r0, [r3, #0]
 8009798:	2830      	cmp	r0, #48	; 0x30
 800979a:	461f      	mov	r7, r3
 800979c:	f103 0301 	add.w	r3, r3, #1
 80097a0:	d0f9      	beq.n	8009796 <__gethex+0x76>
 80097a2:	f7ff ffa8 	bl	80096f6 <__hexdig_fun>
 80097a6:	2301      	movs	r3, #1
 80097a8:	fab0 f480 	clz	r4, r0
 80097ac:	0964      	lsrs	r4, r4, #5
 80097ae:	4635      	mov	r5, r6
 80097b0:	9300      	str	r3, [sp, #0]
 80097b2:	463a      	mov	r2, r7
 80097b4:	4616      	mov	r6, r2
 80097b6:	3201      	adds	r2, #1
 80097b8:	7830      	ldrb	r0, [r6, #0]
 80097ba:	f7ff ff9c 	bl	80096f6 <__hexdig_fun>
 80097be:	2800      	cmp	r0, #0
 80097c0:	d1f8      	bne.n	80097b4 <__gethex+0x94>
 80097c2:	9901      	ldr	r1, [sp, #4]
 80097c4:	4652      	mov	r2, sl
 80097c6:	4630      	mov	r0, r6
 80097c8:	f001 fc01 	bl	800afce <strncmp>
 80097cc:	b980      	cbnz	r0, 80097f0 <__gethex+0xd0>
 80097ce:	b94d      	cbnz	r5, 80097e4 <__gethex+0xc4>
 80097d0:	eb06 050a 	add.w	r5, r6, sl
 80097d4:	462a      	mov	r2, r5
 80097d6:	4616      	mov	r6, r2
 80097d8:	3201      	adds	r2, #1
 80097da:	7830      	ldrb	r0, [r6, #0]
 80097dc:	f7ff ff8b 	bl	80096f6 <__hexdig_fun>
 80097e0:	2800      	cmp	r0, #0
 80097e2:	d1f8      	bne.n	80097d6 <__gethex+0xb6>
 80097e4:	1bad      	subs	r5, r5, r6
 80097e6:	00ad      	lsls	r5, r5, #2
 80097e8:	e004      	b.n	80097f4 <__gethex+0xd4>
 80097ea:	2400      	movs	r4, #0
 80097ec:	4625      	mov	r5, r4
 80097ee:	e7e0      	b.n	80097b2 <__gethex+0x92>
 80097f0:	2d00      	cmp	r5, #0
 80097f2:	d1f7      	bne.n	80097e4 <__gethex+0xc4>
 80097f4:	7833      	ldrb	r3, [r6, #0]
 80097f6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80097fa:	2b50      	cmp	r3, #80	; 0x50
 80097fc:	d13b      	bne.n	8009876 <__gethex+0x156>
 80097fe:	7873      	ldrb	r3, [r6, #1]
 8009800:	2b2b      	cmp	r3, #43	; 0x2b
 8009802:	d02c      	beq.n	800985e <__gethex+0x13e>
 8009804:	2b2d      	cmp	r3, #45	; 0x2d
 8009806:	d02e      	beq.n	8009866 <__gethex+0x146>
 8009808:	1c71      	adds	r1, r6, #1
 800980a:	f04f 0900 	mov.w	r9, #0
 800980e:	7808      	ldrb	r0, [r1, #0]
 8009810:	f7ff ff71 	bl	80096f6 <__hexdig_fun>
 8009814:	1e43      	subs	r3, r0, #1
 8009816:	b2db      	uxtb	r3, r3
 8009818:	2b18      	cmp	r3, #24
 800981a:	d82c      	bhi.n	8009876 <__gethex+0x156>
 800981c:	f1a0 0210 	sub.w	r2, r0, #16
 8009820:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009824:	f7ff ff67 	bl	80096f6 <__hexdig_fun>
 8009828:	1e43      	subs	r3, r0, #1
 800982a:	b2db      	uxtb	r3, r3
 800982c:	2b18      	cmp	r3, #24
 800982e:	d91d      	bls.n	800986c <__gethex+0x14c>
 8009830:	f1b9 0f00 	cmp.w	r9, #0
 8009834:	d000      	beq.n	8009838 <__gethex+0x118>
 8009836:	4252      	negs	r2, r2
 8009838:	4415      	add	r5, r2
 800983a:	f8cb 1000 	str.w	r1, [fp]
 800983e:	b1e4      	cbz	r4, 800987a <__gethex+0x15a>
 8009840:	9b00      	ldr	r3, [sp, #0]
 8009842:	2b00      	cmp	r3, #0
 8009844:	bf14      	ite	ne
 8009846:	2700      	movne	r7, #0
 8009848:	2706      	moveq	r7, #6
 800984a:	4638      	mov	r0, r7
 800984c:	b009      	add	sp, #36	; 0x24
 800984e:	ecbd 8b02 	vpop	{d8}
 8009852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009856:	463e      	mov	r6, r7
 8009858:	4625      	mov	r5, r4
 800985a:	2401      	movs	r4, #1
 800985c:	e7ca      	b.n	80097f4 <__gethex+0xd4>
 800985e:	f04f 0900 	mov.w	r9, #0
 8009862:	1cb1      	adds	r1, r6, #2
 8009864:	e7d3      	b.n	800980e <__gethex+0xee>
 8009866:	f04f 0901 	mov.w	r9, #1
 800986a:	e7fa      	b.n	8009862 <__gethex+0x142>
 800986c:	230a      	movs	r3, #10
 800986e:	fb03 0202 	mla	r2, r3, r2, r0
 8009872:	3a10      	subs	r2, #16
 8009874:	e7d4      	b.n	8009820 <__gethex+0x100>
 8009876:	4631      	mov	r1, r6
 8009878:	e7df      	b.n	800983a <__gethex+0x11a>
 800987a:	1bf3      	subs	r3, r6, r7
 800987c:	3b01      	subs	r3, #1
 800987e:	4621      	mov	r1, r4
 8009880:	2b07      	cmp	r3, #7
 8009882:	dc0b      	bgt.n	800989c <__gethex+0x17c>
 8009884:	ee18 0a10 	vmov	r0, s16
 8009888:	f000 fad8 	bl	8009e3c <_Balloc>
 800988c:	4604      	mov	r4, r0
 800988e:	b940      	cbnz	r0, 80098a2 <__gethex+0x182>
 8009890:	4b5d      	ldr	r3, [pc, #372]	; (8009a08 <__gethex+0x2e8>)
 8009892:	4602      	mov	r2, r0
 8009894:	21de      	movs	r1, #222	; 0xde
 8009896:	485d      	ldr	r0, [pc, #372]	; (8009a0c <__gethex+0x2ec>)
 8009898:	f001 fbcc 	bl	800b034 <__assert_func>
 800989c:	3101      	adds	r1, #1
 800989e:	105b      	asrs	r3, r3, #1
 80098a0:	e7ee      	b.n	8009880 <__gethex+0x160>
 80098a2:	f100 0914 	add.w	r9, r0, #20
 80098a6:	f04f 0b00 	mov.w	fp, #0
 80098aa:	f1ca 0301 	rsb	r3, sl, #1
 80098ae:	f8cd 9008 	str.w	r9, [sp, #8]
 80098b2:	f8cd b000 	str.w	fp, [sp]
 80098b6:	9306      	str	r3, [sp, #24]
 80098b8:	42b7      	cmp	r7, r6
 80098ba:	d340      	bcc.n	800993e <__gethex+0x21e>
 80098bc:	9802      	ldr	r0, [sp, #8]
 80098be:	9b00      	ldr	r3, [sp, #0]
 80098c0:	f840 3b04 	str.w	r3, [r0], #4
 80098c4:	eba0 0009 	sub.w	r0, r0, r9
 80098c8:	1080      	asrs	r0, r0, #2
 80098ca:	0146      	lsls	r6, r0, #5
 80098cc:	6120      	str	r0, [r4, #16]
 80098ce:	4618      	mov	r0, r3
 80098d0:	f000 fba6 	bl	800a020 <__hi0bits>
 80098d4:	1a30      	subs	r0, r6, r0
 80098d6:	f8d8 6000 	ldr.w	r6, [r8]
 80098da:	42b0      	cmp	r0, r6
 80098dc:	dd63      	ble.n	80099a6 <__gethex+0x286>
 80098de:	1b87      	subs	r7, r0, r6
 80098e0:	4639      	mov	r1, r7
 80098e2:	4620      	mov	r0, r4
 80098e4:	f000 ff4a 	bl	800a77c <__any_on>
 80098e8:	4682      	mov	sl, r0
 80098ea:	b1a8      	cbz	r0, 8009918 <__gethex+0x1f8>
 80098ec:	1e7b      	subs	r3, r7, #1
 80098ee:	1159      	asrs	r1, r3, #5
 80098f0:	f003 021f 	and.w	r2, r3, #31
 80098f4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80098f8:	f04f 0a01 	mov.w	sl, #1
 80098fc:	fa0a f202 	lsl.w	r2, sl, r2
 8009900:	420a      	tst	r2, r1
 8009902:	d009      	beq.n	8009918 <__gethex+0x1f8>
 8009904:	4553      	cmp	r3, sl
 8009906:	dd05      	ble.n	8009914 <__gethex+0x1f4>
 8009908:	1eb9      	subs	r1, r7, #2
 800990a:	4620      	mov	r0, r4
 800990c:	f000 ff36 	bl	800a77c <__any_on>
 8009910:	2800      	cmp	r0, #0
 8009912:	d145      	bne.n	80099a0 <__gethex+0x280>
 8009914:	f04f 0a02 	mov.w	sl, #2
 8009918:	4639      	mov	r1, r7
 800991a:	4620      	mov	r0, r4
 800991c:	f7ff fe99 	bl	8009652 <rshift>
 8009920:	443d      	add	r5, r7
 8009922:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009926:	42ab      	cmp	r3, r5
 8009928:	da4c      	bge.n	80099c4 <__gethex+0x2a4>
 800992a:	ee18 0a10 	vmov	r0, s16
 800992e:	4621      	mov	r1, r4
 8009930:	f000 fac4 	bl	8009ebc <_Bfree>
 8009934:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009936:	2300      	movs	r3, #0
 8009938:	6013      	str	r3, [r2, #0]
 800993a:	27a3      	movs	r7, #163	; 0xa3
 800993c:	e785      	b.n	800984a <__gethex+0x12a>
 800993e:	1e73      	subs	r3, r6, #1
 8009940:	9a05      	ldr	r2, [sp, #20]
 8009942:	9303      	str	r3, [sp, #12]
 8009944:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009948:	4293      	cmp	r3, r2
 800994a:	d019      	beq.n	8009980 <__gethex+0x260>
 800994c:	f1bb 0f20 	cmp.w	fp, #32
 8009950:	d107      	bne.n	8009962 <__gethex+0x242>
 8009952:	9b02      	ldr	r3, [sp, #8]
 8009954:	9a00      	ldr	r2, [sp, #0]
 8009956:	f843 2b04 	str.w	r2, [r3], #4
 800995a:	9302      	str	r3, [sp, #8]
 800995c:	2300      	movs	r3, #0
 800995e:	9300      	str	r3, [sp, #0]
 8009960:	469b      	mov	fp, r3
 8009962:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009966:	f7ff fec6 	bl	80096f6 <__hexdig_fun>
 800996a:	9b00      	ldr	r3, [sp, #0]
 800996c:	f000 000f 	and.w	r0, r0, #15
 8009970:	fa00 f00b 	lsl.w	r0, r0, fp
 8009974:	4303      	orrs	r3, r0
 8009976:	9300      	str	r3, [sp, #0]
 8009978:	f10b 0b04 	add.w	fp, fp, #4
 800997c:	9b03      	ldr	r3, [sp, #12]
 800997e:	e00d      	b.n	800999c <__gethex+0x27c>
 8009980:	9b03      	ldr	r3, [sp, #12]
 8009982:	9a06      	ldr	r2, [sp, #24]
 8009984:	4413      	add	r3, r2
 8009986:	42bb      	cmp	r3, r7
 8009988:	d3e0      	bcc.n	800994c <__gethex+0x22c>
 800998a:	4618      	mov	r0, r3
 800998c:	9901      	ldr	r1, [sp, #4]
 800998e:	9307      	str	r3, [sp, #28]
 8009990:	4652      	mov	r2, sl
 8009992:	f001 fb1c 	bl	800afce <strncmp>
 8009996:	9b07      	ldr	r3, [sp, #28]
 8009998:	2800      	cmp	r0, #0
 800999a:	d1d7      	bne.n	800994c <__gethex+0x22c>
 800999c:	461e      	mov	r6, r3
 800999e:	e78b      	b.n	80098b8 <__gethex+0x198>
 80099a0:	f04f 0a03 	mov.w	sl, #3
 80099a4:	e7b8      	b.n	8009918 <__gethex+0x1f8>
 80099a6:	da0a      	bge.n	80099be <__gethex+0x29e>
 80099a8:	1a37      	subs	r7, r6, r0
 80099aa:	4621      	mov	r1, r4
 80099ac:	ee18 0a10 	vmov	r0, s16
 80099b0:	463a      	mov	r2, r7
 80099b2:	f000 fc9f 	bl	800a2f4 <__lshift>
 80099b6:	1bed      	subs	r5, r5, r7
 80099b8:	4604      	mov	r4, r0
 80099ba:	f100 0914 	add.w	r9, r0, #20
 80099be:	f04f 0a00 	mov.w	sl, #0
 80099c2:	e7ae      	b.n	8009922 <__gethex+0x202>
 80099c4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80099c8:	42a8      	cmp	r0, r5
 80099ca:	dd72      	ble.n	8009ab2 <__gethex+0x392>
 80099cc:	1b45      	subs	r5, r0, r5
 80099ce:	42ae      	cmp	r6, r5
 80099d0:	dc36      	bgt.n	8009a40 <__gethex+0x320>
 80099d2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80099d6:	2b02      	cmp	r3, #2
 80099d8:	d02a      	beq.n	8009a30 <__gethex+0x310>
 80099da:	2b03      	cmp	r3, #3
 80099dc:	d02c      	beq.n	8009a38 <__gethex+0x318>
 80099de:	2b01      	cmp	r3, #1
 80099e0:	d11c      	bne.n	8009a1c <__gethex+0x2fc>
 80099e2:	42ae      	cmp	r6, r5
 80099e4:	d11a      	bne.n	8009a1c <__gethex+0x2fc>
 80099e6:	2e01      	cmp	r6, #1
 80099e8:	d112      	bne.n	8009a10 <__gethex+0x2f0>
 80099ea:	9a04      	ldr	r2, [sp, #16]
 80099ec:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80099f0:	6013      	str	r3, [r2, #0]
 80099f2:	2301      	movs	r3, #1
 80099f4:	6123      	str	r3, [r4, #16]
 80099f6:	f8c9 3000 	str.w	r3, [r9]
 80099fa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80099fc:	2762      	movs	r7, #98	; 0x62
 80099fe:	601c      	str	r4, [r3, #0]
 8009a00:	e723      	b.n	800984a <__gethex+0x12a>
 8009a02:	bf00      	nop
 8009a04:	0800b5d4 	.word	0x0800b5d4
 8009a08:	0800b4f8 	.word	0x0800b4f8
 8009a0c:	0800b56c 	.word	0x0800b56c
 8009a10:	1e71      	subs	r1, r6, #1
 8009a12:	4620      	mov	r0, r4
 8009a14:	f000 feb2 	bl	800a77c <__any_on>
 8009a18:	2800      	cmp	r0, #0
 8009a1a:	d1e6      	bne.n	80099ea <__gethex+0x2ca>
 8009a1c:	ee18 0a10 	vmov	r0, s16
 8009a20:	4621      	mov	r1, r4
 8009a22:	f000 fa4b 	bl	8009ebc <_Bfree>
 8009a26:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009a28:	2300      	movs	r3, #0
 8009a2a:	6013      	str	r3, [r2, #0]
 8009a2c:	2750      	movs	r7, #80	; 0x50
 8009a2e:	e70c      	b.n	800984a <__gethex+0x12a>
 8009a30:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d1f2      	bne.n	8009a1c <__gethex+0x2fc>
 8009a36:	e7d8      	b.n	80099ea <__gethex+0x2ca>
 8009a38:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d1d5      	bne.n	80099ea <__gethex+0x2ca>
 8009a3e:	e7ed      	b.n	8009a1c <__gethex+0x2fc>
 8009a40:	1e6f      	subs	r7, r5, #1
 8009a42:	f1ba 0f00 	cmp.w	sl, #0
 8009a46:	d131      	bne.n	8009aac <__gethex+0x38c>
 8009a48:	b127      	cbz	r7, 8009a54 <__gethex+0x334>
 8009a4a:	4639      	mov	r1, r7
 8009a4c:	4620      	mov	r0, r4
 8009a4e:	f000 fe95 	bl	800a77c <__any_on>
 8009a52:	4682      	mov	sl, r0
 8009a54:	117b      	asrs	r3, r7, #5
 8009a56:	2101      	movs	r1, #1
 8009a58:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009a5c:	f007 071f 	and.w	r7, r7, #31
 8009a60:	fa01 f707 	lsl.w	r7, r1, r7
 8009a64:	421f      	tst	r7, r3
 8009a66:	4629      	mov	r1, r5
 8009a68:	4620      	mov	r0, r4
 8009a6a:	bf18      	it	ne
 8009a6c:	f04a 0a02 	orrne.w	sl, sl, #2
 8009a70:	1b76      	subs	r6, r6, r5
 8009a72:	f7ff fdee 	bl	8009652 <rshift>
 8009a76:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009a7a:	2702      	movs	r7, #2
 8009a7c:	f1ba 0f00 	cmp.w	sl, #0
 8009a80:	d048      	beq.n	8009b14 <__gethex+0x3f4>
 8009a82:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009a86:	2b02      	cmp	r3, #2
 8009a88:	d015      	beq.n	8009ab6 <__gethex+0x396>
 8009a8a:	2b03      	cmp	r3, #3
 8009a8c:	d017      	beq.n	8009abe <__gethex+0x39e>
 8009a8e:	2b01      	cmp	r3, #1
 8009a90:	d109      	bne.n	8009aa6 <__gethex+0x386>
 8009a92:	f01a 0f02 	tst.w	sl, #2
 8009a96:	d006      	beq.n	8009aa6 <__gethex+0x386>
 8009a98:	f8d9 0000 	ldr.w	r0, [r9]
 8009a9c:	ea4a 0a00 	orr.w	sl, sl, r0
 8009aa0:	f01a 0f01 	tst.w	sl, #1
 8009aa4:	d10e      	bne.n	8009ac4 <__gethex+0x3a4>
 8009aa6:	f047 0710 	orr.w	r7, r7, #16
 8009aaa:	e033      	b.n	8009b14 <__gethex+0x3f4>
 8009aac:	f04f 0a01 	mov.w	sl, #1
 8009ab0:	e7d0      	b.n	8009a54 <__gethex+0x334>
 8009ab2:	2701      	movs	r7, #1
 8009ab4:	e7e2      	b.n	8009a7c <__gethex+0x35c>
 8009ab6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009ab8:	f1c3 0301 	rsb	r3, r3, #1
 8009abc:	9315      	str	r3, [sp, #84]	; 0x54
 8009abe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d0f0      	beq.n	8009aa6 <__gethex+0x386>
 8009ac4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009ac8:	f104 0314 	add.w	r3, r4, #20
 8009acc:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009ad0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009ad4:	f04f 0c00 	mov.w	ip, #0
 8009ad8:	4618      	mov	r0, r3
 8009ada:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ade:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009ae2:	d01c      	beq.n	8009b1e <__gethex+0x3fe>
 8009ae4:	3201      	adds	r2, #1
 8009ae6:	6002      	str	r2, [r0, #0]
 8009ae8:	2f02      	cmp	r7, #2
 8009aea:	f104 0314 	add.w	r3, r4, #20
 8009aee:	d13f      	bne.n	8009b70 <__gethex+0x450>
 8009af0:	f8d8 2000 	ldr.w	r2, [r8]
 8009af4:	3a01      	subs	r2, #1
 8009af6:	42b2      	cmp	r2, r6
 8009af8:	d10a      	bne.n	8009b10 <__gethex+0x3f0>
 8009afa:	1171      	asrs	r1, r6, #5
 8009afc:	2201      	movs	r2, #1
 8009afe:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009b02:	f006 061f 	and.w	r6, r6, #31
 8009b06:	fa02 f606 	lsl.w	r6, r2, r6
 8009b0a:	421e      	tst	r6, r3
 8009b0c:	bf18      	it	ne
 8009b0e:	4617      	movne	r7, r2
 8009b10:	f047 0720 	orr.w	r7, r7, #32
 8009b14:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009b16:	601c      	str	r4, [r3, #0]
 8009b18:	9b04      	ldr	r3, [sp, #16]
 8009b1a:	601d      	str	r5, [r3, #0]
 8009b1c:	e695      	b.n	800984a <__gethex+0x12a>
 8009b1e:	4299      	cmp	r1, r3
 8009b20:	f843 cc04 	str.w	ip, [r3, #-4]
 8009b24:	d8d8      	bhi.n	8009ad8 <__gethex+0x3b8>
 8009b26:	68a3      	ldr	r3, [r4, #8]
 8009b28:	459b      	cmp	fp, r3
 8009b2a:	db19      	blt.n	8009b60 <__gethex+0x440>
 8009b2c:	6861      	ldr	r1, [r4, #4]
 8009b2e:	ee18 0a10 	vmov	r0, s16
 8009b32:	3101      	adds	r1, #1
 8009b34:	f000 f982 	bl	8009e3c <_Balloc>
 8009b38:	4681      	mov	r9, r0
 8009b3a:	b918      	cbnz	r0, 8009b44 <__gethex+0x424>
 8009b3c:	4b1a      	ldr	r3, [pc, #104]	; (8009ba8 <__gethex+0x488>)
 8009b3e:	4602      	mov	r2, r0
 8009b40:	2184      	movs	r1, #132	; 0x84
 8009b42:	e6a8      	b.n	8009896 <__gethex+0x176>
 8009b44:	6922      	ldr	r2, [r4, #16]
 8009b46:	3202      	adds	r2, #2
 8009b48:	f104 010c 	add.w	r1, r4, #12
 8009b4c:	0092      	lsls	r2, r2, #2
 8009b4e:	300c      	adds	r0, #12
 8009b50:	f7fc ff12 	bl	8006978 <memcpy>
 8009b54:	4621      	mov	r1, r4
 8009b56:	ee18 0a10 	vmov	r0, s16
 8009b5a:	f000 f9af 	bl	8009ebc <_Bfree>
 8009b5e:	464c      	mov	r4, r9
 8009b60:	6923      	ldr	r3, [r4, #16]
 8009b62:	1c5a      	adds	r2, r3, #1
 8009b64:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009b68:	6122      	str	r2, [r4, #16]
 8009b6a:	2201      	movs	r2, #1
 8009b6c:	615a      	str	r2, [r3, #20]
 8009b6e:	e7bb      	b.n	8009ae8 <__gethex+0x3c8>
 8009b70:	6922      	ldr	r2, [r4, #16]
 8009b72:	455a      	cmp	r2, fp
 8009b74:	dd0b      	ble.n	8009b8e <__gethex+0x46e>
 8009b76:	2101      	movs	r1, #1
 8009b78:	4620      	mov	r0, r4
 8009b7a:	f7ff fd6a 	bl	8009652 <rshift>
 8009b7e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009b82:	3501      	adds	r5, #1
 8009b84:	42ab      	cmp	r3, r5
 8009b86:	f6ff aed0 	blt.w	800992a <__gethex+0x20a>
 8009b8a:	2701      	movs	r7, #1
 8009b8c:	e7c0      	b.n	8009b10 <__gethex+0x3f0>
 8009b8e:	f016 061f 	ands.w	r6, r6, #31
 8009b92:	d0fa      	beq.n	8009b8a <__gethex+0x46a>
 8009b94:	4453      	add	r3, sl
 8009b96:	f1c6 0620 	rsb	r6, r6, #32
 8009b9a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009b9e:	f000 fa3f 	bl	800a020 <__hi0bits>
 8009ba2:	42b0      	cmp	r0, r6
 8009ba4:	dbe7      	blt.n	8009b76 <__gethex+0x456>
 8009ba6:	e7f0      	b.n	8009b8a <__gethex+0x46a>
 8009ba8:	0800b4f8 	.word	0x0800b4f8

08009bac <L_shift>:
 8009bac:	f1c2 0208 	rsb	r2, r2, #8
 8009bb0:	0092      	lsls	r2, r2, #2
 8009bb2:	b570      	push	{r4, r5, r6, lr}
 8009bb4:	f1c2 0620 	rsb	r6, r2, #32
 8009bb8:	6843      	ldr	r3, [r0, #4]
 8009bba:	6804      	ldr	r4, [r0, #0]
 8009bbc:	fa03 f506 	lsl.w	r5, r3, r6
 8009bc0:	432c      	orrs	r4, r5
 8009bc2:	40d3      	lsrs	r3, r2
 8009bc4:	6004      	str	r4, [r0, #0]
 8009bc6:	f840 3f04 	str.w	r3, [r0, #4]!
 8009bca:	4288      	cmp	r0, r1
 8009bcc:	d3f4      	bcc.n	8009bb8 <L_shift+0xc>
 8009bce:	bd70      	pop	{r4, r5, r6, pc}

08009bd0 <__match>:
 8009bd0:	b530      	push	{r4, r5, lr}
 8009bd2:	6803      	ldr	r3, [r0, #0]
 8009bd4:	3301      	adds	r3, #1
 8009bd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009bda:	b914      	cbnz	r4, 8009be2 <__match+0x12>
 8009bdc:	6003      	str	r3, [r0, #0]
 8009bde:	2001      	movs	r0, #1
 8009be0:	bd30      	pop	{r4, r5, pc}
 8009be2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009be6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009bea:	2d19      	cmp	r5, #25
 8009bec:	bf98      	it	ls
 8009bee:	3220      	addls	r2, #32
 8009bf0:	42a2      	cmp	r2, r4
 8009bf2:	d0f0      	beq.n	8009bd6 <__match+0x6>
 8009bf4:	2000      	movs	r0, #0
 8009bf6:	e7f3      	b.n	8009be0 <__match+0x10>

08009bf8 <__hexnan>:
 8009bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bfc:	680b      	ldr	r3, [r1, #0]
 8009bfe:	115e      	asrs	r6, r3, #5
 8009c00:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009c04:	f013 031f 	ands.w	r3, r3, #31
 8009c08:	b087      	sub	sp, #28
 8009c0a:	bf18      	it	ne
 8009c0c:	3604      	addne	r6, #4
 8009c0e:	2500      	movs	r5, #0
 8009c10:	1f37      	subs	r7, r6, #4
 8009c12:	4690      	mov	r8, r2
 8009c14:	6802      	ldr	r2, [r0, #0]
 8009c16:	9301      	str	r3, [sp, #4]
 8009c18:	4682      	mov	sl, r0
 8009c1a:	f846 5c04 	str.w	r5, [r6, #-4]
 8009c1e:	46b9      	mov	r9, r7
 8009c20:	463c      	mov	r4, r7
 8009c22:	9502      	str	r5, [sp, #8]
 8009c24:	46ab      	mov	fp, r5
 8009c26:	7851      	ldrb	r1, [r2, #1]
 8009c28:	1c53      	adds	r3, r2, #1
 8009c2a:	9303      	str	r3, [sp, #12]
 8009c2c:	b341      	cbz	r1, 8009c80 <__hexnan+0x88>
 8009c2e:	4608      	mov	r0, r1
 8009c30:	9205      	str	r2, [sp, #20]
 8009c32:	9104      	str	r1, [sp, #16]
 8009c34:	f7ff fd5f 	bl	80096f6 <__hexdig_fun>
 8009c38:	2800      	cmp	r0, #0
 8009c3a:	d14f      	bne.n	8009cdc <__hexnan+0xe4>
 8009c3c:	9904      	ldr	r1, [sp, #16]
 8009c3e:	9a05      	ldr	r2, [sp, #20]
 8009c40:	2920      	cmp	r1, #32
 8009c42:	d818      	bhi.n	8009c76 <__hexnan+0x7e>
 8009c44:	9b02      	ldr	r3, [sp, #8]
 8009c46:	459b      	cmp	fp, r3
 8009c48:	dd13      	ble.n	8009c72 <__hexnan+0x7a>
 8009c4a:	454c      	cmp	r4, r9
 8009c4c:	d206      	bcs.n	8009c5c <__hexnan+0x64>
 8009c4e:	2d07      	cmp	r5, #7
 8009c50:	dc04      	bgt.n	8009c5c <__hexnan+0x64>
 8009c52:	462a      	mov	r2, r5
 8009c54:	4649      	mov	r1, r9
 8009c56:	4620      	mov	r0, r4
 8009c58:	f7ff ffa8 	bl	8009bac <L_shift>
 8009c5c:	4544      	cmp	r4, r8
 8009c5e:	d950      	bls.n	8009d02 <__hexnan+0x10a>
 8009c60:	2300      	movs	r3, #0
 8009c62:	f1a4 0904 	sub.w	r9, r4, #4
 8009c66:	f844 3c04 	str.w	r3, [r4, #-4]
 8009c6a:	f8cd b008 	str.w	fp, [sp, #8]
 8009c6e:	464c      	mov	r4, r9
 8009c70:	461d      	mov	r5, r3
 8009c72:	9a03      	ldr	r2, [sp, #12]
 8009c74:	e7d7      	b.n	8009c26 <__hexnan+0x2e>
 8009c76:	2929      	cmp	r1, #41	; 0x29
 8009c78:	d156      	bne.n	8009d28 <__hexnan+0x130>
 8009c7a:	3202      	adds	r2, #2
 8009c7c:	f8ca 2000 	str.w	r2, [sl]
 8009c80:	f1bb 0f00 	cmp.w	fp, #0
 8009c84:	d050      	beq.n	8009d28 <__hexnan+0x130>
 8009c86:	454c      	cmp	r4, r9
 8009c88:	d206      	bcs.n	8009c98 <__hexnan+0xa0>
 8009c8a:	2d07      	cmp	r5, #7
 8009c8c:	dc04      	bgt.n	8009c98 <__hexnan+0xa0>
 8009c8e:	462a      	mov	r2, r5
 8009c90:	4649      	mov	r1, r9
 8009c92:	4620      	mov	r0, r4
 8009c94:	f7ff ff8a 	bl	8009bac <L_shift>
 8009c98:	4544      	cmp	r4, r8
 8009c9a:	d934      	bls.n	8009d06 <__hexnan+0x10e>
 8009c9c:	f1a8 0204 	sub.w	r2, r8, #4
 8009ca0:	4623      	mov	r3, r4
 8009ca2:	f853 1b04 	ldr.w	r1, [r3], #4
 8009ca6:	f842 1f04 	str.w	r1, [r2, #4]!
 8009caa:	429f      	cmp	r7, r3
 8009cac:	d2f9      	bcs.n	8009ca2 <__hexnan+0xaa>
 8009cae:	1b3b      	subs	r3, r7, r4
 8009cb0:	f023 0303 	bic.w	r3, r3, #3
 8009cb4:	3304      	adds	r3, #4
 8009cb6:	3401      	adds	r4, #1
 8009cb8:	3e03      	subs	r6, #3
 8009cba:	42b4      	cmp	r4, r6
 8009cbc:	bf88      	it	hi
 8009cbe:	2304      	movhi	r3, #4
 8009cc0:	4443      	add	r3, r8
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	f843 2b04 	str.w	r2, [r3], #4
 8009cc8:	429f      	cmp	r7, r3
 8009cca:	d2fb      	bcs.n	8009cc4 <__hexnan+0xcc>
 8009ccc:	683b      	ldr	r3, [r7, #0]
 8009cce:	b91b      	cbnz	r3, 8009cd8 <__hexnan+0xe0>
 8009cd0:	4547      	cmp	r7, r8
 8009cd2:	d127      	bne.n	8009d24 <__hexnan+0x12c>
 8009cd4:	2301      	movs	r3, #1
 8009cd6:	603b      	str	r3, [r7, #0]
 8009cd8:	2005      	movs	r0, #5
 8009cda:	e026      	b.n	8009d2a <__hexnan+0x132>
 8009cdc:	3501      	adds	r5, #1
 8009cde:	2d08      	cmp	r5, #8
 8009ce0:	f10b 0b01 	add.w	fp, fp, #1
 8009ce4:	dd06      	ble.n	8009cf4 <__hexnan+0xfc>
 8009ce6:	4544      	cmp	r4, r8
 8009ce8:	d9c3      	bls.n	8009c72 <__hexnan+0x7a>
 8009cea:	2300      	movs	r3, #0
 8009cec:	f844 3c04 	str.w	r3, [r4, #-4]
 8009cf0:	2501      	movs	r5, #1
 8009cf2:	3c04      	subs	r4, #4
 8009cf4:	6822      	ldr	r2, [r4, #0]
 8009cf6:	f000 000f 	and.w	r0, r0, #15
 8009cfa:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8009cfe:	6022      	str	r2, [r4, #0]
 8009d00:	e7b7      	b.n	8009c72 <__hexnan+0x7a>
 8009d02:	2508      	movs	r5, #8
 8009d04:	e7b5      	b.n	8009c72 <__hexnan+0x7a>
 8009d06:	9b01      	ldr	r3, [sp, #4]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d0df      	beq.n	8009ccc <__hexnan+0xd4>
 8009d0c:	f04f 32ff 	mov.w	r2, #4294967295
 8009d10:	f1c3 0320 	rsb	r3, r3, #32
 8009d14:	fa22 f303 	lsr.w	r3, r2, r3
 8009d18:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009d1c:	401a      	ands	r2, r3
 8009d1e:	f846 2c04 	str.w	r2, [r6, #-4]
 8009d22:	e7d3      	b.n	8009ccc <__hexnan+0xd4>
 8009d24:	3f04      	subs	r7, #4
 8009d26:	e7d1      	b.n	8009ccc <__hexnan+0xd4>
 8009d28:	2004      	movs	r0, #4
 8009d2a:	b007      	add	sp, #28
 8009d2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009d30 <_localeconv_r>:
 8009d30:	4800      	ldr	r0, [pc, #0]	; (8009d34 <_localeconv_r+0x4>)
 8009d32:	4770      	bx	lr
 8009d34:	2000032c 	.word	0x2000032c

08009d38 <__retarget_lock_init_recursive>:
 8009d38:	4770      	bx	lr

08009d3a <__retarget_lock_acquire_recursive>:
 8009d3a:	4770      	bx	lr

08009d3c <__retarget_lock_release_recursive>:
 8009d3c:	4770      	bx	lr

08009d3e <__swhatbuf_r>:
 8009d3e:	b570      	push	{r4, r5, r6, lr}
 8009d40:	460e      	mov	r6, r1
 8009d42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d46:	2900      	cmp	r1, #0
 8009d48:	b096      	sub	sp, #88	; 0x58
 8009d4a:	4614      	mov	r4, r2
 8009d4c:	461d      	mov	r5, r3
 8009d4e:	da08      	bge.n	8009d62 <__swhatbuf_r+0x24>
 8009d50:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009d54:	2200      	movs	r2, #0
 8009d56:	602a      	str	r2, [r5, #0]
 8009d58:	061a      	lsls	r2, r3, #24
 8009d5a:	d410      	bmi.n	8009d7e <__swhatbuf_r+0x40>
 8009d5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009d60:	e00e      	b.n	8009d80 <__swhatbuf_r+0x42>
 8009d62:	466a      	mov	r2, sp
 8009d64:	f001 f9a6 	bl	800b0b4 <_fstat_r>
 8009d68:	2800      	cmp	r0, #0
 8009d6a:	dbf1      	blt.n	8009d50 <__swhatbuf_r+0x12>
 8009d6c:	9a01      	ldr	r2, [sp, #4]
 8009d6e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009d72:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009d76:	425a      	negs	r2, r3
 8009d78:	415a      	adcs	r2, r3
 8009d7a:	602a      	str	r2, [r5, #0]
 8009d7c:	e7ee      	b.n	8009d5c <__swhatbuf_r+0x1e>
 8009d7e:	2340      	movs	r3, #64	; 0x40
 8009d80:	2000      	movs	r0, #0
 8009d82:	6023      	str	r3, [r4, #0]
 8009d84:	b016      	add	sp, #88	; 0x58
 8009d86:	bd70      	pop	{r4, r5, r6, pc}

08009d88 <__smakebuf_r>:
 8009d88:	898b      	ldrh	r3, [r1, #12]
 8009d8a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009d8c:	079d      	lsls	r5, r3, #30
 8009d8e:	4606      	mov	r6, r0
 8009d90:	460c      	mov	r4, r1
 8009d92:	d507      	bpl.n	8009da4 <__smakebuf_r+0x1c>
 8009d94:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009d98:	6023      	str	r3, [r4, #0]
 8009d9a:	6123      	str	r3, [r4, #16]
 8009d9c:	2301      	movs	r3, #1
 8009d9e:	6163      	str	r3, [r4, #20]
 8009da0:	b002      	add	sp, #8
 8009da2:	bd70      	pop	{r4, r5, r6, pc}
 8009da4:	ab01      	add	r3, sp, #4
 8009da6:	466a      	mov	r2, sp
 8009da8:	f7ff ffc9 	bl	8009d3e <__swhatbuf_r>
 8009dac:	9900      	ldr	r1, [sp, #0]
 8009dae:	4605      	mov	r5, r0
 8009db0:	4630      	mov	r0, r6
 8009db2:	f000 fd87 	bl	800a8c4 <_malloc_r>
 8009db6:	b948      	cbnz	r0, 8009dcc <__smakebuf_r+0x44>
 8009db8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009dbc:	059a      	lsls	r2, r3, #22
 8009dbe:	d4ef      	bmi.n	8009da0 <__smakebuf_r+0x18>
 8009dc0:	f023 0303 	bic.w	r3, r3, #3
 8009dc4:	f043 0302 	orr.w	r3, r3, #2
 8009dc8:	81a3      	strh	r3, [r4, #12]
 8009dca:	e7e3      	b.n	8009d94 <__smakebuf_r+0xc>
 8009dcc:	4b0d      	ldr	r3, [pc, #52]	; (8009e04 <__smakebuf_r+0x7c>)
 8009dce:	62b3      	str	r3, [r6, #40]	; 0x28
 8009dd0:	89a3      	ldrh	r3, [r4, #12]
 8009dd2:	6020      	str	r0, [r4, #0]
 8009dd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009dd8:	81a3      	strh	r3, [r4, #12]
 8009dda:	9b00      	ldr	r3, [sp, #0]
 8009ddc:	6163      	str	r3, [r4, #20]
 8009dde:	9b01      	ldr	r3, [sp, #4]
 8009de0:	6120      	str	r0, [r4, #16]
 8009de2:	b15b      	cbz	r3, 8009dfc <__smakebuf_r+0x74>
 8009de4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009de8:	4630      	mov	r0, r6
 8009dea:	f001 f975 	bl	800b0d8 <_isatty_r>
 8009dee:	b128      	cbz	r0, 8009dfc <__smakebuf_r+0x74>
 8009df0:	89a3      	ldrh	r3, [r4, #12]
 8009df2:	f023 0303 	bic.w	r3, r3, #3
 8009df6:	f043 0301 	orr.w	r3, r3, #1
 8009dfa:	81a3      	strh	r3, [r4, #12]
 8009dfc:	89a0      	ldrh	r0, [r4, #12]
 8009dfe:	4305      	orrs	r5, r0
 8009e00:	81a5      	strh	r5, [r4, #12]
 8009e02:	e7cd      	b.n	8009da0 <__smakebuf_r+0x18>
 8009e04:	080094b1 	.word	0x080094b1

08009e08 <malloc>:
 8009e08:	4b02      	ldr	r3, [pc, #8]	; (8009e14 <malloc+0xc>)
 8009e0a:	4601      	mov	r1, r0
 8009e0c:	6818      	ldr	r0, [r3, #0]
 8009e0e:	f000 bd59 	b.w	800a8c4 <_malloc_r>
 8009e12:	bf00      	nop
 8009e14:	200001d4 	.word	0x200001d4

08009e18 <__ascii_mbtowc>:
 8009e18:	b082      	sub	sp, #8
 8009e1a:	b901      	cbnz	r1, 8009e1e <__ascii_mbtowc+0x6>
 8009e1c:	a901      	add	r1, sp, #4
 8009e1e:	b142      	cbz	r2, 8009e32 <__ascii_mbtowc+0x1a>
 8009e20:	b14b      	cbz	r3, 8009e36 <__ascii_mbtowc+0x1e>
 8009e22:	7813      	ldrb	r3, [r2, #0]
 8009e24:	600b      	str	r3, [r1, #0]
 8009e26:	7812      	ldrb	r2, [r2, #0]
 8009e28:	1e10      	subs	r0, r2, #0
 8009e2a:	bf18      	it	ne
 8009e2c:	2001      	movne	r0, #1
 8009e2e:	b002      	add	sp, #8
 8009e30:	4770      	bx	lr
 8009e32:	4610      	mov	r0, r2
 8009e34:	e7fb      	b.n	8009e2e <__ascii_mbtowc+0x16>
 8009e36:	f06f 0001 	mvn.w	r0, #1
 8009e3a:	e7f8      	b.n	8009e2e <__ascii_mbtowc+0x16>

08009e3c <_Balloc>:
 8009e3c:	b570      	push	{r4, r5, r6, lr}
 8009e3e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009e40:	4604      	mov	r4, r0
 8009e42:	460d      	mov	r5, r1
 8009e44:	b976      	cbnz	r6, 8009e64 <_Balloc+0x28>
 8009e46:	2010      	movs	r0, #16
 8009e48:	f7ff ffde 	bl	8009e08 <malloc>
 8009e4c:	4602      	mov	r2, r0
 8009e4e:	6260      	str	r0, [r4, #36]	; 0x24
 8009e50:	b920      	cbnz	r0, 8009e5c <_Balloc+0x20>
 8009e52:	4b18      	ldr	r3, [pc, #96]	; (8009eb4 <_Balloc+0x78>)
 8009e54:	4818      	ldr	r0, [pc, #96]	; (8009eb8 <_Balloc+0x7c>)
 8009e56:	2166      	movs	r1, #102	; 0x66
 8009e58:	f001 f8ec 	bl	800b034 <__assert_func>
 8009e5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009e60:	6006      	str	r6, [r0, #0]
 8009e62:	60c6      	str	r6, [r0, #12]
 8009e64:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009e66:	68f3      	ldr	r3, [r6, #12]
 8009e68:	b183      	cbz	r3, 8009e8c <_Balloc+0x50>
 8009e6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009e6c:	68db      	ldr	r3, [r3, #12]
 8009e6e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009e72:	b9b8      	cbnz	r0, 8009ea4 <_Balloc+0x68>
 8009e74:	2101      	movs	r1, #1
 8009e76:	fa01 f605 	lsl.w	r6, r1, r5
 8009e7a:	1d72      	adds	r2, r6, #5
 8009e7c:	0092      	lsls	r2, r2, #2
 8009e7e:	4620      	mov	r0, r4
 8009e80:	f000 fc9d 	bl	800a7be <_calloc_r>
 8009e84:	b160      	cbz	r0, 8009ea0 <_Balloc+0x64>
 8009e86:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009e8a:	e00e      	b.n	8009eaa <_Balloc+0x6e>
 8009e8c:	2221      	movs	r2, #33	; 0x21
 8009e8e:	2104      	movs	r1, #4
 8009e90:	4620      	mov	r0, r4
 8009e92:	f000 fc94 	bl	800a7be <_calloc_r>
 8009e96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009e98:	60f0      	str	r0, [r6, #12]
 8009e9a:	68db      	ldr	r3, [r3, #12]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d1e4      	bne.n	8009e6a <_Balloc+0x2e>
 8009ea0:	2000      	movs	r0, #0
 8009ea2:	bd70      	pop	{r4, r5, r6, pc}
 8009ea4:	6802      	ldr	r2, [r0, #0]
 8009ea6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009eaa:	2300      	movs	r3, #0
 8009eac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009eb0:	e7f7      	b.n	8009ea2 <_Balloc+0x66>
 8009eb2:	bf00      	nop
 8009eb4:	0800b486 	.word	0x0800b486
 8009eb8:	0800b5e8 	.word	0x0800b5e8

08009ebc <_Bfree>:
 8009ebc:	b570      	push	{r4, r5, r6, lr}
 8009ebe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009ec0:	4605      	mov	r5, r0
 8009ec2:	460c      	mov	r4, r1
 8009ec4:	b976      	cbnz	r6, 8009ee4 <_Bfree+0x28>
 8009ec6:	2010      	movs	r0, #16
 8009ec8:	f7ff ff9e 	bl	8009e08 <malloc>
 8009ecc:	4602      	mov	r2, r0
 8009ece:	6268      	str	r0, [r5, #36]	; 0x24
 8009ed0:	b920      	cbnz	r0, 8009edc <_Bfree+0x20>
 8009ed2:	4b09      	ldr	r3, [pc, #36]	; (8009ef8 <_Bfree+0x3c>)
 8009ed4:	4809      	ldr	r0, [pc, #36]	; (8009efc <_Bfree+0x40>)
 8009ed6:	218a      	movs	r1, #138	; 0x8a
 8009ed8:	f001 f8ac 	bl	800b034 <__assert_func>
 8009edc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009ee0:	6006      	str	r6, [r0, #0]
 8009ee2:	60c6      	str	r6, [r0, #12]
 8009ee4:	b13c      	cbz	r4, 8009ef6 <_Bfree+0x3a>
 8009ee6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009ee8:	6862      	ldr	r2, [r4, #4]
 8009eea:	68db      	ldr	r3, [r3, #12]
 8009eec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009ef0:	6021      	str	r1, [r4, #0]
 8009ef2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009ef6:	bd70      	pop	{r4, r5, r6, pc}
 8009ef8:	0800b486 	.word	0x0800b486
 8009efc:	0800b5e8 	.word	0x0800b5e8

08009f00 <__multadd>:
 8009f00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f04:	690d      	ldr	r5, [r1, #16]
 8009f06:	4607      	mov	r7, r0
 8009f08:	460c      	mov	r4, r1
 8009f0a:	461e      	mov	r6, r3
 8009f0c:	f101 0c14 	add.w	ip, r1, #20
 8009f10:	2000      	movs	r0, #0
 8009f12:	f8dc 3000 	ldr.w	r3, [ip]
 8009f16:	b299      	uxth	r1, r3
 8009f18:	fb02 6101 	mla	r1, r2, r1, r6
 8009f1c:	0c1e      	lsrs	r6, r3, #16
 8009f1e:	0c0b      	lsrs	r3, r1, #16
 8009f20:	fb02 3306 	mla	r3, r2, r6, r3
 8009f24:	b289      	uxth	r1, r1
 8009f26:	3001      	adds	r0, #1
 8009f28:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009f2c:	4285      	cmp	r5, r0
 8009f2e:	f84c 1b04 	str.w	r1, [ip], #4
 8009f32:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009f36:	dcec      	bgt.n	8009f12 <__multadd+0x12>
 8009f38:	b30e      	cbz	r6, 8009f7e <__multadd+0x7e>
 8009f3a:	68a3      	ldr	r3, [r4, #8]
 8009f3c:	42ab      	cmp	r3, r5
 8009f3e:	dc19      	bgt.n	8009f74 <__multadd+0x74>
 8009f40:	6861      	ldr	r1, [r4, #4]
 8009f42:	4638      	mov	r0, r7
 8009f44:	3101      	adds	r1, #1
 8009f46:	f7ff ff79 	bl	8009e3c <_Balloc>
 8009f4a:	4680      	mov	r8, r0
 8009f4c:	b928      	cbnz	r0, 8009f5a <__multadd+0x5a>
 8009f4e:	4602      	mov	r2, r0
 8009f50:	4b0c      	ldr	r3, [pc, #48]	; (8009f84 <__multadd+0x84>)
 8009f52:	480d      	ldr	r0, [pc, #52]	; (8009f88 <__multadd+0x88>)
 8009f54:	21b5      	movs	r1, #181	; 0xb5
 8009f56:	f001 f86d 	bl	800b034 <__assert_func>
 8009f5a:	6922      	ldr	r2, [r4, #16]
 8009f5c:	3202      	adds	r2, #2
 8009f5e:	f104 010c 	add.w	r1, r4, #12
 8009f62:	0092      	lsls	r2, r2, #2
 8009f64:	300c      	adds	r0, #12
 8009f66:	f7fc fd07 	bl	8006978 <memcpy>
 8009f6a:	4621      	mov	r1, r4
 8009f6c:	4638      	mov	r0, r7
 8009f6e:	f7ff ffa5 	bl	8009ebc <_Bfree>
 8009f72:	4644      	mov	r4, r8
 8009f74:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009f78:	3501      	adds	r5, #1
 8009f7a:	615e      	str	r6, [r3, #20]
 8009f7c:	6125      	str	r5, [r4, #16]
 8009f7e:	4620      	mov	r0, r4
 8009f80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f84:	0800b4f8 	.word	0x0800b4f8
 8009f88:	0800b5e8 	.word	0x0800b5e8

08009f8c <__s2b>:
 8009f8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f90:	460c      	mov	r4, r1
 8009f92:	4615      	mov	r5, r2
 8009f94:	461f      	mov	r7, r3
 8009f96:	2209      	movs	r2, #9
 8009f98:	3308      	adds	r3, #8
 8009f9a:	4606      	mov	r6, r0
 8009f9c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009fa0:	2100      	movs	r1, #0
 8009fa2:	2201      	movs	r2, #1
 8009fa4:	429a      	cmp	r2, r3
 8009fa6:	db09      	blt.n	8009fbc <__s2b+0x30>
 8009fa8:	4630      	mov	r0, r6
 8009faa:	f7ff ff47 	bl	8009e3c <_Balloc>
 8009fae:	b940      	cbnz	r0, 8009fc2 <__s2b+0x36>
 8009fb0:	4602      	mov	r2, r0
 8009fb2:	4b19      	ldr	r3, [pc, #100]	; (800a018 <__s2b+0x8c>)
 8009fb4:	4819      	ldr	r0, [pc, #100]	; (800a01c <__s2b+0x90>)
 8009fb6:	21ce      	movs	r1, #206	; 0xce
 8009fb8:	f001 f83c 	bl	800b034 <__assert_func>
 8009fbc:	0052      	lsls	r2, r2, #1
 8009fbe:	3101      	adds	r1, #1
 8009fc0:	e7f0      	b.n	8009fa4 <__s2b+0x18>
 8009fc2:	9b08      	ldr	r3, [sp, #32]
 8009fc4:	6143      	str	r3, [r0, #20]
 8009fc6:	2d09      	cmp	r5, #9
 8009fc8:	f04f 0301 	mov.w	r3, #1
 8009fcc:	6103      	str	r3, [r0, #16]
 8009fce:	dd16      	ble.n	8009ffe <__s2b+0x72>
 8009fd0:	f104 0909 	add.w	r9, r4, #9
 8009fd4:	46c8      	mov	r8, r9
 8009fd6:	442c      	add	r4, r5
 8009fd8:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009fdc:	4601      	mov	r1, r0
 8009fde:	3b30      	subs	r3, #48	; 0x30
 8009fe0:	220a      	movs	r2, #10
 8009fe2:	4630      	mov	r0, r6
 8009fe4:	f7ff ff8c 	bl	8009f00 <__multadd>
 8009fe8:	45a0      	cmp	r8, r4
 8009fea:	d1f5      	bne.n	8009fd8 <__s2b+0x4c>
 8009fec:	f1a5 0408 	sub.w	r4, r5, #8
 8009ff0:	444c      	add	r4, r9
 8009ff2:	1b2d      	subs	r5, r5, r4
 8009ff4:	1963      	adds	r3, r4, r5
 8009ff6:	42bb      	cmp	r3, r7
 8009ff8:	db04      	blt.n	800a004 <__s2b+0x78>
 8009ffa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ffe:	340a      	adds	r4, #10
 800a000:	2509      	movs	r5, #9
 800a002:	e7f6      	b.n	8009ff2 <__s2b+0x66>
 800a004:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a008:	4601      	mov	r1, r0
 800a00a:	3b30      	subs	r3, #48	; 0x30
 800a00c:	220a      	movs	r2, #10
 800a00e:	4630      	mov	r0, r6
 800a010:	f7ff ff76 	bl	8009f00 <__multadd>
 800a014:	e7ee      	b.n	8009ff4 <__s2b+0x68>
 800a016:	bf00      	nop
 800a018:	0800b4f8 	.word	0x0800b4f8
 800a01c:	0800b5e8 	.word	0x0800b5e8

0800a020 <__hi0bits>:
 800a020:	0c03      	lsrs	r3, r0, #16
 800a022:	041b      	lsls	r3, r3, #16
 800a024:	b9d3      	cbnz	r3, 800a05c <__hi0bits+0x3c>
 800a026:	0400      	lsls	r0, r0, #16
 800a028:	2310      	movs	r3, #16
 800a02a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a02e:	bf04      	itt	eq
 800a030:	0200      	lsleq	r0, r0, #8
 800a032:	3308      	addeq	r3, #8
 800a034:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a038:	bf04      	itt	eq
 800a03a:	0100      	lsleq	r0, r0, #4
 800a03c:	3304      	addeq	r3, #4
 800a03e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a042:	bf04      	itt	eq
 800a044:	0080      	lsleq	r0, r0, #2
 800a046:	3302      	addeq	r3, #2
 800a048:	2800      	cmp	r0, #0
 800a04a:	db05      	blt.n	800a058 <__hi0bits+0x38>
 800a04c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a050:	f103 0301 	add.w	r3, r3, #1
 800a054:	bf08      	it	eq
 800a056:	2320      	moveq	r3, #32
 800a058:	4618      	mov	r0, r3
 800a05a:	4770      	bx	lr
 800a05c:	2300      	movs	r3, #0
 800a05e:	e7e4      	b.n	800a02a <__hi0bits+0xa>

0800a060 <__lo0bits>:
 800a060:	6803      	ldr	r3, [r0, #0]
 800a062:	f013 0207 	ands.w	r2, r3, #7
 800a066:	4601      	mov	r1, r0
 800a068:	d00b      	beq.n	800a082 <__lo0bits+0x22>
 800a06a:	07da      	lsls	r2, r3, #31
 800a06c:	d423      	bmi.n	800a0b6 <__lo0bits+0x56>
 800a06e:	0798      	lsls	r0, r3, #30
 800a070:	bf49      	itett	mi
 800a072:	085b      	lsrmi	r3, r3, #1
 800a074:	089b      	lsrpl	r3, r3, #2
 800a076:	2001      	movmi	r0, #1
 800a078:	600b      	strmi	r3, [r1, #0]
 800a07a:	bf5c      	itt	pl
 800a07c:	600b      	strpl	r3, [r1, #0]
 800a07e:	2002      	movpl	r0, #2
 800a080:	4770      	bx	lr
 800a082:	b298      	uxth	r0, r3
 800a084:	b9a8      	cbnz	r0, 800a0b2 <__lo0bits+0x52>
 800a086:	0c1b      	lsrs	r3, r3, #16
 800a088:	2010      	movs	r0, #16
 800a08a:	b2da      	uxtb	r2, r3
 800a08c:	b90a      	cbnz	r2, 800a092 <__lo0bits+0x32>
 800a08e:	3008      	adds	r0, #8
 800a090:	0a1b      	lsrs	r3, r3, #8
 800a092:	071a      	lsls	r2, r3, #28
 800a094:	bf04      	itt	eq
 800a096:	091b      	lsreq	r3, r3, #4
 800a098:	3004      	addeq	r0, #4
 800a09a:	079a      	lsls	r2, r3, #30
 800a09c:	bf04      	itt	eq
 800a09e:	089b      	lsreq	r3, r3, #2
 800a0a0:	3002      	addeq	r0, #2
 800a0a2:	07da      	lsls	r2, r3, #31
 800a0a4:	d403      	bmi.n	800a0ae <__lo0bits+0x4e>
 800a0a6:	085b      	lsrs	r3, r3, #1
 800a0a8:	f100 0001 	add.w	r0, r0, #1
 800a0ac:	d005      	beq.n	800a0ba <__lo0bits+0x5a>
 800a0ae:	600b      	str	r3, [r1, #0]
 800a0b0:	4770      	bx	lr
 800a0b2:	4610      	mov	r0, r2
 800a0b4:	e7e9      	b.n	800a08a <__lo0bits+0x2a>
 800a0b6:	2000      	movs	r0, #0
 800a0b8:	4770      	bx	lr
 800a0ba:	2020      	movs	r0, #32
 800a0bc:	4770      	bx	lr
	...

0800a0c0 <__i2b>:
 800a0c0:	b510      	push	{r4, lr}
 800a0c2:	460c      	mov	r4, r1
 800a0c4:	2101      	movs	r1, #1
 800a0c6:	f7ff feb9 	bl	8009e3c <_Balloc>
 800a0ca:	4602      	mov	r2, r0
 800a0cc:	b928      	cbnz	r0, 800a0da <__i2b+0x1a>
 800a0ce:	4b05      	ldr	r3, [pc, #20]	; (800a0e4 <__i2b+0x24>)
 800a0d0:	4805      	ldr	r0, [pc, #20]	; (800a0e8 <__i2b+0x28>)
 800a0d2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a0d6:	f000 ffad 	bl	800b034 <__assert_func>
 800a0da:	2301      	movs	r3, #1
 800a0dc:	6144      	str	r4, [r0, #20]
 800a0de:	6103      	str	r3, [r0, #16]
 800a0e0:	bd10      	pop	{r4, pc}
 800a0e2:	bf00      	nop
 800a0e4:	0800b4f8 	.word	0x0800b4f8
 800a0e8:	0800b5e8 	.word	0x0800b5e8

0800a0ec <__multiply>:
 800a0ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0f0:	4691      	mov	r9, r2
 800a0f2:	690a      	ldr	r2, [r1, #16]
 800a0f4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a0f8:	429a      	cmp	r2, r3
 800a0fa:	bfb8      	it	lt
 800a0fc:	460b      	movlt	r3, r1
 800a0fe:	460c      	mov	r4, r1
 800a100:	bfbc      	itt	lt
 800a102:	464c      	movlt	r4, r9
 800a104:	4699      	movlt	r9, r3
 800a106:	6927      	ldr	r7, [r4, #16]
 800a108:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a10c:	68a3      	ldr	r3, [r4, #8]
 800a10e:	6861      	ldr	r1, [r4, #4]
 800a110:	eb07 060a 	add.w	r6, r7, sl
 800a114:	42b3      	cmp	r3, r6
 800a116:	b085      	sub	sp, #20
 800a118:	bfb8      	it	lt
 800a11a:	3101      	addlt	r1, #1
 800a11c:	f7ff fe8e 	bl	8009e3c <_Balloc>
 800a120:	b930      	cbnz	r0, 800a130 <__multiply+0x44>
 800a122:	4602      	mov	r2, r0
 800a124:	4b44      	ldr	r3, [pc, #272]	; (800a238 <__multiply+0x14c>)
 800a126:	4845      	ldr	r0, [pc, #276]	; (800a23c <__multiply+0x150>)
 800a128:	f240 115d 	movw	r1, #349	; 0x15d
 800a12c:	f000 ff82 	bl	800b034 <__assert_func>
 800a130:	f100 0514 	add.w	r5, r0, #20
 800a134:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a138:	462b      	mov	r3, r5
 800a13a:	2200      	movs	r2, #0
 800a13c:	4543      	cmp	r3, r8
 800a13e:	d321      	bcc.n	800a184 <__multiply+0x98>
 800a140:	f104 0314 	add.w	r3, r4, #20
 800a144:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a148:	f109 0314 	add.w	r3, r9, #20
 800a14c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a150:	9202      	str	r2, [sp, #8]
 800a152:	1b3a      	subs	r2, r7, r4
 800a154:	3a15      	subs	r2, #21
 800a156:	f022 0203 	bic.w	r2, r2, #3
 800a15a:	3204      	adds	r2, #4
 800a15c:	f104 0115 	add.w	r1, r4, #21
 800a160:	428f      	cmp	r7, r1
 800a162:	bf38      	it	cc
 800a164:	2204      	movcc	r2, #4
 800a166:	9201      	str	r2, [sp, #4]
 800a168:	9a02      	ldr	r2, [sp, #8]
 800a16a:	9303      	str	r3, [sp, #12]
 800a16c:	429a      	cmp	r2, r3
 800a16e:	d80c      	bhi.n	800a18a <__multiply+0x9e>
 800a170:	2e00      	cmp	r6, #0
 800a172:	dd03      	ble.n	800a17c <__multiply+0x90>
 800a174:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d05a      	beq.n	800a232 <__multiply+0x146>
 800a17c:	6106      	str	r6, [r0, #16]
 800a17e:	b005      	add	sp, #20
 800a180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a184:	f843 2b04 	str.w	r2, [r3], #4
 800a188:	e7d8      	b.n	800a13c <__multiply+0x50>
 800a18a:	f8b3 a000 	ldrh.w	sl, [r3]
 800a18e:	f1ba 0f00 	cmp.w	sl, #0
 800a192:	d024      	beq.n	800a1de <__multiply+0xf2>
 800a194:	f104 0e14 	add.w	lr, r4, #20
 800a198:	46a9      	mov	r9, r5
 800a19a:	f04f 0c00 	mov.w	ip, #0
 800a19e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a1a2:	f8d9 1000 	ldr.w	r1, [r9]
 800a1a6:	fa1f fb82 	uxth.w	fp, r2
 800a1aa:	b289      	uxth	r1, r1
 800a1ac:	fb0a 110b 	mla	r1, sl, fp, r1
 800a1b0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a1b4:	f8d9 2000 	ldr.w	r2, [r9]
 800a1b8:	4461      	add	r1, ip
 800a1ba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a1be:	fb0a c20b 	mla	r2, sl, fp, ip
 800a1c2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a1c6:	b289      	uxth	r1, r1
 800a1c8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a1cc:	4577      	cmp	r7, lr
 800a1ce:	f849 1b04 	str.w	r1, [r9], #4
 800a1d2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a1d6:	d8e2      	bhi.n	800a19e <__multiply+0xb2>
 800a1d8:	9a01      	ldr	r2, [sp, #4]
 800a1da:	f845 c002 	str.w	ip, [r5, r2]
 800a1de:	9a03      	ldr	r2, [sp, #12]
 800a1e0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a1e4:	3304      	adds	r3, #4
 800a1e6:	f1b9 0f00 	cmp.w	r9, #0
 800a1ea:	d020      	beq.n	800a22e <__multiply+0x142>
 800a1ec:	6829      	ldr	r1, [r5, #0]
 800a1ee:	f104 0c14 	add.w	ip, r4, #20
 800a1f2:	46ae      	mov	lr, r5
 800a1f4:	f04f 0a00 	mov.w	sl, #0
 800a1f8:	f8bc b000 	ldrh.w	fp, [ip]
 800a1fc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a200:	fb09 220b 	mla	r2, r9, fp, r2
 800a204:	4492      	add	sl, r2
 800a206:	b289      	uxth	r1, r1
 800a208:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a20c:	f84e 1b04 	str.w	r1, [lr], #4
 800a210:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a214:	f8be 1000 	ldrh.w	r1, [lr]
 800a218:	0c12      	lsrs	r2, r2, #16
 800a21a:	fb09 1102 	mla	r1, r9, r2, r1
 800a21e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a222:	4567      	cmp	r7, ip
 800a224:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a228:	d8e6      	bhi.n	800a1f8 <__multiply+0x10c>
 800a22a:	9a01      	ldr	r2, [sp, #4]
 800a22c:	50a9      	str	r1, [r5, r2]
 800a22e:	3504      	adds	r5, #4
 800a230:	e79a      	b.n	800a168 <__multiply+0x7c>
 800a232:	3e01      	subs	r6, #1
 800a234:	e79c      	b.n	800a170 <__multiply+0x84>
 800a236:	bf00      	nop
 800a238:	0800b4f8 	.word	0x0800b4f8
 800a23c:	0800b5e8 	.word	0x0800b5e8

0800a240 <__pow5mult>:
 800a240:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a244:	4615      	mov	r5, r2
 800a246:	f012 0203 	ands.w	r2, r2, #3
 800a24a:	4606      	mov	r6, r0
 800a24c:	460f      	mov	r7, r1
 800a24e:	d007      	beq.n	800a260 <__pow5mult+0x20>
 800a250:	4c25      	ldr	r4, [pc, #148]	; (800a2e8 <__pow5mult+0xa8>)
 800a252:	3a01      	subs	r2, #1
 800a254:	2300      	movs	r3, #0
 800a256:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a25a:	f7ff fe51 	bl	8009f00 <__multadd>
 800a25e:	4607      	mov	r7, r0
 800a260:	10ad      	asrs	r5, r5, #2
 800a262:	d03d      	beq.n	800a2e0 <__pow5mult+0xa0>
 800a264:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a266:	b97c      	cbnz	r4, 800a288 <__pow5mult+0x48>
 800a268:	2010      	movs	r0, #16
 800a26a:	f7ff fdcd 	bl	8009e08 <malloc>
 800a26e:	4602      	mov	r2, r0
 800a270:	6270      	str	r0, [r6, #36]	; 0x24
 800a272:	b928      	cbnz	r0, 800a280 <__pow5mult+0x40>
 800a274:	4b1d      	ldr	r3, [pc, #116]	; (800a2ec <__pow5mult+0xac>)
 800a276:	481e      	ldr	r0, [pc, #120]	; (800a2f0 <__pow5mult+0xb0>)
 800a278:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a27c:	f000 feda 	bl	800b034 <__assert_func>
 800a280:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a284:	6004      	str	r4, [r0, #0]
 800a286:	60c4      	str	r4, [r0, #12]
 800a288:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a28c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a290:	b94c      	cbnz	r4, 800a2a6 <__pow5mult+0x66>
 800a292:	f240 2171 	movw	r1, #625	; 0x271
 800a296:	4630      	mov	r0, r6
 800a298:	f7ff ff12 	bl	800a0c0 <__i2b>
 800a29c:	2300      	movs	r3, #0
 800a29e:	f8c8 0008 	str.w	r0, [r8, #8]
 800a2a2:	4604      	mov	r4, r0
 800a2a4:	6003      	str	r3, [r0, #0]
 800a2a6:	f04f 0900 	mov.w	r9, #0
 800a2aa:	07eb      	lsls	r3, r5, #31
 800a2ac:	d50a      	bpl.n	800a2c4 <__pow5mult+0x84>
 800a2ae:	4639      	mov	r1, r7
 800a2b0:	4622      	mov	r2, r4
 800a2b2:	4630      	mov	r0, r6
 800a2b4:	f7ff ff1a 	bl	800a0ec <__multiply>
 800a2b8:	4639      	mov	r1, r7
 800a2ba:	4680      	mov	r8, r0
 800a2bc:	4630      	mov	r0, r6
 800a2be:	f7ff fdfd 	bl	8009ebc <_Bfree>
 800a2c2:	4647      	mov	r7, r8
 800a2c4:	106d      	asrs	r5, r5, #1
 800a2c6:	d00b      	beq.n	800a2e0 <__pow5mult+0xa0>
 800a2c8:	6820      	ldr	r0, [r4, #0]
 800a2ca:	b938      	cbnz	r0, 800a2dc <__pow5mult+0x9c>
 800a2cc:	4622      	mov	r2, r4
 800a2ce:	4621      	mov	r1, r4
 800a2d0:	4630      	mov	r0, r6
 800a2d2:	f7ff ff0b 	bl	800a0ec <__multiply>
 800a2d6:	6020      	str	r0, [r4, #0]
 800a2d8:	f8c0 9000 	str.w	r9, [r0]
 800a2dc:	4604      	mov	r4, r0
 800a2de:	e7e4      	b.n	800a2aa <__pow5mult+0x6a>
 800a2e0:	4638      	mov	r0, r7
 800a2e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a2e6:	bf00      	nop
 800a2e8:	0800b738 	.word	0x0800b738
 800a2ec:	0800b486 	.word	0x0800b486
 800a2f0:	0800b5e8 	.word	0x0800b5e8

0800a2f4 <__lshift>:
 800a2f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2f8:	460c      	mov	r4, r1
 800a2fa:	6849      	ldr	r1, [r1, #4]
 800a2fc:	6923      	ldr	r3, [r4, #16]
 800a2fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a302:	68a3      	ldr	r3, [r4, #8]
 800a304:	4607      	mov	r7, r0
 800a306:	4691      	mov	r9, r2
 800a308:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a30c:	f108 0601 	add.w	r6, r8, #1
 800a310:	42b3      	cmp	r3, r6
 800a312:	db0b      	blt.n	800a32c <__lshift+0x38>
 800a314:	4638      	mov	r0, r7
 800a316:	f7ff fd91 	bl	8009e3c <_Balloc>
 800a31a:	4605      	mov	r5, r0
 800a31c:	b948      	cbnz	r0, 800a332 <__lshift+0x3e>
 800a31e:	4602      	mov	r2, r0
 800a320:	4b2a      	ldr	r3, [pc, #168]	; (800a3cc <__lshift+0xd8>)
 800a322:	482b      	ldr	r0, [pc, #172]	; (800a3d0 <__lshift+0xdc>)
 800a324:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a328:	f000 fe84 	bl	800b034 <__assert_func>
 800a32c:	3101      	adds	r1, #1
 800a32e:	005b      	lsls	r3, r3, #1
 800a330:	e7ee      	b.n	800a310 <__lshift+0x1c>
 800a332:	2300      	movs	r3, #0
 800a334:	f100 0114 	add.w	r1, r0, #20
 800a338:	f100 0210 	add.w	r2, r0, #16
 800a33c:	4618      	mov	r0, r3
 800a33e:	4553      	cmp	r3, sl
 800a340:	db37      	blt.n	800a3b2 <__lshift+0xbe>
 800a342:	6920      	ldr	r0, [r4, #16]
 800a344:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a348:	f104 0314 	add.w	r3, r4, #20
 800a34c:	f019 091f 	ands.w	r9, r9, #31
 800a350:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a354:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a358:	d02f      	beq.n	800a3ba <__lshift+0xc6>
 800a35a:	f1c9 0e20 	rsb	lr, r9, #32
 800a35e:	468a      	mov	sl, r1
 800a360:	f04f 0c00 	mov.w	ip, #0
 800a364:	681a      	ldr	r2, [r3, #0]
 800a366:	fa02 f209 	lsl.w	r2, r2, r9
 800a36a:	ea42 020c 	orr.w	r2, r2, ip
 800a36e:	f84a 2b04 	str.w	r2, [sl], #4
 800a372:	f853 2b04 	ldr.w	r2, [r3], #4
 800a376:	4298      	cmp	r0, r3
 800a378:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a37c:	d8f2      	bhi.n	800a364 <__lshift+0x70>
 800a37e:	1b03      	subs	r3, r0, r4
 800a380:	3b15      	subs	r3, #21
 800a382:	f023 0303 	bic.w	r3, r3, #3
 800a386:	3304      	adds	r3, #4
 800a388:	f104 0215 	add.w	r2, r4, #21
 800a38c:	4290      	cmp	r0, r2
 800a38e:	bf38      	it	cc
 800a390:	2304      	movcc	r3, #4
 800a392:	f841 c003 	str.w	ip, [r1, r3]
 800a396:	f1bc 0f00 	cmp.w	ip, #0
 800a39a:	d001      	beq.n	800a3a0 <__lshift+0xac>
 800a39c:	f108 0602 	add.w	r6, r8, #2
 800a3a0:	3e01      	subs	r6, #1
 800a3a2:	4638      	mov	r0, r7
 800a3a4:	612e      	str	r6, [r5, #16]
 800a3a6:	4621      	mov	r1, r4
 800a3a8:	f7ff fd88 	bl	8009ebc <_Bfree>
 800a3ac:	4628      	mov	r0, r5
 800a3ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3b2:	f842 0f04 	str.w	r0, [r2, #4]!
 800a3b6:	3301      	adds	r3, #1
 800a3b8:	e7c1      	b.n	800a33e <__lshift+0x4a>
 800a3ba:	3904      	subs	r1, #4
 800a3bc:	f853 2b04 	ldr.w	r2, [r3], #4
 800a3c0:	f841 2f04 	str.w	r2, [r1, #4]!
 800a3c4:	4298      	cmp	r0, r3
 800a3c6:	d8f9      	bhi.n	800a3bc <__lshift+0xc8>
 800a3c8:	e7ea      	b.n	800a3a0 <__lshift+0xac>
 800a3ca:	bf00      	nop
 800a3cc:	0800b4f8 	.word	0x0800b4f8
 800a3d0:	0800b5e8 	.word	0x0800b5e8

0800a3d4 <__mcmp>:
 800a3d4:	b530      	push	{r4, r5, lr}
 800a3d6:	6902      	ldr	r2, [r0, #16]
 800a3d8:	690c      	ldr	r4, [r1, #16]
 800a3da:	1b12      	subs	r2, r2, r4
 800a3dc:	d10e      	bne.n	800a3fc <__mcmp+0x28>
 800a3de:	f100 0314 	add.w	r3, r0, #20
 800a3e2:	3114      	adds	r1, #20
 800a3e4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a3e8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a3ec:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a3f0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a3f4:	42a5      	cmp	r5, r4
 800a3f6:	d003      	beq.n	800a400 <__mcmp+0x2c>
 800a3f8:	d305      	bcc.n	800a406 <__mcmp+0x32>
 800a3fa:	2201      	movs	r2, #1
 800a3fc:	4610      	mov	r0, r2
 800a3fe:	bd30      	pop	{r4, r5, pc}
 800a400:	4283      	cmp	r3, r0
 800a402:	d3f3      	bcc.n	800a3ec <__mcmp+0x18>
 800a404:	e7fa      	b.n	800a3fc <__mcmp+0x28>
 800a406:	f04f 32ff 	mov.w	r2, #4294967295
 800a40a:	e7f7      	b.n	800a3fc <__mcmp+0x28>

0800a40c <__mdiff>:
 800a40c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a410:	460c      	mov	r4, r1
 800a412:	4606      	mov	r6, r0
 800a414:	4611      	mov	r1, r2
 800a416:	4620      	mov	r0, r4
 800a418:	4690      	mov	r8, r2
 800a41a:	f7ff ffdb 	bl	800a3d4 <__mcmp>
 800a41e:	1e05      	subs	r5, r0, #0
 800a420:	d110      	bne.n	800a444 <__mdiff+0x38>
 800a422:	4629      	mov	r1, r5
 800a424:	4630      	mov	r0, r6
 800a426:	f7ff fd09 	bl	8009e3c <_Balloc>
 800a42a:	b930      	cbnz	r0, 800a43a <__mdiff+0x2e>
 800a42c:	4b3a      	ldr	r3, [pc, #232]	; (800a518 <__mdiff+0x10c>)
 800a42e:	4602      	mov	r2, r0
 800a430:	f240 2132 	movw	r1, #562	; 0x232
 800a434:	4839      	ldr	r0, [pc, #228]	; (800a51c <__mdiff+0x110>)
 800a436:	f000 fdfd 	bl	800b034 <__assert_func>
 800a43a:	2301      	movs	r3, #1
 800a43c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a440:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a444:	bfa4      	itt	ge
 800a446:	4643      	movge	r3, r8
 800a448:	46a0      	movge	r8, r4
 800a44a:	4630      	mov	r0, r6
 800a44c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a450:	bfa6      	itte	ge
 800a452:	461c      	movge	r4, r3
 800a454:	2500      	movge	r5, #0
 800a456:	2501      	movlt	r5, #1
 800a458:	f7ff fcf0 	bl	8009e3c <_Balloc>
 800a45c:	b920      	cbnz	r0, 800a468 <__mdiff+0x5c>
 800a45e:	4b2e      	ldr	r3, [pc, #184]	; (800a518 <__mdiff+0x10c>)
 800a460:	4602      	mov	r2, r0
 800a462:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a466:	e7e5      	b.n	800a434 <__mdiff+0x28>
 800a468:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a46c:	6926      	ldr	r6, [r4, #16]
 800a46e:	60c5      	str	r5, [r0, #12]
 800a470:	f104 0914 	add.w	r9, r4, #20
 800a474:	f108 0514 	add.w	r5, r8, #20
 800a478:	f100 0e14 	add.w	lr, r0, #20
 800a47c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a480:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a484:	f108 0210 	add.w	r2, r8, #16
 800a488:	46f2      	mov	sl, lr
 800a48a:	2100      	movs	r1, #0
 800a48c:	f859 3b04 	ldr.w	r3, [r9], #4
 800a490:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a494:	fa1f f883 	uxth.w	r8, r3
 800a498:	fa11 f18b 	uxtah	r1, r1, fp
 800a49c:	0c1b      	lsrs	r3, r3, #16
 800a49e:	eba1 0808 	sub.w	r8, r1, r8
 800a4a2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a4a6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a4aa:	fa1f f888 	uxth.w	r8, r8
 800a4ae:	1419      	asrs	r1, r3, #16
 800a4b0:	454e      	cmp	r6, r9
 800a4b2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a4b6:	f84a 3b04 	str.w	r3, [sl], #4
 800a4ba:	d8e7      	bhi.n	800a48c <__mdiff+0x80>
 800a4bc:	1b33      	subs	r3, r6, r4
 800a4be:	3b15      	subs	r3, #21
 800a4c0:	f023 0303 	bic.w	r3, r3, #3
 800a4c4:	3304      	adds	r3, #4
 800a4c6:	3415      	adds	r4, #21
 800a4c8:	42a6      	cmp	r6, r4
 800a4ca:	bf38      	it	cc
 800a4cc:	2304      	movcc	r3, #4
 800a4ce:	441d      	add	r5, r3
 800a4d0:	4473      	add	r3, lr
 800a4d2:	469e      	mov	lr, r3
 800a4d4:	462e      	mov	r6, r5
 800a4d6:	4566      	cmp	r6, ip
 800a4d8:	d30e      	bcc.n	800a4f8 <__mdiff+0xec>
 800a4da:	f10c 0203 	add.w	r2, ip, #3
 800a4de:	1b52      	subs	r2, r2, r5
 800a4e0:	f022 0203 	bic.w	r2, r2, #3
 800a4e4:	3d03      	subs	r5, #3
 800a4e6:	45ac      	cmp	ip, r5
 800a4e8:	bf38      	it	cc
 800a4ea:	2200      	movcc	r2, #0
 800a4ec:	441a      	add	r2, r3
 800a4ee:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a4f2:	b17b      	cbz	r3, 800a514 <__mdiff+0x108>
 800a4f4:	6107      	str	r7, [r0, #16]
 800a4f6:	e7a3      	b.n	800a440 <__mdiff+0x34>
 800a4f8:	f856 8b04 	ldr.w	r8, [r6], #4
 800a4fc:	fa11 f288 	uxtah	r2, r1, r8
 800a500:	1414      	asrs	r4, r2, #16
 800a502:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a506:	b292      	uxth	r2, r2
 800a508:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a50c:	f84e 2b04 	str.w	r2, [lr], #4
 800a510:	1421      	asrs	r1, r4, #16
 800a512:	e7e0      	b.n	800a4d6 <__mdiff+0xca>
 800a514:	3f01      	subs	r7, #1
 800a516:	e7ea      	b.n	800a4ee <__mdiff+0xe2>
 800a518:	0800b4f8 	.word	0x0800b4f8
 800a51c:	0800b5e8 	.word	0x0800b5e8

0800a520 <__ulp>:
 800a520:	b082      	sub	sp, #8
 800a522:	ed8d 0b00 	vstr	d0, [sp]
 800a526:	9b01      	ldr	r3, [sp, #4]
 800a528:	4912      	ldr	r1, [pc, #72]	; (800a574 <__ulp+0x54>)
 800a52a:	4019      	ands	r1, r3
 800a52c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800a530:	2900      	cmp	r1, #0
 800a532:	dd05      	ble.n	800a540 <__ulp+0x20>
 800a534:	2200      	movs	r2, #0
 800a536:	460b      	mov	r3, r1
 800a538:	ec43 2b10 	vmov	d0, r2, r3
 800a53c:	b002      	add	sp, #8
 800a53e:	4770      	bx	lr
 800a540:	4249      	negs	r1, r1
 800a542:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800a546:	ea4f 5021 	mov.w	r0, r1, asr #20
 800a54a:	f04f 0200 	mov.w	r2, #0
 800a54e:	f04f 0300 	mov.w	r3, #0
 800a552:	da04      	bge.n	800a55e <__ulp+0x3e>
 800a554:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800a558:	fa41 f300 	asr.w	r3, r1, r0
 800a55c:	e7ec      	b.n	800a538 <__ulp+0x18>
 800a55e:	f1a0 0114 	sub.w	r1, r0, #20
 800a562:	291e      	cmp	r1, #30
 800a564:	bfda      	itte	le
 800a566:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800a56a:	fa20 f101 	lsrle.w	r1, r0, r1
 800a56e:	2101      	movgt	r1, #1
 800a570:	460a      	mov	r2, r1
 800a572:	e7e1      	b.n	800a538 <__ulp+0x18>
 800a574:	7ff00000 	.word	0x7ff00000

0800a578 <__b2d>:
 800a578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a57a:	6905      	ldr	r5, [r0, #16]
 800a57c:	f100 0714 	add.w	r7, r0, #20
 800a580:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800a584:	1f2e      	subs	r6, r5, #4
 800a586:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800a58a:	4620      	mov	r0, r4
 800a58c:	f7ff fd48 	bl	800a020 <__hi0bits>
 800a590:	f1c0 0320 	rsb	r3, r0, #32
 800a594:	280a      	cmp	r0, #10
 800a596:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800a614 <__b2d+0x9c>
 800a59a:	600b      	str	r3, [r1, #0]
 800a59c:	dc14      	bgt.n	800a5c8 <__b2d+0x50>
 800a59e:	f1c0 0e0b 	rsb	lr, r0, #11
 800a5a2:	fa24 f10e 	lsr.w	r1, r4, lr
 800a5a6:	42b7      	cmp	r7, r6
 800a5a8:	ea41 030c 	orr.w	r3, r1, ip
 800a5ac:	bf34      	ite	cc
 800a5ae:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a5b2:	2100      	movcs	r1, #0
 800a5b4:	3015      	adds	r0, #21
 800a5b6:	fa04 f000 	lsl.w	r0, r4, r0
 800a5ba:	fa21 f10e 	lsr.w	r1, r1, lr
 800a5be:	ea40 0201 	orr.w	r2, r0, r1
 800a5c2:	ec43 2b10 	vmov	d0, r2, r3
 800a5c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a5c8:	42b7      	cmp	r7, r6
 800a5ca:	bf3a      	itte	cc
 800a5cc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a5d0:	f1a5 0608 	subcc.w	r6, r5, #8
 800a5d4:	2100      	movcs	r1, #0
 800a5d6:	380b      	subs	r0, #11
 800a5d8:	d017      	beq.n	800a60a <__b2d+0x92>
 800a5da:	f1c0 0c20 	rsb	ip, r0, #32
 800a5de:	fa04 f500 	lsl.w	r5, r4, r0
 800a5e2:	42be      	cmp	r6, r7
 800a5e4:	fa21 f40c 	lsr.w	r4, r1, ip
 800a5e8:	ea45 0504 	orr.w	r5, r5, r4
 800a5ec:	bf8c      	ite	hi
 800a5ee:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800a5f2:	2400      	movls	r4, #0
 800a5f4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800a5f8:	fa01 f000 	lsl.w	r0, r1, r0
 800a5fc:	fa24 f40c 	lsr.w	r4, r4, ip
 800a600:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a604:	ea40 0204 	orr.w	r2, r0, r4
 800a608:	e7db      	b.n	800a5c2 <__b2d+0x4a>
 800a60a:	ea44 030c 	orr.w	r3, r4, ip
 800a60e:	460a      	mov	r2, r1
 800a610:	e7d7      	b.n	800a5c2 <__b2d+0x4a>
 800a612:	bf00      	nop
 800a614:	3ff00000 	.word	0x3ff00000

0800a618 <__d2b>:
 800a618:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a61c:	4689      	mov	r9, r1
 800a61e:	2101      	movs	r1, #1
 800a620:	ec57 6b10 	vmov	r6, r7, d0
 800a624:	4690      	mov	r8, r2
 800a626:	f7ff fc09 	bl	8009e3c <_Balloc>
 800a62a:	4604      	mov	r4, r0
 800a62c:	b930      	cbnz	r0, 800a63c <__d2b+0x24>
 800a62e:	4602      	mov	r2, r0
 800a630:	4b25      	ldr	r3, [pc, #148]	; (800a6c8 <__d2b+0xb0>)
 800a632:	4826      	ldr	r0, [pc, #152]	; (800a6cc <__d2b+0xb4>)
 800a634:	f240 310a 	movw	r1, #778	; 0x30a
 800a638:	f000 fcfc 	bl	800b034 <__assert_func>
 800a63c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a640:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a644:	bb35      	cbnz	r5, 800a694 <__d2b+0x7c>
 800a646:	2e00      	cmp	r6, #0
 800a648:	9301      	str	r3, [sp, #4]
 800a64a:	d028      	beq.n	800a69e <__d2b+0x86>
 800a64c:	4668      	mov	r0, sp
 800a64e:	9600      	str	r6, [sp, #0]
 800a650:	f7ff fd06 	bl	800a060 <__lo0bits>
 800a654:	9900      	ldr	r1, [sp, #0]
 800a656:	b300      	cbz	r0, 800a69a <__d2b+0x82>
 800a658:	9a01      	ldr	r2, [sp, #4]
 800a65a:	f1c0 0320 	rsb	r3, r0, #32
 800a65e:	fa02 f303 	lsl.w	r3, r2, r3
 800a662:	430b      	orrs	r3, r1
 800a664:	40c2      	lsrs	r2, r0
 800a666:	6163      	str	r3, [r4, #20]
 800a668:	9201      	str	r2, [sp, #4]
 800a66a:	9b01      	ldr	r3, [sp, #4]
 800a66c:	61a3      	str	r3, [r4, #24]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	bf14      	ite	ne
 800a672:	2202      	movne	r2, #2
 800a674:	2201      	moveq	r2, #1
 800a676:	6122      	str	r2, [r4, #16]
 800a678:	b1d5      	cbz	r5, 800a6b0 <__d2b+0x98>
 800a67a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a67e:	4405      	add	r5, r0
 800a680:	f8c9 5000 	str.w	r5, [r9]
 800a684:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a688:	f8c8 0000 	str.w	r0, [r8]
 800a68c:	4620      	mov	r0, r4
 800a68e:	b003      	add	sp, #12
 800a690:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a698:	e7d5      	b.n	800a646 <__d2b+0x2e>
 800a69a:	6161      	str	r1, [r4, #20]
 800a69c:	e7e5      	b.n	800a66a <__d2b+0x52>
 800a69e:	a801      	add	r0, sp, #4
 800a6a0:	f7ff fcde 	bl	800a060 <__lo0bits>
 800a6a4:	9b01      	ldr	r3, [sp, #4]
 800a6a6:	6163      	str	r3, [r4, #20]
 800a6a8:	2201      	movs	r2, #1
 800a6aa:	6122      	str	r2, [r4, #16]
 800a6ac:	3020      	adds	r0, #32
 800a6ae:	e7e3      	b.n	800a678 <__d2b+0x60>
 800a6b0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a6b4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a6b8:	f8c9 0000 	str.w	r0, [r9]
 800a6bc:	6918      	ldr	r0, [r3, #16]
 800a6be:	f7ff fcaf 	bl	800a020 <__hi0bits>
 800a6c2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a6c6:	e7df      	b.n	800a688 <__d2b+0x70>
 800a6c8:	0800b4f8 	.word	0x0800b4f8
 800a6cc:	0800b5e8 	.word	0x0800b5e8

0800a6d0 <__ratio>:
 800a6d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6d4:	4688      	mov	r8, r1
 800a6d6:	4669      	mov	r1, sp
 800a6d8:	4681      	mov	r9, r0
 800a6da:	f7ff ff4d 	bl	800a578 <__b2d>
 800a6de:	a901      	add	r1, sp, #4
 800a6e0:	4640      	mov	r0, r8
 800a6e2:	ec55 4b10 	vmov	r4, r5, d0
 800a6e6:	f7ff ff47 	bl	800a578 <__b2d>
 800a6ea:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a6ee:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a6f2:	eba3 0c02 	sub.w	ip, r3, r2
 800a6f6:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a6fa:	1a9b      	subs	r3, r3, r2
 800a6fc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a700:	ec51 0b10 	vmov	r0, r1, d0
 800a704:	2b00      	cmp	r3, #0
 800a706:	bfd6      	itet	le
 800a708:	460a      	movle	r2, r1
 800a70a:	462a      	movgt	r2, r5
 800a70c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a710:	468b      	mov	fp, r1
 800a712:	462f      	mov	r7, r5
 800a714:	bfd4      	ite	le
 800a716:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a71a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a71e:	4620      	mov	r0, r4
 800a720:	ee10 2a10 	vmov	r2, s0
 800a724:	465b      	mov	r3, fp
 800a726:	4639      	mov	r1, r7
 800a728:	f7f6 f8a0 	bl	800086c <__aeabi_ddiv>
 800a72c:	ec41 0b10 	vmov	d0, r0, r1
 800a730:	b003      	add	sp, #12
 800a732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a736 <__copybits>:
 800a736:	3901      	subs	r1, #1
 800a738:	b570      	push	{r4, r5, r6, lr}
 800a73a:	1149      	asrs	r1, r1, #5
 800a73c:	6914      	ldr	r4, [r2, #16]
 800a73e:	3101      	adds	r1, #1
 800a740:	f102 0314 	add.w	r3, r2, #20
 800a744:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a748:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a74c:	1f05      	subs	r5, r0, #4
 800a74e:	42a3      	cmp	r3, r4
 800a750:	d30c      	bcc.n	800a76c <__copybits+0x36>
 800a752:	1aa3      	subs	r3, r4, r2
 800a754:	3b11      	subs	r3, #17
 800a756:	f023 0303 	bic.w	r3, r3, #3
 800a75a:	3211      	adds	r2, #17
 800a75c:	42a2      	cmp	r2, r4
 800a75e:	bf88      	it	hi
 800a760:	2300      	movhi	r3, #0
 800a762:	4418      	add	r0, r3
 800a764:	2300      	movs	r3, #0
 800a766:	4288      	cmp	r0, r1
 800a768:	d305      	bcc.n	800a776 <__copybits+0x40>
 800a76a:	bd70      	pop	{r4, r5, r6, pc}
 800a76c:	f853 6b04 	ldr.w	r6, [r3], #4
 800a770:	f845 6f04 	str.w	r6, [r5, #4]!
 800a774:	e7eb      	b.n	800a74e <__copybits+0x18>
 800a776:	f840 3b04 	str.w	r3, [r0], #4
 800a77a:	e7f4      	b.n	800a766 <__copybits+0x30>

0800a77c <__any_on>:
 800a77c:	f100 0214 	add.w	r2, r0, #20
 800a780:	6900      	ldr	r0, [r0, #16]
 800a782:	114b      	asrs	r3, r1, #5
 800a784:	4298      	cmp	r0, r3
 800a786:	b510      	push	{r4, lr}
 800a788:	db11      	blt.n	800a7ae <__any_on+0x32>
 800a78a:	dd0a      	ble.n	800a7a2 <__any_on+0x26>
 800a78c:	f011 011f 	ands.w	r1, r1, #31
 800a790:	d007      	beq.n	800a7a2 <__any_on+0x26>
 800a792:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a796:	fa24 f001 	lsr.w	r0, r4, r1
 800a79a:	fa00 f101 	lsl.w	r1, r0, r1
 800a79e:	428c      	cmp	r4, r1
 800a7a0:	d10b      	bne.n	800a7ba <__any_on+0x3e>
 800a7a2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a7a6:	4293      	cmp	r3, r2
 800a7a8:	d803      	bhi.n	800a7b2 <__any_on+0x36>
 800a7aa:	2000      	movs	r0, #0
 800a7ac:	bd10      	pop	{r4, pc}
 800a7ae:	4603      	mov	r3, r0
 800a7b0:	e7f7      	b.n	800a7a2 <__any_on+0x26>
 800a7b2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a7b6:	2900      	cmp	r1, #0
 800a7b8:	d0f5      	beq.n	800a7a6 <__any_on+0x2a>
 800a7ba:	2001      	movs	r0, #1
 800a7bc:	e7f6      	b.n	800a7ac <__any_on+0x30>

0800a7be <_calloc_r>:
 800a7be:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a7c0:	fba1 2402 	umull	r2, r4, r1, r2
 800a7c4:	b94c      	cbnz	r4, 800a7da <_calloc_r+0x1c>
 800a7c6:	4611      	mov	r1, r2
 800a7c8:	9201      	str	r2, [sp, #4]
 800a7ca:	f000 f87b 	bl	800a8c4 <_malloc_r>
 800a7ce:	9a01      	ldr	r2, [sp, #4]
 800a7d0:	4605      	mov	r5, r0
 800a7d2:	b930      	cbnz	r0, 800a7e2 <_calloc_r+0x24>
 800a7d4:	4628      	mov	r0, r5
 800a7d6:	b003      	add	sp, #12
 800a7d8:	bd30      	pop	{r4, r5, pc}
 800a7da:	220c      	movs	r2, #12
 800a7dc:	6002      	str	r2, [r0, #0]
 800a7de:	2500      	movs	r5, #0
 800a7e0:	e7f8      	b.n	800a7d4 <_calloc_r+0x16>
 800a7e2:	4621      	mov	r1, r4
 800a7e4:	f7fc f8d6 	bl	8006994 <memset>
 800a7e8:	e7f4      	b.n	800a7d4 <_calloc_r+0x16>
	...

0800a7ec <_free_r>:
 800a7ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a7ee:	2900      	cmp	r1, #0
 800a7f0:	d044      	beq.n	800a87c <_free_r+0x90>
 800a7f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a7f6:	9001      	str	r0, [sp, #4]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	f1a1 0404 	sub.w	r4, r1, #4
 800a7fe:	bfb8      	it	lt
 800a800:	18e4      	addlt	r4, r4, r3
 800a802:	f000 fca5 	bl	800b150 <__malloc_lock>
 800a806:	4a1e      	ldr	r2, [pc, #120]	; (800a880 <_free_r+0x94>)
 800a808:	9801      	ldr	r0, [sp, #4]
 800a80a:	6813      	ldr	r3, [r2, #0]
 800a80c:	b933      	cbnz	r3, 800a81c <_free_r+0x30>
 800a80e:	6063      	str	r3, [r4, #4]
 800a810:	6014      	str	r4, [r2, #0]
 800a812:	b003      	add	sp, #12
 800a814:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a818:	f000 bca0 	b.w	800b15c <__malloc_unlock>
 800a81c:	42a3      	cmp	r3, r4
 800a81e:	d908      	bls.n	800a832 <_free_r+0x46>
 800a820:	6825      	ldr	r5, [r4, #0]
 800a822:	1961      	adds	r1, r4, r5
 800a824:	428b      	cmp	r3, r1
 800a826:	bf01      	itttt	eq
 800a828:	6819      	ldreq	r1, [r3, #0]
 800a82a:	685b      	ldreq	r3, [r3, #4]
 800a82c:	1949      	addeq	r1, r1, r5
 800a82e:	6021      	streq	r1, [r4, #0]
 800a830:	e7ed      	b.n	800a80e <_free_r+0x22>
 800a832:	461a      	mov	r2, r3
 800a834:	685b      	ldr	r3, [r3, #4]
 800a836:	b10b      	cbz	r3, 800a83c <_free_r+0x50>
 800a838:	42a3      	cmp	r3, r4
 800a83a:	d9fa      	bls.n	800a832 <_free_r+0x46>
 800a83c:	6811      	ldr	r1, [r2, #0]
 800a83e:	1855      	adds	r5, r2, r1
 800a840:	42a5      	cmp	r5, r4
 800a842:	d10b      	bne.n	800a85c <_free_r+0x70>
 800a844:	6824      	ldr	r4, [r4, #0]
 800a846:	4421      	add	r1, r4
 800a848:	1854      	adds	r4, r2, r1
 800a84a:	42a3      	cmp	r3, r4
 800a84c:	6011      	str	r1, [r2, #0]
 800a84e:	d1e0      	bne.n	800a812 <_free_r+0x26>
 800a850:	681c      	ldr	r4, [r3, #0]
 800a852:	685b      	ldr	r3, [r3, #4]
 800a854:	6053      	str	r3, [r2, #4]
 800a856:	4421      	add	r1, r4
 800a858:	6011      	str	r1, [r2, #0]
 800a85a:	e7da      	b.n	800a812 <_free_r+0x26>
 800a85c:	d902      	bls.n	800a864 <_free_r+0x78>
 800a85e:	230c      	movs	r3, #12
 800a860:	6003      	str	r3, [r0, #0]
 800a862:	e7d6      	b.n	800a812 <_free_r+0x26>
 800a864:	6825      	ldr	r5, [r4, #0]
 800a866:	1961      	adds	r1, r4, r5
 800a868:	428b      	cmp	r3, r1
 800a86a:	bf04      	itt	eq
 800a86c:	6819      	ldreq	r1, [r3, #0]
 800a86e:	685b      	ldreq	r3, [r3, #4]
 800a870:	6063      	str	r3, [r4, #4]
 800a872:	bf04      	itt	eq
 800a874:	1949      	addeq	r1, r1, r5
 800a876:	6021      	streq	r1, [r4, #0]
 800a878:	6054      	str	r4, [r2, #4]
 800a87a:	e7ca      	b.n	800a812 <_free_r+0x26>
 800a87c:	b003      	add	sp, #12
 800a87e:	bd30      	pop	{r4, r5, pc}
 800a880:	200004bc 	.word	0x200004bc

0800a884 <sbrk_aligned>:
 800a884:	b570      	push	{r4, r5, r6, lr}
 800a886:	4e0e      	ldr	r6, [pc, #56]	; (800a8c0 <sbrk_aligned+0x3c>)
 800a888:	460c      	mov	r4, r1
 800a88a:	6831      	ldr	r1, [r6, #0]
 800a88c:	4605      	mov	r5, r0
 800a88e:	b911      	cbnz	r1, 800a896 <sbrk_aligned+0x12>
 800a890:	f000 fb4a 	bl	800af28 <_sbrk_r>
 800a894:	6030      	str	r0, [r6, #0]
 800a896:	4621      	mov	r1, r4
 800a898:	4628      	mov	r0, r5
 800a89a:	f000 fb45 	bl	800af28 <_sbrk_r>
 800a89e:	1c43      	adds	r3, r0, #1
 800a8a0:	d00a      	beq.n	800a8b8 <sbrk_aligned+0x34>
 800a8a2:	1cc4      	adds	r4, r0, #3
 800a8a4:	f024 0403 	bic.w	r4, r4, #3
 800a8a8:	42a0      	cmp	r0, r4
 800a8aa:	d007      	beq.n	800a8bc <sbrk_aligned+0x38>
 800a8ac:	1a21      	subs	r1, r4, r0
 800a8ae:	4628      	mov	r0, r5
 800a8b0:	f000 fb3a 	bl	800af28 <_sbrk_r>
 800a8b4:	3001      	adds	r0, #1
 800a8b6:	d101      	bne.n	800a8bc <sbrk_aligned+0x38>
 800a8b8:	f04f 34ff 	mov.w	r4, #4294967295
 800a8bc:	4620      	mov	r0, r4
 800a8be:	bd70      	pop	{r4, r5, r6, pc}
 800a8c0:	200004c0 	.word	0x200004c0

0800a8c4 <_malloc_r>:
 800a8c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8c8:	1ccd      	adds	r5, r1, #3
 800a8ca:	f025 0503 	bic.w	r5, r5, #3
 800a8ce:	3508      	adds	r5, #8
 800a8d0:	2d0c      	cmp	r5, #12
 800a8d2:	bf38      	it	cc
 800a8d4:	250c      	movcc	r5, #12
 800a8d6:	2d00      	cmp	r5, #0
 800a8d8:	4607      	mov	r7, r0
 800a8da:	db01      	blt.n	800a8e0 <_malloc_r+0x1c>
 800a8dc:	42a9      	cmp	r1, r5
 800a8de:	d905      	bls.n	800a8ec <_malloc_r+0x28>
 800a8e0:	230c      	movs	r3, #12
 800a8e2:	603b      	str	r3, [r7, #0]
 800a8e4:	2600      	movs	r6, #0
 800a8e6:	4630      	mov	r0, r6
 800a8e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8ec:	4e2e      	ldr	r6, [pc, #184]	; (800a9a8 <_malloc_r+0xe4>)
 800a8ee:	f000 fc2f 	bl	800b150 <__malloc_lock>
 800a8f2:	6833      	ldr	r3, [r6, #0]
 800a8f4:	461c      	mov	r4, r3
 800a8f6:	bb34      	cbnz	r4, 800a946 <_malloc_r+0x82>
 800a8f8:	4629      	mov	r1, r5
 800a8fa:	4638      	mov	r0, r7
 800a8fc:	f7ff ffc2 	bl	800a884 <sbrk_aligned>
 800a900:	1c43      	adds	r3, r0, #1
 800a902:	4604      	mov	r4, r0
 800a904:	d14d      	bne.n	800a9a2 <_malloc_r+0xde>
 800a906:	6834      	ldr	r4, [r6, #0]
 800a908:	4626      	mov	r6, r4
 800a90a:	2e00      	cmp	r6, #0
 800a90c:	d140      	bne.n	800a990 <_malloc_r+0xcc>
 800a90e:	6823      	ldr	r3, [r4, #0]
 800a910:	4631      	mov	r1, r6
 800a912:	4638      	mov	r0, r7
 800a914:	eb04 0803 	add.w	r8, r4, r3
 800a918:	f000 fb06 	bl	800af28 <_sbrk_r>
 800a91c:	4580      	cmp	r8, r0
 800a91e:	d13a      	bne.n	800a996 <_malloc_r+0xd2>
 800a920:	6821      	ldr	r1, [r4, #0]
 800a922:	3503      	adds	r5, #3
 800a924:	1a6d      	subs	r5, r5, r1
 800a926:	f025 0503 	bic.w	r5, r5, #3
 800a92a:	3508      	adds	r5, #8
 800a92c:	2d0c      	cmp	r5, #12
 800a92e:	bf38      	it	cc
 800a930:	250c      	movcc	r5, #12
 800a932:	4629      	mov	r1, r5
 800a934:	4638      	mov	r0, r7
 800a936:	f7ff ffa5 	bl	800a884 <sbrk_aligned>
 800a93a:	3001      	adds	r0, #1
 800a93c:	d02b      	beq.n	800a996 <_malloc_r+0xd2>
 800a93e:	6823      	ldr	r3, [r4, #0]
 800a940:	442b      	add	r3, r5
 800a942:	6023      	str	r3, [r4, #0]
 800a944:	e00e      	b.n	800a964 <_malloc_r+0xa0>
 800a946:	6822      	ldr	r2, [r4, #0]
 800a948:	1b52      	subs	r2, r2, r5
 800a94a:	d41e      	bmi.n	800a98a <_malloc_r+0xc6>
 800a94c:	2a0b      	cmp	r2, #11
 800a94e:	d916      	bls.n	800a97e <_malloc_r+0xba>
 800a950:	1961      	adds	r1, r4, r5
 800a952:	42a3      	cmp	r3, r4
 800a954:	6025      	str	r5, [r4, #0]
 800a956:	bf18      	it	ne
 800a958:	6059      	strne	r1, [r3, #4]
 800a95a:	6863      	ldr	r3, [r4, #4]
 800a95c:	bf08      	it	eq
 800a95e:	6031      	streq	r1, [r6, #0]
 800a960:	5162      	str	r2, [r4, r5]
 800a962:	604b      	str	r3, [r1, #4]
 800a964:	4638      	mov	r0, r7
 800a966:	f104 060b 	add.w	r6, r4, #11
 800a96a:	f000 fbf7 	bl	800b15c <__malloc_unlock>
 800a96e:	f026 0607 	bic.w	r6, r6, #7
 800a972:	1d23      	adds	r3, r4, #4
 800a974:	1af2      	subs	r2, r6, r3
 800a976:	d0b6      	beq.n	800a8e6 <_malloc_r+0x22>
 800a978:	1b9b      	subs	r3, r3, r6
 800a97a:	50a3      	str	r3, [r4, r2]
 800a97c:	e7b3      	b.n	800a8e6 <_malloc_r+0x22>
 800a97e:	6862      	ldr	r2, [r4, #4]
 800a980:	42a3      	cmp	r3, r4
 800a982:	bf0c      	ite	eq
 800a984:	6032      	streq	r2, [r6, #0]
 800a986:	605a      	strne	r2, [r3, #4]
 800a988:	e7ec      	b.n	800a964 <_malloc_r+0xa0>
 800a98a:	4623      	mov	r3, r4
 800a98c:	6864      	ldr	r4, [r4, #4]
 800a98e:	e7b2      	b.n	800a8f6 <_malloc_r+0x32>
 800a990:	4634      	mov	r4, r6
 800a992:	6876      	ldr	r6, [r6, #4]
 800a994:	e7b9      	b.n	800a90a <_malloc_r+0x46>
 800a996:	230c      	movs	r3, #12
 800a998:	603b      	str	r3, [r7, #0]
 800a99a:	4638      	mov	r0, r7
 800a99c:	f000 fbde 	bl	800b15c <__malloc_unlock>
 800a9a0:	e7a1      	b.n	800a8e6 <_malloc_r+0x22>
 800a9a2:	6025      	str	r5, [r4, #0]
 800a9a4:	e7de      	b.n	800a964 <_malloc_r+0xa0>
 800a9a6:	bf00      	nop
 800a9a8:	200004bc 	.word	0x200004bc

0800a9ac <__ssputs_r>:
 800a9ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a9b0:	688e      	ldr	r6, [r1, #8]
 800a9b2:	429e      	cmp	r6, r3
 800a9b4:	4682      	mov	sl, r0
 800a9b6:	460c      	mov	r4, r1
 800a9b8:	4690      	mov	r8, r2
 800a9ba:	461f      	mov	r7, r3
 800a9bc:	d838      	bhi.n	800aa30 <__ssputs_r+0x84>
 800a9be:	898a      	ldrh	r2, [r1, #12]
 800a9c0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a9c4:	d032      	beq.n	800aa2c <__ssputs_r+0x80>
 800a9c6:	6825      	ldr	r5, [r4, #0]
 800a9c8:	6909      	ldr	r1, [r1, #16]
 800a9ca:	eba5 0901 	sub.w	r9, r5, r1
 800a9ce:	6965      	ldr	r5, [r4, #20]
 800a9d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a9d4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a9d8:	3301      	adds	r3, #1
 800a9da:	444b      	add	r3, r9
 800a9dc:	106d      	asrs	r5, r5, #1
 800a9de:	429d      	cmp	r5, r3
 800a9e0:	bf38      	it	cc
 800a9e2:	461d      	movcc	r5, r3
 800a9e4:	0553      	lsls	r3, r2, #21
 800a9e6:	d531      	bpl.n	800aa4c <__ssputs_r+0xa0>
 800a9e8:	4629      	mov	r1, r5
 800a9ea:	f7ff ff6b 	bl	800a8c4 <_malloc_r>
 800a9ee:	4606      	mov	r6, r0
 800a9f0:	b950      	cbnz	r0, 800aa08 <__ssputs_r+0x5c>
 800a9f2:	230c      	movs	r3, #12
 800a9f4:	f8ca 3000 	str.w	r3, [sl]
 800a9f8:	89a3      	ldrh	r3, [r4, #12]
 800a9fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a9fe:	81a3      	strh	r3, [r4, #12]
 800aa00:	f04f 30ff 	mov.w	r0, #4294967295
 800aa04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa08:	6921      	ldr	r1, [r4, #16]
 800aa0a:	464a      	mov	r2, r9
 800aa0c:	f7fb ffb4 	bl	8006978 <memcpy>
 800aa10:	89a3      	ldrh	r3, [r4, #12]
 800aa12:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800aa16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa1a:	81a3      	strh	r3, [r4, #12]
 800aa1c:	6126      	str	r6, [r4, #16]
 800aa1e:	6165      	str	r5, [r4, #20]
 800aa20:	444e      	add	r6, r9
 800aa22:	eba5 0509 	sub.w	r5, r5, r9
 800aa26:	6026      	str	r6, [r4, #0]
 800aa28:	60a5      	str	r5, [r4, #8]
 800aa2a:	463e      	mov	r6, r7
 800aa2c:	42be      	cmp	r6, r7
 800aa2e:	d900      	bls.n	800aa32 <__ssputs_r+0x86>
 800aa30:	463e      	mov	r6, r7
 800aa32:	6820      	ldr	r0, [r4, #0]
 800aa34:	4632      	mov	r2, r6
 800aa36:	4641      	mov	r1, r8
 800aa38:	f000 fb70 	bl	800b11c <memmove>
 800aa3c:	68a3      	ldr	r3, [r4, #8]
 800aa3e:	1b9b      	subs	r3, r3, r6
 800aa40:	60a3      	str	r3, [r4, #8]
 800aa42:	6823      	ldr	r3, [r4, #0]
 800aa44:	4433      	add	r3, r6
 800aa46:	6023      	str	r3, [r4, #0]
 800aa48:	2000      	movs	r0, #0
 800aa4a:	e7db      	b.n	800aa04 <__ssputs_r+0x58>
 800aa4c:	462a      	mov	r2, r5
 800aa4e:	f000 fb8b 	bl	800b168 <_realloc_r>
 800aa52:	4606      	mov	r6, r0
 800aa54:	2800      	cmp	r0, #0
 800aa56:	d1e1      	bne.n	800aa1c <__ssputs_r+0x70>
 800aa58:	6921      	ldr	r1, [r4, #16]
 800aa5a:	4650      	mov	r0, sl
 800aa5c:	f7ff fec6 	bl	800a7ec <_free_r>
 800aa60:	e7c7      	b.n	800a9f2 <__ssputs_r+0x46>
	...

0800aa64 <_svfiprintf_r>:
 800aa64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa68:	4698      	mov	r8, r3
 800aa6a:	898b      	ldrh	r3, [r1, #12]
 800aa6c:	061b      	lsls	r3, r3, #24
 800aa6e:	b09d      	sub	sp, #116	; 0x74
 800aa70:	4607      	mov	r7, r0
 800aa72:	460d      	mov	r5, r1
 800aa74:	4614      	mov	r4, r2
 800aa76:	d50e      	bpl.n	800aa96 <_svfiprintf_r+0x32>
 800aa78:	690b      	ldr	r3, [r1, #16]
 800aa7a:	b963      	cbnz	r3, 800aa96 <_svfiprintf_r+0x32>
 800aa7c:	2140      	movs	r1, #64	; 0x40
 800aa7e:	f7ff ff21 	bl	800a8c4 <_malloc_r>
 800aa82:	6028      	str	r0, [r5, #0]
 800aa84:	6128      	str	r0, [r5, #16]
 800aa86:	b920      	cbnz	r0, 800aa92 <_svfiprintf_r+0x2e>
 800aa88:	230c      	movs	r3, #12
 800aa8a:	603b      	str	r3, [r7, #0]
 800aa8c:	f04f 30ff 	mov.w	r0, #4294967295
 800aa90:	e0d1      	b.n	800ac36 <_svfiprintf_r+0x1d2>
 800aa92:	2340      	movs	r3, #64	; 0x40
 800aa94:	616b      	str	r3, [r5, #20]
 800aa96:	2300      	movs	r3, #0
 800aa98:	9309      	str	r3, [sp, #36]	; 0x24
 800aa9a:	2320      	movs	r3, #32
 800aa9c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aaa0:	f8cd 800c 	str.w	r8, [sp, #12]
 800aaa4:	2330      	movs	r3, #48	; 0x30
 800aaa6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ac50 <_svfiprintf_r+0x1ec>
 800aaaa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aaae:	f04f 0901 	mov.w	r9, #1
 800aab2:	4623      	mov	r3, r4
 800aab4:	469a      	mov	sl, r3
 800aab6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aaba:	b10a      	cbz	r2, 800aac0 <_svfiprintf_r+0x5c>
 800aabc:	2a25      	cmp	r2, #37	; 0x25
 800aabe:	d1f9      	bne.n	800aab4 <_svfiprintf_r+0x50>
 800aac0:	ebba 0b04 	subs.w	fp, sl, r4
 800aac4:	d00b      	beq.n	800aade <_svfiprintf_r+0x7a>
 800aac6:	465b      	mov	r3, fp
 800aac8:	4622      	mov	r2, r4
 800aaca:	4629      	mov	r1, r5
 800aacc:	4638      	mov	r0, r7
 800aace:	f7ff ff6d 	bl	800a9ac <__ssputs_r>
 800aad2:	3001      	adds	r0, #1
 800aad4:	f000 80aa 	beq.w	800ac2c <_svfiprintf_r+0x1c8>
 800aad8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aada:	445a      	add	r2, fp
 800aadc:	9209      	str	r2, [sp, #36]	; 0x24
 800aade:	f89a 3000 	ldrb.w	r3, [sl]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	f000 80a2 	beq.w	800ac2c <_svfiprintf_r+0x1c8>
 800aae8:	2300      	movs	r3, #0
 800aaea:	f04f 32ff 	mov.w	r2, #4294967295
 800aaee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aaf2:	f10a 0a01 	add.w	sl, sl, #1
 800aaf6:	9304      	str	r3, [sp, #16]
 800aaf8:	9307      	str	r3, [sp, #28]
 800aafa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aafe:	931a      	str	r3, [sp, #104]	; 0x68
 800ab00:	4654      	mov	r4, sl
 800ab02:	2205      	movs	r2, #5
 800ab04:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab08:	4851      	ldr	r0, [pc, #324]	; (800ac50 <_svfiprintf_r+0x1ec>)
 800ab0a:	f7f5 fb79 	bl	8000200 <memchr>
 800ab0e:	9a04      	ldr	r2, [sp, #16]
 800ab10:	b9d8      	cbnz	r0, 800ab4a <_svfiprintf_r+0xe6>
 800ab12:	06d0      	lsls	r0, r2, #27
 800ab14:	bf44      	itt	mi
 800ab16:	2320      	movmi	r3, #32
 800ab18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ab1c:	0711      	lsls	r1, r2, #28
 800ab1e:	bf44      	itt	mi
 800ab20:	232b      	movmi	r3, #43	; 0x2b
 800ab22:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ab26:	f89a 3000 	ldrb.w	r3, [sl]
 800ab2a:	2b2a      	cmp	r3, #42	; 0x2a
 800ab2c:	d015      	beq.n	800ab5a <_svfiprintf_r+0xf6>
 800ab2e:	9a07      	ldr	r2, [sp, #28]
 800ab30:	4654      	mov	r4, sl
 800ab32:	2000      	movs	r0, #0
 800ab34:	f04f 0c0a 	mov.w	ip, #10
 800ab38:	4621      	mov	r1, r4
 800ab3a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ab3e:	3b30      	subs	r3, #48	; 0x30
 800ab40:	2b09      	cmp	r3, #9
 800ab42:	d94e      	bls.n	800abe2 <_svfiprintf_r+0x17e>
 800ab44:	b1b0      	cbz	r0, 800ab74 <_svfiprintf_r+0x110>
 800ab46:	9207      	str	r2, [sp, #28]
 800ab48:	e014      	b.n	800ab74 <_svfiprintf_r+0x110>
 800ab4a:	eba0 0308 	sub.w	r3, r0, r8
 800ab4e:	fa09 f303 	lsl.w	r3, r9, r3
 800ab52:	4313      	orrs	r3, r2
 800ab54:	9304      	str	r3, [sp, #16]
 800ab56:	46a2      	mov	sl, r4
 800ab58:	e7d2      	b.n	800ab00 <_svfiprintf_r+0x9c>
 800ab5a:	9b03      	ldr	r3, [sp, #12]
 800ab5c:	1d19      	adds	r1, r3, #4
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	9103      	str	r1, [sp, #12]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	bfbb      	ittet	lt
 800ab66:	425b      	neglt	r3, r3
 800ab68:	f042 0202 	orrlt.w	r2, r2, #2
 800ab6c:	9307      	strge	r3, [sp, #28]
 800ab6e:	9307      	strlt	r3, [sp, #28]
 800ab70:	bfb8      	it	lt
 800ab72:	9204      	strlt	r2, [sp, #16]
 800ab74:	7823      	ldrb	r3, [r4, #0]
 800ab76:	2b2e      	cmp	r3, #46	; 0x2e
 800ab78:	d10c      	bne.n	800ab94 <_svfiprintf_r+0x130>
 800ab7a:	7863      	ldrb	r3, [r4, #1]
 800ab7c:	2b2a      	cmp	r3, #42	; 0x2a
 800ab7e:	d135      	bne.n	800abec <_svfiprintf_r+0x188>
 800ab80:	9b03      	ldr	r3, [sp, #12]
 800ab82:	1d1a      	adds	r2, r3, #4
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	9203      	str	r2, [sp, #12]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	bfb8      	it	lt
 800ab8c:	f04f 33ff 	movlt.w	r3, #4294967295
 800ab90:	3402      	adds	r4, #2
 800ab92:	9305      	str	r3, [sp, #20]
 800ab94:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ac60 <_svfiprintf_r+0x1fc>
 800ab98:	7821      	ldrb	r1, [r4, #0]
 800ab9a:	2203      	movs	r2, #3
 800ab9c:	4650      	mov	r0, sl
 800ab9e:	f7f5 fb2f 	bl	8000200 <memchr>
 800aba2:	b140      	cbz	r0, 800abb6 <_svfiprintf_r+0x152>
 800aba4:	2340      	movs	r3, #64	; 0x40
 800aba6:	eba0 000a 	sub.w	r0, r0, sl
 800abaa:	fa03 f000 	lsl.w	r0, r3, r0
 800abae:	9b04      	ldr	r3, [sp, #16]
 800abb0:	4303      	orrs	r3, r0
 800abb2:	3401      	adds	r4, #1
 800abb4:	9304      	str	r3, [sp, #16]
 800abb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abba:	4826      	ldr	r0, [pc, #152]	; (800ac54 <_svfiprintf_r+0x1f0>)
 800abbc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800abc0:	2206      	movs	r2, #6
 800abc2:	f7f5 fb1d 	bl	8000200 <memchr>
 800abc6:	2800      	cmp	r0, #0
 800abc8:	d038      	beq.n	800ac3c <_svfiprintf_r+0x1d8>
 800abca:	4b23      	ldr	r3, [pc, #140]	; (800ac58 <_svfiprintf_r+0x1f4>)
 800abcc:	bb1b      	cbnz	r3, 800ac16 <_svfiprintf_r+0x1b2>
 800abce:	9b03      	ldr	r3, [sp, #12]
 800abd0:	3307      	adds	r3, #7
 800abd2:	f023 0307 	bic.w	r3, r3, #7
 800abd6:	3308      	adds	r3, #8
 800abd8:	9303      	str	r3, [sp, #12]
 800abda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abdc:	4433      	add	r3, r6
 800abde:	9309      	str	r3, [sp, #36]	; 0x24
 800abe0:	e767      	b.n	800aab2 <_svfiprintf_r+0x4e>
 800abe2:	fb0c 3202 	mla	r2, ip, r2, r3
 800abe6:	460c      	mov	r4, r1
 800abe8:	2001      	movs	r0, #1
 800abea:	e7a5      	b.n	800ab38 <_svfiprintf_r+0xd4>
 800abec:	2300      	movs	r3, #0
 800abee:	3401      	adds	r4, #1
 800abf0:	9305      	str	r3, [sp, #20]
 800abf2:	4619      	mov	r1, r3
 800abf4:	f04f 0c0a 	mov.w	ip, #10
 800abf8:	4620      	mov	r0, r4
 800abfa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800abfe:	3a30      	subs	r2, #48	; 0x30
 800ac00:	2a09      	cmp	r2, #9
 800ac02:	d903      	bls.n	800ac0c <_svfiprintf_r+0x1a8>
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d0c5      	beq.n	800ab94 <_svfiprintf_r+0x130>
 800ac08:	9105      	str	r1, [sp, #20]
 800ac0a:	e7c3      	b.n	800ab94 <_svfiprintf_r+0x130>
 800ac0c:	fb0c 2101 	mla	r1, ip, r1, r2
 800ac10:	4604      	mov	r4, r0
 800ac12:	2301      	movs	r3, #1
 800ac14:	e7f0      	b.n	800abf8 <_svfiprintf_r+0x194>
 800ac16:	ab03      	add	r3, sp, #12
 800ac18:	9300      	str	r3, [sp, #0]
 800ac1a:	462a      	mov	r2, r5
 800ac1c:	4b0f      	ldr	r3, [pc, #60]	; (800ac5c <_svfiprintf_r+0x1f8>)
 800ac1e:	a904      	add	r1, sp, #16
 800ac20:	4638      	mov	r0, r7
 800ac22:	f7fb ff5f 	bl	8006ae4 <_printf_float>
 800ac26:	1c42      	adds	r2, r0, #1
 800ac28:	4606      	mov	r6, r0
 800ac2a:	d1d6      	bne.n	800abda <_svfiprintf_r+0x176>
 800ac2c:	89ab      	ldrh	r3, [r5, #12]
 800ac2e:	065b      	lsls	r3, r3, #25
 800ac30:	f53f af2c 	bmi.w	800aa8c <_svfiprintf_r+0x28>
 800ac34:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ac36:	b01d      	add	sp, #116	; 0x74
 800ac38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac3c:	ab03      	add	r3, sp, #12
 800ac3e:	9300      	str	r3, [sp, #0]
 800ac40:	462a      	mov	r2, r5
 800ac42:	4b06      	ldr	r3, [pc, #24]	; (800ac5c <_svfiprintf_r+0x1f8>)
 800ac44:	a904      	add	r1, sp, #16
 800ac46:	4638      	mov	r0, r7
 800ac48:	f7fc f9f0 	bl	800702c <_printf_i>
 800ac4c:	e7eb      	b.n	800ac26 <_svfiprintf_r+0x1c2>
 800ac4e:	bf00      	nop
 800ac50:	0800b744 	.word	0x0800b744
 800ac54:	0800b74e 	.word	0x0800b74e
 800ac58:	08006ae5 	.word	0x08006ae5
 800ac5c:	0800a9ad 	.word	0x0800a9ad
 800ac60:	0800b74a 	.word	0x0800b74a

0800ac64 <__sfputc_r>:
 800ac64:	6893      	ldr	r3, [r2, #8]
 800ac66:	3b01      	subs	r3, #1
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	b410      	push	{r4}
 800ac6c:	6093      	str	r3, [r2, #8]
 800ac6e:	da08      	bge.n	800ac82 <__sfputc_r+0x1e>
 800ac70:	6994      	ldr	r4, [r2, #24]
 800ac72:	42a3      	cmp	r3, r4
 800ac74:	db01      	blt.n	800ac7a <__sfputc_r+0x16>
 800ac76:	290a      	cmp	r1, #10
 800ac78:	d103      	bne.n	800ac82 <__sfputc_r+0x1e>
 800ac7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ac7e:	f7fd bbf7 	b.w	8008470 <__swbuf_r>
 800ac82:	6813      	ldr	r3, [r2, #0]
 800ac84:	1c58      	adds	r0, r3, #1
 800ac86:	6010      	str	r0, [r2, #0]
 800ac88:	7019      	strb	r1, [r3, #0]
 800ac8a:	4608      	mov	r0, r1
 800ac8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ac90:	4770      	bx	lr

0800ac92 <__sfputs_r>:
 800ac92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac94:	4606      	mov	r6, r0
 800ac96:	460f      	mov	r7, r1
 800ac98:	4614      	mov	r4, r2
 800ac9a:	18d5      	adds	r5, r2, r3
 800ac9c:	42ac      	cmp	r4, r5
 800ac9e:	d101      	bne.n	800aca4 <__sfputs_r+0x12>
 800aca0:	2000      	movs	r0, #0
 800aca2:	e007      	b.n	800acb4 <__sfputs_r+0x22>
 800aca4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aca8:	463a      	mov	r2, r7
 800acaa:	4630      	mov	r0, r6
 800acac:	f7ff ffda 	bl	800ac64 <__sfputc_r>
 800acb0:	1c43      	adds	r3, r0, #1
 800acb2:	d1f3      	bne.n	800ac9c <__sfputs_r+0xa>
 800acb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800acb8 <_vfiprintf_r>:
 800acb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acbc:	460d      	mov	r5, r1
 800acbe:	b09d      	sub	sp, #116	; 0x74
 800acc0:	4614      	mov	r4, r2
 800acc2:	4698      	mov	r8, r3
 800acc4:	4606      	mov	r6, r0
 800acc6:	b118      	cbz	r0, 800acd0 <_vfiprintf_r+0x18>
 800acc8:	6983      	ldr	r3, [r0, #24]
 800acca:	b90b      	cbnz	r3, 800acd0 <_vfiprintf_r+0x18>
 800accc:	f7fe fc24 	bl	8009518 <__sinit>
 800acd0:	4b89      	ldr	r3, [pc, #548]	; (800aef8 <_vfiprintf_r+0x240>)
 800acd2:	429d      	cmp	r5, r3
 800acd4:	d11b      	bne.n	800ad0e <_vfiprintf_r+0x56>
 800acd6:	6875      	ldr	r5, [r6, #4]
 800acd8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800acda:	07d9      	lsls	r1, r3, #31
 800acdc:	d405      	bmi.n	800acea <_vfiprintf_r+0x32>
 800acde:	89ab      	ldrh	r3, [r5, #12]
 800ace0:	059a      	lsls	r2, r3, #22
 800ace2:	d402      	bmi.n	800acea <_vfiprintf_r+0x32>
 800ace4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ace6:	f7ff f828 	bl	8009d3a <__retarget_lock_acquire_recursive>
 800acea:	89ab      	ldrh	r3, [r5, #12]
 800acec:	071b      	lsls	r3, r3, #28
 800acee:	d501      	bpl.n	800acf4 <_vfiprintf_r+0x3c>
 800acf0:	692b      	ldr	r3, [r5, #16]
 800acf2:	b9eb      	cbnz	r3, 800ad30 <_vfiprintf_r+0x78>
 800acf4:	4629      	mov	r1, r5
 800acf6:	4630      	mov	r0, r6
 800acf8:	f7fd fc0c 	bl	8008514 <__swsetup_r>
 800acfc:	b1c0      	cbz	r0, 800ad30 <_vfiprintf_r+0x78>
 800acfe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ad00:	07dc      	lsls	r4, r3, #31
 800ad02:	d50e      	bpl.n	800ad22 <_vfiprintf_r+0x6a>
 800ad04:	f04f 30ff 	mov.w	r0, #4294967295
 800ad08:	b01d      	add	sp, #116	; 0x74
 800ad0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad0e:	4b7b      	ldr	r3, [pc, #492]	; (800aefc <_vfiprintf_r+0x244>)
 800ad10:	429d      	cmp	r5, r3
 800ad12:	d101      	bne.n	800ad18 <_vfiprintf_r+0x60>
 800ad14:	68b5      	ldr	r5, [r6, #8]
 800ad16:	e7df      	b.n	800acd8 <_vfiprintf_r+0x20>
 800ad18:	4b79      	ldr	r3, [pc, #484]	; (800af00 <_vfiprintf_r+0x248>)
 800ad1a:	429d      	cmp	r5, r3
 800ad1c:	bf08      	it	eq
 800ad1e:	68f5      	ldreq	r5, [r6, #12]
 800ad20:	e7da      	b.n	800acd8 <_vfiprintf_r+0x20>
 800ad22:	89ab      	ldrh	r3, [r5, #12]
 800ad24:	0598      	lsls	r0, r3, #22
 800ad26:	d4ed      	bmi.n	800ad04 <_vfiprintf_r+0x4c>
 800ad28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ad2a:	f7ff f807 	bl	8009d3c <__retarget_lock_release_recursive>
 800ad2e:	e7e9      	b.n	800ad04 <_vfiprintf_r+0x4c>
 800ad30:	2300      	movs	r3, #0
 800ad32:	9309      	str	r3, [sp, #36]	; 0x24
 800ad34:	2320      	movs	r3, #32
 800ad36:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ad3a:	f8cd 800c 	str.w	r8, [sp, #12]
 800ad3e:	2330      	movs	r3, #48	; 0x30
 800ad40:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800af04 <_vfiprintf_r+0x24c>
 800ad44:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ad48:	f04f 0901 	mov.w	r9, #1
 800ad4c:	4623      	mov	r3, r4
 800ad4e:	469a      	mov	sl, r3
 800ad50:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ad54:	b10a      	cbz	r2, 800ad5a <_vfiprintf_r+0xa2>
 800ad56:	2a25      	cmp	r2, #37	; 0x25
 800ad58:	d1f9      	bne.n	800ad4e <_vfiprintf_r+0x96>
 800ad5a:	ebba 0b04 	subs.w	fp, sl, r4
 800ad5e:	d00b      	beq.n	800ad78 <_vfiprintf_r+0xc0>
 800ad60:	465b      	mov	r3, fp
 800ad62:	4622      	mov	r2, r4
 800ad64:	4629      	mov	r1, r5
 800ad66:	4630      	mov	r0, r6
 800ad68:	f7ff ff93 	bl	800ac92 <__sfputs_r>
 800ad6c:	3001      	adds	r0, #1
 800ad6e:	f000 80aa 	beq.w	800aec6 <_vfiprintf_r+0x20e>
 800ad72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ad74:	445a      	add	r2, fp
 800ad76:	9209      	str	r2, [sp, #36]	; 0x24
 800ad78:	f89a 3000 	ldrb.w	r3, [sl]
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	f000 80a2 	beq.w	800aec6 <_vfiprintf_r+0x20e>
 800ad82:	2300      	movs	r3, #0
 800ad84:	f04f 32ff 	mov.w	r2, #4294967295
 800ad88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ad8c:	f10a 0a01 	add.w	sl, sl, #1
 800ad90:	9304      	str	r3, [sp, #16]
 800ad92:	9307      	str	r3, [sp, #28]
 800ad94:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ad98:	931a      	str	r3, [sp, #104]	; 0x68
 800ad9a:	4654      	mov	r4, sl
 800ad9c:	2205      	movs	r2, #5
 800ad9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ada2:	4858      	ldr	r0, [pc, #352]	; (800af04 <_vfiprintf_r+0x24c>)
 800ada4:	f7f5 fa2c 	bl	8000200 <memchr>
 800ada8:	9a04      	ldr	r2, [sp, #16]
 800adaa:	b9d8      	cbnz	r0, 800ade4 <_vfiprintf_r+0x12c>
 800adac:	06d1      	lsls	r1, r2, #27
 800adae:	bf44      	itt	mi
 800adb0:	2320      	movmi	r3, #32
 800adb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800adb6:	0713      	lsls	r3, r2, #28
 800adb8:	bf44      	itt	mi
 800adba:	232b      	movmi	r3, #43	; 0x2b
 800adbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800adc0:	f89a 3000 	ldrb.w	r3, [sl]
 800adc4:	2b2a      	cmp	r3, #42	; 0x2a
 800adc6:	d015      	beq.n	800adf4 <_vfiprintf_r+0x13c>
 800adc8:	9a07      	ldr	r2, [sp, #28]
 800adca:	4654      	mov	r4, sl
 800adcc:	2000      	movs	r0, #0
 800adce:	f04f 0c0a 	mov.w	ip, #10
 800add2:	4621      	mov	r1, r4
 800add4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800add8:	3b30      	subs	r3, #48	; 0x30
 800adda:	2b09      	cmp	r3, #9
 800addc:	d94e      	bls.n	800ae7c <_vfiprintf_r+0x1c4>
 800adde:	b1b0      	cbz	r0, 800ae0e <_vfiprintf_r+0x156>
 800ade0:	9207      	str	r2, [sp, #28]
 800ade2:	e014      	b.n	800ae0e <_vfiprintf_r+0x156>
 800ade4:	eba0 0308 	sub.w	r3, r0, r8
 800ade8:	fa09 f303 	lsl.w	r3, r9, r3
 800adec:	4313      	orrs	r3, r2
 800adee:	9304      	str	r3, [sp, #16]
 800adf0:	46a2      	mov	sl, r4
 800adf2:	e7d2      	b.n	800ad9a <_vfiprintf_r+0xe2>
 800adf4:	9b03      	ldr	r3, [sp, #12]
 800adf6:	1d19      	adds	r1, r3, #4
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	9103      	str	r1, [sp, #12]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	bfbb      	ittet	lt
 800ae00:	425b      	neglt	r3, r3
 800ae02:	f042 0202 	orrlt.w	r2, r2, #2
 800ae06:	9307      	strge	r3, [sp, #28]
 800ae08:	9307      	strlt	r3, [sp, #28]
 800ae0a:	bfb8      	it	lt
 800ae0c:	9204      	strlt	r2, [sp, #16]
 800ae0e:	7823      	ldrb	r3, [r4, #0]
 800ae10:	2b2e      	cmp	r3, #46	; 0x2e
 800ae12:	d10c      	bne.n	800ae2e <_vfiprintf_r+0x176>
 800ae14:	7863      	ldrb	r3, [r4, #1]
 800ae16:	2b2a      	cmp	r3, #42	; 0x2a
 800ae18:	d135      	bne.n	800ae86 <_vfiprintf_r+0x1ce>
 800ae1a:	9b03      	ldr	r3, [sp, #12]
 800ae1c:	1d1a      	adds	r2, r3, #4
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	9203      	str	r2, [sp, #12]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	bfb8      	it	lt
 800ae26:	f04f 33ff 	movlt.w	r3, #4294967295
 800ae2a:	3402      	adds	r4, #2
 800ae2c:	9305      	str	r3, [sp, #20]
 800ae2e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800af14 <_vfiprintf_r+0x25c>
 800ae32:	7821      	ldrb	r1, [r4, #0]
 800ae34:	2203      	movs	r2, #3
 800ae36:	4650      	mov	r0, sl
 800ae38:	f7f5 f9e2 	bl	8000200 <memchr>
 800ae3c:	b140      	cbz	r0, 800ae50 <_vfiprintf_r+0x198>
 800ae3e:	2340      	movs	r3, #64	; 0x40
 800ae40:	eba0 000a 	sub.w	r0, r0, sl
 800ae44:	fa03 f000 	lsl.w	r0, r3, r0
 800ae48:	9b04      	ldr	r3, [sp, #16]
 800ae4a:	4303      	orrs	r3, r0
 800ae4c:	3401      	adds	r4, #1
 800ae4e:	9304      	str	r3, [sp, #16]
 800ae50:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae54:	482c      	ldr	r0, [pc, #176]	; (800af08 <_vfiprintf_r+0x250>)
 800ae56:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ae5a:	2206      	movs	r2, #6
 800ae5c:	f7f5 f9d0 	bl	8000200 <memchr>
 800ae60:	2800      	cmp	r0, #0
 800ae62:	d03f      	beq.n	800aee4 <_vfiprintf_r+0x22c>
 800ae64:	4b29      	ldr	r3, [pc, #164]	; (800af0c <_vfiprintf_r+0x254>)
 800ae66:	bb1b      	cbnz	r3, 800aeb0 <_vfiprintf_r+0x1f8>
 800ae68:	9b03      	ldr	r3, [sp, #12]
 800ae6a:	3307      	adds	r3, #7
 800ae6c:	f023 0307 	bic.w	r3, r3, #7
 800ae70:	3308      	adds	r3, #8
 800ae72:	9303      	str	r3, [sp, #12]
 800ae74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae76:	443b      	add	r3, r7
 800ae78:	9309      	str	r3, [sp, #36]	; 0x24
 800ae7a:	e767      	b.n	800ad4c <_vfiprintf_r+0x94>
 800ae7c:	fb0c 3202 	mla	r2, ip, r2, r3
 800ae80:	460c      	mov	r4, r1
 800ae82:	2001      	movs	r0, #1
 800ae84:	e7a5      	b.n	800add2 <_vfiprintf_r+0x11a>
 800ae86:	2300      	movs	r3, #0
 800ae88:	3401      	adds	r4, #1
 800ae8a:	9305      	str	r3, [sp, #20]
 800ae8c:	4619      	mov	r1, r3
 800ae8e:	f04f 0c0a 	mov.w	ip, #10
 800ae92:	4620      	mov	r0, r4
 800ae94:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ae98:	3a30      	subs	r2, #48	; 0x30
 800ae9a:	2a09      	cmp	r2, #9
 800ae9c:	d903      	bls.n	800aea6 <_vfiprintf_r+0x1ee>
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d0c5      	beq.n	800ae2e <_vfiprintf_r+0x176>
 800aea2:	9105      	str	r1, [sp, #20]
 800aea4:	e7c3      	b.n	800ae2e <_vfiprintf_r+0x176>
 800aea6:	fb0c 2101 	mla	r1, ip, r1, r2
 800aeaa:	4604      	mov	r4, r0
 800aeac:	2301      	movs	r3, #1
 800aeae:	e7f0      	b.n	800ae92 <_vfiprintf_r+0x1da>
 800aeb0:	ab03      	add	r3, sp, #12
 800aeb2:	9300      	str	r3, [sp, #0]
 800aeb4:	462a      	mov	r2, r5
 800aeb6:	4b16      	ldr	r3, [pc, #88]	; (800af10 <_vfiprintf_r+0x258>)
 800aeb8:	a904      	add	r1, sp, #16
 800aeba:	4630      	mov	r0, r6
 800aebc:	f7fb fe12 	bl	8006ae4 <_printf_float>
 800aec0:	4607      	mov	r7, r0
 800aec2:	1c78      	adds	r0, r7, #1
 800aec4:	d1d6      	bne.n	800ae74 <_vfiprintf_r+0x1bc>
 800aec6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aec8:	07d9      	lsls	r1, r3, #31
 800aeca:	d405      	bmi.n	800aed8 <_vfiprintf_r+0x220>
 800aecc:	89ab      	ldrh	r3, [r5, #12]
 800aece:	059a      	lsls	r2, r3, #22
 800aed0:	d402      	bmi.n	800aed8 <_vfiprintf_r+0x220>
 800aed2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aed4:	f7fe ff32 	bl	8009d3c <__retarget_lock_release_recursive>
 800aed8:	89ab      	ldrh	r3, [r5, #12]
 800aeda:	065b      	lsls	r3, r3, #25
 800aedc:	f53f af12 	bmi.w	800ad04 <_vfiprintf_r+0x4c>
 800aee0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aee2:	e711      	b.n	800ad08 <_vfiprintf_r+0x50>
 800aee4:	ab03      	add	r3, sp, #12
 800aee6:	9300      	str	r3, [sp, #0]
 800aee8:	462a      	mov	r2, r5
 800aeea:	4b09      	ldr	r3, [pc, #36]	; (800af10 <_vfiprintf_r+0x258>)
 800aeec:	a904      	add	r1, sp, #16
 800aeee:	4630      	mov	r0, r6
 800aef0:	f7fc f89c 	bl	800702c <_printf_i>
 800aef4:	e7e4      	b.n	800aec0 <_vfiprintf_r+0x208>
 800aef6:	bf00      	nop
 800aef8:	0800b52c 	.word	0x0800b52c
 800aefc:	0800b54c 	.word	0x0800b54c
 800af00:	0800b50c 	.word	0x0800b50c
 800af04:	0800b744 	.word	0x0800b744
 800af08:	0800b74e 	.word	0x0800b74e
 800af0c:	08006ae5 	.word	0x08006ae5
 800af10:	0800ac93 	.word	0x0800ac93
 800af14:	0800b74a 	.word	0x0800b74a

0800af18 <nan>:
 800af18:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800af20 <nan+0x8>
 800af1c:	4770      	bx	lr
 800af1e:	bf00      	nop
 800af20:	00000000 	.word	0x00000000
 800af24:	7ff80000 	.word	0x7ff80000

0800af28 <_sbrk_r>:
 800af28:	b538      	push	{r3, r4, r5, lr}
 800af2a:	4d06      	ldr	r5, [pc, #24]	; (800af44 <_sbrk_r+0x1c>)
 800af2c:	2300      	movs	r3, #0
 800af2e:	4604      	mov	r4, r0
 800af30:	4608      	mov	r0, r1
 800af32:	602b      	str	r3, [r5, #0]
 800af34:	f7f6 fdfa 	bl	8001b2c <_sbrk>
 800af38:	1c43      	adds	r3, r0, #1
 800af3a:	d102      	bne.n	800af42 <_sbrk_r+0x1a>
 800af3c:	682b      	ldr	r3, [r5, #0]
 800af3e:	b103      	cbz	r3, 800af42 <_sbrk_r+0x1a>
 800af40:	6023      	str	r3, [r4, #0]
 800af42:	bd38      	pop	{r3, r4, r5, pc}
 800af44:	200004c4 	.word	0x200004c4

0800af48 <__sread>:
 800af48:	b510      	push	{r4, lr}
 800af4a:	460c      	mov	r4, r1
 800af4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af50:	f000 f93a 	bl	800b1c8 <_read_r>
 800af54:	2800      	cmp	r0, #0
 800af56:	bfab      	itete	ge
 800af58:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800af5a:	89a3      	ldrhlt	r3, [r4, #12]
 800af5c:	181b      	addge	r3, r3, r0
 800af5e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800af62:	bfac      	ite	ge
 800af64:	6563      	strge	r3, [r4, #84]	; 0x54
 800af66:	81a3      	strhlt	r3, [r4, #12]
 800af68:	bd10      	pop	{r4, pc}

0800af6a <__swrite>:
 800af6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af6e:	461f      	mov	r7, r3
 800af70:	898b      	ldrh	r3, [r1, #12]
 800af72:	05db      	lsls	r3, r3, #23
 800af74:	4605      	mov	r5, r0
 800af76:	460c      	mov	r4, r1
 800af78:	4616      	mov	r6, r2
 800af7a:	d505      	bpl.n	800af88 <__swrite+0x1e>
 800af7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af80:	2302      	movs	r3, #2
 800af82:	2200      	movs	r2, #0
 800af84:	f000 f8b8 	bl	800b0f8 <_lseek_r>
 800af88:	89a3      	ldrh	r3, [r4, #12]
 800af8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800af8e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800af92:	81a3      	strh	r3, [r4, #12]
 800af94:	4632      	mov	r2, r6
 800af96:	463b      	mov	r3, r7
 800af98:	4628      	mov	r0, r5
 800af9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800af9e:	f000 b837 	b.w	800b010 <_write_r>

0800afa2 <__sseek>:
 800afa2:	b510      	push	{r4, lr}
 800afa4:	460c      	mov	r4, r1
 800afa6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800afaa:	f000 f8a5 	bl	800b0f8 <_lseek_r>
 800afae:	1c43      	adds	r3, r0, #1
 800afb0:	89a3      	ldrh	r3, [r4, #12]
 800afb2:	bf15      	itete	ne
 800afb4:	6560      	strne	r0, [r4, #84]	; 0x54
 800afb6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800afba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800afbe:	81a3      	strheq	r3, [r4, #12]
 800afc0:	bf18      	it	ne
 800afc2:	81a3      	strhne	r3, [r4, #12]
 800afc4:	bd10      	pop	{r4, pc}

0800afc6 <__sclose>:
 800afc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800afca:	f000 b851 	b.w	800b070 <_close_r>

0800afce <strncmp>:
 800afce:	b510      	push	{r4, lr}
 800afd0:	b17a      	cbz	r2, 800aff2 <strncmp+0x24>
 800afd2:	4603      	mov	r3, r0
 800afd4:	3901      	subs	r1, #1
 800afd6:	1884      	adds	r4, r0, r2
 800afd8:	f813 0b01 	ldrb.w	r0, [r3], #1
 800afdc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800afe0:	4290      	cmp	r0, r2
 800afe2:	d101      	bne.n	800afe8 <strncmp+0x1a>
 800afe4:	42a3      	cmp	r3, r4
 800afe6:	d101      	bne.n	800afec <strncmp+0x1e>
 800afe8:	1a80      	subs	r0, r0, r2
 800afea:	bd10      	pop	{r4, pc}
 800afec:	2800      	cmp	r0, #0
 800afee:	d1f3      	bne.n	800afd8 <strncmp+0xa>
 800aff0:	e7fa      	b.n	800afe8 <strncmp+0x1a>
 800aff2:	4610      	mov	r0, r2
 800aff4:	e7f9      	b.n	800afea <strncmp+0x1c>

0800aff6 <__ascii_wctomb>:
 800aff6:	b149      	cbz	r1, 800b00c <__ascii_wctomb+0x16>
 800aff8:	2aff      	cmp	r2, #255	; 0xff
 800affa:	bf85      	ittet	hi
 800affc:	238a      	movhi	r3, #138	; 0x8a
 800affe:	6003      	strhi	r3, [r0, #0]
 800b000:	700a      	strbls	r2, [r1, #0]
 800b002:	f04f 30ff 	movhi.w	r0, #4294967295
 800b006:	bf98      	it	ls
 800b008:	2001      	movls	r0, #1
 800b00a:	4770      	bx	lr
 800b00c:	4608      	mov	r0, r1
 800b00e:	4770      	bx	lr

0800b010 <_write_r>:
 800b010:	b538      	push	{r3, r4, r5, lr}
 800b012:	4d07      	ldr	r5, [pc, #28]	; (800b030 <_write_r+0x20>)
 800b014:	4604      	mov	r4, r0
 800b016:	4608      	mov	r0, r1
 800b018:	4611      	mov	r1, r2
 800b01a:	2200      	movs	r2, #0
 800b01c:	602a      	str	r2, [r5, #0]
 800b01e:	461a      	mov	r2, r3
 800b020:	f7f6 fbb8 	bl	8001794 <_write>
 800b024:	1c43      	adds	r3, r0, #1
 800b026:	d102      	bne.n	800b02e <_write_r+0x1e>
 800b028:	682b      	ldr	r3, [r5, #0]
 800b02a:	b103      	cbz	r3, 800b02e <_write_r+0x1e>
 800b02c:	6023      	str	r3, [r4, #0]
 800b02e:	bd38      	pop	{r3, r4, r5, pc}
 800b030:	200004c4 	.word	0x200004c4

0800b034 <__assert_func>:
 800b034:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b036:	4614      	mov	r4, r2
 800b038:	461a      	mov	r2, r3
 800b03a:	4b09      	ldr	r3, [pc, #36]	; (800b060 <__assert_func+0x2c>)
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	4605      	mov	r5, r0
 800b040:	68d8      	ldr	r0, [r3, #12]
 800b042:	b14c      	cbz	r4, 800b058 <__assert_func+0x24>
 800b044:	4b07      	ldr	r3, [pc, #28]	; (800b064 <__assert_func+0x30>)
 800b046:	9100      	str	r1, [sp, #0]
 800b048:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b04c:	4906      	ldr	r1, [pc, #24]	; (800b068 <__assert_func+0x34>)
 800b04e:	462b      	mov	r3, r5
 800b050:	f000 f81e 	bl	800b090 <fiprintf>
 800b054:	f000 f8ca 	bl	800b1ec <abort>
 800b058:	4b04      	ldr	r3, [pc, #16]	; (800b06c <__assert_func+0x38>)
 800b05a:	461c      	mov	r4, r3
 800b05c:	e7f3      	b.n	800b046 <__assert_func+0x12>
 800b05e:	bf00      	nop
 800b060:	200001d4 	.word	0x200001d4
 800b064:	0800b755 	.word	0x0800b755
 800b068:	0800b762 	.word	0x0800b762
 800b06c:	0800b790 	.word	0x0800b790

0800b070 <_close_r>:
 800b070:	b538      	push	{r3, r4, r5, lr}
 800b072:	4d06      	ldr	r5, [pc, #24]	; (800b08c <_close_r+0x1c>)
 800b074:	2300      	movs	r3, #0
 800b076:	4604      	mov	r4, r0
 800b078:	4608      	mov	r0, r1
 800b07a:	602b      	str	r3, [r5, #0]
 800b07c:	f7f6 fd21 	bl	8001ac2 <_close>
 800b080:	1c43      	adds	r3, r0, #1
 800b082:	d102      	bne.n	800b08a <_close_r+0x1a>
 800b084:	682b      	ldr	r3, [r5, #0]
 800b086:	b103      	cbz	r3, 800b08a <_close_r+0x1a>
 800b088:	6023      	str	r3, [r4, #0]
 800b08a:	bd38      	pop	{r3, r4, r5, pc}
 800b08c:	200004c4 	.word	0x200004c4

0800b090 <fiprintf>:
 800b090:	b40e      	push	{r1, r2, r3}
 800b092:	b503      	push	{r0, r1, lr}
 800b094:	4601      	mov	r1, r0
 800b096:	ab03      	add	r3, sp, #12
 800b098:	4805      	ldr	r0, [pc, #20]	; (800b0b0 <fiprintf+0x20>)
 800b09a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b09e:	6800      	ldr	r0, [r0, #0]
 800b0a0:	9301      	str	r3, [sp, #4]
 800b0a2:	f7ff fe09 	bl	800acb8 <_vfiprintf_r>
 800b0a6:	b002      	add	sp, #8
 800b0a8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b0ac:	b003      	add	sp, #12
 800b0ae:	4770      	bx	lr
 800b0b0:	200001d4 	.word	0x200001d4

0800b0b4 <_fstat_r>:
 800b0b4:	b538      	push	{r3, r4, r5, lr}
 800b0b6:	4d07      	ldr	r5, [pc, #28]	; (800b0d4 <_fstat_r+0x20>)
 800b0b8:	2300      	movs	r3, #0
 800b0ba:	4604      	mov	r4, r0
 800b0bc:	4608      	mov	r0, r1
 800b0be:	4611      	mov	r1, r2
 800b0c0:	602b      	str	r3, [r5, #0]
 800b0c2:	f7f6 fd0a 	bl	8001ada <_fstat>
 800b0c6:	1c43      	adds	r3, r0, #1
 800b0c8:	d102      	bne.n	800b0d0 <_fstat_r+0x1c>
 800b0ca:	682b      	ldr	r3, [r5, #0]
 800b0cc:	b103      	cbz	r3, 800b0d0 <_fstat_r+0x1c>
 800b0ce:	6023      	str	r3, [r4, #0]
 800b0d0:	bd38      	pop	{r3, r4, r5, pc}
 800b0d2:	bf00      	nop
 800b0d4:	200004c4 	.word	0x200004c4

0800b0d8 <_isatty_r>:
 800b0d8:	b538      	push	{r3, r4, r5, lr}
 800b0da:	4d06      	ldr	r5, [pc, #24]	; (800b0f4 <_isatty_r+0x1c>)
 800b0dc:	2300      	movs	r3, #0
 800b0de:	4604      	mov	r4, r0
 800b0e0:	4608      	mov	r0, r1
 800b0e2:	602b      	str	r3, [r5, #0]
 800b0e4:	f7f6 fd09 	bl	8001afa <_isatty>
 800b0e8:	1c43      	adds	r3, r0, #1
 800b0ea:	d102      	bne.n	800b0f2 <_isatty_r+0x1a>
 800b0ec:	682b      	ldr	r3, [r5, #0]
 800b0ee:	b103      	cbz	r3, 800b0f2 <_isatty_r+0x1a>
 800b0f0:	6023      	str	r3, [r4, #0]
 800b0f2:	bd38      	pop	{r3, r4, r5, pc}
 800b0f4:	200004c4 	.word	0x200004c4

0800b0f8 <_lseek_r>:
 800b0f8:	b538      	push	{r3, r4, r5, lr}
 800b0fa:	4d07      	ldr	r5, [pc, #28]	; (800b118 <_lseek_r+0x20>)
 800b0fc:	4604      	mov	r4, r0
 800b0fe:	4608      	mov	r0, r1
 800b100:	4611      	mov	r1, r2
 800b102:	2200      	movs	r2, #0
 800b104:	602a      	str	r2, [r5, #0]
 800b106:	461a      	mov	r2, r3
 800b108:	f7f6 fd02 	bl	8001b10 <_lseek>
 800b10c:	1c43      	adds	r3, r0, #1
 800b10e:	d102      	bne.n	800b116 <_lseek_r+0x1e>
 800b110:	682b      	ldr	r3, [r5, #0]
 800b112:	b103      	cbz	r3, 800b116 <_lseek_r+0x1e>
 800b114:	6023      	str	r3, [r4, #0]
 800b116:	bd38      	pop	{r3, r4, r5, pc}
 800b118:	200004c4 	.word	0x200004c4

0800b11c <memmove>:
 800b11c:	4288      	cmp	r0, r1
 800b11e:	b510      	push	{r4, lr}
 800b120:	eb01 0402 	add.w	r4, r1, r2
 800b124:	d902      	bls.n	800b12c <memmove+0x10>
 800b126:	4284      	cmp	r4, r0
 800b128:	4623      	mov	r3, r4
 800b12a:	d807      	bhi.n	800b13c <memmove+0x20>
 800b12c:	1e43      	subs	r3, r0, #1
 800b12e:	42a1      	cmp	r1, r4
 800b130:	d008      	beq.n	800b144 <memmove+0x28>
 800b132:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b136:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b13a:	e7f8      	b.n	800b12e <memmove+0x12>
 800b13c:	4402      	add	r2, r0
 800b13e:	4601      	mov	r1, r0
 800b140:	428a      	cmp	r2, r1
 800b142:	d100      	bne.n	800b146 <memmove+0x2a>
 800b144:	bd10      	pop	{r4, pc}
 800b146:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b14a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b14e:	e7f7      	b.n	800b140 <memmove+0x24>

0800b150 <__malloc_lock>:
 800b150:	4801      	ldr	r0, [pc, #4]	; (800b158 <__malloc_lock+0x8>)
 800b152:	f7fe bdf2 	b.w	8009d3a <__retarget_lock_acquire_recursive>
 800b156:	bf00      	nop
 800b158:	200004b8 	.word	0x200004b8

0800b15c <__malloc_unlock>:
 800b15c:	4801      	ldr	r0, [pc, #4]	; (800b164 <__malloc_unlock+0x8>)
 800b15e:	f7fe bded 	b.w	8009d3c <__retarget_lock_release_recursive>
 800b162:	bf00      	nop
 800b164:	200004b8 	.word	0x200004b8

0800b168 <_realloc_r>:
 800b168:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b16c:	4680      	mov	r8, r0
 800b16e:	4614      	mov	r4, r2
 800b170:	460e      	mov	r6, r1
 800b172:	b921      	cbnz	r1, 800b17e <_realloc_r+0x16>
 800b174:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b178:	4611      	mov	r1, r2
 800b17a:	f7ff bba3 	b.w	800a8c4 <_malloc_r>
 800b17e:	b92a      	cbnz	r2, 800b18c <_realloc_r+0x24>
 800b180:	f7ff fb34 	bl	800a7ec <_free_r>
 800b184:	4625      	mov	r5, r4
 800b186:	4628      	mov	r0, r5
 800b188:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b18c:	f000 f835 	bl	800b1fa <_malloc_usable_size_r>
 800b190:	4284      	cmp	r4, r0
 800b192:	4607      	mov	r7, r0
 800b194:	d802      	bhi.n	800b19c <_realloc_r+0x34>
 800b196:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b19a:	d812      	bhi.n	800b1c2 <_realloc_r+0x5a>
 800b19c:	4621      	mov	r1, r4
 800b19e:	4640      	mov	r0, r8
 800b1a0:	f7ff fb90 	bl	800a8c4 <_malloc_r>
 800b1a4:	4605      	mov	r5, r0
 800b1a6:	2800      	cmp	r0, #0
 800b1a8:	d0ed      	beq.n	800b186 <_realloc_r+0x1e>
 800b1aa:	42bc      	cmp	r4, r7
 800b1ac:	4622      	mov	r2, r4
 800b1ae:	4631      	mov	r1, r6
 800b1b0:	bf28      	it	cs
 800b1b2:	463a      	movcs	r2, r7
 800b1b4:	f7fb fbe0 	bl	8006978 <memcpy>
 800b1b8:	4631      	mov	r1, r6
 800b1ba:	4640      	mov	r0, r8
 800b1bc:	f7ff fb16 	bl	800a7ec <_free_r>
 800b1c0:	e7e1      	b.n	800b186 <_realloc_r+0x1e>
 800b1c2:	4635      	mov	r5, r6
 800b1c4:	e7df      	b.n	800b186 <_realloc_r+0x1e>
	...

0800b1c8 <_read_r>:
 800b1c8:	b538      	push	{r3, r4, r5, lr}
 800b1ca:	4d07      	ldr	r5, [pc, #28]	; (800b1e8 <_read_r+0x20>)
 800b1cc:	4604      	mov	r4, r0
 800b1ce:	4608      	mov	r0, r1
 800b1d0:	4611      	mov	r1, r2
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	602a      	str	r2, [r5, #0]
 800b1d6:	461a      	mov	r2, r3
 800b1d8:	f7f6 fc56 	bl	8001a88 <_read>
 800b1dc:	1c43      	adds	r3, r0, #1
 800b1de:	d102      	bne.n	800b1e6 <_read_r+0x1e>
 800b1e0:	682b      	ldr	r3, [r5, #0]
 800b1e2:	b103      	cbz	r3, 800b1e6 <_read_r+0x1e>
 800b1e4:	6023      	str	r3, [r4, #0]
 800b1e6:	bd38      	pop	{r3, r4, r5, pc}
 800b1e8:	200004c4 	.word	0x200004c4

0800b1ec <abort>:
 800b1ec:	b508      	push	{r3, lr}
 800b1ee:	2006      	movs	r0, #6
 800b1f0:	f000 f834 	bl	800b25c <raise>
 800b1f4:	2001      	movs	r0, #1
 800b1f6:	f7f6 fc3d 	bl	8001a74 <_exit>

0800b1fa <_malloc_usable_size_r>:
 800b1fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b1fe:	1f18      	subs	r0, r3, #4
 800b200:	2b00      	cmp	r3, #0
 800b202:	bfbc      	itt	lt
 800b204:	580b      	ldrlt	r3, [r1, r0]
 800b206:	18c0      	addlt	r0, r0, r3
 800b208:	4770      	bx	lr

0800b20a <_raise_r>:
 800b20a:	291f      	cmp	r1, #31
 800b20c:	b538      	push	{r3, r4, r5, lr}
 800b20e:	4604      	mov	r4, r0
 800b210:	460d      	mov	r5, r1
 800b212:	d904      	bls.n	800b21e <_raise_r+0x14>
 800b214:	2316      	movs	r3, #22
 800b216:	6003      	str	r3, [r0, #0]
 800b218:	f04f 30ff 	mov.w	r0, #4294967295
 800b21c:	bd38      	pop	{r3, r4, r5, pc}
 800b21e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b220:	b112      	cbz	r2, 800b228 <_raise_r+0x1e>
 800b222:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b226:	b94b      	cbnz	r3, 800b23c <_raise_r+0x32>
 800b228:	4620      	mov	r0, r4
 800b22a:	f000 f831 	bl	800b290 <_getpid_r>
 800b22e:	462a      	mov	r2, r5
 800b230:	4601      	mov	r1, r0
 800b232:	4620      	mov	r0, r4
 800b234:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b238:	f000 b818 	b.w	800b26c <_kill_r>
 800b23c:	2b01      	cmp	r3, #1
 800b23e:	d00a      	beq.n	800b256 <_raise_r+0x4c>
 800b240:	1c59      	adds	r1, r3, #1
 800b242:	d103      	bne.n	800b24c <_raise_r+0x42>
 800b244:	2316      	movs	r3, #22
 800b246:	6003      	str	r3, [r0, #0]
 800b248:	2001      	movs	r0, #1
 800b24a:	e7e7      	b.n	800b21c <_raise_r+0x12>
 800b24c:	2400      	movs	r4, #0
 800b24e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b252:	4628      	mov	r0, r5
 800b254:	4798      	blx	r3
 800b256:	2000      	movs	r0, #0
 800b258:	e7e0      	b.n	800b21c <_raise_r+0x12>
	...

0800b25c <raise>:
 800b25c:	4b02      	ldr	r3, [pc, #8]	; (800b268 <raise+0xc>)
 800b25e:	4601      	mov	r1, r0
 800b260:	6818      	ldr	r0, [r3, #0]
 800b262:	f7ff bfd2 	b.w	800b20a <_raise_r>
 800b266:	bf00      	nop
 800b268:	200001d4 	.word	0x200001d4

0800b26c <_kill_r>:
 800b26c:	b538      	push	{r3, r4, r5, lr}
 800b26e:	4d07      	ldr	r5, [pc, #28]	; (800b28c <_kill_r+0x20>)
 800b270:	2300      	movs	r3, #0
 800b272:	4604      	mov	r4, r0
 800b274:	4608      	mov	r0, r1
 800b276:	4611      	mov	r1, r2
 800b278:	602b      	str	r3, [r5, #0]
 800b27a:	f7f6 fbeb 	bl	8001a54 <_kill>
 800b27e:	1c43      	adds	r3, r0, #1
 800b280:	d102      	bne.n	800b288 <_kill_r+0x1c>
 800b282:	682b      	ldr	r3, [r5, #0]
 800b284:	b103      	cbz	r3, 800b288 <_kill_r+0x1c>
 800b286:	6023      	str	r3, [r4, #0]
 800b288:	bd38      	pop	{r3, r4, r5, pc}
 800b28a:	bf00      	nop
 800b28c:	200004c4 	.word	0x200004c4

0800b290 <_getpid_r>:
 800b290:	f7f6 bbd8 	b.w	8001a44 <_getpid>

0800b294 <_init>:
 800b294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b296:	bf00      	nop
 800b298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b29a:	bc08      	pop	{r3}
 800b29c:	469e      	mov	lr, r3
 800b29e:	4770      	bx	lr

0800b2a0 <_fini>:
 800b2a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2a2:	bf00      	nop
 800b2a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b2a6:	bc08      	pop	{r3}
 800b2a8:	469e      	mov	lr, r3
 800b2aa:	4770      	bx	lr
