
IMU_HW579.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000afb8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004dc  0800b168  0800b168  0001b168  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b644  0800b644  00020244  2**0
                  CONTENTS
  4 .ARM          00000008  0800b644  0800b644  0001b644  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b64c  0800b64c  00020244  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b64c  0800b64c  0001b64c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b650  0800b650  0001b650  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000244  20000000  0800b654  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020244  2**0
                  CONTENTS
 10 .bss          00000120  20000244  20000244  00020244  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000364  20000364  00020244  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e7ef  00000000  00000000  00020274  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002416  00000000  00000000  0002ea63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b68  00000000  00000000  00030e80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000a78  00000000  00000000  000319e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003bb9  00000000  00000000  00032460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fb96  00000000  00000000  00036019  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d5f9d  00000000  00000000  00045baf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0011bb4c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000437c  00000000  00000000  0011bb9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000244 	.word	0x20000244
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800b150 	.word	0x0800b150

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000248 	.word	0x20000248
 80001ec:	0800b150 	.word	0x0800b150

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9aa 	b.w	8001014 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468e      	mov	lr, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d14d      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d52:	428a      	cmp	r2, r1
 8000d54:	4694      	mov	ip, r2
 8000d56:	d969      	bls.n	8000e2c <__udivmoddi4+0xe8>
 8000d58:	fab2 f282 	clz	r2, r2
 8000d5c:	b152      	cbz	r2, 8000d74 <__udivmoddi4+0x30>
 8000d5e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d62:	f1c2 0120 	rsb	r1, r2, #32
 8000d66:	fa20 f101 	lsr.w	r1, r0, r1
 8000d6a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d72:	4094      	lsls	r4, r2
 8000d74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d78:	0c21      	lsrs	r1, r4, #16
 8000d7a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d7e:	fa1f f78c 	uxth.w	r7, ip
 8000d82:	fb08 e316 	mls	r3, r8, r6, lr
 8000d86:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d8a:	fb06 f107 	mul.w	r1, r6, r7
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d9a:	f080 811f 	bcs.w	8000fdc <__udivmoddi4+0x298>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 811c 	bls.w	8000fdc <__udivmoddi4+0x298>
 8000da4:	3e02      	subs	r6, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a5b      	subs	r3, r3, r1
 8000daa:	b2a4      	uxth	r4, r4
 8000dac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db0:	fb08 3310 	mls	r3, r8, r0, r3
 8000db4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db8:	fb00 f707 	mul.w	r7, r0, r7
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	d90a      	bls.n	8000dd6 <__udivmoddi4+0x92>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc8:	f080 810a 	bcs.w	8000fe0 <__udivmoddi4+0x29c>
 8000dcc:	42a7      	cmp	r7, r4
 8000dce:	f240 8107 	bls.w	8000fe0 <__udivmoddi4+0x29c>
 8000dd2:	4464      	add	r4, ip
 8000dd4:	3802      	subs	r0, #2
 8000dd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dda:	1be4      	subs	r4, r4, r7
 8000ddc:	2600      	movs	r6, #0
 8000dde:	b11d      	cbz	r5, 8000de8 <__udivmoddi4+0xa4>
 8000de0:	40d4      	lsrs	r4, r2
 8000de2:	2300      	movs	r3, #0
 8000de4:	e9c5 4300 	strd	r4, r3, [r5]
 8000de8:	4631      	mov	r1, r6
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d909      	bls.n	8000e06 <__udivmoddi4+0xc2>
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	f000 80ef 	beq.w	8000fd6 <__udivmoddi4+0x292>
 8000df8:	2600      	movs	r6, #0
 8000dfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dfe:	4630      	mov	r0, r6
 8000e00:	4631      	mov	r1, r6
 8000e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e06:	fab3 f683 	clz	r6, r3
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	d14a      	bne.n	8000ea4 <__udivmoddi4+0x160>
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d302      	bcc.n	8000e18 <__udivmoddi4+0xd4>
 8000e12:	4282      	cmp	r2, r0
 8000e14:	f200 80f9 	bhi.w	800100a <__udivmoddi4+0x2c6>
 8000e18:	1a84      	subs	r4, r0, r2
 8000e1a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e1e:	2001      	movs	r0, #1
 8000e20:	469e      	mov	lr, r3
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	d0e0      	beq.n	8000de8 <__udivmoddi4+0xa4>
 8000e26:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e2a:	e7dd      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000e2c:	b902      	cbnz	r2, 8000e30 <__udivmoddi4+0xec>
 8000e2e:	deff      	udf	#255	; 0xff
 8000e30:	fab2 f282 	clz	r2, r2
 8000e34:	2a00      	cmp	r2, #0
 8000e36:	f040 8092 	bne.w	8000f5e <__udivmoddi4+0x21a>
 8000e3a:	eba1 010c 	sub.w	r1, r1, ip
 8000e3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e42:	fa1f fe8c 	uxth.w	lr, ip
 8000e46:	2601      	movs	r6, #1
 8000e48:	0c20      	lsrs	r0, r4, #16
 8000e4a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e4e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e56:	fb0e f003 	mul.w	r0, lr, r3
 8000e5a:	4288      	cmp	r0, r1
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x12c>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x12a>
 8000e68:	4288      	cmp	r0, r1
 8000e6a:	f200 80cb 	bhi.w	8001004 <__udivmoddi4+0x2c0>
 8000e6e:	4643      	mov	r3, r8
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e78:	fb07 1110 	mls	r1, r7, r0, r1
 8000e7c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e80:	fb0e fe00 	mul.w	lr, lr, r0
 8000e84:	45a6      	cmp	lr, r4
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x156>
 8000e88:	eb1c 0404 	adds.w	r4, ip, r4
 8000e8c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e90:	d202      	bcs.n	8000e98 <__udivmoddi4+0x154>
 8000e92:	45a6      	cmp	lr, r4
 8000e94:	f200 80bb 	bhi.w	800100e <__udivmoddi4+0x2ca>
 8000e98:	4608      	mov	r0, r1
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ea2:	e79c      	b.n	8000dde <__udivmoddi4+0x9a>
 8000ea4:	f1c6 0720 	rsb	r7, r6, #32
 8000ea8:	40b3      	lsls	r3, r6
 8000eaa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eb2:	fa20 f407 	lsr.w	r4, r0, r7
 8000eb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eba:	431c      	orrs	r4, r3
 8000ebc:	40f9      	lsrs	r1, r7
 8000ebe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ec2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eca:	0c20      	lsrs	r0, r4, #16
 8000ecc:	fa1f fe8c 	uxth.w	lr, ip
 8000ed0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ed4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ed8:	fb08 f00e 	mul.w	r0, r8, lr
 8000edc:	4288      	cmp	r0, r1
 8000ede:	fa02 f206 	lsl.w	r2, r2, r6
 8000ee2:	d90b      	bls.n	8000efc <__udivmoddi4+0x1b8>
 8000ee4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000eec:	f080 8088 	bcs.w	8001000 <__udivmoddi4+0x2bc>
 8000ef0:	4288      	cmp	r0, r1
 8000ef2:	f240 8085 	bls.w	8001000 <__udivmoddi4+0x2bc>
 8000ef6:	f1a8 0802 	sub.w	r8, r8, #2
 8000efa:	4461      	add	r1, ip
 8000efc:	1a09      	subs	r1, r1, r0
 8000efe:	b2a4      	uxth	r4, r4
 8000f00:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f04:	fb09 1110 	mls	r1, r9, r0, r1
 8000f08:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f10:	458e      	cmp	lr, r1
 8000f12:	d908      	bls.n	8000f26 <__udivmoddi4+0x1e2>
 8000f14:	eb1c 0101 	adds.w	r1, ip, r1
 8000f18:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f1c:	d26c      	bcs.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f1e:	458e      	cmp	lr, r1
 8000f20:	d96a      	bls.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f22:	3802      	subs	r0, #2
 8000f24:	4461      	add	r1, ip
 8000f26:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f2a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f2e:	eba1 010e 	sub.w	r1, r1, lr
 8000f32:	42a1      	cmp	r1, r4
 8000f34:	46c8      	mov	r8, r9
 8000f36:	46a6      	mov	lr, r4
 8000f38:	d356      	bcc.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f3a:	d053      	beq.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f3c:	b15d      	cbz	r5, 8000f56 <__udivmoddi4+0x212>
 8000f3e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f42:	eb61 010e 	sbc.w	r1, r1, lr
 8000f46:	fa01 f707 	lsl.w	r7, r1, r7
 8000f4a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f4e:	40f1      	lsrs	r1, r6
 8000f50:	431f      	orrs	r7, r3
 8000f52:	e9c5 7100 	strd	r7, r1, [r5]
 8000f56:	2600      	movs	r6, #0
 8000f58:	4631      	mov	r1, r6
 8000f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f5e:	f1c2 0320 	rsb	r3, r2, #32
 8000f62:	40d8      	lsrs	r0, r3
 8000f64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f68:	fa21 f303 	lsr.w	r3, r1, r3
 8000f6c:	4091      	lsls	r1, r2
 8000f6e:	4301      	orrs	r1, r0
 8000f70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f74:	fa1f fe8c 	uxth.w	lr, ip
 8000f78:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f7c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f80:	0c0b      	lsrs	r3, r1, #16
 8000f82:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f86:	fb00 f60e 	mul.w	r6, r0, lr
 8000f8a:	429e      	cmp	r6, r3
 8000f8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f90:	d908      	bls.n	8000fa4 <__udivmoddi4+0x260>
 8000f92:	eb1c 0303 	adds.w	r3, ip, r3
 8000f96:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f9a:	d22f      	bcs.n	8000ffc <__udivmoddi4+0x2b8>
 8000f9c:	429e      	cmp	r6, r3
 8000f9e:	d92d      	bls.n	8000ffc <__udivmoddi4+0x2b8>
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	4463      	add	r3, ip
 8000fa4:	1b9b      	subs	r3, r3, r6
 8000fa6:	b289      	uxth	r1, r1
 8000fa8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fac:	fb07 3316 	mls	r3, r7, r6, r3
 8000fb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fb4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fb8:	428b      	cmp	r3, r1
 8000fba:	d908      	bls.n	8000fce <__udivmoddi4+0x28a>
 8000fbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fc0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fc4:	d216      	bcs.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fc6:	428b      	cmp	r3, r1
 8000fc8:	d914      	bls.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fca:	3e02      	subs	r6, #2
 8000fcc:	4461      	add	r1, ip
 8000fce:	1ac9      	subs	r1, r1, r3
 8000fd0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fd4:	e738      	b.n	8000e48 <__udivmoddi4+0x104>
 8000fd6:	462e      	mov	r6, r5
 8000fd8:	4628      	mov	r0, r5
 8000fda:	e705      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000fdc:	4606      	mov	r6, r0
 8000fde:	e6e3      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	e6f8      	b.n	8000dd6 <__udivmoddi4+0x92>
 8000fe4:	454b      	cmp	r3, r9
 8000fe6:	d2a9      	bcs.n	8000f3c <__udivmoddi4+0x1f8>
 8000fe8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fec:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ff0:	3801      	subs	r0, #1
 8000ff2:	e7a3      	b.n	8000f3c <__udivmoddi4+0x1f8>
 8000ff4:	4646      	mov	r6, r8
 8000ff6:	e7ea      	b.n	8000fce <__udivmoddi4+0x28a>
 8000ff8:	4620      	mov	r0, r4
 8000ffa:	e794      	b.n	8000f26 <__udivmoddi4+0x1e2>
 8000ffc:	4640      	mov	r0, r8
 8000ffe:	e7d1      	b.n	8000fa4 <__udivmoddi4+0x260>
 8001000:	46d0      	mov	r8, sl
 8001002:	e77b      	b.n	8000efc <__udivmoddi4+0x1b8>
 8001004:	3b02      	subs	r3, #2
 8001006:	4461      	add	r1, ip
 8001008:	e732      	b.n	8000e70 <__udivmoddi4+0x12c>
 800100a:	4630      	mov	r0, r6
 800100c:	e709      	b.n	8000e22 <__udivmoddi4+0xde>
 800100e:	4464      	add	r4, ip
 8001010:	3802      	subs	r0, #2
 8001012:	e742      	b.n	8000e9a <__udivmoddi4+0x156>

08001014 <__aeabi_idiv0>:
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <Gyro_Writebyte>:

extern I2C_HandleTypeDef hi2c1;

ITG3205 GYRO = {.gyro_address = 0xD0};

void Gyro_Writebyte(ITG3205 * SENSOR,uint8_t register_address,uint8_t data){
 8001018:	b580      	push	{r7, lr}
 800101a:	b086      	sub	sp, #24
 800101c:	af02      	add	r7, sp, #8
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	460b      	mov	r3, r1
 8001022:	70fb      	strb	r3, [r7, #3]
 8001024:	4613      	mov	r3, r2
 8001026:	70bb      	strb	r3, [r7, #2]
    uint8_t Trans[2]={register_address, data};
 8001028:	78fb      	ldrb	r3, [r7, #3]
 800102a:	733b      	strb	r3, [r7, #12]
 800102c:	78bb      	ldrb	r3, [r7, #2]
 800102e:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(&(SENSOR->i2c), SENSOR->gyro_address,Trans,2,10);
 8001030:	6878      	ldr	r0, [r7, #4]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001038:	b299      	uxth	r1, r3
 800103a:	f107 020c 	add.w	r2, r7, #12
 800103e:	230a      	movs	r3, #10
 8001040:	9300      	str	r3, [sp, #0]
 8001042:	2302      	movs	r3, #2
 8001044:	f001 fb0a 	bl	800265c <HAL_I2C_Master_Transmit>
}
 8001048:	bf00      	nop
 800104a:	3710      	adds	r7, #16
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}

08001050 <Gyro_Init>:
    HAL_I2C_Master_Receive(&(SENSOR->i2c),SENSOR->gyro_address,Receive,1,10);

    return Receive[0];
}

void Gyro_Init(ITG3205* SENSOR){
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]

	SENSOR = &GYRO;
 8001058:	4b1d      	ldr	r3, [pc, #116]	; (80010d0 <Gyro_Init+0x80>)
 800105a:	607b      	str	r3, [r7, #4]
	SENSOR->i2c = hi2c1;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	4a1d      	ldr	r2, [pc, #116]	; (80010d4 <Gyro_Init+0x84>)
 8001060:	4618      	mov	r0, r3
 8001062:	4611      	mov	r1, r2
 8001064:	2354      	movs	r3, #84	; 0x54
 8001066:	461a      	mov	r2, r3
 8001068:	f005 fbe0 	bl	800682c <memcpy>

    Gyro_Writebyte(SENSOR,PWR_MGM,0x00);
 800106c:	2200      	movs	r2, #0
 800106e:	213e      	movs	r1, #62	; 0x3e
 8001070:	6878      	ldr	r0, [r7, #4]
 8001072:	f7ff ffd1 	bl	8001018 <Gyro_Writebyte>

    HAL_Delay(100);
 8001076:	2064      	movs	r0, #100	; 0x64
 8001078:	f000 fe10 	bl	8001c9c <HAL_Delay>
    Gyro_Writebyte(SENSOR,PWR_MGM,0x01);
 800107c:	2201      	movs	r2, #1
 800107e:	213e      	movs	r1, #62	; 0x3e
 8001080:	6878      	ldr	r0, [r7, #4]
 8001082:	f7ff ffc9 	bl	8001018 <Gyro_Writebyte>

    Gyro_Writebyte(SENSOR,SMPLRT_DIV,0X00);
 8001086:	2200      	movs	r2, #0
 8001088:	2115      	movs	r1, #21
 800108a:	6878      	ldr	r0, [r7, #4]
 800108c:	f7ff ffc4 	bl	8001018 <Gyro_Writebyte>

    Gyro_Writebyte(SENSOR,DLPFFS_FS_SEL, 0x03 << 3);
 8001090:	2218      	movs	r2, #24
 8001092:	2118      	movs	r1, #24
 8001094:	6878      	ldr	r0, [r7, #4]
 8001096:	f7ff ffbf 	bl	8001018 <Gyro_Writebyte>

    Gyro_Writebyte(SENSOR,DLPFFS_DLPF_CFG, BW256_SR8);
 800109a:	2200      	movs	r2, #0
 800109c:	2107      	movs	r1, #7
 800109e:	6878      	ldr	r0, [r7, #4]
 80010a0:	f7ff ffba 	bl	8001018 <Gyro_Writebyte>

    Gyro_Writebyte(SENSOR,PWRMGM_CLK_SEL, PLL_ZGYRO_REF);
 80010a4:	2203      	movs	r2, #3
 80010a6:	2107      	movs	r1, #7
 80010a8:	6878      	ldr	r0, [r7, #4]
 80010aa:	f7ff ffb5 	bl	8001018 <Gyro_Writebyte>

    Gyro_Writebyte(SENSOR,INTCFG_ITG_RDY_EN, 0x01 <<2);
 80010ae:	2204      	movs	r2, #4
 80010b0:	2104      	movs	r1, #4
 80010b2:	6878      	ldr	r0, [r7, #4]
 80010b4:	f7ff ffb0 	bl	8001018 <Gyro_Writebyte>

    Gyro_Writebyte(SENSOR,INTCFG_RAW_RDY_EN, 0x01);
 80010b8:	2201      	movs	r2, #1
 80010ba:	2101      	movs	r1, #1
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	f7ff ffab 	bl	8001018 <Gyro_Writebyte>

    HAL_Delay(GYROSTART_UP_DELAY);
 80010c2:	2046      	movs	r0, #70	; 0x46
 80010c4:	f000 fdea 	bl	8001c9c <HAL_Delay>

}
 80010c8:	bf00      	nop
 80010ca:	3708      	adds	r7, #8
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	20000000 	.word	0x20000000
 80010d4:	20000260 	.word	0x20000260

080010d8 <Read_Gyro>:

void Read_Gyro(ITG3205* SENSOR){
 80010d8:	b580      	push	{r7, lr}
 80010da:	b08a      	sub	sp, #40	; 0x28
 80010dc:	af04      	add	r7, sp, #16
 80010de:	6078      	str	r0, [r7, #4]
    uint8_t databuf[6];
    int16_t raw_X,raw_Y,raw_Z;

    SENSOR = &GYRO;
 80010e0:	4b43      	ldr	r3, [pc, #268]	; (80011f0 <Read_Gyro+0x118>)
 80010e2:	607b      	str	r3, [r7, #4]
    SENSOR->i2c = hi2c1;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	4a43      	ldr	r2, [pc, #268]	; (80011f4 <Read_Gyro+0x11c>)
 80010e8:	4618      	mov	r0, r3
 80010ea:	4611      	mov	r1, r2
 80010ec:	2354      	movs	r3, #84	; 0x54
 80010ee:	461a      	mov	r2, r3
 80010f0:	f005 fb9c 	bl	800682c <memcpy>

    HAL_I2C_Mem_Read(&(SENSOR->i2c), SENSOR->gyro_address,GYRO_XOUT,I2C_MEMADD_SIZE_8BIT,databuf,6,10);
 80010f4:	6878      	ldr	r0, [r7, #4]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80010fc:	b299      	uxth	r1, r3
 80010fe:	230a      	movs	r3, #10
 8001100:	9302      	str	r3, [sp, #8]
 8001102:	2306      	movs	r3, #6
 8001104:	9301      	str	r3, [sp, #4]
 8001106:	f107 030c 	add.w	r3, r7, #12
 800110a:	9300      	str	r3, [sp, #0]
 800110c:	2301      	movs	r3, #1
 800110e:	221d      	movs	r2, #29
 8001110:	f001 fba2 	bl	8002858 <HAL_I2C_Mem_Read>
    raw_X = ((databuf[0]<<8)|databuf[1]);
 8001114:	7b3b      	ldrb	r3, [r7, #12]
 8001116:	021b      	lsls	r3, r3, #8
 8001118:	b21a      	sxth	r2, r3
 800111a:	7b7b      	ldrb	r3, [r7, #13]
 800111c:	b21b      	sxth	r3, r3
 800111e:	4313      	orrs	r3, r2
 8001120:	82fb      	strh	r3, [r7, #22]
    raw_Y = ((databuf[2]<<8)|databuf[3]);
 8001122:	7bbb      	ldrb	r3, [r7, #14]
 8001124:	021b      	lsls	r3, r3, #8
 8001126:	b21a      	sxth	r2, r3
 8001128:	7bfb      	ldrb	r3, [r7, #15]
 800112a:	b21b      	sxth	r3, r3
 800112c:	4313      	orrs	r3, r2
 800112e:	82bb      	strh	r3, [r7, #20]
    raw_Z = ((databuf[4]<<8)|databuf[5]);
 8001130:	7c3b      	ldrb	r3, [r7, #16]
 8001132:	021b      	lsls	r3, r3, #8
 8001134:	b21a      	sxth	r2, r3
 8001136:	7c7b      	ldrb	r3, [r7, #17]
 8001138:	b21b      	sxth	r3, r3
 800113a:	4313      	orrs	r3, r2
 800113c:	827b      	strh	r3, [r7, #18]


    SENSOR->gyro_X = ((float)(raw_X))/16.4 + 20;
 800113e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001142:	ee07 3a90 	vmov	s15, r3
 8001146:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800114a:	ee17 0a90 	vmov	r0, s15
 800114e:	f7ff fa0b 	bl	8000568 <__aeabi_f2d>
 8001152:	a325      	add	r3, pc, #148	; (adr r3, 80011e8 <Read_Gyro+0x110>)
 8001154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001158:	f7ff fb88 	bl	800086c <__aeabi_ddiv>
 800115c:	4602      	mov	r2, r0
 800115e:	460b      	mov	r3, r1
 8001160:	4610      	mov	r0, r2
 8001162:	4619      	mov	r1, r3
 8001164:	f04f 0200 	mov.w	r2, #0
 8001168:	4b23      	ldr	r3, [pc, #140]	; (80011f8 <Read_Gyro+0x120>)
 800116a:	f7ff f89f 	bl	80002ac <__adddf3>
 800116e:	4602      	mov	r2, r0
 8001170:	460b      	mov	r3, r1
 8001172:	4610      	mov	r0, r2
 8001174:	4619      	mov	r1, r3
 8001176:	f7ff fd47 	bl	8000c08 <__aeabi_d2f>
 800117a:	4602      	mov	r2, r0
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	659a      	str	r2, [r3, #88]	; 0x58
    SENSOR->gyro_Y = ((float)(raw_Y))/16.4;
 8001180:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001184:	ee07 3a90 	vmov	s15, r3
 8001188:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800118c:	ee17 0a90 	vmov	r0, s15
 8001190:	f7ff f9ea 	bl	8000568 <__aeabi_f2d>
 8001194:	a314      	add	r3, pc, #80	; (adr r3, 80011e8 <Read_Gyro+0x110>)
 8001196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800119a:	f7ff fb67 	bl	800086c <__aeabi_ddiv>
 800119e:	4602      	mov	r2, r0
 80011a0:	460b      	mov	r3, r1
 80011a2:	4610      	mov	r0, r2
 80011a4:	4619      	mov	r1, r3
 80011a6:	f7ff fd2f 	bl	8000c08 <__aeabi_d2f>
 80011aa:	4602      	mov	r2, r0
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	65da      	str	r2, [r3, #92]	; 0x5c
    SENSOR->gyro_Z = ((float)(raw_Z))/16.4;
 80011b0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80011b4:	ee07 3a90 	vmov	s15, r3
 80011b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011bc:	ee17 0a90 	vmov	r0, s15
 80011c0:	f7ff f9d2 	bl	8000568 <__aeabi_f2d>
 80011c4:	a308      	add	r3, pc, #32	; (adr r3, 80011e8 <Read_Gyro+0x110>)
 80011c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ca:	f7ff fb4f 	bl	800086c <__aeabi_ddiv>
 80011ce:	4602      	mov	r2, r0
 80011d0:	460b      	mov	r3, r1
 80011d2:	4610      	mov	r0, r2
 80011d4:	4619      	mov	r1, r3
 80011d6:	f7ff fd17 	bl	8000c08 <__aeabi_d2f>
 80011da:	4602      	mov	r2, r0
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	661a      	str	r2, [r3, #96]	; 0x60
}
 80011e0:	bf00      	nop
 80011e2:	3718      	adds	r7, #24
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	66666666 	.word	0x66666666
 80011ec:	40306666 	.word	0x40306666
 80011f0:	20000000 	.word	0x20000000
 80011f4:	20000260 	.word	0x20000260
 80011f8:	40340000 	.word	0x40340000

080011fc <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b08c      	sub	sp, #48	; 0x30
 8001200:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001202:	f107 031c 	add.w	r3, r7, #28
 8001206:	2200      	movs	r2, #0
 8001208:	601a      	str	r2, [r3, #0]
 800120a:	605a      	str	r2, [r3, #4]
 800120c:	609a      	str	r2, [r3, #8]
 800120e:	60da      	str	r2, [r3, #12]
 8001210:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001212:	2300      	movs	r3, #0
 8001214:	61bb      	str	r3, [r7, #24]
 8001216:	4b7c      	ldr	r3, [pc, #496]	; (8001408 <MX_GPIO_Init+0x20c>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	4a7b      	ldr	r2, [pc, #492]	; (8001408 <MX_GPIO_Init+0x20c>)
 800121c:	f043 0304 	orr.w	r3, r3, #4
 8001220:	6313      	str	r3, [r2, #48]	; 0x30
 8001222:	4b79      	ldr	r3, [pc, #484]	; (8001408 <MX_GPIO_Init+0x20c>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	f003 0304 	and.w	r3, r3, #4
 800122a:	61bb      	str	r3, [r7, #24]
 800122c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800122e:	2300      	movs	r3, #0
 8001230:	617b      	str	r3, [r7, #20]
 8001232:	4b75      	ldr	r3, [pc, #468]	; (8001408 <MX_GPIO_Init+0x20c>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	4a74      	ldr	r2, [pc, #464]	; (8001408 <MX_GPIO_Init+0x20c>)
 8001238:	f043 0320 	orr.w	r3, r3, #32
 800123c:	6313      	str	r3, [r2, #48]	; 0x30
 800123e:	4b72      	ldr	r3, [pc, #456]	; (8001408 <MX_GPIO_Init+0x20c>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	f003 0320 	and.w	r3, r3, #32
 8001246:	617b      	str	r3, [r7, #20]
 8001248:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800124a:	2300      	movs	r3, #0
 800124c:	613b      	str	r3, [r7, #16]
 800124e:	4b6e      	ldr	r3, [pc, #440]	; (8001408 <MX_GPIO_Init+0x20c>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	4a6d      	ldr	r2, [pc, #436]	; (8001408 <MX_GPIO_Init+0x20c>)
 8001254:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001258:	6313      	str	r3, [r2, #48]	; 0x30
 800125a:	4b6b      	ldr	r3, [pc, #428]	; (8001408 <MX_GPIO_Init+0x20c>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001262:	613b      	str	r3, [r7, #16]
 8001264:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001266:	2300      	movs	r3, #0
 8001268:	60fb      	str	r3, [r7, #12]
 800126a:	4b67      	ldr	r3, [pc, #412]	; (8001408 <MX_GPIO_Init+0x20c>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	4a66      	ldr	r2, [pc, #408]	; (8001408 <MX_GPIO_Init+0x20c>)
 8001270:	f043 0301 	orr.w	r3, r3, #1
 8001274:	6313      	str	r3, [r2, #48]	; 0x30
 8001276:	4b64      	ldr	r3, [pc, #400]	; (8001408 <MX_GPIO_Init+0x20c>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	f003 0301 	and.w	r3, r3, #1
 800127e:	60fb      	str	r3, [r7, #12]
 8001280:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001282:	2300      	movs	r3, #0
 8001284:	60bb      	str	r3, [r7, #8]
 8001286:	4b60      	ldr	r3, [pc, #384]	; (8001408 <MX_GPIO_Init+0x20c>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128a:	4a5f      	ldr	r2, [pc, #380]	; (8001408 <MX_GPIO_Init+0x20c>)
 800128c:	f043 0302 	orr.w	r3, r3, #2
 8001290:	6313      	str	r3, [r2, #48]	; 0x30
 8001292:	4b5d      	ldr	r3, [pc, #372]	; (8001408 <MX_GPIO_Init+0x20c>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	f003 0302 	and.w	r3, r3, #2
 800129a:	60bb      	str	r3, [r7, #8]
 800129c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800129e:	2300      	movs	r3, #0
 80012a0:	607b      	str	r3, [r7, #4]
 80012a2:	4b59      	ldr	r3, [pc, #356]	; (8001408 <MX_GPIO_Init+0x20c>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a6:	4a58      	ldr	r2, [pc, #352]	; (8001408 <MX_GPIO_Init+0x20c>)
 80012a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012ac:	6313      	str	r3, [r2, #48]	; 0x30
 80012ae:	4b56      	ldr	r3, [pc, #344]	; (8001408 <MX_GPIO_Init+0x20c>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012b6:	607b      	str	r3, [r7, #4]
 80012b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80012ba:	2200      	movs	r2, #0
 80012bc:	f244 0181 	movw	r1, #16513	; 0x4081
 80012c0:	4852      	ldr	r0, [pc, #328]	; (800140c <MX_GPIO_Init+0x210>)
 80012c2:	f001 f86d 	bl	80023a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80012c6:	2200      	movs	r2, #0
 80012c8:	2140      	movs	r1, #64	; 0x40
 80012ca:	4851      	ldr	r0, [pc, #324]	; (8001410 <MX_GPIO_Init+0x214>)
 80012cc:	f001 f868 	bl	80023a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80012d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012d6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80012da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012dc:	2300      	movs	r3, #0
 80012de:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80012e0:	f107 031c 	add.w	r3, r7, #28
 80012e4:	4619      	mov	r1, r3
 80012e6:	484b      	ldr	r0, [pc, #300]	; (8001414 <MX_GPIO_Init+0x218>)
 80012e8:	f000 feae 	bl	8002048 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80012ec:	2332      	movs	r3, #50	; 0x32
 80012ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f0:	2302      	movs	r3, #2
 80012f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f4:	2300      	movs	r3, #0
 80012f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f8:	2303      	movs	r3, #3
 80012fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012fc:	230b      	movs	r3, #11
 80012fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001300:	f107 031c 	add.w	r3, r7, #28
 8001304:	4619      	mov	r1, r3
 8001306:	4843      	ldr	r0, [pc, #268]	; (8001414 <MX_GPIO_Init+0x218>)
 8001308:	f000 fe9e 	bl	8002048 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800130c:	2386      	movs	r3, #134	; 0x86
 800130e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001310:	2302      	movs	r3, #2
 8001312:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001314:	2300      	movs	r3, #0
 8001316:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001318:	2303      	movs	r3, #3
 800131a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800131c:	230b      	movs	r3, #11
 800131e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001320:	f107 031c 	add.w	r3, r7, #28
 8001324:	4619      	mov	r1, r3
 8001326:	483c      	ldr	r0, [pc, #240]	; (8001418 <MX_GPIO_Init+0x21c>)
 8001328:	f000 fe8e 	bl	8002048 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800132c:	f244 0381 	movw	r3, #16513	; 0x4081
 8001330:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001332:	2301      	movs	r3, #1
 8001334:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001336:	2300      	movs	r3, #0
 8001338:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133a:	2300      	movs	r3, #0
 800133c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800133e:	f107 031c 	add.w	r3, r7, #28
 8001342:	4619      	mov	r1, r3
 8001344:	4831      	ldr	r0, [pc, #196]	; (800140c <MX_GPIO_Init+0x210>)
 8001346:	f000 fe7f 	bl	8002048 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800134a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800134e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001350:	2302      	movs	r3, #2
 8001352:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001354:	2300      	movs	r3, #0
 8001356:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001358:	2303      	movs	r3, #3
 800135a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800135c:	230b      	movs	r3, #11
 800135e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001360:	f107 031c 	add.w	r3, r7, #28
 8001364:	4619      	mov	r1, r3
 8001366:	4829      	ldr	r0, [pc, #164]	; (800140c <MX_GPIO_Init+0x210>)
 8001368:	f000 fe6e 	bl	8002048 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800136c:	2340      	movs	r3, #64	; 0x40
 800136e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001370:	2301      	movs	r3, #1
 8001372:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001374:	2300      	movs	r3, #0
 8001376:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001378:	2300      	movs	r3, #0
 800137a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800137c:	f107 031c 	add.w	r3, r7, #28
 8001380:	4619      	mov	r1, r3
 8001382:	4823      	ldr	r0, [pc, #140]	; (8001410 <MX_GPIO_Init+0x214>)
 8001384:	f000 fe60 	bl	8002048 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001388:	2380      	movs	r3, #128	; 0x80
 800138a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800138c:	2300      	movs	r3, #0
 800138e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001390:	2300      	movs	r3, #0
 8001392:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001394:	f107 031c 	add.w	r3, r7, #28
 8001398:	4619      	mov	r1, r3
 800139a:	481d      	ldr	r0, [pc, #116]	; (8001410 <MX_GPIO_Init+0x214>)
 800139c:	f000 fe54 	bl	8002048 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80013a0:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80013a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a6:	2302      	movs	r3, #2
 80013a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013aa:	2300      	movs	r3, #0
 80013ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ae:	2303      	movs	r3, #3
 80013b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80013b2:	230a      	movs	r3, #10
 80013b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b6:	f107 031c 	add.w	r3, r7, #28
 80013ba:	4619      	mov	r1, r3
 80013bc:	4816      	ldr	r0, [pc, #88]	; (8001418 <MX_GPIO_Init+0x21c>)
 80013be:	f000 fe43 	bl	8002048 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80013c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013c8:	2300      	movs	r3, #0
 80013ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013cc:	2300      	movs	r3, #0
 80013ce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80013d0:	f107 031c 	add.w	r3, r7, #28
 80013d4:	4619      	mov	r1, r3
 80013d6:	4810      	ldr	r0, [pc, #64]	; (8001418 <MX_GPIO_Init+0x21c>)
 80013d8:	f000 fe36 	bl	8002048 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80013dc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80013e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e2:	2302      	movs	r3, #2
 80013e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e6:	2300      	movs	r3, #0
 80013e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ea:	2303      	movs	r3, #3
 80013ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013ee:	230b      	movs	r3, #11
 80013f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013f2:	f107 031c 	add.w	r3, r7, #28
 80013f6:	4619      	mov	r1, r3
 80013f8:	4805      	ldr	r0, [pc, #20]	; (8001410 <MX_GPIO_Init+0x214>)
 80013fa:	f000 fe25 	bl	8002048 <HAL_GPIO_Init>

}
 80013fe:	bf00      	nop
 8001400:	3730      	adds	r7, #48	; 0x30
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	40023800 	.word	0x40023800
 800140c:	40020400 	.word	0x40020400
 8001410:	40021800 	.word	0x40021800
 8001414:	40020800 	.word	0x40020800
 8001418:	40020000 	.word	0x40020000

0800141c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001420:	4b1b      	ldr	r3, [pc, #108]	; (8001490 <MX_I2C1_Init+0x74>)
 8001422:	4a1c      	ldr	r2, [pc, #112]	; (8001494 <MX_I2C1_Init+0x78>)
 8001424:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001426:	4b1a      	ldr	r3, [pc, #104]	; (8001490 <MX_I2C1_Init+0x74>)
 8001428:	4a1b      	ldr	r2, [pc, #108]	; (8001498 <MX_I2C1_Init+0x7c>)
 800142a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800142c:	4b18      	ldr	r3, [pc, #96]	; (8001490 <MX_I2C1_Init+0x74>)
 800142e:	2200      	movs	r2, #0
 8001430:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001432:	4b17      	ldr	r3, [pc, #92]	; (8001490 <MX_I2C1_Init+0x74>)
 8001434:	2200      	movs	r2, #0
 8001436:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001438:	4b15      	ldr	r3, [pc, #84]	; (8001490 <MX_I2C1_Init+0x74>)
 800143a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800143e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001440:	4b13      	ldr	r3, [pc, #76]	; (8001490 <MX_I2C1_Init+0x74>)
 8001442:	2200      	movs	r2, #0
 8001444:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001446:	4b12      	ldr	r3, [pc, #72]	; (8001490 <MX_I2C1_Init+0x74>)
 8001448:	2200      	movs	r2, #0
 800144a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800144c:	4b10      	ldr	r3, [pc, #64]	; (8001490 <MX_I2C1_Init+0x74>)
 800144e:	2200      	movs	r2, #0
 8001450:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001452:	4b0f      	ldr	r3, [pc, #60]	; (8001490 <MX_I2C1_Init+0x74>)
 8001454:	2200      	movs	r2, #0
 8001456:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001458:	480d      	ldr	r0, [pc, #52]	; (8001490 <MX_I2C1_Init+0x74>)
 800145a:	f000 ffbb 	bl	80023d4 <HAL_I2C_Init>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001464:	f000 f9be 	bl	80017e4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001468:	2100      	movs	r1, #0
 800146a:	4809      	ldr	r0, [pc, #36]	; (8001490 <MX_I2C1_Init+0x74>)
 800146c:	f003 fc3c 	bl	8004ce8 <HAL_I2CEx_ConfigAnalogFilter>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001476:	f000 f9b5 	bl	80017e4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800147a:	2100      	movs	r1, #0
 800147c:	4804      	ldr	r0, [pc, #16]	; (8001490 <MX_I2C1_Init+0x74>)
 800147e:	f003 fc6f 	bl	8004d60 <HAL_I2CEx_ConfigDigitalFilter>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001488:	f000 f9ac 	bl	80017e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800148c:	bf00      	nop
 800148e:	bd80      	pop	{r7, pc}
 8001490:	20000260 	.word	0x20000260
 8001494:	40005400 	.word	0x40005400
 8001498:	000186a0 	.word	0x000186a0

0800149c <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80014a0:	4b1b      	ldr	r3, [pc, #108]	; (8001510 <MX_I2C2_Init+0x74>)
 80014a2:	4a1c      	ldr	r2, [pc, #112]	; (8001514 <MX_I2C2_Init+0x78>)
 80014a4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80014a6:	4b1a      	ldr	r3, [pc, #104]	; (8001510 <MX_I2C2_Init+0x74>)
 80014a8:	4a1b      	ldr	r2, [pc, #108]	; (8001518 <MX_I2C2_Init+0x7c>)
 80014aa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014ac:	4b18      	ldr	r3, [pc, #96]	; (8001510 <MX_I2C2_Init+0x74>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80014b2:	4b17      	ldr	r3, [pc, #92]	; (8001510 <MX_I2C2_Init+0x74>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014b8:	4b15      	ldr	r3, [pc, #84]	; (8001510 <MX_I2C2_Init+0x74>)
 80014ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014be:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014c0:	4b13      	ldr	r3, [pc, #76]	; (8001510 <MX_I2C2_Init+0x74>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80014c6:	4b12      	ldr	r3, [pc, #72]	; (8001510 <MX_I2C2_Init+0x74>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014cc:	4b10      	ldr	r3, [pc, #64]	; (8001510 <MX_I2C2_Init+0x74>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014d2:	4b0f      	ldr	r3, [pc, #60]	; (8001510 <MX_I2C2_Init+0x74>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80014d8:	480d      	ldr	r0, [pc, #52]	; (8001510 <MX_I2C2_Init+0x74>)
 80014da:	f000 ff7b 	bl	80023d4 <HAL_I2C_Init>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80014e4:	f000 f97e 	bl	80017e4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80014e8:	2100      	movs	r1, #0
 80014ea:	4809      	ldr	r0, [pc, #36]	; (8001510 <MX_I2C2_Init+0x74>)
 80014ec:	f003 fbfc 	bl	8004ce8 <HAL_I2CEx_ConfigAnalogFilter>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 80014f6:	f000 f975 	bl	80017e4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80014fa:	2100      	movs	r1, #0
 80014fc:	4804      	ldr	r0, [pc, #16]	; (8001510 <MX_I2C2_Init+0x74>)
 80014fe:	f003 fc2f 	bl	8004d60 <HAL_I2CEx_ConfigDigitalFilter>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8001508:	f000 f96c 	bl	80017e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800150c:	bf00      	nop
 800150e:	bd80      	pop	{r7, pc}
 8001510:	200002b4 	.word	0x200002b4
 8001514:	40005800 	.word	0x40005800
 8001518:	000186a0 	.word	0x000186a0

0800151c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b08c      	sub	sp, #48	; 0x30
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001524:	f107 031c 	add.w	r3, r7, #28
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
 800152c:	605a      	str	r2, [r3, #4]
 800152e:	609a      	str	r2, [r3, #8]
 8001530:	60da      	str	r2, [r3, #12]
 8001532:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a42      	ldr	r2, [pc, #264]	; (8001644 <HAL_I2C_MspInit+0x128>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d13d      	bne.n	80015ba <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800153e:	2300      	movs	r3, #0
 8001540:	61bb      	str	r3, [r7, #24]
 8001542:	4b41      	ldr	r3, [pc, #260]	; (8001648 <HAL_I2C_MspInit+0x12c>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001546:	4a40      	ldr	r2, [pc, #256]	; (8001648 <HAL_I2C_MspInit+0x12c>)
 8001548:	f043 0302 	orr.w	r3, r3, #2
 800154c:	6313      	str	r3, [r2, #48]	; 0x30
 800154e:	4b3e      	ldr	r3, [pc, #248]	; (8001648 <HAL_I2C_MspInit+0x12c>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001552:	f003 0302 	and.w	r3, r3, #2
 8001556:	61bb      	str	r3, [r7, #24]
 8001558:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800155a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800155e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001560:	2312      	movs	r3, #18
 8001562:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001564:	2300      	movs	r3, #0
 8001566:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001568:	2303      	movs	r3, #3
 800156a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800156c:	2304      	movs	r3, #4
 800156e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001570:	f107 031c 	add.w	r3, r7, #28
 8001574:	4619      	mov	r1, r3
 8001576:	4835      	ldr	r0, [pc, #212]	; (800164c <HAL_I2C_MspInit+0x130>)
 8001578:	f000 fd66 	bl	8002048 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800157c:	2300      	movs	r3, #0
 800157e:	617b      	str	r3, [r7, #20]
 8001580:	4b31      	ldr	r3, [pc, #196]	; (8001648 <HAL_I2C_MspInit+0x12c>)
 8001582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001584:	4a30      	ldr	r2, [pc, #192]	; (8001648 <HAL_I2C_MspInit+0x12c>)
 8001586:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800158a:	6413      	str	r3, [r2, #64]	; 0x40
 800158c:	4b2e      	ldr	r3, [pc, #184]	; (8001648 <HAL_I2C_MspInit+0x12c>)
 800158e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001590:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001594:	617b      	str	r3, [r7, #20]
 8001596:	697b      	ldr	r3, [r7, #20]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001598:	2200      	movs	r2, #0
 800159a:	2100      	movs	r1, #0
 800159c:	201f      	movs	r0, #31
 800159e:	f000 fc7c 	bl	8001e9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80015a2:	201f      	movs	r0, #31
 80015a4:	f000 fc95 	bl	8001ed2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80015a8:	2200      	movs	r2, #0
 80015aa:	2100      	movs	r1, #0
 80015ac:	2020      	movs	r0, #32
 80015ae:	f000 fc74 	bl	8001e9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80015b2:	2020      	movs	r0, #32
 80015b4:	f000 fc8d 	bl	8001ed2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80015b8:	e040      	b.n	800163c <HAL_I2C_MspInit+0x120>
  else if(i2cHandle->Instance==I2C2)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a24      	ldr	r2, [pc, #144]	; (8001650 <HAL_I2C_MspInit+0x134>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d13b      	bne.n	800163c <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80015c4:	2300      	movs	r3, #0
 80015c6:	613b      	str	r3, [r7, #16]
 80015c8:	4b1f      	ldr	r3, [pc, #124]	; (8001648 <HAL_I2C_MspInit+0x12c>)
 80015ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015cc:	4a1e      	ldr	r2, [pc, #120]	; (8001648 <HAL_I2C_MspInit+0x12c>)
 80015ce:	f043 0320 	orr.w	r3, r3, #32
 80015d2:	6313      	str	r3, [r2, #48]	; 0x30
 80015d4:	4b1c      	ldr	r3, [pc, #112]	; (8001648 <HAL_I2C_MspInit+0x12c>)
 80015d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d8:	f003 0320 	and.w	r3, r3, #32
 80015dc:	613b      	str	r3, [r7, #16]
 80015de:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80015e0:	2303      	movs	r3, #3
 80015e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015e4:	2312      	movs	r3, #18
 80015e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e8:	2300      	movs	r3, #0
 80015ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ec:	2303      	movs	r3, #3
 80015ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80015f0:	2304      	movs	r3, #4
 80015f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80015f4:	f107 031c 	add.w	r3, r7, #28
 80015f8:	4619      	mov	r1, r3
 80015fa:	4816      	ldr	r0, [pc, #88]	; (8001654 <HAL_I2C_MspInit+0x138>)
 80015fc:	f000 fd24 	bl	8002048 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001600:	2300      	movs	r3, #0
 8001602:	60fb      	str	r3, [r7, #12]
 8001604:	4b10      	ldr	r3, [pc, #64]	; (8001648 <HAL_I2C_MspInit+0x12c>)
 8001606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001608:	4a0f      	ldr	r2, [pc, #60]	; (8001648 <HAL_I2C_MspInit+0x12c>)
 800160a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800160e:	6413      	str	r3, [r2, #64]	; 0x40
 8001610:	4b0d      	ldr	r3, [pc, #52]	; (8001648 <HAL_I2C_MspInit+0x12c>)
 8001612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001614:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001618:	60fb      	str	r3, [r7, #12]
 800161a:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 800161c:	2200      	movs	r2, #0
 800161e:	2100      	movs	r1, #0
 8001620:	2021      	movs	r0, #33	; 0x21
 8001622:	f000 fc3a 	bl	8001e9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001626:	2021      	movs	r0, #33	; 0x21
 8001628:	f000 fc53 	bl	8001ed2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 800162c:	2200      	movs	r2, #0
 800162e:	2100      	movs	r1, #0
 8001630:	2022      	movs	r0, #34	; 0x22
 8001632:	f000 fc32 	bl	8001e9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8001636:	2022      	movs	r0, #34	; 0x22
 8001638:	f000 fc4b 	bl	8001ed2 <HAL_NVIC_EnableIRQ>
}
 800163c:	bf00      	nop
 800163e:	3730      	adds	r7, #48	; 0x30
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	40005400 	.word	0x40005400
 8001648:	40023800 	.word	0x40023800
 800164c:	40020400 	.word	0x40020400
 8001650:	40005800 	.word	0x40005800
 8001654:	40021400 	.word	0x40021400

08001658 <_write>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
int _write(int file, char *p, int len)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b084      	sub	sp, #16
 800165c:	af00      	add	r7, sp, #0
 800165e:	60f8      	str	r0, [r7, #12]
 8001660:	60b9      	str	r1, [r7, #8]
 8001662:	607a      	str	r2, [r7, #4]
	if(HAL_UART_Transmit(&huart3, (uint8_t *)p, len, 10) == HAL_OK) return len;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	b29a      	uxth	r2, r3
 8001668:	230a      	movs	r3, #10
 800166a:	68b9      	ldr	r1, [r7, #8]
 800166c:	4806      	ldr	r0, [pc, #24]	; (8001688 <_write+0x30>)
 800166e:	f004 f8ec 	bl	800584a <HAL_UART_Transmit>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d101      	bne.n	800167c <_write+0x24>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	e000      	b.n	800167e <_write+0x26>
	else return 0;
 800167c:	2300      	movs	r3, #0
}
 800167e:	4618      	mov	r0, r3
 8001680:	3710      	adds	r7, #16
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	2000030c 	.word	0x2000030c

0800168c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800168c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001690:	b084      	sub	sp, #16
 8001692:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001694:	f000 fa90 	bl	8001bb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001698:	f000 f834 	bl	8001704 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800169c:	f7ff fdae 	bl	80011fc <MX_GPIO_Init>
  MX_I2C1_Init();
 80016a0:	f7ff febc 	bl	800141c <MX_I2C1_Init>
  MX_USART3_UART_Init();
 80016a4:	f000 f9e4 	bl	8001a70 <MX_USART3_UART_Init>
  MX_I2C2_Init();
 80016a8:	f7ff fef8 	bl	800149c <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  Gyro_Init(&GYRO);
 80016ac:	4813      	ldr	r0, [pc, #76]	; (80016fc <main+0x70>)
 80016ae:	f7ff fccf 	bl	8001050 <Gyro_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  Read_Gyro(&GYRO);
 80016b2:	4812      	ldr	r0, [pc, #72]	; (80016fc <main+0x70>)
 80016b4:	f7ff fd10 	bl	80010d8 <Read_Gyro>
	  printf("%8.2f %8.2f %8.2f\r\n", GYRO.gyro_X, GYRO.gyro_Y, GYRO.gyro_Z);
 80016b8:	4b10      	ldr	r3, [pc, #64]	; (80016fc <main+0x70>)
 80016ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016bc:	4618      	mov	r0, r3
 80016be:	f7fe ff53 	bl	8000568 <__aeabi_f2d>
 80016c2:	4680      	mov	r8, r0
 80016c4:	4689      	mov	r9, r1
 80016c6:	4b0d      	ldr	r3, [pc, #52]	; (80016fc <main+0x70>)
 80016c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7fe ff4c 	bl	8000568 <__aeabi_f2d>
 80016d0:	4604      	mov	r4, r0
 80016d2:	460d      	mov	r5, r1
 80016d4:	4b09      	ldr	r3, [pc, #36]	; (80016fc <main+0x70>)
 80016d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016d8:	4618      	mov	r0, r3
 80016da:	f7fe ff45 	bl	8000568 <__aeabi_f2d>
 80016de:	4602      	mov	r2, r0
 80016e0:	460b      	mov	r3, r1
 80016e2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80016e6:	e9cd 4500 	strd	r4, r5, [sp]
 80016ea:	4642      	mov	r2, r8
 80016ec:	464b      	mov	r3, r9
 80016ee:	4804      	ldr	r0, [pc, #16]	; (8001700 <main+0x74>)
 80016f0:	f005 ff2c 	bl	800754c <iprintf>
	  HAL_Delay(100);
 80016f4:	2064      	movs	r0, #100	; 0x64
 80016f6:	f000 fad1 	bl	8001c9c <HAL_Delay>
	  Read_Gyro(&GYRO);
 80016fa:	e7da      	b.n	80016b2 <main+0x26>
 80016fc:	20000000 	.word	0x20000000
 8001700:	0800b168 	.word	0x0800b168

08001704 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b094      	sub	sp, #80	; 0x50
 8001708:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800170a:	f107 0320 	add.w	r3, r7, #32
 800170e:	2230      	movs	r2, #48	; 0x30
 8001710:	2100      	movs	r1, #0
 8001712:	4618      	mov	r0, r3
 8001714:	f005 f898 	bl	8006848 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001718:	f107 030c 	add.w	r3, r7, #12
 800171c:	2200      	movs	r2, #0
 800171e:	601a      	str	r2, [r3, #0]
 8001720:	605a      	str	r2, [r3, #4]
 8001722:	609a      	str	r2, [r3, #8]
 8001724:	60da      	str	r2, [r3, #12]
 8001726:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001728:	2300      	movs	r3, #0
 800172a:	60bb      	str	r3, [r7, #8]
 800172c:	4b2b      	ldr	r3, [pc, #172]	; (80017dc <SystemClock_Config+0xd8>)
 800172e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001730:	4a2a      	ldr	r2, [pc, #168]	; (80017dc <SystemClock_Config+0xd8>)
 8001732:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001736:	6413      	str	r3, [r2, #64]	; 0x40
 8001738:	4b28      	ldr	r3, [pc, #160]	; (80017dc <SystemClock_Config+0xd8>)
 800173a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001740:	60bb      	str	r3, [r7, #8]
 8001742:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001744:	2300      	movs	r3, #0
 8001746:	607b      	str	r3, [r7, #4]
 8001748:	4b25      	ldr	r3, [pc, #148]	; (80017e0 <SystemClock_Config+0xdc>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a24      	ldr	r2, [pc, #144]	; (80017e0 <SystemClock_Config+0xdc>)
 800174e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001752:	6013      	str	r3, [r2, #0]
 8001754:	4b22      	ldr	r3, [pc, #136]	; (80017e0 <SystemClock_Config+0xdc>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800175c:	607b      	str	r3, [r7, #4]
 800175e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001760:	2301      	movs	r3, #1
 8001762:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001764:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001768:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800176a:	2302      	movs	r3, #2
 800176c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800176e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001772:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001774:	2304      	movs	r3, #4
 8001776:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001778:	23b4      	movs	r3, #180	; 0xb4
 800177a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800177c:	2302      	movs	r3, #2
 800177e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001780:	2304      	movs	r3, #4
 8001782:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001784:	f107 0320 	add.w	r3, r7, #32
 8001788:	4618      	mov	r0, r3
 800178a:	f003 fb79 	bl	8004e80 <HAL_RCC_OscConfig>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001794:	f000 f826 	bl	80017e4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001798:	f003 fb22 	bl	8004de0 <HAL_PWREx_EnableOverDrive>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80017a2:	f000 f81f 	bl	80017e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017a6:	230f      	movs	r3, #15
 80017a8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017aa:	2302      	movs	r3, #2
 80017ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017ae:	2300      	movs	r3, #0
 80017b0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80017b2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80017b6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80017b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017bc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80017be:	f107 030c 	add.w	r3, r7, #12
 80017c2:	2105      	movs	r1, #5
 80017c4:	4618      	mov	r0, r3
 80017c6:	f003 fdd3 	bl	8005370 <HAL_RCC_ClockConfig>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80017d0:	f000 f808 	bl	80017e4 <Error_Handler>
  }
}
 80017d4:	bf00      	nop
 80017d6:	3750      	adds	r7, #80	; 0x50
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	40023800 	.word	0x40023800
 80017e0:	40007000 	.word	0x40007000

080017e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017e8:	b672      	cpsid	i
}
 80017ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017ec:	e7fe      	b.n	80017ec <Error_Handler+0x8>
	...

080017f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017f6:	2300      	movs	r3, #0
 80017f8:	607b      	str	r3, [r7, #4]
 80017fa:	4b10      	ldr	r3, [pc, #64]	; (800183c <HAL_MspInit+0x4c>)
 80017fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017fe:	4a0f      	ldr	r2, [pc, #60]	; (800183c <HAL_MspInit+0x4c>)
 8001800:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001804:	6453      	str	r3, [r2, #68]	; 0x44
 8001806:	4b0d      	ldr	r3, [pc, #52]	; (800183c <HAL_MspInit+0x4c>)
 8001808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800180a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800180e:	607b      	str	r3, [r7, #4]
 8001810:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001812:	2300      	movs	r3, #0
 8001814:	603b      	str	r3, [r7, #0]
 8001816:	4b09      	ldr	r3, [pc, #36]	; (800183c <HAL_MspInit+0x4c>)
 8001818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181a:	4a08      	ldr	r2, [pc, #32]	; (800183c <HAL_MspInit+0x4c>)
 800181c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001820:	6413      	str	r3, [r2, #64]	; 0x40
 8001822:	4b06      	ldr	r3, [pc, #24]	; (800183c <HAL_MspInit+0x4c>)
 8001824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800182a:	603b      	str	r3, [r7, #0]
 800182c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800182e:	bf00      	nop
 8001830:	370c      	adds	r7, #12
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	40023800 	.word	0x40023800

08001840 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001844:	e7fe      	b.n	8001844 <NMI_Handler+0x4>

08001846 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001846:	b480      	push	{r7}
 8001848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800184a:	e7fe      	b.n	800184a <HardFault_Handler+0x4>

0800184c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001850:	e7fe      	b.n	8001850 <MemManage_Handler+0x4>

08001852 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001852:	b480      	push	{r7}
 8001854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001856:	e7fe      	b.n	8001856 <BusFault_Handler+0x4>

08001858 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800185c:	e7fe      	b.n	800185c <UsageFault_Handler+0x4>

0800185e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800185e:	b480      	push	{r7}
 8001860:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001862:	bf00      	nop
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr

0800186c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001870:	bf00      	nop
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr

0800187a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800187a:	b480      	push	{r7}
 800187c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800187e:	bf00      	nop
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr

08001888 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800188c:	f000 f9e6 	bl	8001c5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001890:	bf00      	nop
 8001892:	bd80      	pop	{r7, pc}

08001894 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001898:	4802      	ldr	r0, [pc, #8]	; (80018a4 <I2C1_EV_IRQHandler+0x10>)
 800189a:	f001 fa03 	bl	8002ca4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800189e:	bf00      	nop
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	20000260 	.word	0x20000260

080018a8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80018ac:	4802      	ldr	r0, [pc, #8]	; (80018b8 <I2C1_ER_IRQHandler+0x10>)
 80018ae:	f001 fb6a 	bl	8002f86 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80018b2:	bf00      	nop
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	20000260 	.word	0x20000260

080018bc <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80018c0:	4802      	ldr	r0, [pc, #8]	; (80018cc <I2C2_EV_IRQHandler+0x10>)
 80018c2:	f001 f9ef 	bl	8002ca4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80018c6:	bf00      	nop
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	200002b4 	.word	0x200002b4

080018d0 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 80018d4:	4802      	ldr	r0, [pc, #8]	; (80018e0 <I2C2_ER_IRQHandler+0x10>)
 80018d6:	f001 fb56 	bl	8002f86 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 80018da:	bf00      	nop
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	200002b4 	.word	0x200002b4

080018e4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80018e8:	4802      	ldr	r0, [pc, #8]	; (80018f4 <USART3_IRQHandler+0x10>)
 80018ea:	f004 f841 	bl	8005970 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80018ee:	bf00      	nop
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	2000030c 	.word	0x2000030c

080018f8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
	return 1;
 80018fc:	2301      	movs	r3, #1
}
 80018fe:	4618      	mov	r0, r3
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr

08001908 <_kill>:

int _kill(int pid, int sig)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001912:	f004 ff61 	bl	80067d8 <__errno>
 8001916:	4603      	mov	r3, r0
 8001918:	2216      	movs	r2, #22
 800191a:	601a      	str	r2, [r3, #0]
	return -1;
 800191c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001920:	4618      	mov	r0, r3
 8001922:	3708      	adds	r7, #8
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}

08001928 <_exit>:

void _exit (int status)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001930:	f04f 31ff 	mov.w	r1, #4294967295
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	f7ff ffe7 	bl	8001908 <_kill>
	while (1) {}		/* Make sure we hang here */
 800193a:	e7fe      	b.n	800193a <_exit+0x12>

0800193c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b086      	sub	sp, #24
 8001940:	af00      	add	r7, sp, #0
 8001942:	60f8      	str	r0, [r7, #12]
 8001944:	60b9      	str	r1, [r7, #8]
 8001946:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001948:	2300      	movs	r3, #0
 800194a:	617b      	str	r3, [r7, #20]
 800194c:	e00a      	b.n	8001964 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800194e:	f3af 8000 	nop.w
 8001952:	4601      	mov	r1, r0
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	1c5a      	adds	r2, r3, #1
 8001958:	60ba      	str	r2, [r7, #8]
 800195a:	b2ca      	uxtb	r2, r1
 800195c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	3301      	adds	r3, #1
 8001962:	617b      	str	r3, [r7, #20]
 8001964:	697a      	ldr	r2, [r7, #20]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	429a      	cmp	r2, r3
 800196a:	dbf0      	blt.n	800194e <_read+0x12>
	}

return len;
 800196c:	687b      	ldr	r3, [r7, #4]
}
 800196e:	4618      	mov	r0, r3
 8001970:	3718      	adds	r7, #24
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}

08001976 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001976:	b480      	push	{r7}
 8001978:	b083      	sub	sp, #12
 800197a:	af00      	add	r7, sp, #0
 800197c:	6078      	str	r0, [r7, #4]
	return -1;
 800197e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001982:	4618      	mov	r0, r3
 8001984:	370c      	adds	r7, #12
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr

0800198e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800198e:	b480      	push	{r7}
 8001990:	b083      	sub	sp, #12
 8001992:	af00      	add	r7, sp, #0
 8001994:	6078      	str	r0, [r7, #4]
 8001996:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800199e:	605a      	str	r2, [r3, #4]
	return 0;
 80019a0:	2300      	movs	r3, #0
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	370c      	adds	r7, #12
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr

080019ae <_isatty>:

int _isatty(int file)
{
 80019ae:	b480      	push	{r7}
 80019b0:	b083      	sub	sp, #12
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	6078      	str	r0, [r7, #4]
	return 1;
 80019b6:	2301      	movs	r3, #1
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	370c      	adds	r7, #12
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr

080019c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b085      	sub	sp, #20
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	60f8      	str	r0, [r7, #12]
 80019cc:	60b9      	str	r1, [r7, #8]
 80019ce:	607a      	str	r2, [r7, #4]
	return 0;
 80019d0:	2300      	movs	r3, #0
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3714      	adds	r7, #20
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
	...

080019e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b086      	sub	sp, #24
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019e8:	4a14      	ldr	r2, [pc, #80]	; (8001a3c <_sbrk+0x5c>)
 80019ea:	4b15      	ldr	r3, [pc, #84]	; (8001a40 <_sbrk+0x60>)
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019f4:	4b13      	ldr	r3, [pc, #76]	; (8001a44 <_sbrk+0x64>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d102      	bne.n	8001a02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019fc:	4b11      	ldr	r3, [pc, #68]	; (8001a44 <_sbrk+0x64>)
 80019fe:	4a12      	ldr	r2, [pc, #72]	; (8001a48 <_sbrk+0x68>)
 8001a00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a02:	4b10      	ldr	r3, [pc, #64]	; (8001a44 <_sbrk+0x64>)
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4413      	add	r3, r2
 8001a0a:	693a      	ldr	r2, [r7, #16]
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d207      	bcs.n	8001a20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a10:	f004 fee2 	bl	80067d8 <__errno>
 8001a14:	4603      	mov	r3, r0
 8001a16:	220c      	movs	r2, #12
 8001a18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a1a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a1e:	e009      	b.n	8001a34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a20:	4b08      	ldr	r3, [pc, #32]	; (8001a44 <_sbrk+0x64>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a26:	4b07      	ldr	r3, [pc, #28]	; (8001a44 <_sbrk+0x64>)
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	4413      	add	r3, r2
 8001a2e:	4a05      	ldr	r2, [pc, #20]	; (8001a44 <_sbrk+0x64>)
 8001a30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a32:	68fb      	ldr	r3, [r7, #12]
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	3718      	adds	r7, #24
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	20030000 	.word	0x20030000
 8001a40:	00000400 	.word	0x00000400
 8001a44:	20000308 	.word	0x20000308
 8001a48:	20000368 	.word	0x20000368

08001a4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a50:	4b06      	ldr	r3, [pc, #24]	; (8001a6c <SystemInit+0x20>)
 8001a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a56:	4a05      	ldr	r2, [pc, #20]	; (8001a6c <SystemInit+0x20>)
 8001a58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a60:	bf00      	nop
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	e000ed00 	.word	0xe000ed00

08001a70 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001a74:	4b11      	ldr	r3, [pc, #68]	; (8001abc <MX_USART3_UART_Init+0x4c>)
 8001a76:	4a12      	ldr	r2, [pc, #72]	; (8001ac0 <MX_USART3_UART_Init+0x50>)
 8001a78:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001a7a:	4b10      	ldr	r3, [pc, #64]	; (8001abc <MX_USART3_UART_Init+0x4c>)
 8001a7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a80:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001a82:	4b0e      	ldr	r3, [pc, #56]	; (8001abc <MX_USART3_UART_Init+0x4c>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001a88:	4b0c      	ldr	r3, [pc, #48]	; (8001abc <MX_USART3_UART_Init+0x4c>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001a8e:	4b0b      	ldr	r3, [pc, #44]	; (8001abc <MX_USART3_UART_Init+0x4c>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001a94:	4b09      	ldr	r3, [pc, #36]	; (8001abc <MX_USART3_UART_Init+0x4c>)
 8001a96:	220c      	movs	r2, #12
 8001a98:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a9a:	4b08      	ldr	r3, [pc, #32]	; (8001abc <MX_USART3_UART_Init+0x4c>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001aa0:	4b06      	ldr	r3, [pc, #24]	; (8001abc <MX_USART3_UART_Init+0x4c>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001aa6:	4805      	ldr	r0, [pc, #20]	; (8001abc <MX_USART3_UART_Init+0x4c>)
 8001aa8:	f003 fe82 	bl	80057b0 <HAL_UART_Init>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d001      	beq.n	8001ab6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001ab2:	f7ff fe97 	bl	80017e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001ab6:	bf00      	nop
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	2000030c 	.word	0x2000030c
 8001ac0:	40004800 	.word	0x40004800

08001ac4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b08a      	sub	sp, #40	; 0x28
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001acc:	f107 0314 	add.w	r3, r7, #20
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	601a      	str	r2, [r3, #0]
 8001ad4:	605a      	str	r2, [r3, #4]
 8001ad6:	609a      	str	r2, [r3, #8]
 8001ad8:	60da      	str	r2, [r3, #12]
 8001ada:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a1d      	ldr	r2, [pc, #116]	; (8001b58 <HAL_UART_MspInit+0x94>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d134      	bne.n	8001b50 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	613b      	str	r3, [r7, #16]
 8001aea:	4b1c      	ldr	r3, [pc, #112]	; (8001b5c <HAL_UART_MspInit+0x98>)
 8001aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aee:	4a1b      	ldr	r2, [pc, #108]	; (8001b5c <HAL_UART_MspInit+0x98>)
 8001af0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001af4:	6413      	str	r3, [r2, #64]	; 0x40
 8001af6:	4b19      	ldr	r3, [pc, #100]	; (8001b5c <HAL_UART_MspInit+0x98>)
 8001af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001afe:	613b      	str	r3, [r7, #16]
 8001b00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b02:	2300      	movs	r3, #0
 8001b04:	60fb      	str	r3, [r7, #12]
 8001b06:	4b15      	ldr	r3, [pc, #84]	; (8001b5c <HAL_UART_MspInit+0x98>)
 8001b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0a:	4a14      	ldr	r2, [pc, #80]	; (8001b5c <HAL_UART_MspInit+0x98>)
 8001b0c:	f043 0302 	orr.w	r3, r3, #2
 8001b10:	6313      	str	r3, [r2, #48]	; 0x30
 8001b12:	4b12      	ldr	r3, [pc, #72]	; (8001b5c <HAL_UART_MspInit+0x98>)
 8001b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b16:	f003 0302 	and.w	r3, r3, #2
 8001b1a:	60fb      	str	r3, [r7, #12]
 8001b1c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001b1e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001b22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b24:	2302      	movs	r3, #2
 8001b26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b2c:	2303      	movs	r3, #3
 8001b2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b30:	2307      	movs	r3, #7
 8001b32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b34:	f107 0314 	add.w	r3, r7, #20
 8001b38:	4619      	mov	r1, r3
 8001b3a:	4809      	ldr	r0, [pc, #36]	; (8001b60 <HAL_UART_MspInit+0x9c>)
 8001b3c:	f000 fa84 	bl	8002048 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001b40:	2200      	movs	r2, #0
 8001b42:	2100      	movs	r1, #0
 8001b44:	2027      	movs	r0, #39	; 0x27
 8001b46:	f000 f9a8 	bl	8001e9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001b4a:	2027      	movs	r0, #39	; 0x27
 8001b4c:	f000 f9c1 	bl	8001ed2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001b50:	bf00      	nop
 8001b52:	3728      	adds	r7, #40	; 0x28
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	40004800 	.word	0x40004800
 8001b5c:	40023800 	.word	0x40023800
 8001b60:	40020400 	.word	0x40020400

08001b64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001b64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b9c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b68:	480d      	ldr	r0, [pc, #52]	; (8001ba0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b6a:	490e      	ldr	r1, [pc, #56]	; (8001ba4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b6c:	4a0e      	ldr	r2, [pc, #56]	; (8001ba8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b70:	e002      	b.n	8001b78 <LoopCopyDataInit>

08001b72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b76:	3304      	adds	r3, #4

08001b78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b7c:	d3f9      	bcc.n	8001b72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b7e:	4a0b      	ldr	r2, [pc, #44]	; (8001bac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b80:	4c0b      	ldr	r4, [pc, #44]	; (8001bb0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b84:	e001      	b.n	8001b8a <LoopFillZerobss>

08001b86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b88:	3204      	adds	r2, #4

08001b8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b8c:	d3fb      	bcc.n	8001b86 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b8e:	f7ff ff5d 	bl	8001a4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b92:	f004 fe27 	bl	80067e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b96:	f7ff fd79 	bl	800168c <main>
  bx  lr    
 8001b9a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001b9c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001ba0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ba4:	20000244 	.word	0x20000244
  ldr r2, =_sidata
 8001ba8:	0800b654 	.word	0x0800b654
  ldr r2, =_sbss
 8001bac:	20000244 	.word	0x20000244
  ldr r4, =_ebss
 8001bb0:	20000364 	.word	0x20000364

08001bb4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bb4:	e7fe      	b.n	8001bb4 <ADC_IRQHandler>
	...

08001bb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001bbc:	4b0e      	ldr	r3, [pc, #56]	; (8001bf8 <HAL_Init+0x40>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a0d      	ldr	r2, [pc, #52]	; (8001bf8 <HAL_Init+0x40>)
 8001bc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bc6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bc8:	4b0b      	ldr	r3, [pc, #44]	; (8001bf8 <HAL_Init+0x40>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a0a      	ldr	r2, [pc, #40]	; (8001bf8 <HAL_Init+0x40>)
 8001bce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bd2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bd4:	4b08      	ldr	r3, [pc, #32]	; (8001bf8 <HAL_Init+0x40>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a07      	ldr	r2, [pc, #28]	; (8001bf8 <HAL_Init+0x40>)
 8001bda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bde:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001be0:	2003      	movs	r0, #3
 8001be2:	f000 f94f 	bl	8001e84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001be6:	2000      	movs	r0, #0
 8001be8:	f000 f808 	bl	8001bfc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bec:	f7ff fe00 	bl	80017f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bf0:	2300      	movs	r3, #0
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	40023c00 	.word	0x40023c00

08001bfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c04:	4b12      	ldr	r3, [pc, #72]	; (8001c50 <HAL_InitTick+0x54>)
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	4b12      	ldr	r3, [pc, #72]	; (8001c54 <HAL_InitTick+0x58>)
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c12:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c16:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f000 f967 	bl	8001eee <HAL_SYSTICK_Config>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d001      	beq.n	8001c2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e00e      	b.n	8001c48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2b0f      	cmp	r3, #15
 8001c2e:	d80a      	bhi.n	8001c46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c30:	2200      	movs	r2, #0
 8001c32:	6879      	ldr	r1, [r7, #4]
 8001c34:	f04f 30ff 	mov.w	r0, #4294967295
 8001c38:	f000 f92f 	bl	8001e9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c3c:	4a06      	ldr	r2, [pc, #24]	; (8001c58 <HAL_InitTick+0x5c>)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c42:	2300      	movs	r3, #0
 8001c44:	e000      	b.n	8001c48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3708      	adds	r7, #8
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	20000064 	.word	0x20000064
 8001c54:	2000006c 	.word	0x2000006c
 8001c58:	20000068 	.word	0x20000068

08001c5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c60:	4b06      	ldr	r3, [pc, #24]	; (8001c7c <HAL_IncTick+0x20>)
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	461a      	mov	r2, r3
 8001c66:	4b06      	ldr	r3, [pc, #24]	; (8001c80 <HAL_IncTick+0x24>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4413      	add	r3, r2
 8001c6c:	4a04      	ldr	r2, [pc, #16]	; (8001c80 <HAL_IncTick+0x24>)
 8001c6e:	6013      	str	r3, [r2, #0]
}
 8001c70:	bf00      	nop
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop
 8001c7c:	2000006c 	.word	0x2000006c
 8001c80:	20000350 	.word	0x20000350

08001c84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  return uwTick;
 8001c88:	4b03      	ldr	r3, [pc, #12]	; (8001c98 <HAL_GetTick+0x14>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	20000350 	.word	0x20000350

08001c9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b084      	sub	sp, #16
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ca4:	f7ff ffee 	bl	8001c84 <HAL_GetTick>
 8001ca8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cb4:	d005      	beq.n	8001cc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cb6:	4b0a      	ldr	r3, [pc, #40]	; (8001ce0 <HAL_Delay+0x44>)
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	461a      	mov	r2, r3
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	4413      	add	r3, r2
 8001cc0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001cc2:	bf00      	nop
 8001cc4:	f7ff ffde 	bl	8001c84 <HAL_GetTick>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	68fa      	ldr	r2, [r7, #12]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d8f7      	bhi.n	8001cc4 <HAL_Delay+0x28>
  {
  }
}
 8001cd4:	bf00      	nop
 8001cd6:	bf00      	nop
 8001cd8:	3710      	adds	r7, #16
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	2000006c 	.word	0x2000006c

08001ce4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b085      	sub	sp, #20
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	f003 0307 	and.w	r3, r3, #7
 8001cf2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cf4:	4b0c      	ldr	r3, [pc, #48]	; (8001d28 <__NVIC_SetPriorityGrouping+0x44>)
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cfa:	68ba      	ldr	r2, [r7, #8]
 8001cfc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d00:	4013      	ands	r3, r2
 8001d02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d16:	4a04      	ldr	r2, [pc, #16]	; (8001d28 <__NVIC_SetPriorityGrouping+0x44>)
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	60d3      	str	r3, [r2, #12]
}
 8001d1c:	bf00      	nop
 8001d1e:	3714      	adds	r7, #20
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr
 8001d28:	e000ed00 	.word	0xe000ed00

08001d2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d30:	4b04      	ldr	r3, [pc, #16]	; (8001d44 <__NVIC_GetPriorityGrouping+0x18>)
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	0a1b      	lsrs	r3, r3, #8
 8001d36:	f003 0307 	and.w	r3, r3, #7
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr
 8001d44:	e000ed00 	.word	0xe000ed00

08001d48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	4603      	mov	r3, r0
 8001d50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	db0b      	blt.n	8001d72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d5a:	79fb      	ldrb	r3, [r7, #7]
 8001d5c:	f003 021f 	and.w	r2, r3, #31
 8001d60:	4907      	ldr	r1, [pc, #28]	; (8001d80 <__NVIC_EnableIRQ+0x38>)
 8001d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d66:	095b      	lsrs	r3, r3, #5
 8001d68:	2001      	movs	r0, #1
 8001d6a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d72:	bf00      	nop
 8001d74:	370c      	adds	r7, #12
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr
 8001d7e:	bf00      	nop
 8001d80:	e000e100 	.word	0xe000e100

08001d84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	6039      	str	r1, [r7, #0]
 8001d8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	db0a      	blt.n	8001dae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	b2da      	uxtb	r2, r3
 8001d9c:	490c      	ldr	r1, [pc, #48]	; (8001dd0 <__NVIC_SetPriority+0x4c>)
 8001d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da2:	0112      	lsls	r2, r2, #4
 8001da4:	b2d2      	uxtb	r2, r2
 8001da6:	440b      	add	r3, r1
 8001da8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dac:	e00a      	b.n	8001dc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	b2da      	uxtb	r2, r3
 8001db2:	4908      	ldr	r1, [pc, #32]	; (8001dd4 <__NVIC_SetPriority+0x50>)
 8001db4:	79fb      	ldrb	r3, [r7, #7]
 8001db6:	f003 030f 	and.w	r3, r3, #15
 8001dba:	3b04      	subs	r3, #4
 8001dbc:	0112      	lsls	r2, r2, #4
 8001dbe:	b2d2      	uxtb	r2, r2
 8001dc0:	440b      	add	r3, r1
 8001dc2:	761a      	strb	r2, [r3, #24]
}
 8001dc4:	bf00      	nop
 8001dc6:	370c      	adds	r7, #12
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr
 8001dd0:	e000e100 	.word	0xe000e100
 8001dd4:	e000ed00 	.word	0xe000ed00

08001dd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b089      	sub	sp, #36	; 0x24
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	60f8      	str	r0, [r7, #12]
 8001de0:	60b9      	str	r1, [r7, #8]
 8001de2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	f003 0307 	and.w	r3, r3, #7
 8001dea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	f1c3 0307 	rsb	r3, r3, #7
 8001df2:	2b04      	cmp	r3, #4
 8001df4:	bf28      	it	cs
 8001df6:	2304      	movcs	r3, #4
 8001df8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	3304      	adds	r3, #4
 8001dfe:	2b06      	cmp	r3, #6
 8001e00:	d902      	bls.n	8001e08 <NVIC_EncodePriority+0x30>
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	3b03      	subs	r3, #3
 8001e06:	e000      	b.n	8001e0a <NVIC_EncodePriority+0x32>
 8001e08:	2300      	movs	r3, #0
 8001e0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e0c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e10:	69bb      	ldr	r3, [r7, #24]
 8001e12:	fa02 f303 	lsl.w	r3, r2, r3
 8001e16:	43da      	mvns	r2, r3
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	401a      	ands	r2, r3
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e20:	f04f 31ff 	mov.w	r1, #4294967295
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	fa01 f303 	lsl.w	r3, r1, r3
 8001e2a:	43d9      	mvns	r1, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e30:	4313      	orrs	r3, r2
         );
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3724      	adds	r7, #36	; 0x24
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
	...

08001e40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	3b01      	subs	r3, #1
 8001e4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e50:	d301      	bcc.n	8001e56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e52:	2301      	movs	r3, #1
 8001e54:	e00f      	b.n	8001e76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e56:	4a0a      	ldr	r2, [pc, #40]	; (8001e80 <SysTick_Config+0x40>)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	3b01      	subs	r3, #1
 8001e5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e5e:	210f      	movs	r1, #15
 8001e60:	f04f 30ff 	mov.w	r0, #4294967295
 8001e64:	f7ff ff8e 	bl	8001d84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e68:	4b05      	ldr	r3, [pc, #20]	; (8001e80 <SysTick_Config+0x40>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e6e:	4b04      	ldr	r3, [pc, #16]	; (8001e80 <SysTick_Config+0x40>)
 8001e70:	2207      	movs	r2, #7
 8001e72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e74:	2300      	movs	r3, #0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3708      	adds	r7, #8
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	e000e010 	.word	0xe000e010

08001e84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f7ff ff29 	bl	8001ce4 <__NVIC_SetPriorityGrouping>
}
 8001e92:	bf00      	nop
 8001e94:	3708      	adds	r7, #8
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}

08001e9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e9a:	b580      	push	{r7, lr}
 8001e9c:	b086      	sub	sp, #24
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	60b9      	str	r1, [r7, #8]
 8001ea4:	607a      	str	r2, [r7, #4]
 8001ea6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001eac:	f7ff ff3e 	bl	8001d2c <__NVIC_GetPriorityGrouping>
 8001eb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	68b9      	ldr	r1, [r7, #8]
 8001eb6:	6978      	ldr	r0, [r7, #20]
 8001eb8:	f7ff ff8e 	bl	8001dd8 <NVIC_EncodePriority>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ec2:	4611      	mov	r1, r2
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f7ff ff5d 	bl	8001d84 <__NVIC_SetPriority>
}
 8001eca:	bf00      	nop
 8001ecc:	3718      	adds	r7, #24
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}

08001ed2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ed2:	b580      	push	{r7, lr}
 8001ed4:	b082      	sub	sp, #8
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	4603      	mov	r3, r0
 8001eda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001edc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7ff ff31 	bl	8001d48 <__NVIC_EnableIRQ>
}
 8001ee6:	bf00      	nop
 8001ee8:	3708      	adds	r7, #8
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}

08001eee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eee:	b580      	push	{r7, lr}
 8001ef0:	b082      	sub	sp, #8
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f7ff ffa2 	bl	8001e40 <SysTick_Config>
 8001efc:	4603      	mov	r3, r0
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}

08001f06 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f06:	b580      	push	{r7, lr}
 8001f08:	b084      	sub	sp, #16
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f12:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001f14:	f7ff feb6 	bl	8001c84 <HAL_GetTick>
 8001f18:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d008      	beq.n	8001f38 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2280      	movs	r2, #128	; 0x80
 8001f2a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e052      	b.n	8001fde <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f022 0216 	bic.w	r2, r2, #22
 8001f46:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	695a      	ldr	r2, [r3, #20]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f56:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d103      	bne.n	8001f68 <HAL_DMA_Abort+0x62>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d007      	beq.n	8001f78 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f022 0208 	bic.w	r2, r2, #8
 8001f76:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f022 0201 	bic.w	r2, r2, #1
 8001f86:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f88:	e013      	b.n	8001fb2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f8a:	f7ff fe7b 	bl	8001c84 <HAL_GetTick>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	2b05      	cmp	r3, #5
 8001f96:	d90c      	bls.n	8001fb2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2220      	movs	r2, #32
 8001f9c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2203      	movs	r2, #3
 8001fa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e015      	b.n	8001fde <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 0301 	and.w	r3, r3, #1
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d1e4      	bne.n	8001f8a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fc4:	223f      	movs	r2, #63	; 0x3f
 8001fc6:	409a      	lsls	r2, r3
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2201      	movs	r2, #1
 8001fd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001fdc:	2300      	movs	r3, #0
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3710      	adds	r7, #16
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}

08001fe6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001fe6:	b480      	push	{r7}
 8001fe8:	b083      	sub	sp, #12
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	2b02      	cmp	r3, #2
 8001ff8:	d004      	beq.n	8002004 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2280      	movs	r2, #128	; 0x80
 8001ffe:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e00c      	b.n	800201e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2205      	movs	r2, #5
 8002008:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f022 0201 	bic.w	r2, r2, #1
 800201a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800201c:	2300      	movs	r3, #0
}
 800201e:	4618      	mov	r0, r3
 8002020:	370c      	adds	r7, #12
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr

0800202a <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800202a:	b480      	push	{r7}
 800202c:	b083      	sub	sp, #12
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002038:	b2db      	uxtb	r3, r3
}
 800203a:	4618      	mov	r0, r3
 800203c:	370c      	adds	r7, #12
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
	...

08002048 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002048:	b480      	push	{r7}
 800204a:	b089      	sub	sp, #36	; 0x24
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002052:	2300      	movs	r3, #0
 8002054:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002056:	2300      	movs	r3, #0
 8002058:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800205a:	2300      	movs	r3, #0
 800205c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800205e:	2300      	movs	r3, #0
 8002060:	61fb      	str	r3, [r7, #28]
 8002062:	e177      	b.n	8002354 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002064:	2201      	movs	r2, #1
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	fa02 f303 	lsl.w	r3, r2, r3
 800206c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	697a      	ldr	r2, [r7, #20]
 8002074:	4013      	ands	r3, r2
 8002076:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002078:	693a      	ldr	r2, [r7, #16]
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	429a      	cmp	r2, r3
 800207e:	f040 8166 	bne.w	800234e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	f003 0303 	and.w	r3, r3, #3
 800208a:	2b01      	cmp	r3, #1
 800208c:	d005      	beq.n	800209a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002096:	2b02      	cmp	r3, #2
 8002098:	d130      	bne.n	80020fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	005b      	lsls	r3, r3, #1
 80020a4:	2203      	movs	r2, #3
 80020a6:	fa02 f303 	lsl.w	r3, r2, r3
 80020aa:	43db      	mvns	r3, r3
 80020ac:	69ba      	ldr	r2, [r7, #24]
 80020ae:	4013      	ands	r3, r2
 80020b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	68da      	ldr	r2, [r3, #12]
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	005b      	lsls	r3, r3, #1
 80020ba:	fa02 f303 	lsl.w	r3, r2, r3
 80020be:	69ba      	ldr	r2, [r7, #24]
 80020c0:	4313      	orrs	r3, r2
 80020c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	69ba      	ldr	r2, [r7, #24]
 80020c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020d0:	2201      	movs	r2, #1
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	fa02 f303 	lsl.w	r3, r2, r3
 80020d8:	43db      	mvns	r3, r3
 80020da:	69ba      	ldr	r2, [r7, #24]
 80020dc:	4013      	ands	r3, r2
 80020de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	091b      	lsrs	r3, r3, #4
 80020e6:	f003 0201 	and.w	r2, r3, #1
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	fa02 f303 	lsl.w	r3, r2, r3
 80020f0:	69ba      	ldr	r2, [r7, #24]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	69ba      	ldr	r2, [r7, #24]
 80020fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f003 0303 	and.w	r3, r3, #3
 8002104:	2b03      	cmp	r3, #3
 8002106:	d017      	beq.n	8002138 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	005b      	lsls	r3, r3, #1
 8002112:	2203      	movs	r2, #3
 8002114:	fa02 f303 	lsl.w	r3, r2, r3
 8002118:	43db      	mvns	r3, r3
 800211a:	69ba      	ldr	r2, [r7, #24]
 800211c:	4013      	ands	r3, r2
 800211e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	689a      	ldr	r2, [r3, #8]
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	005b      	lsls	r3, r3, #1
 8002128:	fa02 f303 	lsl.w	r3, r2, r3
 800212c:	69ba      	ldr	r2, [r7, #24]
 800212e:	4313      	orrs	r3, r2
 8002130:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	69ba      	ldr	r2, [r7, #24]
 8002136:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f003 0303 	and.w	r3, r3, #3
 8002140:	2b02      	cmp	r3, #2
 8002142:	d123      	bne.n	800218c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	08da      	lsrs	r2, r3, #3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	3208      	adds	r2, #8
 800214c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002150:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	f003 0307 	and.w	r3, r3, #7
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	220f      	movs	r2, #15
 800215c:	fa02 f303 	lsl.w	r3, r2, r3
 8002160:	43db      	mvns	r3, r3
 8002162:	69ba      	ldr	r2, [r7, #24]
 8002164:	4013      	ands	r3, r2
 8002166:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	691a      	ldr	r2, [r3, #16]
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	f003 0307 	and.w	r3, r3, #7
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	fa02 f303 	lsl.w	r3, r2, r3
 8002178:	69ba      	ldr	r2, [r7, #24]
 800217a:	4313      	orrs	r3, r2
 800217c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	08da      	lsrs	r2, r3, #3
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	3208      	adds	r2, #8
 8002186:	69b9      	ldr	r1, [r7, #24]
 8002188:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	005b      	lsls	r3, r3, #1
 8002196:	2203      	movs	r2, #3
 8002198:	fa02 f303 	lsl.w	r3, r2, r3
 800219c:	43db      	mvns	r3, r3
 800219e:	69ba      	ldr	r2, [r7, #24]
 80021a0:	4013      	ands	r3, r2
 80021a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f003 0203 	and.w	r2, r3, #3
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	005b      	lsls	r3, r3, #1
 80021b0:	fa02 f303 	lsl.w	r3, r2, r3
 80021b4:	69ba      	ldr	r2, [r7, #24]
 80021b6:	4313      	orrs	r3, r2
 80021b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	69ba      	ldr	r2, [r7, #24]
 80021be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	f000 80c0 	beq.w	800234e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021ce:	2300      	movs	r3, #0
 80021d0:	60fb      	str	r3, [r7, #12]
 80021d2:	4b66      	ldr	r3, [pc, #408]	; (800236c <HAL_GPIO_Init+0x324>)
 80021d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021d6:	4a65      	ldr	r2, [pc, #404]	; (800236c <HAL_GPIO_Init+0x324>)
 80021d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021dc:	6453      	str	r3, [r2, #68]	; 0x44
 80021de:	4b63      	ldr	r3, [pc, #396]	; (800236c <HAL_GPIO_Init+0x324>)
 80021e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021e6:	60fb      	str	r3, [r7, #12]
 80021e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021ea:	4a61      	ldr	r2, [pc, #388]	; (8002370 <HAL_GPIO_Init+0x328>)
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	089b      	lsrs	r3, r3, #2
 80021f0:	3302      	adds	r3, #2
 80021f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	f003 0303 	and.w	r3, r3, #3
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	220f      	movs	r2, #15
 8002202:	fa02 f303 	lsl.w	r3, r2, r3
 8002206:	43db      	mvns	r3, r3
 8002208:	69ba      	ldr	r2, [r7, #24]
 800220a:	4013      	ands	r3, r2
 800220c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a58      	ldr	r2, [pc, #352]	; (8002374 <HAL_GPIO_Init+0x32c>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d037      	beq.n	8002286 <HAL_GPIO_Init+0x23e>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4a57      	ldr	r2, [pc, #348]	; (8002378 <HAL_GPIO_Init+0x330>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d031      	beq.n	8002282 <HAL_GPIO_Init+0x23a>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4a56      	ldr	r2, [pc, #344]	; (800237c <HAL_GPIO_Init+0x334>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d02b      	beq.n	800227e <HAL_GPIO_Init+0x236>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4a55      	ldr	r2, [pc, #340]	; (8002380 <HAL_GPIO_Init+0x338>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d025      	beq.n	800227a <HAL_GPIO_Init+0x232>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4a54      	ldr	r2, [pc, #336]	; (8002384 <HAL_GPIO_Init+0x33c>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d01f      	beq.n	8002276 <HAL_GPIO_Init+0x22e>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4a53      	ldr	r2, [pc, #332]	; (8002388 <HAL_GPIO_Init+0x340>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d019      	beq.n	8002272 <HAL_GPIO_Init+0x22a>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4a52      	ldr	r2, [pc, #328]	; (800238c <HAL_GPIO_Init+0x344>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d013      	beq.n	800226e <HAL_GPIO_Init+0x226>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4a51      	ldr	r2, [pc, #324]	; (8002390 <HAL_GPIO_Init+0x348>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d00d      	beq.n	800226a <HAL_GPIO_Init+0x222>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4a50      	ldr	r2, [pc, #320]	; (8002394 <HAL_GPIO_Init+0x34c>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d007      	beq.n	8002266 <HAL_GPIO_Init+0x21e>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4a4f      	ldr	r2, [pc, #316]	; (8002398 <HAL_GPIO_Init+0x350>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d101      	bne.n	8002262 <HAL_GPIO_Init+0x21a>
 800225e:	2309      	movs	r3, #9
 8002260:	e012      	b.n	8002288 <HAL_GPIO_Init+0x240>
 8002262:	230a      	movs	r3, #10
 8002264:	e010      	b.n	8002288 <HAL_GPIO_Init+0x240>
 8002266:	2308      	movs	r3, #8
 8002268:	e00e      	b.n	8002288 <HAL_GPIO_Init+0x240>
 800226a:	2307      	movs	r3, #7
 800226c:	e00c      	b.n	8002288 <HAL_GPIO_Init+0x240>
 800226e:	2306      	movs	r3, #6
 8002270:	e00a      	b.n	8002288 <HAL_GPIO_Init+0x240>
 8002272:	2305      	movs	r3, #5
 8002274:	e008      	b.n	8002288 <HAL_GPIO_Init+0x240>
 8002276:	2304      	movs	r3, #4
 8002278:	e006      	b.n	8002288 <HAL_GPIO_Init+0x240>
 800227a:	2303      	movs	r3, #3
 800227c:	e004      	b.n	8002288 <HAL_GPIO_Init+0x240>
 800227e:	2302      	movs	r3, #2
 8002280:	e002      	b.n	8002288 <HAL_GPIO_Init+0x240>
 8002282:	2301      	movs	r3, #1
 8002284:	e000      	b.n	8002288 <HAL_GPIO_Init+0x240>
 8002286:	2300      	movs	r3, #0
 8002288:	69fa      	ldr	r2, [r7, #28]
 800228a:	f002 0203 	and.w	r2, r2, #3
 800228e:	0092      	lsls	r2, r2, #2
 8002290:	4093      	lsls	r3, r2
 8002292:	69ba      	ldr	r2, [r7, #24]
 8002294:	4313      	orrs	r3, r2
 8002296:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002298:	4935      	ldr	r1, [pc, #212]	; (8002370 <HAL_GPIO_Init+0x328>)
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	089b      	lsrs	r3, r3, #2
 800229e:	3302      	adds	r3, #2
 80022a0:	69ba      	ldr	r2, [r7, #24]
 80022a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022a6:	4b3d      	ldr	r3, [pc, #244]	; (800239c <HAL_GPIO_Init+0x354>)
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	43db      	mvns	r3, r3
 80022b0:	69ba      	ldr	r2, [r7, #24]
 80022b2:	4013      	ands	r3, r2
 80022b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d003      	beq.n	80022ca <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80022c2:	69ba      	ldr	r2, [r7, #24]
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022ca:	4a34      	ldr	r2, [pc, #208]	; (800239c <HAL_GPIO_Init+0x354>)
 80022cc:	69bb      	ldr	r3, [r7, #24]
 80022ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022d0:	4b32      	ldr	r3, [pc, #200]	; (800239c <HAL_GPIO_Init+0x354>)
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	43db      	mvns	r3, r3
 80022da:	69ba      	ldr	r2, [r7, #24]
 80022dc:	4013      	ands	r3, r2
 80022de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d003      	beq.n	80022f4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80022ec:	69ba      	ldr	r2, [r7, #24]
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022f4:	4a29      	ldr	r2, [pc, #164]	; (800239c <HAL_GPIO_Init+0x354>)
 80022f6:	69bb      	ldr	r3, [r7, #24]
 80022f8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80022fa:	4b28      	ldr	r3, [pc, #160]	; (800239c <HAL_GPIO_Init+0x354>)
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	43db      	mvns	r3, r3
 8002304:	69ba      	ldr	r2, [r7, #24]
 8002306:	4013      	ands	r3, r2
 8002308:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d003      	beq.n	800231e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002316:	69ba      	ldr	r2, [r7, #24]
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	4313      	orrs	r3, r2
 800231c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800231e:	4a1f      	ldr	r2, [pc, #124]	; (800239c <HAL_GPIO_Init+0x354>)
 8002320:	69bb      	ldr	r3, [r7, #24]
 8002322:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002324:	4b1d      	ldr	r3, [pc, #116]	; (800239c <HAL_GPIO_Init+0x354>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	43db      	mvns	r3, r3
 800232e:	69ba      	ldr	r2, [r7, #24]
 8002330:	4013      	ands	r3, r2
 8002332:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d003      	beq.n	8002348 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002340:	69ba      	ldr	r2, [r7, #24]
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	4313      	orrs	r3, r2
 8002346:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002348:	4a14      	ldr	r2, [pc, #80]	; (800239c <HAL_GPIO_Init+0x354>)
 800234a:	69bb      	ldr	r3, [r7, #24]
 800234c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	3301      	adds	r3, #1
 8002352:	61fb      	str	r3, [r7, #28]
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	2b0f      	cmp	r3, #15
 8002358:	f67f ae84 	bls.w	8002064 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800235c:	bf00      	nop
 800235e:	bf00      	nop
 8002360:	3724      	adds	r7, #36	; 0x24
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop
 800236c:	40023800 	.word	0x40023800
 8002370:	40013800 	.word	0x40013800
 8002374:	40020000 	.word	0x40020000
 8002378:	40020400 	.word	0x40020400
 800237c:	40020800 	.word	0x40020800
 8002380:	40020c00 	.word	0x40020c00
 8002384:	40021000 	.word	0x40021000
 8002388:	40021400 	.word	0x40021400
 800238c:	40021800 	.word	0x40021800
 8002390:	40021c00 	.word	0x40021c00
 8002394:	40022000 	.word	0x40022000
 8002398:	40022400 	.word	0x40022400
 800239c:	40013c00 	.word	0x40013c00

080023a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	460b      	mov	r3, r1
 80023aa:	807b      	strh	r3, [r7, #2]
 80023ac:	4613      	mov	r3, r2
 80023ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023b0:	787b      	ldrb	r3, [r7, #1]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d003      	beq.n	80023be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023b6:	887a      	ldrh	r2, [r7, #2]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80023bc:	e003      	b.n	80023c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80023be:	887b      	ldrh	r3, [r7, #2]
 80023c0:	041a      	lsls	r2, r3, #16
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	619a      	str	r2, [r3, #24]
}
 80023c6:	bf00      	nop
 80023c8:	370c      	adds	r7, #12
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr
	...

080023d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b084      	sub	sp, #16
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d101      	bne.n	80023e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e12b      	b.n	800263e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d106      	bne.n	8002400 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f7ff f88e 	bl	800151c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2224      	movs	r2, #36	; 0x24
 8002404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f022 0201 	bic.w	r2, r2, #1
 8002416:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002426:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002436:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002438:	f003 f992 	bl	8005760 <HAL_RCC_GetPCLK1Freq>
 800243c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	4a81      	ldr	r2, [pc, #516]	; (8002648 <HAL_I2C_Init+0x274>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d807      	bhi.n	8002458 <HAL_I2C_Init+0x84>
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	4a80      	ldr	r2, [pc, #512]	; (800264c <HAL_I2C_Init+0x278>)
 800244c:	4293      	cmp	r3, r2
 800244e:	bf94      	ite	ls
 8002450:	2301      	movls	r3, #1
 8002452:	2300      	movhi	r3, #0
 8002454:	b2db      	uxtb	r3, r3
 8002456:	e006      	b.n	8002466 <HAL_I2C_Init+0x92>
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	4a7d      	ldr	r2, [pc, #500]	; (8002650 <HAL_I2C_Init+0x27c>)
 800245c:	4293      	cmp	r3, r2
 800245e:	bf94      	ite	ls
 8002460:	2301      	movls	r3, #1
 8002462:	2300      	movhi	r3, #0
 8002464:	b2db      	uxtb	r3, r3
 8002466:	2b00      	cmp	r3, #0
 8002468:	d001      	beq.n	800246e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e0e7      	b.n	800263e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	4a78      	ldr	r2, [pc, #480]	; (8002654 <HAL_I2C_Init+0x280>)
 8002472:	fba2 2303 	umull	r2, r3, r2, r3
 8002476:	0c9b      	lsrs	r3, r3, #18
 8002478:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	68ba      	ldr	r2, [r7, #8]
 800248a:	430a      	orrs	r2, r1
 800248c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	6a1b      	ldr	r3, [r3, #32]
 8002494:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	4a6a      	ldr	r2, [pc, #424]	; (8002648 <HAL_I2C_Init+0x274>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d802      	bhi.n	80024a8 <HAL_I2C_Init+0xd4>
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	3301      	adds	r3, #1
 80024a6:	e009      	b.n	80024bc <HAL_I2C_Init+0xe8>
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80024ae:	fb02 f303 	mul.w	r3, r2, r3
 80024b2:	4a69      	ldr	r2, [pc, #420]	; (8002658 <HAL_I2C_Init+0x284>)
 80024b4:	fba2 2303 	umull	r2, r3, r2, r3
 80024b8:	099b      	lsrs	r3, r3, #6
 80024ba:	3301      	adds	r3, #1
 80024bc:	687a      	ldr	r2, [r7, #4]
 80024be:	6812      	ldr	r2, [r2, #0]
 80024c0:	430b      	orrs	r3, r1
 80024c2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	69db      	ldr	r3, [r3, #28]
 80024ca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80024ce:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	495c      	ldr	r1, [pc, #368]	; (8002648 <HAL_I2C_Init+0x274>)
 80024d8:	428b      	cmp	r3, r1
 80024da:	d819      	bhi.n	8002510 <HAL_I2C_Init+0x13c>
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	1e59      	subs	r1, r3, #1
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	005b      	lsls	r3, r3, #1
 80024e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80024ea:	1c59      	adds	r1, r3, #1
 80024ec:	f640 73fc 	movw	r3, #4092	; 0xffc
 80024f0:	400b      	ands	r3, r1
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d00a      	beq.n	800250c <HAL_I2C_Init+0x138>
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	1e59      	subs	r1, r3, #1
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	005b      	lsls	r3, r3, #1
 8002500:	fbb1 f3f3 	udiv	r3, r1, r3
 8002504:	3301      	adds	r3, #1
 8002506:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800250a:	e051      	b.n	80025b0 <HAL_I2C_Init+0x1dc>
 800250c:	2304      	movs	r3, #4
 800250e:	e04f      	b.n	80025b0 <HAL_I2C_Init+0x1dc>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d111      	bne.n	800253c <HAL_I2C_Init+0x168>
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	1e58      	subs	r0, r3, #1
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6859      	ldr	r1, [r3, #4]
 8002520:	460b      	mov	r3, r1
 8002522:	005b      	lsls	r3, r3, #1
 8002524:	440b      	add	r3, r1
 8002526:	fbb0 f3f3 	udiv	r3, r0, r3
 800252a:	3301      	adds	r3, #1
 800252c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002530:	2b00      	cmp	r3, #0
 8002532:	bf0c      	ite	eq
 8002534:	2301      	moveq	r3, #1
 8002536:	2300      	movne	r3, #0
 8002538:	b2db      	uxtb	r3, r3
 800253a:	e012      	b.n	8002562 <HAL_I2C_Init+0x18e>
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	1e58      	subs	r0, r3, #1
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6859      	ldr	r1, [r3, #4]
 8002544:	460b      	mov	r3, r1
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	440b      	add	r3, r1
 800254a:	0099      	lsls	r1, r3, #2
 800254c:	440b      	add	r3, r1
 800254e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002552:	3301      	adds	r3, #1
 8002554:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002558:	2b00      	cmp	r3, #0
 800255a:	bf0c      	ite	eq
 800255c:	2301      	moveq	r3, #1
 800255e:	2300      	movne	r3, #0
 8002560:	b2db      	uxtb	r3, r3
 8002562:	2b00      	cmp	r3, #0
 8002564:	d001      	beq.n	800256a <HAL_I2C_Init+0x196>
 8002566:	2301      	movs	r3, #1
 8002568:	e022      	b.n	80025b0 <HAL_I2C_Init+0x1dc>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d10e      	bne.n	8002590 <HAL_I2C_Init+0x1bc>
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	1e58      	subs	r0, r3, #1
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6859      	ldr	r1, [r3, #4]
 800257a:	460b      	mov	r3, r1
 800257c:	005b      	lsls	r3, r3, #1
 800257e:	440b      	add	r3, r1
 8002580:	fbb0 f3f3 	udiv	r3, r0, r3
 8002584:	3301      	adds	r3, #1
 8002586:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800258a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800258e:	e00f      	b.n	80025b0 <HAL_I2C_Init+0x1dc>
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	1e58      	subs	r0, r3, #1
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6859      	ldr	r1, [r3, #4]
 8002598:	460b      	mov	r3, r1
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	440b      	add	r3, r1
 800259e:	0099      	lsls	r1, r3, #2
 80025a0:	440b      	add	r3, r1
 80025a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80025a6:	3301      	adds	r3, #1
 80025a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80025b0:	6879      	ldr	r1, [r7, #4]
 80025b2:	6809      	ldr	r1, [r1, #0]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	69da      	ldr	r2, [r3, #28]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6a1b      	ldr	r3, [r3, #32]
 80025ca:	431a      	orrs	r2, r3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	430a      	orrs	r2, r1
 80025d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80025de:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	6911      	ldr	r1, [r2, #16]
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	68d2      	ldr	r2, [r2, #12]
 80025ea:	4311      	orrs	r1, r2
 80025ec:	687a      	ldr	r2, [r7, #4]
 80025ee:	6812      	ldr	r2, [r2, #0]
 80025f0:	430b      	orrs	r3, r1
 80025f2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	68db      	ldr	r3, [r3, #12]
 80025fa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	695a      	ldr	r2, [r3, #20]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	699b      	ldr	r3, [r3, #24]
 8002606:	431a      	orrs	r2, r3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	430a      	orrs	r2, r1
 800260e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f042 0201 	orr.w	r2, r2, #1
 800261e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2200      	movs	r2, #0
 8002624:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2220      	movs	r2, #32
 800262a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2200      	movs	r2, #0
 8002632:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2200      	movs	r2, #0
 8002638:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800263c:	2300      	movs	r3, #0
}
 800263e:	4618      	mov	r0, r3
 8002640:	3710      	adds	r7, #16
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	000186a0 	.word	0x000186a0
 800264c:	001e847f 	.word	0x001e847f
 8002650:	003d08ff 	.word	0x003d08ff
 8002654:	431bde83 	.word	0x431bde83
 8002658:	10624dd3 	.word	0x10624dd3

0800265c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b088      	sub	sp, #32
 8002660:	af02      	add	r7, sp, #8
 8002662:	60f8      	str	r0, [r7, #12]
 8002664:	607a      	str	r2, [r7, #4]
 8002666:	461a      	mov	r2, r3
 8002668:	460b      	mov	r3, r1
 800266a:	817b      	strh	r3, [r7, #10]
 800266c:	4613      	mov	r3, r2
 800266e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002670:	f7ff fb08 	bl	8001c84 <HAL_GetTick>
 8002674:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800267c:	b2db      	uxtb	r3, r3
 800267e:	2b20      	cmp	r3, #32
 8002680:	f040 80e0 	bne.w	8002844 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	9300      	str	r3, [sp, #0]
 8002688:	2319      	movs	r3, #25
 800268a:	2201      	movs	r2, #1
 800268c:	4970      	ldr	r1, [pc, #448]	; (8002850 <HAL_I2C_Master_Transmit+0x1f4>)
 800268e:	68f8      	ldr	r0, [r7, #12]
 8002690:	f002 f900 	bl	8004894 <I2C_WaitOnFlagUntilTimeout>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d001      	beq.n	800269e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800269a:	2302      	movs	r3, #2
 800269c:	e0d3      	b.n	8002846 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d101      	bne.n	80026ac <HAL_I2C_Master_Transmit+0x50>
 80026a8:	2302      	movs	r3, #2
 80026aa:	e0cc      	b.n	8002846 <HAL_I2C_Master_Transmit+0x1ea>
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2201      	movs	r2, #1
 80026b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 0301 	and.w	r3, r3, #1
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d007      	beq.n	80026d2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f042 0201 	orr.w	r2, r2, #1
 80026d0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026e0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	2221      	movs	r2, #33	; 0x21
 80026e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2210      	movs	r2, #16
 80026ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2200      	movs	r2, #0
 80026f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	893a      	ldrh	r2, [r7, #8]
 8002702:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002708:	b29a      	uxth	r2, r3
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	4a50      	ldr	r2, [pc, #320]	; (8002854 <HAL_I2C_Master_Transmit+0x1f8>)
 8002712:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002714:	8979      	ldrh	r1, [r7, #10]
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	6a3a      	ldr	r2, [r7, #32]
 800271a:	68f8      	ldr	r0, [r7, #12]
 800271c:	f001 fea8 	bl	8004470 <I2C_MasterRequestWrite>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d001      	beq.n	800272a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e08d      	b.n	8002846 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800272a:	2300      	movs	r3, #0
 800272c:	613b      	str	r3, [r7, #16]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	695b      	ldr	r3, [r3, #20]
 8002734:	613b      	str	r3, [r7, #16]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	699b      	ldr	r3, [r3, #24]
 800273c:	613b      	str	r3, [r7, #16]
 800273e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002740:	e066      	b.n	8002810 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002742:	697a      	ldr	r2, [r7, #20]
 8002744:	6a39      	ldr	r1, [r7, #32]
 8002746:	68f8      	ldr	r0, [r7, #12]
 8002748:	f002 f97a 	bl	8004a40 <I2C_WaitOnTXEFlagUntilTimeout>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d00d      	beq.n	800276e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002756:	2b04      	cmp	r3, #4
 8002758:	d107      	bne.n	800276a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002768:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e06b      	b.n	8002846 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002772:	781a      	ldrb	r2, [r3, #0]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800277e:	1c5a      	adds	r2, r3, #1
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002788:	b29b      	uxth	r3, r3
 800278a:	3b01      	subs	r3, #1
 800278c:	b29a      	uxth	r2, r3
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002796:	3b01      	subs	r3, #1
 8002798:	b29a      	uxth	r2, r3
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	695b      	ldr	r3, [r3, #20]
 80027a4:	f003 0304 	and.w	r3, r3, #4
 80027a8:	2b04      	cmp	r3, #4
 80027aa:	d11b      	bne.n	80027e4 <HAL_I2C_Master_Transmit+0x188>
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d017      	beq.n	80027e4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b8:	781a      	ldrb	r2, [r3, #0]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c4:	1c5a      	adds	r2, r3, #1
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ce:	b29b      	uxth	r3, r3
 80027d0:	3b01      	subs	r3, #1
 80027d2:	b29a      	uxth	r2, r3
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027dc:	3b01      	subs	r3, #1
 80027de:	b29a      	uxth	r2, r3
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027e4:	697a      	ldr	r2, [r7, #20]
 80027e6:	6a39      	ldr	r1, [r7, #32]
 80027e8:	68f8      	ldr	r0, [r7, #12]
 80027ea:	f002 f96a 	bl	8004ac2 <I2C_WaitOnBTFFlagUntilTimeout>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d00d      	beq.n	8002810 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f8:	2b04      	cmp	r3, #4
 80027fa:	d107      	bne.n	800280c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800280a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e01a      	b.n	8002846 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002814:	2b00      	cmp	r3, #0
 8002816:	d194      	bne.n	8002742 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002826:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2220      	movs	r2, #32
 800282c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2200      	movs	r2, #0
 8002834:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2200      	movs	r2, #0
 800283c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002840:	2300      	movs	r3, #0
 8002842:	e000      	b.n	8002846 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002844:	2302      	movs	r3, #2
  }
}
 8002846:	4618      	mov	r0, r3
 8002848:	3718      	adds	r7, #24
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	00100002 	.word	0x00100002
 8002854:	ffff0000 	.word	0xffff0000

08002858 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b08c      	sub	sp, #48	; 0x30
 800285c:	af02      	add	r7, sp, #8
 800285e:	60f8      	str	r0, [r7, #12]
 8002860:	4608      	mov	r0, r1
 8002862:	4611      	mov	r1, r2
 8002864:	461a      	mov	r2, r3
 8002866:	4603      	mov	r3, r0
 8002868:	817b      	strh	r3, [r7, #10]
 800286a:	460b      	mov	r3, r1
 800286c:	813b      	strh	r3, [r7, #8]
 800286e:	4613      	mov	r3, r2
 8002870:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002872:	f7ff fa07 	bl	8001c84 <HAL_GetTick>
 8002876:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800287e:	b2db      	uxtb	r3, r3
 8002880:	2b20      	cmp	r3, #32
 8002882:	f040 8208 	bne.w	8002c96 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002888:	9300      	str	r3, [sp, #0]
 800288a:	2319      	movs	r3, #25
 800288c:	2201      	movs	r2, #1
 800288e:	497b      	ldr	r1, [pc, #492]	; (8002a7c <HAL_I2C_Mem_Read+0x224>)
 8002890:	68f8      	ldr	r0, [r7, #12]
 8002892:	f001 ffff 	bl	8004894 <I2C_WaitOnFlagUntilTimeout>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d001      	beq.n	80028a0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800289c:	2302      	movs	r3, #2
 800289e:	e1fb      	b.n	8002c98 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d101      	bne.n	80028ae <HAL_I2C_Mem_Read+0x56>
 80028aa:	2302      	movs	r3, #2
 80028ac:	e1f4      	b.n	8002c98 <HAL_I2C_Mem_Read+0x440>
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2201      	movs	r2, #1
 80028b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 0301 	and.w	r3, r3, #1
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d007      	beq.n	80028d4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f042 0201 	orr.w	r2, r2, #1
 80028d2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028e2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2222      	movs	r2, #34	; 0x22
 80028e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2240      	movs	r2, #64	; 0x40
 80028f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2200      	movs	r2, #0
 80028f8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028fe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002904:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800290a:	b29a      	uxth	r2, r3
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	4a5b      	ldr	r2, [pc, #364]	; (8002a80 <HAL_I2C_Mem_Read+0x228>)
 8002914:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002916:	88f8      	ldrh	r0, [r7, #6]
 8002918:	893a      	ldrh	r2, [r7, #8]
 800291a:	8979      	ldrh	r1, [r7, #10]
 800291c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291e:	9301      	str	r3, [sp, #4]
 8002920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002922:	9300      	str	r3, [sp, #0]
 8002924:	4603      	mov	r3, r0
 8002926:	68f8      	ldr	r0, [r7, #12]
 8002928:	f001 fe24 	bl	8004574 <I2C_RequestMemoryRead>
 800292c:	4603      	mov	r3, r0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d001      	beq.n	8002936 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e1b0      	b.n	8002c98 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800293a:	2b00      	cmp	r3, #0
 800293c:	d113      	bne.n	8002966 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800293e:	2300      	movs	r3, #0
 8002940:	623b      	str	r3, [r7, #32]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	695b      	ldr	r3, [r3, #20]
 8002948:	623b      	str	r3, [r7, #32]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	699b      	ldr	r3, [r3, #24]
 8002950:	623b      	str	r3, [r7, #32]
 8002952:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002962:	601a      	str	r2, [r3, #0]
 8002964:	e184      	b.n	8002c70 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800296a:	2b01      	cmp	r3, #1
 800296c:	d11b      	bne.n	80029a6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800297c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800297e:	2300      	movs	r3, #0
 8002980:	61fb      	str	r3, [r7, #28]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	695b      	ldr	r3, [r3, #20]
 8002988:	61fb      	str	r3, [r7, #28]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	699b      	ldr	r3, [r3, #24]
 8002990:	61fb      	str	r3, [r7, #28]
 8002992:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029a2:	601a      	str	r2, [r3, #0]
 80029a4:	e164      	b.n	8002c70 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d11b      	bne.n	80029e6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029bc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029cc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029ce:	2300      	movs	r3, #0
 80029d0:	61bb      	str	r3, [r7, #24]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	695b      	ldr	r3, [r3, #20]
 80029d8:	61bb      	str	r3, [r7, #24]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	699b      	ldr	r3, [r3, #24]
 80029e0:	61bb      	str	r3, [r7, #24]
 80029e2:	69bb      	ldr	r3, [r7, #24]
 80029e4:	e144      	b.n	8002c70 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029e6:	2300      	movs	r3, #0
 80029e8:	617b      	str	r3, [r7, #20]
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	695b      	ldr	r3, [r3, #20]
 80029f0:	617b      	str	r3, [r7, #20]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	699b      	ldr	r3, [r3, #24]
 80029f8:	617b      	str	r3, [r7, #20]
 80029fa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80029fc:	e138      	b.n	8002c70 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a02:	2b03      	cmp	r3, #3
 8002a04:	f200 80f1 	bhi.w	8002bea <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d123      	bne.n	8002a58 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a12:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002a14:	68f8      	ldr	r0, [r7, #12]
 8002a16:	f002 f8c7 	bl	8004ba8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d001      	beq.n	8002a24 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	e139      	b.n	8002c98 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	691a      	ldr	r2, [r3, #16]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a2e:	b2d2      	uxtb	r2, r2
 8002a30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a36:	1c5a      	adds	r2, r3, #1
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a40:	3b01      	subs	r3, #1
 8002a42:	b29a      	uxth	r2, r3
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a4c:	b29b      	uxth	r3, r3
 8002a4e:	3b01      	subs	r3, #1
 8002a50:	b29a      	uxth	r2, r3
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002a56:	e10b      	b.n	8002c70 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a5c:	2b02      	cmp	r3, #2
 8002a5e:	d14e      	bne.n	8002afe <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a62:	9300      	str	r3, [sp, #0]
 8002a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a66:	2200      	movs	r2, #0
 8002a68:	4906      	ldr	r1, [pc, #24]	; (8002a84 <HAL_I2C_Mem_Read+0x22c>)
 8002a6a:	68f8      	ldr	r0, [r7, #12]
 8002a6c:	f001 ff12 	bl	8004894 <I2C_WaitOnFlagUntilTimeout>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d008      	beq.n	8002a88 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e10e      	b.n	8002c98 <HAL_I2C_Mem_Read+0x440>
 8002a7a:	bf00      	nop
 8002a7c:	00100002 	.word	0x00100002
 8002a80:	ffff0000 	.word	0xffff0000
 8002a84:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a96:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	691a      	ldr	r2, [r3, #16]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa2:	b2d2      	uxtb	r2, r2
 8002aa4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aaa:	1c5a      	adds	r2, r3, #1
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ab4:	3b01      	subs	r3, #1
 8002ab6:	b29a      	uxth	r2, r3
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ac0:	b29b      	uxth	r3, r3
 8002ac2:	3b01      	subs	r3, #1
 8002ac4:	b29a      	uxth	r2, r3
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	691a      	ldr	r2, [r3, #16]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad4:	b2d2      	uxtb	r2, r2
 8002ad6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002adc:	1c5a      	adds	r2, r3, #1
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ae6:	3b01      	subs	r3, #1
 8002ae8:	b29a      	uxth	r2, r3
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	3b01      	subs	r3, #1
 8002af6:	b29a      	uxth	r2, r3
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002afc:	e0b8      	b.n	8002c70 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b00:	9300      	str	r3, [sp, #0]
 8002b02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b04:	2200      	movs	r2, #0
 8002b06:	4966      	ldr	r1, [pc, #408]	; (8002ca0 <HAL_I2C_Mem_Read+0x448>)
 8002b08:	68f8      	ldr	r0, [r7, #12]
 8002b0a:	f001 fec3 	bl	8004894 <I2C_WaitOnFlagUntilTimeout>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d001      	beq.n	8002b18 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	e0bf      	b.n	8002c98 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b26:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	691a      	ldr	r2, [r3, #16]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b32:	b2d2      	uxtb	r2, r2
 8002b34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b3a:	1c5a      	adds	r2, r3, #1
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b44:	3b01      	subs	r3, #1
 8002b46:	b29a      	uxth	r2, r3
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	3b01      	subs	r3, #1
 8002b54:	b29a      	uxth	r2, r3
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5c:	9300      	str	r3, [sp, #0]
 8002b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b60:	2200      	movs	r2, #0
 8002b62:	494f      	ldr	r1, [pc, #316]	; (8002ca0 <HAL_I2C_Mem_Read+0x448>)
 8002b64:	68f8      	ldr	r0, [r7, #12]
 8002b66:	f001 fe95 	bl	8004894 <I2C_WaitOnFlagUntilTimeout>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d001      	beq.n	8002b74 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e091      	b.n	8002c98 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b82:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	691a      	ldr	r2, [r3, #16]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b8e:	b2d2      	uxtb	r2, r2
 8002b90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b96:	1c5a      	adds	r2, r3, #1
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ba0:	3b01      	subs	r3, #1
 8002ba2:	b29a      	uxth	r2, r3
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bac:	b29b      	uxth	r3, r3
 8002bae:	3b01      	subs	r3, #1
 8002bb0:	b29a      	uxth	r2, r3
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	691a      	ldr	r2, [r3, #16]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc0:	b2d2      	uxtb	r2, r2
 8002bc2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc8:	1c5a      	adds	r2, r3, #1
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bd2:	3b01      	subs	r3, #1
 8002bd4:	b29a      	uxth	r2, r3
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	3b01      	subs	r3, #1
 8002be2:	b29a      	uxth	r2, r3
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002be8:	e042      	b.n	8002c70 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002bee:	68f8      	ldr	r0, [r7, #12]
 8002bf0:	f001 ffda 	bl	8004ba8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d001      	beq.n	8002bfe <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e04c      	b.n	8002c98 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	691a      	ldr	r2, [r3, #16]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c08:	b2d2      	uxtb	r2, r2
 8002c0a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c10:	1c5a      	adds	r2, r3, #1
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c1a:	3b01      	subs	r3, #1
 8002c1c:	b29a      	uxth	r2, r3
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c26:	b29b      	uxth	r3, r3
 8002c28:	3b01      	subs	r3, #1
 8002c2a:	b29a      	uxth	r2, r3
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	695b      	ldr	r3, [r3, #20]
 8002c36:	f003 0304 	and.w	r3, r3, #4
 8002c3a:	2b04      	cmp	r3, #4
 8002c3c:	d118      	bne.n	8002c70 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	691a      	ldr	r2, [r3, #16]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c48:	b2d2      	uxtb	r2, r2
 8002c4a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c50:	1c5a      	adds	r2, r3, #1
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c5a:	3b01      	subs	r3, #1
 8002c5c:	b29a      	uxth	r2, r3
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	3b01      	subs	r3, #1
 8002c6a:	b29a      	uxth	r2, r3
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	f47f aec2 	bne.w	80029fe <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2220      	movs	r2, #32
 8002c7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2200      	movs	r2, #0
 8002c86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002c92:	2300      	movs	r3, #0
 8002c94:	e000      	b.n	8002c98 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002c96:	2302      	movs	r3, #2
  }
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3728      	adds	r7, #40	; 0x28
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	00010004 	.word	0x00010004

08002ca4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b088      	sub	sp, #32
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002cac:	2300      	movs	r3, #0
 8002cae:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cbc:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002cc4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ccc:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002cce:	7bfb      	ldrb	r3, [r7, #15]
 8002cd0:	2b10      	cmp	r3, #16
 8002cd2:	d003      	beq.n	8002cdc <HAL_I2C_EV_IRQHandler+0x38>
 8002cd4:	7bfb      	ldrb	r3, [r7, #15]
 8002cd6:	2b40      	cmp	r3, #64	; 0x40
 8002cd8:	f040 80c1 	bne.w	8002e5e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	699b      	ldr	r3, [r3, #24]
 8002ce2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	695b      	ldr	r3, [r3, #20]
 8002cea:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	f003 0301 	and.w	r3, r3, #1
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d10d      	bne.n	8002d12 <HAL_I2C_EV_IRQHandler+0x6e>
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002cfc:	d003      	beq.n	8002d06 <HAL_I2C_EV_IRQHandler+0x62>
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002d04:	d101      	bne.n	8002d0a <HAL_I2C_EV_IRQHandler+0x66>
 8002d06:	2301      	movs	r3, #1
 8002d08:	e000      	b.n	8002d0c <HAL_I2C_EV_IRQHandler+0x68>
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	f000 8132 	beq.w	8002f76 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	f003 0301 	and.w	r3, r3, #1
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d00c      	beq.n	8002d36 <HAL_I2C_EV_IRQHandler+0x92>
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	0a5b      	lsrs	r3, r3, #9
 8002d20:	f003 0301 	and.w	r3, r3, #1
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d006      	beq.n	8002d36 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	f001 ffc2 	bl	8004cb2 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f000 fd83 	bl	800383a <I2C_Master_SB>
 8002d34:	e092      	b.n	8002e5c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	08db      	lsrs	r3, r3, #3
 8002d3a:	f003 0301 	and.w	r3, r3, #1
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d009      	beq.n	8002d56 <HAL_I2C_EV_IRQHandler+0xb2>
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	0a5b      	lsrs	r3, r3, #9
 8002d46:	f003 0301 	and.w	r3, r3, #1
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d003      	beq.n	8002d56 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f000 fdf9 	bl	8003946 <I2C_Master_ADD10>
 8002d54:	e082      	b.n	8002e5c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	085b      	lsrs	r3, r3, #1
 8002d5a:	f003 0301 	and.w	r3, r3, #1
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d009      	beq.n	8002d76 <HAL_I2C_EV_IRQHandler+0xd2>
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	0a5b      	lsrs	r3, r3, #9
 8002d66:	f003 0301 	and.w	r3, r3, #1
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d003      	beq.n	8002d76 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f000 fe13 	bl	800399a <I2C_Master_ADDR>
 8002d74:	e072      	b.n	8002e5c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002d76:	69bb      	ldr	r3, [r7, #24]
 8002d78:	089b      	lsrs	r3, r3, #2
 8002d7a:	f003 0301 	and.w	r3, r3, #1
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d03b      	beq.n	8002dfa <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d90:	f000 80f3 	beq.w	8002f7a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	09db      	lsrs	r3, r3, #7
 8002d98:	f003 0301 	and.w	r3, r3, #1
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d00f      	beq.n	8002dc0 <HAL_I2C_EV_IRQHandler+0x11c>
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	0a9b      	lsrs	r3, r3, #10
 8002da4:	f003 0301 	and.w	r3, r3, #1
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d009      	beq.n	8002dc0 <HAL_I2C_EV_IRQHandler+0x11c>
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	089b      	lsrs	r3, r3, #2
 8002db0:	f003 0301 	and.w	r3, r3, #1
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d103      	bne.n	8002dc0 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002db8:	6878      	ldr	r0, [r7, #4]
 8002dba:	f000 f9f3 	bl	80031a4 <I2C_MasterTransmit_TXE>
 8002dbe:	e04d      	b.n	8002e5c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	089b      	lsrs	r3, r3, #2
 8002dc4:	f003 0301 	and.w	r3, r3, #1
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	f000 80d6 	beq.w	8002f7a <HAL_I2C_EV_IRQHandler+0x2d6>
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	0a5b      	lsrs	r3, r3, #9
 8002dd2:	f003 0301 	and.w	r3, r3, #1
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	f000 80cf 	beq.w	8002f7a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002ddc:	7bbb      	ldrb	r3, [r7, #14]
 8002dde:	2b21      	cmp	r3, #33	; 0x21
 8002de0:	d103      	bne.n	8002dea <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f000 fa7a 	bl	80032dc <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002de8:	e0c7      	b.n	8002f7a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002dea:	7bfb      	ldrb	r3, [r7, #15]
 8002dec:	2b40      	cmp	r3, #64	; 0x40
 8002dee:	f040 80c4 	bne.w	8002f7a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f000 fae8 	bl	80033c8 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002df8:	e0bf      	b.n	8002f7a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e08:	f000 80b7 	beq.w	8002f7a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	099b      	lsrs	r3, r3, #6
 8002e10:	f003 0301 	and.w	r3, r3, #1
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d00f      	beq.n	8002e38 <HAL_I2C_EV_IRQHandler+0x194>
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	0a9b      	lsrs	r3, r3, #10
 8002e1c:	f003 0301 	and.w	r3, r3, #1
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d009      	beq.n	8002e38 <HAL_I2C_EV_IRQHandler+0x194>
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	089b      	lsrs	r3, r3, #2
 8002e28:	f003 0301 	and.w	r3, r3, #1
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d103      	bne.n	8002e38 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	f000 fb5d 	bl	80034f0 <I2C_MasterReceive_RXNE>
 8002e36:	e011      	b.n	8002e5c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	089b      	lsrs	r3, r3, #2
 8002e3c:	f003 0301 	and.w	r3, r3, #1
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	f000 809a 	beq.w	8002f7a <HAL_I2C_EV_IRQHandler+0x2d6>
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	0a5b      	lsrs	r3, r3, #9
 8002e4a:	f003 0301 	and.w	r3, r3, #1
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	f000 8093 	beq.w	8002f7a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	f000 fc06 	bl	8003666 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e5a:	e08e      	b.n	8002f7a <HAL_I2C_EV_IRQHandler+0x2d6>
 8002e5c:	e08d      	b.n	8002f7a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d004      	beq.n	8002e70 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	695b      	ldr	r3, [r3, #20]
 8002e6c:	61fb      	str	r3, [r7, #28]
 8002e6e:	e007      	b.n	8002e80 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	699b      	ldr	r3, [r3, #24]
 8002e76:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	695b      	ldr	r3, [r3, #20]
 8002e7e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	085b      	lsrs	r3, r3, #1
 8002e84:	f003 0301 	and.w	r3, r3, #1
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d012      	beq.n	8002eb2 <HAL_I2C_EV_IRQHandler+0x20e>
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	0a5b      	lsrs	r3, r3, #9
 8002e90:	f003 0301 	and.w	r3, r3, #1
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d00c      	beq.n	8002eb2 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d003      	beq.n	8002ea8 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	699b      	ldr	r3, [r3, #24]
 8002ea6:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002ea8:	69b9      	ldr	r1, [r7, #24]
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f000 ffc4 	bl	8003e38 <I2C_Slave_ADDR>
 8002eb0:	e066      	b.n	8002f80 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	091b      	lsrs	r3, r3, #4
 8002eb6:	f003 0301 	and.w	r3, r3, #1
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d009      	beq.n	8002ed2 <HAL_I2C_EV_IRQHandler+0x22e>
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	0a5b      	lsrs	r3, r3, #9
 8002ec2:	f003 0301 	and.w	r3, r3, #1
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d003      	beq.n	8002ed2 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f000 fffe 	bl	8003ecc <I2C_Slave_STOPF>
 8002ed0:	e056      	b.n	8002f80 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002ed2:	7bbb      	ldrb	r3, [r7, #14]
 8002ed4:	2b21      	cmp	r3, #33	; 0x21
 8002ed6:	d002      	beq.n	8002ede <HAL_I2C_EV_IRQHandler+0x23a>
 8002ed8:	7bbb      	ldrb	r3, [r7, #14]
 8002eda:	2b29      	cmp	r3, #41	; 0x29
 8002edc:	d125      	bne.n	8002f2a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	09db      	lsrs	r3, r3, #7
 8002ee2:	f003 0301 	and.w	r3, r3, #1
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d00f      	beq.n	8002f0a <HAL_I2C_EV_IRQHandler+0x266>
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	0a9b      	lsrs	r3, r3, #10
 8002eee:	f003 0301 	and.w	r3, r3, #1
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d009      	beq.n	8002f0a <HAL_I2C_EV_IRQHandler+0x266>
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	089b      	lsrs	r3, r3, #2
 8002efa:	f003 0301 	and.w	r3, r3, #1
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d103      	bne.n	8002f0a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f000 feda 	bl	8003cbc <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002f08:	e039      	b.n	8002f7e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	089b      	lsrs	r3, r3, #2
 8002f0e:	f003 0301 	and.w	r3, r3, #1
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d033      	beq.n	8002f7e <HAL_I2C_EV_IRQHandler+0x2da>
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	0a5b      	lsrs	r3, r3, #9
 8002f1a:	f003 0301 	and.w	r3, r3, #1
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d02d      	beq.n	8002f7e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f000 ff07 	bl	8003d36 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002f28:	e029      	b.n	8002f7e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	099b      	lsrs	r3, r3, #6
 8002f2e:	f003 0301 	and.w	r3, r3, #1
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d00f      	beq.n	8002f56 <HAL_I2C_EV_IRQHandler+0x2b2>
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	0a9b      	lsrs	r3, r3, #10
 8002f3a:	f003 0301 	and.w	r3, r3, #1
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d009      	beq.n	8002f56 <HAL_I2C_EV_IRQHandler+0x2b2>
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	089b      	lsrs	r3, r3, #2
 8002f46:	f003 0301 	and.w	r3, r3, #1
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d103      	bne.n	8002f56 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f000 ff12 	bl	8003d78 <I2C_SlaveReceive_RXNE>
 8002f54:	e014      	b.n	8002f80 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	089b      	lsrs	r3, r3, #2
 8002f5a:	f003 0301 	and.w	r3, r3, #1
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d00e      	beq.n	8002f80 <HAL_I2C_EV_IRQHandler+0x2dc>
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	0a5b      	lsrs	r3, r3, #9
 8002f66:	f003 0301 	and.w	r3, r3, #1
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d008      	beq.n	8002f80 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f000 ff40 	bl	8003df4 <I2C_SlaveReceive_BTF>
 8002f74:	e004      	b.n	8002f80 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8002f76:	bf00      	nop
 8002f78:	e002      	b.n	8002f80 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f7a:	bf00      	nop
 8002f7c:	e000      	b.n	8002f80 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002f7e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002f80:	3720      	adds	r7, #32
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}

08002f86 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002f86:	b580      	push	{r7, lr}
 8002f88:	b08a      	sub	sp, #40	; 0x28
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	695b      	ldr	r3, [r3, #20]
 8002f94:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002fa8:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002faa:	6a3b      	ldr	r3, [r7, #32]
 8002fac:	0a1b      	lsrs	r3, r3, #8
 8002fae:	f003 0301 	and.w	r3, r3, #1
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d00e      	beq.n	8002fd4 <HAL_I2C_ER_IRQHandler+0x4e>
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	0a1b      	lsrs	r3, r3, #8
 8002fba:	f003 0301 	and.w	r3, r3, #1
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d008      	beq.n	8002fd4 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8002fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc4:	f043 0301 	orr.w	r3, r3, #1
 8002fc8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002fd2:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002fd4:	6a3b      	ldr	r3, [r7, #32]
 8002fd6:	0a5b      	lsrs	r3, r3, #9
 8002fd8:	f003 0301 	and.w	r3, r3, #1
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d00e      	beq.n	8002ffe <HAL_I2C_ER_IRQHandler+0x78>
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	0a1b      	lsrs	r3, r3, #8
 8002fe4:	f003 0301 	and.w	r3, r3, #1
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d008      	beq.n	8002ffe <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8002fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fee:	f043 0302 	orr.w	r3, r3, #2
 8002ff2:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8002ffc:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002ffe:	6a3b      	ldr	r3, [r7, #32]
 8003000:	0a9b      	lsrs	r3, r3, #10
 8003002:	f003 0301 	and.w	r3, r3, #1
 8003006:	2b00      	cmp	r3, #0
 8003008:	d03f      	beq.n	800308a <HAL_I2C_ER_IRQHandler+0x104>
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	0a1b      	lsrs	r3, r3, #8
 800300e:	f003 0301 	and.w	r3, r3, #1
 8003012:	2b00      	cmp	r3, #0
 8003014:	d039      	beq.n	800308a <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8003016:	7efb      	ldrb	r3, [r7, #27]
 8003018:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800301e:	b29b      	uxth	r3, r3
 8003020:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003028:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800302e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003030:	7ebb      	ldrb	r3, [r7, #26]
 8003032:	2b20      	cmp	r3, #32
 8003034:	d112      	bne.n	800305c <HAL_I2C_ER_IRQHandler+0xd6>
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d10f      	bne.n	800305c <HAL_I2C_ER_IRQHandler+0xd6>
 800303c:	7cfb      	ldrb	r3, [r7, #19]
 800303e:	2b21      	cmp	r3, #33	; 0x21
 8003040:	d008      	beq.n	8003054 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003042:	7cfb      	ldrb	r3, [r7, #19]
 8003044:	2b29      	cmp	r3, #41	; 0x29
 8003046:	d005      	beq.n	8003054 <HAL_I2C_ER_IRQHandler+0xce>
 8003048:	7cfb      	ldrb	r3, [r7, #19]
 800304a:	2b28      	cmp	r3, #40	; 0x28
 800304c:	d106      	bne.n	800305c <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2b21      	cmp	r3, #33	; 0x21
 8003052:	d103      	bne.n	800305c <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f001 f869 	bl	800412c <I2C_Slave_AF>
 800305a:	e016      	b.n	800308a <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003064:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003068:	f043 0304 	orr.w	r3, r3, #4
 800306c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800306e:	7efb      	ldrb	r3, [r7, #27]
 8003070:	2b10      	cmp	r3, #16
 8003072:	d002      	beq.n	800307a <HAL_I2C_ER_IRQHandler+0xf4>
 8003074:	7efb      	ldrb	r3, [r7, #27]
 8003076:	2b40      	cmp	r3, #64	; 0x40
 8003078:	d107      	bne.n	800308a <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003088:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800308a:	6a3b      	ldr	r3, [r7, #32]
 800308c:	0adb      	lsrs	r3, r3, #11
 800308e:	f003 0301 	and.w	r3, r3, #1
 8003092:	2b00      	cmp	r3, #0
 8003094:	d00e      	beq.n	80030b4 <HAL_I2C_ER_IRQHandler+0x12e>
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	0a1b      	lsrs	r3, r3, #8
 800309a:	f003 0301 	and.w	r3, r3, #1
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d008      	beq.n	80030b4 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80030a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a4:	f043 0308 	orr.w	r3, r3, #8
 80030a8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80030b2:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80030b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d008      	beq.n	80030cc <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c0:	431a      	orrs	r2, r3
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f001 f8a0 	bl	800420c <I2C_ITError>
  }
}
 80030cc:	bf00      	nop
 80030ce:	3728      	adds	r7, #40	; 0x28
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}

080030d4 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80030dc:	bf00      	nop
 80030de:	370c      	adds	r7, #12
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr

080030e8 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b083      	sub	sp, #12
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80030f0:	bf00      	nop
 80030f2:	370c      	adds	r7, #12
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr

080030fc <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b083      	sub	sp, #12
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003104:	bf00      	nop
 8003106:	370c      	adds	r7, #12
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr

08003110 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003110:	b480      	push	{r7}
 8003112:	b083      	sub	sp, #12
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003118:	bf00      	nop
 800311a:	370c      	adds	r7, #12
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr

08003124 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	460b      	mov	r3, r1
 800312e:	70fb      	strb	r3, [r7, #3]
 8003130:	4613      	mov	r3, r2
 8003132:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003134:	bf00      	nop
 8003136:	370c      	adds	r7, #12
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr

08003140 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003140:	b480      	push	{r7}
 8003142:	b083      	sub	sp, #12
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003148:	bf00      	nop
 800314a:	370c      	adds	r7, #12
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr

08003154 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003154:	b480      	push	{r7}
 8003156:	b083      	sub	sp, #12
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800315c:	bf00      	nop
 800315e:	370c      	adds	r7, #12
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr

08003168 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003168:	b480      	push	{r7}
 800316a:	b083      	sub	sp, #12
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003170:	bf00      	nop
 8003172:	370c      	adds	r7, #12
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr

0800317c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800317c:	b480      	push	{r7}
 800317e:	b083      	sub	sp, #12
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003184:	bf00      	nop
 8003186:	370c      	adds	r7, #12
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr

08003190 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003190:	b480      	push	{r7}
 8003192:	b083      	sub	sp, #12
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003198:	bf00      	nop
 800319a:	370c      	adds	r7, #12
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr

080031a4 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b084      	sub	sp, #16
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031b2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80031ba:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031c0:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d150      	bne.n	800326c <I2C_MasterTransmit_TXE+0xc8>
 80031ca:	7bfb      	ldrb	r3, [r7, #15]
 80031cc:	2b21      	cmp	r3, #33	; 0x21
 80031ce:	d14d      	bne.n	800326c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	2b08      	cmp	r3, #8
 80031d4:	d01d      	beq.n	8003212 <I2C_MasterTransmit_TXE+0x6e>
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	2b20      	cmp	r3, #32
 80031da:	d01a      	beq.n	8003212 <I2C_MasterTransmit_TXE+0x6e>
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80031e2:	d016      	beq.n	8003212 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	685a      	ldr	r2, [r3, #4]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80031f2:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2211      	movs	r2, #17
 80031f8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2220      	movs	r2, #32
 8003206:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f7ff ff62 	bl	80030d4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003210:	e060      	b.n	80032d4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	685a      	ldr	r2, [r3, #4]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003220:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003230:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2200      	movs	r2, #0
 8003236:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2220      	movs	r2, #32
 800323c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003246:	b2db      	uxtb	r3, r3
 8003248:	2b40      	cmp	r3, #64	; 0x40
 800324a:	d107      	bne.n	800325c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2200      	movs	r2, #0
 8003250:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	f7ff ff7d 	bl	8003154 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800325a:	e03b      	b.n	80032d4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2200      	movs	r2, #0
 8003260:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003264:	6878      	ldr	r0, [r7, #4]
 8003266:	f7ff ff35 	bl	80030d4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800326a:	e033      	b.n	80032d4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800326c:	7bfb      	ldrb	r3, [r7, #15]
 800326e:	2b21      	cmp	r3, #33	; 0x21
 8003270:	d005      	beq.n	800327e <I2C_MasterTransmit_TXE+0xda>
 8003272:	7bbb      	ldrb	r3, [r7, #14]
 8003274:	2b40      	cmp	r3, #64	; 0x40
 8003276:	d12d      	bne.n	80032d4 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003278:	7bfb      	ldrb	r3, [r7, #15]
 800327a:	2b22      	cmp	r3, #34	; 0x22
 800327c:	d12a      	bne.n	80032d4 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003282:	b29b      	uxth	r3, r3
 8003284:	2b00      	cmp	r3, #0
 8003286:	d108      	bne.n	800329a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	685a      	ldr	r2, [r3, #4]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003296:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003298:	e01c      	b.n	80032d4 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	2b40      	cmp	r3, #64	; 0x40
 80032a4:	d103      	bne.n	80032ae <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f000 f88e 	bl	80033c8 <I2C_MemoryTransmit_TXE_BTF>
}
 80032ac:	e012      	b.n	80032d4 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b2:	781a      	ldrb	r2, [r3, #0]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032be:	1c5a      	adds	r2, r3, #1
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032c8:	b29b      	uxth	r3, r3
 80032ca:	3b01      	subs	r3, #1
 80032cc:	b29a      	uxth	r2, r3
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80032d2:	e7ff      	b.n	80032d4 <I2C_MasterTransmit_TXE+0x130>
 80032d4:	bf00      	nop
 80032d6:	3710      	adds	r7, #16
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}

080032dc <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b084      	sub	sp, #16
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e8:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	2b21      	cmp	r3, #33	; 0x21
 80032f4:	d164      	bne.n	80033c0 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d012      	beq.n	8003326 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003304:	781a      	ldrb	r2, [r3, #0]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003310:	1c5a      	adds	r2, r3, #1
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800331a:	b29b      	uxth	r3, r3
 800331c:	3b01      	subs	r3, #1
 800331e:	b29a      	uxth	r2, r3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003324:	e04c      	b.n	80033c0 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2b08      	cmp	r3, #8
 800332a:	d01d      	beq.n	8003368 <I2C_MasterTransmit_BTF+0x8c>
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2b20      	cmp	r3, #32
 8003330:	d01a      	beq.n	8003368 <I2C_MasterTransmit_BTF+0x8c>
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003338:	d016      	beq.n	8003368 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	685a      	ldr	r2, [r3, #4]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003348:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2211      	movs	r2, #17
 800334e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2200      	movs	r2, #0
 8003354:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2220      	movs	r2, #32
 800335c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	f7ff feb7 	bl	80030d4 <HAL_I2C_MasterTxCpltCallback>
}
 8003366:	e02b      	b.n	80033c0 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	685a      	ldr	r2, [r3, #4]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003376:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003386:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2220      	movs	r2, #32
 8003392:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800339c:	b2db      	uxtb	r3, r3
 800339e:	2b40      	cmp	r3, #64	; 0x40
 80033a0:	d107      	bne.n	80033b2 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2200      	movs	r2, #0
 80033a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f7ff fed2 	bl	8003154 <HAL_I2C_MemTxCpltCallback>
}
 80033b0:	e006      	b.n	80033c0 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f7ff fe8a 	bl	80030d4 <HAL_I2C_MasterTxCpltCallback>
}
 80033c0:	bf00      	nop
 80033c2:	3710      	adds	r7, #16
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}

080033c8 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b084      	sub	sp, #16
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033d6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d11d      	bne.n	800341c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d10b      	bne.n	8003400 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033ec:	b2da      	uxtb	r2, r3
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033f8:	1c9a      	adds	r2, r3, #2
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80033fe:	e073      	b.n	80034e8 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003404:	b29b      	uxth	r3, r3
 8003406:	121b      	asrs	r3, r3, #8
 8003408:	b2da      	uxtb	r2, r3
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003414:	1c5a      	adds	r2, r3, #1
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	651a      	str	r2, [r3, #80]	; 0x50
}
 800341a:	e065      	b.n	80034e8 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003420:	2b01      	cmp	r3, #1
 8003422:	d10b      	bne.n	800343c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003428:	b2da      	uxtb	r2, r3
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003434:	1c5a      	adds	r2, r3, #1
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	651a      	str	r2, [r3, #80]	; 0x50
}
 800343a:	e055      	b.n	80034e8 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003440:	2b02      	cmp	r3, #2
 8003442:	d151      	bne.n	80034e8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003444:	7bfb      	ldrb	r3, [r7, #15]
 8003446:	2b22      	cmp	r3, #34	; 0x22
 8003448:	d10d      	bne.n	8003466 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003458:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800345e:	1c5a      	adds	r2, r3, #1
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003464:	e040      	b.n	80034e8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800346a:	b29b      	uxth	r3, r3
 800346c:	2b00      	cmp	r3, #0
 800346e:	d015      	beq.n	800349c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003470:	7bfb      	ldrb	r3, [r7, #15]
 8003472:	2b21      	cmp	r3, #33	; 0x21
 8003474:	d112      	bne.n	800349c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347a:	781a      	ldrb	r2, [r3, #0]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003486:	1c5a      	adds	r2, r3, #1
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003490:	b29b      	uxth	r3, r3
 8003492:	3b01      	subs	r3, #1
 8003494:	b29a      	uxth	r2, r3
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800349a:	e025      	b.n	80034e8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d120      	bne.n	80034e8 <I2C_MemoryTransmit_TXE_BTF+0x120>
 80034a6:	7bfb      	ldrb	r3, [r7, #15]
 80034a8:	2b21      	cmp	r3, #33	; 0x21
 80034aa:	d11d      	bne.n	80034e8 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	685a      	ldr	r2, [r3, #4]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80034ba:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034ca:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2200      	movs	r2, #0
 80034d0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2220      	movs	r2, #32
 80034d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f7ff fe36 	bl	8003154 <HAL_I2C_MemTxCpltCallback>
}
 80034e8:	bf00      	nop
 80034ea:	3710      	adds	r7, #16
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}

080034f0 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b084      	sub	sp, #16
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	2b22      	cmp	r3, #34	; 0x22
 8003502:	f040 80ac 	bne.w	800365e <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800350a:	b29b      	uxth	r3, r3
 800350c:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2b03      	cmp	r3, #3
 8003512:	d921      	bls.n	8003558 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	691a      	ldr	r2, [r3, #16]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351e:	b2d2      	uxtb	r2, r2
 8003520:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003526:	1c5a      	adds	r2, r3, #1
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003530:	b29b      	uxth	r3, r3
 8003532:	3b01      	subs	r3, #1
 8003534:	b29a      	uxth	r2, r3
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800353e:	b29b      	uxth	r3, r3
 8003540:	2b03      	cmp	r3, #3
 8003542:	f040 808c 	bne.w	800365e <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	685a      	ldr	r2, [r3, #4]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003554:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003556:	e082      	b.n	800365e <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800355c:	2b02      	cmp	r3, #2
 800355e:	d075      	beq.n	800364c <I2C_MasterReceive_RXNE+0x15c>
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2b01      	cmp	r3, #1
 8003564:	d002      	beq.n	800356c <I2C_MasterReceive_RXNE+0x7c>
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d16f      	bne.n	800364c <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f001 fae9 	bl	8004b44 <I2C_WaitOnSTOPRequestThroughIT>
 8003572:	4603      	mov	r3, r0
 8003574:	2b00      	cmp	r3, #0
 8003576:	d142      	bne.n	80035fe <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003586:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	685a      	ldr	r2, [r3, #4]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003596:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	691a      	ldr	r2, [r3, #16]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a2:	b2d2      	uxtb	r2, r2
 80035a4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035aa:	1c5a      	adds	r2, r3, #1
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035b4:	b29b      	uxth	r3, r3
 80035b6:	3b01      	subs	r3, #1
 80035b8:	b29a      	uxth	r2, r3
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2220      	movs	r2, #32
 80035c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	2b40      	cmp	r3, #64	; 0x40
 80035d0:	d10a      	bne.n	80035e8 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2200      	movs	r2, #0
 80035d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f7ff fdc1 	bl	8003168 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80035e6:	e03a      	b.n	800365e <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2200      	movs	r2, #0
 80035ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2212      	movs	r2, #18
 80035f4:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f7ff fd76 	bl	80030e8 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80035fc:	e02f      	b.n	800365e <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	685a      	ldr	r2, [r3, #4]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800360c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	691a      	ldr	r2, [r3, #16]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003618:	b2d2      	uxtb	r2, r2
 800361a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003620:	1c5a      	adds	r2, r3, #1
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800362a:	b29b      	uxth	r3, r3
 800362c:	3b01      	subs	r3, #1
 800362e:	b29a      	uxth	r2, r3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2220      	movs	r2, #32
 8003638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	f7ff fd99 	bl	800317c <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800364a:	e008      	b.n	800365e <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	685a      	ldr	r2, [r3, #4]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800365a:	605a      	str	r2, [r3, #4]
}
 800365c:	e7ff      	b.n	800365e <I2C_MasterReceive_RXNE+0x16e>
 800365e:	bf00      	nop
 8003660:	3710      	adds	r7, #16
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}

08003666 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003666:	b580      	push	{r7, lr}
 8003668:	b084      	sub	sp, #16
 800366a:	af00      	add	r7, sp, #0
 800366c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003672:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003678:	b29b      	uxth	r3, r3
 800367a:	2b04      	cmp	r3, #4
 800367c:	d11b      	bne.n	80036b6 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	685a      	ldr	r2, [r3, #4]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800368c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	691a      	ldr	r2, [r3, #16]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003698:	b2d2      	uxtb	r2, r2
 800369a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a0:	1c5a      	adds	r2, r3, #1
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036aa:	b29b      	uxth	r3, r3
 80036ac:	3b01      	subs	r3, #1
 80036ae:	b29a      	uxth	r2, r3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80036b4:	e0bd      	b.n	8003832 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	2b03      	cmp	r3, #3
 80036be:	d129      	bne.n	8003714 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	685a      	ldr	r2, [r3, #4]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036ce:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2b04      	cmp	r3, #4
 80036d4:	d00a      	beq.n	80036ec <I2C_MasterReceive_BTF+0x86>
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2b02      	cmp	r3, #2
 80036da:	d007      	beq.n	80036ec <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036ea:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	691a      	ldr	r2, [r3, #16]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f6:	b2d2      	uxtb	r2, r2
 80036f8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fe:	1c5a      	adds	r2, r3, #1
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003708:	b29b      	uxth	r3, r3
 800370a:	3b01      	subs	r3, #1
 800370c:	b29a      	uxth	r2, r3
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003712:	e08e      	b.n	8003832 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003718:	b29b      	uxth	r3, r3
 800371a:	2b02      	cmp	r3, #2
 800371c:	d176      	bne.n	800380c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2b01      	cmp	r3, #1
 8003722:	d002      	beq.n	800372a <I2C_MasterReceive_BTF+0xc4>
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2b10      	cmp	r3, #16
 8003728:	d108      	bne.n	800373c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003738:	601a      	str	r2, [r3, #0]
 800373a:	e019      	b.n	8003770 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2b04      	cmp	r3, #4
 8003740:	d002      	beq.n	8003748 <I2C_MasterReceive_BTF+0xe2>
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2b02      	cmp	r3, #2
 8003746:	d108      	bne.n	800375a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003756:	601a      	str	r2, [r3, #0]
 8003758:	e00a      	b.n	8003770 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2b10      	cmp	r3, #16
 800375e:	d007      	beq.n	8003770 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800376e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	691a      	ldr	r2, [r3, #16]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377a:	b2d2      	uxtb	r2, r2
 800377c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003782:	1c5a      	adds	r2, r3, #1
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800378c:	b29b      	uxth	r3, r3
 800378e:	3b01      	subs	r3, #1
 8003790:	b29a      	uxth	r2, r3
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	691a      	ldr	r2, [r3, #16]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a0:	b2d2      	uxtb	r2, r2
 80037a2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a8:	1c5a      	adds	r2, r3, #1
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037b2:	b29b      	uxth	r3, r3
 80037b4:	3b01      	subs	r3, #1
 80037b6:	b29a      	uxth	r2, r3
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	685a      	ldr	r2, [r3, #4]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80037ca:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2220      	movs	r2, #32
 80037d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	2b40      	cmp	r3, #64	; 0x40
 80037de:	d10a      	bne.n	80037f6 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f7ff fcba 	bl	8003168 <HAL_I2C_MemRxCpltCallback>
}
 80037f4:	e01d      	b.n	8003832 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2212      	movs	r2, #18
 8003802:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	f7ff fc6f 	bl	80030e8 <HAL_I2C_MasterRxCpltCallback>
}
 800380a:	e012      	b.n	8003832 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	691a      	ldr	r2, [r3, #16]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003816:	b2d2      	uxtb	r2, r2
 8003818:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381e:	1c5a      	adds	r2, r3, #1
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003828:	b29b      	uxth	r3, r3
 800382a:	3b01      	subs	r3, #1
 800382c:	b29a      	uxth	r2, r3
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003832:	bf00      	nop
 8003834:	3710      	adds	r7, #16
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}

0800383a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800383a:	b480      	push	{r7}
 800383c:	b083      	sub	sp, #12
 800383e:	af00      	add	r7, sp, #0
 8003840:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003848:	b2db      	uxtb	r3, r3
 800384a:	2b40      	cmp	r3, #64	; 0x40
 800384c:	d117      	bne.n	800387e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003852:	2b00      	cmp	r3, #0
 8003854:	d109      	bne.n	800386a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800385a:	b2db      	uxtb	r3, r3
 800385c:	461a      	mov	r2, r3
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003866:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003868:	e067      	b.n	800393a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800386e:	b2db      	uxtb	r3, r3
 8003870:	f043 0301 	orr.w	r3, r3, #1
 8003874:	b2da      	uxtb	r2, r3
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	611a      	str	r2, [r3, #16]
}
 800387c:	e05d      	b.n	800393a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	691b      	ldr	r3, [r3, #16]
 8003882:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003886:	d133      	bne.n	80038f0 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800388e:	b2db      	uxtb	r3, r3
 8003890:	2b21      	cmp	r3, #33	; 0x21
 8003892:	d109      	bne.n	80038a8 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003898:	b2db      	uxtb	r3, r3
 800389a:	461a      	mov	r2, r3
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80038a4:	611a      	str	r2, [r3, #16]
 80038a6:	e008      	b.n	80038ba <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	f043 0301 	orr.w	r3, r3, #1
 80038b2:	b2da      	uxtb	r2, r3
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d004      	beq.n	80038cc <I2C_Master_SB+0x92>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d108      	bne.n	80038de <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d032      	beq.n	800393a <I2C_Master_SB+0x100>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d02d      	beq.n	800393a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	685a      	ldr	r2, [r3, #4]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038ec:	605a      	str	r2, [r3, #4]
}
 80038ee:	e024      	b.n	800393a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d10e      	bne.n	8003916 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038fc:	b29b      	uxth	r3, r3
 80038fe:	11db      	asrs	r3, r3, #7
 8003900:	b2db      	uxtb	r3, r3
 8003902:	f003 0306 	and.w	r3, r3, #6
 8003906:	b2db      	uxtb	r3, r3
 8003908:	f063 030f 	orn	r3, r3, #15
 800390c:	b2da      	uxtb	r2, r3
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	611a      	str	r2, [r3, #16]
}
 8003914:	e011      	b.n	800393a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800391a:	2b01      	cmp	r3, #1
 800391c:	d10d      	bne.n	800393a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003922:	b29b      	uxth	r3, r3
 8003924:	11db      	asrs	r3, r3, #7
 8003926:	b2db      	uxtb	r3, r3
 8003928:	f003 0306 	and.w	r3, r3, #6
 800392c:	b2db      	uxtb	r3, r3
 800392e:	f063 030e 	orn	r3, r3, #14
 8003932:	b2da      	uxtb	r2, r3
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	611a      	str	r2, [r3, #16]
}
 800393a:	bf00      	nop
 800393c:	370c      	adds	r7, #12
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr

08003946 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003946:	b480      	push	{r7}
 8003948:	b083      	sub	sp, #12
 800394a:	af00      	add	r7, sp, #0
 800394c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003952:	b2da      	uxtb	r2, r3
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800395e:	2b00      	cmp	r3, #0
 8003960:	d004      	beq.n	800396c <I2C_Master_ADD10+0x26>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003966:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003968:	2b00      	cmp	r3, #0
 800396a:	d108      	bne.n	800397e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003970:	2b00      	cmp	r3, #0
 8003972:	d00c      	beq.n	800398e <I2C_Master_ADD10+0x48>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003978:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800397a:	2b00      	cmp	r3, #0
 800397c:	d007      	beq.n	800398e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	685a      	ldr	r2, [r3, #4]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800398c:	605a      	str	r2, [r3, #4]
  }
}
 800398e:	bf00      	nop
 8003990:	370c      	adds	r7, #12
 8003992:	46bd      	mov	sp, r7
 8003994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003998:	4770      	bx	lr

0800399a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800399a:	b480      	push	{r7}
 800399c:	b091      	sub	sp, #68	; 0x44
 800399e:	af00      	add	r7, sp, #0
 80039a0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039a8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b0:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b6:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	2b22      	cmp	r3, #34	; 0x22
 80039c2:	f040 8169 	bne.w	8003c98 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d10f      	bne.n	80039ee <I2C_Master_ADDR+0x54>
 80039ce:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80039d2:	2b40      	cmp	r3, #64	; 0x40
 80039d4:	d10b      	bne.n	80039ee <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039d6:	2300      	movs	r3, #0
 80039d8:	633b      	str	r3, [r7, #48]	; 0x30
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	695b      	ldr	r3, [r3, #20]
 80039e0:	633b      	str	r3, [r7, #48]	; 0x30
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	699b      	ldr	r3, [r3, #24]
 80039e8:	633b      	str	r3, [r7, #48]	; 0x30
 80039ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ec:	e160      	b.n	8003cb0 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d11d      	bne.n	8003a32 <I2C_Master_ADDR+0x98>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	691b      	ldr	r3, [r3, #16]
 80039fa:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80039fe:	d118      	bne.n	8003a32 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a00:	2300      	movs	r3, #0
 8003a02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	695b      	ldr	r3, [r3, #20]
 8003a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	699b      	ldr	r3, [r3, #24]
 8003a12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a24:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a2a:	1c5a      	adds	r2, r3, #1
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	651a      	str	r2, [r3, #80]	; 0x50
 8003a30:	e13e      	b.n	8003cb0 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a36:	b29b      	uxth	r3, r3
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d113      	bne.n	8003a64 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	695b      	ldr	r3, [r3, #20]
 8003a46:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	699b      	ldr	r3, [r3, #24]
 8003a4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a50:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a60:	601a      	str	r2, [r3, #0]
 8003a62:	e115      	b.n	8003c90 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a68:	b29b      	uxth	r3, r3
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	f040 808a 	bne.w	8003b84 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a72:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003a76:	d137      	bne.n	8003ae8 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a86:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a96:	d113      	bne.n	8003ac0 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003aa6:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	627b      	str	r3, [r7, #36]	; 0x24
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	695b      	ldr	r3, [r3, #20]
 8003ab2:	627b      	str	r3, [r7, #36]	; 0x24
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	699b      	ldr	r3, [r3, #24]
 8003aba:	627b      	str	r3, [r7, #36]	; 0x24
 8003abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003abe:	e0e7      	b.n	8003c90 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	623b      	str	r3, [r7, #32]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	695b      	ldr	r3, [r3, #20]
 8003aca:	623b      	str	r3, [r7, #32]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	699b      	ldr	r3, [r3, #24]
 8003ad2:	623b      	str	r3, [r7, #32]
 8003ad4:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ae4:	601a      	str	r2, [r3, #0]
 8003ae6:	e0d3      	b.n	8003c90 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aea:	2b08      	cmp	r3, #8
 8003aec:	d02e      	beq.n	8003b4c <I2C_Master_ADDR+0x1b2>
 8003aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003af0:	2b20      	cmp	r3, #32
 8003af2:	d02b      	beq.n	8003b4c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003af4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003af6:	2b12      	cmp	r3, #18
 8003af8:	d102      	bne.n	8003b00 <I2C_Master_ADDR+0x166>
 8003afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d125      	bne.n	8003b4c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b02:	2b04      	cmp	r3, #4
 8003b04:	d00e      	beq.n	8003b24 <I2C_Master_ADDR+0x18a>
 8003b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b08:	2b02      	cmp	r3, #2
 8003b0a:	d00b      	beq.n	8003b24 <I2C_Master_ADDR+0x18a>
 8003b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b0e:	2b10      	cmp	r3, #16
 8003b10:	d008      	beq.n	8003b24 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b20:	601a      	str	r2, [r3, #0]
 8003b22:	e007      	b.n	8003b34 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003b32:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b34:	2300      	movs	r3, #0
 8003b36:	61fb      	str	r3, [r7, #28]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	695b      	ldr	r3, [r3, #20]
 8003b3e:	61fb      	str	r3, [r7, #28]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	699b      	ldr	r3, [r3, #24]
 8003b46:	61fb      	str	r3, [r7, #28]
 8003b48:	69fb      	ldr	r3, [r7, #28]
 8003b4a:	e0a1      	b.n	8003c90 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b5a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	61bb      	str	r3, [r7, #24]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	695b      	ldr	r3, [r3, #20]
 8003b66:	61bb      	str	r3, [r7, #24]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	699b      	ldr	r3, [r3, #24]
 8003b6e:	61bb      	str	r3, [r7, #24]
 8003b70:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b80:	601a      	str	r2, [r3, #0]
 8003b82:	e085      	b.n	8003c90 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b88:	b29b      	uxth	r3, r3
 8003b8a:	2b02      	cmp	r3, #2
 8003b8c:	d14d      	bne.n	8003c2a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b90:	2b04      	cmp	r3, #4
 8003b92:	d016      	beq.n	8003bc2 <I2C_Master_ADDR+0x228>
 8003b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b96:	2b02      	cmp	r3, #2
 8003b98:	d013      	beq.n	8003bc2 <I2C_Master_ADDR+0x228>
 8003b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b9c:	2b10      	cmp	r3, #16
 8003b9e:	d010      	beq.n	8003bc2 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bae:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003bbe:	601a      	str	r2, [r3, #0]
 8003bc0:	e007      	b.n	8003bd2 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003bd0:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bdc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003be0:	d117      	bne.n	8003c12 <I2C_Master_ADDR+0x278>
 8003be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003be4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003be8:	d00b      	beq.n	8003c02 <I2C_Master_ADDR+0x268>
 8003bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d008      	beq.n	8003c02 <I2C_Master_ADDR+0x268>
 8003bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bf2:	2b08      	cmp	r3, #8
 8003bf4:	d005      	beq.n	8003c02 <I2C_Master_ADDR+0x268>
 8003bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bf8:	2b10      	cmp	r3, #16
 8003bfa:	d002      	beq.n	8003c02 <I2C_Master_ADDR+0x268>
 8003bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bfe:	2b20      	cmp	r3, #32
 8003c00:	d107      	bne.n	8003c12 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	685a      	ldr	r2, [r3, #4]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003c10:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c12:	2300      	movs	r3, #0
 8003c14:	617b      	str	r3, [r7, #20]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	695b      	ldr	r3, [r3, #20]
 8003c1c:	617b      	str	r3, [r7, #20]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	699b      	ldr	r3, [r3, #24]
 8003c24:	617b      	str	r3, [r7, #20]
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	e032      	b.n	8003c90 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003c38:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c48:	d117      	bne.n	8003c7a <I2C_Master_ADDR+0x2e0>
 8003c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c4c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003c50:	d00b      	beq.n	8003c6a <I2C_Master_ADDR+0x2d0>
 8003c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d008      	beq.n	8003c6a <I2C_Master_ADDR+0x2d0>
 8003c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c5a:	2b08      	cmp	r3, #8
 8003c5c:	d005      	beq.n	8003c6a <I2C_Master_ADDR+0x2d0>
 8003c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c60:	2b10      	cmp	r3, #16
 8003c62:	d002      	beq.n	8003c6a <I2C_Master_ADDR+0x2d0>
 8003c64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c66:	2b20      	cmp	r3, #32
 8003c68:	d107      	bne.n	8003c7a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	685a      	ldr	r2, [r3, #4]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003c78:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	613b      	str	r3, [r7, #16]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	695b      	ldr	r3, [r3, #20]
 8003c84:	613b      	str	r3, [r7, #16]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	699b      	ldr	r3, [r3, #24]
 8003c8c:	613b      	str	r3, [r7, #16]
 8003c8e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2200      	movs	r2, #0
 8003c94:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003c96:	e00b      	b.n	8003cb0 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c98:	2300      	movs	r3, #0
 8003c9a:	60fb      	str	r3, [r7, #12]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	695b      	ldr	r3, [r3, #20]
 8003ca2:	60fb      	str	r3, [r7, #12]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	699b      	ldr	r3, [r3, #24]
 8003caa:	60fb      	str	r3, [r7, #12]
 8003cac:	68fb      	ldr	r3, [r7, #12]
}
 8003cae:	e7ff      	b.n	8003cb0 <I2C_Master_ADDR+0x316>
 8003cb0:	bf00      	nop
 8003cb2:	3744      	adds	r7, #68	; 0x44
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr

08003cbc <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b084      	sub	sp, #16
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cca:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cd0:	b29b      	uxth	r3, r3
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d02b      	beq.n	8003d2e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cda:	781a      	ldrb	r2, [r3, #0]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce6:	1c5a      	adds	r2, r3, #1
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	3b01      	subs	r3, #1
 8003cf4:	b29a      	uxth	r2, r3
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d114      	bne.n	8003d2e <I2C_SlaveTransmit_TXE+0x72>
 8003d04:	7bfb      	ldrb	r3, [r7, #15]
 8003d06:	2b29      	cmp	r3, #41	; 0x29
 8003d08:	d111      	bne.n	8003d2e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	685a      	ldr	r2, [r3, #4]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d18:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2221      	movs	r2, #33	; 0x21
 8003d1e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2228      	movs	r2, #40	; 0x28
 8003d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f7ff f9e7 	bl	80030fc <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003d2e:	bf00      	nop
 8003d30:	3710      	adds	r7, #16
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}

08003d36 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003d36:	b480      	push	{r7}
 8003d38:	b083      	sub	sp, #12
 8003d3a:	af00      	add	r7, sp, #0
 8003d3c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d42:	b29b      	uxth	r3, r3
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d011      	beq.n	8003d6c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d4c:	781a      	ldrb	r2, [r3, #0]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d58:	1c5a      	adds	r2, r3, #1
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d62:	b29b      	uxth	r3, r3
 8003d64:	3b01      	subs	r3, #1
 8003d66:	b29a      	uxth	r2, r3
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003d6c:	bf00      	nop
 8003d6e:	370c      	adds	r7, #12
 8003d70:	46bd      	mov	sp, r7
 8003d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d76:	4770      	bx	lr

08003d78 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b084      	sub	sp, #16
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d86:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d8c:	b29b      	uxth	r3, r3
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d02c      	beq.n	8003dec <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	691a      	ldr	r2, [r3, #16]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9c:	b2d2      	uxtb	r2, r2
 8003d9e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da4:	1c5a      	adds	r2, r3, #1
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dae:	b29b      	uxth	r3, r3
 8003db0:	3b01      	subs	r3, #1
 8003db2:	b29a      	uxth	r2, r3
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dbc:	b29b      	uxth	r3, r3
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d114      	bne.n	8003dec <I2C_SlaveReceive_RXNE+0x74>
 8003dc2:	7bfb      	ldrb	r3, [r7, #15]
 8003dc4:	2b2a      	cmp	r3, #42	; 0x2a
 8003dc6:	d111      	bne.n	8003dec <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	685a      	ldr	r2, [r3, #4]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dd6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2222      	movs	r2, #34	; 0x22
 8003ddc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2228      	movs	r2, #40	; 0x28
 8003de2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f7ff f992 	bl	8003110 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003dec:	bf00      	nop
 8003dee:	3710      	adds	r7, #16
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}

08003df4 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b083      	sub	sp, #12
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e00:	b29b      	uxth	r3, r3
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d012      	beq.n	8003e2c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	691a      	ldr	r2, [r3, #16]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e10:	b2d2      	uxtb	r2, r2
 8003e12:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e18:	1c5a      	adds	r2, r3, #1
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	3b01      	subs	r3, #1
 8003e26:	b29a      	uxth	r2, r3
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003e2c:	bf00      	nop
 8003e2e:	370c      	adds	r7, #12
 8003e30:	46bd      	mov	sp, r7
 8003e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e36:	4770      	bx	lr

08003e38 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b084      	sub	sp, #16
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
 8003e40:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003e42:	2300      	movs	r3, #0
 8003e44:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003e52:	2b28      	cmp	r3, #40	; 0x28
 8003e54:	d127      	bne.n	8003ea6 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	685a      	ldr	r2, [r3, #4]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e64:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	089b      	lsrs	r3, r3, #2
 8003e6a:	f003 0301 	and.w	r3, r3, #1
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d101      	bne.n	8003e76 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003e72:	2301      	movs	r3, #1
 8003e74:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	09db      	lsrs	r3, r3, #7
 8003e7a:	f003 0301 	and.w	r3, r3, #1
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d103      	bne.n	8003e8a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	68db      	ldr	r3, [r3, #12]
 8003e86:	81bb      	strh	r3, [r7, #12]
 8003e88:	e002      	b.n	8003e90 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	699b      	ldr	r3, [r3, #24]
 8003e8e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2200      	movs	r2, #0
 8003e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003e98:	89ba      	ldrh	r2, [r7, #12]
 8003e9a:	7bfb      	ldrb	r3, [r7, #15]
 8003e9c:	4619      	mov	r1, r3
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f7ff f940 	bl	8003124 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003ea4:	e00e      	b.n	8003ec4 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	60bb      	str	r3, [r7, #8]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	695b      	ldr	r3, [r3, #20]
 8003eb0:	60bb      	str	r3, [r7, #8]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	699b      	ldr	r3, [r3, #24]
 8003eb8:	60bb      	str	r3, [r7, #8]
 8003eba:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8003ec4:	bf00      	nop
 8003ec6:	3710      	adds	r7, #16
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}

08003ecc <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b084      	sub	sp, #16
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003eda:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	685a      	ldr	r2, [r3, #4]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003eea:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003eec:	2300      	movs	r3, #0
 8003eee:	60bb      	str	r3, [r7, #8]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	695b      	ldr	r3, [r3, #20]
 8003ef6:	60bb      	str	r3, [r7, #8]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f042 0201 	orr.w	r2, r2, #1
 8003f06:	601a      	str	r2, [r3, #0]
 8003f08:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f18:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f28:	d172      	bne.n	8004010 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003f2a:	7bfb      	ldrb	r3, [r7, #15]
 8003f2c:	2b22      	cmp	r3, #34	; 0x22
 8003f2e:	d002      	beq.n	8003f36 <I2C_Slave_STOPF+0x6a>
 8003f30:	7bfb      	ldrb	r3, [r7, #15]
 8003f32:	2b2a      	cmp	r3, #42	; 0x2a
 8003f34:	d135      	bne.n	8003fa2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	b29a      	uxth	r2, r3
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f48:	b29b      	uxth	r3, r3
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d005      	beq.n	8003f5a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f52:	f043 0204 	orr.w	r2, r3, #4
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	685a      	ldr	r2, [r3, #4]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f68:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f7fe f85b 	bl	800202a <HAL_DMA_GetState>
 8003f74:	4603      	mov	r3, r0
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d049      	beq.n	800400e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f7e:	4a69      	ldr	r2, [pc, #420]	; (8004124 <I2C_Slave_STOPF+0x258>)
 8003f80:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f86:	4618      	mov	r0, r3
 8003f88:	f7fe f82d 	bl	8001fe6 <HAL_DMA_Abort_IT>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d03d      	beq.n	800400e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f98:	687a      	ldr	r2, [r7, #4]
 8003f9a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003f9c:	4610      	mov	r0, r2
 8003f9e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003fa0:	e035      	b.n	800400e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	b29a      	uxth	r2, r3
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fb4:	b29b      	uxth	r3, r3
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d005      	beq.n	8003fc6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fbe:	f043 0204 	orr.w	r2, r3, #4
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	685a      	ldr	r2, [r3, #4]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003fd4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f7fe f825 	bl	800202a <HAL_DMA_GetState>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d014      	beq.n	8004010 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fea:	4a4e      	ldr	r2, [pc, #312]	; (8004124 <I2C_Slave_STOPF+0x258>)
 8003fec:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f7fd fff7 	bl	8001fe6 <HAL_DMA_Abort_IT>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d008      	beq.n	8004010 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004002:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004004:	687a      	ldr	r2, [r7, #4]
 8004006:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004008:	4610      	mov	r0, r2
 800400a:	4798      	blx	r3
 800400c:	e000      	b.n	8004010 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800400e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004014:	b29b      	uxth	r3, r3
 8004016:	2b00      	cmp	r3, #0
 8004018:	d03e      	beq.n	8004098 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	695b      	ldr	r3, [r3, #20]
 8004020:	f003 0304 	and.w	r3, r3, #4
 8004024:	2b04      	cmp	r3, #4
 8004026:	d112      	bne.n	800404e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	691a      	ldr	r2, [r3, #16]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004032:	b2d2      	uxtb	r2, r2
 8004034:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800403a:	1c5a      	adds	r2, r3, #1
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004044:	b29b      	uxth	r3, r3
 8004046:	3b01      	subs	r3, #1
 8004048:	b29a      	uxth	r2, r3
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	695b      	ldr	r3, [r3, #20]
 8004054:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004058:	2b40      	cmp	r3, #64	; 0x40
 800405a:	d112      	bne.n	8004082 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	691a      	ldr	r2, [r3, #16]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004066:	b2d2      	uxtb	r2, r2
 8004068:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406e:	1c5a      	adds	r2, r3, #1
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004078:	b29b      	uxth	r3, r3
 800407a:	3b01      	subs	r3, #1
 800407c:	b29a      	uxth	r2, r3
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004086:	b29b      	uxth	r3, r3
 8004088:	2b00      	cmp	r3, #0
 800408a:	d005      	beq.n	8004098 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004090:	f043 0204 	orr.w	r2, r3, #4
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409c:	2b00      	cmp	r3, #0
 800409e:	d003      	beq.n	80040a8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	f000 f8b3 	bl	800420c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80040a6:	e039      	b.n	800411c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80040a8:	7bfb      	ldrb	r3, [r7, #15]
 80040aa:	2b2a      	cmp	r3, #42	; 0x2a
 80040ac:	d109      	bne.n	80040c2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2200      	movs	r2, #0
 80040b2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2228      	movs	r2, #40	; 0x28
 80040b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	f7ff f827 	bl	8003110 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040c8:	b2db      	uxtb	r3, r3
 80040ca:	2b28      	cmp	r3, #40	; 0x28
 80040cc:	d111      	bne.n	80040f2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	4a15      	ldr	r2, [pc, #84]	; (8004128 <I2C_Slave_STOPF+0x25c>)
 80040d2:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2220      	movs	r2, #32
 80040de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f7ff f828 	bl	8003140 <HAL_I2C_ListenCpltCallback>
}
 80040f0:	e014      	b.n	800411c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040f6:	2b22      	cmp	r3, #34	; 0x22
 80040f8:	d002      	beq.n	8004100 <I2C_Slave_STOPF+0x234>
 80040fa:	7bfb      	ldrb	r3, [r7, #15]
 80040fc:	2b22      	cmp	r3, #34	; 0x22
 80040fe:	d10d      	bne.n	800411c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2200      	movs	r2, #0
 8004104:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2220      	movs	r2, #32
 800410a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2200      	movs	r2, #0
 8004112:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f7fe fffa 	bl	8003110 <HAL_I2C_SlaveRxCpltCallback>
}
 800411c:	bf00      	nop
 800411e:	3710      	adds	r7, #16
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}
 8004124:	08004745 	.word	0x08004745
 8004128:	ffff0000 	.word	0xffff0000

0800412c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b084      	sub	sp, #16
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800413a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004140:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	2b08      	cmp	r3, #8
 8004146:	d002      	beq.n	800414e <I2C_Slave_AF+0x22>
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	2b20      	cmp	r3, #32
 800414c:	d129      	bne.n	80041a2 <I2C_Slave_AF+0x76>
 800414e:	7bfb      	ldrb	r3, [r7, #15]
 8004150:	2b28      	cmp	r3, #40	; 0x28
 8004152:	d126      	bne.n	80041a2 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	4a2c      	ldr	r2, [pc, #176]	; (8004208 <I2C_Slave_AF+0xdc>)
 8004158:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	685a      	ldr	r2, [r3, #4]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004168:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004172:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004182:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2200      	movs	r2, #0
 8004188:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2220      	movs	r2, #32
 800418e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2200      	movs	r2, #0
 8004196:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f7fe ffd0 	bl	8003140 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80041a0:	e02e      	b.n	8004200 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80041a2:	7bfb      	ldrb	r3, [r7, #15]
 80041a4:	2b21      	cmp	r3, #33	; 0x21
 80041a6:	d126      	bne.n	80041f6 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	4a17      	ldr	r2, [pc, #92]	; (8004208 <I2C_Slave_AF+0xdc>)
 80041ac:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2221      	movs	r2, #33	; 0x21
 80041b2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2220      	movs	r2, #32
 80041b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2200      	movs	r2, #0
 80041c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	685a      	ldr	r2, [r3, #4]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80041d2:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80041dc:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041ec:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f7fe ff84 	bl	80030fc <HAL_I2C_SlaveTxCpltCallback>
}
 80041f4:	e004      	b.n	8004200 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80041fe:	615a      	str	r2, [r3, #20]
}
 8004200:	bf00      	nop
 8004202:	3710      	adds	r7, #16
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}
 8004208:	ffff0000 	.word	0xffff0000

0800420c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b084      	sub	sp, #16
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800421a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004222:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004224:	7bbb      	ldrb	r3, [r7, #14]
 8004226:	2b10      	cmp	r3, #16
 8004228:	d002      	beq.n	8004230 <I2C_ITError+0x24>
 800422a:	7bbb      	ldrb	r3, [r7, #14]
 800422c:	2b40      	cmp	r3, #64	; 0x40
 800422e:	d10a      	bne.n	8004246 <I2C_ITError+0x3a>
 8004230:	7bfb      	ldrb	r3, [r7, #15]
 8004232:	2b22      	cmp	r3, #34	; 0x22
 8004234:	d107      	bne.n	8004246 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004244:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004246:	7bfb      	ldrb	r3, [r7, #15]
 8004248:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800424c:	2b28      	cmp	r3, #40	; 0x28
 800424e:	d107      	bne.n	8004260 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2200      	movs	r2, #0
 8004254:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2228      	movs	r2, #40	; 0x28
 800425a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800425e:	e015      	b.n	800428c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800426a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800426e:	d00a      	beq.n	8004286 <I2C_ITError+0x7a>
 8004270:	7bfb      	ldrb	r3, [r7, #15]
 8004272:	2b60      	cmp	r3, #96	; 0x60
 8004274:	d007      	beq.n	8004286 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2220      	movs	r2, #32
 800427a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2200      	movs	r2, #0
 8004282:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2200      	movs	r2, #0
 800428a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004296:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800429a:	d162      	bne.n	8004362 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	685a      	ldr	r2, [r3, #4]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042aa:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d020      	beq.n	80042fc <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042be:	4a6a      	ldr	r2, [pc, #424]	; (8004468 <I2C_ITError+0x25c>)
 80042c0:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042c6:	4618      	mov	r0, r3
 80042c8:	f7fd fe8d 	bl	8001fe6 <HAL_DMA_Abort_IT>
 80042cc:	4603      	mov	r3, r0
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	f000 8089 	beq.w	80043e6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f022 0201 	bic.w	r2, r2, #1
 80042e2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2220      	movs	r2, #32
 80042e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042f2:	687a      	ldr	r2, [r7, #4]
 80042f4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80042f6:	4610      	mov	r0, r2
 80042f8:	4798      	blx	r3
 80042fa:	e074      	b.n	80043e6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004300:	4a59      	ldr	r2, [pc, #356]	; (8004468 <I2C_ITError+0x25c>)
 8004302:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004308:	4618      	mov	r0, r3
 800430a:	f7fd fe6c 	bl	8001fe6 <HAL_DMA_Abort_IT>
 800430e:	4603      	mov	r3, r0
 8004310:	2b00      	cmp	r3, #0
 8004312:	d068      	beq.n	80043e6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	695b      	ldr	r3, [r3, #20]
 800431a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800431e:	2b40      	cmp	r3, #64	; 0x40
 8004320:	d10b      	bne.n	800433a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	691a      	ldr	r2, [r3, #16]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800432c:	b2d2      	uxtb	r2, r2
 800432e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004334:	1c5a      	adds	r2, r3, #1
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f022 0201 	bic.w	r2, r2, #1
 8004348:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2220      	movs	r2, #32
 800434e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004356:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004358:	687a      	ldr	r2, [r7, #4]
 800435a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800435c:	4610      	mov	r0, r2
 800435e:	4798      	blx	r3
 8004360:	e041      	b.n	80043e6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004368:	b2db      	uxtb	r3, r3
 800436a:	2b60      	cmp	r3, #96	; 0x60
 800436c:	d125      	bne.n	80043ba <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2220      	movs	r2, #32
 8004372:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2200      	movs	r2, #0
 800437a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	695b      	ldr	r3, [r3, #20]
 8004382:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004386:	2b40      	cmp	r3, #64	; 0x40
 8004388:	d10b      	bne.n	80043a2 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	691a      	ldr	r2, [r3, #16]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004394:	b2d2      	uxtb	r2, r2
 8004396:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800439c:	1c5a      	adds	r2, r3, #1
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f022 0201 	bic.w	r2, r2, #1
 80043b0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f7fe feec 	bl	8003190 <HAL_I2C_AbortCpltCallback>
 80043b8:	e015      	b.n	80043e6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	695b      	ldr	r3, [r3, #20]
 80043c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043c4:	2b40      	cmp	r3, #64	; 0x40
 80043c6:	d10b      	bne.n	80043e0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	691a      	ldr	r2, [r3, #16]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d2:	b2d2      	uxtb	r2, r2
 80043d4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043da:	1c5a      	adds	r2, r3, #1
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	f7fe fecb 	bl	800317c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ea:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	f003 0301 	and.w	r3, r3, #1
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d10e      	bne.n	8004414 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d109      	bne.n	8004414 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004406:	2b00      	cmp	r3, #0
 8004408:	d104      	bne.n	8004414 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004410:	2b00      	cmp	r3, #0
 8004412:	d007      	beq.n	8004424 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	685a      	ldr	r2, [r3, #4]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004422:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800442a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004430:	f003 0304 	and.w	r3, r3, #4
 8004434:	2b04      	cmp	r3, #4
 8004436:	d113      	bne.n	8004460 <I2C_ITError+0x254>
 8004438:	7bfb      	ldrb	r3, [r7, #15]
 800443a:	2b28      	cmp	r3, #40	; 0x28
 800443c:	d110      	bne.n	8004460 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	4a0a      	ldr	r2, [pc, #40]	; (800446c <I2C_ITError+0x260>)
 8004442:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2200      	movs	r2, #0
 8004448:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2220      	movs	r2, #32
 800444e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2200      	movs	r2, #0
 8004456:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f7fe fe70 	bl	8003140 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004460:	bf00      	nop
 8004462:	3710      	adds	r7, #16
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}
 8004468:	08004745 	.word	0x08004745
 800446c:	ffff0000 	.word	0xffff0000

08004470 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b088      	sub	sp, #32
 8004474:	af02      	add	r7, sp, #8
 8004476:	60f8      	str	r0, [r7, #12]
 8004478:	607a      	str	r2, [r7, #4]
 800447a:	603b      	str	r3, [r7, #0]
 800447c:	460b      	mov	r3, r1
 800447e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004484:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	2b08      	cmp	r3, #8
 800448a:	d006      	beq.n	800449a <I2C_MasterRequestWrite+0x2a>
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	2b01      	cmp	r3, #1
 8004490:	d003      	beq.n	800449a <I2C_MasterRequestWrite+0x2a>
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004498:	d108      	bne.n	80044ac <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044a8:	601a      	str	r2, [r3, #0]
 80044aa:	e00b      	b.n	80044c4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044b0:	2b12      	cmp	r3, #18
 80044b2:	d107      	bne.n	80044c4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044c2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	9300      	str	r3, [sp, #0]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2200      	movs	r2, #0
 80044cc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80044d0:	68f8      	ldr	r0, [r7, #12]
 80044d2:	f000 f9df 	bl	8004894 <I2C_WaitOnFlagUntilTimeout>
 80044d6:	4603      	mov	r3, r0
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d00d      	beq.n	80044f8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044ea:	d103      	bne.n	80044f4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80044f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80044f4:	2303      	movs	r3, #3
 80044f6:	e035      	b.n	8004564 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	691b      	ldr	r3, [r3, #16]
 80044fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004500:	d108      	bne.n	8004514 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004502:	897b      	ldrh	r3, [r7, #10]
 8004504:	b2db      	uxtb	r3, r3
 8004506:	461a      	mov	r2, r3
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004510:	611a      	str	r2, [r3, #16]
 8004512:	e01b      	b.n	800454c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004514:	897b      	ldrh	r3, [r7, #10]
 8004516:	11db      	asrs	r3, r3, #7
 8004518:	b2db      	uxtb	r3, r3
 800451a:	f003 0306 	and.w	r3, r3, #6
 800451e:	b2db      	uxtb	r3, r3
 8004520:	f063 030f 	orn	r3, r3, #15
 8004524:	b2da      	uxtb	r2, r3
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	490e      	ldr	r1, [pc, #56]	; (800456c <I2C_MasterRequestWrite+0xfc>)
 8004532:	68f8      	ldr	r0, [r7, #12]
 8004534:	f000 fa05 	bl	8004942 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004538:	4603      	mov	r3, r0
 800453a:	2b00      	cmp	r3, #0
 800453c:	d001      	beq.n	8004542 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e010      	b.n	8004564 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004542:	897b      	ldrh	r3, [r7, #10]
 8004544:	b2da      	uxtb	r2, r3
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	687a      	ldr	r2, [r7, #4]
 8004550:	4907      	ldr	r1, [pc, #28]	; (8004570 <I2C_MasterRequestWrite+0x100>)
 8004552:	68f8      	ldr	r0, [r7, #12]
 8004554:	f000 f9f5 	bl	8004942 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004558:	4603      	mov	r3, r0
 800455a:	2b00      	cmp	r3, #0
 800455c:	d001      	beq.n	8004562 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	e000      	b.n	8004564 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004562:	2300      	movs	r3, #0
}
 8004564:	4618      	mov	r0, r3
 8004566:	3718      	adds	r7, #24
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}
 800456c:	00010008 	.word	0x00010008
 8004570:	00010002 	.word	0x00010002

08004574 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b088      	sub	sp, #32
 8004578:	af02      	add	r7, sp, #8
 800457a:	60f8      	str	r0, [r7, #12]
 800457c:	4608      	mov	r0, r1
 800457e:	4611      	mov	r1, r2
 8004580:	461a      	mov	r2, r3
 8004582:	4603      	mov	r3, r0
 8004584:	817b      	strh	r3, [r7, #10]
 8004586:	460b      	mov	r3, r1
 8004588:	813b      	strh	r3, [r7, #8]
 800458a:	4613      	mov	r3, r2
 800458c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800459c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045ac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80045ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b0:	9300      	str	r3, [sp, #0]
 80045b2:	6a3b      	ldr	r3, [r7, #32]
 80045b4:	2200      	movs	r2, #0
 80045b6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80045ba:	68f8      	ldr	r0, [r7, #12]
 80045bc:	f000 f96a 	bl	8004894 <I2C_WaitOnFlagUntilTimeout>
 80045c0:	4603      	mov	r3, r0
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d00d      	beq.n	80045e2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045d4:	d103      	bne.n	80045de <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80045dc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80045de:	2303      	movs	r3, #3
 80045e0:	e0aa      	b.n	8004738 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80045e2:	897b      	ldrh	r3, [r7, #10]
 80045e4:	b2db      	uxtb	r3, r3
 80045e6:	461a      	mov	r2, r3
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80045f0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80045f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f4:	6a3a      	ldr	r2, [r7, #32]
 80045f6:	4952      	ldr	r1, [pc, #328]	; (8004740 <I2C_RequestMemoryRead+0x1cc>)
 80045f8:	68f8      	ldr	r0, [r7, #12]
 80045fa:	f000 f9a2 	bl	8004942 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80045fe:	4603      	mov	r3, r0
 8004600:	2b00      	cmp	r3, #0
 8004602:	d001      	beq.n	8004608 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	e097      	b.n	8004738 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004608:	2300      	movs	r3, #0
 800460a:	617b      	str	r3, [r7, #20]
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	695b      	ldr	r3, [r3, #20]
 8004612:	617b      	str	r3, [r7, #20]
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	699b      	ldr	r3, [r3, #24]
 800461a:	617b      	str	r3, [r7, #20]
 800461c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800461e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004620:	6a39      	ldr	r1, [r7, #32]
 8004622:	68f8      	ldr	r0, [r7, #12]
 8004624:	f000 fa0c 	bl	8004a40 <I2C_WaitOnTXEFlagUntilTimeout>
 8004628:	4603      	mov	r3, r0
 800462a:	2b00      	cmp	r3, #0
 800462c:	d00d      	beq.n	800464a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004632:	2b04      	cmp	r3, #4
 8004634:	d107      	bne.n	8004646 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004644:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	e076      	b.n	8004738 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800464a:	88fb      	ldrh	r3, [r7, #6]
 800464c:	2b01      	cmp	r3, #1
 800464e:	d105      	bne.n	800465c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004650:	893b      	ldrh	r3, [r7, #8]
 8004652:	b2da      	uxtb	r2, r3
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	611a      	str	r2, [r3, #16]
 800465a:	e021      	b.n	80046a0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800465c:	893b      	ldrh	r3, [r7, #8]
 800465e:	0a1b      	lsrs	r3, r3, #8
 8004660:	b29b      	uxth	r3, r3
 8004662:	b2da      	uxtb	r2, r3
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800466a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800466c:	6a39      	ldr	r1, [r7, #32]
 800466e:	68f8      	ldr	r0, [r7, #12]
 8004670:	f000 f9e6 	bl	8004a40 <I2C_WaitOnTXEFlagUntilTimeout>
 8004674:	4603      	mov	r3, r0
 8004676:	2b00      	cmp	r3, #0
 8004678:	d00d      	beq.n	8004696 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800467e:	2b04      	cmp	r3, #4
 8004680:	d107      	bne.n	8004692 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004690:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	e050      	b.n	8004738 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004696:	893b      	ldrh	r3, [r7, #8]
 8004698:	b2da      	uxtb	r2, r3
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80046a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046a2:	6a39      	ldr	r1, [r7, #32]
 80046a4:	68f8      	ldr	r0, [r7, #12]
 80046a6:	f000 f9cb 	bl	8004a40 <I2C_WaitOnTXEFlagUntilTimeout>
 80046aa:	4603      	mov	r3, r0
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d00d      	beq.n	80046cc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b4:	2b04      	cmp	r3, #4
 80046b6:	d107      	bne.n	80046c8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046c6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	e035      	b.n	8004738 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046da:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80046dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046de:	9300      	str	r3, [sp, #0]
 80046e0:	6a3b      	ldr	r3, [r7, #32]
 80046e2:	2200      	movs	r2, #0
 80046e4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80046e8:	68f8      	ldr	r0, [r7, #12]
 80046ea:	f000 f8d3 	bl	8004894 <I2C_WaitOnFlagUntilTimeout>
 80046ee:	4603      	mov	r3, r0
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d00d      	beq.n	8004710 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004702:	d103      	bne.n	800470c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f44f 7200 	mov.w	r2, #512	; 0x200
 800470a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800470c:	2303      	movs	r3, #3
 800470e:	e013      	b.n	8004738 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004710:	897b      	ldrh	r3, [r7, #10]
 8004712:	b2db      	uxtb	r3, r3
 8004714:	f043 0301 	orr.w	r3, r3, #1
 8004718:	b2da      	uxtb	r2, r3
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004722:	6a3a      	ldr	r2, [r7, #32]
 8004724:	4906      	ldr	r1, [pc, #24]	; (8004740 <I2C_RequestMemoryRead+0x1cc>)
 8004726:	68f8      	ldr	r0, [r7, #12]
 8004728:	f000 f90b 	bl	8004942 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800472c:	4603      	mov	r3, r0
 800472e:	2b00      	cmp	r3, #0
 8004730:	d001      	beq.n	8004736 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	e000      	b.n	8004738 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004736:	2300      	movs	r3, #0
}
 8004738:	4618      	mov	r0, r3
 800473a:	3718      	adds	r7, #24
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}
 8004740:	00010002 	.word	0x00010002

08004744 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b086      	sub	sp, #24
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800474c:	2300      	movs	r3, #0
 800474e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004754:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800475c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800475e:	4b4b      	ldr	r3, [pc, #300]	; (800488c <I2C_DMAAbort+0x148>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	08db      	lsrs	r3, r3, #3
 8004764:	4a4a      	ldr	r2, [pc, #296]	; (8004890 <I2C_DMAAbort+0x14c>)
 8004766:	fba2 2303 	umull	r2, r3, r2, r3
 800476a:	0a1a      	lsrs	r2, r3, #8
 800476c:	4613      	mov	r3, r2
 800476e:	009b      	lsls	r3, r3, #2
 8004770:	4413      	add	r3, r2
 8004772:	00da      	lsls	r2, r3, #3
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d106      	bne.n	800478c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004782:	f043 0220 	orr.w	r2, r3, #32
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800478a:	e00a      	b.n	80047a2 <I2C_DMAAbort+0x5e>
    }
    count--;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	3b01      	subs	r3, #1
 8004790:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800479c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047a0:	d0ea      	beq.n	8004778 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d003      	beq.n	80047b2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047ae:	2200      	movs	r2, #0
 80047b0:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d003      	beq.n	80047c2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047be:	2200      	movs	r2, #0
 80047c0:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047d0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	2200      	movs	r2, #0
 80047d6:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d003      	beq.n	80047e8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047e4:	2200      	movs	r2, #0
 80047e6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d003      	beq.n	80047f8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047f4:	2200      	movs	r2, #0
 80047f6:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f022 0201 	bic.w	r2, r2, #1
 8004806:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800480e:	b2db      	uxtb	r3, r3
 8004810:	2b60      	cmp	r3, #96	; 0x60
 8004812:	d10e      	bne.n	8004832 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	2220      	movs	r2, #32
 8004818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	2200      	movs	r2, #0
 8004820:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	2200      	movs	r2, #0
 8004828:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800482a:	6978      	ldr	r0, [r7, #20]
 800482c:	f7fe fcb0 	bl	8003190 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004830:	e027      	b.n	8004882 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004832:	7cfb      	ldrb	r3, [r7, #19]
 8004834:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004838:	2b28      	cmp	r3, #40	; 0x28
 800483a:	d117      	bne.n	800486c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f042 0201 	orr.w	r2, r2, #1
 800484a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800485a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	2200      	movs	r2, #0
 8004860:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	2228      	movs	r2, #40	; 0x28
 8004866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800486a:	e007      	b.n	800487c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	2220      	movs	r2, #32
 8004870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	2200      	movs	r2, #0
 8004878:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800487c:	6978      	ldr	r0, [r7, #20]
 800487e:	f7fe fc7d 	bl	800317c <HAL_I2C_ErrorCallback>
}
 8004882:	bf00      	nop
 8004884:	3718      	adds	r7, #24
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}
 800488a:	bf00      	nop
 800488c:	20000064 	.word	0x20000064
 8004890:	14f8b589 	.word	0x14f8b589

08004894 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b084      	sub	sp, #16
 8004898:	af00      	add	r7, sp, #0
 800489a:	60f8      	str	r0, [r7, #12]
 800489c:	60b9      	str	r1, [r7, #8]
 800489e:	603b      	str	r3, [r7, #0]
 80048a0:	4613      	mov	r3, r2
 80048a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80048a4:	e025      	b.n	80048f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048ac:	d021      	beq.n	80048f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048ae:	f7fd f9e9 	bl	8001c84 <HAL_GetTick>
 80048b2:	4602      	mov	r2, r0
 80048b4:	69bb      	ldr	r3, [r7, #24]
 80048b6:	1ad3      	subs	r3, r2, r3
 80048b8:	683a      	ldr	r2, [r7, #0]
 80048ba:	429a      	cmp	r2, r3
 80048bc:	d302      	bcc.n	80048c4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d116      	bne.n	80048f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2200      	movs	r2, #0
 80048c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2220      	movs	r2, #32
 80048ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2200      	movs	r2, #0
 80048d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048de:	f043 0220 	orr.w	r2, r3, #32
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2200      	movs	r2, #0
 80048ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	e023      	b.n	800493a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	0c1b      	lsrs	r3, r3, #16
 80048f6:	b2db      	uxtb	r3, r3
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d10d      	bne.n	8004918 <I2C_WaitOnFlagUntilTimeout+0x84>
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	695b      	ldr	r3, [r3, #20]
 8004902:	43da      	mvns	r2, r3
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	4013      	ands	r3, r2
 8004908:	b29b      	uxth	r3, r3
 800490a:	2b00      	cmp	r3, #0
 800490c:	bf0c      	ite	eq
 800490e:	2301      	moveq	r3, #1
 8004910:	2300      	movne	r3, #0
 8004912:	b2db      	uxtb	r3, r3
 8004914:	461a      	mov	r2, r3
 8004916:	e00c      	b.n	8004932 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	699b      	ldr	r3, [r3, #24]
 800491e:	43da      	mvns	r2, r3
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	4013      	ands	r3, r2
 8004924:	b29b      	uxth	r3, r3
 8004926:	2b00      	cmp	r3, #0
 8004928:	bf0c      	ite	eq
 800492a:	2301      	moveq	r3, #1
 800492c:	2300      	movne	r3, #0
 800492e:	b2db      	uxtb	r3, r3
 8004930:	461a      	mov	r2, r3
 8004932:	79fb      	ldrb	r3, [r7, #7]
 8004934:	429a      	cmp	r2, r3
 8004936:	d0b6      	beq.n	80048a6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004938:	2300      	movs	r3, #0
}
 800493a:	4618      	mov	r0, r3
 800493c:	3710      	adds	r7, #16
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}

08004942 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004942:	b580      	push	{r7, lr}
 8004944:	b084      	sub	sp, #16
 8004946:	af00      	add	r7, sp, #0
 8004948:	60f8      	str	r0, [r7, #12]
 800494a:	60b9      	str	r1, [r7, #8]
 800494c:	607a      	str	r2, [r7, #4]
 800494e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004950:	e051      	b.n	80049f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	695b      	ldr	r3, [r3, #20]
 8004958:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800495c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004960:	d123      	bne.n	80049aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004970:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800497a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2200      	movs	r2, #0
 8004980:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2220      	movs	r2, #32
 8004986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2200      	movs	r2, #0
 800498e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004996:	f043 0204 	orr.w	r2, r3, #4
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2200      	movs	r2, #0
 80049a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	e046      	b.n	8004a38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049b0:	d021      	beq.n	80049f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049b2:	f7fd f967 	bl	8001c84 <HAL_GetTick>
 80049b6:	4602      	mov	r2, r0
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	1ad3      	subs	r3, r2, r3
 80049bc:	687a      	ldr	r2, [r7, #4]
 80049be:	429a      	cmp	r2, r3
 80049c0:	d302      	bcc.n	80049c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d116      	bne.n	80049f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2200      	movs	r2, #0
 80049cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2220      	movs	r2, #32
 80049d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2200      	movs	r2, #0
 80049da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e2:	f043 0220 	orr.w	r2, r3, #32
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2200      	movs	r2, #0
 80049ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	e020      	b.n	8004a38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	0c1b      	lsrs	r3, r3, #16
 80049fa:	b2db      	uxtb	r3, r3
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d10c      	bne.n	8004a1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	695b      	ldr	r3, [r3, #20]
 8004a06:	43da      	mvns	r2, r3
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	4013      	ands	r3, r2
 8004a0c:	b29b      	uxth	r3, r3
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	bf14      	ite	ne
 8004a12:	2301      	movne	r3, #1
 8004a14:	2300      	moveq	r3, #0
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	e00b      	b.n	8004a32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	699b      	ldr	r3, [r3, #24]
 8004a20:	43da      	mvns	r2, r3
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	4013      	ands	r3, r2
 8004a26:	b29b      	uxth	r3, r3
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	bf14      	ite	ne
 8004a2c:	2301      	movne	r3, #1
 8004a2e:	2300      	moveq	r3, #0
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d18d      	bne.n	8004952 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004a36:	2300      	movs	r3, #0
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	3710      	adds	r7, #16
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}

08004a40 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b084      	sub	sp, #16
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	60f8      	str	r0, [r7, #12]
 8004a48:	60b9      	str	r1, [r7, #8]
 8004a4a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a4c:	e02d      	b.n	8004aaa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004a4e:	68f8      	ldr	r0, [r7, #12]
 8004a50:	f000 f900 	bl	8004c54 <I2C_IsAcknowledgeFailed>
 8004a54:	4603      	mov	r3, r0
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d001      	beq.n	8004a5e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e02d      	b.n	8004aba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a64:	d021      	beq.n	8004aaa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a66:	f7fd f90d 	bl	8001c84 <HAL_GetTick>
 8004a6a:	4602      	mov	r2, r0
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	1ad3      	subs	r3, r2, r3
 8004a70:	68ba      	ldr	r2, [r7, #8]
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d302      	bcc.n	8004a7c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d116      	bne.n	8004aaa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2220      	movs	r2, #32
 8004a86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a96:	f043 0220 	orr.w	r2, r3, #32
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e007      	b.n	8004aba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	695b      	ldr	r3, [r3, #20]
 8004ab0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ab4:	2b80      	cmp	r3, #128	; 0x80
 8004ab6:	d1ca      	bne.n	8004a4e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004ab8:	2300      	movs	r3, #0
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3710      	adds	r7, #16
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}

08004ac2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ac2:	b580      	push	{r7, lr}
 8004ac4:	b084      	sub	sp, #16
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	60f8      	str	r0, [r7, #12]
 8004aca:	60b9      	str	r1, [r7, #8]
 8004acc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004ace:	e02d      	b.n	8004b2c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004ad0:	68f8      	ldr	r0, [r7, #12]
 8004ad2:	f000 f8bf 	bl	8004c54 <I2C_IsAcknowledgeFailed>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d001      	beq.n	8004ae0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004adc:	2301      	movs	r3, #1
 8004ade:	e02d      	b.n	8004b3c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ae6:	d021      	beq.n	8004b2c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ae8:	f7fd f8cc 	bl	8001c84 <HAL_GetTick>
 8004aec:	4602      	mov	r2, r0
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	1ad3      	subs	r3, r2, r3
 8004af2:	68ba      	ldr	r2, [r7, #8]
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d302      	bcc.n	8004afe <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d116      	bne.n	8004b2c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2200      	movs	r2, #0
 8004b02:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2220      	movs	r2, #32
 8004b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b18:	f043 0220 	orr.w	r2, r3, #32
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2200      	movs	r2, #0
 8004b24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	e007      	b.n	8004b3c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	695b      	ldr	r3, [r3, #20]
 8004b32:	f003 0304 	and.w	r3, r3, #4
 8004b36:	2b04      	cmp	r3, #4
 8004b38:	d1ca      	bne.n	8004ad0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004b3a:	2300      	movs	r3, #0
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	3710      	adds	r7, #16
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}

08004b44 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b085      	sub	sp, #20
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004b50:	4b13      	ldr	r3, [pc, #76]	; (8004ba0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	08db      	lsrs	r3, r3, #3
 8004b56:	4a13      	ldr	r2, [pc, #76]	; (8004ba4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004b58:	fba2 2303 	umull	r2, r3, r2, r3
 8004b5c:	0a1a      	lsrs	r2, r3, #8
 8004b5e:	4613      	mov	r3, r2
 8004b60:	009b      	lsls	r3, r3, #2
 8004b62:	4413      	add	r3, r2
 8004b64:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	3b01      	subs	r3, #1
 8004b6a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d107      	bne.n	8004b82 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b76:	f043 0220 	orr.w	r2, r3, #32
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e008      	b.n	8004b94 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b90:	d0e9      	beq.n	8004b66 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004b92:	2300      	movs	r3, #0
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	3714      	adds	r7, #20
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr
 8004ba0:	20000064 	.word	0x20000064
 8004ba4:	14f8b589 	.word	0x14f8b589

08004ba8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b084      	sub	sp, #16
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	60f8      	str	r0, [r7, #12]
 8004bb0:	60b9      	str	r1, [r7, #8]
 8004bb2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004bb4:	e042      	b.n	8004c3c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	695b      	ldr	r3, [r3, #20]
 8004bbc:	f003 0310 	and.w	r3, r3, #16
 8004bc0:	2b10      	cmp	r3, #16
 8004bc2:	d119      	bne.n	8004bf8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f06f 0210 	mvn.w	r2, #16
 8004bcc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2220      	movs	r2, #32
 8004bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2200      	movs	r2, #0
 8004be0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	e029      	b.n	8004c4c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bf8:	f7fd f844 	bl	8001c84 <HAL_GetTick>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	68ba      	ldr	r2, [r7, #8]
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d302      	bcc.n	8004c0e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d116      	bne.n	8004c3c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2200      	movs	r2, #0
 8004c12:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2220      	movs	r2, #32
 8004c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c28:	f043 0220 	orr.w	r2, r3, #32
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2200      	movs	r2, #0
 8004c34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	e007      	b.n	8004c4c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	695b      	ldr	r3, [r3, #20]
 8004c42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c46:	2b40      	cmp	r3, #64	; 0x40
 8004c48:	d1b5      	bne.n	8004bb6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004c4a:	2300      	movs	r3, #0
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	3710      	adds	r7, #16
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}

08004c54 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b083      	sub	sp, #12
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	695b      	ldr	r3, [r3, #20]
 8004c62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c6a:	d11b      	bne.n	8004ca4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004c74:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2220      	movs	r2, #32
 8004c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2200      	movs	r2, #0
 8004c88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c90:	f043 0204 	orr.w	r2, r3, #4
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	e000      	b.n	8004ca6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004ca4:	2300      	movs	r3, #0
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	370c      	adds	r7, #12
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr

08004cb2 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004cb2:	b480      	push	{r7}
 8004cb4:	b083      	sub	sp, #12
 8004cb6:	af00      	add	r7, sp, #0
 8004cb8:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cbe:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004cc2:	d103      	bne.n	8004ccc <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004cca:	e007      	b.n	8004cdc <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004cd4:	d102      	bne.n	8004cdc <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2208      	movs	r2, #8
 8004cda:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004cdc:	bf00      	nop
 8004cde:	370c      	adds	r7, #12
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr

08004ce8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b083      	sub	sp, #12
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
 8004cf0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cf8:	b2db      	uxtb	r3, r3
 8004cfa:	2b20      	cmp	r3, #32
 8004cfc:	d129      	bne.n	8004d52 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2224      	movs	r2, #36	; 0x24
 8004d02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f022 0201 	bic.w	r2, r2, #1
 8004d14:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f022 0210 	bic.w	r2, r2, #16
 8004d24:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	683a      	ldr	r2, [r7, #0]
 8004d32:	430a      	orrs	r2, r1
 8004d34:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f042 0201 	orr.w	r2, r2, #1
 8004d44:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2220      	movs	r2, #32
 8004d4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	e000      	b.n	8004d54 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004d52:	2302      	movs	r3, #2
  }
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	370c      	adds	r7, #12
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr

08004d60 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b085      	sub	sp, #20
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
 8004d68:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d74:	b2db      	uxtb	r3, r3
 8004d76:	2b20      	cmp	r3, #32
 8004d78:	d12a      	bne.n	8004dd0 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2224      	movs	r2, #36	; 0x24
 8004d7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f022 0201 	bic.w	r2, r2, #1
 8004d90:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d98:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004d9a:	89fb      	ldrh	r3, [r7, #14]
 8004d9c:	f023 030f 	bic.w	r3, r3, #15
 8004da0:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	b29a      	uxth	r2, r3
 8004da6:	89fb      	ldrh	r3, [r7, #14]
 8004da8:	4313      	orrs	r3, r2
 8004daa:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	89fa      	ldrh	r2, [r7, #14]
 8004db2:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f042 0201 	orr.w	r2, r2, #1
 8004dc2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2220      	movs	r2, #32
 8004dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	e000      	b.n	8004dd2 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004dd0:	2302      	movs	r3, #2
  }
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	3714      	adds	r7, #20
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ddc:	4770      	bx	lr
	...

08004de0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b082      	sub	sp, #8
 8004de4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8004de6:	2300      	movs	r3, #0
 8004de8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004dea:	2300      	movs	r3, #0
 8004dec:	603b      	str	r3, [r7, #0]
 8004dee:	4b20      	ldr	r3, [pc, #128]	; (8004e70 <HAL_PWREx_EnableOverDrive+0x90>)
 8004df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df2:	4a1f      	ldr	r2, [pc, #124]	; (8004e70 <HAL_PWREx_EnableOverDrive+0x90>)
 8004df4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004df8:	6413      	str	r3, [r2, #64]	; 0x40
 8004dfa:	4b1d      	ldr	r3, [pc, #116]	; (8004e70 <HAL_PWREx_EnableOverDrive+0x90>)
 8004dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e02:	603b      	str	r3, [r7, #0]
 8004e04:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004e06:	4b1b      	ldr	r3, [pc, #108]	; (8004e74 <HAL_PWREx_EnableOverDrive+0x94>)
 8004e08:	2201      	movs	r2, #1
 8004e0a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004e0c:	f7fc ff3a 	bl	8001c84 <HAL_GetTick>
 8004e10:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004e12:	e009      	b.n	8004e28 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004e14:	f7fc ff36 	bl	8001c84 <HAL_GetTick>
 8004e18:	4602      	mov	r2, r0
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	1ad3      	subs	r3, r2, r3
 8004e1e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e22:	d901      	bls.n	8004e28 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8004e24:	2303      	movs	r3, #3
 8004e26:	e01f      	b.n	8004e68 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004e28:	4b13      	ldr	r3, [pc, #76]	; (8004e78 <HAL_PWREx_EnableOverDrive+0x98>)
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e34:	d1ee      	bne.n	8004e14 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004e36:	4b11      	ldr	r3, [pc, #68]	; (8004e7c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004e38:	2201      	movs	r2, #1
 8004e3a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004e3c:	f7fc ff22 	bl	8001c84 <HAL_GetTick>
 8004e40:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004e42:	e009      	b.n	8004e58 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004e44:	f7fc ff1e 	bl	8001c84 <HAL_GetTick>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	1ad3      	subs	r3, r2, r3
 8004e4e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e52:	d901      	bls.n	8004e58 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004e54:	2303      	movs	r3, #3
 8004e56:	e007      	b.n	8004e68 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004e58:	4b07      	ldr	r3, [pc, #28]	; (8004e78 <HAL_PWREx_EnableOverDrive+0x98>)
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e60:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e64:	d1ee      	bne.n	8004e44 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8004e66:	2300      	movs	r3, #0
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3708      	adds	r7, #8
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}
 8004e70:	40023800 	.word	0x40023800
 8004e74:	420e0040 	.word	0x420e0040
 8004e78:	40007000 	.word	0x40007000
 8004e7c:	420e0044 	.word	0x420e0044

08004e80 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b086      	sub	sp, #24
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d101      	bne.n	8004e92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	e267      	b.n	8005362 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f003 0301 	and.w	r3, r3, #1
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d075      	beq.n	8004f8a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e9e:	4b88      	ldr	r3, [pc, #544]	; (80050c0 <HAL_RCC_OscConfig+0x240>)
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	f003 030c 	and.w	r3, r3, #12
 8004ea6:	2b04      	cmp	r3, #4
 8004ea8:	d00c      	beq.n	8004ec4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004eaa:	4b85      	ldr	r3, [pc, #532]	; (80050c0 <HAL_RCC_OscConfig+0x240>)
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004eb2:	2b08      	cmp	r3, #8
 8004eb4:	d112      	bne.n	8004edc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004eb6:	4b82      	ldr	r3, [pc, #520]	; (80050c0 <HAL_RCC_OscConfig+0x240>)
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ebe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ec2:	d10b      	bne.n	8004edc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ec4:	4b7e      	ldr	r3, [pc, #504]	; (80050c0 <HAL_RCC_OscConfig+0x240>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d05b      	beq.n	8004f88 <HAL_RCC_OscConfig+0x108>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d157      	bne.n	8004f88 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	e242      	b.n	8005362 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ee4:	d106      	bne.n	8004ef4 <HAL_RCC_OscConfig+0x74>
 8004ee6:	4b76      	ldr	r3, [pc, #472]	; (80050c0 <HAL_RCC_OscConfig+0x240>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a75      	ldr	r2, [pc, #468]	; (80050c0 <HAL_RCC_OscConfig+0x240>)
 8004eec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ef0:	6013      	str	r3, [r2, #0]
 8004ef2:	e01d      	b.n	8004f30 <HAL_RCC_OscConfig+0xb0>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004efc:	d10c      	bne.n	8004f18 <HAL_RCC_OscConfig+0x98>
 8004efe:	4b70      	ldr	r3, [pc, #448]	; (80050c0 <HAL_RCC_OscConfig+0x240>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a6f      	ldr	r2, [pc, #444]	; (80050c0 <HAL_RCC_OscConfig+0x240>)
 8004f04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f08:	6013      	str	r3, [r2, #0]
 8004f0a:	4b6d      	ldr	r3, [pc, #436]	; (80050c0 <HAL_RCC_OscConfig+0x240>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a6c      	ldr	r2, [pc, #432]	; (80050c0 <HAL_RCC_OscConfig+0x240>)
 8004f10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f14:	6013      	str	r3, [r2, #0]
 8004f16:	e00b      	b.n	8004f30 <HAL_RCC_OscConfig+0xb0>
 8004f18:	4b69      	ldr	r3, [pc, #420]	; (80050c0 <HAL_RCC_OscConfig+0x240>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a68      	ldr	r2, [pc, #416]	; (80050c0 <HAL_RCC_OscConfig+0x240>)
 8004f1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f22:	6013      	str	r3, [r2, #0]
 8004f24:	4b66      	ldr	r3, [pc, #408]	; (80050c0 <HAL_RCC_OscConfig+0x240>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a65      	ldr	r2, [pc, #404]	; (80050c0 <HAL_RCC_OscConfig+0x240>)
 8004f2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d013      	beq.n	8004f60 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f38:	f7fc fea4 	bl	8001c84 <HAL_GetTick>
 8004f3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f3e:	e008      	b.n	8004f52 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f40:	f7fc fea0 	bl	8001c84 <HAL_GetTick>
 8004f44:	4602      	mov	r2, r0
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	1ad3      	subs	r3, r2, r3
 8004f4a:	2b64      	cmp	r3, #100	; 0x64
 8004f4c:	d901      	bls.n	8004f52 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004f4e:	2303      	movs	r3, #3
 8004f50:	e207      	b.n	8005362 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f52:	4b5b      	ldr	r3, [pc, #364]	; (80050c0 <HAL_RCC_OscConfig+0x240>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d0f0      	beq.n	8004f40 <HAL_RCC_OscConfig+0xc0>
 8004f5e:	e014      	b.n	8004f8a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f60:	f7fc fe90 	bl	8001c84 <HAL_GetTick>
 8004f64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f66:	e008      	b.n	8004f7a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f68:	f7fc fe8c 	bl	8001c84 <HAL_GetTick>
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	1ad3      	subs	r3, r2, r3
 8004f72:	2b64      	cmp	r3, #100	; 0x64
 8004f74:	d901      	bls.n	8004f7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004f76:	2303      	movs	r3, #3
 8004f78:	e1f3      	b.n	8005362 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f7a:	4b51      	ldr	r3, [pc, #324]	; (80050c0 <HAL_RCC_OscConfig+0x240>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d1f0      	bne.n	8004f68 <HAL_RCC_OscConfig+0xe8>
 8004f86:	e000      	b.n	8004f8a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f003 0302 	and.w	r3, r3, #2
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d063      	beq.n	800505e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004f96:	4b4a      	ldr	r3, [pc, #296]	; (80050c0 <HAL_RCC_OscConfig+0x240>)
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	f003 030c 	and.w	r3, r3, #12
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d00b      	beq.n	8004fba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004fa2:	4b47      	ldr	r3, [pc, #284]	; (80050c0 <HAL_RCC_OscConfig+0x240>)
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004faa:	2b08      	cmp	r3, #8
 8004fac:	d11c      	bne.n	8004fe8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004fae:	4b44      	ldr	r3, [pc, #272]	; (80050c0 <HAL_RCC_OscConfig+0x240>)
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d116      	bne.n	8004fe8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fba:	4b41      	ldr	r3, [pc, #260]	; (80050c0 <HAL_RCC_OscConfig+0x240>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f003 0302 	and.w	r3, r3, #2
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d005      	beq.n	8004fd2 <HAL_RCC_OscConfig+0x152>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	68db      	ldr	r3, [r3, #12]
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d001      	beq.n	8004fd2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	e1c7      	b.n	8005362 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fd2:	4b3b      	ldr	r3, [pc, #236]	; (80050c0 <HAL_RCC_OscConfig+0x240>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	691b      	ldr	r3, [r3, #16]
 8004fde:	00db      	lsls	r3, r3, #3
 8004fe0:	4937      	ldr	r1, [pc, #220]	; (80050c0 <HAL_RCC_OscConfig+0x240>)
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fe6:	e03a      	b.n	800505e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	68db      	ldr	r3, [r3, #12]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d020      	beq.n	8005032 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ff0:	4b34      	ldr	r3, [pc, #208]	; (80050c4 <HAL_RCC_OscConfig+0x244>)
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ff6:	f7fc fe45 	bl	8001c84 <HAL_GetTick>
 8004ffa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ffc:	e008      	b.n	8005010 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ffe:	f7fc fe41 	bl	8001c84 <HAL_GetTick>
 8005002:	4602      	mov	r2, r0
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	1ad3      	subs	r3, r2, r3
 8005008:	2b02      	cmp	r3, #2
 800500a:	d901      	bls.n	8005010 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800500c:	2303      	movs	r3, #3
 800500e:	e1a8      	b.n	8005362 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005010:	4b2b      	ldr	r3, [pc, #172]	; (80050c0 <HAL_RCC_OscConfig+0x240>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f003 0302 	and.w	r3, r3, #2
 8005018:	2b00      	cmp	r3, #0
 800501a:	d0f0      	beq.n	8004ffe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800501c:	4b28      	ldr	r3, [pc, #160]	; (80050c0 <HAL_RCC_OscConfig+0x240>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	691b      	ldr	r3, [r3, #16]
 8005028:	00db      	lsls	r3, r3, #3
 800502a:	4925      	ldr	r1, [pc, #148]	; (80050c0 <HAL_RCC_OscConfig+0x240>)
 800502c:	4313      	orrs	r3, r2
 800502e:	600b      	str	r3, [r1, #0]
 8005030:	e015      	b.n	800505e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005032:	4b24      	ldr	r3, [pc, #144]	; (80050c4 <HAL_RCC_OscConfig+0x244>)
 8005034:	2200      	movs	r2, #0
 8005036:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005038:	f7fc fe24 	bl	8001c84 <HAL_GetTick>
 800503c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800503e:	e008      	b.n	8005052 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005040:	f7fc fe20 	bl	8001c84 <HAL_GetTick>
 8005044:	4602      	mov	r2, r0
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	1ad3      	subs	r3, r2, r3
 800504a:	2b02      	cmp	r3, #2
 800504c:	d901      	bls.n	8005052 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800504e:	2303      	movs	r3, #3
 8005050:	e187      	b.n	8005362 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005052:	4b1b      	ldr	r3, [pc, #108]	; (80050c0 <HAL_RCC_OscConfig+0x240>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f003 0302 	and.w	r3, r3, #2
 800505a:	2b00      	cmp	r3, #0
 800505c:	d1f0      	bne.n	8005040 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f003 0308 	and.w	r3, r3, #8
 8005066:	2b00      	cmp	r3, #0
 8005068:	d036      	beq.n	80050d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	695b      	ldr	r3, [r3, #20]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d016      	beq.n	80050a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005072:	4b15      	ldr	r3, [pc, #84]	; (80050c8 <HAL_RCC_OscConfig+0x248>)
 8005074:	2201      	movs	r2, #1
 8005076:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005078:	f7fc fe04 	bl	8001c84 <HAL_GetTick>
 800507c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800507e:	e008      	b.n	8005092 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005080:	f7fc fe00 	bl	8001c84 <HAL_GetTick>
 8005084:	4602      	mov	r2, r0
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	1ad3      	subs	r3, r2, r3
 800508a:	2b02      	cmp	r3, #2
 800508c:	d901      	bls.n	8005092 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800508e:	2303      	movs	r3, #3
 8005090:	e167      	b.n	8005362 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005092:	4b0b      	ldr	r3, [pc, #44]	; (80050c0 <HAL_RCC_OscConfig+0x240>)
 8005094:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005096:	f003 0302 	and.w	r3, r3, #2
 800509a:	2b00      	cmp	r3, #0
 800509c:	d0f0      	beq.n	8005080 <HAL_RCC_OscConfig+0x200>
 800509e:	e01b      	b.n	80050d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80050a0:	4b09      	ldr	r3, [pc, #36]	; (80050c8 <HAL_RCC_OscConfig+0x248>)
 80050a2:	2200      	movs	r2, #0
 80050a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050a6:	f7fc fded 	bl	8001c84 <HAL_GetTick>
 80050aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050ac:	e00e      	b.n	80050cc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80050ae:	f7fc fde9 	bl	8001c84 <HAL_GetTick>
 80050b2:	4602      	mov	r2, r0
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	1ad3      	subs	r3, r2, r3
 80050b8:	2b02      	cmp	r3, #2
 80050ba:	d907      	bls.n	80050cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80050bc:	2303      	movs	r3, #3
 80050be:	e150      	b.n	8005362 <HAL_RCC_OscConfig+0x4e2>
 80050c0:	40023800 	.word	0x40023800
 80050c4:	42470000 	.word	0x42470000
 80050c8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050cc:	4b88      	ldr	r3, [pc, #544]	; (80052f0 <HAL_RCC_OscConfig+0x470>)
 80050ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050d0:	f003 0302 	and.w	r3, r3, #2
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d1ea      	bne.n	80050ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f003 0304 	and.w	r3, r3, #4
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	f000 8097 	beq.w	8005214 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050e6:	2300      	movs	r3, #0
 80050e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050ea:	4b81      	ldr	r3, [pc, #516]	; (80052f0 <HAL_RCC_OscConfig+0x470>)
 80050ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d10f      	bne.n	8005116 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050f6:	2300      	movs	r3, #0
 80050f8:	60bb      	str	r3, [r7, #8]
 80050fa:	4b7d      	ldr	r3, [pc, #500]	; (80052f0 <HAL_RCC_OscConfig+0x470>)
 80050fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050fe:	4a7c      	ldr	r2, [pc, #496]	; (80052f0 <HAL_RCC_OscConfig+0x470>)
 8005100:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005104:	6413      	str	r3, [r2, #64]	; 0x40
 8005106:	4b7a      	ldr	r3, [pc, #488]	; (80052f0 <HAL_RCC_OscConfig+0x470>)
 8005108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800510a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800510e:	60bb      	str	r3, [r7, #8]
 8005110:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005112:	2301      	movs	r3, #1
 8005114:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005116:	4b77      	ldr	r3, [pc, #476]	; (80052f4 <HAL_RCC_OscConfig+0x474>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800511e:	2b00      	cmp	r3, #0
 8005120:	d118      	bne.n	8005154 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005122:	4b74      	ldr	r3, [pc, #464]	; (80052f4 <HAL_RCC_OscConfig+0x474>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a73      	ldr	r2, [pc, #460]	; (80052f4 <HAL_RCC_OscConfig+0x474>)
 8005128:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800512c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800512e:	f7fc fda9 	bl	8001c84 <HAL_GetTick>
 8005132:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005134:	e008      	b.n	8005148 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005136:	f7fc fda5 	bl	8001c84 <HAL_GetTick>
 800513a:	4602      	mov	r2, r0
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	1ad3      	subs	r3, r2, r3
 8005140:	2b02      	cmp	r3, #2
 8005142:	d901      	bls.n	8005148 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005144:	2303      	movs	r3, #3
 8005146:	e10c      	b.n	8005362 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005148:	4b6a      	ldr	r3, [pc, #424]	; (80052f4 <HAL_RCC_OscConfig+0x474>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005150:	2b00      	cmp	r3, #0
 8005152:	d0f0      	beq.n	8005136 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	2b01      	cmp	r3, #1
 800515a:	d106      	bne.n	800516a <HAL_RCC_OscConfig+0x2ea>
 800515c:	4b64      	ldr	r3, [pc, #400]	; (80052f0 <HAL_RCC_OscConfig+0x470>)
 800515e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005160:	4a63      	ldr	r2, [pc, #396]	; (80052f0 <HAL_RCC_OscConfig+0x470>)
 8005162:	f043 0301 	orr.w	r3, r3, #1
 8005166:	6713      	str	r3, [r2, #112]	; 0x70
 8005168:	e01c      	b.n	80051a4 <HAL_RCC_OscConfig+0x324>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	2b05      	cmp	r3, #5
 8005170:	d10c      	bne.n	800518c <HAL_RCC_OscConfig+0x30c>
 8005172:	4b5f      	ldr	r3, [pc, #380]	; (80052f0 <HAL_RCC_OscConfig+0x470>)
 8005174:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005176:	4a5e      	ldr	r2, [pc, #376]	; (80052f0 <HAL_RCC_OscConfig+0x470>)
 8005178:	f043 0304 	orr.w	r3, r3, #4
 800517c:	6713      	str	r3, [r2, #112]	; 0x70
 800517e:	4b5c      	ldr	r3, [pc, #368]	; (80052f0 <HAL_RCC_OscConfig+0x470>)
 8005180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005182:	4a5b      	ldr	r2, [pc, #364]	; (80052f0 <HAL_RCC_OscConfig+0x470>)
 8005184:	f043 0301 	orr.w	r3, r3, #1
 8005188:	6713      	str	r3, [r2, #112]	; 0x70
 800518a:	e00b      	b.n	80051a4 <HAL_RCC_OscConfig+0x324>
 800518c:	4b58      	ldr	r3, [pc, #352]	; (80052f0 <HAL_RCC_OscConfig+0x470>)
 800518e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005190:	4a57      	ldr	r2, [pc, #348]	; (80052f0 <HAL_RCC_OscConfig+0x470>)
 8005192:	f023 0301 	bic.w	r3, r3, #1
 8005196:	6713      	str	r3, [r2, #112]	; 0x70
 8005198:	4b55      	ldr	r3, [pc, #340]	; (80052f0 <HAL_RCC_OscConfig+0x470>)
 800519a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800519c:	4a54      	ldr	r2, [pc, #336]	; (80052f0 <HAL_RCC_OscConfig+0x470>)
 800519e:	f023 0304 	bic.w	r3, r3, #4
 80051a2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d015      	beq.n	80051d8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051ac:	f7fc fd6a 	bl	8001c84 <HAL_GetTick>
 80051b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051b2:	e00a      	b.n	80051ca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051b4:	f7fc fd66 	bl	8001c84 <HAL_GetTick>
 80051b8:	4602      	mov	r2, r0
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	1ad3      	subs	r3, r2, r3
 80051be:	f241 3288 	movw	r2, #5000	; 0x1388
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d901      	bls.n	80051ca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80051c6:	2303      	movs	r3, #3
 80051c8:	e0cb      	b.n	8005362 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051ca:	4b49      	ldr	r3, [pc, #292]	; (80052f0 <HAL_RCC_OscConfig+0x470>)
 80051cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051ce:	f003 0302 	and.w	r3, r3, #2
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d0ee      	beq.n	80051b4 <HAL_RCC_OscConfig+0x334>
 80051d6:	e014      	b.n	8005202 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051d8:	f7fc fd54 	bl	8001c84 <HAL_GetTick>
 80051dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051de:	e00a      	b.n	80051f6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051e0:	f7fc fd50 	bl	8001c84 <HAL_GetTick>
 80051e4:	4602      	mov	r2, r0
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	1ad3      	subs	r3, r2, r3
 80051ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d901      	bls.n	80051f6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80051f2:	2303      	movs	r3, #3
 80051f4:	e0b5      	b.n	8005362 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051f6:	4b3e      	ldr	r3, [pc, #248]	; (80052f0 <HAL_RCC_OscConfig+0x470>)
 80051f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051fa:	f003 0302 	and.w	r3, r3, #2
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d1ee      	bne.n	80051e0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005202:	7dfb      	ldrb	r3, [r7, #23]
 8005204:	2b01      	cmp	r3, #1
 8005206:	d105      	bne.n	8005214 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005208:	4b39      	ldr	r3, [pc, #228]	; (80052f0 <HAL_RCC_OscConfig+0x470>)
 800520a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800520c:	4a38      	ldr	r2, [pc, #224]	; (80052f0 <HAL_RCC_OscConfig+0x470>)
 800520e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005212:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	699b      	ldr	r3, [r3, #24]
 8005218:	2b00      	cmp	r3, #0
 800521a:	f000 80a1 	beq.w	8005360 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800521e:	4b34      	ldr	r3, [pc, #208]	; (80052f0 <HAL_RCC_OscConfig+0x470>)
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	f003 030c 	and.w	r3, r3, #12
 8005226:	2b08      	cmp	r3, #8
 8005228:	d05c      	beq.n	80052e4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	699b      	ldr	r3, [r3, #24]
 800522e:	2b02      	cmp	r3, #2
 8005230:	d141      	bne.n	80052b6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005232:	4b31      	ldr	r3, [pc, #196]	; (80052f8 <HAL_RCC_OscConfig+0x478>)
 8005234:	2200      	movs	r2, #0
 8005236:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005238:	f7fc fd24 	bl	8001c84 <HAL_GetTick>
 800523c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800523e:	e008      	b.n	8005252 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005240:	f7fc fd20 	bl	8001c84 <HAL_GetTick>
 8005244:	4602      	mov	r2, r0
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	1ad3      	subs	r3, r2, r3
 800524a:	2b02      	cmp	r3, #2
 800524c:	d901      	bls.n	8005252 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800524e:	2303      	movs	r3, #3
 8005250:	e087      	b.n	8005362 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005252:	4b27      	ldr	r3, [pc, #156]	; (80052f0 <HAL_RCC_OscConfig+0x470>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800525a:	2b00      	cmp	r3, #0
 800525c:	d1f0      	bne.n	8005240 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	69da      	ldr	r2, [r3, #28]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6a1b      	ldr	r3, [r3, #32]
 8005266:	431a      	orrs	r2, r3
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800526c:	019b      	lsls	r3, r3, #6
 800526e:	431a      	orrs	r2, r3
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005274:	085b      	lsrs	r3, r3, #1
 8005276:	3b01      	subs	r3, #1
 8005278:	041b      	lsls	r3, r3, #16
 800527a:	431a      	orrs	r2, r3
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005280:	061b      	lsls	r3, r3, #24
 8005282:	491b      	ldr	r1, [pc, #108]	; (80052f0 <HAL_RCC_OscConfig+0x470>)
 8005284:	4313      	orrs	r3, r2
 8005286:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005288:	4b1b      	ldr	r3, [pc, #108]	; (80052f8 <HAL_RCC_OscConfig+0x478>)
 800528a:	2201      	movs	r2, #1
 800528c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800528e:	f7fc fcf9 	bl	8001c84 <HAL_GetTick>
 8005292:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005294:	e008      	b.n	80052a8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005296:	f7fc fcf5 	bl	8001c84 <HAL_GetTick>
 800529a:	4602      	mov	r2, r0
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	1ad3      	subs	r3, r2, r3
 80052a0:	2b02      	cmp	r3, #2
 80052a2:	d901      	bls.n	80052a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80052a4:	2303      	movs	r3, #3
 80052a6:	e05c      	b.n	8005362 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052a8:	4b11      	ldr	r3, [pc, #68]	; (80052f0 <HAL_RCC_OscConfig+0x470>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d0f0      	beq.n	8005296 <HAL_RCC_OscConfig+0x416>
 80052b4:	e054      	b.n	8005360 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052b6:	4b10      	ldr	r3, [pc, #64]	; (80052f8 <HAL_RCC_OscConfig+0x478>)
 80052b8:	2200      	movs	r2, #0
 80052ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052bc:	f7fc fce2 	bl	8001c84 <HAL_GetTick>
 80052c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052c2:	e008      	b.n	80052d6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052c4:	f7fc fcde 	bl	8001c84 <HAL_GetTick>
 80052c8:	4602      	mov	r2, r0
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	1ad3      	subs	r3, r2, r3
 80052ce:	2b02      	cmp	r3, #2
 80052d0:	d901      	bls.n	80052d6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80052d2:	2303      	movs	r3, #3
 80052d4:	e045      	b.n	8005362 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052d6:	4b06      	ldr	r3, [pc, #24]	; (80052f0 <HAL_RCC_OscConfig+0x470>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d1f0      	bne.n	80052c4 <HAL_RCC_OscConfig+0x444>
 80052e2:	e03d      	b.n	8005360 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	699b      	ldr	r3, [r3, #24]
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	d107      	bne.n	80052fc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80052ec:	2301      	movs	r3, #1
 80052ee:	e038      	b.n	8005362 <HAL_RCC_OscConfig+0x4e2>
 80052f0:	40023800 	.word	0x40023800
 80052f4:	40007000 	.word	0x40007000
 80052f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80052fc:	4b1b      	ldr	r3, [pc, #108]	; (800536c <HAL_RCC_OscConfig+0x4ec>)
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	699b      	ldr	r3, [r3, #24]
 8005306:	2b01      	cmp	r3, #1
 8005308:	d028      	beq.n	800535c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005314:	429a      	cmp	r2, r3
 8005316:	d121      	bne.n	800535c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005322:	429a      	cmp	r2, r3
 8005324:	d11a      	bne.n	800535c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005326:	68fa      	ldr	r2, [r7, #12]
 8005328:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800532c:	4013      	ands	r3, r2
 800532e:	687a      	ldr	r2, [r7, #4]
 8005330:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005332:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005334:	4293      	cmp	r3, r2
 8005336:	d111      	bne.n	800535c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005342:	085b      	lsrs	r3, r3, #1
 8005344:	3b01      	subs	r3, #1
 8005346:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005348:	429a      	cmp	r2, r3
 800534a:	d107      	bne.n	800535c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005356:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005358:	429a      	cmp	r2, r3
 800535a:	d001      	beq.n	8005360 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800535c:	2301      	movs	r3, #1
 800535e:	e000      	b.n	8005362 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005360:	2300      	movs	r3, #0
}
 8005362:	4618      	mov	r0, r3
 8005364:	3718      	adds	r7, #24
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}
 800536a:	bf00      	nop
 800536c:	40023800 	.word	0x40023800

08005370 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b084      	sub	sp, #16
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
 8005378:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d101      	bne.n	8005384 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005380:	2301      	movs	r3, #1
 8005382:	e0cc      	b.n	800551e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005384:	4b68      	ldr	r3, [pc, #416]	; (8005528 <HAL_RCC_ClockConfig+0x1b8>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f003 030f 	and.w	r3, r3, #15
 800538c:	683a      	ldr	r2, [r7, #0]
 800538e:	429a      	cmp	r2, r3
 8005390:	d90c      	bls.n	80053ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005392:	4b65      	ldr	r3, [pc, #404]	; (8005528 <HAL_RCC_ClockConfig+0x1b8>)
 8005394:	683a      	ldr	r2, [r7, #0]
 8005396:	b2d2      	uxtb	r2, r2
 8005398:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800539a:	4b63      	ldr	r3, [pc, #396]	; (8005528 <HAL_RCC_ClockConfig+0x1b8>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f003 030f 	and.w	r3, r3, #15
 80053a2:	683a      	ldr	r2, [r7, #0]
 80053a4:	429a      	cmp	r2, r3
 80053a6:	d001      	beq.n	80053ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80053a8:	2301      	movs	r3, #1
 80053aa:	e0b8      	b.n	800551e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f003 0302 	and.w	r3, r3, #2
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d020      	beq.n	80053fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f003 0304 	and.w	r3, r3, #4
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d005      	beq.n	80053d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80053c4:	4b59      	ldr	r3, [pc, #356]	; (800552c <HAL_RCC_ClockConfig+0x1bc>)
 80053c6:	689b      	ldr	r3, [r3, #8]
 80053c8:	4a58      	ldr	r2, [pc, #352]	; (800552c <HAL_RCC_ClockConfig+0x1bc>)
 80053ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80053ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f003 0308 	and.w	r3, r3, #8
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d005      	beq.n	80053e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80053dc:	4b53      	ldr	r3, [pc, #332]	; (800552c <HAL_RCC_ClockConfig+0x1bc>)
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	4a52      	ldr	r2, [pc, #328]	; (800552c <HAL_RCC_ClockConfig+0x1bc>)
 80053e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80053e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053e8:	4b50      	ldr	r3, [pc, #320]	; (800552c <HAL_RCC_ClockConfig+0x1bc>)
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	689b      	ldr	r3, [r3, #8]
 80053f4:	494d      	ldr	r1, [pc, #308]	; (800552c <HAL_RCC_ClockConfig+0x1bc>)
 80053f6:	4313      	orrs	r3, r2
 80053f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f003 0301 	and.w	r3, r3, #1
 8005402:	2b00      	cmp	r3, #0
 8005404:	d044      	beq.n	8005490 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	2b01      	cmp	r3, #1
 800540c:	d107      	bne.n	800541e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800540e:	4b47      	ldr	r3, [pc, #284]	; (800552c <HAL_RCC_ClockConfig+0x1bc>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005416:	2b00      	cmp	r3, #0
 8005418:	d119      	bne.n	800544e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800541a:	2301      	movs	r3, #1
 800541c:	e07f      	b.n	800551e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	2b02      	cmp	r3, #2
 8005424:	d003      	beq.n	800542e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800542a:	2b03      	cmp	r3, #3
 800542c:	d107      	bne.n	800543e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800542e:	4b3f      	ldr	r3, [pc, #252]	; (800552c <HAL_RCC_ClockConfig+0x1bc>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005436:	2b00      	cmp	r3, #0
 8005438:	d109      	bne.n	800544e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800543a:	2301      	movs	r3, #1
 800543c:	e06f      	b.n	800551e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800543e:	4b3b      	ldr	r3, [pc, #236]	; (800552c <HAL_RCC_ClockConfig+0x1bc>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f003 0302 	and.w	r3, r3, #2
 8005446:	2b00      	cmp	r3, #0
 8005448:	d101      	bne.n	800544e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800544a:	2301      	movs	r3, #1
 800544c:	e067      	b.n	800551e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800544e:	4b37      	ldr	r3, [pc, #220]	; (800552c <HAL_RCC_ClockConfig+0x1bc>)
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	f023 0203 	bic.w	r2, r3, #3
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	4934      	ldr	r1, [pc, #208]	; (800552c <HAL_RCC_ClockConfig+0x1bc>)
 800545c:	4313      	orrs	r3, r2
 800545e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005460:	f7fc fc10 	bl	8001c84 <HAL_GetTick>
 8005464:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005466:	e00a      	b.n	800547e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005468:	f7fc fc0c 	bl	8001c84 <HAL_GetTick>
 800546c:	4602      	mov	r2, r0
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	1ad3      	subs	r3, r2, r3
 8005472:	f241 3288 	movw	r2, #5000	; 0x1388
 8005476:	4293      	cmp	r3, r2
 8005478:	d901      	bls.n	800547e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800547a:	2303      	movs	r3, #3
 800547c:	e04f      	b.n	800551e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800547e:	4b2b      	ldr	r3, [pc, #172]	; (800552c <HAL_RCC_ClockConfig+0x1bc>)
 8005480:	689b      	ldr	r3, [r3, #8]
 8005482:	f003 020c 	and.w	r2, r3, #12
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	009b      	lsls	r3, r3, #2
 800548c:	429a      	cmp	r2, r3
 800548e:	d1eb      	bne.n	8005468 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005490:	4b25      	ldr	r3, [pc, #148]	; (8005528 <HAL_RCC_ClockConfig+0x1b8>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f003 030f 	and.w	r3, r3, #15
 8005498:	683a      	ldr	r2, [r7, #0]
 800549a:	429a      	cmp	r2, r3
 800549c:	d20c      	bcs.n	80054b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800549e:	4b22      	ldr	r3, [pc, #136]	; (8005528 <HAL_RCC_ClockConfig+0x1b8>)
 80054a0:	683a      	ldr	r2, [r7, #0]
 80054a2:	b2d2      	uxtb	r2, r2
 80054a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054a6:	4b20      	ldr	r3, [pc, #128]	; (8005528 <HAL_RCC_ClockConfig+0x1b8>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f003 030f 	and.w	r3, r3, #15
 80054ae:	683a      	ldr	r2, [r7, #0]
 80054b0:	429a      	cmp	r2, r3
 80054b2:	d001      	beq.n	80054b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80054b4:	2301      	movs	r3, #1
 80054b6:	e032      	b.n	800551e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f003 0304 	and.w	r3, r3, #4
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d008      	beq.n	80054d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80054c4:	4b19      	ldr	r3, [pc, #100]	; (800552c <HAL_RCC_ClockConfig+0x1bc>)
 80054c6:	689b      	ldr	r3, [r3, #8]
 80054c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	68db      	ldr	r3, [r3, #12]
 80054d0:	4916      	ldr	r1, [pc, #88]	; (800552c <HAL_RCC_ClockConfig+0x1bc>)
 80054d2:	4313      	orrs	r3, r2
 80054d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f003 0308 	and.w	r3, r3, #8
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d009      	beq.n	80054f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80054e2:	4b12      	ldr	r3, [pc, #72]	; (800552c <HAL_RCC_ClockConfig+0x1bc>)
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	691b      	ldr	r3, [r3, #16]
 80054ee:	00db      	lsls	r3, r3, #3
 80054f0:	490e      	ldr	r1, [pc, #56]	; (800552c <HAL_RCC_ClockConfig+0x1bc>)
 80054f2:	4313      	orrs	r3, r2
 80054f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80054f6:	f000 f821 	bl	800553c <HAL_RCC_GetSysClockFreq>
 80054fa:	4602      	mov	r2, r0
 80054fc:	4b0b      	ldr	r3, [pc, #44]	; (800552c <HAL_RCC_ClockConfig+0x1bc>)
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	091b      	lsrs	r3, r3, #4
 8005502:	f003 030f 	and.w	r3, r3, #15
 8005506:	490a      	ldr	r1, [pc, #40]	; (8005530 <HAL_RCC_ClockConfig+0x1c0>)
 8005508:	5ccb      	ldrb	r3, [r1, r3]
 800550a:	fa22 f303 	lsr.w	r3, r2, r3
 800550e:	4a09      	ldr	r2, [pc, #36]	; (8005534 <HAL_RCC_ClockConfig+0x1c4>)
 8005510:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005512:	4b09      	ldr	r3, [pc, #36]	; (8005538 <HAL_RCC_ClockConfig+0x1c8>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4618      	mov	r0, r3
 8005518:	f7fc fb70 	bl	8001bfc <HAL_InitTick>

  return HAL_OK;
 800551c:	2300      	movs	r3, #0
}
 800551e:	4618      	mov	r0, r3
 8005520:	3710      	adds	r7, #16
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}
 8005526:	bf00      	nop
 8005528:	40023c00 	.word	0x40023c00
 800552c:	40023800 	.word	0x40023800
 8005530:	0800b17c 	.word	0x0800b17c
 8005534:	20000064 	.word	0x20000064
 8005538:	20000068 	.word	0x20000068

0800553c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800553c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005540:	b094      	sub	sp, #80	; 0x50
 8005542:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005544:	2300      	movs	r3, #0
 8005546:	647b      	str	r3, [r7, #68]	; 0x44
 8005548:	2300      	movs	r3, #0
 800554a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800554c:	2300      	movs	r3, #0
 800554e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005550:	2300      	movs	r3, #0
 8005552:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005554:	4b79      	ldr	r3, [pc, #484]	; (800573c <HAL_RCC_GetSysClockFreq+0x200>)
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	f003 030c 	and.w	r3, r3, #12
 800555c:	2b08      	cmp	r3, #8
 800555e:	d00d      	beq.n	800557c <HAL_RCC_GetSysClockFreq+0x40>
 8005560:	2b08      	cmp	r3, #8
 8005562:	f200 80e1 	bhi.w	8005728 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005566:	2b00      	cmp	r3, #0
 8005568:	d002      	beq.n	8005570 <HAL_RCC_GetSysClockFreq+0x34>
 800556a:	2b04      	cmp	r3, #4
 800556c:	d003      	beq.n	8005576 <HAL_RCC_GetSysClockFreq+0x3a>
 800556e:	e0db      	b.n	8005728 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005570:	4b73      	ldr	r3, [pc, #460]	; (8005740 <HAL_RCC_GetSysClockFreq+0x204>)
 8005572:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005574:	e0db      	b.n	800572e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005576:	4b73      	ldr	r3, [pc, #460]	; (8005744 <HAL_RCC_GetSysClockFreq+0x208>)
 8005578:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800557a:	e0d8      	b.n	800572e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800557c:	4b6f      	ldr	r3, [pc, #444]	; (800573c <HAL_RCC_GetSysClockFreq+0x200>)
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005584:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005586:	4b6d      	ldr	r3, [pc, #436]	; (800573c <HAL_RCC_GetSysClockFreq+0x200>)
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800558e:	2b00      	cmp	r3, #0
 8005590:	d063      	beq.n	800565a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005592:	4b6a      	ldr	r3, [pc, #424]	; (800573c <HAL_RCC_GetSysClockFreq+0x200>)
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	099b      	lsrs	r3, r3, #6
 8005598:	2200      	movs	r2, #0
 800559a:	63bb      	str	r3, [r7, #56]	; 0x38
 800559c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800559e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055a4:	633b      	str	r3, [r7, #48]	; 0x30
 80055a6:	2300      	movs	r3, #0
 80055a8:	637b      	str	r3, [r7, #52]	; 0x34
 80055aa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80055ae:	4622      	mov	r2, r4
 80055b0:	462b      	mov	r3, r5
 80055b2:	f04f 0000 	mov.w	r0, #0
 80055b6:	f04f 0100 	mov.w	r1, #0
 80055ba:	0159      	lsls	r1, r3, #5
 80055bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80055c0:	0150      	lsls	r0, r2, #5
 80055c2:	4602      	mov	r2, r0
 80055c4:	460b      	mov	r3, r1
 80055c6:	4621      	mov	r1, r4
 80055c8:	1a51      	subs	r1, r2, r1
 80055ca:	6139      	str	r1, [r7, #16]
 80055cc:	4629      	mov	r1, r5
 80055ce:	eb63 0301 	sbc.w	r3, r3, r1
 80055d2:	617b      	str	r3, [r7, #20]
 80055d4:	f04f 0200 	mov.w	r2, #0
 80055d8:	f04f 0300 	mov.w	r3, #0
 80055dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80055e0:	4659      	mov	r1, fp
 80055e2:	018b      	lsls	r3, r1, #6
 80055e4:	4651      	mov	r1, sl
 80055e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80055ea:	4651      	mov	r1, sl
 80055ec:	018a      	lsls	r2, r1, #6
 80055ee:	4651      	mov	r1, sl
 80055f0:	ebb2 0801 	subs.w	r8, r2, r1
 80055f4:	4659      	mov	r1, fp
 80055f6:	eb63 0901 	sbc.w	r9, r3, r1
 80055fa:	f04f 0200 	mov.w	r2, #0
 80055fe:	f04f 0300 	mov.w	r3, #0
 8005602:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005606:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800560a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800560e:	4690      	mov	r8, r2
 8005610:	4699      	mov	r9, r3
 8005612:	4623      	mov	r3, r4
 8005614:	eb18 0303 	adds.w	r3, r8, r3
 8005618:	60bb      	str	r3, [r7, #8]
 800561a:	462b      	mov	r3, r5
 800561c:	eb49 0303 	adc.w	r3, r9, r3
 8005620:	60fb      	str	r3, [r7, #12]
 8005622:	f04f 0200 	mov.w	r2, #0
 8005626:	f04f 0300 	mov.w	r3, #0
 800562a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800562e:	4629      	mov	r1, r5
 8005630:	024b      	lsls	r3, r1, #9
 8005632:	4621      	mov	r1, r4
 8005634:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005638:	4621      	mov	r1, r4
 800563a:	024a      	lsls	r2, r1, #9
 800563c:	4610      	mov	r0, r2
 800563e:	4619      	mov	r1, r3
 8005640:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005642:	2200      	movs	r2, #0
 8005644:	62bb      	str	r3, [r7, #40]	; 0x28
 8005646:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005648:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800564c:	f7fb fb2c 	bl	8000ca8 <__aeabi_uldivmod>
 8005650:	4602      	mov	r2, r0
 8005652:	460b      	mov	r3, r1
 8005654:	4613      	mov	r3, r2
 8005656:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005658:	e058      	b.n	800570c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800565a:	4b38      	ldr	r3, [pc, #224]	; (800573c <HAL_RCC_GetSysClockFreq+0x200>)
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	099b      	lsrs	r3, r3, #6
 8005660:	2200      	movs	r2, #0
 8005662:	4618      	mov	r0, r3
 8005664:	4611      	mov	r1, r2
 8005666:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800566a:	623b      	str	r3, [r7, #32]
 800566c:	2300      	movs	r3, #0
 800566e:	627b      	str	r3, [r7, #36]	; 0x24
 8005670:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005674:	4642      	mov	r2, r8
 8005676:	464b      	mov	r3, r9
 8005678:	f04f 0000 	mov.w	r0, #0
 800567c:	f04f 0100 	mov.w	r1, #0
 8005680:	0159      	lsls	r1, r3, #5
 8005682:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005686:	0150      	lsls	r0, r2, #5
 8005688:	4602      	mov	r2, r0
 800568a:	460b      	mov	r3, r1
 800568c:	4641      	mov	r1, r8
 800568e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005692:	4649      	mov	r1, r9
 8005694:	eb63 0b01 	sbc.w	fp, r3, r1
 8005698:	f04f 0200 	mov.w	r2, #0
 800569c:	f04f 0300 	mov.w	r3, #0
 80056a0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80056a4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80056a8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80056ac:	ebb2 040a 	subs.w	r4, r2, sl
 80056b0:	eb63 050b 	sbc.w	r5, r3, fp
 80056b4:	f04f 0200 	mov.w	r2, #0
 80056b8:	f04f 0300 	mov.w	r3, #0
 80056bc:	00eb      	lsls	r3, r5, #3
 80056be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80056c2:	00e2      	lsls	r2, r4, #3
 80056c4:	4614      	mov	r4, r2
 80056c6:	461d      	mov	r5, r3
 80056c8:	4643      	mov	r3, r8
 80056ca:	18e3      	adds	r3, r4, r3
 80056cc:	603b      	str	r3, [r7, #0]
 80056ce:	464b      	mov	r3, r9
 80056d0:	eb45 0303 	adc.w	r3, r5, r3
 80056d4:	607b      	str	r3, [r7, #4]
 80056d6:	f04f 0200 	mov.w	r2, #0
 80056da:	f04f 0300 	mov.w	r3, #0
 80056de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80056e2:	4629      	mov	r1, r5
 80056e4:	028b      	lsls	r3, r1, #10
 80056e6:	4621      	mov	r1, r4
 80056e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80056ec:	4621      	mov	r1, r4
 80056ee:	028a      	lsls	r2, r1, #10
 80056f0:	4610      	mov	r0, r2
 80056f2:	4619      	mov	r1, r3
 80056f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056f6:	2200      	movs	r2, #0
 80056f8:	61bb      	str	r3, [r7, #24]
 80056fa:	61fa      	str	r2, [r7, #28]
 80056fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005700:	f7fb fad2 	bl	8000ca8 <__aeabi_uldivmod>
 8005704:	4602      	mov	r2, r0
 8005706:	460b      	mov	r3, r1
 8005708:	4613      	mov	r3, r2
 800570a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800570c:	4b0b      	ldr	r3, [pc, #44]	; (800573c <HAL_RCC_GetSysClockFreq+0x200>)
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	0c1b      	lsrs	r3, r3, #16
 8005712:	f003 0303 	and.w	r3, r3, #3
 8005716:	3301      	adds	r3, #1
 8005718:	005b      	lsls	r3, r3, #1
 800571a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800571c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800571e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005720:	fbb2 f3f3 	udiv	r3, r2, r3
 8005724:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005726:	e002      	b.n	800572e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005728:	4b05      	ldr	r3, [pc, #20]	; (8005740 <HAL_RCC_GetSysClockFreq+0x204>)
 800572a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800572c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800572e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005730:	4618      	mov	r0, r3
 8005732:	3750      	adds	r7, #80	; 0x50
 8005734:	46bd      	mov	sp, r7
 8005736:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800573a:	bf00      	nop
 800573c:	40023800 	.word	0x40023800
 8005740:	00f42400 	.word	0x00f42400
 8005744:	007a1200 	.word	0x007a1200

08005748 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005748:	b480      	push	{r7}
 800574a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800574c:	4b03      	ldr	r3, [pc, #12]	; (800575c <HAL_RCC_GetHCLKFreq+0x14>)
 800574e:	681b      	ldr	r3, [r3, #0]
}
 8005750:	4618      	mov	r0, r3
 8005752:	46bd      	mov	sp, r7
 8005754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005758:	4770      	bx	lr
 800575a:	bf00      	nop
 800575c:	20000064 	.word	0x20000064

08005760 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005764:	f7ff fff0 	bl	8005748 <HAL_RCC_GetHCLKFreq>
 8005768:	4602      	mov	r2, r0
 800576a:	4b05      	ldr	r3, [pc, #20]	; (8005780 <HAL_RCC_GetPCLK1Freq+0x20>)
 800576c:	689b      	ldr	r3, [r3, #8]
 800576e:	0a9b      	lsrs	r3, r3, #10
 8005770:	f003 0307 	and.w	r3, r3, #7
 8005774:	4903      	ldr	r1, [pc, #12]	; (8005784 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005776:	5ccb      	ldrb	r3, [r1, r3]
 8005778:	fa22 f303 	lsr.w	r3, r2, r3
}
 800577c:	4618      	mov	r0, r3
 800577e:	bd80      	pop	{r7, pc}
 8005780:	40023800 	.word	0x40023800
 8005784:	0800b18c 	.word	0x0800b18c

08005788 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800578c:	f7ff ffdc 	bl	8005748 <HAL_RCC_GetHCLKFreq>
 8005790:	4602      	mov	r2, r0
 8005792:	4b05      	ldr	r3, [pc, #20]	; (80057a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	0b5b      	lsrs	r3, r3, #13
 8005798:	f003 0307 	and.w	r3, r3, #7
 800579c:	4903      	ldr	r1, [pc, #12]	; (80057ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800579e:	5ccb      	ldrb	r3, [r1, r3]
 80057a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	bd80      	pop	{r7, pc}
 80057a8:	40023800 	.word	0x40023800
 80057ac:	0800b18c 	.word	0x0800b18c

080057b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b082      	sub	sp, #8
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d101      	bne.n	80057c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80057be:	2301      	movs	r3, #1
 80057c0:	e03f      	b.n	8005842 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057c8:	b2db      	uxtb	r3, r3
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d106      	bne.n	80057dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2200      	movs	r2, #0
 80057d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f7fc f974 	bl	8001ac4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2224      	movs	r2, #36	; 0x24
 80057e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	68da      	ldr	r2, [r3, #12]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80057f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	f000 fd7b 	bl	80062f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	691a      	ldr	r2, [r3, #16]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005808:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	695a      	ldr	r2, [r3, #20]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005818:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	68da      	ldr	r2, [r3, #12]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005828:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2200      	movs	r2, #0
 800582e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2220      	movs	r2, #32
 8005834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2220      	movs	r2, #32
 800583c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005840:	2300      	movs	r3, #0
}
 8005842:	4618      	mov	r0, r3
 8005844:	3708      	adds	r7, #8
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}

0800584a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800584a:	b580      	push	{r7, lr}
 800584c:	b08a      	sub	sp, #40	; 0x28
 800584e:	af02      	add	r7, sp, #8
 8005850:	60f8      	str	r0, [r7, #12]
 8005852:	60b9      	str	r1, [r7, #8]
 8005854:	603b      	str	r3, [r7, #0]
 8005856:	4613      	mov	r3, r2
 8005858:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800585a:	2300      	movs	r3, #0
 800585c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005864:	b2db      	uxtb	r3, r3
 8005866:	2b20      	cmp	r3, #32
 8005868:	d17c      	bne.n	8005964 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d002      	beq.n	8005876 <HAL_UART_Transmit+0x2c>
 8005870:	88fb      	ldrh	r3, [r7, #6]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d101      	bne.n	800587a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005876:	2301      	movs	r3, #1
 8005878:	e075      	b.n	8005966 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005880:	2b01      	cmp	r3, #1
 8005882:	d101      	bne.n	8005888 <HAL_UART_Transmit+0x3e>
 8005884:	2302      	movs	r3, #2
 8005886:	e06e      	b.n	8005966 <HAL_UART_Transmit+0x11c>
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2201      	movs	r2, #1
 800588c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2200      	movs	r2, #0
 8005894:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2221      	movs	r2, #33	; 0x21
 800589a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800589e:	f7fc f9f1 	bl	8001c84 <HAL_GetTick>
 80058a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	88fa      	ldrh	r2, [r7, #6]
 80058a8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	88fa      	ldrh	r2, [r7, #6]
 80058ae:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	689b      	ldr	r3, [r3, #8]
 80058b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058b8:	d108      	bne.n	80058cc <HAL_UART_Transmit+0x82>
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	691b      	ldr	r3, [r3, #16]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d104      	bne.n	80058cc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80058c2:	2300      	movs	r3, #0
 80058c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	61bb      	str	r3, [r7, #24]
 80058ca:	e003      	b.n	80058d4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80058d0:	2300      	movs	r3, #0
 80058d2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2200      	movs	r2, #0
 80058d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80058dc:	e02a      	b.n	8005934 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	9300      	str	r3, [sp, #0]
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	2200      	movs	r2, #0
 80058e6:	2180      	movs	r1, #128	; 0x80
 80058e8:	68f8      	ldr	r0, [r7, #12]
 80058ea:	f000 faf9 	bl	8005ee0 <UART_WaitOnFlagUntilTimeout>
 80058ee:	4603      	mov	r3, r0
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d001      	beq.n	80058f8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80058f4:	2303      	movs	r3, #3
 80058f6:	e036      	b.n	8005966 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80058f8:	69fb      	ldr	r3, [r7, #28]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d10b      	bne.n	8005916 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80058fe:	69bb      	ldr	r3, [r7, #24]
 8005900:	881b      	ldrh	r3, [r3, #0]
 8005902:	461a      	mov	r2, r3
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800590c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800590e:	69bb      	ldr	r3, [r7, #24]
 8005910:	3302      	adds	r3, #2
 8005912:	61bb      	str	r3, [r7, #24]
 8005914:	e007      	b.n	8005926 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005916:	69fb      	ldr	r3, [r7, #28]
 8005918:	781a      	ldrb	r2, [r3, #0]
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005920:	69fb      	ldr	r3, [r7, #28]
 8005922:	3301      	adds	r3, #1
 8005924:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800592a:	b29b      	uxth	r3, r3
 800592c:	3b01      	subs	r3, #1
 800592e:	b29a      	uxth	r2, r3
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005938:	b29b      	uxth	r3, r3
 800593a:	2b00      	cmp	r3, #0
 800593c:	d1cf      	bne.n	80058de <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	9300      	str	r3, [sp, #0]
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	2200      	movs	r2, #0
 8005946:	2140      	movs	r1, #64	; 0x40
 8005948:	68f8      	ldr	r0, [r7, #12]
 800594a:	f000 fac9 	bl	8005ee0 <UART_WaitOnFlagUntilTimeout>
 800594e:	4603      	mov	r3, r0
 8005950:	2b00      	cmp	r3, #0
 8005952:	d001      	beq.n	8005958 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005954:	2303      	movs	r3, #3
 8005956:	e006      	b.n	8005966 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2220      	movs	r2, #32
 800595c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005960:	2300      	movs	r3, #0
 8005962:	e000      	b.n	8005966 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005964:	2302      	movs	r3, #2
  }
}
 8005966:	4618      	mov	r0, r3
 8005968:	3720      	adds	r7, #32
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}
	...

08005970 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b0ba      	sub	sp, #232	; 0xe8
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	68db      	ldr	r3, [r3, #12]
 8005988:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	695b      	ldr	r3, [r3, #20]
 8005992:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005996:	2300      	movs	r3, #0
 8005998:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800599c:	2300      	movs	r3, #0
 800599e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80059a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059a6:	f003 030f 	and.w	r3, r3, #15
 80059aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80059ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d10f      	bne.n	80059d6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80059b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059ba:	f003 0320 	and.w	r3, r3, #32
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d009      	beq.n	80059d6 <HAL_UART_IRQHandler+0x66>
 80059c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059c6:	f003 0320 	and.w	r3, r3, #32
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d003      	beq.n	80059d6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f000 fbd3 	bl	800617a <UART_Receive_IT>
      return;
 80059d4:	e256      	b.n	8005e84 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80059d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80059da:	2b00      	cmp	r3, #0
 80059dc:	f000 80de 	beq.w	8005b9c <HAL_UART_IRQHandler+0x22c>
 80059e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059e4:	f003 0301 	and.w	r3, r3, #1
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d106      	bne.n	80059fa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80059ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059f0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	f000 80d1 	beq.w	8005b9c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80059fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059fe:	f003 0301 	and.w	r3, r3, #1
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d00b      	beq.n	8005a1e <HAL_UART_IRQHandler+0xae>
 8005a06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d005      	beq.n	8005a1e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a16:	f043 0201 	orr.w	r2, r3, #1
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005a1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a22:	f003 0304 	and.w	r3, r3, #4
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d00b      	beq.n	8005a42 <HAL_UART_IRQHandler+0xd2>
 8005a2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a2e:	f003 0301 	and.w	r3, r3, #1
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d005      	beq.n	8005a42 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a3a:	f043 0202 	orr.w	r2, r3, #2
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005a42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a46:	f003 0302 	and.w	r3, r3, #2
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d00b      	beq.n	8005a66 <HAL_UART_IRQHandler+0xf6>
 8005a4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a52:	f003 0301 	and.w	r3, r3, #1
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d005      	beq.n	8005a66 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a5e:	f043 0204 	orr.w	r2, r3, #4
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005a66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a6a:	f003 0308 	and.w	r3, r3, #8
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d011      	beq.n	8005a96 <HAL_UART_IRQHandler+0x126>
 8005a72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a76:	f003 0320 	and.w	r3, r3, #32
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d105      	bne.n	8005a8a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005a7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a82:	f003 0301 	and.w	r3, r3, #1
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d005      	beq.n	8005a96 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a8e:	f043 0208 	orr.w	r2, r3, #8
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	f000 81ed 	beq.w	8005e7a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005aa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005aa4:	f003 0320 	and.w	r3, r3, #32
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d008      	beq.n	8005abe <HAL_UART_IRQHandler+0x14e>
 8005aac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ab0:	f003 0320 	and.w	r3, r3, #32
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d002      	beq.n	8005abe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f000 fb5e 	bl	800617a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	695b      	ldr	r3, [r3, #20]
 8005ac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ac8:	2b40      	cmp	r3, #64	; 0x40
 8005aca:	bf0c      	ite	eq
 8005acc:	2301      	moveq	r3, #1
 8005ace:	2300      	movne	r3, #0
 8005ad0:	b2db      	uxtb	r3, r3
 8005ad2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ada:	f003 0308 	and.w	r3, r3, #8
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d103      	bne.n	8005aea <HAL_UART_IRQHandler+0x17a>
 8005ae2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d04f      	beq.n	8005b8a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f000 fa66 	bl	8005fbc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	695b      	ldr	r3, [r3, #20]
 8005af6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005afa:	2b40      	cmp	r3, #64	; 0x40
 8005afc:	d141      	bne.n	8005b82 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	3314      	adds	r3, #20
 8005b04:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b08:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005b0c:	e853 3f00 	ldrex	r3, [r3]
 8005b10:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005b14:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005b18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b1c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	3314      	adds	r3, #20
 8005b26:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005b2a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005b2e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b32:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005b36:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005b3a:	e841 2300 	strex	r3, r2, [r1]
 8005b3e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005b42:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d1d9      	bne.n	8005afe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d013      	beq.n	8005b7a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b56:	4a7d      	ldr	r2, [pc, #500]	; (8005d4c <HAL_UART_IRQHandler+0x3dc>)
 8005b58:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f7fc fa41 	bl	8001fe6 <HAL_DMA_Abort_IT>
 8005b64:	4603      	mov	r3, r0
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d016      	beq.n	8005b98 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b70:	687a      	ldr	r2, [r7, #4]
 8005b72:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005b74:	4610      	mov	r0, r2
 8005b76:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b78:	e00e      	b.n	8005b98 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f000 f99a 	bl	8005eb4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b80:	e00a      	b.n	8005b98 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f000 f996 	bl	8005eb4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b88:	e006      	b.n	8005b98 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f000 f992 	bl	8005eb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2200      	movs	r2, #0
 8005b94:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005b96:	e170      	b.n	8005e7a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b98:	bf00      	nop
    return;
 8005b9a:	e16e      	b.n	8005e7a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ba0:	2b01      	cmp	r3, #1
 8005ba2:	f040 814a 	bne.w	8005e3a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005ba6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005baa:	f003 0310 	and.w	r3, r3, #16
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	f000 8143 	beq.w	8005e3a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005bb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bb8:	f003 0310 	and.w	r3, r3, #16
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	f000 813c 	beq.w	8005e3a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	60bb      	str	r3, [r7, #8]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	60bb      	str	r3, [r7, #8]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	60bb      	str	r3, [r7, #8]
 8005bd6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	695b      	ldr	r3, [r3, #20]
 8005bde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005be2:	2b40      	cmp	r3, #64	; 0x40
 8005be4:	f040 80b4 	bne.w	8005d50 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005bf4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	f000 8140 	beq.w	8005e7e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005c02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005c06:	429a      	cmp	r2, r3
 8005c08:	f080 8139 	bcs.w	8005e7e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005c12:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c18:	69db      	ldr	r3, [r3, #28]
 8005c1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c1e:	f000 8088 	beq.w	8005d32 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	330c      	adds	r3, #12
 8005c28:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c2c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005c30:	e853 3f00 	ldrex	r3, [r3]
 8005c34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005c38:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005c3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c40:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	330c      	adds	r3, #12
 8005c4a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005c4e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005c52:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c56:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005c5a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005c5e:	e841 2300 	strex	r3, r2, [r1]
 8005c62:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005c66:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d1d9      	bne.n	8005c22 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	3314      	adds	r3, #20
 8005c74:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c78:	e853 3f00 	ldrex	r3, [r3]
 8005c7c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005c7e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c80:	f023 0301 	bic.w	r3, r3, #1
 8005c84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	3314      	adds	r3, #20
 8005c8e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005c92:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005c96:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c98:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005c9a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005c9e:	e841 2300 	strex	r3, r2, [r1]
 8005ca2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005ca4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d1e1      	bne.n	8005c6e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	3314      	adds	r3, #20
 8005cb0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cb2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005cb4:	e853 3f00 	ldrex	r3, [r3]
 8005cb8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005cba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005cbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cc0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	3314      	adds	r3, #20
 8005cca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005cce:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005cd0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cd2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005cd4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005cd6:	e841 2300 	strex	r3, r2, [r1]
 8005cda:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005cdc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d1e3      	bne.n	8005caa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2220      	movs	r2, #32
 8005ce6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2200      	movs	r2, #0
 8005cee:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	330c      	adds	r3, #12
 8005cf6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cfa:	e853 3f00 	ldrex	r3, [r3]
 8005cfe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005d00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d02:	f023 0310 	bic.w	r3, r3, #16
 8005d06:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	330c      	adds	r3, #12
 8005d10:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005d14:	65ba      	str	r2, [r7, #88]	; 0x58
 8005d16:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d18:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005d1a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005d1c:	e841 2300 	strex	r3, r2, [r1]
 8005d20:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005d22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d1e3      	bne.n	8005cf0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	f7fc f8ea 	bl	8001f06 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d3a:	b29b      	uxth	r3, r3
 8005d3c:	1ad3      	subs	r3, r2, r3
 8005d3e:	b29b      	uxth	r3, r3
 8005d40:	4619      	mov	r1, r3
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f000 f8c0 	bl	8005ec8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005d48:	e099      	b.n	8005e7e <HAL_UART_IRQHandler+0x50e>
 8005d4a:	bf00      	nop
 8005d4c:	08006083 	.word	0x08006083
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d58:	b29b      	uxth	r3, r3
 8005d5a:	1ad3      	subs	r3, r2, r3
 8005d5c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d64:	b29b      	uxth	r3, r3
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	f000 808b 	beq.w	8005e82 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005d6c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	f000 8086 	beq.w	8005e82 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	330c      	adds	r3, #12
 8005d7c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d80:	e853 3f00 	ldrex	r3, [r3]
 8005d84:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005d86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d88:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d8c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	330c      	adds	r3, #12
 8005d96:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005d9a:	647a      	str	r2, [r7, #68]	; 0x44
 8005d9c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d9e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005da0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005da2:	e841 2300 	strex	r3, r2, [r1]
 8005da6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005da8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d1e3      	bne.n	8005d76 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	3314      	adds	r3, #20
 8005db4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db8:	e853 3f00 	ldrex	r3, [r3]
 8005dbc:	623b      	str	r3, [r7, #32]
   return(result);
 8005dbe:	6a3b      	ldr	r3, [r7, #32]
 8005dc0:	f023 0301 	bic.w	r3, r3, #1
 8005dc4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	3314      	adds	r3, #20
 8005dce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005dd2:	633a      	str	r2, [r7, #48]	; 0x30
 8005dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dd6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005dd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005dda:	e841 2300 	strex	r3, r2, [r1]
 8005dde:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d1e3      	bne.n	8005dae <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2220      	movs	r2, #32
 8005dea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2200      	movs	r2, #0
 8005df2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	330c      	adds	r3, #12
 8005dfa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	e853 3f00 	ldrex	r3, [r3]
 8005e02:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	f023 0310 	bic.w	r3, r3, #16
 8005e0a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	330c      	adds	r3, #12
 8005e14:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005e18:	61fa      	str	r2, [r7, #28]
 8005e1a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e1c:	69b9      	ldr	r1, [r7, #24]
 8005e1e:	69fa      	ldr	r2, [r7, #28]
 8005e20:	e841 2300 	strex	r3, r2, [r1]
 8005e24:	617b      	str	r3, [r7, #20]
   return(result);
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d1e3      	bne.n	8005df4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005e2c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005e30:	4619      	mov	r1, r3
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f000 f848 	bl	8005ec8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005e38:	e023      	b.n	8005e82 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005e3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d009      	beq.n	8005e5a <HAL_UART_IRQHandler+0x4ea>
 8005e46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d003      	beq.n	8005e5a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f000 f929 	bl	80060aa <UART_Transmit_IT>
    return;
 8005e58:	e014      	b.n	8005e84 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005e5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d00e      	beq.n	8005e84 <HAL_UART_IRQHandler+0x514>
 8005e66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d008      	beq.n	8005e84 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f000 f969 	bl	800614a <UART_EndTransmit_IT>
    return;
 8005e78:	e004      	b.n	8005e84 <HAL_UART_IRQHandler+0x514>
    return;
 8005e7a:	bf00      	nop
 8005e7c:	e002      	b.n	8005e84 <HAL_UART_IRQHandler+0x514>
      return;
 8005e7e:	bf00      	nop
 8005e80:	e000      	b.n	8005e84 <HAL_UART_IRQHandler+0x514>
      return;
 8005e82:	bf00      	nop
  }
}
 8005e84:	37e8      	adds	r7, #232	; 0xe8
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}
 8005e8a:	bf00      	nop

08005e8c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b083      	sub	sp, #12
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005e94:	bf00      	nop
 8005e96:	370c      	adds	r7, #12
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9e:	4770      	bx	lr

08005ea0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b083      	sub	sp, #12
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005ea8:	bf00      	nop
 8005eaa:	370c      	adds	r7, #12
 8005eac:	46bd      	mov	sp, r7
 8005eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb2:	4770      	bx	lr

08005eb4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b083      	sub	sp, #12
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005ebc:	bf00      	nop
 8005ebe:	370c      	adds	r7, #12
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec6:	4770      	bx	lr

08005ec8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b083      	sub	sp, #12
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
 8005ed0:	460b      	mov	r3, r1
 8005ed2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005ed4:	bf00      	nop
 8005ed6:	370c      	adds	r7, #12
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ede:	4770      	bx	lr

08005ee0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b090      	sub	sp, #64	; 0x40
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	60f8      	str	r0, [r7, #12]
 8005ee8:	60b9      	str	r1, [r7, #8]
 8005eea:	603b      	str	r3, [r7, #0]
 8005eec:	4613      	mov	r3, r2
 8005eee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ef0:	e050      	b.n	8005f94 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ef2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ef8:	d04c      	beq.n	8005f94 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005efa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d007      	beq.n	8005f10 <UART_WaitOnFlagUntilTimeout+0x30>
 8005f00:	f7fb fec0 	bl	8001c84 <HAL_GetTick>
 8005f04:	4602      	mov	r2, r0
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	1ad3      	subs	r3, r2, r3
 8005f0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f0c:	429a      	cmp	r2, r3
 8005f0e:	d241      	bcs.n	8005f94 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	330c      	adds	r3, #12
 8005f16:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f1a:	e853 3f00 	ldrex	r3, [r3]
 8005f1e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f22:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005f26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	330c      	adds	r3, #12
 8005f2e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005f30:	637a      	str	r2, [r7, #52]	; 0x34
 8005f32:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f34:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005f36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f38:	e841 2300 	strex	r3, r2, [r1]
 8005f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d1e5      	bne.n	8005f10 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	3314      	adds	r3, #20
 8005f4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	e853 3f00 	ldrex	r3, [r3]
 8005f52:	613b      	str	r3, [r7, #16]
   return(result);
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	f023 0301 	bic.w	r3, r3, #1
 8005f5a:	63bb      	str	r3, [r7, #56]	; 0x38
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	3314      	adds	r3, #20
 8005f62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f64:	623a      	str	r2, [r7, #32]
 8005f66:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f68:	69f9      	ldr	r1, [r7, #28]
 8005f6a:	6a3a      	ldr	r2, [r7, #32]
 8005f6c:	e841 2300 	strex	r3, r2, [r1]
 8005f70:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f72:	69bb      	ldr	r3, [r7, #24]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d1e5      	bne.n	8005f44 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2220      	movs	r2, #32
 8005f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	2220      	movs	r2, #32
 8005f84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005f90:	2303      	movs	r3, #3
 8005f92:	e00f      	b.n	8005fb4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	681a      	ldr	r2, [r3, #0]
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	4013      	ands	r3, r2
 8005f9e:	68ba      	ldr	r2, [r7, #8]
 8005fa0:	429a      	cmp	r2, r3
 8005fa2:	bf0c      	ite	eq
 8005fa4:	2301      	moveq	r3, #1
 8005fa6:	2300      	movne	r3, #0
 8005fa8:	b2db      	uxtb	r3, r3
 8005faa:	461a      	mov	r2, r3
 8005fac:	79fb      	ldrb	r3, [r7, #7]
 8005fae:	429a      	cmp	r2, r3
 8005fb0:	d09f      	beq.n	8005ef2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005fb2:	2300      	movs	r3, #0
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	3740      	adds	r7, #64	; 0x40
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bd80      	pop	{r7, pc}

08005fbc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b095      	sub	sp, #84	; 0x54
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	330c      	adds	r3, #12
 8005fca:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fce:	e853 3f00 	ldrex	r3, [r3]
 8005fd2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fd6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005fda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	330c      	adds	r3, #12
 8005fe2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005fe4:	643a      	str	r2, [r7, #64]	; 0x40
 8005fe6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fe8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005fea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005fec:	e841 2300 	strex	r3, r2, [r1]
 8005ff0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d1e5      	bne.n	8005fc4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	3314      	adds	r3, #20
 8005ffe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006000:	6a3b      	ldr	r3, [r7, #32]
 8006002:	e853 3f00 	ldrex	r3, [r3]
 8006006:	61fb      	str	r3, [r7, #28]
   return(result);
 8006008:	69fb      	ldr	r3, [r7, #28]
 800600a:	f023 0301 	bic.w	r3, r3, #1
 800600e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	3314      	adds	r3, #20
 8006016:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006018:	62fa      	str	r2, [r7, #44]	; 0x2c
 800601a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800601c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800601e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006020:	e841 2300 	strex	r3, r2, [r1]
 8006024:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006028:	2b00      	cmp	r3, #0
 800602a:	d1e5      	bne.n	8005ff8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006030:	2b01      	cmp	r3, #1
 8006032:	d119      	bne.n	8006068 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	330c      	adds	r3, #12
 800603a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	e853 3f00 	ldrex	r3, [r3]
 8006042:	60bb      	str	r3, [r7, #8]
   return(result);
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	f023 0310 	bic.w	r3, r3, #16
 800604a:	647b      	str	r3, [r7, #68]	; 0x44
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	330c      	adds	r3, #12
 8006052:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006054:	61ba      	str	r2, [r7, #24]
 8006056:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006058:	6979      	ldr	r1, [r7, #20]
 800605a:	69ba      	ldr	r2, [r7, #24]
 800605c:	e841 2300 	strex	r3, r2, [r1]
 8006060:	613b      	str	r3, [r7, #16]
   return(result);
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d1e5      	bne.n	8006034 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2220      	movs	r2, #32
 800606c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2200      	movs	r2, #0
 8006074:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006076:	bf00      	nop
 8006078:	3754      	adds	r7, #84	; 0x54
 800607a:	46bd      	mov	sp, r7
 800607c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006080:	4770      	bx	lr

08006082 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006082:	b580      	push	{r7, lr}
 8006084:	b084      	sub	sp, #16
 8006086:	af00      	add	r7, sp, #0
 8006088:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800608e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2200      	movs	r2, #0
 8006094:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2200      	movs	r2, #0
 800609a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800609c:	68f8      	ldr	r0, [r7, #12]
 800609e:	f7ff ff09 	bl	8005eb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80060a2:	bf00      	nop
 80060a4:	3710      	adds	r7, #16
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}

080060aa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80060aa:	b480      	push	{r7}
 80060ac:	b085      	sub	sp, #20
 80060ae:	af00      	add	r7, sp, #0
 80060b0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060b8:	b2db      	uxtb	r3, r3
 80060ba:	2b21      	cmp	r3, #33	; 0x21
 80060bc:	d13e      	bne.n	800613c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	689b      	ldr	r3, [r3, #8]
 80060c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060c6:	d114      	bne.n	80060f2 <UART_Transmit_IT+0x48>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	691b      	ldr	r3, [r3, #16]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d110      	bne.n	80060f2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6a1b      	ldr	r3, [r3, #32]
 80060d4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	881b      	ldrh	r3, [r3, #0]
 80060da:	461a      	mov	r2, r3
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80060e4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6a1b      	ldr	r3, [r3, #32]
 80060ea:	1c9a      	adds	r2, r3, #2
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	621a      	str	r2, [r3, #32]
 80060f0:	e008      	b.n	8006104 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6a1b      	ldr	r3, [r3, #32]
 80060f6:	1c59      	adds	r1, r3, #1
 80060f8:	687a      	ldr	r2, [r7, #4]
 80060fa:	6211      	str	r1, [r2, #32]
 80060fc:	781a      	ldrb	r2, [r3, #0]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006108:	b29b      	uxth	r3, r3
 800610a:	3b01      	subs	r3, #1
 800610c:	b29b      	uxth	r3, r3
 800610e:	687a      	ldr	r2, [r7, #4]
 8006110:	4619      	mov	r1, r3
 8006112:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006114:	2b00      	cmp	r3, #0
 8006116:	d10f      	bne.n	8006138 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	68da      	ldr	r2, [r3, #12]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006126:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	68da      	ldr	r2, [r3, #12]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006136:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006138:	2300      	movs	r3, #0
 800613a:	e000      	b.n	800613e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800613c:	2302      	movs	r3, #2
  }
}
 800613e:	4618      	mov	r0, r3
 8006140:	3714      	adds	r7, #20
 8006142:	46bd      	mov	sp, r7
 8006144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006148:	4770      	bx	lr

0800614a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800614a:	b580      	push	{r7, lr}
 800614c:	b082      	sub	sp, #8
 800614e:	af00      	add	r7, sp, #0
 8006150:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	68da      	ldr	r2, [r3, #12]
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006160:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2220      	movs	r2, #32
 8006166:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f7ff fe8e 	bl	8005e8c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006170:	2300      	movs	r3, #0
}
 8006172:	4618      	mov	r0, r3
 8006174:	3708      	adds	r7, #8
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}

0800617a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800617a:	b580      	push	{r7, lr}
 800617c:	b08c      	sub	sp, #48	; 0x30
 800617e:	af00      	add	r7, sp, #0
 8006180:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006188:	b2db      	uxtb	r3, r3
 800618a:	2b22      	cmp	r3, #34	; 0x22
 800618c:	f040 80ab 	bne.w	80062e6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	689b      	ldr	r3, [r3, #8]
 8006194:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006198:	d117      	bne.n	80061ca <UART_Receive_IT+0x50>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	691b      	ldr	r3, [r3, #16]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d113      	bne.n	80061ca <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80061a2:	2300      	movs	r3, #0
 80061a4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061aa:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	b29b      	uxth	r3, r3
 80061b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061b8:	b29a      	uxth	r2, r3
 80061ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061bc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061c2:	1c9a      	adds	r2, r3, #2
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	629a      	str	r2, [r3, #40]	; 0x28
 80061c8:	e026      	b.n	8006218 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061ce:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80061d0:	2300      	movs	r3, #0
 80061d2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061dc:	d007      	beq.n	80061ee <UART_Receive_IT+0x74>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	689b      	ldr	r3, [r3, #8]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d10a      	bne.n	80061fc <UART_Receive_IT+0x82>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	691b      	ldr	r3, [r3, #16]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d106      	bne.n	80061fc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	685b      	ldr	r3, [r3, #4]
 80061f4:	b2da      	uxtb	r2, r3
 80061f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061f8:	701a      	strb	r2, [r3, #0]
 80061fa:	e008      	b.n	800620e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	b2db      	uxtb	r3, r3
 8006204:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006208:	b2da      	uxtb	r2, r3
 800620a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800620c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006212:	1c5a      	adds	r2, r3, #1
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800621c:	b29b      	uxth	r3, r3
 800621e:	3b01      	subs	r3, #1
 8006220:	b29b      	uxth	r3, r3
 8006222:	687a      	ldr	r2, [r7, #4]
 8006224:	4619      	mov	r1, r3
 8006226:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006228:	2b00      	cmp	r3, #0
 800622a:	d15a      	bne.n	80062e2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	68da      	ldr	r2, [r3, #12]
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f022 0220 	bic.w	r2, r2, #32
 800623a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	68da      	ldr	r2, [r3, #12]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800624a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	695a      	ldr	r2, [r3, #20]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f022 0201 	bic.w	r2, r2, #1
 800625a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2220      	movs	r2, #32
 8006260:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006268:	2b01      	cmp	r3, #1
 800626a:	d135      	bne.n	80062d8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2200      	movs	r2, #0
 8006270:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	330c      	adds	r3, #12
 8006278:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	e853 3f00 	ldrex	r3, [r3]
 8006280:	613b      	str	r3, [r7, #16]
   return(result);
 8006282:	693b      	ldr	r3, [r7, #16]
 8006284:	f023 0310 	bic.w	r3, r3, #16
 8006288:	627b      	str	r3, [r7, #36]	; 0x24
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	330c      	adds	r3, #12
 8006290:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006292:	623a      	str	r2, [r7, #32]
 8006294:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006296:	69f9      	ldr	r1, [r7, #28]
 8006298:	6a3a      	ldr	r2, [r7, #32]
 800629a:	e841 2300 	strex	r3, r2, [r1]
 800629e:	61bb      	str	r3, [r7, #24]
   return(result);
 80062a0:	69bb      	ldr	r3, [r7, #24]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d1e5      	bne.n	8006272 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f003 0310 	and.w	r3, r3, #16
 80062b0:	2b10      	cmp	r3, #16
 80062b2:	d10a      	bne.n	80062ca <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80062b4:	2300      	movs	r3, #0
 80062b6:	60fb      	str	r3, [r7, #12]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	60fb      	str	r3, [r7, #12]
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	60fb      	str	r3, [r7, #12]
 80062c8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80062ce:	4619      	mov	r1, r3
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f7ff fdf9 	bl	8005ec8 <HAL_UARTEx_RxEventCallback>
 80062d6:	e002      	b.n	80062de <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	f7ff fde1 	bl	8005ea0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80062de:	2300      	movs	r3, #0
 80062e0:	e002      	b.n	80062e8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80062e2:	2300      	movs	r3, #0
 80062e4:	e000      	b.n	80062e8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80062e6:	2302      	movs	r3, #2
  }
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	3730      	adds	r7, #48	; 0x30
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bd80      	pop	{r7, pc}

080062f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80062f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80062f4:	b0c0      	sub	sp, #256	; 0x100
 80062f6:	af00      	add	r7, sp, #0
 80062f8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80062fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	691b      	ldr	r3, [r3, #16]
 8006304:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800630c:	68d9      	ldr	r1, [r3, #12]
 800630e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006312:	681a      	ldr	r2, [r3, #0]
 8006314:	ea40 0301 	orr.w	r3, r0, r1
 8006318:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800631a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800631e:	689a      	ldr	r2, [r3, #8]
 8006320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006324:	691b      	ldr	r3, [r3, #16]
 8006326:	431a      	orrs	r2, r3
 8006328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800632c:	695b      	ldr	r3, [r3, #20]
 800632e:	431a      	orrs	r2, r3
 8006330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006334:	69db      	ldr	r3, [r3, #28]
 8006336:	4313      	orrs	r3, r2
 8006338:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800633c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	68db      	ldr	r3, [r3, #12]
 8006344:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006348:	f021 010c 	bic.w	r1, r1, #12
 800634c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006350:	681a      	ldr	r2, [r3, #0]
 8006352:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006356:	430b      	orrs	r3, r1
 8006358:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800635a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	695b      	ldr	r3, [r3, #20]
 8006362:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006366:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800636a:	6999      	ldr	r1, [r3, #24]
 800636c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006370:	681a      	ldr	r2, [r3, #0]
 8006372:	ea40 0301 	orr.w	r3, r0, r1
 8006376:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006378:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800637c:	681a      	ldr	r2, [r3, #0]
 800637e:	4b8f      	ldr	r3, [pc, #572]	; (80065bc <UART_SetConfig+0x2cc>)
 8006380:	429a      	cmp	r2, r3
 8006382:	d005      	beq.n	8006390 <UART_SetConfig+0xa0>
 8006384:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006388:	681a      	ldr	r2, [r3, #0]
 800638a:	4b8d      	ldr	r3, [pc, #564]	; (80065c0 <UART_SetConfig+0x2d0>)
 800638c:	429a      	cmp	r2, r3
 800638e:	d104      	bne.n	800639a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006390:	f7ff f9fa 	bl	8005788 <HAL_RCC_GetPCLK2Freq>
 8006394:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006398:	e003      	b.n	80063a2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800639a:	f7ff f9e1 	bl	8005760 <HAL_RCC_GetPCLK1Freq>
 800639e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80063a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063a6:	69db      	ldr	r3, [r3, #28]
 80063a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063ac:	f040 810c 	bne.w	80065c8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80063b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80063b4:	2200      	movs	r2, #0
 80063b6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80063ba:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80063be:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80063c2:	4622      	mov	r2, r4
 80063c4:	462b      	mov	r3, r5
 80063c6:	1891      	adds	r1, r2, r2
 80063c8:	65b9      	str	r1, [r7, #88]	; 0x58
 80063ca:	415b      	adcs	r3, r3
 80063cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80063ce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80063d2:	4621      	mov	r1, r4
 80063d4:	eb12 0801 	adds.w	r8, r2, r1
 80063d8:	4629      	mov	r1, r5
 80063da:	eb43 0901 	adc.w	r9, r3, r1
 80063de:	f04f 0200 	mov.w	r2, #0
 80063e2:	f04f 0300 	mov.w	r3, #0
 80063e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80063ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80063ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80063f2:	4690      	mov	r8, r2
 80063f4:	4699      	mov	r9, r3
 80063f6:	4623      	mov	r3, r4
 80063f8:	eb18 0303 	adds.w	r3, r8, r3
 80063fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006400:	462b      	mov	r3, r5
 8006402:	eb49 0303 	adc.w	r3, r9, r3
 8006406:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800640a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	2200      	movs	r2, #0
 8006412:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006416:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800641a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800641e:	460b      	mov	r3, r1
 8006420:	18db      	adds	r3, r3, r3
 8006422:	653b      	str	r3, [r7, #80]	; 0x50
 8006424:	4613      	mov	r3, r2
 8006426:	eb42 0303 	adc.w	r3, r2, r3
 800642a:	657b      	str	r3, [r7, #84]	; 0x54
 800642c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006430:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006434:	f7fa fc38 	bl	8000ca8 <__aeabi_uldivmod>
 8006438:	4602      	mov	r2, r0
 800643a:	460b      	mov	r3, r1
 800643c:	4b61      	ldr	r3, [pc, #388]	; (80065c4 <UART_SetConfig+0x2d4>)
 800643e:	fba3 2302 	umull	r2, r3, r3, r2
 8006442:	095b      	lsrs	r3, r3, #5
 8006444:	011c      	lsls	r4, r3, #4
 8006446:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800644a:	2200      	movs	r2, #0
 800644c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006450:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006454:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006458:	4642      	mov	r2, r8
 800645a:	464b      	mov	r3, r9
 800645c:	1891      	adds	r1, r2, r2
 800645e:	64b9      	str	r1, [r7, #72]	; 0x48
 8006460:	415b      	adcs	r3, r3
 8006462:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006464:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006468:	4641      	mov	r1, r8
 800646a:	eb12 0a01 	adds.w	sl, r2, r1
 800646e:	4649      	mov	r1, r9
 8006470:	eb43 0b01 	adc.w	fp, r3, r1
 8006474:	f04f 0200 	mov.w	r2, #0
 8006478:	f04f 0300 	mov.w	r3, #0
 800647c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006480:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006484:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006488:	4692      	mov	sl, r2
 800648a:	469b      	mov	fp, r3
 800648c:	4643      	mov	r3, r8
 800648e:	eb1a 0303 	adds.w	r3, sl, r3
 8006492:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006496:	464b      	mov	r3, r9
 8006498:	eb4b 0303 	adc.w	r3, fp, r3
 800649c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80064a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	2200      	movs	r2, #0
 80064a8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80064ac:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80064b0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80064b4:	460b      	mov	r3, r1
 80064b6:	18db      	adds	r3, r3, r3
 80064b8:	643b      	str	r3, [r7, #64]	; 0x40
 80064ba:	4613      	mov	r3, r2
 80064bc:	eb42 0303 	adc.w	r3, r2, r3
 80064c0:	647b      	str	r3, [r7, #68]	; 0x44
 80064c2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80064c6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80064ca:	f7fa fbed 	bl	8000ca8 <__aeabi_uldivmod>
 80064ce:	4602      	mov	r2, r0
 80064d0:	460b      	mov	r3, r1
 80064d2:	4611      	mov	r1, r2
 80064d4:	4b3b      	ldr	r3, [pc, #236]	; (80065c4 <UART_SetConfig+0x2d4>)
 80064d6:	fba3 2301 	umull	r2, r3, r3, r1
 80064da:	095b      	lsrs	r3, r3, #5
 80064dc:	2264      	movs	r2, #100	; 0x64
 80064de:	fb02 f303 	mul.w	r3, r2, r3
 80064e2:	1acb      	subs	r3, r1, r3
 80064e4:	00db      	lsls	r3, r3, #3
 80064e6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80064ea:	4b36      	ldr	r3, [pc, #216]	; (80065c4 <UART_SetConfig+0x2d4>)
 80064ec:	fba3 2302 	umull	r2, r3, r3, r2
 80064f0:	095b      	lsrs	r3, r3, #5
 80064f2:	005b      	lsls	r3, r3, #1
 80064f4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80064f8:	441c      	add	r4, r3
 80064fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80064fe:	2200      	movs	r2, #0
 8006500:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006504:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006508:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800650c:	4642      	mov	r2, r8
 800650e:	464b      	mov	r3, r9
 8006510:	1891      	adds	r1, r2, r2
 8006512:	63b9      	str	r1, [r7, #56]	; 0x38
 8006514:	415b      	adcs	r3, r3
 8006516:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006518:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800651c:	4641      	mov	r1, r8
 800651e:	1851      	adds	r1, r2, r1
 8006520:	6339      	str	r1, [r7, #48]	; 0x30
 8006522:	4649      	mov	r1, r9
 8006524:	414b      	adcs	r3, r1
 8006526:	637b      	str	r3, [r7, #52]	; 0x34
 8006528:	f04f 0200 	mov.w	r2, #0
 800652c:	f04f 0300 	mov.w	r3, #0
 8006530:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006534:	4659      	mov	r1, fp
 8006536:	00cb      	lsls	r3, r1, #3
 8006538:	4651      	mov	r1, sl
 800653a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800653e:	4651      	mov	r1, sl
 8006540:	00ca      	lsls	r2, r1, #3
 8006542:	4610      	mov	r0, r2
 8006544:	4619      	mov	r1, r3
 8006546:	4603      	mov	r3, r0
 8006548:	4642      	mov	r2, r8
 800654a:	189b      	adds	r3, r3, r2
 800654c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006550:	464b      	mov	r3, r9
 8006552:	460a      	mov	r2, r1
 8006554:	eb42 0303 	adc.w	r3, r2, r3
 8006558:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800655c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	2200      	movs	r2, #0
 8006564:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006568:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800656c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006570:	460b      	mov	r3, r1
 8006572:	18db      	adds	r3, r3, r3
 8006574:	62bb      	str	r3, [r7, #40]	; 0x28
 8006576:	4613      	mov	r3, r2
 8006578:	eb42 0303 	adc.w	r3, r2, r3
 800657c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800657e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006582:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006586:	f7fa fb8f 	bl	8000ca8 <__aeabi_uldivmod>
 800658a:	4602      	mov	r2, r0
 800658c:	460b      	mov	r3, r1
 800658e:	4b0d      	ldr	r3, [pc, #52]	; (80065c4 <UART_SetConfig+0x2d4>)
 8006590:	fba3 1302 	umull	r1, r3, r3, r2
 8006594:	095b      	lsrs	r3, r3, #5
 8006596:	2164      	movs	r1, #100	; 0x64
 8006598:	fb01 f303 	mul.w	r3, r1, r3
 800659c:	1ad3      	subs	r3, r2, r3
 800659e:	00db      	lsls	r3, r3, #3
 80065a0:	3332      	adds	r3, #50	; 0x32
 80065a2:	4a08      	ldr	r2, [pc, #32]	; (80065c4 <UART_SetConfig+0x2d4>)
 80065a4:	fba2 2303 	umull	r2, r3, r2, r3
 80065a8:	095b      	lsrs	r3, r3, #5
 80065aa:	f003 0207 	and.w	r2, r3, #7
 80065ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4422      	add	r2, r4
 80065b6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80065b8:	e105      	b.n	80067c6 <UART_SetConfig+0x4d6>
 80065ba:	bf00      	nop
 80065bc:	40011000 	.word	0x40011000
 80065c0:	40011400 	.word	0x40011400
 80065c4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80065c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80065cc:	2200      	movs	r2, #0
 80065ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80065d2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80065d6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80065da:	4642      	mov	r2, r8
 80065dc:	464b      	mov	r3, r9
 80065de:	1891      	adds	r1, r2, r2
 80065e0:	6239      	str	r1, [r7, #32]
 80065e2:	415b      	adcs	r3, r3
 80065e4:	627b      	str	r3, [r7, #36]	; 0x24
 80065e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80065ea:	4641      	mov	r1, r8
 80065ec:	1854      	adds	r4, r2, r1
 80065ee:	4649      	mov	r1, r9
 80065f0:	eb43 0501 	adc.w	r5, r3, r1
 80065f4:	f04f 0200 	mov.w	r2, #0
 80065f8:	f04f 0300 	mov.w	r3, #0
 80065fc:	00eb      	lsls	r3, r5, #3
 80065fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006602:	00e2      	lsls	r2, r4, #3
 8006604:	4614      	mov	r4, r2
 8006606:	461d      	mov	r5, r3
 8006608:	4643      	mov	r3, r8
 800660a:	18e3      	adds	r3, r4, r3
 800660c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006610:	464b      	mov	r3, r9
 8006612:	eb45 0303 	adc.w	r3, r5, r3
 8006616:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800661a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	2200      	movs	r2, #0
 8006622:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006626:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800662a:	f04f 0200 	mov.w	r2, #0
 800662e:	f04f 0300 	mov.w	r3, #0
 8006632:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006636:	4629      	mov	r1, r5
 8006638:	008b      	lsls	r3, r1, #2
 800663a:	4621      	mov	r1, r4
 800663c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006640:	4621      	mov	r1, r4
 8006642:	008a      	lsls	r2, r1, #2
 8006644:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006648:	f7fa fb2e 	bl	8000ca8 <__aeabi_uldivmod>
 800664c:	4602      	mov	r2, r0
 800664e:	460b      	mov	r3, r1
 8006650:	4b60      	ldr	r3, [pc, #384]	; (80067d4 <UART_SetConfig+0x4e4>)
 8006652:	fba3 2302 	umull	r2, r3, r3, r2
 8006656:	095b      	lsrs	r3, r3, #5
 8006658:	011c      	lsls	r4, r3, #4
 800665a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800665e:	2200      	movs	r2, #0
 8006660:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006664:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006668:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800666c:	4642      	mov	r2, r8
 800666e:	464b      	mov	r3, r9
 8006670:	1891      	adds	r1, r2, r2
 8006672:	61b9      	str	r1, [r7, #24]
 8006674:	415b      	adcs	r3, r3
 8006676:	61fb      	str	r3, [r7, #28]
 8006678:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800667c:	4641      	mov	r1, r8
 800667e:	1851      	adds	r1, r2, r1
 8006680:	6139      	str	r1, [r7, #16]
 8006682:	4649      	mov	r1, r9
 8006684:	414b      	adcs	r3, r1
 8006686:	617b      	str	r3, [r7, #20]
 8006688:	f04f 0200 	mov.w	r2, #0
 800668c:	f04f 0300 	mov.w	r3, #0
 8006690:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006694:	4659      	mov	r1, fp
 8006696:	00cb      	lsls	r3, r1, #3
 8006698:	4651      	mov	r1, sl
 800669a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800669e:	4651      	mov	r1, sl
 80066a0:	00ca      	lsls	r2, r1, #3
 80066a2:	4610      	mov	r0, r2
 80066a4:	4619      	mov	r1, r3
 80066a6:	4603      	mov	r3, r0
 80066a8:	4642      	mov	r2, r8
 80066aa:	189b      	adds	r3, r3, r2
 80066ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80066b0:	464b      	mov	r3, r9
 80066b2:	460a      	mov	r2, r1
 80066b4:	eb42 0303 	adc.w	r3, r2, r3
 80066b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80066bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066c0:	685b      	ldr	r3, [r3, #4]
 80066c2:	2200      	movs	r2, #0
 80066c4:	67bb      	str	r3, [r7, #120]	; 0x78
 80066c6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80066c8:	f04f 0200 	mov.w	r2, #0
 80066cc:	f04f 0300 	mov.w	r3, #0
 80066d0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80066d4:	4649      	mov	r1, r9
 80066d6:	008b      	lsls	r3, r1, #2
 80066d8:	4641      	mov	r1, r8
 80066da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80066de:	4641      	mov	r1, r8
 80066e0:	008a      	lsls	r2, r1, #2
 80066e2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80066e6:	f7fa fadf 	bl	8000ca8 <__aeabi_uldivmod>
 80066ea:	4602      	mov	r2, r0
 80066ec:	460b      	mov	r3, r1
 80066ee:	4b39      	ldr	r3, [pc, #228]	; (80067d4 <UART_SetConfig+0x4e4>)
 80066f0:	fba3 1302 	umull	r1, r3, r3, r2
 80066f4:	095b      	lsrs	r3, r3, #5
 80066f6:	2164      	movs	r1, #100	; 0x64
 80066f8:	fb01 f303 	mul.w	r3, r1, r3
 80066fc:	1ad3      	subs	r3, r2, r3
 80066fe:	011b      	lsls	r3, r3, #4
 8006700:	3332      	adds	r3, #50	; 0x32
 8006702:	4a34      	ldr	r2, [pc, #208]	; (80067d4 <UART_SetConfig+0x4e4>)
 8006704:	fba2 2303 	umull	r2, r3, r2, r3
 8006708:	095b      	lsrs	r3, r3, #5
 800670a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800670e:	441c      	add	r4, r3
 8006710:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006714:	2200      	movs	r2, #0
 8006716:	673b      	str	r3, [r7, #112]	; 0x70
 8006718:	677a      	str	r2, [r7, #116]	; 0x74
 800671a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800671e:	4642      	mov	r2, r8
 8006720:	464b      	mov	r3, r9
 8006722:	1891      	adds	r1, r2, r2
 8006724:	60b9      	str	r1, [r7, #8]
 8006726:	415b      	adcs	r3, r3
 8006728:	60fb      	str	r3, [r7, #12]
 800672a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800672e:	4641      	mov	r1, r8
 8006730:	1851      	adds	r1, r2, r1
 8006732:	6039      	str	r1, [r7, #0]
 8006734:	4649      	mov	r1, r9
 8006736:	414b      	adcs	r3, r1
 8006738:	607b      	str	r3, [r7, #4]
 800673a:	f04f 0200 	mov.w	r2, #0
 800673e:	f04f 0300 	mov.w	r3, #0
 8006742:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006746:	4659      	mov	r1, fp
 8006748:	00cb      	lsls	r3, r1, #3
 800674a:	4651      	mov	r1, sl
 800674c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006750:	4651      	mov	r1, sl
 8006752:	00ca      	lsls	r2, r1, #3
 8006754:	4610      	mov	r0, r2
 8006756:	4619      	mov	r1, r3
 8006758:	4603      	mov	r3, r0
 800675a:	4642      	mov	r2, r8
 800675c:	189b      	adds	r3, r3, r2
 800675e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006760:	464b      	mov	r3, r9
 8006762:	460a      	mov	r2, r1
 8006764:	eb42 0303 	adc.w	r3, r2, r3
 8006768:	66fb      	str	r3, [r7, #108]	; 0x6c
 800676a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800676e:	685b      	ldr	r3, [r3, #4]
 8006770:	2200      	movs	r2, #0
 8006772:	663b      	str	r3, [r7, #96]	; 0x60
 8006774:	667a      	str	r2, [r7, #100]	; 0x64
 8006776:	f04f 0200 	mov.w	r2, #0
 800677a:	f04f 0300 	mov.w	r3, #0
 800677e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006782:	4649      	mov	r1, r9
 8006784:	008b      	lsls	r3, r1, #2
 8006786:	4641      	mov	r1, r8
 8006788:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800678c:	4641      	mov	r1, r8
 800678e:	008a      	lsls	r2, r1, #2
 8006790:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006794:	f7fa fa88 	bl	8000ca8 <__aeabi_uldivmod>
 8006798:	4602      	mov	r2, r0
 800679a:	460b      	mov	r3, r1
 800679c:	4b0d      	ldr	r3, [pc, #52]	; (80067d4 <UART_SetConfig+0x4e4>)
 800679e:	fba3 1302 	umull	r1, r3, r3, r2
 80067a2:	095b      	lsrs	r3, r3, #5
 80067a4:	2164      	movs	r1, #100	; 0x64
 80067a6:	fb01 f303 	mul.w	r3, r1, r3
 80067aa:	1ad3      	subs	r3, r2, r3
 80067ac:	011b      	lsls	r3, r3, #4
 80067ae:	3332      	adds	r3, #50	; 0x32
 80067b0:	4a08      	ldr	r2, [pc, #32]	; (80067d4 <UART_SetConfig+0x4e4>)
 80067b2:	fba2 2303 	umull	r2, r3, r2, r3
 80067b6:	095b      	lsrs	r3, r3, #5
 80067b8:	f003 020f 	and.w	r2, r3, #15
 80067bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4422      	add	r2, r4
 80067c4:	609a      	str	r2, [r3, #8]
}
 80067c6:	bf00      	nop
 80067c8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80067cc:	46bd      	mov	sp, r7
 80067ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80067d2:	bf00      	nop
 80067d4:	51eb851f 	.word	0x51eb851f

080067d8 <__errno>:
 80067d8:	4b01      	ldr	r3, [pc, #4]	; (80067e0 <__errno+0x8>)
 80067da:	6818      	ldr	r0, [r3, #0]
 80067dc:	4770      	bx	lr
 80067de:	bf00      	nop
 80067e0:	20000070 	.word	0x20000070

080067e4 <__libc_init_array>:
 80067e4:	b570      	push	{r4, r5, r6, lr}
 80067e6:	4d0d      	ldr	r5, [pc, #52]	; (800681c <__libc_init_array+0x38>)
 80067e8:	4c0d      	ldr	r4, [pc, #52]	; (8006820 <__libc_init_array+0x3c>)
 80067ea:	1b64      	subs	r4, r4, r5
 80067ec:	10a4      	asrs	r4, r4, #2
 80067ee:	2600      	movs	r6, #0
 80067f0:	42a6      	cmp	r6, r4
 80067f2:	d109      	bne.n	8006808 <__libc_init_array+0x24>
 80067f4:	4d0b      	ldr	r5, [pc, #44]	; (8006824 <__libc_init_array+0x40>)
 80067f6:	4c0c      	ldr	r4, [pc, #48]	; (8006828 <__libc_init_array+0x44>)
 80067f8:	f004 fcaa 	bl	800b150 <_init>
 80067fc:	1b64      	subs	r4, r4, r5
 80067fe:	10a4      	asrs	r4, r4, #2
 8006800:	2600      	movs	r6, #0
 8006802:	42a6      	cmp	r6, r4
 8006804:	d105      	bne.n	8006812 <__libc_init_array+0x2e>
 8006806:	bd70      	pop	{r4, r5, r6, pc}
 8006808:	f855 3b04 	ldr.w	r3, [r5], #4
 800680c:	4798      	blx	r3
 800680e:	3601      	adds	r6, #1
 8006810:	e7ee      	b.n	80067f0 <__libc_init_array+0xc>
 8006812:	f855 3b04 	ldr.w	r3, [r5], #4
 8006816:	4798      	blx	r3
 8006818:	3601      	adds	r6, #1
 800681a:	e7f2      	b.n	8006802 <__libc_init_array+0x1e>
 800681c:	0800b64c 	.word	0x0800b64c
 8006820:	0800b64c 	.word	0x0800b64c
 8006824:	0800b64c 	.word	0x0800b64c
 8006828:	0800b650 	.word	0x0800b650

0800682c <memcpy>:
 800682c:	440a      	add	r2, r1
 800682e:	4291      	cmp	r1, r2
 8006830:	f100 33ff 	add.w	r3, r0, #4294967295
 8006834:	d100      	bne.n	8006838 <memcpy+0xc>
 8006836:	4770      	bx	lr
 8006838:	b510      	push	{r4, lr}
 800683a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800683e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006842:	4291      	cmp	r1, r2
 8006844:	d1f9      	bne.n	800683a <memcpy+0xe>
 8006846:	bd10      	pop	{r4, pc}

08006848 <memset>:
 8006848:	4402      	add	r2, r0
 800684a:	4603      	mov	r3, r0
 800684c:	4293      	cmp	r3, r2
 800684e:	d100      	bne.n	8006852 <memset+0xa>
 8006850:	4770      	bx	lr
 8006852:	f803 1b01 	strb.w	r1, [r3], #1
 8006856:	e7f9      	b.n	800684c <memset+0x4>

08006858 <__cvt>:
 8006858:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800685c:	ec55 4b10 	vmov	r4, r5, d0
 8006860:	2d00      	cmp	r5, #0
 8006862:	460e      	mov	r6, r1
 8006864:	4619      	mov	r1, r3
 8006866:	462b      	mov	r3, r5
 8006868:	bfbb      	ittet	lt
 800686a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800686e:	461d      	movlt	r5, r3
 8006870:	2300      	movge	r3, #0
 8006872:	232d      	movlt	r3, #45	; 0x2d
 8006874:	700b      	strb	r3, [r1, #0]
 8006876:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006878:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800687c:	4691      	mov	r9, r2
 800687e:	f023 0820 	bic.w	r8, r3, #32
 8006882:	bfbc      	itt	lt
 8006884:	4622      	movlt	r2, r4
 8006886:	4614      	movlt	r4, r2
 8006888:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800688c:	d005      	beq.n	800689a <__cvt+0x42>
 800688e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006892:	d100      	bne.n	8006896 <__cvt+0x3e>
 8006894:	3601      	adds	r6, #1
 8006896:	2102      	movs	r1, #2
 8006898:	e000      	b.n	800689c <__cvt+0x44>
 800689a:	2103      	movs	r1, #3
 800689c:	ab03      	add	r3, sp, #12
 800689e:	9301      	str	r3, [sp, #4]
 80068a0:	ab02      	add	r3, sp, #8
 80068a2:	9300      	str	r3, [sp, #0]
 80068a4:	ec45 4b10 	vmov	d0, r4, r5
 80068a8:	4653      	mov	r3, sl
 80068aa:	4632      	mov	r2, r6
 80068ac:	f001 fdc4 	bl	8008438 <_dtoa_r>
 80068b0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80068b4:	4607      	mov	r7, r0
 80068b6:	d102      	bne.n	80068be <__cvt+0x66>
 80068b8:	f019 0f01 	tst.w	r9, #1
 80068bc:	d022      	beq.n	8006904 <__cvt+0xac>
 80068be:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80068c2:	eb07 0906 	add.w	r9, r7, r6
 80068c6:	d110      	bne.n	80068ea <__cvt+0x92>
 80068c8:	783b      	ldrb	r3, [r7, #0]
 80068ca:	2b30      	cmp	r3, #48	; 0x30
 80068cc:	d10a      	bne.n	80068e4 <__cvt+0x8c>
 80068ce:	2200      	movs	r2, #0
 80068d0:	2300      	movs	r3, #0
 80068d2:	4620      	mov	r0, r4
 80068d4:	4629      	mov	r1, r5
 80068d6:	f7fa f907 	bl	8000ae8 <__aeabi_dcmpeq>
 80068da:	b918      	cbnz	r0, 80068e4 <__cvt+0x8c>
 80068dc:	f1c6 0601 	rsb	r6, r6, #1
 80068e0:	f8ca 6000 	str.w	r6, [sl]
 80068e4:	f8da 3000 	ldr.w	r3, [sl]
 80068e8:	4499      	add	r9, r3
 80068ea:	2200      	movs	r2, #0
 80068ec:	2300      	movs	r3, #0
 80068ee:	4620      	mov	r0, r4
 80068f0:	4629      	mov	r1, r5
 80068f2:	f7fa f8f9 	bl	8000ae8 <__aeabi_dcmpeq>
 80068f6:	b108      	cbz	r0, 80068fc <__cvt+0xa4>
 80068f8:	f8cd 900c 	str.w	r9, [sp, #12]
 80068fc:	2230      	movs	r2, #48	; 0x30
 80068fe:	9b03      	ldr	r3, [sp, #12]
 8006900:	454b      	cmp	r3, r9
 8006902:	d307      	bcc.n	8006914 <__cvt+0xbc>
 8006904:	9b03      	ldr	r3, [sp, #12]
 8006906:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006908:	1bdb      	subs	r3, r3, r7
 800690a:	4638      	mov	r0, r7
 800690c:	6013      	str	r3, [r2, #0]
 800690e:	b004      	add	sp, #16
 8006910:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006914:	1c59      	adds	r1, r3, #1
 8006916:	9103      	str	r1, [sp, #12]
 8006918:	701a      	strb	r2, [r3, #0]
 800691a:	e7f0      	b.n	80068fe <__cvt+0xa6>

0800691c <__exponent>:
 800691c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800691e:	4603      	mov	r3, r0
 8006920:	2900      	cmp	r1, #0
 8006922:	bfb8      	it	lt
 8006924:	4249      	neglt	r1, r1
 8006926:	f803 2b02 	strb.w	r2, [r3], #2
 800692a:	bfb4      	ite	lt
 800692c:	222d      	movlt	r2, #45	; 0x2d
 800692e:	222b      	movge	r2, #43	; 0x2b
 8006930:	2909      	cmp	r1, #9
 8006932:	7042      	strb	r2, [r0, #1]
 8006934:	dd2a      	ble.n	800698c <__exponent+0x70>
 8006936:	f10d 0407 	add.w	r4, sp, #7
 800693a:	46a4      	mov	ip, r4
 800693c:	270a      	movs	r7, #10
 800693e:	46a6      	mov	lr, r4
 8006940:	460a      	mov	r2, r1
 8006942:	fb91 f6f7 	sdiv	r6, r1, r7
 8006946:	fb07 1516 	mls	r5, r7, r6, r1
 800694a:	3530      	adds	r5, #48	; 0x30
 800694c:	2a63      	cmp	r2, #99	; 0x63
 800694e:	f104 34ff 	add.w	r4, r4, #4294967295
 8006952:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006956:	4631      	mov	r1, r6
 8006958:	dcf1      	bgt.n	800693e <__exponent+0x22>
 800695a:	3130      	adds	r1, #48	; 0x30
 800695c:	f1ae 0502 	sub.w	r5, lr, #2
 8006960:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006964:	1c44      	adds	r4, r0, #1
 8006966:	4629      	mov	r1, r5
 8006968:	4561      	cmp	r1, ip
 800696a:	d30a      	bcc.n	8006982 <__exponent+0x66>
 800696c:	f10d 0209 	add.w	r2, sp, #9
 8006970:	eba2 020e 	sub.w	r2, r2, lr
 8006974:	4565      	cmp	r5, ip
 8006976:	bf88      	it	hi
 8006978:	2200      	movhi	r2, #0
 800697a:	4413      	add	r3, r2
 800697c:	1a18      	subs	r0, r3, r0
 800697e:	b003      	add	sp, #12
 8006980:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006982:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006986:	f804 2f01 	strb.w	r2, [r4, #1]!
 800698a:	e7ed      	b.n	8006968 <__exponent+0x4c>
 800698c:	2330      	movs	r3, #48	; 0x30
 800698e:	3130      	adds	r1, #48	; 0x30
 8006990:	7083      	strb	r3, [r0, #2]
 8006992:	70c1      	strb	r1, [r0, #3]
 8006994:	1d03      	adds	r3, r0, #4
 8006996:	e7f1      	b.n	800697c <__exponent+0x60>

08006998 <_printf_float>:
 8006998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800699c:	ed2d 8b02 	vpush	{d8}
 80069a0:	b08d      	sub	sp, #52	; 0x34
 80069a2:	460c      	mov	r4, r1
 80069a4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80069a8:	4616      	mov	r6, r2
 80069aa:	461f      	mov	r7, r3
 80069ac:	4605      	mov	r5, r0
 80069ae:	f002 ff95 	bl	80098dc <_localeconv_r>
 80069b2:	f8d0 a000 	ldr.w	sl, [r0]
 80069b6:	4650      	mov	r0, sl
 80069b8:	f7f9 fc1a 	bl	80001f0 <strlen>
 80069bc:	2300      	movs	r3, #0
 80069be:	930a      	str	r3, [sp, #40]	; 0x28
 80069c0:	6823      	ldr	r3, [r4, #0]
 80069c2:	9305      	str	r3, [sp, #20]
 80069c4:	f8d8 3000 	ldr.w	r3, [r8]
 80069c8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80069cc:	3307      	adds	r3, #7
 80069ce:	f023 0307 	bic.w	r3, r3, #7
 80069d2:	f103 0208 	add.w	r2, r3, #8
 80069d6:	f8c8 2000 	str.w	r2, [r8]
 80069da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069de:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80069e2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80069e6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80069ea:	9307      	str	r3, [sp, #28]
 80069ec:	f8cd 8018 	str.w	r8, [sp, #24]
 80069f0:	ee08 0a10 	vmov	s16, r0
 80069f4:	4b9f      	ldr	r3, [pc, #636]	; (8006c74 <_printf_float+0x2dc>)
 80069f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80069fa:	f04f 32ff 	mov.w	r2, #4294967295
 80069fe:	f7fa f8a5 	bl	8000b4c <__aeabi_dcmpun>
 8006a02:	bb88      	cbnz	r0, 8006a68 <_printf_float+0xd0>
 8006a04:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006a08:	4b9a      	ldr	r3, [pc, #616]	; (8006c74 <_printf_float+0x2dc>)
 8006a0a:	f04f 32ff 	mov.w	r2, #4294967295
 8006a0e:	f7fa f87f 	bl	8000b10 <__aeabi_dcmple>
 8006a12:	bb48      	cbnz	r0, 8006a68 <_printf_float+0xd0>
 8006a14:	2200      	movs	r2, #0
 8006a16:	2300      	movs	r3, #0
 8006a18:	4640      	mov	r0, r8
 8006a1a:	4649      	mov	r1, r9
 8006a1c:	f7fa f86e 	bl	8000afc <__aeabi_dcmplt>
 8006a20:	b110      	cbz	r0, 8006a28 <_printf_float+0x90>
 8006a22:	232d      	movs	r3, #45	; 0x2d
 8006a24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a28:	4b93      	ldr	r3, [pc, #588]	; (8006c78 <_printf_float+0x2e0>)
 8006a2a:	4894      	ldr	r0, [pc, #592]	; (8006c7c <_printf_float+0x2e4>)
 8006a2c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006a30:	bf94      	ite	ls
 8006a32:	4698      	movls	r8, r3
 8006a34:	4680      	movhi	r8, r0
 8006a36:	2303      	movs	r3, #3
 8006a38:	6123      	str	r3, [r4, #16]
 8006a3a:	9b05      	ldr	r3, [sp, #20]
 8006a3c:	f023 0204 	bic.w	r2, r3, #4
 8006a40:	6022      	str	r2, [r4, #0]
 8006a42:	f04f 0900 	mov.w	r9, #0
 8006a46:	9700      	str	r7, [sp, #0]
 8006a48:	4633      	mov	r3, r6
 8006a4a:	aa0b      	add	r2, sp, #44	; 0x2c
 8006a4c:	4621      	mov	r1, r4
 8006a4e:	4628      	mov	r0, r5
 8006a50:	f000 f9d8 	bl	8006e04 <_printf_common>
 8006a54:	3001      	adds	r0, #1
 8006a56:	f040 8090 	bne.w	8006b7a <_printf_float+0x1e2>
 8006a5a:	f04f 30ff 	mov.w	r0, #4294967295
 8006a5e:	b00d      	add	sp, #52	; 0x34
 8006a60:	ecbd 8b02 	vpop	{d8}
 8006a64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a68:	4642      	mov	r2, r8
 8006a6a:	464b      	mov	r3, r9
 8006a6c:	4640      	mov	r0, r8
 8006a6e:	4649      	mov	r1, r9
 8006a70:	f7fa f86c 	bl	8000b4c <__aeabi_dcmpun>
 8006a74:	b140      	cbz	r0, 8006a88 <_printf_float+0xf0>
 8006a76:	464b      	mov	r3, r9
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	bfbc      	itt	lt
 8006a7c:	232d      	movlt	r3, #45	; 0x2d
 8006a7e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006a82:	487f      	ldr	r0, [pc, #508]	; (8006c80 <_printf_float+0x2e8>)
 8006a84:	4b7f      	ldr	r3, [pc, #508]	; (8006c84 <_printf_float+0x2ec>)
 8006a86:	e7d1      	b.n	8006a2c <_printf_float+0x94>
 8006a88:	6863      	ldr	r3, [r4, #4]
 8006a8a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006a8e:	9206      	str	r2, [sp, #24]
 8006a90:	1c5a      	adds	r2, r3, #1
 8006a92:	d13f      	bne.n	8006b14 <_printf_float+0x17c>
 8006a94:	2306      	movs	r3, #6
 8006a96:	6063      	str	r3, [r4, #4]
 8006a98:	9b05      	ldr	r3, [sp, #20]
 8006a9a:	6861      	ldr	r1, [r4, #4]
 8006a9c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	9303      	str	r3, [sp, #12]
 8006aa4:	ab0a      	add	r3, sp, #40	; 0x28
 8006aa6:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006aaa:	ab09      	add	r3, sp, #36	; 0x24
 8006aac:	ec49 8b10 	vmov	d0, r8, r9
 8006ab0:	9300      	str	r3, [sp, #0]
 8006ab2:	6022      	str	r2, [r4, #0]
 8006ab4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006ab8:	4628      	mov	r0, r5
 8006aba:	f7ff fecd 	bl	8006858 <__cvt>
 8006abe:	9b06      	ldr	r3, [sp, #24]
 8006ac0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006ac2:	2b47      	cmp	r3, #71	; 0x47
 8006ac4:	4680      	mov	r8, r0
 8006ac6:	d108      	bne.n	8006ada <_printf_float+0x142>
 8006ac8:	1cc8      	adds	r0, r1, #3
 8006aca:	db02      	blt.n	8006ad2 <_printf_float+0x13a>
 8006acc:	6863      	ldr	r3, [r4, #4]
 8006ace:	4299      	cmp	r1, r3
 8006ad0:	dd41      	ble.n	8006b56 <_printf_float+0x1be>
 8006ad2:	f1ab 0b02 	sub.w	fp, fp, #2
 8006ad6:	fa5f fb8b 	uxtb.w	fp, fp
 8006ada:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006ade:	d820      	bhi.n	8006b22 <_printf_float+0x18a>
 8006ae0:	3901      	subs	r1, #1
 8006ae2:	465a      	mov	r2, fp
 8006ae4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006ae8:	9109      	str	r1, [sp, #36]	; 0x24
 8006aea:	f7ff ff17 	bl	800691c <__exponent>
 8006aee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006af0:	1813      	adds	r3, r2, r0
 8006af2:	2a01      	cmp	r2, #1
 8006af4:	4681      	mov	r9, r0
 8006af6:	6123      	str	r3, [r4, #16]
 8006af8:	dc02      	bgt.n	8006b00 <_printf_float+0x168>
 8006afa:	6822      	ldr	r2, [r4, #0]
 8006afc:	07d2      	lsls	r2, r2, #31
 8006afe:	d501      	bpl.n	8006b04 <_printf_float+0x16c>
 8006b00:	3301      	adds	r3, #1
 8006b02:	6123      	str	r3, [r4, #16]
 8006b04:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d09c      	beq.n	8006a46 <_printf_float+0xae>
 8006b0c:	232d      	movs	r3, #45	; 0x2d
 8006b0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b12:	e798      	b.n	8006a46 <_printf_float+0xae>
 8006b14:	9a06      	ldr	r2, [sp, #24]
 8006b16:	2a47      	cmp	r2, #71	; 0x47
 8006b18:	d1be      	bne.n	8006a98 <_printf_float+0x100>
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d1bc      	bne.n	8006a98 <_printf_float+0x100>
 8006b1e:	2301      	movs	r3, #1
 8006b20:	e7b9      	b.n	8006a96 <_printf_float+0xfe>
 8006b22:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006b26:	d118      	bne.n	8006b5a <_printf_float+0x1c2>
 8006b28:	2900      	cmp	r1, #0
 8006b2a:	6863      	ldr	r3, [r4, #4]
 8006b2c:	dd0b      	ble.n	8006b46 <_printf_float+0x1ae>
 8006b2e:	6121      	str	r1, [r4, #16]
 8006b30:	b913      	cbnz	r3, 8006b38 <_printf_float+0x1a0>
 8006b32:	6822      	ldr	r2, [r4, #0]
 8006b34:	07d0      	lsls	r0, r2, #31
 8006b36:	d502      	bpl.n	8006b3e <_printf_float+0x1a6>
 8006b38:	3301      	adds	r3, #1
 8006b3a:	440b      	add	r3, r1
 8006b3c:	6123      	str	r3, [r4, #16]
 8006b3e:	65a1      	str	r1, [r4, #88]	; 0x58
 8006b40:	f04f 0900 	mov.w	r9, #0
 8006b44:	e7de      	b.n	8006b04 <_printf_float+0x16c>
 8006b46:	b913      	cbnz	r3, 8006b4e <_printf_float+0x1b6>
 8006b48:	6822      	ldr	r2, [r4, #0]
 8006b4a:	07d2      	lsls	r2, r2, #31
 8006b4c:	d501      	bpl.n	8006b52 <_printf_float+0x1ba>
 8006b4e:	3302      	adds	r3, #2
 8006b50:	e7f4      	b.n	8006b3c <_printf_float+0x1a4>
 8006b52:	2301      	movs	r3, #1
 8006b54:	e7f2      	b.n	8006b3c <_printf_float+0x1a4>
 8006b56:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006b5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b5c:	4299      	cmp	r1, r3
 8006b5e:	db05      	blt.n	8006b6c <_printf_float+0x1d4>
 8006b60:	6823      	ldr	r3, [r4, #0]
 8006b62:	6121      	str	r1, [r4, #16]
 8006b64:	07d8      	lsls	r0, r3, #31
 8006b66:	d5ea      	bpl.n	8006b3e <_printf_float+0x1a6>
 8006b68:	1c4b      	adds	r3, r1, #1
 8006b6a:	e7e7      	b.n	8006b3c <_printf_float+0x1a4>
 8006b6c:	2900      	cmp	r1, #0
 8006b6e:	bfd4      	ite	le
 8006b70:	f1c1 0202 	rsble	r2, r1, #2
 8006b74:	2201      	movgt	r2, #1
 8006b76:	4413      	add	r3, r2
 8006b78:	e7e0      	b.n	8006b3c <_printf_float+0x1a4>
 8006b7a:	6823      	ldr	r3, [r4, #0]
 8006b7c:	055a      	lsls	r2, r3, #21
 8006b7e:	d407      	bmi.n	8006b90 <_printf_float+0x1f8>
 8006b80:	6923      	ldr	r3, [r4, #16]
 8006b82:	4642      	mov	r2, r8
 8006b84:	4631      	mov	r1, r6
 8006b86:	4628      	mov	r0, r5
 8006b88:	47b8      	blx	r7
 8006b8a:	3001      	adds	r0, #1
 8006b8c:	d12c      	bne.n	8006be8 <_printf_float+0x250>
 8006b8e:	e764      	b.n	8006a5a <_printf_float+0xc2>
 8006b90:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006b94:	f240 80e0 	bls.w	8006d58 <_printf_float+0x3c0>
 8006b98:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	f7f9 ffa2 	bl	8000ae8 <__aeabi_dcmpeq>
 8006ba4:	2800      	cmp	r0, #0
 8006ba6:	d034      	beq.n	8006c12 <_printf_float+0x27a>
 8006ba8:	4a37      	ldr	r2, [pc, #220]	; (8006c88 <_printf_float+0x2f0>)
 8006baa:	2301      	movs	r3, #1
 8006bac:	4631      	mov	r1, r6
 8006bae:	4628      	mov	r0, r5
 8006bb0:	47b8      	blx	r7
 8006bb2:	3001      	adds	r0, #1
 8006bb4:	f43f af51 	beq.w	8006a5a <_printf_float+0xc2>
 8006bb8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006bbc:	429a      	cmp	r2, r3
 8006bbe:	db02      	blt.n	8006bc6 <_printf_float+0x22e>
 8006bc0:	6823      	ldr	r3, [r4, #0]
 8006bc2:	07d8      	lsls	r0, r3, #31
 8006bc4:	d510      	bpl.n	8006be8 <_printf_float+0x250>
 8006bc6:	ee18 3a10 	vmov	r3, s16
 8006bca:	4652      	mov	r2, sl
 8006bcc:	4631      	mov	r1, r6
 8006bce:	4628      	mov	r0, r5
 8006bd0:	47b8      	blx	r7
 8006bd2:	3001      	adds	r0, #1
 8006bd4:	f43f af41 	beq.w	8006a5a <_printf_float+0xc2>
 8006bd8:	f04f 0800 	mov.w	r8, #0
 8006bdc:	f104 091a 	add.w	r9, r4, #26
 8006be0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006be2:	3b01      	subs	r3, #1
 8006be4:	4543      	cmp	r3, r8
 8006be6:	dc09      	bgt.n	8006bfc <_printf_float+0x264>
 8006be8:	6823      	ldr	r3, [r4, #0]
 8006bea:	079b      	lsls	r3, r3, #30
 8006bec:	f100 8105 	bmi.w	8006dfa <_printf_float+0x462>
 8006bf0:	68e0      	ldr	r0, [r4, #12]
 8006bf2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006bf4:	4298      	cmp	r0, r3
 8006bf6:	bfb8      	it	lt
 8006bf8:	4618      	movlt	r0, r3
 8006bfa:	e730      	b.n	8006a5e <_printf_float+0xc6>
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	464a      	mov	r2, r9
 8006c00:	4631      	mov	r1, r6
 8006c02:	4628      	mov	r0, r5
 8006c04:	47b8      	blx	r7
 8006c06:	3001      	adds	r0, #1
 8006c08:	f43f af27 	beq.w	8006a5a <_printf_float+0xc2>
 8006c0c:	f108 0801 	add.w	r8, r8, #1
 8006c10:	e7e6      	b.n	8006be0 <_printf_float+0x248>
 8006c12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	dc39      	bgt.n	8006c8c <_printf_float+0x2f4>
 8006c18:	4a1b      	ldr	r2, [pc, #108]	; (8006c88 <_printf_float+0x2f0>)
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	4631      	mov	r1, r6
 8006c1e:	4628      	mov	r0, r5
 8006c20:	47b8      	blx	r7
 8006c22:	3001      	adds	r0, #1
 8006c24:	f43f af19 	beq.w	8006a5a <_printf_float+0xc2>
 8006c28:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	d102      	bne.n	8006c36 <_printf_float+0x29e>
 8006c30:	6823      	ldr	r3, [r4, #0]
 8006c32:	07d9      	lsls	r1, r3, #31
 8006c34:	d5d8      	bpl.n	8006be8 <_printf_float+0x250>
 8006c36:	ee18 3a10 	vmov	r3, s16
 8006c3a:	4652      	mov	r2, sl
 8006c3c:	4631      	mov	r1, r6
 8006c3e:	4628      	mov	r0, r5
 8006c40:	47b8      	blx	r7
 8006c42:	3001      	adds	r0, #1
 8006c44:	f43f af09 	beq.w	8006a5a <_printf_float+0xc2>
 8006c48:	f04f 0900 	mov.w	r9, #0
 8006c4c:	f104 0a1a 	add.w	sl, r4, #26
 8006c50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c52:	425b      	negs	r3, r3
 8006c54:	454b      	cmp	r3, r9
 8006c56:	dc01      	bgt.n	8006c5c <_printf_float+0x2c4>
 8006c58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c5a:	e792      	b.n	8006b82 <_printf_float+0x1ea>
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	4652      	mov	r2, sl
 8006c60:	4631      	mov	r1, r6
 8006c62:	4628      	mov	r0, r5
 8006c64:	47b8      	blx	r7
 8006c66:	3001      	adds	r0, #1
 8006c68:	f43f aef7 	beq.w	8006a5a <_printf_float+0xc2>
 8006c6c:	f109 0901 	add.w	r9, r9, #1
 8006c70:	e7ee      	b.n	8006c50 <_printf_float+0x2b8>
 8006c72:	bf00      	nop
 8006c74:	7fefffff 	.word	0x7fefffff
 8006c78:	0800b198 	.word	0x0800b198
 8006c7c:	0800b19c 	.word	0x0800b19c
 8006c80:	0800b1a4 	.word	0x0800b1a4
 8006c84:	0800b1a0 	.word	0x0800b1a0
 8006c88:	0800b1a8 	.word	0x0800b1a8
 8006c8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006c8e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006c90:	429a      	cmp	r2, r3
 8006c92:	bfa8      	it	ge
 8006c94:	461a      	movge	r2, r3
 8006c96:	2a00      	cmp	r2, #0
 8006c98:	4691      	mov	r9, r2
 8006c9a:	dc37      	bgt.n	8006d0c <_printf_float+0x374>
 8006c9c:	f04f 0b00 	mov.w	fp, #0
 8006ca0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006ca4:	f104 021a 	add.w	r2, r4, #26
 8006ca8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006caa:	9305      	str	r3, [sp, #20]
 8006cac:	eba3 0309 	sub.w	r3, r3, r9
 8006cb0:	455b      	cmp	r3, fp
 8006cb2:	dc33      	bgt.n	8006d1c <_printf_float+0x384>
 8006cb4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006cb8:	429a      	cmp	r2, r3
 8006cba:	db3b      	blt.n	8006d34 <_printf_float+0x39c>
 8006cbc:	6823      	ldr	r3, [r4, #0]
 8006cbe:	07da      	lsls	r2, r3, #31
 8006cc0:	d438      	bmi.n	8006d34 <_printf_float+0x39c>
 8006cc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006cc4:	9a05      	ldr	r2, [sp, #20]
 8006cc6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006cc8:	1a9a      	subs	r2, r3, r2
 8006cca:	eba3 0901 	sub.w	r9, r3, r1
 8006cce:	4591      	cmp	r9, r2
 8006cd0:	bfa8      	it	ge
 8006cd2:	4691      	movge	r9, r2
 8006cd4:	f1b9 0f00 	cmp.w	r9, #0
 8006cd8:	dc35      	bgt.n	8006d46 <_printf_float+0x3ae>
 8006cda:	f04f 0800 	mov.w	r8, #0
 8006cde:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006ce2:	f104 0a1a 	add.w	sl, r4, #26
 8006ce6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006cea:	1a9b      	subs	r3, r3, r2
 8006cec:	eba3 0309 	sub.w	r3, r3, r9
 8006cf0:	4543      	cmp	r3, r8
 8006cf2:	f77f af79 	ble.w	8006be8 <_printf_float+0x250>
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	4652      	mov	r2, sl
 8006cfa:	4631      	mov	r1, r6
 8006cfc:	4628      	mov	r0, r5
 8006cfe:	47b8      	blx	r7
 8006d00:	3001      	adds	r0, #1
 8006d02:	f43f aeaa 	beq.w	8006a5a <_printf_float+0xc2>
 8006d06:	f108 0801 	add.w	r8, r8, #1
 8006d0a:	e7ec      	b.n	8006ce6 <_printf_float+0x34e>
 8006d0c:	4613      	mov	r3, r2
 8006d0e:	4631      	mov	r1, r6
 8006d10:	4642      	mov	r2, r8
 8006d12:	4628      	mov	r0, r5
 8006d14:	47b8      	blx	r7
 8006d16:	3001      	adds	r0, #1
 8006d18:	d1c0      	bne.n	8006c9c <_printf_float+0x304>
 8006d1a:	e69e      	b.n	8006a5a <_printf_float+0xc2>
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	4631      	mov	r1, r6
 8006d20:	4628      	mov	r0, r5
 8006d22:	9205      	str	r2, [sp, #20]
 8006d24:	47b8      	blx	r7
 8006d26:	3001      	adds	r0, #1
 8006d28:	f43f ae97 	beq.w	8006a5a <_printf_float+0xc2>
 8006d2c:	9a05      	ldr	r2, [sp, #20]
 8006d2e:	f10b 0b01 	add.w	fp, fp, #1
 8006d32:	e7b9      	b.n	8006ca8 <_printf_float+0x310>
 8006d34:	ee18 3a10 	vmov	r3, s16
 8006d38:	4652      	mov	r2, sl
 8006d3a:	4631      	mov	r1, r6
 8006d3c:	4628      	mov	r0, r5
 8006d3e:	47b8      	blx	r7
 8006d40:	3001      	adds	r0, #1
 8006d42:	d1be      	bne.n	8006cc2 <_printf_float+0x32a>
 8006d44:	e689      	b.n	8006a5a <_printf_float+0xc2>
 8006d46:	9a05      	ldr	r2, [sp, #20]
 8006d48:	464b      	mov	r3, r9
 8006d4a:	4442      	add	r2, r8
 8006d4c:	4631      	mov	r1, r6
 8006d4e:	4628      	mov	r0, r5
 8006d50:	47b8      	blx	r7
 8006d52:	3001      	adds	r0, #1
 8006d54:	d1c1      	bne.n	8006cda <_printf_float+0x342>
 8006d56:	e680      	b.n	8006a5a <_printf_float+0xc2>
 8006d58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006d5a:	2a01      	cmp	r2, #1
 8006d5c:	dc01      	bgt.n	8006d62 <_printf_float+0x3ca>
 8006d5e:	07db      	lsls	r3, r3, #31
 8006d60:	d538      	bpl.n	8006dd4 <_printf_float+0x43c>
 8006d62:	2301      	movs	r3, #1
 8006d64:	4642      	mov	r2, r8
 8006d66:	4631      	mov	r1, r6
 8006d68:	4628      	mov	r0, r5
 8006d6a:	47b8      	blx	r7
 8006d6c:	3001      	adds	r0, #1
 8006d6e:	f43f ae74 	beq.w	8006a5a <_printf_float+0xc2>
 8006d72:	ee18 3a10 	vmov	r3, s16
 8006d76:	4652      	mov	r2, sl
 8006d78:	4631      	mov	r1, r6
 8006d7a:	4628      	mov	r0, r5
 8006d7c:	47b8      	blx	r7
 8006d7e:	3001      	adds	r0, #1
 8006d80:	f43f ae6b 	beq.w	8006a5a <_printf_float+0xc2>
 8006d84:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006d88:	2200      	movs	r2, #0
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	f7f9 feac 	bl	8000ae8 <__aeabi_dcmpeq>
 8006d90:	b9d8      	cbnz	r0, 8006dca <_printf_float+0x432>
 8006d92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d94:	f108 0201 	add.w	r2, r8, #1
 8006d98:	3b01      	subs	r3, #1
 8006d9a:	4631      	mov	r1, r6
 8006d9c:	4628      	mov	r0, r5
 8006d9e:	47b8      	blx	r7
 8006da0:	3001      	adds	r0, #1
 8006da2:	d10e      	bne.n	8006dc2 <_printf_float+0x42a>
 8006da4:	e659      	b.n	8006a5a <_printf_float+0xc2>
 8006da6:	2301      	movs	r3, #1
 8006da8:	4652      	mov	r2, sl
 8006daa:	4631      	mov	r1, r6
 8006dac:	4628      	mov	r0, r5
 8006dae:	47b8      	blx	r7
 8006db0:	3001      	adds	r0, #1
 8006db2:	f43f ae52 	beq.w	8006a5a <_printf_float+0xc2>
 8006db6:	f108 0801 	add.w	r8, r8, #1
 8006dba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006dbc:	3b01      	subs	r3, #1
 8006dbe:	4543      	cmp	r3, r8
 8006dc0:	dcf1      	bgt.n	8006da6 <_printf_float+0x40e>
 8006dc2:	464b      	mov	r3, r9
 8006dc4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006dc8:	e6dc      	b.n	8006b84 <_printf_float+0x1ec>
 8006dca:	f04f 0800 	mov.w	r8, #0
 8006dce:	f104 0a1a 	add.w	sl, r4, #26
 8006dd2:	e7f2      	b.n	8006dba <_printf_float+0x422>
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	4642      	mov	r2, r8
 8006dd8:	e7df      	b.n	8006d9a <_printf_float+0x402>
 8006dda:	2301      	movs	r3, #1
 8006ddc:	464a      	mov	r2, r9
 8006dde:	4631      	mov	r1, r6
 8006de0:	4628      	mov	r0, r5
 8006de2:	47b8      	blx	r7
 8006de4:	3001      	adds	r0, #1
 8006de6:	f43f ae38 	beq.w	8006a5a <_printf_float+0xc2>
 8006dea:	f108 0801 	add.w	r8, r8, #1
 8006dee:	68e3      	ldr	r3, [r4, #12]
 8006df0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006df2:	1a5b      	subs	r3, r3, r1
 8006df4:	4543      	cmp	r3, r8
 8006df6:	dcf0      	bgt.n	8006dda <_printf_float+0x442>
 8006df8:	e6fa      	b.n	8006bf0 <_printf_float+0x258>
 8006dfa:	f04f 0800 	mov.w	r8, #0
 8006dfe:	f104 0919 	add.w	r9, r4, #25
 8006e02:	e7f4      	b.n	8006dee <_printf_float+0x456>

08006e04 <_printf_common>:
 8006e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e08:	4616      	mov	r6, r2
 8006e0a:	4699      	mov	r9, r3
 8006e0c:	688a      	ldr	r2, [r1, #8]
 8006e0e:	690b      	ldr	r3, [r1, #16]
 8006e10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006e14:	4293      	cmp	r3, r2
 8006e16:	bfb8      	it	lt
 8006e18:	4613      	movlt	r3, r2
 8006e1a:	6033      	str	r3, [r6, #0]
 8006e1c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006e20:	4607      	mov	r7, r0
 8006e22:	460c      	mov	r4, r1
 8006e24:	b10a      	cbz	r2, 8006e2a <_printf_common+0x26>
 8006e26:	3301      	adds	r3, #1
 8006e28:	6033      	str	r3, [r6, #0]
 8006e2a:	6823      	ldr	r3, [r4, #0]
 8006e2c:	0699      	lsls	r1, r3, #26
 8006e2e:	bf42      	ittt	mi
 8006e30:	6833      	ldrmi	r3, [r6, #0]
 8006e32:	3302      	addmi	r3, #2
 8006e34:	6033      	strmi	r3, [r6, #0]
 8006e36:	6825      	ldr	r5, [r4, #0]
 8006e38:	f015 0506 	ands.w	r5, r5, #6
 8006e3c:	d106      	bne.n	8006e4c <_printf_common+0x48>
 8006e3e:	f104 0a19 	add.w	sl, r4, #25
 8006e42:	68e3      	ldr	r3, [r4, #12]
 8006e44:	6832      	ldr	r2, [r6, #0]
 8006e46:	1a9b      	subs	r3, r3, r2
 8006e48:	42ab      	cmp	r3, r5
 8006e4a:	dc26      	bgt.n	8006e9a <_printf_common+0x96>
 8006e4c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006e50:	1e13      	subs	r3, r2, #0
 8006e52:	6822      	ldr	r2, [r4, #0]
 8006e54:	bf18      	it	ne
 8006e56:	2301      	movne	r3, #1
 8006e58:	0692      	lsls	r2, r2, #26
 8006e5a:	d42b      	bmi.n	8006eb4 <_printf_common+0xb0>
 8006e5c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006e60:	4649      	mov	r1, r9
 8006e62:	4638      	mov	r0, r7
 8006e64:	47c0      	blx	r8
 8006e66:	3001      	adds	r0, #1
 8006e68:	d01e      	beq.n	8006ea8 <_printf_common+0xa4>
 8006e6a:	6823      	ldr	r3, [r4, #0]
 8006e6c:	68e5      	ldr	r5, [r4, #12]
 8006e6e:	6832      	ldr	r2, [r6, #0]
 8006e70:	f003 0306 	and.w	r3, r3, #6
 8006e74:	2b04      	cmp	r3, #4
 8006e76:	bf08      	it	eq
 8006e78:	1aad      	subeq	r5, r5, r2
 8006e7a:	68a3      	ldr	r3, [r4, #8]
 8006e7c:	6922      	ldr	r2, [r4, #16]
 8006e7e:	bf0c      	ite	eq
 8006e80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006e84:	2500      	movne	r5, #0
 8006e86:	4293      	cmp	r3, r2
 8006e88:	bfc4      	itt	gt
 8006e8a:	1a9b      	subgt	r3, r3, r2
 8006e8c:	18ed      	addgt	r5, r5, r3
 8006e8e:	2600      	movs	r6, #0
 8006e90:	341a      	adds	r4, #26
 8006e92:	42b5      	cmp	r5, r6
 8006e94:	d11a      	bne.n	8006ecc <_printf_common+0xc8>
 8006e96:	2000      	movs	r0, #0
 8006e98:	e008      	b.n	8006eac <_printf_common+0xa8>
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	4652      	mov	r2, sl
 8006e9e:	4649      	mov	r1, r9
 8006ea0:	4638      	mov	r0, r7
 8006ea2:	47c0      	blx	r8
 8006ea4:	3001      	adds	r0, #1
 8006ea6:	d103      	bne.n	8006eb0 <_printf_common+0xac>
 8006ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8006eac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006eb0:	3501      	adds	r5, #1
 8006eb2:	e7c6      	b.n	8006e42 <_printf_common+0x3e>
 8006eb4:	18e1      	adds	r1, r4, r3
 8006eb6:	1c5a      	adds	r2, r3, #1
 8006eb8:	2030      	movs	r0, #48	; 0x30
 8006eba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006ebe:	4422      	add	r2, r4
 8006ec0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006ec4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006ec8:	3302      	adds	r3, #2
 8006eca:	e7c7      	b.n	8006e5c <_printf_common+0x58>
 8006ecc:	2301      	movs	r3, #1
 8006ece:	4622      	mov	r2, r4
 8006ed0:	4649      	mov	r1, r9
 8006ed2:	4638      	mov	r0, r7
 8006ed4:	47c0      	blx	r8
 8006ed6:	3001      	adds	r0, #1
 8006ed8:	d0e6      	beq.n	8006ea8 <_printf_common+0xa4>
 8006eda:	3601      	adds	r6, #1
 8006edc:	e7d9      	b.n	8006e92 <_printf_common+0x8e>
	...

08006ee0 <_printf_i>:
 8006ee0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ee4:	7e0f      	ldrb	r7, [r1, #24]
 8006ee6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006ee8:	2f78      	cmp	r7, #120	; 0x78
 8006eea:	4691      	mov	r9, r2
 8006eec:	4680      	mov	r8, r0
 8006eee:	460c      	mov	r4, r1
 8006ef0:	469a      	mov	sl, r3
 8006ef2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006ef6:	d807      	bhi.n	8006f08 <_printf_i+0x28>
 8006ef8:	2f62      	cmp	r7, #98	; 0x62
 8006efa:	d80a      	bhi.n	8006f12 <_printf_i+0x32>
 8006efc:	2f00      	cmp	r7, #0
 8006efe:	f000 80d8 	beq.w	80070b2 <_printf_i+0x1d2>
 8006f02:	2f58      	cmp	r7, #88	; 0x58
 8006f04:	f000 80a3 	beq.w	800704e <_printf_i+0x16e>
 8006f08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006f0c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006f10:	e03a      	b.n	8006f88 <_printf_i+0xa8>
 8006f12:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006f16:	2b15      	cmp	r3, #21
 8006f18:	d8f6      	bhi.n	8006f08 <_printf_i+0x28>
 8006f1a:	a101      	add	r1, pc, #4	; (adr r1, 8006f20 <_printf_i+0x40>)
 8006f1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006f20:	08006f79 	.word	0x08006f79
 8006f24:	08006f8d 	.word	0x08006f8d
 8006f28:	08006f09 	.word	0x08006f09
 8006f2c:	08006f09 	.word	0x08006f09
 8006f30:	08006f09 	.word	0x08006f09
 8006f34:	08006f09 	.word	0x08006f09
 8006f38:	08006f8d 	.word	0x08006f8d
 8006f3c:	08006f09 	.word	0x08006f09
 8006f40:	08006f09 	.word	0x08006f09
 8006f44:	08006f09 	.word	0x08006f09
 8006f48:	08006f09 	.word	0x08006f09
 8006f4c:	08007099 	.word	0x08007099
 8006f50:	08006fbd 	.word	0x08006fbd
 8006f54:	0800707b 	.word	0x0800707b
 8006f58:	08006f09 	.word	0x08006f09
 8006f5c:	08006f09 	.word	0x08006f09
 8006f60:	080070bb 	.word	0x080070bb
 8006f64:	08006f09 	.word	0x08006f09
 8006f68:	08006fbd 	.word	0x08006fbd
 8006f6c:	08006f09 	.word	0x08006f09
 8006f70:	08006f09 	.word	0x08006f09
 8006f74:	08007083 	.word	0x08007083
 8006f78:	682b      	ldr	r3, [r5, #0]
 8006f7a:	1d1a      	adds	r2, r3, #4
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	602a      	str	r2, [r5, #0]
 8006f80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006f84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006f88:	2301      	movs	r3, #1
 8006f8a:	e0a3      	b.n	80070d4 <_printf_i+0x1f4>
 8006f8c:	6820      	ldr	r0, [r4, #0]
 8006f8e:	6829      	ldr	r1, [r5, #0]
 8006f90:	0606      	lsls	r6, r0, #24
 8006f92:	f101 0304 	add.w	r3, r1, #4
 8006f96:	d50a      	bpl.n	8006fae <_printf_i+0xce>
 8006f98:	680e      	ldr	r6, [r1, #0]
 8006f9a:	602b      	str	r3, [r5, #0]
 8006f9c:	2e00      	cmp	r6, #0
 8006f9e:	da03      	bge.n	8006fa8 <_printf_i+0xc8>
 8006fa0:	232d      	movs	r3, #45	; 0x2d
 8006fa2:	4276      	negs	r6, r6
 8006fa4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006fa8:	485e      	ldr	r0, [pc, #376]	; (8007124 <_printf_i+0x244>)
 8006faa:	230a      	movs	r3, #10
 8006fac:	e019      	b.n	8006fe2 <_printf_i+0x102>
 8006fae:	680e      	ldr	r6, [r1, #0]
 8006fb0:	602b      	str	r3, [r5, #0]
 8006fb2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006fb6:	bf18      	it	ne
 8006fb8:	b236      	sxthne	r6, r6
 8006fba:	e7ef      	b.n	8006f9c <_printf_i+0xbc>
 8006fbc:	682b      	ldr	r3, [r5, #0]
 8006fbe:	6820      	ldr	r0, [r4, #0]
 8006fc0:	1d19      	adds	r1, r3, #4
 8006fc2:	6029      	str	r1, [r5, #0]
 8006fc4:	0601      	lsls	r1, r0, #24
 8006fc6:	d501      	bpl.n	8006fcc <_printf_i+0xec>
 8006fc8:	681e      	ldr	r6, [r3, #0]
 8006fca:	e002      	b.n	8006fd2 <_printf_i+0xf2>
 8006fcc:	0646      	lsls	r6, r0, #25
 8006fce:	d5fb      	bpl.n	8006fc8 <_printf_i+0xe8>
 8006fd0:	881e      	ldrh	r6, [r3, #0]
 8006fd2:	4854      	ldr	r0, [pc, #336]	; (8007124 <_printf_i+0x244>)
 8006fd4:	2f6f      	cmp	r7, #111	; 0x6f
 8006fd6:	bf0c      	ite	eq
 8006fd8:	2308      	moveq	r3, #8
 8006fda:	230a      	movne	r3, #10
 8006fdc:	2100      	movs	r1, #0
 8006fde:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006fe2:	6865      	ldr	r5, [r4, #4]
 8006fe4:	60a5      	str	r5, [r4, #8]
 8006fe6:	2d00      	cmp	r5, #0
 8006fe8:	bfa2      	ittt	ge
 8006fea:	6821      	ldrge	r1, [r4, #0]
 8006fec:	f021 0104 	bicge.w	r1, r1, #4
 8006ff0:	6021      	strge	r1, [r4, #0]
 8006ff2:	b90e      	cbnz	r6, 8006ff8 <_printf_i+0x118>
 8006ff4:	2d00      	cmp	r5, #0
 8006ff6:	d04d      	beq.n	8007094 <_printf_i+0x1b4>
 8006ff8:	4615      	mov	r5, r2
 8006ffa:	fbb6 f1f3 	udiv	r1, r6, r3
 8006ffe:	fb03 6711 	mls	r7, r3, r1, r6
 8007002:	5dc7      	ldrb	r7, [r0, r7]
 8007004:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007008:	4637      	mov	r7, r6
 800700a:	42bb      	cmp	r3, r7
 800700c:	460e      	mov	r6, r1
 800700e:	d9f4      	bls.n	8006ffa <_printf_i+0x11a>
 8007010:	2b08      	cmp	r3, #8
 8007012:	d10b      	bne.n	800702c <_printf_i+0x14c>
 8007014:	6823      	ldr	r3, [r4, #0]
 8007016:	07de      	lsls	r6, r3, #31
 8007018:	d508      	bpl.n	800702c <_printf_i+0x14c>
 800701a:	6923      	ldr	r3, [r4, #16]
 800701c:	6861      	ldr	r1, [r4, #4]
 800701e:	4299      	cmp	r1, r3
 8007020:	bfde      	ittt	le
 8007022:	2330      	movle	r3, #48	; 0x30
 8007024:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007028:	f105 35ff 	addle.w	r5, r5, #4294967295
 800702c:	1b52      	subs	r2, r2, r5
 800702e:	6122      	str	r2, [r4, #16]
 8007030:	f8cd a000 	str.w	sl, [sp]
 8007034:	464b      	mov	r3, r9
 8007036:	aa03      	add	r2, sp, #12
 8007038:	4621      	mov	r1, r4
 800703a:	4640      	mov	r0, r8
 800703c:	f7ff fee2 	bl	8006e04 <_printf_common>
 8007040:	3001      	adds	r0, #1
 8007042:	d14c      	bne.n	80070de <_printf_i+0x1fe>
 8007044:	f04f 30ff 	mov.w	r0, #4294967295
 8007048:	b004      	add	sp, #16
 800704a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800704e:	4835      	ldr	r0, [pc, #212]	; (8007124 <_printf_i+0x244>)
 8007050:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007054:	6829      	ldr	r1, [r5, #0]
 8007056:	6823      	ldr	r3, [r4, #0]
 8007058:	f851 6b04 	ldr.w	r6, [r1], #4
 800705c:	6029      	str	r1, [r5, #0]
 800705e:	061d      	lsls	r5, r3, #24
 8007060:	d514      	bpl.n	800708c <_printf_i+0x1ac>
 8007062:	07df      	lsls	r7, r3, #31
 8007064:	bf44      	itt	mi
 8007066:	f043 0320 	orrmi.w	r3, r3, #32
 800706a:	6023      	strmi	r3, [r4, #0]
 800706c:	b91e      	cbnz	r6, 8007076 <_printf_i+0x196>
 800706e:	6823      	ldr	r3, [r4, #0]
 8007070:	f023 0320 	bic.w	r3, r3, #32
 8007074:	6023      	str	r3, [r4, #0]
 8007076:	2310      	movs	r3, #16
 8007078:	e7b0      	b.n	8006fdc <_printf_i+0xfc>
 800707a:	6823      	ldr	r3, [r4, #0]
 800707c:	f043 0320 	orr.w	r3, r3, #32
 8007080:	6023      	str	r3, [r4, #0]
 8007082:	2378      	movs	r3, #120	; 0x78
 8007084:	4828      	ldr	r0, [pc, #160]	; (8007128 <_printf_i+0x248>)
 8007086:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800708a:	e7e3      	b.n	8007054 <_printf_i+0x174>
 800708c:	0659      	lsls	r1, r3, #25
 800708e:	bf48      	it	mi
 8007090:	b2b6      	uxthmi	r6, r6
 8007092:	e7e6      	b.n	8007062 <_printf_i+0x182>
 8007094:	4615      	mov	r5, r2
 8007096:	e7bb      	b.n	8007010 <_printf_i+0x130>
 8007098:	682b      	ldr	r3, [r5, #0]
 800709a:	6826      	ldr	r6, [r4, #0]
 800709c:	6961      	ldr	r1, [r4, #20]
 800709e:	1d18      	adds	r0, r3, #4
 80070a0:	6028      	str	r0, [r5, #0]
 80070a2:	0635      	lsls	r5, r6, #24
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	d501      	bpl.n	80070ac <_printf_i+0x1cc>
 80070a8:	6019      	str	r1, [r3, #0]
 80070aa:	e002      	b.n	80070b2 <_printf_i+0x1d2>
 80070ac:	0670      	lsls	r0, r6, #25
 80070ae:	d5fb      	bpl.n	80070a8 <_printf_i+0x1c8>
 80070b0:	8019      	strh	r1, [r3, #0]
 80070b2:	2300      	movs	r3, #0
 80070b4:	6123      	str	r3, [r4, #16]
 80070b6:	4615      	mov	r5, r2
 80070b8:	e7ba      	b.n	8007030 <_printf_i+0x150>
 80070ba:	682b      	ldr	r3, [r5, #0]
 80070bc:	1d1a      	adds	r2, r3, #4
 80070be:	602a      	str	r2, [r5, #0]
 80070c0:	681d      	ldr	r5, [r3, #0]
 80070c2:	6862      	ldr	r2, [r4, #4]
 80070c4:	2100      	movs	r1, #0
 80070c6:	4628      	mov	r0, r5
 80070c8:	f7f9 f89a 	bl	8000200 <memchr>
 80070cc:	b108      	cbz	r0, 80070d2 <_printf_i+0x1f2>
 80070ce:	1b40      	subs	r0, r0, r5
 80070d0:	6060      	str	r0, [r4, #4]
 80070d2:	6863      	ldr	r3, [r4, #4]
 80070d4:	6123      	str	r3, [r4, #16]
 80070d6:	2300      	movs	r3, #0
 80070d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80070dc:	e7a8      	b.n	8007030 <_printf_i+0x150>
 80070de:	6923      	ldr	r3, [r4, #16]
 80070e0:	462a      	mov	r2, r5
 80070e2:	4649      	mov	r1, r9
 80070e4:	4640      	mov	r0, r8
 80070e6:	47d0      	blx	sl
 80070e8:	3001      	adds	r0, #1
 80070ea:	d0ab      	beq.n	8007044 <_printf_i+0x164>
 80070ec:	6823      	ldr	r3, [r4, #0]
 80070ee:	079b      	lsls	r3, r3, #30
 80070f0:	d413      	bmi.n	800711a <_printf_i+0x23a>
 80070f2:	68e0      	ldr	r0, [r4, #12]
 80070f4:	9b03      	ldr	r3, [sp, #12]
 80070f6:	4298      	cmp	r0, r3
 80070f8:	bfb8      	it	lt
 80070fa:	4618      	movlt	r0, r3
 80070fc:	e7a4      	b.n	8007048 <_printf_i+0x168>
 80070fe:	2301      	movs	r3, #1
 8007100:	4632      	mov	r2, r6
 8007102:	4649      	mov	r1, r9
 8007104:	4640      	mov	r0, r8
 8007106:	47d0      	blx	sl
 8007108:	3001      	adds	r0, #1
 800710a:	d09b      	beq.n	8007044 <_printf_i+0x164>
 800710c:	3501      	adds	r5, #1
 800710e:	68e3      	ldr	r3, [r4, #12]
 8007110:	9903      	ldr	r1, [sp, #12]
 8007112:	1a5b      	subs	r3, r3, r1
 8007114:	42ab      	cmp	r3, r5
 8007116:	dcf2      	bgt.n	80070fe <_printf_i+0x21e>
 8007118:	e7eb      	b.n	80070f2 <_printf_i+0x212>
 800711a:	2500      	movs	r5, #0
 800711c:	f104 0619 	add.w	r6, r4, #25
 8007120:	e7f5      	b.n	800710e <_printf_i+0x22e>
 8007122:	bf00      	nop
 8007124:	0800b1aa 	.word	0x0800b1aa
 8007128:	0800b1bb 	.word	0x0800b1bb

0800712c <_scanf_float>:
 800712c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007130:	b087      	sub	sp, #28
 8007132:	4617      	mov	r7, r2
 8007134:	9303      	str	r3, [sp, #12]
 8007136:	688b      	ldr	r3, [r1, #8]
 8007138:	1e5a      	subs	r2, r3, #1
 800713a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800713e:	bf83      	ittte	hi
 8007140:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007144:	195b      	addhi	r3, r3, r5
 8007146:	9302      	strhi	r3, [sp, #8]
 8007148:	2300      	movls	r3, #0
 800714a:	bf86      	itte	hi
 800714c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007150:	608b      	strhi	r3, [r1, #8]
 8007152:	9302      	strls	r3, [sp, #8]
 8007154:	680b      	ldr	r3, [r1, #0]
 8007156:	468b      	mov	fp, r1
 8007158:	2500      	movs	r5, #0
 800715a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800715e:	f84b 3b1c 	str.w	r3, [fp], #28
 8007162:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007166:	4680      	mov	r8, r0
 8007168:	460c      	mov	r4, r1
 800716a:	465e      	mov	r6, fp
 800716c:	46aa      	mov	sl, r5
 800716e:	46a9      	mov	r9, r5
 8007170:	9501      	str	r5, [sp, #4]
 8007172:	68a2      	ldr	r2, [r4, #8]
 8007174:	b152      	cbz	r2, 800718c <_scanf_float+0x60>
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	781b      	ldrb	r3, [r3, #0]
 800717a:	2b4e      	cmp	r3, #78	; 0x4e
 800717c:	d864      	bhi.n	8007248 <_scanf_float+0x11c>
 800717e:	2b40      	cmp	r3, #64	; 0x40
 8007180:	d83c      	bhi.n	80071fc <_scanf_float+0xd0>
 8007182:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8007186:	b2c8      	uxtb	r0, r1
 8007188:	280e      	cmp	r0, #14
 800718a:	d93a      	bls.n	8007202 <_scanf_float+0xd6>
 800718c:	f1b9 0f00 	cmp.w	r9, #0
 8007190:	d003      	beq.n	800719a <_scanf_float+0x6e>
 8007192:	6823      	ldr	r3, [r4, #0]
 8007194:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007198:	6023      	str	r3, [r4, #0]
 800719a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800719e:	f1ba 0f01 	cmp.w	sl, #1
 80071a2:	f200 8113 	bhi.w	80073cc <_scanf_float+0x2a0>
 80071a6:	455e      	cmp	r6, fp
 80071a8:	f200 8105 	bhi.w	80073b6 <_scanf_float+0x28a>
 80071ac:	2501      	movs	r5, #1
 80071ae:	4628      	mov	r0, r5
 80071b0:	b007      	add	sp, #28
 80071b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071b6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80071ba:	2a0d      	cmp	r2, #13
 80071bc:	d8e6      	bhi.n	800718c <_scanf_float+0x60>
 80071be:	a101      	add	r1, pc, #4	; (adr r1, 80071c4 <_scanf_float+0x98>)
 80071c0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80071c4:	08007303 	.word	0x08007303
 80071c8:	0800718d 	.word	0x0800718d
 80071cc:	0800718d 	.word	0x0800718d
 80071d0:	0800718d 	.word	0x0800718d
 80071d4:	08007363 	.word	0x08007363
 80071d8:	0800733b 	.word	0x0800733b
 80071dc:	0800718d 	.word	0x0800718d
 80071e0:	0800718d 	.word	0x0800718d
 80071e4:	08007311 	.word	0x08007311
 80071e8:	0800718d 	.word	0x0800718d
 80071ec:	0800718d 	.word	0x0800718d
 80071f0:	0800718d 	.word	0x0800718d
 80071f4:	0800718d 	.word	0x0800718d
 80071f8:	080072c9 	.word	0x080072c9
 80071fc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8007200:	e7db      	b.n	80071ba <_scanf_float+0x8e>
 8007202:	290e      	cmp	r1, #14
 8007204:	d8c2      	bhi.n	800718c <_scanf_float+0x60>
 8007206:	a001      	add	r0, pc, #4	; (adr r0, 800720c <_scanf_float+0xe0>)
 8007208:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800720c:	080072bb 	.word	0x080072bb
 8007210:	0800718d 	.word	0x0800718d
 8007214:	080072bb 	.word	0x080072bb
 8007218:	0800734f 	.word	0x0800734f
 800721c:	0800718d 	.word	0x0800718d
 8007220:	08007269 	.word	0x08007269
 8007224:	080072a5 	.word	0x080072a5
 8007228:	080072a5 	.word	0x080072a5
 800722c:	080072a5 	.word	0x080072a5
 8007230:	080072a5 	.word	0x080072a5
 8007234:	080072a5 	.word	0x080072a5
 8007238:	080072a5 	.word	0x080072a5
 800723c:	080072a5 	.word	0x080072a5
 8007240:	080072a5 	.word	0x080072a5
 8007244:	080072a5 	.word	0x080072a5
 8007248:	2b6e      	cmp	r3, #110	; 0x6e
 800724a:	d809      	bhi.n	8007260 <_scanf_float+0x134>
 800724c:	2b60      	cmp	r3, #96	; 0x60
 800724e:	d8b2      	bhi.n	80071b6 <_scanf_float+0x8a>
 8007250:	2b54      	cmp	r3, #84	; 0x54
 8007252:	d077      	beq.n	8007344 <_scanf_float+0x218>
 8007254:	2b59      	cmp	r3, #89	; 0x59
 8007256:	d199      	bne.n	800718c <_scanf_float+0x60>
 8007258:	2d07      	cmp	r5, #7
 800725a:	d197      	bne.n	800718c <_scanf_float+0x60>
 800725c:	2508      	movs	r5, #8
 800725e:	e029      	b.n	80072b4 <_scanf_float+0x188>
 8007260:	2b74      	cmp	r3, #116	; 0x74
 8007262:	d06f      	beq.n	8007344 <_scanf_float+0x218>
 8007264:	2b79      	cmp	r3, #121	; 0x79
 8007266:	e7f6      	b.n	8007256 <_scanf_float+0x12a>
 8007268:	6821      	ldr	r1, [r4, #0]
 800726a:	05c8      	lsls	r0, r1, #23
 800726c:	d51a      	bpl.n	80072a4 <_scanf_float+0x178>
 800726e:	9b02      	ldr	r3, [sp, #8]
 8007270:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007274:	6021      	str	r1, [r4, #0]
 8007276:	f109 0901 	add.w	r9, r9, #1
 800727a:	b11b      	cbz	r3, 8007284 <_scanf_float+0x158>
 800727c:	3b01      	subs	r3, #1
 800727e:	3201      	adds	r2, #1
 8007280:	9302      	str	r3, [sp, #8]
 8007282:	60a2      	str	r2, [r4, #8]
 8007284:	68a3      	ldr	r3, [r4, #8]
 8007286:	3b01      	subs	r3, #1
 8007288:	60a3      	str	r3, [r4, #8]
 800728a:	6923      	ldr	r3, [r4, #16]
 800728c:	3301      	adds	r3, #1
 800728e:	6123      	str	r3, [r4, #16]
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	3b01      	subs	r3, #1
 8007294:	2b00      	cmp	r3, #0
 8007296:	607b      	str	r3, [r7, #4]
 8007298:	f340 8084 	ble.w	80073a4 <_scanf_float+0x278>
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	3301      	adds	r3, #1
 80072a0:	603b      	str	r3, [r7, #0]
 80072a2:	e766      	b.n	8007172 <_scanf_float+0x46>
 80072a4:	eb1a 0f05 	cmn.w	sl, r5
 80072a8:	f47f af70 	bne.w	800718c <_scanf_float+0x60>
 80072ac:	6822      	ldr	r2, [r4, #0]
 80072ae:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80072b2:	6022      	str	r2, [r4, #0]
 80072b4:	f806 3b01 	strb.w	r3, [r6], #1
 80072b8:	e7e4      	b.n	8007284 <_scanf_float+0x158>
 80072ba:	6822      	ldr	r2, [r4, #0]
 80072bc:	0610      	lsls	r0, r2, #24
 80072be:	f57f af65 	bpl.w	800718c <_scanf_float+0x60>
 80072c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80072c6:	e7f4      	b.n	80072b2 <_scanf_float+0x186>
 80072c8:	f1ba 0f00 	cmp.w	sl, #0
 80072cc:	d10e      	bne.n	80072ec <_scanf_float+0x1c0>
 80072ce:	f1b9 0f00 	cmp.w	r9, #0
 80072d2:	d10e      	bne.n	80072f2 <_scanf_float+0x1c6>
 80072d4:	6822      	ldr	r2, [r4, #0]
 80072d6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80072da:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80072de:	d108      	bne.n	80072f2 <_scanf_float+0x1c6>
 80072e0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80072e4:	6022      	str	r2, [r4, #0]
 80072e6:	f04f 0a01 	mov.w	sl, #1
 80072ea:	e7e3      	b.n	80072b4 <_scanf_float+0x188>
 80072ec:	f1ba 0f02 	cmp.w	sl, #2
 80072f0:	d055      	beq.n	800739e <_scanf_float+0x272>
 80072f2:	2d01      	cmp	r5, #1
 80072f4:	d002      	beq.n	80072fc <_scanf_float+0x1d0>
 80072f6:	2d04      	cmp	r5, #4
 80072f8:	f47f af48 	bne.w	800718c <_scanf_float+0x60>
 80072fc:	3501      	adds	r5, #1
 80072fe:	b2ed      	uxtb	r5, r5
 8007300:	e7d8      	b.n	80072b4 <_scanf_float+0x188>
 8007302:	f1ba 0f01 	cmp.w	sl, #1
 8007306:	f47f af41 	bne.w	800718c <_scanf_float+0x60>
 800730a:	f04f 0a02 	mov.w	sl, #2
 800730e:	e7d1      	b.n	80072b4 <_scanf_float+0x188>
 8007310:	b97d      	cbnz	r5, 8007332 <_scanf_float+0x206>
 8007312:	f1b9 0f00 	cmp.w	r9, #0
 8007316:	f47f af3c 	bne.w	8007192 <_scanf_float+0x66>
 800731a:	6822      	ldr	r2, [r4, #0]
 800731c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007320:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007324:	f47f af39 	bne.w	800719a <_scanf_float+0x6e>
 8007328:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800732c:	6022      	str	r2, [r4, #0]
 800732e:	2501      	movs	r5, #1
 8007330:	e7c0      	b.n	80072b4 <_scanf_float+0x188>
 8007332:	2d03      	cmp	r5, #3
 8007334:	d0e2      	beq.n	80072fc <_scanf_float+0x1d0>
 8007336:	2d05      	cmp	r5, #5
 8007338:	e7de      	b.n	80072f8 <_scanf_float+0x1cc>
 800733a:	2d02      	cmp	r5, #2
 800733c:	f47f af26 	bne.w	800718c <_scanf_float+0x60>
 8007340:	2503      	movs	r5, #3
 8007342:	e7b7      	b.n	80072b4 <_scanf_float+0x188>
 8007344:	2d06      	cmp	r5, #6
 8007346:	f47f af21 	bne.w	800718c <_scanf_float+0x60>
 800734a:	2507      	movs	r5, #7
 800734c:	e7b2      	b.n	80072b4 <_scanf_float+0x188>
 800734e:	6822      	ldr	r2, [r4, #0]
 8007350:	0591      	lsls	r1, r2, #22
 8007352:	f57f af1b 	bpl.w	800718c <_scanf_float+0x60>
 8007356:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800735a:	6022      	str	r2, [r4, #0]
 800735c:	f8cd 9004 	str.w	r9, [sp, #4]
 8007360:	e7a8      	b.n	80072b4 <_scanf_float+0x188>
 8007362:	6822      	ldr	r2, [r4, #0]
 8007364:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8007368:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800736c:	d006      	beq.n	800737c <_scanf_float+0x250>
 800736e:	0550      	lsls	r0, r2, #21
 8007370:	f57f af0c 	bpl.w	800718c <_scanf_float+0x60>
 8007374:	f1b9 0f00 	cmp.w	r9, #0
 8007378:	f43f af0f 	beq.w	800719a <_scanf_float+0x6e>
 800737c:	0591      	lsls	r1, r2, #22
 800737e:	bf58      	it	pl
 8007380:	9901      	ldrpl	r1, [sp, #4]
 8007382:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007386:	bf58      	it	pl
 8007388:	eba9 0101 	subpl.w	r1, r9, r1
 800738c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8007390:	bf58      	it	pl
 8007392:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007396:	6022      	str	r2, [r4, #0]
 8007398:	f04f 0900 	mov.w	r9, #0
 800739c:	e78a      	b.n	80072b4 <_scanf_float+0x188>
 800739e:	f04f 0a03 	mov.w	sl, #3
 80073a2:	e787      	b.n	80072b4 <_scanf_float+0x188>
 80073a4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80073a8:	4639      	mov	r1, r7
 80073aa:	4640      	mov	r0, r8
 80073ac:	4798      	blx	r3
 80073ae:	2800      	cmp	r0, #0
 80073b0:	f43f aedf 	beq.w	8007172 <_scanf_float+0x46>
 80073b4:	e6ea      	b.n	800718c <_scanf_float+0x60>
 80073b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80073ba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80073be:	463a      	mov	r2, r7
 80073c0:	4640      	mov	r0, r8
 80073c2:	4798      	blx	r3
 80073c4:	6923      	ldr	r3, [r4, #16]
 80073c6:	3b01      	subs	r3, #1
 80073c8:	6123      	str	r3, [r4, #16]
 80073ca:	e6ec      	b.n	80071a6 <_scanf_float+0x7a>
 80073cc:	1e6b      	subs	r3, r5, #1
 80073ce:	2b06      	cmp	r3, #6
 80073d0:	d825      	bhi.n	800741e <_scanf_float+0x2f2>
 80073d2:	2d02      	cmp	r5, #2
 80073d4:	d836      	bhi.n	8007444 <_scanf_float+0x318>
 80073d6:	455e      	cmp	r6, fp
 80073d8:	f67f aee8 	bls.w	80071ac <_scanf_float+0x80>
 80073dc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80073e0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80073e4:	463a      	mov	r2, r7
 80073e6:	4640      	mov	r0, r8
 80073e8:	4798      	blx	r3
 80073ea:	6923      	ldr	r3, [r4, #16]
 80073ec:	3b01      	subs	r3, #1
 80073ee:	6123      	str	r3, [r4, #16]
 80073f0:	e7f1      	b.n	80073d6 <_scanf_float+0x2aa>
 80073f2:	9802      	ldr	r0, [sp, #8]
 80073f4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80073f8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80073fc:	9002      	str	r0, [sp, #8]
 80073fe:	463a      	mov	r2, r7
 8007400:	4640      	mov	r0, r8
 8007402:	4798      	blx	r3
 8007404:	6923      	ldr	r3, [r4, #16]
 8007406:	3b01      	subs	r3, #1
 8007408:	6123      	str	r3, [r4, #16]
 800740a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800740e:	fa5f fa8a 	uxtb.w	sl, sl
 8007412:	f1ba 0f02 	cmp.w	sl, #2
 8007416:	d1ec      	bne.n	80073f2 <_scanf_float+0x2c6>
 8007418:	3d03      	subs	r5, #3
 800741a:	b2ed      	uxtb	r5, r5
 800741c:	1b76      	subs	r6, r6, r5
 800741e:	6823      	ldr	r3, [r4, #0]
 8007420:	05da      	lsls	r2, r3, #23
 8007422:	d52f      	bpl.n	8007484 <_scanf_float+0x358>
 8007424:	055b      	lsls	r3, r3, #21
 8007426:	d510      	bpl.n	800744a <_scanf_float+0x31e>
 8007428:	455e      	cmp	r6, fp
 800742a:	f67f aebf 	bls.w	80071ac <_scanf_float+0x80>
 800742e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007432:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007436:	463a      	mov	r2, r7
 8007438:	4640      	mov	r0, r8
 800743a:	4798      	blx	r3
 800743c:	6923      	ldr	r3, [r4, #16]
 800743e:	3b01      	subs	r3, #1
 8007440:	6123      	str	r3, [r4, #16]
 8007442:	e7f1      	b.n	8007428 <_scanf_float+0x2fc>
 8007444:	46aa      	mov	sl, r5
 8007446:	9602      	str	r6, [sp, #8]
 8007448:	e7df      	b.n	800740a <_scanf_float+0x2de>
 800744a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800744e:	6923      	ldr	r3, [r4, #16]
 8007450:	2965      	cmp	r1, #101	; 0x65
 8007452:	f103 33ff 	add.w	r3, r3, #4294967295
 8007456:	f106 35ff 	add.w	r5, r6, #4294967295
 800745a:	6123      	str	r3, [r4, #16]
 800745c:	d00c      	beq.n	8007478 <_scanf_float+0x34c>
 800745e:	2945      	cmp	r1, #69	; 0x45
 8007460:	d00a      	beq.n	8007478 <_scanf_float+0x34c>
 8007462:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007466:	463a      	mov	r2, r7
 8007468:	4640      	mov	r0, r8
 800746a:	4798      	blx	r3
 800746c:	6923      	ldr	r3, [r4, #16]
 800746e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007472:	3b01      	subs	r3, #1
 8007474:	1eb5      	subs	r5, r6, #2
 8007476:	6123      	str	r3, [r4, #16]
 8007478:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800747c:	463a      	mov	r2, r7
 800747e:	4640      	mov	r0, r8
 8007480:	4798      	blx	r3
 8007482:	462e      	mov	r6, r5
 8007484:	6825      	ldr	r5, [r4, #0]
 8007486:	f015 0510 	ands.w	r5, r5, #16
 800748a:	d159      	bne.n	8007540 <_scanf_float+0x414>
 800748c:	7035      	strb	r5, [r6, #0]
 800748e:	6823      	ldr	r3, [r4, #0]
 8007490:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007494:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007498:	d11b      	bne.n	80074d2 <_scanf_float+0x3a6>
 800749a:	9b01      	ldr	r3, [sp, #4]
 800749c:	454b      	cmp	r3, r9
 800749e:	eba3 0209 	sub.w	r2, r3, r9
 80074a2:	d123      	bne.n	80074ec <_scanf_float+0x3c0>
 80074a4:	2200      	movs	r2, #0
 80074a6:	4659      	mov	r1, fp
 80074a8:	4640      	mov	r0, r8
 80074aa:	f000 feaf 	bl	800820c <_strtod_r>
 80074ae:	6822      	ldr	r2, [r4, #0]
 80074b0:	9b03      	ldr	r3, [sp, #12]
 80074b2:	f012 0f02 	tst.w	r2, #2
 80074b6:	ec57 6b10 	vmov	r6, r7, d0
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	d021      	beq.n	8007502 <_scanf_float+0x3d6>
 80074be:	9903      	ldr	r1, [sp, #12]
 80074c0:	1d1a      	adds	r2, r3, #4
 80074c2:	600a      	str	r2, [r1, #0]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	e9c3 6700 	strd	r6, r7, [r3]
 80074ca:	68e3      	ldr	r3, [r4, #12]
 80074cc:	3301      	adds	r3, #1
 80074ce:	60e3      	str	r3, [r4, #12]
 80074d0:	e66d      	b.n	80071ae <_scanf_float+0x82>
 80074d2:	9b04      	ldr	r3, [sp, #16]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d0e5      	beq.n	80074a4 <_scanf_float+0x378>
 80074d8:	9905      	ldr	r1, [sp, #20]
 80074da:	230a      	movs	r3, #10
 80074dc:	462a      	mov	r2, r5
 80074de:	3101      	adds	r1, #1
 80074e0:	4640      	mov	r0, r8
 80074e2:	f000 ff1b 	bl	800831c <_strtol_r>
 80074e6:	9b04      	ldr	r3, [sp, #16]
 80074e8:	9e05      	ldr	r6, [sp, #20]
 80074ea:	1ac2      	subs	r2, r0, r3
 80074ec:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80074f0:	429e      	cmp	r6, r3
 80074f2:	bf28      	it	cs
 80074f4:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80074f8:	4912      	ldr	r1, [pc, #72]	; (8007544 <_scanf_float+0x418>)
 80074fa:	4630      	mov	r0, r6
 80074fc:	f000 f844 	bl	8007588 <siprintf>
 8007500:	e7d0      	b.n	80074a4 <_scanf_float+0x378>
 8007502:	9903      	ldr	r1, [sp, #12]
 8007504:	f012 0f04 	tst.w	r2, #4
 8007508:	f103 0204 	add.w	r2, r3, #4
 800750c:	600a      	str	r2, [r1, #0]
 800750e:	d1d9      	bne.n	80074c4 <_scanf_float+0x398>
 8007510:	f8d3 8000 	ldr.w	r8, [r3]
 8007514:	ee10 2a10 	vmov	r2, s0
 8007518:	ee10 0a10 	vmov	r0, s0
 800751c:	463b      	mov	r3, r7
 800751e:	4639      	mov	r1, r7
 8007520:	f7f9 fb14 	bl	8000b4c <__aeabi_dcmpun>
 8007524:	b128      	cbz	r0, 8007532 <_scanf_float+0x406>
 8007526:	4808      	ldr	r0, [pc, #32]	; (8007548 <_scanf_float+0x41c>)
 8007528:	f000 f828 	bl	800757c <nanf>
 800752c:	ed88 0a00 	vstr	s0, [r8]
 8007530:	e7cb      	b.n	80074ca <_scanf_float+0x39e>
 8007532:	4630      	mov	r0, r6
 8007534:	4639      	mov	r1, r7
 8007536:	f7f9 fb67 	bl	8000c08 <__aeabi_d2f>
 800753a:	f8c8 0000 	str.w	r0, [r8]
 800753e:	e7c4      	b.n	80074ca <_scanf_float+0x39e>
 8007540:	2500      	movs	r5, #0
 8007542:	e634      	b.n	80071ae <_scanf_float+0x82>
 8007544:	0800b1cc 	.word	0x0800b1cc
 8007548:	0800b640 	.word	0x0800b640

0800754c <iprintf>:
 800754c:	b40f      	push	{r0, r1, r2, r3}
 800754e:	4b0a      	ldr	r3, [pc, #40]	; (8007578 <iprintf+0x2c>)
 8007550:	b513      	push	{r0, r1, r4, lr}
 8007552:	681c      	ldr	r4, [r3, #0]
 8007554:	b124      	cbz	r4, 8007560 <iprintf+0x14>
 8007556:	69a3      	ldr	r3, [r4, #24]
 8007558:	b913      	cbnz	r3, 8007560 <iprintf+0x14>
 800755a:	4620      	mov	r0, r4
 800755c:	f001 fdb2 	bl	80090c4 <__sinit>
 8007560:	ab05      	add	r3, sp, #20
 8007562:	9a04      	ldr	r2, [sp, #16]
 8007564:	68a1      	ldr	r1, [r4, #8]
 8007566:	9301      	str	r3, [sp, #4]
 8007568:	4620      	mov	r0, r4
 800756a:	f003 f917 	bl	800a79c <_vfiprintf_r>
 800756e:	b002      	add	sp, #8
 8007570:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007574:	b004      	add	sp, #16
 8007576:	4770      	bx	lr
 8007578:	20000070 	.word	0x20000070

0800757c <nanf>:
 800757c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007584 <nanf+0x8>
 8007580:	4770      	bx	lr
 8007582:	bf00      	nop
 8007584:	7fc00000 	.word	0x7fc00000

08007588 <siprintf>:
 8007588:	b40e      	push	{r1, r2, r3}
 800758a:	b500      	push	{lr}
 800758c:	b09c      	sub	sp, #112	; 0x70
 800758e:	ab1d      	add	r3, sp, #116	; 0x74
 8007590:	9002      	str	r0, [sp, #8]
 8007592:	9006      	str	r0, [sp, #24]
 8007594:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007598:	4809      	ldr	r0, [pc, #36]	; (80075c0 <siprintf+0x38>)
 800759a:	9107      	str	r1, [sp, #28]
 800759c:	9104      	str	r1, [sp, #16]
 800759e:	4909      	ldr	r1, [pc, #36]	; (80075c4 <siprintf+0x3c>)
 80075a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80075a4:	9105      	str	r1, [sp, #20]
 80075a6:	6800      	ldr	r0, [r0, #0]
 80075a8:	9301      	str	r3, [sp, #4]
 80075aa:	a902      	add	r1, sp, #8
 80075ac:	f002 ffcc 	bl	800a548 <_svfiprintf_r>
 80075b0:	9b02      	ldr	r3, [sp, #8]
 80075b2:	2200      	movs	r2, #0
 80075b4:	701a      	strb	r2, [r3, #0]
 80075b6:	b01c      	add	sp, #112	; 0x70
 80075b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80075bc:	b003      	add	sp, #12
 80075be:	4770      	bx	lr
 80075c0:	20000070 	.word	0x20000070
 80075c4:	ffff0208 	.word	0xffff0208

080075c8 <sulp>:
 80075c8:	b570      	push	{r4, r5, r6, lr}
 80075ca:	4604      	mov	r4, r0
 80075cc:	460d      	mov	r5, r1
 80075ce:	ec45 4b10 	vmov	d0, r4, r5
 80075d2:	4616      	mov	r6, r2
 80075d4:	f002 fd16 	bl	800a004 <__ulp>
 80075d8:	ec51 0b10 	vmov	r0, r1, d0
 80075dc:	b17e      	cbz	r6, 80075fe <sulp+0x36>
 80075de:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80075e2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	dd09      	ble.n	80075fe <sulp+0x36>
 80075ea:	051b      	lsls	r3, r3, #20
 80075ec:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80075f0:	2400      	movs	r4, #0
 80075f2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80075f6:	4622      	mov	r2, r4
 80075f8:	462b      	mov	r3, r5
 80075fa:	f7f9 f80d 	bl	8000618 <__aeabi_dmul>
 80075fe:	bd70      	pop	{r4, r5, r6, pc}

08007600 <_strtod_l>:
 8007600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007604:	ed2d 8b02 	vpush	{d8}
 8007608:	b09d      	sub	sp, #116	; 0x74
 800760a:	461f      	mov	r7, r3
 800760c:	2300      	movs	r3, #0
 800760e:	9318      	str	r3, [sp, #96]	; 0x60
 8007610:	4ba2      	ldr	r3, [pc, #648]	; (800789c <_strtod_l+0x29c>)
 8007612:	9213      	str	r2, [sp, #76]	; 0x4c
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	9305      	str	r3, [sp, #20]
 8007618:	4604      	mov	r4, r0
 800761a:	4618      	mov	r0, r3
 800761c:	4688      	mov	r8, r1
 800761e:	f7f8 fde7 	bl	80001f0 <strlen>
 8007622:	f04f 0a00 	mov.w	sl, #0
 8007626:	4605      	mov	r5, r0
 8007628:	f04f 0b00 	mov.w	fp, #0
 800762c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007630:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007632:	781a      	ldrb	r2, [r3, #0]
 8007634:	2a2b      	cmp	r2, #43	; 0x2b
 8007636:	d04e      	beq.n	80076d6 <_strtod_l+0xd6>
 8007638:	d83b      	bhi.n	80076b2 <_strtod_l+0xb2>
 800763a:	2a0d      	cmp	r2, #13
 800763c:	d834      	bhi.n	80076a8 <_strtod_l+0xa8>
 800763e:	2a08      	cmp	r2, #8
 8007640:	d834      	bhi.n	80076ac <_strtod_l+0xac>
 8007642:	2a00      	cmp	r2, #0
 8007644:	d03e      	beq.n	80076c4 <_strtod_l+0xc4>
 8007646:	2300      	movs	r3, #0
 8007648:	930a      	str	r3, [sp, #40]	; 0x28
 800764a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800764c:	7833      	ldrb	r3, [r6, #0]
 800764e:	2b30      	cmp	r3, #48	; 0x30
 8007650:	f040 80b0 	bne.w	80077b4 <_strtod_l+0x1b4>
 8007654:	7873      	ldrb	r3, [r6, #1]
 8007656:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800765a:	2b58      	cmp	r3, #88	; 0x58
 800765c:	d168      	bne.n	8007730 <_strtod_l+0x130>
 800765e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007660:	9301      	str	r3, [sp, #4]
 8007662:	ab18      	add	r3, sp, #96	; 0x60
 8007664:	9702      	str	r7, [sp, #8]
 8007666:	9300      	str	r3, [sp, #0]
 8007668:	4a8d      	ldr	r2, [pc, #564]	; (80078a0 <_strtod_l+0x2a0>)
 800766a:	ab19      	add	r3, sp, #100	; 0x64
 800766c:	a917      	add	r1, sp, #92	; 0x5c
 800766e:	4620      	mov	r0, r4
 8007670:	f001 fe2c 	bl	80092cc <__gethex>
 8007674:	f010 0707 	ands.w	r7, r0, #7
 8007678:	4605      	mov	r5, r0
 800767a:	d005      	beq.n	8007688 <_strtod_l+0x88>
 800767c:	2f06      	cmp	r7, #6
 800767e:	d12c      	bne.n	80076da <_strtod_l+0xda>
 8007680:	3601      	adds	r6, #1
 8007682:	2300      	movs	r3, #0
 8007684:	9617      	str	r6, [sp, #92]	; 0x5c
 8007686:	930a      	str	r3, [sp, #40]	; 0x28
 8007688:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800768a:	2b00      	cmp	r3, #0
 800768c:	f040 8590 	bne.w	80081b0 <_strtod_l+0xbb0>
 8007690:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007692:	b1eb      	cbz	r3, 80076d0 <_strtod_l+0xd0>
 8007694:	4652      	mov	r2, sl
 8007696:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800769a:	ec43 2b10 	vmov	d0, r2, r3
 800769e:	b01d      	add	sp, #116	; 0x74
 80076a0:	ecbd 8b02 	vpop	{d8}
 80076a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076a8:	2a20      	cmp	r2, #32
 80076aa:	d1cc      	bne.n	8007646 <_strtod_l+0x46>
 80076ac:	3301      	adds	r3, #1
 80076ae:	9317      	str	r3, [sp, #92]	; 0x5c
 80076b0:	e7be      	b.n	8007630 <_strtod_l+0x30>
 80076b2:	2a2d      	cmp	r2, #45	; 0x2d
 80076b4:	d1c7      	bne.n	8007646 <_strtod_l+0x46>
 80076b6:	2201      	movs	r2, #1
 80076b8:	920a      	str	r2, [sp, #40]	; 0x28
 80076ba:	1c5a      	adds	r2, r3, #1
 80076bc:	9217      	str	r2, [sp, #92]	; 0x5c
 80076be:	785b      	ldrb	r3, [r3, #1]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d1c2      	bne.n	800764a <_strtod_l+0x4a>
 80076c4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80076c6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	f040 856e 	bne.w	80081ac <_strtod_l+0xbac>
 80076d0:	4652      	mov	r2, sl
 80076d2:	465b      	mov	r3, fp
 80076d4:	e7e1      	b.n	800769a <_strtod_l+0x9a>
 80076d6:	2200      	movs	r2, #0
 80076d8:	e7ee      	b.n	80076b8 <_strtod_l+0xb8>
 80076da:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80076dc:	b13a      	cbz	r2, 80076ee <_strtod_l+0xee>
 80076de:	2135      	movs	r1, #53	; 0x35
 80076e0:	a81a      	add	r0, sp, #104	; 0x68
 80076e2:	f002 fd9a 	bl	800a21a <__copybits>
 80076e6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80076e8:	4620      	mov	r0, r4
 80076ea:	f002 f959 	bl	80099a0 <_Bfree>
 80076ee:	3f01      	subs	r7, #1
 80076f0:	2f04      	cmp	r7, #4
 80076f2:	d806      	bhi.n	8007702 <_strtod_l+0x102>
 80076f4:	e8df f007 	tbb	[pc, r7]
 80076f8:	1714030a 	.word	0x1714030a
 80076fc:	0a          	.byte	0x0a
 80076fd:	00          	.byte	0x00
 80076fe:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8007702:	0728      	lsls	r0, r5, #28
 8007704:	d5c0      	bpl.n	8007688 <_strtod_l+0x88>
 8007706:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800770a:	e7bd      	b.n	8007688 <_strtod_l+0x88>
 800770c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8007710:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007712:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007716:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800771a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800771e:	e7f0      	b.n	8007702 <_strtod_l+0x102>
 8007720:	f8df b180 	ldr.w	fp, [pc, #384]	; 80078a4 <_strtod_l+0x2a4>
 8007724:	e7ed      	b.n	8007702 <_strtod_l+0x102>
 8007726:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800772a:	f04f 3aff 	mov.w	sl, #4294967295
 800772e:	e7e8      	b.n	8007702 <_strtod_l+0x102>
 8007730:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007732:	1c5a      	adds	r2, r3, #1
 8007734:	9217      	str	r2, [sp, #92]	; 0x5c
 8007736:	785b      	ldrb	r3, [r3, #1]
 8007738:	2b30      	cmp	r3, #48	; 0x30
 800773a:	d0f9      	beq.n	8007730 <_strtod_l+0x130>
 800773c:	2b00      	cmp	r3, #0
 800773e:	d0a3      	beq.n	8007688 <_strtod_l+0x88>
 8007740:	2301      	movs	r3, #1
 8007742:	f04f 0900 	mov.w	r9, #0
 8007746:	9304      	str	r3, [sp, #16]
 8007748:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800774a:	9308      	str	r3, [sp, #32]
 800774c:	f8cd 901c 	str.w	r9, [sp, #28]
 8007750:	464f      	mov	r7, r9
 8007752:	220a      	movs	r2, #10
 8007754:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8007756:	7806      	ldrb	r6, [r0, #0]
 8007758:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800775c:	b2d9      	uxtb	r1, r3
 800775e:	2909      	cmp	r1, #9
 8007760:	d92a      	bls.n	80077b8 <_strtod_l+0x1b8>
 8007762:	9905      	ldr	r1, [sp, #20]
 8007764:	462a      	mov	r2, r5
 8007766:	f003 f9a6 	bl	800aab6 <strncmp>
 800776a:	b398      	cbz	r0, 80077d4 <_strtod_l+0x1d4>
 800776c:	2000      	movs	r0, #0
 800776e:	4632      	mov	r2, r6
 8007770:	463d      	mov	r5, r7
 8007772:	9005      	str	r0, [sp, #20]
 8007774:	4603      	mov	r3, r0
 8007776:	2a65      	cmp	r2, #101	; 0x65
 8007778:	d001      	beq.n	800777e <_strtod_l+0x17e>
 800777a:	2a45      	cmp	r2, #69	; 0x45
 800777c:	d118      	bne.n	80077b0 <_strtod_l+0x1b0>
 800777e:	b91d      	cbnz	r5, 8007788 <_strtod_l+0x188>
 8007780:	9a04      	ldr	r2, [sp, #16]
 8007782:	4302      	orrs	r2, r0
 8007784:	d09e      	beq.n	80076c4 <_strtod_l+0xc4>
 8007786:	2500      	movs	r5, #0
 8007788:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800778c:	f108 0201 	add.w	r2, r8, #1
 8007790:	9217      	str	r2, [sp, #92]	; 0x5c
 8007792:	f898 2001 	ldrb.w	r2, [r8, #1]
 8007796:	2a2b      	cmp	r2, #43	; 0x2b
 8007798:	d075      	beq.n	8007886 <_strtod_l+0x286>
 800779a:	2a2d      	cmp	r2, #45	; 0x2d
 800779c:	d07b      	beq.n	8007896 <_strtod_l+0x296>
 800779e:	f04f 0c00 	mov.w	ip, #0
 80077a2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80077a6:	2909      	cmp	r1, #9
 80077a8:	f240 8082 	bls.w	80078b0 <_strtod_l+0x2b0>
 80077ac:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80077b0:	2600      	movs	r6, #0
 80077b2:	e09d      	b.n	80078f0 <_strtod_l+0x2f0>
 80077b4:	2300      	movs	r3, #0
 80077b6:	e7c4      	b.n	8007742 <_strtod_l+0x142>
 80077b8:	2f08      	cmp	r7, #8
 80077ba:	bfd8      	it	le
 80077bc:	9907      	ldrle	r1, [sp, #28]
 80077be:	f100 0001 	add.w	r0, r0, #1
 80077c2:	bfda      	itte	le
 80077c4:	fb02 3301 	mlale	r3, r2, r1, r3
 80077c8:	9307      	strle	r3, [sp, #28]
 80077ca:	fb02 3909 	mlagt	r9, r2, r9, r3
 80077ce:	3701      	adds	r7, #1
 80077d0:	9017      	str	r0, [sp, #92]	; 0x5c
 80077d2:	e7bf      	b.n	8007754 <_strtod_l+0x154>
 80077d4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80077d6:	195a      	adds	r2, r3, r5
 80077d8:	9217      	str	r2, [sp, #92]	; 0x5c
 80077da:	5d5a      	ldrb	r2, [r3, r5]
 80077dc:	2f00      	cmp	r7, #0
 80077de:	d037      	beq.n	8007850 <_strtod_l+0x250>
 80077e0:	9005      	str	r0, [sp, #20]
 80077e2:	463d      	mov	r5, r7
 80077e4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80077e8:	2b09      	cmp	r3, #9
 80077ea:	d912      	bls.n	8007812 <_strtod_l+0x212>
 80077ec:	2301      	movs	r3, #1
 80077ee:	e7c2      	b.n	8007776 <_strtod_l+0x176>
 80077f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80077f2:	1c5a      	adds	r2, r3, #1
 80077f4:	9217      	str	r2, [sp, #92]	; 0x5c
 80077f6:	785a      	ldrb	r2, [r3, #1]
 80077f8:	3001      	adds	r0, #1
 80077fa:	2a30      	cmp	r2, #48	; 0x30
 80077fc:	d0f8      	beq.n	80077f0 <_strtod_l+0x1f0>
 80077fe:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007802:	2b08      	cmp	r3, #8
 8007804:	f200 84d9 	bhi.w	80081ba <_strtod_l+0xbba>
 8007808:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800780a:	9005      	str	r0, [sp, #20]
 800780c:	2000      	movs	r0, #0
 800780e:	9308      	str	r3, [sp, #32]
 8007810:	4605      	mov	r5, r0
 8007812:	3a30      	subs	r2, #48	; 0x30
 8007814:	f100 0301 	add.w	r3, r0, #1
 8007818:	d014      	beq.n	8007844 <_strtod_l+0x244>
 800781a:	9905      	ldr	r1, [sp, #20]
 800781c:	4419      	add	r1, r3
 800781e:	9105      	str	r1, [sp, #20]
 8007820:	462b      	mov	r3, r5
 8007822:	eb00 0e05 	add.w	lr, r0, r5
 8007826:	210a      	movs	r1, #10
 8007828:	4573      	cmp	r3, lr
 800782a:	d113      	bne.n	8007854 <_strtod_l+0x254>
 800782c:	182b      	adds	r3, r5, r0
 800782e:	2b08      	cmp	r3, #8
 8007830:	f105 0501 	add.w	r5, r5, #1
 8007834:	4405      	add	r5, r0
 8007836:	dc1c      	bgt.n	8007872 <_strtod_l+0x272>
 8007838:	9907      	ldr	r1, [sp, #28]
 800783a:	230a      	movs	r3, #10
 800783c:	fb03 2301 	mla	r3, r3, r1, r2
 8007840:	9307      	str	r3, [sp, #28]
 8007842:	2300      	movs	r3, #0
 8007844:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007846:	1c51      	adds	r1, r2, #1
 8007848:	9117      	str	r1, [sp, #92]	; 0x5c
 800784a:	7852      	ldrb	r2, [r2, #1]
 800784c:	4618      	mov	r0, r3
 800784e:	e7c9      	b.n	80077e4 <_strtod_l+0x1e4>
 8007850:	4638      	mov	r0, r7
 8007852:	e7d2      	b.n	80077fa <_strtod_l+0x1fa>
 8007854:	2b08      	cmp	r3, #8
 8007856:	dc04      	bgt.n	8007862 <_strtod_l+0x262>
 8007858:	9e07      	ldr	r6, [sp, #28]
 800785a:	434e      	muls	r6, r1
 800785c:	9607      	str	r6, [sp, #28]
 800785e:	3301      	adds	r3, #1
 8007860:	e7e2      	b.n	8007828 <_strtod_l+0x228>
 8007862:	f103 0c01 	add.w	ip, r3, #1
 8007866:	f1bc 0f10 	cmp.w	ip, #16
 800786a:	bfd8      	it	le
 800786c:	fb01 f909 	mulle.w	r9, r1, r9
 8007870:	e7f5      	b.n	800785e <_strtod_l+0x25e>
 8007872:	2d10      	cmp	r5, #16
 8007874:	bfdc      	itt	le
 8007876:	230a      	movle	r3, #10
 8007878:	fb03 2909 	mlale	r9, r3, r9, r2
 800787c:	e7e1      	b.n	8007842 <_strtod_l+0x242>
 800787e:	2300      	movs	r3, #0
 8007880:	9305      	str	r3, [sp, #20]
 8007882:	2301      	movs	r3, #1
 8007884:	e77c      	b.n	8007780 <_strtod_l+0x180>
 8007886:	f04f 0c00 	mov.w	ip, #0
 800788a:	f108 0202 	add.w	r2, r8, #2
 800788e:	9217      	str	r2, [sp, #92]	; 0x5c
 8007890:	f898 2002 	ldrb.w	r2, [r8, #2]
 8007894:	e785      	b.n	80077a2 <_strtod_l+0x1a2>
 8007896:	f04f 0c01 	mov.w	ip, #1
 800789a:	e7f6      	b.n	800788a <_strtod_l+0x28a>
 800789c:	0800b484 	.word	0x0800b484
 80078a0:	0800b1d4 	.word	0x0800b1d4
 80078a4:	7ff00000 	.word	0x7ff00000
 80078a8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80078aa:	1c51      	adds	r1, r2, #1
 80078ac:	9117      	str	r1, [sp, #92]	; 0x5c
 80078ae:	7852      	ldrb	r2, [r2, #1]
 80078b0:	2a30      	cmp	r2, #48	; 0x30
 80078b2:	d0f9      	beq.n	80078a8 <_strtod_l+0x2a8>
 80078b4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80078b8:	2908      	cmp	r1, #8
 80078ba:	f63f af79 	bhi.w	80077b0 <_strtod_l+0x1b0>
 80078be:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80078c2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80078c4:	9206      	str	r2, [sp, #24]
 80078c6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80078c8:	1c51      	adds	r1, r2, #1
 80078ca:	9117      	str	r1, [sp, #92]	; 0x5c
 80078cc:	7852      	ldrb	r2, [r2, #1]
 80078ce:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80078d2:	2e09      	cmp	r6, #9
 80078d4:	d937      	bls.n	8007946 <_strtod_l+0x346>
 80078d6:	9e06      	ldr	r6, [sp, #24]
 80078d8:	1b89      	subs	r1, r1, r6
 80078da:	2908      	cmp	r1, #8
 80078dc:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80078e0:	dc02      	bgt.n	80078e8 <_strtod_l+0x2e8>
 80078e2:	4576      	cmp	r6, lr
 80078e4:	bfa8      	it	ge
 80078e6:	4676      	movge	r6, lr
 80078e8:	f1bc 0f00 	cmp.w	ip, #0
 80078ec:	d000      	beq.n	80078f0 <_strtod_l+0x2f0>
 80078ee:	4276      	negs	r6, r6
 80078f0:	2d00      	cmp	r5, #0
 80078f2:	d14d      	bne.n	8007990 <_strtod_l+0x390>
 80078f4:	9904      	ldr	r1, [sp, #16]
 80078f6:	4301      	orrs	r1, r0
 80078f8:	f47f aec6 	bne.w	8007688 <_strtod_l+0x88>
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	f47f aee1 	bne.w	80076c4 <_strtod_l+0xc4>
 8007902:	2a69      	cmp	r2, #105	; 0x69
 8007904:	d027      	beq.n	8007956 <_strtod_l+0x356>
 8007906:	dc24      	bgt.n	8007952 <_strtod_l+0x352>
 8007908:	2a49      	cmp	r2, #73	; 0x49
 800790a:	d024      	beq.n	8007956 <_strtod_l+0x356>
 800790c:	2a4e      	cmp	r2, #78	; 0x4e
 800790e:	f47f aed9 	bne.w	80076c4 <_strtod_l+0xc4>
 8007912:	499f      	ldr	r1, [pc, #636]	; (8007b90 <_strtod_l+0x590>)
 8007914:	a817      	add	r0, sp, #92	; 0x5c
 8007916:	f001 ff31 	bl	800977c <__match>
 800791a:	2800      	cmp	r0, #0
 800791c:	f43f aed2 	beq.w	80076c4 <_strtod_l+0xc4>
 8007920:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007922:	781b      	ldrb	r3, [r3, #0]
 8007924:	2b28      	cmp	r3, #40	; 0x28
 8007926:	d12d      	bne.n	8007984 <_strtod_l+0x384>
 8007928:	499a      	ldr	r1, [pc, #616]	; (8007b94 <_strtod_l+0x594>)
 800792a:	aa1a      	add	r2, sp, #104	; 0x68
 800792c:	a817      	add	r0, sp, #92	; 0x5c
 800792e:	f001 ff39 	bl	80097a4 <__hexnan>
 8007932:	2805      	cmp	r0, #5
 8007934:	d126      	bne.n	8007984 <_strtod_l+0x384>
 8007936:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007938:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800793c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8007940:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8007944:	e6a0      	b.n	8007688 <_strtod_l+0x88>
 8007946:	210a      	movs	r1, #10
 8007948:	fb01 2e0e 	mla	lr, r1, lr, r2
 800794c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8007950:	e7b9      	b.n	80078c6 <_strtod_l+0x2c6>
 8007952:	2a6e      	cmp	r2, #110	; 0x6e
 8007954:	e7db      	b.n	800790e <_strtod_l+0x30e>
 8007956:	4990      	ldr	r1, [pc, #576]	; (8007b98 <_strtod_l+0x598>)
 8007958:	a817      	add	r0, sp, #92	; 0x5c
 800795a:	f001 ff0f 	bl	800977c <__match>
 800795e:	2800      	cmp	r0, #0
 8007960:	f43f aeb0 	beq.w	80076c4 <_strtod_l+0xc4>
 8007964:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007966:	498d      	ldr	r1, [pc, #564]	; (8007b9c <_strtod_l+0x59c>)
 8007968:	3b01      	subs	r3, #1
 800796a:	a817      	add	r0, sp, #92	; 0x5c
 800796c:	9317      	str	r3, [sp, #92]	; 0x5c
 800796e:	f001 ff05 	bl	800977c <__match>
 8007972:	b910      	cbnz	r0, 800797a <_strtod_l+0x37a>
 8007974:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007976:	3301      	adds	r3, #1
 8007978:	9317      	str	r3, [sp, #92]	; 0x5c
 800797a:	f8df b230 	ldr.w	fp, [pc, #560]	; 8007bac <_strtod_l+0x5ac>
 800797e:	f04f 0a00 	mov.w	sl, #0
 8007982:	e681      	b.n	8007688 <_strtod_l+0x88>
 8007984:	4886      	ldr	r0, [pc, #536]	; (8007ba0 <_strtod_l+0x5a0>)
 8007986:	f003 f83b 	bl	800aa00 <nan>
 800798a:	ec5b ab10 	vmov	sl, fp, d0
 800798e:	e67b      	b.n	8007688 <_strtod_l+0x88>
 8007990:	9b05      	ldr	r3, [sp, #20]
 8007992:	9807      	ldr	r0, [sp, #28]
 8007994:	1af3      	subs	r3, r6, r3
 8007996:	2f00      	cmp	r7, #0
 8007998:	bf08      	it	eq
 800799a:	462f      	moveq	r7, r5
 800799c:	2d10      	cmp	r5, #16
 800799e:	9306      	str	r3, [sp, #24]
 80079a0:	46a8      	mov	r8, r5
 80079a2:	bfa8      	it	ge
 80079a4:	f04f 0810 	movge.w	r8, #16
 80079a8:	f7f8 fdbc 	bl	8000524 <__aeabi_ui2d>
 80079ac:	2d09      	cmp	r5, #9
 80079ae:	4682      	mov	sl, r0
 80079b0:	468b      	mov	fp, r1
 80079b2:	dd13      	ble.n	80079dc <_strtod_l+0x3dc>
 80079b4:	4b7b      	ldr	r3, [pc, #492]	; (8007ba4 <_strtod_l+0x5a4>)
 80079b6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80079ba:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80079be:	f7f8 fe2b 	bl	8000618 <__aeabi_dmul>
 80079c2:	4682      	mov	sl, r0
 80079c4:	4648      	mov	r0, r9
 80079c6:	468b      	mov	fp, r1
 80079c8:	f7f8 fdac 	bl	8000524 <__aeabi_ui2d>
 80079cc:	4602      	mov	r2, r0
 80079ce:	460b      	mov	r3, r1
 80079d0:	4650      	mov	r0, sl
 80079d2:	4659      	mov	r1, fp
 80079d4:	f7f8 fc6a 	bl	80002ac <__adddf3>
 80079d8:	4682      	mov	sl, r0
 80079da:	468b      	mov	fp, r1
 80079dc:	2d0f      	cmp	r5, #15
 80079de:	dc38      	bgt.n	8007a52 <_strtod_l+0x452>
 80079e0:	9b06      	ldr	r3, [sp, #24]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	f43f ae50 	beq.w	8007688 <_strtod_l+0x88>
 80079e8:	dd24      	ble.n	8007a34 <_strtod_l+0x434>
 80079ea:	2b16      	cmp	r3, #22
 80079ec:	dc0b      	bgt.n	8007a06 <_strtod_l+0x406>
 80079ee:	496d      	ldr	r1, [pc, #436]	; (8007ba4 <_strtod_l+0x5a4>)
 80079f0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80079f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80079f8:	4652      	mov	r2, sl
 80079fa:	465b      	mov	r3, fp
 80079fc:	f7f8 fe0c 	bl	8000618 <__aeabi_dmul>
 8007a00:	4682      	mov	sl, r0
 8007a02:	468b      	mov	fp, r1
 8007a04:	e640      	b.n	8007688 <_strtod_l+0x88>
 8007a06:	9a06      	ldr	r2, [sp, #24]
 8007a08:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	db20      	blt.n	8007a52 <_strtod_l+0x452>
 8007a10:	4c64      	ldr	r4, [pc, #400]	; (8007ba4 <_strtod_l+0x5a4>)
 8007a12:	f1c5 050f 	rsb	r5, r5, #15
 8007a16:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007a1a:	4652      	mov	r2, sl
 8007a1c:	465b      	mov	r3, fp
 8007a1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a22:	f7f8 fdf9 	bl	8000618 <__aeabi_dmul>
 8007a26:	9b06      	ldr	r3, [sp, #24]
 8007a28:	1b5d      	subs	r5, r3, r5
 8007a2a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007a2e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007a32:	e7e3      	b.n	80079fc <_strtod_l+0x3fc>
 8007a34:	9b06      	ldr	r3, [sp, #24]
 8007a36:	3316      	adds	r3, #22
 8007a38:	db0b      	blt.n	8007a52 <_strtod_l+0x452>
 8007a3a:	9b05      	ldr	r3, [sp, #20]
 8007a3c:	1b9e      	subs	r6, r3, r6
 8007a3e:	4b59      	ldr	r3, [pc, #356]	; (8007ba4 <_strtod_l+0x5a4>)
 8007a40:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8007a44:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007a48:	4650      	mov	r0, sl
 8007a4a:	4659      	mov	r1, fp
 8007a4c:	f7f8 ff0e 	bl	800086c <__aeabi_ddiv>
 8007a50:	e7d6      	b.n	8007a00 <_strtod_l+0x400>
 8007a52:	9b06      	ldr	r3, [sp, #24]
 8007a54:	eba5 0808 	sub.w	r8, r5, r8
 8007a58:	4498      	add	r8, r3
 8007a5a:	f1b8 0f00 	cmp.w	r8, #0
 8007a5e:	dd74      	ble.n	8007b4a <_strtod_l+0x54a>
 8007a60:	f018 030f 	ands.w	r3, r8, #15
 8007a64:	d00a      	beq.n	8007a7c <_strtod_l+0x47c>
 8007a66:	494f      	ldr	r1, [pc, #316]	; (8007ba4 <_strtod_l+0x5a4>)
 8007a68:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007a6c:	4652      	mov	r2, sl
 8007a6e:	465b      	mov	r3, fp
 8007a70:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a74:	f7f8 fdd0 	bl	8000618 <__aeabi_dmul>
 8007a78:	4682      	mov	sl, r0
 8007a7a:	468b      	mov	fp, r1
 8007a7c:	f038 080f 	bics.w	r8, r8, #15
 8007a80:	d04f      	beq.n	8007b22 <_strtod_l+0x522>
 8007a82:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8007a86:	dd22      	ble.n	8007ace <_strtod_l+0x4ce>
 8007a88:	2500      	movs	r5, #0
 8007a8a:	462e      	mov	r6, r5
 8007a8c:	9507      	str	r5, [sp, #28]
 8007a8e:	9505      	str	r5, [sp, #20]
 8007a90:	2322      	movs	r3, #34	; 0x22
 8007a92:	f8df b118 	ldr.w	fp, [pc, #280]	; 8007bac <_strtod_l+0x5ac>
 8007a96:	6023      	str	r3, [r4, #0]
 8007a98:	f04f 0a00 	mov.w	sl, #0
 8007a9c:	9b07      	ldr	r3, [sp, #28]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	f43f adf2 	beq.w	8007688 <_strtod_l+0x88>
 8007aa4:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007aa6:	4620      	mov	r0, r4
 8007aa8:	f001 ff7a 	bl	80099a0 <_Bfree>
 8007aac:	9905      	ldr	r1, [sp, #20]
 8007aae:	4620      	mov	r0, r4
 8007ab0:	f001 ff76 	bl	80099a0 <_Bfree>
 8007ab4:	4631      	mov	r1, r6
 8007ab6:	4620      	mov	r0, r4
 8007ab8:	f001 ff72 	bl	80099a0 <_Bfree>
 8007abc:	9907      	ldr	r1, [sp, #28]
 8007abe:	4620      	mov	r0, r4
 8007ac0:	f001 ff6e 	bl	80099a0 <_Bfree>
 8007ac4:	4629      	mov	r1, r5
 8007ac6:	4620      	mov	r0, r4
 8007ac8:	f001 ff6a 	bl	80099a0 <_Bfree>
 8007acc:	e5dc      	b.n	8007688 <_strtod_l+0x88>
 8007ace:	4b36      	ldr	r3, [pc, #216]	; (8007ba8 <_strtod_l+0x5a8>)
 8007ad0:	9304      	str	r3, [sp, #16]
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	ea4f 1828 	mov.w	r8, r8, asr #4
 8007ad8:	4650      	mov	r0, sl
 8007ada:	4659      	mov	r1, fp
 8007adc:	4699      	mov	r9, r3
 8007ade:	f1b8 0f01 	cmp.w	r8, #1
 8007ae2:	dc21      	bgt.n	8007b28 <_strtod_l+0x528>
 8007ae4:	b10b      	cbz	r3, 8007aea <_strtod_l+0x4ea>
 8007ae6:	4682      	mov	sl, r0
 8007ae8:	468b      	mov	fp, r1
 8007aea:	4b2f      	ldr	r3, [pc, #188]	; (8007ba8 <_strtod_l+0x5a8>)
 8007aec:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8007af0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8007af4:	4652      	mov	r2, sl
 8007af6:	465b      	mov	r3, fp
 8007af8:	e9d9 0100 	ldrd	r0, r1, [r9]
 8007afc:	f7f8 fd8c 	bl	8000618 <__aeabi_dmul>
 8007b00:	4b2a      	ldr	r3, [pc, #168]	; (8007bac <_strtod_l+0x5ac>)
 8007b02:	460a      	mov	r2, r1
 8007b04:	400b      	ands	r3, r1
 8007b06:	492a      	ldr	r1, [pc, #168]	; (8007bb0 <_strtod_l+0x5b0>)
 8007b08:	428b      	cmp	r3, r1
 8007b0a:	4682      	mov	sl, r0
 8007b0c:	d8bc      	bhi.n	8007a88 <_strtod_l+0x488>
 8007b0e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007b12:	428b      	cmp	r3, r1
 8007b14:	bf86      	itte	hi
 8007b16:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8007bb4 <_strtod_l+0x5b4>
 8007b1a:	f04f 3aff 	movhi.w	sl, #4294967295
 8007b1e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8007b22:	2300      	movs	r3, #0
 8007b24:	9304      	str	r3, [sp, #16]
 8007b26:	e084      	b.n	8007c32 <_strtod_l+0x632>
 8007b28:	f018 0f01 	tst.w	r8, #1
 8007b2c:	d005      	beq.n	8007b3a <_strtod_l+0x53a>
 8007b2e:	9b04      	ldr	r3, [sp, #16]
 8007b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b34:	f7f8 fd70 	bl	8000618 <__aeabi_dmul>
 8007b38:	2301      	movs	r3, #1
 8007b3a:	9a04      	ldr	r2, [sp, #16]
 8007b3c:	3208      	adds	r2, #8
 8007b3e:	f109 0901 	add.w	r9, r9, #1
 8007b42:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007b46:	9204      	str	r2, [sp, #16]
 8007b48:	e7c9      	b.n	8007ade <_strtod_l+0x4de>
 8007b4a:	d0ea      	beq.n	8007b22 <_strtod_l+0x522>
 8007b4c:	f1c8 0800 	rsb	r8, r8, #0
 8007b50:	f018 020f 	ands.w	r2, r8, #15
 8007b54:	d00a      	beq.n	8007b6c <_strtod_l+0x56c>
 8007b56:	4b13      	ldr	r3, [pc, #76]	; (8007ba4 <_strtod_l+0x5a4>)
 8007b58:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007b5c:	4650      	mov	r0, sl
 8007b5e:	4659      	mov	r1, fp
 8007b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b64:	f7f8 fe82 	bl	800086c <__aeabi_ddiv>
 8007b68:	4682      	mov	sl, r0
 8007b6a:	468b      	mov	fp, r1
 8007b6c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8007b70:	d0d7      	beq.n	8007b22 <_strtod_l+0x522>
 8007b72:	f1b8 0f1f 	cmp.w	r8, #31
 8007b76:	dd1f      	ble.n	8007bb8 <_strtod_l+0x5b8>
 8007b78:	2500      	movs	r5, #0
 8007b7a:	462e      	mov	r6, r5
 8007b7c:	9507      	str	r5, [sp, #28]
 8007b7e:	9505      	str	r5, [sp, #20]
 8007b80:	2322      	movs	r3, #34	; 0x22
 8007b82:	f04f 0a00 	mov.w	sl, #0
 8007b86:	f04f 0b00 	mov.w	fp, #0
 8007b8a:	6023      	str	r3, [r4, #0]
 8007b8c:	e786      	b.n	8007a9c <_strtod_l+0x49c>
 8007b8e:	bf00      	nop
 8007b90:	0800b1a5 	.word	0x0800b1a5
 8007b94:	0800b1e8 	.word	0x0800b1e8
 8007b98:	0800b19d 	.word	0x0800b19d
 8007b9c:	0800b32c 	.word	0x0800b32c
 8007ba0:	0800b640 	.word	0x0800b640
 8007ba4:	0800b520 	.word	0x0800b520
 8007ba8:	0800b4f8 	.word	0x0800b4f8
 8007bac:	7ff00000 	.word	0x7ff00000
 8007bb0:	7ca00000 	.word	0x7ca00000
 8007bb4:	7fefffff 	.word	0x7fefffff
 8007bb8:	f018 0310 	ands.w	r3, r8, #16
 8007bbc:	bf18      	it	ne
 8007bbe:	236a      	movne	r3, #106	; 0x6a
 8007bc0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8007f70 <_strtod_l+0x970>
 8007bc4:	9304      	str	r3, [sp, #16]
 8007bc6:	4650      	mov	r0, sl
 8007bc8:	4659      	mov	r1, fp
 8007bca:	2300      	movs	r3, #0
 8007bcc:	f018 0f01 	tst.w	r8, #1
 8007bd0:	d004      	beq.n	8007bdc <_strtod_l+0x5dc>
 8007bd2:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007bd6:	f7f8 fd1f 	bl	8000618 <__aeabi_dmul>
 8007bda:	2301      	movs	r3, #1
 8007bdc:	ea5f 0868 	movs.w	r8, r8, asr #1
 8007be0:	f109 0908 	add.w	r9, r9, #8
 8007be4:	d1f2      	bne.n	8007bcc <_strtod_l+0x5cc>
 8007be6:	b10b      	cbz	r3, 8007bec <_strtod_l+0x5ec>
 8007be8:	4682      	mov	sl, r0
 8007bea:	468b      	mov	fp, r1
 8007bec:	9b04      	ldr	r3, [sp, #16]
 8007bee:	b1c3      	cbz	r3, 8007c22 <_strtod_l+0x622>
 8007bf0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007bf4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	4659      	mov	r1, fp
 8007bfc:	dd11      	ble.n	8007c22 <_strtod_l+0x622>
 8007bfe:	2b1f      	cmp	r3, #31
 8007c00:	f340 8124 	ble.w	8007e4c <_strtod_l+0x84c>
 8007c04:	2b34      	cmp	r3, #52	; 0x34
 8007c06:	bfde      	ittt	le
 8007c08:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8007c0c:	f04f 33ff 	movle.w	r3, #4294967295
 8007c10:	fa03 f202 	lslle.w	r2, r3, r2
 8007c14:	f04f 0a00 	mov.w	sl, #0
 8007c18:	bfcc      	ite	gt
 8007c1a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8007c1e:	ea02 0b01 	andle.w	fp, r2, r1
 8007c22:	2200      	movs	r2, #0
 8007c24:	2300      	movs	r3, #0
 8007c26:	4650      	mov	r0, sl
 8007c28:	4659      	mov	r1, fp
 8007c2a:	f7f8 ff5d 	bl	8000ae8 <__aeabi_dcmpeq>
 8007c2e:	2800      	cmp	r0, #0
 8007c30:	d1a2      	bne.n	8007b78 <_strtod_l+0x578>
 8007c32:	9b07      	ldr	r3, [sp, #28]
 8007c34:	9300      	str	r3, [sp, #0]
 8007c36:	9908      	ldr	r1, [sp, #32]
 8007c38:	462b      	mov	r3, r5
 8007c3a:	463a      	mov	r2, r7
 8007c3c:	4620      	mov	r0, r4
 8007c3e:	f001 ff17 	bl	8009a70 <__s2b>
 8007c42:	9007      	str	r0, [sp, #28]
 8007c44:	2800      	cmp	r0, #0
 8007c46:	f43f af1f 	beq.w	8007a88 <_strtod_l+0x488>
 8007c4a:	9b05      	ldr	r3, [sp, #20]
 8007c4c:	1b9e      	subs	r6, r3, r6
 8007c4e:	9b06      	ldr	r3, [sp, #24]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	bfb4      	ite	lt
 8007c54:	4633      	movlt	r3, r6
 8007c56:	2300      	movge	r3, #0
 8007c58:	930c      	str	r3, [sp, #48]	; 0x30
 8007c5a:	9b06      	ldr	r3, [sp, #24]
 8007c5c:	2500      	movs	r5, #0
 8007c5e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007c62:	9312      	str	r3, [sp, #72]	; 0x48
 8007c64:	462e      	mov	r6, r5
 8007c66:	9b07      	ldr	r3, [sp, #28]
 8007c68:	4620      	mov	r0, r4
 8007c6a:	6859      	ldr	r1, [r3, #4]
 8007c6c:	f001 fe58 	bl	8009920 <_Balloc>
 8007c70:	9005      	str	r0, [sp, #20]
 8007c72:	2800      	cmp	r0, #0
 8007c74:	f43f af0c 	beq.w	8007a90 <_strtod_l+0x490>
 8007c78:	9b07      	ldr	r3, [sp, #28]
 8007c7a:	691a      	ldr	r2, [r3, #16]
 8007c7c:	3202      	adds	r2, #2
 8007c7e:	f103 010c 	add.w	r1, r3, #12
 8007c82:	0092      	lsls	r2, r2, #2
 8007c84:	300c      	adds	r0, #12
 8007c86:	f7fe fdd1 	bl	800682c <memcpy>
 8007c8a:	ec4b ab10 	vmov	d0, sl, fp
 8007c8e:	aa1a      	add	r2, sp, #104	; 0x68
 8007c90:	a919      	add	r1, sp, #100	; 0x64
 8007c92:	4620      	mov	r0, r4
 8007c94:	f002 fa32 	bl	800a0fc <__d2b>
 8007c98:	ec4b ab18 	vmov	d8, sl, fp
 8007c9c:	9018      	str	r0, [sp, #96]	; 0x60
 8007c9e:	2800      	cmp	r0, #0
 8007ca0:	f43f aef6 	beq.w	8007a90 <_strtod_l+0x490>
 8007ca4:	2101      	movs	r1, #1
 8007ca6:	4620      	mov	r0, r4
 8007ca8:	f001 ff7c 	bl	8009ba4 <__i2b>
 8007cac:	4606      	mov	r6, r0
 8007cae:	2800      	cmp	r0, #0
 8007cb0:	f43f aeee 	beq.w	8007a90 <_strtod_l+0x490>
 8007cb4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007cb6:	9904      	ldr	r1, [sp, #16]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	bfab      	itete	ge
 8007cbc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8007cbe:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8007cc0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8007cc2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8007cc6:	bfac      	ite	ge
 8007cc8:	eb03 0902 	addge.w	r9, r3, r2
 8007ccc:	1ad7      	sublt	r7, r2, r3
 8007cce:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007cd0:	eba3 0801 	sub.w	r8, r3, r1
 8007cd4:	4490      	add	r8, r2
 8007cd6:	4ba1      	ldr	r3, [pc, #644]	; (8007f5c <_strtod_l+0x95c>)
 8007cd8:	f108 38ff 	add.w	r8, r8, #4294967295
 8007cdc:	4598      	cmp	r8, r3
 8007cde:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007ce2:	f280 80c7 	bge.w	8007e74 <_strtod_l+0x874>
 8007ce6:	eba3 0308 	sub.w	r3, r3, r8
 8007cea:	2b1f      	cmp	r3, #31
 8007cec:	eba2 0203 	sub.w	r2, r2, r3
 8007cf0:	f04f 0101 	mov.w	r1, #1
 8007cf4:	f300 80b1 	bgt.w	8007e5a <_strtod_l+0x85a>
 8007cf8:	fa01 f303 	lsl.w	r3, r1, r3
 8007cfc:	930d      	str	r3, [sp, #52]	; 0x34
 8007cfe:	2300      	movs	r3, #0
 8007d00:	9308      	str	r3, [sp, #32]
 8007d02:	eb09 0802 	add.w	r8, r9, r2
 8007d06:	9b04      	ldr	r3, [sp, #16]
 8007d08:	45c1      	cmp	r9, r8
 8007d0a:	4417      	add	r7, r2
 8007d0c:	441f      	add	r7, r3
 8007d0e:	464b      	mov	r3, r9
 8007d10:	bfa8      	it	ge
 8007d12:	4643      	movge	r3, r8
 8007d14:	42bb      	cmp	r3, r7
 8007d16:	bfa8      	it	ge
 8007d18:	463b      	movge	r3, r7
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	bfc2      	ittt	gt
 8007d1e:	eba8 0803 	subgt.w	r8, r8, r3
 8007d22:	1aff      	subgt	r7, r7, r3
 8007d24:	eba9 0903 	subgt.w	r9, r9, r3
 8007d28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	dd17      	ble.n	8007d5e <_strtod_l+0x75e>
 8007d2e:	4631      	mov	r1, r6
 8007d30:	461a      	mov	r2, r3
 8007d32:	4620      	mov	r0, r4
 8007d34:	f001 fff6 	bl	8009d24 <__pow5mult>
 8007d38:	4606      	mov	r6, r0
 8007d3a:	2800      	cmp	r0, #0
 8007d3c:	f43f aea8 	beq.w	8007a90 <_strtod_l+0x490>
 8007d40:	4601      	mov	r1, r0
 8007d42:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007d44:	4620      	mov	r0, r4
 8007d46:	f001 ff43 	bl	8009bd0 <__multiply>
 8007d4a:	900b      	str	r0, [sp, #44]	; 0x2c
 8007d4c:	2800      	cmp	r0, #0
 8007d4e:	f43f ae9f 	beq.w	8007a90 <_strtod_l+0x490>
 8007d52:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007d54:	4620      	mov	r0, r4
 8007d56:	f001 fe23 	bl	80099a0 <_Bfree>
 8007d5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d5c:	9318      	str	r3, [sp, #96]	; 0x60
 8007d5e:	f1b8 0f00 	cmp.w	r8, #0
 8007d62:	f300 808c 	bgt.w	8007e7e <_strtod_l+0x87e>
 8007d66:	9b06      	ldr	r3, [sp, #24]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	dd08      	ble.n	8007d7e <_strtod_l+0x77e>
 8007d6c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007d6e:	9905      	ldr	r1, [sp, #20]
 8007d70:	4620      	mov	r0, r4
 8007d72:	f001 ffd7 	bl	8009d24 <__pow5mult>
 8007d76:	9005      	str	r0, [sp, #20]
 8007d78:	2800      	cmp	r0, #0
 8007d7a:	f43f ae89 	beq.w	8007a90 <_strtod_l+0x490>
 8007d7e:	2f00      	cmp	r7, #0
 8007d80:	dd08      	ble.n	8007d94 <_strtod_l+0x794>
 8007d82:	9905      	ldr	r1, [sp, #20]
 8007d84:	463a      	mov	r2, r7
 8007d86:	4620      	mov	r0, r4
 8007d88:	f002 f826 	bl	8009dd8 <__lshift>
 8007d8c:	9005      	str	r0, [sp, #20]
 8007d8e:	2800      	cmp	r0, #0
 8007d90:	f43f ae7e 	beq.w	8007a90 <_strtod_l+0x490>
 8007d94:	f1b9 0f00 	cmp.w	r9, #0
 8007d98:	dd08      	ble.n	8007dac <_strtod_l+0x7ac>
 8007d9a:	4631      	mov	r1, r6
 8007d9c:	464a      	mov	r2, r9
 8007d9e:	4620      	mov	r0, r4
 8007da0:	f002 f81a 	bl	8009dd8 <__lshift>
 8007da4:	4606      	mov	r6, r0
 8007da6:	2800      	cmp	r0, #0
 8007da8:	f43f ae72 	beq.w	8007a90 <_strtod_l+0x490>
 8007dac:	9a05      	ldr	r2, [sp, #20]
 8007dae:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007db0:	4620      	mov	r0, r4
 8007db2:	f002 f89d 	bl	8009ef0 <__mdiff>
 8007db6:	4605      	mov	r5, r0
 8007db8:	2800      	cmp	r0, #0
 8007dba:	f43f ae69 	beq.w	8007a90 <_strtod_l+0x490>
 8007dbe:	68c3      	ldr	r3, [r0, #12]
 8007dc0:	930b      	str	r3, [sp, #44]	; 0x2c
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	60c3      	str	r3, [r0, #12]
 8007dc6:	4631      	mov	r1, r6
 8007dc8:	f002 f876 	bl	8009eb8 <__mcmp>
 8007dcc:	2800      	cmp	r0, #0
 8007dce:	da60      	bge.n	8007e92 <_strtod_l+0x892>
 8007dd0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007dd2:	ea53 030a 	orrs.w	r3, r3, sl
 8007dd6:	f040 8082 	bne.w	8007ede <_strtod_l+0x8de>
 8007dda:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d17d      	bne.n	8007ede <_strtod_l+0x8de>
 8007de2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007de6:	0d1b      	lsrs	r3, r3, #20
 8007de8:	051b      	lsls	r3, r3, #20
 8007dea:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007dee:	d976      	bls.n	8007ede <_strtod_l+0x8de>
 8007df0:	696b      	ldr	r3, [r5, #20]
 8007df2:	b913      	cbnz	r3, 8007dfa <_strtod_l+0x7fa>
 8007df4:	692b      	ldr	r3, [r5, #16]
 8007df6:	2b01      	cmp	r3, #1
 8007df8:	dd71      	ble.n	8007ede <_strtod_l+0x8de>
 8007dfa:	4629      	mov	r1, r5
 8007dfc:	2201      	movs	r2, #1
 8007dfe:	4620      	mov	r0, r4
 8007e00:	f001 ffea 	bl	8009dd8 <__lshift>
 8007e04:	4631      	mov	r1, r6
 8007e06:	4605      	mov	r5, r0
 8007e08:	f002 f856 	bl	8009eb8 <__mcmp>
 8007e0c:	2800      	cmp	r0, #0
 8007e0e:	dd66      	ble.n	8007ede <_strtod_l+0x8de>
 8007e10:	9904      	ldr	r1, [sp, #16]
 8007e12:	4a53      	ldr	r2, [pc, #332]	; (8007f60 <_strtod_l+0x960>)
 8007e14:	465b      	mov	r3, fp
 8007e16:	2900      	cmp	r1, #0
 8007e18:	f000 8081 	beq.w	8007f1e <_strtod_l+0x91e>
 8007e1c:	ea02 010b 	and.w	r1, r2, fp
 8007e20:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007e24:	dc7b      	bgt.n	8007f1e <_strtod_l+0x91e>
 8007e26:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007e2a:	f77f aea9 	ble.w	8007b80 <_strtod_l+0x580>
 8007e2e:	4b4d      	ldr	r3, [pc, #308]	; (8007f64 <_strtod_l+0x964>)
 8007e30:	4650      	mov	r0, sl
 8007e32:	4659      	mov	r1, fp
 8007e34:	2200      	movs	r2, #0
 8007e36:	f7f8 fbef 	bl	8000618 <__aeabi_dmul>
 8007e3a:	460b      	mov	r3, r1
 8007e3c:	4303      	orrs	r3, r0
 8007e3e:	bf08      	it	eq
 8007e40:	2322      	moveq	r3, #34	; 0x22
 8007e42:	4682      	mov	sl, r0
 8007e44:	468b      	mov	fp, r1
 8007e46:	bf08      	it	eq
 8007e48:	6023      	streq	r3, [r4, #0]
 8007e4a:	e62b      	b.n	8007aa4 <_strtod_l+0x4a4>
 8007e4c:	f04f 32ff 	mov.w	r2, #4294967295
 8007e50:	fa02 f303 	lsl.w	r3, r2, r3
 8007e54:	ea03 0a0a 	and.w	sl, r3, sl
 8007e58:	e6e3      	b.n	8007c22 <_strtod_l+0x622>
 8007e5a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8007e5e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8007e62:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8007e66:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8007e6a:	fa01 f308 	lsl.w	r3, r1, r8
 8007e6e:	9308      	str	r3, [sp, #32]
 8007e70:	910d      	str	r1, [sp, #52]	; 0x34
 8007e72:	e746      	b.n	8007d02 <_strtod_l+0x702>
 8007e74:	2300      	movs	r3, #0
 8007e76:	9308      	str	r3, [sp, #32]
 8007e78:	2301      	movs	r3, #1
 8007e7a:	930d      	str	r3, [sp, #52]	; 0x34
 8007e7c:	e741      	b.n	8007d02 <_strtod_l+0x702>
 8007e7e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007e80:	4642      	mov	r2, r8
 8007e82:	4620      	mov	r0, r4
 8007e84:	f001 ffa8 	bl	8009dd8 <__lshift>
 8007e88:	9018      	str	r0, [sp, #96]	; 0x60
 8007e8a:	2800      	cmp	r0, #0
 8007e8c:	f47f af6b 	bne.w	8007d66 <_strtod_l+0x766>
 8007e90:	e5fe      	b.n	8007a90 <_strtod_l+0x490>
 8007e92:	465f      	mov	r7, fp
 8007e94:	d16e      	bne.n	8007f74 <_strtod_l+0x974>
 8007e96:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007e98:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007e9c:	b342      	cbz	r2, 8007ef0 <_strtod_l+0x8f0>
 8007e9e:	4a32      	ldr	r2, [pc, #200]	; (8007f68 <_strtod_l+0x968>)
 8007ea0:	4293      	cmp	r3, r2
 8007ea2:	d128      	bne.n	8007ef6 <_strtod_l+0x8f6>
 8007ea4:	9b04      	ldr	r3, [sp, #16]
 8007ea6:	4651      	mov	r1, sl
 8007ea8:	b1eb      	cbz	r3, 8007ee6 <_strtod_l+0x8e6>
 8007eaa:	4b2d      	ldr	r3, [pc, #180]	; (8007f60 <_strtod_l+0x960>)
 8007eac:	403b      	ands	r3, r7
 8007eae:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007eb2:	f04f 32ff 	mov.w	r2, #4294967295
 8007eb6:	d819      	bhi.n	8007eec <_strtod_l+0x8ec>
 8007eb8:	0d1b      	lsrs	r3, r3, #20
 8007eba:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8007ec2:	4299      	cmp	r1, r3
 8007ec4:	d117      	bne.n	8007ef6 <_strtod_l+0x8f6>
 8007ec6:	4b29      	ldr	r3, [pc, #164]	; (8007f6c <_strtod_l+0x96c>)
 8007ec8:	429f      	cmp	r7, r3
 8007eca:	d102      	bne.n	8007ed2 <_strtod_l+0x8d2>
 8007ecc:	3101      	adds	r1, #1
 8007ece:	f43f addf 	beq.w	8007a90 <_strtod_l+0x490>
 8007ed2:	4b23      	ldr	r3, [pc, #140]	; (8007f60 <_strtod_l+0x960>)
 8007ed4:	403b      	ands	r3, r7
 8007ed6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8007eda:	f04f 0a00 	mov.w	sl, #0
 8007ede:	9b04      	ldr	r3, [sp, #16]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d1a4      	bne.n	8007e2e <_strtod_l+0x82e>
 8007ee4:	e5de      	b.n	8007aa4 <_strtod_l+0x4a4>
 8007ee6:	f04f 33ff 	mov.w	r3, #4294967295
 8007eea:	e7ea      	b.n	8007ec2 <_strtod_l+0x8c2>
 8007eec:	4613      	mov	r3, r2
 8007eee:	e7e8      	b.n	8007ec2 <_strtod_l+0x8c2>
 8007ef0:	ea53 030a 	orrs.w	r3, r3, sl
 8007ef4:	d08c      	beq.n	8007e10 <_strtod_l+0x810>
 8007ef6:	9b08      	ldr	r3, [sp, #32]
 8007ef8:	b1db      	cbz	r3, 8007f32 <_strtod_l+0x932>
 8007efa:	423b      	tst	r3, r7
 8007efc:	d0ef      	beq.n	8007ede <_strtod_l+0x8de>
 8007efe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f00:	9a04      	ldr	r2, [sp, #16]
 8007f02:	4650      	mov	r0, sl
 8007f04:	4659      	mov	r1, fp
 8007f06:	b1c3      	cbz	r3, 8007f3a <_strtod_l+0x93a>
 8007f08:	f7ff fb5e 	bl	80075c8 <sulp>
 8007f0c:	4602      	mov	r2, r0
 8007f0e:	460b      	mov	r3, r1
 8007f10:	ec51 0b18 	vmov	r0, r1, d8
 8007f14:	f7f8 f9ca 	bl	80002ac <__adddf3>
 8007f18:	4682      	mov	sl, r0
 8007f1a:	468b      	mov	fp, r1
 8007f1c:	e7df      	b.n	8007ede <_strtod_l+0x8de>
 8007f1e:	4013      	ands	r3, r2
 8007f20:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007f24:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007f28:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007f2c:	f04f 3aff 	mov.w	sl, #4294967295
 8007f30:	e7d5      	b.n	8007ede <_strtod_l+0x8de>
 8007f32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007f34:	ea13 0f0a 	tst.w	r3, sl
 8007f38:	e7e0      	b.n	8007efc <_strtod_l+0x8fc>
 8007f3a:	f7ff fb45 	bl	80075c8 <sulp>
 8007f3e:	4602      	mov	r2, r0
 8007f40:	460b      	mov	r3, r1
 8007f42:	ec51 0b18 	vmov	r0, r1, d8
 8007f46:	f7f8 f9af 	bl	80002a8 <__aeabi_dsub>
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	4682      	mov	sl, r0
 8007f50:	468b      	mov	fp, r1
 8007f52:	f7f8 fdc9 	bl	8000ae8 <__aeabi_dcmpeq>
 8007f56:	2800      	cmp	r0, #0
 8007f58:	d0c1      	beq.n	8007ede <_strtod_l+0x8de>
 8007f5a:	e611      	b.n	8007b80 <_strtod_l+0x580>
 8007f5c:	fffffc02 	.word	0xfffffc02
 8007f60:	7ff00000 	.word	0x7ff00000
 8007f64:	39500000 	.word	0x39500000
 8007f68:	000fffff 	.word	0x000fffff
 8007f6c:	7fefffff 	.word	0x7fefffff
 8007f70:	0800b200 	.word	0x0800b200
 8007f74:	4631      	mov	r1, r6
 8007f76:	4628      	mov	r0, r5
 8007f78:	f002 f91c 	bl	800a1b4 <__ratio>
 8007f7c:	ec59 8b10 	vmov	r8, r9, d0
 8007f80:	ee10 0a10 	vmov	r0, s0
 8007f84:	2200      	movs	r2, #0
 8007f86:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007f8a:	4649      	mov	r1, r9
 8007f8c:	f7f8 fdc0 	bl	8000b10 <__aeabi_dcmple>
 8007f90:	2800      	cmp	r0, #0
 8007f92:	d07a      	beq.n	800808a <_strtod_l+0xa8a>
 8007f94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d04a      	beq.n	8008030 <_strtod_l+0xa30>
 8007f9a:	4b95      	ldr	r3, [pc, #596]	; (80081f0 <_strtod_l+0xbf0>)
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007fa2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80081f0 <_strtod_l+0xbf0>
 8007fa6:	f04f 0800 	mov.w	r8, #0
 8007faa:	4b92      	ldr	r3, [pc, #584]	; (80081f4 <_strtod_l+0xbf4>)
 8007fac:	403b      	ands	r3, r7
 8007fae:	930d      	str	r3, [sp, #52]	; 0x34
 8007fb0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007fb2:	4b91      	ldr	r3, [pc, #580]	; (80081f8 <_strtod_l+0xbf8>)
 8007fb4:	429a      	cmp	r2, r3
 8007fb6:	f040 80b0 	bne.w	800811a <_strtod_l+0xb1a>
 8007fba:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007fbe:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8007fc2:	ec4b ab10 	vmov	d0, sl, fp
 8007fc6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007fca:	f002 f81b 	bl	800a004 <__ulp>
 8007fce:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007fd2:	ec53 2b10 	vmov	r2, r3, d0
 8007fd6:	f7f8 fb1f 	bl	8000618 <__aeabi_dmul>
 8007fda:	4652      	mov	r2, sl
 8007fdc:	465b      	mov	r3, fp
 8007fde:	f7f8 f965 	bl	80002ac <__adddf3>
 8007fe2:	460b      	mov	r3, r1
 8007fe4:	4983      	ldr	r1, [pc, #524]	; (80081f4 <_strtod_l+0xbf4>)
 8007fe6:	4a85      	ldr	r2, [pc, #532]	; (80081fc <_strtod_l+0xbfc>)
 8007fe8:	4019      	ands	r1, r3
 8007fea:	4291      	cmp	r1, r2
 8007fec:	4682      	mov	sl, r0
 8007fee:	d960      	bls.n	80080b2 <_strtod_l+0xab2>
 8007ff0:	ee18 3a90 	vmov	r3, s17
 8007ff4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007ff8:	4293      	cmp	r3, r2
 8007ffa:	d104      	bne.n	8008006 <_strtod_l+0xa06>
 8007ffc:	ee18 3a10 	vmov	r3, s16
 8008000:	3301      	adds	r3, #1
 8008002:	f43f ad45 	beq.w	8007a90 <_strtod_l+0x490>
 8008006:	f8df b200 	ldr.w	fp, [pc, #512]	; 8008208 <_strtod_l+0xc08>
 800800a:	f04f 3aff 	mov.w	sl, #4294967295
 800800e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008010:	4620      	mov	r0, r4
 8008012:	f001 fcc5 	bl	80099a0 <_Bfree>
 8008016:	9905      	ldr	r1, [sp, #20]
 8008018:	4620      	mov	r0, r4
 800801a:	f001 fcc1 	bl	80099a0 <_Bfree>
 800801e:	4631      	mov	r1, r6
 8008020:	4620      	mov	r0, r4
 8008022:	f001 fcbd 	bl	80099a0 <_Bfree>
 8008026:	4629      	mov	r1, r5
 8008028:	4620      	mov	r0, r4
 800802a:	f001 fcb9 	bl	80099a0 <_Bfree>
 800802e:	e61a      	b.n	8007c66 <_strtod_l+0x666>
 8008030:	f1ba 0f00 	cmp.w	sl, #0
 8008034:	d11b      	bne.n	800806e <_strtod_l+0xa6e>
 8008036:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800803a:	b9f3      	cbnz	r3, 800807a <_strtod_l+0xa7a>
 800803c:	4b6c      	ldr	r3, [pc, #432]	; (80081f0 <_strtod_l+0xbf0>)
 800803e:	2200      	movs	r2, #0
 8008040:	4640      	mov	r0, r8
 8008042:	4649      	mov	r1, r9
 8008044:	f7f8 fd5a 	bl	8000afc <__aeabi_dcmplt>
 8008048:	b9d0      	cbnz	r0, 8008080 <_strtod_l+0xa80>
 800804a:	4640      	mov	r0, r8
 800804c:	4649      	mov	r1, r9
 800804e:	4b6c      	ldr	r3, [pc, #432]	; (8008200 <_strtod_l+0xc00>)
 8008050:	2200      	movs	r2, #0
 8008052:	f7f8 fae1 	bl	8000618 <__aeabi_dmul>
 8008056:	4680      	mov	r8, r0
 8008058:	4689      	mov	r9, r1
 800805a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800805e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8008062:	9315      	str	r3, [sp, #84]	; 0x54
 8008064:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8008068:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800806c:	e79d      	b.n	8007faa <_strtod_l+0x9aa>
 800806e:	f1ba 0f01 	cmp.w	sl, #1
 8008072:	d102      	bne.n	800807a <_strtod_l+0xa7a>
 8008074:	2f00      	cmp	r7, #0
 8008076:	f43f ad83 	beq.w	8007b80 <_strtod_l+0x580>
 800807a:	4b62      	ldr	r3, [pc, #392]	; (8008204 <_strtod_l+0xc04>)
 800807c:	2200      	movs	r2, #0
 800807e:	e78e      	b.n	8007f9e <_strtod_l+0x99e>
 8008080:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8008200 <_strtod_l+0xc00>
 8008084:	f04f 0800 	mov.w	r8, #0
 8008088:	e7e7      	b.n	800805a <_strtod_l+0xa5a>
 800808a:	4b5d      	ldr	r3, [pc, #372]	; (8008200 <_strtod_l+0xc00>)
 800808c:	4640      	mov	r0, r8
 800808e:	4649      	mov	r1, r9
 8008090:	2200      	movs	r2, #0
 8008092:	f7f8 fac1 	bl	8000618 <__aeabi_dmul>
 8008096:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008098:	4680      	mov	r8, r0
 800809a:	4689      	mov	r9, r1
 800809c:	b933      	cbnz	r3, 80080ac <_strtod_l+0xaac>
 800809e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80080a2:	900e      	str	r0, [sp, #56]	; 0x38
 80080a4:	930f      	str	r3, [sp, #60]	; 0x3c
 80080a6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80080aa:	e7dd      	b.n	8008068 <_strtod_l+0xa68>
 80080ac:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80080b0:	e7f9      	b.n	80080a6 <_strtod_l+0xaa6>
 80080b2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80080b6:	9b04      	ldr	r3, [sp, #16]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d1a8      	bne.n	800800e <_strtod_l+0xa0e>
 80080bc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80080c0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80080c2:	0d1b      	lsrs	r3, r3, #20
 80080c4:	051b      	lsls	r3, r3, #20
 80080c6:	429a      	cmp	r2, r3
 80080c8:	d1a1      	bne.n	800800e <_strtod_l+0xa0e>
 80080ca:	4640      	mov	r0, r8
 80080cc:	4649      	mov	r1, r9
 80080ce:	f7f8 fe03 	bl	8000cd8 <__aeabi_d2lz>
 80080d2:	f7f8 fa73 	bl	80005bc <__aeabi_l2d>
 80080d6:	4602      	mov	r2, r0
 80080d8:	460b      	mov	r3, r1
 80080da:	4640      	mov	r0, r8
 80080dc:	4649      	mov	r1, r9
 80080de:	f7f8 f8e3 	bl	80002a8 <__aeabi_dsub>
 80080e2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80080e4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80080e8:	ea43 030a 	orr.w	r3, r3, sl
 80080ec:	4313      	orrs	r3, r2
 80080ee:	4680      	mov	r8, r0
 80080f0:	4689      	mov	r9, r1
 80080f2:	d055      	beq.n	80081a0 <_strtod_l+0xba0>
 80080f4:	a336      	add	r3, pc, #216	; (adr r3, 80081d0 <_strtod_l+0xbd0>)
 80080f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080fa:	f7f8 fcff 	bl	8000afc <__aeabi_dcmplt>
 80080fe:	2800      	cmp	r0, #0
 8008100:	f47f acd0 	bne.w	8007aa4 <_strtod_l+0x4a4>
 8008104:	a334      	add	r3, pc, #208	; (adr r3, 80081d8 <_strtod_l+0xbd8>)
 8008106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800810a:	4640      	mov	r0, r8
 800810c:	4649      	mov	r1, r9
 800810e:	f7f8 fd13 	bl	8000b38 <__aeabi_dcmpgt>
 8008112:	2800      	cmp	r0, #0
 8008114:	f43f af7b 	beq.w	800800e <_strtod_l+0xa0e>
 8008118:	e4c4      	b.n	8007aa4 <_strtod_l+0x4a4>
 800811a:	9b04      	ldr	r3, [sp, #16]
 800811c:	b333      	cbz	r3, 800816c <_strtod_l+0xb6c>
 800811e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008120:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008124:	d822      	bhi.n	800816c <_strtod_l+0xb6c>
 8008126:	a32e      	add	r3, pc, #184	; (adr r3, 80081e0 <_strtod_l+0xbe0>)
 8008128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800812c:	4640      	mov	r0, r8
 800812e:	4649      	mov	r1, r9
 8008130:	f7f8 fcee 	bl	8000b10 <__aeabi_dcmple>
 8008134:	b1a0      	cbz	r0, 8008160 <_strtod_l+0xb60>
 8008136:	4649      	mov	r1, r9
 8008138:	4640      	mov	r0, r8
 800813a:	f7f8 fd45 	bl	8000bc8 <__aeabi_d2uiz>
 800813e:	2801      	cmp	r0, #1
 8008140:	bf38      	it	cc
 8008142:	2001      	movcc	r0, #1
 8008144:	f7f8 f9ee 	bl	8000524 <__aeabi_ui2d>
 8008148:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800814a:	4680      	mov	r8, r0
 800814c:	4689      	mov	r9, r1
 800814e:	bb23      	cbnz	r3, 800819a <_strtod_l+0xb9a>
 8008150:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008154:	9010      	str	r0, [sp, #64]	; 0x40
 8008156:	9311      	str	r3, [sp, #68]	; 0x44
 8008158:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800815c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008160:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008162:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008164:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008168:	1a9b      	subs	r3, r3, r2
 800816a:	9309      	str	r3, [sp, #36]	; 0x24
 800816c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008170:	eeb0 0a48 	vmov.f32	s0, s16
 8008174:	eef0 0a68 	vmov.f32	s1, s17
 8008178:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800817c:	f001 ff42 	bl	800a004 <__ulp>
 8008180:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008184:	ec53 2b10 	vmov	r2, r3, d0
 8008188:	f7f8 fa46 	bl	8000618 <__aeabi_dmul>
 800818c:	ec53 2b18 	vmov	r2, r3, d8
 8008190:	f7f8 f88c 	bl	80002ac <__adddf3>
 8008194:	4682      	mov	sl, r0
 8008196:	468b      	mov	fp, r1
 8008198:	e78d      	b.n	80080b6 <_strtod_l+0xab6>
 800819a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800819e:	e7db      	b.n	8008158 <_strtod_l+0xb58>
 80081a0:	a311      	add	r3, pc, #68	; (adr r3, 80081e8 <_strtod_l+0xbe8>)
 80081a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081a6:	f7f8 fca9 	bl	8000afc <__aeabi_dcmplt>
 80081aa:	e7b2      	b.n	8008112 <_strtod_l+0xb12>
 80081ac:	2300      	movs	r3, #0
 80081ae:	930a      	str	r3, [sp, #40]	; 0x28
 80081b0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80081b2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80081b4:	6013      	str	r3, [r2, #0]
 80081b6:	f7ff ba6b 	b.w	8007690 <_strtod_l+0x90>
 80081ba:	2a65      	cmp	r2, #101	; 0x65
 80081bc:	f43f ab5f 	beq.w	800787e <_strtod_l+0x27e>
 80081c0:	2a45      	cmp	r2, #69	; 0x45
 80081c2:	f43f ab5c 	beq.w	800787e <_strtod_l+0x27e>
 80081c6:	2301      	movs	r3, #1
 80081c8:	f7ff bb94 	b.w	80078f4 <_strtod_l+0x2f4>
 80081cc:	f3af 8000 	nop.w
 80081d0:	94a03595 	.word	0x94a03595
 80081d4:	3fdfffff 	.word	0x3fdfffff
 80081d8:	35afe535 	.word	0x35afe535
 80081dc:	3fe00000 	.word	0x3fe00000
 80081e0:	ffc00000 	.word	0xffc00000
 80081e4:	41dfffff 	.word	0x41dfffff
 80081e8:	94a03595 	.word	0x94a03595
 80081ec:	3fcfffff 	.word	0x3fcfffff
 80081f0:	3ff00000 	.word	0x3ff00000
 80081f4:	7ff00000 	.word	0x7ff00000
 80081f8:	7fe00000 	.word	0x7fe00000
 80081fc:	7c9fffff 	.word	0x7c9fffff
 8008200:	3fe00000 	.word	0x3fe00000
 8008204:	bff00000 	.word	0xbff00000
 8008208:	7fefffff 	.word	0x7fefffff

0800820c <_strtod_r>:
 800820c:	4b01      	ldr	r3, [pc, #4]	; (8008214 <_strtod_r+0x8>)
 800820e:	f7ff b9f7 	b.w	8007600 <_strtod_l>
 8008212:	bf00      	nop
 8008214:	200000d8 	.word	0x200000d8

08008218 <_strtol_l.constprop.0>:
 8008218:	2b01      	cmp	r3, #1
 800821a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800821e:	d001      	beq.n	8008224 <_strtol_l.constprop.0+0xc>
 8008220:	2b24      	cmp	r3, #36	; 0x24
 8008222:	d906      	bls.n	8008232 <_strtol_l.constprop.0+0x1a>
 8008224:	f7fe fad8 	bl	80067d8 <__errno>
 8008228:	2316      	movs	r3, #22
 800822a:	6003      	str	r3, [r0, #0]
 800822c:	2000      	movs	r0, #0
 800822e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008232:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008318 <_strtol_l.constprop.0+0x100>
 8008236:	460d      	mov	r5, r1
 8008238:	462e      	mov	r6, r5
 800823a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800823e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8008242:	f017 0708 	ands.w	r7, r7, #8
 8008246:	d1f7      	bne.n	8008238 <_strtol_l.constprop.0+0x20>
 8008248:	2c2d      	cmp	r4, #45	; 0x2d
 800824a:	d132      	bne.n	80082b2 <_strtol_l.constprop.0+0x9a>
 800824c:	782c      	ldrb	r4, [r5, #0]
 800824e:	2701      	movs	r7, #1
 8008250:	1cb5      	adds	r5, r6, #2
 8008252:	2b00      	cmp	r3, #0
 8008254:	d05b      	beq.n	800830e <_strtol_l.constprop.0+0xf6>
 8008256:	2b10      	cmp	r3, #16
 8008258:	d109      	bne.n	800826e <_strtol_l.constprop.0+0x56>
 800825a:	2c30      	cmp	r4, #48	; 0x30
 800825c:	d107      	bne.n	800826e <_strtol_l.constprop.0+0x56>
 800825e:	782c      	ldrb	r4, [r5, #0]
 8008260:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008264:	2c58      	cmp	r4, #88	; 0x58
 8008266:	d14d      	bne.n	8008304 <_strtol_l.constprop.0+0xec>
 8008268:	786c      	ldrb	r4, [r5, #1]
 800826a:	2310      	movs	r3, #16
 800826c:	3502      	adds	r5, #2
 800826e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008272:	f108 38ff 	add.w	r8, r8, #4294967295
 8008276:	f04f 0c00 	mov.w	ip, #0
 800827a:	fbb8 f9f3 	udiv	r9, r8, r3
 800827e:	4666      	mov	r6, ip
 8008280:	fb03 8a19 	mls	sl, r3, r9, r8
 8008284:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8008288:	f1be 0f09 	cmp.w	lr, #9
 800828c:	d816      	bhi.n	80082bc <_strtol_l.constprop.0+0xa4>
 800828e:	4674      	mov	r4, lr
 8008290:	42a3      	cmp	r3, r4
 8008292:	dd24      	ble.n	80082de <_strtol_l.constprop.0+0xc6>
 8008294:	f1bc 0f00 	cmp.w	ip, #0
 8008298:	db1e      	blt.n	80082d8 <_strtol_l.constprop.0+0xc0>
 800829a:	45b1      	cmp	r9, r6
 800829c:	d31c      	bcc.n	80082d8 <_strtol_l.constprop.0+0xc0>
 800829e:	d101      	bne.n	80082a4 <_strtol_l.constprop.0+0x8c>
 80082a0:	45a2      	cmp	sl, r4
 80082a2:	db19      	blt.n	80082d8 <_strtol_l.constprop.0+0xc0>
 80082a4:	fb06 4603 	mla	r6, r6, r3, r4
 80082a8:	f04f 0c01 	mov.w	ip, #1
 80082ac:	f815 4b01 	ldrb.w	r4, [r5], #1
 80082b0:	e7e8      	b.n	8008284 <_strtol_l.constprop.0+0x6c>
 80082b2:	2c2b      	cmp	r4, #43	; 0x2b
 80082b4:	bf04      	itt	eq
 80082b6:	782c      	ldrbeq	r4, [r5, #0]
 80082b8:	1cb5      	addeq	r5, r6, #2
 80082ba:	e7ca      	b.n	8008252 <_strtol_l.constprop.0+0x3a>
 80082bc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80082c0:	f1be 0f19 	cmp.w	lr, #25
 80082c4:	d801      	bhi.n	80082ca <_strtol_l.constprop.0+0xb2>
 80082c6:	3c37      	subs	r4, #55	; 0x37
 80082c8:	e7e2      	b.n	8008290 <_strtol_l.constprop.0+0x78>
 80082ca:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80082ce:	f1be 0f19 	cmp.w	lr, #25
 80082d2:	d804      	bhi.n	80082de <_strtol_l.constprop.0+0xc6>
 80082d4:	3c57      	subs	r4, #87	; 0x57
 80082d6:	e7db      	b.n	8008290 <_strtol_l.constprop.0+0x78>
 80082d8:	f04f 3cff 	mov.w	ip, #4294967295
 80082dc:	e7e6      	b.n	80082ac <_strtol_l.constprop.0+0x94>
 80082de:	f1bc 0f00 	cmp.w	ip, #0
 80082e2:	da05      	bge.n	80082f0 <_strtol_l.constprop.0+0xd8>
 80082e4:	2322      	movs	r3, #34	; 0x22
 80082e6:	6003      	str	r3, [r0, #0]
 80082e8:	4646      	mov	r6, r8
 80082ea:	b942      	cbnz	r2, 80082fe <_strtol_l.constprop.0+0xe6>
 80082ec:	4630      	mov	r0, r6
 80082ee:	e79e      	b.n	800822e <_strtol_l.constprop.0+0x16>
 80082f0:	b107      	cbz	r7, 80082f4 <_strtol_l.constprop.0+0xdc>
 80082f2:	4276      	negs	r6, r6
 80082f4:	2a00      	cmp	r2, #0
 80082f6:	d0f9      	beq.n	80082ec <_strtol_l.constprop.0+0xd4>
 80082f8:	f1bc 0f00 	cmp.w	ip, #0
 80082fc:	d000      	beq.n	8008300 <_strtol_l.constprop.0+0xe8>
 80082fe:	1e69      	subs	r1, r5, #1
 8008300:	6011      	str	r1, [r2, #0]
 8008302:	e7f3      	b.n	80082ec <_strtol_l.constprop.0+0xd4>
 8008304:	2430      	movs	r4, #48	; 0x30
 8008306:	2b00      	cmp	r3, #0
 8008308:	d1b1      	bne.n	800826e <_strtol_l.constprop.0+0x56>
 800830a:	2308      	movs	r3, #8
 800830c:	e7af      	b.n	800826e <_strtol_l.constprop.0+0x56>
 800830e:	2c30      	cmp	r4, #48	; 0x30
 8008310:	d0a5      	beq.n	800825e <_strtol_l.constprop.0+0x46>
 8008312:	230a      	movs	r3, #10
 8008314:	e7ab      	b.n	800826e <_strtol_l.constprop.0+0x56>
 8008316:	bf00      	nop
 8008318:	0800b229 	.word	0x0800b229

0800831c <_strtol_r>:
 800831c:	f7ff bf7c 	b.w	8008218 <_strtol_l.constprop.0>

08008320 <quorem>:
 8008320:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008324:	6903      	ldr	r3, [r0, #16]
 8008326:	690c      	ldr	r4, [r1, #16]
 8008328:	42a3      	cmp	r3, r4
 800832a:	4607      	mov	r7, r0
 800832c:	f2c0 8081 	blt.w	8008432 <quorem+0x112>
 8008330:	3c01      	subs	r4, #1
 8008332:	f101 0814 	add.w	r8, r1, #20
 8008336:	f100 0514 	add.w	r5, r0, #20
 800833a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800833e:	9301      	str	r3, [sp, #4]
 8008340:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008344:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008348:	3301      	adds	r3, #1
 800834a:	429a      	cmp	r2, r3
 800834c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008350:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008354:	fbb2 f6f3 	udiv	r6, r2, r3
 8008358:	d331      	bcc.n	80083be <quorem+0x9e>
 800835a:	f04f 0e00 	mov.w	lr, #0
 800835e:	4640      	mov	r0, r8
 8008360:	46ac      	mov	ip, r5
 8008362:	46f2      	mov	sl, lr
 8008364:	f850 2b04 	ldr.w	r2, [r0], #4
 8008368:	b293      	uxth	r3, r2
 800836a:	fb06 e303 	mla	r3, r6, r3, lr
 800836e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008372:	b29b      	uxth	r3, r3
 8008374:	ebaa 0303 	sub.w	r3, sl, r3
 8008378:	f8dc a000 	ldr.w	sl, [ip]
 800837c:	0c12      	lsrs	r2, r2, #16
 800837e:	fa13 f38a 	uxtah	r3, r3, sl
 8008382:	fb06 e202 	mla	r2, r6, r2, lr
 8008386:	9300      	str	r3, [sp, #0]
 8008388:	9b00      	ldr	r3, [sp, #0]
 800838a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800838e:	b292      	uxth	r2, r2
 8008390:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008394:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008398:	f8bd 3000 	ldrh.w	r3, [sp]
 800839c:	4581      	cmp	r9, r0
 800839e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80083a2:	f84c 3b04 	str.w	r3, [ip], #4
 80083a6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80083aa:	d2db      	bcs.n	8008364 <quorem+0x44>
 80083ac:	f855 300b 	ldr.w	r3, [r5, fp]
 80083b0:	b92b      	cbnz	r3, 80083be <quorem+0x9e>
 80083b2:	9b01      	ldr	r3, [sp, #4]
 80083b4:	3b04      	subs	r3, #4
 80083b6:	429d      	cmp	r5, r3
 80083b8:	461a      	mov	r2, r3
 80083ba:	d32e      	bcc.n	800841a <quorem+0xfa>
 80083bc:	613c      	str	r4, [r7, #16]
 80083be:	4638      	mov	r0, r7
 80083c0:	f001 fd7a 	bl	8009eb8 <__mcmp>
 80083c4:	2800      	cmp	r0, #0
 80083c6:	db24      	blt.n	8008412 <quorem+0xf2>
 80083c8:	3601      	adds	r6, #1
 80083ca:	4628      	mov	r0, r5
 80083cc:	f04f 0c00 	mov.w	ip, #0
 80083d0:	f858 2b04 	ldr.w	r2, [r8], #4
 80083d4:	f8d0 e000 	ldr.w	lr, [r0]
 80083d8:	b293      	uxth	r3, r2
 80083da:	ebac 0303 	sub.w	r3, ip, r3
 80083de:	0c12      	lsrs	r2, r2, #16
 80083e0:	fa13 f38e 	uxtah	r3, r3, lr
 80083e4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80083e8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80083ec:	b29b      	uxth	r3, r3
 80083ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80083f2:	45c1      	cmp	r9, r8
 80083f4:	f840 3b04 	str.w	r3, [r0], #4
 80083f8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80083fc:	d2e8      	bcs.n	80083d0 <quorem+0xb0>
 80083fe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008402:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008406:	b922      	cbnz	r2, 8008412 <quorem+0xf2>
 8008408:	3b04      	subs	r3, #4
 800840a:	429d      	cmp	r5, r3
 800840c:	461a      	mov	r2, r3
 800840e:	d30a      	bcc.n	8008426 <quorem+0x106>
 8008410:	613c      	str	r4, [r7, #16]
 8008412:	4630      	mov	r0, r6
 8008414:	b003      	add	sp, #12
 8008416:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800841a:	6812      	ldr	r2, [r2, #0]
 800841c:	3b04      	subs	r3, #4
 800841e:	2a00      	cmp	r2, #0
 8008420:	d1cc      	bne.n	80083bc <quorem+0x9c>
 8008422:	3c01      	subs	r4, #1
 8008424:	e7c7      	b.n	80083b6 <quorem+0x96>
 8008426:	6812      	ldr	r2, [r2, #0]
 8008428:	3b04      	subs	r3, #4
 800842a:	2a00      	cmp	r2, #0
 800842c:	d1f0      	bne.n	8008410 <quorem+0xf0>
 800842e:	3c01      	subs	r4, #1
 8008430:	e7eb      	b.n	800840a <quorem+0xea>
 8008432:	2000      	movs	r0, #0
 8008434:	e7ee      	b.n	8008414 <quorem+0xf4>
	...

08008438 <_dtoa_r>:
 8008438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800843c:	ed2d 8b04 	vpush	{d8-d9}
 8008440:	ec57 6b10 	vmov	r6, r7, d0
 8008444:	b093      	sub	sp, #76	; 0x4c
 8008446:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008448:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800844c:	9106      	str	r1, [sp, #24]
 800844e:	ee10 aa10 	vmov	sl, s0
 8008452:	4604      	mov	r4, r0
 8008454:	9209      	str	r2, [sp, #36]	; 0x24
 8008456:	930c      	str	r3, [sp, #48]	; 0x30
 8008458:	46bb      	mov	fp, r7
 800845a:	b975      	cbnz	r5, 800847a <_dtoa_r+0x42>
 800845c:	2010      	movs	r0, #16
 800845e:	f001 fa45 	bl	80098ec <malloc>
 8008462:	4602      	mov	r2, r0
 8008464:	6260      	str	r0, [r4, #36]	; 0x24
 8008466:	b920      	cbnz	r0, 8008472 <_dtoa_r+0x3a>
 8008468:	4ba7      	ldr	r3, [pc, #668]	; (8008708 <_dtoa_r+0x2d0>)
 800846a:	21ea      	movs	r1, #234	; 0xea
 800846c:	48a7      	ldr	r0, [pc, #668]	; (800870c <_dtoa_r+0x2d4>)
 800846e:	f002 fc17 	bl	800aca0 <__assert_func>
 8008472:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008476:	6005      	str	r5, [r0, #0]
 8008478:	60c5      	str	r5, [r0, #12]
 800847a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800847c:	6819      	ldr	r1, [r3, #0]
 800847e:	b151      	cbz	r1, 8008496 <_dtoa_r+0x5e>
 8008480:	685a      	ldr	r2, [r3, #4]
 8008482:	604a      	str	r2, [r1, #4]
 8008484:	2301      	movs	r3, #1
 8008486:	4093      	lsls	r3, r2
 8008488:	608b      	str	r3, [r1, #8]
 800848a:	4620      	mov	r0, r4
 800848c:	f001 fa88 	bl	80099a0 <_Bfree>
 8008490:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008492:	2200      	movs	r2, #0
 8008494:	601a      	str	r2, [r3, #0]
 8008496:	1e3b      	subs	r3, r7, #0
 8008498:	bfaa      	itet	ge
 800849a:	2300      	movge	r3, #0
 800849c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80084a0:	f8c8 3000 	strge.w	r3, [r8]
 80084a4:	4b9a      	ldr	r3, [pc, #616]	; (8008710 <_dtoa_r+0x2d8>)
 80084a6:	bfbc      	itt	lt
 80084a8:	2201      	movlt	r2, #1
 80084aa:	f8c8 2000 	strlt.w	r2, [r8]
 80084ae:	ea33 030b 	bics.w	r3, r3, fp
 80084b2:	d11b      	bne.n	80084ec <_dtoa_r+0xb4>
 80084b4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80084b6:	f242 730f 	movw	r3, #9999	; 0x270f
 80084ba:	6013      	str	r3, [r2, #0]
 80084bc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80084c0:	4333      	orrs	r3, r6
 80084c2:	f000 8592 	beq.w	8008fea <_dtoa_r+0xbb2>
 80084c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80084c8:	b963      	cbnz	r3, 80084e4 <_dtoa_r+0xac>
 80084ca:	4b92      	ldr	r3, [pc, #584]	; (8008714 <_dtoa_r+0x2dc>)
 80084cc:	e022      	b.n	8008514 <_dtoa_r+0xdc>
 80084ce:	4b92      	ldr	r3, [pc, #584]	; (8008718 <_dtoa_r+0x2e0>)
 80084d0:	9301      	str	r3, [sp, #4]
 80084d2:	3308      	adds	r3, #8
 80084d4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80084d6:	6013      	str	r3, [r2, #0]
 80084d8:	9801      	ldr	r0, [sp, #4]
 80084da:	b013      	add	sp, #76	; 0x4c
 80084dc:	ecbd 8b04 	vpop	{d8-d9}
 80084e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084e4:	4b8b      	ldr	r3, [pc, #556]	; (8008714 <_dtoa_r+0x2dc>)
 80084e6:	9301      	str	r3, [sp, #4]
 80084e8:	3303      	adds	r3, #3
 80084ea:	e7f3      	b.n	80084d4 <_dtoa_r+0x9c>
 80084ec:	2200      	movs	r2, #0
 80084ee:	2300      	movs	r3, #0
 80084f0:	4650      	mov	r0, sl
 80084f2:	4659      	mov	r1, fp
 80084f4:	f7f8 faf8 	bl	8000ae8 <__aeabi_dcmpeq>
 80084f8:	ec4b ab19 	vmov	d9, sl, fp
 80084fc:	4680      	mov	r8, r0
 80084fe:	b158      	cbz	r0, 8008518 <_dtoa_r+0xe0>
 8008500:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008502:	2301      	movs	r3, #1
 8008504:	6013      	str	r3, [r2, #0]
 8008506:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008508:	2b00      	cmp	r3, #0
 800850a:	f000 856b 	beq.w	8008fe4 <_dtoa_r+0xbac>
 800850e:	4883      	ldr	r0, [pc, #524]	; (800871c <_dtoa_r+0x2e4>)
 8008510:	6018      	str	r0, [r3, #0]
 8008512:	1e43      	subs	r3, r0, #1
 8008514:	9301      	str	r3, [sp, #4]
 8008516:	e7df      	b.n	80084d8 <_dtoa_r+0xa0>
 8008518:	ec4b ab10 	vmov	d0, sl, fp
 800851c:	aa10      	add	r2, sp, #64	; 0x40
 800851e:	a911      	add	r1, sp, #68	; 0x44
 8008520:	4620      	mov	r0, r4
 8008522:	f001 fdeb 	bl	800a0fc <__d2b>
 8008526:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800852a:	ee08 0a10 	vmov	s16, r0
 800852e:	2d00      	cmp	r5, #0
 8008530:	f000 8084 	beq.w	800863c <_dtoa_r+0x204>
 8008534:	ee19 3a90 	vmov	r3, s19
 8008538:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800853c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008540:	4656      	mov	r6, sl
 8008542:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008546:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800854a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800854e:	4b74      	ldr	r3, [pc, #464]	; (8008720 <_dtoa_r+0x2e8>)
 8008550:	2200      	movs	r2, #0
 8008552:	4630      	mov	r0, r6
 8008554:	4639      	mov	r1, r7
 8008556:	f7f7 fea7 	bl	80002a8 <__aeabi_dsub>
 800855a:	a365      	add	r3, pc, #404	; (adr r3, 80086f0 <_dtoa_r+0x2b8>)
 800855c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008560:	f7f8 f85a 	bl	8000618 <__aeabi_dmul>
 8008564:	a364      	add	r3, pc, #400	; (adr r3, 80086f8 <_dtoa_r+0x2c0>)
 8008566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800856a:	f7f7 fe9f 	bl	80002ac <__adddf3>
 800856e:	4606      	mov	r6, r0
 8008570:	4628      	mov	r0, r5
 8008572:	460f      	mov	r7, r1
 8008574:	f7f7 ffe6 	bl	8000544 <__aeabi_i2d>
 8008578:	a361      	add	r3, pc, #388	; (adr r3, 8008700 <_dtoa_r+0x2c8>)
 800857a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800857e:	f7f8 f84b 	bl	8000618 <__aeabi_dmul>
 8008582:	4602      	mov	r2, r0
 8008584:	460b      	mov	r3, r1
 8008586:	4630      	mov	r0, r6
 8008588:	4639      	mov	r1, r7
 800858a:	f7f7 fe8f 	bl	80002ac <__adddf3>
 800858e:	4606      	mov	r6, r0
 8008590:	460f      	mov	r7, r1
 8008592:	f7f8 faf1 	bl	8000b78 <__aeabi_d2iz>
 8008596:	2200      	movs	r2, #0
 8008598:	9000      	str	r0, [sp, #0]
 800859a:	2300      	movs	r3, #0
 800859c:	4630      	mov	r0, r6
 800859e:	4639      	mov	r1, r7
 80085a0:	f7f8 faac 	bl	8000afc <__aeabi_dcmplt>
 80085a4:	b150      	cbz	r0, 80085bc <_dtoa_r+0x184>
 80085a6:	9800      	ldr	r0, [sp, #0]
 80085a8:	f7f7 ffcc 	bl	8000544 <__aeabi_i2d>
 80085ac:	4632      	mov	r2, r6
 80085ae:	463b      	mov	r3, r7
 80085b0:	f7f8 fa9a 	bl	8000ae8 <__aeabi_dcmpeq>
 80085b4:	b910      	cbnz	r0, 80085bc <_dtoa_r+0x184>
 80085b6:	9b00      	ldr	r3, [sp, #0]
 80085b8:	3b01      	subs	r3, #1
 80085ba:	9300      	str	r3, [sp, #0]
 80085bc:	9b00      	ldr	r3, [sp, #0]
 80085be:	2b16      	cmp	r3, #22
 80085c0:	d85a      	bhi.n	8008678 <_dtoa_r+0x240>
 80085c2:	9a00      	ldr	r2, [sp, #0]
 80085c4:	4b57      	ldr	r3, [pc, #348]	; (8008724 <_dtoa_r+0x2ec>)
 80085c6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80085ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085ce:	ec51 0b19 	vmov	r0, r1, d9
 80085d2:	f7f8 fa93 	bl	8000afc <__aeabi_dcmplt>
 80085d6:	2800      	cmp	r0, #0
 80085d8:	d050      	beq.n	800867c <_dtoa_r+0x244>
 80085da:	9b00      	ldr	r3, [sp, #0]
 80085dc:	3b01      	subs	r3, #1
 80085de:	9300      	str	r3, [sp, #0]
 80085e0:	2300      	movs	r3, #0
 80085e2:	930b      	str	r3, [sp, #44]	; 0x2c
 80085e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80085e6:	1b5d      	subs	r5, r3, r5
 80085e8:	1e6b      	subs	r3, r5, #1
 80085ea:	9305      	str	r3, [sp, #20]
 80085ec:	bf45      	ittet	mi
 80085ee:	f1c5 0301 	rsbmi	r3, r5, #1
 80085f2:	9304      	strmi	r3, [sp, #16]
 80085f4:	2300      	movpl	r3, #0
 80085f6:	2300      	movmi	r3, #0
 80085f8:	bf4c      	ite	mi
 80085fa:	9305      	strmi	r3, [sp, #20]
 80085fc:	9304      	strpl	r3, [sp, #16]
 80085fe:	9b00      	ldr	r3, [sp, #0]
 8008600:	2b00      	cmp	r3, #0
 8008602:	db3d      	blt.n	8008680 <_dtoa_r+0x248>
 8008604:	9b05      	ldr	r3, [sp, #20]
 8008606:	9a00      	ldr	r2, [sp, #0]
 8008608:	920a      	str	r2, [sp, #40]	; 0x28
 800860a:	4413      	add	r3, r2
 800860c:	9305      	str	r3, [sp, #20]
 800860e:	2300      	movs	r3, #0
 8008610:	9307      	str	r3, [sp, #28]
 8008612:	9b06      	ldr	r3, [sp, #24]
 8008614:	2b09      	cmp	r3, #9
 8008616:	f200 8089 	bhi.w	800872c <_dtoa_r+0x2f4>
 800861a:	2b05      	cmp	r3, #5
 800861c:	bfc4      	itt	gt
 800861e:	3b04      	subgt	r3, #4
 8008620:	9306      	strgt	r3, [sp, #24]
 8008622:	9b06      	ldr	r3, [sp, #24]
 8008624:	f1a3 0302 	sub.w	r3, r3, #2
 8008628:	bfcc      	ite	gt
 800862a:	2500      	movgt	r5, #0
 800862c:	2501      	movle	r5, #1
 800862e:	2b03      	cmp	r3, #3
 8008630:	f200 8087 	bhi.w	8008742 <_dtoa_r+0x30a>
 8008634:	e8df f003 	tbb	[pc, r3]
 8008638:	59383a2d 	.word	0x59383a2d
 800863c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008640:	441d      	add	r5, r3
 8008642:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008646:	2b20      	cmp	r3, #32
 8008648:	bfc1      	itttt	gt
 800864a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800864e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008652:	fa0b f303 	lslgt.w	r3, fp, r3
 8008656:	fa26 f000 	lsrgt.w	r0, r6, r0
 800865a:	bfda      	itte	le
 800865c:	f1c3 0320 	rsble	r3, r3, #32
 8008660:	fa06 f003 	lslle.w	r0, r6, r3
 8008664:	4318      	orrgt	r0, r3
 8008666:	f7f7 ff5d 	bl	8000524 <__aeabi_ui2d>
 800866a:	2301      	movs	r3, #1
 800866c:	4606      	mov	r6, r0
 800866e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008672:	3d01      	subs	r5, #1
 8008674:	930e      	str	r3, [sp, #56]	; 0x38
 8008676:	e76a      	b.n	800854e <_dtoa_r+0x116>
 8008678:	2301      	movs	r3, #1
 800867a:	e7b2      	b.n	80085e2 <_dtoa_r+0x1aa>
 800867c:	900b      	str	r0, [sp, #44]	; 0x2c
 800867e:	e7b1      	b.n	80085e4 <_dtoa_r+0x1ac>
 8008680:	9b04      	ldr	r3, [sp, #16]
 8008682:	9a00      	ldr	r2, [sp, #0]
 8008684:	1a9b      	subs	r3, r3, r2
 8008686:	9304      	str	r3, [sp, #16]
 8008688:	4253      	negs	r3, r2
 800868a:	9307      	str	r3, [sp, #28]
 800868c:	2300      	movs	r3, #0
 800868e:	930a      	str	r3, [sp, #40]	; 0x28
 8008690:	e7bf      	b.n	8008612 <_dtoa_r+0x1da>
 8008692:	2300      	movs	r3, #0
 8008694:	9308      	str	r3, [sp, #32]
 8008696:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008698:	2b00      	cmp	r3, #0
 800869a:	dc55      	bgt.n	8008748 <_dtoa_r+0x310>
 800869c:	2301      	movs	r3, #1
 800869e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80086a2:	461a      	mov	r2, r3
 80086a4:	9209      	str	r2, [sp, #36]	; 0x24
 80086a6:	e00c      	b.n	80086c2 <_dtoa_r+0x28a>
 80086a8:	2301      	movs	r3, #1
 80086aa:	e7f3      	b.n	8008694 <_dtoa_r+0x25c>
 80086ac:	2300      	movs	r3, #0
 80086ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80086b0:	9308      	str	r3, [sp, #32]
 80086b2:	9b00      	ldr	r3, [sp, #0]
 80086b4:	4413      	add	r3, r2
 80086b6:	9302      	str	r3, [sp, #8]
 80086b8:	3301      	adds	r3, #1
 80086ba:	2b01      	cmp	r3, #1
 80086bc:	9303      	str	r3, [sp, #12]
 80086be:	bfb8      	it	lt
 80086c0:	2301      	movlt	r3, #1
 80086c2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80086c4:	2200      	movs	r2, #0
 80086c6:	6042      	str	r2, [r0, #4]
 80086c8:	2204      	movs	r2, #4
 80086ca:	f102 0614 	add.w	r6, r2, #20
 80086ce:	429e      	cmp	r6, r3
 80086d0:	6841      	ldr	r1, [r0, #4]
 80086d2:	d93d      	bls.n	8008750 <_dtoa_r+0x318>
 80086d4:	4620      	mov	r0, r4
 80086d6:	f001 f923 	bl	8009920 <_Balloc>
 80086da:	9001      	str	r0, [sp, #4]
 80086dc:	2800      	cmp	r0, #0
 80086de:	d13b      	bne.n	8008758 <_dtoa_r+0x320>
 80086e0:	4b11      	ldr	r3, [pc, #68]	; (8008728 <_dtoa_r+0x2f0>)
 80086e2:	4602      	mov	r2, r0
 80086e4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80086e8:	e6c0      	b.n	800846c <_dtoa_r+0x34>
 80086ea:	2301      	movs	r3, #1
 80086ec:	e7df      	b.n	80086ae <_dtoa_r+0x276>
 80086ee:	bf00      	nop
 80086f0:	636f4361 	.word	0x636f4361
 80086f4:	3fd287a7 	.word	0x3fd287a7
 80086f8:	8b60c8b3 	.word	0x8b60c8b3
 80086fc:	3fc68a28 	.word	0x3fc68a28
 8008700:	509f79fb 	.word	0x509f79fb
 8008704:	3fd34413 	.word	0x3fd34413
 8008708:	0800b336 	.word	0x0800b336
 800870c:	0800b34d 	.word	0x0800b34d
 8008710:	7ff00000 	.word	0x7ff00000
 8008714:	0800b332 	.word	0x0800b332
 8008718:	0800b329 	.word	0x0800b329
 800871c:	0800b1a9 	.word	0x0800b1a9
 8008720:	3ff80000 	.word	0x3ff80000
 8008724:	0800b520 	.word	0x0800b520
 8008728:	0800b3a8 	.word	0x0800b3a8
 800872c:	2501      	movs	r5, #1
 800872e:	2300      	movs	r3, #0
 8008730:	9306      	str	r3, [sp, #24]
 8008732:	9508      	str	r5, [sp, #32]
 8008734:	f04f 33ff 	mov.w	r3, #4294967295
 8008738:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800873c:	2200      	movs	r2, #0
 800873e:	2312      	movs	r3, #18
 8008740:	e7b0      	b.n	80086a4 <_dtoa_r+0x26c>
 8008742:	2301      	movs	r3, #1
 8008744:	9308      	str	r3, [sp, #32]
 8008746:	e7f5      	b.n	8008734 <_dtoa_r+0x2fc>
 8008748:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800874a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800874e:	e7b8      	b.n	80086c2 <_dtoa_r+0x28a>
 8008750:	3101      	adds	r1, #1
 8008752:	6041      	str	r1, [r0, #4]
 8008754:	0052      	lsls	r2, r2, #1
 8008756:	e7b8      	b.n	80086ca <_dtoa_r+0x292>
 8008758:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800875a:	9a01      	ldr	r2, [sp, #4]
 800875c:	601a      	str	r2, [r3, #0]
 800875e:	9b03      	ldr	r3, [sp, #12]
 8008760:	2b0e      	cmp	r3, #14
 8008762:	f200 809d 	bhi.w	80088a0 <_dtoa_r+0x468>
 8008766:	2d00      	cmp	r5, #0
 8008768:	f000 809a 	beq.w	80088a0 <_dtoa_r+0x468>
 800876c:	9b00      	ldr	r3, [sp, #0]
 800876e:	2b00      	cmp	r3, #0
 8008770:	dd32      	ble.n	80087d8 <_dtoa_r+0x3a0>
 8008772:	4ab7      	ldr	r2, [pc, #732]	; (8008a50 <_dtoa_r+0x618>)
 8008774:	f003 030f 	and.w	r3, r3, #15
 8008778:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800877c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008780:	9b00      	ldr	r3, [sp, #0]
 8008782:	05d8      	lsls	r0, r3, #23
 8008784:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008788:	d516      	bpl.n	80087b8 <_dtoa_r+0x380>
 800878a:	4bb2      	ldr	r3, [pc, #712]	; (8008a54 <_dtoa_r+0x61c>)
 800878c:	ec51 0b19 	vmov	r0, r1, d9
 8008790:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008794:	f7f8 f86a 	bl	800086c <__aeabi_ddiv>
 8008798:	f007 070f 	and.w	r7, r7, #15
 800879c:	4682      	mov	sl, r0
 800879e:	468b      	mov	fp, r1
 80087a0:	2503      	movs	r5, #3
 80087a2:	4eac      	ldr	r6, [pc, #688]	; (8008a54 <_dtoa_r+0x61c>)
 80087a4:	b957      	cbnz	r7, 80087bc <_dtoa_r+0x384>
 80087a6:	4642      	mov	r2, r8
 80087a8:	464b      	mov	r3, r9
 80087aa:	4650      	mov	r0, sl
 80087ac:	4659      	mov	r1, fp
 80087ae:	f7f8 f85d 	bl	800086c <__aeabi_ddiv>
 80087b2:	4682      	mov	sl, r0
 80087b4:	468b      	mov	fp, r1
 80087b6:	e028      	b.n	800880a <_dtoa_r+0x3d2>
 80087b8:	2502      	movs	r5, #2
 80087ba:	e7f2      	b.n	80087a2 <_dtoa_r+0x36a>
 80087bc:	07f9      	lsls	r1, r7, #31
 80087be:	d508      	bpl.n	80087d2 <_dtoa_r+0x39a>
 80087c0:	4640      	mov	r0, r8
 80087c2:	4649      	mov	r1, r9
 80087c4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80087c8:	f7f7 ff26 	bl	8000618 <__aeabi_dmul>
 80087cc:	3501      	adds	r5, #1
 80087ce:	4680      	mov	r8, r0
 80087d0:	4689      	mov	r9, r1
 80087d2:	107f      	asrs	r7, r7, #1
 80087d4:	3608      	adds	r6, #8
 80087d6:	e7e5      	b.n	80087a4 <_dtoa_r+0x36c>
 80087d8:	f000 809b 	beq.w	8008912 <_dtoa_r+0x4da>
 80087dc:	9b00      	ldr	r3, [sp, #0]
 80087de:	4f9d      	ldr	r7, [pc, #628]	; (8008a54 <_dtoa_r+0x61c>)
 80087e0:	425e      	negs	r6, r3
 80087e2:	4b9b      	ldr	r3, [pc, #620]	; (8008a50 <_dtoa_r+0x618>)
 80087e4:	f006 020f 	and.w	r2, r6, #15
 80087e8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80087ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087f0:	ec51 0b19 	vmov	r0, r1, d9
 80087f4:	f7f7 ff10 	bl	8000618 <__aeabi_dmul>
 80087f8:	1136      	asrs	r6, r6, #4
 80087fa:	4682      	mov	sl, r0
 80087fc:	468b      	mov	fp, r1
 80087fe:	2300      	movs	r3, #0
 8008800:	2502      	movs	r5, #2
 8008802:	2e00      	cmp	r6, #0
 8008804:	d17a      	bne.n	80088fc <_dtoa_r+0x4c4>
 8008806:	2b00      	cmp	r3, #0
 8008808:	d1d3      	bne.n	80087b2 <_dtoa_r+0x37a>
 800880a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800880c:	2b00      	cmp	r3, #0
 800880e:	f000 8082 	beq.w	8008916 <_dtoa_r+0x4de>
 8008812:	4b91      	ldr	r3, [pc, #580]	; (8008a58 <_dtoa_r+0x620>)
 8008814:	2200      	movs	r2, #0
 8008816:	4650      	mov	r0, sl
 8008818:	4659      	mov	r1, fp
 800881a:	f7f8 f96f 	bl	8000afc <__aeabi_dcmplt>
 800881e:	2800      	cmp	r0, #0
 8008820:	d079      	beq.n	8008916 <_dtoa_r+0x4de>
 8008822:	9b03      	ldr	r3, [sp, #12]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d076      	beq.n	8008916 <_dtoa_r+0x4de>
 8008828:	9b02      	ldr	r3, [sp, #8]
 800882a:	2b00      	cmp	r3, #0
 800882c:	dd36      	ble.n	800889c <_dtoa_r+0x464>
 800882e:	9b00      	ldr	r3, [sp, #0]
 8008830:	4650      	mov	r0, sl
 8008832:	4659      	mov	r1, fp
 8008834:	1e5f      	subs	r7, r3, #1
 8008836:	2200      	movs	r2, #0
 8008838:	4b88      	ldr	r3, [pc, #544]	; (8008a5c <_dtoa_r+0x624>)
 800883a:	f7f7 feed 	bl	8000618 <__aeabi_dmul>
 800883e:	9e02      	ldr	r6, [sp, #8]
 8008840:	4682      	mov	sl, r0
 8008842:	468b      	mov	fp, r1
 8008844:	3501      	adds	r5, #1
 8008846:	4628      	mov	r0, r5
 8008848:	f7f7 fe7c 	bl	8000544 <__aeabi_i2d>
 800884c:	4652      	mov	r2, sl
 800884e:	465b      	mov	r3, fp
 8008850:	f7f7 fee2 	bl	8000618 <__aeabi_dmul>
 8008854:	4b82      	ldr	r3, [pc, #520]	; (8008a60 <_dtoa_r+0x628>)
 8008856:	2200      	movs	r2, #0
 8008858:	f7f7 fd28 	bl	80002ac <__adddf3>
 800885c:	46d0      	mov	r8, sl
 800885e:	46d9      	mov	r9, fp
 8008860:	4682      	mov	sl, r0
 8008862:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8008866:	2e00      	cmp	r6, #0
 8008868:	d158      	bne.n	800891c <_dtoa_r+0x4e4>
 800886a:	4b7e      	ldr	r3, [pc, #504]	; (8008a64 <_dtoa_r+0x62c>)
 800886c:	2200      	movs	r2, #0
 800886e:	4640      	mov	r0, r8
 8008870:	4649      	mov	r1, r9
 8008872:	f7f7 fd19 	bl	80002a8 <__aeabi_dsub>
 8008876:	4652      	mov	r2, sl
 8008878:	465b      	mov	r3, fp
 800887a:	4680      	mov	r8, r0
 800887c:	4689      	mov	r9, r1
 800887e:	f7f8 f95b 	bl	8000b38 <__aeabi_dcmpgt>
 8008882:	2800      	cmp	r0, #0
 8008884:	f040 8295 	bne.w	8008db2 <_dtoa_r+0x97a>
 8008888:	4652      	mov	r2, sl
 800888a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800888e:	4640      	mov	r0, r8
 8008890:	4649      	mov	r1, r9
 8008892:	f7f8 f933 	bl	8000afc <__aeabi_dcmplt>
 8008896:	2800      	cmp	r0, #0
 8008898:	f040 8289 	bne.w	8008dae <_dtoa_r+0x976>
 800889c:	ec5b ab19 	vmov	sl, fp, d9
 80088a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	f2c0 8148 	blt.w	8008b38 <_dtoa_r+0x700>
 80088a8:	9a00      	ldr	r2, [sp, #0]
 80088aa:	2a0e      	cmp	r2, #14
 80088ac:	f300 8144 	bgt.w	8008b38 <_dtoa_r+0x700>
 80088b0:	4b67      	ldr	r3, [pc, #412]	; (8008a50 <_dtoa_r+0x618>)
 80088b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80088b6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80088ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088bc:	2b00      	cmp	r3, #0
 80088be:	f280 80d5 	bge.w	8008a6c <_dtoa_r+0x634>
 80088c2:	9b03      	ldr	r3, [sp, #12]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	f300 80d1 	bgt.w	8008a6c <_dtoa_r+0x634>
 80088ca:	f040 826f 	bne.w	8008dac <_dtoa_r+0x974>
 80088ce:	4b65      	ldr	r3, [pc, #404]	; (8008a64 <_dtoa_r+0x62c>)
 80088d0:	2200      	movs	r2, #0
 80088d2:	4640      	mov	r0, r8
 80088d4:	4649      	mov	r1, r9
 80088d6:	f7f7 fe9f 	bl	8000618 <__aeabi_dmul>
 80088da:	4652      	mov	r2, sl
 80088dc:	465b      	mov	r3, fp
 80088de:	f7f8 f921 	bl	8000b24 <__aeabi_dcmpge>
 80088e2:	9e03      	ldr	r6, [sp, #12]
 80088e4:	4637      	mov	r7, r6
 80088e6:	2800      	cmp	r0, #0
 80088e8:	f040 8245 	bne.w	8008d76 <_dtoa_r+0x93e>
 80088ec:	9d01      	ldr	r5, [sp, #4]
 80088ee:	2331      	movs	r3, #49	; 0x31
 80088f0:	f805 3b01 	strb.w	r3, [r5], #1
 80088f4:	9b00      	ldr	r3, [sp, #0]
 80088f6:	3301      	adds	r3, #1
 80088f8:	9300      	str	r3, [sp, #0]
 80088fa:	e240      	b.n	8008d7e <_dtoa_r+0x946>
 80088fc:	07f2      	lsls	r2, r6, #31
 80088fe:	d505      	bpl.n	800890c <_dtoa_r+0x4d4>
 8008900:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008904:	f7f7 fe88 	bl	8000618 <__aeabi_dmul>
 8008908:	3501      	adds	r5, #1
 800890a:	2301      	movs	r3, #1
 800890c:	1076      	asrs	r6, r6, #1
 800890e:	3708      	adds	r7, #8
 8008910:	e777      	b.n	8008802 <_dtoa_r+0x3ca>
 8008912:	2502      	movs	r5, #2
 8008914:	e779      	b.n	800880a <_dtoa_r+0x3d2>
 8008916:	9f00      	ldr	r7, [sp, #0]
 8008918:	9e03      	ldr	r6, [sp, #12]
 800891a:	e794      	b.n	8008846 <_dtoa_r+0x40e>
 800891c:	9901      	ldr	r1, [sp, #4]
 800891e:	4b4c      	ldr	r3, [pc, #304]	; (8008a50 <_dtoa_r+0x618>)
 8008920:	4431      	add	r1, r6
 8008922:	910d      	str	r1, [sp, #52]	; 0x34
 8008924:	9908      	ldr	r1, [sp, #32]
 8008926:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800892a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800892e:	2900      	cmp	r1, #0
 8008930:	d043      	beq.n	80089ba <_dtoa_r+0x582>
 8008932:	494d      	ldr	r1, [pc, #308]	; (8008a68 <_dtoa_r+0x630>)
 8008934:	2000      	movs	r0, #0
 8008936:	f7f7 ff99 	bl	800086c <__aeabi_ddiv>
 800893a:	4652      	mov	r2, sl
 800893c:	465b      	mov	r3, fp
 800893e:	f7f7 fcb3 	bl	80002a8 <__aeabi_dsub>
 8008942:	9d01      	ldr	r5, [sp, #4]
 8008944:	4682      	mov	sl, r0
 8008946:	468b      	mov	fp, r1
 8008948:	4649      	mov	r1, r9
 800894a:	4640      	mov	r0, r8
 800894c:	f7f8 f914 	bl	8000b78 <__aeabi_d2iz>
 8008950:	4606      	mov	r6, r0
 8008952:	f7f7 fdf7 	bl	8000544 <__aeabi_i2d>
 8008956:	4602      	mov	r2, r0
 8008958:	460b      	mov	r3, r1
 800895a:	4640      	mov	r0, r8
 800895c:	4649      	mov	r1, r9
 800895e:	f7f7 fca3 	bl	80002a8 <__aeabi_dsub>
 8008962:	3630      	adds	r6, #48	; 0x30
 8008964:	f805 6b01 	strb.w	r6, [r5], #1
 8008968:	4652      	mov	r2, sl
 800896a:	465b      	mov	r3, fp
 800896c:	4680      	mov	r8, r0
 800896e:	4689      	mov	r9, r1
 8008970:	f7f8 f8c4 	bl	8000afc <__aeabi_dcmplt>
 8008974:	2800      	cmp	r0, #0
 8008976:	d163      	bne.n	8008a40 <_dtoa_r+0x608>
 8008978:	4642      	mov	r2, r8
 800897a:	464b      	mov	r3, r9
 800897c:	4936      	ldr	r1, [pc, #216]	; (8008a58 <_dtoa_r+0x620>)
 800897e:	2000      	movs	r0, #0
 8008980:	f7f7 fc92 	bl	80002a8 <__aeabi_dsub>
 8008984:	4652      	mov	r2, sl
 8008986:	465b      	mov	r3, fp
 8008988:	f7f8 f8b8 	bl	8000afc <__aeabi_dcmplt>
 800898c:	2800      	cmp	r0, #0
 800898e:	f040 80b5 	bne.w	8008afc <_dtoa_r+0x6c4>
 8008992:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008994:	429d      	cmp	r5, r3
 8008996:	d081      	beq.n	800889c <_dtoa_r+0x464>
 8008998:	4b30      	ldr	r3, [pc, #192]	; (8008a5c <_dtoa_r+0x624>)
 800899a:	2200      	movs	r2, #0
 800899c:	4650      	mov	r0, sl
 800899e:	4659      	mov	r1, fp
 80089a0:	f7f7 fe3a 	bl	8000618 <__aeabi_dmul>
 80089a4:	4b2d      	ldr	r3, [pc, #180]	; (8008a5c <_dtoa_r+0x624>)
 80089a6:	4682      	mov	sl, r0
 80089a8:	468b      	mov	fp, r1
 80089aa:	4640      	mov	r0, r8
 80089ac:	4649      	mov	r1, r9
 80089ae:	2200      	movs	r2, #0
 80089b0:	f7f7 fe32 	bl	8000618 <__aeabi_dmul>
 80089b4:	4680      	mov	r8, r0
 80089b6:	4689      	mov	r9, r1
 80089b8:	e7c6      	b.n	8008948 <_dtoa_r+0x510>
 80089ba:	4650      	mov	r0, sl
 80089bc:	4659      	mov	r1, fp
 80089be:	f7f7 fe2b 	bl	8000618 <__aeabi_dmul>
 80089c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80089c4:	9d01      	ldr	r5, [sp, #4]
 80089c6:	930f      	str	r3, [sp, #60]	; 0x3c
 80089c8:	4682      	mov	sl, r0
 80089ca:	468b      	mov	fp, r1
 80089cc:	4649      	mov	r1, r9
 80089ce:	4640      	mov	r0, r8
 80089d0:	f7f8 f8d2 	bl	8000b78 <__aeabi_d2iz>
 80089d4:	4606      	mov	r6, r0
 80089d6:	f7f7 fdb5 	bl	8000544 <__aeabi_i2d>
 80089da:	3630      	adds	r6, #48	; 0x30
 80089dc:	4602      	mov	r2, r0
 80089de:	460b      	mov	r3, r1
 80089e0:	4640      	mov	r0, r8
 80089e2:	4649      	mov	r1, r9
 80089e4:	f7f7 fc60 	bl	80002a8 <__aeabi_dsub>
 80089e8:	f805 6b01 	strb.w	r6, [r5], #1
 80089ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80089ee:	429d      	cmp	r5, r3
 80089f0:	4680      	mov	r8, r0
 80089f2:	4689      	mov	r9, r1
 80089f4:	f04f 0200 	mov.w	r2, #0
 80089f8:	d124      	bne.n	8008a44 <_dtoa_r+0x60c>
 80089fa:	4b1b      	ldr	r3, [pc, #108]	; (8008a68 <_dtoa_r+0x630>)
 80089fc:	4650      	mov	r0, sl
 80089fe:	4659      	mov	r1, fp
 8008a00:	f7f7 fc54 	bl	80002ac <__adddf3>
 8008a04:	4602      	mov	r2, r0
 8008a06:	460b      	mov	r3, r1
 8008a08:	4640      	mov	r0, r8
 8008a0a:	4649      	mov	r1, r9
 8008a0c:	f7f8 f894 	bl	8000b38 <__aeabi_dcmpgt>
 8008a10:	2800      	cmp	r0, #0
 8008a12:	d173      	bne.n	8008afc <_dtoa_r+0x6c4>
 8008a14:	4652      	mov	r2, sl
 8008a16:	465b      	mov	r3, fp
 8008a18:	4913      	ldr	r1, [pc, #76]	; (8008a68 <_dtoa_r+0x630>)
 8008a1a:	2000      	movs	r0, #0
 8008a1c:	f7f7 fc44 	bl	80002a8 <__aeabi_dsub>
 8008a20:	4602      	mov	r2, r0
 8008a22:	460b      	mov	r3, r1
 8008a24:	4640      	mov	r0, r8
 8008a26:	4649      	mov	r1, r9
 8008a28:	f7f8 f868 	bl	8000afc <__aeabi_dcmplt>
 8008a2c:	2800      	cmp	r0, #0
 8008a2e:	f43f af35 	beq.w	800889c <_dtoa_r+0x464>
 8008a32:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008a34:	1e6b      	subs	r3, r5, #1
 8008a36:	930f      	str	r3, [sp, #60]	; 0x3c
 8008a38:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008a3c:	2b30      	cmp	r3, #48	; 0x30
 8008a3e:	d0f8      	beq.n	8008a32 <_dtoa_r+0x5fa>
 8008a40:	9700      	str	r7, [sp, #0]
 8008a42:	e049      	b.n	8008ad8 <_dtoa_r+0x6a0>
 8008a44:	4b05      	ldr	r3, [pc, #20]	; (8008a5c <_dtoa_r+0x624>)
 8008a46:	f7f7 fde7 	bl	8000618 <__aeabi_dmul>
 8008a4a:	4680      	mov	r8, r0
 8008a4c:	4689      	mov	r9, r1
 8008a4e:	e7bd      	b.n	80089cc <_dtoa_r+0x594>
 8008a50:	0800b520 	.word	0x0800b520
 8008a54:	0800b4f8 	.word	0x0800b4f8
 8008a58:	3ff00000 	.word	0x3ff00000
 8008a5c:	40240000 	.word	0x40240000
 8008a60:	401c0000 	.word	0x401c0000
 8008a64:	40140000 	.word	0x40140000
 8008a68:	3fe00000 	.word	0x3fe00000
 8008a6c:	9d01      	ldr	r5, [sp, #4]
 8008a6e:	4656      	mov	r6, sl
 8008a70:	465f      	mov	r7, fp
 8008a72:	4642      	mov	r2, r8
 8008a74:	464b      	mov	r3, r9
 8008a76:	4630      	mov	r0, r6
 8008a78:	4639      	mov	r1, r7
 8008a7a:	f7f7 fef7 	bl	800086c <__aeabi_ddiv>
 8008a7e:	f7f8 f87b 	bl	8000b78 <__aeabi_d2iz>
 8008a82:	4682      	mov	sl, r0
 8008a84:	f7f7 fd5e 	bl	8000544 <__aeabi_i2d>
 8008a88:	4642      	mov	r2, r8
 8008a8a:	464b      	mov	r3, r9
 8008a8c:	f7f7 fdc4 	bl	8000618 <__aeabi_dmul>
 8008a90:	4602      	mov	r2, r0
 8008a92:	460b      	mov	r3, r1
 8008a94:	4630      	mov	r0, r6
 8008a96:	4639      	mov	r1, r7
 8008a98:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8008a9c:	f7f7 fc04 	bl	80002a8 <__aeabi_dsub>
 8008aa0:	f805 6b01 	strb.w	r6, [r5], #1
 8008aa4:	9e01      	ldr	r6, [sp, #4]
 8008aa6:	9f03      	ldr	r7, [sp, #12]
 8008aa8:	1bae      	subs	r6, r5, r6
 8008aaa:	42b7      	cmp	r7, r6
 8008aac:	4602      	mov	r2, r0
 8008aae:	460b      	mov	r3, r1
 8008ab0:	d135      	bne.n	8008b1e <_dtoa_r+0x6e6>
 8008ab2:	f7f7 fbfb 	bl	80002ac <__adddf3>
 8008ab6:	4642      	mov	r2, r8
 8008ab8:	464b      	mov	r3, r9
 8008aba:	4606      	mov	r6, r0
 8008abc:	460f      	mov	r7, r1
 8008abe:	f7f8 f83b 	bl	8000b38 <__aeabi_dcmpgt>
 8008ac2:	b9d0      	cbnz	r0, 8008afa <_dtoa_r+0x6c2>
 8008ac4:	4642      	mov	r2, r8
 8008ac6:	464b      	mov	r3, r9
 8008ac8:	4630      	mov	r0, r6
 8008aca:	4639      	mov	r1, r7
 8008acc:	f7f8 f80c 	bl	8000ae8 <__aeabi_dcmpeq>
 8008ad0:	b110      	cbz	r0, 8008ad8 <_dtoa_r+0x6a0>
 8008ad2:	f01a 0f01 	tst.w	sl, #1
 8008ad6:	d110      	bne.n	8008afa <_dtoa_r+0x6c2>
 8008ad8:	4620      	mov	r0, r4
 8008ada:	ee18 1a10 	vmov	r1, s16
 8008ade:	f000 ff5f 	bl	80099a0 <_Bfree>
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	9800      	ldr	r0, [sp, #0]
 8008ae6:	702b      	strb	r3, [r5, #0]
 8008ae8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008aea:	3001      	adds	r0, #1
 8008aec:	6018      	str	r0, [r3, #0]
 8008aee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	f43f acf1 	beq.w	80084d8 <_dtoa_r+0xa0>
 8008af6:	601d      	str	r5, [r3, #0]
 8008af8:	e4ee      	b.n	80084d8 <_dtoa_r+0xa0>
 8008afa:	9f00      	ldr	r7, [sp, #0]
 8008afc:	462b      	mov	r3, r5
 8008afe:	461d      	mov	r5, r3
 8008b00:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008b04:	2a39      	cmp	r2, #57	; 0x39
 8008b06:	d106      	bne.n	8008b16 <_dtoa_r+0x6de>
 8008b08:	9a01      	ldr	r2, [sp, #4]
 8008b0a:	429a      	cmp	r2, r3
 8008b0c:	d1f7      	bne.n	8008afe <_dtoa_r+0x6c6>
 8008b0e:	9901      	ldr	r1, [sp, #4]
 8008b10:	2230      	movs	r2, #48	; 0x30
 8008b12:	3701      	adds	r7, #1
 8008b14:	700a      	strb	r2, [r1, #0]
 8008b16:	781a      	ldrb	r2, [r3, #0]
 8008b18:	3201      	adds	r2, #1
 8008b1a:	701a      	strb	r2, [r3, #0]
 8008b1c:	e790      	b.n	8008a40 <_dtoa_r+0x608>
 8008b1e:	4ba6      	ldr	r3, [pc, #664]	; (8008db8 <_dtoa_r+0x980>)
 8008b20:	2200      	movs	r2, #0
 8008b22:	f7f7 fd79 	bl	8000618 <__aeabi_dmul>
 8008b26:	2200      	movs	r2, #0
 8008b28:	2300      	movs	r3, #0
 8008b2a:	4606      	mov	r6, r0
 8008b2c:	460f      	mov	r7, r1
 8008b2e:	f7f7 ffdb 	bl	8000ae8 <__aeabi_dcmpeq>
 8008b32:	2800      	cmp	r0, #0
 8008b34:	d09d      	beq.n	8008a72 <_dtoa_r+0x63a>
 8008b36:	e7cf      	b.n	8008ad8 <_dtoa_r+0x6a0>
 8008b38:	9a08      	ldr	r2, [sp, #32]
 8008b3a:	2a00      	cmp	r2, #0
 8008b3c:	f000 80d7 	beq.w	8008cee <_dtoa_r+0x8b6>
 8008b40:	9a06      	ldr	r2, [sp, #24]
 8008b42:	2a01      	cmp	r2, #1
 8008b44:	f300 80ba 	bgt.w	8008cbc <_dtoa_r+0x884>
 8008b48:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008b4a:	2a00      	cmp	r2, #0
 8008b4c:	f000 80b2 	beq.w	8008cb4 <_dtoa_r+0x87c>
 8008b50:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008b54:	9e07      	ldr	r6, [sp, #28]
 8008b56:	9d04      	ldr	r5, [sp, #16]
 8008b58:	9a04      	ldr	r2, [sp, #16]
 8008b5a:	441a      	add	r2, r3
 8008b5c:	9204      	str	r2, [sp, #16]
 8008b5e:	9a05      	ldr	r2, [sp, #20]
 8008b60:	2101      	movs	r1, #1
 8008b62:	441a      	add	r2, r3
 8008b64:	4620      	mov	r0, r4
 8008b66:	9205      	str	r2, [sp, #20]
 8008b68:	f001 f81c 	bl	8009ba4 <__i2b>
 8008b6c:	4607      	mov	r7, r0
 8008b6e:	2d00      	cmp	r5, #0
 8008b70:	dd0c      	ble.n	8008b8c <_dtoa_r+0x754>
 8008b72:	9b05      	ldr	r3, [sp, #20]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	dd09      	ble.n	8008b8c <_dtoa_r+0x754>
 8008b78:	42ab      	cmp	r3, r5
 8008b7a:	9a04      	ldr	r2, [sp, #16]
 8008b7c:	bfa8      	it	ge
 8008b7e:	462b      	movge	r3, r5
 8008b80:	1ad2      	subs	r2, r2, r3
 8008b82:	9204      	str	r2, [sp, #16]
 8008b84:	9a05      	ldr	r2, [sp, #20]
 8008b86:	1aed      	subs	r5, r5, r3
 8008b88:	1ad3      	subs	r3, r2, r3
 8008b8a:	9305      	str	r3, [sp, #20]
 8008b8c:	9b07      	ldr	r3, [sp, #28]
 8008b8e:	b31b      	cbz	r3, 8008bd8 <_dtoa_r+0x7a0>
 8008b90:	9b08      	ldr	r3, [sp, #32]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	f000 80af 	beq.w	8008cf6 <_dtoa_r+0x8be>
 8008b98:	2e00      	cmp	r6, #0
 8008b9a:	dd13      	ble.n	8008bc4 <_dtoa_r+0x78c>
 8008b9c:	4639      	mov	r1, r7
 8008b9e:	4632      	mov	r2, r6
 8008ba0:	4620      	mov	r0, r4
 8008ba2:	f001 f8bf 	bl	8009d24 <__pow5mult>
 8008ba6:	ee18 2a10 	vmov	r2, s16
 8008baa:	4601      	mov	r1, r0
 8008bac:	4607      	mov	r7, r0
 8008bae:	4620      	mov	r0, r4
 8008bb0:	f001 f80e 	bl	8009bd0 <__multiply>
 8008bb4:	ee18 1a10 	vmov	r1, s16
 8008bb8:	4680      	mov	r8, r0
 8008bba:	4620      	mov	r0, r4
 8008bbc:	f000 fef0 	bl	80099a0 <_Bfree>
 8008bc0:	ee08 8a10 	vmov	s16, r8
 8008bc4:	9b07      	ldr	r3, [sp, #28]
 8008bc6:	1b9a      	subs	r2, r3, r6
 8008bc8:	d006      	beq.n	8008bd8 <_dtoa_r+0x7a0>
 8008bca:	ee18 1a10 	vmov	r1, s16
 8008bce:	4620      	mov	r0, r4
 8008bd0:	f001 f8a8 	bl	8009d24 <__pow5mult>
 8008bd4:	ee08 0a10 	vmov	s16, r0
 8008bd8:	2101      	movs	r1, #1
 8008bda:	4620      	mov	r0, r4
 8008bdc:	f000 ffe2 	bl	8009ba4 <__i2b>
 8008be0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	4606      	mov	r6, r0
 8008be6:	f340 8088 	ble.w	8008cfa <_dtoa_r+0x8c2>
 8008bea:	461a      	mov	r2, r3
 8008bec:	4601      	mov	r1, r0
 8008bee:	4620      	mov	r0, r4
 8008bf0:	f001 f898 	bl	8009d24 <__pow5mult>
 8008bf4:	9b06      	ldr	r3, [sp, #24]
 8008bf6:	2b01      	cmp	r3, #1
 8008bf8:	4606      	mov	r6, r0
 8008bfa:	f340 8081 	ble.w	8008d00 <_dtoa_r+0x8c8>
 8008bfe:	f04f 0800 	mov.w	r8, #0
 8008c02:	6933      	ldr	r3, [r6, #16]
 8008c04:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008c08:	6918      	ldr	r0, [r3, #16]
 8008c0a:	f000 ff7b 	bl	8009b04 <__hi0bits>
 8008c0e:	f1c0 0020 	rsb	r0, r0, #32
 8008c12:	9b05      	ldr	r3, [sp, #20]
 8008c14:	4418      	add	r0, r3
 8008c16:	f010 001f 	ands.w	r0, r0, #31
 8008c1a:	f000 8092 	beq.w	8008d42 <_dtoa_r+0x90a>
 8008c1e:	f1c0 0320 	rsb	r3, r0, #32
 8008c22:	2b04      	cmp	r3, #4
 8008c24:	f340 808a 	ble.w	8008d3c <_dtoa_r+0x904>
 8008c28:	f1c0 001c 	rsb	r0, r0, #28
 8008c2c:	9b04      	ldr	r3, [sp, #16]
 8008c2e:	4403      	add	r3, r0
 8008c30:	9304      	str	r3, [sp, #16]
 8008c32:	9b05      	ldr	r3, [sp, #20]
 8008c34:	4403      	add	r3, r0
 8008c36:	4405      	add	r5, r0
 8008c38:	9305      	str	r3, [sp, #20]
 8008c3a:	9b04      	ldr	r3, [sp, #16]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	dd07      	ble.n	8008c50 <_dtoa_r+0x818>
 8008c40:	ee18 1a10 	vmov	r1, s16
 8008c44:	461a      	mov	r2, r3
 8008c46:	4620      	mov	r0, r4
 8008c48:	f001 f8c6 	bl	8009dd8 <__lshift>
 8008c4c:	ee08 0a10 	vmov	s16, r0
 8008c50:	9b05      	ldr	r3, [sp, #20]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	dd05      	ble.n	8008c62 <_dtoa_r+0x82a>
 8008c56:	4631      	mov	r1, r6
 8008c58:	461a      	mov	r2, r3
 8008c5a:	4620      	mov	r0, r4
 8008c5c:	f001 f8bc 	bl	8009dd8 <__lshift>
 8008c60:	4606      	mov	r6, r0
 8008c62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d06e      	beq.n	8008d46 <_dtoa_r+0x90e>
 8008c68:	ee18 0a10 	vmov	r0, s16
 8008c6c:	4631      	mov	r1, r6
 8008c6e:	f001 f923 	bl	8009eb8 <__mcmp>
 8008c72:	2800      	cmp	r0, #0
 8008c74:	da67      	bge.n	8008d46 <_dtoa_r+0x90e>
 8008c76:	9b00      	ldr	r3, [sp, #0]
 8008c78:	3b01      	subs	r3, #1
 8008c7a:	ee18 1a10 	vmov	r1, s16
 8008c7e:	9300      	str	r3, [sp, #0]
 8008c80:	220a      	movs	r2, #10
 8008c82:	2300      	movs	r3, #0
 8008c84:	4620      	mov	r0, r4
 8008c86:	f000 fead 	bl	80099e4 <__multadd>
 8008c8a:	9b08      	ldr	r3, [sp, #32]
 8008c8c:	ee08 0a10 	vmov	s16, r0
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	f000 81b1 	beq.w	8008ff8 <_dtoa_r+0xbc0>
 8008c96:	2300      	movs	r3, #0
 8008c98:	4639      	mov	r1, r7
 8008c9a:	220a      	movs	r2, #10
 8008c9c:	4620      	mov	r0, r4
 8008c9e:	f000 fea1 	bl	80099e4 <__multadd>
 8008ca2:	9b02      	ldr	r3, [sp, #8]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	4607      	mov	r7, r0
 8008ca8:	f300 808e 	bgt.w	8008dc8 <_dtoa_r+0x990>
 8008cac:	9b06      	ldr	r3, [sp, #24]
 8008cae:	2b02      	cmp	r3, #2
 8008cb0:	dc51      	bgt.n	8008d56 <_dtoa_r+0x91e>
 8008cb2:	e089      	b.n	8008dc8 <_dtoa_r+0x990>
 8008cb4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008cb6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008cba:	e74b      	b.n	8008b54 <_dtoa_r+0x71c>
 8008cbc:	9b03      	ldr	r3, [sp, #12]
 8008cbe:	1e5e      	subs	r6, r3, #1
 8008cc0:	9b07      	ldr	r3, [sp, #28]
 8008cc2:	42b3      	cmp	r3, r6
 8008cc4:	bfbf      	itttt	lt
 8008cc6:	9b07      	ldrlt	r3, [sp, #28]
 8008cc8:	9607      	strlt	r6, [sp, #28]
 8008cca:	1af2      	sublt	r2, r6, r3
 8008ccc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008cce:	bfb6      	itet	lt
 8008cd0:	189b      	addlt	r3, r3, r2
 8008cd2:	1b9e      	subge	r6, r3, r6
 8008cd4:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008cd6:	9b03      	ldr	r3, [sp, #12]
 8008cd8:	bfb8      	it	lt
 8008cda:	2600      	movlt	r6, #0
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	bfb7      	itett	lt
 8008ce0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008ce4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008ce8:	1a9d      	sublt	r5, r3, r2
 8008cea:	2300      	movlt	r3, #0
 8008cec:	e734      	b.n	8008b58 <_dtoa_r+0x720>
 8008cee:	9e07      	ldr	r6, [sp, #28]
 8008cf0:	9d04      	ldr	r5, [sp, #16]
 8008cf2:	9f08      	ldr	r7, [sp, #32]
 8008cf4:	e73b      	b.n	8008b6e <_dtoa_r+0x736>
 8008cf6:	9a07      	ldr	r2, [sp, #28]
 8008cf8:	e767      	b.n	8008bca <_dtoa_r+0x792>
 8008cfa:	9b06      	ldr	r3, [sp, #24]
 8008cfc:	2b01      	cmp	r3, #1
 8008cfe:	dc18      	bgt.n	8008d32 <_dtoa_r+0x8fa>
 8008d00:	f1ba 0f00 	cmp.w	sl, #0
 8008d04:	d115      	bne.n	8008d32 <_dtoa_r+0x8fa>
 8008d06:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008d0a:	b993      	cbnz	r3, 8008d32 <_dtoa_r+0x8fa>
 8008d0c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008d10:	0d1b      	lsrs	r3, r3, #20
 8008d12:	051b      	lsls	r3, r3, #20
 8008d14:	b183      	cbz	r3, 8008d38 <_dtoa_r+0x900>
 8008d16:	9b04      	ldr	r3, [sp, #16]
 8008d18:	3301      	adds	r3, #1
 8008d1a:	9304      	str	r3, [sp, #16]
 8008d1c:	9b05      	ldr	r3, [sp, #20]
 8008d1e:	3301      	adds	r3, #1
 8008d20:	9305      	str	r3, [sp, #20]
 8008d22:	f04f 0801 	mov.w	r8, #1
 8008d26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	f47f af6a 	bne.w	8008c02 <_dtoa_r+0x7ca>
 8008d2e:	2001      	movs	r0, #1
 8008d30:	e76f      	b.n	8008c12 <_dtoa_r+0x7da>
 8008d32:	f04f 0800 	mov.w	r8, #0
 8008d36:	e7f6      	b.n	8008d26 <_dtoa_r+0x8ee>
 8008d38:	4698      	mov	r8, r3
 8008d3a:	e7f4      	b.n	8008d26 <_dtoa_r+0x8ee>
 8008d3c:	f43f af7d 	beq.w	8008c3a <_dtoa_r+0x802>
 8008d40:	4618      	mov	r0, r3
 8008d42:	301c      	adds	r0, #28
 8008d44:	e772      	b.n	8008c2c <_dtoa_r+0x7f4>
 8008d46:	9b03      	ldr	r3, [sp, #12]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	dc37      	bgt.n	8008dbc <_dtoa_r+0x984>
 8008d4c:	9b06      	ldr	r3, [sp, #24]
 8008d4e:	2b02      	cmp	r3, #2
 8008d50:	dd34      	ble.n	8008dbc <_dtoa_r+0x984>
 8008d52:	9b03      	ldr	r3, [sp, #12]
 8008d54:	9302      	str	r3, [sp, #8]
 8008d56:	9b02      	ldr	r3, [sp, #8]
 8008d58:	b96b      	cbnz	r3, 8008d76 <_dtoa_r+0x93e>
 8008d5a:	4631      	mov	r1, r6
 8008d5c:	2205      	movs	r2, #5
 8008d5e:	4620      	mov	r0, r4
 8008d60:	f000 fe40 	bl	80099e4 <__multadd>
 8008d64:	4601      	mov	r1, r0
 8008d66:	4606      	mov	r6, r0
 8008d68:	ee18 0a10 	vmov	r0, s16
 8008d6c:	f001 f8a4 	bl	8009eb8 <__mcmp>
 8008d70:	2800      	cmp	r0, #0
 8008d72:	f73f adbb 	bgt.w	80088ec <_dtoa_r+0x4b4>
 8008d76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d78:	9d01      	ldr	r5, [sp, #4]
 8008d7a:	43db      	mvns	r3, r3
 8008d7c:	9300      	str	r3, [sp, #0]
 8008d7e:	f04f 0800 	mov.w	r8, #0
 8008d82:	4631      	mov	r1, r6
 8008d84:	4620      	mov	r0, r4
 8008d86:	f000 fe0b 	bl	80099a0 <_Bfree>
 8008d8a:	2f00      	cmp	r7, #0
 8008d8c:	f43f aea4 	beq.w	8008ad8 <_dtoa_r+0x6a0>
 8008d90:	f1b8 0f00 	cmp.w	r8, #0
 8008d94:	d005      	beq.n	8008da2 <_dtoa_r+0x96a>
 8008d96:	45b8      	cmp	r8, r7
 8008d98:	d003      	beq.n	8008da2 <_dtoa_r+0x96a>
 8008d9a:	4641      	mov	r1, r8
 8008d9c:	4620      	mov	r0, r4
 8008d9e:	f000 fdff 	bl	80099a0 <_Bfree>
 8008da2:	4639      	mov	r1, r7
 8008da4:	4620      	mov	r0, r4
 8008da6:	f000 fdfb 	bl	80099a0 <_Bfree>
 8008daa:	e695      	b.n	8008ad8 <_dtoa_r+0x6a0>
 8008dac:	2600      	movs	r6, #0
 8008dae:	4637      	mov	r7, r6
 8008db0:	e7e1      	b.n	8008d76 <_dtoa_r+0x93e>
 8008db2:	9700      	str	r7, [sp, #0]
 8008db4:	4637      	mov	r7, r6
 8008db6:	e599      	b.n	80088ec <_dtoa_r+0x4b4>
 8008db8:	40240000 	.word	0x40240000
 8008dbc:	9b08      	ldr	r3, [sp, #32]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	f000 80ca 	beq.w	8008f58 <_dtoa_r+0xb20>
 8008dc4:	9b03      	ldr	r3, [sp, #12]
 8008dc6:	9302      	str	r3, [sp, #8]
 8008dc8:	2d00      	cmp	r5, #0
 8008dca:	dd05      	ble.n	8008dd8 <_dtoa_r+0x9a0>
 8008dcc:	4639      	mov	r1, r7
 8008dce:	462a      	mov	r2, r5
 8008dd0:	4620      	mov	r0, r4
 8008dd2:	f001 f801 	bl	8009dd8 <__lshift>
 8008dd6:	4607      	mov	r7, r0
 8008dd8:	f1b8 0f00 	cmp.w	r8, #0
 8008ddc:	d05b      	beq.n	8008e96 <_dtoa_r+0xa5e>
 8008dde:	6879      	ldr	r1, [r7, #4]
 8008de0:	4620      	mov	r0, r4
 8008de2:	f000 fd9d 	bl	8009920 <_Balloc>
 8008de6:	4605      	mov	r5, r0
 8008de8:	b928      	cbnz	r0, 8008df6 <_dtoa_r+0x9be>
 8008dea:	4b87      	ldr	r3, [pc, #540]	; (8009008 <_dtoa_r+0xbd0>)
 8008dec:	4602      	mov	r2, r0
 8008dee:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008df2:	f7ff bb3b 	b.w	800846c <_dtoa_r+0x34>
 8008df6:	693a      	ldr	r2, [r7, #16]
 8008df8:	3202      	adds	r2, #2
 8008dfa:	0092      	lsls	r2, r2, #2
 8008dfc:	f107 010c 	add.w	r1, r7, #12
 8008e00:	300c      	adds	r0, #12
 8008e02:	f7fd fd13 	bl	800682c <memcpy>
 8008e06:	2201      	movs	r2, #1
 8008e08:	4629      	mov	r1, r5
 8008e0a:	4620      	mov	r0, r4
 8008e0c:	f000 ffe4 	bl	8009dd8 <__lshift>
 8008e10:	9b01      	ldr	r3, [sp, #4]
 8008e12:	f103 0901 	add.w	r9, r3, #1
 8008e16:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008e1a:	4413      	add	r3, r2
 8008e1c:	9305      	str	r3, [sp, #20]
 8008e1e:	f00a 0301 	and.w	r3, sl, #1
 8008e22:	46b8      	mov	r8, r7
 8008e24:	9304      	str	r3, [sp, #16]
 8008e26:	4607      	mov	r7, r0
 8008e28:	4631      	mov	r1, r6
 8008e2a:	ee18 0a10 	vmov	r0, s16
 8008e2e:	f7ff fa77 	bl	8008320 <quorem>
 8008e32:	4641      	mov	r1, r8
 8008e34:	9002      	str	r0, [sp, #8]
 8008e36:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008e3a:	ee18 0a10 	vmov	r0, s16
 8008e3e:	f001 f83b 	bl	8009eb8 <__mcmp>
 8008e42:	463a      	mov	r2, r7
 8008e44:	9003      	str	r0, [sp, #12]
 8008e46:	4631      	mov	r1, r6
 8008e48:	4620      	mov	r0, r4
 8008e4a:	f001 f851 	bl	8009ef0 <__mdiff>
 8008e4e:	68c2      	ldr	r2, [r0, #12]
 8008e50:	f109 3bff 	add.w	fp, r9, #4294967295
 8008e54:	4605      	mov	r5, r0
 8008e56:	bb02      	cbnz	r2, 8008e9a <_dtoa_r+0xa62>
 8008e58:	4601      	mov	r1, r0
 8008e5a:	ee18 0a10 	vmov	r0, s16
 8008e5e:	f001 f82b 	bl	8009eb8 <__mcmp>
 8008e62:	4602      	mov	r2, r0
 8008e64:	4629      	mov	r1, r5
 8008e66:	4620      	mov	r0, r4
 8008e68:	9207      	str	r2, [sp, #28]
 8008e6a:	f000 fd99 	bl	80099a0 <_Bfree>
 8008e6e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008e72:	ea43 0102 	orr.w	r1, r3, r2
 8008e76:	9b04      	ldr	r3, [sp, #16]
 8008e78:	430b      	orrs	r3, r1
 8008e7a:	464d      	mov	r5, r9
 8008e7c:	d10f      	bne.n	8008e9e <_dtoa_r+0xa66>
 8008e7e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008e82:	d02a      	beq.n	8008eda <_dtoa_r+0xaa2>
 8008e84:	9b03      	ldr	r3, [sp, #12]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	dd02      	ble.n	8008e90 <_dtoa_r+0xa58>
 8008e8a:	9b02      	ldr	r3, [sp, #8]
 8008e8c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008e90:	f88b a000 	strb.w	sl, [fp]
 8008e94:	e775      	b.n	8008d82 <_dtoa_r+0x94a>
 8008e96:	4638      	mov	r0, r7
 8008e98:	e7ba      	b.n	8008e10 <_dtoa_r+0x9d8>
 8008e9a:	2201      	movs	r2, #1
 8008e9c:	e7e2      	b.n	8008e64 <_dtoa_r+0xa2c>
 8008e9e:	9b03      	ldr	r3, [sp, #12]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	db04      	blt.n	8008eae <_dtoa_r+0xa76>
 8008ea4:	9906      	ldr	r1, [sp, #24]
 8008ea6:	430b      	orrs	r3, r1
 8008ea8:	9904      	ldr	r1, [sp, #16]
 8008eaa:	430b      	orrs	r3, r1
 8008eac:	d122      	bne.n	8008ef4 <_dtoa_r+0xabc>
 8008eae:	2a00      	cmp	r2, #0
 8008eb0:	ddee      	ble.n	8008e90 <_dtoa_r+0xa58>
 8008eb2:	ee18 1a10 	vmov	r1, s16
 8008eb6:	2201      	movs	r2, #1
 8008eb8:	4620      	mov	r0, r4
 8008eba:	f000 ff8d 	bl	8009dd8 <__lshift>
 8008ebe:	4631      	mov	r1, r6
 8008ec0:	ee08 0a10 	vmov	s16, r0
 8008ec4:	f000 fff8 	bl	8009eb8 <__mcmp>
 8008ec8:	2800      	cmp	r0, #0
 8008eca:	dc03      	bgt.n	8008ed4 <_dtoa_r+0xa9c>
 8008ecc:	d1e0      	bne.n	8008e90 <_dtoa_r+0xa58>
 8008ece:	f01a 0f01 	tst.w	sl, #1
 8008ed2:	d0dd      	beq.n	8008e90 <_dtoa_r+0xa58>
 8008ed4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008ed8:	d1d7      	bne.n	8008e8a <_dtoa_r+0xa52>
 8008eda:	2339      	movs	r3, #57	; 0x39
 8008edc:	f88b 3000 	strb.w	r3, [fp]
 8008ee0:	462b      	mov	r3, r5
 8008ee2:	461d      	mov	r5, r3
 8008ee4:	3b01      	subs	r3, #1
 8008ee6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008eea:	2a39      	cmp	r2, #57	; 0x39
 8008eec:	d071      	beq.n	8008fd2 <_dtoa_r+0xb9a>
 8008eee:	3201      	adds	r2, #1
 8008ef0:	701a      	strb	r2, [r3, #0]
 8008ef2:	e746      	b.n	8008d82 <_dtoa_r+0x94a>
 8008ef4:	2a00      	cmp	r2, #0
 8008ef6:	dd07      	ble.n	8008f08 <_dtoa_r+0xad0>
 8008ef8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008efc:	d0ed      	beq.n	8008eda <_dtoa_r+0xaa2>
 8008efe:	f10a 0301 	add.w	r3, sl, #1
 8008f02:	f88b 3000 	strb.w	r3, [fp]
 8008f06:	e73c      	b.n	8008d82 <_dtoa_r+0x94a>
 8008f08:	9b05      	ldr	r3, [sp, #20]
 8008f0a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008f0e:	4599      	cmp	r9, r3
 8008f10:	d047      	beq.n	8008fa2 <_dtoa_r+0xb6a>
 8008f12:	ee18 1a10 	vmov	r1, s16
 8008f16:	2300      	movs	r3, #0
 8008f18:	220a      	movs	r2, #10
 8008f1a:	4620      	mov	r0, r4
 8008f1c:	f000 fd62 	bl	80099e4 <__multadd>
 8008f20:	45b8      	cmp	r8, r7
 8008f22:	ee08 0a10 	vmov	s16, r0
 8008f26:	f04f 0300 	mov.w	r3, #0
 8008f2a:	f04f 020a 	mov.w	r2, #10
 8008f2e:	4641      	mov	r1, r8
 8008f30:	4620      	mov	r0, r4
 8008f32:	d106      	bne.n	8008f42 <_dtoa_r+0xb0a>
 8008f34:	f000 fd56 	bl	80099e4 <__multadd>
 8008f38:	4680      	mov	r8, r0
 8008f3a:	4607      	mov	r7, r0
 8008f3c:	f109 0901 	add.w	r9, r9, #1
 8008f40:	e772      	b.n	8008e28 <_dtoa_r+0x9f0>
 8008f42:	f000 fd4f 	bl	80099e4 <__multadd>
 8008f46:	4639      	mov	r1, r7
 8008f48:	4680      	mov	r8, r0
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	220a      	movs	r2, #10
 8008f4e:	4620      	mov	r0, r4
 8008f50:	f000 fd48 	bl	80099e4 <__multadd>
 8008f54:	4607      	mov	r7, r0
 8008f56:	e7f1      	b.n	8008f3c <_dtoa_r+0xb04>
 8008f58:	9b03      	ldr	r3, [sp, #12]
 8008f5a:	9302      	str	r3, [sp, #8]
 8008f5c:	9d01      	ldr	r5, [sp, #4]
 8008f5e:	ee18 0a10 	vmov	r0, s16
 8008f62:	4631      	mov	r1, r6
 8008f64:	f7ff f9dc 	bl	8008320 <quorem>
 8008f68:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008f6c:	9b01      	ldr	r3, [sp, #4]
 8008f6e:	f805 ab01 	strb.w	sl, [r5], #1
 8008f72:	1aea      	subs	r2, r5, r3
 8008f74:	9b02      	ldr	r3, [sp, #8]
 8008f76:	4293      	cmp	r3, r2
 8008f78:	dd09      	ble.n	8008f8e <_dtoa_r+0xb56>
 8008f7a:	ee18 1a10 	vmov	r1, s16
 8008f7e:	2300      	movs	r3, #0
 8008f80:	220a      	movs	r2, #10
 8008f82:	4620      	mov	r0, r4
 8008f84:	f000 fd2e 	bl	80099e4 <__multadd>
 8008f88:	ee08 0a10 	vmov	s16, r0
 8008f8c:	e7e7      	b.n	8008f5e <_dtoa_r+0xb26>
 8008f8e:	9b02      	ldr	r3, [sp, #8]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	bfc8      	it	gt
 8008f94:	461d      	movgt	r5, r3
 8008f96:	9b01      	ldr	r3, [sp, #4]
 8008f98:	bfd8      	it	le
 8008f9a:	2501      	movle	r5, #1
 8008f9c:	441d      	add	r5, r3
 8008f9e:	f04f 0800 	mov.w	r8, #0
 8008fa2:	ee18 1a10 	vmov	r1, s16
 8008fa6:	2201      	movs	r2, #1
 8008fa8:	4620      	mov	r0, r4
 8008faa:	f000 ff15 	bl	8009dd8 <__lshift>
 8008fae:	4631      	mov	r1, r6
 8008fb0:	ee08 0a10 	vmov	s16, r0
 8008fb4:	f000 ff80 	bl	8009eb8 <__mcmp>
 8008fb8:	2800      	cmp	r0, #0
 8008fba:	dc91      	bgt.n	8008ee0 <_dtoa_r+0xaa8>
 8008fbc:	d102      	bne.n	8008fc4 <_dtoa_r+0xb8c>
 8008fbe:	f01a 0f01 	tst.w	sl, #1
 8008fc2:	d18d      	bne.n	8008ee0 <_dtoa_r+0xaa8>
 8008fc4:	462b      	mov	r3, r5
 8008fc6:	461d      	mov	r5, r3
 8008fc8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008fcc:	2a30      	cmp	r2, #48	; 0x30
 8008fce:	d0fa      	beq.n	8008fc6 <_dtoa_r+0xb8e>
 8008fd0:	e6d7      	b.n	8008d82 <_dtoa_r+0x94a>
 8008fd2:	9a01      	ldr	r2, [sp, #4]
 8008fd4:	429a      	cmp	r2, r3
 8008fd6:	d184      	bne.n	8008ee2 <_dtoa_r+0xaaa>
 8008fd8:	9b00      	ldr	r3, [sp, #0]
 8008fda:	3301      	adds	r3, #1
 8008fdc:	9300      	str	r3, [sp, #0]
 8008fde:	2331      	movs	r3, #49	; 0x31
 8008fe0:	7013      	strb	r3, [r2, #0]
 8008fe2:	e6ce      	b.n	8008d82 <_dtoa_r+0x94a>
 8008fe4:	4b09      	ldr	r3, [pc, #36]	; (800900c <_dtoa_r+0xbd4>)
 8008fe6:	f7ff ba95 	b.w	8008514 <_dtoa_r+0xdc>
 8008fea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	f47f aa6e 	bne.w	80084ce <_dtoa_r+0x96>
 8008ff2:	4b07      	ldr	r3, [pc, #28]	; (8009010 <_dtoa_r+0xbd8>)
 8008ff4:	f7ff ba8e 	b.w	8008514 <_dtoa_r+0xdc>
 8008ff8:	9b02      	ldr	r3, [sp, #8]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	dcae      	bgt.n	8008f5c <_dtoa_r+0xb24>
 8008ffe:	9b06      	ldr	r3, [sp, #24]
 8009000:	2b02      	cmp	r3, #2
 8009002:	f73f aea8 	bgt.w	8008d56 <_dtoa_r+0x91e>
 8009006:	e7a9      	b.n	8008f5c <_dtoa_r+0xb24>
 8009008:	0800b3a8 	.word	0x0800b3a8
 800900c:	0800b1a8 	.word	0x0800b1a8
 8009010:	0800b329 	.word	0x0800b329

08009014 <std>:
 8009014:	2300      	movs	r3, #0
 8009016:	b510      	push	{r4, lr}
 8009018:	4604      	mov	r4, r0
 800901a:	e9c0 3300 	strd	r3, r3, [r0]
 800901e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009022:	6083      	str	r3, [r0, #8]
 8009024:	8181      	strh	r1, [r0, #12]
 8009026:	6643      	str	r3, [r0, #100]	; 0x64
 8009028:	81c2      	strh	r2, [r0, #14]
 800902a:	6183      	str	r3, [r0, #24]
 800902c:	4619      	mov	r1, r3
 800902e:	2208      	movs	r2, #8
 8009030:	305c      	adds	r0, #92	; 0x5c
 8009032:	f7fd fc09 	bl	8006848 <memset>
 8009036:	4b05      	ldr	r3, [pc, #20]	; (800904c <std+0x38>)
 8009038:	6263      	str	r3, [r4, #36]	; 0x24
 800903a:	4b05      	ldr	r3, [pc, #20]	; (8009050 <std+0x3c>)
 800903c:	62a3      	str	r3, [r4, #40]	; 0x28
 800903e:	4b05      	ldr	r3, [pc, #20]	; (8009054 <std+0x40>)
 8009040:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009042:	4b05      	ldr	r3, [pc, #20]	; (8009058 <std+0x44>)
 8009044:	6224      	str	r4, [r4, #32]
 8009046:	6323      	str	r3, [r4, #48]	; 0x30
 8009048:	bd10      	pop	{r4, pc}
 800904a:	bf00      	nop
 800904c:	0800aa31 	.word	0x0800aa31
 8009050:	0800aa53 	.word	0x0800aa53
 8009054:	0800aa8b 	.word	0x0800aa8b
 8009058:	0800aaaf 	.word	0x0800aaaf

0800905c <_cleanup_r>:
 800905c:	4901      	ldr	r1, [pc, #4]	; (8009064 <_cleanup_r+0x8>)
 800905e:	f000 b8af 	b.w	80091c0 <_fwalk_reent>
 8009062:	bf00      	nop
 8009064:	0800ae09 	.word	0x0800ae09

08009068 <__sfmoreglue>:
 8009068:	b570      	push	{r4, r5, r6, lr}
 800906a:	2268      	movs	r2, #104	; 0x68
 800906c:	1e4d      	subs	r5, r1, #1
 800906e:	4355      	muls	r5, r2
 8009070:	460e      	mov	r6, r1
 8009072:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009076:	f001 f997 	bl	800a3a8 <_malloc_r>
 800907a:	4604      	mov	r4, r0
 800907c:	b140      	cbz	r0, 8009090 <__sfmoreglue+0x28>
 800907e:	2100      	movs	r1, #0
 8009080:	e9c0 1600 	strd	r1, r6, [r0]
 8009084:	300c      	adds	r0, #12
 8009086:	60a0      	str	r0, [r4, #8]
 8009088:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800908c:	f7fd fbdc 	bl	8006848 <memset>
 8009090:	4620      	mov	r0, r4
 8009092:	bd70      	pop	{r4, r5, r6, pc}

08009094 <__sfp_lock_acquire>:
 8009094:	4801      	ldr	r0, [pc, #4]	; (800909c <__sfp_lock_acquire+0x8>)
 8009096:	f000 bc26 	b.w	80098e6 <__retarget_lock_acquire_recursive>
 800909a:	bf00      	nop
 800909c:	20000355 	.word	0x20000355

080090a0 <__sfp_lock_release>:
 80090a0:	4801      	ldr	r0, [pc, #4]	; (80090a8 <__sfp_lock_release+0x8>)
 80090a2:	f000 bc21 	b.w	80098e8 <__retarget_lock_release_recursive>
 80090a6:	bf00      	nop
 80090a8:	20000355 	.word	0x20000355

080090ac <__sinit_lock_acquire>:
 80090ac:	4801      	ldr	r0, [pc, #4]	; (80090b4 <__sinit_lock_acquire+0x8>)
 80090ae:	f000 bc1a 	b.w	80098e6 <__retarget_lock_acquire_recursive>
 80090b2:	bf00      	nop
 80090b4:	20000356 	.word	0x20000356

080090b8 <__sinit_lock_release>:
 80090b8:	4801      	ldr	r0, [pc, #4]	; (80090c0 <__sinit_lock_release+0x8>)
 80090ba:	f000 bc15 	b.w	80098e8 <__retarget_lock_release_recursive>
 80090be:	bf00      	nop
 80090c0:	20000356 	.word	0x20000356

080090c4 <__sinit>:
 80090c4:	b510      	push	{r4, lr}
 80090c6:	4604      	mov	r4, r0
 80090c8:	f7ff fff0 	bl	80090ac <__sinit_lock_acquire>
 80090cc:	69a3      	ldr	r3, [r4, #24]
 80090ce:	b11b      	cbz	r3, 80090d8 <__sinit+0x14>
 80090d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80090d4:	f7ff bff0 	b.w	80090b8 <__sinit_lock_release>
 80090d8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80090dc:	6523      	str	r3, [r4, #80]	; 0x50
 80090de:	4b13      	ldr	r3, [pc, #76]	; (800912c <__sinit+0x68>)
 80090e0:	4a13      	ldr	r2, [pc, #76]	; (8009130 <__sinit+0x6c>)
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	62a2      	str	r2, [r4, #40]	; 0x28
 80090e6:	42a3      	cmp	r3, r4
 80090e8:	bf04      	itt	eq
 80090ea:	2301      	moveq	r3, #1
 80090ec:	61a3      	streq	r3, [r4, #24]
 80090ee:	4620      	mov	r0, r4
 80090f0:	f000 f820 	bl	8009134 <__sfp>
 80090f4:	6060      	str	r0, [r4, #4]
 80090f6:	4620      	mov	r0, r4
 80090f8:	f000 f81c 	bl	8009134 <__sfp>
 80090fc:	60a0      	str	r0, [r4, #8]
 80090fe:	4620      	mov	r0, r4
 8009100:	f000 f818 	bl	8009134 <__sfp>
 8009104:	2200      	movs	r2, #0
 8009106:	60e0      	str	r0, [r4, #12]
 8009108:	2104      	movs	r1, #4
 800910a:	6860      	ldr	r0, [r4, #4]
 800910c:	f7ff ff82 	bl	8009014 <std>
 8009110:	68a0      	ldr	r0, [r4, #8]
 8009112:	2201      	movs	r2, #1
 8009114:	2109      	movs	r1, #9
 8009116:	f7ff ff7d 	bl	8009014 <std>
 800911a:	68e0      	ldr	r0, [r4, #12]
 800911c:	2202      	movs	r2, #2
 800911e:	2112      	movs	r1, #18
 8009120:	f7ff ff78 	bl	8009014 <std>
 8009124:	2301      	movs	r3, #1
 8009126:	61a3      	str	r3, [r4, #24]
 8009128:	e7d2      	b.n	80090d0 <__sinit+0xc>
 800912a:	bf00      	nop
 800912c:	0800b194 	.word	0x0800b194
 8009130:	0800905d 	.word	0x0800905d

08009134 <__sfp>:
 8009134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009136:	4607      	mov	r7, r0
 8009138:	f7ff ffac 	bl	8009094 <__sfp_lock_acquire>
 800913c:	4b1e      	ldr	r3, [pc, #120]	; (80091b8 <__sfp+0x84>)
 800913e:	681e      	ldr	r6, [r3, #0]
 8009140:	69b3      	ldr	r3, [r6, #24]
 8009142:	b913      	cbnz	r3, 800914a <__sfp+0x16>
 8009144:	4630      	mov	r0, r6
 8009146:	f7ff ffbd 	bl	80090c4 <__sinit>
 800914a:	3648      	adds	r6, #72	; 0x48
 800914c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009150:	3b01      	subs	r3, #1
 8009152:	d503      	bpl.n	800915c <__sfp+0x28>
 8009154:	6833      	ldr	r3, [r6, #0]
 8009156:	b30b      	cbz	r3, 800919c <__sfp+0x68>
 8009158:	6836      	ldr	r6, [r6, #0]
 800915a:	e7f7      	b.n	800914c <__sfp+0x18>
 800915c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009160:	b9d5      	cbnz	r5, 8009198 <__sfp+0x64>
 8009162:	4b16      	ldr	r3, [pc, #88]	; (80091bc <__sfp+0x88>)
 8009164:	60e3      	str	r3, [r4, #12]
 8009166:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800916a:	6665      	str	r5, [r4, #100]	; 0x64
 800916c:	f000 fbba 	bl	80098e4 <__retarget_lock_init_recursive>
 8009170:	f7ff ff96 	bl	80090a0 <__sfp_lock_release>
 8009174:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009178:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800917c:	6025      	str	r5, [r4, #0]
 800917e:	61a5      	str	r5, [r4, #24]
 8009180:	2208      	movs	r2, #8
 8009182:	4629      	mov	r1, r5
 8009184:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009188:	f7fd fb5e 	bl	8006848 <memset>
 800918c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009190:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009194:	4620      	mov	r0, r4
 8009196:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009198:	3468      	adds	r4, #104	; 0x68
 800919a:	e7d9      	b.n	8009150 <__sfp+0x1c>
 800919c:	2104      	movs	r1, #4
 800919e:	4638      	mov	r0, r7
 80091a0:	f7ff ff62 	bl	8009068 <__sfmoreglue>
 80091a4:	4604      	mov	r4, r0
 80091a6:	6030      	str	r0, [r6, #0]
 80091a8:	2800      	cmp	r0, #0
 80091aa:	d1d5      	bne.n	8009158 <__sfp+0x24>
 80091ac:	f7ff ff78 	bl	80090a0 <__sfp_lock_release>
 80091b0:	230c      	movs	r3, #12
 80091b2:	603b      	str	r3, [r7, #0]
 80091b4:	e7ee      	b.n	8009194 <__sfp+0x60>
 80091b6:	bf00      	nop
 80091b8:	0800b194 	.word	0x0800b194
 80091bc:	ffff0001 	.word	0xffff0001

080091c0 <_fwalk_reent>:
 80091c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80091c4:	4606      	mov	r6, r0
 80091c6:	4688      	mov	r8, r1
 80091c8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80091cc:	2700      	movs	r7, #0
 80091ce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80091d2:	f1b9 0901 	subs.w	r9, r9, #1
 80091d6:	d505      	bpl.n	80091e4 <_fwalk_reent+0x24>
 80091d8:	6824      	ldr	r4, [r4, #0]
 80091da:	2c00      	cmp	r4, #0
 80091dc:	d1f7      	bne.n	80091ce <_fwalk_reent+0xe>
 80091de:	4638      	mov	r0, r7
 80091e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80091e4:	89ab      	ldrh	r3, [r5, #12]
 80091e6:	2b01      	cmp	r3, #1
 80091e8:	d907      	bls.n	80091fa <_fwalk_reent+0x3a>
 80091ea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80091ee:	3301      	adds	r3, #1
 80091f0:	d003      	beq.n	80091fa <_fwalk_reent+0x3a>
 80091f2:	4629      	mov	r1, r5
 80091f4:	4630      	mov	r0, r6
 80091f6:	47c0      	blx	r8
 80091f8:	4307      	orrs	r7, r0
 80091fa:	3568      	adds	r5, #104	; 0x68
 80091fc:	e7e9      	b.n	80091d2 <_fwalk_reent+0x12>

080091fe <rshift>:
 80091fe:	6903      	ldr	r3, [r0, #16]
 8009200:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009204:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009208:	ea4f 1261 	mov.w	r2, r1, asr #5
 800920c:	f100 0414 	add.w	r4, r0, #20
 8009210:	dd45      	ble.n	800929e <rshift+0xa0>
 8009212:	f011 011f 	ands.w	r1, r1, #31
 8009216:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800921a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800921e:	d10c      	bne.n	800923a <rshift+0x3c>
 8009220:	f100 0710 	add.w	r7, r0, #16
 8009224:	4629      	mov	r1, r5
 8009226:	42b1      	cmp	r1, r6
 8009228:	d334      	bcc.n	8009294 <rshift+0x96>
 800922a:	1a9b      	subs	r3, r3, r2
 800922c:	009b      	lsls	r3, r3, #2
 800922e:	1eea      	subs	r2, r5, #3
 8009230:	4296      	cmp	r6, r2
 8009232:	bf38      	it	cc
 8009234:	2300      	movcc	r3, #0
 8009236:	4423      	add	r3, r4
 8009238:	e015      	b.n	8009266 <rshift+0x68>
 800923a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800923e:	f1c1 0820 	rsb	r8, r1, #32
 8009242:	40cf      	lsrs	r7, r1
 8009244:	f105 0e04 	add.w	lr, r5, #4
 8009248:	46a1      	mov	r9, r4
 800924a:	4576      	cmp	r6, lr
 800924c:	46f4      	mov	ip, lr
 800924e:	d815      	bhi.n	800927c <rshift+0x7e>
 8009250:	1a9a      	subs	r2, r3, r2
 8009252:	0092      	lsls	r2, r2, #2
 8009254:	3a04      	subs	r2, #4
 8009256:	3501      	adds	r5, #1
 8009258:	42ae      	cmp	r6, r5
 800925a:	bf38      	it	cc
 800925c:	2200      	movcc	r2, #0
 800925e:	18a3      	adds	r3, r4, r2
 8009260:	50a7      	str	r7, [r4, r2]
 8009262:	b107      	cbz	r7, 8009266 <rshift+0x68>
 8009264:	3304      	adds	r3, #4
 8009266:	1b1a      	subs	r2, r3, r4
 8009268:	42a3      	cmp	r3, r4
 800926a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800926e:	bf08      	it	eq
 8009270:	2300      	moveq	r3, #0
 8009272:	6102      	str	r2, [r0, #16]
 8009274:	bf08      	it	eq
 8009276:	6143      	streq	r3, [r0, #20]
 8009278:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800927c:	f8dc c000 	ldr.w	ip, [ip]
 8009280:	fa0c fc08 	lsl.w	ip, ip, r8
 8009284:	ea4c 0707 	orr.w	r7, ip, r7
 8009288:	f849 7b04 	str.w	r7, [r9], #4
 800928c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009290:	40cf      	lsrs	r7, r1
 8009292:	e7da      	b.n	800924a <rshift+0x4c>
 8009294:	f851 cb04 	ldr.w	ip, [r1], #4
 8009298:	f847 cf04 	str.w	ip, [r7, #4]!
 800929c:	e7c3      	b.n	8009226 <rshift+0x28>
 800929e:	4623      	mov	r3, r4
 80092a0:	e7e1      	b.n	8009266 <rshift+0x68>

080092a2 <__hexdig_fun>:
 80092a2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80092a6:	2b09      	cmp	r3, #9
 80092a8:	d802      	bhi.n	80092b0 <__hexdig_fun+0xe>
 80092aa:	3820      	subs	r0, #32
 80092ac:	b2c0      	uxtb	r0, r0
 80092ae:	4770      	bx	lr
 80092b0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80092b4:	2b05      	cmp	r3, #5
 80092b6:	d801      	bhi.n	80092bc <__hexdig_fun+0x1a>
 80092b8:	3847      	subs	r0, #71	; 0x47
 80092ba:	e7f7      	b.n	80092ac <__hexdig_fun+0xa>
 80092bc:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80092c0:	2b05      	cmp	r3, #5
 80092c2:	d801      	bhi.n	80092c8 <__hexdig_fun+0x26>
 80092c4:	3827      	subs	r0, #39	; 0x27
 80092c6:	e7f1      	b.n	80092ac <__hexdig_fun+0xa>
 80092c8:	2000      	movs	r0, #0
 80092ca:	4770      	bx	lr

080092cc <__gethex>:
 80092cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092d0:	ed2d 8b02 	vpush	{d8}
 80092d4:	b089      	sub	sp, #36	; 0x24
 80092d6:	ee08 0a10 	vmov	s16, r0
 80092da:	9304      	str	r3, [sp, #16]
 80092dc:	4bb4      	ldr	r3, [pc, #720]	; (80095b0 <__gethex+0x2e4>)
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	9301      	str	r3, [sp, #4]
 80092e2:	4618      	mov	r0, r3
 80092e4:	468b      	mov	fp, r1
 80092e6:	4690      	mov	r8, r2
 80092e8:	f7f6 ff82 	bl	80001f0 <strlen>
 80092ec:	9b01      	ldr	r3, [sp, #4]
 80092ee:	f8db 2000 	ldr.w	r2, [fp]
 80092f2:	4403      	add	r3, r0
 80092f4:	4682      	mov	sl, r0
 80092f6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80092fa:	9305      	str	r3, [sp, #20]
 80092fc:	1c93      	adds	r3, r2, #2
 80092fe:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009302:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009306:	32fe      	adds	r2, #254	; 0xfe
 8009308:	18d1      	adds	r1, r2, r3
 800930a:	461f      	mov	r7, r3
 800930c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009310:	9100      	str	r1, [sp, #0]
 8009312:	2830      	cmp	r0, #48	; 0x30
 8009314:	d0f8      	beq.n	8009308 <__gethex+0x3c>
 8009316:	f7ff ffc4 	bl	80092a2 <__hexdig_fun>
 800931a:	4604      	mov	r4, r0
 800931c:	2800      	cmp	r0, #0
 800931e:	d13a      	bne.n	8009396 <__gethex+0xca>
 8009320:	9901      	ldr	r1, [sp, #4]
 8009322:	4652      	mov	r2, sl
 8009324:	4638      	mov	r0, r7
 8009326:	f001 fbc6 	bl	800aab6 <strncmp>
 800932a:	4605      	mov	r5, r0
 800932c:	2800      	cmp	r0, #0
 800932e:	d168      	bne.n	8009402 <__gethex+0x136>
 8009330:	f817 000a 	ldrb.w	r0, [r7, sl]
 8009334:	eb07 060a 	add.w	r6, r7, sl
 8009338:	f7ff ffb3 	bl	80092a2 <__hexdig_fun>
 800933c:	2800      	cmp	r0, #0
 800933e:	d062      	beq.n	8009406 <__gethex+0x13a>
 8009340:	4633      	mov	r3, r6
 8009342:	7818      	ldrb	r0, [r3, #0]
 8009344:	2830      	cmp	r0, #48	; 0x30
 8009346:	461f      	mov	r7, r3
 8009348:	f103 0301 	add.w	r3, r3, #1
 800934c:	d0f9      	beq.n	8009342 <__gethex+0x76>
 800934e:	f7ff ffa8 	bl	80092a2 <__hexdig_fun>
 8009352:	2301      	movs	r3, #1
 8009354:	fab0 f480 	clz	r4, r0
 8009358:	0964      	lsrs	r4, r4, #5
 800935a:	4635      	mov	r5, r6
 800935c:	9300      	str	r3, [sp, #0]
 800935e:	463a      	mov	r2, r7
 8009360:	4616      	mov	r6, r2
 8009362:	3201      	adds	r2, #1
 8009364:	7830      	ldrb	r0, [r6, #0]
 8009366:	f7ff ff9c 	bl	80092a2 <__hexdig_fun>
 800936a:	2800      	cmp	r0, #0
 800936c:	d1f8      	bne.n	8009360 <__gethex+0x94>
 800936e:	9901      	ldr	r1, [sp, #4]
 8009370:	4652      	mov	r2, sl
 8009372:	4630      	mov	r0, r6
 8009374:	f001 fb9f 	bl	800aab6 <strncmp>
 8009378:	b980      	cbnz	r0, 800939c <__gethex+0xd0>
 800937a:	b94d      	cbnz	r5, 8009390 <__gethex+0xc4>
 800937c:	eb06 050a 	add.w	r5, r6, sl
 8009380:	462a      	mov	r2, r5
 8009382:	4616      	mov	r6, r2
 8009384:	3201      	adds	r2, #1
 8009386:	7830      	ldrb	r0, [r6, #0]
 8009388:	f7ff ff8b 	bl	80092a2 <__hexdig_fun>
 800938c:	2800      	cmp	r0, #0
 800938e:	d1f8      	bne.n	8009382 <__gethex+0xb6>
 8009390:	1bad      	subs	r5, r5, r6
 8009392:	00ad      	lsls	r5, r5, #2
 8009394:	e004      	b.n	80093a0 <__gethex+0xd4>
 8009396:	2400      	movs	r4, #0
 8009398:	4625      	mov	r5, r4
 800939a:	e7e0      	b.n	800935e <__gethex+0x92>
 800939c:	2d00      	cmp	r5, #0
 800939e:	d1f7      	bne.n	8009390 <__gethex+0xc4>
 80093a0:	7833      	ldrb	r3, [r6, #0]
 80093a2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80093a6:	2b50      	cmp	r3, #80	; 0x50
 80093a8:	d13b      	bne.n	8009422 <__gethex+0x156>
 80093aa:	7873      	ldrb	r3, [r6, #1]
 80093ac:	2b2b      	cmp	r3, #43	; 0x2b
 80093ae:	d02c      	beq.n	800940a <__gethex+0x13e>
 80093b0:	2b2d      	cmp	r3, #45	; 0x2d
 80093b2:	d02e      	beq.n	8009412 <__gethex+0x146>
 80093b4:	1c71      	adds	r1, r6, #1
 80093b6:	f04f 0900 	mov.w	r9, #0
 80093ba:	7808      	ldrb	r0, [r1, #0]
 80093bc:	f7ff ff71 	bl	80092a2 <__hexdig_fun>
 80093c0:	1e43      	subs	r3, r0, #1
 80093c2:	b2db      	uxtb	r3, r3
 80093c4:	2b18      	cmp	r3, #24
 80093c6:	d82c      	bhi.n	8009422 <__gethex+0x156>
 80093c8:	f1a0 0210 	sub.w	r2, r0, #16
 80093cc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80093d0:	f7ff ff67 	bl	80092a2 <__hexdig_fun>
 80093d4:	1e43      	subs	r3, r0, #1
 80093d6:	b2db      	uxtb	r3, r3
 80093d8:	2b18      	cmp	r3, #24
 80093da:	d91d      	bls.n	8009418 <__gethex+0x14c>
 80093dc:	f1b9 0f00 	cmp.w	r9, #0
 80093e0:	d000      	beq.n	80093e4 <__gethex+0x118>
 80093e2:	4252      	negs	r2, r2
 80093e4:	4415      	add	r5, r2
 80093e6:	f8cb 1000 	str.w	r1, [fp]
 80093ea:	b1e4      	cbz	r4, 8009426 <__gethex+0x15a>
 80093ec:	9b00      	ldr	r3, [sp, #0]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	bf14      	ite	ne
 80093f2:	2700      	movne	r7, #0
 80093f4:	2706      	moveq	r7, #6
 80093f6:	4638      	mov	r0, r7
 80093f8:	b009      	add	sp, #36	; 0x24
 80093fa:	ecbd 8b02 	vpop	{d8}
 80093fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009402:	463e      	mov	r6, r7
 8009404:	4625      	mov	r5, r4
 8009406:	2401      	movs	r4, #1
 8009408:	e7ca      	b.n	80093a0 <__gethex+0xd4>
 800940a:	f04f 0900 	mov.w	r9, #0
 800940e:	1cb1      	adds	r1, r6, #2
 8009410:	e7d3      	b.n	80093ba <__gethex+0xee>
 8009412:	f04f 0901 	mov.w	r9, #1
 8009416:	e7fa      	b.n	800940e <__gethex+0x142>
 8009418:	230a      	movs	r3, #10
 800941a:	fb03 0202 	mla	r2, r3, r2, r0
 800941e:	3a10      	subs	r2, #16
 8009420:	e7d4      	b.n	80093cc <__gethex+0x100>
 8009422:	4631      	mov	r1, r6
 8009424:	e7df      	b.n	80093e6 <__gethex+0x11a>
 8009426:	1bf3      	subs	r3, r6, r7
 8009428:	3b01      	subs	r3, #1
 800942a:	4621      	mov	r1, r4
 800942c:	2b07      	cmp	r3, #7
 800942e:	dc0b      	bgt.n	8009448 <__gethex+0x17c>
 8009430:	ee18 0a10 	vmov	r0, s16
 8009434:	f000 fa74 	bl	8009920 <_Balloc>
 8009438:	4604      	mov	r4, r0
 800943a:	b940      	cbnz	r0, 800944e <__gethex+0x182>
 800943c:	4b5d      	ldr	r3, [pc, #372]	; (80095b4 <__gethex+0x2e8>)
 800943e:	4602      	mov	r2, r0
 8009440:	21de      	movs	r1, #222	; 0xde
 8009442:	485d      	ldr	r0, [pc, #372]	; (80095b8 <__gethex+0x2ec>)
 8009444:	f001 fc2c 	bl	800aca0 <__assert_func>
 8009448:	3101      	adds	r1, #1
 800944a:	105b      	asrs	r3, r3, #1
 800944c:	e7ee      	b.n	800942c <__gethex+0x160>
 800944e:	f100 0914 	add.w	r9, r0, #20
 8009452:	f04f 0b00 	mov.w	fp, #0
 8009456:	f1ca 0301 	rsb	r3, sl, #1
 800945a:	f8cd 9008 	str.w	r9, [sp, #8]
 800945e:	f8cd b000 	str.w	fp, [sp]
 8009462:	9306      	str	r3, [sp, #24]
 8009464:	42b7      	cmp	r7, r6
 8009466:	d340      	bcc.n	80094ea <__gethex+0x21e>
 8009468:	9802      	ldr	r0, [sp, #8]
 800946a:	9b00      	ldr	r3, [sp, #0]
 800946c:	f840 3b04 	str.w	r3, [r0], #4
 8009470:	eba0 0009 	sub.w	r0, r0, r9
 8009474:	1080      	asrs	r0, r0, #2
 8009476:	0146      	lsls	r6, r0, #5
 8009478:	6120      	str	r0, [r4, #16]
 800947a:	4618      	mov	r0, r3
 800947c:	f000 fb42 	bl	8009b04 <__hi0bits>
 8009480:	1a30      	subs	r0, r6, r0
 8009482:	f8d8 6000 	ldr.w	r6, [r8]
 8009486:	42b0      	cmp	r0, r6
 8009488:	dd63      	ble.n	8009552 <__gethex+0x286>
 800948a:	1b87      	subs	r7, r0, r6
 800948c:	4639      	mov	r1, r7
 800948e:	4620      	mov	r0, r4
 8009490:	f000 fee6 	bl	800a260 <__any_on>
 8009494:	4682      	mov	sl, r0
 8009496:	b1a8      	cbz	r0, 80094c4 <__gethex+0x1f8>
 8009498:	1e7b      	subs	r3, r7, #1
 800949a:	1159      	asrs	r1, r3, #5
 800949c:	f003 021f 	and.w	r2, r3, #31
 80094a0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80094a4:	f04f 0a01 	mov.w	sl, #1
 80094a8:	fa0a f202 	lsl.w	r2, sl, r2
 80094ac:	420a      	tst	r2, r1
 80094ae:	d009      	beq.n	80094c4 <__gethex+0x1f8>
 80094b0:	4553      	cmp	r3, sl
 80094b2:	dd05      	ble.n	80094c0 <__gethex+0x1f4>
 80094b4:	1eb9      	subs	r1, r7, #2
 80094b6:	4620      	mov	r0, r4
 80094b8:	f000 fed2 	bl	800a260 <__any_on>
 80094bc:	2800      	cmp	r0, #0
 80094be:	d145      	bne.n	800954c <__gethex+0x280>
 80094c0:	f04f 0a02 	mov.w	sl, #2
 80094c4:	4639      	mov	r1, r7
 80094c6:	4620      	mov	r0, r4
 80094c8:	f7ff fe99 	bl	80091fe <rshift>
 80094cc:	443d      	add	r5, r7
 80094ce:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80094d2:	42ab      	cmp	r3, r5
 80094d4:	da4c      	bge.n	8009570 <__gethex+0x2a4>
 80094d6:	ee18 0a10 	vmov	r0, s16
 80094da:	4621      	mov	r1, r4
 80094dc:	f000 fa60 	bl	80099a0 <_Bfree>
 80094e0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80094e2:	2300      	movs	r3, #0
 80094e4:	6013      	str	r3, [r2, #0]
 80094e6:	27a3      	movs	r7, #163	; 0xa3
 80094e8:	e785      	b.n	80093f6 <__gethex+0x12a>
 80094ea:	1e73      	subs	r3, r6, #1
 80094ec:	9a05      	ldr	r2, [sp, #20]
 80094ee:	9303      	str	r3, [sp, #12]
 80094f0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80094f4:	4293      	cmp	r3, r2
 80094f6:	d019      	beq.n	800952c <__gethex+0x260>
 80094f8:	f1bb 0f20 	cmp.w	fp, #32
 80094fc:	d107      	bne.n	800950e <__gethex+0x242>
 80094fe:	9b02      	ldr	r3, [sp, #8]
 8009500:	9a00      	ldr	r2, [sp, #0]
 8009502:	f843 2b04 	str.w	r2, [r3], #4
 8009506:	9302      	str	r3, [sp, #8]
 8009508:	2300      	movs	r3, #0
 800950a:	9300      	str	r3, [sp, #0]
 800950c:	469b      	mov	fp, r3
 800950e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009512:	f7ff fec6 	bl	80092a2 <__hexdig_fun>
 8009516:	9b00      	ldr	r3, [sp, #0]
 8009518:	f000 000f 	and.w	r0, r0, #15
 800951c:	fa00 f00b 	lsl.w	r0, r0, fp
 8009520:	4303      	orrs	r3, r0
 8009522:	9300      	str	r3, [sp, #0]
 8009524:	f10b 0b04 	add.w	fp, fp, #4
 8009528:	9b03      	ldr	r3, [sp, #12]
 800952a:	e00d      	b.n	8009548 <__gethex+0x27c>
 800952c:	9b03      	ldr	r3, [sp, #12]
 800952e:	9a06      	ldr	r2, [sp, #24]
 8009530:	4413      	add	r3, r2
 8009532:	42bb      	cmp	r3, r7
 8009534:	d3e0      	bcc.n	80094f8 <__gethex+0x22c>
 8009536:	4618      	mov	r0, r3
 8009538:	9901      	ldr	r1, [sp, #4]
 800953a:	9307      	str	r3, [sp, #28]
 800953c:	4652      	mov	r2, sl
 800953e:	f001 faba 	bl	800aab6 <strncmp>
 8009542:	9b07      	ldr	r3, [sp, #28]
 8009544:	2800      	cmp	r0, #0
 8009546:	d1d7      	bne.n	80094f8 <__gethex+0x22c>
 8009548:	461e      	mov	r6, r3
 800954a:	e78b      	b.n	8009464 <__gethex+0x198>
 800954c:	f04f 0a03 	mov.w	sl, #3
 8009550:	e7b8      	b.n	80094c4 <__gethex+0x1f8>
 8009552:	da0a      	bge.n	800956a <__gethex+0x29e>
 8009554:	1a37      	subs	r7, r6, r0
 8009556:	4621      	mov	r1, r4
 8009558:	ee18 0a10 	vmov	r0, s16
 800955c:	463a      	mov	r2, r7
 800955e:	f000 fc3b 	bl	8009dd8 <__lshift>
 8009562:	1bed      	subs	r5, r5, r7
 8009564:	4604      	mov	r4, r0
 8009566:	f100 0914 	add.w	r9, r0, #20
 800956a:	f04f 0a00 	mov.w	sl, #0
 800956e:	e7ae      	b.n	80094ce <__gethex+0x202>
 8009570:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009574:	42a8      	cmp	r0, r5
 8009576:	dd72      	ble.n	800965e <__gethex+0x392>
 8009578:	1b45      	subs	r5, r0, r5
 800957a:	42ae      	cmp	r6, r5
 800957c:	dc36      	bgt.n	80095ec <__gethex+0x320>
 800957e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009582:	2b02      	cmp	r3, #2
 8009584:	d02a      	beq.n	80095dc <__gethex+0x310>
 8009586:	2b03      	cmp	r3, #3
 8009588:	d02c      	beq.n	80095e4 <__gethex+0x318>
 800958a:	2b01      	cmp	r3, #1
 800958c:	d11c      	bne.n	80095c8 <__gethex+0x2fc>
 800958e:	42ae      	cmp	r6, r5
 8009590:	d11a      	bne.n	80095c8 <__gethex+0x2fc>
 8009592:	2e01      	cmp	r6, #1
 8009594:	d112      	bne.n	80095bc <__gethex+0x2f0>
 8009596:	9a04      	ldr	r2, [sp, #16]
 8009598:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800959c:	6013      	str	r3, [r2, #0]
 800959e:	2301      	movs	r3, #1
 80095a0:	6123      	str	r3, [r4, #16]
 80095a2:	f8c9 3000 	str.w	r3, [r9]
 80095a6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80095a8:	2762      	movs	r7, #98	; 0x62
 80095aa:	601c      	str	r4, [r3, #0]
 80095ac:	e723      	b.n	80093f6 <__gethex+0x12a>
 80095ae:	bf00      	nop
 80095b0:	0800b484 	.word	0x0800b484
 80095b4:	0800b3a8 	.word	0x0800b3a8
 80095b8:	0800b41c 	.word	0x0800b41c
 80095bc:	1e71      	subs	r1, r6, #1
 80095be:	4620      	mov	r0, r4
 80095c0:	f000 fe4e 	bl	800a260 <__any_on>
 80095c4:	2800      	cmp	r0, #0
 80095c6:	d1e6      	bne.n	8009596 <__gethex+0x2ca>
 80095c8:	ee18 0a10 	vmov	r0, s16
 80095cc:	4621      	mov	r1, r4
 80095ce:	f000 f9e7 	bl	80099a0 <_Bfree>
 80095d2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80095d4:	2300      	movs	r3, #0
 80095d6:	6013      	str	r3, [r2, #0]
 80095d8:	2750      	movs	r7, #80	; 0x50
 80095da:	e70c      	b.n	80093f6 <__gethex+0x12a>
 80095dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d1f2      	bne.n	80095c8 <__gethex+0x2fc>
 80095e2:	e7d8      	b.n	8009596 <__gethex+0x2ca>
 80095e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d1d5      	bne.n	8009596 <__gethex+0x2ca>
 80095ea:	e7ed      	b.n	80095c8 <__gethex+0x2fc>
 80095ec:	1e6f      	subs	r7, r5, #1
 80095ee:	f1ba 0f00 	cmp.w	sl, #0
 80095f2:	d131      	bne.n	8009658 <__gethex+0x38c>
 80095f4:	b127      	cbz	r7, 8009600 <__gethex+0x334>
 80095f6:	4639      	mov	r1, r7
 80095f8:	4620      	mov	r0, r4
 80095fa:	f000 fe31 	bl	800a260 <__any_on>
 80095fe:	4682      	mov	sl, r0
 8009600:	117b      	asrs	r3, r7, #5
 8009602:	2101      	movs	r1, #1
 8009604:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009608:	f007 071f 	and.w	r7, r7, #31
 800960c:	fa01 f707 	lsl.w	r7, r1, r7
 8009610:	421f      	tst	r7, r3
 8009612:	4629      	mov	r1, r5
 8009614:	4620      	mov	r0, r4
 8009616:	bf18      	it	ne
 8009618:	f04a 0a02 	orrne.w	sl, sl, #2
 800961c:	1b76      	subs	r6, r6, r5
 800961e:	f7ff fdee 	bl	80091fe <rshift>
 8009622:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009626:	2702      	movs	r7, #2
 8009628:	f1ba 0f00 	cmp.w	sl, #0
 800962c:	d048      	beq.n	80096c0 <__gethex+0x3f4>
 800962e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009632:	2b02      	cmp	r3, #2
 8009634:	d015      	beq.n	8009662 <__gethex+0x396>
 8009636:	2b03      	cmp	r3, #3
 8009638:	d017      	beq.n	800966a <__gethex+0x39e>
 800963a:	2b01      	cmp	r3, #1
 800963c:	d109      	bne.n	8009652 <__gethex+0x386>
 800963e:	f01a 0f02 	tst.w	sl, #2
 8009642:	d006      	beq.n	8009652 <__gethex+0x386>
 8009644:	f8d9 0000 	ldr.w	r0, [r9]
 8009648:	ea4a 0a00 	orr.w	sl, sl, r0
 800964c:	f01a 0f01 	tst.w	sl, #1
 8009650:	d10e      	bne.n	8009670 <__gethex+0x3a4>
 8009652:	f047 0710 	orr.w	r7, r7, #16
 8009656:	e033      	b.n	80096c0 <__gethex+0x3f4>
 8009658:	f04f 0a01 	mov.w	sl, #1
 800965c:	e7d0      	b.n	8009600 <__gethex+0x334>
 800965e:	2701      	movs	r7, #1
 8009660:	e7e2      	b.n	8009628 <__gethex+0x35c>
 8009662:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009664:	f1c3 0301 	rsb	r3, r3, #1
 8009668:	9315      	str	r3, [sp, #84]	; 0x54
 800966a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800966c:	2b00      	cmp	r3, #0
 800966e:	d0f0      	beq.n	8009652 <__gethex+0x386>
 8009670:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009674:	f104 0314 	add.w	r3, r4, #20
 8009678:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800967c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009680:	f04f 0c00 	mov.w	ip, #0
 8009684:	4618      	mov	r0, r3
 8009686:	f853 2b04 	ldr.w	r2, [r3], #4
 800968a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800968e:	d01c      	beq.n	80096ca <__gethex+0x3fe>
 8009690:	3201      	adds	r2, #1
 8009692:	6002      	str	r2, [r0, #0]
 8009694:	2f02      	cmp	r7, #2
 8009696:	f104 0314 	add.w	r3, r4, #20
 800969a:	d13f      	bne.n	800971c <__gethex+0x450>
 800969c:	f8d8 2000 	ldr.w	r2, [r8]
 80096a0:	3a01      	subs	r2, #1
 80096a2:	42b2      	cmp	r2, r6
 80096a4:	d10a      	bne.n	80096bc <__gethex+0x3f0>
 80096a6:	1171      	asrs	r1, r6, #5
 80096a8:	2201      	movs	r2, #1
 80096aa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80096ae:	f006 061f 	and.w	r6, r6, #31
 80096b2:	fa02 f606 	lsl.w	r6, r2, r6
 80096b6:	421e      	tst	r6, r3
 80096b8:	bf18      	it	ne
 80096ba:	4617      	movne	r7, r2
 80096bc:	f047 0720 	orr.w	r7, r7, #32
 80096c0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80096c2:	601c      	str	r4, [r3, #0]
 80096c4:	9b04      	ldr	r3, [sp, #16]
 80096c6:	601d      	str	r5, [r3, #0]
 80096c8:	e695      	b.n	80093f6 <__gethex+0x12a>
 80096ca:	4299      	cmp	r1, r3
 80096cc:	f843 cc04 	str.w	ip, [r3, #-4]
 80096d0:	d8d8      	bhi.n	8009684 <__gethex+0x3b8>
 80096d2:	68a3      	ldr	r3, [r4, #8]
 80096d4:	459b      	cmp	fp, r3
 80096d6:	db19      	blt.n	800970c <__gethex+0x440>
 80096d8:	6861      	ldr	r1, [r4, #4]
 80096da:	ee18 0a10 	vmov	r0, s16
 80096de:	3101      	adds	r1, #1
 80096e0:	f000 f91e 	bl	8009920 <_Balloc>
 80096e4:	4681      	mov	r9, r0
 80096e6:	b918      	cbnz	r0, 80096f0 <__gethex+0x424>
 80096e8:	4b1a      	ldr	r3, [pc, #104]	; (8009754 <__gethex+0x488>)
 80096ea:	4602      	mov	r2, r0
 80096ec:	2184      	movs	r1, #132	; 0x84
 80096ee:	e6a8      	b.n	8009442 <__gethex+0x176>
 80096f0:	6922      	ldr	r2, [r4, #16]
 80096f2:	3202      	adds	r2, #2
 80096f4:	f104 010c 	add.w	r1, r4, #12
 80096f8:	0092      	lsls	r2, r2, #2
 80096fa:	300c      	adds	r0, #12
 80096fc:	f7fd f896 	bl	800682c <memcpy>
 8009700:	4621      	mov	r1, r4
 8009702:	ee18 0a10 	vmov	r0, s16
 8009706:	f000 f94b 	bl	80099a0 <_Bfree>
 800970a:	464c      	mov	r4, r9
 800970c:	6923      	ldr	r3, [r4, #16]
 800970e:	1c5a      	adds	r2, r3, #1
 8009710:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009714:	6122      	str	r2, [r4, #16]
 8009716:	2201      	movs	r2, #1
 8009718:	615a      	str	r2, [r3, #20]
 800971a:	e7bb      	b.n	8009694 <__gethex+0x3c8>
 800971c:	6922      	ldr	r2, [r4, #16]
 800971e:	455a      	cmp	r2, fp
 8009720:	dd0b      	ble.n	800973a <__gethex+0x46e>
 8009722:	2101      	movs	r1, #1
 8009724:	4620      	mov	r0, r4
 8009726:	f7ff fd6a 	bl	80091fe <rshift>
 800972a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800972e:	3501      	adds	r5, #1
 8009730:	42ab      	cmp	r3, r5
 8009732:	f6ff aed0 	blt.w	80094d6 <__gethex+0x20a>
 8009736:	2701      	movs	r7, #1
 8009738:	e7c0      	b.n	80096bc <__gethex+0x3f0>
 800973a:	f016 061f 	ands.w	r6, r6, #31
 800973e:	d0fa      	beq.n	8009736 <__gethex+0x46a>
 8009740:	4453      	add	r3, sl
 8009742:	f1c6 0620 	rsb	r6, r6, #32
 8009746:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800974a:	f000 f9db 	bl	8009b04 <__hi0bits>
 800974e:	42b0      	cmp	r0, r6
 8009750:	dbe7      	blt.n	8009722 <__gethex+0x456>
 8009752:	e7f0      	b.n	8009736 <__gethex+0x46a>
 8009754:	0800b3a8 	.word	0x0800b3a8

08009758 <L_shift>:
 8009758:	f1c2 0208 	rsb	r2, r2, #8
 800975c:	0092      	lsls	r2, r2, #2
 800975e:	b570      	push	{r4, r5, r6, lr}
 8009760:	f1c2 0620 	rsb	r6, r2, #32
 8009764:	6843      	ldr	r3, [r0, #4]
 8009766:	6804      	ldr	r4, [r0, #0]
 8009768:	fa03 f506 	lsl.w	r5, r3, r6
 800976c:	432c      	orrs	r4, r5
 800976e:	40d3      	lsrs	r3, r2
 8009770:	6004      	str	r4, [r0, #0]
 8009772:	f840 3f04 	str.w	r3, [r0, #4]!
 8009776:	4288      	cmp	r0, r1
 8009778:	d3f4      	bcc.n	8009764 <L_shift+0xc>
 800977a:	bd70      	pop	{r4, r5, r6, pc}

0800977c <__match>:
 800977c:	b530      	push	{r4, r5, lr}
 800977e:	6803      	ldr	r3, [r0, #0]
 8009780:	3301      	adds	r3, #1
 8009782:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009786:	b914      	cbnz	r4, 800978e <__match+0x12>
 8009788:	6003      	str	r3, [r0, #0]
 800978a:	2001      	movs	r0, #1
 800978c:	bd30      	pop	{r4, r5, pc}
 800978e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009792:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009796:	2d19      	cmp	r5, #25
 8009798:	bf98      	it	ls
 800979a:	3220      	addls	r2, #32
 800979c:	42a2      	cmp	r2, r4
 800979e:	d0f0      	beq.n	8009782 <__match+0x6>
 80097a0:	2000      	movs	r0, #0
 80097a2:	e7f3      	b.n	800978c <__match+0x10>

080097a4 <__hexnan>:
 80097a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097a8:	680b      	ldr	r3, [r1, #0]
 80097aa:	115e      	asrs	r6, r3, #5
 80097ac:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80097b0:	f013 031f 	ands.w	r3, r3, #31
 80097b4:	b087      	sub	sp, #28
 80097b6:	bf18      	it	ne
 80097b8:	3604      	addne	r6, #4
 80097ba:	2500      	movs	r5, #0
 80097bc:	1f37      	subs	r7, r6, #4
 80097be:	4690      	mov	r8, r2
 80097c0:	6802      	ldr	r2, [r0, #0]
 80097c2:	9301      	str	r3, [sp, #4]
 80097c4:	4682      	mov	sl, r0
 80097c6:	f846 5c04 	str.w	r5, [r6, #-4]
 80097ca:	46b9      	mov	r9, r7
 80097cc:	463c      	mov	r4, r7
 80097ce:	9502      	str	r5, [sp, #8]
 80097d0:	46ab      	mov	fp, r5
 80097d2:	7851      	ldrb	r1, [r2, #1]
 80097d4:	1c53      	adds	r3, r2, #1
 80097d6:	9303      	str	r3, [sp, #12]
 80097d8:	b341      	cbz	r1, 800982c <__hexnan+0x88>
 80097da:	4608      	mov	r0, r1
 80097dc:	9205      	str	r2, [sp, #20]
 80097de:	9104      	str	r1, [sp, #16]
 80097e0:	f7ff fd5f 	bl	80092a2 <__hexdig_fun>
 80097e4:	2800      	cmp	r0, #0
 80097e6:	d14f      	bne.n	8009888 <__hexnan+0xe4>
 80097e8:	9904      	ldr	r1, [sp, #16]
 80097ea:	9a05      	ldr	r2, [sp, #20]
 80097ec:	2920      	cmp	r1, #32
 80097ee:	d818      	bhi.n	8009822 <__hexnan+0x7e>
 80097f0:	9b02      	ldr	r3, [sp, #8]
 80097f2:	459b      	cmp	fp, r3
 80097f4:	dd13      	ble.n	800981e <__hexnan+0x7a>
 80097f6:	454c      	cmp	r4, r9
 80097f8:	d206      	bcs.n	8009808 <__hexnan+0x64>
 80097fa:	2d07      	cmp	r5, #7
 80097fc:	dc04      	bgt.n	8009808 <__hexnan+0x64>
 80097fe:	462a      	mov	r2, r5
 8009800:	4649      	mov	r1, r9
 8009802:	4620      	mov	r0, r4
 8009804:	f7ff ffa8 	bl	8009758 <L_shift>
 8009808:	4544      	cmp	r4, r8
 800980a:	d950      	bls.n	80098ae <__hexnan+0x10a>
 800980c:	2300      	movs	r3, #0
 800980e:	f1a4 0904 	sub.w	r9, r4, #4
 8009812:	f844 3c04 	str.w	r3, [r4, #-4]
 8009816:	f8cd b008 	str.w	fp, [sp, #8]
 800981a:	464c      	mov	r4, r9
 800981c:	461d      	mov	r5, r3
 800981e:	9a03      	ldr	r2, [sp, #12]
 8009820:	e7d7      	b.n	80097d2 <__hexnan+0x2e>
 8009822:	2929      	cmp	r1, #41	; 0x29
 8009824:	d156      	bne.n	80098d4 <__hexnan+0x130>
 8009826:	3202      	adds	r2, #2
 8009828:	f8ca 2000 	str.w	r2, [sl]
 800982c:	f1bb 0f00 	cmp.w	fp, #0
 8009830:	d050      	beq.n	80098d4 <__hexnan+0x130>
 8009832:	454c      	cmp	r4, r9
 8009834:	d206      	bcs.n	8009844 <__hexnan+0xa0>
 8009836:	2d07      	cmp	r5, #7
 8009838:	dc04      	bgt.n	8009844 <__hexnan+0xa0>
 800983a:	462a      	mov	r2, r5
 800983c:	4649      	mov	r1, r9
 800983e:	4620      	mov	r0, r4
 8009840:	f7ff ff8a 	bl	8009758 <L_shift>
 8009844:	4544      	cmp	r4, r8
 8009846:	d934      	bls.n	80098b2 <__hexnan+0x10e>
 8009848:	f1a8 0204 	sub.w	r2, r8, #4
 800984c:	4623      	mov	r3, r4
 800984e:	f853 1b04 	ldr.w	r1, [r3], #4
 8009852:	f842 1f04 	str.w	r1, [r2, #4]!
 8009856:	429f      	cmp	r7, r3
 8009858:	d2f9      	bcs.n	800984e <__hexnan+0xaa>
 800985a:	1b3b      	subs	r3, r7, r4
 800985c:	f023 0303 	bic.w	r3, r3, #3
 8009860:	3304      	adds	r3, #4
 8009862:	3401      	adds	r4, #1
 8009864:	3e03      	subs	r6, #3
 8009866:	42b4      	cmp	r4, r6
 8009868:	bf88      	it	hi
 800986a:	2304      	movhi	r3, #4
 800986c:	4443      	add	r3, r8
 800986e:	2200      	movs	r2, #0
 8009870:	f843 2b04 	str.w	r2, [r3], #4
 8009874:	429f      	cmp	r7, r3
 8009876:	d2fb      	bcs.n	8009870 <__hexnan+0xcc>
 8009878:	683b      	ldr	r3, [r7, #0]
 800987a:	b91b      	cbnz	r3, 8009884 <__hexnan+0xe0>
 800987c:	4547      	cmp	r7, r8
 800987e:	d127      	bne.n	80098d0 <__hexnan+0x12c>
 8009880:	2301      	movs	r3, #1
 8009882:	603b      	str	r3, [r7, #0]
 8009884:	2005      	movs	r0, #5
 8009886:	e026      	b.n	80098d6 <__hexnan+0x132>
 8009888:	3501      	adds	r5, #1
 800988a:	2d08      	cmp	r5, #8
 800988c:	f10b 0b01 	add.w	fp, fp, #1
 8009890:	dd06      	ble.n	80098a0 <__hexnan+0xfc>
 8009892:	4544      	cmp	r4, r8
 8009894:	d9c3      	bls.n	800981e <__hexnan+0x7a>
 8009896:	2300      	movs	r3, #0
 8009898:	f844 3c04 	str.w	r3, [r4, #-4]
 800989c:	2501      	movs	r5, #1
 800989e:	3c04      	subs	r4, #4
 80098a0:	6822      	ldr	r2, [r4, #0]
 80098a2:	f000 000f 	and.w	r0, r0, #15
 80098a6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80098aa:	6022      	str	r2, [r4, #0]
 80098ac:	e7b7      	b.n	800981e <__hexnan+0x7a>
 80098ae:	2508      	movs	r5, #8
 80098b0:	e7b5      	b.n	800981e <__hexnan+0x7a>
 80098b2:	9b01      	ldr	r3, [sp, #4]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d0df      	beq.n	8009878 <__hexnan+0xd4>
 80098b8:	f04f 32ff 	mov.w	r2, #4294967295
 80098bc:	f1c3 0320 	rsb	r3, r3, #32
 80098c0:	fa22 f303 	lsr.w	r3, r2, r3
 80098c4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80098c8:	401a      	ands	r2, r3
 80098ca:	f846 2c04 	str.w	r2, [r6, #-4]
 80098ce:	e7d3      	b.n	8009878 <__hexnan+0xd4>
 80098d0:	3f04      	subs	r7, #4
 80098d2:	e7d1      	b.n	8009878 <__hexnan+0xd4>
 80098d4:	2004      	movs	r0, #4
 80098d6:	b007      	add	sp, #28
 80098d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080098dc <_localeconv_r>:
 80098dc:	4800      	ldr	r0, [pc, #0]	; (80098e0 <_localeconv_r+0x4>)
 80098de:	4770      	bx	lr
 80098e0:	200001c8 	.word	0x200001c8

080098e4 <__retarget_lock_init_recursive>:
 80098e4:	4770      	bx	lr

080098e6 <__retarget_lock_acquire_recursive>:
 80098e6:	4770      	bx	lr

080098e8 <__retarget_lock_release_recursive>:
 80098e8:	4770      	bx	lr
	...

080098ec <malloc>:
 80098ec:	4b02      	ldr	r3, [pc, #8]	; (80098f8 <malloc+0xc>)
 80098ee:	4601      	mov	r1, r0
 80098f0:	6818      	ldr	r0, [r3, #0]
 80098f2:	f000 bd59 	b.w	800a3a8 <_malloc_r>
 80098f6:	bf00      	nop
 80098f8:	20000070 	.word	0x20000070

080098fc <__ascii_mbtowc>:
 80098fc:	b082      	sub	sp, #8
 80098fe:	b901      	cbnz	r1, 8009902 <__ascii_mbtowc+0x6>
 8009900:	a901      	add	r1, sp, #4
 8009902:	b142      	cbz	r2, 8009916 <__ascii_mbtowc+0x1a>
 8009904:	b14b      	cbz	r3, 800991a <__ascii_mbtowc+0x1e>
 8009906:	7813      	ldrb	r3, [r2, #0]
 8009908:	600b      	str	r3, [r1, #0]
 800990a:	7812      	ldrb	r2, [r2, #0]
 800990c:	1e10      	subs	r0, r2, #0
 800990e:	bf18      	it	ne
 8009910:	2001      	movne	r0, #1
 8009912:	b002      	add	sp, #8
 8009914:	4770      	bx	lr
 8009916:	4610      	mov	r0, r2
 8009918:	e7fb      	b.n	8009912 <__ascii_mbtowc+0x16>
 800991a:	f06f 0001 	mvn.w	r0, #1
 800991e:	e7f8      	b.n	8009912 <__ascii_mbtowc+0x16>

08009920 <_Balloc>:
 8009920:	b570      	push	{r4, r5, r6, lr}
 8009922:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009924:	4604      	mov	r4, r0
 8009926:	460d      	mov	r5, r1
 8009928:	b976      	cbnz	r6, 8009948 <_Balloc+0x28>
 800992a:	2010      	movs	r0, #16
 800992c:	f7ff ffde 	bl	80098ec <malloc>
 8009930:	4602      	mov	r2, r0
 8009932:	6260      	str	r0, [r4, #36]	; 0x24
 8009934:	b920      	cbnz	r0, 8009940 <_Balloc+0x20>
 8009936:	4b18      	ldr	r3, [pc, #96]	; (8009998 <_Balloc+0x78>)
 8009938:	4818      	ldr	r0, [pc, #96]	; (800999c <_Balloc+0x7c>)
 800993a:	2166      	movs	r1, #102	; 0x66
 800993c:	f001 f9b0 	bl	800aca0 <__assert_func>
 8009940:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009944:	6006      	str	r6, [r0, #0]
 8009946:	60c6      	str	r6, [r0, #12]
 8009948:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800994a:	68f3      	ldr	r3, [r6, #12]
 800994c:	b183      	cbz	r3, 8009970 <_Balloc+0x50>
 800994e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009950:	68db      	ldr	r3, [r3, #12]
 8009952:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009956:	b9b8      	cbnz	r0, 8009988 <_Balloc+0x68>
 8009958:	2101      	movs	r1, #1
 800995a:	fa01 f605 	lsl.w	r6, r1, r5
 800995e:	1d72      	adds	r2, r6, #5
 8009960:	0092      	lsls	r2, r2, #2
 8009962:	4620      	mov	r0, r4
 8009964:	f000 fc9d 	bl	800a2a2 <_calloc_r>
 8009968:	b160      	cbz	r0, 8009984 <_Balloc+0x64>
 800996a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800996e:	e00e      	b.n	800998e <_Balloc+0x6e>
 8009970:	2221      	movs	r2, #33	; 0x21
 8009972:	2104      	movs	r1, #4
 8009974:	4620      	mov	r0, r4
 8009976:	f000 fc94 	bl	800a2a2 <_calloc_r>
 800997a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800997c:	60f0      	str	r0, [r6, #12]
 800997e:	68db      	ldr	r3, [r3, #12]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d1e4      	bne.n	800994e <_Balloc+0x2e>
 8009984:	2000      	movs	r0, #0
 8009986:	bd70      	pop	{r4, r5, r6, pc}
 8009988:	6802      	ldr	r2, [r0, #0]
 800998a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800998e:	2300      	movs	r3, #0
 8009990:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009994:	e7f7      	b.n	8009986 <_Balloc+0x66>
 8009996:	bf00      	nop
 8009998:	0800b336 	.word	0x0800b336
 800999c:	0800b498 	.word	0x0800b498

080099a0 <_Bfree>:
 80099a0:	b570      	push	{r4, r5, r6, lr}
 80099a2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80099a4:	4605      	mov	r5, r0
 80099a6:	460c      	mov	r4, r1
 80099a8:	b976      	cbnz	r6, 80099c8 <_Bfree+0x28>
 80099aa:	2010      	movs	r0, #16
 80099ac:	f7ff ff9e 	bl	80098ec <malloc>
 80099b0:	4602      	mov	r2, r0
 80099b2:	6268      	str	r0, [r5, #36]	; 0x24
 80099b4:	b920      	cbnz	r0, 80099c0 <_Bfree+0x20>
 80099b6:	4b09      	ldr	r3, [pc, #36]	; (80099dc <_Bfree+0x3c>)
 80099b8:	4809      	ldr	r0, [pc, #36]	; (80099e0 <_Bfree+0x40>)
 80099ba:	218a      	movs	r1, #138	; 0x8a
 80099bc:	f001 f970 	bl	800aca0 <__assert_func>
 80099c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80099c4:	6006      	str	r6, [r0, #0]
 80099c6:	60c6      	str	r6, [r0, #12]
 80099c8:	b13c      	cbz	r4, 80099da <_Bfree+0x3a>
 80099ca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80099cc:	6862      	ldr	r2, [r4, #4]
 80099ce:	68db      	ldr	r3, [r3, #12]
 80099d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80099d4:	6021      	str	r1, [r4, #0]
 80099d6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80099da:	bd70      	pop	{r4, r5, r6, pc}
 80099dc:	0800b336 	.word	0x0800b336
 80099e0:	0800b498 	.word	0x0800b498

080099e4 <__multadd>:
 80099e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099e8:	690d      	ldr	r5, [r1, #16]
 80099ea:	4607      	mov	r7, r0
 80099ec:	460c      	mov	r4, r1
 80099ee:	461e      	mov	r6, r3
 80099f0:	f101 0c14 	add.w	ip, r1, #20
 80099f4:	2000      	movs	r0, #0
 80099f6:	f8dc 3000 	ldr.w	r3, [ip]
 80099fa:	b299      	uxth	r1, r3
 80099fc:	fb02 6101 	mla	r1, r2, r1, r6
 8009a00:	0c1e      	lsrs	r6, r3, #16
 8009a02:	0c0b      	lsrs	r3, r1, #16
 8009a04:	fb02 3306 	mla	r3, r2, r6, r3
 8009a08:	b289      	uxth	r1, r1
 8009a0a:	3001      	adds	r0, #1
 8009a0c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009a10:	4285      	cmp	r5, r0
 8009a12:	f84c 1b04 	str.w	r1, [ip], #4
 8009a16:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009a1a:	dcec      	bgt.n	80099f6 <__multadd+0x12>
 8009a1c:	b30e      	cbz	r6, 8009a62 <__multadd+0x7e>
 8009a1e:	68a3      	ldr	r3, [r4, #8]
 8009a20:	42ab      	cmp	r3, r5
 8009a22:	dc19      	bgt.n	8009a58 <__multadd+0x74>
 8009a24:	6861      	ldr	r1, [r4, #4]
 8009a26:	4638      	mov	r0, r7
 8009a28:	3101      	adds	r1, #1
 8009a2a:	f7ff ff79 	bl	8009920 <_Balloc>
 8009a2e:	4680      	mov	r8, r0
 8009a30:	b928      	cbnz	r0, 8009a3e <__multadd+0x5a>
 8009a32:	4602      	mov	r2, r0
 8009a34:	4b0c      	ldr	r3, [pc, #48]	; (8009a68 <__multadd+0x84>)
 8009a36:	480d      	ldr	r0, [pc, #52]	; (8009a6c <__multadd+0x88>)
 8009a38:	21b5      	movs	r1, #181	; 0xb5
 8009a3a:	f001 f931 	bl	800aca0 <__assert_func>
 8009a3e:	6922      	ldr	r2, [r4, #16]
 8009a40:	3202      	adds	r2, #2
 8009a42:	f104 010c 	add.w	r1, r4, #12
 8009a46:	0092      	lsls	r2, r2, #2
 8009a48:	300c      	adds	r0, #12
 8009a4a:	f7fc feef 	bl	800682c <memcpy>
 8009a4e:	4621      	mov	r1, r4
 8009a50:	4638      	mov	r0, r7
 8009a52:	f7ff ffa5 	bl	80099a0 <_Bfree>
 8009a56:	4644      	mov	r4, r8
 8009a58:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009a5c:	3501      	adds	r5, #1
 8009a5e:	615e      	str	r6, [r3, #20]
 8009a60:	6125      	str	r5, [r4, #16]
 8009a62:	4620      	mov	r0, r4
 8009a64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a68:	0800b3a8 	.word	0x0800b3a8
 8009a6c:	0800b498 	.word	0x0800b498

08009a70 <__s2b>:
 8009a70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a74:	460c      	mov	r4, r1
 8009a76:	4615      	mov	r5, r2
 8009a78:	461f      	mov	r7, r3
 8009a7a:	2209      	movs	r2, #9
 8009a7c:	3308      	adds	r3, #8
 8009a7e:	4606      	mov	r6, r0
 8009a80:	fb93 f3f2 	sdiv	r3, r3, r2
 8009a84:	2100      	movs	r1, #0
 8009a86:	2201      	movs	r2, #1
 8009a88:	429a      	cmp	r2, r3
 8009a8a:	db09      	blt.n	8009aa0 <__s2b+0x30>
 8009a8c:	4630      	mov	r0, r6
 8009a8e:	f7ff ff47 	bl	8009920 <_Balloc>
 8009a92:	b940      	cbnz	r0, 8009aa6 <__s2b+0x36>
 8009a94:	4602      	mov	r2, r0
 8009a96:	4b19      	ldr	r3, [pc, #100]	; (8009afc <__s2b+0x8c>)
 8009a98:	4819      	ldr	r0, [pc, #100]	; (8009b00 <__s2b+0x90>)
 8009a9a:	21ce      	movs	r1, #206	; 0xce
 8009a9c:	f001 f900 	bl	800aca0 <__assert_func>
 8009aa0:	0052      	lsls	r2, r2, #1
 8009aa2:	3101      	adds	r1, #1
 8009aa4:	e7f0      	b.n	8009a88 <__s2b+0x18>
 8009aa6:	9b08      	ldr	r3, [sp, #32]
 8009aa8:	6143      	str	r3, [r0, #20]
 8009aaa:	2d09      	cmp	r5, #9
 8009aac:	f04f 0301 	mov.w	r3, #1
 8009ab0:	6103      	str	r3, [r0, #16]
 8009ab2:	dd16      	ble.n	8009ae2 <__s2b+0x72>
 8009ab4:	f104 0909 	add.w	r9, r4, #9
 8009ab8:	46c8      	mov	r8, r9
 8009aba:	442c      	add	r4, r5
 8009abc:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009ac0:	4601      	mov	r1, r0
 8009ac2:	3b30      	subs	r3, #48	; 0x30
 8009ac4:	220a      	movs	r2, #10
 8009ac6:	4630      	mov	r0, r6
 8009ac8:	f7ff ff8c 	bl	80099e4 <__multadd>
 8009acc:	45a0      	cmp	r8, r4
 8009ace:	d1f5      	bne.n	8009abc <__s2b+0x4c>
 8009ad0:	f1a5 0408 	sub.w	r4, r5, #8
 8009ad4:	444c      	add	r4, r9
 8009ad6:	1b2d      	subs	r5, r5, r4
 8009ad8:	1963      	adds	r3, r4, r5
 8009ada:	42bb      	cmp	r3, r7
 8009adc:	db04      	blt.n	8009ae8 <__s2b+0x78>
 8009ade:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ae2:	340a      	adds	r4, #10
 8009ae4:	2509      	movs	r5, #9
 8009ae6:	e7f6      	b.n	8009ad6 <__s2b+0x66>
 8009ae8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009aec:	4601      	mov	r1, r0
 8009aee:	3b30      	subs	r3, #48	; 0x30
 8009af0:	220a      	movs	r2, #10
 8009af2:	4630      	mov	r0, r6
 8009af4:	f7ff ff76 	bl	80099e4 <__multadd>
 8009af8:	e7ee      	b.n	8009ad8 <__s2b+0x68>
 8009afa:	bf00      	nop
 8009afc:	0800b3a8 	.word	0x0800b3a8
 8009b00:	0800b498 	.word	0x0800b498

08009b04 <__hi0bits>:
 8009b04:	0c03      	lsrs	r3, r0, #16
 8009b06:	041b      	lsls	r3, r3, #16
 8009b08:	b9d3      	cbnz	r3, 8009b40 <__hi0bits+0x3c>
 8009b0a:	0400      	lsls	r0, r0, #16
 8009b0c:	2310      	movs	r3, #16
 8009b0e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009b12:	bf04      	itt	eq
 8009b14:	0200      	lsleq	r0, r0, #8
 8009b16:	3308      	addeq	r3, #8
 8009b18:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009b1c:	bf04      	itt	eq
 8009b1e:	0100      	lsleq	r0, r0, #4
 8009b20:	3304      	addeq	r3, #4
 8009b22:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009b26:	bf04      	itt	eq
 8009b28:	0080      	lsleq	r0, r0, #2
 8009b2a:	3302      	addeq	r3, #2
 8009b2c:	2800      	cmp	r0, #0
 8009b2e:	db05      	blt.n	8009b3c <__hi0bits+0x38>
 8009b30:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009b34:	f103 0301 	add.w	r3, r3, #1
 8009b38:	bf08      	it	eq
 8009b3a:	2320      	moveq	r3, #32
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	4770      	bx	lr
 8009b40:	2300      	movs	r3, #0
 8009b42:	e7e4      	b.n	8009b0e <__hi0bits+0xa>

08009b44 <__lo0bits>:
 8009b44:	6803      	ldr	r3, [r0, #0]
 8009b46:	f013 0207 	ands.w	r2, r3, #7
 8009b4a:	4601      	mov	r1, r0
 8009b4c:	d00b      	beq.n	8009b66 <__lo0bits+0x22>
 8009b4e:	07da      	lsls	r2, r3, #31
 8009b50:	d423      	bmi.n	8009b9a <__lo0bits+0x56>
 8009b52:	0798      	lsls	r0, r3, #30
 8009b54:	bf49      	itett	mi
 8009b56:	085b      	lsrmi	r3, r3, #1
 8009b58:	089b      	lsrpl	r3, r3, #2
 8009b5a:	2001      	movmi	r0, #1
 8009b5c:	600b      	strmi	r3, [r1, #0]
 8009b5e:	bf5c      	itt	pl
 8009b60:	600b      	strpl	r3, [r1, #0]
 8009b62:	2002      	movpl	r0, #2
 8009b64:	4770      	bx	lr
 8009b66:	b298      	uxth	r0, r3
 8009b68:	b9a8      	cbnz	r0, 8009b96 <__lo0bits+0x52>
 8009b6a:	0c1b      	lsrs	r3, r3, #16
 8009b6c:	2010      	movs	r0, #16
 8009b6e:	b2da      	uxtb	r2, r3
 8009b70:	b90a      	cbnz	r2, 8009b76 <__lo0bits+0x32>
 8009b72:	3008      	adds	r0, #8
 8009b74:	0a1b      	lsrs	r3, r3, #8
 8009b76:	071a      	lsls	r2, r3, #28
 8009b78:	bf04      	itt	eq
 8009b7a:	091b      	lsreq	r3, r3, #4
 8009b7c:	3004      	addeq	r0, #4
 8009b7e:	079a      	lsls	r2, r3, #30
 8009b80:	bf04      	itt	eq
 8009b82:	089b      	lsreq	r3, r3, #2
 8009b84:	3002      	addeq	r0, #2
 8009b86:	07da      	lsls	r2, r3, #31
 8009b88:	d403      	bmi.n	8009b92 <__lo0bits+0x4e>
 8009b8a:	085b      	lsrs	r3, r3, #1
 8009b8c:	f100 0001 	add.w	r0, r0, #1
 8009b90:	d005      	beq.n	8009b9e <__lo0bits+0x5a>
 8009b92:	600b      	str	r3, [r1, #0]
 8009b94:	4770      	bx	lr
 8009b96:	4610      	mov	r0, r2
 8009b98:	e7e9      	b.n	8009b6e <__lo0bits+0x2a>
 8009b9a:	2000      	movs	r0, #0
 8009b9c:	4770      	bx	lr
 8009b9e:	2020      	movs	r0, #32
 8009ba0:	4770      	bx	lr
	...

08009ba4 <__i2b>:
 8009ba4:	b510      	push	{r4, lr}
 8009ba6:	460c      	mov	r4, r1
 8009ba8:	2101      	movs	r1, #1
 8009baa:	f7ff feb9 	bl	8009920 <_Balloc>
 8009bae:	4602      	mov	r2, r0
 8009bb0:	b928      	cbnz	r0, 8009bbe <__i2b+0x1a>
 8009bb2:	4b05      	ldr	r3, [pc, #20]	; (8009bc8 <__i2b+0x24>)
 8009bb4:	4805      	ldr	r0, [pc, #20]	; (8009bcc <__i2b+0x28>)
 8009bb6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009bba:	f001 f871 	bl	800aca0 <__assert_func>
 8009bbe:	2301      	movs	r3, #1
 8009bc0:	6144      	str	r4, [r0, #20]
 8009bc2:	6103      	str	r3, [r0, #16]
 8009bc4:	bd10      	pop	{r4, pc}
 8009bc6:	bf00      	nop
 8009bc8:	0800b3a8 	.word	0x0800b3a8
 8009bcc:	0800b498 	.word	0x0800b498

08009bd0 <__multiply>:
 8009bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bd4:	4691      	mov	r9, r2
 8009bd6:	690a      	ldr	r2, [r1, #16]
 8009bd8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009bdc:	429a      	cmp	r2, r3
 8009bde:	bfb8      	it	lt
 8009be0:	460b      	movlt	r3, r1
 8009be2:	460c      	mov	r4, r1
 8009be4:	bfbc      	itt	lt
 8009be6:	464c      	movlt	r4, r9
 8009be8:	4699      	movlt	r9, r3
 8009bea:	6927      	ldr	r7, [r4, #16]
 8009bec:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009bf0:	68a3      	ldr	r3, [r4, #8]
 8009bf2:	6861      	ldr	r1, [r4, #4]
 8009bf4:	eb07 060a 	add.w	r6, r7, sl
 8009bf8:	42b3      	cmp	r3, r6
 8009bfa:	b085      	sub	sp, #20
 8009bfc:	bfb8      	it	lt
 8009bfe:	3101      	addlt	r1, #1
 8009c00:	f7ff fe8e 	bl	8009920 <_Balloc>
 8009c04:	b930      	cbnz	r0, 8009c14 <__multiply+0x44>
 8009c06:	4602      	mov	r2, r0
 8009c08:	4b44      	ldr	r3, [pc, #272]	; (8009d1c <__multiply+0x14c>)
 8009c0a:	4845      	ldr	r0, [pc, #276]	; (8009d20 <__multiply+0x150>)
 8009c0c:	f240 115d 	movw	r1, #349	; 0x15d
 8009c10:	f001 f846 	bl	800aca0 <__assert_func>
 8009c14:	f100 0514 	add.w	r5, r0, #20
 8009c18:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009c1c:	462b      	mov	r3, r5
 8009c1e:	2200      	movs	r2, #0
 8009c20:	4543      	cmp	r3, r8
 8009c22:	d321      	bcc.n	8009c68 <__multiply+0x98>
 8009c24:	f104 0314 	add.w	r3, r4, #20
 8009c28:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009c2c:	f109 0314 	add.w	r3, r9, #20
 8009c30:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009c34:	9202      	str	r2, [sp, #8]
 8009c36:	1b3a      	subs	r2, r7, r4
 8009c38:	3a15      	subs	r2, #21
 8009c3a:	f022 0203 	bic.w	r2, r2, #3
 8009c3e:	3204      	adds	r2, #4
 8009c40:	f104 0115 	add.w	r1, r4, #21
 8009c44:	428f      	cmp	r7, r1
 8009c46:	bf38      	it	cc
 8009c48:	2204      	movcc	r2, #4
 8009c4a:	9201      	str	r2, [sp, #4]
 8009c4c:	9a02      	ldr	r2, [sp, #8]
 8009c4e:	9303      	str	r3, [sp, #12]
 8009c50:	429a      	cmp	r2, r3
 8009c52:	d80c      	bhi.n	8009c6e <__multiply+0x9e>
 8009c54:	2e00      	cmp	r6, #0
 8009c56:	dd03      	ble.n	8009c60 <__multiply+0x90>
 8009c58:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d05a      	beq.n	8009d16 <__multiply+0x146>
 8009c60:	6106      	str	r6, [r0, #16]
 8009c62:	b005      	add	sp, #20
 8009c64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c68:	f843 2b04 	str.w	r2, [r3], #4
 8009c6c:	e7d8      	b.n	8009c20 <__multiply+0x50>
 8009c6e:	f8b3 a000 	ldrh.w	sl, [r3]
 8009c72:	f1ba 0f00 	cmp.w	sl, #0
 8009c76:	d024      	beq.n	8009cc2 <__multiply+0xf2>
 8009c78:	f104 0e14 	add.w	lr, r4, #20
 8009c7c:	46a9      	mov	r9, r5
 8009c7e:	f04f 0c00 	mov.w	ip, #0
 8009c82:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009c86:	f8d9 1000 	ldr.w	r1, [r9]
 8009c8a:	fa1f fb82 	uxth.w	fp, r2
 8009c8e:	b289      	uxth	r1, r1
 8009c90:	fb0a 110b 	mla	r1, sl, fp, r1
 8009c94:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009c98:	f8d9 2000 	ldr.w	r2, [r9]
 8009c9c:	4461      	add	r1, ip
 8009c9e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009ca2:	fb0a c20b 	mla	r2, sl, fp, ip
 8009ca6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009caa:	b289      	uxth	r1, r1
 8009cac:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009cb0:	4577      	cmp	r7, lr
 8009cb2:	f849 1b04 	str.w	r1, [r9], #4
 8009cb6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009cba:	d8e2      	bhi.n	8009c82 <__multiply+0xb2>
 8009cbc:	9a01      	ldr	r2, [sp, #4]
 8009cbe:	f845 c002 	str.w	ip, [r5, r2]
 8009cc2:	9a03      	ldr	r2, [sp, #12]
 8009cc4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009cc8:	3304      	adds	r3, #4
 8009cca:	f1b9 0f00 	cmp.w	r9, #0
 8009cce:	d020      	beq.n	8009d12 <__multiply+0x142>
 8009cd0:	6829      	ldr	r1, [r5, #0]
 8009cd2:	f104 0c14 	add.w	ip, r4, #20
 8009cd6:	46ae      	mov	lr, r5
 8009cd8:	f04f 0a00 	mov.w	sl, #0
 8009cdc:	f8bc b000 	ldrh.w	fp, [ip]
 8009ce0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009ce4:	fb09 220b 	mla	r2, r9, fp, r2
 8009ce8:	4492      	add	sl, r2
 8009cea:	b289      	uxth	r1, r1
 8009cec:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009cf0:	f84e 1b04 	str.w	r1, [lr], #4
 8009cf4:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009cf8:	f8be 1000 	ldrh.w	r1, [lr]
 8009cfc:	0c12      	lsrs	r2, r2, #16
 8009cfe:	fb09 1102 	mla	r1, r9, r2, r1
 8009d02:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009d06:	4567      	cmp	r7, ip
 8009d08:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009d0c:	d8e6      	bhi.n	8009cdc <__multiply+0x10c>
 8009d0e:	9a01      	ldr	r2, [sp, #4]
 8009d10:	50a9      	str	r1, [r5, r2]
 8009d12:	3504      	adds	r5, #4
 8009d14:	e79a      	b.n	8009c4c <__multiply+0x7c>
 8009d16:	3e01      	subs	r6, #1
 8009d18:	e79c      	b.n	8009c54 <__multiply+0x84>
 8009d1a:	bf00      	nop
 8009d1c:	0800b3a8 	.word	0x0800b3a8
 8009d20:	0800b498 	.word	0x0800b498

08009d24 <__pow5mult>:
 8009d24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d28:	4615      	mov	r5, r2
 8009d2a:	f012 0203 	ands.w	r2, r2, #3
 8009d2e:	4606      	mov	r6, r0
 8009d30:	460f      	mov	r7, r1
 8009d32:	d007      	beq.n	8009d44 <__pow5mult+0x20>
 8009d34:	4c25      	ldr	r4, [pc, #148]	; (8009dcc <__pow5mult+0xa8>)
 8009d36:	3a01      	subs	r2, #1
 8009d38:	2300      	movs	r3, #0
 8009d3a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009d3e:	f7ff fe51 	bl	80099e4 <__multadd>
 8009d42:	4607      	mov	r7, r0
 8009d44:	10ad      	asrs	r5, r5, #2
 8009d46:	d03d      	beq.n	8009dc4 <__pow5mult+0xa0>
 8009d48:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009d4a:	b97c      	cbnz	r4, 8009d6c <__pow5mult+0x48>
 8009d4c:	2010      	movs	r0, #16
 8009d4e:	f7ff fdcd 	bl	80098ec <malloc>
 8009d52:	4602      	mov	r2, r0
 8009d54:	6270      	str	r0, [r6, #36]	; 0x24
 8009d56:	b928      	cbnz	r0, 8009d64 <__pow5mult+0x40>
 8009d58:	4b1d      	ldr	r3, [pc, #116]	; (8009dd0 <__pow5mult+0xac>)
 8009d5a:	481e      	ldr	r0, [pc, #120]	; (8009dd4 <__pow5mult+0xb0>)
 8009d5c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009d60:	f000 ff9e 	bl	800aca0 <__assert_func>
 8009d64:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009d68:	6004      	str	r4, [r0, #0]
 8009d6a:	60c4      	str	r4, [r0, #12]
 8009d6c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009d70:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009d74:	b94c      	cbnz	r4, 8009d8a <__pow5mult+0x66>
 8009d76:	f240 2171 	movw	r1, #625	; 0x271
 8009d7a:	4630      	mov	r0, r6
 8009d7c:	f7ff ff12 	bl	8009ba4 <__i2b>
 8009d80:	2300      	movs	r3, #0
 8009d82:	f8c8 0008 	str.w	r0, [r8, #8]
 8009d86:	4604      	mov	r4, r0
 8009d88:	6003      	str	r3, [r0, #0]
 8009d8a:	f04f 0900 	mov.w	r9, #0
 8009d8e:	07eb      	lsls	r3, r5, #31
 8009d90:	d50a      	bpl.n	8009da8 <__pow5mult+0x84>
 8009d92:	4639      	mov	r1, r7
 8009d94:	4622      	mov	r2, r4
 8009d96:	4630      	mov	r0, r6
 8009d98:	f7ff ff1a 	bl	8009bd0 <__multiply>
 8009d9c:	4639      	mov	r1, r7
 8009d9e:	4680      	mov	r8, r0
 8009da0:	4630      	mov	r0, r6
 8009da2:	f7ff fdfd 	bl	80099a0 <_Bfree>
 8009da6:	4647      	mov	r7, r8
 8009da8:	106d      	asrs	r5, r5, #1
 8009daa:	d00b      	beq.n	8009dc4 <__pow5mult+0xa0>
 8009dac:	6820      	ldr	r0, [r4, #0]
 8009dae:	b938      	cbnz	r0, 8009dc0 <__pow5mult+0x9c>
 8009db0:	4622      	mov	r2, r4
 8009db2:	4621      	mov	r1, r4
 8009db4:	4630      	mov	r0, r6
 8009db6:	f7ff ff0b 	bl	8009bd0 <__multiply>
 8009dba:	6020      	str	r0, [r4, #0]
 8009dbc:	f8c0 9000 	str.w	r9, [r0]
 8009dc0:	4604      	mov	r4, r0
 8009dc2:	e7e4      	b.n	8009d8e <__pow5mult+0x6a>
 8009dc4:	4638      	mov	r0, r7
 8009dc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009dca:	bf00      	nop
 8009dcc:	0800b5e8 	.word	0x0800b5e8
 8009dd0:	0800b336 	.word	0x0800b336
 8009dd4:	0800b498 	.word	0x0800b498

08009dd8 <__lshift>:
 8009dd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ddc:	460c      	mov	r4, r1
 8009dde:	6849      	ldr	r1, [r1, #4]
 8009de0:	6923      	ldr	r3, [r4, #16]
 8009de2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009de6:	68a3      	ldr	r3, [r4, #8]
 8009de8:	4607      	mov	r7, r0
 8009dea:	4691      	mov	r9, r2
 8009dec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009df0:	f108 0601 	add.w	r6, r8, #1
 8009df4:	42b3      	cmp	r3, r6
 8009df6:	db0b      	blt.n	8009e10 <__lshift+0x38>
 8009df8:	4638      	mov	r0, r7
 8009dfa:	f7ff fd91 	bl	8009920 <_Balloc>
 8009dfe:	4605      	mov	r5, r0
 8009e00:	b948      	cbnz	r0, 8009e16 <__lshift+0x3e>
 8009e02:	4602      	mov	r2, r0
 8009e04:	4b2a      	ldr	r3, [pc, #168]	; (8009eb0 <__lshift+0xd8>)
 8009e06:	482b      	ldr	r0, [pc, #172]	; (8009eb4 <__lshift+0xdc>)
 8009e08:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009e0c:	f000 ff48 	bl	800aca0 <__assert_func>
 8009e10:	3101      	adds	r1, #1
 8009e12:	005b      	lsls	r3, r3, #1
 8009e14:	e7ee      	b.n	8009df4 <__lshift+0x1c>
 8009e16:	2300      	movs	r3, #0
 8009e18:	f100 0114 	add.w	r1, r0, #20
 8009e1c:	f100 0210 	add.w	r2, r0, #16
 8009e20:	4618      	mov	r0, r3
 8009e22:	4553      	cmp	r3, sl
 8009e24:	db37      	blt.n	8009e96 <__lshift+0xbe>
 8009e26:	6920      	ldr	r0, [r4, #16]
 8009e28:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009e2c:	f104 0314 	add.w	r3, r4, #20
 8009e30:	f019 091f 	ands.w	r9, r9, #31
 8009e34:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009e38:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009e3c:	d02f      	beq.n	8009e9e <__lshift+0xc6>
 8009e3e:	f1c9 0e20 	rsb	lr, r9, #32
 8009e42:	468a      	mov	sl, r1
 8009e44:	f04f 0c00 	mov.w	ip, #0
 8009e48:	681a      	ldr	r2, [r3, #0]
 8009e4a:	fa02 f209 	lsl.w	r2, r2, r9
 8009e4e:	ea42 020c 	orr.w	r2, r2, ip
 8009e52:	f84a 2b04 	str.w	r2, [sl], #4
 8009e56:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e5a:	4298      	cmp	r0, r3
 8009e5c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009e60:	d8f2      	bhi.n	8009e48 <__lshift+0x70>
 8009e62:	1b03      	subs	r3, r0, r4
 8009e64:	3b15      	subs	r3, #21
 8009e66:	f023 0303 	bic.w	r3, r3, #3
 8009e6a:	3304      	adds	r3, #4
 8009e6c:	f104 0215 	add.w	r2, r4, #21
 8009e70:	4290      	cmp	r0, r2
 8009e72:	bf38      	it	cc
 8009e74:	2304      	movcc	r3, #4
 8009e76:	f841 c003 	str.w	ip, [r1, r3]
 8009e7a:	f1bc 0f00 	cmp.w	ip, #0
 8009e7e:	d001      	beq.n	8009e84 <__lshift+0xac>
 8009e80:	f108 0602 	add.w	r6, r8, #2
 8009e84:	3e01      	subs	r6, #1
 8009e86:	4638      	mov	r0, r7
 8009e88:	612e      	str	r6, [r5, #16]
 8009e8a:	4621      	mov	r1, r4
 8009e8c:	f7ff fd88 	bl	80099a0 <_Bfree>
 8009e90:	4628      	mov	r0, r5
 8009e92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e96:	f842 0f04 	str.w	r0, [r2, #4]!
 8009e9a:	3301      	adds	r3, #1
 8009e9c:	e7c1      	b.n	8009e22 <__lshift+0x4a>
 8009e9e:	3904      	subs	r1, #4
 8009ea0:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ea4:	f841 2f04 	str.w	r2, [r1, #4]!
 8009ea8:	4298      	cmp	r0, r3
 8009eaa:	d8f9      	bhi.n	8009ea0 <__lshift+0xc8>
 8009eac:	e7ea      	b.n	8009e84 <__lshift+0xac>
 8009eae:	bf00      	nop
 8009eb0:	0800b3a8 	.word	0x0800b3a8
 8009eb4:	0800b498 	.word	0x0800b498

08009eb8 <__mcmp>:
 8009eb8:	b530      	push	{r4, r5, lr}
 8009eba:	6902      	ldr	r2, [r0, #16]
 8009ebc:	690c      	ldr	r4, [r1, #16]
 8009ebe:	1b12      	subs	r2, r2, r4
 8009ec0:	d10e      	bne.n	8009ee0 <__mcmp+0x28>
 8009ec2:	f100 0314 	add.w	r3, r0, #20
 8009ec6:	3114      	adds	r1, #20
 8009ec8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009ecc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009ed0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009ed4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009ed8:	42a5      	cmp	r5, r4
 8009eda:	d003      	beq.n	8009ee4 <__mcmp+0x2c>
 8009edc:	d305      	bcc.n	8009eea <__mcmp+0x32>
 8009ede:	2201      	movs	r2, #1
 8009ee0:	4610      	mov	r0, r2
 8009ee2:	bd30      	pop	{r4, r5, pc}
 8009ee4:	4283      	cmp	r3, r0
 8009ee6:	d3f3      	bcc.n	8009ed0 <__mcmp+0x18>
 8009ee8:	e7fa      	b.n	8009ee0 <__mcmp+0x28>
 8009eea:	f04f 32ff 	mov.w	r2, #4294967295
 8009eee:	e7f7      	b.n	8009ee0 <__mcmp+0x28>

08009ef0 <__mdiff>:
 8009ef0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ef4:	460c      	mov	r4, r1
 8009ef6:	4606      	mov	r6, r0
 8009ef8:	4611      	mov	r1, r2
 8009efa:	4620      	mov	r0, r4
 8009efc:	4690      	mov	r8, r2
 8009efe:	f7ff ffdb 	bl	8009eb8 <__mcmp>
 8009f02:	1e05      	subs	r5, r0, #0
 8009f04:	d110      	bne.n	8009f28 <__mdiff+0x38>
 8009f06:	4629      	mov	r1, r5
 8009f08:	4630      	mov	r0, r6
 8009f0a:	f7ff fd09 	bl	8009920 <_Balloc>
 8009f0e:	b930      	cbnz	r0, 8009f1e <__mdiff+0x2e>
 8009f10:	4b3a      	ldr	r3, [pc, #232]	; (8009ffc <__mdiff+0x10c>)
 8009f12:	4602      	mov	r2, r0
 8009f14:	f240 2132 	movw	r1, #562	; 0x232
 8009f18:	4839      	ldr	r0, [pc, #228]	; (800a000 <__mdiff+0x110>)
 8009f1a:	f000 fec1 	bl	800aca0 <__assert_func>
 8009f1e:	2301      	movs	r3, #1
 8009f20:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009f24:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f28:	bfa4      	itt	ge
 8009f2a:	4643      	movge	r3, r8
 8009f2c:	46a0      	movge	r8, r4
 8009f2e:	4630      	mov	r0, r6
 8009f30:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009f34:	bfa6      	itte	ge
 8009f36:	461c      	movge	r4, r3
 8009f38:	2500      	movge	r5, #0
 8009f3a:	2501      	movlt	r5, #1
 8009f3c:	f7ff fcf0 	bl	8009920 <_Balloc>
 8009f40:	b920      	cbnz	r0, 8009f4c <__mdiff+0x5c>
 8009f42:	4b2e      	ldr	r3, [pc, #184]	; (8009ffc <__mdiff+0x10c>)
 8009f44:	4602      	mov	r2, r0
 8009f46:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009f4a:	e7e5      	b.n	8009f18 <__mdiff+0x28>
 8009f4c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009f50:	6926      	ldr	r6, [r4, #16]
 8009f52:	60c5      	str	r5, [r0, #12]
 8009f54:	f104 0914 	add.w	r9, r4, #20
 8009f58:	f108 0514 	add.w	r5, r8, #20
 8009f5c:	f100 0e14 	add.w	lr, r0, #20
 8009f60:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009f64:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009f68:	f108 0210 	add.w	r2, r8, #16
 8009f6c:	46f2      	mov	sl, lr
 8009f6e:	2100      	movs	r1, #0
 8009f70:	f859 3b04 	ldr.w	r3, [r9], #4
 8009f74:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009f78:	fa1f f883 	uxth.w	r8, r3
 8009f7c:	fa11 f18b 	uxtah	r1, r1, fp
 8009f80:	0c1b      	lsrs	r3, r3, #16
 8009f82:	eba1 0808 	sub.w	r8, r1, r8
 8009f86:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009f8a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009f8e:	fa1f f888 	uxth.w	r8, r8
 8009f92:	1419      	asrs	r1, r3, #16
 8009f94:	454e      	cmp	r6, r9
 8009f96:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009f9a:	f84a 3b04 	str.w	r3, [sl], #4
 8009f9e:	d8e7      	bhi.n	8009f70 <__mdiff+0x80>
 8009fa0:	1b33      	subs	r3, r6, r4
 8009fa2:	3b15      	subs	r3, #21
 8009fa4:	f023 0303 	bic.w	r3, r3, #3
 8009fa8:	3304      	adds	r3, #4
 8009faa:	3415      	adds	r4, #21
 8009fac:	42a6      	cmp	r6, r4
 8009fae:	bf38      	it	cc
 8009fb0:	2304      	movcc	r3, #4
 8009fb2:	441d      	add	r5, r3
 8009fb4:	4473      	add	r3, lr
 8009fb6:	469e      	mov	lr, r3
 8009fb8:	462e      	mov	r6, r5
 8009fba:	4566      	cmp	r6, ip
 8009fbc:	d30e      	bcc.n	8009fdc <__mdiff+0xec>
 8009fbe:	f10c 0203 	add.w	r2, ip, #3
 8009fc2:	1b52      	subs	r2, r2, r5
 8009fc4:	f022 0203 	bic.w	r2, r2, #3
 8009fc8:	3d03      	subs	r5, #3
 8009fca:	45ac      	cmp	ip, r5
 8009fcc:	bf38      	it	cc
 8009fce:	2200      	movcc	r2, #0
 8009fd0:	441a      	add	r2, r3
 8009fd2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009fd6:	b17b      	cbz	r3, 8009ff8 <__mdiff+0x108>
 8009fd8:	6107      	str	r7, [r0, #16]
 8009fda:	e7a3      	b.n	8009f24 <__mdiff+0x34>
 8009fdc:	f856 8b04 	ldr.w	r8, [r6], #4
 8009fe0:	fa11 f288 	uxtah	r2, r1, r8
 8009fe4:	1414      	asrs	r4, r2, #16
 8009fe6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009fea:	b292      	uxth	r2, r2
 8009fec:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009ff0:	f84e 2b04 	str.w	r2, [lr], #4
 8009ff4:	1421      	asrs	r1, r4, #16
 8009ff6:	e7e0      	b.n	8009fba <__mdiff+0xca>
 8009ff8:	3f01      	subs	r7, #1
 8009ffa:	e7ea      	b.n	8009fd2 <__mdiff+0xe2>
 8009ffc:	0800b3a8 	.word	0x0800b3a8
 800a000:	0800b498 	.word	0x0800b498

0800a004 <__ulp>:
 800a004:	b082      	sub	sp, #8
 800a006:	ed8d 0b00 	vstr	d0, [sp]
 800a00a:	9b01      	ldr	r3, [sp, #4]
 800a00c:	4912      	ldr	r1, [pc, #72]	; (800a058 <__ulp+0x54>)
 800a00e:	4019      	ands	r1, r3
 800a010:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800a014:	2900      	cmp	r1, #0
 800a016:	dd05      	ble.n	800a024 <__ulp+0x20>
 800a018:	2200      	movs	r2, #0
 800a01a:	460b      	mov	r3, r1
 800a01c:	ec43 2b10 	vmov	d0, r2, r3
 800a020:	b002      	add	sp, #8
 800a022:	4770      	bx	lr
 800a024:	4249      	negs	r1, r1
 800a026:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800a02a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800a02e:	f04f 0200 	mov.w	r2, #0
 800a032:	f04f 0300 	mov.w	r3, #0
 800a036:	da04      	bge.n	800a042 <__ulp+0x3e>
 800a038:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800a03c:	fa41 f300 	asr.w	r3, r1, r0
 800a040:	e7ec      	b.n	800a01c <__ulp+0x18>
 800a042:	f1a0 0114 	sub.w	r1, r0, #20
 800a046:	291e      	cmp	r1, #30
 800a048:	bfda      	itte	le
 800a04a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800a04e:	fa20 f101 	lsrle.w	r1, r0, r1
 800a052:	2101      	movgt	r1, #1
 800a054:	460a      	mov	r2, r1
 800a056:	e7e1      	b.n	800a01c <__ulp+0x18>
 800a058:	7ff00000 	.word	0x7ff00000

0800a05c <__b2d>:
 800a05c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a05e:	6905      	ldr	r5, [r0, #16]
 800a060:	f100 0714 	add.w	r7, r0, #20
 800a064:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800a068:	1f2e      	subs	r6, r5, #4
 800a06a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800a06e:	4620      	mov	r0, r4
 800a070:	f7ff fd48 	bl	8009b04 <__hi0bits>
 800a074:	f1c0 0320 	rsb	r3, r0, #32
 800a078:	280a      	cmp	r0, #10
 800a07a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800a0f8 <__b2d+0x9c>
 800a07e:	600b      	str	r3, [r1, #0]
 800a080:	dc14      	bgt.n	800a0ac <__b2d+0x50>
 800a082:	f1c0 0e0b 	rsb	lr, r0, #11
 800a086:	fa24 f10e 	lsr.w	r1, r4, lr
 800a08a:	42b7      	cmp	r7, r6
 800a08c:	ea41 030c 	orr.w	r3, r1, ip
 800a090:	bf34      	ite	cc
 800a092:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a096:	2100      	movcs	r1, #0
 800a098:	3015      	adds	r0, #21
 800a09a:	fa04 f000 	lsl.w	r0, r4, r0
 800a09e:	fa21 f10e 	lsr.w	r1, r1, lr
 800a0a2:	ea40 0201 	orr.w	r2, r0, r1
 800a0a6:	ec43 2b10 	vmov	d0, r2, r3
 800a0aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a0ac:	42b7      	cmp	r7, r6
 800a0ae:	bf3a      	itte	cc
 800a0b0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a0b4:	f1a5 0608 	subcc.w	r6, r5, #8
 800a0b8:	2100      	movcs	r1, #0
 800a0ba:	380b      	subs	r0, #11
 800a0bc:	d017      	beq.n	800a0ee <__b2d+0x92>
 800a0be:	f1c0 0c20 	rsb	ip, r0, #32
 800a0c2:	fa04 f500 	lsl.w	r5, r4, r0
 800a0c6:	42be      	cmp	r6, r7
 800a0c8:	fa21 f40c 	lsr.w	r4, r1, ip
 800a0cc:	ea45 0504 	orr.w	r5, r5, r4
 800a0d0:	bf8c      	ite	hi
 800a0d2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800a0d6:	2400      	movls	r4, #0
 800a0d8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800a0dc:	fa01 f000 	lsl.w	r0, r1, r0
 800a0e0:	fa24 f40c 	lsr.w	r4, r4, ip
 800a0e4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a0e8:	ea40 0204 	orr.w	r2, r0, r4
 800a0ec:	e7db      	b.n	800a0a6 <__b2d+0x4a>
 800a0ee:	ea44 030c 	orr.w	r3, r4, ip
 800a0f2:	460a      	mov	r2, r1
 800a0f4:	e7d7      	b.n	800a0a6 <__b2d+0x4a>
 800a0f6:	bf00      	nop
 800a0f8:	3ff00000 	.word	0x3ff00000

0800a0fc <__d2b>:
 800a0fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a100:	4689      	mov	r9, r1
 800a102:	2101      	movs	r1, #1
 800a104:	ec57 6b10 	vmov	r6, r7, d0
 800a108:	4690      	mov	r8, r2
 800a10a:	f7ff fc09 	bl	8009920 <_Balloc>
 800a10e:	4604      	mov	r4, r0
 800a110:	b930      	cbnz	r0, 800a120 <__d2b+0x24>
 800a112:	4602      	mov	r2, r0
 800a114:	4b25      	ldr	r3, [pc, #148]	; (800a1ac <__d2b+0xb0>)
 800a116:	4826      	ldr	r0, [pc, #152]	; (800a1b0 <__d2b+0xb4>)
 800a118:	f240 310a 	movw	r1, #778	; 0x30a
 800a11c:	f000 fdc0 	bl	800aca0 <__assert_func>
 800a120:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a124:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a128:	bb35      	cbnz	r5, 800a178 <__d2b+0x7c>
 800a12a:	2e00      	cmp	r6, #0
 800a12c:	9301      	str	r3, [sp, #4]
 800a12e:	d028      	beq.n	800a182 <__d2b+0x86>
 800a130:	4668      	mov	r0, sp
 800a132:	9600      	str	r6, [sp, #0]
 800a134:	f7ff fd06 	bl	8009b44 <__lo0bits>
 800a138:	9900      	ldr	r1, [sp, #0]
 800a13a:	b300      	cbz	r0, 800a17e <__d2b+0x82>
 800a13c:	9a01      	ldr	r2, [sp, #4]
 800a13e:	f1c0 0320 	rsb	r3, r0, #32
 800a142:	fa02 f303 	lsl.w	r3, r2, r3
 800a146:	430b      	orrs	r3, r1
 800a148:	40c2      	lsrs	r2, r0
 800a14a:	6163      	str	r3, [r4, #20]
 800a14c:	9201      	str	r2, [sp, #4]
 800a14e:	9b01      	ldr	r3, [sp, #4]
 800a150:	61a3      	str	r3, [r4, #24]
 800a152:	2b00      	cmp	r3, #0
 800a154:	bf14      	ite	ne
 800a156:	2202      	movne	r2, #2
 800a158:	2201      	moveq	r2, #1
 800a15a:	6122      	str	r2, [r4, #16]
 800a15c:	b1d5      	cbz	r5, 800a194 <__d2b+0x98>
 800a15e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a162:	4405      	add	r5, r0
 800a164:	f8c9 5000 	str.w	r5, [r9]
 800a168:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a16c:	f8c8 0000 	str.w	r0, [r8]
 800a170:	4620      	mov	r0, r4
 800a172:	b003      	add	sp, #12
 800a174:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a178:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a17c:	e7d5      	b.n	800a12a <__d2b+0x2e>
 800a17e:	6161      	str	r1, [r4, #20]
 800a180:	e7e5      	b.n	800a14e <__d2b+0x52>
 800a182:	a801      	add	r0, sp, #4
 800a184:	f7ff fcde 	bl	8009b44 <__lo0bits>
 800a188:	9b01      	ldr	r3, [sp, #4]
 800a18a:	6163      	str	r3, [r4, #20]
 800a18c:	2201      	movs	r2, #1
 800a18e:	6122      	str	r2, [r4, #16]
 800a190:	3020      	adds	r0, #32
 800a192:	e7e3      	b.n	800a15c <__d2b+0x60>
 800a194:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a198:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a19c:	f8c9 0000 	str.w	r0, [r9]
 800a1a0:	6918      	ldr	r0, [r3, #16]
 800a1a2:	f7ff fcaf 	bl	8009b04 <__hi0bits>
 800a1a6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a1aa:	e7df      	b.n	800a16c <__d2b+0x70>
 800a1ac:	0800b3a8 	.word	0x0800b3a8
 800a1b0:	0800b498 	.word	0x0800b498

0800a1b4 <__ratio>:
 800a1b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1b8:	4688      	mov	r8, r1
 800a1ba:	4669      	mov	r1, sp
 800a1bc:	4681      	mov	r9, r0
 800a1be:	f7ff ff4d 	bl	800a05c <__b2d>
 800a1c2:	a901      	add	r1, sp, #4
 800a1c4:	4640      	mov	r0, r8
 800a1c6:	ec55 4b10 	vmov	r4, r5, d0
 800a1ca:	f7ff ff47 	bl	800a05c <__b2d>
 800a1ce:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a1d2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a1d6:	eba3 0c02 	sub.w	ip, r3, r2
 800a1da:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a1de:	1a9b      	subs	r3, r3, r2
 800a1e0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a1e4:	ec51 0b10 	vmov	r0, r1, d0
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	bfd6      	itet	le
 800a1ec:	460a      	movle	r2, r1
 800a1ee:	462a      	movgt	r2, r5
 800a1f0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a1f4:	468b      	mov	fp, r1
 800a1f6:	462f      	mov	r7, r5
 800a1f8:	bfd4      	ite	le
 800a1fa:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a1fe:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a202:	4620      	mov	r0, r4
 800a204:	ee10 2a10 	vmov	r2, s0
 800a208:	465b      	mov	r3, fp
 800a20a:	4639      	mov	r1, r7
 800a20c:	f7f6 fb2e 	bl	800086c <__aeabi_ddiv>
 800a210:	ec41 0b10 	vmov	d0, r0, r1
 800a214:	b003      	add	sp, #12
 800a216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a21a <__copybits>:
 800a21a:	3901      	subs	r1, #1
 800a21c:	b570      	push	{r4, r5, r6, lr}
 800a21e:	1149      	asrs	r1, r1, #5
 800a220:	6914      	ldr	r4, [r2, #16]
 800a222:	3101      	adds	r1, #1
 800a224:	f102 0314 	add.w	r3, r2, #20
 800a228:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a22c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a230:	1f05      	subs	r5, r0, #4
 800a232:	42a3      	cmp	r3, r4
 800a234:	d30c      	bcc.n	800a250 <__copybits+0x36>
 800a236:	1aa3      	subs	r3, r4, r2
 800a238:	3b11      	subs	r3, #17
 800a23a:	f023 0303 	bic.w	r3, r3, #3
 800a23e:	3211      	adds	r2, #17
 800a240:	42a2      	cmp	r2, r4
 800a242:	bf88      	it	hi
 800a244:	2300      	movhi	r3, #0
 800a246:	4418      	add	r0, r3
 800a248:	2300      	movs	r3, #0
 800a24a:	4288      	cmp	r0, r1
 800a24c:	d305      	bcc.n	800a25a <__copybits+0x40>
 800a24e:	bd70      	pop	{r4, r5, r6, pc}
 800a250:	f853 6b04 	ldr.w	r6, [r3], #4
 800a254:	f845 6f04 	str.w	r6, [r5, #4]!
 800a258:	e7eb      	b.n	800a232 <__copybits+0x18>
 800a25a:	f840 3b04 	str.w	r3, [r0], #4
 800a25e:	e7f4      	b.n	800a24a <__copybits+0x30>

0800a260 <__any_on>:
 800a260:	f100 0214 	add.w	r2, r0, #20
 800a264:	6900      	ldr	r0, [r0, #16]
 800a266:	114b      	asrs	r3, r1, #5
 800a268:	4298      	cmp	r0, r3
 800a26a:	b510      	push	{r4, lr}
 800a26c:	db11      	blt.n	800a292 <__any_on+0x32>
 800a26e:	dd0a      	ble.n	800a286 <__any_on+0x26>
 800a270:	f011 011f 	ands.w	r1, r1, #31
 800a274:	d007      	beq.n	800a286 <__any_on+0x26>
 800a276:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a27a:	fa24 f001 	lsr.w	r0, r4, r1
 800a27e:	fa00 f101 	lsl.w	r1, r0, r1
 800a282:	428c      	cmp	r4, r1
 800a284:	d10b      	bne.n	800a29e <__any_on+0x3e>
 800a286:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a28a:	4293      	cmp	r3, r2
 800a28c:	d803      	bhi.n	800a296 <__any_on+0x36>
 800a28e:	2000      	movs	r0, #0
 800a290:	bd10      	pop	{r4, pc}
 800a292:	4603      	mov	r3, r0
 800a294:	e7f7      	b.n	800a286 <__any_on+0x26>
 800a296:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a29a:	2900      	cmp	r1, #0
 800a29c:	d0f5      	beq.n	800a28a <__any_on+0x2a>
 800a29e:	2001      	movs	r0, #1
 800a2a0:	e7f6      	b.n	800a290 <__any_on+0x30>

0800a2a2 <_calloc_r>:
 800a2a2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a2a4:	fba1 2402 	umull	r2, r4, r1, r2
 800a2a8:	b94c      	cbnz	r4, 800a2be <_calloc_r+0x1c>
 800a2aa:	4611      	mov	r1, r2
 800a2ac:	9201      	str	r2, [sp, #4]
 800a2ae:	f000 f87b 	bl	800a3a8 <_malloc_r>
 800a2b2:	9a01      	ldr	r2, [sp, #4]
 800a2b4:	4605      	mov	r5, r0
 800a2b6:	b930      	cbnz	r0, 800a2c6 <_calloc_r+0x24>
 800a2b8:	4628      	mov	r0, r5
 800a2ba:	b003      	add	sp, #12
 800a2bc:	bd30      	pop	{r4, r5, pc}
 800a2be:	220c      	movs	r2, #12
 800a2c0:	6002      	str	r2, [r0, #0]
 800a2c2:	2500      	movs	r5, #0
 800a2c4:	e7f8      	b.n	800a2b8 <_calloc_r+0x16>
 800a2c6:	4621      	mov	r1, r4
 800a2c8:	f7fc fabe 	bl	8006848 <memset>
 800a2cc:	e7f4      	b.n	800a2b8 <_calloc_r+0x16>
	...

0800a2d0 <_free_r>:
 800a2d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a2d2:	2900      	cmp	r1, #0
 800a2d4:	d044      	beq.n	800a360 <_free_r+0x90>
 800a2d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a2da:	9001      	str	r0, [sp, #4]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	f1a1 0404 	sub.w	r4, r1, #4
 800a2e2:	bfb8      	it	lt
 800a2e4:	18e4      	addlt	r4, r4, r3
 800a2e6:	f000 fe6f 	bl	800afc8 <__malloc_lock>
 800a2ea:	4a1e      	ldr	r2, [pc, #120]	; (800a364 <_free_r+0x94>)
 800a2ec:	9801      	ldr	r0, [sp, #4]
 800a2ee:	6813      	ldr	r3, [r2, #0]
 800a2f0:	b933      	cbnz	r3, 800a300 <_free_r+0x30>
 800a2f2:	6063      	str	r3, [r4, #4]
 800a2f4:	6014      	str	r4, [r2, #0]
 800a2f6:	b003      	add	sp, #12
 800a2f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a2fc:	f000 be6a 	b.w	800afd4 <__malloc_unlock>
 800a300:	42a3      	cmp	r3, r4
 800a302:	d908      	bls.n	800a316 <_free_r+0x46>
 800a304:	6825      	ldr	r5, [r4, #0]
 800a306:	1961      	adds	r1, r4, r5
 800a308:	428b      	cmp	r3, r1
 800a30a:	bf01      	itttt	eq
 800a30c:	6819      	ldreq	r1, [r3, #0]
 800a30e:	685b      	ldreq	r3, [r3, #4]
 800a310:	1949      	addeq	r1, r1, r5
 800a312:	6021      	streq	r1, [r4, #0]
 800a314:	e7ed      	b.n	800a2f2 <_free_r+0x22>
 800a316:	461a      	mov	r2, r3
 800a318:	685b      	ldr	r3, [r3, #4]
 800a31a:	b10b      	cbz	r3, 800a320 <_free_r+0x50>
 800a31c:	42a3      	cmp	r3, r4
 800a31e:	d9fa      	bls.n	800a316 <_free_r+0x46>
 800a320:	6811      	ldr	r1, [r2, #0]
 800a322:	1855      	adds	r5, r2, r1
 800a324:	42a5      	cmp	r5, r4
 800a326:	d10b      	bne.n	800a340 <_free_r+0x70>
 800a328:	6824      	ldr	r4, [r4, #0]
 800a32a:	4421      	add	r1, r4
 800a32c:	1854      	adds	r4, r2, r1
 800a32e:	42a3      	cmp	r3, r4
 800a330:	6011      	str	r1, [r2, #0]
 800a332:	d1e0      	bne.n	800a2f6 <_free_r+0x26>
 800a334:	681c      	ldr	r4, [r3, #0]
 800a336:	685b      	ldr	r3, [r3, #4]
 800a338:	6053      	str	r3, [r2, #4]
 800a33a:	4421      	add	r1, r4
 800a33c:	6011      	str	r1, [r2, #0]
 800a33e:	e7da      	b.n	800a2f6 <_free_r+0x26>
 800a340:	d902      	bls.n	800a348 <_free_r+0x78>
 800a342:	230c      	movs	r3, #12
 800a344:	6003      	str	r3, [r0, #0]
 800a346:	e7d6      	b.n	800a2f6 <_free_r+0x26>
 800a348:	6825      	ldr	r5, [r4, #0]
 800a34a:	1961      	adds	r1, r4, r5
 800a34c:	428b      	cmp	r3, r1
 800a34e:	bf04      	itt	eq
 800a350:	6819      	ldreq	r1, [r3, #0]
 800a352:	685b      	ldreq	r3, [r3, #4]
 800a354:	6063      	str	r3, [r4, #4]
 800a356:	bf04      	itt	eq
 800a358:	1949      	addeq	r1, r1, r5
 800a35a:	6021      	streq	r1, [r4, #0]
 800a35c:	6054      	str	r4, [r2, #4]
 800a35e:	e7ca      	b.n	800a2f6 <_free_r+0x26>
 800a360:	b003      	add	sp, #12
 800a362:	bd30      	pop	{r4, r5, pc}
 800a364:	20000358 	.word	0x20000358

0800a368 <sbrk_aligned>:
 800a368:	b570      	push	{r4, r5, r6, lr}
 800a36a:	4e0e      	ldr	r6, [pc, #56]	; (800a3a4 <sbrk_aligned+0x3c>)
 800a36c:	460c      	mov	r4, r1
 800a36e:	6831      	ldr	r1, [r6, #0]
 800a370:	4605      	mov	r5, r0
 800a372:	b911      	cbnz	r1, 800a37a <sbrk_aligned+0x12>
 800a374:	f000 fb4c 	bl	800aa10 <_sbrk_r>
 800a378:	6030      	str	r0, [r6, #0]
 800a37a:	4621      	mov	r1, r4
 800a37c:	4628      	mov	r0, r5
 800a37e:	f000 fb47 	bl	800aa10 <_sbrk_r>
 800a382:	1c43      	adds	r3, r0, #1
 800a384:	d00a      	beq.n	800a39c <sbrk_aligned+0x34>
 800a386:	1cc4      	adds	r4, r0, #3
 800a388:	f024 0403 	bic.w	r4, r4, #3
 800a38c:	42a0      	cmp	r0, r4
 800a38e:	d007      	beq.n	800a3a0 <sbrk_aligned+0x38>
 800a390:	1a21      	subs	r1, r4, r0
 800a392:	4628      	mov	r0, r5
 800a394:	f000 fb3c 	bl	800aa10 <_sbrk_r>
 800a398:	3001      	adds	r0, #1
 800a39a:	d101      	bne.n	800a3a0 <sbrk_aligned+0x38>
 800a39c:	f04f 34ff 	mov.w	r4, #4294967295
 800a3a0:	4620      	mov	r0, r4
 800a3a2:	bd70      	pop	{r4, r5, r6, pc}
 800a3a4:	2000035c 	.word	0x2000035c

0800a3a8 <_malloc_r>:
 800a3a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3ac:	1ccd      	adds	r5, r1, #3
 800a3ae:	f025 0503 	bic.w	r5, r5, #3
 800a3b2:	3508      	adds	r5, #8
 800a3b4:	2d0c      	cmp	r5, #12
 800a3b6:	bf38      	it	cc
 800a3b8:	250c      	movcc	r5, #12
 800a3ba:	2d00      	cmp	r5, #0
 800a3bc:	4607      	mov	r7, r0
 800a3be:	db01      	blt.n	800a3c4 <_malloc_r+0x1c>
 800a3c0:	42a9      	cmp	r1, r5
 800a3c2:	d905      	bls.n	800a3d0 <_malloc_r+0x28>
 800a3c4:	230c      	movs	r3, #12
 800a3c6:	603b      	str	r3, [r7, #0]
 800a3c8:	2600      	movs	r6, #0
 800a3ca:	4630      	mov	r0, r6
 800a3cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3d0:	4e2e      	ldr	r6, [pc, #184]	; (800a48c <_malloc_r+0xe4>)
 800a3d2:	f000 fdf9 	bl	800afc8 <__malloc_lock>
 800a3d6:	6833      	ldr	r3, [r6, #0]
 800a3d8:	461c      	mov	r4, r3
 800a3da:	bb34      	cbnz	r4, 800a42a <_malloc_r+0x82>
 800a3dc:	4629      	mov	r1, r5
 800a3de:	4638      	mov	r0, r7
 800a3e0:	f7ff ffc2 	bl	800a368 <sbrk_aligned>
 800a3e4:	1c43      	adds	r3, r0, #1
 800a3e6:	4604      	mov	r4, r0
 800a3e8:	d14d      	bne.n	800a486 <_malloc_r+0xde>
 800a3ea:	6834      	ldr	r4, [r6, #0]
 800a3ec:	4626      	mov	r6, r4
 800a3ee:	2e00      	cmp	r6, #0
 800a3f0:	d140      	bne.n	800a474 <_malloc_r+0xcc>
 800a3f2:	6823      	ldr	r3, [r4, #0]
 800a3f4:	4631      	mov	r1, r6
 800a3f6:	4638      	mov	r0, r7
 800a3f8:	eb04 0803 	add.w	r8, r4, r3
 800a3fc:	f000 fb08 	bl	800aa10 <_sbrk_r>
 800a400:	4580      	cmp	r8, r0
 800a402:	d13a      	bne.n	800a47a <_malloc_r+0xd2>
 800a404:	6821      	ldr	r1, [r4, #0]
 800a406:	3503      	adds	r5, #3
 800a408:	1a6d      	subs	r5, r5, r1
 800a40a:	f025 0503 	bic.w	r5, r5, #3
 800a40e:	3508      	adds	r5, #8
 800a410:	2d0c      	cmp	r5, #12
 800a412:	bf38      	it	cc
 800a414:	250c      	movcc	r5, #12
 800a416:	4629      	mov	r1, r5
 800a418:	4638      	mov	r0, r7
 800a41a:	f7ff ffa5 	bl	800a368 <sbrk_aligned>
 800a41e:	3001      	adds	r0, #1
 800a420:	d02b      	beq.n	800a47a <_malloc_r+0xd2>
 800a422:	6823      	ldr	r3, [r4, #0]
 800a424:	442b      	add	r3, r5
 800a426:	6023      	str	r3, [r4, #0]
 800a428:	e00e      	b.n	800a448 <_malloc_r+0xa0>
 800a42a:	6822      	ldr	r2, [r4, #0]
 800a42c:	1b52      	subs	r2, r2, r5
 800a42e:	d41e      	bmi.n	800a46e <_malloc_r+0xc6>
 800a430:	2a0b      	cmp	r2, #11
 800a432:	d916      	bls.n	800a462 <_malloc_r+0xba>
 800a434:	1961      	adds	r1, r4, r5
 800a436:	42a3      	cmp	r3, r4
 800a438:	6025      	str	r5, [r4, #0]
 800a43a:	bf18      	it	ne
 800a43c:	6059      	strne	r1, [r3, #4]
 800a43e:	6863      	ldr	r3, [r4, #4]
 800a440:	bf08      	it	eq
 800a442:	6031      	streq	r1, [r6, #0]
 800a444:	5162      	str	r2, [r4, r5]
 800a446:	604b      	str	r3, [r1, #4]
 800a448:	4638      	mov	r0, r7
 800a44a:	f104 060b 	add.w	r6, r4, #11
 800a44e:	f000 fdc1 	bl	800afd4 <__malloc_unlock>
 800a452:	f026 0607 	bic.w	r6, r6, #7
 800a456:	1d23      	adds	r3, r4, #4
 800a458:	1af2      	subs	r2, r6, r3
 800a45a:	d0b6      	beq.n	800a3ca <_malloc_r+0x22>
 800a45c:	1b9b      	subs	r3, r3, r6
 800a45e:	50a3      	str	r3, [r4, r2]
 800a460:	e7b3      	b.n	800a3ca <_malloc_r+0x22>
 800a462:	6862      	ldr	r2, [r4, #4]
 800a464:	42a3      	cmp	r3, r4
 800a466:	bf0c      	ite	eq
 800a468:	6032      	streq	r2, [r6, #0]
 800a46a:	605a      	strne	r2, [r3, #4]
 800a46c:	e7ec      	b.n	800a448 <_malloc_r+0xa0>
 800a46e:	4623      	mov	r3, r4
 800a470:	6864      	ldr	r4, [r4, #4]
 800a472:	e7b2      	b.n	800a3da <_malloc_r+0x32>
 800a474:	4634      	mov	r4, r6
 800a476:	6876      	ldr	r6, [r6, #4]
 800a478:	e7b9      	b.n	800a3ee <_malloc_r+0x46>
 800a47a:	230c      	movs	r3, #12
 800a47c:	603b      	str	r3, [r7, #0]
 800a47e:	4638      	mov	r0, r7
 800a480:	f000 fda8 	bl	800afd4 <__malloc_unlock>
 800a484:	e7a1      	b.n	800a3ca <_malloc_r+0x22>
 800a486:	6025      	str	r5, [r4, #0]
 800a488:	e7de      	b.n	800a448 <_malloc_r+0xa0>
 800a48a:	bf00      	nop
 800a48c:	20000358 	.word	0x20000358

0800a490 <__ssputs_r>:
 800a490:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a494:	688e      	ldr	r6, [r1, #8]
 800a496:	429e      	cmp	r6, r3
 800a498:	4682      	mov	sl, r0
 800a49a:	460c      	mov	r4, r1
 800a49c:	4690      	mov	r8, r2
 800a49e:	461f      	mov	r7, r3
 800a4a0:	d838      	bhi.n	800a514 <__ssputs_r+0x84>
 800a4a2:	898a      	ldrh	r2, [r1, #12]
 800a4a4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a4a8:	d032      	beq.n	800a510 <__ssputs_r+0x80>
 800a4aa:	6825      	ldr	r5, [r4, #0]
 800a4ac:	6909      	ldr	r1, [r1, #16]
 800a4ae:	eba5 0901 	sub.w	r9, r5, r1
 800a4b2:	6965      	ldr	r5, [r4, #20]
 800a4b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a4b8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a4bc:	3301      	adds	r3, #1
 800a4be:	444b      	add	r3, r9
 800a4c0:	106d      	asrs	r5, r5, #1
 800a4c2:	429d      	cmp	r5, r3
 800a4c4:	bf38      	it	cc
 800a4c6:	461d      	movcc	r5, r3
 800a4c8:	0553      	lsls	r3, r2, #21
 800a4ca:	d531      	bpl.n	800a530 <__ssputs_r+0xa0>
 800a4cc:	4629      	mov	r1, r5
 800a4ce:	f7ff ff6b 	bl	800a3a8 <_malloc_r>
 800a4d2:	4606      	mov	r6, r0
 800a4d4:	b950      	cbnz	r0, 800a4ec <__ssputs_r+0x5c>
 800a4d6:	230c      	movs	r3, #12
 800a4d8:	f8ca 3000 	str.w	r3, [sl]
 800a4dc:	89a3      	ldrh	r3, [r4, #12]
 800a4de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a4e2:	81a3      	strh	r3, [r4, #12]
 800a4e4:	f04f 30ff 	mov.w	r0, #4294967295
 800a4e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4ec:	6921      	ldr	r1, [r4, #16]
 800a4ee:	464a      	mov	r2, r9
 800a4f0:	f7fc f99c 	bl	800682c <memcpy>
 800a4f4:	89a3      	ldrh	r3, [r4, #12]
 800a4f6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a4fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a4fe:	81a3      	strh	r3, [r4, #12]
 800a500:	6126      	str	r6, [r4, #16]
 800a502:	6165      	str	r5, [r4, #20]
 800a504:	444e      	add	r6, r9
 800a506:	eba5 0509 	sub.w	r5, r5, r9
 800a50a:	6026      	str	r6, [r4, #0]
 800a50c:	60a5      	str	r5, [r4, #8]
 800a50e:	463e      	mov	r6, r7
 800a510:	42be      	cmp	r6, r7
 800a512:	d900      	bls.n	800a516 <__ssputs_r+0x86>
 800a514:	463e      	mov	r6, r7
 800a516:	6820      	ldr	r0, [r4, #0]
 800a518:	4632      	mov	r2, r6
 800a51a:	4641      	mov	r1, r8
 800a51c:	f000 fd3a 	bl	800af94 <memmove>
 800a520:	68a3      	ldr	r3, [r4, #8]
 800a522:	1b9b      	subs	r3, r3, r6
 800a524:	60a3      	str	r3, [r4, #8]
 800a526:	6823      	ldr	r3, [r4, #0]
 800a528:	4433      	add	r3, r6
 800a52a:	6023      	str	r3, [r4, #0]
 800a52c:	2000      	movs	r0, #0
 800a52e:	e7db      	b.n	800a4e8 <__ssputs_r+0x58>
 800a530:	462a      	mov	r2, r5
 800a532:	f000 fd55 	bl	800afe0 <_realloc_r>
 800a536:	4606      	mov	r6, r0
 800a538:	2800      	cmp	r0, #0
 800a53a:	d1e1      	bne.n	800a500 <__ssputs_r+0x70>
 800a53c:	6921      	ldr	r1, [r4, #16]
 800a53e:	4650      	mov	r0, sl
 800a540:	f7ff fec6 	bl	800a2d0 <_free_r>
 800a544:	e7c7      	b.n	800a4d6 <__ssputs_r+0x46>
	...

0800a548 <_svfiprintf_r>:
 800a548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a54c:	4698      	mov	r8, r3
 800a54e:	898b      	ldrh	r3, [r1, #12]
 800a550:	061b      	lsls	r3, r3, #24
 800a552:	b09d      	sub	sp, #116	; 0x74
 800a554:	4607      	mov	r7, r0
 800a556:	460d      	mov	r5, r1
 800a558:	4614      	mov	r4, r2
 800a55a:	d50e      	bpl.n	800a57a <_svfiprintf_r+0x32>
 800a55c:	690b      	ldr	r3, [r1, #16]
 800a55e:	b963      	cbnz	r3, 800a57a <_svfiprintf_r+0x32>
 800a560:	2140      	movs	r1, #64	; 0x40
 800a562:	f7ff ff21 	bl	800a3a8 <_malloc_r>
 800a566:	6028      	str	r0, [r5, #0]
 800a568:	6128      	str	r0, [r5, #16]
 800a56a:	b920      	cbnz	r0, 800a576 <_svfiprintf_r+0x2e>
 800a56c:	230c      	movs	r3, #12
 800a56e:	603b      	str	r3, [r7, #0]
 800a570:	f04f 30ff 	mov.w	r0, #4294967295
 800a574:	e0d1      	b.n	800a71a <_svfiprintf_r+0x1d2>
 800a576:	2340      	movs	r3, #64	; 0x40
 800a578:	616b      	str	r3, [r5, #20]
 800a57a:	2300      	movs	r3, #0
 800a57c:	9309      	str	r3, [sp, #36]	; 0x24
 800a57e:	2320      	movs	r3, #32
 800a580:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a584:	f8cd 800c 	str.w	r8, [sp, #12]
 800a588:	2330      	movs	r3, #48	; 0x30
 800a58a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a734 <_svfiprintf_r+0x1ec>
 800a58e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a592:	f04f 0901 	mov.w	r9, #1
 800a596:	4623      	mov	r3, r4
 800a598:	469a      	mov	sl, r3
 800a59a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a59e:	b10a      	cbz	r2, 800a5a4 <_svfiprintf_r+0x5c>
 800a5a0:	2a25      	cmp	r2, #37	; 0x25
 800a5a2:	d1f9      	bne.n	800a598 <_svfiprintf_r+0x50>
 800a5a4:	ebba 0b04 	subs.w	fp, sl, r4
 800a5a8:	d00b      	beq.n	800a5c2 <_svfiprintf_r+0x7a>
 800a5aa:	465b      	mov	r3, fp
 800a5ac:	4622      	mov	r2, r4
 800a5ae:	4629      	mov	r1, r5
 800a5b0:	4638      	mov	r0, r7
 800a5b2:	f7ff ff6d 	bl	800a490 <__ssputs_r>
 800a5b6:	3001      	adds	r0, #1
 800a5b8:	f000 80aa 	beq.w	800a710 <_svfiprintf_r+0x1c8>
 800a5bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a5be:	445a      	add	r2, fp
 800a5c0:	9209      	str	r2, [sp, #36]	; 0x24
 800a5c2:	f89a 3000 	ldrb.w	r3, [sl]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	f000 80a2 	beq.w	800a710 <_svfiprintf_r+0x1c8>
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	f04f 32ff 	mov.w	r2, #4294967295
 800a5d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a5d6:	f10a 0a01 	add.w	sl, sl, #1
 800a5da:	9304      	str	r3, [sp, #16]
 800a5dc:	9307      	str	r3, [sp, #28]
 800a5de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a5e2:	931a      	str	r3, [sp, #104]	; 0x68
 800a5e4:	4654      	mov	r4, sl
 800a5e6:	2205      	movs	r2, #5
 800a5e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5ec:	4851      	ldr	r0, [pc, #324]	; (800a734 <_svfiprintf_r+0x1ec>)
 800a5ee:	f7f5 fe07 	bl	8000200 <memchr>
 800a5f2:	9a04      	ldr	r2, [sp, #16]
 800a5f4:	b9d8      	cbnz	r0, 800a62e <_svfiprintf_r+0xe6>
 800a5f6:	06d0      	lsls	r0, r2, #27
 800a5f8:	bf44      	itt	mi
 800a5fa:	2320      	movmi	r3, #32
 800a5fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a600:	0711      	lsls	r1, r2, #28
 800a602:	bf44      	itt	mi
 800a604:	232b      	movmi	r3, #43	; 0x2b
 800a606:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a60a:	f89a 3000 	ldrb.w	r3, [sl]
 800a60e:	2b2a      	cmp	r3, #42	; 0x2a
 800a610:	d015      	beq.n	800a63e <_svfiprintf_r+0xf6>
 800a612:	9a07      	ldr	r2, [sp, #28]
 800a614:	4654      	mov	r4, sl
 800a616:	2000      	movs	r0, #0
 800a618:	f04f 0c0a 	mov.w	ip, #10
 800a61c:	4621      	mov	r1, r4
 800a61e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a622:	3b30      	subs	r3, #48	; 0x30
 800a624:	2b09      	cmp	r3, #9
 800a626:	d94e      	bls.n	800a6c6 <_svfiprintf_r+0x17e>
 800a628:	b1b0      	cbz	r0, 800a658 <_svfiprintf_r+0x110>
 800a62a:	9207      	str	r2, [sp, #28]
 800a62c:	e014      	b.n	800a658 <_svfiprintf_r+0x110>
 800a62e:	eba0 0308 	sub.w	r3, r0, r8
 800a632:	fa09 f303 	lsl.w	r3, r9, r3
 800a636:	4313      	orrs	r3, r2
 800a638:	9304      	str	r3, [sp, #16]
 800a63a:	46a2      	mov	sl, r4
 800a63c:	e7d2      	b.n	800a5e4 <_svfiprintf_r+0x9c>
 800a63e:	9b03      	ldr	r3, [sp, #12]
 800a640:	1d19      	adds	r1, r3, #4
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	9103      	str	r1, [sp, #12]
 800a646:	2b00      	cmp	r3, #0
 800a648:	bfbb      	ittet	lt
 800a64a:	425b      	neglt	r3, r3
 800a64c:	f042 0202 	orrlt.w	r2, r2, #2
 800a650:	9307      	strge	r3, [sp, #28]
 800a652:	9307      	strlt	r3, [sp, #28]
 800a654:	bfb8      	it	lt
 800a656:	9204      	strlt	r2, [sp, #16]
 800a658:	7823      	ldrb	r3, [r4, #0]
 800a65a:	2b2e      	cmp	r3, #46	; 0x2e
 800a65c:	d10c      	bne.n	800a678 <_svfiprintf_r+0x130>
 800a65e:	7863      	ldrb	r3, [r4, #1]
 800a660:	2b2a      	cmp	r3, #42	; 0x2a
 800a662:	d135      	bne.n	800a6d0 <_svfiprintf_r+0x188>
 800a664:	9b03      	ldr	r3, [sp, #12]
 800a666:	1d1a      	adds	r2, r3, #4
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	9203      	str	r2, [sp, #12]
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	bfb8      	it	lt
 800a670:	f04f 33ff 	movlt.w	r3, #4294967295
 800a674:	3402      	adds	r4, #2
 800a676:	9305      	str	r3, [sp, #20]
 800a678:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a744 <_svfiprintf_r+0x1fc>
 800a67c:	7821      	ldrb	r1, [r4, #0]
 800a67e:	2203      	movs	r2, #3
 800a680:	4650      	mov	r0, sl
 800a682:	f7f5 fdbd 	bl	8000200 <memchr>
 800a686:	b140      	cbz	r0, 800a69a <_svfiprintf_r+0x152>
 800a688:	2340      	movs	r3, #64	; 0x40
 800a68a:	eba0 000a 	sub.w	r0, r0, sl
 800a68e:	fa03 f000 	lsl.w	r0, r3, r0
 800a692:	9b04      	ldr	r3, [sp, #16]
 800a694:	4303      	orrs	r3, r0
 800a696:	3401      	adds	r4, #1
 800a698:	9304      	str	r3, [sp, #16]
 800a69a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a69e:	4826      	ldr	r0, [pc, #152]	; (800a738 <_svfiprintf_r+0x1f0>)
 800a6a0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a6a4:	2206      	movs	r2, #6
 800a6a6:	f7f5 fdab 	bl	8000200 <memchr>
 800a6aa:	2800      	cmp	r0, #0
 800a6ac:	d038      	beq.n	800a720 <_svfiprintf_r+0x1d8>
 800a6ae:	4b23      	ldr	r3, [pc, #140]	; (800a73c <_svfiprintf_r+0x1f4>)
 800a6b0:	bb1b      	cbnz	r3, 800a6fa <_svfiprintf_r+0x1b2>
 800a6b2:	9b03      	ldr	r3, [sp, #12]
 800a6b4:	3307      	adds	r3, #7
 800a6b6:	f023 0307 	bic.w	r3, r3, #7
 800a6ba:	3308      	adds	r3, #8
 800a6bc:	9303      	str	r3, [sp, #12]
 800a6be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6c0:	4433      	add	r3, r6
 800a6c2:	9309      	str	r3, [sp, #36]	; 0x24
 800a6c4:	e767      	b.n	800a596 <_svfiprintf_r+0x4e>
 800a6c6:	fb0c 3202 	mla	r2, ip, r2, r3
 800a6ca:	460c      	mov	r4, r1
 800a6cc:	2001      	movs	r0, #1
 800a6ce:	e7a5      	b.n	800a61c <_svfiprintf_r+0xd4>
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	3401      	adds	r4, #1
 800a6d4:	9305      	str	r3, [sp, #20]
 800a6d6:	4619      	mov	r1, r3
 800a6d8:	f04f 0c0a 	mov.w	ip, #10
 800a6dc:	4620      	mov	r0, r4
 800a6de:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a6e2:	3a30      	subs	r2, #48	; 0x30
 800a6e4:	2a09      	cmp	r2, #9
 800a6e6:	d903      	bls.n	800a6f0 <_svfiprintf_r+0x1a8>
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d0c5      	beq.n	800a678 <_svfiprintf_r+0x130>
 800a6ec:	9105      	str	r1, [sp, #20]
 800a6ee:	e7c3      	b.n	800a678 <_svfiprintf_r+0x130>
 800a6f0:	fb0c 2101 	mla	r1, ip, r1, r2
 800a6f4:	4604      	mov	r4, r0
 800a6f6:	2301      	movs	r3, #1
 800a6f8:	e7f0      	b.n	800a6dc <_svfiprintf_r+0x194>
 800a6fa:	ab03      	add	r3, sp, #12
 800a6fc:	9300      	str	r3, [sp, #0]
 800a6fe:	462a      	mov	r2, r5
 800a700:	4b0f      	ldr	r3, [pc, #60]	; (800a740 <_svfiprintf_r+0x1f8>)
 800a702:	a904      	add	r1, sp, #16
 800a704:	4638      	mov	r0, r7
 800a706:	f7fc f947 	bl	8006998 <_printf_float>
 800a70a:	1c42      	adds	r2, r0, #1
 800a70c:	4606      	mov	r6, r0
 800a70e:	d1d6      	bne.n	800a6be <_svfiprintf_r+0x176>
 800a710:	89ab      	ldrh	r3, [r5, #12]
 800a712:	065b      	lsls	r3, r3, #25
 800a714:	f53f af2c 	bmi.w	800a570 <_svfiprintf_r+0x28>
 800a718:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a71a:	b01d      	add	sp, #116	; 0x74
 800a71c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a720:	ab03      	add	r3, sp, #12
 800a722:	9300      	str	r3, [sp, #0]
 800a724:	462a      	mov	r2, r5
 800a726:	4b06      	ldr	r3, [pc, #24]	; (800a740 <_svfiprintf_r+0x1f8>)
 800a728:	a904      	add	r1, sp, #16
 800a72a:	4638      	mov	r0, r7
 800a72c:	f7fc fbd8 	bl	8006ee0 <_printf_i>
 800a730:	e7eb      	b.n	800a70a <_svfiprintf_r+0x1c2>
 800a732:	bf00      	nop
 800a734:	0800b5f4 	.word	0x0800b5f4
 800a738:	0800b5fe 	.word	0x0800b5fe
 800a73c:	08006999 	.word	0x08006999
 800a740:	0800a491 	.word	0x0800a491
 800a744:	0800b5fa 	.word	0x0800b5fa

0800a748 <__sfputc_r>:
 800a748:	6893      	ldr	r3, [r2, #8]
 800a74a:	3b01      	subs	r3, #1
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	b410      	push	{r4}
 800a750:	6093      	str	r3, [r2, #8]
 800a752:	da08      	bge.n	800a766 <__sfputc_r+0x1e>
 800a754:	6994      	ldr	r4, [r2, #24]
 800a756:	42a3      	cmp	r3, r4
 800a758:	db01      	blt.n	800a75e <__sfputc_r+0x16>
 800a75a:	290a      	cmp	r1, #10
 800a75c:	d103      	bne.n	800a766 <__sfputc_r+0x1e>
 800a75e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a762:	f000 b9bd 	b.w	800aae0 <__swbuf_r>
 800a766:	6813      	ldr	r3, [r2, #0]
 800a768:	1c58      	adds	r0, r3, #1
 800a76a:	6010      	str	r0, [r2, #0]
 800a76c:	7019      	strb	r1, [r3, #0]
 800a76e:	4608      	mov	r0, r1
 800a770:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a774:	4770      	bx	lr

0800a776 <__sfputs_r>:
 800a776:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a778:	4606      	mov	r6, r0
 800a77a:	460f      	mov	r7, r1
 800a77c:	4614      	mov	r4, r2
 800a77e:	18d5      	adds	r5, r2, r3
 800a780:	42ac      	cmp	r4, r5
 800a782:	d101      	bne.n	800a788 <__sfputs_r+0x12>
 800a784:	2000      	movs	r0, #0
 800a786:	e007      	b.n	800a798 <__sfputs_r+0x22>
 800a788:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a78c:	463a      	mov	r2, r7
 800a78e:	4630      	mov	r0, r6
 800a790:	f7ff ffda 	bl	800a748 <__sfputc_r>
 800a794:	1c43      	adds	r3, r0, #1
 800a796:	d1f3      	bne.n	800a780 <__sfputs_r+0xa>
 800a798:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a79c <_vfiprintf_r>:
 800a79c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7a0:	460d      	mov	r5, r1
 800a7a2:	b09d      	sub	sp, #116	; 0x74
 800a7a4:	4614      	mov	r4, r2
 800a7a6:	4698      	mov	r8, r3
 800a7a8:	4606      	mov	r6, r0
 800a7aa:	b118      	cbz	r0, 800a7b4 <_vfiprintf_r+0x18>
 800a7ac:	6983      	ldr	r3, [r0, #24]
 800a7ae:	b90b      	cbnz	r3, 800a7b4 <_vfiprintf_r+0x18>
 800a7b0:	f7fe fc88 	bl	80090c4 <__sinit>
 800a7b4:	4b89      	ldr	r3, [pc, #548]	; (800a9dc <_vfiprintf_r+0x240>)
 800a7b6:	429d      	cmp	r5, r3
 800a7b8:	d11b      	bne.n	800a7f2 <_vfiprintf_r+0x56>
 800a7ba:	6875      	ldr	r5, [r6, #4]
 800a7bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a7be:	07d9      	lsls	r1, r3, #31
 800a7c0:	d405      	bmi.n	800a7ce <_vfiprintf_r+0x32>
 800a7c2:	89ab      	ldrh	r3, [r5, #12]
 800a7c4:	059a      	lsls	r2, r3, #22
 800a7c6:	d402      	bmi.n	800a7ce <_vfiprintf_r+0x32>
 800a7c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a7ca:	f7ff f88c 	bl	80098e6 <__retarget_lock_acquire_recursive>
 800a7ce:	89ab      	ldrh	r3, [r5, #12]
 800a7d0:	071b      	lsls	r3, r3, #28
 800a7d2:	d501      	bpl.n	800a7d8 <_vfiprintf_r+0x3c>
 800a7d4:	692b      	ldr	r3, [r5, #16]
 800a7d6:	b9eb      	cbnz	r3, 800a814 <_vfiprintf_r+0x78>
 800a7d8:	4629      	mov	r1, r5
 800a7da:	4630      	mov	r0, r6
 800a7dc:	f000 f9f2 	bl	800abc4 <__swsetup_r>
 800a7e0:	b1c0      	cbz	r0, 800a814 <_vfiprintf_r+0x78>
 800a7e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a7e4:	07dc      	lsls	r4, r3, #31
 800a7e6:	d50e      	bpl.n	800a806 <_vfiprintf_r+0x6a>
 800a7e8:	f04f 30ff 	mov.w	r0, #4294967295
 800a7ec:	b01d      	add	sp, #116	; 0x74
 800a7ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7f2:	4b7b      	ldr	r3, [pc, #492]	; (800a9e0 <_vfiprintf_r+0x244>)
 800a7f4:	429d      	cmp	r5, r3
 800a7f6:	d101      	bne.n	800a7fc <_vfiprintf_r+0x60>
 800a7f8:	68b5      	ldr	r5, [r6, #8]
 800a7fa:	e7df      	b.n	800a7bc <_vfiprintf_r+0x20>
 800a7fc:	4b79      	ldr	r3, [pc, #484]	; (800a9e4 <_vfiprintf_r+0x248>)
 800a7fe:	429d      	cmp	r5, r3
 800a800:	bf08      	it	eq
 800a802:	68f5      	ldreq	r5, [r6, #12]
 800a804:	e7da      	b.n	800a7bc <_vfiprintf_r+0x20>
 800a806:	89ab      	ldrh	r3, [r5, #12]
 800a808:	0598      	lsls	r0, r3, #22
 800a80a:	d4ed      	bmi.n	800a7e8 <_vfiprintf_r+0x4c>
 800a80c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a80e:	f7ff f86b 	bl	80098e8 <__retarget_lock_release_recursive>
 800a812:	e7e9      	b.n	800a7e8 <_vfiprintf_r+0x4c>
 800a814:	2300      	movs	r3, #0
 800a816:	9309      	str	r3, [sp, #36]	; 0x24
 800a818:	2320      	movs	r3, #32
 800a81a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a81e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a822:	2330      	movs	r3, #48	; 0x30
 800a824:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a9e8 <_vfiprintf_r+0x24c>
 800a828:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a82c:	f04f 0901 	mov.w	r9, #1
 800a830:	4623      	mov	r3, r4
 800a832:	469a      	mov	sl, r3
 800a834:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a838:	b10a      	cbz	r2, 800a83e <_vfiprintf_r+0xa2>
 800a83a:	2a25      	cmp	r2, #37	; 0x25
 800a83c:	d1f9      	bne.n	800a832 <_vfiprintf_r+0x96>
 800a83e:	ebba 0b04 	subs.w	fp, sl, r4
 800a842:	d00b      	beq.n	800a85c <_vfiprintf_r+0xc0>
 800a844:	465b      	mov	r3, fp
 800a846:	4622      	mov	r2, r4
 800a848:	4629      	mov	r1, r5
 800a84a:	4630      	mov	r0, r6
 800a84c:	f7ff ff93 	bl	800a776 <__sfputs_r>
 800a850:	3001      	adds	r0, #1
 800a852:	f000 80aa 	beq.w	800a9aa <_vfiprintf_r+0x20e>
 800a856:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a858:	445a      	add	r2, fp
 800a85a:	9209      	str	r2, [sp, #36]	; 0x24
 800a85c:	f89a 3000 	ldrb.w	r3, [sl]
 800a860:	2b00      	cmp	r3, #0
 800a862:	f000 80a2 	beq.w	800a9aa <_vfiprintf_r+0x20e>
 800a866:	2300      	movs	r3, #0
 800a868:	f04f 32ff 	mov.w	r2, #4294967295
 800a86c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a870:	f10a 0a01 	add.w	sl, sl, #1
 800a874:	9304      	str	r3, [sp, #16]
 800a876:	9307      	str	r3, [sp, #28]
 800a878:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a87c:	931a      	str	r3, [sp, #104]	; 0x68
 800a87e:	4654      	mov	r4, sl
 800a880:	2205      	movs	r2, #5
 800a882:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a886:	4858      	ldr	r0, [pc, #352]	; (800a9e8 <_vfiprintf_r+0x24c>)
 800a888:	f7f5 fcba 	bl	8000200 <memchr>
 800a88c:	9a04      	ldr	r2, [sp, #16]
 800a88e:	b9d8      	cbnz	r0, 800a8c8 <_vfiprintf_r+0x12c>
 800a890:	06d1      	lsls	r1, r2, #27
 800a892:	bf44      	itt	mi
 800a894:	2320      	movmi	r3, #32
 800a896:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a89a:	0713      	lsls	r3, r2, #28
 800a89c:	bf44      	itt	mi
 800a89e:	232b      	movmi	r3, #43	; 0x2b
 800a8a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a8a4:	f89a 3000 	ldrb.w	r3, [sl]
 800a8a8:	2b2a      	cmp	r3, #42	; 0x2a
 800a8aa:	d015      	beq.n	800a8d8 <_vfiprintf_r+0x13c>
 800a8ac:	9a07      	ldr	r2, [sp, #28]
 800a8ae:	4654      	mov	r4, sl
 800a8b0:	2000      	movs	r0, #0
 800a8b2:	f04f 0c0a 	mov.w	ip, #10
 800a8b6:	4621      	mov	r1, r4
 800a8b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a8bc:	3b30      	subs	r3, #48	; 0x30
 800a8be:	2b09      	cmp	r3, #9
 800a8c0:	d94e      	bls.n	800a960 <_vfiprintf_r+0x1c4>
 800a8c2:	b1b0      	cbz	r0, 800a8f2 <_vfiprintf_r+0x156>
 800a8c4:	9207      	str	r2, [sp, #28]
 800a8c6:	e014      	b.n	800a8f2 <_vfiprintf_r+0x156>
 800a8c8:	eba0 0308 	sub.w	r3, r0, r8
 800a8cc:	fa09 f303 	lsl.w	r3, r9, r3
 800a8d0:	4313      	orrs	r3, r2
 800a8d2:	9304      	str	r3, [sp, #16]
 800a8d4:	46a2      	mov	sl, r4
 800a8d6:	e7d2      	b.n	800a87e <_vfiprintf_r+0xe2>
 800a8d8:	9b03      	ldr	r3, [sp, #12]
 800a8da:	1d19      	adds	r1, r3, #4
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	9103      	str	r1, [sp, #12]
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	bfbb      	ittet	lt
 800a8e4:	425b      	neglt	r3, r3
 800a8e6:	f042 0202 	orrlt.w	r2, r2, #2
 800a8ea:	9307      	strge	r3, [sp, #28]
 800a8ec:	9307      	strlt	r3, [sp, #28]
 800a8ee:	bfb8      	it	lt
 800a8f0:	9204      	strlt	r2, [sp, #16]
 800a8f2:	7823      	ldrb	r3, [r4, #0]
 800a8f4:	2b2e      	cmp	r3, #46	; 0x2e
 800a8f6:	d10c      	bne.n	800a912 <_vfiprintf_r+0x176>
 800a8f8:	7863      	ldrb	r3, [r4, #1]
 800a8fa:	2b2a      	cmp	r3, #42	; 0x2a
 800a8fc:	d135      	bne.n	800a96a <_vfiprintf_r+0x1ce>
 800a8fe:	9b03      	ldr	r3, [sp, #12]
 800a900:	1d1a      	adds	r2, r3, #4
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	9203      	str	r2, [sp, #12]
 800a906:	2b00      	cmp	r3, #0
 800a908:	bfb8      	it	lt
 800a90a:	f04f 33ff 	movlt.w	r3, #4294967295
 800a90e:	3402      	adds	r4, #2
 800a910:	9305      	str	r3, [sp, #20]
 800a912:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a9f8 <_vfiprintf_r+0x25c>
 800a916:	7821      	ldrb	r1, [r4, #0]
 800a918:	2203      	movs	r2, #3
 800a91a:	4650      	mov	r0, sl
 800a91c:	f7f5 fc70 	bl	8000200 <memchr>
 800a920:	b140      	cbz	r0, 800a934 <_vfiprintf_r+0x198>
 800a922:	2340      	movs	r3, #64	; 0x40
 800a924:	eba0 000a 	sub.w	r0, r0, sl
 800a928:	fa03 f000 	lsl.w	r0, r3, r0
 800a92c:	9b04      	ldr	r3, [sp, #16]
 800a92e:	4303      	orrs	r3, r0
 800a930:	3401      	adds	r4, #1
 800a932:	9304      	str	r3, [sp, #16]
 800a934:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a938:	482c      	ldr	r0, [pc, #176]	; (800a9ec <_vfiprintf_r+0x250>)
 800a93a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a93e:	2206      	movs	r2, #6
 800a940:	f7f5 fc5e 	bl	8000200 <memchr>
 800a944:	2800      	cmp	r0, #0
 800a946:	d03f      	beq.n	800a9c8 <_vfiprintf_r+0x22c>
 800a948:	4b29      	ldr	r3, [pc, #164]	; (800a9f0 <_vfiprintf_r+0x254>)
 800a94a:	bb1b      	cbnz	r3, 800a994 <_vfiprintf_r+0x1f8>
 800a94c:	9b03      	ldr	r3, [sp, #12]
 800a94e:	3307      	adds	r3, #7
 800a950:	f023 0307 	bic.w	r3, r3, #7
 800a954:	3308      	adds	r3, #8
 800a956:	9303      	str	r3, [sp, #12]
 800a958:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a95a:	443b      	add	r3, r7
 800a95c:	9309      	str	r3, [sp, #36]	; 0x24
 800a95e:	e767      	b.n	800a830 <_vfiprintf_r+0x94>
 800a960:	fb0c 3202 	mla	r2, ip, r2, r3
 800a964:	460c      	mov	r4, r1
 800a966:	2001      	movs	r0, #1
 800a968:	e7a5      	b.n	800a8b6 <_vfiprintf_r+0x11a>
 800a96a:	2300      	movs	r3, #0
 800a96c:	3401      	adds	r4, #1
 800a96e:	9305      	str	r3, [sp, #20]
 800a970:	4619      	mov	r1, r3
 800a972:	f04f 0c0a 	mov.w	ip, #10
 800a976:	4620      	mov	r0, r4
 800a978:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a97c:	3a30      	subs	r2, #48	; 0x30
 800a97e:	2a09      	cmp	r2, #9
 800a980:	d903      	bls.n	800a98a <_vfiprintf_r+0x1ee>
 800a982:	2b00      	cmp	r3, #0
 800a984:	d0c5      	beq.n	800a912 <_vfiprintf_r+0x176>
 800a986:	9105      	str	r1, [sp, #20]
 800a988:	e7c3      	b.n	800a912 <_vfiprintf_r+0x176>
 800a98a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a98e:	4604      	mov	r4, r0
 800a990:	2301      	movs	r3, #1
 800a992:	e7f0      	b.n	800a976 <_vfiprintf_r+0x1da>
 800a994:	ab03      	add	r3, sp, #12
 800a996:	9300      	str	r3, [sp, #0]
 800a998:	462a      	mov	r2, r5
 800a99a:	4b16      	ldr	r3, [pc, #88]	; (800a9f4 <_vfiprintf_r+0x258>)
 800a99c:	a904      	add	r1, sp, #16
 800a99e:	4630      	mov	r0, r6
 800a9a0:	f7fb fffa 	bl	8006998 <_printf_float>
 800a9a4:	4607      	mov	r7, r0
 800a9a6:	1c78      	adds	r0, r7, #1
 800a9a8:	d1d6      	bne.n	800a958 <_vfiprintf_r+0x1bc>
 800a9aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a9ac:	07d9      	lsls	r1, r3, #31
 800a9ae:	d405      	bmi.n	800a9bc <_vfiprintf_r+0x220>
 800a9b0:	89ab      	ldrh	r3, [r5, #12]
 800a9b2:	059a      	lsls	r2, r3, #22
 800a9b4:	d402      	bmi.n	800a9bc <_vfiprintf_r+0x220>
 800a9b6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a9b8:	f7fe ff96 	bl	80098e8 <__retarget_lock_release_recursive>
 800a9bc:	89ab      	ldrh	r3, [r5, #12]
 800a9be:	065b      	lsls	r3, r3, #25
 800a9c0:	f53f af12 	bmi.w	800a7e8 <_vfiprintf_r+0x4c>
 800a9c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a9c6:	e711      	b.n	800a7ec <_vfiprintf_r+0x50>
 800a9c8:	ab03      	add	r3, sp, #12
 800a9ca:	9300      	str	r3, [sp, #0]
 800a9cc:	462a      	mov	r2, r5
 800a9ce:	4b09      	ldr	r3, [pc, #36]	; (800a9f4 <_vfiprintf_r+0x258>)
 800a9d0:	a904      	add	r1, sp, #16
 800a9d2:	4630      	mov	r0, r6
 800a9d4:	f7fc fa84 	bl	8006ee0 <_printf_i>
 800a9d8:	e7e4      	b.n	800a9a4 <_vfiprintf_r+0x208>
 800a9da:	bf00      	nop
 800a9dc:	0800b3dc 	.word	0x0800b3dc
 800a9e0:	0800b3fc 	.word	0x0800b3fc
 800a9e4:	0800b3bc 	.word	0x0800b3bc
 800a9e8:	0800b5f4 	.word	0x0800b5f4
 800a9ec:	0800b5fe 	.word	0x0800b5fe
 800a9f0:	08006999 	.word	0x08006999
 800a9f4:	0800a777 	.word	0x0800a777
 800a9f8:	0800b5fa 	.word	0x0800b5fa
 800a9fc:	00000000 	.word	0x00000000

0800aa00 <nan>:
 800aa00:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800aa08 <nan+0x8>
 800aa04:	4770      	bx	lr
 800aa06:	bf00      	nop
 800aa08:	00000000 	.word	0x00000000
 800aa0c:	7ff80000 	.word	0x7ff80000

0800aa10 <_sbrk_r>:
 800aa10:	b538      	push	{r3, r4, r5, lr}
 800aa12:	4d06      	ldr	r5, [pc, #24]	; (800aa2c <_sbrk_r+0x1c>)
 800aa14:	2300      	movs	r3, #0
 800aa16:	4604      	mov	r4, r0
 800aa18:	4608      	mov	r0, r1
 800aa1a:	602b      	str	r3, [r5, #0]
 800aa1c:	f7f6 ffe0 	bl	80019e0 <_sbrk>
 800aa20:	1c43      	adds	r3, r0, #1
 800aa22:	d102      	bne.n	800aa2a <_sbrk_r+0x1a>
 800aa24:	682b      	ldr	r3, [r5, #0]
 800aa26:	b103      	cbz	r3, 800aa2a <_sbrk_r+0x1a>
 800aa28:	6023      	str	r3, [r4, #0]
 800aa2a:	bd38      	pop	{r3, r4, r5, pc}
 800aa2c:	20000360 	.word	0x20000360

0800aa30 <__sread>:
 800aa30:	b510      	push	{r4, lr}
 800aa32:	460c      	mov	r4, r1
 800aa34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa38:	f000 fb02 	bl	800b040 <_read_r>
 800aa3c:	2800      	cmp	r0, #0
 800aa3e:	bfab      	itete	ge
 800aa40:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800aa42:	89a3      	ldrhlt	r3, [r4, #12]
 800aa44:	181b      	addge	r3, r3, r0
 800aa46:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800aa4a:	bfac      	ite	ge
 800aa4c:	6563      	strge	r3, [r4, #84]	; 0x54
 800aa4e:	81a3      	strhlt	r3, [r4, #12]
 800aa50:	bd10      	pop	{r4, pc}

0800aa52 <__swrite>:
 800aa52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa56:	461f      	mov	r7, r3
 800aa58:	898b      	ldrh	r3, [r1, #12]
 800aa5a:	05db      	lsls	r3, r3, #23
 800aa5c:	4605      	mov	r5, r0
 800aa5e:	460c      	mov	r4, r1
 800aa60:	4616      	mov	r6, r2
 800aa62:	d505      	bpl.n	800aa70 <__swrite+0x1e>
 800aa64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa68:	2302      	movs	r3, #2
 800aa6a:	2200      	movs	r2, #0
 800aa6c:	f000 fa1a 	bl	800aea4 <_lseek_r>
 800aa70:	89a3      	ldrh	r3, [r4, #12]
 800aa72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aa76:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aa7a:	81a3      	strh	r3, [r4, #12]
 800aa7c:	4632      	mov	r2, r6
 800aa7e:	463b      	mov	r3, r7
 800aa80:	4628      	mov	r0, r5
 800aa82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aa86:	f000 b88b 	b.w	800aba0 <_write_r>

0800aa8a <__sseek>:
 800aa8a:	b510      	push	{r4, lr}
 800aa8c:	460c      	mov	r4, r1
 800aa8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa92:	f000 fa07 	bl	800aea4 <_lseek_r>
 800aa96:	1c43      	adds	r3, r0, #1
 800aa98:	89a3      	ldrh	r3, [r4, #12]
 800aa9a:	bf15      	itete	ne
 800aa9c:	6560      	strne	r0, [r4, #84]	; 0x54
 800aa9e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800aaa2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800aaa6:	81a3      	strheq	r3, [r4, #12]
 800aaa8:	bf18      	it	ne
 800aaaa:	81a3      	strhne	r3, [r4, #12]
 800aaac:	bd10      	pop	{r4, pc}

0800aaae <__sclose>:
 800aaae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aab2:	f000 b913 	b.w	800acdc <_close_r>

0800aab6 <strncmp>:
 800aab6:	b510      	push	{r4, lr}
 800aab8:	b17a      	cbz	r2, 800aada <strncmp+0x24>
 800aaba:	4603      	mov	r3, r0
 800aabc:	3901      	subs	r1, #1
 800aabe:	1884      	adds	r4, r0, r2
 800aac0:	f813 0b01 	ldrb.w	r0, [r3], #1
 800aac4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800aac8:	4290      	cmp	r0, r2
 800aaca:	d101      	bne.n	800aad0 <strncmp+0x1a>
 800aacc:	42a3      	cmp	r3, r4
 800aace:	d101      	bne.n	800aad4 <strncmp+0x1e>
 800aad0:	1a80      	subs	r0, r0, r2
 800aad2:	bd10      	pop	{r4, pc}
 800aad4:	2800      	cmp	r0, #0
 800aad6:	d1f3      	bne.n	800aac0 <strncmp+0xa>
 800aad8:	e7fa      	b.n	800aad0 <strncmp+0x1a>
 800aada:	4610      	mov	r0, r2
 800aadc:	e7f9      	b.n	800aad2 <strncmp+0x1c>
	...

0800aae0 <__swbuf_r>:
 800aae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aae2:	460e      	mov	r6, r1
 800aae4:	4614      	mov	r4, r2
 800aae6:	4605      	mov	r5, r0
 800aae8:	b118      	cbz	r0, 800aaf2 <__swbuf_r+0x12>
 800aaea:	6983      	ldr	r3, [r0, #24]
 800aaec:	b90b      	cbnz	r3, 800aaf2 <__swbuf_r+0x12>
 800aaee:	f7fe fae9 	bl	80090c4 <__sinit>
 800aaf2:	4b21      	ldr	r3, [pc, #132]	; (800ab78 <__swbuf_r+0x98>)
 800aaf4:	429c      	cmp	r4, r3
 800aaf6:	d12b      	bne.n	800ab50 <__swbuf_r+0x70>
 800aaf8:	686c      	ldr	r4, [r5, #4]
 800aafa:	69a3      	ldr	r3, [r4, #24]
 800aafc:	60a3      	str	r3, [r4, #8]
 800aafe:	89a3      	ldrh	r3, [r4, #12]
 800ab00:	071a      	lsls	r2, r3, #28
 800ab02:	d52f      	bpl.n	800ab64 <__swbuf_r+0x84>
 800ab04:	6923      	ldr	r3, [r4, #16]
 800ab06:	b36b      	cbz	r3, 800ab64 <__swbuf_r+0x84>
 800ab08:	6923      	ldr	r3, [r4, #16]
 800ab0a:	6820      	ldr	r0, [r4, #0]
 800ab0c:	1ac0      	subs	r0, r0, r3
 800ab0e:	6963      	ldr	r3, [r4, #20]
 800ab10:	b2f6      	uxtb	r6, r6
 800ab12:	4283      	cmp	r3, r0
 800ab14:	4637      	mov	r7, r6
 800ab16:	dc04      	bgt.n	800ab22 <__swbuf_r+0x42>
 800ab18:	4621      	mov	r1, r4
 800ab1a:	4628      	mov	r0, r5
 800ab1c:	f000 f974 	bl	800ae08 <_fflush_r>
 800ab20:	bb30      	cbnz	r0, 800ab70 <__swbuf_r+0x90>
 800ab22:	68a3      	ldr	r3, [r4, #8]
 800ab24:	3b01      	subs	r3, #1
 800ab26:	60a3      	str	r3, [r4, #8]
 800ab28:	6823      	ldr	r3, [r4, #0]
 800ab2a:	1c5a      	adds	r2, r3, #1
 800ab2c:	6022      	str	r2, [r4, #0]
 800ab2e:	701e      	strb	r6, [r3, #0]
 800ab30:	6963      	ldr	r3, [r4, #20]
 800ab32:	3001      	adds	r0, #1
 800ab34:	4283      	cmp	r3, r0
 800ab36:	d004      	beq.n	800ab42 <__swbuf_r+0x62>
 800ab38:	89a3      	ldrh	r3, [r4, #12]
 800ab3a:	07db      	lsls	r3, r3, #31
 800ab3c:	d506      	bpl.n	800ab4c <__swbuf_r+0x6c>
 800ab3e:	2e0a      	cmp	r6, #10
 800ab40:	d104      	bne.n	800ab4c <__swbuf_r+0x6c>
 800ab42:	4621      	mov	r1, r4
 800ab44:	4628      	mov	r0, r5
 800ab46:	f000 f95f 	bl	800ae08 <_fflush_r>
 800ab4a:	b988      	cbnz	r0, 800ab70 <__swbuf_r+0x90>
 800ab4c:	4638      	mov	r0, r7
 800ab4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab50:	4b0a      	ldr	r3, [pc, #40]	; (800ab7c <__swbuf_r+0x9c>)
 800ab52:	429c      	cmp	r4, r3
 800ab54:	d101      	bne.n	800ab5a <__swbuf_r+0x7a>
 800ab56:	68ac      	ldr	r4, [r5, #8]
 800ab58:	e7cf      	b.n	800aafa <__swbuf_r+0x1a>
 800ab5a:	4b09      	ldr	r3, [pc, #36]	; (800ab80 <__swbuf_r+0xa0>)
 800ab5c:	429c      	cmp	r4, r3
 800ab5e:	bf08      	it	eq
 800ab60:	68ec      	ldreq	r4, [r5, #12]
 800ab62:	e7ca      	b.n	800aafa <__swbuf_r+0x1a>
 800ab64:	4621      	mov	r1, r4
 800ab66:	4628      	mov	r0, r5
 800ab68:	f000 f82c 	bl	800abc4 <__swsetup_r>
 800ab6c:	2800      	cmp	r0, #0
 800ab6e:	d0cb      	beq.n	800ab08 <__swbuf_r+0x28>
 800ab70:	f04f 37ff 	mov.w	r7, #4294967295
 800ab74:	e7ea      	b.n	800ab4c <__swbuf_r+0x6c>
 800ab76:	bf00      	nop
 800ab78:	0800b3dc 	.word	0x0800b3dc
 800ab7c:	0800b3fc 	.word	0x0800b3fc
 800ab80:	0800b3bc 	.word	0x0800b3bc

0800ab84 <__ascii_wctomb>:
 800ab84:	b149      	cbz	r1, 800ab9a <__ascii_wctomb+0x16>
 800ab86:	2aff      	cmp	r2, #255	; 0xff
 800ab88:	bf85      	ittet	hi
 800ab8a:	238a      	movhi	r3, #138	; 0x8a
 800ab8c:	6003      	strhi	r3, [r0, #0]
 800ab8e:	700a      	strbls	r2, [r1, #0]
 800ab90:	f04f 30ff 	movhi.w	r0, #4294967295
 800ab94:	bf98      	it	ls
 800ab96:	2001      	movls	r0, #1
 800ab98:	4770      	bx	lr
 800ab9a:	4608      	mov	r0, r1
 800ab9c:	4770      	bx	lr
	...

0800aba0 <_write_r>:
 800aba0:	b538      	push	{r3, r4, r5, lr}
 800aba2:	4d07      	ldr	r5, [pc, #28]	; (800abc0 <_write_r+0x20>)
 800aba4:	4604      	mov	r4, r0
 800aba6:	4608      	mov	r0, r1
 800aba8:	4611      	mov	r1, r2
 800abaa:	2200      	movs	r2, #0
 800abac:	602a      	str	r2, [r5, #0]
 800abae:	461a      	mov	r2, r3
 800abb0:	f7f6 fd52 	bl	8001658 <_write>
 800abb4:	1c43      	adds	r3, r0, #1
 800abb6:	d102      	bne.n	800abbe <_write_r+0x1e>
 800abb8:	682b      	ldr	r3, [r5, #0]
 800abba:	b103      	cbz	r3, 800abbe <_write_r+0x1e>
 800abbc:	6023      	str	r3, [r4, #0]
 800abbe:	bd38      	pop	{r3, r4, r5, pc}
 800abc0:	20000360 	.word	0x20000360

0800abc4 <__swsetup_r>:
 800abc4:	4b32      	ldr	r3, [pc, #200]	; (800ac90 <__swsetup_r+0xcc>)
 800abc6:	b570      	push	{r4, r5, r6, lr}
 800abc8:	681d      	ldr	r5, [r3, #0]
 800abca:	4606      	mov	r6, r0
 800abcc:	460c      	mov	r4, r1
 800abce:	b125      	cbz	r5, 800abda <__swsetup_r+0x16>
 800abd0:	69ab      	ldr	r3, [r5, #24]
 800abd2:	b913      	cbnz	r3, 800abda <__swsetup_r+0x16>
 800abd4:	4628      	mov	r0, r5
 800abd6:	f7fe fa75 	bl	80090c4 <__sinit>
 800abda:	4b2e      	ldr	r3, [pc, #184]	; (800ac94 <__swsetup_r+0xd0>)
 800abdc:	429c      	cmp	r4, r3
 800abde:	d10f      	bne.n	800ac00 <__swsetup_r+0x3c>
 800abe0:	686c      	ldr	r4, [r5, #4]
 800abe2:	89a3      	ldrh	r3, [r4, #12]
 800abe4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800abe8:	0719      	lsls	r1, r3, #28
 800abea:	d42c      	bmi.n	800ac46 <__swsetup_r+0x82>
 800abec:	06dd      	lsls	r5, r3, #27
 800abee:	d411      	bmi.n	800ac14 <__swsetup_r+0x50>
 800abf0:	2309      	movs	r3, #9
 800abf2:	6033      	str	r3, [r6, #0]
 800abf4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800abf8:	81a3      	strh	r3, [r4, #12]
 800abfa:	f04f 30ff 	mov.w	r0, #4294967295
 800abfe:	e03e      	b.n	800ac7e <__swsetup_r+0xba>
 800ac00:	4b25      	ldr	r3, [pc, #148]	; (800ac98 <__swsetup_r+0xd4>)
 800ac02:	429c      	cmp	r4, r3
 800ac04:	d101      	bne.n	800ac0a <__swsetup_r+0x46>
 800ac06:	68ac      	ldr	r4, [r5, #8]
 800ac08:	e7eb      	b.n	800abe2 <__swsetup_r+0x1e>
 800ac0a:	4b24      	ldr	r3, [pc, #144]	; (800ac9c <__swsetup_r+0xd8>)
 800ac0c:	429c      	cmp	r4, r3
 800ac0e:	bf08      	it	eq
 800ac10:	68ec      	ldreq	r4, [r5, #12]
 800ac12:	e7e6      	b.n	800abe2 <__swsetup_r+0x1e>
 800ac14:	0758      	lsls	r0, r3, #29
 800ac16:	d512      	bpl.n	800ac3e <__swsetup_r+0x7a>
 800ac18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ac1a:	b141      	cbz	r1, 800ac2e <__swsetup_r+0x6a>
 800ac1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ac20:	4299      	cmp	r1, r3
 800ac22:	d002      	beq.n	800ac2a <__swsetup_r+0x66>
 800ac24:	4630      	mov	r0, r6
 800ac26:	f7ff fb53 	bl	800a2d0 <_free_r>
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	6363      	str	r3, [r4, #52]	; 0x34
 800ac2e:	89a3      	ldrh	r3, [r4, #12]
 800ac30:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ac34:	81a3      	strh	r3, [r4, #12]
 800ac36:	2300      	movs	r3, #0
 800ac38:	6063      	str	r3, [r4, #4]
 800ac3a:	6923      	ldr	r3, [r4, #16]
 800ac3c:	6023      	str	r3, [r4, #0]
 800ac3e:	89a3      	ldrh	r3, [r4, #12]
 800ac40:	f043 0308 	orr.w	r3, r3, #8
 800ac44:	81a3      	strh	r3, [r4, #12]
 800ac46:	6923      	ldr	r3, [r4, #16]
 800ac48:	b94b      	cbnz	r3, 800ac5e <__swsetup_r+0x9a>
 800ac4a:	89a3      	ldrh	r3, [r4, #12]
 800ac4c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ac50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ac54:	d003      	beq.n	800ac5e <__swsetup_r+0x9a>
 800ac56:	4621      	mov	r1, r4
 800ac58:	4630      	mov	r0, r6
 800ac5a:	f000 f95b 	bl	800af14 <__smakebuf_r>
 800ac5e:	89a0      	ldrh	r0, [r4, #12]
 800ac60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ac64:	f010 0301 	ands.w	r3, r0, #1
 800ac68:	d00a      	beq.n	800ac80 <__swsetup_r+0xbc>
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	60a3      	str	r3, [r4, #8]
 800ac6e:	6963      	ldr	r3, [r4, #20]
 800ac70:	425b      	negs	r3, r3
 800ac72:	61a3      	str	r3, [r4, #24]
 800ac74:	6923      	ldr	r3, [r4, #16]
 800ac76:	b943      	cbnz	r3, 800ac8a <__swsetup_r+0xc6>
 800ac78:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ac7c:	d1ba      	bne.n	800abf4 <__swsetup_r+0x30>
 800ac7e:	bd70      	pop	{r4, r5, r6, pc}
 800ac80:	0781      	lsls	r1, r0, #30
 800ac82:	bf58      	it	pl
 800ac84:	6963      	ldrpl	r3, [r4, #20]
 800ac86:	60a3      	str	r3, [r4, #8]
 800ac88:	e7f4      	b.n	800ac74 <__swsetup_r+0xb0>
 800ac8a:	2000      	movs	r0, #0
 800ac8c:	e7f7      	b.n	800ac7e <__swsetup_r+0xba>
 800ac8e:	bf00      	nop
 800ac90:	20000070 	.word	0x20000070
 800ac94:	0800b3dc 	.word	0x0800b3dc
 800ac98:	0800b3fc 	.word	0x0800b3fc
 800ac9c:	0800b3bc 	.word	0x0800b3bc

0800aca0 <__assert_func>:
 800aca0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800aca2:	4614      	mov	r4, r2
 800aca4:	461a      	mov	r2, r3
 800aca6:	4b09      	ldr	r3, [pc, #36]	; (800accc <__assert_func+0x2c>)
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	4605      	mov	r5, r0
 800acac:	68d8      	ldr	r0, [r3, #12]
 800acae:	b14c      	cbz	r4, 800acc4 <__assert_func+0x24>
 800acb0:	4b07      	ldr	r3, [pc, #28]	; (800acd0 <__assert_func+0x30>)
 800acb2:	9100      	str	r1, [sp, #0]
 800acb4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800acb8:	4906      	ldr	r1, [pc, #24]	; (800acd4 <__assert_func+0x34>)
 800acba:	462b      	mov	r3, r5
 800acbc:	f000 f8e0 	bl	800ae80 <fiprintf>
 800acc0:	f000 f9d0 	bl	800b064 <abort>
 800acc4:	4b04      	ldr	r3, [pc, #16]	; (800acd8 <__assert_func+0x38>)
 800acc6:	461c      	mov	r4, r3
 800acc8:	e7f3      	b.n	800acb2 <__assert_func+0x12>
 800acca:	bf00      	nop
 800accc:	20000070 	.word	0x20000070
 800acd0:	0800b605 	.word	0x0800b605
 800acd4:	0800b612 	.word	0x0800b612
 800acd8:	0800b640 	.word	0x0800b640

0800acdc <_close_r>:
 800acdc:	b538      	push	{r3, r4, r5, lr}
 800acde:	4d06      	ldr	r5, [pc, #24]	; (800acf8 <_close_r+0x1c>)
 800ace0:	2300      	movs	r3, #0
 800ace2:	4604      	mov	r4, r0
 800ace4:	4608      	mov	r0, r1
 800ace6:	602b      	str	r3, [r5, #0]
 800ace8:	f7f6 fe45 	bl	8001976 <_close>
 800acec:	1c43      	adds	r3, r0, #1
 800acee:	d102      	bne.n	800acf6 <_close_r+0x1a>
 800acf0:	682b      	ldr	r3, [r5, #0]
 800acf2:	b103      	cbz	r3, 800acf6 <_close_r+0x1a>
 800acf4:	6023      	str	r3, [r4, #0]
 800acf6:	bd38      	pop	{r3, r4, r5, pc}
 800acf8:	20000360 	.word	0x20000360

0800acfc <__sflush_r>:
 800acfc:	898a      	ldrh	r2, [r1, #12]
 800acfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad02:	4605      	mov	r5, r0
 800ad04:	0710      	lsls	r0, r2, #28
 800ad06:	460c      	mov	r4, r1
 800ad08:	d458      	bmi.n	800adbc <__sflush_r+0xc0>
 800ad0a:	684b      	ldr	r3, [r1, #4]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	dc05      	bgt.n	800ad1c <__sflush_r+0x20>
 800ad10:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	dc02      	bgt.n	800ad1c <__sflush_r+0x20>
 800ad16:	2000      	movs	r0, #0
 800ad18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ad1e:	2e00      	cmp	r6, #0
 800ad20:	d0f9      	beq.n	800ad16 <__sflush_r+0x1a>
 800ad22:	2300      	movs	r3, #0
 800ad24:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ad28:	682f      	ldr	r7, [r5, #0]
 800ad2a:	602b      	str	r3, [r5, #0]
 800ad2c:	d032      	beq.n	800ad94 <__sflush_r+0x98>
 800ad2e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ad30:	89a3      	ldrh	r3, [r4, #12]
 800ad32:	075a      	lsls	r2, r3, #29
 800ad34:	d505      	bpl.n	800ad42 <__sflush_r+0x46>
 800ad36:	6863      	ldr	r3, [r4, #4]
 800ad38:	1ac0      	subs	r0, r0, r3
 800ad3a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ad3c:	b10b      	cbz	r3, 800ad42 <__sflush_r+0x46>
 800ad3e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ad40:	1ac0      	subs	r0, r0, r3
 800ad42:	2300      	movs	r3, #0
 800ad44:	4602      	mov	r2, r0
 800ad46:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ad48:	6a21      	ldr	r1, [r4, #32]
 800ad4a:	4628      	mov	r0, r5
 800ad4c:	47b0      	blx	r6
 800ad4e:	1c43      	adds	r3, r0, #1
 800ad50:	89a3      	ldrh	r3, [r4, #12]
 800ad52:	d106      	bne.n	800ad62 <__sflush_r+0x66>
 800ad54:	6829      	ldr	r1, [r5, #0]
 800ad56:	291d      	cmp	r1, #29
 800ad58:	d82c      	bhi.n	800adb4 <__sflush_r+0xb8>
 800ad5a:	4a2a      	ldr	r2, [pc, #168]	; (800ae04 <__sflush_r+0x108>)
 800ad5c:	40ca      	lsrs	r2, r1
 800ad5e:	07d6      	lsls	r6, r2, #31
 800ad60:	d528      	bpl.n	800adb4 <__sflush_r+0xb8>
 800ad62:	2200      	movs	r2, #0
 800ad64:	6062      	str	r2, [r4, #4]
 800ad66:	04d9      	lsls	r1, r3, #19
 800ad68:	6922      	ldr	r2, [r4, #16]
 800ad6a:	6022      	str	r2, [r4, #0]
 800ad6c:	d504      	bpl.n	800ad78 <__sflush_r+0x7c>
 800ad6e:	1c42      	adds	r2, r0, #1
 800ad70:	d101      	bne.n	800ad76 <__sflush_r+0x7a>
 800ad72:	682b      	ldr	r3, [r5, #0]
 800ad74:	b903      	cbnz	r3, 800ad78 <__sflush_r+0x7c>
 800ad76:	6560      	str	r0, [r4, #84]	; 0x54
 800ad78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ad7a:	602f      	str	r7, [r5, #0]
 800ad7c:	2900      	cmp	r1, #0
 800ad7e:	d0ca      	beq.n	800ad16 <__sflush_r+0x1a>
 800ad80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ad84:	4299      	cmp	r1, r3
 800ad86:	d002      	beq.n	800ad8e <__sflush_r+0x92>
 800ad88:	4628      	mov	r0, r5
 800ad8a:	f7ff faa1 	bl	800a2d0 <_free_r>
 800ad8e:	2000      	movs	r0, #0
 800ad90:	6360      	str	r0, [r4, #52]	; 0x34
 800ad92:	e7c1      	b.n	800ad18 <__sflush_r+0x1c>
 800ad94:	6a21      	ldr	r1, [r4, #32]
 800ad96:	2301      	movs	r3, #1
 800ad98:	4628      	mov	r0, r5
 800ad9a:	47b0      	blx	r6
 800ad9c:	1c41      	adds	r1, r0, #1
 800ad9e:	d1c7      	bne.n	800ad30 <__sflush_r+0x34>
 800ada0:	682b      	ldr	r3, [r5, #0]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d0c4      	beq.n	800ad30 <__sflush_r+0x34>
 800ada6:	2b1d      	cmp	r3, #29
 800ada8:	d001      	beq.n	800adae <__sflush_r+0xb2>
 800adaa:	2b16      	cmp	r3, #22
 800adac:	d101      	bne.n	800adb2 <__sflush_r+0xb6>
 800adae:	602f      	str	r7, [r5, #0]
 800adb0:	e7b1      	b.n	800ad16 <__sflush_r+0x1a>
 800adb2:	89a3      	ldrh	r3, [r4, #12]
 800adb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800adb8:	81a3      	strh	r3, [r4, #12]
 800adba:	e7ad      	b.n	800ad18 <__sflush_r+0x1c>
 800adbc:	690f      	ldr	r7, [r1, #16]
 800adbe:	2f00      	cmp	r7, #0
 800adc0:	d0a9      	beq.n	800ad16 <__sflush_r+0x1a>
 800adc2:	0793      	lsls	r3, r2, #30
 800adc4:	680e      	ldr	r6, [r1, #0]
 800adc6:	bf08      	it	eq
 800adc8:	694b      	ldreq	r3, [r1, #20]
 800adca:	600f      	str	r7, [r1, #0]
 800adcc:	bf18      	it	ne
 800adce:	2300      	movne	r3, #0
 800add0:	eba6 0807 	sub.w	r8, r6, r7
 800add4:	608b      	str	r3, [r1, #8]
 800add6:	f1b8 0f00 	cmp.w	r8, #0
 800adda:	dd9c      	ble.n	800ad16 <__sflush_r+0x1a>
 800addc:	6a21      	ldr	r1, [r4, #32]
 800adde:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ade0:	4643      	mov	r3, r8
 800ade2:	463a      	mov	r2, r7
 800ade4:	4628      	mov	r0, r5
 800ade6:	47b0      	blx	r6
 800ade8:	2800      	cmp	r0, #0
 800adea:	dc06      	bgt.n	800adfa <__sflush_r+0xfe>
 800adec:	89a3      	ldrh	r3, [r4, #12]
 800adee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800adf2:	81a3      	strh	r3, [r4, #12]
 800adf4:	f04f 30ff 	mov.w	r0, #4294967295
 800adf8:	e78e      	b.n	800ad18 <__sflush_r+0x1c>
 800adfa:	4407      	add	r7, r0
 800adfc:	eba8 0800 	sub.w	r8, r8, r0
 800ae00:	e7e9      	b.n	800add6 <__sflush_r+0xda>
 800ae02:	bf00      	nop
 800ae04:	20400001 	.word	0x20400001

0800ae08 <_fflush_r>:
 800ae08:	b538      	push	{r3, r4, r5, lr}
 800ae0a:	690b      	ldr	r3, [r1, #16]
 800ae0c:	4605      	mov	r5, r0
 800ae0e:	460c      	mov	r4, r1
 800ae10:	b913      	cbnz	r3, 800ae18 <_fflush_r+0x10>
 800ae12:	2500      	movs	r5, #0
 800ae14:	4628      	mov	r0, r5
 800ae16:	bd38      	pop	{r3, r4, r5, pc}
 800ae18:	b118      	cbz	r0, 800ae22 <_fflush_r+0x1a>
 800ae1a:	6983      	ldr	r3, [r0, #24]
 800ae1c:	b90b      	cbnz	r3, 800ae22 <_fflush_r+0x1a>
 800ae1e:	f7fe f951 	bl	80090c4 <__sinit>
 800ae22:	4b14      	ldr	r3, [pc, #80]	; (800ae74 <_fflush_r+0x6c>)
 800ae24:	429c      	cmp	r4, r3
 800ae26:	d11b      	bne.n	800ae60 <_fflush_r+0x58>
 800ae28:	686c      	ldr	r4, [r5, #4]
 800ae2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d0ef      	beq.n	800ae12 <_fflush_r+0xa>
 800ae32:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ae34:	07d0      	lsls	r0, r2, #31
 800ae36:	d404      	bmi.n	800ae42 <_fflush_r+0x3a>
 800ae38:	0599      	lsls	r1, r3, #22
 800ae3a:	d402      	bmi.n	800ae42 <_fflush_r+0x3a>
 800ae3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ae3e:	f7fe fd52 	bl	80098e6 <__retarget_lock_acquire_recursive>
 800ae42:	4628      	mov	r0, r5
 800ae44:	4621      	mov	r1, r4
 800ae46:	f7ff ff59 	bl	800acfc <__sflush_r>
 800ae4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ae4c:	07da      	lsls	r2, r3, #31
 800ae4e:	4605      	mov	r5, r0
 800ae50:	d4e0      	bmi.n	800ae14 <_fflush_r+0xc>
 800ae52:	89a3      	ldrh	r3, [r4, #12]
 800ae54:	059b      	lsls	r3, r3, #22
 800ae56:	d4dd      	bmi.n	800ae14 <_fflush_r+0xc>
 800ae58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ae5a:	f7fe fd45 	bl	80098e8 <__retarget_lock_release_recursive>
 800ae5e:	e7d9      	b.n	800ae14 <_fflush_r+0xc>
 800ae60:	4b05      	ldr	r3, [pc, #20]	; (800ae78 <_fflush_r+0x70>)
 800ae62:	429c      	cmp	r4, r3
 800ae64:	d101      	bne.n	800ae6a <_fflush_r+0x62>
 800ae66:	68ac      	ldr	r4, [r5, #8]
 800ae68:	e7df      	b.n	800ae2a <_fflush_r+0x22>
 800ae6a:	4b04      	ldr	r3, [pc, #16]	; (800ae7c <_fflush_r+0x74>)
 800ae6c:	429c      	cmp	r4, r3
 800ae6e:	bf08      	it	eq
 800ae70:	68ec      	ldreq	r4, [r5, #12]
 800ae72:	e7da      	b.n	800ae2a <_fflush_r+0x22>
 800ae74:	0800b3dc 	.word	0x0800b3dc
 800ae78:	0800b3fc 	.word	0x0800b3fc
 800ae7c:	0800b3bc 	.word	0x0800b3bc

0800ae80 <fiprintf>:
 800ae80:	b40e      	push	{r1, r2, r3}
 800ae82:	b503      	push	{r0, r1, lr}
 800ae84:	4601      	mov	r1, r0
 800ae86:	ab03      	add	r3, sp, #12
 800ae88:	4805      	ldr	r0, [pc, #20]	; (800aea0 <fiprintf+0x20>)
 800ae8a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae8e:	6800      	ldr	r0, [r0, #0]
 800ae90:	9301      	str	r3, [sp, #4]
 800ae92:	f7ff fc83 	bl	800a79c <_vfiprintf_r>
 800ae96:	b002      	add	sp, #8
 800ae98:	f85d eb04 	ldr.w	lr, [sp], #4
 800ae9c:	b003      	add	sp, #12
 800ae9e:	4770      	bx	lr
 800aea0:	20000070 	.word	0x20000070

0800aea4 <_lseek_r>:
 800aea4:	b538      	push	{r3, r4, r5, lr}
 800aea6:	4d07      	ldr	r5, [pc, #28]	; (800aec4 <_lseek_r+0x20>)
 800aea8:	4604      	mov	r4, r0
 800aeaa:	4608      	mov	r0, r1
 800aeac:	4611      	mov	r1, r2
 800aeae:	2200      	movs	r2, #0
 800aeb0:	602a      	str	r2, [r5, #0]
 800aeb2:	461a      	mov	r2, r3
 800aeb4:	f7f6 fd86 	bl	80019c4 <_lseek>
 800aeb8:	1c43      	adds	r3, r0, #1
 800aeba:	d102      	bne.n	800aec2 <_lseek_r+0x1e>
 800aebc:	682b      	ldr	r3, [r5, #0]
 800aebe:	b103      	cbz	r3, 800aec2 <_lseek_r+0x1e>
 800aec0:	6023      	str	r3, [r4, #0]
 800aec2:	bd38      	pop	{r3, r4, r5, pc}
 800aec4:	20000360 	.word	0x20000360

0800aec8 <__swhatbuf_r>:
 800aec8:	b570      	push	{r4, r5, r6, lr}
 800aeca:	460e      	mov	r6, r1
 800aecc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aed0:	2900      	cmp	r1, #0
 800aed2:	b096      	sub	sp, #88	; 0x58
 800aed4:	4614      	mov	r4, r2
 800aed6:	461d      	mov	r5, r3
 800aed8:	da08      	bge.n	800aeec <__swhatbuf_r+0x24>
 800aeda:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800aede:	2200      	movs	r2, #0
 800aee0:	602a      	str	r2, [r5, #0]
 800aee2:	061a      	lsls	r2, r3, #24
 800aee4:	d410      	bmi.n	800af08 <__swhatbuf_r+0x40>
 800aee6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aeea:	e00e      	b.n	800af0a <__swhatbuf_r+0x42>
 800aeec:	466a      	mov	r2, sp
 800aeee:	f000 f8c1 	bl	800b074 <_fstat_r>
 800aef2:	2800      	cmp	r0, #0
 800aef4:	dbf1      	blt.n	800aeda <__swhatbuf_r+0x12>
 800aef6:	9a01      	ldr	r2, [sp, #4]
 800aef8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800aefc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800af00:	425a      	negs	r2, r3
 800af02:	415a      	adcs	r2, r3
 800af04:	602a      	str	r2, [r5, #0]
 800af06:	e7ee      	b.n	800aee6 <__swhatbuf_r+0x1e>
 800af08:	2340      	movs	r3, #64	; 0x40
 800af0a:	2000      	movs	r0, #0
 800af0c:	6023      	str	r3, [r4, #0]
 800af0e:	b016      	add	sp, #88	; 0x58
 800af10:	bd70      	pop	{r4, r5, r6, pc}
	...

0800af14 <__smakebuf_r>:
 800af14:	898b      	ldrh	r3, [r1, #12]
 800af16:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800af18:	079d      	lsls	r5, r3, #30
 800af1a:	4606      	mov	r6, r0
 800af1c:	460c      	mov	r4, r1
 800af1e:	d507      	bpl.n	800af30 <__smakebuf_r+0x1c>
 800af20:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800af24:	6023      	str	r3, [r4, #0]
 800af26:	6123      	str	r3, [r4, #16]
 800af28:	2301      	movs	r3, #1
 800af2a:	6163      	str	r3, [r4, #20]
 800af2c:	b002      	add	sp, #8
 800af2e:	bd70      	pop	{r4, r5, r6, pc}
 800af30:	ab01      	add	r3, sp, #4
 800af32:	466a      	mov	r2, sp
 800af34:	f7ff ffc8 	bl	800aec8 <__swhatbuf_r>
 800af38:	9900      	ldr	r1, [sp, #0]
 800af3a:	4605      	mov	r5, r0
 800af3c:	4630      	mov	r0, r6
 800af3e:	f7ff fa33 	bl	800a3a8 <_malloc_r>
 800af42:	b948      	cbnz	r0, 800af58 <__smakebuf_r+0x44>
 800af44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af48:	059a      	lsls	r2, r3, #22
 800af4a:	d4ef      	bmi.n	800af2c <__smakebuf_r+0x18>
 800af4c:	f023 0303 	bic.w	r3, r3, #3
 800af50:	f043 0302 	orr.w	r3, r3, #2
 800af54:	81a3      	strh	r3, [r4, #12]
 800af56:	e7e3      	b.n	800af20 <__smakebuf_r+0xc>
 800af58:	4b0d      	ldr	r3, [pc, #52]	; (800af90 <__smakebuf_r+0x7c>)
 800af5a:	62b3      	str	r3, [r6, #40]	; 0x28
 800af5c:	89a3      	ldrh	r3, [r4, #12]
 800af5e:	6020      	str	r0, [r4, #0]
 800af60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af64:	81a3      	strh	r3, [r4, #12]
 800af66:	9b00      	ldr	r3, [sp, #0]
 800af68:	6163      	str	r3, [r4, #20]
 800af6a:	9b01      	ldr	r3, [sp, #4]
 800af6c:	6120      	str	r0, [r4, #16]
 800af6e:	b15b      	cbz	r3, 800af88 <__smakebuf_r+0x74>
 800af70:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800af74:	4630      	mov	r0, r6
 800af76:	f000 f88f 	bl	800b098 <_isatty_r>
 800af7a:	b128      	cbz	r0, 800af88 <__smakebuf_r+0x74>
 800af7c:	89a3      	ldrh	r3, [r4, #12]
 800af7e:	f023 0303 	bic.w	r3, r3, #3
 800af82:	f043 0301 	orr.w	r3, r3, #1
 800af86:	81a3      	strh	r3, [r4, #12]
 800af88:	89a0      	ldrh	r0, [r4, #12]
 800af8a:	4305      	orrs	r5, r0
 800af8c:	81a5      	strh	r5, [r4, #12]
 800af8e:	e7cd      	b.n	800af2c <__smakebuf_r+0x18>
 800af90:	0800905d 	.word	0x0800905d

0800af94 <memmove>:
 800af94:	4288      	cmp	r0, r1
 800af96:	b510      	push	{r4, lr}
 800af98:	eb01 0402 	add.w	r4, r1, r2
 800af9c:	d902      	bls.n	800afa4 <memmove+0x10>
 800af9e:	4284      	cmp	r4, r0
 800afa0:	4623      	mov	r3, r4
 800afa2:	d807      	bhi.n	800afb4 <memmove+0x20>
 800afa4:	1e43      	subs	r3, r0, #1
 800afa6:	42a1      	cmp	r1, r4
 800afa8:	d008      	beq.n	800afbc <memmove+0x28>
 800afaa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800afae:	f803 2f01 	strb.w	r2, [r3, #1]!
 800afb2:	e7f8      	b.n	800afa6 <memmove+0x12>
 800afb4:	4402      	add	r2, r0
 800afb6:	4601      	mov	r1, r0
 800afb8:	428a      	cmp	r2, r1
 800afba:	d100      	bne.n	800afbe <memmove+0x2a>
 800afbc:	bd10      	pop	{r4, pc}
 800afbe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800afc2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800afc6:	e7f7      	b.n	800afb8 <memmove+0x24>

0800afc8 <__malloc_lock>:
 800afc8:	4801      	ldr	r0, [pc, #4]	; (800afd0 <__malloc_lock+0x8>)
 800afca:	f7fe bc8c 	b.w	80098e6 <__retarget_lock_acquire_recursive>
 800afce:	bf00      	nop
 800afd0:	20000354 	.word	0x20000354

0800afd4 <__malloc_unlock>:
 800afd4:	4801      	ldr	r0, [pc, #4]	; (800afdc <__malloc_unlock+0x8>)
 800afd6:	f7fe bc87 	b.w	80098e8 <__retarget_lock_release_recursive>
 800afda:	bf00      	nop
 800afdc:	20000354 	.word	0x20000354

0800afe0 <_realloc_r>:
 800afe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afe4:	4680      	mov	r8, r0
 800afe6:	4614      	mov	r4, r2
 800afe8:	460e      	mov	r6, r1
 800afea:	b921      	cbnz	r1, 800aff6 <_realloc_r+0x16>
 800afec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aff0:	4611      	mov	r1, r2
 800aff2:	f7ff b9d9 	b.w	800a3a8 <_malloc_r>
 800aff6:	b92a      	cbnz	r2, 800b004 <_realloc_r+0x24>
 800aff8:	f7ff f96a 	bl	800a2d0 <_free_r>
 800affc:	4625      	mov	r5, r4
 800affe:	4628      	mov	r0, r5
 800b000:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b004:	f000 f858 	bl	800b0b8 <_malloc_usable_size_r>
 800b008:	4284      	cmp	r4, r0
 800b00a:	4607      	mov	r7, r0
 800b00c:	d802      	bhi.n	800b014 <_realloc_r+0x34>
 800b00e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b012:	d812      	bhi.n	800b03a <_realloc_r+0x5a>
 800b014:	4621      	mov	r1, r4
 800b016:	4640      	mov	r0, r8
 800b018:	f7ff f9c6 	bl	800a3a8 <_malloc_r>
 800b01c:	4605      	mov	r5, r0
 800b01e:	2800      	cmp	r0, #0
 800b020:	d0ed      	beq.n	800affe <_realloc_r+0x1e>
 800b022:	42bc      	cmp	r4, r7
 800b024:	4622      	mov	r2, r4
 800b026:	4631      	mov	r1, r6
 800b028:	bf28      	it	cs
 800b02a:	463a      	movcs	r2, r7
 800b02c:	f7fb fbfe 	bl	800682c <memcpy>
 800b030:	4631      	mov	r1, r6
 800b032:	4640      	mov	r0, r8
 800b034:	f7ff f94c 	bl	800a2d0 <_free_r>
 800b038:	e7e1      	b.n	800affe <_realloc_r+0x1e>
 800b03a:	4635      	mov	r5, r6
 800b03c:	e7df      	b.n	800affe <_realloc_r+0x1e>
	...

0800b040 <_read_r>:
 800b040:	b538      	push	{r3, r4, r5, lr}
 800b042:	4d07      	ldr	r5, [pc, #28]	; (800b060 <_read_r+0x20>)
 800b044:	4604      	mov	r4, r0
 800b046:	4608      	mov	r0, r1
 800b048:	4611      	mov	r1, r2
 800b04a:	2200      	movs	r2, #0
 800b04c:	602a      	str	r2, [r5, #0]
 800b04e:	461a      	mov	r2, r3
 800b050:	f7f6 fc74 	bl	800193c <_read>
 800b054:	1c43      	adds	r3, r0, #1
 800b056:	d102      	bne.n	800b05e <_read_r+0x1e>
 800b058:	682b      	ldr	r3, [r5, #0]
 800b05a:	b103      	cbz	r3, 800b05e <_read_r+0x1e>
 800b05c:	6023      	str	r3, [r4, #0]
 800b05e:	bd38      	pop	{r3, r4, r5, pc}
 800b060:	20000360 	.word	0x20000360

0800b064 <abort>:
 800b064:	b508      	push	{r3, lr}
 800b066:	2006      	movs	r0, #6
 800b068:	f000 f856 	bl	800b118 <raise>
 800b06c:	2001      	movs	r0, #1
 800b06e:	f7f6 fc5b 	bl	8001928 <_exit>
	...

0800b074 <_fstat_r>:
 800b074:	b538      	push	{r3, r4, r5, lr}
 800b076:	4d07      	ldr	r5, [pc, #28]	; (800b094 <_fstat_r+0x20>)
 800b078:	2300      	movs	r3, #0
 800b07a:	4604      	mov	r4, r0
 800b07c:	4608      	mov	r0, r1
 800b07e:	4611      	mov	r1, r2
 800b080:	602b      	str	r3, [r5, #0]
 800b082:	f7f6 fc84 	bl	800198e <_fstat>
 800b086:	1c43      	adds	r3, r0, #1
 800b088:	d102      	bne.n	800b090 <_fstat_r+0x1c>
 800b08a:	682b      	ldr	r3, [r5, #0]
 800b08c:	b103      	cbz	r3, 800b090 <_fstat_r+0x1c>
 800b08e:	6023      	str	r3, [r4, #0]
 800b090:	bd38      	pop	{r3, r4, r5, pc}
 800b092:	bf00      	nop
 800b094:	20000360 	.word	0x20000360

0800b098 <_isatty_r>:
 800b098:	b538      	push	{r3, r4, r5, lr}
 800b09a:	4d06      	ldr	r5, [pc, #24]	; (800b0b4 <_isatty_r+0x1c>)
 800b09c:	2300      	movs	r3, #0
 800b09e:	4604      	mov	r4, r0
 800b0a0:	4608      	mov	r0, r1
 800b0a2:	602b      	str	r3, [r5, #0]
 800b0a4:	f7f6 fc83 	bl	80019ae <_isatty>
 800b0a8:	1c43      	adds	r3, r0, #1
 800b0aa:	d102      	bne.n	800b0b2 <_isatty_r+0x1a>
 800b0ac:	682b      	ldr	r3, [r5, #0]
 800b0ae:	b103      	cbz	r3, 800b0b2 <_isatty_r+0x1a>
 800b0b0:	6023      	str	r3, [r4, #0]
 800b0b2:	bd38      	pop	{r3, r4, r5, pc}
 800b0b4:	20000360 	.word	0x20000360

0800b0b8 <_malloc_usable_size_r>:
 800b0b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b0bc:	1f18      	subs	r0, r3, #4
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	bfbc      	itt	lt
 800b0c2:	580b      	ldrlt	r3, [r1, r0]
 800b0c4:	18c0      	addlt	r0, r0, r3
 800b0c6:	4770      	bx	lr

0800b0c8 <_raise_r>:
 800b0c8:	291f      	cmp	r1, #31
 800b0ca:	b538      	push	{r3, r4, r5, lr}
 800b0cc:	4604      	mov	r4, r0
 800b0ce:	460d      	mov	r5, r1
 800b0d0:	d904      	bls.n	800b0dc <_raise_r+0x14>
 800b0d2:	2316      	movs	r3, #22
 800b0d4:	6003      	str	r3, [r0, #0]
 800b0d6:	f04f 30ff 	mov.w	r0, #4294967295
 800b0da:	bd38      	pop	{r3, r4, r5, pc}
 800b0dc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b0de:	b112      	cbz	r2, 800b0e6 <_raise_r+0x1e>
 800b0e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b0e4:	b94b      	cbnz	r3, 800b0fa <_raise_r+0x32>
 800b0e6:	4620      	mov	r0, r4
 800b0e8:	f000 f830 	bl	800b14c <_getpid_r>
 800b0ec:	462a      	mov	r2, r5
 800b0ee:	4601      	mov	r1, r0
 800b0f0:	4620      	mov	r0, r4
 800b0f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b0f6:	f000 b817 	b.w	800b128 <_kill_r>
 800b0fa:	2b01      	cmp	r3, #1
 800b0fc:	d00a      	beq.n	800b114 <_raise_r+0x4c>
 800b0fe:	1c59      	adds	r1, r3, #1
 800b100:	d103      	bne.n	800b10a <_raise_r+0x42>
 800b102:	2316      	movs	r3, #22
 800b104:	6003      	str	r3, [r0, #0]
 800b106:	2001      	movs	r0, #1
 800b108:	e7e7      	b.n	800b0da <_raise_r+0x12>
 800b10a:	2400      	movs	r4, #0
 800b10c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b110:	4628      	mov	r0, r5
 800b112:	4798      	blx	r3
 800b114:	2000      	movs	r0, #0
 800b116:	e7e0      	b.n	800b0da <_raise_r+0x12>

0800b118 <raise>:
 800b118:	4b02      	ldr	r3, [pc, #8]	; (800b124 <raise+0xc>)
 800b11a:	4601      	mov	r1, r0
 800b11c:	6818      	ldr	r0, [r3, #0]
 800b11e:	f7ff bfd3 	b.w	800b0c8 <_raise_r>
 800b122:	bf00      	nop
 800b124:	20000070 	.word	0x20000070

0800b128 <_kill_r>:
 800b128:	b538      	push	{r3, r4, r5, lr}
 800b12a:	4d07      	ldr	r5, [pc, #28]	; (800b148 <_kill_r+0x20>)
 800b12c:	2300      	movs	r3, #0
 800b12e:	4604      	mov	r4, r0
 800b130:	4608      	mov	r0, r1
 800b132:	4611      	mov	r1, r2
 800b134:	602b      	str	r3, [r5, #0]
 800b136:	f7f6 fbe7 	bl	8001908 <_kill>
 800b13a:	1c43      	adds	r3, r0, #1
 800b13c:	d102      	bne.n	800b144 <_kill_r+0x1c>
 800b13e:	682b      	ldr	r3, [r5, #0]
 800b140:	b103      	cbz	r3, 800b144 <_kill_r+0x1c>
 800b142:	6023      	str	r3, [r4, #0]
 800b144:	bd38      	pop	{r3, r4, r5, pc}
 800b146:	bf00      	nop
 800b148:	20000360 	.word	0x20000360

0800b14c <_getpid_r>:
 800b14c:	f7f6 bbd4 	b.w	80018f8 <_getpid>

0800b150 <_init>:
 800b150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b152:	bf00      	nop
 800b154:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b156:	bc08      	pop	{r3}
 800b158:	469e      	mov	lr, r3
 800b15a:	4770      	bx	lr

0800b15c <_fini>:
 800b15c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b15e:	bf00      	nop
 800b160:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b162:	bc08      	pop	{r3}
 800b164:	469e      	mov	lr, r3
 800b166:	4770      	bx	lr
