
Input_Capture.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006424  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  080065d4  080065d4  000165d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080066dc  080066dc  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080066dc  080066dc  000166dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080066e4  080066e4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080066e4  080066e4  000166e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080066e8  080066e8  000166e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080066ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000178  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001e8  200001e8  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   000101ac  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000251c  00000000  00000000  0003024c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000df0  00000000  00000000  00032768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ce8  00000000  00000000  00033558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024d61  00000000  00000000  00034240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010c3a  00000000  00000000  00058fa1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dbc32  00000000  00000000  00069bdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014580d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004104  00000000  00000000  00145860  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080065bc 	.word	0x080065bc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	080065bc 	.word	0x080065bc

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800059a:	2300      	movs	r3, #0
 800059c:	607b      	str	r3, [r7, #4]
 800059e:	4b0c      	ldr	r3, [pc, #48]	; (80005d0 <MX_DMA_Init+0x3c>)
 80005a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a2:	4a0b      	ldr	r2, [pc, #44]	; (80005d0 <MX_DMA_Init+0x3c>)
 80005a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80005a8:	6313      	str	r3, [r2, #48]	; 0x30
 80005aa:	4b09      	ldr	r3, [pc, #36]	; (80005d0 <MX_DMA_Init+0x3c>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80005b2:	607b      	str	r3, [r7, #4]
 80005b4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80005b6:	2200      	movs	r2, #0
 80005b8:	2100      	movs	r1, #0
 80005ba:	200f      	movs	r0, #15
 80005bc:	f000 ffff 	bl	80015be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80005c0:	200f      	movs	r0, #15
 80005c2:	f001 f818 	bl	80015f6 <HAL_NVIC_EnableIRQ>

}
 80005c6:	bf00      	nop
 80005c8:	3708      	adds	r7, #8
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	40023800 	.word	0x40023800

080005d4 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b08c      	sub	sp, #48	; 0x30
 80005d8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005da:	f107 031c 	add.w	r3, r7, #28
 80005de:	2200      	movs	r2, #0
 80005e0:	601a      	str	r2, [r3, #0]
 80005e2:	605a      	str	r2, [r3, #4]
 80005e4:	609a      	str	r2, [r3, #8]
 80005e6:	60da      	str	r2, [r3, #12]
 80005e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ea:	2300      	movs	r3, #0
 80005ec:	61bb      	str	r3, [r7, #24]
 80005ee:	4b7c      	ldr	r3, [pc, #496]	; (80007e0 <MX_GPIO_Init+0x20c>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f2:	4a7b      	ldr	r2, [pc, #492]	; (80007e0 <MX_GPIO_Init+0x20c>)
 80005f4:	f043 0304 	orr.w	r3, r3, #4
 80005f8:	6313      	str	r3, [r2, #48]	; 0x30
 80005fa:	4b79      	ldr	r3, [pc, #484]	; (80007e0 <MX_GPIO_Init+0x20c>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	f003 0304 	and.w	r3, r3, #4
 8000602:	61bb      	str	r3, [r7, #24]
 8000604:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000606:	2300      	movs	r3, #0
 8000608:	617b      	str	r3, [r7, #20]
 800060a:	4b75      	ldr	r3, [pc, #468]	; (80007e0 <MX_GPIO_Init+0x20c>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060e:	4a74      	ldr	r2, [pc, #464]	; (80007e0 <MX_GPIO_Init+0x20c>)
 8000610:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000614:	6313      	str	r3, [r2, #48]	; 0x30
 8000616:	4b72      	ldr	r3, [pc, #456]	; (80007e0 <MX_GPIO_Init+0x20c>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800061e:	617b      	str	r3, [r7, #20]
 8000620:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000622:	2300      	movs	r3, #0
 8000624:	613b      	str	r3, [r7, #16]
 8000626:	4b6e      	ldr	r3, [pc, #440]	; (80007e0 <MX_GPIO_Init+0x20c>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062a:	4a6d      	ldr	r2, [pc, #436]	; (80007e0 <MX_GPIO_Init+0x20c>)
 800062c:	f043 0301 	orr.w	r3, r3, #1
 8000630:	6313      	str	r3, [r2, #48]	; 0x30
 8000632:	4b6b      	ldr	r3, [pc, #428]	; (80007e0 <MX_GPIO_Init+0x20c>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000636:	f003 0301 	and.w	r3, r3, #1
 800063a:	613b      	str	r3, [r7, #16]
 800063c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800063e:	2300      	movs	r3, #0
 8000640:	60fb      	str	r3, [r7, #12]
 8000642:	4b67      	ldr	r3, [pc, #412]	; (80007e0 <MX_GPIO_Init+0x20c>)
 8000644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000646:	4a66      	ldr	r2, [pc, #408]	; (80007e0 <MX_GPIO_Init+0x20c>)
 8000648:	f043 0302 	orr.w	r3, r3, #2
 800064c:	6313      	str	r3, [r2, #48]	; 0x30
 800064e:	4b64      	ldr	r3, [pc, #400]	; (80007e0 <MX_GPIO_Init+0x20c>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000652:	f003 0302 	and.w	r3, r3, #2
 8000656:	60fb      	str	r3, [r7, #12]
 8000658:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800065a:	2300      	movs	r3, #0
 800065c:	60bb      	str	r3, [r7, #8]
 800065e:	4b60      	ldr	r3, [pc, #384]	; (80007e0 <MX_GPIO_Init+0x20c>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000662:	4a5f      	ldr	r2, [pc, #380]	; (80007e0 <MX_GPIO_Init+0x20c>)
 8000664:	f043 0308 	orr.w	r3, r3, #8
 8000668:	6313      	str	r3, [r2, #48]	; 0x30
 800066a:	4b5d      	ldr	r3, [pc, #372]	; (80007e0 <MX_GPIO_Init+0x20c>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066e:	f003 0308 	and.w	r3, r3, #8
 8000672:	60bb      	str	r3, [r7, #8]
 8000674:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000676:	2300      	movs	r3, #0
 8000678:	607b      	str	r3, [r7, #4]
 800067a:	4b59      	ldr	r3, [pc, #356]	; (80007e0 <MX_GPIO_Init+0x20c>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067e:	4a58      	ldr	r2, [pc, #352]	; (80007e0 <MX_GPIO_Init+0x20c>)
 8000680:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000684:	6313      	str	r3, [r2, #48]	; 0x30
 8000686:	4b56      	ldr	r3, [pc, #344]	; (80007e0 <MX_GPIO_Init+0x20c>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800068e:	607b      	str	r3, [r7, #4]
 8000690:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|TRIGGER_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000692:	2200      	movs	r2, #0
 8000694:	f244 01c1 	movw	r1, #16577	; 0x40c1
 8000698:	4852      	ldr	r0, [pc, #328]	; (80007e4 <MX_GPIO_Init+0x210>)
 800069a:	f001 fd75 	bl	8002188 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800069e:	2200      	movs	r2, #0
 80006a0:	2140      	movs	r1, #64	; 0x40
 80006a2:	4851      	ldr	r0, [pc, #324]	; (80007e8 <MX_GPIO_Init+0x214>)
 80006a4:	f001 fd70 	bl	8002188 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80006a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006ae:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80006b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b4:	2300      	movs	r3, #0
 80006b6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80006b8:	f107 031c 	add.w	r3, r7, #28
 80006bc:	4619      	mov	r1, r3
 80006be:	484b      	ldr	r0, [pc, #300]	; (80007ec <MX_GPIO_Init+0x218>)
 80006c0:	f001 fbb6 	bl	8001e30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80006c4:	2332      	movs	r3, #50	; 0x32
 80006c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006c8:	2302      	movs	r3, #2
 80006ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006cc:	2300      	movs	r3, #0
 80006ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006d0:	2303      	movs	r3, #3
 80006d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006d4:	230b      	movs	r3, #11
 80006d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006d8:	f107 031c 	add.w	r3, r7, #28
 80006dc:	4619      	mov	r1, r3
 80006de:	4843      	ldr	r0, [pc, #268]	; (80007ec <MX_GPIO_Init+0x218>)
 80006e0:	f001 fba6 	bl	8001e30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80006e4:	2386      	movs	r3, #134	; 0x86
 80006e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006e8:	2302      	movs	r3, #2
 80006ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ec:	2300      	movs	r3, #0
 80006ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006f0:	2303      	movs	r3, #3
 80006f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006f4:	230b      	movs	r3, #11
 80006f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f8:	f107 031c 	add.w	r3, r7, #28
 80006fc:	4619      	mov	r1, r3
 80006fe:	483c      	ldr	r0, [pc, #240]	; (80007f0 <MX_GPIO_Init+0x21c>)
 8000700:	f001 fb96 	bl	8001e30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|TRIGGER_Pin|LD2_Pin;
 8000704:	f244 03c1 	movw	r3, #16577	; 0x40c1
 8000708:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800070a:	2301      	movs	r3, #1
 800070c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070e:	2300      	movs	r3, #0
 8000710:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000712:	2300      	movs	r3, #0
 8000714:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000716:	f107 031c 	add.w	r3, r7, #28
 800071a:	4619      	mov	r1, r3
 800071c:	4831      	ldr	r0, [pc, #196]	; (80007e4 <MX_GPIO_Init+0x210>)
 800071e:	f001 fb87 	bl	8001e30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000722:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000726:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000728:	2302      	movs	r3, #2
 800072a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072c:	2300      	movs	r3, #0
 800072e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000730:	2303      	movs	r3, #3
 8000732:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000734:	230b      	movs	r3, #11
 8000736:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000738:	f107 031c 	add.w	r3, r7, #28
 800073c:	4619      	mov	r1, r3
 800073e:	4829      	ldr	r0, [pc, #164]	; (80007e4 <MX_GPIO_Init+0x210>)
 8000740:	f001 fb76 	bl	8001e30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000744:	2340      	movs	r3, #64	; 0x40
 8000746:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000748:	2301      	movs	r3, #1
 800074a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074c:	2300      	movs	r3, #0
 800074e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000750:	2300      	movs	r3, #0
 8000752:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000754:	f107 031c 	add.w	r3, r7, #28
 8000758:	4619      	mov	r1, r3
 800075a:	4823      	ldr	r0, [pc, #140]	; (80007e8 <MX_GPIO_Init+0x214>)
 800075c:	f001 fb68 	bl	8001e30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000760:	2380      	movs	r3, #128	; 0x80
 8000762:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000764:	2300      	movs	r3, #0
 8000766:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000768:	2300      	movs	r3, #0
 800076a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800076c:	f107 031c 	add.w	r3, r7, #28
 8000770:	4619      	mov	r1, r3
 8000772:	481d      	ldr	r0, [pc, #116]	; (80007e8 <MX_GPIO_Init+0x214>)
 8000774:	f001 fb5c 	bl	8001e30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000778:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800077c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800077e:	2302      	movs	r3, #2
 8000780:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000782:	2300      	movs	r3, #0
 8000784:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000786:	2303      	movs	r3, #3
 8000788:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800078a:	230a      	movs	r3, #10
 800078c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800078e:	f107 031c 	add.w	r3, r7, #28
 8000792:	4619      	mov	r1, r3
 8000794:	4816      	ldr	r0, [pc, #88]	; (80007f0 <MX_GPIO_Init+0x21c>)
 8000796:	f001 fb4b 	bl	8001e30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800079a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800079e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007a0:	2300      	movs	r3, #0
 80007a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a4:	2300      	movs	r3, #0
 80007a6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80007a8:	f107 031c 	add.w	r3, r7, #28
 80007ac:	4619      	mov	r1, r3
 80007ae:	4810      	ldr	r0, [pc, #64]	; (80007f0 <MX_GPIO_Init+0x21c>)
 80007b0:	f001 fb3e 	bl	8001e30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80007b4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80007b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ba:	2302      	movs	r3, #2
 80007bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007be:	2300      	movs	r3, #0
 80007c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007c2:	2303      	movs	r3, #3
 80007c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007c6:	230b      	movs	r3, #11
 80007c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007ca:	f107 031c 	add.w	r3, r7, #28
 80007ce:	4619      	mov	r1, r3
 80007d0:	4805      	ldr	r0, [pc, #20]	; (80007e8 <MX_GPIO_Init+0x214>)
 80007d2:	f001 fb2d 	bl	8001e30 <HAL_GPIO_Init>

}
 80007d6:	bf00      	nop
 80007d8:	3730      	adds	r7, #48	; 0x30
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	40023800 	.word	0x40023800
 80007e4:	40020400 	.word	0x40020400
 80007e8:	40021800 	.word	0x40021800
 80007ec:	40020800 	.word	0x40020800
 80007f0:	40020000 	.word	0x40020000

080007f4 <_write>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
int _write(int file, char* p, int len)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b084      	sub	sp, #16
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	60f8      	str	r0, [r7, #12]
 80007fc:	60b9      	str	r1, [r7, #8]
 80007fe:	607a      	str	r2, [r7, #4]
	if(HAL_UART_Transmit(&huart3, (uint8_t *)p, len, 10) == HAL_OK) return len;
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	b29a      	uxth	r2, r3
 8000804:	230a      	movs	r3, #10
 8000806:	68b9      	ldr	r1, [r7, #8]
 8000808:	4806      	ldr	r0, [pc, #24]	; (8000824 <_write+0x30>)
 800080a:	f003 feda 	bl	80045c2 <HAL_UART_Transmit>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d101      	bne.n	8000818 <_write+0x24>
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	e000      	b.n	800081a <_write+0x26>
	else return 0;
 8000818:	2300      	movs	r3, #0
}
 800081a:	4618      	mov	r0, r3
 800081c:	3710      	adds	r7, #16
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	20000190 	.word	0x20000190

08000828 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000828:	b590      	push	{r4, r7, lr}
 800082a:	b085      	sub	sp, #20
 800082c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800082e:	f000 fd55 	bl	80012dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000832:	f000 f851 	bl	80008d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000836:	f7ff fecd 	bl	80005d4 <MX_GPIO_Init>
  MX_DMA_Init();
 800083a:	f7ff feab 	bl	8000594 <MX_DMA_Init>
  MX_TIM3_Init();
 800083e:	f000 fae1 	bl	8000e04 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000842:	f000 fb4f 	bl	8000ee4 <MX_TIM4_Init>
  MX_USART3_UART_Init();
 8000846:	f000 fca5 	bl	8001194 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  DWT_Delay_Init();
 800084a:	f000 f991 	bl	8000b70 <DWT_Delay_Init>
  HAL_TIM_Base_Start_IT(&htim3);
 800084e:	481a      	ldr	r0, [pc, #104]	; (80008b8 <main+0x90>)
 8000850:	f002 f9ec 	bl	8002c2c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);	// Sonar
 8000854:	4819      	ldr	r0, [pc, #100]	; (80008bc <main+0x94>)
 8000856:	f002 f9e9 	bl	8002c2c <HAL_TIM_Base_Start_IT>
  //HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);

  HAL_TIM_OC_Start_IT(&htim4, TIM_CHANNEL_1);		// Sonar
 800085a:	2100      	movs	r1, #0
 800085c:	4817      	ldr	r0, [pc, #92]	; (80008bc <main+0x94>)
 800085e:	f002 faaf 	bl	8002dc0 <HAL_TIM_OC_Start_IT>

  //htim3.State = HAL_TIM_STATE_READY;
  HAL_TIM_IC_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t *)capture1, 2);
 8000862:	2302      	movs	r3, #2
 8000864:	4a16      	ldr	r2, [pc, #88]	; (80008c0 <main+0x98>)
 8000866:	2100      	movs	r1, #0
 8000868:	4813      	ldr	r0, [pc, #76]	; (80008b8 <main+0x90>)
 800086a:	f002 fc19 	bl	80030a0 <HAL_TIM_IC_Start_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf("start this program \r\n");
 800086e:	4815      	ldr	r0, [pc, #84]	; (80008c4 <main+0x9c>)
 8000870:	f004 ff26 	bl	80056c0 <puts>
  HAL_Delay(1000);
 8000874:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000878:	f000 fda2 	bl	80013c0 <HAL_Delay>
  while (1)
  {
	 HAL_Delay(100);
 800087c:	2064      	movs	r0, #100	; 0x64
 800087e:	f000 fd9f 	bl	80013c0 <HAL_Delay>
	 printf("%lx %x %5d-%5d DMAWidth : %5d => DMAdistance : %4d cm\r\n",TIM3->CCER & TIM_CCER_CC1P, 0x01 << 1 ,capture1[0], capture1[1], DMAwidth, DMAdistance);
 8000882:	4b11      	ldr	r3, [pc, #68]	; (80008c8 <main+0xa0>)
 8000884:	6a1b      	ldr	r3, [r3, #32]
 8000886:	f003 0102 	and.w	r1, r3, #2
 800088a:	4b0d      	ldr	r3, [pc, #52]	; (80008c0 <main+0x98>)
 800088c:	881b      	ldrh	r3, [r3, #0]
 800088e:	b29b      	uxth	r3, r3
 8000890:	461c      	mov	r4, r3
 8000892:	4b0b      	ldr	r3, [pc, #44]	; (80008c0 <main+0x98>)
 8000894:	885b      	ldrh	r3, [r3, #2]
 8000896:	b29b      	uxth	r3, r3
 8000898:	461a      	mov	r2, r3
 800089a:	4b0c      	ldr	r3, [pc, #48]	; (80008cc <main+0xa4>)
 800089c:	881b      	ldrh	r3, [r3, #0]
 800089e:	4618      	mov	r0, r3
 80008a0:	4b0b      	ldr	r3, [pc, #44]	; (80008d0 <main+0xa8>)
 80008a2:	881b      	ldrh	r3, [r3, #0]
 80008a4:	9302      	str	r3, [sp, #8]
 80008a6:	9001      	str	r0, [sp, #4]
 80008a8:	9200      	str	r2, [sp, #0]
 80008aa:	4623      	mov	r3, r4
 80008ac:	2202      	movs	r2, #2
 80008ae:	4809      	ldr	r0, [pc, #36]	; (80008d4 <main+0xac>)
 80008b0:	f004 fe80 	bl	80055b4 <iprintf>
	 HAL_Delay(100);
 80008b4:	e7e2      	b.n	800087c <main+0x54>
 80008b6:	bf00      	nop
 80008b8:	200000a0 	.word	0x200000a0
 80008bc:	200000e8 	.word	0x200000e8
 80008c0:	2000008c 	.word	0x2000008c
 80008c4:	080065d4 	.word	0x080065d4
 80008c8:	40000400 	.word	0x40000400
 80008cc:	20000094 	.word	0x20000094
 80008d0:	20000096 	.word	0x20000096
 80008d4:	080065ec 	.word	0x080065ec

080008d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b094      	sub	sp, #80	; 0x50
 80008dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008de:	f107 0320 	add.w	r3, r7, #32
 80008e2:	2230      	movs	r2, #48	; 0x30
 80008e4:	2100      	movs	r1, #0
 80008e6:	4618      	mov	r0, r3
 80008e8:	f004 fe5c 	bl	80055a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008ec:	f107 030c 	add.w	r3, r7, #12
 80008f0:	2200      	movs	r2, #0
 80008f2:	601a      	str	r2, [r3, #0]
 80008f4:	605a      	str	r2, [r3, #4]
 80008f6:	609a      	str	r2, [r3, #8]
 80008f8:	60da      	str	r2, [r3, #12]
 80008fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008fc:	2300      	movs	r3, #0
 80008fe:	60bb      	str	r3, [r7, #8]
 8000900:	4b2b      	ldr	r3, [pc, #172]	; (80009b0 <SystemClock_Config+0xd8>)
 8000902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000904:	4a2a      	ldr	r2, [pc, #168]	; (80009b0 <SystemClock_Config+0xd8>)
 8000906:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800090a:	6413      	str	r3, [r2, #64]	; 0x40
 800090c:	4b28      	ldr	r3, [pc, #160]	; (80009b0 <SystemClock_Config+0xd8>)
 800090e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000910:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000914:	60bb      	str	r3, [r7, #8]
 8000916:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000918:	2300      	movs	r3, #0
 800091a:	607b      	str	r3, [r7, #4]
 800091c:	4b25      	ldr	r3, [pc, #148]	; (80009b4 <SystemClock_Config+0xdc>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4a24      	ldr	r2, [pc, #144]	; (80009b4 <SystemClock_Config+0xdc>)
 8000922:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000926:	6013      	str	r3, [r2, #0]
 8000928:	4b22      	ldr	r3, [pc, #136]	; (80009b4 <SystemClock_Config+0xdc>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000930:	607b      	str	r3, [r7, #4]
 8000932:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000934:	2301      	movs	r3, #1
 8000936:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000938:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800093c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800093e:	2302      	movs	r3, #2
 8000940:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000942:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000946:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000948:	2304      	movs	r3, #4
 800094a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 800094c:	23b4      	movs	r3, #180	; 0xb4
 800094e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000950:	2302      	movs	r3, #2
 8000952:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000954:	2304      	movs	r3, #4
 8000956:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000958:	f107 0320 	add.w	r3, r7, #32
 800095c:	4618      	mov	r0, r3
 800095e:	f001 fc7d 	bl	800225c <HAL_RCC_OscConfig>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000968:	f000 f932 	bl	8000bd0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800096c:	f001 fc26 	bl	80021bc <HAL_PWREx_EnableOverDrive>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000976:	f000 f92b 	bl	8000bd0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800097a:	230f      	movs	r3, #15
 800097c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800097e:	2302      	movs	r3, #2
 8000980:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000982:	2300      	movs	r3, #0
 8000984:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000986:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800098a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800098c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000990:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000992:	f107 030c 	add.w	r3, r7, #12
 8000996:	2105      	movs	r1, #5
 8000998:	4618      	mov	r0, r3
 800099a:	f001 fed7 	bl	800274c <HAL_RCC_ClockConfig>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80009a4:	f000 f914 	bl	8000bd0 <Error_Handler>
  }
}
 80009a8:	bf00      	nop
 80009aa:	3750      	adds	r7, #80	; 0x50
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	40023800 	.word	0x40023800
 80009b4:	40007000 	.word	0x40007000

080009b8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
/* DMA */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b083      	sub	sp, #12
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM4)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a0a      	ldr	r2, [pc, #40]	; (80009f0 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d10b      	bne.n	80009e2 <HAL_TIM_PeriodElapsedCallback+0x2a>
	{
		GPIOB->ODR |= 0x01 << 6;  // PB 6 SET
 80009ca:	4b0a      	ldr	r3, [pc, #40]	; (80009f4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80009cc:	695b      	ldr	r3, [r3, #20]
 80009ce:	4a09      	ldr	r2, [pc, #36]	; (80009f4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80009d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009d4:	6153      	str	r3, [r2, #20]
		GPIOB->ODR |= LD1_Pin;
 80009d6:	4b07      	ldr	r3, [pc, #28]	; (80009f4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80009d8:	695b      	ldr	r3, [r3, #20]
 80009da:	4a06      	ldr	r2, [pc, #24]	; (80009f4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80009dc:	f043 0301 	orr.w	r3, r3, #1
 80009e0:	6153      	str	r3, [r2, #20]
		//TriggerEnable();
	}

}
 80009e2:	bf00      	nop
 80009e4:	370c      	adds	r7, #12
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop
 80009f0:	40000800 	.word	0x40000800
 80009f4:	40020400 	.word	0x40020400

080009f8 <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b083      	sub	sp, #12
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM4)	// Pulse 7
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a0a      	ldr	r2, [pc, #40]	; (8000a30 <HAL_TIM_OC_DelayElapsedCallback+0x38>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d10b      	bne.n	8000a22 <HAL_TIM_OC_DelayElapsedCallback+0x2a>
	{
		GPIOB->ODR &= ~(0x01 << 6);	// PB 6	RESET, Pulse
 8000a0a:	4b0a      	ldr	r3, [pc, #40]	; (8000a34 <HAL_TIM_OC_DelayElapsedCallback+0x3c>)
 8000a0c:	695b      	ldr	r3, [r3, #20]
 8000a0e:	4a09      	ldr	r2, [pc, #36]	; (8000a34 <HAL_TIM_OC_DelayElapsedCallback+0x3c>)
 8000a10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000a14:	6153      	str	r3, [r2, #20]
		GPIOB->ODR &= ~LD1_Pin;
 8000a16:	4b07      	ldr	r3, [pc, #28]	; (8000a34 <HAL_TIM_OC_DelayElapsedCallback+0x3c>)
 8000a18:	695b      	ldr	r3, [r3, #20]
 8000a1a:	4a06      	ldr	r2, [pc, #24]	; (8000a34 <HAL_TIM_OC_DelayElapsedCallback+0x3c>)
 8000a1c:	f023 0301 	bic.w	r3, r3, #1
 8000a20:	6153      	str	r3, [r2, #20]
	}
}
 8000a22:	bf00      	nop
 8000a24:	370c      	adds	r7, #12
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	40000800 	.word	0x40000800
 8000a34:	40020400 	.word	0x40020400

08000a38 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]

	if(htim->Instance == TIM3 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a41      	ldr	r2, [pc, #260]	; (8000b4c <HAL_TIM_IC_CaptureCallback+0x114>)
 8000a46:	4293      	cmp	r3, r2
 8000a48:	d179      	bne.n	8000b3e <HAL_TIM_IC_CaptureCallback+0x106>
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	7f1b      	ldrb	r3, [r3, #28]
 8000a4e:	2b01      	cmp	r3, #1
 8000a50:	d175      	bne.n	8000b3e <HAL_TIM_IC_CaptureCallback+0x106>
	{


		/*   */
		if((TIM3->CCER & TIM_CCER_CC1P) != (0x01 << 1))
 8000a52:	4b3e      	ldr	r3, [pc, #248]	; (8000b4c <HAL_TIM_IC_CaptureCallback+0x114>)
 8000a54:	6a1b      	ldr	r3, [r3, #32]
 8000a56:	f003 0302 	and.w	r3, r3, #2
 8000a5a:	2b02      	cmp	r3, #2
 8000a5c:	d01a      	beq.n	8000a94 <HAL_TIM_IC_CaptureCallback+0x5c>
		{
			fallingCP = capture1[1];
 8000a5e:	4b3c      	ldr	r3, [pc, #240]	; (8000b50 <HAL_TIM_IC_CaptureCallback+0x118>)
 8000a60:	885b      	ldrh	r3, [r3, #2]
 8000a62:	b29a      	uxth	r2, r3
 8000a64:	4b3b      	ldr	r3, [pc, #236]	; (8000b54 <HAL_TIM_IC_CaptureCallback+0x11c>)
 8000a66:	801a      	strh	r2, [r3, #0]
			TIM3->CCER |= TIM_CCER_CC1P;		// Rising -> Falling (0 -> 1)
 8000a68:	4b38      	ldr	r3, [pc, #224]	; (8000b4c <HAL_TIM_IC_CaptureCallback+0x114>)
 8000a6a:	6a1b      	ldr	r3, [r3, #32]
 8000a6c:	4a37      	ldr	r2, [pc, #220]	; (8000b4c <HAL_TIM_IC_CaptureCallback+0x114>)
 8000a6e:	f043 0302 	orr.w	r3, r3, #2
 8000a72:	6213      	str	r3, [r2, #32]
			GPIOB->ODR |= LD2_Pin;
 8000a74:	4b38      	ldr	r3, [pc, #224]	; (8000b58 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000a76:	695b      	ldr	r3, [r3, #20]
 8000a78:	4a37      	ldr	r2, [pc, #220]	; (8000b58 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000a7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a7e:	6153      	str	r3, [r2, #20]
			GPIOB->ODR &= ~LD3_Pin;
 8000a80:	4b35      	ldr	r3, [pc, #212]	; (8000b58 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000a82:	695b      	ldr	r3, [r3, #20]
 8000a84:	4a34      	ldr	r2, [pc, #208]	; (8000b58 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000a86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000a8a:	6153      	str	r3, [r2, #20]
			ch1done = true;
 8000a8c:	4b33      	ldr	r3, [pc, #204]	; (8000b5c <HAL_TIM_IC_CaptureCallback+0x124>)
 8000a8e:	2201      	movs	r2, #1
 8000a90:	701a      	strb	r2, [r3, #0]
 8000a92:	e019      	b.n	8000ac8 <HAL_TIM_IC_CaptureCallback+0x90>

		}
		else
		{
			risingCP = capture1[0];
 8000a94:	4b2e      	ldr	r3, [pc, #184]	; (8000b50 <HAL_TIM_IC_CaptureCallback+0x118>)
 8000a96:	881b      	ldrh	r3, [r3, #0]
 8000a98:	b29a      	uxth	r2, r3
 8000a9a:	4b31      	ldr	r3, [pc, #196]	; (8000b60 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000a9c:	801a      	strh	r2, [r3, #0]
			TIM3->CCER &= ~TIM_CCER_CC1P;		// Falling -> Rising	(1 -> 0)
 8000a9e:	4b2b      	ldr	r3, [pc, #172]	; (8000b4c <HAL_TIM_IC_CaptureCallback+0x114>)
 8000aa0:	6a1b      	ldr	r3, [r3, #32]
 8000aa2:	4a2a      	ldr	r2, [pc, #168]	; (8000b4c <HAL_TIM_IC_CaptureCallback+0x114>)
 8000aa4:	f023 0302 	bic.w	r3, r3, #2
 8000aa8:	6213      	str	r3, [r2, #32]
			GPIOB->ODR |= LD3_Pin;
 8000aaa:	4b2b      	ldr	r3, [pc, #172]	; (8000b58 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000aac:	695b      	ldr	r3, [r3, #20]
 8000aae:	4a2a      	ldr	r2, [pc, #168]	; (8000b58 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000ab0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ab4:	6153      	str	r3, [r2, #20]
			GPIOB->ODR &= ~LD2_Pin;
 8000ab6:	4b28      	ldr	r3, [pc, #160]	; (8000b58 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000ab8:	695b      	ldr	r3, [r3, #20]
 8000aba:	4a27      	ldr	r2, [pc, #156]	; (8000b58 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000abc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000ac0:	6153      	str	r3, [r2, #20]
			ch1done = false;
 8000ac2:	4b26      	ldr	r3, [pc, #152]	; (8000b5c <HAL_TIM_IC_CaptureCallback+0x124>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	701a      	strb	r2, [r3, #0]

		}

		if(!ch1done)
 8000ac8:	4b24      	ldr	r3, [pc, #144]	; (8000b5c <HAL_TIM_IC_CaptureCallback+0x124>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	f083 0301 	eor.w	r3, r3, #1
 8000ad0:	b2db      	uxtb	r3, r3
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d033      	beq.n	8000b3e <HAL_TIM_IC_CaptureCallback+0x106>
		{
			if(risingCP > fallingCP){
 8000ad6:	4b22      	ldr	r3, [pc, #136]	; (8000b60 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000ad8:	881b      	ldrh	r3, [r3, #0]
 8000ada:	b29a      	uxth	r2, r3
 8000adc:	4b1d      	ldr	r3, [pc, #116]	; (8000b54 <HAL_TIM_IC_CaptureCallback+0x11c>)
 8000ade:	881b      	ldrh	r3, [r3, #0]
 8000ae0:	b29b      	uxth	r3, r3
 8000ae2:	429a      	cmp	r2, r3
 8000ae4:	d90a      	bls.n	8000afc <HAL_TIM_IC_CaptureCallback+0xc4>
				DMAwidth = risingCP - fallingCP;
 8000ae6:	4b1e      	ldr	r3, [pc, #120]	; (8000b60 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000ae8:	881b      	ldrh	r3, [r3, #0]
 8000aea:	b29a      	uxth	r2, r3
 8000aec:	4b19      	ldr	r3, [pc, #100]	; (8000b54 <HAL_TIM_IC_CaptureCallback+0x11c>)
 8000aee:	881b      	ldrh	r3, [r3, #0]
 8000af0:	b29b      	uxth	r3, r3
 8000af2:	1ad3      	subs	r3, r2, r3
 8000af4:	b29a      	uxth	r2, r3
 8000af6:	4b1b      	ldr	r3, [pc, #108]	; (8000b64 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000af8:	801a      	strh	r2, [r3, #0]
 8000afa:	e00e      	b.n	8000b1a <HAL_TIM_IC_CaptureCallback+0xe2>
			}
			else
			{
				DMAwidth = TIM3->ARR - fallingCP + risingCP;
 8000afc:	4b13      	ldr	r3, [pc, #76]	; (8000b4c <HAL_TIM_IC_CaptureCallback+0x114>)
 8000afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b00:	b29a      	uxth	r2, r3
 8000b02:	4b14      	ldr	r3, [pc, #80]	; (8000b54 <HAL_TIM_IC_CaptureCallback+0x11c>)
 8000b04:	881b      	ldrh	r3, [r3, #0]
 8000b06:	b29b      	uxth	r3, r3
 8000b08:	1ad3      	subs	r3, r2, r3
 8000b0a:	b29a      	uxth	r2, r3
 8000b0c:	4b14      	ldr	r3, [pc, #80]	; (8000b60 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000b0e:	881b      	ldrh	r3, [r3, #0]
 8000b10:	b29b      	uxth	r3, r3
 8000b12:	4413      	add	r3, r2
 8000b14:	b29a      	uxth	r2, r3
 8000b16:	4b13      	ldr	r3, [pc, #76]	; (8000b64 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000b18:	801a      	strh	r2, [r3, #0]
			}

			 DMAdistance = DMAwidth/58;
 8000b1a:	4b12      	ldr	r3, [pc, #72]	; (8000b64 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000b1c:	881b      	ldrh	r3, [r3, #0]
 8000b1e:	4a12      	ldr	r2, [pc, #72]	; (8000b68 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000b20:	fba2 2303 	umull	r2, r3, r2, r3
 8000b24:	095b      	lsrs	r3, r3, #5
 8000b26:	b29a      	uxth	r2, r3
 8000b28:	4b10      	ldr	r3, [pc, #64]	; (8000b6c <HAL_TIM_IC_CaptureCallback+0x134>)
 8000b2a:	801a      	strh	r2, [r3, #0]
			 if(DMAdistance > 400) DMAdistance = 400;
 8000b2c:	4b0f      	ldr	r3, [pc, #60]	; (8000b6c <HAL_TIM_IC_CaptureCallback+0x134>)
 8000b2e:	881b      	ldrh	r3, [r3, #0]
 8000b30:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000b34:	d903      	bls.n	8000b3e <HAL_TIM_IC_CaptureCallback+0x106>
 8000b36:	4b0d      	ldr	r3, [pc, #52]	; (8000b6c <HAL_TIM_IC_CaptureCallback+0x134>)
 8000b38:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000b3c:	801a      	strh	r2, [r3, #0]
		}


	}
}
 8000b3e:	bf00      	nop
 8000b40:	370c      	adds	r7, #12
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	40000400 	.word	0x40000400
 8000b50:	2000008c 	.word	0x2000008c
 8000b54:	20000092 	.word	0x20000092
 8000b58:	40020400 	.word	0x40020400
 8000b5c:	20000098 	.word	0x20000098
 8000b60:	20000090 	.word	0x20000090
 8000b64:	20000094 	.word	0x20000094
 8000b68:	8d3dcb09 	.word	0x8d3dcb09
 8000b6c:	20000096 	.word	0x20000096

08000b70 <DWT_Delay_Init>:

uint32_t DWT_Delay_Init(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000b74:	4b14      	ldr	r3, [pc, #80]	; (8000bc8 <DWT_Delay_Init+0x58>)
 8000b76:	68db      	ldr	r3, [r3, #12]
 8000b78:	4a13      	ldr	r2, [pc, #76]	; (8000bc8 <DWT_Delay_Init+0x58>)
 8000b7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000b7e:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000b80:	4b11      	ldr	r3, [pc, #68]	; (8000bc8 <DWT_Delay_Init+0x58>)
 8000b82:	68db      	ldr	r3, [r3, #12]
 8000b84:	4a10      	ldr	r2, [pc, #64]	; (8000bc8 <DWT_Delay_Init+0x58>)
 8000b86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000b8a:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000b8c:	4b0f      	ldr	r3, [pc, #60]	; (8000bcc <DWT_Delay_Init+0x5c>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a0e      	ldr	r2, [pc, #56]	; (8000bcc <DWT_Delay_Init+0x5c>)
 8000b92:	f023 0301 	bic.w	r3, r3, #1
 8000b96:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000b98:	4b0c      	ldr	r3, [pc, #48]	; (8000bcc <DWT_Delay_Init+0x5c>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a0b      	ldr	r2, [pc, #44]	; (8000bcc <DWT_Delay_Init+0x5c>)
 8000b9e:	f043 0301 	orr.w	r3, r3, #1
 8000ba2:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8000ba4:	4b09      	ldr	r3, [pc, #36]	; (8000bcc <DWT_Delay_Init+0x5c>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 8000baa:	bf00      	nop
     __ASM volatile ("NOP");
 8000bac:	bf00      	nop
  __ASM volatile ("NOP");
 8000bae:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 8000bb0:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <DWT_Delay_Init+0x5c>)
 8000bb2:	685b      	ldr	r3, [r3, #4]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 8000bb8:	2300      	movs	r3, #0
 8000bba:	e000      	b.n	8000bbe <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 8000bbc:	2301      	movs	r3, #1
  }
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr
 8000bc8:	e000edf0 	.word	0xe000edf0
 8000bcc:	e0001000 	.word	0xe0001000

08000bd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bd4:	b672      	cpsid	i
}
 8000bd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bd8:	e7fe      	b.n	8000bd8 <Error_Handler+0x8>
	...

08000bdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000be2:	2300      	movs	r3, #0
 8000be4:	607b      	str	r3, [r7, #4]
 8000be6:	4b10      	ldr	r3, [pc, #64]	; (8000c28 <HAL_MspInit+0x4c>)
 8000be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bea:	4a0f      	ldr	r2, [pc, #60]	; (8000c28 <HAL_MspInit+0x4c>)
 8000bec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bf0:	6453      	str	r3, [r2, #68]	; 0x44
 8000bf2:	4b0d      	ldr	r3, [pc, #52]	; (8000c28 <HAL_MspInit+0x4c>)
 8000bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bfa:	607b      	str	r3, [r7, #4]
 8000bfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bfe:	2300      	movs	r3, #0
 8000c00:	603b      	str	r3, [r7, #0]
 8000c02:	4b09      	ldr	r3, [pc, #36]	; (8000c28 <HAL_MspInit+0x4c>)
 8000c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c06:	4a08      	ldr	r2, [pc, #32]	; (8000c28 <HAL_MspInit+0x4c>)
 8000c08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c0e:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <HAL_MspInit+0x4c>)
 8000c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c16:	603b      	str	r3, [r7, #0]
 8000c18:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c1a:	bf00      	nop
 8000c1c:	370c      	adds	r7, #12
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	40023800 	.word	0x40023800

08000c2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c30:	e7fe      	b.n	8000c30 <NMI_Handler+0x4>

08000c32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c32:	b480      	push	{r7}
 8000c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c36:	e7fe      	b.n	8000c36 <HardFault_Handler+0x4>

08000c38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c3c:	e7fe      	b.n	8000c3c <MemManage_Handler+0x4>

08000c3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c42:	e7fe      	b.n	8000c42 <BusFault_Handler+0x4>

08000c44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c48:	e7fe      	b.n	8000c48 <UsageFault_Handler+0x4>

08000c4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr

08000c58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c5c:	bf00      	nop
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr

08000c66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c66:	b480      	push	{r7}
 8000c68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr

08000c74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c78:	f000 fb82 	bl	8001380 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c7c:	bf00      	nop
 8000c7e:	bd80      	pop	{r7, pc}

08000c80 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 8000c84:	4802      	ldr	r0, [pc, #8]	; (8000c90 <DMA1_Stream4_IRQHandler+0x10>)
 8000c86:	f000 fe69 	bl	800195c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8000c8a:	bf00      	nop
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	20000130 	.word	0x20000130

08000c94 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000c98:	4802      	ldr	r0, [pc, #8]	; (8000ca4 <TIM3_IRQHandler+0x10>)
 8000c9a:	f002 fbab 	bl	80033f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000c9e:	bf00      	nop
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	200000a0 	.word	0x200000a0

08000ca8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000cac:	4802      	ldr	r0, [pc, #8]	; (8000cb8 <TIM4_IRQHandler+0x10>)
 8000cae:	f002 fba1 	bl	80033f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000cb2:	bf00      	nop
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	200000e8 	.word	0x200000e8

08000cbc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000cc0:	4802      	ldr	r0, [pc, #8]	; (8000ccc <USART3_IRQHandler+0x10>)
 8000cc2:	f003 fd11 	bl	80046e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000cc6:	bf00      	nop
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	20000190 	.word	0x20000190

08000cd0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b086      	sub	sp, #24
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	60f8      	str	r0, [r7, #12]
 8000cd8:	60b9      	str	r1, [r7, #8]
 8000cda:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cdc:	2300      	movs	r3, #0
 8000cde:	617b      	str	r3, [r7, #20]
 8000ce0:	e00a      	b.n	8000cf8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000ce2:	f3af 8000 	nop.w
 8000ce6:	4601      	mov	r1, r0
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	1c5a      	adds	r2, r3, #1
 8000cec:	60ba      	str	r2, [r7, #8]
 8000cee:	b2ca      	uxtb	r2, r1
 8000cf0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	3301      	adds	r3, #1
 8000cf6:	617b      	str	r3, [r7, #20]
 8000cf8:	697a      	ldr	r2, [r7, #20]
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	dbf0      	blt.n	8000ce2 <_read+0x12>
	}

return len;
 8000d00:	687b      	ldr	r3, [r7, #4]
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	3718      	adds	r7, #24
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}

08000d0a <_close>:
	}
	return len;
}

int _close(int file)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	b083      	sub	sp, #12
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	6078      	str	r0, [r7, #4]
	return -1;
 8000d12:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	370c      	adds	r7, #12
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr

08000d22 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d22:	b480      	push	{r7}
 8000d24:	b083      	sub	sp, #12
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	6078      	str	r0, [r7, #4]
 8000d2a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d32:	605a      	str	r2, [r3, #4]
	return 0;
 8000d34:	2300      	movs	r3, #0
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	370c      	adds	r7, #12
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr

08000d42 <_isatty>:

int _isatty(int file)
{
 8000d42:	b480      	push	{r7}
 8000d44:	b083      	sub	sp, #12
 8000d46:	af00      	add	r7, sp, #0
 8000d48:	6078      	str	r0, [r7, #4]
	return 1;
 8000d4a:	2301      	movs	r3, #1
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	370c      	adds	r7, #12
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr

08000d58 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b085      	sub	sp, #20
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	60f8      	str	r0, [r7, #12]
 8000d60:	60b9      	str	r1, [r7, #8]
 8000d62:	607a      	str	r2, [r7, #4]
	return 0;
 8000d64:	2300      	movs	r3, #0
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3714      	adds	r7, #20
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
	...

08000d74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b086      	sub	sp, #24
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d7c:	4a14      	ldr	r2, [pc, #80]	; (8000dd0 <_sbrk+0x5c>)
 8000d7e:	4b15      	ldr	r3, [pc, #84]	; (8000dd4 <_sbrk+0x60>)
 8000d80:	1ad3      	subs	r3, r2, r3
 8000d82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d88:	4b13      	ldr	r3, [pc, #76]	; (8000dd8 <_sbrk+0x64>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d102      	bne.n	8000d96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d90:	4b11      	ldr	r3, [pc, #68]	; (8000dd8 <_sbrk+0x64>)
 8000d92:	4a12      	ldr	r2, [pc, #72]	; (8000ddc <_sbrk+0x68>)
 8000d94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d96:	4b10      	ldr	r3, [pc, #64]	; (8000dd8 <_sbrk+0x64>)
 8000d98:	681a      	ldr	r2, [r3, #0]
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4413      	add	r3, r2
 8000d9e:	693a      	ldr	r2, [r7, #16]
 8000da0:	429a      	cmp	r2, r3
 8000da2:	d207      	bcs.n	8000db4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000da4:	f004 fbd4 	bl	8005550 <__errno>
 8000da8:	4603      	mov	r3, r0
 8000daa:	220c      	movs	r2, #12
 8000dac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dae:	f04f 33ff 	mov.w	r3, #4294967295
 8000db2:	e009      	b.n	8000dc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000db4:	4b08      	ldr	r3, [pc, #32]	; (8000dd8 <_sbrk+0x64>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dba:	4b07      	ldr	r3, [pc, #28]	; (8000dd8 <_sbrk+0x64>)
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	4413      	add	r3, r2
 8000dc2:	4a05      	ldr	r2, [pc, #20]	; (8000dd8 <_sbrk+0x64>)
 8000dc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dc6:	68fb      	ldr	r3, [r7, #12]
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3718      	adds	r7, #24
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	20030000 	.word	0x20030000
 8000dd4:	00000400 	.word	0x00000400
 8000dd8:	2000009c 	.word	0x2000009c
 8000ddc:	200001e8 	.word	0x200001e8

08000de0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000de4:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <SystemInit+0x20>)
 8000de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dea:	4a05      	ldr	r2, [pc, #20]	; (8000e00 <SystemInit+0x20>)
 8000dec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000df0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000df4:	bf00      	nop
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	e000ed00 	.word	0xe000ed00

08000e04 <MX_TIM3_Init>:
TIM_HandleTypeDef htim4;
DMA_HandleTypeDef hdma_tim3_ch1_trig;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b08a      	sub	sp, #40	; 0x28
 8000e08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e0a:	f107 0318 	add.w	r3, r7, #24
 8000e0e:	2200      	movs	r2, #0
 8000e10:	601a      	str	r2, [r3, #0]
 8000e12:	605a      	str	r2, [r3, #4]
 8000e14:	609a      	str	r2, [r3, #8]
 8000e16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e18:	f107 0310 	add.w	r3, r7, #16
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	601a      	str	r2, [r3, #0]
 8000e20:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000e22:	463b      	mov	r3, r7
 8000e24:	2200      	movs	r2, #0
 8000e26:	601a      	str	r2, [r3, #0]
 8000e28:	605a      	str	r2, [r3, #4]
 8000e2a:	609a      	str	r2, [r3, #8]
 8000e2c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e2e:	4b2b      	ldr	r3, [pc, #172]	; (8000edc <MX_TIM3_Init+0xd8>)
 8000e30:	4a2b      	ldr	r2, [pc, #172]	; (8000ee0 <MX_TIM3_Init+0xdc>)
 8000e32:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 90-1;
 8000e34:	4b29      	ldr	r3, [pc, #164]	; (8000edc <MX_TIM3_Init+0xd8>)
 8000e36:	2259      	movs	r2, #89	; 0x59
 8000e38:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e3a:	4b28      	ldr	r3, [pc, #160]	; (8000edc <MX_TIM3_Init+0xd8>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000e40:	4b26      	ldr	r3, [pc, #152]	; (8000edc <MX_TIM3_Init+0xd8>)
 8000e42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e46:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e48:	4b24      	ldr	r3, [pc, #144]	; (8000edc <MX_TIM3_Init+0xd8>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e4e:	4b23      	ldr	r3, [pc, #140]	; (8000edc <MX_TIM3_Init+0xd8>)
 8000e50:	2280      	movs	r2, #128	; 0x80
 8000e52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e54:	4821      	ldr	r0, [pc, #132]	; (8000edc <MX_TIM3_Init+0xd8>)
 8000e56:	f001 fe99 	bl	8002b8c <HAL_TIM_Base_Init>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8000e60:	f7ff feb6 	bl	8000bd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e68:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e6a:	f107 0318 	add.w	r3, r7, #24
 8000e6e:	4619      	mov	r1, r3
 8000e70:	481a      	ldr	r0, [pc, #104]	; (8000edc <MX_TIM3_Init+0xd8>)
 8000e72:	f002 fcbf 	bl	80037f4 <HAL_TIM_ConfigClockSource>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000e7c:	f7ff fea8 	bl	8000bd0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8000e80:	4816      	ldr	r0, [pc, #88]	; (8000edc <MX_TIM3_Init+0xd8>)
 8000e82:	f002 f8b3 	bl	8002fec <HAL_TIM_IC_Init>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000e8c:	f7ff fea0 	bl	8000bd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e90:	2300      	movs	r3, #0
 8000e92:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e94:	2300      	movs	r3, #0
 8000e96:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e98:	f107 0310 	add.w	r3, r7, #16
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	480f      	ldr	r0, [pc, #60]	; (8000edc <MX_TIM3_Init+0xd8>)
 8000ea0:	f003 fab2 	bl	8004408 <HAL_TIMEx_MasterConfigSynchronization>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 8000eaa:	f7ff fe91 	bl	8000bd0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000ebe:	463b      	mov	r3, r7
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4805      	ldr	r0, [pc, #20]	; (8000edc <MX_TIM3_Init+0xd8>)
 8000ec6:	f002 fbf9 	bl	80036bc <HAL_TIM_IC_ConfigChannel>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8000ed0:	f7ff fe7e 	bl	8000bd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000ed4:	bf00      	nop
 8000ed6:	3728      	adds	r7, #40	; 0x28
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	200000a0 	.word	0x200000a0
 8000ee0:	40000400 	.word	0x40000400

08000ee4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b08e      	sub	sp, #56	; 0x38
 8000ee8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000eea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000eee:	2200      	movs	r2, #0
 8000ef0:	601a      	str	r2, [r3, #0]
 8000ef2:	605a      	str	r2, [r3, #4]
 8000ef4:	609a      	str	r2, [r3, #8]
 8000ef6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ef8:	f107 0320 	add.w	r3, r7, #32
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]
 8000f00:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f02:	1d3b      	adds	r3, r7, #4
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]
 8000f08:	605a      	str	r2, [r3, #4]
 8000f0a:	609a      	str	r2, [r3, #8]
 8000f0c:	60da      	str	r2, [r3, #12]
 8000f0e:	611a      	str	r2, [r3, #16]
 8000f10:	615a      	str	r2, [r3, #20]
 8000f12:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000f14:	4b2c      	ldr	r3, [pc, #176]	; (8000fc8 <MX_TIM4_Init+0xe4>)
 8000f16:	4a2d      	ldr	r2, [pc, #180]	; (8000fcc <MX_TIM4_Init+0xe8>)
 8000f18:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 150-1;
 8000f1a:	4b2b      	ldr	r3, [pc, #172]	; (8000fc8 <MX_TIM4_Init+0xe4>)
 8000f1c:	2295      	movs	r2, #149	; 0x95
 8000f1e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f20:	4b29      	ldr	r3, [pc, #164]	; (8000fc8 <MX_TIM4_Init+0xe4>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 60000-1;
 8000f26:	4b28      	ldr	r3, [pc, #160]	; (8000fc8 <MX_TIM4_Init+0xe4>)
 8000f28:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8000f2c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f2e:	4b26      	ldr	r3, [pc, #152]	; (8000fc8 <MX_TIM4_Init+0xe4>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f34:	4b24      	ldr	r3, [pc, #144]	; (8000fc8 <MX_TIM4_Init+0xe4>)
 8000f36:	2280      	movs	r2, #128	; 0x80
 8000f38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000f3a:	4823      	ldr	r0, [pc, #140]	; (8000fc8 <MX_TIM4_Init+0xe4>)
 8000f3c:	f001 fe26 	bl	8002b8c <HAL_TIM_Base_Init>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000f46:	f7ff fe43 	bl	8000bd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f4e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000f50:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f54:	4619      	mov	r1, r3
 8000f56:	481c      	ldr	r0, [pc, #112]	; (8000fc8 <MX_TIM4_Init+0xe4>)
 8000f58:	f002 fc4c 	bl	80037f4 <HAL_TIM_ConfigClockSource>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8000f62:	f7ff fe35 	bl	8000bd0 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8000f66:	4818      	ldr	r0, [pc, #96]	; (8000fc8 <MX_TIM4_Init+0xe4>)
 8000f68:	f001 fed0 	bl	8002d0c <HAL_TIM_OC_Init>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8000f72:	f7ff fe2d 	bl	8000bd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f76:	2300      	movs	r3, #0
 8000f78:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000f7e:	f107 0320 	add.w	r3, r7, #32
 8000f82:	4619      	mov	r1, r3
 8000f84:	4810      	ldr	r0, [pc, #64]	; (8000fc8 <MX_TIM4_Init+0xe4>)
 8000f86:	f003 fa3f 	bl	8004408 <HAL_TIMEx_MasterConfigSynchronization>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000f90:	f7ff fe1e 	bl	8000bd0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000f94:	2300      	movs	r3, #0
 8000f96:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 7;
 8000f98:	2307      	movs	r3, #7
 8000f9a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fa4:	1d3b      	adds	r3, r7, #4
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	4619      	mov	r1, r3
 8000faa:	4807      	ldr	r0, [pc, #28]	; (8000fc8 <MX_TIM4_Init+0xe4>)
 8000fac:	f002 fb2a 	bl	8003604 <HAL_TIM_OC_ConfigChannel>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8000fb6:	f7ff fe0b 	bl	8000bd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000fba:	4803      	ldr	r0, [pc, #12]	; (8000fc8 <MX_TIM4_Init+0xe4>)
 8000fbc:	f000 f8b0 	bl	8001120 <HAL_TIM_MspPostInit>

}
 8000fc0:	bf00      	nop
 8000fc2:	3738      	adds	r7, #56	; 0x38
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	200000e8 	.word	0x200000e8
 8000fcc:	40000800 	.word	0x40000800

08000fd0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b08a      	sub	sp, #40	; 0x28
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd8:	f107 0314 	add.w	r3, r7, #20
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	605a      	str	r2, [r3, #4]
 8000fe2:	609a      	str	r2, [r3, #8]
 8000fe4:	60da      	str	r2, [r3, #12]
 8000fe6:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM3)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a46      	ldr	r2, [pc, #280]	; (8001108 <HAL_TIM_Base_MspInit+0x138>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d16b      	bne.n	80010ca <HAL_TIM_Base_MspInit+0xfa>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	613b      	str	r3, [r7, #16]
 8000ff6:	4b45      	ldr	r3, [pc, #276]	; (800110c <HAL_TIM_Base_MspInit+0x13c>)
 8000ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffa:	4a44      	ldr	r2, [pc, #272]	; (800110c <HAL_TIM_Base_MspInit+0x13c>)
 8000ffc:	f043 0302 	orr.w	r3, r3, #2
 8001000:	6413      	str	r3, [r2, #64]	; 0x40
 8001002:	4b42      	ldr	r3, [pc, #264]	; (800110c <HAL_TIM_Base_MspInit+0x13c>)
 8001004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001006:	f003 0302 	and.w	r3, r3, #2
 800100a:	613b      	str	r3, [r7, #16]
 800100c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800100e:	2300      	movs	r3, #0
 8001010:	60fb      	str	r3, [r7, #12]
 8001012:	4b3e      	ldr	r3, [pc, #248]	; (800110c <HAL_TIM_Base_MspInit+0x13c>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	4a3d      	ldr	r2, [pc, #244]	; (800110c <HAL_TIM_Base_MspInit+0x13c>)
 8001018:	f043 0301 	orr.w	r3, r3, #1
 800101c:	6313      	str	r3, [r2, #48]	; 0x30
 800101e:	4b3b      	ldr	r3, [pc, #236]	; (800110c <HAL_TIM_Base_MspInit+0x13c>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	f003 0301 	and.w	r3, r3, #1
 8001026:	60fb      	str	r3, [r7, #12]
 8001028:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800102a:	2340      	movs	r3, #64	; 0x40
 800102c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102e:	2302      	movs	r3, #2
 8001030:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001032:	2300      	movs	r3, #0
 8001034:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001036:	2300      	movs	r3, #0
 8001038:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800103a:	2302      	movs	r3, #2
 800103c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800103e:	f107 0314 	add.w	r3, r7, #20
 8001042:	4619      	mov	r1, r3
 8001044:	4832      	ldr	r0, [pc, #200]	; (8001110 <HAL_TIM_Base_MspInit+0x140>)
 8001046:	f000 fef3 	bl	8001e30 <HAL_GPIO_Init>

    /* TIM3 DMA Init */
    /* TIM3_CH1_TRIG Init */
    hdma_tim3_ch1_trig.Instance = DMA1_Stream4;
 800104a:	4b32      	ldr	r3, [pc, #200]	; (8001114 <HAL_TIM_Base_MspInit+0x144>)
 800104c:	4a32      	ldr	r2, [pc, #200]	; (8001118 <HAL_TIM_Base_MspInit+0x148>)
 800104e:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Channel = DMA_CHANNEL_5;
 8001050:	4b30      	ldr	r3, [pc, #192]	; (8001114 <HAL_TIM_Base_MspInit+0x144>)
 8001052:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8001056:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001058:	4b2e      	ldr	r3, [pc, #184]	; (8001114 <HAL_TIM_Base_MspInit+0x144>)
 800105a:	2200      	movs	r2, #0
 800105c:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 800105e:	4b2d      	ldr	r3, [pc, #180]	; (8001114 <HAL_TIM_Base_MspInit+0x144>)
 8001060:	2200      	movs	r2, #0
 8001062:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 8001064:	4b2b      	ldr	r3, [pc, #172]	; (8001114 <HAL_TIM_Base_MspInit+0x144>)
 8001066:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800106a:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800106c:	4b29      	ldr	r3, [pc, #164]	; (8001114 <HAL_TIM_Base_MspInit+0x144>)
 800106e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001072:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001074:	4b27      	ldr	r3, [pc, #156]	; (8001114 <HAL_TIM_Base_MspInit+0x144>)
 8001076:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800107a:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Mode = DMA_CIRCULAR;
 800107c:	4b25      	ldr	r3, [pc, #148]	; (8001114 <HAL_TIM_Base_MspInit+0x144>)
 800107e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001082:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 8001084:	4b23      	ldr	r3, [pc, #140]	; (8001114 <HAL_TIM_Base_MspInit+0x144>)
 8001086:	2200      	movs	r2, #0
 8001088:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1_trig.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800108a:	4b22      	ldr	r3, [pc, #136]	; (8001114 <HAL_TIM_Base_MspInit+0x144>)
 800108c:	2200      	movs	r2, #0
 800108e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 8001090:	4820      	ldr	r0, [pc, #128]	; (8001114 <HAL_TIM_Base_MspInit+0x144>)
 8001092:	f000 facb 	bl	800162c <HAL_DMA_Init>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <HAL_TIM_Base_MspInit+0xd0>
    {
      Error_Handler();
 800109c:	f7ff fd98 	bl	8000bd0 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	4a1c      	ldr	r2, [pc, #112]	; (8001114 <HAL_TIM_Base_MspInit+0x144>)
 80010a4:	625a      	str	r2, [r3, #36]	; 0x24
 80010a6:	4a1b      	ldr	r2, [pc, #108]	; (8001114 <HAL_TIM_Base_MspInit+0x144>)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	4a19      	ldr	r2, [pc, #100]	; (8001114 <HAL_TIM_Base_MspInit+0x144>)
 80010b0:	639a      	str	r2, [r3, #56]	; 0x38
 80010b2:	4a18      	ldr	r2, [pc, #96]	; (8001114 <HAL_TIM_Base_MspInit+0x144>)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80010b8:	2200      	movs	r2, #0
 80010ba:	2100      	movs	r1, #0
 80010bc:	201d      	movs	r0, #29
 80010be:	f000 fa7e 	bl	80015be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80010c2:	201d      	movs	r0, #29
 80010c4:	f000 fa97 	bl	80015f6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80010c8:	e01a      	b.n	8001100 <HAL_TIM_Base_MspInit+0x130>
  else if(tim_baseHandle->Instance==TIM4)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4a13      	ldr	r2, [pc, #76]	; (800111c <HAL_TIM_Base_MspInit+0x14c>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d115      	bne.n	8001100 <HAL_TIM_Base_MspInit+0x130>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80010d4:	2300      	movs	r3, #0
 80010d6:	60bb      	str	r3, [r7, #8]
 80010d8:	4b0c      	ldr	r3, [pc, #48]	; (800110c <HAL_TIM_Base_MspInit+0x13c>)
 80010da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010dc:	4a0b      	ldr	r2, [pc, #44]	; (800110c <HAL_TIM_Base_MspInit+0x13c>)
 80010de:	f043 0304 	orr.w	r3, r3, #4
 80010e2:	6413      	str	r3, [r2, #64]	; 0x40
 80010e4:	4b09      	ldr	r3, [pc, #36]	; (800110c <HAL_TIM_Base_MspInit+0x13c>)
 80010e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e8:	f003 0304 	and.w	r3, r3, #4
 80010ec:	60bb      	str	r3, [r7, #8]
 80010ee:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80010f0:	2200      	movs	r2, #0
 80010f2:	2100      	movs	r1, #0
 80010f4:	201e      	movs	r0, #30
 80010f6:	f000 fa62 	bl	80015be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80010fa:	201e      	movs	r0, #30
 80010fc:	f000 fa7b 	bl	80015f6 <HAL_NVIC_EnableIRQ>
}
 8001100:	bf00      	nop
 8001102:	3728      	adds	r7, #40	; 0x28
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	40000400 	.word	0x40000400
 800110c:	40023800 	.word	0x40023800
 8001110:	40020000 	.word	0x40020000
 8001114:	20000130 	.word	0x20000130
 8001118:	40026070 	.word	0x40026070
 800111c:	40000800 	.word	0x40000800

08001120 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b088      	sub	sp, #32
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001128:	f107 030c 	add.w	r3, r7, #12
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]
 8001130:	605a      	str	r2, [r3, #4]
 8001132:	609a      	str	r2, [r3, #8]
 8001134:	60da      	str	r2, [r3, #12]
 8001136:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a12      	ldr	r2, [pc, #72]	; (8001188 <HAL_TIM_MspPostInit+0x68>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d11e      	bne.n	8001180 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001142:	2300      	movs	r3, #0
 8001144:	60bb      	str	r3, [r7, #8]
 8001146:	4b11      	ldr	r3, [pc, #68]	; (800118c <HAL_TIM_MspPostInit+0x6c>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114a:	4a10      	ldr	r2, [pc, #64]	; (800118c <HAL_TIM_MspPostInit+0x6c>)
 800114c:	f043 0308 	orr.w	r3, r3, #8
 8001150:	6313      	str	r3, [r2, #48]	; 0x30
 8001152:	4b0e      	ldr	r3, [pc, #56]	; (800118c <HAL_TIM_MspPostInit+0x6c>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	f003 0308 	and.w	r3, r3, #8
 800115a:	60bb      	str	r3, [r7, #8]
 800115c:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800115e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001162:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001164:	2302      	movs	r3, #2
 8001166:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001168:	2300      	movs	r3, #0
 800116a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800116c:	2300      	movs	r3, #0
 800116e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001170:	2302      	movs	r3, #2
 8001172:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001174:	f107 030c 	add.w	r3, r7, #12
 8001178:	4619      	mov	r1, r3
 800117a:	4805      	ldr	r0, [pc, #20]	; (8001190 <HAL_TIM_MspPostInit+0x70>)
 800117c:	f000 fe58 	bl	8001e30 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001180:	bf00      	nop
 8001182:	3720      	adds	r7, #32
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	40000800 	.word	0x40000800
 800118c:	40023800 	.word	0x40023800
 8001190:	40020c00 	.word	0x40020c00

08001194 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001198:	4b11      	ldr	r3, [pc, #68]	; (80011e0 <MX_USART3_UART_Init+0x4c>)
 800119a:	4a12      	ldr	r2, [pc, #72]	; (80011e4 <MX_USART3_UART_Init+0x50>)
 800119c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800119e:	4b10      	ldr	r3, [pc, #64]	; (80011e0 <MX_USART3_UART_Init+0x4c>)
 80011a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011a4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80011a6:	4b0e      	ldr	r3, [pc, #56]	; (80011e0 <MX_USART3_UART_Init+0x4c>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80011ac:	4b0c      	ldr	r3, [pc, #48]	; (80011e0 <MX_USART3_UART_Init+0x4c>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80011b2:	4b0b      	ldr	r3, [pc, #44]	; (80011e0 <MX_USART3_UART_Init+0x4c>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80011b8:	4b09      	ldr	r3, [pc, #36]	; (80011e0 <MX_USART3_UART_Init+0x4c>)
 80011ba:	220c      	movs	r2, #12
 80011bc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011be:	4b08      	ldr	r3, [pc, #32]	; (80011e0 <MX_USART3_UART_Init+0x4c>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80011c4:	4b06      	ldr	r3, [pc, #24]	; (80011e0 <MX_USART3_UART_Init+0x4c>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80011ca:	4805      	ldr	r0, [pc, #20]	; (80011e0 <MX_USART3_UART_Init+0x4c>)
 80011cc:	f003 f9ac 	bl	8004528 <HAL_UART_Init>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80011d6:	f7ff fcfb 	bl	8000bd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80011da:	bf00      	nop
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	20000190 	.word	0x20000190
 80011e4:	40004800 	.word	0x40004800

080011e8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b08a      	sub	sp, #40	; 0x28
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f0:	f107 0314 	add.w	r3, r7, #20
 80011f4:	2200      	movs	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]
 80011f8:	605a      	str	r2, [r3, #4]
 80011fa:	609a      	str	r2, [r3, #8]
 80011fc:	60da      	str	r2, [r3, #12]
 80011fe:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a1d      	ldr	r2, [pc, #116]	; (800127c <HAL_UART_MspInit+0x94>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d134      	bne.n	8001274 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800120a:	2300      	movs	r3, #0
 800120c:	613b      	str	r3, [r7, #16]
 800120e:	4b1c      	ldr	r3, [pc, #112]	; (8001280 <HAL_UART_MspInit+0x98>)
 8001210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001212:	4a1b      	ldr	r2, [pc, #108]	; (8001280 <HAL_UART_MspInit+0x98>)
 8001214:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001218:	6413      	str	r3, [r2, #64]	; 0x40
 800121a:	4b19      	ldr	r3, [pc, #100]	; (8001280 <HAL_UART_MspInit+0x98>)
 800121c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001222:	613b      	str	r3, [r7, #16]
 8001224:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001226:	2300      	movs	r3, #0
 8001228:	60fb      	str	r3, [r7, #12]
 800122a:	4b15      	ldr	r3, [pc, #84]	; (8001280 <HAL_UART_MspInit+0x98>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122e:	4a14      	ldr	r2, [pc, #80]	; (8001280 <HAL_UART_MspInit+0x98>)
 8001230:	f043 0302 	orr.w	r3, r3, #2
 8001234:	6313      	str	r3, [r2, #48]	; 0x30
 8001236:	4b12      	ldr	r3, [pc, #72]	; (8001280 <HAL_UART_MspInit+0x98>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	f003 0302 	and.w	r3, r3, #2
 800123e:	60fb      	str	r3, [r7, #12]
 8001240:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001242:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001246:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001248:	2302      	movs	r3, #2
 800124a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124c:	2300      	movs	r3, #0
 800124e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001250:	2303      	movs	r3, #3
 8001252:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001254:	2307      	movs	r3, #7
 8001256:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001258:	f107 0314 	add.w	r3, r7, #20
 800125c:	4619      	mov	r1, r3
 800125e:	4809      	ldr	r0, [pc, #36]	; (8001284 <HAL_UART_MspInit+0x9c>)
 8001260:	f000 fde6 	bl	8001e30 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001264:	2200      	movs	r2, #0
 8001266:	2100      	movs	r1, #0
 8001268:	2027      	movs	r0, #39	; 0x27
 800126a:	f000 f9a8 	bl	80015be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800126e:	2027      	movs	r0, #39	; 0x27
 8001270:	f000 f9c1 	bl	80015f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001274:	bf00      	nop
 8001276:	3728      	adds	r7, #40	; 0x28
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	40004800 	.word	0x40004800
 8001280:	40023800 	.word	0x40023800
 8001284:	40020400 	.word	0x40020400

08001288 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001288:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012c0 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800128c:	480d      	ldr	r0, [pc, #52]	; (80012c4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800128e:	490e      	ldr	r1, [pc, #56]	; (80012c8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001290:	4a0e      	ldr	r2, [pc, #56]	; (80012cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001292:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001294:	e002      	b.n	800129c <LoopCopyDataInit>

08001296 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001296:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001298:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800129a:	3304      	adds	r3, #4

0800129c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800129c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800129e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012a0:	d3f9      	bcc.n	8001296 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012a2:	4a0b      	ldr	r2, [pc, #44]	; (80012d0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80012a4:	4c0b      	ldr	r4, [pc, #44]	; (80012d4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80012a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012a8:	e001      	b.n	80012ae <LoopFillZerobss>

080012aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012ac:	3204      	adds	r2, #4

080012ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012b0:	d3fb      	bcc.n	80012aa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80012b2:	f7ff fd95 	bl	8000de0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012b6:	f004 f951 	bl	800555c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012ba:	f7ff fab5 	bl	8000828 <main>
  bx  lr    
 80012be:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80012c0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80012c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012c8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80012cc:	080066ec 	.word	0x080066ec
  ldr r2, =_sbss
 80012d0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80012d4:	200001e8 	.word	0x200001e8

080012d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012d8:	e7fe      	b.n	80012d8 <ADC_IRQHandler>
	...

080012dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012e0:	4b0e      	ldr	r3, [pc, #56]	; (800131c <HAL_Init+0x40>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a0d      	ldr	r2, [pc, #52]	; (800131c <HAL_Init+0x40>)
 80012e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012ec:	4b0b      	ldr	r3, [pc, #44]	; (800131c <HAL_Init+0x40>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a0a      	ldr	r2, [pc, #40]	; (800131c <HAL_Init+0x40>)
 80012f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012f8:	4b08      	ldr	r3, [pc, #32]	; (800131c <HAL_Init+0x40>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a07      	ldr	r2, [pc, #28]	; (800131c <HAL_Init+0x40>)
 80012fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001302:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001304:	2003      	movs	r0, #3
 8001306:	f000 f94f 	bl	80015a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800130a:	2000      	movs	r0, #0
 800130c:	f000 f808 	bl	8001320 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001310:	f7ff fc64 	bl	8000bdc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001314:	2300      	movs	r3, #0
}
 8001316:	4618      	mov	r0, r3
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	40023c00 	.word	0x40023c00

08001320 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001328:	4b12      	ldr	r3, [pc, #72]	; (8001374 <HAL_InitTick+0x54>)
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	4b12      	ldr	r3, [pc, #72]	; (8001378 <HAL_InitTick+0x58>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	4619      	mov	r1, r3
 8001332:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001336:	fbb3 f3f1 	udiv	r3, r3, r1
 800133a:	fbb2 f3f3 	udiv	r3, r2, r3
 800133e:	4618      	mov	r0, r3
 8001340:	f000 f967 	bl	8001612 <HAL_SYSTICK_Config>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e00e      	b.n	800136c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2b0f      	cmp	r3, #15
 8001352:	d80a      	bhi.n	800136a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001354:	2200      	movs	r2, #0
 8001356:	6879      	ldr	r1, [r7, #4]
 8001358:	f04f 30ff 	mov.w	r0, #4294967295
 800135c:	f000 f92f 	bl	80015be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001360:	4a06      	ldr	r2, [pc, #24]	; (800137c <HAL_InitTick+0x5c>)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001366:	2300      	movs	r3, #0
 8001368:	e000      	b.n	800136c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800136a:	2301      	movs	r3, #1
}
 800136c:	4618      	mov	r0, r3
 800136e:	3708      	adds	r7, #8
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	20000000 	.word	0x20000000
 8001378:	20000008 	.word	0x20000008
 800137c:	20000004 	.word	0x20000004

08001380 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001384:	4b06      	ldr	r3, [pc, #24]	; (80013a0 <HAL_IncTick+0x20>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	461a      	mov	r2, r3
 800138a:	4b06      	ldr	r3, [pc, #24]	; (80013a4 <HAL_IncTick+0x24>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4413      	add	r3, r2
 8001390:	4a04      	ldr	r2, [pc, #16]	; (80013a4 <HAL_IncTick+0x24>)
 8001392:	6013      	str	r3, [r2, #0]
}
 8001394:	bf00      	nop
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	20000008 	.word	0x20000008
 80013a4:	200001d4 	.word	0x200001d4

080013a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  return uwTick;
 80013ac:	4b03      	ldr	r3, [pc, #12]	; (80013bc <HAL_GetTick+0x14>)
 80013ae:	681b      	ldr	r3, [r3, #0]
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	200001d4 	.word	0x200001d4

080013c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013c8:	f7ff ffee 	bl	80013a8 <HAL_GetTick>
 80013cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013d8:	d005      	beq.n	80013e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013da:	4b0a      	ldr	r3, [pc, #40]	; (8001404 <HAL_Delay+0x44>)
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	461a      	mov	r2, r3
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	4413      	add	r3, r2
 80013e4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80013e6:	bf00      	nop
 80013e8:	f7ff ffde 	bl	80013a8 <HAL_GetTick>
 80013ec:	4602      	mov	r2, r0
 80013ee:	68bb      	ldr	r3, [r7, #8]
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	68fa      	ldr	r2, [r7, #12]
 80013f4:	429a      	cmp	r2, r3
 80013f6:	d8f7      	bhi.n	80013e8 <HAL_Delay+0x28>
  {
  }
}
 80013f8:	bf00      	nop
 80013fa:	bf00      	nop
 80013fc:	3710      	adds	r7, #16
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	20000008 	.word	0x20000008

08001408 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001408:	b480      	push	{r7}
 800140a:	b085      	sub	sp, #20
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	f003 0307 	and.w	r3, r3, #7
 8001416:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001418:	4b0c      	ldr	r3, [pc, #48]	; (800144c <__NVIC_SetPriorityGrouping+0x44>)
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800141e:	68ba      	ldr	r2, [r7, #8]
 8001420:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001424:	4013      	ands	r3, r2
 8001426:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001430:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001434:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001438:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800143a:	4a04      	ldr	r2, [pc, #16]	; (800144c <__NVIC_SetPriorityGrouping+0x44>)
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	60d3      	str	r3, [r2, #12]
}
 8001440:	bf00      	nop
 8001442:	3714      	adds	r7, #20
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr
 800144c:	e000ed00 	.word	0xe000ed00

08001450 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001454:	4b04      	ldr	r3, [pc, #16]	; (8001468 <__NVIC_GetPriorityGrouping+0x18>)
 8001456:	68db      	ldr	r3, [r3, #12]
 8001458:	0a1b      	lsrs	r3, r3, #8
 800145a:	f003 0307 	and.w	r3, r3, #7
}
 800145e:	4618      	mov	r0, r3
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr
 8001468:	e000ed00 	.word	0xe000ed00

0800146c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	4603      	mov	r3, r0
 8001474:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147a:	2b00      	cmp	r3, #0
 800147c:	db0b      	blt.n	8001496 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800147e:	79fb      	ldrb	r3, [r7, #7]
 8001480:	f003 021f 	and.w	r2, r3, #31
 8001484:	4907      	ldr	r1, [pc, #28]	; (80014a4 <__NVIC_EnableIRQ+0x38>)
 8001486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800148a:	095b      	lsrs	r3, r3, #5
 800148c:	2001      	movs	r0, #1
 800148e:	fa00 f202 	lsl.w	r2, r0, r2
 8001492:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001496:	bf00      	nop
 8001498:	370c      	adds	r7, #12
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	e000e100 	.word	0xe000e100

080014a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	4603      	mov	r3, r0
 80014b0:	6039      	str	r1, [r7, #0]
 80014b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	db0a      	blt.n	80014d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	b2da      	uxtb	r2, r3
 80014c0:	490c      	ldr	r1, [pc, #48]	; (80014f4 <__NVIC_SetPriority+0x4c>)
 80014c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c6:	0112      	lsls	r2, r2, #4
 80014c8:	b2d2      	uxtb	r2, r2
 80014ca:	440b      	add	r3, r1
 80014cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014d0:	e00a      	b.n	80014e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	b2da      	uxtb	r2, r3
 80014d6:	4908      	ldr	r1, [pc, #32]	; (80014f8 <__NVIC_SetPriority+0x50>)
 80014d8:	79fb      	ldrb	r3, [r7, #7]
 80014da:	f003 030f 	and.w	r3, r3, #15
 80014de:	3b04      	subs	r3, #4
 80014e0:	0112      	lsls	r2, r2, #4
 80014e2:	b2d2      	uxtb	r2, r2
 80014e4:	440b      	add	r3, r1
 80014e6:	761a      	strb	r2, [r3, #24]
}
 80014e8:	bf00      	nop
 80014ea:	370c      	adds	r7, #12
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr
 80014f4:	e000e100 	.word	0xe000e100
 80014f8:	e000ed00 	.word	0xe000ed00

080014fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b089      	sub	sp, #36	; 0x24
 8001500:	af00      	add	r7, sp, #0
 8001502:	60f8      	str	r0, [r7, #12]
 8001504:	60b9      	str	r1, [r7, #8]
 8001506:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	f003 0307 	and.w	r3, r3, #7
 800150e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	f1c3 0307 	rsb	r3, r3, #7
 8001516:	2b04      	cmp	r3, #4
 8001518:	bf28      	it	cs
 800151a:	2304      	movcs	r3, #4
 800151c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	3304      	adds	r3, #4
 8001522:	2b06      	cmp	r3, #6
 8001524:	d902      	bls.n	800152c <NVIC_EncodePriority+0x30>
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	3b03      	subs	r3, #3
 800152a:	e000      	b.n	800152e <NVIC_EncodePriority+0x32>
 800152c:	2300      	movs	r3, #0
 800152e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001530:	f04f 32ff 	mov.w	r2, #4294967295
 8001534:	69bb      	ldr	r3, [r7, #24]
 8001536:	fa02 f303 	lsl.w	r3, r2, r3
 800153a:	43da      	mvns	r2, r3
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	401a      	ands	r2, r3
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001544:	f04f 31ff 	mov.w	r1, #4294967295
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	fa01 f303 	lsl.w	r3, r1, r3
 800154e:	43d9      	mvns	r1, r3
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001554:	4313      	orrs	r3, r2
         );
}
 8001556:	4618      	mov	r0, r3
 8001558:	3724      	adds	r7, #36	; 0x24
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
	...

08001564 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	3b01      	subs	r3, #1
 8001570:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001574:	d301      	bcc.n	800157a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001576:	2301      	movs	r3, #1
 8001578:	e00f      	b.n	800159a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800157a:	4a0a      	ldr	r2, [pc, #40]	; (80015a4 <SysTick_Config+0x40>)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	3b01      	subs	r3, #1
 8001580:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001582:	210f      	movs	r1, #15
 8001584:	f04f 30ff 	mov.w	r0, #4294967295
 8001588:	f7ff ff8e 	bl	80014a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800158c:	4b05      	ldr	r3, [pc, #20]	; (80015a4 <SysTick_Config+0x40>)
 800158e:	2200      	movs	r2, #0
 8001590:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001592:	4b04      	ldr	r3, [pc, #16]	; (80015a4 <SysTick_Config+0x40>)
 8001594:	2207      	movs	r2, #7
 8001596:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001598:	2300      	movs	r3, #0
}
 800159a:	4618      	mov	r0, r3
 800159c:	3708      	adds	r7, #8
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	e000e010 	.word	0xe000e010

080015a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015b0:	6878      	ldr	r0, [r7, #4]
 80015b2:	f7ff ff29 	bl	8001408 <__NVIC_SetPriorityGrouping>
}
 80015b6:	bf00      	nop
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}

080015be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015be:	b580      	push	{r7, lr}
 80015c0:	b086      	sub	sp, #24
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	4603      	mov	r3, r0
 80015c6:	60b9      	str	r1, [r7, #8]
 80015c8:	607a      	str	r2, [r7, #4]
 80015ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015cc:	2300      	movs	r3, #0
 80015ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015d0:	f7ff ff3e 	bl	8001450 <__NVIC_GetPriorityGrouping>
 80015d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	68b9      	ldr	r1, [r7, #8]
 80015da:	6978      	ldr	r0, [r7, #20]
 80015dc:	f7ff ff8e 	bl	80014fc <NVIC_EncodePriority>
 80015e0:	4602      	mov	r2, r0
 80015e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015e6:	4611      	mov	r1, r2
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7ff ff5d 	bl	80014a8 <__NVIC_SetPriority>
}
 80015ee:	bf00      	nop
 80015f0:	3718      	adds	r7, #24
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}

080015f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015f6:	b580      	push	{r7, lr}
 80015f8:	b082      	sub	sp, #8
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	4603      	mov	r3, r0
 80015fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001600:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001604:	4618      	mov	r0, r3
 8001606:	f7ff ff31 	bl	800146c <__NVIC_EnableIRQ>
}
 800160a:	bf00      	nop
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}

08001612 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001612:	b580      	push	{r7, lr}
 8001614:	b082      	sub	sp, #8
 8001616:	af00      	add	r7, sp, #0
 8001618:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f7ff ffa2 	bl	8001564 <SysTick_Config>
 8001620:	4603      	mov	r3, r0
}
 8001622:	4618      	mov	r0, r3
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
	...

0800162c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b086      	sub	sp, #24
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001634:	2300      	movs	r3, #0
 8001636:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001638:	f7ff feb6 	bl	80013a8 <HAL_GetTick>
 800163c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d101      	bne.n	8001648 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001644:	2301      	movs	r3, #1
 8001646:	e099      	b.n	800177c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2202      	movs	r2, #2
 800164c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2200      	movs	r2, #0
 8001654:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f022 0201 	bic.w	r2, r2, #1
 8001666:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001668:	e00f      	b.n	800168a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800166a:	f7ff fe9d 	bl	80013a8 <HAL_GetTick>
 800166e:	4602      	mov	r2, r0
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	2b05      	cmp	r3, #5
 8001676:	d908      	bls.n	800168a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2220      	movs	r2, #32
 800167c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2203      	movs	r2, #3
 8001682:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	e078      	b.n	800177c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f003 0301 	and.w	r3, r3, #1
 8001694:	2b00      	cmp	r3, #0
 8001696:	d1e8      	bne.n	800166a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80016a0:	697a      	ldr	r2, [r7, #20]
 80016a2:	4b38      	ldr	r3, [pc, #224]	; (8001784 <HAL_DMA_Init+0x158>)
 80016a4:	4013      	ands	r3, r2
 80016a6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	685a      	ldr	r2, [r3, #4]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80016b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	691b      	ldr	r3, [r3, #16]
 80016bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	699b      	ldr	r3, [r3, #24]
 80016c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6a1b      	ldr	r3, [r3, #32]
 80016d4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80016d6:	697a      	ldr	r2, [r7, #20]
 80016d8:	4313      	orrs	r3, r2
 80016da:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e0:	2b04      	cmp	r3, #4
 80016e2:	d107      	bne.n	80016f4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ec:	4313      	orrs	r3, r2
 80016ee:	697a      	ldr	r2, [r7, #20]
 80016f0:	4313      	orrs	r3, r2
 80016f2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	697a      	ldr	r2, [r7, #20]
 80016fa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	695b      	ldr	r3, [r3, #20]
 8001702:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	f023 0307 	bic.w	r3, r3, #7
 800170a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001710:	697a      	ldr	r2, [r7, #20]
 8001712:	4313      	orrs	r3, r2
 8001714:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800171a:	2b04      	cmp	r3, #4
 800171c:	d117      	bne.n	800174e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001722:	697a      	ldr	r2, [r7, #20]
 8001724:	4313      	orrs	r3, r2
 8001726:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800172c:	2b00      	cmp	r3, #0
 800172e:	d00e      	beq.n	800174e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001730:	6878      	ldr	r0, [r7, #4]
 8001732:	f000 fb01 	bl	8001d38 <DMA_CheckFifoParam>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d008      	beq.n	800174e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2240      	movs	r2, #64	; 0x40
 8001740:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2201      	movs	r2, #1
 8001746:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800174a:	2301      	movs	r3, #1
 800174c:	e016      	b.n	800177c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	697a      	ldr	r2, [r7, #20]
 8001754:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f000 fab8 	bl	8001ccc <DMA_CalcBaseAndBitshift>
 800175c:	4603      	mov	r3, r0
 800175e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001764:	223f      	movs	r2, #63	; 0x3f
 8001766:	409a      	lsls	r2, r3
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2200      	movs	r2, #0
 8001770:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2201      	movs	r2, #1
 8001776:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800177a:	2300      	movs	r3, #0
}
 800177c:	4618      	mov	r0, r3
 800177e:	3718      	adds	r7, #24
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	f010803f 	.word	0xf010803f

08001788 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b086      	sub	sp, #24
 800178c:	af00      	add	r7, sp, #0
 800178e:	60f8      	str	r0, [r7, #12]
 8001790:	60b9      	str	r1, [r7, #8]
 8001792:	607a      	str	r2, [r7, #4]
 8001794:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001796:	2300      	movs	r3, #0
 8001798:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800179e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d101      	bne.n	80017ae <HAL_DMA_Start_IT+0x26>
 80017aa:	2302      	movs	r3, #2
 80017ac:	e040      	b.n	8001830 <HAL_DMA_Start_IT+0xa8>
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	2201      	movs	r2, #1
 80017b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d12f      	bne.n	8001822 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	2202      	movs	r2, #2
 80017c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	2200      	movs	r2, #0
 80017ce:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	687a      	ldr	r2, [r7, #4]
 80017d4:	68b9      	ldr	r1, [r7, #8]
 80017d6:	68f8      	ldr	r0, [r7, #12]
 80017d8:	f000 fa4a 	bl	8001c70 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017e0:	223f      	movs	r2, #63	; 0x3f
 80017e2:	409a      	lsls	r2, r3
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f042 0216 	orr.w	r2, r2, #22
 80017f6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d007      	beq.n	8001810 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f042 0208 	orr.w	r2, r2, #8
 800180e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f042 0201 	orr.w	r2, r2, #1
 800181e:	601a      	str	r2, [r3, #0]
 8001820:	e005      	b.n	800182e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	2200      	movs	r2, #0
 8001826:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800182a:	2302      	movs	r3, #2
 800182c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800182e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001830:	4618      	mov	r0, r3
 8001832:	3718      	adds	r7, #24
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}

08001838 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001844:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001846:	f7ff fdaf 	bl	80013a8 <HAL_GetTick>
 800184a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001852:	b2db      	uxtb	r3, r3
 8001854:	2b02      	cmp	r3, #2
 8001856:	d008      	beq.n	800186a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2280      	movs	r2, #128	; 0x80
 800185c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2200      	movs	r2, #0
 8001862:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e052      	b.n	8001910 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f022 0216 	bic.w	r2, r2, #22
 8001878:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	695a      	ldr	r2, [r3, #20]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001888:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188e:	2b00      	cmp	r3, #0
 8001890:	d103      	bne.n	800189a <HAL_DMA_Abort+0x62>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001896:	2b00      	cmp	r3, #0
 8001898:	d007      	beq.n	80018aa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f022 0208 	bic.w	r2, r2, #8
 80018a8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f022 0201 	bic.w	r2, r2, #1
 80018b8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018ba:	e013      	b.n	80018e4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80018bc:	f7ff fd74 	bl	80013a8 <HAL_GetTick>
 80018c0:	4602      	mov	r2, r0
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	2b05      	cmp	r3, #5
 80018c8:	d90c      	bls.n	80018e4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2220      	movs	r2, #32
 80018ce:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2203      	movs	r2, #3
 80018d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2200      	movs	r2, #0
 80018dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80018e0:	2303      	movs	r3, #3
 80018e2:	e015      	b.n	8001910 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 0301 	and.w	r3, r3, #1
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d1e4      	bne.n	80018bc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018f6:	223f      	movs	r2, #63	; 0x3f
 80018f8:	409a      	lsls	r2, r3
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2201      	movs	r2, #1
 8001902:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2200      	movs	r2, #0
 800190a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800190e:	2300      	movs	r3, #0
}
 8001910:	4618      	mov	r0, r3
 8001912:	3710      	adds	r7, #16
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}

08001918 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001926:	b2db      	uxtb	r3, r3
 8001928:	2b02      	cmp	r3, #2
 800192a:	d004      	beq.n	8001936 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2280      	movs	r2, #128	; 0x80
 8001930:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e00c      	b.n	8001950 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2205      	movs	r2, #5
 800193a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f022 0201 	bic.w	r2, r2, #1
 800194c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800194e:	2300      	movs	r3, #0
}
 8001950:	4618      	mov	r0, r3
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr

0800195c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b086      	sub	sp, #24
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001964:	2300      	movs	r3, #0
 8001966:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001968:	4b8e      	ldr	r3, [pc, #568]	; (8001ba4 <HAL_DMA_IRQHandler+0x248>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a8e      	ldr	r2, [pc, #568]	; (8001ba8 <HAL_DMA_IRQHandler+0x24c>)
 800196e:	fba2 2303 	umull	r2, r3, r2, r3
 8001972:	0a9b      	lsrs	r3, r3, #10
 8001974:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800197a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001986:	2208      	movs	r2, #8
 8001988:	409a      	lsls	r2, r3
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	4013      	ands	r3, r2
 800198e:	2b00      	cmp	r3, #0
 8001990:	d01a      	beq.n	80019c8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 0304 	and.w	r3, r3, #4
 800199c:	2b00      	cmp	r3, #0
 800199e:	d013      	beq.n	80019c8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f022 0204 	bic.w	r2, r2, #4
 80019ae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019b4:	2208      	movs	r2, #8
 80019b6:	409a      	lsls	r2, r3
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019c0:	f043 0201 	orr.w	r2, r3, #1
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019cc:	2201      	movs	r2, #1
 80019ce:	409a      	lsls	r2, r3
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	4013      	ands	r3, r2
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d012      	beq.n	80019fe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	695b      	ldr	r3, [r3, #20]
 80019de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d00b      	beq.n	80019fe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019ea:	2201      	movs	r2, #1
 80019ec:	409a      	lsls	r2, r3
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019f6:	f043 0202 	orr.w	r2, r3, #2
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a02:	2204      	movs	r2, #4
 8001a04:	409a      	lsls	r2, r3
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	4013      	ands	r3, r2
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d012      	beq.n	8001a34 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 0302 	and.w	r3, r3, #2
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d00b      	beq.n	8001a34 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a20:	2204      	movs	r2, #4
 8001a22:	409a      	lsls	r2, r3
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a2c:	f043 0204 	orr.w	r2, r3, #4
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a38:	2210      	movs	r2, #16
 8001a3a:	409a      	lsls	r2, r3
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	4013      	ands	r3, r2
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d043      	beq.n	8001acc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 0308 	and.w	r3, r3, #8
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d03c      	beq.n	8001acc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a56:	2210      	movs	r2, #16
 8001a58:	409a      	lsls	r2, r3
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d018      	beq.n	8001a9e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d108      	bne.n	8001a8c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d024      	beq.n	8001acc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	4798      	blx	r3
 8001a8a:	e01f      	b.n	8001acc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d01b      	beq.n	8001acc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	4798      	blx	r3
 8001a9c:	e016      	b.n	8001acc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d107      	bne.n	8001abc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f022 0208 	bic.w	r2, r2, #8
 8001aba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d003      	beq.n	8001acc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ad0:	2220      	movs	r2, #32
 8001ad2:	409a      	lsls	r2, r3
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	f000 808f 	beq.w	8001bfc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 0310 	and.w	r3, r3, #16
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	f000 8087 	beq.w	8001bfc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001af2:	2220      	movs	r2, #32
 8001af4:	409a      	lsls	r2, r3
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	2b05      	cmp	r3, #5
 8001b04:	d136      	bne.n	8001b74 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f022 0216 	bic.w	r2, r2, #22
 8001b14:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	695a      	ldr	r2, [r3, #20]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b24:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d103      	bne.n	8001b36 <HAL_DMA_IRQHandler+0x1da>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d007      	beq.n	8001b46 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f022 0208 	bic.w	r2, r2, #8
 8001b44:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b4a:	223f      	movs	r2, #63	; 0x3f
 8001b4c:	409a      	lsls	r2, r3
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2201      	movs	r2, #1
 8001b56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d07e      	beq.n	8001c68 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	4798      	blx	r3
        }
        return;
 8001b72:	e079      	b.n	8001c68 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d01d      	beq.n	8001bbe <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d10d      	bne.n	8001bac <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d031      	beq.n	8001bfc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	4798      	blx	r3
 8001ba0:	e02c      	b.n	8001bfc <HAL_DMA_IRQHandler+0x2a0>
 8001ba2:	bf00      	nop
 8001ba4:	20000000 	.word	0x20000000
 8001ba8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d023      	beq.n	8001bfc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	4798      	blx	r3
 8001bbc:	e01e      	b.n	8001bfc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d10f      	bne.n	8001bec <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f022 0210 	bic.w	r2, r2, #16
 8001bda:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2201      	movs	r2, #1
 8001be0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2200      	movs	r2, #0
 8001be8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d003      	beq.n	8001bfc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d032      	beq.n	8001c6a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c08:	f003 0301 	and.w	r3, r3, #1
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d022      	beq.n	8001c56 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2205      	movs	r2, #5
 8001c14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f022 0201 	bic.w	r2, r2, #1
 8001c26:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	60bb      	str	r3, [r7, #8]
 8001c2e:	697a      	ldr	r2, [r7, #20]
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d307      	bcc.n	8001c44 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 0301 	and.w	r3, r3, #1
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d1f2      	bne.n	8001c28 <HAL_DMA_IRQHandler+0x2cc>
 8001c42:	e000      	b.n	8001c46 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001c44:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2201      	movs	r2, #1
 8001c4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2200      	movs	r2, #0
 8001c52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d005      	beq.n	8001c6a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	4798      	blx	r3
 8001c66:	e000      	b.n	8001c6a <HAL_DMA_IRQHandler+0x30e>
        return;
 8001c68:	bf00      	nop
    }
  }
}
 8001c6a:	3718      	adds	r7, #24
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}

08001c70 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b085      	sub	sp, #20
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	60f8      	str	r0, [r7, #12]
 8001c78:	60b9      	str	r1, [r7, #8]
 8001c7a:	607a      	str	r2, [r7, #4]
 8001c7c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001c8c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	683a      	ldr	r2, [r7, #0]
 8001c94:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	2b40      	cmp	r3, #64	; 0x40
 8001c9c:	d108      	bne.n	8001cb0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	687a      	ldr	r2, [r7, #4]
 8001ca4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	68ba      	ldr	r2, [r7, #8]
 8001cac:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001cae:	e007      	b.n	8001cc0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	68ba      	ldr	r2, [r7, #8]
 8001cb6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	687a      	ldr	r2, [r7, #4]
 8001cbe:	60da      	str	r2, [r3, #12]
}
 8001cc0:	bf00      	nop
 8001cc2:	3714      	adds	r7, #20
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr

08001ccc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b085      	sub	sp, #20
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	3b10      	subs	r3, #16
 8001cdc:	4a14      	ldr	r2, [pc, #80]	; (8001d30 <DMA_CalcBaseAndBitshift+0x64>)
 8001cde:	fba2 2303 	umull	r2, r3, r2, r3
 8001ce2:	091b      	lsrs	r3, r3, #4
 8001ce4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001ce6:	4a13      	ldr	r2, [pc, #76]	; (8001d34 <DMA_CalcBaseAndBitshift+0x68>)
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	4413      	add	r3, r2
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	461a      	mov	r2, r3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	2b03      	cmp	r3, #3
 8001cf8:	d909      	bls.n	8001d0e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001d02:	f023 0303 	bic.w	r3, r3, #3
 8001d06:	1d1a      	adds	r2, r3, #4
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	659a      	str	r2, [r3, #88]	; 0x58
 8001d0c:	e007      	b.n	8001d1e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001d16:	f023 0303 	bic.w	r3, r3, #3
 8001d1a:	687a      	ldr	r2, [r7, #4]
 8001d1c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3714      	adds	r7, #20
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	aaaaaaab 	.word	0xaaaaaaab
 8001d34:	0800663c 	.word	0x0800663c

08001d38 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b085      	sub	sp, #20
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d40:	2300      	movs	r3, #0
 8001d42:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d48:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	699b      	ldr	r3, [r3, #24]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d11f      	bne.n	8001d92 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	2b03      	cmp	r3, #3
 8001d56:	d856      	bhi.n	8001e06 <DMA_CheckFifoParam+0xce>
 8001d58:	a201      	add	r2, pc, #4	; (adr r2, 8001d60 <DMA_CheckFifoParam+0x28>)
 8001d5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d5e:	bf00      	nop
 8001d60:	08001d71 	.word	0x08001d71
 8001d64:	08001d83 	.word	0x08001d83
 8001d68:	08001d71 	.word	0x08001d71
 8001d6c:	08001e07 	.word	0x08001e07
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d046      	beq.n	8001e0a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d80:	e043      	b.n	8001e0a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d86:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001d8a:	d140      	bne.n	8001e0e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d90:	e03d      	b.n	8001e0e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	699b      	ldr	r3, [r3, #24]
 8001d96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d9a:	d121      	bne.n	8001de0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	2b03      	cmp	r3, #3
 8001da0:	d837      	bhi.n	8001e12 <DMA_CheckFifoParam+0xda>
 8001da2:	a201      	add	r2, pc, #4	; (adr r2, 8001da8 <DMA_CheckFifoParam+0x70>)
 8001da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001da8:	08001db9 	.word	0x08001db9
 8001dac:	08001dbf 	.word	0x08001dbf
 8001db0:	08001db9 	.word	0x08001db9
 8001db4:	08001dd1 	.word	0x08001dd1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	73fb      	strb	r3, [r7, #15]
      break;
 8001dbc:	e030      	b.n	8001e20 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dc2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d025      	beq.n	8001e16 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001dce:	e022      	b.n	8001e16 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dd4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001dd8:	d11f      	bne.n	8001e1a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001dde:	e01c      	b.n	8001e1a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	2b02      	cmp	r3, #2
 8001de4:	d903      	bls.n	8001dee <DMA_CheckFifoParam+0xb6>
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	2b03      	cmp	r3, #3
 8001dea:	d003      	beq.n	8001df4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001dec:	e018      	b.n	8001e20 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	73fb      	strb	r3, [r7, #15]
      break;
 8001df2:	e015      	b.n	8001e20 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001df8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d00e      	beq.n	8001e1e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	73fb      	strb	r3, [r7, #15]
      break;
 8001e04:	e00b      	b.n	8001e1e <DMA_CheckFifoParam+0xe6>
      break;
 8001e06:	bf00      	nop
 8001e08:	e00a      	b.n	8001e20 <DMA_CheckFifoParam+0xe8>
      break;
 8001e0a:	bf00      	nop
 8001e0c:	e008      	b.n	8001e20 <DMA_CheckFifoParam+0xe8>
      break;
 8001e0e:	bf00      	nop
 8001e10:	e006      	b.n	8001e20 <DMA_CheckFifoParam+0xe8>
      break;
 8001e12:	bf00      	nop
 8001e14:	e004      	b.n	8001e20 <DMA_CheckFifoParam+0xe8>
      break;
 8001e16:	bf00      	nop
 8001e18:	e002      	b.n	8001e20 <DMA_CheckFifoParam+0xe8>
      break;   
 8001e1a:	bf00      	nop
 8001e1c:	e000      	b.n	8001e20 <DMA_CheckFifoParam+0xe8>
      break;
 8001e1e:	bf00      	nop
    }
  } 
  
  return status; 
 8001e20:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3714      	adds	r7, #20
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop

08001e30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b089      	sub	sp, #36	; 0x24
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e42:	2300      	movs	r3, #0
 8001e44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e46:	2300      	movs	r3, #0
 8001e48:	61fb      	str	r3, [r7, #28]
 8001e4a:	e177      	b.n	800213c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	fa02 f303 	lsl.w	r3, r2, r3
 8001e54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	697a      	ldr	r2, [r7, #20]
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e60:	693a      	ldr	r2, [r7, #16]
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	429a      	cmp	r2, r3
 8001e66:	f040 8166 	bne.w	8002136 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f003 0303 	and.w	r3, r3, #3
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d005      	beq.n	8001e82 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d130      	bne.n	8001ee4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	005b      	lsls	r3, r3, #1
 8001e8c:	2203      	movs	r2, #3
 8001e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e92:	43db      	mvns	r3, r3
 8001e94:	69ba      	ldr	r2, [r7, #24]
 8001e96:	4013      	ands	r3, r2
 8001e98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	68da      	ldr	r2, [r3, #12]
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	005b      	lsls	r3, r3, #1
 8001ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea6:	69ba      	ldr	r2, [r7, #24]
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	69ba      	ldr	r2, [r7, #24]
 8001eb0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001eb8:	2201      	movs	r2, #1
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec0:	43db      	mvns	r3, r3
 8001ec2:	69ba      	ldr	r2, [r7, #24]
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	091b      	lsrs	r3, r3, #4
 8001ece:	f003 0201 	and.w	r2, r3, #1
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed8:	69ba      	ldr	r2, [r7, #24]
 8001eda:	4313      	orrs	r3, r2
 8001edc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	69ba      	ldr	r2, [r7, #24]
 8001ee2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f003 0303 	and.w	r3, r3, #3
 8001eec:	2b03      	cmp	r3, #3
 8001eee:	d017      	beq.n	8001f20 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	005b      	lsls	r3, r3, #1
 8001efa:	2203      	movs	r2, #3
 8001efc:	fa02 f303 	lsl.w	r3, r2, r3
 8001f00:	43db      	mvns	r3, r3
 8001f02:	69ba      	ldr	r2, [r7, #24]
 8001f04:	4013      	ands	r3, r2
 8001f06:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	689a      	ldr	r2, [r3, #8]
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	005b      	lsls	r3, r3, #1
 8001f10:	fa02 f303 	lsl.w	r3, r2, r3
 8001f14:	69ba      	ldr	r2, [r7, #24]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	69ba      	ldr	r2, [r7, #24]
 8001f1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f003 0303 	and.w	r3, r3, #3
 8001f28:	2b02      	cmp	r3, #2
 8001f2a:	d123      	bne.n	8001f74 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	08da      	lsrs	r2, r3, #3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	3208      	adds	r2, #8
 8001f34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f38:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	f003 0307 	and.w	r3, r3, #7
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	220f      	movs	r2, #15
 8001f44:	fa02 f303 	lsl.w	r3, r2, r3
 8001f48:	43db      	mvns	r3, r3
 8001f4a:	69ba      	ldr	r2, [r7, #24]
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	691a      	ldr	r2, [r3, #16]
 8001f54:	69fb      	ldr	r3, [r7, #28]
 8001f56:	f003 0307 	and.w	r3, r3, #7
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f60:	69ba      	ldr	r2, [r7, #24]
 8001f62:	4313      	orrs	r3, r2
 8001f64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	08da      	lsrs	r2, r3, #3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	3208      	adds	r2, #8
 8001f6e:	69b9      	ldr	r1, [r7, #24]
 8001f70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	005b      	lsls	r3, r3, #1
 8001f7e:	2203      	movs	r2, #3
 8001f80:	fa02 f303 	lsl.w	r3, r2, r3
 8001f84:	43db      	mvns	r3, r3
 8001f86:	69ba      	ldr	r2, [r7, #24]
 8001f88:	4013      	ands	r3, r2
 8001f8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f003 0203 	and.w	r2, r3, #3
 8001f94:	69fb      	ldr	r3, [r7, #28]
 8001f96:	005b      	lsls	r3, r3, #1
 8001f98:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9c:	69ba      	ldr	r2, [r7, #24]
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	69ba      	ldr	r2, [r7, #24]
 8001fa6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	f000 80c0 	beq.w	8002136 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	60fb      	str	r3, [r7, #12]
 8001fba:	4b66      	ldr	r3, [pc, #408]	; (8002154 <HAL_GPIO_Init+0x324>)
 8001fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fbe:	4a65      	ldr	r2, [pc, #404]	; (8002154 <HAL_GPIO_Init+0x324>)
 8001fc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fc4:	6453      	str	r3, [r2, #68]	; 0x44
 8001fc6:	4b63      	ldr	r3, [pc, #396]	; (8002154 <HAL_GPIO_Init+0x324>)
 8001fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fce:	60fb      	str	r3, [r7, #12]
 8001fd0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fd2:	4a61      	ldr	r2, [pc, #388]	; (8002158 <HAL_GPIO_Init+0x328>)
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	089b      	lsrs	r3, r3, #2
 8001fd8:	3302      	adds	r3, #2
 8001fda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fde:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	f003 0303 	and.w	r3, r3, #3
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	220f      	movs	r2, #15
 8001fea:	fa02 f303 	lsl.w	r3, r2, r3
 8001fee:	43db      	mvns	r3, r3
 8001ff0:	69ba      	ldr	r2, [r7, #24]
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4a58      	ldr	r2, [pc, #352]	; (800215c <HAL_GPIO_Init+0x32c>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d037      	beq.n	800206e <HAL_GPIO_Init+0x23e>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4a57      	ldr	r2, [pc, #348]	; (8002160 <HAL_GPIO_Init+0x330>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d031      	beq.n	800206a <HAL_GPIO_Init+0x23a>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4a56      	ldr	r2, [pc, #344]	; (8002164 <HAL_GPIO_Init+0x334>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d02b      	beq.n	8002066 <HAL_GPIO_Init+0x236>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a55      	ldr	r2, [pc, #340]	; (8002168 <HAL_GPIO_Init+0x338>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d025      	beq.n	8002062 <HAL_GPIO_Init+0x232>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4a54      	ldr	r2, [pc, #336]	; (800216c <HAL_GPIO_Init+0x33c>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d01f      	beq.n	800205e <HAL_GPIO_Init+0x22e>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a53      	ldr	r2, [pc, #332]	; (8002170 <HAL_GPIO_Init+0x340>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d019      	beq.n	800205a <HAL_GPIO_Init+0x22a>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a52      	ldr	r2, [pc, #328]	; (8002174 <HAL_GPIO_Init+0x344>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d013      	beq.n	8002056 <HAL_GPIO_Init+0x226>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a51      	ldr	r2, [pc, #324]	; (8002178 <HAL_GPIO_Init+0x348>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d00d      	beq.n	8002052 <HAL_GPIO_Init+0x222>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a50      	ldr	r2, [pc, #320]	; (800217c <HAL_GPIO_Init+0x34c>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d007      	beq.n	800204e <HAL_GPIO_Init+0x21e>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a4f      	ldr	r2, [pc, #316]	; (8002180 <HAL_GPIO_Init+0x350>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d101      	bne.n	800204a <HAL_GPIO_Init+0x21a>
 8002046:	2309      	movs	r3, #9
 8002048:	e012      	b.n	8002070 <HAL_GPIO_Init+0x240>
 800204a:	230a      	movs	r3, #10
 800204c:	e010      	b.n	8002070 <HAL_GPIO_Init+0x240>
 800204e:	2308      	movs	r3, #8
 8002050:	e00e      	b.n	8002070 <HAL_GPIO_Init+0x240>
 8002052:	2307      	movs	r3, #7
 8002054:	e00c      	b.n	8002070 <HAL_GPIO_Init+0x240>
 8002056:	2306      	movs	r3, #6
 8002058:	e00a      	b.n	8002070 <HAL_GPIO_Init+0x240>
 800205a:	2305      	movs	r3, #5
 800205c:	e008      	b.n	8002070 <HAL_GPIO_Init+0x240>
 800205e:	2304      	movs	r3, #4
 8002060:	e006      	b.n	8002070 <HAL_GPIO_Init+0x240>
 8002062:	2303      	movs	r3, #3
 8002064:	e004      	b.n	8002070 <HAL_GPIO_Init+0x240>
 8002066:	2302      	movs	r3, #2
 8002068:	e002      	b.n	8002070 <HAL_GPIO_Init+0x240>
 800206a:	2301      	movs	r3, #1
 800206c:	e000      	b.n	8002070 <HAL_GPIO_Init+0x240>
 800206e:	2300      	movs	r3, #0
 8002070:	69fa      	ldr	r2, [r7, #28]
 8002072:	f002 0203 	and.w	r2, r2, #3
 8002076:	0092      	lsls	r2, r2, #2
 8002078:	4093      	lsls	r3, r2
 800207a:	69ba      	ldr	r2, [r7, #24]
 800207c:	4313      	orrs	r3, r2
 800207e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002080:	4935      	ldr	r1, [pc, #212]	; (8002158 <HAL_GPIO_Init+0x328>)
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	089b      	lsrs	r3, r3, #2
 8002086:	3302      	adds	r3, #2
 8002088:	69ba      	ldr	r2, [r7, #24]
 800208a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800208e:	4b3d      	ldr	r3, [pc, #244]	; (8002184 <HAL_GPIO_Init+0x354>)
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	43db      	mvns	r3, r3
 8002098:	69ba      	ldr	r2, [r7, #24]
 800209a:	4013      	ands	r3, r2
 800209c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d003      	beq.n	80020b2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	4313      	orrs	r3, r2
 80020b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020b2:	4a34      	ldr	r2, [pc, #208]	; (8002184 <HAL_GPIO_Init+0x354>)
 80020b4:	69bb      	ldr	r3, [r7, #24]
 80020b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020b8:	4b32      	ldr	r3, [pc, #200]	; (8002184 <HAL_GPIO_Init+0x354>)
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	43db      	mvns	r3, r3
 80020c2:	69ba      	ldr	r2, [r7, #24]
 80020c4:	4013      	ands	r3, r2
 80020c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d003      	beq.n	80020dc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	4313      	orrs	r3, r2
 80020da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020dc:	4a29      	ldr	r2, [pc, #164]	; (8002184 <HAL_GPIO_Init+0x354>)
 80020de:	69bb      	ldr	r3, [r7, #24]
 80020e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80020e2:	4b28      	ldr	r3, [pc, #160]	; (8002184 <HAL_GPIO_Init+0x354>)
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	43db      	mvns	r3, r3
 80020ec:	69ba      	ldr	r2, [r7, #24]
 80020ee:	4013      	ands	r3, r2
 80020f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d003      	beq.n	8002106 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80020fe:	69ba      	ldr	r2, [r7, #24]
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	4313      	orrs	r3, r2
 8002104:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002106:	4a1f      	ldr	r2, [pc, #124]	; (8002184 <HAL_GPIO_Init+0x354>)
 8002108:	69bb      	ldr	r3, [r7, #24]
 800210a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800210c:	4b1d      	ldr	r3, [pc, #116]	; (8002184 <HAL_GPIO_Init+0x354>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	43db      	mvns	r3, r3
 8002116:	69ba      	ldr	r2, [r7, #24]
 8002118:	4013      	ands	r3, r2
 800211a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002124:	2b00      	cmp	r3, #0
 8002126:	d003      	beq.n	8002130 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002128:	69ba      	ldr	r2, [r7, #24]
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	4313      	orrs	r3, r2
 800212e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002130:	4a14      	ldr	r2, [pc, #80]	; (8002184 <HAL_GPIO_Init+0x354>)
 8002132:	69bb      	ldr	r3, [r7, #24]
 8002134:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	3301      	adds	r3, #1
 800213a:	61fb      	str	r3, [r7, #28]
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	2b0f      	cmp	r3, #15
 8002140:	f67f ae84 	bls.w	8001e4c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002144:	bf00      	nop
 8002146:	bf00      	nop
 8002148:	3724      	adds	r7, #36	; 0x24
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	40023800 	.word	0x40023800
 8002158:	40013800 	.word	0x40013800
 800215c:	40020000 	.word	0x40020000
 8002160:	40020400 	.word	0x40020400
 8002164:	40020800 	.word	0x40020800
 8002168:	40020c00 	.word	0x40020c00
 800216c:	40021000 	.word	0x40021000
 8002170:	40021400 	.word	0x40021400
 8002174:	40021800 	.word	0x40021800
 8002178:	40021c00 	.word	0x40021c00
 800217c:	40022000 	.word	0x40022000
 8002180:	40022400 	.word	0x40022400
 8002184:	40013c00 	.word	0x40013c00

08002188 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	460b      	mov	r3, r1
 8002192:	807b      	strh	r3, [r7, #2]
 8002194:	4613      	mov	r3, r2
 8002196:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002198:	787b      	ldrb	r3, [r7, #1]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d003      	beq.n	80021a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800219e:	887a      	ldrh	r2, [r7, #2]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80021a4:	e003      	b.n	80021ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80021a6:	887b      	ldrh	r3, [r7, #2]
 80021a8:	041a      	lsls	r2, r3, #16
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	619a      	str	r2, [r3, #24]
}
 80021ae:	bf00      	nop
 80021b0:	370c      	adds	r7, #12
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
	...

080021bc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80021c2:	2300      	movs	r3, #0
 80021c4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80021c6:	2300      	movs	r3, #0
 80021c8:	603b      	str	r3, [r7, #0]
 80021ca:	4b20      	ldr	r3, [pc, #128]	; (800224c <HAL_PWREx_EnableOverDrive+0x90>)
 80021cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ce:	4a1f      	ldr	r2, [pc, #124]	; (800224c <HAL_PWREx_EnableOverDrive+0x90>)
 80021d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021d4:	6413      	str	r3, [r2, #64]	; 0x40
 80021d6:	4b1d      	ldr	r3, [pc, #116]	; (800224c <HAL_PWREx_EnableOverDrive+0x90>)
 80021d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021de:	603b      	str	r3, [r7, #0]
 80021e0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80021e2:	4b1b      	ldr	r3, [pc, #108]	; (8002250 <HAL_PWREx_EnableOverDrive+0x94>)
 80021e4:	2201      	movs	r2, #1
 80021e6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80021e8:	f7ff f8de 	bl	80013a8 <HAL_GetTick>
 80021ec:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80021ee:	e009      	b.n	8002204 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80021f0:	f7ff f8da 	bl	80013a8 <HAL_GetTick>
 80021f4:	4602      	mov	r2, r0
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80021fe:	d901      	bls.n	8002204 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002200:	2303      	movs	r3, #3
 8002202:	e01f      	b.n	8002244 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002204:	4b13      	ldr	r3, [pc, #76]	; (8002254 <HAL_PWREx_EnableOverDrive+0x98>)
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800220c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002210:	d1ee      	bne.n	80021f0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002212:	4b11      	ldr	r3, [pc, #68]	; (8002258 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002214:	2201      	movs	r2, #1
 8002216:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002218:	f7ff f8c6 	bl	80013a8 <HAL_GetTick>
 800221c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800221e:	e009      	b.n	8002234 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002220:	f7ff f8c2 	bl	80013a8 <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800222e:	d901      	bls.n	8002234 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002230:	2303      	movs	r3, #3
 8002232:	e007      	b.n	8002244 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002234:	4b07      	ldr	r3, [pc, #28]	; (8002254 <HAL_PWREx_EnableOverDrive+0x98>)
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800223c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002240:	d1ee      	bne.n	8002220 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002242:	2300      	movs	r3, #0
}
 8002244:	4618      	mov	r0, r3
 8002246:	3708      	adds	r7, #8
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	40023800 	.word	0x40023800
 8002250:	420e0040 	.word	0x420e0040
 8002254:	40007000 	.word	0x40007000
 8002258:	420e0044 	.word	0x420e0044

0800225c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b086      	sub	sp, #24
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d101      	bne.n	800226e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e267      	b.n	800273e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 0301 	and.w	r3, r3, #1
 8002276:	2b00      	cmp	r3, #0
 8002278:	d075      	beq.n	8002366 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800227a:	4b88      	ldr	r3, [pc, #544]	; (800249c <HAL_RCC_OscConfig+0x240>)
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	f003 030c 	and.w	r3, r3, #12
 8002282:	2b04      	cmp	r3, #4
 8002284:	d00c      	beq.n	80022a0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002286:	4b85      	ldr	r3, [pc, #532]	; (800249c <HAL_RCC_OscConfig+0x240>)
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800228e:	2b08      	cmp	r3, #8
 8002290:	d112      	bne.n	80022b8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002292:	4b82      	ldr	r3, [pc, #520]	; (800249c <HAL_RCC_OscConfig+0x240>)
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800229a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800229e:	d10b      	bne.n	80022b8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022a0:	4b7e      	ldr	r3, [pc, #504]	; (800249c <HAL_RCC_OscConfig+0x240>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d05b      	beq.n	8002364 <HAL_RCC_OscConfig+0x108>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d157      	bne.n	8002364 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e242      	b.n	800273e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022c0:	d106      	bne.n	80022d0 <HAL_RCC_OscConfig+0x74>
 80022c2:	4b76      	ldr	r3, [pc, #472]	; (800249c <HAL_RCC_OscConfig+0x240>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a75      	ldr	r2, [pc, #468]	; (800249c <HAL_RCC_OscConfig+0x240>)
 80022c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022cc:	6013      	str	r3, [r2, #0]
 80022ce:	e01d      	b.n	800230c <HAL_RCC_OscConfig+0xb0>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022d8:	d10c      	bne.n	80022f4 <HAL_RCC_OscConfig+0x98>
 80022da:	4b70      	ldr	r3, [pc, #448]	; (800249c <HAL_RCC_OscConfig+0x240>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a6f      	ldr	r2, [pc, #444]	; (800249c <HAL_RCC_OscConfig+0x240>)
 80022e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022e4:	6013      	str	r3, [r2, #0]
 80022e6:	4b6d      	ldr	r3, [pc, #436]	; (800249c <HAL_RCC_OscConfig+0x240>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a6c      	ldr	r2, [pc, #432]	; (800249c <HAL_RCC_OscConfig+0x240>)
 80022ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022f0:	6013      	str	r3, [r2, #0]
 80022f2:	e00b      	b.n	800230c <HAL_RCC_OscConfig+0xb0>
 80022f4:	4b69      	ldr	r3, [pc, #420]	; (800249c <HAL_RCC_OscConfig+0x240>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a68      	ldr	r2, [pc, #416]	; (800249c <HAL_RCC_OscConfig+0x240>)
 80022fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022fe:	6013      	str	r3, [r2, #0]
 8002300:	4b66      	ldr	r3, [pc, #408]	; (800249c <HAL_RCC_OscConfig+0x240>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a65      	ldr	r2, [pc, #404]	; (800249c <HAL_RCC_OscConfig+0x240>)
 8002306:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800230a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d013      	beq.n	800233c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002314:	f7ff f848 	bl	80013a8 <HAL_GetTick>
 8002318:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800231a:	e008      	b.n	800232e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800231c:	f7ff f844 	bl	80013a8 <HAL_GetTick>
 8002320:	4602      	mov	r2, r0
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	2b64      	cmp	r3, #100	; 0x64
 8002328:	d901      	bls.n	800232e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e207      	b.n	800273e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800232e:	4b5b      	ldr	r3, [pc, #364]	; (800249c <HAL_RCC_OscConfig+0x240>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d0f0      	beq.n	800231c <HAL_RCC_OscConfig+0xc0>
 800233a:	e014      	b.n	8002366 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800233c:	f7ff f834 	bl	80013a8 <HAL_GetTick>
 8002340:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002342:	e008      	b.n	8002356 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002344:	f7ff f830 	bl	80013a8 <HAL_GetTick>
 8002348:	4602      	mov	r2, r0
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	2b64      	cmp	r3, #100	; 0x64
 8002350:	d901      	bls.n	8002356 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002352:	2303      	movs	r3, #3
 8002354:	e1f3      	b.n	800273e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002356:	4b51      	ldr	r3, [pc, #324]	; (800249c <HAL_RCC_OscConfig+0x240>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d1f0      	bne.n	8002344 <HAL_RCC_OscConfig+0xe8>
 8002362:	e000      	b.n	8002366 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002364:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0302 	and.w	r3, r3, #2
 800236e:	2b00      	cmp	r3, #0
 8002370:	d063      	beq.n	800243a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002372:	4b4a      	ldr	r3, [pc, #296]	; (800249c <HAL_RCC_OscConfig+0x240>)
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	f003 030c 	and.w	r3, r3, #12
 800237a:	2b00      	cmp	r3, #0
 800237c:	d00b      	beq.n	8002396 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800237e:	4b47      	ldr	r3, [pc, #284]	; (800249c <HAL_RCC_OscConfig+0x240>)
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002386:	2b08      	cmp	r3, #8
 8002388:	d11c      	bne.n	80023c4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800238a:	4b44      	ldr	r3, [pc, #272]	; (800249c <HAL_RCC_OscConfig+0x240>)
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d116      	bne.n	80023c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002396:	4b41      	ldr	r3, [pc, #260]	; (800249c <HAL_RCC_OscConfig+0x240>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 0302 	and.w	r3, r3, #2
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d005      	beq.n	80023ae <HAL_RCC_OscConfig+0x152>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	68db      	ldr	r3, [r3, #12]
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d001      	beq.n	80023ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e1c7      	b.n	800273e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023ae:	4b3b      	ldr	r3, [pc, #236]	; (800249c <HAL_RCC_OscConfig+0x240>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	691b      	ldr	r3, [r3, #16]
 80023ba:	00db      	lsls	r3, r3, #3
 80023bc:	4937      	ldr	r1, [pc, #220]	; (800249c <HAL_RCC_OscConfig+0x240>)
 80023be:	4313      	orrs	r3, r2
 80023c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023c2:	e03a      	b.n	800243a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d020      	beq.n	800240e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023cc:	4b34      	ldr	r3, [pc, #208]	; (80024a0 <HAL_RCC_OscConfig+0x244>)
 80023ce:	2201      	movs	r2, #1
 80023d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023d2:	f7fe ffe9 	bl	80013a8 <HAL_GetTick>
 80023d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023d8:	e008      	b.n	80023ec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023da:	f7fe ffe5 	bl	80013a8 <HAL_GetTick>
 80023de:	4602      	mov	r2, r0
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	2b02      	cmp	r3, #2
 80023e6:	d901      	bls.n	80023ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80023e8:	2303      	movs	r3, #3
 80023ea:	e1a8      	b.n	800273e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023ec:	4b2b      	ldr	r3, [pc, #172]	; (800249c <HAL_RCC_OscConfig+0x240>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0302 	and.w	r3, r3, #2
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d0f0      	beq.n	80023da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023f8:	4b28      	ldr	r3, [pc, #160]	; (800249c <HAL_RCC_OscConfig+0x240>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	691b      	ldr	r3, [r3, #16]
 8002404:	00db      	lsls	r3, r3, #3
 8002406:	4925      	ldr	r1, [pc, #148]	; (800249c <HAL_RCC_OscConfig+0x240>)
 8002408:	4313      	orrs	r3, r2
 800240a:	600b      	str	r3, [r1, #0]
 800240c:	e015      	b.n	800243a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800240e:	4b24      	ldr	r3, [pc, #144]	; (80024a0 <HAL_RCC_OscConfig+0x244>)
 8002410:	2200      	movs	r2, #0
 8002412:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002414:	f7fe ffc8 	bl	80013a8 <HAL_GetTick>
 8002418:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800241a:	e008      	b.n	800242e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800241c:	f7fe ffc4 	bl	80013a8 <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	2b02      	cmp	r3, #2
 8002428:	d901      	bls.n	800242e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e187      	b.n	800273e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800242e:	4b1b      	ldr	r3, [pc, #108]	; (800249c <HAL_RCC_OscConfig+0x240>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0302 	and.w	r3, r3, #2
 8002436:	2b00      	cmp	r3, #0
 8002438:	d1f0      	bne.n	800241c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0308 	and.w	r3, r3, #8
 8002442:	2b00      	cmp	r3, #0
 8002444:	d036      	beq.n	80024b4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	695b      	ldr	r3, [r3, #20]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d016      	beq.n	800247c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800244e:	4b15      	ldr	r3, [pc, #84]	; (80024a4 <HAL_RCC_OscConfig+0x248>)
 8002450:	2201      	movs	r2, #1
 8002452:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002454:	f7fe ffa8 	bl	80013a8 <HAL_GetTick>
 8002458:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800245a:	e008      	b.n	800246e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800245c:	f7fe ffa4 	bl	80013a8 <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	2b02      	cmp	r3, #2
 8002468:	d901      	bls.n	800246e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800246a:	2303      	movs	r3, #3
 800246c:	e167      	b.n	800273e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800246e:	4b0b      	ldr	r3, [pc, #44]	; (800249c <HAL_RCC_OscConfig+0x240>)
 8002470:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002472:	f003 0302 	and.w	r3, r3, #2
 8002476:	2b00      	cmp	r3, #0
 8002478:	d0f0      	beq.n	800245c <HAL_RCC_OscConfig+0x200>
 800247a:	e01b      	b.n	80024b4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800247c:	4b09      	ldr	r3, [pc, #36]	; (80024a4 <HAL_RCC_OscConfig+0x248>)
 800247e:	2200      	movs	r2, #0
 8002480:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002482:	f7fe ff91 	bl	80013a8 <HAL_GetTick>
 8002486:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002488:	e00e      	b.n	80024a8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800248a:	f7fe ff8d 	bl	80013a8 <HAL_GetTick>
 800248e:	4602      	mov	r2, r0
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	2b02      	cmp	r3, #2
 8002496:	d907      	bls.n	80024a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002498:	2303      	movs	r3, #3
 800249a:	e150      	b.n	800273e <HAL_RCC_OscConfig+0x4e2>
 800249c:	40023800 	.word	0x40023800
 80024a0:	42470000 	.word	0x42470000
 80024a4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024a8:	4b88      	ldr	r3, [pc, #544]	; (80026cc <HAL_RCC_OscConfig+0x470>)
 80024aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024ac:	f003 0302 	and.w	r3, r3, #2
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d1ea      	bne.n	800248a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 0304 	and.w	r3, r3, #4
 80024bc:	2b00      	cmp	r3, #0
 80024be:	f000 8097 	beq.w	80025f0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024c2:	2300      	movs	r3, #0
 80024c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024c6:	4b81      	ldr	r3, [pc, #516]	; (80026cc <HAL_RCC_OscConfig+0x470>)
 80024c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d10f      	bne.n	80024f2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024d2:	2300      	movs	r3, #0
 80024d4:	60bb      	str	r3, [r7, #8]
 80024d6:	4b7d      	ldr	r3, [pc, #500]	; (80026cc <HAL_RCC_OscConfig+0x470>)
 80024d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024da:	4a7c      	ldr	r2, [pc, #496]	; (80026cc <HAL_RCC_OscConfig+0x470>)
 80024dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024e0:	6413      	str	r3, [r2, #64]	; 0x40
 80024e2:	4b7a      	ldr	r3, [pc, #488]	; (80026cc <HAL_RCC_OscConfig+0x470>)
 80024e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ea:	60bb      	str	r3, [r7, #8]
 80024ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024ee:	2301      	movs	r3, #1
 80024f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024f2:	4b77      	ldr	r3, [pc, #476]	; (80026d0 <HAL_RCC_OscConfig+0x474>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d118      	bne.n	8002530 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024fe:	4b74      	ldr	r3, [pc, #464]	; (80026d0 <HAL_RCC_OscConfig+0x474>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a73      	ldr	r2, [pc, #460]	; (80026d0 <HAL_RCC_OscConfig+0x474>)
 8002504:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002508:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800250a:	f7fe ff4d 	bl	80013a8 <HAL_GetTick>
 800250e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002510:	e008      	b.n	8002524 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002512:	f7fe ff49 	bl	80013a8 <HAL_GetTick>
 8002516:	4602      	mov	r2, r0
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	1ad3      	subs	r3, r2, r3
 800251c:	2b02      	cmp	r3, #2
 800251e:	d901      	bls.n	8002524 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002520:	2303      	movs	r3, #3
 8002522:	e10c      	b.n	800273e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002524:	4b6a      	ldr	r3, [pc, #424]	; (80026d0 <HAL_RCC_OscConfig+0x474>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800252c:	2b00      	cmp	r3, #0
 800252e:	d0f0      	beq.n	8002512 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	2b01      	cmp	r3, #1
 8002536:	d106      	bne.n	8002546 <HAL_RCC_OscConfig+0x2ea>
 8002538:	4b64      	ldr	r3, [pc, #400]	; (80026cc <HAL_RCC_OscConfig+0x470>)
 800253a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800253c:	4a63      	ldr	r2, [pc, #396]	; (80026cc <HAL_RCC_OscConfig+0x470>)
 800253e:	f043 0301 	orr.w	r3, r3, #1
 8002542:	6713      	str	r3, [r2, #112]	; 0x70
 8002544:	e01c      	b.n	8002580 <HAL_RCC_OscConfig+0x324>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	2b05      	cmp	r3, #5
 800254c:	d10c      	bne.n	8002568 <HAL_RCC_OscConfig+0x30c>
 800254e:	4b5f      	ldr	r3, [pc, #380]	; (80026cc <HAL_RCC_OscConfig+0x470>)
 8002550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002552:	4a5e      	ldr	r2, [pc, #376]	; (80026cc <HAL_RCC_OscConfig+0x470>)
 8002554:	f043 0304 	orr.w	r3, r3, #4
 8002558:	6713      	str	r3, [r2, #112]	; 0x70
 800255a:	4b5c      	ldr	r3, [pc, #368]	; (80026cc <HAL_RCC_OscConfig+0x470>)
 800255c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800255e:	4a5b      	ldr	r2, [pc, #364]	; (80026cc <HAL_RCC_OscConfig+0x470>)
 8002560:	f043 0301 	orr.w	r3, r3, #1
 8002564:	6713      	str	r3, [r2, #112]	; 0x70
 8002566:	e00b      	b.n	8002580 <HAL_RCC_OscConfig+0x324>
 8002568:	4b58      	ldr	r3, [pc, #352]	; (80026cc <HAL_RCC_OscConfig+0x470>)
 800256a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800256c:	4a57      	ldr	r2, [pc, #348]	; (80026cc <HAL_RCC_OscConfig+0x470>)
 800256e:	f023 0301 	bic.w	r3, r3, #1
 8002572:	6713      	str	r3, [r2, #112]	; 0x70
 8002574:	4b55      	ldr	r3, [pc, #340]	; (80026cc <HAL_RCC_OscConfig+0x470>)
 8002576:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002578:	4a54      	ldr	r2, [pc, #336]	; (80026cc <HAL_RCC_OscConfig+0x470>)
 800257a:	f023 0304 	bic.w	r3, r3, #4
 800257e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d015      	beq.n	80025b4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002588:	f7fe ff0e 	bl	80013a8 <HAL_GetTick>
 800258c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800258e:	e00a      	b.n	80025a6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002590:	f7fe ff0a 	bl	80013a8 <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	f241 3288 	movw	r2, #5000	; 0x1388
 800259e:	4293      	cmp	r3, r2
 80025a0:	d901      	bls.n	80025a6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e0cb      	b.n	800273e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025a6:	4b49      	ldr	r3, [pc, #292]	; (80026cc <HAL_RCC_OscConfig+0x470>)
 80025a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025aa:	f003 0302 	and.w	r3, r3, #2
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d0ee      	beq.n	8002590 <HAL_RCC_OscConfig+0x334>
 80025b2:	e014      	b.n	80025de <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025b4:	f7fe fef8 	bl	80013a8 <HAL_GetTick>
 80025b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025ba:	e00a      	b.n	80025d2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025bc:	f7fe fef4 	bl	80013a8 <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d901      	bls.n	80025d2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	e0b5      	b.n	800273e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025d2:	4b3e      	ldr	r3, [pc, #248]	; (80026cc <HAL_RCC_OscConfig+0x470>)
 80025d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025d6:	f003 0302 	and.w	r3, r3, #2
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d1ee      	bne.n	80025bc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025de:	7dfb      	ldrb	r3, [r7, #23]
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d105      	bne.n	80025f0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025e4:	4b39      	ldr	r3, [pc, #228]	; (80026cc <HAL_RCC_OscConfig+0x470>)
 80025e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e8:	4a38      	ldr	r2, [pc, #224]	; (80026cc <HAL_RCC_OscConfig+0x470>)
 80025ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025ee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	699b      	ldr	r3, [r3, #24]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	f000 80a1 	beq.w	800273c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80025fa:	4b34      	ldr	r3, [pc, #208]	; (80026cc <HAL_RCC_OscConfig+0x470>)
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	f003 030c 	and.w	r3, r3, #12
 8002602:	2b08      	cmp	r3, #8
 8002604:	d05c      	beq.n	80026c0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	699b      	ldr	r3, [r3, #24]
 800260a:	2b02      	cmp	r3, #2
 800260c:	d141      	bne.n	8002692 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800260e:	4b31      	ldr	r3, [pc, #196]	; (80026d4 <HAL_RCC_OscConfig+0x478>)
 8002610:	2200      	movs	r2, #0
 8002612:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002614:	f7fe fec8 	bl	80013a8 <HAL_GetTick>
 8002618:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800261a:	e008      	b.n	800262e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800261c:	f7fe fec4 	bl	80013a8 <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	2b02      	cmp	r3, #2
 8002628:	d901      	bls.n	800262e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e087      	b.n	800273e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800262e:	4b27      	ldr	r3, [pc, #156]	; (80026cc <HAL_RCC_OscConfig+0x470>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d1f0      	bne.n	800261c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	69da      	ldr	r2, [r3, #28]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6a1b      	ldr	r3, [r3, #32]
 8002642:	431a      	orrs	r2, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002648:	019b      	lsls	r3, r3, #6
 800264a:	431a      	orrs	r2, r3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002650:	085b      	lsrs	r3, r3, #1
 8002652:	3b01      	subs	r3, #1
 8002654:	041b      	lsls	r3, r3, #16
 8002656:	431a      	orrs	r2, r3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800265c:	061b      	lsls	r3, r3, #24
 800265e:	491b      	ldr	r1, [pc, #108]	; (80026cc <HAL_RCC_OscConfig+0x470>)
 8002660:	4313      	orrs	r3, r2
 8002662:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002664:	4b1b      	ldr	r3, [pc, #108]	; (80026d4 <HAL_RCC_OscConfig+0x478>)
 8002666:	2201      	movs	r2, #1
 8002668:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800266a:	f7fe fe9d 	bl	80013a8 <HAL_GetTick>
 800266e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002670:	e008      	b.n	8002684 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002672:	f7fe fe99 	bl	80013a8 <HAL_GetTick>
 8002676:	4602      	mov	r2, r0
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	2b02      	cmp	r3, #2
 800267e:	d901      	bls.n	8002684 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002680:	2303      	movs	r3, #3
 8002682:	e05c      	b.n	800273e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002684:	4b11      	ldr	r3, [pc, #68]	; (80026cc <HAL_RCC_OscConfig+0x470>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800268c:	2b00      	cmp	r3, #0
 800268e:	d0f0      	beq.n	8002672 <HAL_RCC_OscConfig+0x416>
 8002690:	e054      	b.n	800273c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002692:	4b10      	ldr	r3, [pc, #64]	; (80026d4 <HAL_RCC_OscConfig+0x478>)
 8002694:	2200      	movs	r2, #0
 8002696:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002698:	f7fe fe86 	bl	80013a8 <HAL_GetTick>
 800269c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800269e:	e008      	b.n	80026b2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026a0:	f7fe fe82 	bl	80013a8 <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d901      	bls.n	80026b2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e045      	b.n	800273e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026b2:	4b06      	ldr	r3, [pc, #24]	; (80026cc <HAL_RCC_OscConfig+0x470>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d1f0      	bne.n	80026a0 <HAL_RCC_OscConfig+0x444>
 80026be:	e03d      	b.n	800273c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	699b      	ldr	r3, [r3, #24]
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d107      	bne.n	80026d8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e038      	b.n	800273e <HAL_RCC_OscConfig+0x4e2>
 80026cc:	40023800 	.word	0x40023800
 80026d0:	40007000 	.word	0x40007000
 80026d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80026d8:	4b1b      	ldr	r3, [pc, #108]	; (8002748 <HAL_RCC_OscConfig+0x4ec>)
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	699b      	ldr	r3, [r3, #24]
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d028      	beq.n	8002738 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d121      	bne.n	8002738 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026fe:	429a      	cmp	r2, r3
 8002700:	d11a      	bne.n	8002738 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002702:	68fa      	ldr	r2, [r7, #12]
 8002704:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002708:	4013      	ands	r3, r2
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800270e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002710:	4293      	cmp	r3, r2
 8002712:	d111      	bne.n	8002738 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800271e:	085b      	lsrs	r3, r3, #1
 8002720:	3b01      	subs	r3, #1
 8002722:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002724:	429a      	cmp	r2, r3
 8002726:	d107      	bne.n	8002738 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002732:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002734:	429a      	cmp	r2, r3
 8002736:	d001      	beq.n	800273c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	e000      	b.n	800273e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800273c:	2300      	movs	r3, #0
}
 800273e:	4618      	mov	r0, r3
 8002740:	3718      	adds	r7, #24
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	40023800 	.word	0x40023800

0800274c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b084      	sub	sp, #16
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d101      	bne.n	8002760 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e0cc      	b.n	80028fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002760:	4b68      	ldr	r3, [pc, #416]	; (8002904 <HAL_RCC_ClockConfig+0x1b8>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 030f 	and.w	r3, r3, #15
 8002768:	683a      	ldr	r2, [r7, #0]
 800276a:	429a      	cmp	r2, r3
 800276c:	d90c      	bls.n	8002788 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800276e:	4b65      	ldr	r3, [pc, #404]	; (8002904 <HAL_RCC_ClockConfig+0x1b8>)
 8002770:	683a      	ldr	r2, [r7, #0]
 8002772:	b2d2      	uxtb	r2, r2
 8002774:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002776:	4b63      	ldr	r3, [pc, #396]	; (8002904 <HAL_RCC_ClockConfig+0x1b8>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 030f 	and.w	r3, r3, #15
 800277e:	683a      	ldr	r2, [r7, #0]
 8002780:	429a      	cmp	r2, r3
 8002782:	d001      	beq.n	8002788 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	e0b8      	b.n	80028fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0302 	and.w	r3, r3, #2
 8002790:	2b00      	cmp	r3, #0
 8002792:	d020      	beq.n	80027d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0304 	and.w	r3, r3, #4
 800279c:	2b00      	cmp	r3, #0
 800279e:	d005      	beq.n	80027ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027a0:	4b59      	ldr	r3, [pc, #356]	; (8002908 <HAL_RCC_ClockConfig+0x1bc>)
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	4a58      	ldr	r2, [pc, #352]	; (8002908 <HAL_RCC_ClockConfig+0x1bc>)
 80027a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80027aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 0308 	and.w	r3, r3, #8
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d005      	beq.n	80027c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027b8:	4b53      	ldr	r3, [pc, #332]	; (8002908 <HAL_RCC_ClockConfig+0x1bc>)
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	4a52      	ldr	r2, [pc, #328]	; (8002908 <HAL_RCC_ClockConfig+0x1bc>)
 80027be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80027c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027c4:	4b50      	ldr	r3, [pc, #320]	; (8002908 <HAL_RCC_ClockConfig+0x1bc>)
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	494d      	ldr	r1, [pc, #308]	; (8002908 <HAL_RCC_ClockConfig+0x1bc>)
 80027d2:	4313      	orrs	r3, r2
 80027d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0301 	and.w	r3, r3, #1
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d044      	beq.n	800286c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	d107      	bne.n	80027fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ea:	4b47      	ldr	r3, [pc, #284]	; (8002908 <HAL_RCC_ClockConfig+0x1bc>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d119      	bne.n	800282a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e07f      	b.n	80028fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d003      	beq.n	800280a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002806:	2b03      	cmp	r3, #3
 8002808:	d107      	bne.n	800281a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800280a:	4b3f      	ldr	r3, [pc, #252]	; (8002908 <HAL_RCC_ClockConfig+0x1bc>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d109      	bne.n	800282a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e06f      	b.n	80028fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800281a:	4b3b      	ldr	r3, [pc, #236]	; (8002908 <HAL_RCC_ClockConfig+0x1bc>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0302 	and.w	r3, r3, #2
 8002822:	2b00      	cmp	r3, #0
 8002824:	d101      	bne.n	800282a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e067      	b.n	80028fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800282a:	4b37      	ldr	r3, [pc, #220]	; (8002908 <HAL_RCC_ClockConfig+0x1bc>)
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	f023 0203 	bic.w	r2, r3, #3
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	4934      	ldr	r1, [pc, #208]	; (8002908 <HAL_RCC_ClockConfig+0x1bc>)
 8002838:	4313      	orrs	r3, r2
 800283a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800283c:	f7fe fdb4 	bl	80013a8 <HAL_GetTick>
 8002840:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002842:	e00a      	b.n	800285a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002844:	f7fe fdb0 	bl	80013a8 <HAL_GetTick>
 8002848:	4602      	mov	r2, r0
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002852:	4293      	cmp	r3, r2
 8002854:	d901      	bls.n	800285a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002856:	2303      	movs	r3, #3
 8002858:	e04f      	b.n	80028fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800285a:	4b2b      	ldr	r3, [pc, #172]	; (8002908 <HAL_RCC_ClockConfig+0x1bc>)
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	f003 020c 	and.w	r2, r3, #12
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	429a      	cmp	r2, r3
 800286a:	d1eb      	bne.n	8002844 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800286c:	4b25      	ldr	r3, [pc, #148]	; (8002904 <HAL_RCC_ClockConfig+0x1b8>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 030f 	and.w	r3, r3, #15
 8002874:	683a      	ldr	r2, [r7, #0]
 8002876:	429a      	cmp	r2, r3
 8002878:	d20c      	bcs.n	8002894 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800287a:	4b22      	ldr	r3, [pc, #136]	; (8002904 <HAL_RCC_ClockConfig+0x1b8>)
 800287c:	683a      	ldr	r2, [r7, #0]
 800287e:	b2d2      	uxtb	r2, r2
 8002880:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002882:	4b20      	ldr	r3, [pc, #128]	; (8002904 <HAL_RCC_ClockConfig+0x1b8>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 030f 	and.w	r3, r3, #15
 800288a:	683a      	ldr	r2, [r7, #0]
 800288c:	429a      	cmp	r2, r3
 800288e:	d001      	beq.n	8002894 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e032      	b.n	80028fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0304 	and.w	r3, r3, #4
 800289c:	2b00      	cmp	r3, #0
 800289e:	d008      	beq.n	80028b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028a0:	4b19      	ldr	r3, [pc, #100]	; (8002908 <HAL_RCC_ClockConfig+0x1bc>)
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	4916      	ldr	r1, [pc, #88]	; (8002908 <HAL_RCC_ClockConfig+0x1bc>)
 80028ae:	4313      	orrs	r3, r2
 80028b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0308 	and.w	r3, r3, #8
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d009      	beq.n	80028d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028be:	4b12      	ldr	r3, [pc, #72]	; (8002908 <HAL_RCC_ClockConfig+0x1bc>)
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	691b      	ldr	r3, [r3, #16]
 80028ca:	00db      	lsls	r3, r3, #3
 80028cc:	490e      	ldr	r1, [pc, #56]	; (8002908 <HAL_RCC_ClockConfig+0x1bc>)
 80028ce:	4313      	orrs	r3, r2
 80028d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80028d2:	f000 f821 	bl	8002918 <HAL_RCC_GetSysClockFreq>
 80028d6:	4602      	mov	r2, r0
 80028d8:	4b0b      	ldr	r3, [pc, #44]	; (8002908 <HAL_RCC_ClockConfig+0x1bc>)
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	091b      	lsrs	r3, r3, #4
 80028de:	f003 030f 	and.w	r3, r3, #15
 80028e2:	490a      	ldr	r1, [pc, #40]	; (800290c <HAL_RCC_ClockConfig+0x1c0>)
 80028e4:	5ccb      	ldrb	r3, [r1, r3]
 80028e6:	fa22 f303 	lsr.w	r3, r2, r3
 80028ea:	4a09      	ldr	r2, [pc, #36]	; (8002910 <HAL_RCC_ClockConfig+0x1c4>)
 80028ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80028ee:	4b09      	ldr	r3, [pc, #36]	; (8002914 <HAL_RCC_ClockConfig+0x1c8>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4618      	mov	r0, r3
 80028f4:	f7fe fd14 	bl	8001320 <HAL_InitTick>

  return HAL_OK;
 80028f8:	2300      	movs	r3, #0
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3710      	adds	r7, #16
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	40023c00 	.word	0x40023c00
 8002908:	40023800 	.word	0x40023800
 800290c:	08006624 	.word	0x08006624
 8002910:	20000000 	.word	0x20000000
 8002914:	20000004 	.word	0x20000004

08002918 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002918:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800291c:	b094      	sub	sp, #80	; 0x50
 800291e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002920:	2300      	movs	r3, #0
 8002922:	647b      	str	r3, [r7, #68]	; 0x44
 8002924:	2300      	movs	r3, #0
 8002926:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002928:	2300      	movs	r3, #0
 800292a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800292c:	2300      	movs	r3, #0
 800292e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002930:	4b79      	ldr	r3, [pc, #484]	; (8002b18 <HAL_RCC_GetSysClockFreq+0x200>)
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	f003 030c 	and.w	r3, r3, #12
 8002938:	2b08      	cmp	r3, #8
 800293a:	d00d      	beq.n	8002958 <HAL_RCC_GetSysClockFreq+0x40>
 800293c:	2b08      	cmp	r3, #8
 800293e:	f200 80e1 	bhi.w	8002b04 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002942:	2b00      	cmp	r3, #0
 8002944:	d002      	beq.n	800294c <HAL_RCC_GetSysClockFreq+0x34>
 8002946:	2b04      	cmp	r3, #4
 8002948:	d003      	beq.n	8002952 <HAL_RCC_GetSysClockFreq+0x3a>
 800294a:	e0db      	b.n	8002b04 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800294c:	4b73      	ldr	r3, [pc, #460]	; (8002b1c <HAL_RCC_GetSysClockFreq+0x204>)
 800294e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002950:	e0db      	b.n	8002b0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002952:	4b73      	ldr	r3, [pc, #460]	; (8002b20 <HAL_RCC_GetSysClockFreq+0x208>)
 8002954:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002956:	e0d8      	b.n	8002b0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002958:	4b6f      	ldr	r3, [pc, #444]	; (8002b18 <HAL_RCC_GetSysClockFreq+0x200>)
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002960:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002962:	4b6d      	ldr	r3, [pc, #436]	; (8002b18 <HAL_RCC_GetSysClockFreq+0x200>)
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d063      	beq.n	8002a36 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800296e:	4b6a      	ldr	r3, [pc, #424]	; (8002b18 <HAL_RCC_GetSysClockFreq+0x200>)
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	099b      	lsrs	r3, r3, #6
 8002974:	2200      	movs	r2, #0
 8002976:	63bb      	str	r3, [r7, #56]	; 0x38
 8002978:	63fa      	str	r2, [r7, #60]	; 0x3c
 800297a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800297c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002980:	633b      	str	r3, [r7, #48]	; 0x30
 8002982:	2300      	movs	r3, #0
 8002984:	637b      	str	r3, [r7, #52]	; 0x34
 8002986:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800298a:	4622      	mov	r2, r4
 800298c:	462b      	mov	r3, r5
 800298e:	f04f 0000 	mov.w	r0, #0
 8002992:	f04f 0100 	mov.w	r1, #0
 8002996:	0159      	lsls	r1, r3, #5
 8002998:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800299c:	0150      	lsls	r0, r2, #5
 800299e:	4602      	mov	r2, r0
 80029a0:	460b      	mov	r3, r1
 80029a2:	4621      	mov	r1, r4
 80029a4:	1a51      	subs	r1, r2, r1
 80029a6:	6139      	str	r1, [r7, #16]
 80029a8:	4629      	mov	r1, r5
 80029aa:	eb63 0301 	sbc.w	r3, r3, r1
 80029ae:	617b      	str	r3, [r7, #20]
 80029b0:	f04f 0200 	mov.w	r2, #0
 80029b4:	f04f 0300 	mov.w	r3, #0
 80029b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80029bc:	4659      	mov	r1, fp
 80029be:	018b      	lsls	r3, r1, #6
 80029c0:	4651      	mov	r1, sl
 80029c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80029c6:	4651      	mov	r1, sl
 80029c8:	018a      	lsls	r2, r1, #6
 80029ca:	4651      	mov	r1, sl
 80029cc:	ebb2 0801 	subs.w	r8, r2, r1
 80029d0:	4659      	mov	r1, fp
 80029d2:	eb63 0901 	sbc.w	r9, r3, r1
 80029d6:	f04f 0200 	mov.w	r2, #0
 80029da:	f04f 0300 	mov.w	r3, #0
 80029de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80029e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80029e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80029ea:	4690      	mov	r8, r2
 80029ec:	4699      	mov	r9, r3
 80029ee:	4623      	mov	r3, r4
 80029f0:	eb18 0303 	adds.w	r3, r8, r3
 80029f4:	60bb      	str	r3, [r7, #8]
 80029f6:	462b      	mov	r3, r5
 80029f8:	eb49 0303 	adc.w	r3, r9, r3
 80029fc:	60fb      	str	r3, [r7, #12]
 80029fe:	f04f 0200 	mov.w	r2, #0
 8002a02:	f04f 0300 	mov.w	r3, #0
 8002a06:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002a0a:	4629      	mov	r1, r5
 8002a0c:	024b      	lsls	r3, r1, #9
 8002a0e:	4621      	mov	r1, r4
 8002a10:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002a14:	4621      	mov	r1, r4
 8002a16:	024a      	lsls	r2, r1, #9
 8002a18:	4610      	mov	r0, r2
 8002a1a:	4619      	mov	r1, r3
 8002a1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a1e:	2200      	movs	r2, #0
 8002a20:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a22:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002a24:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002a28:	f7fd fc32 	bl	8000290 <__aeabi_uldivmod>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	460b      	mov	r3, r1
 8002a30:	4613      	mov	r3, r2
 8002a32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a34:	e058      	b.n	8002ae8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a36:	4b38      	ldr	r3, [pc, #224]	; (8002b18 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	099b      	lsrs	r3, r3, #6
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	4618      	mov	r0, r3
 8002a40:	4611      	mov	r1, r2
 8002a42:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002a46:	623b      	str	r3, [r7, #32]
 8002a48:	2300      	movs	r3, #0
 8002a4a:	627b      	str	r3, [r7, #36]	; 0x24
 8002a4c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002a50:	4642      	mov	r2, r8
 8002a52:	464b      	mov	r3, r9
 8002a54:	f04f 0000 	mov.w	r0, #0
 8002a58:	f04f 0100 	mov.w	r1, #0
 8002a5c:	0159      	lsls	r1, r3, #5
 8002a5e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a62:	0150      	lsls	r0, r2, #5
 8002a64:	4602      	mov	r2, r0
 8002a66:	460b      	mov	r3, r1
 8002a68:	4641      	mov	r1, r8
 8002a6a:	ebb2 0a01 	subs.w	sl, r2, r1
 8002a6e:	4649      	mov	r1, r9
 8002a70:	eb63 0b01 	sbc.w	fp, r3, r1
 8002a74:	f04f 0200 	mov.w	r2, #0
 8002a78:	f04f 0300 	mov.w	r3, #0
 8002a7c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002a80:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002a84:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002a88:	ebb2 040a 	subs.w	r4, r2, sl
 8002a8c:	eb63 050b 	sbc.w	r5, r3, fp
 8002a90:	f04f 0200 	mov.w	r2, #0
 8002a94:	f04f 0300 	mov.w	r3, #0
 8002a98:	00eb      	lsls	r3, r5, #3
 8002a9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a9e:	00e2      	lsls	r2, r4, #3
 8002aa0:	4614      	mov	r4, r2
 8002aa2:	461d      	mov	r5, r3
 8002aa4:	4643      	mov	r3, r8
 8002aa6:	18e3      	adds	r3, r4, r3
 8002aa8:	603b      	str	r3, [r7, #0]
 8002aaa:	464b      	mov	r3, r9
 8002aac:	eb45 0303 	adc.w	r3, r5, r3
 8002ab0:	607b      	str	r3, [r7, #4]
 8002ab2:	f04f 0200 	mov.w	r2, #0
 8002ab6:	f04f 0300 	mov.w	r3, #0
 8002aba:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002abe:	4629      	mov	r1, r5
 8002ac0:	028b      	lsls	r3, r1, #10
 8002ac2:	4621      	mov	r1, r4
 8002ac4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ac8:	4621      	mov	r1, r4
 8002aca:	028a      	lsls	r2, r1, #10
 8002acc:	4610      	mov	r0, r2
 8002ace:	4619      	mov	r1, r3
 8002ad0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	61bb      	str	r3, [r7, #24]
 8002ad6:	61fa      	str	r2, [r7, #28]
 8002ad8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002adc:	f7fd fbd8 	bl	8000290 <__aeabi_uldivmod>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	460b      	mov	r3, r1
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ae8:	4b0b      	ldr	r3, [pc, #44]	; (8002b18 <HAL_RCC_GetSysClockFreq+0x200>)
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	0c1b      	lsrs	r3, r3, #16
 8002aee:	f003 0303 	and.w	r3, r3, #3
 8002af2:	3301      	adds	r3, #1
 8002af4:	005b      	lsls	r3, r3, #1
 8002af6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002af8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002afa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002afc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b00:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b02:	e002      	b.n	8002b0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b04:	4b05      	ldr	r3, [pc, #20]	; (8002b1c <HAL_RCC_GetSysClockFreq+0x204>)
 8002b06:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3750      	adds	r7, #80	; 0x50
 8002b10:	46bd      	mov	sp, r7
 8002b12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b16:	bf00      	nop
 8002b18:	40023800 	.word	0x40023800
 8002b1c:	00f42400 	.word	0x00f42400
 8002b20:	007a1200 	.word	0x007a1200

08002b24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b24:	b480      	push	{r7}
 8002b26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b28:	4b03      	ldr	r3, [pc, #12]	; (8002b38 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr
 8002b36:	bf00      	nop
 8002b38:	20000000 	.word	0x20000000

08002b3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002b40:	f7ff fff0 	bl	8002b24 <HAL_RCC_GetHCLKFreq>
 8002b44:	4602      	mov	r2, r0
 8002b46:	4b05      	ldr	r3, [pc, #20]	; (8002b5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	0a9b      	lsrs	r3, r3, #10
 8002b4c:	f003 0307 	and.w	r3, r3, #7
 8002b50:	4903      	ldr	r1, [pc, #12]	; (8002b60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b52:	5ccb      	ldrb	r3, [r1, r3]
 8002b54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	40023800 	.word	0x40023800
 8002b60:	08006634 	.word	0x08006634

08002b64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002b68:	f7ff ffdc 	bl	8002b24 <HAL_RCC_GetHCLKFreq>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	4b05      	ldr	r3, [pc, #20]	; (8002b84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	0b5b      	lsrs	r3, r3, #13
 8002b74:	f003 0307 	and.w	r3, r3, #7
 8002b78:	4903      	ldr	r1, [pc, #12]	; (8002b88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b7a:	5ccb      	ldrb	r3, [r1, r3]
 8002b7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	40023800 	.word	0x40023800
 8002b88:	08006634 	.word	0x08006634

08002b8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b082      	sub	sp, #8
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d101      	bne.n	8002b9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e041      	b.n	8002c22 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d106      	bne.n	8002bb8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2200      	movs	r2, #0
 8002bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f7fe fa0c 	bl	8000fd0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2202      	movs	r2, #2
 8002bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	3304      	adds	r3, #4
 8002bc8:	4619      	mov	r1, r3
 8002bca:	4610      	mov	r0, r2
 8002bcc:	f000 ffe2 	bl	8003b94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2201      	movs	r2, #1
 8002bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2201      	movs	r2, #1
 8002be4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2201      	movs	r2, #1
 8002bec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2201      	movs	r2, #1
 8002c04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2201      	movs	r2, #1
 8002c14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c20:	2300      	movs	r3, #0
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3708      	adds	r7, #8
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
	...

08002c2c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b085      	sub	sp, #20
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d001      	beq.n	8002c44 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e04e      	b.n	8002ce2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2202      	movs	r2, #2
 8002c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	68da      	ldr	r2, [r3, #12]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f042 0201 	orr.w	r2, r2, #1
 8002c5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a23      	ldr	r2, [pc, #140]	; (8002cf0 <HAL_TIM_Base_Start_IT+0xc4>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d022      	beq.n	8002cac <HAL_TIM_Base_Start_IT+0x80>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c6e:	d01d      	beq.n	8002cac <HAL_TIM_Base_Start_IT+0x80>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a1f      	ldr	r2, [pc, #124]	; (8002cf4 <HAL_TIM_Base_Start_IT+0xc8>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d018      	beq.n	8002cac <HAL_TIM_Base_Start_IT+0x80>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a1e      	ldr	r2, [pc, #120]	; (8002cf8 <HAL_TIM_Base_Start_IT+0xcc>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d013      	beq.n	8002cac <HAL_TIM_Base_Start_IT+0x80>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a1c      	ldr	r2, [pc, #112]	; (8002cfc <HAL_TIM_Base_Start_IT+0xd0>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d00e      	beq.n	8002cac <HAL_TIM_Base_Start_IT+0x80>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a1b      	ldr	r2, [pc, #108]	; (8002d00 <HAL_TIM_Base_Start_IT+0xd4>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d009      	beq.n	8002cac <HAL_TIM_Base_Start_IT+0x80>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a19      	ldr	r2, [pc, #100]	; (8002d04 <HAL_TIM_Base_Start_IT+0xd8>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d004      	beq.n	8002cac <HAL_TIM_Base_Start_IT+0x80>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a18      	ldr	r2, [pc, #96]	; (8002d08 <HAL_TIM_Base_Start_IT+0xdc>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d111      	bne.n	8002cd0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	f003 0307 	and.w	r3, r3, #7
 8002cb6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2b06      	cmp	r3, #6
 8002cbc:	d010      	beq.n	8002ce0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f042 0201 	orr.w	r2, r2, #1
 8002ccc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cce:	e007      	b.n	8002ce0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f042 0201 	orr.w	r2, r2, #1
 8002cde:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ce0:	2300      	movs	r3, #0
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3714      	adds	r7, #20
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop
 8002cf0:	40010000 	.word	0x40010000
 8002cf4:	40000400 	.word	0x40000400
 8002cf8:	40000800 	.word	0x40000800
 8002cfc:	40000c00 	.word	0x40000c00
 8002d00:	40010400 	.word	0x40010400
 8002d04:	40014000 	.word	0x40014000
 8002d08:	40001800 	.word	0x40001800

08002d0c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b082      	sub	sp, #8
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d101      	bne.n	8002d1e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e041      	b.n	8002da2 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d106      	bne.n	8002d38 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f000 f839 	bl	8002daa <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2202      	movs	r2, #2
 8002d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	3304      	adds	r3, #4
 8002d48:	4619      	mov	r1, r3
 8002d4a:	4610      	mov	r0, r2
 8002d4c:	f000 ff22 	bl	8003b94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2201      	movs	r2, #1
 8002d54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2201      	movs	r2, #1
 8002d64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2201      	movs	r2, #1
 8002d74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2201      	movs	r2, #1
 8002d84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2201      	movs	r2, #1
 8002d94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002da0:	2300      	movs	r3, #0
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3708      	adds	r7, #8
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}

08002daa <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8002daa:	b480      	push	{r7}
 8002dac:	b083      	sub	sp, #12
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8002db2:	bf00      	nop
 8002db4:	370c      	adds	r7, #12
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr
	...

08002dc0 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b084      	sub	sp, #16
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d109      	bne.n	8002de8 <HAL_TIM_OC_Start_IT+0x28>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	bf14      	ite	ne
 8002de0:	2301      	movne	r3, #1
 8002de2:	2300      	moveq	r3, #0
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	e022      	b.n	8002e2e <HAL_TIM_OC_Start_IT+0x6e>
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	2b04      	cmp	r3, #4
 8002dec:	d109      	bne.n	8002e02 <HAL_TIM_OC_Start_IT+0x42>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	bf14      	ite	ne
 8002dfa:	2301      	movne	r3, #1
 8002dfc:	2300      	moveq	r3, #0
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	e015      	b.n	8002e2e <HAL_TIM_OC_Start_IT+0x6e>
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	2b08      	cmp	r3, #8
 8002e06:	d109      	bne.n	8002e1c <HAL_TIM_OC_Start_IT+0x5c>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	bf14      	ite	ne
 8002e14:	2301      	movne	r3, #1
 8002e16:	2300      	moveq	r3, #0
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	e008      	b.n	8002e2e <HAL_TIM_OC_Start_IT+0x6e>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	bf14      	ite	ne
 8002e28:	2301      	movne	r3, #1
 8002e2a:	2300      	moveq	r3, #0
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d001      	beq.n	8002e36 <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e0c7      	b.n	8002fc6 <HAL_TIM_OC_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d104      	bne.n	8002e46 <HAL_TIM_OC_Start_IT+0x86>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2202      	movs	r2, #2
 8002e40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e44:	e013      	b.n	8002e6e <HAL_TIM_OC_Start_IT+0xae>
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	2b04      	cmp	r3, #4
 8002e4a:	d104      	bne.n	8002e56 <HAL_TIM_OC_Start_IT+0x96>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2202      	movs	r2, #2
 8002e50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e54:	e00b      	b.n	8002e6e <HAL_TIM_OC_Start_IT+0xae>
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	2b08      	cmp	r3, #8
 8002e5a:	d104      	bne.n	8002e66 <HAL_TIM_OC_Start_IT+0xa6>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2202      	movs	r2, #2
 8002e60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e64:	e003      	b.n	8002e6e <HAL_TIM_OC_Start_IT+0xae>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2202      	movs	r2, #2
 8002e6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	2b0c      	cmp	r3, #12
 8002e72:	d841      	bhi.n	8002ef8 <HAL_TIM_OC_Start_IT+0x138>
 8002e74:	a201      	add	r2, pc, #4	; (adr r2, 8002e7c <HAL_TIM_OC_Start_IT+0xbc>)
 8002e76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e7a:	bf00      	nop
 8002e7c:	08002eb1 	.word	0x08002eb1
 8002e80:	08002ef9 	.word	0x08002ef9
 8002e84:	08002ef9 	.word	0x08002ef9
 8002e88:	08002ef9 	.word	0x08002ef9
 8002e8c:	08002ec3 	.word	0x08002ec3
 8002e90:	08002ef9 	.word	0x08002ef9
 8002e94:	08002ef9 	.word	0x08002ef9
 8002e98:	08002ef9 	.word	0x08002ef9
 8002e9c:	08002ed5 	.word	0x08002ed5
 8002ea0:	08002ef9 	.word	0x08002ef9
 8002ea4:	08002ef9 	.word	0x08002ef9
 8002ea8:	08002ef9 	.word	0x08002ef9
 8002eac:	08002ee7 	.word	0x08002ee7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	68da      	ldr	r2, [r3, #12]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f042 0202 	orr.w	r2, r2, #2
 8002ebe:	60da      	str	r2, [r3, #12]
      break;
 8002ec0:	e01d      	b.n	8002efe <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	68da      	ldr	r2, [r3, #12]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f042 0204 	orr.w	r2, r2, #4
 8002ed0:	60da      	str	r2, [r3, #12]
      break;
 8002ed2:	e014      	b.n	8002efe <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	68da      	ldr	r2, [r3, #12]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f042 0208 	orr.w	r2, r2, #8
 8002ee2:	60da      	str	r2, [r3, #12]
      break;
 8002ee4:	e00b      	b.n	8002efe <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	68da      	ldr	r2, [r3, #12]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f042 0210 	orr.w	r2, r2, #16
 8002ef4:	60da      	str	r2, [r3, #12]
      break;
 8002ef6:	e002      	b.n	8002efe <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	73fb      	strb	r3, [r7, #15]
      break;
 8002efc:	bf00      	nop
  }

  if (status == HAL_OK)
 8002efe:	7bfb      	ldrb	r3, [r7, #15]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d15f      	bne.n	8002fc4 <HAL_TIM_OC_Start_IT+0x204>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	2201      	movs	r2, #1
 8002f0a:	6839      	ldr	r1, [r7, #0]
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f001 fa55 	bl	80043bc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a2e      	ldr	r2, [pc, #184]	; (8002fd0 <HAL_TIM_OC_Start_IT+0x210>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d004      	beq.n	8002f26 <HAL_TIM_OC_Start_IT+0x166>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a2c      	ldr	r2, [pc, #176]	; (8002fd4 <HAL_TIM_OC_Start_IT+0x214>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d101      	bne.n	8002f2a <HAL_TIM_OC_Start_IT+0x16a>
 8002f26:	2301      	movs	r3, #1
 8002f28:	e000      	b.n	8002f2c <HAL_TIM_OC_Start_IT+0x16c>
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d007      	beq.n	8002f40 <HAL_TIM_OC_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f3e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a22      	ldr	r2, [pc, #136]	; (8002fd0 <HAL_TIM_OC_Start_IT+0x210>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d022      	beq.n	8002f90 <HAL_TIM_OC_Start_IT+0x1d0>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f52:	d01d      	beq.n	8002f90 <HAL_TIM_OC_Start_IT+0x1d0>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a1f      	ldr	r2, [pc, #124]	; (8002fd8 <HAL_TIM_OC_Start_IT+0x218>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d018      	beq.n	8002f90 <HAL_TIM_OC_Start_IT+0x1d0>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a1e      	ldr	r2, [pc, #120]	; (8002fdc <HAL_TIM_OC_Start_IT+0x21c>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d013      	beq.n	8002f90 <HAL_TIM_OC_Start_IT+0x1d0>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a1c      	ldr	r2, [pc, #112]	; (8002fe0 <HAL_TIM_OC_Start_IT+0x220>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d00e      	beq.n	8002f90 <HAL_TIM_OC_Start_IT+0x1d0>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a17      	ldr	r2, [pc, #92]	; (8002fd4 <HAL_TIM_OC_Start_IT+0x214>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d009      	beq.n	8002f90 <HAL_TIM_OC_Start_IT+0x1d0>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a18      	ldr	r2, [pc, #96]	; (8002fe4 <HAL_TIM_OC_Start_IT+0x224>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d004      	beq.n	8002f90 <HAL_TIM_OC_Start_IT+0x1d0>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a17      	ldr	r2, [pc, #92]	; (8002fe8 <HAL_TIM_OC_Start_IT+0x228>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d111      	bne.n	8002fb4 <HAL_TIM_OC_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	f003 0307 	and.w	r3, r3, #7
 8002f9a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	2b06      	cmp	r3, #6
 8002fa0:	d010      	beq.n	8002fc4 <HAL_TIM_OC_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f042 0201 	orr.w	r2, r2, #1
 8002fb0:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fb2:	e007      	b.n	8002fc4 <HAL_TIM_OC_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f042 0201 	orr.w	r2, r2, #1
 8002fc2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002fc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3710      	adds	r7, #16
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	40010000 	.word	0x40010000
 8002fd4:	40010400 	.word	0x40010400
 8002fd8:	40000400 	.word	0x40000400
 8002fdc:	40000800 	.word	0x40000800
 8002fe0:	40000c00 	.word	0x40000c00
 8002fe4:	40014000 	.word	0x40014000
 8002fe8:	40001800 	.word	0x40001800

08002fec <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b082      	sub	sp, #8
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d101      	bne.n	8002ffe <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e041      	b.n	8003082 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003004:	b2db      	uxtb	r3, r3
 8003006:	2b00      	cmp	r3, #0
 8003008:	d106      	bne.n	8003018 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2200      	movs	r2, #0
 800300e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f000 f839 	bl	800308a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2202      	movs	r2, #2
 800301c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	3304      	adds	r3, #4
 8003028:	4619      	mov	r1, r3
 800302a:	4610      	mov	r0, r2
 800302c:	f000 fdb2 	bl	8003b94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2201      	movs	r2, #1
 8003034:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2201      	movs	r2, #1
 800303c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2201      	movs	r2, #1
 8003044:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2201      	movs	r2, #1
 800304c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2201      	movs	r2, #1
 800305c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2201      	movs	r2, #1
 8003064:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2201      	movs	r2, #1
 800306c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2201      	movs	r2, #1
 8003074:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2201      	movs	r2, #1
 800307c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003080:	2300      	movs	r3, #0
}
 8003082:	4618      	mov	r0, r3
 8003084:	3708      	adds	r7, #8
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}

0800308a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800308a:	b480      	push	{r7}
 800308c:	b083      	sub	sp, #12
 800308e:	af00      	add	r7, sp, #0
 8003090:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003092:	bf00      	nop
 8003094:	370c      	adds	r7, #12
 8003096:	46bd      	mov	sp, r7
 8003098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309c:	4770      	bx	lr
	...

080030a0 <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b086      	sub	sp, #24
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	60f8      	str	r0, [r7, #12]
 80030a8:	60b9      	str	r1, [r7, #8]
 80030aa:	607a      	str	r2, [r7, #4]
 80030ac:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80030ae:	2300      	movs	r3, #0
 80030b0:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d104      	bne.n	80030c2 <HAL_TIM_IC_Start_DMA+0x22>
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	e013      	b.n	80030ea <HAL_TIM_IC_Start_DMA+0x4a>
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	2b04      	cmp	r3, #4
 80030c6:	d104      	bne.n	80030d2 <HAL_TIM_IC_Start_DMA+0x32>
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	e00b      	b.n	80030ea <HAL_TIM_IC_Start_DMA+0x4a>
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	2b08      	cmp	r3, #8
 80030d6:	d104      	bne.n	80030e2 <HAL_TIM_IC_Start_DMA+0x42>
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	e003      	b.n	80030ea <HAL_TIM_IC_Start_DMA+0x4a>
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	75bb      	strb	r3, [r7, #22]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d104      	bne.n	80030fc <HAL_TIM_IC_Start_DMA+0x5c>
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	e013      	b.n	8003124 <HAL_TIM_IC_Start_DMA+0x84>
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	2b04      	cmp	r3, #4
 8003100:	d104      	bne.n	800310c <HAL_TIM_IC_Start_DMA+0x6c>
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003108:	b2db      	uxtb	r3, r3
 800310a:	e00b      	b.n	8003124 <HAL_TIM_IC_Start_DMA+0x84>
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	2b08      	cmp	r3, #8
 8003110:	d104      	bne.n	800311c <HAL_TIM_IC_Start_DMA+0x7c>
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003118:	b2db      	uxtb	r3, r3
 800311a:	e003      	b.n	8003124 <HAL_TIM_IC_Start_DMA+0x84>
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003122:	b2db      	uxtb	r3, r3
 8003124:	757b      	strb	r3, [r7, #21]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 8003126:	7dbb      	ldrb	r3, [r7, #22]
 8003128:	2b02      	cmp	r3, #2
 800312a:	d002      	beq.n	8003132 <HAL_TIM_IC_Start_DMA+0x92>
      || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 800312c:	7d7b      	ldrb	r3, [r7, #21]
 800312e:	2b02      	cmp	r3, #2
 8003130:	d101      	bne.n	8003136 <HAL_TIM_IC_Start_DMA+0x96>
  {
    return HAL_BUSY;
 8003132:	2302      	movs	r3, #2
 8003134:	e146      	b.n	80033c4 <HAL_TIM_IC_Start_DMA+0x324>
  }
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 8003136:	7dbb      	ldrb	r3, [r7, #22]
 8003138:	2b01      	cmp	r3, #1
 800313a:	d143      	bne.n	80031c4 <HAL_TIM_IC_Start_DMA+0x124>
           && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 800313c:	7d7b      	ldrb	r3, [r7, #21]
 800313e:	2b01      	cmp	r3, #1
 8003140:	d140      	bne.n	80031c4 <HAL_TIM_IC_Start_DMA+0x124>
  {
    if ((pData == NULL) && (Length > 0U))
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d104      	bne.n	8003152 <HAL_TIM_IC_Start_DMA+0xb2>
 8003148:	887b      	ldrh	r3, [r7, #2]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d001      	beq.n	8003152 <HAL_TIM_IC_Start_DMA+0xb2>
    {
      return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e138      	b.n	80033c4 <HAL_TIM_IC_Start_DMA+0x324>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d104      	bne.n	8003162 <HAL_TIM_IC_Start_DMA+0xc2>
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2202      	movs	r2, #2
 800315c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003160:	e013      	b.n	800318a <HAL_TIM_IC_Start_DMA+0xea>
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	2b04      	cmp	r3, #4
 8003166:	d104      	bne.n	8003172 <HAL_TIM_IC_Start_DMA+0xd2>
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2202      	movs	r2, #2
 800316c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003170:	e00b      	b.n	800318a <HAL_TIM_IC_Start_DMA+0xea>
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	2b08      	cmp	r3, #8
 8003176:	d104      	bne.n	8003182 <HAL_TIM_IC_Start_DMA+0xe2>
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2202      	movs	r2, #2
 800317c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003180:	e003      	b.n	800318a <HAL_TIM_IC_Start_DMA+0xea>
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2202      	movs	r2, #2
 8003186:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d104      	bne.n	800319a <HAL_TIM_IC_Start_DMA+0xfa>
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2202      	movs	r2, #2
 8003194:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    if ((pData == NULL) && (Length > 0U))
 8003198:	e016      	b.n	80031c8 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	2b04      	cmp	r3, #4
 800319e:	d104      	bne.n	80031aa <HAL_TIM_IC_Start_DMA+0x10a>
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2202      	movs	r2, #2
 80031a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    if ((pData == NULL) && (Length > 0U))
 80031a8:	e00e      	b.n	80031c8 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	2b08      	cmp	r3, #8
 80031ae:	d104      	bne.n	80031ba <HAL_TIM_IC_Start_DMA+0x11a>
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2202      	movs	r2, #2
 80031b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    if ((pData == NULL) && (Length > 0U))
 80031b8:	e006      	b.n	80031c8 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2202      	movs	r2, #2
 80031be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    if ((pData == NULL) && (Length > 0U))
 80031c2:	e001      	b.n	80031c8 <HAL_TIM_IC_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e0fd      	b.n	80033c4 <HAL_TIM_IC_Start_DMA+0x324>
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	2201      	movs	r2, #1
 80031ce:	68b9      	ldr	r1, [r7, #8]
 80031d0:	4618      	mov	r0, r3
 80031d2:	f001 f8f3 	bl	80043bc <TIM_CCxChannelCmd>

  switch (Channel)
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	2b0c      	cmp	r3, #12
 80031da:	f200 80ad 	bhi.w	8003338 <HAL_TIM_IC_Start_DMA+0x298>
 80031de:	a201      	add	r2, pc, #4	; (adr r2, 80031e4 <HAL_TIM_IC_Start_DMA+0x144>)
 80031e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031e4:	08003219 	.word	0x08003219
 80031e8:	08003339 	.word	0x08003339
 80031ec:	08003339 	.word	0x08003339
 80031f0:	08003339 	.word	0x08003339
 80031f4:	08003261 	.word	0x08003261
 80031f8:	08003339 	.word	0x08003339
 80031fc:	08003339 	.word	0x08003339
 8003200:	08003339 	.word	0x08003339
 8003204:	080032a9 	.word	0x080032a9
 8003208:	08003339 	.word	0x08003339
 800320c:	08003339 	.word	0x08003339
 8003210:	08003339 	.word	0x08003339
 8003214:	080032f1 	.word	0x080032f1
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321c:	4a6b      	ldr	r2, [pc, #428]	; (80033cc <HAL_TIM_IC_Start_DMA+0x32c>)
 800321e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003224:	4a6a      	ldr	r2, [pc, #424]	; (80033d0 <HAL_TIM_IC_Start_DMA+0x330>)
 8003226:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322c:	4a69      	ldr	r2, [pc, #420]	; (80033d4 <HAL_TIM_IC_Start_DMA+0x334>)
 800322e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	3334      	adds	r3, #52	; 0x34
 800323a:	4619      	mov	r1, r3
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	887b      	ldrh	r3, [r7, #2]
 8003240:	f7fe faa2 	bl	8001788 <HAL_DMA_Start_IT>
 8003244:	4603      	mov	r3, r0
 8003246:	2b00      	cmp	r3, #0
 8003248:	d001      	beq.n	800324e <HAL_TIM_IC_Start_DMA+0x1ae>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e0ba      	b.n	80033c4 <HAL_TIM_IC_Start_DMA+0x324>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	68da      	ldr	r2, [r3, #12]
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800325c:	60da      	str	r2, [r3, #12]
      break;
 800325e:	e06e      	b.n	800333e <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003264:	4a59      	ldr	r2, [pc, #356]	; (80033cc <HAL_TIM_IC_Start_DMA+0x32c>)
 8003266:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800326c:	4a58      	ldr	r2, [pc, #352]	; (80033d0 <HAL_TIM_IC_Start_DMA+0x330>)
 800326e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003274:	4a57      	ldr	r2, [pc, #348]	; (80033d4 <HAL_TIM_IC_Start_DMA+0x334>)
 8003276:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	3338      	adds	r3, #56	; 0x38
 8003282:	4619      	mov	r1, r3
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	887b      	ldrh	r3, [r7, #2]
 8003288:	f7fe fa7e 	bl	8001788 <HAL_DMA_Start_IT>
 800328c:	4603      	mov	r3, r0
 800328e:	2b00      	cmp	r3, #0
 8003290:	d001      	beq.n	8003296 <HAL_TIM_IC_Start_DMA+0x1f6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e096      	b.n	80033c4 <HAL_TIM_IC_Start_DMA+0x324>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	68da      	ldr	r2, [r3, #12]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80032a4:	60da      	str	r2, [r3, #12]
      break;
 80032a6:	e04a      	b.n	800333e <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ac:	4a47      	ldr	r2, [pc, #284]	; (80033cc <HAL_TIM_IC_Start_DMA+0x32c>)
 80032ae:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b4:	4a46      	ldr	r2, [pc, #280]	; (80033d0 <HAL_TIM_IC_Start_DMA+0x330>)
 80032b6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032bc:	4a45      	ldr	r2, [pc, #276]	; (80033d4 <HAL_TIM_IC_Start_DMA+0x334>)
 80032be:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	333c      	adds	r3, #60	; 0x3c
 80032ca:	4619      	mov	r1, r3
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	887b      	ldrh	r3, [r7, #2]
 80032d0:	f7fe fa5a 	bl	8001788 <HAL_DMA_Start_IT>
 80032d4:	4603      	mov	r3, r0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d001      	beq.n	80032de <HAL_TIM_IC_Start_DMA+0x23e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e072      	b.n	80033c4 <HAL_TIM_IC_Start_DMA+0x324>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	68da      	ldr	r2, [r3, #12]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032ec:	60da      	str	r2, [r3, #12]
      break;
 80032ee:	e026      	b.n	800333e <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f4:	4a35      	ldr	r2, [pc, #212]	; (80033cc <HAL_TIM_IC_Start_DMA+0x32c>)
 80032f6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032fc:	4a34      	ldr	r2, [pc, #208]	; (80033d0 <HAL_TIM_IC_Start_DMA+0x330>)
 80032fe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003304:	4a33      	ldr	r2, [pc, #204]	; (80033d4 <HAL_TIM_IC_Start_DMA+0x334>)
 8003306:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	3340      	adds	r3, #64	; 0x40
 8003312:	4619      	mov	r1, r3
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	887b      	ldrh	r3, [r7, #2]
 8003318:	f7fe fa36 	bl	8001788 <HAL_DMA_Start_IT>
 800331c:	4603      	mov	r3, r0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d001      	beq.n	8003326 <HAL_TIM_IC_Start_DMA+0x286>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e04e      	b.n	80033c4 <HAL_TIM_IC_Start_DMA+0x324>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	68da      	ldr	r2, [r3, #12]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003334:	60da      	str	r2, [r3, #12]
      break;
 8003336:	e002      	b.n	800333e <HAL_TIM_IC_Start_DMA+0x29e>
    }

    default:
      status = HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	75fb      	strb	r3, [r7, #23]
      break;
 800333c:	bf00      	nop
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a25      	ldr	r2, [pc, #148]	; (80033d8 <HAL_TIM_IC_Start_DMA+0x338>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d022      	beq.n	800338e <HAL_TIM_IC_Start_DMA+0x2ee>
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003350:	d01d      	beq.n	800338e <HAL_TIM_IC_Start_DMA+0x2ee>
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a21      	ldr	r2, [pc, #132]	; (80033dc <HAL_TIM_IC_Start_DMA+0x33c>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d018      	beq.n	800338e <HAL_TIM_IC_Start_DMA+0x2ee>
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a1f      	ldr	r2, [pc, #124]	; (80033e0 <HAL_TIM_IC_Start_DMA+0x340>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d013      	beq.n	800338e <HAL_TIM_IC_Start_DMA+0x2ee>
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a1e      	ldr	r2, [pc, #120]	; (80033e4 <HAL_TIM_IC_Start_DMA+0x344>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d00e      	beq.n	800338e <HAL_TIM_IC_Start_DMA+0x2ee>
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a1c      	ldr	r2, [pc, #112]	; (80033e8 <HAL_TIM_IC_Start_DMA+0x348>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d009      	beq.n	800338e <HAL_TIM_IC_Start_DMA+0x2ee>
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a1b      	ldr	r2, [pc, #108]	; (80033ec <HAL_TIM_IC_Start_DMA+0x34c>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d004      	beq.n	800338e <HAL_TIM_IC_Start_DMA+0x2ee>
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a19      	ldr	r2, [pc, #100]	; (80033f0 <HAL_TIM_IC_Start_DMA+0x350>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d111      	bne.n	80033b2 <HAL_TIM_IC_Start_DMA+0x312>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	f003 0307 	and.w	r3, r3, #7
 8003398:	613b      	str	r3, [r7, #16]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	2b06      	cmp	r3, #6
 800339e:	d010      	beq.n	80033c2 <HAL_TIM_IC_Start_DMA+0x322>
    {
      __HAL_TIM_ENABLE(htim);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f042 0201 	orr.w	r2, r2, #1
 80033ae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033b0:	e007      	b.n	80033c2 <HAL_TIM_IC_Start_DMA+0x322>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f042 0201 	orr.w	r2, r2, #1
 80033c0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80033c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3718      	adds	r7, #24
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}
 80033cc:	08003a65 	.word	0x08003a65
 80033d0:	08003b2d 	.word	0x08003b2d
 80033d4:	080039d3 	.word	0x080039d3
 80033d8:	40010000 	.word	0x40010000
 80033dc:	40000400 	.word	0x40000400
 80033e0:	40000800 	.word	0x40000800
 80033e4:	40000c00 	.word	0x40000c00
 80033e8:	40010400 	.word	0x40010400
 80033ec:	40014000 	.word	0x40014000
 80033f0:	40001800 	.word	0x40001800

080033f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b082      	sub	sp, #8
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	691b      	ldr	r3, [r3, #16]
 8003402:	f003 0302 	and.w	r3, r3, #2
 8003406:	2b02      	cmp	r3, #2
 8003408:	d122      	bne.n	8003450 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	f003 0302 	and.w	r3, r3, #2
 8003414:	2b02      	cmp	r3, #2
 8003416:	d11b      	bne.n	8003450 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f06f 0202 	mvn.w	r2, #2
 8003420:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2201      	movs	r2, #1
 8003426:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	699b      	ldr	r3, [r3, #24]
 800342e:	f003 0303 	and.w	r3, r3, #3
 8003432:	2b00      	cmp	r3, #0
 8003434:	d003      	beq.n	800343e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f7fd fafe 	bl	8000a38 <HAL_TIM_IC_CaptureCallback>
 800343c:	e005      	b.n	800344a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f7fd fada 	bl	80009f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003444:	6878      	ldr	r0, [r7, #4]
 8003446:	f000 faa6 	bl	8003996 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	691b      	ldr	r3, [r3, #16]
 8003456:	f003 0304 	and.w	r3, r3, #4
 800345a:	2b04      	cmp	r3, #4
 800345c:	d122      	bne.n	80034a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	f003 0304 	and.w	r3, r3, #4
 8003468:	2b04      	cmp	r3, #4
 800346a:	d11b      	bne.n	80034a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f06f 0204 	mvn.w	r2, #4
 8003474:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2202      	movs	r2, #2
 800347a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	699b      	ldr	r3, [r3, #24]
 8003482:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003486:	2b00      	cmp	r3, #0
 8003488:	d003      	beq.n	8003492 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f7fd fad4 	bl	8000a38 <HAL_TIM_IC_CaptureCallback>
 8003490:	e005      	b.n	800349e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f7fd fab0 	bl	80009f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	f000 fa7c 	bl	8003996 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	691b      	ldr	r3, [r3, #16]
 80034aa:	f003 0308 	and.w	r3, r3, #8
 80034ae:	2b08      	cmp	r3, #8
 80034b0:	d122      	bne.n	80034f8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	f003 0308 	and.w	r3, r3, #8
 80034bc:	2b08      	cmp	r3, #8
 80034be:	d11b      	bne.n	80034f8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f06f 0208 	mvn.w	r2, #8
 80034c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2204      	movs	r2, #4
 80034ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	69db      	ldr	r3, [r3, #28]
 80034d6:	f003 0303 	and.w	r3, r3, #3
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d003      	beq.n	80034e6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f7fd faaa 	bl	8000a38 <HAL_TIM_IC_CaptureCallback>
 80034e4:	e005      	b.n	80034f2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f7fd fa86 	bl	80009f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f000 fa52 	bl	8003996 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	691b      	ldr	r3, [r3, #16]
 80034fe:	f003 0310 	and.w	r3, r3, #16
 8003502:	2b10      	cmp	r3, #16
 8003504:	d122      	bne.n	800354c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	f003 0310 	and.w	r3, r3, #16
 8003510:	2b10      	cmp	r3, #16
 8003512:	d11b      	bne.n	800354c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f06f 0210 	mvn.w	r2, #16
 800351c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2208      	movs	r2, #8
 8003522:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	69db      	ldr	r3, [r3, #28]
 800352a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800352e:	2b00      	cmp	r3, #0
 8003530:	d003      	beq.n	800353a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f7fd fa80 	bl	8000a38 <HAL_TIM_IC_CaptureCallback>
 8003538:	e005      	b.n	8003546 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f7fd fa5c 	bl	80009f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f000 fa28 	bl	8003996 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2200      	movs	r2, #0
 800354a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	691b      	ldr	r3, [r3, #16]
 8003552:	f003 0301 	and.w	r3, r3, #1
 8003556:	2b01      	cmp	r3, #1
 8003558:	d10e      	bne.n	8003578 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	f003 0301 	and.w	r3, r3, #1
 8003564:	2b01      	cmp	r3, #1
 8003566:	d107      	bne.n	8003578 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f06f 0201 	mvn.w	r2, #1
 8003570:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f7fd fa20 	bl	80009b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	691b      	ldr	r3, [r3, #16]
 800357e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003582:	2b80      	cmp	r3, #128	; 0x80
 8003584:	d10e      	bne.n	80035a4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003590:	2b80      	cmp	r3, #128	; 0x80
 8003592:	d107      	bne.n	80035a4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800359c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f000 ffb8 	bl	8004514 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	691b      	ldr	r3, [r3, #16]
 80035aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035ae:	2b40      	cmp	r3, #64	; 0x40
 80035b0:	d10e      	bne.n	80035d0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035bc:	2b40      	cmp	r3, #64	; 0x40
 80035be:	d107      	bne.n	80035d0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80035c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f000 f9ed 	bl	80039aa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	691b      	ldr	r3, [r3, #16]
 80035d6:	f003 0320 	and.w	r3, r3, #32
 80035da:	2b20      	cmp	r3, #32
 80035dc:	d10e      	bne.n	80035fc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	f003 0320 	and.w	r3, r3, #32
 80035e8:	2b20      	cmp	r3, #32
 80035ea:	d107      	bne.n	80035fc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f06f 0220 	mvn.w	r2, #32
 80035f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f000 ff82 	bl	8004500 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80035fc:	bf00      	nop
 80035fe:	3708      	adds	r7, #8
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}

08003604 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b086      	sub	sp, #24
 8003608:	af00      	add	r7, sp, #0
 800360a:	60f8      	str	r0, [r7, #12]
 800360c:	60b9      	str	r1, [r7, #8]
 800360e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003610:	2300      	movs	r3, #0
 8003612:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800361a:	2b01      	cmp	r3, #1
 800361c:	d101      	bne.n	8003622 <HAL_TIM_OC_ConfigChannel+0x1e>
 800361e:	2302      	movs	r3, #2
 8003620:	e048      	b.n	80036b4 <HAL_TIM_OC_ConfigChannel+0xb0>
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2201      	movs	r2, #1
 8003626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2b0c      	cmp	r3, #12
 800362e:	d839      	bhi.n	80036a4 <HAL_TIM_OC_ConfigChannel+0xa0>
 8003630:	a201      	add	r2, pc, #4	; (adr r2, 8003638 <HAL_TIM_OC_ConfigChannel+0x34>)
 8003632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003636:	bf00      	nop
 8003638:	0800366d 	.word	0x0800366d
 800363c:	080036a5 	.word	0x080036a5
 8003640:	080036a5 	.word	0x080036a5
 8003644:	080036a5 	.word	0x080036a5
 8003648:	0800367b 	.word	0x0800367b
 800364c:	080036a5 	.word	0x080036a5
 8003650:	080036a5 	.word	0x080036a5
 8003654:	080036a5 	.word	0x080036a5
 8003658:	08003689 	.word	0x08003689
 800365c:	080036a5 	.word	0x080036a5
 8003660:	080036a5 	.word	0x080036a5
 8003664:	080036a5 	.word	0x080036a5
 8003668:	08003697 	.word	0x08003697
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	68b9      	ldr	r1, [r7, #8]
 8003672:	4618      	mov	r0, r3
 8003674:	f000 fb2e 	bl	8003cd4 <TIM_OC1_SetConfig>
      break;
 8003678:	e017      	b.n	80036aa <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	68b9      	ldr	r1, [r7, #8]
 8003680:	4618      	mov	r0, r3
 8003682:	f000 fb97 	bl	8003db4 <TIM_OC2_SetConfig>
      break;
 8003686:	e010      	b.n	80036aa <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	68b9      	ldr	r1, [r7, #8]
 800368e:	4618      	mov	r0, r3
 8003690:	f000 fc06 	bl	8003ea0 <TIM_OC3_SetConfig>
      break;
 8003694:	e009      	b.n	80036aa <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	68b9      	ldr	r1, [r7, #8]
 800369c:	4618      	mov	r0, r3
 800369e:	f000 fc73 	bl	8003f88 <TIM_OC4_SetConfig>
      break;
 80036a2:	e002      	b.n	80036aa <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	75fb      	strb	r3, [r7, #23]
      break;
 80036a8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2200      	movs	r2, #0
 80036ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80036b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3718      	adds	r7, #24
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}

080036bc <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b086      	sub	sp, #24
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	60f8      	str	r0, [r7, #12]
 80036c4:	60b9      	str	r1, [r7, #8]
 80036c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036c8:	2300      	movs	r3, #0
 80036ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d101      	bne.n	80036da <HAL_TIM_IC_ConfigChannel+0x1e>
 80036d6:	2302      	movs	r3, #2
 80036d8:	e088      	b.n	80037ec <HAL_TIM_IC_ConfigChannel+0x130>
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2201      	movs	r2, #1
 80036de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d11b      	bne.n	8003720 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	6818      	ldr	r0, [r3, #0]
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	6819      	ldr	r1, [r3, #0]
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	685a      	ldr	r2, [r3, #4]
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	f000 fc9c 	bl	8004034 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	699a      	ldr	r2, [r3, #24]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f022 020c 	bic.w	r2, r2, #12
 800370a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	6999      	ldr	r1, [r3, #24]
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	689a      	ldr	r2, [r3, #8]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	430a      	orrs	r2, r1
 800371c:	619a      	str	r2, [r3, #24]
 800371e:	e060      	b.n	80037e2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2b04      	cmp	r3, #4
 8003724:	d11c      	bne.n	8003760 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	6818      	ldr	r0, [r3, #0]
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	6819      	ldr	r1, [r3, #0]
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	685a      	ldr	r2, [r3, #4]
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	68db      	ldr	r3, [r3, #12]
 8003736:	f000 fd20 	bl	800417a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	699a      	ldr	r2, [r3, #24]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003748:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	6999      	ldr	r1, [r3, #24]
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	021a      	lsls	r2, r3, #8
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	430a      	orrs	r2, r1
 800375c:	619a      	str	r2, [r3, #24]
 800375e:	e040      	b.n	80037e2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2b08      	cmp	r3, #8
 8003764:	d11b      	bne.n	800379e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	6818      	ldr	r0, [r3, #0]
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	6819      	ldr	r1, [r3, #0]
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	685a      	ldr	r2, [r3, #4]
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	68db      	ldr	r3, [r3, #12]
 8003776:	f000 fd6d 	bl	8004254 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	69da      	ldr	r2, [r3, #28]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f022 020c 	bic.w	r2, r2, #12
 8003788:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	69d9      	ldr	r1, [r3, #28]
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	689a      	ldr	r2, [r3, #8]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	430a      	orrs	r2, r1
 800379a:	61da      	str	r2, [r3, #28]
 800379c:	e021      	b.n	80037e2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2b0c      	cmp	r3, #12
 80037a2:	d11c      	bne.n	80037de <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	6818      	ldr	r0, [r3, #0]
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	6819      	ldr	r1, [r3, #0]
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	685a      	ldr	r2, [r3, #4]
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	f000 fd8a 	bl	80042cc <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	69da      	ldr	r2, [r3, #28]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80037c6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	69d9      	ldr	r1, [r3, #28]
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	021a      	lsls	r2, r3, #8
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	430a      	orrs	r2, r1
 80037da:	61da      	str	r2, [r3, #28]
 80037dc:	e001      	b.n	80037e2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2200      	movs	r2, #0
 80037e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80037ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3718      	adds	r7, #24
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}

080037f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b084      	sub	sp, #16
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037fe:	2300      	movs	r3, #0
 8003800:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003808:	2b01      	cmp	r3, #1
 800380a:	d101      	bne.n	8003810 <HAL_TIM_ConfigClockSource+0x1c>
 800380c:	2302      	movs	r3, #2
 800380e:	e0b4      	b.n	800397a <HAL_TIM_ConfigClockSource+0x186>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2201      	movs	r2, #1
 8003814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2202      	movs	r2, #2
 800381c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800382e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003836:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	68ba      	ldr	r2, [r7, #8]
 800383e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003848:	d03e      	beq.n	80038c8 <HAL_TIM_ConfigClockSource+0xd4>
 800384a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800384e:	f200 8087 	bhi.w	8003960 <HAL_TIM_ConfigClockSource+0x16c>
 8003852:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003856:	f000 8086 	beq.w	8003966 <HAL_TIM_ConfigClockSource+0x172>
 800385a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800385e:	d87f      	bhi.n	8003960 <HAL_TIM_ConfigClockSource+0x16c>
 8003860:	2b70      	cmp	r3, #112	; 0x70
 8003862:	d01a      	beq.n	800389a <HAL_TIM_ConfigClockSource+0xa6>
 8003864:	2b70      	cmp	r3, #112	; 0x70
 8003866:	d87b      	bhi.n	8003960 <HAL_TIM_ConfigClockSource+0x16c>
 8003868:	2b60      	cmp	r3, #96	; 0x60
 800386a:	d050      	beq.n	800390e <HAL_TIM_ConfigClockSource+0x11a>
 800386c:	2b60      	cmp	r3, #96	; 0x60
 800386e:	d877      	bhi.n	8003960 <HAL_TIM_ConfigClockSource+0x16c>
 8003870:	2b50      	cmp	r3, #80	; 0x50
 8003872:	d03c      	beq.n	80038ee <HAL_TIM_ConfigClockSource+0xfa>
 8003874:	2b50      	cmp	r3, #80	; 0x50
 8003876:	d873      	bhi.n	8003960 <HAL_TIM_ConfigClockSource+0x16c>
 8003878:	2b40      	cmp	r3, #64	; 0x40
 800387a:	d058      	beq.n	800392e <HAL_TIM_ConfigClockSource+0x13a>
 800387c:	2b40      	cmp	r3, #64	; 0x40
 800387e:	d86f      	bhi.n	8003960 <HAL_TIM_ConfigClockSource+0x16c>
 8003880:	2b30      	cmp	r3, #48	; 0x30
 8003882:	d064      	beq.n	800394e <HAL_TIM_ConfigClockSource+0x15a>
 8003884:	2b30      	cmp	r3, #48	; 0x30
 8003886:	d86b      	bhi.n	8003960 <HAL_TIM_ConfigClockSource+0x16c>
 8003888:	2b20      	cmp	r3, #32
 800388a:	d060      	beq.n	800394e <HAL_TIM_ConfigClockSource+0x15a>
 800388c:	2b20      	cmp	r3, #32
 800388e:	d867      	bhi.n	8003960 <HAL_TIM_ConfigClockSource+0x16c>
 8003890:	2b00      	cmp	r3, #0
 8003892:	d05c      	beq.n	800394e <HAL_TIM_ConfigClockSource+0x15a>
 8003894:	2b10      	cmp	r3, #16
 8003896:	d05a      	beq.n	800394e <HAL_TIM_ConfigClockSource+0x15a>
 8003898:	e062      	b.n	8003960 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6818      	ldr	r0, [r3, #0]
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	6899      	ldr	r1, [r3, #8]
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	685a      	ldr	r2, [r3, #4]
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	68db      	ldr	r3, [r3, #12]
 80038aa:	f000 fd67 	bl	800437c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80038bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	68ba      	ldr	r2, [r7, #8]
 80038c4:	609a      	str	r2, [r3, #8]
      break;
 80038c6:	e04f      	b.n	8003968 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6818      	ldr	r0, [r3, #0]
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	6899      	ldr	r1, [r3, #8]
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	685a      	ldr	r2, [r3, #4]
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	68db      	ldr	r3, [r3, #12]
 80038d8:	f000 fd50 	bl	800437c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	689a      	ldr	r2, [r3, #8]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80038ea:	609a      	str	r2, [r3, #8]
      break;
 80038ec:	e03c      	b.n	8003968 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6818      	ldr	r0, [r3, #0]
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	6859      	ldr	r1, [r3, #4]
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	68db      	ldr	r3, [r3, #12]
 80038fa:	461a      	mov	r2, r3
 80038fc:	f000 fc0e 	bl	800411c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	2150      	movs	r1, #80	; 0x50
 8003906:	4618      	mov	r0, r3
 8003908:	f000 fd1d 	bl	8004346 <TIM_ITRx_SetConfig>
      break;
 800390c:	e02c      	b.n	8003968 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6818      	ldr	r0, [r3, #0]
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	6859      	ldr	r1, [r3, #4]
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	68db      	ldr	r3, [r3, #12]
 800391a:	461a      	mov	r2, r3
 800391c:	f000 fc6a 	bl	80041f4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	2160      	movs	r1, #96	; 0x60
 8003926:	4618      	mov	r0, r3
 8003928:	f000 fd0d 	bl	8004346 <TIM_ITRx_SetConfig>
      break;
 800392c:	e01c      	b.n	8003968 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6818      	ldr	r0, [r3, #0]
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	6859      	ldr	r1, [r3, #4]
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	68db      	ldr	r3, [r3, #12]
 800393a:	461a      	mov	r2, r3
 800393c:	f000 fbee 	bl	800411c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	2140      	movs	r1, #64	; 0x40
 8003946:	4618      	mov	r0, r3
 8003948:	f000 fcfd 	bl	8004346 <TIM_ITRx_SetConfig>
      break;
 800394c:	e00c      	b.n	8003968 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4619      	mov	r1, r3
 8003958:	4610      	mov	r0, r2
 800395a:	f000 fcf4 	bl	8004346 <TIM_ITRx_SetConfig>
      break;
 800395e:	e003      	b.n	8003968 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	73fb      	strb	r3, [r7, #15]
      break;
 8003964:	e000      	b.n	8003968 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003966:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2201      	movs	r2, #1
 800396c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2200      	movs	r2, #0
 8003974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003978:	7bfb      	ldrb	r3, [r7, #15]
}
 800397a:	4618      	mov	r0, r3
 800397c:	3710      	adds	r7, #16
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}

08003982 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003982:	b480      	push	{r7}
 8003984:	b083      	sub	sp, #12
 8003986:	af00      	add	r7, sp, #0
 8003988:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800398a:	bf00      	nop
 800398c:	370c      	adds	r7, #12
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr

08003996 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003996:	b480      	push	{r7}
 8003998:	b083      	sub	sp, #12
 800399a:	af00      	add	r7, sp, #0
 800399c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800399e:	bf00      	nop
 80039a0:	370c      	adds	r7, #12
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr

080039aa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80039aa:	b480      	push	{r7}
 80039ac:	b083      	sub	sp, #12
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80039b2:	bf00      	nop
 80039b4:	370c      	adds	r7, #12
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr

080039be <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80039be:	b480      	push	{r7}
 80039c0:	b083      	sub	sp, #12
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80039c6:	bf00      	nop
 80039c8:	370c      	adds	r7, #12
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr

080039d2 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80039d2:	b580      	push	{r7, lr}
 80039d4:	b084      	sub	sp, #16
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039de:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e4:	687a      	ldr	r2, [r7, #4]
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d107      	bne.n	80039fa <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2201      	movs	r2, #1
 80039ee:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039f8:	e02a      	b.n	8003a50 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d107      	bne.n	8003a14 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2202      	movs	r2, #2
 8003a08:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a12:	e01d      	b.n	8003a50 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d107      	bne.n	8003a2e <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2204      	movs	r2, #4
 8003a22:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2201      	movs	r2, #1
 8003a28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a2c:	e010      	b.n	8003a50 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d107      	bne.n	8003a48 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2208      	movs	r2, #8
 8003a3c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2201      	movs	r2, #1
 8003a42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003a46:	e003      	b.n	8003a50 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8003a50:	68f8      	ldr	r0, [r7, #12]
 8003a52:	f7ff ffb4 	bl	80039be <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	771a      	strb	r2, [r3, #28]
}
 8003a5c:	bf00      	nop
 8003a5e:	3710      	adds	r7, #16
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}

08003a64 <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b084      	sub	sp, #16
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a70:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a76:	687a      	ldr	r2, [r7, #4]
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d10f      	bne.n	8003a9c <TIM_DMACaptureCplt+0x38>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	69db      	ldr	r3, [r3, #28]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d146      	bne.n	8003b18 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2201      	movs	r2, #1
 8003a96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a9a:	e03d      	b.n	8003b18 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d10f      	bne.n	8003ac6 <TIM_DMACaptureCplt+0x62>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2202      	movs	r2, #2
 8003aaa:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	69db      	ldr	r3, [r3, #28]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d131      	bne.n	8003b18 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ac4:	e028      	b.n	8003b18 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d10f      	bne.n	8003af0 <TIM_DMACaptureCplt+0x8c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2204      	movs	r2, #4
 8003ad4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	69db      	ldr	r3, [r3, #28]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d11c      	bne.n	8003b18 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2201      	movs	r2, #1
 8003aea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003aee:	e013      	b.n	8003b18 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af4:	687a      	ldr	r2, [r7, #4]
 8003af6:	429a      	cmp	r2, r3
 8003af8:	d10e      	bne.n	8003b18 <TIM_DMACaptureCplt+0xb4>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2208      	movs	r2, #8
 8003afe:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	69db      	ldr	r3, [r3, #28]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d107      	bne.n	8003b18 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2201      	movs	r2, #1
 8003b14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 8003b18:	68f8      	ldr	r0, [r7, #12]
 8003b1a:	f7fc ff8d 	bl	8000a38 <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2200      	movs	r2, #0
 8003b22:	771a      	strb	r2, [r3, #28]
}
 8003b24:	bf00      	nop
 8003b26:	3710      	adds	r7, #16
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}

08003b2c <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b084      	sub	sp, #16
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b38:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d103      	bne.n	8003b4c <TIM_DMACaptureHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2201      	movs	r2, #1
 8003b48:	771a      	strb	r2, [r3, #28]
 8003b4a:	e019      	b.n	8003b80 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b50:	687a      	ldr	r2, [r7, #4]
 8003b52:	429a      	cmp	r2, r3
 8003b54:	d103      	bne.n	8003b5e <TIM_DMACaptureHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2202      	movs	r2, #2
 8003b5a:	771a      	strb	r2, [r3, #28]
 8003b5c:	e010      	b.n	8003b80 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d103      	bne.n	8003b70 <TIM_DMACaptureHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2204      	movs	r2, #4
 8003b6c:	771a      	strb	r2, [r3, #28]
 8003b6e:	e007      	b.n	8003b80 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b74:	687a      	ldr	r2, [r7, #4]
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d102      	bne.n	8003b80 <TIM_DMACaptureHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2208      	movs	r2, #8
 8003b7e:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8003b80:	68f8      	ldr	r0, [r7, #12]
 8003b82:	f7ff fefe 	bl	8003982 <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	771a      	strb	r2, [r3, #28]
}
 8003b8c:	bf00      	nop
 8003b8e:	3710      	adds	r7, #16
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}

08003b94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b085      	sub	sp, #20
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	4a40      	ldr	r2, [pc, #256]	; (8003ca8 <TIM_Base_SetConfig+0x114>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d013      	beq.n	8003bd4 <TIM_Base_SetConfig+0x40>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bb2:	d00f      	beq.n	8003bd4 <TIM_Base_SetConfig+0x40>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	4a3d      	ldr	r2, [pc, #244]	; (8003cac <TIM_Base_SetConfig+0x118>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d00b      	beq.n	8003bd4 <TIM_Base_SetConfig+0x40>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	4a3c      	ldr	r2, [pc, #240]	; (8003cb0 <TIM_Base_SetConfig+0x11c>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d007      	beq.n	8003bd4 <TIM_Base_SetConfig+0x40>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	4a3b      	ldr	r2, [pc, #236]	; (8003cb4 <TIM_Base_SetConfig+0x120>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d003      	beq.n	8003bd4 <TIM_Base_SetConfig+0x40>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	4a3a      	ldr	r2, [pc, #232]	; (8003cb8 <TIM_Base_SetConfig+0x124>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d108      	bne.n	8003be6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	68fa      	ldr	r2, [r7, #12]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	4a2f      	ldr	r2, [pc, #188]	; (8003ca8 <TIM_Base_SetConfig+0x114>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d02b      	beq.n	8003c46 <TIM_Base_SetConfig+0xb2>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bf4:	d027      	beq.n	8003c46 <TIM_Base_SetConfig+0xb2>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4a2c      	ldr	r2, [pc, #176]	; (8003cac <TIM_Base_SetConfig+0x118>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d023      	beq.n	8003c46 <TIM_Base_SetConfig+0xb2>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	4a2b      	ldr	r2, [pc, #172]	; (8003cb0 <TIM_Base_SetConfig+0x11c>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d01f      	beq.n	8003c46 <TIM_Base_SetConfig+0xb2>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	4a2a      	ldr	r2, [pc, #168]	; (8003cb4 <TIM_Base_SetConfig+0x120>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d01b      	beq.n	8003c46 <TIM_Base_SetConfig+0xb2>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	4a29      	ldr	r2, [pc, #164]	; (8003cb8 <TIM_Base_SetConfig+0x124>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d017      	beq.n	8003c46 <TIM_Base_SetConfig+0xb2>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	4a28      	ldr	r2, [pc, #160]	; (8003cbc <TIM_Base_SetConfig+0x128>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d013      	beq.n	8003c46 <TIM_Base_SetConfig+0xb2>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4a27      	ldr	r2, [pc, #156]	; (8003cc0 <TIM_Base_SetConfig+0x12c>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d00f      	beq.n	8003c46 <TIM_Base_SetConfig+0xb2>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	4a26      	ldr	r2, [pc, #152]	; (8003cc4 <TIM_Base_SetConfig+0x130>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d00b      	beq.n	8003c46 <TIM_Base_SetConfig+0xb2>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	4a25      	ldr	r2, [pc, #148]	; (8003cc8 <TIM_Base_SetConfig+0x134>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d007      	beq.n	8003c46 <TIM_Base_SetConfig+0xb2>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	4a24      	ldr	r2, [pc, #144]	; (8003ccc <TIM_Base_SetConfig+0x138>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d003      	beq.n	8003c46 <TIM_Base_SetConfig+0xb2>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	4a23      	ldr	r2, [pc, #140]	; (8003cd0 <TIM_Base_SetConfig+0x13c>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d108      	bne.n	8003c58 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	68db      	ldr	r3, [r3, #12]
 8003c52:	68fa      	ldr	r2, [r7, #12]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	695b      	ldr	r3, [r3, #20]
 8003c62:	4313      	orrs	r3, r2
 8003c64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	68fa      	ldr	r2, [r7, #12]
 8003c6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	689a      	ldr	r2, [r3, #8]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	4a0a      	ldr	r2, [pc, #40]	; (8003ca8 <TIM_Base_SetConfig+0x114>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d003      	beq.n	8003c8c <TIM_Base_SetConfig+0xf8>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	4a0c      	ldr	r2, [pc, #48]	; (8003cb8 <TIM_Base_SetConfig+0x124>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d103      	bne.n	8003c94 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	691a      	ldr	r2, [r3, #16]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2201      	movs	r2, #1
 8003c98:	615a      	str	r2, [r3, #20]
}
 8003c9a:	bf00      	nop
 8003c9c:	3714      	adds	r7, #20
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr
 8003ca6:	bf00      	nop
 8003ca8:	40010000 	.word	0x40010000
 8003cac:	40000400 	.word	0x40000400
 8003cb0:	40000800 	.word	0x40000800
 8003cb4:	40000c00 	.word	0x40000c00
 8003cb8:	40010400 	.word	0x40010400
 8003cbc:	40014000 	.word	0x40014000
 8003cc0:	40014400 	.word	0x40014400
 8003cc4:	40014800 	.word	0x40014800
 8003cc8:	40001800 	.word	0x40001800
 8003ccc:	40001c00 	.word	0x40001c00
 8003cd0:	40002000 	.word	0x40002000

08003cd4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b087      	sub	sp, #28
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
 8003cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6a1b      	ldr	r3, [r3, #32]
 8003ce2:	f023 0201 	bic.w	r2, r3, #1
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6a1b      	ldr	r3, [r3, #32]
 8003cee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	699b      	ldr	r3, [r3, #24]
 8003cfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f023 0303 	bic.w	r3, r3, #3
 8003d0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	68fa      	ldr	r2, [r7, #12]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	f023 0302 	bic.w	r3, r3, #2
 8003d1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	697a      	ldr	r2, [r7, #20]
 8003d24:	4313      	orrs	r3, r2
 8003d26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	4a20      	ldr	r2, [pc, #128]	; (8003dac <TIM_OC1_SetConfig+0xd8>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d003      	beq.n	8003d38 <TIM_OC1_SetConfig+0x64>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	4a1f      	ldr	r2, [pc, #124]	; (8003db0 <TIM_OC1_SetConfig+0xdc>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d10c      	bne.n	8003d52 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	f023 0308 	bic.w	r3, r3, #8
 8003d3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	697a      	ldr	r2, [r7, #20]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	f023 0304 	bic.w	r3, r3, #4
 8003d50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	4a15      	ldr	r2, [pc, #84]	; (8003dac <TIM_OC1_SetConfig+0xd8>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d003      	beq.n	8003d62 <TIM_OC1_SetConfig+0x8e>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	4a14      	ldr	r2, [pc, #80]	; (8003db0 <TIM_OC1_SetConfig+0xdc>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d111      	bne.n	8003d86 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	695b      	ldr	r3, [r3, #20]
 8003d76:	693a      	ldr	r2, [r7, #16]
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	699b      	ldr	r3, [r3, #24]
 8003d80:	693a      	ldr	r2, [r7, #16]
 8003d82:	4313      	orrs	r3, r2
 8003d84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	693a      	ldr	r2, [r7, #16]
 8003d8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	68fa      	ldr	r2, [r7, #12]
 8003d90:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	685a      	ldr	r2, [r3, #4]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	697a      	ldr	r2, [r7, #20]
 8003d9e:	621a      	str	r2, [r3, #32]
}
 8003da0:	bf00      	nop
 8003da2:	371c      	adds	r7, #28
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr
 8003dac:	40010000 	.word	0x40010000
 8003db0:	40010400 	.word	0x40010400

08003db4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b087      	sub	sp, #28
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
 8003dbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6a1b      	ldr	r3, [r3, #32]
 8003dc2:	f023 0210 	bic.w	r2, r3, #16
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6a1b      	ldr	r3, [r3, #32]
 8003dce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	699b      	ldr	r3, [r3, #24]
 8003dda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003de2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	021b      	lsls	r3, r3, #8
 8003df2:	68fa      	ldr	r2, [r7, #12]
 8003df4:	4313      	orrs	r3, r2
 8003df6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	f023 0320 	bic.w	r3, r3, #32
 8003dfe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	011b      	lsls	r3, r3, #4
 8003e06:	697a      	ldr	r2, [r7, #20]
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	4a22      	ldr	r2, [pc, #136]	; (8003e98 <TIM_OC2_SetConfig+0xe4>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d003      	beq.n	8003e1c <TIM_OC2_SetConfig+0x68>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	4a21      	ldr	r2, [pc, #132]	; (8003e9c <TIM_OC2_SetConfig+0xe8>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d10d      	bne.n	8003e38 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	011b      	lsls	r3, r3, #4
 8003e2a:	697a      	ldr	r2, [r7, #20]
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e36:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	4a17      	ldr	r2, [pc, #92]	; (8003e98 <TIM_OC2_SetConfig+0xe4>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d003      	beq.n	8003e48 <TIM_OC2_SetConfig+0x94>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	4a16      	ldr	r2, [pc, #88]	; (8003e9c <TIM_OC2_SetConfig+0xe8>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d113      	bne.n	8003e70 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e4e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e56:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	695b      	ldr	r3, [r3, #20]
 8003e5c:	009b      	lsls	r3, r3, #2
 8003e5e:	693a      	ldr	r2, [r7, #16]
 8003e60:	4313      	orrs	r3, r2
 8003e62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	699b      	ldr	r3, [r3, #24]
 8003e68:	009b      	lsls	r3, r3, #2
 8003e6a:	693a      	ldr	r2, [r7, #16]
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	693a      	ldr	r2, [r7, #16]
 8003e74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	68fa      	ldr	r2, [r7, #12]
 8003e7a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	685a      	ldr	r2, [r3, #4]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	697a      	ldr	r2, [r7, #20]
 8003e88:	621a      	str	r2, [r3, #32]
}
 8003e8a:	bf00      	nop
 8003e8c:	371c      	adds	r7, #28
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr
 8003e96:	bf00      	nop
 8003e98:	40010000 	.word	0x40010000
 8003e9c:	40010400 	.word	0x40010400

08003ea0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b087      	sub	sp, #28
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6a1b      	ldr	r3, [r3, #32]
 8003eae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6a1b      	ldr	r3, [r3, #32]
 8003eba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	69db      	ldr	r3, [r3, #28]
 8003ec6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ece:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	f023 0303 	bic.w	r3, r3, #3
 8003ed6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	68fa      	ldr	r2, [r7, #12]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ee8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	021b      	lsls	r3, r3, #8
 8003ef0:	697a      	ldr	r2, [r7, #20]
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a21      	ldr	r2, [pc, #132]	; (8003f80 <TIM_OC3_SetConfig+0xe0>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d003      	beq.n	8003f06 <TIM_OC3_SetConfig+0x66>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4a20      	ldr	r2, [pc, #128]	; (8003f84 <TIM_OC3_SetConfig+0xe4>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d10d      	bne.n	8003f22 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f0c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	68db      	ldr	r3, [r3, #12]
 8003f12:	021b      	lsls	r3, r3, #8
 8003f14:	697a      	ldr	r2, [r7, #20]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4a16      	ldr	r2, [pc, #88]	; (8003f80 <TIM_OC3_SetConfig+0xe0>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d003      	beq.n	8003f32 <TIM_OC3_SetConfig+0x92>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4a15      	ldr	r2, [pc, #84]	; (8003f84 <TIM_OC3_SetConfig+0xe4>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d113      	bne.n	8003f5a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	695b      	ldr	r3, [r3, #20]
 8003f46:	011b      	lsls	r3, r3, #4
 8003f48:	693a      	ldr	r2, [r7, #16]
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	699b      	ldr	r3, [r3, #24]
 8003f52:	011b      	lsls	r3, r3, #4
 8003f54:	693a      	ldr	r2, [r7, #16]
 8003f56:	4313      	orrs	r3, r2
 8003f58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	693a      	ldr	r2, [r7, #16]
 8003f5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	68fa      	ldr	r2, [r7, #12]
 8003f64:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	685a      	ldr	r2, [r3, #4]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	697a      	ldr	r2, [r7, #20]
 8003f72:	621a      	str	r2, [r3, #32]
}
 8003f74:	bf00      	nop
 8003f76:	371c      	adds	r7, #28
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr
 8003f80:	40010000 	.word	0x40010000
 8003f84:	40010400 	.word	0x40010400

08003f88 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b087      	sub	sp, #28
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6a1b      	ldr	r3, [r3, #32]
 8003f96:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6a1b      	ldr	r3, [r3, #32]
 8003fa2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	69db      	ldr	r3, [r3, #28]
 8003fae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fbe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	021b      	lsls	r3, r3, #8
 8003fc6:	68fa      	ldr	r2, [r7, #12]
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003fd2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	031b      	lsls	r3, r3, #12
 8003fda:	693a      	ldr	r2, [r7, #16]
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	4a12      	ldr	r2, [pc, #72]	; (800402c <TIM_OC4_SetConfig+0xa4>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d003      	beq.n	8003ff0 <TIM_OC4_SetConfig+0x68>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	4a11      	ldr	r2, [pc, #68]	; (8004030 <TIM_OC4_SetConfig+0xa8>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d109      	bne.n	8004004 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ff6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	695b      	ldr	r3, [r3, #20]
 8003ffc:	019b      	lsls	r3, r3, #6
 8003ffe:	697a      	ldr	r2, [r7, #20]
 8004000:	4313      	orrs	r3, r2
 8004002:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	697a      	ldr	r2, [r7, #20]
 8004008:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	68fa      	ldr	r2, [r7, #12]
 800400e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	685a      	ldr	r2, [r3, #4]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	693a      	ldr	r2, [r7, #16]
 800401c:	621a      	str	r2, [r3, #32]
}
 800401e:	bf00      	nop
 8004020:	371c      	adds	r7, #28
 8004022:	46bd      	mov	sp, r7
 8004024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004028:	4770      	bx	lr
 800402a:	bf00      	nop
 800402c:	40010000 	.word	0x40010000
 8004030:	40010400 	.word	0x40010400

08004034 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004034:	b480      	push	{r7}
 8004036:	b087      	sub	sp, #28
 8004038:	af00      	add	r7, sp, #0
 800403a:	60f8      	str	r0, [r7, #12]
 800403c:	60b9      	str	r1, [r7, #8]
 800403e:	607a      	str	r2, [r7, #4]
 8004040:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	6a1b      	ldr	r3, [r3, #32]
 8004046:	f023 0201 	bic.w	r2, r3, #1
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	699b      	ldr	r3, [r3, #24]
 8004052:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6a1b      	ldr	r3, [r3, #32]
 8004058:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	4a28      	ldr	r2, [pc, #160]	; (8004100 <TIM_TI1_SetConfig+0xcc>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d01b      	beq.n	800409a <TIM_TI1_SetConfig+0x66>
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004068:	d017      	beq.n	800409a <TIM_TI1_SetConfig+0x66>
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	4a25      	ldr	r2, [pc, #148]	; (8004104 <TIM_TI1_SetConfig+0xd0>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d013      	beq.n	800409a <TIM_TI1_SetConfig+0x66>
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	4a24      	ldr	r2, [pc, #144]	; (8004108 <TIM_TI1_SetConfig+0xd4>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d00f      	beq.n	800409a <TIM_TI1_SetConfig+0x66>
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	4a23      	ldr	r2, [pc, #140]	; (800410c <TIM_TI1_SetConfig+0xd8>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d00b      	beq.n	800409a <TIM_TI1_SetConfig+0x66>
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	4a22      	ldr	r2, [pc, #136]	; (8004110 <TIM_TI1_SetConfig+0xdc>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d007      	beq.n	800409a <TIM_TI1_SetConfig+0x66>
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	4a21      	ldr	r2, [pc, #132]	; (8004114 <TIM_TI1_SetConfig+0xe0>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d003      	beq.n	800409a <TIM_TI1_SetConfig+0x66>
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	4a20      	ldr	r2, [pc, #128]	; (8004118 <TIM_TI1_SetConfig+0xe4>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d101      	bne.n	800409e <TIM_TI1_SetConfig+0x6a>
 800409a:	2301      	movs	r3, #1
 800409c:	e000      	b.n	80040a0 <TIM_TI1_SetConfig+0x6c>
 800409e:	2300      	movs	r3, #0
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d008      	beq.n	80040b6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	f023 0303 	bic.w	r3, r3, #3
 80040aa:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80040ac:	697a      	ldr	r2, [r7, #20]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	4313      	orrs	r3, r2
 80040b2:	617b      	str	r3, [r7, #20]
 80040b4:	e003      	b.n	80040be <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	f043 0301 	orr.w	r3, r3, #1
 80040bc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80040c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	011b      	lsls	r3, r3, #4
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	697a      	ldr	r2, [r7, #20]
 80040ce:	4313      	orrs	r3, r2
 80040d0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	f023 030a 	bic.w	r3, r3, #10
 80040d8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	f003 030a 	and.w	r3, r3, #10
 80040e0:	693a      	ldr	r2, [r7, #16]
 80040e2:	4313      	orrs	r3, r2
 80040e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	697a      	ldr	r2, [r7, #20]
 80040ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	693a      	ldr	r2, [r7, #16]
 80040f0:	621a      	str	r2, [r3, #32]
}
 80040f2:	bf00      	nop
 80040f4:	371c      	adds	r7, #28
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr
 80040fe:	bf00      	nop
 8004100:	40010000 	.word	0x40010000
 8004104:	40000400 	.word	0x40000400
 8004108:	40000800 	.word	0x40000800
 800410c:	40000c00 	.word	0x40000c00
 8004110:	40010400 	.word	0x40010400
 8004114:	40014000 	.word	0x40014000
 8004118:	40001800 	.word	0x40001800

0800411c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800411c:	b480      	push	{r7}
 800411e:	b087      	sub	sp, #28
 8004120:	af00      	add	r7, sp, #0
 8004122:	60f8      	str	r0, [r7, #12]
 8004124:	60b9      	str	r1, [r7, #8]
 8004126:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	6a1b      	ldr	r3, [r3, #32]
 800412c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	6a1b      	ldr	r3, [r3, #32]
 8004132:	f023 0201 	bic.w	r2, r3, #1
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	699b      	ldr	r3, [r3, #24]
 800413e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004146:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	011b      	lsls	r3, r3, #4
 800414c:	693a      	ldr	r2, [r7, #16]
 800414e:	4313      	orrs	r3, r2
 8004150:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	f023 030a 	bic.w	r3, r3, #10
 8004158:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800415a:	697a      	ldr	r2, [r7, #20]
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	4313      	orrs	r3, r2
 8004160:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	693a      	ldr	r2, [r7, #16]
 8004166:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	697a      	ldr	r2, [r7, #20]
 800416c:	621a      	str	r2, [r3, #32]
}
 800416e:	bf00      	nop
 8004170:	371c      	adds	r7, #28
 8004172:	46bd      	mov	sp, r7
 8004174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004178:	4770      	bx	lr

0800417a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800417a:	b480      	push	{r7}
 800417c:	b087      	sub	sp, #28
 800417e:	af00      	add	r7, sp, #0
 8004180:	60f8      	str	r0, [r7, #12]
 8004182:	60b9      	str	r1, [r7, #8]
 8004184:	607a      	str	r2, [r7, #4]
 8004186:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	6a1b      	ldr	r3, [r3, #32]
 800418c:	f023 0210 	bic.w	r2, r3, #16
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	699b      	ldr	r3, [r3, #24]
 8004198:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	6a1b      	ldr	r3, [r3, #32]
 800419e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041a6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	021b      	lsls	r3, r3, #8
 80041ac:	697a      	ldr	r2, [r7, #20]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80041b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	031b      	lsls	r3, r3, #12
 80041be:	b29b      	uxth	r3, r3
 80041c0:	697a      	ldr	r2, [r7, #20]
 80041c2:	4313      	orrs	r3, r2
 80041c4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80041cc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	011b      	lsls	r3, r3, #4
 80041d2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80041d6:	693a      	ldr	r2, [r7, #16]
 80041d8:	4313      	orrs	r3, r2
 80041da:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	697a      	ldr	r2, [r7, #20]
 80041e0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	693a      	ldr	r2, [r7, #16]
 80041e6:	621a      	str	r2, [r3, #32]
}
 80041e8:	bf00      	nop
 80041ea:	371c      	adds	r7, #28
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr

080041f4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b087      	sub	sp, #28
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	60f8      	str	r0, [r7, #12]
 80041fc:	60b9      	str	r1, [r7, #8]
 80041fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	6a1b      	ldr	r3, [r3, #32]
 8004204:	f023 0210 	bic.w	r2, r3, #16
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	699b      	ldr	r3, [r3, #24]
 8004210:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	6a1b      	ldr	r3, [r3, #32]
 8004216:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800421e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	031b      	lsls	r3, r3, #12
 8004224:	697a      	ldr	r2, [r7, #20]
 8004226:	4313      	orrs	r3, r2
 8004228:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004230:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	011b      	lsls	r3, r3, #4
 8004236:	693a      	ldr	r2, [r7, #16]
 8004238:	4313      	orrs	r3, r2
 800423a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	697a      	ldr	r2, [r7, #20]
 8004240:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	693a      	ldr	r2, [r7, #16]
 8004246:	621a      	str	r2, [r3, #32]
}
 8004248:	bf00      	nop
 800424a:	371c      	adds	r7, #28
 800424c:	46bd      	mov	sp, r7
 800424e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004252:	4770      	bx	lr

08004254 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004254:	b480      	push	{r7}
 8004256:	b087      	sub	sp, #28
 8004258:	af00      	add	r7, sp, #0
 800425a:	60f8      	str	r0, [r7, #12]
 800425c:	60b9      	str	r1, [r7, #8]
 800425e:	607a      	str	r2, [r7, #4]
 8004260:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	6a1b      	ldr	r3, [r3, #32]
 8004266:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	69db      	ldr	r3, [r3, #28]
 8004272:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	6a1b      	ldr	r3, [r3, #32]
 8004278:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	f023 0303 	bic.w	r3, r3, #3
 8004280:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004282:	697a      	ldr	r2, [r7, #20]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	4313      	orrs	r3, r2
 8004288:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004290:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	011b      	lsls	r3, r3, #4
 8004296:	b2db      	uxtb	r3, r3
 8004298:	697a      	ldr	r2, [r7, #20]
 800429a:	4313      	orrs	r3, r2
 800429c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80042a4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	021b      	lsls	r3, r3, #8
 80042aa:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80042ae:	693a      	ldr	r2, [r7, #16]
 80042b0:	4313      	orrs	r3, r2
 80042b2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	697a      	ldr	r2, [r7, #20]
 80042b8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	693a      	ldr	r2, [r7, #16]
 80042be:	621a      	str	r2, [r3, #32]
}
 80042c0:	bf00      	nop
 80042c2:	371c      	adds	r7, #28
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr

080042cc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b087      	sub	sp, #28
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	60f8      	str	r0, [r7, #12]
 80042d4:	60b9      	str	r1, [r7, #8]
 80042d6:	607a      	str	r2, [r7, #4]
 80042d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	6a1b      	ldr	r3, [r3, #32]
 80042de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	69db      	ldr	r3, [r3, #28]
 80042ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6a1b      	ldr	r3, [r3, #32]
 80042f0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042f8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	021b      	lsls	r3, r3, #8
 80042fe:	697a      	ldr	r2, [r7, #20]
 8004300:	4313      	orrs	r3, r2
 8004302:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800430a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	031b      	lsls	r3, r3, #12
 8004310:	b29b      	uxth	r3, r3
 8004312:	697a      	ldr	r2, [r7, #20]
 8004314:	4313      	orrs	r3, r2
 8004316:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800431e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	031b      	lsls	r3, r3, #12
 8004324:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004328:	693a      	ldr	r2, [r7, #16]
 800432a:	4313      	orrs	r3, r2
 800432c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	697a      	ldr	r2, [r7, #20]
 8004332:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	693a      	ldr	r2, [r7, #16]
 8004338:	621a      	str	r2, [r3, #32]
}
 800433a:	bf00      	nop
 800433c:	371c      	adds	r7, #28
 800433e:	46bd      	mov	sp, r7
 8004340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004344:	4770      	bx	lr

08004346 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004346:	b480      	push	{r7}
 8004348:	b085      	sub	sp, #20
 800434a:	af00      	add	r7, sp, #0
 800434c:	6078      	str	r0, [r7, #4]
 800434e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800435c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800435e:	683a      	ldr	r2, [r7, #0]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	4313      	orrs	r3, r2
 8004364:	f043 0307 	orr.w	r3, r3, #7
 8004368:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	68fa      	ldr	r2, [r7, #12]
 800436e:	609a      	str	r2, [r3, #8]
}
 8004370:	bf00      	nop
 8004372:	3714      	adds	r7, #20
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr

0800437c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800437c:	b480      	push	{r7}
 800437e:	b087      	sub	sp, #28
 8004380:	af00      	add	r7, sp, #0
 8004382:	60f8      	str	r0, [r7, #12]
 8004384:	60b9      	str	r1, [r7, #8]
 8004386:	607a      	str	r2, [r7, #4]
 8004388:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004396:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	021a      	lsls	r2, r3, #8
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	431a      	orrs	r2, r3
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	4313      	orrs	r3, r2
 80043a4:	697a      	ldr	r2, [r7, #20]
 80043a6:	4313      	orrs	r3, r2
 80043a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	697a      	ldr	r2, [r7, #20]
 80043ae:	609a      	str	r2, [r3, #8]
}
 80043b0:	bf00      	nop
 80043b2:	371c      	adds	r7, #28
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr

080043bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80043bc:	b480      	push	{r7}
 80043be:	b087      	sub	sp, #28
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	60f8      	str	r0, [r7, #12]
 80043c4:	60b9      	str	r1, [r7, #8]
 80043c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	f003 031f 	and.w	r3, r3, #31
 80043ce:	2201      	movs	r2, #1
 80043d0:	fa02 f303 	lsl.w	r3, r2, r3
 80043d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	6a1a      	ldr	r2, [r3, #32]
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	43db      	mvns	r3, r3
 80043de:	401a      	ands	r2, r3
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	6a1a      	ldr	r2, [r3, #32]
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	f003 031f 	and.w	r3, r3, #31
 80043ee:	6879      	ldr	r1, [r7, #4]
 80043f0:	fa01 f303 	lsl.w	r3, r1, r3
 80043f4:	431a      	orrs	r2, r3
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	621a      	str	r2, [r3, #32]
}
 80043fa:	bf00      	nop
 80043fc:	371c      	adds	r7, #28
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr
	...

08004408 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004408:	b480      	push	{r7}
 800440a:	b085      	sub	sp, #20
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
 8004410:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004418:	2b01      	cmp	r3, #1
 800441a:	d101      	bne.n	8004420 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800441c:	2302      	movs	r3, #2
 800441e:	e05a      	b.n	80044d6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2201      	movs	r2, #1
 8004424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2202      	movs	r2, #2
 800442c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004446:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	68fa      	ldr	r2, [r7, #12]
 800444e:	4313      	orrs	r3, r2
 8004450:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	68fa      	ldr	r2, [r7, #12]
 8004458:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a21      	ldr	r2, [pc, #132]	; (80044e4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d022      	beq.n	80044aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800446c:	d01d      	beq.n	80044aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a1d      	ldr	r2, [pc, #116]	; (80044e8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d018      	beq.n	80044aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a1b      	ldr	r2, [pc, #108]	; (80044ec <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d013      	beq.n	80044aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a1a      	ldr	r2, [pc, #104]	; (80044f0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d00e      	beq.n	80044aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a18      	ldr	r2, [pc, #96]	; (80044f4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d009      	beq.n	80044aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a17      	ldr	r2, [pc, #92]	; (80044f8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d004      	beq.n	80044aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a15      	ldr	r2, [pc, #84]	; (80044fc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d10c      	bne.n	80044c4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	68ba      	ldr	r2, [r7, #8]
 80044b8:	4313      	orrs	r3, r2
 80044ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	68ba      	ldr	r2, [r7, #8]
 80044c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2201      	movs	r2, #1
 80044c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2200      	movs	r2, #0
 80044d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80044d4:	2300      	movs	r3, #0
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3714      	adds	r7, #20
 80044da:	46bd      	mov	sp, r7
 80044dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e0:	4770      	bx	lr
 80044e2:	bf00      	nop
 80044e4:	40010000 	.word	0x40010000
 80044e8:	40000400 	.word	0x40000400
 80044ec:	40000800 	.word	0x40000800
 80044f0:	40000c00 	.word	0x40000c00
 80044f4:	40010400 	.word	0x40010400
 80044f8:	40014000 	.word	0x40014000
 80044fc:	40001800 	.word	0x40001800

08004500 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004500:	b480      	push	{r7}
 8004502:	b083      	sub	sp, #12
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004508:	bf00      	nop
 800450a:	370c      	adds	r7, #12
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr

08004514 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004514:	b480      	push	{r7}
 8004516:	b083      	sub	sp, #12
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800451c:	bf00      	nop
 800451e:	370c      	adds	r7, #12
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr

08004528 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b082      	sub	sp, #8
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d101      	bne.n	800453a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e03f      	b.n	80045ba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004540:	b2db      	uxtb	r3, r3
 8004542:	2b00      	cmp	r3, #0
 8004544:	d106      	bne.n	8004554 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2200      	movs	r2, #0
 800454a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f7fc fe4a 	bl	80011e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2224      	movs	r2, #36	; 0x24
 8004558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	68da      	ldr	r2, [r3, #12]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800456a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	f000 fd7b 	bl	8005068 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	691a      	ldr	r2, [r3, #16]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004580:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	695a      	ldr	r2, [r3, #20]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004590:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	68da      	ldr	r2, [r3, #12]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80045a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2200      	movs	r2, #0
 80045a6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2220      	movs	r2, #32
 80045ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2220      	movs	r2, #32
 80045b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80045b8:	2300      	movs	r3, #0
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3708      	adds	r7, #8
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}

080045c2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045c2:	b580      	push	{r7, lr}
 80045c4:	b08a      	sub	sp, #40	; 0x28
 80045c6:	af02      	add	r7, sp, #8
 80045c8:	60f8      	str	r0, [r7, #12]
 80045ca:	60b9      	str	r1, [r7, #8]
 80045cc:	603b      	str	r3, [r7, #0]
 80045ce:	4613      	mov	r3, r2
 80045d0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80045d2:	2300      	movs	r3, #0
 80045d4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	2b20      	cmp	r3, #32
 80045e0:	d17c      	bne.n	80046dc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d002      	beq.n	80045ee <HAL_UART_Transmit+0x2c>
 80045e8:	88fb      	ldrh	r3, [r7, #6]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d101      	bne.n	80045f2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	e075      	b.n	80046de <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d101      	bne.n	8004600 <HAL_UART_Transmit+0x3e>
 80045fc:	2302      	movs	r3, #2
 80045fe:	e06e      	b.n	80046de <HAL_UART_Transmit+0x11c>
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2201      	movs	r2, #1
 8004604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	2200      	movs	r2, #0
 800460c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2221      	movs	r2, #33	; 0x21
 8004612:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004616:	f7fc fec7 	bl	80013a8 <HAL_GetTick>
 800461a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	88fa      	ldrh	r2, [r7, #6]
 8004620:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	88fa      	ldrh	r2, [r7, #6]
 8004626:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004630:	d108      	bne.n	8004644 <HAL_UART_Transmit+0x82>
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	691b      	ldr	r3, [r3, #16]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d104      	bne.n	8004644 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800463a:	2300      	movs	r3, #0
 800463c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	61bb      	str	r3, [r7, #24]
 8004642:	e003      	b.n	800464c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004648:	2300      	movs	r3, #0
 800464a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2200      	movs	r2, #0
 8004650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004654:	e02a      	b.n	80046ac <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	9300      	str	r3, [sp, #0]
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	2200      	movs	r2, #0
 800465e:	2180      	movs	r1, #128	; 0x80
 8004660:	68f8      	ldr	r0, [r7, #12]
 8004662:	f000 faf9 	bl	8004c58 <UART_WaitOnFlagUntilTimeout>
 8004666:	4603      	mov	r3, r0
 8004668:	2b00      	cmp	r3, #0
 800466a:	d001      	beq.n	8004670 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800466c:	2303      	movs	r3, #3
 800466e:	e036      	b.n	80046de <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004670:	69fb      	ldr	r3, [r7, #28]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d10b      	bne.n	800468e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004676:	69bb      	ldr	r3, [r7, #24]
 8004678:	881b      	ldrh	r3, [r3, #0]
 800467a:	461a      	mov	r2, r3
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004684:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004686:	69bb      	ldr	r3, [r7, #24]
 8004688:	3302      	adds	r3, #2
 800468a:	61bb      	str	r3, [r7, #24]
 800468c:	e007      	b.n	800469e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800468e:	69fb      	ldr	r3, [r7, #28]
 8004690:	781a      	ldrb	r2, [r3, #0]
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004698:	69fb      	ldr	r3, [r7, #28]
 800469a:	3301      	adds	r3, #1
 800469c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80046a2:	b29b      	uxth	r3, r3
 80046a4:	3b01      	subs	r3, #1
 80046a6:	b29a      	uxth	r2, r3
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80046b0:	b29b      	uxth	r3, r3
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d1cf      	bne.n	8004656 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	9300      	str	r3, [sp, #0]
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	2200      	movs	r2, #0
 80046be:	2140      	movs	r1, #64	; 0x40
 80046c0:	68f8      	ldr	r0, [r7, #12]
 80046c2:	f000 fac9 	bl	8004c58 <UART_WaitOnFlagUntilTimeout>
 80046c6:	4603      	mov	r3, r0
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d001      	beq.n	80046d0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80046cc:	2303      	movs	r3, #3
 80046ce:	e006      	b.n	80046de <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2220      	movs	r2, #32
 80046d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80046d8:	2300      	movs	r3, #0
 80046da:	e000      	b.n	80046de <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80046dc:	2302      	movs	r3, #2
  }
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3720      	adds	r7, #32
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}
	...

080046e8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b0ba      	sub	sp, #232	; 0xe8
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	68db      	ldr	r3, [r3, #12]
 8004700:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	695b      	ldr	r3, [r3, #20]
 800470a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800470e:	2300      	movs	r3, #0
 8004710:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004714:	2300      	movs	r3, #0
 8004716:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800471a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800471e:	f003 030f 	and.w	r3, r3, #15
 8004722:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004726:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800472a:	2b00      	cmp	r3, #0
 800472c:	d10f      	bne.n	800474e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800472e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004732:	f003 0320 	and.w	r3, r3, #32
 8004736:	2b00      	cmp	r3, #0
 8004738:	d009      	beq.n	800474e <HAL_UART_IRQHandler+0x66>
 800473a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800473e:	f003 0320 	and.w	r3, r3, #32
 8004742:	2b00      	cmp	r3, #0
 8004744:	d003      	beq.n	800474e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f000 fbd3 	bl	8004ef2 <UART_Receive_IT>
      return;
 800474c:	e256      	b.n	8004bfc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800474e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004752:	2b00      	cmp	r3, #0
 8004754:	f000 80de 	beq.w	8004914 <HAL_UART_IRQHandler+0x22c>
 8004758:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800475c:	f003 0301 	and.w	r3, r3, #1
 8004760:	2b00      	cmp	r3, #0
 8004762:	d106      	bne.n	8004772 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004764:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004768:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800476c:	2b00      	cmp	r3, #0
 800476e:	f000 80d1 	beq.w	8004914 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004772:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004776:	f003 0301 	and.w	r3, r3, #1
 800477a:	2b00      	cmp	r3, #0
 800477c:	d00b      	beq.n	8004796 <HAL_UART_IRQHandler+0xae>
 800477e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004782:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004786:	2b00      	cmp	r3, #0
 8004788:	d005      	beq.n	8004796 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478e:	f043 0201 	orr.w	r2, r3, #1
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004796:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800479a:	f003 0304 	and.w	r3, r3, #4
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d00b      	beq.n	80047ba <HAL_UART_IRQHandler+0xd2>
 80047a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80047a6:	f003 0301 	and.w	r3, r3, #1
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d005      	beq.n	80047ba <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b2:	f043 0202 	orr.w	r2, r3, #2
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80047ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047be:	f003 0302 	and.w	r3, r3, #2
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d00b      	beq.n	80047de <HAL_UART_IRQHandler+0xf6>
 80047c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80047ca:	f003 0301 	and.w	r3, r3, #1
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d005      	beq.n	80047de <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d6:	f043 0204 	orr.w	r2, r3, #4
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80047de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047e2:	f003 0308 	and.w	r3, r3, #8
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d011      	beq.n	800480e <HAL_UART_IRQHandler+0x126>
 80047ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047ee:	f003 0320 	and.w	r3, r3, #32
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d105      	bne.n	8004802 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80047f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80047fa:	f003 0301 	and.w	r3, r3, #1
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d005      	beq.n	800480e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004806:	f043 0208 	orr.w	r2, r3, #8
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004812:	2b00      	cmp	r3, #0
 8004814:	f000 81ed 	beq.w	8004bf2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004818:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800481c:	f003 0320 	and.w	r3, r3, #32
 8004820:	2b00      	cmp	r3, #0
 8004822:	d008      	beq.n	8004836 <HAL_UART_IRQHandler+0x14e>
 8004824:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004828:	f003 0320 	and.w	r3, r3, #32
 800482c:	2b00      	cmp	r3, #0
 800482e:	d002      	beq.n	8004836 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004830:	6878      	ldr	r0, [r7, #4]
 8004832:	f000 fb5e 	bl	8004ef2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	695b      	ldr	r3, [r3, #20]
 800483c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004840:	2b40      	cmp	r3, #64	; 0x40
 8004842:	bf0c      	ite	eq
 8004844:	2301      	moveq	r3, #1
 8004846:	2300      	movne	r3, #0
 8004848:	b2db      	uxtb	r3, r3
 800484a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004852:	f003 0308 	and.w	r3, r3, #8
 8004856:	2b00      	cmp	r3, #0
 8004858:	d103      	bne.n	8004862 <HAL_UART_IRQHandler+0x17a>
 800485a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800485e:	2b00      	cmp	r3, #0
 8004860:	d04f      	beq.n	8004902 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f000 fa66 	bl	8004d34 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	695b      	ldr	r3, [r3, #20]
 800486e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004872:	2b40      	cmp	r3, #64	; 0x40
 8004874:	d141      	bne.n	80048fa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	3314      	adds	r3, #20
 800487c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004880:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004884:	e853 3f00 	ldrex	r3, [r3]
 8004888:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800488c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004890:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004894:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	3314      	adds	r3, #20
 800489e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80048a2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80048a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80048ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80048b2:	e841 2300 	strex	r3, r2, [r1]
 80048b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80048ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d1d9      	bne.n	8004876 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d013      	beq.n	80048f2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ce:	4a7d      	ldr	r2, [pc, #500]	; (8004ac4 <HAL_UART_IRQHandler+0x3dc>)
 80048d0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048d6:	4618      	mov	r0, r3
 80048d8:	f7fd f81e 	bl	8001918 <HAL_DMA_Abort_IT>
 80048dc:	4603      	mov	r3, r0
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d016      	beq.n	8004910 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048e8:	687a      	ldr	r2, [r7, #4]
 80048ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80048ec:	4610      	mov	r0, r2
 80048ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048f0:	e00e      	b.n	8004910 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f000 f99a 	bl	8004c2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048f8:	e00a      	b.n	8004910 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f000 f996 	bl	8004c2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004900:	e006      	b.n	8004910 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f000 f992 	bl	8004c2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2200      	movs	r2, #0
 800490c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800490e:	e170      	b.n	8004bf2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004910:	bf00      	nop
    return;
 8004912:	e16e      	b.n	8004bf2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004918:	2b01      	cmp	r3, #1
 800491a:	f040 814a 	bne.w	8004bb2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800491e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004922:	f003 0310 	and.w	r3, r3, #16
 8004926:	2b00      	cmp	r3, #0
 8004928:	f000 8143 	beq.w	8004bb2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800492c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004930:	f003 0310 	and.w	r3, r3, #16
 8004934:	2b00      	cmp	r3, #0
 8004936:	f000 813c 	beq.w	8004bb2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800493a:	2300      	movs	r3, #0
 800493c:	60bb      	str	r3, [r7, #8]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	60bb      	str	r3, [r7, #8]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	60bb      	str	r3, [r7, #8]
 800494e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	695b      	ldr	r3, [r3, #20]
 8004956:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800495a:	2b40      	cmp	r3, #64	; 0x40
 800495c:	f040 80b4 	bne.w	8004ac8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800496c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004970:	2b00      	cmp	r3, #0
 8004972:	f000 8140 	beq.w	8004bf6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800497a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800497e:	429a      	cmp	r2, r3
 8004980:	f080 8139 	bcs.w	8004bf6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800498a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004990:	69db      	ldr	r3, [r3, #28]
 8004992:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004996:	f000 8088 	beq.w	8004aaa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	330c      	adds	r3, #12
 80049a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80049a8:	e853 3f00 	ldrex	r3, [r3]
 80049ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80049b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80049b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	330c      	adds	r3, #12
 80049c2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80049c6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80049ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ce:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80049d2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80049d6:	e841 2300 	strex	r3, r2, [r1]
 80049da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80049de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d1d9      	bne.n	800499a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	3314      	adds	r3, #20
 80049ec:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049f0:	e853 3f00 	ldrex	r3, [r3]
 80049f4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80049f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80049f8:	f023 0301 	bic.w	r3, r3, #1
 80049fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	3314      	adds	r3, #20
 8004a06:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004a0a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004a0e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a10:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004a12:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004a16:	e841 2300 	strex	r3, r2, [r1]
 8004a1a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004a1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d1e1      	bne.n	80049e6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	3314      	adds	r3, #20
 8004a28:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a2c:	e853 3f00 	ldrex	r3, [r3]
 8004a30:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004a32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a38:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	3314      	adds	r3, #20
 8004a42:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004a46:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004a48:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a4a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004a4c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004a4e:	e841 2300 	strex	r3, r2, [r1]
 8004a52:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004a54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d1e3      	bne.n	8004a22 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2220      	movs	r2, #32
 8004a5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2200      	movs	r2, #0
 8004a66:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	330c      	adds	r3, #12
 8004a6e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a72:	e853 3f00 	ldrex	r3, [r3]
 8004a76:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004a78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a7a:	f023 0310 	bic.w	r3, r3, #16
 8004a7e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	330c      	adds	r3, #12
 8004a88:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004a8c:	65ba      	str	r2, [r7, #88]	; 0x58
 8004a8e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a90:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004a92:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004a94:	e841 2300 	strex	r3, r2, [r1]
 8004a98:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004a9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d1e3      	bne.n	8004a68 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	f7fc fec7 	bl	8001838 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	1ad3      	subs	r3, r2, r3
 8004ab6:	b29b      	uxth	r3, r3
 8004ab8:	4619      	mov	r1, r3
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f000 f8c0 	bl	8004c40 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004ac0:	e099      	b.n	8004bf6 <HAL_UART_IRQHandler+0x50e>
 8004ac2:	bf00      	nop
 8004ac4:	08004dfb 	.word	0x08004dfb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ad0:	b29b      	uxth	r3, r3
 8004ad2:	1ad3      	subs	r3, r2, r3
 8004ad4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004adc:	b29b      	uxth	r3, r3
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	f000 808b 	beq.w	8004bfa <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004ae4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	f000 8086 	beq.w	8004bfa <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	330c      	adds	r3, #12
 8004af4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004af8:	e853 3f00 	ldrex	r3, [r3]
 8004afc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004afe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b00:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004b04:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	330c      	adds	r3, #12
 8004b0e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004b12:	647a      	str	r2, [r7, #68]	; 0x44
 8004b14:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b16:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004b18:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b1a:	e841 2300 	strex	r3, r2, [r1]
 8004b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004b20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d1e3      	bne.n	8004aee <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	3314      	adds	r3, #20
 8004b2c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b30:	e853 3f00 	ldrex	r3, [r3]
 8004b34:	623b      	str	r3, [r7, #32]
   return(result);
 8004b36:	6a3b      	ldr	r3, [r7, #32]
 8004b38:	f023 0301 	bic.w	r3, r3, #1
 8004b3c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	3314      	adds	r3, #20
 8004b46:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004b4a:	633a      	str	r2, [r7, #48]	; 0x30
 8004b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b4e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b52:	e841 2300 	strex	r3, r2, [r1]
 8004b56:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d1e3      	bne.n	8004b26 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2220      	movs	r2, #32
 8004b62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	330c      	adds	r3, #12
 8004b72:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	e853 3f00 	ldrex	r3, [r3]
 8004b7a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	f023 0310 	bic.w	r3, r3, #16
 8004b82:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	330c      	adds	r3, #12
 8004b8c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004b90:	61fa      	str	r2, [r7, #28]
 8004b92:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b94:	69b9      	ldr	r1, [r7, #24]
 8004b96:	69fa      	ldr	r2, [r7, #28]
 8004b98:	e841 2300 	strex	r3, r2, [r1]
 8004b9c:	617b      	str	r3, [r7, #20]
   return(result);
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d1e3      	bne.n	8004b6c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004ba4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004ba8:	4619      	mov	r1, r3
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f000 f848 	bl	8004c40 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004bb0:	e023      	b.n	8004bfa <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004bb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d009      	beq.n	8004bd2 <HAL_UART_IRQHandler+0x4ea>
 8004bbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d003      	beq.n	8004bd2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f000 f929 	bl	8004e22 <UART_Transmit_IT>
    return;
 8004bd0:	e014      	b.n	8004bfc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004bd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d00e      	beq.n	8004bfc <HAL_UART_IRQHandler+0x514>
 8004bde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004be2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d008      	beq.n	8004bfc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f000 f969 	bl	8004ec2 <UART_EndTransmit_IT>
    return;
 8004bf0:	e004      	b.n	8004bfc <HAL_UART_IRQHandler+0x514>
    return;
 8004bf2:	bf00      	nop
 8004bf4:	e002      	b.n	8004bfc <HAL_UART_IRQHandler+0x514>
      return;
 8004bf6:	bf00      	nop
 8004bf8:	e000      	b.n	8004bfc <HAL_UART_IRQHandler+0x514>
      return;
 8004bfa:	bf00      	nop
  }
}
 8004bfc:	37e8      	adds	r7, #232	; 0xe8
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}
 8004c02:	bf00      	nop

08004c04 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b083      	sub	sp, #12
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004c0c:	bf00      	nop
 8004c0e:	370c      	adds	r7, #12
 8004c10:	46bd      	mov	sp, r7
 8004c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c16:	4770      	bx	lr

08004c18 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b083      	sub	sp, #12
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004c20:	bf00      	nop
 8004c22:	370c      	adds	r7, #12
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr

08004c2c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b083      	sub	sp, #12
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004c34:	bf00      	nop
 8004c36:	370c      	adds	r7, #12
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3e:	4770      	bx	lr

08004c40 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b083      	sub	sp, #12
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
 8004c48:	460b      	mov	r3, r1
 8004c4a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004c4c:	bf00      	nop
 8004c4e:	370c      	adds	r7, #12
 8004c50:	46bd      	mov	sp, r7
 8004c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c56:	4770      	bx	lr

08004c58 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b090      	sub	sp, #64	; 0x40
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	60f8      	str	r0, [r7, #12]
 8004c60:	60b9      	str	r1, [r7, #8]
 8004c62:	603b      	str	r3, [r7, #0]
 8004c64:	4613      	mov	r3, r2
 8004c66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c68:	e050      	b.n	8004d0c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c70:	d04c      	beq.n	8004d0c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004c72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d007      	beq.n	8004c88 <UART_WaitOnFlagUntilTimeout+0x30>
 8004c78:	f7fc fb96 	bl	80013a8 <HAL_GetTick>
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	1ad3      	subs	r3, r2, r3
 8004c82:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d241      	bcs.n	8004d0c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	330c      	adds	r3, #12
 8004c8e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c92:	e853 3f00 	ldrex	r3, [r3]
 8004c96:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c9a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	330c      	adds	r3, #12
 8004ca6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004ca8:	637a      	str	r2, [r7, #52]	; 0x34
 8004caa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004cae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004cb0:	e841 2300 	strex	r3, r2, [r1]
 8004cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d1e5      	bne.n	8004c88 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	3314      	adds	r3, #20
 8004cc2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	e853 3f00 	ldrex	r3, [r3]
 8004cca:	613b      	str	r3, [r7, #16]
   return(result);
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	f023 0301 	bic.w	r3, r3, #1
 8004cd2:	63bb      	str	r3, [r7, #56]	; 0x38
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	3314      	adds	r3, #20
 8004cda:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004cdc:	623a      	str	r2, [r7, #32]
 8004cde:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ce0:	69f9      	ldr	r1, [r7, #28]
 8004ce2:	6a3a      	ldr	r2, [r7, #32]
 8004ce4:	e841 2300 	strex	r3, r2, [r1]
 8004ce8:	61bb      	str	r3, [r7, #24]
   return(result);
 8004cea:	69bb      	ldr	r3, [r7, #24]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d1e5      	bne.n	8004cbc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2220      	movs	r2, #32
 8004cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2220      	movs	r2, #32
 8004cfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2200      	movs	r2, #0
 8004d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004d08:	2303      	movs	r3, #3
 8004d0a:	e00f      	b.n	8004d2c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	4013      	ands	r3, r2
 8004d16:	68ba      	ldr	r2, [r7, #8]
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	bf0c      	ite	eq
 8004d1c:	2301      	moveq	r3, #1
 8004d1e:	2300      	movne	r3, #0
 8004d20:	b2db      	uxtb	r3, r3
 8004d22:	461a      	mov	r2, r3
 8004d24:	79fb      	ldrb	r3, [r7, #7]
 8004d26:	429a      	cmp	r2, r3
 8004d28:	d09f      	beq.n	8004c6a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004d2a:	2300      	movs	r3, #0
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	3740      	adds	r7, #64	; 0x40
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bd80      	pop	{r7, pc}

08004d34 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b095      	sub	sp, #84	; 0x54
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	330c      	adds	r3, #12
 8004d42:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d46:	e853 3f00 	ldrex	r3, [r3]
 8004d4a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d4e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	330c      	adds	r3, #12
 8004d5a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004d5c:	643a      	str	r2, [r7, #64]	; 0x40
 8004d5e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d60:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004d62:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004d64:	e841 2300 	strex	r3, r2, [r1]
 8004d68:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004d6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d1e5      	bne.n	8004d3c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	3314      	adds	r3, #20
 8004d76:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d78:	6a3b      	ldr	r3, [r7, #32]
 8004d7a:	e853 3f00 	ldrex	r3, [r3]
 8004d7e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d80:	69fb      	ldr	r3, [r7, #28]
 8004d82:	f023 0301 	bic.w	r3, r3, #1
 8004d86:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	3314      	adds	r3, #20
 8004d8e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d90:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d92:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d94:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d98:	e841 2300 	strex	r3, r2, [r1]
 8004d9c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d1e5      	bne.n	8004d70 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d119      	bne.n	8004de0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	330c      	adds	r3, #12
 8004db2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	e853 3f00 	ldrex	r3, [r3]
 8004dba:	60bb      	str	r3, [r7, #8]
   return(result);
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	f023 0310 	bic.w	r3, r3, #16
 8004dc2:	647b      	str	r3, [r7, #68]	; 0x44
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	330c      	adds	r3, #12
 8004dca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004dcc:	61ba      	str	r2, [r7, #24]
 8004dce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dd0:	6979      	ldr	r1, [r7, #20]
 8004dd2:	69ba      	ldr	r2, [r7, #24]
 8004dd4:	e841 2300 	strex	r3, r2, [r1]
 8004dd8:	613b      	str	r3, [r7, #16]
   return(result);
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d1e5      	bne.n	8004dac <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2220      	movs	r2, #32
 8004de4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2200      	movs	r2, #0
 8004dec:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004dee:	bf00      	nop
 8004df0:	3754      	adds	r7, #84	; 0x54
 8004df2:	46bd      	mov	sp, r7
 8004df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df8:	4770      	bx	lr

08004dfa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004dfa:	b580      	push	{r7, lr}
 8004dfc:	b084      	sub	sp, #16
 8004dfe:	af00      	add	r7, sp, #0
 8004e00:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e06:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	2200      	movs	r2, #0
 8004e12:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004e14:	68f8      	ldr	r0, [r7, #12]
 8004e16:	f7ff ff09 	bl	8004c2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e1a:	bf00      	nop
 8004e1c:	3710      	adds	r7, #16
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}

08004e22 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004e22:	b480      	push	{r7}
 8004e24:	b085      	sub	sp, #20
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e30:	b2db      	uxtb	r3, r3
 8004e32:	2b21      	cmp	r3, #33	; 0x21
 8004e34:	d13e      	bne.n	8004eb4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e3e:	d114      	bne.n	8004e6a <UART_Transmit_IT+0x48>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	691b      	ldr	r3, [r3, #16]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d110      	bne.n	8004e6a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6a1b      	ldr	r3, [r3, #32]
 8004e4c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	881b      	ldrh	r3, [r3, #0]
 8004e52:	461a      	mov	r2, r3
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e5c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6a1b      	ldr	r3, [r3, #32]
 8004e62:	1c9a      	adds	r2, r3, #2
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	621a      	str	r2, [r3, #32]
 8004e68:	e008      	b.n	8004e7c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6a1b      	ldr	r3, [r3, #32]
 8004e6e:	1c59      	adds	r1, r3, #1
 8004e70:	687a      	ldr	r2, [r7, #4]
 8004e72:	6211      	str	r1, [r2, #32]
 8004e74:	781a      	ldrb	r2, [r3, #0]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e80:	b29b      	uxth	r3, r3
 8004e82:	3b01      	subs	r3, #1
 8004e84:	b29b      	uxth	r3, r3
 8004e86:	687a      	ldr	r2, [r7, #4]
 8004e88:	4619      	mov	r1, r3
 8004e8a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d10f      	bne.n	8004eb0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	68da      	ldr	r2, [r3, #12]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e9e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	68da      	ldr	r2, [r3, #12]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004eae:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	e000      	b.n	8004eb6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004eb4:	2302      	movs	r3, #2
  }
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3714      	adds	r7, #20
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec0:	4770      	bx	lr

08004ec2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004ec2:	b580      	push	{r7, lr}
 8004ec4:	b082      	sub	sp, #8
 8004ec6:	af00      	add	r7, sp, #0
 8004ec8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	68da      	ldr	r2, [r3, #12]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ed8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2220      	movs	r2, #32
 8004ede:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f7ff fe8e 	bl	8004c04 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004ee8:	2300      	movs	r3, #0
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3708      	adds	r7, #8
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}

08004ef2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004ef2:	b580      	push	{r7, lr}
 8004ef4:	b08c      	sub	sp, #48	; 0x30
 8004ef6:	af00      	add	r7, sp, #0
 8004ef8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f00:	b2db      	uxtb	r3, r3
 8004f02:	2b22      	cmp	r3, #34	; 0x22
 8004f04:	f040 80ab 	bne.w	800505e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f10:	d117      	bne.n	8004f42 <UART_Receive_IT+0x50>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	691b      	ldr	r3, [r3, #16]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d113      	bne.n	8004f42 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f22:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f30:	b29a      	uxth	r2, r3
 8004f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f34:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f3a:	1c9a      	adds	r2, r3, #2
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	629a      	str	r2, [r3, #40]	; 0x28
 8004f40:	e026      	b.n	8004f90 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f46:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f54:	d007      	beq.n	8004f66 <UART_Receive_IT+0x74>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d10a      	bne.n	8004f74 <UART_Receive_IT+0x82>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	691b      	ldr	r3, [r3, #16]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d106      	bne.n	8004f74 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	b2da      	uxtb	r2, r3
 8004f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f70:	701a      	strb	r2, [r3, #0]
 8004f72:	e008      	b.n	8004f86 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	b2db      	uxtb	r3, r3
 8004f7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f80:	b2da      	uxtb	r2, r3
 8004f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f84:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f8a:	1c5a      	adds	r2, r3, #1
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f94:	b29b      	uxth	r3, r3
 8004f96:	3b01      	subs	r3, #1
 8004f98:	b29b      	uxth	r3, r3
 8004f9a:	687a      	ldr	r2, [r7, #4]
 8004f9c:	4619      	mov	r1, r3
 8004f9e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d15a      	bne.n	800505a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	68da      	ldr	r2, [r3, #12]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f022 0220 	bic.w	r2, r2, #32
 8004fb2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	68da      	ldr	r2, [r3, #12]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004fc2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	695a      	ldr	r2, [r3, #20]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f022 0201 	bic.w	r2, r2, #1
 8004fd2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2220      	movs	r2, #32
 8004fd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fe0:	2b01      	cmp	r3, #1
 8004fe2:	d135      	bne.n	8005050 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	330c      	adds	r3, #12
 8004ff0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	e853 3f00 	ldrex	r3, [r3]
 8004ff8:	613b      	str	r3, [r7, #16]
   return(result);
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	f023 0310 	bic.w	r3, r3, #16
 8005000:	627b      	str	r3, [r7, #36]	; 0x24
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	330c      	adds	r3, #12
 8005008:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800500a:	623a      	str	r2, [r7, #32]
 800500c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800500e:	69f9      	ldr	r1, [r7, #28]
 8005010:	6a3a      	ldr	r2, [r7, #32]
 8005012:	e841 2300 	strex	r3, r2, [r1]
 8005016:	61bb      	str	r3, [r7, #24]
   return(result);
 8005018:	69bb      	ldr	r3, [r7, #24]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d1e5      	bne.n	8004fea <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 0310 	and.w	r3, r3, #16
 8005028:	2b10      	cmp	r3, #16
 800502a:	d10a      	bne.n	8005042 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800502c:	2300      	movs	r3, #0
 800502e:	60fb      	str	r3, [r7, #12]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	60fb      	str	r3, [r7, #12]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	60fb      	str	r3, [r7, #12]
 8005040:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005046:	4619      	mov	r1, r3
 8005048:	6878      	ldr	r0, [r7, #4]
 800504a:	f7ff fdf9 	bl	8004c40 <HAL_UARTEx_RxEventCallback>
 800504e:	e002      	b.n	8005056 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005050:	6878      	ldr	r0, [r7, #4]
 8005052:	f7ff fde1 	bl	8004c18 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005056:	2300      	movs	r3, #0
 8005058:	e002      	b.n	8005060 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800505a:	2300      	movs	r3, #0
 800505c:	e000      	b.n	8005060 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800505e:	2302      	movs	r3, #2
  }
}
 8005060:	4618      	mov	r0, r3
 8005062:	3730      	adds	r7, #48	; 0x30
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}

08005068 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005068:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800506c:	b0c0      	sub	sp, #256	; 0x100
 800506e:	af00      	add	r7, sp, #0
 8005070:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	691b      	ldr	r3, [r3, #16]
 800507c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005084:	68d9      	ldr	r1, [r3, #12]
 8005086:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800508a:	681a      	ldr	r2, [r3, #0]
 800508c:	ea40 0301 	orr.w	r3, r0, r1
 8005090:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005092:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005096:	689a      	ldr	r2, [r3, #8]
 8005098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800509c:	691b      	ldr	r3, [r3, #16]
 800509e:	431a      	orrs	r2, r3
 80050a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050a4:	695b      	ldr	r3, [r3, #20]
 80050a6:	431a      	orrs	r2, r3
 80050a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050ac:	69db      	ldr	r3, [r3, #28]
 80050ae:	4313      	orrs	r3, r2
 80050b0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80050b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	68db      	ldr	r3, [r3, #12]
 80050bc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80050c0:	f021 010c 	bic.w	r1, r1, #12
 80050c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80050ce:	430b      	orrs	r3, r1
 80050d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80050d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	695b      	ldr	r3, [r3, #20]
 80050da:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80050de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050e2:	6999      	ldr	r1, [r3, #24]
 80050e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	ea40 0301 	orr.w	r3, r0, r1
 80050ee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80050f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	4b8f      	ldr	r3, [pc, #572]	; (8005334 <UART_SetConfig+0x2cc>)
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d005      	beq.n	8005108 <UART_SetConfig+0xa0>
 80050fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	4b8d      	ldr	r3, [pc, #564]	; (8005338 <UART_SetConfig+0x2d0>)
 8005104:	429a      	cmp	r2, r3
 8005106:	d104      	bne.n	8005112 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005108:	f7fd fd2c 	bl	8002b64 <HAL_RCC_GetPCLK2Freq>
 800510c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005110:	e003      	b.n	800511a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005112:	f7fd fd13 	bl	8002b3c <HAL_RCC_GetPCLK1Freq>
 8005116:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800511a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800511e:	69db      	ldr	r3, [r3, #28]
 8005120:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005124:	f040 810c 	bne.w	8005340 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005128:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800512c:	2200      	movs	r2, #0
 800512e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005132:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005136:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800513a:	4622      	mov	r2, r4
 800513c:	462b      	mov	r3, r5
 800513e:	1891      	adds	r1, r2, r2
 8005140:	65b9      	str	r1, [r7, #88]	; 0x58
 8005142:	415b      	adcs	r3, r3
 8005144:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005146:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800514a:	4621      	mov	r1, r4
 800514c:	eb12 0801 	adds.w	r8, r2, r1
 8005150:	4629      	mov	r1, r5
 8005152:	eb43 0901 	adc.w	r9, r3, r1
 8005156:	f04f 0200 	mov.w	r2, #0
 800515a:	f04f 0300 	mov.w	r3, #0
 800515e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005162:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005166:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800516a:	4690      	mov	r8, r2
 800516c:	4699      	mov	r9, r3
 800516e:	4623      	mov	r3, r4
 8005170:	eb18 0303 	adds.w	r3, r8, r3
 8005174:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005178:	462b      	mov	r3, r5
 800517a:	eb49 0303 	adc.w	r3, r9, r3
 800517e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005182:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	2200      	movs	r2, #0
 800518a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800518e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005192:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005196:	460b      	mov	r3, r1
 8005198:	18db      	adds	r3, r3, r3
 800519a:	653b      	str	r3, [r7, #80]	; 0x50
 800519c:	4613      	mov	r3, r2
 800519e:	eb42 0303 	adc.w	r3, r2, r3
 80051a2:	657b      	str	r3, [r7, #84]	; 0x54
 80051a4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80051a8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80051ac:	f7fb f870 	bl	8000290 <__aeabi_uldivmod>
 80051b0:	4602      	mov	r2, r0
 80051b2:	460b      	mov	r3, r1
 80051b4:	4b61      	ldr	r3, [pc, #388]	; (800533c <UART_SetConfig+0x2d4>)
 80051b6:	fba3 2302 	umull	r2, r3, r3, r2
 80051ba:	095b      	lsrs	r3, r3, #5
 80051bc:	011c      	lsls	r4, r3, #4
 80051be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051c2:	2200      	movs	r2, #0
 80051c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80051c8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80051cc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80051d0:	4642      	mov	r2, r8
 80051d2:	464b      	mov	r3, r9
 80051d4:	1891      	adds	r1, r2, r2
 80051d6:	64b9      	str	r1, [r7, #72]	; 0x48
 80051d8:	415b      	adcs	r3, r3
 80051da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051dc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80051e0:	4641      	mov	r1, r8
 80051e2:	eb12 0a01 	adds.w	sl, r2, r1
 80051e6:	4649      	mov	r1, r9
 80051e8:	eb43 0b01 	adc.w	fp, r3, r1
 80051ec:	f04f 0200 	mov.w	r2, #0
 80051f0:	f04f 0300 	mov.w	r3, #0
 80051f4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80051f8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80051fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005200:	4692      	mov	sl, r2
 8005202:	469b      	mov	fp, r3
 8005204:	4643      	mov	r3, r8
 8005206:	eb1a 0303 	adds.w	r3, sl, r3
 800520a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800520e:	464b      	mov	r3, r9
 8005210:	eb4b 0303 	adc.w	r3, fp, r3
 8005214:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005224:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005228:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800522c:	460b      	mov	r3, r1
 800522e:	18db      	adds	r3, r3, r3
 8005230:	643b      	str	r3, [r7, #64]	; 0x40
 8005232:	4613      	mov	r3, r2
 8005234:	eb42 0303 	adc.w	r3, r2, r3
 8005238:	647b      	str	r3, [r7, #68]	; 0x44
 800523a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800523e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005242:	f7fb f825 	bl	8000290 <__aeabi_uldivmod>
 8005246:	4602      	mov	r2, r0
 8005248:	460b      	mov	r3, r1
 800524a:	4611      	mov	r1, r2
 800524c:	4b3b      	ldr	r3, [pc, #236]	; (800533c <UART_SetConfig+0x2d4>)
 800524e:	fba3 2301 	umull	r2, r3, r3, r1
 8005252:	095b      	lsrs	r3, r3, #5
 8005254:	2264      	movs	r2, #100	; 0x64
 8005256:	fb02 f303 	mul.w	r3, r2, r3
 800525a:	1acb      	subs	r3, r1, r3
 800525c:	00db      	lsls	r3, r3, #3
 800525e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005262:	4b36      	ldr	r3, [pc, #216]	; (800533c <UART_SetConfig+0x2d4>)
 8005264:	fba3 2302 	umull	r2, r3, r3, r2
 8005268:	095b      	lsrs	r3, r3, #5
 800526a:	005b      	lsls	r3, r3, #1
 800526c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005270:	441c      	add	r4, r3
 8005272:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005276:	2200      	movs	r2, #0
 8005278:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800527c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005280:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005284:	4642      	mov	r2, r8
 8005286:	464b      	mov	r3, r9
 8005288:	1891      	adds	r1, r2, r2
 800528a:	63b9      	str	r1, [r7, #56]	; 0x38
 800528c:	415b      	adcs	r3, r3
 800528e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005290:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005294:	4641      	mov	r1, r8
 8005296:	1851      	adds	r1, r2, r1
 8005298:	6339      	str	r1, [r7, #48]	; 0x30
 800529a:	4649      	mov	r1, r9
 800529c:	414b      	adcs	r3, r1
 800529e:	637b      	str	r3, [r7, #52]	; 0x34
 80052a0:	f04f 0200 	mov.w	r2, #0
 80052a4:	f04f 0300 	mov.w	r3, #0
 80052a8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80052ac:	4659      	mov	r1, fp
 80052ae:	00cb      	lsls	r3, r1, #3
 80052b0:	4651      	mov	r1, sl
 80052b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80052b6:	4651      	mov	r1, sl
 80052b8:	00ca      	lsls	r2, r1, #3
 80052ba:	4610      	mov	r0, r2
 80052bc:	4619      	mov	r1, r3
 80052be:	4603      	mov	r3, r0
 80052c0:	4642      	mov	r2, r8
 80052c2:	189b      	adds	r3, r3, r2
 80052c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80052c8:	464b      	mov	r3, r9
 80052ca:	460a      	mov	r2, r1
 80052cc:	eb42 0303 	adc.w	r3, r2, r3
 80052d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80052d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	2200      	movs	r2, #0
 80052dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80052e0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80052e4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80052e8:	460b      	mov	r3, r1
 80052ea:	18db      	adds	r3, r3, r3
 80052ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80052ee:	4613      	mov	r3, r2
 80052f0:	eb42 0303 	adc.w	r3, r2, r3
 80052f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80052fa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80052fe:	f7fa ffc7 	bl	8000290 <__aeabi_uldivmod>
 8005302:	4602      	mov	r2, r0
 8005304:	460b      	mov	r3, r1
 8005306:	4b0d      	ldr	r3, [pc, #52]	; (800533c <UART_SetConfig+0x2d4>)
 8005308:	fba3 1302 	umull	r1, r3, r3, r2
 800530c:	095b      	lsrs	r3, r3, #5
 800530e:	2164      	movs	r1, #100	; 0x64
 8005310:	fb01 f303 	mul.w	r3, r1, r3
 8005314:	1ad3      	subs	r3, r2, r3
 8005316:	00db      	lsls	r3, r3, #3
 8005318:	3332      	adds	r3, #50	; 0x32
 800531a:	4a08      	ldr	r2, [pc, #32]	; (800533c <UART_SetConfig+0x2d4>)
 800531c:	fba2 2303 	umull	r2, r3, r2, r3
 8005320:	095b      	lsrs	r3, r3, #5
 8005322:	f003 0207 	and.w	r2, r3, #7
 8005326:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4422      	add	r2, r4
 800532e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005330:	e105      	b.n	800553e <UART_SetConfig+0x4d6>
 8005332:	bf00      	nop
 8005334:	40011000 	.word	0x40011000
 8005338:	40011400 	.word	0x40011400
 800533c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005340:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005344:	2200      	movs	r2, #0
 8005346:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800534a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800534e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005352:	4642      	mov	r2, r8
 8005354:	464b      	mov	r3, r9
 8005356:	1891      	adds	r1, r2, r2
 8005358:	6239      	str	r1, [r7, #32]
 800535a:	415b      	adcs	r3, r3
 800535c:	627b      	str	r3, [r7, #36]	; 0x24
 800535e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005362:	4641      	mov	r1, r8
 8005364:	1854      	adds	r4, r2, r1
 8005366:	4649      	mov	r1, r9
 8005368:	eb43 0501 	adc.w	r5, r3, r1
 800536c:	f04f 0200 	mov.w	r2, #0
 8005370:	f04f 0300 	mov.w	r3, #0
 8005374:	00eb      	lsls	r3, r5, #3
 8005376:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800537a:	00e2      	lsls	r2, r4, #3
 800537c:	4614      	mov	r4, r2
 800537e:	461d      	mov	r5, r3
 8005380:	4643      	mov	r3, r8
 8005382:	18e3      	adds	r3, r4, r3
 8005384:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005388:	464b      	mov	r3, r9
 800538a:	eb45 0303 	adc.w	r3, r5, r3
 800538e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005392:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	2200      	movs	r2, #0
 800539a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800539e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80053a2:	f04f 0200 	mov.w	r2, #0
 80053a6:	f04f 0300 	mov.w	r3, #0
 80053aa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80053ae:	4629      	mov	r1, r5
 80053b0:	008b      	lsls	r3, r1, #2
 80053b2:	4621      	mov	r1, r4
 80053b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80053b8:	4621      	mov	r1, r4
 80053ba:	008a      	lsls	r2, r1, #2
 80053bc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80053c0:	f7fa ff66 	bl	8000290 <__aeabi_uldivmod>
 80053c4:	4602      	mov	r2, r0
 80053c6:	460b      	mov	r3, r1
 80053c8:	4b60      	ldr	r3, [pc, #384]	; (800554c <UART_SetConfig+0x4e4>)
 80053ca:	fba3 2302 	umull	r2, r3, r3, r2
 80053ce:	095b      	lsrs	r3, r3, #5
 80053d0:	011c      	lsls	r4, r3, #4
 80053d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053d6:	2200      	movs	r2, #0
 80053d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80053dc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80053e0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80053e4:	4642      	mov	r2, r8
 80053e6:	464b      	mov	r3, r9
 80053e8:	1891      	adds	r1, r2, r2
 80053ea:	61b9      	str	r1, [r7, #24]
 80053ec:	415b      	adcs	r3, r3
 80053ee:	61fb      	str	r3, [r7, #28]
 80053f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80053f4:	4641      	mov	r1, r8
 80053f6:	1851      	adds	r1, r2, r1
 80053f8:	6139      	str	r1, [r7, #16]
 80053fa:	4649      	mov	r1, r9
 80053fc:	414b      	adcs	r3, r1
 80053fe:	617b      	str	r3, [r7, #20]
 8005400:	f04f 0200 	mov.w	r2, #0
 8005404:	f04f 0300 	mov.w	r3, #0
 8005408:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800540c:	4659      	mov	r1, fp
 800540e:	00cb      	lsls	r3, r1, #3
 8005410:	4651      	mov	r1, sl
 8005412:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005416:	4651      	mov	r1, sl
 8005418:	00ca      	lsls	r2, r1, #3
 800541a:	4610      	mov	r0, r2
 800541c:	4619      	mov	r1, r3
 800541e:	4603      	mov	r3, r0
 8005420:	4642      	mov	r2, r8
 8005422:	189b      	adds	r3, r3, r2
 8005424:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005428:	464b      	mov	r3, r9
 800542a:	460a      	mov	r2, r1
 800542c:	eb42 0303 	adc.w	r3, r2, r3
 8005430:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	2200      	movs	r2, #0
 800543c:	67bb      	str	r3, [r7, #120]	; 0x78
 800543e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005440:	f04f 0200 	mov.w	r2, #0
 8005444:	f04f 0300 	mov.w	r3, #0
 8005448:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800544c:	4649      	mov	r1, r9
 800544e:	008b      	lsls	r3, r1, #2
 8005450:	4641      	mov	r1, r8
 8005452:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005456:	4641      	mov	r1, r8
 8005458:	008a      	lsls	r2, r1, #2
 800545a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800545e:	f7fa ff17 	bl	8000290 <__aeabi_uldivmod>
 8005462:	4602      	mov	r2, r0
 8005464:	460b      	mov	r3, r1
 8005466:	4b39      	ldr	r3, [pc, #228]	; (800554c <UART_SetConfig+0x4e4>)
 8005468:	fba3 1302 	umull	r1, r3, r3, r2
 800546c:	095b      	lsrs	r3, r3, #5
 800546e:	2164      	movs	r1, #100	; 0x64
 8005470:	fb01 f303 	mul.w	r3, r1, r3
 8005474:	1ad3      	subs	r3, r2, r3
 8005476:	011b      	lsls	r3, r3, #4
 8005478:	3332      	adds	r3, #50	; 0x32
 800547a:	4a34      	ldr	r2, [pc, #208]	; (800554c <UART_SetConfig+0x4e4>)
 800547c:	fba2 2303 	umull	r2, r3, r2, r3
 8005480:	095b      	lsrs	r3, r3, #5
 8005482:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005486:	441c      	add	r4, r3
 8005488:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800548c:	2200      	movs	r2, #0
 800548e:	673b      	str	r3, [r7, #112]	; 0x70
 8005490:	677a      	str	r2, [r7, #116]	; 0x74
 8005492:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005496:	4642      	mov	r2, r8
 8005498:	464b      	mov	r3, r9
 800549a:	1891      	adds	r1, r2, r2
 800549c:	60b9      	str	r1, [r7, #8]
 800549e:	415b      	adcs	r3, r3
 80054a0:	60fb      	str	r3, [r7, #12]
 80054a2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80054a6:	4641      	mov	r1, r8
 80054a8:	1851      	adds	r1, r2, r1
 80054aa:	6039      	str	r1, [r7, #0]
 80054ac:	4649      	mov	r1, r9
 80054ae:	414b      	adcs	r3, r1
 80054b0:	607b      	str	r3, [r7, #4]
 80054b2:	f04f 0200 	mov.w	r2, #0
 80054b6:	f04f 0300 	mov.w	r3, #0
 80054ba:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80054be:	4659      	mov	r1, fp
 80054c0:	00cb      	lsls	r3, r1, #3
 80054c2:	4651      	mov	r1, sl
 80054c4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80054c8:	4651      	mov	r1, sl
 80054ca:	00ca      	lsls	r2, r1, #3
 80054cc:	4610      	mov	r0, r2
 80054ce:	4619      	mov	r1, r3
 80054d0:	4603      	mov	r3, r0
 80054d2:	4642      	mov	r2, r8
 80054d4:	189b      	adds	r3, r3, r2
 80054d6:	66bb      	str	r3, [r7, #104]	; 0x68
 80054d8:	464b      	mov	r3, r9
 80054da:	460a      	mov	r2, r1
 80054dc:	eb42 0303 	adc.w	r3, r2, r3
 80054e0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80054e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	2200      	movs	r2, #0
 80054ea:	663b      	str	r3, [r7, #96]	; 0x60
 80054ec:	667a      	str	r2, [r7, #100]	; 0x64
 80054ee:	f04f 0200 	mov.w	r2, #0
 80054f2:	f04f 0300 	mov.w	r3, #0
 80054f6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80054fa:	4649      	mov	r1, r9
 80054fc:	008b      	lsls	r3, r1, #2
 80054fe:	4641      	mov	r1, r8
 8005500:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005504:	4641      	mov	r1, r8
 8005506:	008a      	lsls	r2, r1, #2
 8005508:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800550c:	f7fa fec0 	bl	8000290 <__aeabi_uldivmod>
 8005510:	4602      	mov	r2, r0
 8005512:	460b      	mov	r3, r1
 8005514:	4b0d      	ldr	r3, [pc, #52]	; (800554c <UART_SetConfig+0x4e4>)
 8005516:	fba3 1302 	umull	r1, r3, r3, r2
 800551a:	095b      	lsrs	r3, r3, #5
 800551c:	2164      	movs	r1, #100	; 0x64
 800551e:	fb01 f303 	mul.w	r3, r1, r3
 8005522:	1ad3      	subs	r3, r2, r3
 8005524:	011b      	lsls	r3, r3, #4
 8005526:	3332      	adds	r3, #50	; 0x32
 8005528:	4a08      	ldr	r2, [pc, #32]	; (800554c <UART_SetConfig+0x4e4>)
 800552a:	fba2 2303 	umull	r2, r3, r2, r3
 800552e:	095b      	lsrs	r3, r3, #5
 8005530:	f003 020f 	and.w	r2, r3, #15
 8005534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4422      	add	r2, r4
 800553c:	609a      	str	r2, [r3, #8]
}
 800553e:	bf00      	nop
 8005540:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005544:	46bd      	mov	sp, r7
 8005546:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800554a:	bf00      	nop
 800554c:	51eb851f 	.word	0x51eb851f

08005550 <__errno>:
 8005550:	4b01      	ldr	r3, [pc, #4]	; (8005558 <__errno+0x8>)
 8005552:	6818      	ldr	r0, [r3, #0]
 8005554:	4770      	bx	lr
 8005556:	bf00      	nop
 8005558:	2000000c 	.word	0x2000000c

0800555c <__libc_init_array>:
 800555c:	b570      	push	{r4, r5, r6, lr}
 800555e:	4d0d      	ldr	r5, [pc, #52]	; (8005594 <__libc_init_array+0x38>)
 8005560:	4c0d      	ldr	r4, [pc, #52]	; (8005598 <__libc_init_array+0x3c>)
 8005562:	1b64      	subs	r4, r4, r5
 8005564:	10a4      	asrs	r4, r4, #2
 8005566:	2600      	movs	r6, #0
 8005568:	42a6      	cmp	r6, r4
 800556a:	d109      	bne.n	8005580 <__libc_init_array+0x24>
 800556c:	4d0b      	ldr	r5, [pc, #44]	; (800559c <__libc_init_array+0x40>)
 800556e:	4c0c      	ldr	r4, [pc, #48]	; (80055a0 <__libc_init_array+0x44>)
 8005570:	f001 f824 	bl	80065bc <_init>
 8005574:	1b64      	subs	r4, r4, r5
 8005576:	10a4      	asrs	r4, r4, #2
 8005578:	2600      	movs	r6, #0
 800557a:	42a6      	cmp	r6, r4
 800557c:	d105      	bne.n	800558a <__libc_init_array+0x2e>
 800557e:	bd70      	pop	{r4, r5, r6, pc}
 8005580:	f855 3b04 	ldr.w	r3, [r5], #4
 8005584:	4798      	blx	r3
 8005586:	3601      	adds	r6, #1
 8005588:	e7ee      	b.n	8005568 <__libc_init_array+0xc>
 800558a:	f855 3b04 	ldr.w	r3, [r5], #4
 800558e:	4798      	blx	r3
 8005590:	3601      	adds	r6, #1
 8005592:	e7f2      	b.n	800557a <__libc_init_array+0x1e>
 8005594:	080066e4 	.word	0x080066e4
 8005598:	080066e4 	.word	0x080066e4
 800559c:	080066e4 	.word	0x080066e4
 80055a0:	080066e8 	.word	0x080066e8

080055a4 <memset>:
 80055a4:	4402      	add	r2, r0
 80055a6:	4603      	mov	r3, r0
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d100      	bne.n	80055ae <memset+0xa>
 80055ac:	4770      	bx	lr
 80055ae:	f803 1b01 	strb.w	r1, [r3], #1
 80055b2:	e7f9      	b.n	80055a8 <memset+0x4>

080055b4 <iprintf>:
 80055b4:	b40f      	push	{r0, r1, r2, r3}
 80055b6:	4b0a      	ldr	r3, [pc, #40]	; (80055e0 <iprintf+0x2c>)
 80055b8:	b513      	push	{r0, r1, r4, lr}
 80055ba:	681c      	ldr	r4, [r3, #0]
 80055bc:	b124      	cbz	r4, 80055c8 <iprintf+0x14>
 80055be:	69a3      	ldr	r3, [r4, #24]
 80055c0:	b913      	cbnz	r3, 80055c8 <iprintf+0x14>
 80055c2:	4620      	mov	r0, r4
 80055c4:	f000 fa5e 	bl	8005a84 <__sinit>
 80055c8:	ab05      	add	r3, sp, #20
 80055ca:	9a04      	ldr	r2, [sp, #16]
 80055cc:	68a1      	ldr	r1, [r4, #8]
 80055ce:	9301      	str	r3, [sp, #4]
 80055d0:	4620      	mov	r0, r4
 80055d2:	f000 fc67 	bl	8005ea4 <_vfiprintf_r>
 80055d6:	b002      	add	sp, #8
 80055d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055dc:	b004      	add	sp, #16
 80055de:	4770      	bx	lr
 80055e0:	2000000c 	.word	0x2000000c

080055e4 <_puts_r>:
 80055e4:	b570      	push	{r4, r5, r6, lr}
 80055e6:	460e      	mov	r6, r1
 80055e8:	4605      	mov	r5, r0
 80055ea:	b118      	cbz	r0, 80055f4 <_puts_r+0x10>
 80055ec:	6983      	ldr	r3, [r0, #24]
 80055ee:	b90b      	cbnz	r3, 80055f4 <_puts_r+0x10>
 80055f0:	f000 fa48 	bl	8005a84 <__sinit>
 80055f4:	69ab      	ldr	r3, [r5, #24]
 80055f6:	68ac      	ldr	r4, [r5, #8]
 80055f8:	b913      	cbnz	r3, 8005600 <_puts_r+0x1c>
 80055fa:	4628      	mov	r0, r5
 80055fc:	f000 fa42 	bl	8005a84 <__sinit>
 8005600:	4b2c      	ldr	r3, [pc, #176]	; (80056b4 <_puts_r+0xd0>)
 8005602:	429c      	cmp	r4, r3
 8005604:	d120      	bne.n	8005648 <_puts_r+0x64>
 8005606:	686c      	ldr	r4, [r5, #4]
 8005608:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800560a:	07db      	lsls	r3, r3, #31
 800560c:	d405      	bmi.n	800561a <_puts_r+0x36>
 800560e:	89a3      	ldrh	r3, [r4, #12]
 8005610:	0598      	lsls	r0, r3, #22
 8005612:	d402      	bmi.n	800561a <_puts_r+0x36>
 8005614:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005616:	f000 fad3 	bl	8005bc0 <__retarget_lock_acquire_recursive>
 800561a:	89a3      	ldrh	r3, [r4, #12]
 800561c:	0719      	lsls	r1, r3, #28
 800561e:	d51d      	bpl.n	800565c <_puts_r+0x78>
 8005620:	6923      	ldr	r3, [r4, #16]
 8005622:	b1db      	cbz	r3, 800565c <_puts_r+0x78>
 8005624:	3e01      	subs	r6, #1
 8005626:	68a3      	ldr	r3, [r4, #8]
 8005628:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800562c:	3b01      	subs	r3, #1
 800562e:	60a3      	str	r3, [r4, #8]
 8005630:	bb39      	cbnz	r1, 8005682 <_puts_r+0x9e>
 8005632:	2b00      	cmp	r3, #0
 8005634:	da38      	bge.n	80056a8 <_puts_r+0xc4>
 8005636:	4622      	mov	r2, r4
 8005638:	210a      	movs	r1, #10
 800563a:	4628      	mov	r0, r5
 800563c:	f000 f848 	bl	80056d0 <__swbuf_r>
 8005640:	3001      	adds	r0, #1
 8005642:	d011      	beq.n	8005668 <_puts_r+0x84>
 8005644:	250a      	movs	r5, #10
 8005646:	e011      	b.n	800566c <_puts_r+0x88>
 8005648:	4b1b      	ldr	r3, [pc, #108]	; (80056b8 <_puts_r+0xd4>)
 800564a:	429c      	cmp	r4, r3
 800564c:	d101      	bne.n	8005652 <_puts_r+0x6e>
 800564e:	68ac      	ldr	r4, [r5, #8]
 8005650:	e7da      	b.n	8005608 <_puts_r+0x24>
 8005652:	4b1a      	ldr	r3, [pc, #104]	; (80056bc <_puts_r+0xd8>)
 8005654:	429c      	cmp	r4, r3
 8005656:	bf08      	it	eq
 8005658:	68ec      	ldreq	r4, [r5, #12]
 800565a:	e7d5      	b.n	8005608 <_puts_r+0x24>
 800565c:	4621      	mov	r1, r4
 800565e:	4628      	mov	r0, r5
 8005660:	f000 f888 	bl	8005774 <__swsetup_r>
 8005664:	2800      	cmp	r0, #0
 8005666:	d0dd      	beq.n	8005624 <_puts_r+0x40>
 8005668:	f04f 35ff 	mov.w	r5, #4294967295
 800566c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800566e:	07da      	lsls	r2, r3, #31
 8005670:	d405      	bmi.n	800567e <_puts_r+0x9a>
 8005672:	89a3      	ldrh	r3, [r4, #12]
 8005674:	059b      	lsls	r3, r3, #22
 8005676:	d402      	bmi.n	800567e <_puts_r+0x9a>
 8005678:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800567a:	f000 faa2 	bl	8005bc2 <__retarget_lock_release_recursive>
 800567e:	4628      	mov	r0, r5
 8005680:	bd70      	pop	{r4, r5, r6, pc}
 8005682:	2b00      	cmp	r3, #0
 8005684:	da04      	bge.n	8005690 <_puts_r+0xac>
 8005686:	69a2      	ldr	r2, [r4, #24]
 8005688:	429a      	cmp	r2, r3
 800568a:	dc06      	bgt.n	800569a <_puts_r+0xb6>
 800568c:	290a      	cmp	r1, #10
 800568e:	d004      	beq.n	800569a <_puts_r+0xb6>
 8005690:	6823      	ldr	r3, [r4, #0]
 8005692:	1c5a      	adds	r2, r3, #1
 8005694:	6022      	str	r2, [r4, #0]
 8005696:	7019      	strb	r1, [r3, #0]
 8005698:	e7c5      	b.n	8005626 <_puts_r+0x42>
 800569a:	4622      	mov	r2, r4
 800569c:	4628      	mov	r0, r5
 800569e:	f000 f817 	bl	80056d0 <__swbuf_r>
 80056a2:	3001      	adds	r0, #1
 80056a4:	d1bf      	bne.n	8005626 <_puts_r+0x42>
 80056a6:	e7df      	b.n	8005668 <_puts_r+0x84>
 80056a8:	6823      	ldr	r3, [r4, #0]
 80056aa:	250a      	movs	r5, #10
 80056ac:	1c5a      	adds	r2, r3, #1
 80056ae:	6022      	str	r2, [r4, #0]
 80056b0:	701d      	strb	r5, [r3, #0]
 80056b2:	e7db      	b.n	800566c <_puts_r+0x88>
 80056b4:	08006668 	.word	0x08006668
 80056b8:	08006688 	.word	0x08006688
 80056bc:	08006648 	.word	0x08006648

080056c0 <puts>:
 80056c0:	4b02      	ldr	r3, [pc, #8]	; (80056cc <puts+0xc>)
 80056c2:	4601      	mov	r1, r0
 80056c4:	6818      	ldr	r0, [r3, #0]
 80056c6:	f7ff bf8d 	b.w	80055e4 <_puts_r>
 80056ca:	bf00      	nop
 80056cc:	2000000c 	.word	0x2000000c

080056d0 <__swbuf_r>:
 80056d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056d2:	460e      	mov	r6, r1
 80056d4:	4614      	mov	r4, r2
 80056d6:	4605      	mov	r5, r0
 80056d8:	b118      	cbz	r0, 80056e2 <__swbuf_r+0x12>
 80056da:	6983      	ldr	r3, [r0, #24]
 80056dc:	b90b      	cbnz	r3, 80056e2 <__swbuf_r+0x12>
 80056de:	f000 f9d1 	bl	8005a84 <__sinit>
 80056e2:	4b21      	ldr	r3, [pc, #132]	; (8005768 <__swbuf_r+0x98>)
 80056e4:	429c      	cmp	r4, r3
 80056e6:	d12b      	bne.n	8005740 <__swbuf_r+0x70>
 80056e8:	686c      	ldr	r4, [r5, #4]
 80056ea:	69a3      	ldr	r3, [r4, #24]
 80056ec:	60a3      	str	r3, [r4, #8]
 80056ee:	89a3      	ldrh	r3, [r4, #12]
 80056f0:	071a      	lsls	r2, r3, #28
 80056f2:	d52f      	bpl.n	8005754 <__swbuf_r+0x84>
 80056f4:	6923      	ldr	r3, [r4, #16]
 80056f6:	b36b      	cbz	r3, 8005754 <__swbuf_r+0x84>
 80056f8:	6923      	ldr	r3, [r4, #16]
 80056fa:	6820      	ldr	r0, [r4, #0]
 80056fc:	1ac0      	subs	r0, r0, r3
 80056fe:	6963      	ldr	r3, [r4, #20]
 8005700:	b2f6      	uxtb	r6, r6
 8005702:	4283      	cmp	r3, r0
 8005704:	4637      	mov	r7, r6
 8005706:	dc04      	bgt.n	8005712 <__swbuf_r+0x42>
 8005708:	4621      	mov	r1, r4
 800570a:	4628      	mov	r0, r5
 800570c:	f000 f926 	bl	800595c <_fflush_r>
 8005710:	bb30      	cbnz	r0, 8005760 <__swbuf_r+0x90>
 8005712:	68a3      	ldr	r3, [r4, #8]
 8005714:	3b01      	subs	r3, #1
 8005716:	60a3      	str	r3, [r4, #8]
 8005718:	6823      	ldr	r3, [r4, #0]
 800571a:	1c5a      	adds	r2, r3, #1
 800571c:	6022      	str	r2, [r4, #0]
 800571e:	701e      	strb	r6, [r3, #0]
 8005720:	6963      	ldr	r3, [r4, #20]
 8005722:	3001      	adds	r0, #1
 8005724:	4283      	cmp	r3, r0
 8005726:	d004      	beq.n	8005732 <__swbuf_r+0x62>
 8005728:	89a3      	ldrh	r3, [r4, #12]
 800572a:	07db      	lsls	r3, r3, #31
 800572c:	d506      	bpl.n	800573c <__swbuf_r+0x6c>
 800572e:	2e0a      	cmp	r6, #10
 8005730:	d104      	bne.n	800573c <__swbuf_r+0x6c>
 8005732:	4621      	mov	r1, r4
 8005734:	4628      	mov	r0, r5
 8005736:	f000 f911 	bl	800595c <_fflush_r>
 800573a:	b988      	cbnz	r0, 8005760 <__swbuf_r+0x90>
 800573c:	4638      	mov	r0, r7
 800573e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005740:	4b0a      	ldr	r3, [pc, #40]	; (800576c <__swbuf_r+0x9c>)
 8005742:	429c      	cmp	r4, r3
 8005744:	d101      	bne.n	800574a <__swbuf_r+0x7a>
 8005746:	68ac      	ldr	r4, [r5, #8]
 8005748:	e7cf      	b.n	80056ea <__swbuf_r+0x1a>
 800574a:	4b09      	ldr	r3, [pc, #36]	; (8005770 <__swbuf_r+0xa0>)
 800574c:	429c      	cmp	r4, r3
 800574e:	bf08      	it	eq
 8005750:	68ec      	ldreq	r4, [r5, #12]
 8005752:	e7ca      	b.n	80056ea <__swbuf_r+0x1a>
 8005754:	4621      	mov	r1, r4
 8005756:	4628      	mov	r0, r5
 8005758:	f000 f80c 	bl	8005774 <__swsetup_r>
 800575c:	2800      	cmp	r0, #0
 800575e:	d0cb      	beq.n	80056f8 <__swbuf_r+0x28>
 8005760:	f04f 37ff 	mov.w	r7, #4294967295
 8005764:	e7ea      	b.n	800573c <__swbuf_r+0x6c>
 8005766:	bf00      	nop
 8005768:	08006668 	.word	0x08006668
 800576c:	08006688 	.word	0x08006688
 8005770:	08006648 	.word	0x08006648

08005774 <__swsetup_r>:
 8005774:	4b32      	ldr	r3, [pc, #200]	; (8005840 <__swsetup_r+0xcc>)
 8005776:	b570      	push	{r4, r5, r6, lr}
 8005778:	681d      	ldr	r5, [r3, #0]
 800577a:	4606      	mov	r6, r0
 800577c:	460c      	mov	r4, r1
 800577e:	b125      	cbz	r5, 800578a <__swsetup_r+0x16>
 8005780:	69ab      	ldr	r3, [r5, #24]
 8005782:	b913      	cbnz	r3, 800578a <__swsetup_r+0x16>
 8005784:	4628      	mov	r0, r5
 8005786:	f000 f97d 	bl	8005a84 <__sinit>
 800578a:	4b2e      	ldr	r3, [pc, #184]	; (8005844 <__swsetup_r+0xd0>)
 800578c:	429c      	cmp	r4, r3
 800578e:	d10f      	bne.n	80057b0 <__swsetup_r+0x3c>
 8005790:	686c      	ldr	r4, [r5, #4]
 8005792:	89a3      	ldrh	r3, [r4, #12]
 8005794:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005798:	0719      	lsls	r1, r3, #28
 800579a:	d42c      	bmi.n	80057f6 <__swsetup_r+0x82>
 800579c:	06dd      	lsls	r5, r3, #27
 800579e:	d411      	bmi.n	80057c4 <__swsetup_r+0x50>
 80057a0:	2309      	movs	r3, #9
 80057a2:	6033      	str	r3, [r6, #0]
 80057a4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80057a8:	81a3      	strh	r3, [r4, #12]
 80057aa:	f04f 30ff 	mov.w	r0, #4294967295
 80057ae:	e03e      	b.n	800582e <__swsetup_r+0xba>
 80057b0:	4b25      	ldr	r3, [pc, #148]	; (8005848 <__swsetup_r+0xd4>)
 80057b2:	429c      	cmp	r4, r3
 80057b4:	d101      	bne.n	80057ba <__swsetup_r+0x46>
 80057b6:	68ac      	ldr	r4, [r5, #8]
 80057b8:	e7eb      	b.n	8005792 <__swsetup_r+0x1e>
 80057ba:	4b24      	ldr	r3, [pc, #144]	; (800584c <__swsetup_r+0xd8>)
 80057bc:	429c      	cmp	r4, r3
 80057be:	bf08      	it	eq
 80057c0:	68ec      	ldreq	r4, [r5, #12]
 80057c2:	e7e6      	b.n	8005792 <__swsetup_r+0x1e>
 80057c4:	0758      	lsls	r0, r3, #29
 80057c6:	d512      	bpl.n	80057ee <__swsetup_r+0x7a>
 80057c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80057ca:	b141      	cbz	r1, 80057de <__swsetup_r+0x6a>
 80057cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80057d0:	4299      	cmp	r1, r3
 80057d2:	d002      	beq.n	80057da <__swsetup_r+0x66>
 80057d4:	4630      	mov	r0, r6
 80057d6:	f000 fa5b 	bl	8005c90 <_free_r>
 80057da:	2300      	movs	r3, #0
 80057dc:	6363      	str	r3, [r4, #52]	; 0x34
 80057de:	89a3      	ldrh	r3, [r4, #12]
 80057e0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80057e4:	81a3      	strh	r3, [r4, #12]
 80057e6:	2300      	movs	r3, #0
 80057e8:	6063      	str	r3, [r4, #4]
 80057ea:	6923      	ldr	r3, [r4, #16]
 80057ec:	6023      	str	r3, [r4, #0]
 80057ee:	89a3      	ldrh	r3, [r4, #12]
 80057f0:	f043 0308 	orr.w	r3, r3, #8
 80057f4:	81a3      	strh	r3, [r4, #12]
 80057f6:	6923      	ldr	r3, [r4, #16]
 80057f8:	b94b      	cbnz	r3, 800580e <__swsetup_r+0x9a>
 80057fa:	89a3      	ldrh	r3, [r4, #12]
 80057fc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005800:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005804:	d003      	beq.n	800580e <__swsetup_r+0x9a>
 8005806:	4621      	mov	r1, r4
 8005808:	4630      	mov	r0, r6
 800580a:	f000 fa01 	bl	8005c10 <__smakebuf_r>
 800580e:	89a0      	ldrh	r0, [r4, #12]
 8005810:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005814:	f010 0301 	ands.w	r3, r0, #1
 8005818:	d00a      	beq.n	8005830 <__swsetup_r+0xbc>
 800581a:	2300      	movs	r3, #0
 800581c:	60a3      	str	r3, [r4, #8]
 800581e:	6963      	ldr	r3, [r4, #20]
 8005820:	425b      	negs	r3, r3
 8005822:	61a3      	str	r3, [r4, #24]
 8005824:	6923      	ldr	r3, [r4, #16]
 8005826:	b943      	cbnz	r3, 800583a <__swsetup_r+0xc6>
 8005828:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800582c:	d1ba      	bne.n	80057a4 <__swsetup_r+0x30>
 800582e:	bd70      	pop	{r4, r5, r6, pc}
 8005830:	0781      	lsls	r1, r0, #30
 8005832:	bf58      	it	pl
 8005834:	6963      	ldrpl	r3, [r4, #20]
 8005836:	60a3      	str	r3, [r4, #8]
 8005838:	e7f4      	b.n	8005824 <__swsetup_r+0xb0>
 800583a:	2000      	movs	r0, #0
 800583c:	e7f7      	b.n	800582e <__swsetup_r+0xba>
 800583e:	bf00      	nop
 8005840:	2000000c 	.word	0x2000000c
 8005844:	08006668 	.word	0x08006668
 8005848:	08006688 	.word	0x08006688
 800584c:	08006648 	.word	0x08006648

08005850 <__sflush_r>:
 8005850:	898a      	ldrh	r2, [r1, #12]
 8005852:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005856:	4605      	mov	r5, r0
 8005858:	0710      	lsls	r0, r2, #28
 800585a:	460c      	mov	r4, r1
 800585c:	d458      	bmi.n	8005910 <__sflush_r+0xc0>
 800585e:	684b      	ldr	r3, [r1, #4]
 8005860:	2b00      	cmp	r3, #0
 8005862:	dc05      	bgt.n	8005870 <__sflush_r+0x20>
 8005864:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005866:	2b00      	cmp	r3, #0
 8005868:	dc02      	bgt.n	8005870 <__sflush_r+0x20>
 800586a:	2000      	movs	r0, #0
 800586c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005870:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005872:	2e00      	cmp	r6, #0
 8005874:	d0f9      	beq.n	800586a <__sflush_r+0x1a>
 8005876:	2300      	movs	r3, #0
 8005878:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800587c:	682f      	ldr	r7, [r5, #0]
 800587e:	602b      	str	r3, [r5, #0]
 8005880:	d032      	beq.n	80058e8 <__sflush_r+0x98>
 8005882:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005884:	89a3      	ldrh	r3, [r4, #12]
 8005886:	075a      	lsls	r2, r3, #29
 8005888:	d505      	bpl.n	8005896 <__sflush_r+0x46>
 800588a:	6863      	ldr	r3, [r4, #4]
 800588c:	1ac0      	subs	r0, r0, r3
 800588e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005890:	b10b      	cbz	r3, 8005896 <__sflush_r+0x46>
 8005892:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005894:	1ac0      	subs	r0, r0, r3
 8005896:	2300      	movs	r3, #0
 8005898:	4602      	mov	r2, r0
 800589a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800589c:	6a21      	ldr	r1, [r4, #32]
 800589e:	4628      	mov	r0, r5
 80058a0:	47b0      	blx	r6
 80058a2:	1c43      	adds	r3, r0, #1
 80058a4:	89a3      	ldrh	r3, [r4, #12]
 80058a6:	d106      	bne.n	80058b6 <__sflush_r+0x66>
 80058a8:	6829      	ldr	r1, [r5, #0]
 80058aa:	291d      	cmp	r1, #29
 80058ac:	d82c      	bhi.n	8005908 <__sflush_r+0xb8>
 80058ae:	4a2a      	ldr	r2, [pc, #168]	; (8005958 <__sflush_r+0x108>)
 80058b0:	40ca      	lsrs	r2, r1
 80058b2:	07d6      	lsls	r6, r2, #31
 80058b4:	d528      	bpl.n	8005908 <__sflush_r+0xb8>
 80058b6:	2200      	movs	r2, #0
 80058b8:	6062      	str	r2, [r4, #4]
 80058ba:	04d9      	lsls	r1, r3, #19
 80058bc:	6922      	ldr	r2, [r4, #16]
 80058be:	6022      	str	r2, [r4, #0]
 80058c0:	d504      	bpl.n	80058cc <__sflush_r+0x7c>
 80058c2:	1c42      	adds	r2, r0, #1
 80058c4:	d101      	bne.n	80058ca <__sflush_r+0x7a>
 80058c6:	682b      	ldr	r3, [r5, #0]
 80058c8:	b903      	cbnz	r3, 80058cc <__sflush_r+0x7c>
 80058ca:	6560      	str	r0, [r4, #84]	; 0x54
 80058cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80058ce:	602f      	str	r7, [r5, #0]
 80058d0:	2900      	cmp	r1, #0
 80058d2:	d0ca      	beq.n	800586a <__sflush_r+0x1a>
 80058d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80058d8:	4299      	cmp	r1, r3
 80058da:	d002      	beq.n	80058e2 <__sflush_r+0x92>
 80058dc:	4628      	mov	r0, r5
 80058de:	f000 f9d7 	bl	8005c90 <_free_r>
 80058e2:	2000      	movs	r0, #0
 80058e4:	6360      	str	r0, [r4, #52]	; 0x34
 80058e6:	e7c1      	b.n	800586c <__sflush_r+0x1c>
 80058e8:	6a21      	ldr	r1, [r4, #32]
 80058ea:	2301      	movs	r3, #1
 80058ec:	4628      	mov	r0, r5
 80058ee:	47b0      	blx	r6
 80058f0:	1c41      	adds	r1, r0, #1
 80058f2:	d1c7      	bne.n	8005884 <__sflush_r+0x34>
 80058f4:	682b      	ldr	r3, [r5, #0]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d0c4      	beq.n	8005884 <__sflush_r+0x34>
 80058fa:	2b1d      	cmp	r3, #29
 80058fc:	d001      	beq.n	8005902 <__sflush_r+0xb2>
 80058fe:	2b16      	cmp	r3, #22
 8005900:	d101      	bne.n	8005906 <__sflush_r+0xb6>
 8005902:	602f      	str	r7, [r5, #0]
 8005904:	e7b1      	b.n	800586a <__sflush_r+0x1a>
 8005906:	89a3      	ldrh	r3, [r4, #12]
 8005908:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800590c:	81a3      	strh	r3, [r4, #12]
 800590e:	e7ad      	b.n	800586c <__sflush_r+0x1c>
 8005910:	690f      	ldr	r7, [r1, #16]
 8005912:	2f00      	cmp	r7, #0
 8005914:	d0a9      	beq.n	800586a <__sflush_r+0x1a>
 8005916:	0793      	lsls	r3, r2, #30
 8005918:	680e      	ldr	r6, [r1, #0]
 800591a:	bf08      	it	eq
 800591c:	694b      	ldreq	r3, [r1, #20]
 800591e:	600f      	str	r7, [r1, #0]
 8005920:	bf18      	it	ne
 8005922:	2300      	movne	r3, #0
 8005924:	eba6 0807 	sub.w	r8, r6, r7
 8005928:	608b      	str	r3, [r1, #8]
 800592a:	f1b8 0f00 	cmp.w	r8, #0
 800592e:	dd9c      	ble.n	800586a <__sflush_r+0x1a>
 8005930:	6a21      	ldr	r1, [r4, #32]
 8005932:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005934:	4643      	mov	r3, r8
 8005936:	463a      	mov	r2, r7
 8005938:	4628      	mov	r0, r5
 800593a:	47b0      	blx	r6
 800593c:	2800      	cmp	r0, #0
 800593e:	dc06      	bgt.n	800594e <__sflush_r+0xfe>
 8005940:	89a3      	ldrh	r3, [r4, #12]
 8005942:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005946:	81a3      	strh	r3, [r4, #12]
 8005948:	f04f 30ff 	mov.w	r0, #4294967295
 800594c:	e78e      	b.n	800586c <__sflush_r+0x1c>
 800594e:	4407      	add	r7, r0
 8005950:	eba8 0800 	sub.w	r8, r8, r0
 8005954:	e7e9      	b.n	800592a <__sflush_r+0xda>
 8005956:	bf00      	nop
 8005958:	20400001 	.word	0x20400001

0800595c <_fflush_r>:
 800595c:	b538      	push	{r3, r4, r5, lr}
 800595e:	690b      	ldr	r3, [r1, #16]
 8005960:	4605      	mov	r5, r0
 8005962:	460c      	mov	r4, r1
 8005964:	b913      	cbnz	r3, 800596c <_fflush_r+0x10>
 8005966:	2500      	movs	r5, #0
 8005968:	4628      	mov	r0, r5
 800596a:	bd38      	pop	{r3, r4, r5, pc}
 800596c:	b118      	cbz	r0, 8005976 <_fflush_r+0x1a>
 800596e:	6983      	ldr	r3, [r0, #24]
 8005970:	b90b      	cbnz	r3, 8005976 <_fflush_r+0x1a>
 8005972:	f000 f887 	bl	8005a84 <__sinit>
 8005976:	4b14      	ldr	r3, [pc, #80]	; (80059c8 <_fflush_r+0x6c>)
 8005978:	429c      	cmp	r4, r3
 800597a:	d11b      	bne.n	80059b4 <_fflush_r+0x58>
 800597c:	686c      	ldr	r4, [r5, #4]
 800597e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d0ef      	beq.n	8005966 <_fflush_r+0xa>
 8005986:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005988:	07d0      	lsls	r0, r2, #31
 800598a:	d404      	bmi.n	8005996 <_fflush_r+0x3a>
 800598c:	0599      	lsls	r1, r3, #22
 800598e:	d402      	bmi.n	8005996 <_fflush_r+0x3a>
 8005990:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005992:	f000 f915 	bl	8005bc0 <__retarget_lock_acquire_recursive>
 8005996:	4628      	mov	r0, r5
 8005998:	4621      	mov	r1, r4
 800599a:	f7ff ff59 	bl	8005850 <__sflush_r>
 800599e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80059a0:	07da      	lsls	r2, r3, #31
 80059a2:	4605      	mov	r5, r0
 80059a4:	d4e0      	bmi.n	8005968 <_fflush_r+0xc>
 80059a6:	89a3      	ldrh	r3, [r4, #12]
 80059a8:	059b      	lsls	r3, r3, #22
 80059aa:	d4dd      	bmi.n	8005968 <_fflush_r+0xc>
 80059ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80059ae:	f000 f908 	bl	8005bc2 <__retarget_lock_release_recursive>
 80059b2:	e7d9      	b.n	8005968 <_fflush_r+0xc>
 80059b4:	4b05      	ldr	r3, [pc, #20]	; (80059cc <_fflush_r+0x70>)
 80059b6:	429c      	cmp	r4, r3
 80059b8:	d101      	bne.n	80059be <_fflush_r+0x62>
 80059ba:	68ac      	ldr	r4, [r5, #8]
 80059bc:	e7df      	b.n	800597e <_fflush_r+0x22>
 80059be:	4b04      	ldr	r3, [pc, #16]	; (80059d0 <_fflush_r+0x74>)
 80059c0:	429c      	cmp	r4, r3
 80059c2:	bf08      	it	eq
 80059c4:	68ec      	ldreq	r4, [r5, #12]
 80059c6:	e7da      	b.n	800597e <_fflush_r+0x22>
 80059c8:	08006668 	.word	0x08006668
 80059cc:	08006688 	.word	0x08006688
 80059d0:	08006648 	.word	0x08006648

080059d4 <std>:
 80059d4:	2300      	movs	r3, #0
 80059d6:	b510      	push	{r4, lr}
 80059d8:	4604      	mov	r4, r0
 80059da:	e9c0 3300 	strd	r3, r3, [r0]
 80059de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80059e2:	6083      	str	r3, [r0, #8]
 80059e4:	8181      	strh	r1, [r0, #12]
 80059e6:	6643      	str	r3, [r0, #100]	; 0x64
 80059e8:	81c2      	strh	r2, [r0, #14]
 80059ea:	6183      	str	r3, [r0, #24]
 80059ec:	4619      	mov	r1, r3
 80059ee:	2208      	movs	r2, #8
 80059f0:	305c      	adds	r0, #92	; 0x5c
 80059f2:	f7ff fdd7 	bl	80055a4 <memset>
 80059f6:	4b05      	ldr	r3, [pc, #20]	; (8005a0c <std+0x38>)
 80059f8:	6263      	str	r3, [r4, #36]	; 0x24
 80059fa:	4b05      	ldr	r3, [pc, #20]	; (8005a10 <std+0x3c>)
 80059fc:	62a3      	str	r3, [r4, #40]	; 0x28
 80059fe:	4b05      	ldr	r3, [pc, #20]	; (8005a14 <std+0x40>)
 8005a00:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005a02:	4b05      	ldr	r3, [pc, #20]	; (8005a18 <std+0x44>)
 8005a04:	6224      	str	r4, [r4, #32]
 8005a06:	6323      	str	r3, [r4, #48]	; 0x30
 8005a08:	bd10      	pop	{r4, pc}
 8005a0a:	bf00      	nop
 8005a0c:	0800644d 	.word	0x0800644d
 8005a10:	0800646f 	.word	0x0800646f
 8005a14:	080064a7 	.word	0x080064a7
 8005a18:	080064cb 	.word	0x080064cb

08005a1c <_cleanup_r>:
 8005a1c:	4901      	ldr	r1, [pc, #4]	; (8005a24 <_cleanup_r+0x8>)
 8005a1e:	f000 b8af 	b.w	8005b80 <_fwalk_reent>
 8005a22:	bf00      	nop
 8005a24:	0800595d 	.word	0x0800595d

08005a28 <__sfmoreglue>:
 8005a28:	b570      	push	{r4, r5, r6, lr}
 8005a2a:	2268      	movs	r2, #104	; 0x68
 8005a2c:	1e4d      	subs	r5, r1, #1
 8005a2e:	4355      	muls	r5, r2
 8005a30:	460e      	mov	r6, r1
 8005a32:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005a36:	f000 f997 	bl	8005d68 <_malloc_r>
 8005a3a:	4604      	mov	r4, r0
 8005a3c:	b140      	cbz	r0, 8005a50 <__sfmoreglue+0x28>
 8005a3e:	2100      	movs	r1, #0
 8005a40:	e9c0 1600 	strd	r1, r6, [r0]
 8005a44:	300c      	adds	r0, #12
 8005a46:	60a0      	str	r0, [r4, #8]
 8005a48:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005a4c:	f7ff fdaa 	bl	80055a4 <memset>
 8005a50:	4620      	mov	r0, r4
 8005a52:	bd70      	pop	{r4, r5, r6, pc}

08005a54 <__sfp_lock_acquire>:
 8005a54:	4801      	ldr	r0, [pc, #4]	; (8005a5c <__sfp_lock_acquire+0x8>)
 8005a56:	f000 b8b3 	b.w	8005bc0 <__retarget_lock_acquire_recursive>
 8005a5a:	bf00      	nop
 8005a5c:	200001d9 	.word	0x200001d9

08005a60 <__sfp_lock_release>:
 8005a60:	4801      	ldr	r0, [pc, #4]	; (8005a68 <__sfp_lock_release+0x8>)
 8005a62:	f000 b8ae 	b.w	8005bc2 <__retarget_lock_release_recursive>
 8005a66:	bf00      	nop
 8005a68:	200001d9 	.word	0x200001d9

08005a6c <__sinit_lock_acquire>:
 8005a6c:	4801      	ldr	r0, [pc, #4]	; (8005a74 <__sinit_lock_acquire+0x8>)
 8005a6e:	f000 b8a7 	b.w	8005bc0 <__retarget_lock_acquire_recursive>
 8005a72:	bf00      	nop
 8005a74:	200001da 	.word	0x200001da

08005a78 <__sinit_lock_release>:
 8005a78:	4801      	ldr	r0, [pc, #4]	; (8005a80 <__sinit_lock_release+0x8>)
 8005a7a:	f000 b8a2 	b.w	8005bc2 <__retarget_lock_release_recursive>
 8005a7e:	bf00      	nop
 8005a80:	200001da 	.word	0x200001da

08005a84 <__sinit>:
 8005a84:	b510      	push	{r4, lr}
 8005a86:	4604      	mov	r4, r0
 8005a88:	f7ff fff0 	bl	8005a6c <__sinit_lock_acquire>
 8005a8c:	69a3      	ldr	r3, [r4, #24]
 8005a8e:	b11b      	cbz	r3, 8005a98 <__sinit+0x14>
 8005a90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a94:	f7ff bff0 	b.w	8005a78 <__sinit_lock_release>
 8005a98:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005a9c:	6523      	str	r3, [r4, #80]	; 0x50
 8005a9e:	4b13      	ldr	r3, [pc, #76]	; (8005aec <__sinit+0x68>)
 8005aa0:	4a13      	ldr	r2, [pc, #76]	; (8005af0 <__sinit+0x6c>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	62a2      	str	r2, [r4, #40]	; 0x28
 8005aa6:	42a3      	cmp	r3, r4
 8005aa8:	bf04      	itt	eq
 8005aaa:	2301      	moveq	r3, #1
 8005aac:	61a3      	streq	r3, [r4, #24]
 8005aae:	4620      	mov	r0, r4
 8005ab0:	f000 f820 	bl	8005af4 <__sfp>
 8005ab4:	6060      	str	r0, [r4, #4]
 8005ab6:	4620      	mov	r0, r4
 8005ab8:	f000 f81c 	bl	8005af4 <__sfp>
 8005abc:	60a0      	str	r0, [r4, #8]
 8005abe:	4620      	mov	r0, r4
 8005ac0:	f000 f818 	bl	8005af4 <__sfp>
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	60e0      	str	r0, [r4, #12]
 8005ac8:	2104      	movs	r1, #4
 8005aca:	6860      	ldr	r0, [r4, #4]
 8005acc:	f7ff ff82 	bl	80059d4 <std>
 8005ad0:	68a0      	ldr	r0, [r4, #8]
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	2109      	movs	r1, #9
 8005ad6:	f7ff ff7d 	bl	80059d4 <std>
 8005ada:	68e0      	ldr	r0, [r4, #12]
 8005adc:	2202      	movs	r2, #2
 8005ade:	2112      	movs	r1, #18
 8005ae0:	f7ff ff78 	bl	80059d4 <std>
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	61a3      	str	r3, [r4, #24]
 8005ae8:	e7d2      	b.n	8005a90 <__sinit+0xc>
 8005aea:	bf00      	nop
 8005aec:	08006644 	.word	0x08006644
 8005af0:	08005a1d 	.word	0x08005a1d

08005af4 <__sfp>:
 8005af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005af6:	4607      	mov	r7, r0
 8005af8:	f7ff ffac 	bl	8005a54 <__sfp_lock_acquire>
 8005afc:	4b1e      	ldr	r3, [pc, #120]	; (8005b78 <__sfp+0x84>)
 8005afe:	681e      	ldr	r6, [r3, #0]
 8005b00:	69b3      	ldr	r3, [r6, #24]
 8005b02:	b913      	cbnz	r3, 8005b0a <__sfp+0x16>
 8005b04:	4630      	mov	r0, r6
 8005b06:	f7ff ffbd 	bl	8005a84 <__sinit>
 8005b0a:	3648      	adds	r6, #72	; 0x48
 8005b0c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005b10:	3b01      	subs	r3, #1
 8005b12:	d503      	bpl.n	8005b1c <__sfp+0x28>
 8005b14:	6833      	ldr	r3, [r6, #0]
 8005b16:	b30b      	cbz	r3, 8005b5c <__sfp+0x68>
 8005b18:	6836      	ldr	r6, [r6, #0]
 8005b1a:	e7f7      	b.n	8005b0c <__sfp+0x18>
 8005b1c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005b20:	b9d5      	cbnz	r5, 8005b58 <__sfp+0x64>
 8005b22:	4b16      	ldr	r3, [pc, #88]	; (8005b7c <__sfp+0x88>)
 8005b24:	60e3      	str	r3, [r4, #12]
 8005b26:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005b2a:	6665      	str	r5, [r4, #100]	; 0x64
 8005b2c:	f000 f847 	bl	8005bbe <__retarget_lock_init_recursive>
 8005b30:	f7ff ff96 	bl	8005a60 <__sfp_lock_release>
 8005b34:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005b38:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005b3c:	6025      	str	r5, [r4, #0]
 8005b3e:	61a5      	str	r5, [r4, #24]
 8005b40:	2208      	movs	r2, #8
 8005b42:	4629      	mov	r1, r5
 8005b44:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005b48:	f7ff fd2c 	bl	80055a4 <memset>
 8005b4c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005b50:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005b54:	4620      	mov	r0, r4
 8005b56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b58:	3468      	adds	r4, #104	; 0x68
 8005b5a:	e7d9      	b.n	8005b10 <__sfp+0x1c>
 8005b5c:	2104      	movs	r1, #4
 8005b5e:	4638      	mov	r0, r7
 8005b60:	f7ff ff62 	bl	8005a28 <__sfmoreglue>
 8005b64:	4604      	mov	r4, r0
 8005b66:	6030      	str	r0, [r6, #0]
 8005b68:	2800      	cmp	r0, #0
 8005b6a:	d1d5      	bne.n	8005b18 <__sfp+0x24>
 8005b6c:	f7ff ff78 	bl	8005a60 <__sfp_lock_release>
 8005b70:	230c      	movs	r3, #12
 8005b72:	603b      	str	r3, [r7, #0]
 8005b74:	e7ee      	b.n	8005b54 <__sfp+0x60>
 8005b76:	bf00      	nop
 8005b78:	08006644 	.word	0x08006644
 8005b7c:	ffff0001 	.word	0xffff0001

08005b80 <_fwalk_reent>:
 8005b80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b84:	4606      	mov	r6, r0
 8005b86:	4688      	mov	r8, r1
 8005b88:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005b8c:	2700      	movs	r7, #0
 8005b8e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005b92:	f1b9 0901 	subs.w	r9, r9, #1
 8005b96:	d505      	bpl.n	8005ba4 <_fwalk_reent+0x24>
 8005b98:	6824      	ldr	r4, [r4, #0]
 8005b9a:	2c00      	cmp	r4, #0
 8005b9c:	d1f7      	bne.n	8005b8e <_fwalk_reent+0xe>
 8005b9e:	4638      	mov	r0, r7
 8005ba0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ba4:	89ab      	ldrh	r3, [r5, #12]
 8005ba6:	2b01      	cmp	r3, #1
 8005ba8:	d907      	bls.n	8005bba <_fwalk_reent+0x3a>
 8005baa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005bae:	3301      	adds	r3, #1
 8005bb0:	d003      	beq.n	8005bba <_fwalk_reent+0x3a>
 8005bb2:	4629      	mov	r1, r5
 8005bb4:	4630      	mov	r0, r6
 8005bb6:	47c0      	blx	r8
 8005bb8:	4307      	orrs	r7, r0
 8005bba:	3568      	adds	r5, #104	; 0x68
 8005bbc:	e7e9      	b.n	8005b92 <_fwalk_reent+0x12>

08005bbe <__retarget_lock_init_recursive>:
 8005bbe:	4770      	bx	lr

08005bc0 <__retarget_lock_acquire_recursive>:
 8005bc0:	4770      	bx	lr

08005bc2 <__retarget_lock_release_recursive>:
 8005bc2:	4770      	bx	lr

08005bc4 <__swhatbuf_r>:
 8005bc4:	b570      	push	{r4, r5, r6, lr}
 8005bc6:	460e      	mov	r6, r1
 8005bc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bcc:	2900      	cmp	r1, #0
 8005bce:	b096      	sub	sp, #88	; 0x58
 8005bd0:	4614      	mov	r4, r2
 8005bd2:	461d      	mov	r5, r3
 8005bd4:	da08      	bge.n	8005be8 <__swhatbuf_r+0x24>
 8005bd6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	602a      	str	r2, [r5, #0]
 8005bde:	061a      	lsls	r2, r3, #24
 8005be0:	d410      	bmi.n	8005c04 <__swhatbuf_r+0x40>
 8005be2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005be6:	e00e      	b.n	8005c06 <__swhatbuf_r+0x42>
 8005be8:	466a      	mov	r2, sp
 8005bea:	f000 fc95 	bl	8006518 <_fstat_r>
 8005bee:	2800      	cmp	r0, #0
 8005bf0:	dbf1      	blt.n	8005bd6 <__swhatbuf_r+0x12>
 8005bf2:	9a01      	ldr	r2, [sp, #4]
 8005bf4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005bf8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005bfc:	425a      	negs	r2, r3
 8005bfe:	415a      	adcs	r2, r3
 8005c00:	602a      	str	r2, [r5, #0]
 8005c02:	e7ee      	b.n	8005be2 <__swhatbuf_r+0x1e>
 8005c04:	2340      	movs	r3, #64	; 0x40
 8005c06:	2000      	movs	r0, #0
 8005c08:	6023      	str	r3, [r4, #0]
 8005c0a:	b016      	add	sp, #88	; 0x58
 8005c0c:	bd70      	pop	{r4, r5, r6, pc}
	...

08005c10 <__smakebuf_r>:
 8005c10:	898b      	ldrh	r3, [r1, #12]
 8005c12:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005c14:	079d      	lsls	r5, r3, #30
 8005c16:	4606      	mov	r6, r0
 8005c18:	460c      	mov	r4, r1
 8005c1a:	d507      	bpl.n	8005c2c <__smakebuf_r+0x1c>
 8005c1c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005c20:	6023      	str	r3, [r4, #0]
 8005c22:	6123      	str	r3, [r4, #16]
 8005c24:	2301      	movs	r3, #1
 8005c26:	6163      	str	r3, [r4, #20]
 8005c28:	b002      	add	sp, #8
 8005c2a:	bd70      	pop	{r4, r5, r6, pc}
 8005c2c:	ab01      	add	r3, sp, #4
 8005c2e:	466a      	mov	r2, sp
 8005c30:	f7ff ffc8 	bl	8005bc4 <__swhatbuf_r>
 8005c34:	9900      	ldr	r1, [sp, #0]
 8005c36:	4605      	mov	r5, r0
 8005c38:	4630      	mov	r0, r6
 8005c3a:	f000 f895 	bl	8005d68 <_malloc_r>
 8005c3e:	b948      	cbnz	r0, 8005c54 <__smakebuf_r+0x44>
 8005c40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c44:	059a      	lsls	r2, r3, #22
 8005c46:	d4ef      	bmi.n	8005c28 <__smakebuf_r+0x18>
 8005c48:	f023 0303 	bic.w	r3, r3, #3
 8005c4c:	f043 0302 	orr.w	r3, r3, #2
 8005c50:	81a3      	strh	r3, [r4, #12]
 8005c52:	e7e3      	b.n	8005c1c <__smakebuf_r+0xc>
 8005c54:	4b0d      	ldr	r3, [pc, #52]	; (8005c8c <__smakebuf_r+0x7c>)
 8005c56:	62b3      	str	r3, [r6, #40]	; 0x28
 8005c58:	89a3      	ldrh	r3, [r4, #12]
 8005c5a:	6020      	str	r0, [r4, #0]
 8005c5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c60:	81a3      	strh	r3, [r4, #12]
 8005c62:	9b00      	ldr	r3, [sp, #0]
 8005c64:	6163      	str	r3, [r4, #20]
 8005c66:	9b01      	ldr	r3, [sp, #4]
 8005c68:	6120      	str	r0, [r4, #16]
 8005c6a:	b15b      	cbz	r3, 8005c84 <__smakebuf_r+0x74>
 8005c6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c70:	4630      	mov	r0, r6
 8005c72:	f000 fc63 	bl	800653c <_isatty_r>
 8005c76:	b128      	cbz	r0, 8005c84 <__smakebuf_r+0x74>
 8005c78:	89a3      	ldrh	r3, [r4, #12]
 8005c7a:	f023 0303 	bic.w	r3, r3, #3
 8005c7e:	f043 0301 	orr.w	r3, r3, #1
 8005c82:	81a3      	strh	r3, [r4, #12]
 8005c84:	89a0      	ldrh	r0, [r4, #12]
 8005c86:	4305      	orrs	r5, r0
 8005c88:	81a5      	strh	r5, [r4, #12]
 8005c8a:	e7cd      	b.n	8005c28 <__smakebuf_r+0x18>
 8005c8c:	08005a1d 	.word	0x08005a1d

08005c90 <_free_r>:
 8005c90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005c92:	2900      	cmp	r1, #0
 8005c94:	d044      	beq.n	8005d20 <_free_r+0x90>
 8005c96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c9a:	9001      	str	r0, [sp, #4]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	f1a1 0404 	sub.w	r4, r1, #4
 8005ca2:	bfb8      	it	lt
 8005ca4:	18e4      	addlt	r4, r4, r3
 8005ca6:	f000 fc6b 	bl	8006580 <__malloc_lock>
 8005caa:	4a1e      	ldr	r2, [pc, #120]	; (8005d24 <_free_r+0x94>)
 8005cac:	9801      	ldr	r0, [sp, #4]
 8005cae:	6813      	ldr	r3, [r2, #0]
 8005cb0:	b933      	cbnz	r3, 8005cc0 <_free_r+0x30>
 8005cb2:	6063      	str	r3, [r4, #4]
 8005cb4:	6014      	str	r4, [r2, #0]
 8005cb6:	b003      	add	sp, #12
 8005cb8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005cbc:	f000 bc66 	b.w	800658c <__malloc_unlock>
 8005cc0:	42a3      	cmp	r3, r4
 8005cc2:	d908      	bls.n	8005cd6 <_free_r+0x46>
 8005cc4:	6825      	ldr	r5, [r4, #0]
 8005cc6:	1961      	adds	r1, r4, r5
 8005cc8:	428b      	cmp	r3, r1
 8005cca:	bf01      	itttt	eq
 8005ccc:	6819      	ldreq	r1, [r3, #0]
 8005cce:	685b      	ldreq	r3, [r3, #4]
 8005cd0:	1949      	addeq	r1, r1, r5
 8005cd2:	6021      	streq	r1, [r4, #0]
 8005cd4:	e7ed      	b.n	8005cb2 <_free_r+0x22>
 8005cd6:	461a      	mov	r2, r3
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	b10b      	cbz	r3, 8005ce0 <_free_r+0x50>
 8005cdc:	42a3      	cmp	r3, r4
 8005cde:	d9fa      	bls.n	8005cd6 <_free_r+0x46>
 8005ce0:	6811      	ldr	r1, [r2, #0]
 8005ce2:	1855      	adds	r5, r2, r1
 8005ce4:	42a5      	cmp	r5, r4
 8005ce6:	d10b      	bne.n	8005d00 <_free_r+0x70>
 8005ce8:	6824      	ldr	r4, [r4, #0]
 8005cea:	4421      	add	r1, r4
 8005cec:	1854      	adds	r4, r2, r1
 8005cee:	42a3      	cmp	r3, r4
 8005cf0:	6011      	str	r1, [r2, #0]
 8005cf2:	d1e0      	bne.n	8005cb6 <_free_r+0x26>
 8005cf4:	681c      	ldr	r4, [r3, #0]
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	6053      	str	r3, [r2, #4]
 8005cfa:	4421      	add	r1, r4
 8005cfc:	6011      	str	r1, [r2, #0]
 8005cfe:	e7da      	b.n	8005cb6 <_free_r+0x26>
 8005d00:	d902      	bls.n	8005d08 <_free_r+0x78>
 8005d02:	230c      	movs	r3, #12
 8005d04:	6003      	str	r3, [r0, #0]
 8005d06:	e7d6      	b.n	8005cb6 <_free_r+0x26>
 8005d08:	6825      	ldr	r5, [r4, #0]
 8005d0a:	1961      	adds	r1, r4, r5
 8005d0c:	428b      	cmp	r3, r1
 8005d0e:	bf04      	itt	eq
 8005d10:	6819      	ldreq	r1, [r3, #0]
 8005d12:	685b      	ldreq	r3, [r3, #4]
 8005d14:	6063      	str	r3, [r4, #4]
 8005d16:	bf04      	itt	eq
 8005d18:	1949      	addeq	r1, r1, r5
 8005d1a:	6021      	streq	r1, [r4, #0]
 8005d1c:	6054      	str	r4, [r2, #4]
 8005d1e:	e7ca      	b.n	8005cb6 <_free_r+0x26>
 8005d20:	b003      	add	sp, #12
 8005d22:	bd30      	pop	{r4, r5, pc}
 8005d24:	200001dc 	.word	0x200001dc

08005d28 <sbrk_aligned>:
 8005d28:	b570      	push	{r4, r5, r6, lr}
 8005d2a:	4e0e      	ldr	r6, [pc, #56]	; (8005d64 <sbrk_aligned+0x3c>)
 8005d2c:	460c      	mov	r4, r1
 8005d2e:	6831      	ldr	r1, [r6, #0]
 8005d30:	4605      	mov	r5, r0
 8005d32:	b911      	cbnz	r1, 8005d3a <sbrk_aligned+0x12>
 8005d34:	f000 fb7a 	bl	800642c <_sbrk_r>
 8005d38:	6030      	str	r0, [r6, #0]
 8005d3a:	4621      	mov	r1, r4
 8005d3c:	4628      	mov	r0, r5
 8005d3e:	f000 fb75 	bl	800642c <_sbrk_r>
 8005d42:	1c43      	adds	r3, r0, #1
 8005d44:	d00a      	beq.n	8005d5c <sbrk_aligned+0x34>
 8005d46:	1cc4      	adds	r4, r0, #3
 8005d48:	f024 0403 	bic.w	r4, r4, #3
 8005d4c:	42a0      	cmp	r0, r4
 8005d4e:	d007      	beq.n	8005d60 <sbrk_aligned+0x38>
 8005d50:	1a21      	subs	r1, r4, r0
 8005d52:	4628      	mov	r0, r5
 8005d54:	f000 fb6a 	bl	800642c <_sbrk_r>
 8005d58:	3001      	adds	r0, #1
 8005d5a:	d101      	bne.n	8005d60 <sbrk_aligned+0x38>
 8005d5c:	f04f 34ff 	mov.w	r4, #4294967295
 8005d60:	4620      	mov	r0, r4
 8005d62:	bd70      	pop	{r4, r5, r6, pc}
 8005d64:	200001e0 	.word	0x200001e0

08005d68 <_malloc_r>:
 8005d68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d6c:	1ccd      	adds	r5, r1, #3
 8005d6e:	f025 0503 	bic.w	r5, r5, #3
 8005d72:	3508      	adds	r5, #8
 8005d74:	2d0c      	cmp	r5, #12
 8005d76:	bf38      	it	cc
 8005d78:	250c      	movcc	r5, #12
 8005d7a:	2d00      	cmp	r5, #0
 8005d7c:	4607      	mov	r7, r0
 8005d7e:	db01      	blt.n	8005d84 <_malloc_r+0x1c>
 8005d80:	42a9      	cmp	r1, r5
 8005d82:	d905      	bls.n	8005d90 <_malloc_r+0x28>
 8005d84:	230c      	movs	r3, #12
 8005d86:	603b      	str	r3, [r7, #0]
 8005d88:	2600      	movs	r6, #0
 8005d8a:	4630      	mov	r0, r6
 8005d8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d90:	4e2e      	ldr	r6, [pc, #184]	; (8005e4c <_malloc_r+0xe4>)
 8005d92:	f000 fbf5 	bl	8006580 <__malloc_lock>
 8005d96:	6833      	ldr	r3, [r6, #0]
 8005d98:	461c      	mov	r4, r3
 8005d9a:	bb34      	cbnz	r4, 8005dea <_malloc_r+0x82>
 8005d9c:	4629      	mov	r1, r5
 8005d9e:	4638      	mov	r0, r7
 8005da0:	f7ff ffc2 	bl	8005d28 <sbrk_aligned>
 8005da4:	1c43      	adds	r3, r0, #1
 8005da6:	4604      	mov	r4, r0
 8005da8:	d14d      	bne.n	8005e46 <_malloc_r+0xde>
 8005daa:	6834      	ldr	r4, [r6, #0]
 8005dac:	4626      	mov	r6, r4
 8005dae:	2e00      	cmp	r6, #0
 8005db0:	d140      	bne.n	8005e34 <_malloc_r+0xcc>
 8005db2:	6823      	ldr	r3, [r4, #0]
 8005db4:	4631      	mov	r1, r6
 8005db6:	4638      	mov	r0, r7
 8005db8:	eb04 0803 	add.w	r8, r4, r3
 8005dbc:	f000 fb36 	bl	800642c <_sbrk_r>
 8005dc0:	4580      	cmp	r8, r0
 8005dc2:	d13a      	bne.n	8005e3a <_malloc_r+0xd2>
 8005dc4:	6821      	ldr	r1, [r4, #0]
 8005dc6:	3503      	adds	r5, #3
 8005dc8:	1a6d      	subs	r5, r5, r1
 8005dca:	f025 0503 	bic.w	r5, r5, #3
 8005dce:	3508      	adds	r5, #8
 8005dd0:	2d0c      	cmp	r5, #12
 8005dd2:	bf38      	it	cc
 8005dd4:	250c      	movcc	r5, #12
 8005dd6:	4629      	mov	r1, r5
 8005dd8:	4638      	mov	r0, r7
 8005dda:	f7ff ffa5 	bl	8005d28 <sbrk_aligned>
 8005dde:	3001      	adds	r0, #1
 8005de0:	d02b      	beq.n	8005e3a <_malloc_r+0xd2>
 8005de2:	6823      	ldr	r3, [r4, #0]
 8005de4:	442b      	add	r3, r5
 8005de6:	6023      	str	r3, [r4, #0]
 8005de8:	e00e      	b.n	8005e08 <_malloc_r+0xa0>
 8005dea:	6822      	ldr	r2, [r4, #0]
 8005dec:	1b52      	subs	r2, r2, r5
 8005dee:	d41e      	bmi.n	8005e2e <_malloc_r+0xc6>
 8005df0:	2a0b      	cmp	r2, #11
 8005df2:	d916      	bls.n	8005e22 <_malloc_r+0xba>
 8005df4:	1961      	adds	r1, r4, r5
 8005df6:	42a3      	cmp	r3, r4
 8005df8:	6025      	str	r5, [r4, #0]
 8005dfa:	bf18      	it	ne
 8005dfc:	6059      	strne	r1, [r3, #4]
 8005dfe:	6863      	ldr	r3, [r4, #4]
 8005e00:	bf08      	it	eq
 8005e02:	6031      	streq	r1, [r6, #0]
 8005e04:	5162      	str	r2, [r4, r5]
 8005e06:	604b      	str	r3, [r1, #4]
 8005e08:	4638      	mov	r0, r7
 8005e0a:	f104 060b 	add.w	r6, r4, #11
 8005e0e:	f000 fbbd 	bl	800658c <__malloc_unlock>
 8005e12:	f026 0607 	bic.w	r6, r6, #7
 8005e16:	1d23      	adds	r3, r4, #4
 8005e18:	1af2      	subs	r2, r6, r3
 8005e1a:	d0b6      	beq.n	8005d8a <_malloc_r+0x22>
 8005e1c:	1b9b      	subs	r3, r3, r6
 8005e1e:	50a3      	str	r3, [r4, r2]
 8005e20:	e7b3      	b.n	8005d8a <_malloc_r+0x22>
 8005e22:	6862      	ldr	r2, [r4, #4]
 8005e24:	42a3      	cmp	r3, r4
 8005e26:	bf0c      	ite	eq
 8005e28:	6032      	streq	r2, [r6, #0]
 8005e2a:	605a      	strne	r2, [r3, #4]
 8005e2c:	e7ec      	b.n	8005e08 <_malloc_r+0xa0>
 8005e2e:	4623      	mov	r3, r4
 8005e30:	6864      	ldr	r4, [r4, #4]
 8005e32:	e7b2      	b.n	8005d9a <_malloc_r+0x32>
 8005e34:	4634      	mov	r4, r6
 8005e36:	6876      	ldr	r6, [r6, #4]
 8005e38:	e7b9      	b.n	8005dae <_malloc_r+0x46>
 8005e3a:	230c      	movs	r3, #12
 8005e3c:	603b      	str	r3, [r7, #0]
 8005e3e:	4638      	mov	r0, r7
 8005e40:	f000 fba4 	bl	800658c <__malloc_unlock>
 8005e44:	e7a1      	b.n	8005d8a <_malloc_r+0x22>
 8005e46:	6025      	str	r5, [r4, #0]
 8005e48:	e7de      	b.n	8005e08 <_malloc_r+0xa0>
 8005e4a:	bf00      	nop
 8005e4c:	200001dc 	.word	0x200001dc

08005e50 <__sfputc_r>:
 8005e50:	6893      	ldr	r3, [r2, #8]
 8005e52:	3b01      	subs	r3, #1
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	b410      	push	{r4}
 8005e58:	6093      	str	r3, [r2, #8]
 8005e5a:	da08      	bge.n	8005e6e <__sfputc_r+0x1e>
 8005e5c:	6994      	ldr	r4, [r2, #24]
 8005e5e:	42a3      	cmp	r3, r4
 8005e60:	db01      	blt.n	8005e66 <__sfputc_r+0x16>
 8005e62:	290a      	cmp	r1, #10
 8005e64:	d103      	bne.n	8005e6e <__sfputc_r+0x1e>
 8005e66:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005e6a:	f7ff bc31 	b.w	80056d0 <__swbuf_r>
 8005e6e:	6813      	ldr	r3, [r2, #0]
 8005e70:	1c58      	adds	r0, r3, #1
 8005e72:	6010      	str	r0, [r2, #0]
 8005e74:	7019      	strb	r1, [r3, #0]
 8005e76:	4608      	mov	r0, r1
 8005e78:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005e7c:	4770      	bx	lr

08005e7e <__sfputs_r>:
 8005e7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e80:	4606      	mov	r6, r0
 8005e82:	460f      	mov	r7, r1
 8005e84:	4614      	mov	r4, r2
 8005e86:	18d5      	adds	r5, r2, r3
 8005e88:	42ac      	cmp	r4, r5
 8005e8a:	d101      	bne.n	8005e90 <__sfputs_r+0x12>
 8005e8c:	2000      	movs	r0, #0
 8005e8e:	e007      	b.n	8005ea0 <__sfputs_r+0x22>
 8005e90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e94:	463a      	mov	r2, r7
 8005e96:	4630      	mov	r0, r6
 8005e98:	f7ff ffda 	bl	8005e50 <__sfputc_r>
 8005e9c:	1c43      	adds	r3, r0, #1
 8005e9e:	d1f3      	bne.n	8005e88 <__sfputs_r+0xa>
 8005ea0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005ea4 <_vfiprintf_r>:
 8005ea4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ea8:	460d      	mov	r5, r1
 8005eaa:	b09d      	sub	sp, #116	; 0x74
 8005eac:	4614      	mov	r4, r2
 8005eae:	4698      	mov	r8, r3
 8005eb0:	4606      	mov	r6, r0
 8005eb2:	b118      	cbz	r0, 8005ebc <_vfiprintf_r+0x18>
 8005eb4:	6983      	ldr	r3, [r0, #24]
 8005eb6:	b90b      	cbnz	r3, 8005ebc <_vfiprintf_r+0x18>
 8005eb8:	f7ff fde4 	bl	8005a84 <__sinit>
 8005ebc:	4b89      	ldr	r3, [pc, #548]	; (80060e4 <_vfiprintf_r+0x240>)
 8005ebe:	429d      	cmp	r5, r3
 8005ec0:	d11b      	bne.n	8005efa <_vfiprintf_r+0x56>
 8005ec2:	6875      	ldr	r5, [r6, #4]
 8005ec4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005ec6:	07d9      	lsls	r1, r3, #31
 8005ec8:	d405      	bmi.n	8005ed6 <_vfiprintf_r+0x32>
 8005eca:	89ab      	ldrh	r3, [r5, #12]
 8005ecc:	059a      	lsls	r2, r3, #22
 8005ece:	d402      	bmi.n	8005ed6 <_vfiprintf_r+0x32>
 8005ed0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005ed2:	f7ff fe75 	bl	8005bc0 <__retarget_lock_acquire_recursive>
 8005ed6:	89ab      	ldrh	r3, [r5, #12]
 8005ed8:	071b      	lsls	r3, r3, #28
 8005eda:	d501      	bpl.n	8005ee0 <_vfiprintf_r+0x3c>
 8005edc:	692b      	ldr	r3, [r5, #16]
 8005ede:	b9eb      	cbnz	r3, 8005f1c <_vfiprintf_r+0x78>
 8005ee0:	4629      	mov	r1, r5
 8005ee2:	4630      	mov	r0, r6
 8005ee4:	f7ff fc46 	bl	8005774 <__swsetup_r>
 8005ee8:	b1c0      	cbz	r0, 8005f1c <_vfiprintf_r+0x78>
 8005eea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005eec:	07dc      	lsls	r4, r3, #31
 8005eee:	d50e      	bpl.n	8005f0e <_vfiprintf_r+0x6a>
 8005ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ef4:	b01d      	add	sp, #116	; 0x74
 8005ef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005efa:	4b7b      	ldr	r3, [pc, #492]	; (80060e8 <_vfiprintf_r+0x244>)
 8005efc:	429d      	cmp	r5, r3
 8005efe:	d101      	bne.n	8005f04 <_vfiprintf_r+0x60>
 8005f00:	68b5      	ldr	r5, [r6, #8]
 8005f02:	e7df      	b.n	8005ec4 <_vfiprintf_r+0x20>
 8005f04:	4b79      	ldr	r3, [pc, #484]	; (80060ec <_vfiprintf_r+0x248>)
 8005f06:	429d      	cmp	r5, r3
 8005f08:	bf08      	it	eq
 8005f0a:	68f5      	ldreq	r5, [r6, #12]
 8005f0c:	e7da      	b.n	8005ec4 <_vfiprintf_r+0x20>
 8005f0e:	89ab      	ldrh	r3, [r5, #12]
 8005f10:	0598      	lsls	r0, r3, #22
 8005f12:	d4ed      	bmi.n	8005ef0 <_vfiprintf_r+0x4c>
 8005f14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005f16:	f7ff fe54 	bl	8005bc2 <__retarget_lock_release_recursive>
 8005f1a:	e7e9      	b.n	8005ef0 <_vfiprintf_r+0x4c>
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	9309      	str	r3, [sp, #36]	; 0x24
 8005f20:	2320      	movs	r3, #32
 8005f22:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005f26:	f8cd 800c 	str.w	r8, [sp, #12]
 8005f2a:	2330      	movs	r3, #48	; 0x30
 8005f2c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80060f0 <_vfiprintf_r+0x24c>
 8005f30:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005f34:	f04f 0901 	mov.w	r9, #1
 8005f38:	4623      	mov	r3, r4
 8005f3a:	469a      	mov	sl, r3
 8005f3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005f40:	b10a      	cbz	r2, 8005f46 <_vfiprintf_r+0xa2>
 8005f42:	2a25      	cmp	r2, #37	; 0x25
 8005f44:	d1f9      	bne.n	8005f3a <_vfiprintf_r+0x96>
 8005f46:	ebba 0b04 	subs.w	fp, sl, r4
 8005f4a:	d00b      	beq.n	8005f64 <_vfiprintf_r+0xc0>
 8005f4c:	465b      	mov	r3, fp
 8005f4e:	4622      	mov	r2, r4
 8005f50:	4629      	mov	r1, r5
 8005f52:	4630      	mov	r0, r6
 8005f54:	f7ff ff93 	bl	8005e7e <__sfputs_r>
 8005f58:	3001      	adds	r0, #1
 8005f5a:	f000 80aa 	beq.w	80060b2 <_vfiprintf_r+0x20e>
 8005f5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f60:	445a      	add	r2, fp
 8005f62:	9209      	str	r2, [sp, #36]	; 0x24
 8005f64:	f89a 3000 	ldrb.w	r3, [sl]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	f000 80a2 	beq.w	80060b2 <_vfiprintf_r+0x20e>
 8005f6e:	2300      	movs	r3, #0
 8005f70:	f04f 32ff 	mov.w	r2, #4294967295
 8005f74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005f78:	f10a 0a01 	add.w	sl, sl, #1
 8005f7c:	9304      	str	r3, [sp, #16]
 8005f7e:	9307      	str	r3, [sp, #28]
 8005f80:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005f84:	931a      	str	r3, [sp, #104]	; 0x68
 8005f86:	4654      	mov	r4, sl
 8005f88:	2205      	movs	r2, #5
 8005f8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f8e:	4858      	ldr	r0, [pc, #352]	; (80060f0 <_vfiprintf_r+0x24c>)
 8005f90:	f7fa f92e 	bl	80001f0 <memchr>
 8005f94:	9a04      	ldr	r2, [sp, #16]
 8005f96:	b9d8      	cbnz	r0, 8005fd0 <_vfiprintf_r+0x12c>
 8005f98:	06d1      	lsls	r1, r2, #27
 8005f9a:	bf44      	itt	mi
 8005f9c:	2320      	movmi	r3, #32
 8005f9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005fa2:	0713      	lsls	r3, r2, #28
 8005fa4:	bf44      	itt	mi
 8005fa6:	232b      	movmi	r3, #43	; 0x2b
 8005fa8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005fac:	f89a 3000 	ldrb.w	r3, [sl]
 8005fb0:	2b2a      	cmp	r3, #42	; 0x2a
 8005fb2:	d015      	beq.n	8005fe0 <_vfiprintf_r+0x13c>
 8005fb4:	9a07      	ldr	r2, [sp, #28]
 8005fb6:	4654      	mov	r4, sl
 8005fb8:	2000      	movs	r0, #0
 8005fba:	f04f 0c0a 	mov.w	ip, #10
 8005fbe:	4621      	mov	r1, r4
 8005fc0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005fc4:	3b30      	subs	r3, #48	; 0x30
 8005fc6:	2b09      	cmp	r3, #9
 8005fc8:	d94e      	bls.n	8006068 <_vfiprintf_r+0x1c4>
 8005fca:	b1b0      	cbz	r0, 8005ffa <_vfiprintf_r+0x156>
 8005fcc:	9207      	str	r2, [sp, #28]
 8005fce:	e014      	b.n	8005ffa <_vfiprintf_r+0x156>
 8005fd0:	eba0 0308 	sub.w	r3, r0, r8
 8005fd4:	fa09 f303 	lsl.w	r3, r9, r3
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	9304      	str	r3, [sp, #16]
 8005fdc:	46a2      	mov	sl, r4
 8005fde:	e7d2      	b.n	8005f86 <_vfiprintf_r+0xe2>
 8005fe0:	9b03      	ldr	r3, [sp, #12]
 8005fe2:	1d19      	adds	r1, r3, #4
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	9103      	str	r1, [sp, #12]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	bfbb      	ittet	lt
 8005fec:	425b      	neglt	r3, r3
 8005fee:	f042 0202 	orrlt.w	r2, r2, #2
 8005ff2:	9307      	strge	r3, [sp, #28]
 8005ff4:	9307      	strlt	r3, [sp, #28]
 8005ff6:	bfb8      	it	lt
 8005ff8:	9204      	strlt	r2, [sp, #16]
 8005ffa:	7823      	ldrb	r3, [r4, #0]
 8005ffc:	2b2e      	cmp	r3, #46	; 0x2e
 8005ffe:	d10c      	bne.n	800601a <_vfiprintf_r+0x176>
 8006000:	7863      	ldrb	r3, [r4, #1]
 8006002:	2b2a      	cmp	r3, #42	; 0x2a
 8006004:	d135      	bne.n	8006072 <_vfiprintf_r+0x1ce>
 8006006:	9b03      	ldr	r3, [sp, #12]
 8006008:	1d1a      	adds	r2, r3, #4
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	9203      	str	r2, [sp, #12]
 800600e:	2b00      	cmp	r3, #0
 8006010:	bfb8      	it	lt
 8006012:	f04f 33ff 	movlt.w	r3, #4294967295
 8006016:	3402      	adds	r4, #2
 8006018:	9305      	str	r3, [sp, #20]
 800601a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006100 <_vfiprintf_r+0x25c>
 800601e:	7821      	ldrb	r1, [r4, #0]
 8006020:	2203      	movs	r2, #3
 8006022:	4650      	mov	r0, sl
 8006024:	f7fa f8e4 	bl	80001f0 <memchr>
 8006028:	b140      	cbz	r0, 800603c <_vfiprintf_r+0x198>
 800602a:	2340      	movs	r3, #64	; 0x40
 800602c:	eba0 000a 	sub.w	r0, r0, sl
 8006030:	fa03 f000 	lsl.w	r0, r3, r0
 8006034:	9b04      	ldr	r3, [sp, #16]
 8006036:	4303      	orrs	r3, r0
 8006038:	3401      	adds	r4, #1
 800603a:	9304      	str	r3, [sp, #16]
 800603c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006040:	482c      	ldr	r0, [pc, #176]	; (80060f4 <_vfiprintf_r+0x250>)
 8006042:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006046:	2206      	movs	r2, #6
 8006048:	f7fa f8d2 	bl	80001f0 <memchr>
 800604c:	2800      	cmp	r0, #0
 800604e:	d03f      	beq.n	80060d0 <_vfiprintf_r+0x22c>
 8006050:	4b29      	ldr	r3, [pc, #164]	; (80060f8 <_vfiprintf_r+0x254>)
 8006052:	bb1b      	cbnz	r3, 800609c <_vfiprintf_r+0x1f8>
 8006054:	9b03      	ldr	r3, [sp, #12]
 8006056:	3307      	adds	r3, #7
 8006058:	f023 0307 	bic.w	r3, r3, #7
 800605c:	3308      	adds	r3, #8
 800605e:	9303      	str	r3, [sp, #12]
 8006060:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006062:	443b      	add	r3, r7
 8006064:	9309      	str	r3, [sp, #36]	; 0x24
 8006066:	e767      	b.n	8005f38 <_vfiprintf_r+0x94>
 8006068:	fb0c 3202 	mla	r2, ip, r2, r3
 800606c:	460c      	mov	r4, r1
 800606e:	2001      	movs	r0, #1
 8006070:	e7a5      	b.n	8005fbe <_vfiprintf_r+0x11a>
 8006072:	2300      	movs	r3, #0
 8006074:	3401      	adds	r4, #1
 8006076:	9305      	str	r3, [sp, #20]
 8006078:	4619      	mov	r1, r3
 800607a:	f04f 0c0a 	mov.w	ip, #10
 800607e:	4620      	mov	r0, r4
 8006080:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006084:	3a30      	subs	r2, #48	; 0x30
 8006086:	2a09      	cmp	r2, #9
 8006088:	d903      	bls.n	8006092 <_vfiprintf_r+0x1ee>
 800608a:	2b00      	cmp	r3, #0
 800608c:	d0c5      	beq.n	800601a <_vfiprintf_r+0x176>
 800608e:	9105      	str	r1, [sp, #20]
 8006090:	e7c3      	b.n	800601a <_vfiprintf_r+0x176>
 8006092:	fb0c 2101 	mla	r1, ip, r1, r2
 8006096:	4604      	mov	r4, r0
 8006098:	2301      	movs	r3, #1
 800609a:	e7f0      	b.n	800607e <_vfiprintf_r+0x1da>
 800609c:	ab03      	add	r3, sp, #12
 800609e:	9300      	str	r3, [sp, #0]
 80060a0:	462a      	mov	r2, r5
 80060a2:	4b16      	ldr	r3, [pc, #88]	; (80060fc <_vfiprintf_r+0x258>)
 80060a4:	a904      	add	r1, sp, #16
 80060a6:	4630      	mov	r0, r6
 80060a8:	f3af 8000 	nop.w
 80060ac:	4607      	mov	r7, r0
 80060ae:	1c78      	adds	r0, r7, #1
 80060b0:	d1d6      	bne.n	8006060 <_vfiprintf_r+0x1bc>
 80060b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80060b4:	07d9      	lsls	r1, r3, #31
 80060b6:	d405      	bmi.n	80060c4 <_vfiprintf_r+0x220>
 80060b8:	89ab      	ldrh	r3, [r5, #12]
 80060ba:	059a      	lsls	r2, r3, #22
 80060bc:	d402      	bmi.n	80060c4 <_vfiprintf_r+0x220>
 80060be:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80060c0:	f7ff fd7f 	bl	8005bc2 <__retarget_lock_release_recursive>
 80060c4:	89ab      	ldrh	r3, [r5, #12]
 80060c6:	065b      	lsls	r3, r3, #25
 80060c8:	f53f af12 	bmi.w	8005ef0 <_vfiprintf_r+0x4c>
 80060cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80060ce:	e711      	b.n	8005ef4 <_vfiprintf_r+0x50>
 80060d0:	ab03      	add	r3, sp, #12
 80060d2:	9300      	str	r3, [sp, #0]
 80060d4:	462a      	mov	r2, r5
 80060d6:	4b09      	ldr	r3, [pc, #36]	; (80060fc <_vfiprintf_r+0x258>)
 80060d8:	a904      	add	r1, sp, #16
 80060da:	4630      	mov	r0, r6
 80060dc:	f000 f880 	bl	80061e0 <_printf_i>
 80060e0:	e7e4      	b.n	80060ac <_vfiprintf_r+0x208>
 80060e2:	bf00      	nop
 80060e4:	08006668 	.word	0x08006668
 80060e8:	08006688 	.word	0x08006688
 80060ec:	08006648 	.word	0x08006648
 80060f0:	080066a8 	.word	0x080066a8
 80060f4:	080066b2 	.word	0x080066b2
 80060f8:	00000000 	.word	0x00000000
 80060fc:	08005e7f 	.word	0x08005e7f
 8006100:	080066ae 	.word	0x080066ae

08006104 <_printf_common>:
 8006104:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006108:	4616      	mov	r6, r2
 800610a:	4699      	mov	r9, r3
 800610c:	688a      	ldr	r2, [r1, #8]
 800610e:	690b      	ldr	r3, [r1, #16]
 8006110:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006114:	4293      	cmp	r3, r2
 8006116:	bfb8      	it	lt
 8006118:	4613      	movlt	r3, r2
 800611a:	6033      	str	r3, [r6, #0]
 800611c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006120:	4607      	mov	r7, r0
 8006122:	460c      	mov	r4, r1
 8006124:	b10a      	cbz	r2, 800612a <_printf_common+0x26>
 8006126:	3301      	adds	r3, #1
 8006128:	6033      	str	r3, [r6, #0]
 800612a:	6823      	ldr	r3, [r4, #0]
 800612c:	0699      	lsls	r1, r3, #26
 800612e:	bf42      	ittt	mi
 8006130:	6833      	ldrmi	r3, [r6, #0]
 8006132:	3302      	addmi	r3, #2
 8006134:	6033      	strmi	r3, [r6, #0]
 8006136:	6825      	ldr	r5, [r4, #0]
 8006138:	f015 0506 	ands.w	r5, r5, #6
 800613c:	d106      	bne.n	800614c <_printf_common+0x48>
 800613e:	f104 0a19 	add.w	sl, r4, #25
 8006142:	68e3      	ldr	r3, [r4, #12]
 8006144:	6832      	ldr	r2, [r6, #0]
 8006146:	1a9b      	subs	r3, r3, r2
 8006148:	42ab      	cmp	r3, r5
 800614a:	dc26      	bgt.n	800619a <_printf_common+0x96>
 800614c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006150:	1e13      	subs	r3, r2, #0
 8006152:	6822      	ldr	r2, [r4, #0]
 8006154:	bf18      	it	ne
 8006156:	2301      	movne	r3, #1
 8006158:	0692      	lsls	r2, r2, #26
 800615a:	d42b      	bmi.n	80061b4 <_printf_common+0xb0>
 800615c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006160:	4649      	mov	r1, r9
 8006162:	4638      	mov	r0, r7
 8006164:	47c0      	blx	r8
 8006166:	3001      	adds	r0, #1
 8006168:	d01e      	beq.n	80061a8 <_printf_common+0xa4>
 800616a:	6823      	ldr	r3, [r4, #0]
 800616c:	68e5      	ldr	r5, [r4, #12]
 800616e:	6832      	ldr	r2, [r6, #0]
 8006170:	f003 0306 	and.w	r3, r3, #6
 8006174:	2b04      	cmp	r3, #4
 8006176:	bf08      	it	eq
 8006178:	1aad      	subeq	r5, r5, r2
 800617a:	68a3      	ldr	r3, [r4, #8]
 800617c:	6922      	ldr	r2, [r4, #16]
 800617e:	bf0c      	ite	eq
 8006180:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006184:	2500      	movne	r5, #0
 8006186:	4293      	cmp	r3, r2
 8006188:	bfc4      	itt	gt
 800618a:	1a9b      	subgt	r3, r3, r2
 800618c:	18ed      	addgt	r5, r5, r3
 800618e:	2600      	movs	r6, #0
 8006190:	341a      	adds	r4, #26
 8006192:	42b5      	cmp	r5, r6
 8006194:	d11a      	bne.n	80061cc <_printf_common+0xc8>
 8006196:	2000      	movs	r0, #0
 8006198:	e008      	b.n	80061ac <_printf_common+0xa8>
 800619a:	2301      	movs	r3, #1
 800619c:	4652      	mov	r2, sl
 800619e:	4649      	mov	r1, r9
 80061a0:	4638      	mov	r0, r7
 80061a2:	47c0      	blx	r8
 80061a4:	3001      	adds	r0, #1
 80061a6:	d103      	bne.n	80061b0 <_printf_common+0xac>
 80061a8:	f04f 30ff 	mov.w	r0, #4294967295
 80061ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061b0:	3501      	adds	r5, #1
 80061b2:	e7c6      	b.n	8006142 <_printf_common+0x3e>
 80061b4:	18e1      	adds	r1, r4, r3
 80061b6:	1c5a      	adds	r2, r3, #1
 80061b8:	2030      	movs	r0, #48	; 0x30
 80061ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80061be:	4422      	add	r2, r4
 80061c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80061c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80061c8:	3302      	adds	r3, #2
 80061ca:	e7c7      	b.n	800615c <_printf_common+0x58>
 80061cc:	2301      	movs	r3, #1
 80061ce:	4622      	mov	r2, r4
 80061d0:	4649      	mov	r1, r9
 80061d2:	4638      	mov	r0, r7
 80061d4:	47c0      	blx	r8
 80061d6:	3001      	adds	r0, #1
 80061d8:	d0e6      	beq.n	80061a8 <_printf_common+0xa4>
 80061da:	3601      	adds	r6, #1
 80061dc:	e7d9      	b.n	8006192 <_printf_common+0x8e>
	...

080061e0 <_printf_i>:
 80061e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80061e4:	7e0f      	ldrb	r7, [r1, #24]
 80061e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80061e8:	2f78      	cmp	r7, #120	; 0x78
 80061ea:	4691      	mov	r9, r2
 80061ec:	4680      	mov	r8, r0
 80061ee:	460c      	mov	r4, r1
 80061f0:	469a      	mov	sl, r3
 80061f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80061f6:	d807      	bhi.n	8006208 <_printf_i+0x28>
 80061f8:	2f62      	cmp	r7, #98	; 0x62
 80061fa:	d80a      	bhi.n	8006212 <_printf_i+0x32>
 80061fc:	2f00      	cmp	r7, #0
 80061fe:	f000 80d8 	beq.w	80063b2 <_printf_i+0x1d2>
 8006202:	2f58      	cmp	r7, #88	; 0x58
 8006204:	f000 80a3 	beq.w	800634e <_printf_i+0x16e>
 8006208:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800620c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006210:	e03a      	b.n	8006288 <_printf_i+0xa8>
 8006212:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006216:	2b15      	cmp	r3, #21
 8006218:	d8f6      	bhi.n	8006208 <_printf_i+0x28>
 800621a:	a101      	add	r1, pc, #4	; (adr r1, 8006220 <_printf_i+0x40>)
 800621c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006220:	08006279 	.word	0x08006279
 8006224:	0800628d 	.word	0x0800628d
 8006228:	08006209 	.word	0x08006209
 800622c:	08006209 	.word	0x08006209
 8006230:	08006209 	.word	0x08006209
 8006234:	08006209 	.word	0x08006209
 8006238:	0800628d 	.word	0x0800628d
 800623c:	08006209 	.word	0x08006209
 8006240:	08006209 	.word	0x08006209
 8006244:	08006209 	.word	0x08006209
 8006248:	08006209 	.word	0x08006209
 800624c:	08006399 	.word	0x08006399
 8006250:	080062bd 	.word	0x080062bd
 8006254:	0800637b 	.word	0x0800637b
 8006258:	08006209 	.word	0x08006209
 800625c:	08006209 	.word	0x08006209
 8006260:	080063bb 	.word	0x080063bb
 8006264:	08006209 	.word	0x08006209
 8006268:	080062bd 	.word	0x080062bd
 800626c:	08006209 	.word	0x08006209
 8006270:	08006209 	.word	0x08006209
 8006274:	08006383 	.word	0x08006383
 8006278:	682b      	ldr	r3, [r5, #0]
 800627a:	1d1a      	adds	r2, r3, #4
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	602a      	str	r2, [r5, #0]
 8006280:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006284:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006288:	2301      	movs	r3, #1
 800628a:	e0a3      	b.n	80063d4 <_printf_i+0x1f4>
 800628c:	6820      	ldr	r0, [r4, #0]
 800628e:	6829      	ldr	r1, [r5, #0]
 8006290:	0606      	lsls	r6, r0, #24
 8006292:	f101 0304 	add.w	r3, r1, #4
 8006296:	d50a      	bpl.n	80062ae <_printf_i+0xce>
 8006298:	680e      	ldr	r6, [r1, #0]
 800629a:	602b      	str	r3, [r5, #0]
 800629c:	2e00      	cmp	r6, #0
 800629e:	da03      	bge.n	80062a8 <_printf_i+0xc8>
 80062a0:	232d      	movs	r3, #45	; 0x2d
 80062a2:	4276      	negs	r6, r6
 80062a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062a8:	485e      	ldr	r0, [pc, #376]	; (8006424 <_printf_i+0x244>)
 80062aa:	230a      	movs	r3, #10
 80062ac:	e019      	b.n	80062e2 <_printf_i+0x102>
 80062ae:	680e      	ldr	r6, [r1, #0]
 80062b0:	602b      	str	r3, [r5, #0]
 80062b2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80062b6:	bf18      	it	ne
 80062b8:	b236      	sxthne	r6, r6
 80062ba:	e7ef      	b.n	800629c <_printf_i+0xbc>
 80062bc:	682b      	ldr	r3, [r5, #0]
 80062be:	6820      	ldr	r0, [r4, #0]
 80062c0:	1d19      	adds	r1, r3, #4
 80062c2:	6029      	str	r1, [r5, #0]
 80062c4:	0601      	lsls	r1, r0, #24
 80062c6:	d501      	bpl.n	80062cc <_printf_i+0xec>
 80062c8:	681e      	ldr	r6, [r3, #0]
 80062ca:	e002      	b.n	80062d2 <_printf_i+0xf2>
 80062cc:	0646      	lsls	r6, r0, #25
 80062ce:	d5fb      	bpl.n	80062c8 <_printf_i+0xe8>
 80062d0:	881e      	ldrh	r6, [r3, #0]
 80062d2:	4854      	ldr	r0, [pc, #336]	; (8006424 <_printf_i+0x244>)
 80062d4:	2f6f      	cmp	r7, #111	; 0x6f
 80062d6:	bf0c      	ite	eq
 80062d8:	2308      	moveq	r3, #8
 80062da:	230a      	movne	r3, #10
 80062dc:	2100      	movs	r1, #0
 80062de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80062e2:	6865      	ldr	r5, [r4, #4]
 80062e4:	60a5      	str	r5, [r4, #8]
 80062e6:	2d00      	cmp	r5, #0
 80062e8:	bfa2      	ittt	ge
 80062ea:	6821      	ldrge	r1, [r4, #0]
 80062ec:	f021 0104 	bicge.w	r1, r1, #4
 80062f0:	6021      	strge	r1, [r4, #0]
 80062f2:	b90e      	cbnz	r6, 80062f8 <_printf_i+0x118>
 80062f4:	2d00      	cmp	r5, #0
 80062f6:	d04d      	beq.n	8006394 <_printf_i+0x1b4>
 80062f8:	4615      	mov	r5, r2
 80062fa:	fbb6 f1f3 	udiv	r1, r6, r3
 80062fe:	fb03 6711 	mls	r7, r3, r1, r6
 8006302:	5dc7      	ldrb	r7, [r0, r7]
 8006304:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006308:	4637      	mov	r7, r6
 800630a:	42bb      	cmp	r3, r7
 800630c:	460e      	mov	r6, r1
 800630e:	d9f4      	bls.n	80062fa <_printf_i+0x11a>
 8006310:	2b08      	cmp	r3, #8
 8006312:	d10b      	bne.n	800632c <_printf_i+0x14c>
 8006314:	6823      	ldr	r3, [r4, #0]
 8006316:	07de      	lsls	r6, r3, #31
 8006318:	d508      	bpl.n	800632c <_printf_i+0x14c>
 800631a:	6923      	ldr	r3, [r4, #16]
 800631c:	6861      	ldr	r1, [r4, #4]
 800631e:	4299      	cmp	r1, r3
 8006320:	bfde      	ittt	le
 8006322:	2330      	movle	r3, #48	; 0x30
 8006324:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006328:	f105 35ff 	addle.w	r5, r5, #4294967295
 800632c:	1b52      	subs	r2, r2, r5
 800632e:	6122      	str	r2, [r4, #16]
 8006330:	f8cd a000 	str.w	sl, [sp]
 8006334:	464b      	mov	r3, r9
 8006336:	aa03      	add	r2, sp, #12
 8006338:	4621      	mov	r1, r4
 800633a:	4640      	mov	r0, r8
 800633c:	f7ff fee2 	bl	8006104 <_printf_common>
 8006340:	3001      	adds	r0, #1
 8006342:	d14c      	bne.n	80063de <_printf_i+0x1fe>
 8006344:	f04f 30ff 	mov.w	r0, #4294967295
 8006348:	b004      	add	sp, #16
 800634a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800634e:	4835      	ldr	r0, [pc, #212]	; (8006424 <_printf_i+0x244>)
 8006350:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006354:	6829      	ldr	r1, [r5, #0]
 8006356:	6823      	ldr	r3, [r4, #0]
 8006358:	f851 6b04 	ldr.w	r6, [r1], #4
 800635c:	6029      	str	r1, [r5, #0]
 800635e:	061d      	lsls	r5, r3, #24
 8006360:	d514      	bpl.n	800638c <_printf_i+0x1ac>
 8006362:	07df      	lsls	r7, r3, #31
 8006364:	bf44      	itt	mi
 8006366:	f043 0320 	orrmi.w	r3, r3, #32
 800636a:	6023      	strmi	r3, [r4, #0]
 800636c:	b91e      	cbnz	r6, 8006376 <_printf_i+0x196>
 800636e:	6823      	ldr	r3, [r4, #0]
 8006370:	f023 0320 	bic.w	r3, r3, #32
 8006374:	6023      	str	r3, [r4, #0]
 8006376:	2310      	movs	r3, #16
 8006378:	e7b0      	b.n	80062dc <_printf_i+0xfc>
 800637a:	6823      	ldr	r3, [r4, #0]
 800637c:	f043 0320 	orr.w	r3, r3, #32
 8006380:	6023      	str	r3, [r4, #0]
 8006382:	2378      	movs	r3, #120	; 0x78
 8006384:	4828      	ldr	r0, [pc, #160]	; (8006428 <_printf_i+0x248>)
 8006386:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800638a:	e7e3      	b.n	8006354 <_printf_i+0x174>
 800638c:	0659      	lsls	r1, r3, #25
 800638e:	bf48      	it	mi
 8006390:	b2b6      	uxthmi	r6, r6
 8006392:	e7e6      	b.n	8006362 <_printf_i+0x182>
 8006394:	4615      	mov	r5, r2
 8006396:	e7bb      	b.n	8006310 <_printf_i+0x130>
 8006398:	682b      	ldr	r3, [r5, #0]
 800639a:	6826      	ldr	r6, [r4, #0]
 800639c:	6961      	ldr	r1, [r4, #20]
 800639e:	1d18      	adds	r0, r3, #4
 80063a0:	6028      	str	r0, [r5, #0]
 80063a2:	0635      	lsls	r5, r6, #24
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	d501      	bpl.n	80063ac <_printf_i+0x1cc>
 80063a8:	6019      	str	r1, [r3, #0]
 80063aa:	e002      	b.n	80063b2 <_printf_i+0x1d2>
 80063ac:	0670      	lsls	r0, r6, #25
 80063ae:	d5fb      	bpl.n	80063a8 <_printf_i+0x1c8>
 80063b0:	8019      	strh	r1, [r3, #0]
 80063b2:	2300      	movs	r3, #0
 80063b4:	6123      	str	r3, [r4, #16]
 80063b6:	4615      	mov	r5, r2
 80063b8:	e7ba      	b.n	8006330 <_printf_i+0x150>
 80063ba:	682b      	ldr	r3, [r5, #0]
 80063bc:	1d1a      	adds	r2, r3, #4
 80063be:	602a      	str	r2, [r5, #0]
 80063c0:	681d      	ldr	r5, [r3, #0]
 80063c2:	6862      	ldr	r2, [r4, #4]
 80063c4:	2100      	movs	r1, #0
 80063c6:	4628      	mov	r0, r5
 80063c8:	f7f9 ff12 	bl	80001f0 <memchr>
 80063cc:	b108      	cbz	r0, 80063d2 <_printf_i+0x1f2>
 80063ce:	1b40      	subs	r0, r0, r5
 80063d0:	6060      	str	r0, [r4, #4]
 80063d2:	6863      	ldr	r3, [r4, #4]
 80063d4:	6123      	str	r3, [r4, #16]
 80063d6:	2300      	movs	r3, #0
 80063d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80063dc:	e7a8      	b.n	8006330 <_printf_i+0x150>
 80063de:	6923      	ldr	r3, [r4, #16]
 80063e0:	462a      	mov	r2, r5
 80063e2:	4649      	mov	r1, r9
 80063e4:	4640      	mov	r0, r8
 80063e6:	47d0      	blx	sl
 80063e8:	3001      	adds	r0, #1
 80063ea:	d0ab      	beq.n	8006344 <_printf_i+0x164>
 80063ec:	6823      	ldr	r3, [r4, #0]
 80063ee:	079b      	lsls	r3, r3, #30
 80063f0:	d413      	bmi.n	800641a <_printf_i+0x23a>
 80063f2:	68e0      	ldr	r0, [r4, #12]
 80063f4:	9b03      	ldr	r3, [sp, #12]
 80063f6:	4298      	cmp	r0, r3
 80063f8:	bfb8      	it	lt
 80063fa:	4618      	movlt	r0, r3
 80063fc:	e7a4      	b.n	8006348 <_printf_i+0x168>
 80063fe:	2301      	movs	r3, #1
 8006400:	4632      	mov	r2, r6
 8006402:	4649      	mov	r1, r9
 8006404:	4640      	mov	r0, r8
 8006406:	47d0      	blx	sl
 8006408:	3001      	adds	r0, #1
 800640a:	d09b      	beq.n	8006344 <_printf_i+0x164>
 800640c:	3501      	adds	r5, #1
 800640e:	68e3      	ldr	r3, [r4, #12]
 8006410:	9903      	ldr	r1, [sp, #12]
 8006412:	1a5b      	subs	r3, r3, r1
 8006414:	42ab      	cmp	r3, r5
 8006416:	dcf2      	bgt.n	80063fe <_printf_i+0x21e>
 8006418:	e7eb      	b.n	80063f2 <_printf_i+0x212>
 800641a:	2500      	movs	r5, #0
 800641c:	f104 0619 	add.w	r6, r4, #25
 8006420:	e7f5      	b.n	800640e <_printf_i+0x22e>
 8006422:	bf00      	nop
 8006424:	080066b9 	.word	0x080066b9
 8006428:	080066ca 	.word	0x080066ca

0800642c <_sbrk_r>:
 800642c:	b538      	push	{r3, r4, r5, lr}
 800642e:	4d06      	ldr	r5, [pc, #24]	; (8006448 <_sbrk_r+0x1c>)
 8006430:	2300      	movs	r3, #0
 8006432:	4604      	mov	r4, r0
 8006434:	4608      	mov	r0, r1
 8006436:	602b      	str	r3, [r5, #0]
 8006438:	f7fa fc9c 	bl	8000d74 <_sbrk>
 800643c:	1c43      	adds	r3, r0, #1
 800643e:	d102      	bne.n	8006446 <_sbrk_r+0x1a>
 8006440:	682b      	ldr	r3, [r5, #0]
 8006442:	b103      	cbz	r3, 8006446 <_sbrk_r+0x1a>
 8006444:	6023      	str	r3, [r4, #0]
 8006446:	bd38      	pop	{r3, r4, r5, pc}
 8006448:	200001e4 	.word	0x200001e4

0800644c <__sread>:
 800644c:	b510      	push	{r4, lr}
 800644e:	460c      	mov	r4, r1
 8006450:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006454:	f000 f8a0 	bl	8006598 <_read_r>
 8006458:	2800      	cmp	r0, #0
 800645a:	bfab      	itete	ge
 800645c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800645e:	89a3      	ldrhlt	r3, [r4, #12]
 8006460:	181b      	addge	r3, r3, r0
 8006462:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006466:	bfac      	ite	ge
 8006468:	6563      	strge	r3, [r4, #84]	; 0x54
 800646a:	81a3      	strhlt	r3, [r4, #12]
 800646c:	bd10      	pop	{r4, pc}

0800646e <__swrite>:
 800646e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006472:	461f      	mov	r7, r3
 8006474:	898b      	ldrh	r3, [r1, #12]
 8006476:	05db      	lsls	r3, r3, #23
 8006478:	4605      	mov	r5, r0
 800647a:	460c      	mov	r4, r1
 800647c:	4616      	mov	r6, r2
 800647e:	d505      	bpl.n	800648c <__swrite+0x1e>
 8006480:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006484:	2302      	movs	r3, #2
 8006486:	2200      	movs	r2, #0
 8006488:	f000 f868 	bl	800655c <_lseek_r>
 800648c:	89a3      	ldrh	r3, [r4, #12]
 800648e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006492:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006496:	81a3      	strh	r3, [r4, #12]
 8006498:	4632      	mov	r2, r6
 800649a:	463b      	mov	r3, r7
 800649c:	4628      	mov	r0, r5
 800649e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80064a2:	f000 b817 	b.w	80064d4 <_write_r>

080064a6 <__sseek>:
 80064a6:	b510      	push	{r4, lr}
 80064a8:	460c      	mov	r4, r1
 80064aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064ae:	f000 f855 	bl	800655c <_lseek_r>
 80064b2:	1c43      	adds	r3, r0, #1
 80064b4:	89a3      	ldrh	r3, [r4, #12]
 80064b6:	bf15      	itete	ne
 80064b8:	6560      	strne	r0, [r4, #84]	; 0x54
 80064ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80064be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80064c2:	81a3      	strheq	r3, [r4, #12]
 80064c4:	bf18      	it	ne
 80064c6:	81a3      	strhne	r3, [r4, #12]
 80064c8:	bd10      	pop	{r4, pc}

080064ca <__sclose>:
 80064ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064ce:	f000 b813 	b.w	80064f8 <_close_r>
	...

080064d4 <_write_r>:
 80064d4:	b538      	push	{r3, r4, r5, lr}
 80064d6:	4d07      	ldr	r5, [pc, #28]	; (80064f4 <_write_r+0x20>)
 80064d8:	4604      	mov	r4, r0
 80064da:	4608      	mov	r0, r1
 80064dc:	4611      	mov	r1, r2
 80064de:	2200      	movs	r2, #0
 80064e0:	602a      	str	r2, [r5, #0]
 80064e2:	461a      	mov	r2, r3
 80064e4:	f7fa f986 	bl	80007f4 <_write>
 80064e8:	1c43      	adds	r3, r0, #1
 80064ea:	d102      	bne.n	80064f2 <_write_r+0x1e>
 80064ec:	682b      	ldr	r3, [r5, #0]
 80064ee:	b103      	cbz	r3, 80064f2 <_write_r+0x1e>
 80064f0:	6023      	str	r3, [r4, #0]
 80064f2:	bd38      	pop	{r3, r4, r5, pc}
 80064f4:	200001e4 	.word	0x200001e4

080064f8 <_close_r>:
 80064f8:	b538      	push	{r3, r4, r5, lr}
 80064fa:	4d06      	ldr	r5, [pc, #24]	; (8006514 <_close_r+0x1c>)
 80064fc:	2300      	movs	r3, #0
 80064fe:	4604      	mov	r4, r0
 8006500:	4608      	mov	r0, r1
 8006502:	602b      	str	r3, [r5, #0]
 8006504:	f7fa fc01 	bl	8000d0a <_close>
 8006508:	1c43      	adds	r3, r0, #1
 800650a:	d102      	bne.n	8006512 <_close_r+0x1a>
 800650c:	682b      	ldr	r3, [r5, #0]
 800650e:	b103      	cbz	r3, 8006512 <_close_r+0x1a>
 8006510:	6023      	str	r3, [r4, #0]
 8006512:	bd38      	pop	{r3, r4, r5, pc}
 8006514:	200001e4 	.word	0x200001e4

08006518 <_fstat_r>:
 8006518:	b538      	push	{r3, r4, r5, lr}
 800651a:	4d07      	ldr	r5, [pc, #28]	; (8006538 <_fstat_r+0x20>)
 800651c:	2300      	movs	r3, #0
 800651e:	4604      	mov	r4, r0
 8006520:	4608      	mov	r0, r1
 8006522:	4611      	mov	r1, r2
 8006524:	602b      	str	r3, [r5, #0]
 8006526:	f7fa fbfc 	bl	8000d22 <_fstat>
 800652a:	1c43      	adds	r3, r0, #1
 800652c:	d102      	bne.n	8006534 <_fstat_r+0x1c>
 800652e:	682b      	ldr	r3, [r5, #0]
 8006530:	b103      	cbz	r3, 8006534 <_fstat_r+0x1c>
 8006532:	6023      	str	r3, [r4, #0]
 8006534:	bd38      	pop	{r3, r4, r5, pc}
 8006536:	bf00      	nop
 8006538:	200001e4 	.word	0x200001e4

0800653c <_isatty_r>:
 800653c:	b538      	push	{r3, r4, r5, lr}
 800653e:	4d06      	ldr	r5, [pc, #24]	; (8006558 <_isatty_r+0x1c>)
 8006540:	2300      	movs	r3, #0
 8006542:	4604      	mov	r4, r0
 8006544:	4608      	mov	r0, r1
 8006546:	602b      	str	r3, [r5, #0]
 8006548:	f7fa fbfb 	bl	8000d42 <_isatty>
 800654c:	1c43      	adds	r3, r0, #1
 800654e:	d102      	bne.n	8006556 <_isatty_r+0x1a>
 8006550:	682b      	ldr	r3, [r5, #0]
 8006552:	b103      	cbz	r3, 8006556 <_isatty_r+0x1a>
 8006554:	6023      	str	r3, [r4, #0]
 8006556:	bd38      	pop	{r3, r4, r5, pc}
 8006558:	200001e4 	.word	0x200001e4

0800655c <_lseek_r>:
 800655c:	b538      	push	{r3, r4, r5, lr}
 800655e:	4d07      	ldr	r5, [pc, #28]	; (800657c <_lseek_r+0x20>)
 8006560:	4604      	mov	r4, r0
 8006562:	4608      	mov	r0, r1
 8006564:	4611      	mov	r1, r2
 8006566:	2200      	movs	r2, #0
 8006568:	602a      	str	r2, [r5, #0]
 800656a:	461a      	mov	r2, r3
 800656c:	f7fa fbf4 	bl	8000d58 <_lseek>
 8006570:	1c43      	adds	r3, r0, #1
 8006572:	d102      	bne.n	800657a <_lseek_r+0x1e>
 8006574:	682b      	ldr	r3, [r5, #0]
 8006576:	b103      	cbz	r3, 800657a <_lseek_r+0x1e>
 8006578:	6023      	str	r3, [r4, #0]
 800657a:	bd38      	pop	{r3, r4, r5, pc}
 800657c:	200001e4 	.word	0x200001e4

08006580 <__malloc_lock>:
 8006580:	4801      	ldr	r0, [pc, #4]	; (8006588 <__malloc_lock+0x8>)
 8006582:	f7ff bb1d 	b.w	8005bc0 <__retarget_lock_acquire_recursive>
 8006586:	bf00      	nop
 8006588:	200001d8 	.word	0x200001d8

0800658c <__malloc_unlock>:
 800658c:	4801      	ldr	r0, [pc, #4]	; (8006594 <__malloc_unlock+0x8>)
 800658e:	f7ff bb18 	b.w	8005bc2 <__retarget_lock_release_recursive>
 8006592:	bf00      	nop
 8006594:	200001d8 	.word	0x200001d8

08006598 <_read_r>:
 8006598:	b538      	push	{r3, r4, r5, lr}
 800659a:	4d07      	ldr	r5, [pc, #28]	; (80065b8 <_read_r+0x20>)
 800659c:	4604      	mov	r4, r0
 800659e:	4608      	mov	r0, r1
 80065a0:	4611      	mov	r1, r2
 80065a2:	2200      	movs	r2, #0
 80065a4:	602a      	str	r2, [r5, #0]
 80065a6:	461a      	mov	r2, r3
 80065a8:	f7fa fb92 	bl	8000cd0 <_read>
 80065ac:	1c43      	adds	r3, r0, #1
 80065ae:	d102      	bne.n	80065b6 <_read_r+0x1e>
 80065b0:	682b      	ldr	r3, [r5, #0]
 80065b2:	b103      	cbz	r3, 80065b6 <_read_r+0x1e>
 80065b4:	6023      	str	r3, [r4, #0]
 80065b6:	bd38      	pop	{r3, r4, r5, pc}
 80065b8:	200001e4 	.word	0x200001e4

080065bc <_init>:
 80065bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065be:	bf00      	nop
 80065c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065c2:	bc08      	pop	{r3}
 80065c4:	469e      	mov	lr, r3
 80065c6:	4770      	bx	lr

080065c8 <_fini>:
 80065c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065ca:	bf00      	nop
 80065cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065ce:	bc08      	pop	{r3}
 80065d0:	469e      	mov	lr, r3
 80065d2:	4770      	bx	lr
