
Input_Capture.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000063b4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  08006564  08006564  00016564  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800666c  0800666c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800666c  0800666c  0001666c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006674  08006674  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006674  08006674  00016674  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006678  08006678  00016678  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800667c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000174  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001e4  200001e4  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010158  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002507  00000000  00000000  000301f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000df0  00000000  00000000  00032700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ce8  00000000  00000000  000334f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024d07  00000000  00000000  000341d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010bf7  00000000  00000000  00058edf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000db9d7  00000000  00000000  00069ad6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001454ad  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004104  00000000  00000000  00145500  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800654c 	.word	0x0800654c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	0800654c 	.word	0x0800654c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800059a:	2300      	movs	r3, #0
 800059c:	607b      	str	r3, [r7, #4]
 800059e:	4b0c      	ldr	r3, [pc, #48]	; (80005d0 <MX_DMA_Init+0x3c>)
 80005a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a2:	4a0b      	ldr	r2, [pc, #44]	; (80005d0 <MX_DMA_Init+0x3c>)
 80005a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80005a8:	6313      	str	r3, [r2, #48]	; 0x30
 80005aa:	4b09      	ldr	r3, [pc, #36]	; (80005d0 <MX_DMA_Init+0x3c>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80005b2:	607b      	str	r3, [r7, #4]
 80005b4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80005b6:	2200      	movs	r2, #0
 80005b8:	2100      	movs	r1, #0
 80005ba:	200f      	movs	r0, #15
 80005bc:	f000 ffc7 	bl	800154e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80005c0:	200f      	movs	r0, #15
 80005c2:	f000 ffe0 	bl	8001586 <HAL_NVIC_EnableIRQ>

}
 80005c6:	bf00      	nop
 80005c8:	3708      	adds	r7, #8
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	40023800 	.word	0x40023800

080005d4 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b08c      	sub	sp, #48	; 0x30
 80005d8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005da:	f107 031c 	add.w	r3, r7, #28
 80005de:	2200      	movs	r2, #0
 80005e0:	601a      	str	r2, [r3, #0]
 80005e2:	605a      	str	r2, [r3, #4]
 80005e4:	609a      	str	r2, [r3, #8]
 80005e6:	60da      	str	r2, [r3, #12]
 80005e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ea:	2300      	movs	r3, #0
 80005ec:	61bb      	str	r3, [r7, #24]
 80005ee:	4b7c      	ldr	r3, [pc, #496]	; (80007e0 <MX_GPIO_Init+0x20c>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f2:	4a7b      	ldr	r2, [pc, #492]	; (80007e0 <MX_GPIO_Init+0x20c>)
 80005f4:	f043 0304 	orr.w	r3, r3, #4
 80005f8:	6313      	str	r3, [r2, #48]	; 0x30
 80005fa:	4b79      	ldr	r3, [pc, #484]	; (80007e0 <MX_GPIO_Init+0x20c>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	f003 0304 	and.w	r3, r3, #4
 8000602:	61bb      	str	r3, [r7, #24]
 8000604:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000606:	2300      	movs	r3, #0
 8000608:	617b      	str	r3, [r7, #20]
 800060a:	4b75      	ldr	r3, [pc, #468]	; (80007e0 <MX_GPIO_Init+0x20c>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060e:	4a74      	ldr	r2, [pc, #464]	; (80007e0 <MX_GPIO_Init+0x20c>)
 8000610:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000614:	6313      	str	r3, [r2, #48]	; 0x30
 8000616:	4b72      	ldr	r3, [pc, #456]	; (80007e0 <MX_GPIO_Init+0x20c>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800061e:	617b      	str	r3, [r7, #20]
 8000620:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000622:	2300      	movs	r3, #0
 8000624:	613b      	str	r3, [r7, #16]
 8000626:	4b6e      	ldr	r3, [pc, #440]	; (80007e0 <MX_GPIO_Init+0x20c>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062a:	4a6d      	ldr	r2, [pc, #436]	; (80007e0 <MX_GPIO_Init+0x20c>)
 800062c:	f043 0301 	orr.w	r3, r3, #1
 8000630:	6313      	str	r3, [r2, #48]	; 0x30
 8000632:	4b6b      	ldr	r3, [pc, #428]	; (80007e0 <MX_GPIO_Init+0x20c>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000636:	f003 0301 	and.w	r3, r3, #1
 800063a:	613b      	str	r3, [r7, #16]
 800063c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800063e:	2300      	movs	r3, #0
 8000640:	60fb      	str	r3, [r7, #12]
 8000642:	4b67      	ldr	r3, [pc, #412]	; (80007e0 <MX_GPIO_Init+0x20c>)
 8000644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000646:	4a66      	ldr	r2, [pc, #408]	; (80007e0 <MX_GPIO_Init+0x20c>)
 8000648:	f043 0302 	orr.w	r3, r3, #2
 800064c:	6313      	str	r3, [r2, #48]	; 0x30
 800064e:	4b64      	ldr	r3, [pc, #400]	; (80007e0 <MX_GPIO_Init+0x20c>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000652:	f003 0302 	and.w	r3, r3, #2
 8000656:	60fb      	str	r3, [r7, #12]
 8000658:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800065a:	2300      	movs	r3, #0
 800065c:	60bb      	str	r3, [r7, #8]
 800065e:	4b60      	ldr	r3, [pc, #384]	; (80007e0 <MX_GPIO_Init+0x20c>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000662:	4a5f      	ldr	r2, [pc, #380]	; (80007e0 <MX_GPIO_Init+0x20c>)
 8000664:	f043 0308 	orr.w	r3, r3, #8
 8000668:	6313      	str	r3, [r2, #48]	; 0x30
 800066a:	4b5d      	ldr	r3, [pc, #372]	; (80007e0 <MX_GPIO_Init+0x20c>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066e:	f003 0308 	and.w	r3, r3, #8
 8000672:	60bb      	str	r3, [r7, #8]
 8000674:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000676:	2300      	movs	r3, #0
 8000678:	607b      	str	r3, [r7, #4]
 800067a:	4b59      	ldr	r3, [pc, #356]	; (80007e0 <MX_GPIO_Init+0x20c>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067e:	4a58      	ldr	r2, [pc, #352]	; (80007e0 <MX_GPIO_Init+0x20c>)
 8000680:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000684:	6313      	str	r3, [r2, #48]	; 0x30
 8000686:	4b56      	ldr	r3, [pc, #344]	; (80007e0 <MX_GPIO_Init+0x20c>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800068e:	607b      	str	r3, [r7, #4]
 8000690:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|TRIGGER_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000692:	2200      	movs	r2, #0
 8000694:	f244 01c1 	movw	r1, #16577	; 0x40c1
 8000698:	4852      	ldr	r0, [pc, #328]	; (80007e4 <MX_GPIO_Init+0x210>)
 800069a:	f001 fd3d 	bl	8002118 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800069e:	2200      	movs	r2, #0
 80006a0:	2140      	movs	r1, #64	; 0x40
 80006a2:	4851      	ldr	r0, [pc, #324]	; (80007e8 <MX_GPIO_Init+0x214>)
 80006a4:	f001 fd38 	bl	8002118 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80006a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006ae:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80006b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b4:	2300      	movs	r3, #0
 80006b6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80006b8:	f107 031c 	add.w	r3, r7, #28
 80006bc:	4619      	mov	r1, r3
 80006be:	484b      	ldr	r0, [pc, #300]	; (80007ec <MX_GPIO_Init+0x218>)
 80006c0:	f001 fb7e 	bl	8001dc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80006c4:	2332      	movs	r3, #50	; 0x32
 80006c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006c8:	2302      	movs	r3, #2
 80006ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006cc:	2300      	movs	r3, #0
 80006ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006d0:	2303      	movs	r3, #3
 80006d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006d4:	230b      	movs	r3, #11
 80006d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006d8:	f107 031c 	add.w	r3, r7, #28
 80006dc:	4619      	mov	r1, r3
 80006de:	4843      	ldr	r0, [pc, #268]	; (80007ec <MX_GPIO_Init+0x218>)
 80006e0:	f001 fb6e 	bl	8001dc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80006e4:	2386      	movs	r3, #134	; 0x86
 80006e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006e8:	2302      	movs	r3, #2
 80006ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ec:	2300      	movs	r3, #0
 80006ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006f0:	2303      	movs	r3, #3
 80006f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006f4:	230b      	movs	r3, #11
 80006f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f8:	f107 031c 	add.w	r3, r7, #28
 80006fc:	4619      	mov	r1, r3
 80006fe:	483c      	ldr	r0, [pc, #240]	; (80007f0 <MX_GPIO_Init+0x21c>)
 8000700:	f001 fb5e 	bl	8001dc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|TRIGGER_Pin|LD2_Pin;
 8000704:	f244 03c1 	movw	r3, #16577	; 0x40c1
 8000708:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800070a:	2301      	movs	r3, #1
 800070c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070e:	2300      	movs	r3, #0
 8000710:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000712:	2300      	movs	r3, #0
 8000714:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000716:	f107 031c 	add.w	r3, r7, #28
 800071a:	4619      	mov	r1, r3
 800071c:	4831      	ldr	r0, [pc, #196]	; (80007e4 <MX_GPIO_Init+0x210>)
 800071e:	f001 fb4f 	bl	8001dc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000722:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000726:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000728:	2302      	movs	r3, #2
 800072a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072c:	2300      	movs	r3, #0
 800072e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000730:	2303      	movs	r3, #3
 8000732:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000734:	230b      	movs	r3, #11
 8000736:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000738:	f107 031c 	add.w	r3, r7, #28
 800073c:	4619      	mov	r1, r3
 800073e:	4829      	ldr	r0, [pc, #164]	; (80007e4 <MX_GPIO_Init+0x210>)
 8000740:	f001 fb3e 	bl	8001dc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000744:	2340      	movs	r3, #64	; 0x40
 8000746:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000748:	2301      	movs	r3, #1
 800074a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074c:	2300      	movs	r3, #0
 800074e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000750:	2300      	movs	r3, #0
 8000752:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000754:	f107 031c 	add.w	r3, r7, #28
 8000758:	4619      	mov	r1, r3
 800075a:	4823      	ldr	r0, [pc, #140]	; (80007e8 <MX_GPIO_Init+0x214>)
 800075c:	f001 fb30 	bl	8001dc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000760:	2380      	movs	r3, #128	; 0x80
 8000762:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000764:	2300      	movs	r3, #0
 8000766:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000768:	2300      	movs	r3, #0
 800076a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800076c:	f107 031c 	add.w	r3, r7, #28
 8000770:	4619      	mov	r1, r3
 8000772:	481d      	ldr	r0, [pc, #116]	; (80007e8 <MX_GPIO_Init+0x214>)
 8000774:	f001 fb24 	bl	8001dc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000778:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800077c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800077e:	2302      	movs	r3, #2
 8000780:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000782:	2300      	movs	r3, #0
 8000784:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000786:	2303      	movs	r3, #3
 8000788:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800078a:	230a      	movs	r3, #10
 800078c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800078e:	f107 031c 	add.w	r3, r7, #28
 8000792:	4619      	mov	r1, r3
 8000794:	4816      	ldr	r0, [pc, #88]	; (80007f0 <MX_GPIO_Init+0x21c>)
 8000796:	f001 fb13 	bl	8001dc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800079a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800079e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007a0:	2300      	movs	r3, #0
 80007a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a4:	2300      	movs	r3, #0
 80007a6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80007a8:	f107 031c 	add.w	r3, r7, #28
 80007ac:	4619      	mov	r1, r3
 80007ae:	4810      	ldr	r0, [pc, #64]	; (80007f0 <MX_GPIO_Init+0x21c>)
 80007b0:	f001 fb06 	bl	8001dc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80007b4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80007b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ba:	2302      	movs	r3, #2
 80007bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007be:	2300      	movs	r3, #0
 80007c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007c2:	2303      	movs	r3, #3
 80007c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007c6:	230b      	movs	r3, #11
 80007c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007ca:	f107 031c 	add.w	r3, r7, #28
 80007ce:	4619      	mov	r1, r3
 80007d0:	4805      	ldr	r0, [pc, #20]	; (80007e8 <MX_GPIO_Init+0x214>)
 80007d2:	f001 faf5 	bl	8001dc0 <HAL_GPIO_Init>

}
 80007d6:	bf00      	nop
 80007d8:	3730      	adds	r7, #48	; 0x30
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	40023800 	.word	0x40023800
 80007e4:	40020400 	.word	0x40020400
 80007e8:	40021800 	.word	0x40021800
 80007ec:	40020800 	.word	0x40020800
 80007f0:	40020000 	.word	0x40020000

080007f4 <_write>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
int _write(int file, char* p, int len)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b084      	sub	sp, #16
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	60f8      	str	r0, [r7, #12]
 80007fc:	60b9      	str	r1, [r7, #8]
 80007fe:	607a      	str	r2, [r7, #4]
	if(HAL_UART_Transmit(&huart3, (uint8_t *)p, len, 10) == HAL_OK) return len;
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	b29a      	uxth	r2, r3
 8000804:	230a      	movs	r3, #10
 8000806:	68b9      	ldr	r1, [r7, #8]
 8000808:	4806      	ldr	r0, [pc, #24]	; (8000824 <_write+0x30>)
 800080a:	f003 fea2 	bl	8004552 <HAL_UART_Transmit>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d101      	bne.n	8000818 <_write+0x24>
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	e000      	b.n	800081a <_write+0x26>
	else return 0;
 8000818:	2300      	movs	r3, #0
}
 800081a:	4618      	mov	r0, r3
 800081c:	3710      	adds	r7, #16
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	2000018c 	.word	0x2000018c

08000828 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000828:	b590      	push	{r4, r7, lr}
 800082a:	b085      	sub	sp, #20
 800082c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800082e:	f000 fd1d 	bl	800126c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000832:	f000 f86b 	bl	800090c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000836:	f7ff fecd 	bl	80005d4 <MX_GPIO_Init>
  MX_DMA_Init();
 800083a:	f7ff feab 	bl	8000594 <MX_DMA_Init>
  MX_TIM3_Init();
 800083e:	f000 faa9 	bl	8000d94 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000842:	f000 fb17 	bl	8000e74 <MX_TIM4_Init>
  MX_USART3_UART_Init();
 8000846:	f000 fc6d 	bl	8001124 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  DWT_Delay_Init();
 800084a:	f000 f959 	bl	8000b00 <DWT_Delay_Init>
  HAL_TIM_Base_Start_IT(&htim3);
 800084e:	4826      	ldr	r0, [pc, #152]	; (80008e8 <main+0xc0>)
 8000850:	f002 f9b4 	bl	8002bbc <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);	// Sonar
 8000854:	4825      	ldr	r0, [pc, #148]	; (80008ec <main+0xc4>)
 8000856:	f002 f9b1 	bl	8002bbc <HAL_TIM_Base_Start_IT>
  //HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);

  HAL_TIM_OC_Start_IT(&htim4, TIM_CHANNEL_1);		// Sonar
 800085a:	2100      	movs	r1, #0
 800085c:	4823      	ldr	r0, [pc, #140]	; (80008ec <main+0xc4>)
 800085e:	f002 fa77 	bl	8002d50 <HAL_TIM_OC_Start_IT>

  //htim3.State = HAL_TIM_STATE_READY;
  HAL_TIM_IC_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t *)capture1, 2);
 8000862:	2302      	movs	r3, #2
 8000864:	4a22      	ldr	r2, [pc, #136]	; (80008f0 <main+0xc8>)
 8000866:	2100      	movs	r1, #0
 8000868:	481f      	ldr	r0, [pc, #124]	; (80008e8 <main+0xc0>)
 800086a:	f002 fbe1 	bl	8003030 <HAL_TIM_IC_Start_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf("start this program \r\n");
 800086e:	4821      	ldr	r0, [pc, #132]	; (80008f4 <main+0xcc>)
 8000870:	f004 feee 	bl	8005650 <puts>
  HAL_Delay(1000);
 8000874:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000878:	f000 fd6a 	bl	8001350 <HAL_Delay>
  while (1)
  {
	 //if(ch1done == true)
	 //{
		 DMAwidth = capture1[0] - capture1[1];
 800087c:	4b1c      	ldr	r3, [pc, #112]	; (80008f0 <main+0xc8>)
 800087e:	881b      	ldrh	r3, [r3, #0]
 8000880:	b29a      	uxth	r2, r3
 8000882:	4b1b      	ldr	r3, [pc, #108]	; (80008f0 <main+0xc8>)
 8000884:	885b      	ldrh	r3, [r3, #2]
 8000886:	b29b      	uxth	r3, r3
 8000888:	1ad3      	subs	r3, r2, r3
 800088a:	b29a      	uxth	r2, r3
 800088c:	4b1a      	ldr	r3, [pc, #104]	; (80008f8 <main+0xd0>)
 800088e:	801a      	strh	r2, [r3, #0]
		 DMAdistance = DMAwidth/58;
 8000890:	4b19      	ldr	r3, [pc, #100]	; (80008f8 <main+0xd0>)
 8000892:	881b      	ldrh	r3, [r3, #0]
 8000894:	4a19      	ldr	r2, [pc, #100]	; (80008fc <main+0xd4>)
 8000896:	fba2 2303 	umull	r2, r3, r2, r3
 800089a:	095b      	lsrs	r3, r3, #5
 800089c:	b29a      	uxth	r2, r3
 800089e:	4b18      	ldr	r3, [pc, #96]	; (8000900 <main+0xd8>)
 80008a0:	801a      	strh	r2, [r3, #0]
		 if(DMAdistance > 400) DMAdistance = 400;
 80008a2:	4b17      	ldr	r3, [pc, #92]	; (8000900 <main+0xd8>)
 80008a4:	881b      	ldrh	r3, [r3, #0]
 80008a6:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80008aa:	d903      	bls.n	80008b4 <main+0x8c>
 80008ac:	4b14      	ldr	r3, [pc, #80]	; (8000900 <main+0xd8>)
 80008ae:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80008b2:	801a      	strh	r2, [r3, #0]
		 printf("%lx %x %5d-%5d DMAWidth : %5d => DMAdistance : %4d cm\r\n",TIM3->CCER & TIM_CCER_CC1P, 0x01 << 1 ,capture1[0], capture1[1], DMAwidth, DMAdistance);
 80008b4:	4b13      	ldr	r3, [pc, #76]	; (8000904 <main+0xdc>)
 80008b6:	6a1b      	ldr	r3, [r3, #32]
 80008b8:	f003 0102 	and.w	r1, r3, #2
 80008bc:	4b0c      	ldr	r3, [pc, #48]	; (80008f0 <main+0xc8>)
 80008be:	881b      	ldrh	r3, [r3, #0]
 80008c0:	b29b      	uxth	r3, r3
 80008c2:	461c      	mov	r4, r3
 80008c4:	4b0a      	ldr	r3, [pc, #40]	; (80008f0 <main+0xc8>)
 80008c6:	885b      	ldrh	r3, [r3, #2]
 80008c8:	b29b      	uxth	r3, r3
 80008ca:	461a      	mov	r2, r3
 80008cc:	4b0a      	ldr	r3, [pc, #40]	; (80008f8 <main+0xd0>)
 80008ce:	881b      	ldrh	r3, [r3, #0]
 80008d0:	4618      	mov	r0, r3
 80008d2:	4b0b      	ldr	r3, [pc, #44]	; (8000900 <main+0xd8>)
 80008d4:	881b      	ldrh	r3, [r3, #0]
 80008d6:	9302      	str	r3, [sp, #8]
 80008d8:	9001      	str	r0, [sp, #4]
 80008da:	9200      	str	r2, [sp, #0]
 80008dc:	4623      	mov	r3, r4
 80008de:	2202      	movs	r2, #2
 80008e0:	4809      	ldr	r0, [pc, #36]	; (8000908 <main+0xe0>)
 80008e2:	f004 fe2f 	bl	8005544 <iprintf>
		 DMAwidth = capture1[0] - capture1[1];
 80008e6:	e7c9      	b.n	800087c <main+0x54>
 80008e8:	2000009c 	.word	0x2000009c
 80008ec:	200000e4 	.word	0x200000e4
 80008f0:	2000008c 	.word	0x2000008c
 80008f4:	08006564 	.word	0x08006564
 80008f8:	20000090 	.word	0x20000090
 80008fc:	8d3dcb09 	.word	0x8d3dcb09
 8000900:	20000092 	.word	0x20000092
 8000904:	40000400 	.word	0x40000400
 8000908:	0800657c 	.word	0x0800657c

0800090c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b094      	sub	sp, #80	; 0x50
 8000910:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000912:	f107 0320 	add.w	r3, r7, #32
 8000916:	2230      	movs	r2, #48	; 0x30
 8000918:	2100      	movs	r1, #0
 800091a:	4618      	mov	r0, r3
 800091c:	f004 fe0a 	bl	8005534 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000920:	f107 030c 	add.w	r3, r7, #12
 8000924:	2200      	movs	r2, #0
 8000926:	601a      	str	r2, [r3, #0]
 8000928:	605a      	str	r2, [r3, #4]
 800092a:	609a      	str	r2, [r3, #8]
 800092c:	60da      	str	r2, [r3, #12]
 800092e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000930:	2300      	movs	r3, #0
 8000932:	60bb      	str	r3, [r7, #8]
 8000934:	4b2b      	ldr	r3, [pc, #172]	; (80009e4 <SystemClock_Config+0xd8>)
 8000936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000938:	4a2a      	ldr	r2, [pc, #168]	; (80009e4 <SystemClock_Config+0xd8>)
 800093a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800093e:	6413      	str	r3, [r2, #64]	; 0x40
 8000940:	4b28      	ldr	r3, [pc, #160]	; (80009e4 <SystemClock_Config+0xd8>)
 8000942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000944:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000948:	60bb      	str	r3, [r7, #8]
 800094a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800094c:	2300      	movs	r3, #0
 800094e:	607b      	str	r3, [r7, #4]
 8000950:	4b25      	ldr	r3, [pc, #148]	; (80009e8 <SystemClock_Config+0xdc>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a24      	ldr	r2, [pc, #144]	; (80009e8 <SystemClock_Config+0xdc>)
 8000956:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800095a:	6013      	str	r3, [r2, #0]
 800095c:	4b22      	ldr	r3, [pc, #136]	; (80009e8 <SystemClock_Config+0xdc>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000964:	607b      	str	r3, [r7, #4]
 8000966:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000968:	2301      	movs	r3, #1
 800096a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800096c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000970:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000972:	2302      	movs	r3, #2
 8000974:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000976:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800097a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800097c:	2304      	movs	r3, #4
 800097e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000980:	23b4      	movs	r3, #180	; 0xb4
 8000982:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000984:	2302      	movs	r3, #2
 8000986:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000988:	2304      	movs	r3, #4
 800098a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800098c:	f107 0320 	add.w	r3, r7, #32
 8000990:	4618      	mov	r0, r3
 8000992:	f001 fc2b 	bl	80021ec <HAL_RCC_OscConfig>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800099c:	f000 f8e0 	bl	8000b60 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80009a0:	f001 fbd4 	bl	800214c <HAL_PWREx_EnableOverDrive>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80009aa:	f000 f8d9 	bl	8000b60 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009ae:	230f      	movs	r3, #15
 80009b0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009b2:	2302      	movs	r3, #2
 80009b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009b6:	2300      	movs	r3, #0
 80009b8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80009ba:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80009be:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80009c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009c4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80009c6:	f107 030c 	add.w	r3, r7, #12
 80009ca:	2105      	movs	r1, #5
 80009cc:	4618      	mov	r0, r3
 80009ce:	f001 fe85 	bl	80026dc <HAL_RCC_ClockConfig>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80009d8:	f000 f8c2 	bl	8000b60 <Error_Handler>
  }
}
 80009dc:	bf00      	nop
 80009de:	3750      	adds	r7, #80	; 0x50
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	40023800 	.word	0x40023800
 80009e8:	40007000 	.word	0x40007000

080009ec <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
/* DMA */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b083      	sub	sp, #12
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM4)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a0a      	ldr	r2, [pc, #40]	; (8000a24 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d10b      	bne.n	8000a16 <HAL_TIM_PeriodElapsedCallback+0x2a>
	{
		GPIOB->ODR |= 0x01 << 6;  // PB 6 SET
 80009fe:	4b0a      	ldr	r3, [pc, #40]	; (8000a28 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000a00:	695b      	ldr	r3, [r3, #20]
 8000a02:	4a09      	ldr	r2, [pc, #36]	; (8000a28 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000a04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a08:	6153      	str	r3, [r2, #20]
		GPIOB->ODR |= LD1_Pin;
 8000a0a:	4b07      	ldr	r3, [pc, #28]	; (8000a28 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000a0c:	695b      	ldr	r3, [r3, #20]
 8000a0e:	4a06      	ldr	r2, [pc, #24]	; (8000a28 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000a10:	f043 0301 	orr.w	r3, r3, #1
 8000a14:	6153      	str	r3, [r2, #20]
		//TriggerEnable();
	}

}
 8000a16:	bf00      	nop
 8000a18:	370c      	adds	r7, #12
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	40000800 	.word	0x40000800
 8000a28:	40020400 	.word	0x40020400

08000a2c <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b083      	sub	sp, #12
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM4)	// Pulse 7
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a0a      	ldr	r2, [pc, #40]	; (8000a64 <HAL_TIM_OC_DelayElapsedCallback+0x38>)
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d10b      	bne.n	8000a56 <HAL_TIM_OC_DelayElapsedCallback+0x2a>
	{
		GPIOB->ODR &= ~(0x01 << 6);	// PB 6	RESET, Pulse
 8000a3e:	4b0a      	ldr	r3, [pc, #40]	; (8000a68 <HAL_TIM_OC_DelayElapsedCallback+0x3c>)
 8000a40:	695b      	ldr	r3, [r3, #20]
 8000a42:	4a09      	ldr	r2, [pc, #36]	; (8000a68 <HAL_TIM_OC_DelayElapsedCallback+0x3c>)
 8000a44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000a48:	6153      	str	r3, [r2, #20]
		GPIOB->ODR &= ~LD1_Pin;
 8000a4a:	4b07      	ldr	r3, [pc, #28]	; (8000a68 <HAL_TIM_OC_DelayElapsedCallback+0x3c>)
 8000a4c:	695b      	ldr	r3, [r3, #20]
 8000a4e:	4a06      	ldr	r2, [pc, #24]	; (8000a68 <HAL_TIM_OC_DelayElapsedCallback+0x3c>)
 8000a50:	f023 0301 	bic.w	r3, r3, #1
 8000a54:	6153      	str	r3, [r2, #20]
	}
}
 8000a56:	bf00      	nop
 8000a58:	370c      	adds	r7, #12
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	40000800 	.word	0x40000800
 8000a68:	40020400 	.word	0x40020400

08000a6c <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]

	if(htim->Instance == TIM3 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a1e      	ldr	r2, [pc, #120]	; (8000af4 <HAL_TIM_IC_CaptureCallback+0x88>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d134      	bne.n	8000ae8 <HAL_TIM_IC_CaptureCallback+0x7c>
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	7f1b      	ldrb	r3, [r3, #28]
 8000a82:	2b01      	cmp	r3, #1
 8000a84:	d130      	bne.n	8000ae8 <HAL_TIM_IC_CaptureCallback+0x7c>
	{
		/*   */
		if((TIM3->CCER & TIM_CCER_CC1P) != (0x01 << 1))
 8000a86:	4b1b      	ldr	r3, [pc, #108]	; (8000af4 <HAL_TIM_IC_CaptureCallback+0x88>)
 8000a88:	6a1b      	ldr	r3, [r3, #32]
 8000a8a:	f003 0302 	and.w	r3, r3, #2
 8000a8e:	2b02      	cmp	r3, #2
 8000a90:	d015      	beq.n	8000abe <HAL_TIM_IC_CaptureCallback+0x52>
		{

			TIM3->CCER |= TIM_CCER_CC1P;		// Rising -> Falling (0 -> 1)
 8000a92:	4b18      	ldr	r3, [pc, #96]	; (8000af4 <HAL_TIM_IC_CaptureCallback+0x88>)
 8000a94:	6a1b      	ldr	r3, [r3, #32]
 8000a96:	4a17      	ldr	r2, [pc, #92]	; (8000af4 <HAL_TIM_IC_CaptureCallback+0x88>)
 8000a98:	f043 0302 	orr.w	r3, r3, #2
 8000a9c:	6213      	str	r3, [r2, #32]
			GPIOB->ODR |= LD2_Pin;
 8000a9e:	4b16      	ldr	r3, [pc, #88]	; (8000af8 <HAL_TIM_IC_CaptureCallback+0x8c>)
 8000aa0:	695b      	ldr	r3, [r3, #20]
 8000aa2:	4a15      	ldr	r2, [pc, #84]	; (8000af8 <HAL_TIM_IC_CaptureCallback+0x8c>)
 8000aa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000aa8:	6153      	str	r3, [r2, #20]
			GPIOB->ODR &= ~LD3_Pin;
 8000aaa:	4b13      	ldr	r3, [pc, #76]	; (8000af8 <HAL_TIM_IC_CaptureCallback+0x8c>)
 8000aac:	695b      	ldr	r3, [r3, #20]
 8000aae:	4a12      	ldr	r2, [pc, #72]	; (8000af8 <HAL_TIM_IC_CaptureCallback+0x8c>)
 8000ab0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000ab4:	6153      	str	r3, [r2, #20]
			ch1done = true;
 8000ab6:	4b11      	ldr	r3, [pc, #68]	; (8000afc <HAL_TIM_IC_CaptureCallback+0x90>)
 8000ab8:	2201      	movs	r2, #1
 8000aba:	701a      	strb	r2, [r3, #0]
			ch1done = false;

		}

	}
}
 8000abc:	e014      	b.n	8000ae8 <HAL_TIM_IC_CaptureCallback+0x7c>
			TIM3->CCER &= ~TIM_CCER_CC1P;		// Falling -> Rising	(1 -> 0)
 8000abe:	4b0d      	ldr	r3, [pc, #52]	; (8000af4 <HAL_TIM_IC_CaptureCallback+0x88>)
 8000ac0:	6a1b      	ldr	r3, [r3, #32]
 8000ac2:	4a0c      	ldr	r2, [pc, #48]	; (8000af4 <HAL_TIM_IC_CaptureCallback+0x88>)
 8000ac4:	f023 0302 	bic.w	r3, r3, #2
 8000ac8:	6213      	str	r3, [r2, #32]
			GPIOB->ODR |= LD3_Pin;
 8000aca:	4b0b      	ldr	r3, [pc, #44]	; (8000af8 <HAL_TIM_IC_CaptureCallback+0x8c>)
 8000acc:	695b      	ldr	r3, [r3, #20]
 8000ace:	4a0a      	ldr	r2, [pc, #40]	; (8000af8 <HAL_TIM_IC_CaptureCallback+0x8c>)
 8000ad0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ad4:	6153      	str	r3, [r2, #20]
			GPIOB->ODR &= ~LD2_Pin;
 8000ad6:	4b08      	ldr	r3, [pc, #32]	; (8000af8 <HAL_TIM_IC_CaptureCallback+0x8c>)
 8000ad8:	695b      	ldr	r3, [r3, #20]
 8000ada:	4a07      	ldr	r2, [pc, #28]	; (8000af8 <HAL_TIM_IC_CaptureCallback+0x8c>)
 8000adc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000ae0:	6153      	str	r3, [r2, #20]
			ch1done = false;
 8000ae2:	4b06      	ldr	r3, [pc, #24]	; (8000afc <HAL_TIM_IC_CaptureCallback+0x90>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	701a      	strb	r2, [r3, #0]
}
 8000ae8:	bf00      	nop
 8000aea:	370c      	adds	r7, #12
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr
 8000af4:	40000400 	.word	0x40000400
 8000af8:	40020400 	.word	0x40020400
 8000afc:	20000094 	.word	0x20000094

08000b00 <DWT_Delay_Init>:

uint32_t DWT_Delay_Init(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000b04:	4b14      	ldr	r3, [pc, #80]	; (8000b58 <DWT_Delay_Init+0x58>)
 8000b06:	68db      	ldr	r3, [r3, #12]
 8000b08:	4a13      	ldr	r2, [pc, #76]	; (8000b58 <DWT_Delay_Init+0x58>)
 8000b0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000b0e:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000b10:	4b11      	ldr	r3, [pc, #68]	; (8000b58 <DWT_Delay_Init+0x58>)
 8000b12:	68db      	ldr	r3, [r3, #12]
 8000b14:	4a10      	ldr	r2, [pc, #64]	; (8000b58 <DWT_Delay_Init+0x58>)
 8000b16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000b1a:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000b1c:	4b0f      	ldr	r3, [pc, #60]	; (8000b5c <DWT_Delay_Init+0x5c>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a0e      	ldr	r2, [pc, #56]	; (8000b5c <DWT_Delay_Init+0x5c>)
 8000b22:	f023 0301 	bic.w	r3, r3, #1
 8000b26:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000b28:	4b0c      	ldr	r3, [pc, #48]	; (8000b5c <DWT_Delay_Init+0x5c>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a0b      	ldr	r2, [pc, #44]	; (8000b5c <DWT_Delay_Init+0x5c>)
 8000b2e:	f043 0301 	orr.w	r3, r3, #1
 8000b32:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8000b34:	4b09      	ldr	r3, [pc, #36]	; (8000b5c <DWT_Delay_Init+0x5c>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 8000b3a:	bf00      	nop
     __ASM volatile ("NOP");
 8000b3c:	bf00      	nop
  __ASM volatile ("NOP");
 8000b3e:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 8000b40:	4b06      	ldr	r3, [pc, #24]	; (8000b5c <DWT_Delay_Init+0x5c>)
 8000b42:	685b      	ldr	r3, [r3, #4]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 8000b48:	2300      	movs	r3, #0
 8000b4a:	e000      	b.n	8000b4e <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 8000b4c:	2301      	movs	r3, #1
  }
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr
 8000b58:	e000edf0 	.word	0xe000edf0
 8000b5c:	e0001000 	.word	0xe0001000

08000b60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b64:	b672      	cpsid	i
}
 8000b66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b68:	e7fe      	b.n	8000b68 <Error_Handler+0x8>
	...

08000b6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b72:	2300      	movs	r3, #0
 8000b74:	607b      	str	r3, [r7, #4]
 8000b76:	4b10      	ldr	r3, [pc, #64]	; (8000bb8 <HAL_MspInit+0x4c>)
 8000b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b7a:	4a0f      	ldr	r2, [pc, #60]	; (8000bb8 <HAL_MspInit+0x4c>)
 8000b7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b80:	6453      	str	r3, [r2, #68]	; 0x44
 8000b82:	4b0d      	ldr	r3, [pc, #52]	; (8000bb8 <HAL_MspInit+0x4c>)
 8000b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b8a:	607b      	str	r3, [r7, #4]
 8000b8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	603b      	str	r3, [r7, #0]
 8000b92:	4b09      	ldr	r3, [pc, #36]	; (8000bb8 <HAL_MspInit+0x4c>)
 8000b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b96:	4a08      	ldr	r2, [pc, #32]	; (8000bb8 <HAL_MspInit+0x4c>)
 8000b98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b9c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b9e:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <HAL_MspInit+0x4c>)
 8000ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ba6:	603b      	str	r3, [r7, #0]
 8000ba8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000baa:	bf00      	nop
 8000bac:	370c      	adds	r7, #12
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	40023800 	.word	0x40023800

08000bbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bc0:	e7fe      	b.n	8000bc0 <NMI_Handler+0x4>

08000bc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bc6:	e7fe      	b.n	8000bc6 <HardFault_Handler+0x4>

08000bc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bcc:	e7fe      	b.n	8000bcc <MemManage_Handler+0x4>

08000bce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bd2:	e7fe      	b.n	8000bd2 <BusFault_Handler+0x4>

08000bd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bd8:	e7fe      	b.n	8000bd8 <UsageFault_Handler+0x4>

08000bda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bde:	bf00      	nop
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr

08000be8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bec:	bf00      	nop
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr

08000bf6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bf6:	b480      	push	{r7}
 8000bf8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bfa:	bf00      	nop
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr

08000c04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c08:	f000 fb82 	bl	8001310 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c0c:	bf00      	nop
 8000c0e:	bd80      	pop	{r7, pc}

08000c10 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 8000c14:	4802      	ldr	r0, [pc, #8]	; (8000c20 <DMA1_Stream4_IRQHandler+0x10>)
 8000c16:	f000 fe69 	bl	80018ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8000c1a:	bf00      	nop
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	2000012c 	.word	0x2000012c

08000c24 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000c28:	4802      	ldr	r0, [pc, #8]	; (8000c34 <TIM3_IRQHandler+0x10>)
 8000c2a:	f002 fbab 	bl	8003384 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000c2e:	bf00      	nop
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	2000009c 	.word	0x2000009c

08000c38 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000c3c:	4802      	ldr	r0, [pc, #8]	; (8000c48 <TIM4_IRQHandler+0x10>)
 8000c3e:	f002 fba1 	bl	8003384 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000c42:	bf00      	nop
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	200000e4 	.word	0x200000e4

08000c4c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000c50:	4802      	ldr	r0, [pc, #8]	; (8000c5c <USART3_IRQHandler+0x10>)
 8000c52:	f003 fd11 	bl	8004678 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000c56:	bf00      	nop
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	2000018c 	.word	0x2000018c

08000c60 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b086      	sub	sp, #24
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	60f8      	str	r0, [r7, #12]
 8000c68:	60b9      	str	r1, [r7, #8]
 8000c6a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	617b      	str	r3, [r7, #20]
 8000c70:	e00a      	b.n	8000c88 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c72:	f3af 8000 	nop.w
 8000c76:	4601      	mov	r1, r0
 8000c78:	68bb      	ldr	r3, [r7, #8]
 8000c7a:	1c5a      	adds	r2, r3, #1
 8000c7c:	60ba      	str	r2, [r7, #8]
 8000c7e:	b2ca      	uxtb	r2, r1
 8000c80:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c82:	697b      	ldr	r3, [r7, #20]
 8000c84:	3301      	adds	r3, #1
 8000c86:	617b      	str	r3, [r7, #20]
 8000c88:	697a      	ldr	r2, [r7, #20]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	429a      	cmp	r2, r3
 8000c8e:	dbf0      	blt.n	8000c72 <_read+0x12>
	}

return len;
 8000c90:	687b      	ldr	r3, [r7, #4]
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	3718      	adds	r7, #24
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}

08000c9a <_close>:
	}
	return len;
}

int _close(int file)
{
 8000c9a:	b480      	push	{r7}
 8000c9c:	b083      	sub	sp, #12
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	6078      	str	r0, [r7, #4]
	return -1;
 8000ca2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	370c      	adds	r7, #12
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr

08000cb2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cb2:	b480      	push	{r7}
 8000cb4:	b083      	sub	sp, #12
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	6078      	str	r0, [r7, #4]
 8000cba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cc2:	605a      	str	r2, [r3, #4]
	return 0;
 8000cc4:	2300      	movs	r3, #0
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	370c      	adds	r7, #12
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr

08000cd2 <_isatty>:

int _isatty(int file)
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	b083      	sub	sp, #12
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	6078      	str	r0, [r7, #4]
	return 1;
 8000cda:	2301      	movs	r3, #1
}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	370c      	adds	r7, #12
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr

08000ce8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b085      	sub	sp, #20
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	60f8      	str	r0, [r7, #12]
 8000cf0:	60b9      	str	r1, [r7, #8]
 8000cf2:	607a      	str	r2, [r7, #4]
	return 0;
 8000cf4:	2300      	movs	r3, #0
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	3714      	adds	r7, #20
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
	...

08000d04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b086      	sub	sp, #24
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d0c:	4a14      	ldr	r2, [pc, #80]	; (8000d60 <_sbrk+0x5c>)
 8000d0e:	4b15      	ldr	r3, [pc, #84]	; (8000d64 <_sbrk+0x60>)
 8000d10:	1ad3      	subs	r3, r2, r3
 8000d12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d18:	4b13      	ldr	r3, [pc, #76]	; (8000d68 <_sbrk+0x64>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d102      	bne.n	8000d26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d20:	4b11      	ldr	r3, [pc, #68]	; (8000d68 <_sbrk+0x64>)
 8000d22:	4a12      	ldr	r2, [pc, #72]	; (8000d6c <_sbrk+0x68>)
 8000d24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d26:	4b10      	ldr	r3, [pc, #64]	; (8000d68 <_sbrk+0x64>)
 8000d28:	681a      	ldr	r2, [r3, #0]
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	4413      	add	r3, r2
 8000d2e:	693a      	ldr	r2, [r7, #16]
 8000d30:	429a      	cmp	r2, r3
 8000d32:	d207      	bcs.n	8000d44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d34:	f004 fbd4 	bl	80054e0 <__errno>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	220c      	movs	r2, #12
 8000d3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d42:	e009      	b.n	8000d58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d44:	4b08      	ldr	r3, [pc, #32]	; (8000d68 <_sbrk+0x64>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d4a:	4b07      	ldr	r3, [pc, #28]	; (8000d68 <_sbrk+0x64>)
 8000d4c:	681a      	ldr	r2, [r3, #0]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	4413      	add	r3, r2
 8000d52:	4a05      	ldr	r2, [pc, #20]	; (8000d68 <_sbrk+0x64>)
 8000d54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d56:	68fb      	ldr	r3, [r7, #12]
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	3718      	adds	r7, #24
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	20030000 	.word	0x20030000
 8000d64:	00000400 	.word	0x00000400
 8000d68:	20000098 	.word	0x20000098
 8000d6c:	200001e8 	.word	0x200001e8

08000d70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d74:	4b06      	ldr	r3, [pc, #24]	; (8000d90 <SystemInit+0x20>)
 8000d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d7a:	4a05      	ldr	r2, [pc, #20]	; (8000d90 <SystemInit+0x20>)
 8000d7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d84:	bf00      	nop
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	e000ed00 	.word	0xe000ed00

08000d94 <MX_TIM3_Init>:
TIM_HandleTypeDef htim4;
DMA_HandleTypeDef hdma_tim3_ch1_trig;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b08a      	sub	sp, #40	; 0x28
 8000d98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d9a:	f107 0318 	add.w	r3, r7, #24
 8000d9e:	2200      	movs	r2, #0
 8000da0:	601a      	str	r2, [r3, #0]
 8000da2:	605a      	str	r2, [r3, #4]
 8000da4:	609a      	str	r2, [r3, #8]
 8000da6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000da8:	f107 0310 	add.w	r3, r7, #16
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000db2:	463b      	mov	r3, r7
 8000db4:	2200      	movs	r2, #0
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	605a      	str	r2, [r3, #4]
 8000dba:	609a      	str	r2, [r3, #8]
 8000dbc:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000dbe:	4b2b      	ldr	r3, [pc, #172]	; (8000e6c <MX_TIM3_Init+0xd8>)
 8000dc0:	4a2b      	ldr	r2, [pc, #172]	; (8000e70 <MX_TIM3_Init+0xdc>)
 8000dc2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 90-1;
 8000dc4:	4b29      	ldr	r3, [pc, #164]	; (8000e6c <MX_TIM3_Init+0xd8>)
 8000dc6:	2259      	movs	r2, #89	; 0x59
 8000dc8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dca:	4b28      	ldr	r3, [pc, #160]	; (8000e6c <MX_TIM3_Init+0xd8>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000dd0:	4b26      	ldr	r3, [pc, #152]	; (8000e6c <MX_TIM3_Init+0xd8>)
 8000dd2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000dd6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dd8:	4b24      	ldr	r3, [pc, #144]	; (8000e6c <MX_TIM3_Init+0xd8>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000dde:	4b23      	ldr	r3, [pc, #140]	; (8000e6c <MX_TIM3_Init+0xd8>)
 8000de0:	2280      	movs	r2, #128	; 0x80
 8000de2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000de4:	4821      	ldr	r0, [pc, #132]	; (8000e6c <MX_TIM3_Init+0xd8>)
 8000de6:	f001 fe99 	bl	8002b1c <HAL_TIM_Base_Init>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8000df0:	f7ff feb6 	bl	8000b60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000df4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000df8:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000dfa:	f107 0318 	add.w	r3, r7, #24
 8000dfe:	4619      	mov	r1, r3
 8000e00:	481a      	ldr	r0, [pc, #104]	; (8000e6c <MX_TIM3_Init+0xd8>)
 8000e02:	f002 fcbf 	bl	8003784 <HAL_TIM_ConfigClockSource>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000e0c:	f7ff fea8 	bl	8000b60 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8000e10:	4816      	ldr	r0, [pc, #88]	; (8000e6c <MX_TIM3_Init+0xd8>)
 8000e12:	f002 f8b3 	bl	8002f7c <HAL_TIM_IC_Init>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000e1c:	f7ff fea0 	bl	8000b60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e20:	2300      	movs	r3, #0
 8000e22:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e24:	2300      	movs	r3, #0
 8000e26:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e28:	f107 0310 	add.w	r3, r7, #16
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	480f      	ldr	r0, [pc, #60]	; (8000e6c <MX_TIM3_Init+0xd8>)
 8000e30:	f003 fab2 	bl	8004398 <HAL_TIMEx_MasterConfigSynchronization>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 8000e3a:	f7ff fe91 	bl	8000b60 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000e42:	2301      	movs	r3, #1
 8000e44:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000e46:	2300      	movs	r3, #0
 8000e48:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 8000e4a:	230f      	movs	r3, #15
 8000e4c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000e4e:	463b      	mov	r3, r7
 8000e50:	2200      	movs	r2, #0
 8000e52:	4619      	mov	r1, r3
 8000e54:	4805      	ldr	r0, [pc, #20]	; (8000e6c <MX_TIM3_Init+0xd8>)
 8000e56:	f002 fbf9 	bl	800364c <HAL_TIM_IC_ConfigChannel>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8000e60:	f7ff fe7e 	bl	8000b60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000e64:	bf00      	nop
 8000e66:	3728      	adds	r7, #40	; 0x28
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	2000009c 	.word	0x2000009c
 8000e70:	40000400 	.word	0x40000400

08000e74 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b08e      	sub	sp, #56	; 0x38
 8000e78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e7e:	2200      	movs	r2, #0
 8000e80:	601a      	str	r2, [r3, #0]
 8000e82:	605a      	str	r2, [r3, #4]
 8000e84:	609a      	str	r2, [r3, #8]
 8000e86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e88:	f107 0320 	add.w	r3, r7, #32
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	601a      	str	r2, [r3, #0]
 8000e90:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e92:	1d3b      	adds	r3, r7, #4
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	605a      	str	r2, [r3, #4]
 8000e9a:	609a      	str	r2, [r3, #8]
 8000e9c:	60da      	str	r2, [r3, #12]
 8000e9e:	611a      	str	r2, [r3, #16]
 8000ea0:	615a      	str	r2, [r3, #20]
 8000ea2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000ea4:	4b2c      	ldr	r3, [pc, #176]	; (8000f58 <MX_TIM4_Init+0xe4>)
 8000ea6:	4a2d      	ldr	r2, [pc, #180]	; (8000f5c <MX_TIM4_Init+0xe8>)
 8000ea8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 150-1;
 8000eaa:	4b2b      	ldr	r3, [pc, #172]	; (8000f58 <MX_TIM4_Init+0xe4>)
 8000eac:	2295      	movs	r2, #149	; 0x95
 8000eae:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eb0:	4b29      	ldr	r3, [pc, #164]	; (8000f58 <MX_TIM4_Init+0xe4>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 60000-1;
 8000eb6:	4b28      	ldr	r3, [pc, #160]	; (8000f58 <MX_TIM4_Init+0xe4>)
 8000eb8:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8000ebc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ebe:	4b26      	ldr	r3, [pc, #152]	; (8000f58 <MX_TIM4_Init+0xe4>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ec4:	4b24      	ldr	r3, [pc, #144]	; (8000f58 <MX_TIM4_Init+0xe4>)
 8000ec6:	2280      	movs	r2, #128	; 0x80
 8000ec8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000eca:	4823      	ldr	r0, [pc, #140]	; (8000f58 <MX_TIM4_Init+0xe4>)
 8000ecc:	f001 fe26 	bl	8002b1c <HAL_TIM_Base_Init>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000ed6:	f7ff fe43 	bl	8000b60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000eda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ede:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000ee0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	481c      	ldr	r0, [pc, #112]	; (8000f58 <MX_TIM4_Init+0xe4>)
 8000ee8:	f002 fc4c 	bl	8003784 <HAL_TIM_ConfigClockSource>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8000ef2:	f7ff fe35 	bl	8000b60 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8000ef6:	4818      	ldr	r0, [pc, #96]	; (8000f58 <MX_TIM4_Init+0xe4>)
 8000ef8:	f001 fed0 	bl	8002c9c <HAL_TIM_OC_Init>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8000f02:	f7ff fe2d 	bl	8000b60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f06:	2300      	movs	r3, #0
 8000f08:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000f0e:	f107 0320 	add.w	r3, r7, #32
 8000f12:	4619      	mov	r1, r3
 8000f14:	4810      	ldr	r0, [pc, #64]	; (8000f58 <MX_TIM4_Init+0xe4>)
 8000f16:	f003 fa3f 	bl	8004398 <HAL_TIMEx_MasterConfigSynchronization>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000f20:	f7ff fe1e 	bl	8000b60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000f24:	2300      	movs	r3, #0
 8000f26:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 7;
 8000f28:	2307      	movs	r3, #7
 8000f2a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f30:	2300      	movs	r3, #0
 8000f32:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f34:	1d3b      	adds	r3, r7, #4
 8000f36:	2200      	movs	r2, #0
 8000f38:	4619      	mov	r1, r3
 8000f3a:	4807      	ldr	r0, [pc, #28]	; (8000f58 <MX_TIM4_Init+0xe4>)
 8000f3c:	f002 fb2a 	bl	8003594 <HAL_TIM_OC_ConfigChannel>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8000f46:	f7ff fe0b 	bl	8000b60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000f4a:	4803      	ldr	r0, [pc, #12]	; (8000f58 <MX_TIM4_Init+0xe4>)
 8000f4c:	f000 f8b0 	bl	80010b0 <HAL_TIM_MspPostInit>

}
 8000f50:	bf00      	nop
 8000f52:	3738      	adds	r7, #56	; 0x38
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	200000e4 	.word	0x200000e4
 8000f5c:	40000800 	.word	0x40000800

08000f60 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b08a      	sub	sp, #40	; 0x28
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f68:	f107 0314 	add.w	r3, r7, #20
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	605a      	str	r2, [r3, #4]
 8000f72:	609a      	str	r2, [r3, #8]
 8000f74:	60da      	str	r2, [r3, #12]
 8000f76:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM3)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a46      	ldr	r2, [pc, #280]	; (8001098 <HAL_TIM_Base_MspInit+0x138>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d16b      	bne.n	800105a <HAL_TIM_Base_MspInit+0xfa>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f82:	2300      	movs	r3, #0
 8000f84:	613b      	str	r3, [r7, #16]
 8000f86:	4b45      	ldr	r3, [pc, #276]	; (800109c <HAL_TIM_Base_MspInit+0x13c>)
 8000f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8a:	4a44      	ldr	r2, [pc, #272]	; (800109c <HAL_TIM_Base_MspInit+0x13c>)
 8000f8c:	f043 0302 	orr.w	r3, r3, #2
 8000f90:	6413      	str	r3, [r2, #64]	; 0x40
 8000f92:	4b42      	ldr	r3, [pc, #264]	; (800109c <HAL_TIM_Base_MspInit+0x13c>)
 8000f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f96:	f003 0302 	and.w	r3, r3, #2
 8000f9a:	613b      	str	r3, [r7, #16]
 8000f9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	60fb      	str	r3, [r7, #12]
 8000fa2:	4b3e      	ldr	r3, [pc, #248]	; (800109c <HAL_TIM_Base_MspInit+0x13c>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa6:	4a3d      	ldr	r2, [pc, #244]	; (800109c <HAL_TIM_Base_MspInit+0x13c>)
 8000fa8:	f043 0301 	orr.w	r3, r3, #1
 8000fac:	6313      	str	r3, [r2, #48]	; 0x30
 8000fae:	4b3b      	ldr	r3, [pc, #236]	; (800109c <HAL_TIM_Base_MspInit+0x13c>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	f003 0301 	and.w	r3, r3, #1
 8000fb6:	60fb      	str	r3, [r7, #12]
 8000fb8:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000fba:	2340      	movs	r3, #64	; 0x40
 8000fbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000fca:	2302      	movs	r3, #2
 8000fcc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fce:	f107 0314 	add.w	r3, r7, #20
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4832      	ldr	r0, [pc, #200]	; (80010a0 <HAL_TIM_Base_MspInit+0x140>)
 8000fd6:	f000 fef3 	bl	8001dc0 <HAL_GPIO_Init>

    /* TIM3 DMA Init */
    /* TIM3_CH1_TRIG Init */
    hdma_tim3_ch1_trig.Instance = DMA1_Stream4;
 8000fda:	4b32      	ldr	r3, [pc, #200]	; (80010a4 <HAL_TIM_Base_MspInit+0x144>)
 8000fdc:	4a32      	ldr	r2, [pc, #200]	; (80010a8 <HAL_TIM_Base_MspInit+0x148>)
 8000fde:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Channel = DMA_CHANNEL_5;
 8000fe0:	4b30      	ldr	r3, [pc, #192]	; (80010a4 <HAL_TIM_Base_MspInit+0x144>)
 8000fe2:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8000fe6:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fe8:	4b2e      	ldr	r3, [pc, #184]	; (80010a4 <HAL_TIM_Base_MspInit+0x144>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fee:	4b2d      	ldr	r3, [pc, #180]	; (80010a4 <HAL_TIM_Base_MspInit+0x144>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 8000ff4:	4b2b      	ldr	r3, [pc, #172]	; (80010a4 <HAL_TIM_Base_MspInit+0x144>)
 8000ff6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ffa:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ffc:	4b29      	ldr	r3, [pc, #164]	; (80010a4 <HAL_TIM_Base_MspInit+0x144>)
 8000ffe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001002:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001004:	4b27      	ldr	r3, [pc, #156]	; (80010a4 <HAL_TIM_Base_MspInit+0x144>)
 8001006:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800100a:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Mode = DMA_CIRCULAR;
 800100c:	4b25      	ldr	r3, [pc, #148]	; (80010a4 <HAL_TIM_Base_MspInit+0x144>)
 800100e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001012:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 8001014:	4b23      	ldr	r3, [pc, #140]	; (80010a4 <HAL_TIM_Base_MspInit+0x144>)
 8001016:	2200      	movs	r2, #0
 8001018:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1_trig.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800101a:	4b22      	ldr	r3, [pc, #136]	; (80010a4 <HAL_TIM_Base_MspInit+0x144>)
 800101c:	2200      	movs	r2, #0
 800101e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 8001020:	4820      	ldr	r0, [pc, #128]	; (80010a4 <HAL_TIM_Base_MspInit+0x144>)
 8001022:	f000 facb 	bl	80015bc <HAL_DMA_Init>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <HAL_TIM_Base_MspInit+0xd0>
    {
      Error_Handler();
 800102c:	f7ff fd98 	bl	8000b60 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	4a1c      	ldr	r2, [pc, #112]	; (80010a4 <HAL_TIM_Base_MspInit+0x144>)
 8001034:	625a      	str	r2, [r3, #36]	; 0x24
 8001036:	4a1b      	ldr	r2, [pc, #108]	; (80010a4 <HAL_TIM_Base_MspInit+0x144>)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	4a19      	ldr	r2, [pc, #100]	; (80010a4 <HAL_TIM_Base_MspInit+0x144>)
 8001040:	639a      	str	r2, [r3, #56]	; 0x38
 8001042:	4a18      	ldr	r2, [pc, #96]	; (80010a4 <HAL_TIM_Base_MspInit+0x144>)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001048:	2200      	movs	r2, #0
 800104a:	2100      	movs	r1, #0
 800104c:	201d      	movs	r0, #29
 800104e:	f000 fa7e 	bl	800154e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001052:	201d      	movs	r0, #29
 8001054:	f000 fa97 	bl	8001586 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001058:	e01a      	b.n	8001090 <HAL_TIM_Base_MspInit+0x130>
  else if(tim_baseHandle->Instance==TIM4)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4a13      	ldr	r2, [pc, #76]	; (80010ac <HAL_TIM_Base_MspInit+0x14c>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d115      	bne.n	8001090 <HAL_TIM_Base_MspInit+0x130>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001064:	2300      	movs	r3, #0
 8001066:	60bb      	str	r3, [r7, #8]
 8001068:	4b0c      	ldr	r3, [pc, #48]	; (800109c <HAL_TIM_Base_MspInit+0x13c>)
 800106a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106c:	4a0b      	ldr	r2, [pc, #44]	; (800109c <HAL_TIM_Base_MspInit+0x13c>)
 800106e:	f043 0304 	orr.w	r3, r3, #4
 8001072:	6413      	str	r3, [r2, #64]	; 0x40
 8001074:	4b09      	ldr	r3, [pc, #36]	; (800109c <HAL_TIM_Base_MspInit+0x13c>)
 8001076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001078:	f003 0304 	and.w	r3, r3, #4
 800107c:	60bb      	str	r3, [r7, #8]
 800107e:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001080:	2200      	movs	r2, #0
 8001082:	2100      	movs	r1, #0
 8001084:	201e      	movs	r0, #30
 8001086:	f000 fa62 	bl	800154e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800108a:	201e      	movs	r0, #30
 800108c:	f000 fa7b 	bl	8001586 <HAL_NVIC_EnableIRQ>
}
 8001090:	bf00      	nop
 8001092:	3728      	adds	r7, #40	; 0x28
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	40000400 	.word	0x40000400
 800109c:	40023800 	.word	0x40023800
 80010a0:	40020000 	.word	0x40020000
 80010a4:	2000012c 	.word	0x2000012c
 80010a8:	40026070 	.word	0x40026070
 80010ac:	40000800 	.word	0x40000800

080010b0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b088      	sub	sp, #32
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b8:	f107 030c 	add.w	r3, r7, #12
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	605a      	str	r2, [r3, #4]
 80010c2:	609a      	str	r2, [r3, #8]
 80010c4:	60da      	str	r2, [r3, #12]
 80010c6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a12      	ldr	r2, [pc, #72]	; (8001118 <HAL_TIM_MspPostInit+0x68>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d11e      	bne.n	8001110 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010d2:	2300      	movs	r3, #0
 80010d4:	60bb      	str	r3, [r7, #8]
 80010d6:	4b11      	ldr	r3, [pc, #68]	; (800111c <HAL_TIM_MspPostInit+0x6c>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010da:	4a10      	ldr	r2, [pc, #64]	; (800111c <HAL_TIM_MspPostInit+0x6c>)
 80010dc:	f043 0308 	orr.w	r3, r3, #8
 80010e0:	6313      	str	r3, [r2, #48]	; 0x30
 80010e2:	4b0e      	ldr	r3, [pc, #56]	; (800111c <HAL_TIM_MspPostInit+0x6c>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e6:	f003 0308 	and.w	r3, r3, #8
 80010ea:	60bb      	str	r3, [r7, #8]
 80010ec:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80010ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010f2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f4:	2302      	movs	r3, #2
 80010f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f8:	2300      	movs	r3, #0
 80010fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fc:	2300      	movs	r3, #0
 80010fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001100:	2302      	movs	r3, #2
 8001102:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001104:	f107 030c 	add.w	r3, r7, #12
 8001108:	4619      	mov	r1, r3
 800110a:	4805      	ldr	r0, [pc, #20]	; (8001120 <HAL_TIM_MspPostInit+0x70>)
 800110c:	f000 fe58 	bl	8001dc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001110:	bf00      	nop
 8001112:	3720      	adds	r7, #32
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	40000800 	.word	0x40000800
 800111c:	40023800 	.word	0x40023800
 8001120:	40020c00 	.word	0x40020c00

08001124 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001128:	4b11      	ldr	r3, [pc, #68]	; (8001170 <MX_USART3_UART_Init+0x4c>)
 800112a:	4a12      	ldr	r2, [pc, #72]	; (8001174 <MX_USART3_UART_Init+0x50>)
 800112c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800112e:	4b10      	ldr	r3, [pc, #64]	; (8001170 <MX_USART3_UART_Init+0x4c>)
 8001130:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001134:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001136:	4b0e      	ldr	r3, [pc, #56]	; (8001170 <MX_USART3_UART_Init+0x4c>)
 8001138:	2200      	movs	r2, #0
 800113a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800113c:	4b0c      	ldr	r3, [pc, #48]	; (8001170 <MX_USART3_UART_Init+0x4c>)
 800113e:	2200      	movs	r2, #0
 8001140:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001142:	4b0b      	ldr	r3, [pc, #44]	; (8001170 <MX_USART3_UART_Init+0x4c>)
 8001144:	2200      	movs	r2, #0
 8001146:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001148:	4b09      	ldr	r3, [pc, #36]	; (8001170 <MX_USART3_UART_Init+0x4c>)
 800114a:	220c      	movs	r2, #12
 800114c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800114e:	4b08      	ldr	r3, [pc, #32]	; (8001170 <MX_USART3_UART_Init+0x4c>)
 8001150:	2200      	movs	r2, #0
 8001152:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001154:	4b06      	ldr	r3, [pc, #24]	; (8001170 <MX_USART3_UART_Init+0x4c>)
 8001156:	2200      	movs	r2, #0
 8001158:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800115a:	4805      	ldr	r0, [pc, #20]	; (8001170 <MX_USART3_UART_Init+0x4c>)
 800115c:	f003 f9ac 	bl	80044b8 <HAL_UART_Init>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001166:	f7ff fcfb 	bl	8000b60 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800116a:	bf00      	nop
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	2000018c 	.word	0x2000018c
 8001174:	40004800 	.word	0x40004800

08001178 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b08a      	sub	sp, #40	; 0x28
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001180:	f107 0314 	add.w	r3, r7, #20
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]
 8001188:	605a      	str	r2, [r3, #4]
 800118a:	609a      	str	r2, [r3, #8]
 800118c:	60da      	str	r2, [r3, #12]
 800118e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a1d      	ldr	r2, [pc, #116]	; (800120c <HAL_UART_MspInit+0x94>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d134      	bne.n	8001204 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800119a:	2300      	movs	r3, #0
 800119c:	613b      	str	r3, [r7, #16]
 800119e:	4b1c      	ldr	r3, [pc, #112]	; (8001210 <HAL_UART_MspInit+0x98>)
 80011a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a2:	4a1b      	ldr	r2, [pc, #108]	; (8001210 <HAL_UART_MspInit+0x98>)
 80011a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011a8:	6413      	str	r3, [r2, #64]	; 0x40
 80011aa:	4b19      	ldr	r3, [pc, #100]	; (8001210 <HAL_UART_MspInit+0x98>)
 80011ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011b2:	613b      	str	r3, [r7, #16]
 80011b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	60fb      	str	r3, [r7, #12]
 80011ba:	4b15      	ldr	r3, [pc, #84]	; (8001210 <HAL_UART_MspInit+0x98>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	4a14      	ldr	r2, [pc, #80]	; (8001210 <HAL_UART_MspInit+0x98>)
 80011c0:	f043 0302 	orr.w	r3, r3, #2
 80011c4:	6313      	str	r3, [r2, #48]	; 0x30
 80011c6:	4b12      	ldr	r3, [pc, #72]	; (8001210 <HAL_UART_MspInit+0x98>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ca:	f003 0302 	and.w	r3, r3, #2
 80011ce:	60fb      	str	r3, [r7, #12]
 80011d0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80011d2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80011d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d8:	2302      	movs	r3, #2
 80011da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011dc:	2300      	movs	r3, #0
 80011de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011e0:	2303      	movs	r3, #3
 80011e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80011e4:	2307      	movs	r3, #7
 80011e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011e8:	f107 0314 	add.w	r3, r7, #20
 80011ec:	4619      	mov	r1, r3
 80011ee:	4809      	ldr	r0, [pc, #36]	; (8001214 <HAL_UART_MspInit+0x9c>)
 80011f0:	f000 fde6 	bl	8001dc0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80011f4:	2200      	movs	r2, #0
 80011f6:	2100      	movs	r1, #0
 80011f8:	2027      	movs	r0, #39	; 0x27
 80011fa:	f000 f9a8 	bl	800154e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80011fe:	2027      	movs	r0, #39	; 0x27
 8001200:	f000 f9c1 	bl	8001586 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001204:	bf00      	nop
 8001206:	3728      	adds	r7, #40	; 0x28
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	40004800 	.word	0x40004800
 8001210:	40023800 	.word	0x40023800
 8001214:	40020400 	.word	0x40020400

08001218 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001218:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001250 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800121c:	480d      	ldr	r0, [pc, #52]	; (8001254 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800121e:	490e      	ldr	r1, [pc, #56]	; (8001258 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001220:	4a0e      	ldr	r2, [pc, #56]	; (800125c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001222:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001224:	e002      	b.n	800122c <LoopCopyDataInit>

08001226 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001226:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001228:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800122a:	3304      	adds	r3, #4

0800122c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800122c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800122e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001230:	d3f9      	bcc.n	8001226 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001232:	4a0b      	ldr	r2, [pc, #44]	; (8001260 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001234:	4c0b      	ldr	r4, [pc, #44]	; (8001264 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001236:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001238:	e001      	b.n	800123e <LoopFillZerobss>

0800123a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800123a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800123c:	3204      	adds	r2, #4

0800123e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800123e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001240:	d3fb      	bcc.n	800123a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001242:	f7ff fd95 	bl	8000d70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001246:	f004 f951 	bl	80054ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800124a:	f7ff faed 	bl	8000828 <main>
  bx  lr    
 800124e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001250:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001254:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001258:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800125c:	0800667c 	.word	0x0800667c
  ldr r2, =_sbss
 8001260:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001264:	200001e4 	.word	0x200001e4

08001268 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001268:	e7fe      	b.n	8001268 <ADC_IRQHandler>
	...

0800126c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001270:	4b0e      	ldr	r3, [pc, #56]	; (80012ac <HAL_Init+0x40>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a0d      	ldr	r2, [pc, #52]	; (80012ac <HAL_Init+0x40>)
 8001276:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800127a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800127c:	4b0b      	ldr	r3, [pc, #44]	; (80012ac <HAL_Init+0x40>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a0a      	ldr	r2, [pc, #40]	; (80012ac <HAL_Init+0x40>)
 8001282:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001286:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001288:	4b08      	ldr	r3, [pc, #32]	; (80012ac <HAL_Init+0x40>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a07      	ldr	r2, [pc, #28]	; (80012ac <HAL_Init+0x40>)
 800128e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001292:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001294:	2003      	movs	r0, #3
 8001296:	f000 f94f 	bl	8001538 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800129a:	2000      	movs	r0, #0
 800129c:	f000 f808 	bl	80012b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012a0:	f7ff fc64 	bl	8000b6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012a4:	2300      	movs	r3, #0
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	40023c00 	.word	0x40023c00

080012b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012b8:	4b12      	ldr	r3, [pc, #72]	; (8001304 <HAL_InitTick+0x54>)
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	4b12      	ldr	r3, [pc, #72]	; (8001308 <HAL_InitTick+0x58>)
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	4619      	mov	r1, r3
 80012c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80012ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80012ce:	4618      	mov	r0, r3
 80012d0:	f000 f967 	bl	80015a2 <HAL_SYSTICK_Config>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	e00e      	b.n	80012fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2b0f      	cmp	r3, #15
 80012e2:	d80a      	bhi.n	80012fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012e4:	2200      	movs	r2, #0
 80012e6:	6879      	ldr	r1, [r7, #4]
 80012e8:	f04f 30ff 	mov.w	r0, #4294967295
 80012ec:	f000 f92f 	bl	800154e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012f0:	4a06      	ldr	r2, [pc, #24]	; (800130c <HAL_InitTick+0x5c>)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012f6:	2300      	movs	r3, #0
 80012f8:	e000      	b.n	80012fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	3708      	adds	r7, #8
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	20000000 	.word	0x20000000
 8001308:	20000008 	.word	0x20000008
 800130c:	20000004 	.word	0x20000004

08001310 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001314:	4b06      	ldr	r3, [pc, #24]	; (8001330 <HAL_IncTick+0x20>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	461a      	mov	r2, r3
 800131a:	4b06      	ldr	r3, [pc, #24]	; (8001334 <HAL_IncTick+0x24>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4413      	add	r3, r2
 8001320:	4a04      	ldr	r2, [pc, #16]	; (8001334 <HAL_IncTick+0x24>)
 8001322:	6013      	str	r3, [r2, #0]
}
 8001324:	bf00      	nop
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	20000008 	.word	0x20000008
 8001334:	200001d0 	.word	0x200001d0

08001338 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  return uwTick;
 800133c:	4b03      	ldr	r3, [pc, #12]	; (800134c <HAL_GetTick+0x14>)
 800133e:	681b      	ldr	r3, [r3, #0]
}
 8001340:	4618      	mov	r0, r3
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	200001d0 	.word	0x200001d0

08001350 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b084      	sub	sp, #16
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001358:	f7ff ffee 	bl	8001338 <HAL_GetTick>
 800135c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001368:	d005      	beq.n	8001376 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800136a:	4b0a      	ldr	r3, [pc, #40]	; (8001394 <HAL_Delay+0x44>)
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	461a      	mov	r2, r3
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	4413      	add	r3, r2
 8001374:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001376:	bf00      	nop
 8001378:	f7ff ffde 	bl	8001338 <HAL_GetTick>
 800137c:	4602      	mov	r2, r0
 800137e:	68bb      	ldr	r3, [r7, #8]
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	68fa      	ldr	r2, [r7, #12]
 8001384:	429a      	cmp	r2, r3
 8001386:	d8f7      	bhi.n	8001378 <HAL_Delay+0x28>
  {
  }
}
 8001388:	bf00      	nop
 800138a:	bf00      	nop
 800138c:	3710      	adds	r7, #16
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	20000008 	.word	0x20000008

08001398 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001398:	b480      	push	{r7}
 800139a:	b085      	sub	sp, #20
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	f003 0307 	and.w	r3, r3, #7
 80013a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013a8:	4b0c      	ldr	r3, [pc, #48]	; (80013dc <__NVIC_SetPriorityGrouping+0x44>)
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013ae:	68ba      	ldr	r2, [r7, #8]
 80013b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013b4:	4013      	ands	r3, r2
 80013b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013ca:	4a04      	ldr	r2, [pc, #16]	; (80013dc <__NVIC_SetPriorityGrouping+0x44>)
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	60d3      	str	r3, [r2, #12]
}
 80013d0:	bf00      	nop
 80013d2:	3714      	adds	r7, #20
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr
 80013dc:	e000ed00 	.word	0xe000ed00

080013e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013e4:	4b04      	ldr	r3, [pc, #16]	; (80013f8 <__NVIC_GetPriorityGrouping+0x18>)
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	0a1b      	lsrs	r3, r3, #8
 80013ea:	f003 0307 	and.w	r3, r3, #7
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr
 80013f8:	e000ed00 	.word	0xe000ed00

080013fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	4603      	mov	r3, r0
 8001404:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800140a:	2b00      	cmp	r3, #0
 800140c:	db0b      	blt.n	8001426 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800140e:	79fb      	ldrb	r3, [r7, #7]
 8001410:	f003 021f 	and.w	r2, r3, #31
 8001414:	4907      	ldr	r1, [pc, #28]	; (8001434 <__NVIC_EnableIRQ+0x38>)
 8001416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800141a:	095b      	lsrs	r3, r3, #5
 800141c:	2001      	movs	r0, #1
 800141e:	fa00 f202 	lsl.w	r2, r0, r2
 8001422:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001426:	bf00      	nop
 8001428:	370c      	adds	r7, #12
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	e000e100 	.word	0xe000e100

08001438 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	4603      	mov	r3, r0
 8001440:	6039      	str	r1, [r7, #0]
 8001442:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001444:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001448:	2b00      	cmp	r3, #0
 800144a:	db0a      	blt.n	8001462 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	b2da      	uxtb	r2, r3
 8001450:	490c      	ldr	r1, [pc, #48]	; (8001484 <__NVIC_SetPriority+0x4c>)
 8001452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001456:	0112      	lsls	r2, r2, #4
 8001458:	b2d2      	uxtb	r2, r2
 800145a:	440b      	add	r3, r1
 800145c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001460:	e00a      	b.n	8001478 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	b2da      	uxtb	r2, r3
 8001466:	4908      	ldr	r1, [pc, #32]	; (8001488 <__NVIC_SetPriority+0x50>)
 8001468:	79fb      	ldrb	r3, [r7, #7]
 800146a:	f003 030f 	and.w	r3, r3, #15
 800146e:	3b04      	subs	r3, #4
 8001470:	0112      	lsls	r2, r2, #4
 8001472:	b2d2      	uxtb	r2, r2
 8001474:	440b      	add	r3, r1
 8001476:	761a      	strb	r2, [r3, #24]
}
 8001478:	bf00      	nop
 800147a:	370c      	adds	r7, #12
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr
 8001484:	e000e100 	.word	0xe000e100
 8001488:	e000ed00 	.word	0xe000ed00

0800148c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800148c:	b480      	push	{r7}
 800148e:	b089      	sub	sp, #36	; 0x24
 8001490:	af00      	add	r7, sp, #0
 8001492:	60f8      	str	r0, [r7, #12]
 8001494:	60b9      	str	r1, [r7, #8]
 8001496:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	f003 0307 	and.w	r3, r3, #7
 800149e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014a0:	69fb      	ldr	r3, [r7, #28]
 80014a2:	f1c3 0307 	rsb	r3, r3, #7
 80014a6:	2b04      	cmp	r3, #4
 80014a8:	bf28      	it	cs
 80014aa:	2304      	movcs	r3, #4
 80014ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	3304      	adds	r3, #4
 80014b2:	2b06      	cmp	r3, #6
 80014b4:	d902      	bls.n	80014bc <NVIC_EncodePriority+0x30>
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	3b03      	subs	r3, #3
 80014ba:	e000      	b.n	80014be <NVIC_EncodePriority+0x32>
 80014bc:	2300      	movs	r3, #0
 80014be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014c0:	f04f 32ff 	mov.w	r2, #4294967295
 80014c4:	69bb      	ldr	r3, [r7, #24]
 80014c6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ca:	43da      	mvns	r2, r3
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	401a      	ands	r2, r3
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014d4:	f04f 31ff 	mov.w	r1, #4294967295
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	fa01 f303 	lsl.w	r3, r1, r3
 80014de:	43d9      	mvns	r1, r3
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014e4:	4313      	orrs	r3, r2
         );
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3724      	adds	r7, #36	; 0x24
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
	...

080014f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	3b01      	subs	r3, #1
 8001500:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001504:	d301      	bcc.n	800150a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001506:	2301      	movs	r3, #1
 8001508:	e00f      	b.n	800152a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800150a:	4a0a      	ldr	r2, [pc, #40]	; (8001534 <SysTick_Config+0x40>)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	3b01      	subs	r3, #1
 8001510:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001512:	210f      	movs	r1, #15
 8001514:	f04f 30ff 	mov.w	r0, #4294967295
 8001518:	f7ff ff8e 	bl	8001438 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800151c:	4b05      	ldr	r3, [pc, #20]	; (8001534 <SysTick_Config+0x40>)
 800151e:	2200      	movs	r2, #0
 8001520:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001522:	4b04      	ldr	r3, [pc, #16]	; (8001534 <SysTick_Config+0x40>)
 8001524:	2207      	movs	r2, #7
 8001526:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001528:	2300      	movs	r3, #0
}
 800152a:	4618      	mov	r0, r3
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	e000e010 	.word	0xe000e010

08001538 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001540:	6878      	ldr	r0, [r7, #4]
 8001542:	f7ff ff29 	bl	8001398 <__NVIC_SetPriorityGrouping>
}
 8001546:	bf00      	nop
 8001548:	3708      	adds	r7, #8
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}

0800154e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800154e:	b580      	push	{r7, lr}
 8001550:	b086      	sub	sp, #24
 8001552:	af00      	add	r7, sp, #0
 8001554:	4603      	mov	r3, r0
 8001556:	60b9      	str	r1, [r7, #8]
 8001558:	607a      	str	r2, [r7, #4]
 800155a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800155c:	2300      	movs	r3, #0
 800155e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001560:	f7ff ff3e 	bl	80013e0 <__NVIC_GetPriorityGrouping>
 8001564:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001566:	687a      	ldr	r2, [r7, #4]
 8001568:	68b9      	ldr	r1, [r7, #8]
 800156a:	6978      	ldr	r0, [r7, #20]
 800156c:	f7ff ff8e 	bl	800148c <NVIC_EncodePriority>
 8001570:	4602      	mov	r2, r0
 8001572:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001576:	4611      	mov	r1, r2
 8001578:	4618      	mov	r0, r3
 800157a:	f7ff ff5d 	bl	8001438 <__NVIC_SetPriority>
}
 800157e:	bf00      	nop
 8001580:	3718      	adds	r7, #24
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}

08001586 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001586:	b580      	push	{r7, lr}
 8001588:	b082      	sub	sp, #8
 800158a:	af00      	add	r7, sp, #0
 800158c:	4603      	mov	r3, r0
 800158e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001590:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001594:	4618      	mov	r0, r3
 8001596:	f7ff ff31 	bl	80013fc <__NVIC_EnableIRQ>
}
 800159a:	bf00      	nop
 800159c:	3708      	adds	r7, #8
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}

080015a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015a2:	b580      	push	{r7, lr}
 80015a4:	b082      	sub	sp, #8
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	f7ff ffa2 	bl	80014f4 <SysTick_Config>
 80015b0:	4603      	mov	r3, r0
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3708      	adds	r7, #8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
	...

080015bc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b086      	sub	sp, #24
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80015c4:	2300      	movs	r3, #0
 80015c6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80015c8:	f7ff feb6 	bl	8001338 <HAL_GetTick>
 80015cc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d101      	bne.n	80015d8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80015d4:	2301      	movs	r3, #1
 80015d6:	e099      	b.n	800170c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2202      	movs	r2, #2
 80015dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2200      	movs	r2, #0
 80015e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f022 0201 	bic.w	r2, r2, #1
 80015f6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015f8:	e00f      	b.n	800161a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80015fa:	f7ff fe9d 	bl	8001338 <HAL_GetTick>
 80015fe:	4602      	mov	r2, r0
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	1ad3      	subs	r3, r2, r3
 8001604:	2b05      	cmp	r3, #5
 8001606:	d908      	bls.n	800161a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2220      	movs	r2, #32
 800160c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2203      	movs	r2, #3
 8001612:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001616:	2303      	movs	r3, #3
 8001618:	e078      	b.n	800170c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f003 0301 	and.w	r3, r3, #1
 8001624:	2b00      	cmp	r3, #0
 8001626:	d1e8      	bne.n	80015fa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001630:	697a      	ldr	r2, [r7, #20]
 8001632:	4b38      	ldr	r3, [pc, #224]	; (8001714 <HAL_DMA_Init+0x158>)
 8001634:	4013      	ands	r3, r2
 8001636:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	685a      	ldr	r2, [r3, #4]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001646:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	691b      	ldr	r3, [r3, #16]
 800164c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001652:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	699b      	ldr	r3, [r3, #24]
 8001658:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800165e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6a1b      	ldr	r3, [r3, #32]
 8001664:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001666:	697a      	ldr	r2, [r7, #20]
 8001668:	4313      	orrs	r3, r2
 800166a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001670:	2b04      	cmp	r3, #4
 8001672:	d107      	bne.n	8001684 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167c:	4313      	orrs	r3, r2
 800167e:	697a      	ldr	r2, [r7, #20]
 8001680:	4313      	orrs	r3, r2
 8001682:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	697a      	ldr	r2, [r7, #20]
 800168a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	695b      	ldr	r3, [r3, #20]
 8001692:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	f023 0307 	bic.w	r3, r3, #7
 800169a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a0:	697a      	ldr	r2, [r7, #20]
 80016a2:	4313      	orrs	r3, r2
 80016a4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016aa:	2b04      	cmp	r3, #4
 80016ac:	d117      	bne.n	80016de <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016b2:	697a      	ldr	r2, [r7, #20]
 80016b4:	4313      	orrs	r3, r2
 80016b6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d00e      	beq.n	80016de <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	f000 fb01 	bl	8001cc8 <DMA_CheckFifoParam>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d008      	beq.n	80016de <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2240      	movs	r2, #64	; 0x40
 80016d0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2201      	movs	r2, #1
 80016d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80016da:	2301      	movs	r3, #1
 80016dc:	e016      	b.n	800170c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	697a      	ldr	r2, [r7, #20]
 80016e4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f000 fab8 	bl	8001c5c <DMA_CalcBaseAndBitshift>
 80016ec:	4603      	mov	r3, r0
 80016ee:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016f4:	223f      	movs	r2, #63	; 0x3f
 80016f6:	409a      	lsls	r2, r3
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2200      	movs	r2, #0
 8001700:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2201      	movs	r2, #1
 8001706:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800170a:	2300      	movs	r3, #0
}
 800170c:	4618      	mov	r0, r3
 800170e:	3718      	adds	r7, #24
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	f010803f 	.word	0xf010803f

08001718 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b086      	sub	sp, #24
 800171c:	af00      	add	r7, sp, #0
 800171e:	60f8      	str	r0, [r7, #12]
 8001720:	60b9      	str	r1, [r7, #8]
 8001722:	607a      	str	r2, [r7, #4]
 8001724:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001726:	2300      	movs	r3, #0
 8001728:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800172e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001736:	2b01      	cmp	r3, #1
 8001738:	d101      	bne.n	800173e <HAL_DMA_Start_IT+0x26>
 800173a:	2302      	movs	r3, #2
 800173c:	e040      	b.n	80017c0 <HAL_DMA_Start_IT+0xa8>
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	2201      	movs	r2, #1
 8001742:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800174c:	b2db      	uxtb	r3, r3
 800174e:	2b01      	cmp	r3, #1
 8001750:	d12f      	bne.n	80017b2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	2202      	movs	r2, #2
 8001756:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	2200      	movs	r2, #0
 800175e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	687a      	ldr	r2, [r7, #4]
 8001764:	68b9      	ldr	r1, [r7, #8]
 8001766:	68f8      	ldr	r0, [r7, #12]
 8001768:	f000 fa4a 	bl	8001c00 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001770:	223f      	movs	r2, #63	; 0x3f
 8001772:	409a      	lsls	r2, r3
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f042 0216 	orr.w	r2, r2, #22
 8001786:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178c:	2b00      	cmp	r3, #0
 800178e:	d007      	beq.n	80017a0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f042 0208 	orr.w	r2, r2, #8
 800179e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f042 0201 	orr.w	r2, r2, #1
 80017ae:	601a      	str	r2, [r3, #0]
 80017b0:	e005      	b.n	80017be <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	2200      	movs	r2, #0
 80017b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80017ba:	2302      	movs	r3, #2
 80017bc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80017be:	7dfb      	ldrb	r3, [r7, #23]
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	3718      	adds	r7, #24
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}

080017c8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b084      	sub	sp, #16
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017d4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80017d6:	f7ff fdaf 	bl	8001338 <HAL_GetTick>
 80017da:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	2b02      	cmp	r3, #2
 80017e6:	d008      	beq.n	80017fa <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2280      	movs	r2, #128	; 0x80
 80017ec:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2200      	movs	r2, #0
 80017f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e052      	b.n	80018a0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f022 0216 	bic.w	r2, r2, #22
 8001808:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	695a      	ldr	r2, [r3, #20]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001818:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181e:	2b00      	cmp	r3, #0
 8001820:	d103      	bne.n	800182a <HAL_DMA_Abort+0x62>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001826:	2b00      	cmp	r3, #0
 8001828:	d007      	beq.n	800183a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f022 0208 	bic.w	r2, r2, #8
 8001838:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f022 0201 	bic.w	r2, r2, #1
 8001848:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800184a:	e013      	b.n	8001874 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800184c:	f7ff fd74 	bl	8001338 <HAL_GetTick>
 8001850:	4602      	mov	r2, r0
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	2b05      	cmp	r3, #5
 8001858:	d90c      	bls.n	8001874 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2220      	movs	r2, #32
 800185e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2203      	movs	r2, #3
 8001864:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2200      	movs	r2, #0
 800186c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001870:	2303      	movs	r3, #3
 8001872:	e015      	b.n	80018a0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 0301 	and.w	r3, r3, #1
 800187e:	2b00      	cmp	r3, #0
 8001880:	d1e4      	bne.n	800184c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001886:	223f      	movs	r2, #63	; 0x3f
 8001888:	409a      	lsls	r2, r3
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2201      	movs	r2, #1
 8001892:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2200      	movs	r2, #0
 800189a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800189e:	2300      	movs	r3, #0
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3710      	adds	r7, #16
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}

080018a8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	d004      	beq.n	80018c6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2280      	movs	r2, #128	; 0x80
 80018c0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e00c      	b.n	80018e0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2205      	movs	r2, #5
 80018ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f022 0201 	bic.w	r2, r2, #1
 80018dc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80018de:	2300      	movs	r3, #0
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	370c      	adds	r7, #12
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr

080018ec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b086      	sub	sp, #24
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80018f4:	2300      	movs	r3, #0
 80018f6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80018f8:	4b8e      	ldr	r3, [pc, #568]	; (8001b34 <HAL_DMA_IRQHandler+0x248>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a8e      	ldr	r2, [pc, #568]	; (8001b38 <HAL_DMA_IRQHandler+0x24c>)
 80018fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001902:	0a9b      	lsrs	r3, r3, #10
 8001904:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800190a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001916:	2208      	movs	r2, #8
 8001918:	409a      	lsls	r2, r3
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	4013      	ands	r3, r2
 800191e:	2b00      	cmp	r3, #0
 8001920:	d01a      	beq.n	8001958 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 0304 	and.w	r3, r3, #4
 800192c:	2b00      	cmp	r3, #0
 800192e:	d013      	beq.n	8001958 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f022 0204 	bic.w	r2, r2, #4
 800193e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001944:	2208      	movs	r2, #8
 8001946:	409a      	lsls	r2, r3
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001950:	f043 0201 	orr.w	r2, r3, #1
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800195c:	2201      	movs	r2, #1
 800195e:	409a      	lsls	r2, r3
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	4013      	ands	r3, r2
 8001964:	2b00      	cmp	r3, #0
 8001966:	d012      	beq.n	800198e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	695b      	ldr	r3, [r3, #20]
 800196e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001972:	2b00      	cmp	r3, #0
 8001974:	d00b      	beq.n	800198e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800197a:	2201      	movs	r2, #1
 800197c:	409a      	lsls	r2, r3
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001986:	f043 0202 	orr.w	r2, r3, #2
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001992:	2204      	movs	r2, #4
 8001994:	409a      	lsls	r2, r3
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	4013      	ands	r3, r2
 800199a:	2b00      	cmp	r3, #0
 800199c:	d012      	beq.n	80019c4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f003 0302 	and.w	r3, r3, #2
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d00b      	beq.n	80019c4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019b0:	2204      	movs	r2, #4
 80019b2:	409a      	lsls	r2, r3
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019bc:	f043 0204 	orr.w	r2, r3, #4
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019c8:	2210      	movs	r2, #16
 80019ca:	409a      	lsls	r2, r3
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	4013      	ands	r3, r2
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d043      	beq.n	8001a5c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0308 	and.w	r3, r3, #8
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d03c      	beq.n	8001a5c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019e6:	2210      	movs	r2, #16
 80019e8:	409a      	lsls	r2, r3
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d018      	beq.n	8001a2e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d108      	bne.n	8001a1c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d024      	beq.n	8001a5c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	4798      	blx	r3
 8001a1a:	e01f      	b.n	8001a5c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d01b      	beq.n	8001a5c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a28:	6878      	ldr	r0, [r7, #4]
 8001a2a:	4798      	blx	r3
 8001a2c:	e016      	b.n	8001a5c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d107      	bne.n	8001a4c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f022 0208 	bic.w	r2, r2, #8
 8001a4a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d003      	beq.n	8001a5c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a60:	2220      	movs	r2, #32
 8001a62:	409a      	lsls	r2, r3
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	4013      	ands	r3, r2
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	f000 808f 	beq.w	8001b8c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 0310 	and.w	r3, r3, #16
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	f000 8087 	beq.w	8001b8c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a82:	2220      	movs	r2, #32
 8001a84:	409a      	lsls	r2, r3
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	2b05      	cmp	r3, #5
 8001a94:	d136      	bne.n	8001b04 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f022 0216 	bic.w	r2, r2, #22
 8001aa4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	695a      	ldr	r2, [r3, #20]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ab4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d103      	bne.n	8001ac6 <HAL_DMA_IRQHandler+0x1da>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d007      	beq.n	8001ad6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f022 0208 	bic.w	r2, r2, #8
 8001ad4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ada:	223f      	movs	r2, #63	; 0x3f
 8001adc:	409a      	lsls	r2, r3
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2200      	movs	r2, #0
 8001aee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d07e      	beq.n	8001bf8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	4798      	blx	r3
        }
        return;
 8001b02:	e079      	b.n	8001bf8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d01d      	beq.n	8001b4e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d10d      	bne.n	8001b3c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d031      	beq.n	8001b8c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	4798      	blx	r3
 8001b30:	e02c      	b.n	8001b8c <HAL_DMA_IRQHandler+0x2a0>
 8001b32:	bf00      	nop
 8001b34:	20000000 	.word	0x20000000
 8001b38:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d023      	beq.n	8001b8c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	4798      	blx	r3
 8001b4c:	e01e      	b.n	8001b8c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d10f      	bne.n	8001b7c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f022 0210 	bic.w	r2, r2, #16
 8001b6a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2201      	movs	r2, #1
 8001b70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2200      	movs	r2, #0
 8001b78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d003      	beq.n	8001b8c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d032      	beq.n	8001bfa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b98:	f003 0301 	and.w	r3, r3, #1
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d022      	beq.n	8001be6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2205      	movs	r2, #5
 8001ba4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f022 0201 	bic.w	r2, r2, #1
 8001bb6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	3301      	adds	r3, #1
 8001bbc:	60bb      	str	r3, [r7, #8]
 8001bbe:	697a      	ldr	r2, [r7, #20]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d307      	bcc.n	8001bd4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 0301 	and.w	r3, r3, #1
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d1f2      	bne.n	8001bb8 <HAL_DMA_IRQHandler+0x2cc>
 8001bd2:	e000      	b.n	8001bd6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001bd4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2201      	movs	r2, #1
 8001bda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2200      	movs	r2, #0
 8001be2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d005      	beq.n	8001bfa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	4798      	blx	r3
 8001bf6:	e000      	b.n	8001bfa <HAL_DMA_IRQHandler+0x30e>
        return;
 8001bf8:	bf00      	nop
    }
  }
}
 8001bfa:	3718      	adds	r7, #24
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b085      	sub	sp, #20
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	60f8      	str	r0, [r7, #12]
 8001c08:	60b9      	str	r1, [r7, #8]
 8001c0a:	607a      	str	r2, [r7, #4]
 8001c0c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001c1c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	683a      	ldr	r2, [r7, #0]
 8001c24:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	2b40      	cmp	r3, #64	; 0x40
 8001c2c:	d108      	bne.n	8001c40 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	68ba      	ldr	r2, [r7, #8]
 8001c3c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001c3e:	e007      	b.n	8001c50 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	68ba      	ldr	r2, [r7, #8]
 8001c46:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	687a      	ldr	r2, [r7, #4]
 8001c4e:	60da      	str	r2, [r3, #12]
}
 8001c50:	bf00      	nop
 8001c52:	3714      	adds	r7, #20
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr

08001c5c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b085      	sub	sp, #20
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	3b10      	subs	r3, #16
 8001c6c:	4a14      	ldr	r2, [pc, #80]	; (8001cc0 <DMA_CalcBaseAndBitshift+0x64>)
 8001c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c72:	091b      	lsrs	r3, r3, #4
 8001c74:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001c76:	4a13      	ldr	r2, [pc, #76]	; (8001cc4 <DMA_CalcBaseAndBitshift+0x68>)
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	4413      	add	r3, r2
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	461a      	mov	r2, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	2b03      	cmp	r3, #3
 8001c88:	d909      	bls.n	8001c9e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001c92:	f023 0303 	bic.w	r3, r3, #3
 8001c96:	1d1a      	adds	r2, r3, #4
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	659a      	str	r2, [r3, #88]	; 0x58
 8001c9c:	e007      	b.n	8001cae <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001ca6:	f023 0303 	bic.w	r3, r3, #3
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3714      	adds	r7, #20
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	aaaaaaab 	.word	0xaaaaaaab
 8001cc4:	080065cc 	.word	0x080065cc

08001cc8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b085      	sub	sp, #20
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	699b      	ldr	r3, [r3, #24]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d11f      	bne.n	8001d22 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	2b03      	cmp	r3, #3
 8001ce6:	d856      	bhi.n	8001d96 <DMA_CheckFifoParam+0xce>
 8001ce8:	a201      	add	r2, pc, #4	; (adr r2, 8001cf0 <DMA_CheckFifoParam+0x28>)
 8001cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cee:	bf00      	nop
 8001cf0:	08001d01 	.word	0x08001d01
 8001cf4:	08001d13 	.word	0x08001d13
 8001cf8:	08001d01 	.word	0x08001d01
 8001cfc:	08001d97 	.word	0x08001d97
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d046      	beq.n	8001d9a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d10:	e043      	b.n	8001d9a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d16:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001d1a:	d140      	bne.n	8001d9e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d20:	e03d      	b.n	8001d9e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	699b      	ldr	r3, [r3, #24]
 8001d26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d2a:	d121      	bne.n	8001d70 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	2b03      	cmp	r3, #3
 8001d30:	d837      	bhi.n	8001da2 <DMA_CheckFifoParam+0xda>
 8001d32:	a201      	add	r2, pc, #4	; (adr r2, 8001d38 <DMA_CheckFifoParam+0x70>)
 8001d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d38:	08001d49 	.word	0x08001d49
 8001d3c:	08001d4f 	.word	0x08001d4f
 8001d40:	08001d49 	.word	0x08001d49
 8001d44:	08001d61 	.word	0x08001d61
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	73fb      	strb	r3, [r7, #15]
      break;
 8001d4c:	e030      	b.n	8001db0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d52:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d025      	beq.n	8001da6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d5e:	e022      	b.n	8001da6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d64:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001d68:	d11f      	bne.n	8001daa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001d6e:	e01c      	b.n	8001daa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d903      	bls.n	8001d7e <DMA_CheckFifoParam+0xb6>
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	2b03      	cmp	r3, #3
 8001d7a:	d003      	beq.n	8001d84 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001d7c:	e018      	b.n	8001db0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	73fb      	strb	r3, [r7, #15]
      break;
 8001d82:	e015      	b.n	8001db0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d00e      	beq.n	8001dae <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	73fb      	strb	r3, [r7, #15]
      break;
 8001d94:	e00b      	b.n	8001dae <DMA_CheckFifoParam+0xe6>
      break;
 8001d96:	bf00      	nop
 8001d98:	e00a      	b.n	8001db0 <DMA_CheckFifoParam+0xe8>
      break;
 8001d9a:	bf00      	nop
 8001d9c:	e008      	b.n	8001db0 <DMA_CheckFifoParam+0xe8>
      break;
 8001d9e:	bf00      	nop
 8001da0:	e006      	b.n	8001db0 <DMA_CheckFifoParam+0xe8>
      break;
 8001da2:	bf00      	nop
 8001da4:	e004      	b.n	8001db0 <DMA_CheckFifoParam+0xe8>
      break;
 8001da6:	bf00      	nop
 8001da8:	e002      	b.n	8001db0 <DMA_CheckFifoParam+0xe8>
      break;   
 8001daa:	bf00      	nop
 8001dac:	e000      	b.n	8001db0 <DMA_CheckFifoParam+0xe8>
      break;
 8001dae:	bf00      	nop
    }
  } 
  
  return status; 
 8001db0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3714      	adds	r7, #20
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop

08001dc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b089      	sub	sp, #36	; 0x24
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	61fb      	str	r3, [r7, #28]
 8001dda:	e177      	b.n	80020cc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ddc:	2201      	movs	r2, #1
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	fa02 f303 	lsl.w	r3, r2, r3
 8001de4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	697a      	ldr	r2, [r7, #20]
 8001dec:	4013      	ands	r3, r2
 8001dee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001df0:	693a      	ldr	r2, [r7, #16]
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	429a      	cmp	r2, r3
 8001df6:	f040 8166 	bne.w	80020c6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	f003 0303 	and.w	r3, r3, #3
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d005      	beq.n	8001e12 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e0e:	2b02      	cmp	r3, #2
 8001e10:	d130      	bne.n	8001e74 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	005b      	lsls	r3, r3, #1
 8001e1c:	2203      	movs	r2, #3
 8001e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e22:	43db      	mvns	r3, r3
 8001e24:	69ba      	ldr	r2, [r7, #24]
 8001e26:	4013      	ands	r3, r2
 8001e28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	68da      	ldr	r2, [r3, #12]
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	005b      	lsls	r3, r3, #1
 8001e32:	fa02 f303 	lsl.w	r3, r2, r3
 8001e36:	69ba      	ldr	r2, [r7, #24]
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	69ba      	ldr	r2, [r7, #24]
 8001e40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e48:	2201      	movs	r2, #1
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e50:	43db      	mvns	r3, r3
 8001e52:	69ba      	ldr	r2, [r7, #24]
 8001e54:	4013      	ands	r3, r2
 8001e56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	091b      	lsrs	r3, r3, #4
 8001e5e:	f003 0201 	and.w	r2, r3, #1
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	fa02 f303 	lsl.w	r3, r2, r3
 8001e68:	69ba      	ldr	r2, [r7, #24]
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	69ba      	ldr	r2, [r7, #24]
 8001e72:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f003 0303 	and.w	r3, r3, #3
 8001e7c:	2b03      	cmp	r3, #3
 8001e7e:	d017      	beq.n	8001eb0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	005b      	lsls	r3, r3, #1
 8001e8a:	2203      	movs	r2, #3
 8001e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e90:	43db      	mvns	r3, r3
 8001e92:	69ba      	ldr	r2, [r7, #24]
 8001e94:	4013      	ands	r3, r2
 8001e96:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	689a      	ldr	r2, [r3, #8]
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	005b      	lsls	r3, r3, #1
 8001ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea4:	69ba      	ldr	r2, [r7, #24]
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f003 0303 	and.w	r3, r3, #3
 8001eb8:	2b02      	cmp	r3, #2
 8001eba:	d123      	bne.n	8001f04 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	08da      	lsrs	r2, r3, #3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	3208      	adds	r2, #8
 8001ec4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ec8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	f003 0307 	and.w	r3, r3, #7
 8001ed0:	009b      	lsls	r3, r3, #2
 8001ed2:	220f      	movs	r2, #15
 8001ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed8:	43db      	mvns	r3, r3
 8001eda:	69ba      	ldr	r2, [r7, #24]
 8001edc:	4013      	ands	r3, r2
 8001ede:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	691a      	ldr	r2, [r3, #16]
 8001ee4:	69fb      	ldr	r3, [r7, #28]
 8001ee6:	f003 0307 	and.w	r3, r3, #7
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef0:	69ba      	ldr	r2, [r7, #24]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	08da      	lsrs	r2, r3, #3
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	3208      	adds	r2, #8
 8001efe:	69b9      	ldr	r1, [r7, #24]
 8001f00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	005b      	lsls	r3, r3, #1
 8001f0e:	2203      	movs	r2, #3
 8001f10:	fa02 f303 	lsl.w	r3, r2, r3
 8001f14:	43db      	mvns	r3, r3
 8001f16:	69ba      	ldr	r2, [r7, #24]
 8001f18:	4013      	ands	r3, r2
 8001f1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f003 0203 	and.w	r2, r3, #3
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	005b      	lsls	r3, r3, #1
 8001f28:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2c:	69ba      	ldr	r2, [r7, #24]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	69ba      	ldr	r2, [r7, #24]
 8001f36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	f000 80c0 	beq.w	80020c6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f46:	2300      	movs	r3, #0
 8001f48:	60fb      	str	r3, [r7, #12]
 8001f4a:	4b66      	ldr	r3, [pc, #408]	; (80020e4 <HAL_GPIO_Init+0x324>)
 8001f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f4e:	4a65      	ldr	r2, [pc, #404]	; (80020e4 <HAL_GPIO_Init+0x324>)
 8001f50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f54:	6453      	str	r3, [r2, #68]	; 0x44
 8001f56:	4b63      	ldr	r3, [pc, #396]	; (80020e4 <HAL_GPIO_Init+0x324>)
 8001f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f5e:	60fb      	str	r3, [r7, #12]
 8001f60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f62:	4a61      	ldr	r2, [pc, #388]	; (80020e8 <HAL_GPIO_Init+0x328>)
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	089b      	lsrs	r3, r3, #2
 8001f68:	3302      	adds	r3, #2
 8001f6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	f003 0303 	and.w	r3, r3, #3
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	220f      	movs	r2, #15
 8001f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7e:	43db      	mvns	r3, r3
 8001f80:	69ba      	ldr	r2, [r7, #24]
 8001f82:	4013      	ands	r3, r2
 8001f84:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4a58      	ldr	r2, [pc, #352]	; (80020ec <HAL_GPIO_Init+0x32c>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d037      	beq.n	8001ffe <HAL_GPIO_Init+0x23e>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4a57      	ldr	r2, [pc, #348]	; (80020f0 <HAL_GPIO_Init+0x330>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d031      	beq.n	8001ffa <HAL_GPIO_Init+0x23a>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4a56      	ldr	r2, [pc, #344]	; (80020f4 <HAL_GPIO_Init+0x334>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d02b      	beq.n	8001ff6 <HAL_GPIO_Init+0x236>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a55      	ldr	r2, [pc, #340]	; (80020f8 <HAL_GPIO_Init+0x338>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d025      	beq.n	8001ff2 <HAL_GPIO_Init+0x232>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a54      	ldr	r2, [pc, #336]	; (80020fc <HAL_GPIO_Init+0x33c>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d01f      	beq.n	8001fee <HAL_GPIO_Init+0x22e>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a53      	ldr	r2, [pc, #332]	; (8002100 <HAL_GPIO_Init+0x340>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d019      	beq.n	8001fea <HAL_GPIO_Init+0x22a>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4a52      	ldr	r2, [pc, #328]	; (8002104 <HAL_GPIO_Init+0x344>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d013      	beq.n	8001fe6 <HAL_GPIO_Init+0x226>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4a51      	ldr	r2, [pc, #324]	; (8002108 <HAL_GPIO_Init+0x348>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d00d      	beq.n	8001fe2 <HAL_GPIO_Init+0x222>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4a50      	ldr	r2, [pc, #320]	; (800210c <HAL_GPIO_Init+0x34c>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d007      	beq.n	8001fde <HAL_GPIO_Init+0x21e>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4a4f      	ldr	r2, [pc, #316]	; (8002110 <HAL_GPIO_Init+0x350>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d101      	bne.n	8001fda <HAL_GPIO_Init+0x21a>
 8001fd6:	2309      	movs	r3, #9
 8001fd8:	e012      	b.n	8002000 <HAL_GPIO_Init+0x240>
 8001fda:	230a      	movs	r3, #10
 8001fdc:	e010      	b.n	8002000 <HAL_GPIO_Init+0x240>
 8001fde:	2308      	movs	r3, #8
 8001fe0:	e00e      	b.n	8002000 <HAL_GPIO_Init+0x240>
 8001fe2:	2307      	movs	r3, #7
 8001fe4:	e00c      	b.n	8002000 <HAL_GPIO_Init+0x240>
 8001fe6:	2306      	movs	r3, #6
 8001fe8:	e00a      	b.n	8002000 <HAL_GPIO_Init+0x240>
 8001fea:	2305      	movs	r3, #5
 8001fec:	e008      	b.n	8002000 <HAL_GPIO_Init+0x240>
 8001fee:	2304      	movs	r3, #4
 8001ff0:	e006      	b.n	8002000 <HAL_GPIO_Init+0x240>
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	e004      	b.n	8002000 <HAL_GPIO_Init+0x240>
 8001ff6:	2302      	movs	r3, #2
 8001ff8:	e002      	b.n	8002000 <HAL_GPIO_Init+0x240>
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e000      	b.n	8002000 <HAL_GPIO_Init+0x240>
 8001ffe:	2300      	movs	r3, #0
 8002000:	69fa      	ldr	r2, [r7, #28]
 8002002:	f002 0203 	and.w	r2, r2, #3
 8002006:	0092      	lsls	r2, r2, #2
 8002008:	4093      	lsls	r3, r2
 800200a:	69ba      	ldr	r2, [r7, #24]
 800200c:	4313      	orrs	r3, r2
 800200e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002010:	4935      	ldr	r1, [pc, #212]	; (80020e8 <HAL_GPIO_Init+0x328>)
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	089b      	lsrs	r3, r3, #2
 8002016:	3302      	adds	r3, #2
 8002018:	69ba      	ldr	r2, [r7, #24]
 800201a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800201e:	4b3d      	ldr	r3, [pc, #244]	; (8002114 <HAL_GPIO_Init+0x354>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	43db      	mvns	r3, r3
 8002028:	69ba      	ldr	r2, [r7, #24]
 800202a:	4013      	ands	r3, r2
 800202c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d003      	beq.n	8002042 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800203a:	69ba      	ldr	r2, [r7, #24]
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	4313      	orrs	r3, r2
 8002040:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002042:	4a34      	ldr	r2, [pc, #208]	; (8002114 <HAL_GPIO_Init+0x354>)
 8002044:	69bb      	ldr	r3, [r7, #24]
 8002046:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002048:	4b32      	ldr	r3, [pc, #200]	; (8002114 <HAL_GPIO_Init+0x354>)
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	43db      	mvns	r3, r3
 8002052:	69ba      	ldr	r2, [r7, #24]
 8002054:	4013      	ands	r3, r2
 8002056:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002060:	2b00      	cmp	r3, #0
 8002062:	d003      	beq.n	800206c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002064:	69ba      	ldr	r2, [r7, #24]
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	4313      	orrs	r3, r2
 800206a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800206c:	4a29      	ldr	r2, [pc, #164]	; (8002114 <HAL_GPIO_Init+0x354>)
 800206e:	69bb      	ldr	r3, [r7, #24]
 8002070:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002072:	4b28      	ldr	r3, [pc, #160]	; (8002114 <HAL_GPIO_Init+0x354>)
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	43db      	mvns	r3, r3
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	4013      	ands	r3, r2
 8002080:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d003      	beq.n	8002096 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800208e:	69ba      	ldr	r2, [r7, #24]
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	4313      	orrs	r3, r2
 8002094:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002096:	4a1f      	ldr	r2, [pc, #124]	; (8002114 <HAL_GPIO_Init+0x354>)
 8002098:	69bb      	ldr	r3, [r7, #24]
 800209a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800209c:	4b1d      	ldr	r3, [pc, #116]	; (8002114 <HAL_GPIO_Init+0x354>)
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	43db      	mvns	r3, r3
 80020a6:	69ba      	ldr	r2, [r7, #24]
 80020a8:	4013      	ands	r3, r2
 80020aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d003      	beq.n	80020c0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80020b8:	69ba      	ldr	r2, [r7, #24]
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	4313      	orrs	r3, r2
 80020be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020c0:	4a14      	ldr	r2, [pc, #80]	; (8002114 <HAL_GPIO_Init+0x354>)
 80020c2:	69bb      	ldr	r3, [r7, #24]
 80020c4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	3301      	adds	r3, #1
 80020ca:	61fb      	str	r3, [r7, #28]
 80020cc:	69fb      	ldr	r3, [r7, #28]
 80020ce:	2b0f      	cmp	r3, #15
 80020d0:	f67f ae84 	bls.w	8001ddc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80020d4:	bf00      	nop
 80020d6:	bf00      	nop
 80020d8:	3724      	adds	r7, #36	; 0x24
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	40023800 	.word	0x40023800
 80020e8:	40013800 	.word	0x40013800
 80020ec:	40020000 	.word	0x40020000
 80020f0:	40020400 	.word	0x40020400
 80020f4:	40020800 	.word	0x40020800
 80020f8:	40020c00 	.word	0x40020c00
 80020fc:	40021000 	.word	0x40021000
 8002100:	40021400 	.word	0x40021400
 8002104:	40021800 	.word	0x40021800
 8002108:	40021c00 	.word	0x40021c00
 800210c:	40022000 	.word	0x40022000
 8002110:	40022400 	.word	0x40022400
 8002114:	40013c00 	.word	0x40013c00

08002118 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	460b      	mov	r3, r1
 8002122:	807b      	strh	r3, [r7, #2]
 8002124:	4613      	mov	r3, r2
 8002126:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002128:	787b      	ldrb	r3, [r7, #1]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d003      	beq.n	8002136 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800212e:	887a      	ldrh	r2, [r7, #2]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002134:	e003      	b.n	800213e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002136:	887b      	ldrh	r3, [r7, #2]
 8002138:	041a      	lsls	r2, r3, #16
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	619a      	str	r2, [r3, #24]
}
 800213e:	bf00      	nop
 8002140:	370c      	adds	r7, #12
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
	...

0800214c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002152:	2300      	movs	r3, #0
 8002154:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002156:	2300      	movs	r3, #0
 8002158:	603b      	str	r3, [r7, #0]
 800215a:	4b20      	ldr	r3, [pc, #128]	; (80021dc <HAL_PWREx_EnableOverDrive+0x90>)
 800215c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215e:	4a1f      	ldr	r2, [pc, #124]	; (80021dc <HAL_PWREx_EnableOverDrive+0x90>)
 8002160:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002164:	6413      	str	r3, [r2, #64]	; 0x40
 8002166:	4b1d      	ldr	r3, [pc, #116]	; (80021dc <HAL_PWREx_EnableOverDrive+0x90>)
 8002168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800216e:	603b      	str	r3, [r7, #0]
 8002170:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002172:	4b1b      	ldr	r3, [pc, #108]	; (80021e0 <HAL_PWREx_EnableOverDrive+0x94>)
 8002174:	2201      	movs	r2, #1
 8002176:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002178:	f7ff f8de 	bl	8001338 <HAL_GetTick>
 800217c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800217e:	e009      	b.n	8002194 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002180:	f7ff f8da 	bl	8001338 <HAL_GetTick>
 8002184:	4602      	mov	r2, r0
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800218e:	d901      	bls.n	8002194 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002190:	2303      	movs	r3, #3
 8002192:	e01f      	b.n	80021d4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002194:	4b13      	ldr	r3, [pc, #76]	; (80021e4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800219c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021a0:	d1ee      	bne.n	8002180 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80021a2:	4b11      	ldr	r3, [pc, #68]	; (80021e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80021a4:	2201      	movs	r2, #1
 80021a6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80021a8:	f7ff f8c6 	bl	8001338 <HAL_GetTick>
 80021ac:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80021ae:	e009      	b.n	80021c4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80021b0:	f7ff f8c2 	bl	8001338 <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80021be:	d901      	bls.n	80021c4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80021c0:	2303      	movs	r3, #3
 80021c2:	e007      	b.n	80021d4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80021c4:	4b07      	ldr	r3, [pc, #28]	; (80021e4 <HAL_PWREx_EnableOverDrive+0x98>)
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80021d0:	d1ee      	bne.n	80021b0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80021d2:	2300      	movs	r3, #0
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3708      	adds	r7, #8
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	40023800 	.word	0x40023800
 80021e0:	420e0040 	.word	0x420e0040
 80021e4:	40007000 	.word	0x40007000
 80021e8:	420e0044 	.word	0x420e0044

080021ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b086      	sub	sp, #24
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d101      	bne.n	80021fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e267      	b.n	80026ce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0301 	and.w	r3, r3, #1
 8002206:	2b00      	cmp	r3, #0
 8002208:	d075      	beq.n	80022f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800220a:	4b88      	ldr	r3, [pc, #544]	; (800242c <HAL_RCC_OscConfig+0x240>)
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	f003 030c 	and.w	r3, r3, #12
 8002212:	2b04      	cmp	r3, #4
 8002214:	d00c      	beq.n	8002230 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002216:	4b85      	ldr	r3, [pc, #532]	; (800242c <HAL_RCC_OscConfig+0x240>)
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800221e:	2b08      	cmp	r3, #8
 8002220:	d112      	bne.n	8002248 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002222:	4b82      	ldr	r3, [pc, #520]	; (800242c <HAL_RCC_OscConfig+0x240>)
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800222a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800222e:	d10b      	bne.n	8002248 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002230:	4b7e      	ldr	r3, [pc, #504]	; (800242c <HAL_RCC_OscConfig+0x240>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002238:	2b00      	cmp	r3, #0
 800223a:	d05b      	beq.n	80022f4 <HAL_RCC_OscConfig+0x108>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d157      	bne.n	80022f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	e242      	b.n	80026ce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002250:	d106      	bne.n	8002260 <HAL_RCC_OscConfig+0x74>
 8002252:	4b76      	ldr	r3, [pc, #472]	; (800242c <HAL_RCC_OscConfig+0x240>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a75      	ldr	r2, [pc, #468]	; (800242c <HAL_RCC_OscConfig+0x240>)
 8002258:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800225c:	6013      	str	r3, [r2, #0]
 800225e:	e01d      	b.n	800229c <HAL_RCC_OscConfig+0xb0>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002268:	d10c      	bne.n	8002284 <HAL_RCC_OscConfig+0x98>
 800226a:	4b70      	ldr	r3, [pc, #448]	; (800242c <HAL_RCC_OscConfig+0x240>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a6f      	ldr	r2, [pc, #444]	; (800242c <HAL_RCC_OscConfig+0x240>)
 8002270:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002274:	6013      	str	r3, [r2, #0]
 8002276:	4b6d      	ldr	r3, [pc, #436]	; (800242c <HAL_RCC_OscConfig+0x240>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a6c      	ldr	r2, [pc, #432]	; (800242c <HAL_RCC_OscConfig+0x240>)
 800227c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002280:	6013      	str	r3, [r2, #0]
 8002282:	e00b      	b.n	800229c <HAL_RCC_OscConfig+0xb0>
 8002284:	4b69      	ldr	r3, [pc, #420]	; (800242c <HAL_RCC_OscConfig+0x240>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a68      	ldr	r2, [pc, #416]	; (800242c <HAL_RCC_OscConfig+0x240>)
 800228a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800228e:	6013      	str	r3, [r2, #0]
 8002290:	4b66      	ldr	r3, [pc, #408]	; (800242c <HAL_RCC_OscConfig+0x240>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a65      	ldr	r2, [pc, #404]	; (800242c <HAL_RCC_OscConfig+0x240>)
 8002296:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800229a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d013      	beq.n	80022cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022a4:	f7ff f848 	bl	8001338 <HAL_GetTick>
 80022a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022aa:	e008      	b.n	80022be <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022ac:	f7ff f844 	bl	8001338 <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	2b64      	cmp	r3, #100	; 0x64
 80022b8:	d901      	bls.n	80022be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e207      	b.n	80026ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022be:	4b5b      	ldr	r3, [pc, #364]	; (800242c <HAL_RCC_OscConfig+0x240>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d0f0      	beq.n	80022ac <HAL_RCC_OscConfig+0xc0>
 80022ca:	e014      	b.n	80022f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022cc:	f7ff f834 	bl	8001338 <HAL_GetTick>
 80022d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022d2:	e008      	b.n	80022e6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022d4:	f7ff f830 	bl	8001338 <HAL_GetTick>
 80022d8:	4602      	mov	r2, r0
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	2b64      	cmp	r3, #100	; 0x64
 80022e0:	d901      	bls.n	80022e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e1f3      	b.n	80026ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022e6:	4b51      	ldr	r3, [pc, #324]	; (800242c <HAL_RCC_OscConfig+0x240>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d1f0      	bne.n	80022d4 <HAL_RCC_OscConfig+0xe8>
 80022f2:	e000      	b.n	80022f6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0302 	and.w	r3, r3, #2
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d063      	beq.n	80023ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002302:	4b4a      	ldr	r3, [pc, #296]	; (800242c <HAL_RCC_OscConfig+0x240>)
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	f003 030c 	and.w	r3, r3, #12
 800230a:	2b00      	cmp	r3, #0
 800230c:	d00b      	beq.n	8002326 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800230e:	4b47      	ldr	r3, [pc, #284]	; (800242c <HAL_RCC_OscConfig+0x240>)
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002316:	2b08      	cmp	r3, #8
 8002318:	d11c      	bne.n	8002354 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800231a:	4b44      	ldr	r3, [pc, #272]	; (800242c <HAL_RCC_OscConfig+0x240>)
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d116      	bne.n	8002354 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002326:	4b41      	ldr	r3, [pc, #260]	; (800242c <HAL_RCC_OscConfig+0x240>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0302 	and.w	r3, r3, #2
 800232e:	2b00      	cmp	r3, #0
 8002330:	d005      	beq.n	800233e <HAL_RCC_OscConfig+0x152>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	68db      	ldr	r3, [r3, #12]
 8002336:	2b01      	cmp	r3, #1
 8002338:	d001      	beq.n	800233e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e1c7      	b.n	80026ce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800233e:	4b3b      	ldr	r3, [pc, #236]	; (800242c <HAL_RCC_OscConfig+0x240>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	691b      	ldr	r3, [r3, #16]
 800234a:	00db      	lsls	r3, r3, #3
 800234c:	4937      	ldr	r1, [pc, #220]	; (800242c <HAL_RCC_OscConfig+0x240>)
 800234e:	4313      	orrs	r3, r2
 8002350:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002352:	e03a      	b.n	80023ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d020      	beq.n	800239e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800235c:	4b34      	ldr	r3, [pc, #208]	; (8002430 <HAL_RCC_OscConfig+0x244>)
 800235e:	2201      	movs	r2, #1
 8002360:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002362:	f7fe ffe9 	bl	8001338 <HAL_GetTick>
 8002366:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002368:	e008      	b.n	800237c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800236a:	f7fe ffe5 	bl	8001338 <HAL_GetTick>
 800236e:	4602      	mov	r2, r0
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	1ad3      	subs	r3, r2, r3
 8002374:	2b02      	cmp	r3, #2
 8002376:	d901      	bls.n	800237c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002378:	2303      	movs	r3, #3
 800237a:	e1a8      	b.n	80026ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800237c:	4b2b      	ldr	r3, [pc, #172]	; (800242c <HAL_RCC_OscConfig+0x240>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0302 	and.w	r3, r3, #2
 8002384:	2b00      	cmp	r3, #0
 8002386:	d0f0      	beq.n	800236a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002388:	4b28      	ldr	r3, [pc, #160]	; (800242c <HAL_RCC_OscConfig+0x240>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	691b      	ldr	r3, [r3, #16]
 8002394:	00db      	lsls	r3, r3, #3
 8002396:	4925      	ldr	r1, [pc, #148]	; (800242c <HAL_RCC_OscConfig+0x240>)
 8002398:	4313      	orrs	r3, r2
 800239a:	600b      	str	r3, [r1, #0]
 800239c:	e015      	b.n	80023ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800239e:	4b24      	ldr	r3, [pc, #144]	; (8002430 <HAL_RCC_OscConfig+0x244>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023a4:	f7fe ffc8 	bl	8001338 <HAL_GetTick>
 80023a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023aa:	e008      	b.n	80023be <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023ac:	f7fe ffc4 	bl	8001338 <HAL_GetTick>
 80023b0:	4602      	mov	r2, r0
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	2b02      	cmp	r3, #2
 80023b8:	d901      	bls.n	80023be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80023ba:	2303      	movs	r3, #3
 80023bc:	e187      	b.n	80026ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023be:	4b1b      	ldr	r3, [pc, #108]	; (800242c <HAL_RCC_OscConfig+0x240>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0302 	and.w	r3, r3, #2
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d1f0      	bne.n	80023ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0308 	and.w	r3, r3, #8
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d036      	beq.n	8002444 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	695b      	ldr	r3, [r3, #20]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d016      	beq.n	800240c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023de:	4b15      	ldr	r3, [pc, #84]	; (8002434 <HAL_RCC_OscConfig+0x248>)
 80023e0:	2201      	movs	r2, #1
 80023e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023e4:	f7fe ffa8 	bl	8001338 <HAL_GetTick>
 80023e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023ea:	e008      	b.n	80023fe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023ec:	f7fe ffa4 	bl	8001338 <HAL_GetTick>
 80023f0:	4602      	mov	r2, r0
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	2b02      	cmp	r3, #2
 80023f8:	d901      	bls.n	80023fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80023fa:	2303      	movs	r3, #3
 80023fc:	e167      	b.n	80026ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023fe:	4b0b      	ldr	r3, [pc, #44]	; (800242c <HAL_RCC_OscConfig+0x240>)
 8002400:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002402:	f003 0302 	and.w	r3, r3, #2
 8002406:	2b00      	cmp	r3, #0
 8002408:	d0f0      	beq.n	80023ec <HAL_RCC_OscConfig+0x200>
 800240a:	e01b      	b.n	8002444 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800240c:	4b09      	ldr	r3, [pc, #36]	; (8002434 <HAL_RCC_OscConfig+0x248>)
 800240e:	2200      	movs	r2, #0
 8002410:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002412:	f7fe ff91 	bl	8001338 <HAL_GetTick>
 8002416:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002418:	e00e      	b.n	8002438 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800241a:	f7fe ff8d 	bl	8001338 <HAL_GetTick>
 800241e:	4602      	mov	r2, r0
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	2b02      	cmp	r3, #2
 8002426:	d907      	bls.n	8002438 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002428:	2303      	movs	r3, #3
 800242a:	e150      	b.n	80026ce <HAL_RCC_OscConfig+0x4e2>
 800242c:	40023800 	.word	0x40023800
 8002430:	42470000 	.word	0x42470000
 8002434:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002438:	4b88      	ldr	r3, [pc, #544]	; (800265c <HAL_RCC_OscConfig+0x470>)
 800243a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800243c:	f003 0302 	and.w	r3, r3, #2
 8002440:	2b00      	cmp	r3, #0
 8002442:	d1ea      	bne.n	800241a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 0304 	and.w	r3, r3, #4
 800244c:	2b00      	cmp	r3, #0
 800244e:	f000 8097 	beq.w	8002580 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002452:	2300      	movs	r3, #0
 8002454:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002456:	4b81      	ldr	r3, [pc, #516]	; (800265c <HAL_RCC_OscConfig+0x470>)
 8002458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d10f      	bne.n	8002482 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002462:	2300      	movs	r3, #0
 8002464:	60bb      	str	r3, [r7, #8]
 8002466:	4b7d      	ldr	r3, [pc, #500]	; (800265c <HAL_RCC_OscConfig+0x470>)
 8002468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246a:	4a7c      	ldr	r2, [pc, #496]	; (800265c <HAL_RCC_OscConfig+0x470>)
 800246c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002470:	6413      	str	r3, [r2, #64]	; 0x40
 8002472:	4b7a      	ldr	r3, [pc, #488]	; (800265c <HAL_RCC_OscConfig+0x470>)
 8002474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800247a:	60bb      	str	r3, [r7, #8]
 800247c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800247e:	2301      	movs	r3, #1
 8002480:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002482:	4b77      	ldr	r3, [pc, #476]	; (8002660 <HAL_RCC_OscConfig+0x474>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800248a:	2b00      	cmp	r3, #0
 800248c:	d118      	bne.n	80024c0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800248e:	4b74      	ldr	r3, [pc, #464]	; (8002660 <HAL_RCC_OscConfig+0x474>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a73      	ldr	r2, [pc, #460]	; (8002660 <HAL_RCC_OscConfig+0x474>)
 8002494:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002498:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800249a:	f7fe ff4d 	bl	8001338 <HAL_GetTick>
 800249e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024a0:	e008      	b.n	80024b4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024a2:	f7fe ff49 	bl	8001338 <HAL_GetTick>
 80024a6:	4602      	mov	r2, r0
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	1ad3      	subs	r3, r2, r3
 80024ac:	2b02      	cmp	r3, #2
 80024ae:	d901      	bls.n	80024b4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80024b0:	2303      	movs	r3, #3
 80024b2:	e10c      	b.n	80026ce <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024b4:	4b6a      	ldr	r3, [pc, #424]	; (8002660 <HAL_RCC_OscConfig+0x474>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d0f0      	beq.n	80024a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d106      	bne.n	80024d6 <HAL_RCC_OscConfig+0x2ea>
 80024c8:	4b64      	ldr	r3, [pc, #400]	; (800265c <HAL_RCC_OscConfig+0x470>)
 80024ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024cc:	4a63      	ldr	r2, [pc, #396]	; (800265c <HAL_RCC_OscConfig+0x470>)
 80024ce:	f043 0301 	orr.w	r3, r3, #1
 80024d2:	6713      	str	r3, [r2, #112]	; 0x70
 80024d4:	e01c      	b.n	8002510 <HAL_RCC_OscConfig+0x324>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	2b05      	cmp	r3, #5
 80024dc:	d10c      	bne.n	80024f8 <HAL_RCC_OscConfig+0x30c>
 80024de:	4b5f      	ldr	r3, [pc, #380]	; (800265c <HAL_RCC_OscConfig+0x470>)
 80024e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024e2:	4a5e      	ldr	r2, [pc, #376]	; (800265c <HAL_RCC_OscConfig+0x470>)
 80024e4:	f043 0304 	orr.w	r3, r3, #4
 80024e8:	6713      	str	r3, [r2, #112]	; 0x70
 80024ea:	4b5c      	ldr	r3, [pc, #368]	; (800265c <HAL_RCC_OscConfig+0x470>)
 80024ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ee:	4a5b      	ldr	r2, [pc, #364]	; (800265c <HAL_RCC_OscConfig+0x470>)
 80024f0:	f043 0301 	orr.w	r3, r3, #1
 80024f4:	6713      	str	r3, [r2, #112]	; 0x70
 80024f6:	e00b      	b.n	8002510 <HAL_RCC_OscConfig+0x324>
 80024f8:	4b58      	ldr	r3, [pc, #352]	; (800265c <HAL_RCC_OscConfig+0x470>)
 80024fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024fc:	4a57      	ldr	r2, [pc, #348]	; (800265c <HAL_RCC_OscConfig+0x470>)
 80024fe:	f023 0301 	bic.w	r3, r3, #1
 8002502:	6713      	str	r3, [r2, #112]	; 0x70
 8002504:	4b55      	ldr	r3, [pc, #340]	; (800265c <HAL_RCC_OscConfig+0x470>)
 8002506:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002508:	4a54      	ldr	r2, [pc, #336]	; (800265c <HAL_RCC_OscConfig+0x470>)
 800250a:	f023 0304 	bic.w	r3, r3, #4
 800250e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d015      	beq.n	8002544 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002518:	f7fe ff0e 	bl	8001338 <HAL_GetTick>
 800251c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800251e:	e00a      	b.n	8002536 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002520:	f7fe ff0a 	bl	8001338 <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	f241 3288 	movw	r2, #5000	; 0x1388
 800252e:	4293      	cmp	r3, r2
 8002530:	d901      	bls.n	8002536 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002532:	2303      	movs	r3, #3
 8002534:	e0cb      	b.n	80026ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002536:	4b49      	ldr	r3, [pc, #292]	; (800265c <HAL_RCC_OscConfig+0x470>)
 8002538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800253a:	f003 0302 	and.w	r3, r3, #2
 800253e:	2b00      	cmp	r3, #0
 8002540:	d0ee      	beq.n	8002520 <HAL_RCC_OscConfig+0x334>
 8002542:	e014      	b.n	800256e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002544:	f7fe fef8 	bl	8001338 <HAL_GetTick>
 8002548:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800254a:	e00a      	b.n	8002562 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800254c:	f7fe fef4 	bl	8001338 <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	f241 3288 	movw	r2, #5000	; 0x1388
 800255a:	4293      	cmp	r3, r2
 800255c:	d901      	bls.n	8002562 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	e0b5      	b.n	80026ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002562:	4b3e      	ldr	r3, [pc, #248]	; (800265c <HAL_RCC_OscConfig+0x470>)
 8002564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002566:	f003 0302 	and.w	r3, r3, #2
 800256a:	2b00      	cmp	r3, #0
 800256c:	d1ee      	bne.n	800254c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800256e:	7dfb      	ldrb	r3, [r7, #23]
 8002570:	2b01      	cmp	r3, #1
 8002572:	d105      	bne.n	8002580 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002574:	4b39      	ldr	r3, [pc, #228]	; (800265c <HAL_RCC_OscConfig+0x470>)
 8002576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002578:	4a38      	ldr	r2, [pc, #224]	; (800265c <HAL_RCC_OscConfig+0x470>)
 800257a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800257e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	699b      	ldr	r3, [r3, #24]
 8002584:	2b00      	cmp	r3, #0
 8002586:	f000 80a1 	beq.w	80026cc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800258a:	4b34      	ldr	r3, [pc, #208]	; (800265c <HAL_RCC_OscConfig+0x470>)
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	f003 030c 	and.w	r3, r3, #12
 8002592:	2b08      	cmp	r3, #8
 8002594:	d05c      	beq.n	8002650 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	699b      	ldr	r3, [r3, #24]
 800259a:	2b02      	cmp	r3, #2
 800259c:	d141      	bne.n	8002622 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800259e:	4b31      	ldr	r3, [pc, #196]	; (8002664 <HAL_RCC_OscConfig+0x478>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025a4:	f7fe fec8 	bl	8001338 <HAL_GetTick>
 80025a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025aa:	e008      	b.n	80025be <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025ac:	f7fe fec4 	bl	8001338 <HAL_GetTick>
 80025b0:	4602      	mov	r2, r0
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	2b02      	cmp	r3, #2
 80025b8:	d901      	bls.n	80025be <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80025ba:	2303      	movs	r3, #3
 80025bc:	e087      	b.n	80026ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025be:	4b27      	ldr	r3, [pc, #156]	; (800265c <HAL_RCC_OscConfig+0x470>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d1f0      	bne.n	80025ac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	69da      	ldr	r2, [r3, #28]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6a1b      	ldr	r3, [r3, #32]
 80025d2:	431a      	orrs	r2, r3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d8:	019b      	lsls	r3, r3, #6
 80025da:	431a      	orrs	r2, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025e0:	085b      	lsrs	r3, r3, #1
 80025e2:	3b01      	subs	r3, #1
 80025e4:	041b      	lsls	r3, r3, #16
 80025e6:	431a      	orrs	r2, r3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ec:	061b      	lsls	r3, r3, #24
 80025ee:	491b      	ldr	r1, [pc, #108]	; (800265c <HAL_RCC_OscConfig+0x470>)
 80025f0:	4313      	orrs	r3, r2
 80025f2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025f4:	4b1b      	ldr	r3, [pc, #108]	; (8002664 <HAL_RCC_OscConfig+0x478>)
 80025f6:	2201      	movs	r2, #1
 80025f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025fa:	f7fe fe9d 	bl	8001338 <HAL_GetTick>
 80025fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002600:	e008      	b.n	8002614 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002602:	f7fe fe99 	bl	8001338 <HAL_GetTick>
 8002606:	4602      	mov	r2, r0
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	2b02      	cmp	r3, #2
 800260e:	d901      	bls.n	8002614 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002610:	2303      	movs	r3, #3
 8002612:	e05c      	b.n	80026ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002614:	4b11      	ldr	r3, [pc, #68]	; (800265c <HAL_RCC_OscConfig+0x470>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d0f0      	beq.n	8002602 <HAL_RCC_OscConfig+0x416>
 8002620:	e054      	b.n	80026cc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002622:	4b10      	ldr	r3, [pc, #64]	; (8002664 <HAL_RCC_OscConfig+0x478>)
 8002624:	2200      	movs	r2, #0
 8002626:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002628:	f7fe fe86 	bl	8001338 <HAL_GetTick>
 800262c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800262e:	e008      	b.n	8002642 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002630:	f7fe fe82 	bl	8001338 <HAL_GetTick>
 8002634:	4602      	mov	r2, r0
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	2b02      	cmp	r3, #2
 800263c:	d901      	bls.n	8002642 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800263e:	2303      	movs	r3, #3
 8002640:	e045      	b.n	80026ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002642:	4b06      	ldr	r3, [pc, #24]	; (800265c <HAL_RCC_OscConfig+0x470>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d1f0      	bne.n	8002630 <HAL_RCC_OscConfig+0x444>
 800264e:	e03d      	b.n	80026cc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	699b      	ldr	r3, [r3, #24]
 8002654:	2b01      	cmp	r3, #1
 8002656:	d107      	bne.n	8002668 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e038      	b.n	80026ce <HAL_RCC_OscConfig+0x4e2>
 800265c:	40023800 	.word	0x40023800
 8002660:	40007000 	.word	0x40007000
 8002664:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002668:	4b1b      	ldr	r3, [pc, #108]	; (80026d8 <HAL_RCC_OscConfig+0x4ec>)
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	699b      	ldr	r3, [r3, #24]
 8002672:	2b01      	cmp	r3, #1
 8002674:	d028      	beq.n	80026c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002680:	429a      	cmp	r2, r3
 8002682:	d121      	bne.n	80026c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800268e:	429a      	cmp	r2, r3
 8002690:	d11a      	bne.n	80026c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002692:	68fa      	ldr	r2, [r7, #12]
 8002694:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002698:	4013      	ands	r3, r2
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800269e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d111      	bne.n	80026c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ae:	085b      	lsrs	r3, r3, #1
 80026b0:	3b01      	subs	r3, #1
 80026b2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d107      	bne.n	80026c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d001      	beq.n	80026cc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e000      	b.n	80026ce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80026cc:	2300      	movs	r3, #0
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3718      	adds	r7, #24
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	40023800 	.word	0x40023800

080026dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b084      	sub	sp, #16
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
 80026e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d101      	bne.n	80026f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e0cc      	b.n	800288a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026f0:	4b68      	ldr	r3, [pc, #416]	; (8002894 <HAL_RCC_ClockConfig+0x1b8>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 030f 	and.w	r3, r3, #15
 80026f8:	683a      	ldr	r2, [r7, #0]
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d90c      	bls.n	8002718 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026fe:	4b65      	ldr	r3, [pc, #404]	; (8002894 <HAL_RCC_ClockConfig+0x1b8>)
 8002700:	683a      	ldr	r2, [r7, #0]
 8002702:	b2d2      	uxtb	r2, r2
 8002704:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002706:	4b63      	ldr	r3, [pc, #396]	; (8002894 <HAL_RCC_ClockConfig+0x1b8>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 030f 	and.w	r3, r3, #15
 800270e:	683a      	ldr	r2, [r7, #0]
 8002710:	429a      	cmp	r2, r3
 8002712:	d001      	beq.n	8002718 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	e0b8      	b.n	800288a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0302 	and.w	r3, r3, #2
 8002720:	2b00      	cmp	r3, #0
 8002722:	d020      	beq.n	8002766 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0304 	and.w	r3, r3, #4
 800272c:	2b00      	cmp	r3, #0
 800272e:	d005      	beq.n	800273c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002730:	4b59      	ldr	r3, [pc, #356]	; (8002898 <HAL_RCC_ClockConfig+0x1bc>)
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	4a58      	ldr	r2, [pc, #352]	; (8002898 <HAL_RCC_ClockConfig+0x1bc>)
 8002736:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800273a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 0308 	and.w	r3, r3, #8
 8002744:	2b00      	cmp	r3, #0
 8002746:	d005      	beq.n	8002754 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002748:	4b53      	ldr	r3, [pc, #332]	; (8002898 <HAL_RCC_ClockConfig+0x1bc>)
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	4a52      	ldr	r2, [pc, #328]	; (8002898 <HAL_RCC_ClockConfig+0x1bc>)
 800274e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002752:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002754:	4b50      	ldr	r3, [pc, #320]	; (8002898 <HAL_RCC_ClockConfig+0x1bc>)
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	494d      	ldr	r1, [pc, #308]	; (8002898 <HAL_RCC_ClockConfig+0x1bc>)
 8002762:	4313      	orrs	r3, r2
 8002764:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 0301 	and.w	r3, r3, #1
 800276e:	2b00      	cmp	r3, #0
 8002770:	d044      	beq.n	80027fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	2b01      	cmp	r3, #1
 8002778:	d107      	bne.n	800278a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800277a:	4b47      	ldr	r3, [pc, #284]	; (8002898 <HAL_RCC_ClockConfig+0x1bc>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d119      	bne.n	80027ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e07f      	b.n	800288a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	2b02      	cmp	r3, #2
 8002790:	d003      	beq.n	800279a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002796:	2b03      	cmp	r3, #3
 8002798:	d107      	bne.n	80027aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800279a:	4b3f      	ldr	r3, [pc, #252]	; (8002898 <HAL_RCC_ClockConfig+0x1bc>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d109      	bne.n	80027ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e06f      	b.n	800288a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027aa:	4b3b      	ldr	r3, [pc, #236]	; (8002898 <HAL_RCC_ClockConfig+0x1bc>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0302 	and.w	r3, r3, #2
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d101      	bne.n	80027ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e067      	b.n	800288a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027ba:	4b37      	ldr	r3, [pc, #220]	; (8002898 <HAL_RCC_ClockConfig+0x1bc>)
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	f023 0203 	bic.w	r2, r3, #3
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	4934      	ldr	r1, [pc, #208]	; (8002898 <HAL_RCC_ClockConfig+0x1bc>)
 80027c8:	4313      	orrs	r3, r2
 80027ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027cc:	f7fe fdb4 	bl	8001338 <HAL_GetTick>
 80027d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027d2:	e00a      	b.n	80027ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027d4:	f7fe fdb0 	bl	8001338 <HAL_GetTick>
 80027d8:	4602      	mov	r2, r0
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	f241 3288 	movw	r2, #5000	; 0x1388
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d901      	bls.n	80027ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e04f      	b.n	800288a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ea:	4b2b      	ldr	r3, [pc, #172]	; (8002898 <HAL_RCC_ClockConfig+0x1bc>)
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	f003 020c 	and.w	r2, r3, #12
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d1eb      	bne.n	80027d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027fc:	4b25      	ldr	r3, [pc, #148]	; (8002894 <HAL_RCC_ClockConfig+0x1b8>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 030f 	and.w	r3, r3, #15
 8002804:	683a      	ldr	r2, [r7, #0]
 8002806:	429a      	cmp	r2, r3
 8002808:	d20c      	bcs.n	8002824 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800280a:	4b22      	ldr	r3, [pc, #136]	; (8002894 <HAL_RCC_ClockConfig+0x1b8>)
 800280c:	683a      	ldr	r2, [r7, #0]
 800280e:	b2d2      	uxtb	r2, r2
 8002810:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002812:	4b20      	ldr	r3, [pc, #128]	; (8002894 <HAL_RCC_ClockConfig+0x1b8>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 030f 	and.w	r3, r3, #15
 800281a:	683a      	ldr	r2, [r7, #0]
 800281c:	429a      	cmp	r2, r3
 800281e:	d001      	beq.n	8002824 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e032      	b.n	800288a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0304 	and.w	r3, r3, #4
 800282c:	2b00      	cmp	r3, #0
 800282e:	d008      	beq.n	8002842 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002830:	4b19      	ldr	r3, [pc, #100]	; (8002898 <HAL_RCC_ClockConfig+0x1bc>)
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	4916      	ldr	r1, [pc, #88]	; (8002898 <HAL_RCC_ClockConfig+0x1bc>)
 800283e:	4313      	orrs	r3, r2
 8002840:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0308 	and.w	r3, r3, #8
 800284a:	2b00      	cmp	r3, #0
 800284c:	d009      	beq.n	8002862 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800284e:	4b12      	ldr	r3, [pc, #72]	; (8002898 <HAL_RCC_ClockConfig+0x1bc>)
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	691b      	ldr	r3, [r3, #16]
 800285a:	00db      	lsls	r3, r3, #3
 800285c:	490e      	ldr	r1, [pc, #56]	; (8002898 <HAL_RCC_ClockConfig+0x1bc>)
 800285e:	4313      	orrs	r3, r2
 8002860:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002862:	f000 f821 	bl	80028a8 <HAL_RCC_GetSysClockFreq>
 8002866:	4602      	mov	r2, r0
 8002868:	4b0b      	ldr	r3, [pc, #44]	; (8002898 <HAL_RCC_ClockConfig+0x1bc>)
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	091b      	lsrs	r3, r3, #4
 800286e:	f003 030f 	and.w	r3, r3, #15
 8002872:	490a      	ldr	r1, [pc, #40]	; (800289c <HAL_RCC_ClockConfig+0x1c0>)
 8002874:	5ccb      	ldrb	r3, [r1, r3]
 8002876:	fa22 f303 	lsr.w	r3, r2, r3
 800287a:	4a09      	ldr	r2, [pc, #36]	; (80028a0 <HAL_RCC_ClockConfig+0x1c4>)
 800287c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800287e:	4b09      	ldr	r3, [pc, #36]	; (80028a4 <HAL_RCC_ClockConfig+0x1c8>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4618      	mov	r0, r3
 8002884:	f7fe fd14 	bl	80012b0 <HAL_InitTick>

  return HAL_OK;
 8002888:	2300      	movs	r3, #0
}
 800288a:	4618      	mov	r0, r3
 800288c:	3710      	adds	r7, #16
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	40023c00 	.word	0x40023c00
 8002898:	40023800 	.word	0x40023800
 800289c:	080065b4 	.word	0x080065b4
 80028a0:	20000000 	.word	0x20000000
 80028a4:	20000004 	.word	0x20000004

080028a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028ac:	b094      	sub	sp, #80	; 0x50
 80028ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80028b0:	2300      	movs	r3, #0
 80028b2:	647b      	str	r3, [r7, #68]	; 0x44
 80028b4:	2300      	movs	r3, #0
 80028b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80028b8:	2300      	movs	r3, #0
 80028ba:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80028bc:	2300      	movs	r3, #0
 80028be:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028c0:	4b79      	ldr	r3, [pc, #484]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0x200>)
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	f003 030c 	and.w	r3, r3, #12
 80028c8:	2b08      	cmp	r3, #8
 80028ca:	d00d      	beq.n	80028e8 <HAL_RCC_GetSysClockFreq+0x40>
 80028cc:	2b08      	cmp	r3, #8
 80028ce:	f200 80e1 	bhi.w	8002a94 <HAL_RCC_GetSysClockFreq+0x1ec>
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d002      	beq.n	80028dc <HAL_RCC_GetSysClockFreq+0x34>
 80028d6:	2b04      	cmp	r3, #4
 80028d8:	d003      	beq.n	80028e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80028da:	e0db      	b.n	8002a94 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80028dc:	4b73      	ldr	r3, [pc, #460]	; (8002aac <HAL_RCC_GetSysClockFreq+0x204>)
 80028de:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80028e0:	e0db      	b.n	8002a9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80028e2:	4b73      	ldr	r3, [pc, #460]	; (8002ab0 <HAL_RCC_GetSysClockFreq+0x208>)
 80028e4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80028e6:	e0d8      	b.n	8002a9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028e8:	4b6f      	ldr	r3, [pc, #444]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0x200>)
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80028f0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80028f2:	4b6d      	ldr	r3, [pc, #436]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0x200>)
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d063      	beq.n	80029c6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028fe:	4b6a      	ldr	r3, [pc, #424]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	099b      	lsrs	r3, r3, #6
 8002904:	2200      	movs	r2, #0
 8002906:	63bb      	str	r3, [r7, #56]	; 0x38
 8002908:	63fa      	str	r2, [r7, #60]	; 0x3c
 800290a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800290c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002910:	633b      	str	r3, [r7, #48]	; 0x30
 8002912:	2300      	movs	r3, #0
 8002914:	637b      	str	r3, [r7, #52]	; 0x34
 8002916:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800291a:	4622      	mov	r2, r4
 800291c:	462b      	mov	r3, r5
 800291e:	f04f 0000 	mov.w	r0, #0
 8002922:	f04f 0100 	mov.w	r1, #0
 8002926:	0159      	lsls	r1, r3, #5
 8002928:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800292c:	0150      	lsls	r0, r2, #5
 800292e:	4602      	mov	r2, r0
 8002930:	460b      	mov	r3, r1
 8002932:	4621      	mov	r1, r4
 8002934:	1a51      	subs	r1, r2, r1
 8002936:	6139      	str	r1, [r7, #16]
 8002938:	4629      	mov	r1, r5
 800293a:	eb63 0301 	sbc.w	r3, r3, r1
 800293e:	617b      	str	r3, [r7, #20]
 8002940:	f04f 0200 	mov.w	r2, #0
 8002944:	f04f 0300 	mov.w	r3, #0
 8002948:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800294c:	4659      	mov	r1, fp
 800294e:	018b      	lsls	r3, r1, #6
 8002950:	4651      	mov	r1, sl
 8002952:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002956:	4651      	mov	r1, sl
 8002958:	018a      	lsls	r2, r1, #6
 800295a:	4651      	mov	r1, sl
 800295c:	ebb2 0801 	subs.w	r8, r2, r1
 8002960:	4659      	mov	r1, fp
 8002962:	eb63 0901 	sbc.w	r9, r3, r1
 8002966:	f04f 0200 	mov.w	r2, #0
 800296a:	f04f 0300 	mov.w	r3, #0
 800296e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002972:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002976:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800297a:	4690      	mov	r8, r2
 800297c:	4699      	mov	r9, r3
 800297e:	4623      	mov	r3, r4
 8002980:	eb18 0303 	adds.w	r3, r8, r3
 8002984:	60bb      	str	r3, [r7, #8]
 8002986:	462b      	mov	r3, r5
 8002988:	eb49 0303 	adc.w	r3, r9, r3
 800298c:	60fb      	str	r3, [r7, #12]
 800298e:	f04f 0200 	mov.w	r2, #0
 8002992:	f04f 0300 	mov.w	r3, #0
 8002996:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800299a:	4629      	mov	r1, r5
 800299c:	024b      	lsls	r3, r1, #9
 800299e:	4621      	mov	r1, r4
 80029a0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80029a4:	4621      	mov	r1, r4
 80029a6:	024a      	lsls	r2, r1, #9
 80029a8:	4610      	mov	r0, r2
 80029aa:	4619      	mov	r1, r3
 80029ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029ae:	2200      	movs	r2, #0
 80029b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80029b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80029b4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80029b8:	f7fd fc6a 	bl	8000290 <__aeabi_uldivmod>
 80029bc:	4602      	mov	r2, r0
 80029be:	460b      	mov	r3, r1
 80029c0:	4613      	mov	r3, r2
 80029c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80029c4:	e058      	b.n	8002a78 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029c6:	4b38      	ldr	r3, [pc, #224]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0x200>)
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	099b      	lsrs	r3, r3, #6
 80029cc:	2200      	movs	r2, #0
 80029ce:	4618      	mov	r0, r3
 80029d0:	4611      	mov	r1, r2
 80029d2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80029d6:	623b      	str	r3, [r7, #32]
 80029d8:	2300      	movs	r3, #0
 80029da:	627b      	str	r3, [r7, #36]	; 0x24
 80029dc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80029e0:	4642      	mov	r2, r8
 80029e2:	464b      	mov	r3, r9
 80029e4:	f04f 0000 	mov.w	r0, #0
 80029e8:	f04f 0100 	mov.w	r1, #0
 80029ec:	0159      	lsls	r1, r3, #5
 80029ee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029f2:	0150      	lsls	r0, r2, #5
 80029f4:	4602      	mov	r2, r0
 80029f6:	460b      	mov	r3, r1
 80029f8:	4641      	mov	r1, r8
 80029fa:	ebb2 0a01 	subs.w	sl, r2, r1
 80029fe:	4649      	mov	r1, r9
 8002a00:	eb63 0b01 	sbc.w	fp, r3, r1
 8002a04:	f04f 0200 	mov.w	r2, #0
 8002a08:	f04f 0300 	mov.w	r3, #0
 8002a0c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002a10:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002a14:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002a18:	ebb2 040a 	subs.w	r4, r2, sl
 8002a1c:	eb63 050b 	sbc.w	r5, r3, fp
 8002a20:	f04f 0200 	mov.w	r2, #0
 8002a24:	f04f 0300 	mov.w	r3, #0
 8002a28:	00eb      	lsls	r3, r5, #3
 8002a2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a2e:	00e2      	lsls	r2, r4, #3
 8002a30:	4614      	mov	r4, r2
 8002a32:	461d      	mov	r5, r3
 8002a34:	4643      	mov	r3, r8
 8002a36:	18e3      	adds	r3, r4, r3
 8002a38:	603b      	str	r3, [r7, #0]
 8002a3a:	464b      	mov	r3, r9
 8002a3c:	eb45 0303 	adc.w	r3, r5, r3
 8002a40:	607b      	str	r3, [r7, #4]
 8002a42:	f04f 0200 	mov.w	r2, #0
 8002a46:	f04f 0300 	mov.w	r3, #0
 8002a4a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a4e:	4629      	mov	r1, r5
 8002a50:	028b      	lsls	r3, r1, #10
 8002a52:	4621      	mov	r1, r4
 8002a54:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a58:	4621      	mov	r1, r4
 8002a5a:	028a      	lsls	r2, r1, #10
 8002a5c:	4610      	mov	r0, r2
 8002a5e:	4619      	mov	r1, r3
 8002a60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a62:	2200      	movs	r2, #0
 8002a64:	61bb      	str	r3, [r7, #24]
 8002a66:	61fa      	str	r2, [r7, #28]
 8002a68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a6c:	f7fd fc10 	bl	8000290 <__aeabi_uldivmod>
 8002a70:	4602      	mov	r2, r0
 8002a72:	460b      	mov	r3, r1
 8002a74:	4613      	mov	r3, r2
 8002a76:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a78:	4b0b      	ldr	r3, [pc, #44]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	0c1b      	lsrs	r3, r3, #16
 8002a7e:	f003 0303 	and.w	r3, r3, #3
 8002a82:	3301      	adds	r3, #1
 8002a84:	005b      	lsls	r3, r3, #1
 8002a86:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002a88:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002a8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a90:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a92:	e002      	b.n	8002a9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a94:	4b05      	ldr	r3, [pc, #20]	; (8002aac <HAL_RCC_GetSysClockFreq+0x204>)
 8002a96:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3750      	adds	r7, #80	; 0x50
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002aa6:	bf00      	nop
 8002aa8:	40023800 	.word	0x40023800
 8002aac:	00f42400 	.word	0x00f42400
 8002ab0:	007a1200 	.word	0x007a1200

08002ab4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ab8:	4b03      	ldr	r3, [pc, #12]	; (8002ac8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002aba:	681b      	ldr	r3, [r3, #0]
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr
 8002ac6:	bf00      	nop
 8002ac8:	20000000 	.word	0x20000000

08002acc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ad0:	f7ff fff0 	bl	8002ab4 <HAL_RCC_GetHCLKFreq>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	4b05      	ldr	r3, [pc, #20]	; (8002aec <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	0a9b      	lsrs	r3, r3, #10
 8002adc:	f003 0307 	and.w	r3, r3, #7
 8002ae0:	4903      	ldr	r1, [pc, #12]	; (8002af0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ae2:	5ccb      	ldrb	r3, [r1, r3]
 8002ae4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	40023800 	.word	0x40023800
 8002af0:	080065c4 	.word	0x080065c4

08002af4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002af8:	f7ff ffdc 	bl	8002ab4 <HAL_RCC_GetHCLKFreq>
 8002afc:	4602      	mov	r2, r0
 8002afe:	4b05      	ldr	r3, [pc, #20]	; (8002b14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	0b5b      	lsrs	r3, r3, #13
 8002b04:	f003 0307 	and.w	r3, r3, #7
 8002b08:	4903      	ldr	r1, [pc, #12]	; (8002b18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b0a:	5ccb      	ldrb	r3, [r1, r3]
 8002b0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	40023800 	.word	0x40023800
 8002b18:	080065c4 	.word	0x080065c4

08002b1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d101      	bne.n	8002b2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e041      	b.n	8002bb2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d106      	bne.n	8002b48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f7fe fa0c 	bl	8000f60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2202      	movs	r2, #2
 8002b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	3304      	adds	r3, #4
 8002b58:	4619      	mov	r1, r3
 8002b5a:	4610      	mov	r0, r2
 8002b5c:	f000 ffe2 	bl	8003b24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2201      	movs	r2, #1
 8002b74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2201      	movs	r2, #1
 8002b84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2201      	movs	r2, #1
 8002b94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2201      	movs	r2, #1
 8002bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002bb0:	2300      	movs	r3, #0
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3708      	adds	r7, #8
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
	...

08002bbc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b085      	sub	sp, #20
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d001      	beq.n	8002bd4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e04e      	b.n	8002c72 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2202      	movs	r2, #2
 8002bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	68da      	ldr	r2, [r3, #12]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f042 0201 	orr.w	r2, r2, #1
 8002bea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a23      	ldr	r2, [pc, #140]	; (8002c80 <HAL_TIM_Base_Start_IT+0xc4>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d022      	beq.n	8002c3c <HAL_TIM_Base_Start_IT+0x80>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bfe:	d01d      	beq.n	8002c3c <HAL_TIM_Base_Start_IT+0x80>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a1f      	ldr	r2, [pc, #124]	; (8002c84 <HAL_TIM_Base_Start_IT+0xc8>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d018      	beq.n	8002c3c <HAL_TIM_Base_Start_IT+0x80>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a1e      	ldr	r2, [pc, #120]	; (8002c88 <HAL_TIM_Base_Start_IT+0xcc>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d013      	beq.n	8002c3c <HAL_TIM_Base_Start_IT+0x80>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a1c      	ldr	r2, [pc, #112]	; (8002c8c <HAL_TIM_Base_Start_IT+0xd0>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d00e      	beq.n	8002c3c <HAL_TIM_Base_Start_IT+0x80>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a1b      	ldr	r2, [pc, #108]	; (8002c90 <HAL_TIM_Base_Start_IT+0xd4>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d009      	beq.n	8002c3c <HAL_TIM_Base_Start_IT+0x80>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a19      	ldr	r2, [pc, #100]	; (8002c94 <HAL_TIM_Base_Start_IT+0xd8>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d004      	beq.n	8002c3c <HAL_TIM_Base_Start_IT+0x80>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a18      	ldr	r2, [pc, #96]	; (8002c98 <HAL_TIM_Base_Start_IT+0xdc>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d111      	bne.n	8002c60 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	f003 0307 	and.w	r3, r3, #7
 8002c46:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2b06      	cmp	r3, #6
 8002c4c:	d010      	beq.n	8002c70 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f042 0201 	orr.w	r2, r2, #1
 8002c5c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c5e:	e007      	b.n	8002c70 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f042 0201 	orr.w	r2, r2, #1
 8002c6e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c70:	2300      	movs	r3, #0
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3714      	adds	r7, #20
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr
 8002c7e:	bf00      	nop
 8002c80:	40010000 	.word	0x40010000
 8002c84:	40000400 	.word	0x40000400
 8002c88:	40000800 	.word	0x40000800
 8002c8c:	40000c00 	.word	0x40000c00
 8002c90:	40010400 	.word	0x40010400
 8002c94:	40014000 	.word	0x40014000
 8002c98:	40001800 	.word	0x40001800

08002c9c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b082      	sub	sp, #8
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d101      	bne.n	8002cae <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e041      	b.n	8002d32 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d106      	bne.n	8002cc8 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f000 f839 	bl	8002d3a <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2202      	movs	r2, #2
 8002ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	3304      	adds	r3, #4
 8002cd8:	4619      	mov	r1, r3
 8002cda:	4610      	mov	r0, r2
 8002cdc:	f000 ff22 	bl	8003b24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2201      	movs	r2, #1
 8002d04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2201      	movs	r2, #1
 8002d14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2201      	movs	r2, #1
 8002d24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d30:	2300      	movs	r3, #0
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3708      	adds	r7, #8
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}

08002d3a <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8002d3a:	b480      	push	{r7}
 8002d3c:	b083      	sub	sp, #12
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8002d42:	bf00      	nop
 8002d44:	370c      	adds	r7, #12
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr
	...

08002d50 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b084      	sub	sp, #16
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d109      	bne.n	8002d78 <HAL_TIM_OC_Start_IT+0x28>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	bf14      	ite	ne
 8002d70:	2301      	movne	r3, #1
 8002d72:	2300      	moveq	r3, #0
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	e022      	b.n	8002dbe <HAL_TIM_OC_Start_IT+0x6e>
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	2b04      	cmp	r3, #4
 8002d7c:	d109      	bne.n	8002d92 <HAL_TIM_OC_Start_IT+0x42>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	bf14      	ite	ne
 8002d8a:	2301      	movne	r3, #1
 8002d8c:	2300      	moveq	r3, #0
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	e015      	b.n	8002dbe <HAL_TIM_OC_Start_IT+0x6e>
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	2b08      	cmp	r3, #8
 8002d96:	d109      	bne.n	8002dac <HAL_TIM_OC_Start_IT+0x5c>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	bf14      	ite	ne
 8002da4:	2301      	movne	r3, #1
 8002da6:	2300      	moveq	r3, #0
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	e008      	b.n	8002dbe <HAL_TIM_OC_Start_IT+0x6e>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	bf14      	ite	ne
 8002db8:	2301      	movne	r3, #1
 8002dba:	2300      	moveq	r3, #0
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d001      	beq.n	8002dc6 <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e0c7      	b.n	8002f56 <HAL_TIM_OC_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d104      	bne.n	8002dd6 <HAL_TIM_OC_Start_IT+0x86>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2202      	movs	r2, #2
 8002dd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002dd4:	e013      	b.n	8002dfe <HAL_TIM_OC_Start_IT+0xae>
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	2b04      	cmp	r3, #4
 8002dda:	d104      	bne.n	8002de6 <HAL_TIM_OC_Start_IT+0x96>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2202      	movs	r2, #2
 8002de0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002de4:	e00b      	b.n	8002dfe <HAL_TIM_OC_Start_IT+0xae>
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	2b08      	cmp	r3, #8
 8002dea:	d104      	bne.n	8002df6 <HAL_TIM_OC_Start_IT+0xa6>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2202      	movs	r2, #2
 8002df0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002df4:	e003      	b.n	8002dfe <HAL_TIM_OC_Start_IT+0xae>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2202      	movs	r2, #2
 8002dfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	2b0c      	cmp	r3, #12
 8002e02:	d841      	bhi.n	8002e88 <HAL_TIM_OC_Start_IT+0x138>
 8002e04:	a201      	add	r2, pc, #4	; (adr r2, 8002e0c <HAL_TIM_OC_Start_IT+0xbc>)
 8002e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e0a:	bf00      	nop
 8002e0c:	08002e41 	.word	0x08002e41
 8002e10:	08002e89 	.word	0x08002e89
 8002e14:	08002e89 	.word	0x08002e89
 8002e18:	08002e89 	.word	0x08002e89
 8002e1c:	08002e53 	.word	0x08002e53
 8002e20:	08002e89 	.word	0x08002e89
 8002e24:	08002e89 	.word	0x08002e89
 8002e28:	08002e89 	.word	0x08002e89
 8002e2c:	08002e65 	.word	0x08002e65
 8002e30:	08002e89 	.word	0x08002e89
 8002e34:	08002e89 	.word	0x08002e89
 8002e38:	08002e89 	.word	0x08002e89
 8002e3c:	08002e77 	.word	0x08002e77
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	68da      	ldr	r2, [r3, #12]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f042 0202 	orr.w	r2, r2, #2
 8002e4e:	60da      	str	r2, [r3, #12]
      break;
 8002e50:	e01d      	b.n	8002e8e <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	68da      	ldr	r2, [r3, #12]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f042 0204 	orr.w	r2, r2, #4
 8002e60:	60da      	str	r2, [r3, #12]
      break;
 8002e62:	e014      	b.n	8002e8e <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	68da      	ldr	r2, [r3, #12]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f042 0208 	orr.w	r2, r2, #8
 8002e72:	60da      	str	r2, [r3, #12]
      break;
 8002e74:	e00b      	b.n	8002e8e <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	68da      	ldr	r2, [r3, #12]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f042 0210 	orr.w	r2, r2, #16
 8002e84:	60da      	str	r2, [r3, #12]
      break;
 8002e86:	e002      	b.n	8002e8e <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	73fb      	strb	r3, [r7, #15]
      break;
 8002e8c:	bf00      	nop
  }

  if (status == HAL_OK)
 8002e8e:	7bfb      	ldrb	r3, [r7, #15]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d15f      	bne.n	8002f54 <HAL_TIM_OC_Start_IT+0x204>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	2201      	movs	r2, #1
 8002e9a:	6839      	ldr	r1, [r7, #0]
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f001 fa55 	bl	800434c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a2e      	ldr	r2, [pc, #184]	; (8002f60 <HAL_TIM_OC_Start_IT+0x210>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d004      	beq.n	8002eb6 <HAL_TIM_OC_Start_IT+0x166>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a2c      	ldr	r2, [pc, #176]	; (8002f64 <HAL_TIM_OC_Start_IT+0x214>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d101      	bne.n	8002eba <HAL_TIM_OC_Start_IT+0x16a>
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e000      	b.n	8002ebc <HAL_TIM_OC_Start_IT+0x16c>
 8002eba:	2300      	movs	r3, #0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d007      	beq.n	8002ed0 <HAL_TIM_OC_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ece:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a22      	ldr	r2, [pc, #136]	; (8002f60 <HAL_TIM_OC_Start_IT+0x210>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d022      	beq.n	8002f20 <HAL_TIM_OC_Start_IT+0x1d0>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ee2:	d01d      	beq.n	8002f20 <HAL_TIM_OC_Start_IT+0x1d0>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a1f      	ldr	r2, [pc, #124]	; (8002f68 <HAL_TIM_OC_Start_IT+0x218>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d018      	beq.n	8002f20 <HAL_TIM_OC_Start_IT+0x1d0>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a1e      	ldr	r2, [pc, #120]	; (8002f6c <HAL_TIM_OC_Start_IT+0x21c>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d013      	beq.n	8002f20 <HAL_TIM_OC_Start_IT+0x1d0>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a1c      	ldr	r2, [pc, #112]	; (8002f70 <HAL_TIM_OC_Start_IT+0x220>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d00e      	beq.n	8002f20 <HAL_TIM_OC_Start_IT+0x1d0>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a17      	ldr	r2, [pc, #92]	; (8002f64 <HAL_TIM_OC_Start_IT+0x214>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d009      	beq.n	8002f20 <HAL_TIM_OC_Start_IT+0x1d0>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a18      	ldr	r2, [pc, #96]	; (8002f74 <HAL_TIM_OC_Start_IT+0x224>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d004      	beq.n	8002f20 <HAL_TIM_OC_Start_IT+0x1d0>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a17      	ldr	r2, [pc, #92]	; (8002f78 <HAL_TIM_OC_Start_IT+0x228>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d111      	bne.n	8002f44 <HAL_TIM_OC_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	f003 0307 	and.w	r3, r3, #7
 8002f2a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	2b06      	cmp	r3, #6
 8002f30:	d010      	beq.n	8002f54 <HAL_TIM_OC_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f042 0201 	orr.w	r2, r2, #1
 8002f40:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f42:	e007      	b.n	8002f54 <HAL_TIM_OC_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f042 0201 	orr.w	r2, r2, #1
 8002f52:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002f54:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3710      	adds	r7, #16
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	40010000 	.word	0x40010000
 8002f64:	40010400 	.word	0x40010400
 8002f68:	40000400 	.word	0x40000400
 8002f6c:	40000800 	.word	0x40000800
 8002f70:	40000c00 	.word	0x40000c00
 8002f74:	40014000 	.word	0x40014000
 8002f78:	40001800 	.word	0x40001800

08002f7c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b082      	sub	sp, #8
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d101      	bne.n	8002f8e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e041      	b.n	8003012 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d106      	bne.n	8002fa8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f000 f839 	bl	800301a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2202      	movs	r2, #2
 8002fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	3304      	adds	r3, #4
 8002fb8:	4619      	mov	r1, r3
 8002fba:	4610      	mov	r0, r2
 8002fbc:	f000 fdb2 	bl	8003b24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2201      	movs	r2, #1
 8002fec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2201      	movs	r2, #1
 8003004:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2201      	movs	r2, #1
 800300c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003010:	2300      	movs	r3, #0
}
 8003012:	4618      	mov	r0, r3
 8003014:	3708      	adds	r7, #8
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}

0800301a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800301a:	b480      	push	{r7}
 800301c:	b083      	sub	sp, #12
 800301e:	af00      	add	r7, sp, #0
 8003020:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003022:	bf00      	nop
 8003024:	370c      	adds	r7, #12
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr
	...

08003030 <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b086      	sub	sp, #24
 8003034:	af00      	add	r7, sp, #0
 8003036:	60f8      	str	r0, [r7, #12]
 8003038:	60b9      	str	r1, [r7, #8]
 800303a:	607a      	str	r2, [r7, #4]
 800303c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800303e:	2300      	movs	r3, #0
 8003040:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d104      	bne.n	8003052 <HAL_TIM_IC_Start_DMA+0x22>
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800304e:	b2db      	uxtb	r3, r3
 8003050:	e013      	b.n	800307a <HAL_TIM_IC_Start_DMA+0x4a>
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	2b04      	cmp	r3, #4
 8003056:	d104      	bne.n	8003062 <HAL_TIM_IC_Start_DMA+0x32>
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800305e:	b2db      	uxtb	r3, r3
 8003060:	e00b      	b.n	800307a <HAL_TIM_IC_Start_DMA+0x4a>
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	2b08      	cmp	r3, #8
 8003066:	d104      	bne.n	8003072 <HAL_TIM_IC_Start_DMA+0x42>
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800306e:	b2db      	uxtb	r3, r3
 8003070:	e003      	b.n	800307a <HAL_TIM_IC_Start_DMA+0x4a>
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003078:	b2db      	uxtb	r3, r3
 800307a:	75bb      	strb	r3, [r7, #22]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d104      	bne.n	800308c <HAL_TIM_IC_Start_DMA+0x5c>
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003088:	b2db      	uxtb	r3, r3
 800308a:	e013      	b.n	80030b4 <HAL_TIM_IC_Start_DMA+0x84>
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	2b04      	cmp	r3, #4
 8003090:	d104      	bne.n	800309c <HAL_TIM_IC_Start_DMA+0x6c>
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003098:	b2db      	uxtb	r3, r3
 800309a:	e00b      	b.n	80030b4 <HAL_TIM_IC_Start_DMA+0x84>
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	2b08      	cmp	r3, #8
 80030a0:	d104      	bne.n	80030ac <HAL_TIM_IC_Start_DMA+0x7c>
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	e003      	b.n	80030b4 <HAL_TIM_IC_Start_DMA+0x84>
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	757b      	strb	r3, [r7, #21]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 80030b6:	7dbb      	ldrb	r3, [r7, #22]
 80030b8:	2b02      	cmp	r3, #2
 80030ba:	d002      	beq.n	80030c2 <HAL_TIM_IC_Start_DMA+0x92>
      || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 80030bc:	7d7b      	ldrb	r3, [r7, #21]
 80030be:	2b02      	cmp	r3, #2
 80030c0:	d101      	bne.n	80030c6 <HAL_TIM_IC_Start_DMA+0x96>
  {
    return HAL_BUSY;
 80030c2:	2302      	movs	r3, #2
 80030c4:	e146      	b.n	8003354 <HAL_TIM_IC_Start_DMA+0x324>
  }
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 80030c6:	7dbb      	ldrb	r3, [r7, #22]
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d143      	bne.n	8003154 <HAL_TIM_IC_Start_DMA+0x124>
           && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 80030cc:	7d7b      	ldrb	r3, [r7, #21]
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d140      	bne.n	8003154 <HAL_TIM_IC_Start_DMA+0x124>
  {
    if ((pData == NULL) && (Length > 0U))
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d104      	bne.n	80030e2 <HAL_TIM_IC_Start_DMA+0xb2>
 80030d8:	887b      	ldrh	r3, [r7, #2]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d001      	beq.n	80030e2 <HAL_TIM_IC_Start_DMA+0xb2>
    {
      return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e138      	b.n	8003354 <HAL_TIM_IC_Start_DMA+0x324>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d104      	bne.n	80030f2 <HAL_TIM_IC_Start_DMA+0xc2>
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2202      	movs	r2, #2
 80030ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030f0:	e013      	b.n	800311a <HAL_TIM_IC_Start_DMA+0xea>
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	2b04      	cmp	r3, #4
 80030f6:	d104      	bne.n	8003102 <HAL_TIM_IC_Start_DMA+0xd2>
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2202      	movs	r2, #2
 80030fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003100:	e00b      	b.n	800311a <HAL_TIM_IC_Start_DMA+0xea>
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	2b08      	cmp	r3, #8
 8003106:	d104      	bne.n	8003112 <HAL_TIM_IC_Start_DMA+0xe2>
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2202      	movs	r2, #2
 800310c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003110:	e003      	b.n	800311a <HAL_TIM_IC_Start_DMA+0xea>
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2202      	movs	r2, #2
 8003116:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d104      	bne.n	800312a <HAL_TIM_IC_Start_DMA+0xfa>
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2202      	movs	r2, #2
 8003124:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    if ((pData == NULL) && (Length > 0U))
 8003128:	e016      	b.n	8003158 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	2b04      	cmp	r3, #4
 800312e:	d104      	bne.n	800313a <HAL_TIM_IC_Start_DMA+0x10a>
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2202      	movs	r2, #2
 8003134:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    if ((pData == NULL) && (Length > 0U))
 8003138:	e00e      	b.n	8003158 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	2b08      	cmp	r3, #8
 800313e:	d104      	bne.n	800314a <HAL_TIM_IC_Start_DMA+0x11a>
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2202      	movs	r2, #2
 8003144:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    if ((pData == NULL) && (Length > 0U))
 8003148:	e006      	b.n	8003158 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2202      	movs	r2, #2
 800314e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    if ((pData == NULL) && (Length > 0U))
 8003152:	e001      	b.n	8003158 <HAL_TIM_IC_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	e0fd      	b.n	8003354 <HAL_TIM_IC_Start_DMA+0x324>
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	2201      	movs	r2, #1
 800315e:	68b9      	ldr	r1, [r7, #8]
 8003160:	4618      	mov	r0, r3
 8003162:	f001 f8f3 	bl	800434c <TIM_CCxChannelCmd>

  switch (Channel)
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	2b0c      	cmp	r3, #12
 800316a:	f200 80ad 	bhi.w	80032c8 <HAL_TIM_IC_Start_DMA+0x298>
 800316e:	a201      	add	r2, pc, #4	; (adr r2, 8003174 <HAL_TIM_IC_Start_DMA+0x144>)
 8003170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003174:	080031a9 	.word	0x080031a9
 8003178:	080032c9 	.word	0x080032c9
 800317c:	080032c9 	.word	0x080032c9
 8003180:	080032c9 	.word	0x080032c9
 8003184:	080031f1 	.word	0x080031f1
 8003188:	080032c9 	.word	0x080032c9
 800318c:	080032c9 	.word	0x080032c9
 8003190:	080032c9 	.word	0x080032c9
 8003194:	08003239 	.word	0x08003239
 8003198:	080032c9 	.word	0x080032c9
 800319c:	080032c9 	.word	0x080032c9
 80031a0:	080032c9 	.word	0x080032c9
 80031a4:	08003281 	.word	0x08003281
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ac:	4a6b      	ldr	r2, [pc, #428]	; (800335c <HAL_TIM_IC_Start_DMA+0x32c>)
 80031ae:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b4:	4a6a      	ldr	r2, [pc, #424]	; (8003360 <HAL_TIM_IC_Start_DMA+0x330>)
 80031b6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031bc:	4a69      	ldr	r2, [pc, #420]	; (8003364 <HAL_TIM_IC_Start_DMA+0x334>)
 80031be:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	3334      	adds	r3, #52	; 0x34
 80031ca:	4619      	mov	r1, r3
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	887b      	ldrh	r3, [r7, #2]
 80031d0:	f7fe faa2 	bl	8001718 <HAL_DMA_Start_IT>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d001      	beq.n	80031de <HAL_TIM_IC_Start_DMA+0x1ae>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e0ba      	b.n	8003354 <HAL_TIM_IC_Start_DMA+0x324>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	68da      	ldr	r2, [r3, #12]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031ec:	60da      	str	r2, [r3, #12]
      break;
 80031ee:	e06e      	b.n	80032ce <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031f4:	4a59      	ldr	r2, [pc, #356]	; (800335c <HAL_TIM_IC_Start_DMA+0x32c>)
 80031f6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031fc:	4a58      	ldr	r2, [pc, #352]	; (8003360 <HAL_TIM_IC_Start_DMA+0x330>)
 80031fe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003204:	4a57      	ldr	r2, [pc, #348]	; (8003364 <HAL_TIM_IC_Start_DMA+0x334>)
 8003206:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	3338      	adds	r3, #56	; 0x38
 8003212:	4619      	mov	r1, r3
 8003214:	687a      	ldr	r2, [r7, #4]
 8003216:	887b      	ldrh	r3, [r7, #2]
 8003218:	f7fe fa7e 	bl	8001718 <HAL_DMA_Start_IT>
 800321c:	4603      	mov	r3, r0
 800321e:	2b00      	cmp	r3, #0
 8003220:	d001      	beq.n	8003226 <HAL_TIM_IC_Start_DMA+0x1f6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e096      	b.n	8003354 <HAL_TIM_IC_Start_DMA+0x324>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	68da      	ldr	r2, [r3, #12]
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003234:	60da      	str	r2, [r3, #12]
      break;
 8003236:	e04a      	b.n	80032ce <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800323c:	4a47      	ldr	r2, [pc, #284]	; (800335c <HAL_TIM_IC_Start_DMA+0x32c>)
 800323e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003244:	4a46      	ldr	r2, [pc, #280]	; (8003360 <HAL_TIM_IC_Start_DMA+0x330>)
 8003246:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800324c:	4a45      	ldr	r2, [pc, #276]	; (8003364 <HAL_TIM_IC_Start_DMA+0x334>)
 800324e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	333c      	adds	r3, #60	; 0x3c
 800325a:	4619      	mov	r1, r3
 800325c:	687a      	ldr	r2, [r7, #4]
 800325e:	887b      	ldrh	r3, [r7, #2]
 8003260:	f7fe fa5a 	bl	8001718 <HAL_DMA_Start_IT>
 8003264:	4603      	mov	r3, r0
 8003266:	2b00      	cmp	r3, #0
 8003268:	d001      	beq.n	800326e <HAL_TIM_IC_Start_DMA+0x23e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e072      	b.n	8003354 <HAL_TIM_IC_Start_DMA+0x324>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	68da      	ldr	r2, [r3, #12]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800327c:	60da      	str	r2, [r3, #12]
      break;
 800327e:	e026      	b.n	80032ce <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003284:	4a35      	ldr	r2, [pc, #212]	; (800335c <HAL_TIM_IC_Start_DMA+0x32c>)
 8003286:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328c:	4a34      	ldr	r2, [pc, #208]	; (8003360 <HAL_TIM_IC_Start_DMA+0x330>)
 800328e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003294:	4a33      	ldr	r2, [pc, #204]	; (8003364 <HAL_TIM_IC_Start_DMA+0x334>)
 8003296:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	3340      	adds	r3, #64	; 0x40
 80032a2:	4619      	mov	r1, r3
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	887b      	ldrh	r3, [r7, #2]
 80032a8:	f7fe fa36 	bl	8001718 <HAL_DMA_Start_IT>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d001      	beq.n	80032b6 <HAL_TIM_IC_Start_DMA+0x286>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e04e      	b.n	8003354 <HAL_TIM_IC_Start_DMA+0x324>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	68da      	ldr	r2, [r3, #12]
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80032c4:	60da      	str	r2, [r3, #12]
      break;
 80032c6:	e002      	b.n	80032ce <HAL_TIM_IC_Start_DMA+0x29e>
    }

    default:
      status = HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	75fb      	strb	r3, [r7, #23]
      break;
 80032cc:	bf00      	nop
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a25      	ldr	r2, [pc, #148]	; (8003368 <HAL_TIM_IC_Start_DMA+0x338>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d022      	beq.n	800331e <HAL_TIM_IC_Start_DMA+0x2ee>
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032e0:	d01d      	beq.n	800331e <HAL_TIM_IC_Start_DMA+0x2ee>
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a21      	ldr	r2, [pc, #132]	; (800336c <HAL_TIM_IC_Start_DMA+0x33c>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d018      	beq.n	800331e <HAL_TIM_IC_Start_DMA+0x2ee>
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a1f      	ldr	r2, [pc, #124]	; (8003370 <HAL_TIM_IC_Start_DMA+0x340>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d013      	beq.n	800331e <HAL_TIM_IC_Start_DMA+0x2ee>
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a1e      	ldr	r2, [pc, #120]	; (8003374 <HAL_TIM_IC_Start_DMA+0x344>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d00e      	beq.n	800331e <HAL_TIM_IC_Start_DMA+0x2ee>
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a1c      	ldr	r2, [pc, #112]	; (8003378 <HAL_TIM_IC_Start_DMA+0x348>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d009      	beq.n	800331e <HAL_TIM_IC_Start_DMA+0x2ee>
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a1b      	ldr	r2, [pc, #108]	; (800337c <HAL_TIM_IC_Start_DMA+0x34c>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d004      	beq.n	800331e <HAL_TIM_IC_Start_DMA+0x2ee>
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a19      	ldr	r2, [pc, #100]	; (8003380 <HAL_TIM_IC_Start_DMA+0x350>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d111      	bne.n	8003342 <HAL_TIM_IC_Start_DMA+0x312>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	f003 0307 	and.w	r3, r3, #7
 8003328:	613b      	str	r3, [r7, #16]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	2b06      	cmp	r3, #6
 800332e:	d010      	beq.n	8003352 <HAL_TIM_IC_Start_DMA+0x322>
    {
      __HAL_TIM_ENABLE(htim);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f042 0201 	orr.w	r2, r2, #1
 800333e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003340:	e007      	b.n	8003352 <HAL_TIM_IC_Start_DMA+0x322>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f042 0201 	orr.w	r2, r2, #1
 8003350:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8003352:	7dfb      	ldrb	r3, [r7, #23]
}
 8003354:	4618      	mov	r0, r3
 8003356:	3718      	adds	r7, #24
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}
 800335c:	080039f5 	.word	0x080039f5
 8003360:	08003abd 	.word	0x08003abd
 8003364:	08003963 	.word	0x08003963
 8003368:	40010000 	.word	0x40010000
 800336c:	40000400 	.word	0x40000400
 8003370:	40000800 	.word	0x40000800
 8003374:	40000c00 	.word	0x40000c00
 8003378:	40010400 	.word	0x40010400
 800337c:	40014000 	.word	0x40014000
 8003380:	40001800 	.word	0x40001800

08003384 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b082      	sub	sp, #8
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	691b      	ldr	r3, [r3, #16]
 8003392:	f003 0302 	and.w	r3, r3, #2
 8003396:	2b02      	cmp	r3, #2
 8003398:	d122      	bne.n	80033e0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	f003 0302 	and.w	r3, r3, #2
 80033a4:	2b02      	cmp	r3, #2
 80033a6:	d11b      	bne.n	80033e0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f06f 0202 	mvn.w	r2, #2
 80033b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2201      	movs	r2, #1
 80033b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	699b      	ldr	r3, [r3, #24]
 80033be:	f003 0303 	and.w	r3, r3, #3
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d003      	beq.n	80033ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f7fd fb50 	bl	8000a6c <HAL_TIM_IC_CaptureCallback>
 80033cc:	e005      	b.n	80033da <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f7fd fb2c 	bl	8000a2c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033d4:	6878      	ldr	r0, [r7, #4]
 80033d6:	f000 faa6 	bl	8003926 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2200      	movs	r2, #0
 80033de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	691b      	ldr	r3, [r3, #16]
 80033e6:	f003 0304 	and.w	r3, r3, #4
 80033ea:	2b04      	cmp	r3, #4
 80033ec:	d122      	bne.n	8003434 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	f003 0304 	and.w	r3, r3, #4
 80033f8:	2b04      	cmp	r3, #4
 80033fa:	d11b      	bne.n	8003434 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f06f 0204 	mvn.w	r2, #4
 8003404:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2202      	movs	r2, #2
 800340a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	699b      	ldr	r3, [r3, #24]
 8003412:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003416:	2b00      	cmp	r3, #0
 8003418:	d003      	beq.n	8003422 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f7fd fb26 	bl	8000a6c <HAL_TIM_IC_CaptureCallback>
 8003420:	e005      	b.n	800342e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f7fd fb02 	bl	8000a2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f000 fa7c 	bl	8003926 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	691b      	ldr	r3, [r3, #16]
 800343a:	f003 0308 	and.w	r3, r3, #8
 800343e:	2b08      	cmp	r3, #8
 8003440:	d122      	bne.n	8003488 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	f003 0308 	and.w	r3, r3, #8
 800344c:	2b08      	cmp	r3, #8
 800344e:	d11b      	bne.n	8003488 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f06f 0208 	mvn.w	r2, #8
 8003458:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2204      	movs	r2, #4
 800345e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	69db      	ldr	r3, [r3, #28]
 8003466:	f003 0303 	and.w	r3, r3, #3
 800346a:	2b00      	cmp	r3, #0
 800346c:	d003      	beq.n	8003476 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f7fd fafc 	bl	8000a6c <HAL_TIM_IC_CaptureCallback>
 8003474:	e005      	b.n	8003482 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f7fd fad8 	bl	8000a2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f000 fa52 	bl	8003926 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	691b      	ldr	r3, [r3, #16]
 800348e:	f003 0310 	and.w	r3, r3, #16
 8003492:	2b10      	cmp	r3, #16
 8003494:	d122      	bne.n	80034dc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	f003 0310 	and.w	r3, r3, #16
 80034a0:	2b10      	cmp	r3, #16
 80034a2:	d11b      	bne.n	80034dc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f06f 0210 	mvn.w	r2, #16
 80034ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2208      	movs	r2, #8
 80034b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	69db      	ldr	r3, [r3, #28]
 80034ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d003      	beq.n	80034ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f7fd fad2 	bl	8000a6c <HAL_TIM_IC_CaptureCallback>
 80034c8:	e005      	b.n	80034d6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f7fd faae 	bl	8000a2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f000 fa28 	bl	8003926 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2200      	movs	r2, #0
 80034da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	691b      	ldr	r3, [r3, #16]
 80034e2:	f003 0301 	and.w	r3, r3, #1
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d10e      	bne.n	8003508 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	f003 0301 	and.w	r3, r3, #1
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d107      	bne.n	8003508 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f06f 0201 	mvn.w	r2, #1
 8003500:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f7fd fa72 	bl	80009ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	691b      	ldr	r3, [r3, #16]
 800350e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003512:	2b80      	cmp	r3, #128	; 0x80
 8003514:	d10e      	bne.n	8003534 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003520:	2b80      	cmp	r3, #128	; 0x80
 8003522:	d107      	bne.n	8003534 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800352c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f000 ffb8 	bl	80044a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	691b      	ldr	r3, [r3, #16]
 800353a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800353e:	2b40      	cmp	r3, #64	; 0x40
 8003540:	d10e      	bne.n	8003560 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800354c:	2b40      	cmp	r3, #64	; 0x40
 800354e:	d107      	bne.n	8003560 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003558:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f000 f9ed 	bl	800393a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	691b      	ldr	r3, [r3, #16]
 8003566:	f003 0320 	and.w	r3, r3, #32
 800356a:	2b20      	cmp	r3, #32
 800356c:	d10e      	bne.n	800358c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	f003 0320 	and.w	r3, r3, #32
 8003578:	2b20      	cmp	r3, #32
 800357a:	d107      	bne.n	800358c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f06f 0220 	mvn.w	r2, #32
 8003584:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f000 ff82 	bl	8004490 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800358c:	bf00      	nop
 800358e:	3708      	adds	r7, #8
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}

08003594 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b086      	sub	sp, #24
 8003598:	af00      	add	r7, sp, #0
 800359a:	60f8      	str	r0, [r7, #12]
 800359c:	60b9      	str	r1, [r7, #8]
 800359e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035a0:	2300      	movs	r3, #0
 80035a2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d101      	bne.n	80035b2 <HAL_TIM_OC_ConfigChannel+0x1e>
 80035ae:	2302      	movs	r3, #2
 80035b0:	e048      	b.n	8003644 <HAL_TIM_OC_ConfigChannel+0xb0>
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2201      	movs	r2, #1
 80035b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2b0c      	cmp	r3, #12
 80035be:	d839      	bhi.n	8003634 <HAL_TIM_OC_ConfigChannel+0xa0>
 80035c0:	a201      	add	r2, pc, #4	; (adr r2, 80035c8 <HAL_TIM_OC_ConfigChannel+0x34>)
 80035c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035c6:	bf00      	nop
 80035c8:	080035fd 	.word	0x080035fd
 80035cc:	08003635 	.word	0x08003635
 80035d0:	08003635 	.word	0x08003635
 80035d4:	08003635 	.word	0x08003635
 80035d8:	0800360b 	.word	0x0800360b
 80035dc:	08003635 	.word	0x08003635
 80035e0:	08003635 	.word	0x08003635
 80035e4:	08003635 	.word	0x08003635
 80035e8:	08003619 	.word	0x08003619
 80035ec:	08003635 	.word	0x08003635
 80035f0:	08003635 	.word	0x08003635
 80035f4:	08003635 	.word	0x08003635
 80035f8:	08003627 	.word	0x08003627
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	68b9      	ldr	r1, [r7, #8]
 8003602:	4618      	mov	r0, r3
 8003604:	f000 fb2e 	bl	8003c64 <TIM_OC1_SetConfig>
      break;
 8003608:	e017      	b.n	800363a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	68b9      	ldr	r1, [r7, #8]
 8003610:	4618      	mov	r0, r3
 8003612:	f000 fb97 	bl	8003d44 <TIM_OC2_SetConfig>
      break;
 8003616:	e010      	b.n	800363a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	68b9      	ldr	r1, [r7, #8]
 800361e:	4618      	mov	r0, r3
 8003620:	f000 fc06 	bl	8003e30 <TIM_OC3_SetConfig>
      break;
 8003624:	e009      	b.n	800363a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	68b9      	ldr	r1, [r7, #8]
 800362c:	4618      	mov	r0, r3
 800362e:	f000 fc73 	bl	8003f18 <TIM_OC4_SetConfig>
      break;
 8003632:	e002      	b.n	800363a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	75fb      	strb	r3, [r7, #23]
      break;
 8003638:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2200      	movs	r2, #0
 800363e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003642:	7dfb      	ldrb	r3, [r7, #23]
}
 8003644:	4618      	mov	r0, r3
 8003646:	3718      	adds	r7, #24
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}

0800364c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b086      	sub	sp, #24
 8003650:	af00      	add	r7, sp, #0
 8003652:	60f8      	str	r0, [r7, #12]
 8003654:	60b9      	str	r1, [r7, #8]
 8003656:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003658:	2300      	movs	r3, #0
 800365a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003662:	2b01      	cmp	r3, #1
 8003664:	d101      	bne.n	800366a <HAL_TIM_IC_ConfigChannel+0x1e>
 8003666:	2302      	movs	r3, #2
 8003668:	e088      	b.n	800377c <HAL_TIM_IC_ConfigChannel+0x130>
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2201      	movs	r2, #1
 800366e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d11b      	bne.n	80036b0 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6818      	ldr	r0, [r3, #0]
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	6819      	ldr	r1, [r3, #0]
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	685a      	ldr	r2, [r3, #4]
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	f000 fc9c 	bl	8003fc4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	699a      	ldr	r2, [r3, #24]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f022 020c 	bic.w	r2, r2, #12
 800369a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	6999      	ldr	r1, [r3, #24]
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	689a      	ldr	r2, [r3, #8]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	430a      	orrs	r2, r1
 80036ac:	619a      	str	r2, [r3, #24]
 80036ae:	e060      	b.n	8003772 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2b04      	cmp	r3, #4
 80036b4:	d11c      	bne.n	80036f0 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	6818      	ldr	r0, [r3, #0]
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	6819      	ldr	r1, [r3, #0]
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	685a      	ldr	r2, [r3, #4]
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	f000 fd20 	bl	800410a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	699a      	ldr	r2, [r3, #24]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80036d8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	6999      	ldr	r1, [r3, #24]
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	021a      	lsls	r2, r3, #8
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	430a      	orrs	r2, r1
 80036ec:	619a      	str	r2, [r3, #24]
 80036ee:	e040      	b.n	8003772 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2b08      	cmp	r3, #8
 80036f4:	d11b      	bne.n	800372e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	6818      	ldr	r0, [r3, #0]
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	6819      	ldr	r1, [r3, #0]
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	685a      	ldr	r2, [r3, #4]
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	68db      	ldr	r3, [r3, #12]
 8003706:	f000 fd6d 	bl	80041e4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	69da      	ldr	r2, [r3, #28]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f022 020c 	bic.w	r2, r2, #12
 8003718:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	69d9      	ldr	r1, [r3, #28]
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	689a      	ldr	r2, [r3, #8]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	430a      	orrs	r2, r1
 800372a:	61da      	str	r2, [r3, #28]
 800372c:	e021      	b.n	8003772 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2b0c      	cmp	r3, #12
 8003732:	d11c      	bne.n	800376e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	6818      	ldr	r0, [r3, #0]
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	6819      	ldr	r1, [r3, #0]
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	685a      	ldr	r2, [r3, #4]
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	68db      	ldr	r3, [r3, #12]
 8003744:	f000 fd8a 	bl	800425c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	69da      	ldr	r2, [r3, #28]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003756:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	69d9      	ldr	r1, [r3, #28]
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	021a      	lsls	r2, r3, #8
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	430a      	orrs	r2, r1
 800376a:	61da      	str	r2, [r3, #28]
 800376c:	e001      	b.n	8003772 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2200      	movs	r2, #0
 8003776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800377a:	7dfb      	ldrb	r3, [r7, #23]
}
 800377c:	4618      	mov	r0, r3
 800377e:	3718      	adds	r7, #24
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}

08003784 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b084      	sub	sp, #16
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
 800378c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800378e:	2300      	movs	r3, #0
 8003790:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003798:	2b01      	cmp	r3, #1
 800379a:	d101      	bne.n	80037a0 <HAL_TIM_ConfigClockSource+0x1c>
 800379c:	2302      	movs	r3, #2
 800379e:	e0b4      	b.n	800390a <HAL_TIM_ConfigClockSource+0x186>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2201      	movs	r2, #1
 80037a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2202      	movs	r2, #2
 80037ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80037be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80037c6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	68ba      	ldr	r2, [r7, #8]
 80037ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037d8:	d03e      	beq.n	8003858 <HAL_TIM_ConfigClockSource+0xd4>
 80037da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037de:	f200 8087 	bhi.w	80038f0 <HAL_TIM_ConfigClockSource+0x16c>
 80037e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037e6:	f000 8086 	beq.w	80038f6 <HAL_TIM_ConfigClockSource+0x172>
 80037ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037ee:	d87f      	bhi.n	80038f0 <HAL_TIM_ConfigClockSource+0x16c>
 80037f0:	2b70      	cmp	r3, #112	; 0x70
 80037f2:	d01a      	beq.n	800382a <HAL_TIM_ConfigClockSource+0xa6>
 80037f4:	2b70      	cmp	r3, #112	; 0x70
 80037f6:	d87b      	bhi.n	80038f0 <HAL_TIM_ConfigClockSource+0x16c>
 80037f8:	2b60      	cmp	r3, #96	; 0x60
 80037fa:	d050      	beq.n	800389e <HAL_TIM_ConfigClockSource+0x11a>
 80037fc:	2b60      	cmp	r3, #96	; 0x60
 80037fe:	d877      	bhi.n	80038f0 <HAL_TIM_ConfigClockSource+0x16c>
 8003800:	2b50      	cmp	r3, #80	; 0x50
 8003802:	d03c      	beq.n	800387e <HAL_TIM_ConfigClockSource+0xfa>
 8003804:	2b50      	cmp	r3, #80	; 0x50
 8003806:	d873      	bhi.n	80038f0 <HAL_TIM_ConfigClockSource+0x16c>
 8003808:	2b40      	cmp	r3, #64	; 0x40
 800380a:	d058      	beq.n	80038be <HAL_TIM_ConfigClockSource+0x13a>
 800380c:	2b40      	cmp	r3, #64	; 0x40
 800380e:	d86f      	bhi.n	80038f0 <HAL_TIM_ConfigClockSource+0x16c>
 8003810:	2b30      	cmp	r3, #48	; 0x30
 8003812:	d064      	beq.n	80038de <HAL_TIM_ConfigClockSource+0x15a>
 8003814:	2b30      	cmp	r3, #48	; 0x30
 8003816:	d86b      	bhi.n	80038f0 <HAL_TIM_ConfigClockSource+0x16c>
 8003818:	2b20      	cmp	r3, #32
 800381a:	d060      	beq.n	80038de <HAL_TIM_ConfigClockSource+0x15a>
 800381c:	2b20      	cmp	r3, #32
 800381e:	d867      	bhi.n	80038f0 <HAL_TIM_ConfigClockSource+0x16c>
 8003820:	2b00      	cmp	r3, #0
 8003822:	d05c      	beq.n	80038de <HAL_TIM_ConfigClockSource+0x15a>
 8003824:	2b10      	cmp	r3, #16
 8003826:	d05a      	beq.n	80038de <HAL_TIM_ConfigClockSource+0x15a>
 8003828:	e062      	b.n	80038f0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6818      	ldr	r0, [r3, #0]
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	6899      	ldr	r1, [r3, #8]
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	685a      	ldr	r2, [r3, #4]
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	68db      	ldr	r3, [r3, #12]
 800383a:	f000 fd67 	bl	800430c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800384c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	68ba      	ldr	r2, [r7, #8]
 8003854:	609a      	str	r2, [r3, #8]
      break;
 8003856:	e04f      	b.n	80038f8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6818      	ldr	r0, [r3, #0]
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	6899      	ldr	r1, [r3, #8]
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	685a      	ldr	r2, [r3, #4]
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	68db      	ldr	r3, [r3, #12]
 8003868:	f000 fd50 	bl	800430c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	689a      	ldr	r2, [r3, #8]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800387a:	609a      	str	r2, [r3, #8]
      break;
 800387c:	e03c      	b.n	80038f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6818      	ldr	r0, [r3, #0]
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	6859      	ldr	r1, [r3, #4]
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	68db      	ldr	r3, [r3, #12]
 800388a:	461a      	mov	r2, r3
 800388c:	f000 fc0e 	bl	80040ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	2150      	movs	r1, #80	; 0x50
 8003896:	4618      	mov	r0, r3
 8003898:	f000 fd1d 	bl	80042d6 <TIM_ITRx_SetConfig>
      break;
 800389c:	e02c      	b.n	80038f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6818      	ldr	r0, [r3, #0]
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	6859      	ldr	r1, [r3, #4]
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	68db      	ldr	r3, [r3, #12]
 80038aa:	461a      	mov	r2, r3
 80038ac:	f000 fc6a 	bl	8004184 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	2160      	movs	r1, #96	; 0x60
 80038b6:	4618      	mov	r0, r3
 80038b8:	f000 fd0d 	bl	80042d6 <TIM_ITRx_SetConfig>
      break;
 80038bc:	e01c      	b.n	80038f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6818      	ldr	r0, [r3, #0]
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	6859      	ldr	r1, [r3, #4]
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	68db      	ldr	r3, [r3, #12]
 80038ca:	461a      	mov	r2, r3
 80038cc:	f000 fbee 	bl	80040ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	2140      	movs	r1, #64	; 0x40
 80038d6:	4618      	mov	r0, r3
 80038d8:	f000 fcfd 	bl	80042d6 <TIM_ITRx_SetConfig>
      break;
 80038dc:	e00c      	b.n	80038f8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4619      	mov	r1, r3
 80038e8:	4610      	mov	r0, r2
 80038ea:	f000 fcf4 	bl	80042d6 <TIM_ITRx_SetConfig>
      break;
 80038ee:	e003      	b.n	80038f8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	73fb      	strb	r3, [r7, #15]
      break;
 80038f4:	e000      	b.n	80038f8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80038f6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2201      	movs	r2, #1
 80038fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2200      	movs	r2, #0
 8003904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003908:	7bfb      	ldrb	r3, [r7, #15]
}
 800390a:	4618      	mov	r0, r3
 800390c:	3710      	adds	r7, #16
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}

08003912 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003912:	b480      	push	{r7}
 8003914:	b083      	sub	sp, #12
 8003916:	af00      	add	r7, sp, #0
 8003918:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800391a:	bf00      	nop
 800391c:	370c      	adds	r7, #12
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr

08003926 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003926:	b480      	push	{r7}
 8003928:	b083      	sub	sp, #12
 800392a:	af00      	add	r7, sp, #0
 800392c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800392e:	bf00      	nop
 8003930:	370c      	adds	r7, #12
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr

0800393a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800393a:	b480      	push	{r7}
 800393c:	b083      	sub	sp, #12
 800393e:	af00      	add	r7, sp, #0
 8003940:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003942:	bf00      	nop
 8003944:	370c      	adds	r7, #12
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr

0800394e <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800394e:	b480      	push	{r7}
 8003950:	b083      	sub	sp, #12
 8003952:	af00      	add	r7, sp, #0
 8003954:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8003956:	bf00      	nop
 8003958:	370c      	adds	r7, #12
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr

08003962 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8003962:	b580      	push	{r7, lr}
 8003964:	b084      	sub	sp, #16
 8003966:	af00      	add	r7, sp, #0
 8003968:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800396e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003974:	687a      	ldr	r2, [r7, #4]
 8003976:	429a      	cmp	r2, r3
 8003978:	d107      	bne.n	800398a <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2201      	movs	r2, #1
 800397e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2201      	movs	r2, #1
 8003984:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003988:	e02a      	b.n	80039e0 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800398e:	687a      	ldr	r2, [r7, #4]
 8003990:	429a      	cmp	r2, r3
 8003992:	d107      	bne.n	80039a4 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2202      	movs	r2, #2
 8003998:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2201      	movs	r2, #1
 800399e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039a2:	e01d      	b.n	80039e0 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d107      	bne.n	80039be <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2204      	movs	r2, #4
 80039b2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2201      	movs	r2, #1
 80039b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039bc:	e010      	b.n	80039e0 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c2:	687a      	ldr	r2, [r7, #4]
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d107      	bne.n	80039d8 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2208      	movs	r2, #8
 80039cc:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2201      	movs	r2, #1
 80039d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80039d6:	e003      	b.n	80039e0 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2201      	movs	r2, #1
 80039dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80039e0:	68f8      	ldr	r0, [r7, #12]
 80039e2:	f7ff ffb4 	bl	800394e <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2200      	movs	r2, #0
 80039ea:	771a      	strb	r2, [r3, #28]
}
 80039ec:	bf00      	nop
 80039ee:	3710      	adds	r7, #16
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}

080039f4 <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b084      	sub	sp, #16
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a00:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d10f      	bne.n	8003a2c <TIM_DMACaptureCplt+0x38>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	69db      	ldr	r3, [r3, #28]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d146      	bne.n	8003aa8 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2201      	movs	r2, #1
 8003a26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a2a:	e03d      	b.n	8003aa8 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a30:	687a      	ldr	r2, [r7, #4]
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d10f      	bne.n	8003a56 <TIM_DMACaptureCplt+0x62>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2202      	movs	r2, #2
 8003a3a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	69db      	ldr	r3, [r3, #28]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d131      	bne.n	8003aa8 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2201      	movs	r2, #1
 8003a48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a54:	e028      	b.n	8003aa8 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d10f      	bne.n	8003a80 <TIM_DMACaptureCplt+0x8c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2204      	movs	r2, #4
 8003a64:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	69db      	ldr	r3, [r3, #28]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d11c      	bne.n	8003aa8 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2201      	movs	r2, #1
 8003a72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2201      	movs	r2, #1
 8003a7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a7e:	e013      	b.n	8003aa8 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	429a      	cmp	r2, r3
 8003a88:	d10e      	bne.n	8003aa8 <TIM_DMACaptureCplt+0xb4>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2208      	movs	r2, #8
 8003a8e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	69db      	ldr	r3, [r3, #28]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d107      	bne.n	8003aa8 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 8003aa8:	68f8      	ldr	r0, [r7, #12]
 8003aaa:	f7fc ffdf 	bl	8000a6c <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	771a      	strb	r2, [r3, #28]
}
 8003ab4:	bf00      	nop
 8003ab6:	3710      	adds	r7, #16
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}

08003abc <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b084      	sub	sp, #16
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ac8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d103      	bne.n	8003adc <TIM_DMACaptureHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	771a      	strb	r2, [r3, #28]
 8003ada:	e019      	b.n	8003b10 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d103      	bne.n	8003aee <TIM_DMACaptureHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2202      	movs	r2, #2
 8003aea:	771a      	strb	r2, [r3, #28]
 8003aec:	e010      	b.n	8003b10 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af2:	687a      	ldr	r2, [r7, #4]
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d103      	bne.n	8003b00 <TIM_DMACaptureHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2204      	movs	r2, #4
 8003afc:	771a      	strb	r2, [r3, #28]
 8003afe:	e007      	b.n	8003b10 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	429a      	cmp	r2, r3
 8003b08:	d102      	bne.n	8003b10 <TIM_DMACaptureHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2208      	movs	r2, #8
 8003b0e:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8003b10:	68f8      	ldr	r0, [r7, #12]
 8003b12:	f7ff fefe 	bl	8003912 <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	771a      	strb	r2, [r3, #28]
}
 8003b1c:	bf00      	nop
 8003b1e:	3710      	adds	r7, #16
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}

08003b24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b085      	sub	sp, #20
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
 8003b2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	4a40      	ldr	r2, [pc, #256]	; (8003c38 <TIM_Base_SetConfig+0x114>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d013      	beq.n	8003b64 <TIM_Base_SetConfig+0x40>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b42:	d00f      	beq.n	8003b64 <TIM_Base_SetConfig+0x40>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	4a3d      	ldr	r2, [pc, #244]	; (8003c3c <TIM_Base_SetConfig+0x118>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d00b      	beq.n	8003b64 <TIM_Base_SetConfig+0x40>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	4a3c      	ldr	r2, [pc, #240]	; (8003c40 <TIM_Base_SetConfig+0x11c>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d007      	beq.n	8003b64 <TIM_Base_SetConfig+0x40>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	4a3b      	ldr	r2, [pc, #236]	; (8003c44 <TIM_Base_SetConfig+0x120>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d003      	beq.n	8003b64 <TIM_Base_SetConfig+0x40>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	4a3a      	ldr	r2, [pc, #232]	; (8003c48 <TIM_Base_SetConfig+0x124>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d108      	bne.n	8003b76 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	68fa      	ldr	r2, [r7, #12]
 8003b72:	4313      	orrs	r3, r2
 8003b74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	4a2f      	ldr	r2, [pc, #188]	; (8003c38 <TIM_Base_SetConfig+0x114>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d02b      	beq.n	8003bd6 <TIM_Base_SetConfig+0xb2>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b84:	d027      	beq.n	8003bd6 <TIM_Base_SetConfig+0xb2>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	4a2c      	ldr	r2, [pc, #176]	; (8003c3c <TIM_Base_SetConfig+0x118>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d023      	beq.n	8003bd6 <TIM_Base_SetConfig+0xb2>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	4a2b      	ldr	r2, [pc, #172]	; (8003c40 <TIM_Base_SetConfig+0x11c>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d01f      	beq.n	8003bd6 <TIM_Base_SetConfig+0xb2>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	4a2a      	ldr	r2, [pc, #168]	; (8003c44 <TIM_Base_SetConfig+0x120>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d01b      	beq.n	8003bd6 <TIM_Base_SetConfig+0xb2>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	4a29      	ldr	r2, [pc, #164]	; (8003c48 <TIM_Base_SetConfig+0x124>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d017      	beq.n	8003bd6 <TIM_Base_SetConfig+0xb2>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	4a28      	ldr	r2, [pc, #160]	; (8003c4c <TIM_Base_SetConfig+0x128>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d013      	beq.n	8003bd6 <TIM_Base_SetConfig+0xb2>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	4a27      	ldr	r2, [pc, #156]	; (8003c50 <TIM_Base_SetConfig+0x12c>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d00f      	beq.n	8003bd6 <TIM_Base_SetConfig+0xb2>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	4a26      	ldr	r2, [pc, #152]	; (8003c54 <TIM_Base_SetConfig+0x130>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d00b      	beq.n	8003bd6 <TIM_Base_SetConfig+0xb2>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	4a25      	ldr	r2, [pc, #148]	; (8003c58 <TIM_Base_SetConfig+0x134>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d007      	beq.n	8003bd6 <TIM_Base_SetConfig+0xb2>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	4a24      	ldr	r2, [pc, #144]	; (8003c5c <TIM_Base_SetConfig+0x138>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d003      	beq.n	8003bd6 <TIM_Base_SetConfig+0xb2>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	4a23      	ldr	r2, [pc, #140]	; (8003c60 <TIM_Base_SetConfig+0x13c>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d108      	bne.n	8003be8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bdc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	68db      	ldr	r3, [r3, #12]
 8003be2:	68fa      	ldr	r2, [r7, #12]
 8003be4:	4313      	orrs	r3, r2
 8003be6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	695b      	ldr	r3, [r3, #20]
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	68fa      	ldr	r2, [r7, #12]
 8003bfa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	689a      	ldr	r2, [r3, #8]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	4a0a      	ldr	r2, [pc, #40]	; (8003c38 <TIM_Base_SetConfig+0x114>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d003      	beq.n	8003c1c <TIM_Base_SetConfig+0xf8>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	4a0c      	ldr	r2, [pc, #48]	; (8003c48 <TIM_Base_SetConfig+0x124>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d103      	bne.n	8003c24 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	691a      	ldr	r2, [r3, #16]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2201      	movs	r2, #1
 8003c28:	615a      	str	r2, [r3, #20]
}
 8003c2a:	bf00      	nop
 8003c2c:	3714      	adds	r7, #20
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr
 8003c36:	bf00      	nop
 8003c38:	40010000 	.word	0x40010000
 8003c3c:	40000400 	.word	0x40000400
 8003c40:	40000800 	.word	0x40000800
 8003c44:	40000c00 	.word	0x40000c00
 8003c48:	40010400 	.word	0x40010400
 8003c4c:	40014000 	.word	0x40014000
 8003c50:	40014400 	.word	0x40014400
 8003c54:	40014800 	.word	0x40014800
 8003c58:	40001800 	.word	0x40001800
 8003c5c:	40001c00 	.word	0x40001c00
 8003c60:	40002000 	.word	0x40002000

08003c64 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b087      	sub	sp, #28
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
 8003c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6a1b      	ldr	r3, [r3, #32]
 8003c72:	f023 0201 	bic.w	r2, r3, #1
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6a1b      	ldr	r3, [r3, #32]
 8003c7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	699b      	ldr	r3, [r3, #24]
 8003c8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f023 0303 	bic.w	r3, r3, #3
 8003c9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	68fa      	ldr	r2, [r7, #12]
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	f023 0302 	bic.w	r3, r3, #2
 8003cac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	697a      	ldr	r2, [r7, #20]
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	4a20      	ldr	r2, [pc, #128]	; (8003d3c <TIM_OC1_SetConfig+0xd8>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d003      	beq.n	8003cc8 <TIM_OC1_SetConfig+0x64>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	4a1f      	ldr	r2, [pc, #124]	; (8003d40 <TIM_OC1_SetConfig+0xdc>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d10c      	bne.n	8003ce2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	f023 0308 	bic.w	r3, r3, #8
 8003cce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	68db      	ldr	r3, [r3, #12]
 8003cd4:	697a      	ldr	r2, [r7, #20]
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	f023 0304 	bic.w	r3, r3, #4
 8003ce0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	4a15      	ldr	r2, [pc, #84]	; (8003d3c <TIM_OC1_SetConfig+0xd8>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d003      	beq.n	8003cf2 <TIM_OC1_SetConfig+0x8e>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	4a14      	ldr	r2, [pc, #80]	; (8003d40 <TIM_OC1_SetConfig+0xdc>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d111      	bne.n	8003d16 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003cf8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	695b      	ldr	r3, [r3, #20]
 8003d06:	693a      	ldr	r2, [r7, #16]
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	699b      	ldr	r3, [r3, #24]
 8003d10:	693a      	ldr	r2, [r7, #16]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	693a      	ldr	r2, [r7, #16]
 8003d1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	68fa      	ldr	r2, [r7, #12]
 8003d20:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	685a      	ldr	r2, [r3, #4]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	697a      	ldr	r2, [r7, #20]
 8003d2e:	621a      	str	r2, [r3, #32]
}
 8003d30:	bf00      	nop
 8003d32:	371c      	adds	r7, #28
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr
 8003d3c:	40010000 	.word	0x40010000
 8003d40:	40010400 	.word	0x40010400

08003d44 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b087      	sub	sp, #28
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
 8003d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6a1b      	ldr	r3, [r3, #32]
 8003d52:	f023 0210 	bic.w	r2, r3, #16
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6a1b      	ldr	r3, [r3, #32]
 8003d5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	699b      	ldr	r3, [r3, #24]
 8003d6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	021b      	lsls	r3, r3, #8
 8003d82:	68fa      	ldr	r2, [r7, #12]
 8003d84:	4313      	orrs	r3, r2
 8003d86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	f023 0320 	bic.w	r3, r3, #32
 8003d8e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	011b      	lsls	r3, r3, #4
 8003d96:	697a      	ldr	r2, [r7, #20]
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	4a22      	ldr	r2, [pc, #136]	; (8003e28 <TIM_OC2_SetConfig+0xe4>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d003      	beq.n	8003dac <TIM_OC2_SetConfig+0x68>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	4a21      	ldr	r2, [pc, #132]	; (8003e2c <TIM_OC2_SetConfig+0xe8>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d10d      	bne.n	8003dc8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003db2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	011b      	lsls	r3, r3, #4
 8003dba:	697a      	ldr	r2, [r7, #20]
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003dc6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	4a17      	ldr	r2, [pc, #92]	; (8003e28 <TIM_OC2_SetConfig+0xe4>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d003      	beq.n	8003dd8 <TIM_OC2_SetConfig+0x94>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	4a16      	ldr	r2, [pc, #88]	; (8003e2c <TIM_OC2_SetConfig+0xe8>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d113      	bne.n	8003e00 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003dde:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003de6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	695b      	ldr	r3, [r3, #20]
 8003dec:	009b      	lsls	r3, r3, #2
 8003dee:	693a      	ldr	r2, [r7, #16]
 8003df0:	4313      	orrs	r3, r2
 8003df2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	699b      	ldr	r3, [r3, #24]
 8003df8:	009b      	lsls	r3, r3, #2
 8003dfa:	693a      	ldr	r2, [r7, #16]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	693a      	ldr	r2, [r7, #16]
 8003e04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	68fa      	ldr	r2, [r7, #12]
 8003e0a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	685a      	ldr	r2, [r3, #4]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	697a      	ldr	r2, [r7, #20]
 8003e18:	621a      	str	r2, [r3, #32]
}
 8003e1a:	bf00      	nop
 8003e1c:	371c      	adds	r7, #28
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr
 8003e26:	bf00      	nop
 8003e28:	40010000 	.word	0x40010000
 8003e2c:	40010400 	.word	0x40010400

08003e30 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b087      	sub	sp, #28
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
 8003e38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6a1b      	ldr	r3, [r3, #32]
 8003e3e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6a1b      	ldr	r3, [r3, #32]
 8003e4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	69db      	ldr	r3, [r3, #28]
 8003e56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	f023 0303 	bic.w	r3, r3, #3
 8003e66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	68fa      	ldr	r2, [r7, #12]
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	021b      	lsls	r3, r3, #8
 8003e80:	697a      	ldr	r2, [r7, #20]
 8003e82:	4313      	orrs	r3, r2
 8003e84:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4a21      	ldr	r2, [pc, #132]	; (8003f10 <TIM_OC3_SetConfig+0xe0>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d003      	beq.n	8003e96 <TIM_OC3_SetConfig+0x66>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4a20      	ldr	r2, [pc, #128]	; (8003f14 <TIM_OC3_SetConfig+0xe4>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d10d      	bne.n	8003eb2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e9c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	68db      	ldr	r3, [r3, #12]
 8003ea2:	021b      	lsls	r3, r3, #8
 8003ea4:	697a      	ldr	r2, [r7, #20]
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003eb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4a16      	ldr	r2, [pc, #88]	; (8003f10 <TIM_OC3_SetConfig+0xe0>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d003      	beq.n	8003ec2 <TIM_OC3_SetConfig+0x92>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4a15      	ldr	r2, [pc, #84]	; (8003f14 <TIM_OC3_SetConfig+0xe4>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d113      	bne.n	8003eea <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ec8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ed0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	695b      	ldr	r3, [r3, #20]
 8003ed6:	011b      	lsls	r3, r3, #4
 8003ed8:	693a      	ldr	r2, [r7, #16]
 8003eda:	4313      	orrs	r3, r2
 8003edc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	699b      	ldr	r3, [r3, #24]
 8003ee2:	011b      	lsls	r3, r3, #4
 8003ee4:	693a      	ldr	r2, [r7, #16]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	693a      	ldr	r2, [r7, #16]
 8003eee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	68fa      	ldr	r2, [r7, #12]
 8003ef4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	685a      	ldr	r2, [r3, #4]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	697a      	ldr	r2, [r7, #20]
 8003f02:	621a      	str	r2, [r3, #32]
}
 8003f04:	bf00      	nop
 8003f06:	371c      	adds	r7, #28
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr
 8003f10:	40010000 	.word	0x40010000
 8003f14:	40010400 	.word	0x40010400

08003f18 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b087      	sub	sp, #28
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6a1b      	ldr	r3, [r3, #32]
 8003f26:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6a1b      	ldr	r3, [r3, #32]
 8003f32:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	69db      	ldr	r3, [r3, #28]
 8003f3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	021b      	lsls	r3, r3, #8
 8003f56:	68fa      	ldr	r2, [r7, #12]
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	031b      	lsls	r3, r3, #12
 8003f6a:	693a      	ldr	r2, [r7, #16]
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	4a12      	ldr	r2, [pc, #72]	; (8003fbc <TIM_OC4_SetConfig+0xa4>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d003      	beq.n	8003f80 <TIM_OC4_SetConfig+0x68>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	4a11      	ldr	r2, [pc, #68]	; (8003fc0 <TIM_OC4_SetConfig+0xa8>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d109      	bne.n	8003f94 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f86:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	695b      	ldr	r3, [r3, #20]
 8003f8c:	019b      	lsls	r3, r3, #6
 8003f8e:	697a      	ldr	r2, [r7, #20]
 8003f90:	4313      	orrs	r3, r2
 8003f92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	697a      	ldr	r2, [r7, #20]
 8003f98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	68fa      	ldr	r2, [r7, #12]
 8003f9e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	685a      	ldr	r2, [r3, #4]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	693a      	ldr	r2, [r7, #16]
 8003fac:	621a      	str	r2, [r3, #32]
}
 8003fae:	bf00      	nop
 8003fb0:	371c      	adds	r7, #28
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr
 8003fba:	bf00      	nop
 8003fbc:	40010000 	.word	0x40010000
 8003fc0:	40010400 	.word	0x40010400

08003fc4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b087      	sub	sp, #28
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	60f8      	str	r0, [r7, #12]
 8003fcc:	60b9      	str	r1, [r7, #8]
 8003fce:	607a      	str	r2, [r7, #4]
 8003fd0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	6a1b      	ldr	r3, [r3, #32]
 8003fd6:	f023 0201 	bic.w	r2, r3, #1
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	699b      	ldr	r3, [r3, #24]
 8003fe2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	6a1b      	ldr	r3, [r3, #32]
 8003fe8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	4a28      	ldr	r2, [pc, #160]	; (8004090 <TIM_TI1_SetConfig+0xcc>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d01b      	beq.n	800402a <TIM_TI1_SetConfig+0x66>
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ff8:	d017      	beq.n	800402a <TIM_TI1_SetConfig+0x66>
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	4a25      	ldr	r2, [pc, #148]	; (8004094 <TIM_TI1_SetConfig+0xd0>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d013      	beq.n	800402a <TIM_TI1_SetConfig+0x66>
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	4a24      	ldr	r2, [pc, #144]	; (8004098 <TIM_TI1_SetConfig+0xd4>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d00f      	beq.n	800402a <TIM_TI1_SetConfig+0x66>
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	4a23      	ldr	r2, [pc, #140]	; (800409c <TIM_TI1_SetConfig+0xd8>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d00b      	beq.n	800402a <TIM_TI1_SetConfig+0x66>
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	4a22      	ldr	r2, [pc, #136]	; (80040a0 <TIM_TI1_SetConfig+0xdc>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d007      	beq.n	800402a <TIM_TI1_SetConfig+0x66>
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	4a21      	ldr	r2, [pc, #132]	; (80040a4 <TIM_TI1_SetConfig+0xe0>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d003      	beq.n	800402a <TIM_TI1_SetConfig+0x66>
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	4a20      	ldr	r2, [pc, #128]	; (80040a8 <TIM_TI1_SetConfig+0xe4>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d101      	bne.n	800402e <TIM_TI1_SetConfig+0x6a>
 800402a:	2301      	movs	r3, #1
 800402c:	e000      	b.n	8004030 <TIM_TI1_SetConfig+0x6c>
 800402e:	2300      	movs	r3, #0
 8004030:	2b00      	cmp	r3, #0
 8004032:	d008      	beq.n	8004046 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	f023 0303 	bic.w	r3, r3, #3
 800403a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800403c:	697a      	ldr	r2, [r7, #20]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4313      	orrs	r3, r2
 8004042:	617b      	str	r3, [r7, #20]
 8004044:	e003      	b.n	800404e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	f043 0301 	orr.w	r3, r3, #1
 800404c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004054:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	011b      	lsls	r3, r3, #4
 800405a:	b2db      	uxtb	r3, r3
 800405c:	697a      	ldr	r2, [r7, #20]
 800405e:	4313      	orrs	r3, r2
 8004060:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	f023 030a 	bic.w	r3, r3, #10
 8004068:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	f003 030a 	and.w	r3, r3, #10
 8004070:	693a      	ldr	r2, [r7, #16]
 8004072:	4313      	orrs	r3, r2
 8004074:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	697a      	ldr	r2, [r7, #20]
 800407a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	693a      	ldr	r2, [r7, #16]
 8004080:	621a      	str	r2, [r3, #32]
}
 8004082:	bf00      	nop
 8004084:	371c      	adds	r7, #28
 8004086:	46bd      	mov	sp, r7
 8004088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408c:	4770      	bx	lr
 800408e:	bf00      	nop
 8004090:	40010000 	.word	0x40010000
 8004094:	40000400 	.word	0x40000400
 8004098:	40000800 	.word	0x40000800
 800409c:	40000c00 	.word	0x40000c00
 80040a0:	40010400 	.word	0x40010400
 80040a4:	40014000 	.word	0x40014000
 80040a8:	40001800 	.word	0x40001800

080040ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b087      	sub	sp, #28
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	60f8      	str	r0, [r7, #12]
 80040b4:	60b9      	str	r1, [r7, #8]
 80040b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	6a1b      	ldr	r3, [r3, #32]
 80040bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	6a1b      	ldr	r3, [r3, #32]
 80040c2:	f023 0201 	bic.w	r2, r3, #1
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	699b      	ldr	r3, [r3, #24]
 80040ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80040d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	011b      	lsls	r3, r3, #4
 80040dc:	693a      	ldr	r2, [r7, #16]
 80040de:	4313      	orrs	r3, r2
 80040e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	f023 030a 	bic.w	r3, r3, #10
 80040e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80040ea:	697a      	ldr	r2, [r7, #20]
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	693a      	ldr	r2, [r7, #16]
 80040f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	697a      	ldr	r2, [r7, #20]
 80040fc:	621a      	str	r2, [r3, #32]
}
 80040fe:	bf00      	nop
 8004100:	371c      	adds	r7, #28
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr

0800410a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800410a:	b480      	push	{r7}
 800410c:	b087      	sub	sp, #28
 800410e:	af00      	add	r7, sp, #0
 8004110:	60f8      	str	r0, [r7, #12]
 8004112:	60b9      	str	r1, [r7, #8]
 8004114:	607a      	str	r2, [r7, #4]
 8004116:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6a1b      	ldr	r3, [r3, #32]
 800411c:	f023 0210 	bic.w	r2, r3, #16
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	699b      	ldr	r3, [r3, #24]
 8004128:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	6a1b      	ldr	r3, [r3, #32]
 800412e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004136:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	021b      	lsls	r3, r3, #8
 800413c:	697a      	ldr	r2, [r7, #20]
 800413e:	4313      	orrs	r3, r2
 8004140:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004148:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	031b      	lsls	r3, r3, #12
 800414e:	b29b      	uxth	r3, r3
 8004150:	697a      	ldr	r2, [r7, #20]
 8004152:	4313      	orrs	r3, r2
 8004154:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800415c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	011b      	lsls	r3, r3, #4
 8004162:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004166:	693a      	ldr	r2, [r7, #16]
 8004168:	4313      	orrs	r3, r2
 800416a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	697a      	ldr	r2, [r7, #20]
 8004170:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	693a      	ldr	r2, [r7, #16]
 8004176:	621a      	str	r2, [r3, #32]
}
 8004178:	bf00      	nop
 800417a:	371c      	adds	r7, #28
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr

08004184 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004184:	b480      	push	{r7}
 8004186:	b087      	sub	sp, #28
 8004188:	af00      	add	r7, sp, #0
 800418a:	60f8      	str	r0, [r7, #12]
 800418c:	60b9      	str	r1, [r7, #8]
 800418e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	6a1b      	ldr	r3, [r3, #32]
 8004194:	f023 0210 	bic.w	r2, r3, #16
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	699b      	ldr	r3, [r3, #24]
 80041a0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	6a1b      	ldr	r3, [r3, #32]
 80041a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80041ae:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	031b      	lsls	r3, r3, #12
 80041b4:	697a      	ldr	r2, [r7, #20]
 80041b6:	4313      	orrs	r3, r2
 80041b8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80041c0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	011b      	lsls	r3, r3, #4
 80041c6:	693a      	ldr	r2, [r7, #16]
 80041c8:	4313      	orrs	r3, r2
 80041ca:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	697a      	ldr	r2, [r7, #20]
 80041d0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	693a      	ldr	r2, [r7, #16]
 80041d6:	621a      	str	r2, [r3, #32]
}
 80041d8:	bf00      	nop
 80041da:	371c      	adds	r7, #28
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr

080041e4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b087      	sub	sp, #28
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	60f8      	str	r0, [r7, #12]
 80041ec:	60b9      	str	r1, [r7, #8]
 80041ee:	607a      	str	r2, [r7, #4]
 80041f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	6a1b      	ldr	r3, [r3, #32]
 80041f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	69db      	ldr	r3, [r3, #28]
 8004202:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6a1b      	ldr	r3, [r3, #32]
 8004208:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	f023 0303 	bic.w	r3, r3, #3
 8004210:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004212:	697a      	ldr	r2, [r7, #20]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	4313      	orrs	r3, r2
 8004218:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004220:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	011b      	lsls	r3, r3, #4
 8004226:	b2db      	uxtb	r3, r3
 8004228:	697a      	ldr	r2, [r7, #20]
 800422a:	4313      	orrs	r3, r2
 800422c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004234:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	021b      	lsls	r3, r3, #8
 800423a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800423e:	693a      	ldr	r2, [r7, #16]
 8004240:	4313      	orrs	r3, r2
 8004242:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	697a      	ldr	r2, [r7, #20]
 8004248:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	693a      	ldr	r2, [r7, #16]
 800424e:	621a      	str	r2, [r3, #32]
}
 8004250:	bf00      	nop
 8004252:	371c      	adds	r7, #28
 8004254:	46bd      	mov	sp, r7
 8004256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425a:	4770      	bx	lr

0800425c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800425c:	b480      	push	{r7}
 800425e:	b087      	sub	sp, #28
 8004260:	af00      	add	r7, sp, #0
 8004262:	60f8      	str	r0, [r7, #12]
 8004264:	60b9      	str	r1, [r7, #8]
 8004266:	607a      	str	r2, [r7, #4]
 8004268:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	6a1b      	ldr	r3, [r3, #32]
 800426e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	69db      	ldr	r3, [r3, #28]
 800427a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	6a1b      	ldr	r3, [r3, #32]
 8004280:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004288:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	021b      	lsls	r3, r3, #8
 800428e:	697a      	ldr	r2, [r7, #20]
 8004290:	4313      	orrs	r3, r2
 8004292:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800429a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	031b      	lsls	r3, r3, #12
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	697a      	ldr	r2, [r7, #20]
 80042a4:	4313      	orrs	r3, r2
 80042a6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80042ae:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	031b      	lsls	r3, r3, #12
 80042b4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80042b8:	693a      	ldr	r2, [r7, #16]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	697a      	ldr	r2, [r7, #20]
 80042c2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	693a      	ldr	r2, [r7, #16]
 80042c8:	621a      	str	r2, [r3, #32]
}
 80042ca:	bf00      	nop
 80042cc:	371c      	adds	r7, #28
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr

080042d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80042d6:	b480      	push	{r7}
 80042d8:	b085      	sub	sp, #20
 80042da:	af00      	add	r7, sp, #0
 80042dc:	6078      	str	r0, [r7, #4]
 80042de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80042ee:	683a      	ldr	r2, [r7, #0]
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	4313      	orrs	r3, r2
 80042f4:	f043 0307 	orr.w	r3, r3, #7
 80042f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	68fa      	ldr	r2, [r7, #12]
 80042fe:	609a      	str	r2, [r3, #8]
}
 8004300:	bf00      	nop
 8004302:	3714      	adds	r7, #20
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr

0800430c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800430c:	b480      	push	{r7}
 800430e:	b087      	sub	sp, #28
 8004310:	af00      	add	r7, sp, #0
 8004312:	60f8      	str	r0, [r7, #12]
 8004314:	60b9      	str	r1, [r7, #8]
 8004316:	607a      	str	r2, [r7, #4]
 8004318:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004326:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	021a      	lsls	r2, r3, #8
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	431a      	orrs	r2, r3
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	4313      	orrs	r3, r2
 8004334:	697a      	ldr	r2, [r7, #20]
 8004336:	4313      	orrs	r3, r2
 8004338:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	697a      	ldr	r2, [r7, #20]
 800433e:	609a      	str	r2, [r3, #8]
}
 8004340:	bf00      	nop
 8004342:	371c      	adds	r7, #28
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr

0800434c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800434c:	b480      	push	{r7}
 800434e:	b087      	sub	sp, #28
 8004350:	af00      	add	r7, sp, #0
 8004352:	60f8      	str	r0, [r7, #12]
 8004354:	60b9      	str	r1, [r7, #8]
 8004356:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	f003 031f 	and.w	r3, r3, #31
 800435e:	2201      	movs	r2, #1
 8004360:	fa02 f303 	lsl.w	r3, r2, r3
 8004364:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	6a1a      	ldr	r2, [r3, #32]
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	43db      	mvns	r3, r3
 800436e:	401a      	ands	r2, r3
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	6a1a      	ldr	r2, [r3, #32]
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	f003 031f 	and.w	r3, r3, #31
 800437e:	6879      	ldr	r1, [r7, #4]
 8004380:	fa01 f303 	lsl.w	r3, r1, r3
 8004384:	431a      	orrs	r2, r3
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	621a      	str	r2, [r3, #32]
}
 800438a:	bf00      	nop
 800438c:	371c      	adds	r7, #28
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr
	...

08004398 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004398:	b480      	push	{r7}
 800439a:	b085      	sub	sp, #20
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
 80043a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d101      	bne.n	80043b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80043ac:	2302      	movs	r3, #2
 80043ae:	e05a      	b.n	8004466 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2201      	movs	r2, #1
 80043b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2202      	movs	r2, #2
 80043bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	68fa      	ldr	r2, [r7, #12]
 80043de:	4313      	orrs	r3, r2
 80043e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	68fa      	ldr	r2, [r7, #12]
 80043e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a21      	ldr	r2, [pc, #132]	; (8004474 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d022      	beq.n	800443a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043fc:	d01d      	beq.n	800443a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a1d      	ldr	r2, [pc, #116]	; (8004478 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d018      	beq.n	800443a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a1b      	ldr	r2, [pc, #108]	; (800447c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d013      	beq.n	800443a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a1a      	ldr	r2, [pc, #104]	; (8004480 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d00e      	beq.n	800443a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a18      	ldr	r2, [pc, #96]	; (8004484 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d009      	beq.n	800443a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a17      	ldr	r2, [pc, #92]	; (8004488 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d004      	beq.n	800443a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a15      	ldr	r2, [pc, #84]	; (800448c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d10c      	bne.n	8004454 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004440:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	68ba      	ldr	r2, [r7, #8]
 8004448:	4313      	orrs	r3, r2
 800444a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	68ba      	ldr	r2, [r7, #8]
 8004452:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2201      	movs	r2, #1
 8004458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2200      	movs	r2, #0
 8004460:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004464:	2300      	movs	r3, #0
}
 8004466:	4618      	mov	r0, r3
 8004468:	3714      	adds	r7, #20
 800446a:	46bd      	mov	sp, r7
 800446c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004470:	4770      	bx	lr
 8004472:	bf00      	nop
 8004474:	40010000 	.word	0x40010000
 8004478:	40000400 	.word	0x40000400
 800447c:	40000800 	.word	0x40000800
 8004480:	40000c00 	.word	0x40000c00
 8004484:	40010400 	.word	0x40010400
 8004488:	40014000 	.word	0x40014000
 800448c:	40001800 	.word	0x40001800

08004490 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004490:	b480      	push	{r7}
 8004492:	b083      	sub	sp, #12
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004498:	bf00      	nop
 800449a:	370c      	adds	r7, #12
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr

080044a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b083      	sub	sp, #12
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80044ac:	bf00      	nop
 80044ae:	370c      	adds	r7, #12
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr

080044b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b082      	sub	sp, #8
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d101      	bne.n	80044ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	e03f      	b.n	800454a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d106      	bne.n	80044e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2200      	movs	r2, #0
 80044da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f7fc fe4a 	bl	8001178 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2224      	movs	r2, #36	; 0x24
 80044e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	68da      	ldr	r2, [r3, #12]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80044fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80044fc:	6878      	ldr	r0, [r7, #4]
 80044fe:	f000 fd7b 	bl	8004ff8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	691a      	ldr	r2, [r3, #16]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004510:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	695a      	ldr	r2, [r3, #20]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004520:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	68da      	ldr	r2, [r3, #12]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004530:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2200      	movs	r2, #0
 8004536:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2220      	movs	r2, #32
 800453c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2220      	movs	r2, #32
 8004544:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004548:	2300      	movs	r3, #0
}
 800454a:	4618      	mov	r0, r3
 800454c:	3708      	adds	r7, #8
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}

08004552 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004552:	b580      	push	{r7, lr}
 8004554:	b08a      	sub	sp, #40	; 0x28
 8004556:	af02      	add	r7, sp, #8
 8004558:	60f8      	str	r0, [r7, #12]
 800455a:	60b9      	str	r1, [r7, #8]
 800455c:	603b      	str	r3, [r7, #0]
 800455e:	4613      	mov	r3, r2
 8004560:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004562:	2300      	movs	r3, #0
 8004564:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800456c:	b2db      	uxtb	r3, r3
 800456e:	2b20      	cmp	r3, #32
 8004570:	d17c      	bne.n	800466c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d002      	beq.n	800457e <HAL_UART_Transmit+0x2c>
 8004578:	88fb      	ldrh	r3, [r7, #6]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d101      	bne.n	8004582 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e075      	b.n	800466e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004588:	2b01      	cmp	r3, #1
 800458a:	d101      	bne.n	8004590 <HAL_UART_Transmit+0x3e>
 800458c:	2302      	movs	r3, #2
 800458e:	e06e      	b.n	800466e <HAL_UART_Transmit+0x11c>
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2201      	movs	r2, #1
 8004594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2200      	movs	r2, #0
 800459c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2221      	movs	r2, #33	; 0x21
 80045a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80045a6:	f7fc fec7 	bl	8001338 <HAL_GetTick>
 80045aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	88fa      	ldrh	r2, [r7, #6]
 80045b0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	88fa      	ldrh	r2, [r7, #6]
 80045b6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045c0:	d108      	bne.n	80045d4 <HAL_UART_Transmit+0x82>
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	691b      	ldr	r3, [r3, #16]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d104      	bne.n	80045d4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80045ca:	2300      	movs	r3, #0
 80045cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	61bb      	str	r3, [r7, #24]
 80045d2:	e003      	b.n	80045dc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80045d8:	2300      	movs	r3, #0
 80045da:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2200      	movs	r2, #0
 80045e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80045e4:	e02a      	b.n	800463c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	9300      	str	r3, [sp, #0]
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	2200      	movs	r2, #0
 80045ee:	2180      	movs	r1, #128	; 0x80
 80045f0:	68f8      	ldr	r0, [r7, #12]
 80045f2:	f000 faf9 	bl	8004be8 <UART_WaitOnFlagUntilTimeout>
 80045f6:	4603      	mov	r3, r0
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d001      	beq.n	8004600 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80045fc:	2303      	movs	r3, #3
 80045fe:	e036      	b.n	800466e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004600:	69fb      	ldr	r3, [r7, #28]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d10b      	bne.n	800461e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004606:	69bb      	ldr	r3, [r7, #24]
 8004608:	881b      	ldrh	r3, [r3, #0]
 800460a:	461a      	mov	r2, r3
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004614:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004616:	69bb      	ldr	r3, [r7, #24]
 8004618:	3302      	adds	r3, #2
 800461a:	61bb      	str	r3, [r7, #24]
 800461c:	e007      	b.n	800462e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800461e:	69fb      	ldr	r3, [r7, #28]
 8004620:	781a      	ldrb	r2, [r3, #0]
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004628:	69fb      	ldr	r3, [r7, #28]
 800462a:	3301      	adds	r3, #1
 800462c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004632:	b29b      	uxth	r3, r3
 8004634:	3b01      	subs	r3, #1
 8004636:	b29a      	uxth	r2, r3
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004640:	b29b      	uxth	r3, r3
 8004642:	2b00      	cmp	r3, #0
 8004644:	d1cf      	bne.n	80045e6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	9300      	str	r3, [sp, #0]
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	2200      	movs	r2, #0
 800464e:	2140      	movs	r1, #64	; 0x40
 8004650:	68f8      	ldr	r0, [r7, #12]
 8004652:	f000 fac9 	bl	8004be8 <UART_WaitOnFlagUntilTimeout>
 8004656:	4603      	mov	r3, r0
 8004658:	2b00      	cmp	r3, #0
 800465a:	d001      	beq.n	8004660 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800465c:	2303      	movs	r3, #3
 800465e:	e006      	b.n	800466e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2220      	movs	r2, #32
 8004664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004668:	2300      	movs	r3, #0
 800466a:	e000      	b.n	800466e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800466c:	2302      	movs	r3, #2
  }
}
 800466e:	4618      	mov	r0, r3
 8004670:	3720      	adds	r7, #32
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}
	...

08004678 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b0ba      	sub	sp, #232	; 0xe8
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	695b      	ldr	r3, [r3, #20]
 800469a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800469e:	2300      	movs	r3, #0
 80046a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80046a4:	2300      	movs	r3, #0
 80046a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80046aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046ae:	f003 030f 	and.w	r3, r3, #15
 80046b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80046b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d10f      	bne.n	80046de <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80046be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046c2:	f003 0320 	and.w	r3, r3, #32
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d009      	beq.n	80046de <HAL_UART_IRQHandler+0x66>
 80046ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046ce:	f003 0320 	and.w	r3, r3, #32
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d003      	beq.n	80046de <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f000 fbd3 	bl	8004e82 <UART_Receive_IT>
      return;
 80046dc:	e256      	b.n	8004b8c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80046de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	f000 80de 	beq.w	80048a4 <HAL_UART_IRQHandler+0x22c>
 80046e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046ec:	f003 0301 	and.w	r3, r3, #1
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d106      	bne.n	8004702 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80046f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046f8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	f000 80d1 	beq.w	80048a4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004702:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004706:	f003 0301 	and.w	r3, r3, #1
 800470a:	2b00      	cmp	r3, #0
 800470c:	d00b      	beq.n	8004726 <HAL_UART_IRQHandler+0xae>
 800470e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004712:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004716:	2b00      	cmp	r3, #0
 8004718:	d005      	beq.n	8004726 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800471e:	f043 0201 	orr.w	r2, r3, #1
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004726:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800472a:	f003 0304 	and.w	r3, r3, #4
 800472e:	2b00      	cmp	r3, #0
 8004730:	d00b      	beq.n	800474a <HAL_UART_IRQHandler+0xd2>
 8004732:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004736:	f003 0301 	and.w	r3, r3, #1
 800473a:	2b00      	cmp	r3, #0
 800473c:	d005      	beq.n	800474a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004742:	f043 0202 	orr.w	r2, r3, #2
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800474a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800474e:	f003 0302 	and.w	r3, r3, #2
 8004752:	2b00      	cmp	r3, #0
 8004754:	d00b      	beq.n	800476e <HAL_UART_IRQHandler+0xf6>
 8004756:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800475a:	f003 0301 	and.w	r3, r3, #1
 800475e:	2b00      	cmp	r3, #0
 8004760:	d005      	beq.n	800476e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004766:	f043 0204 	orr.w	r2, r3, #4
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800476e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004772:	f003 0308 	and.w	r3, r3, #8
 8004776:	2b00      	cmp	r3, #0
 8004778:	d011      	beq.n	800479e <HAL_UART_IRQHandler+0x126>
 800477a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800477e:	f003 0320 	and.w	r3, r3, #32
 8004782:	2b00      	cmp	r3, #0
 8004784:	d105      	bne.n	8004792 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004786:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800478a:	f003 0301 	and.w	r3, r3, #1
 800478e:	2b00      	cmp	r3, #0
 8004790:	d005      	beq.n	800479e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004796:	f043 0208 	orr.w	r2, r3, #8
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	f000 81ed 	beq.w	8004b82 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80047a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047ac:	f003 0320 	and.w	r3, r3, #32
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d008      	beq.n	80047c6 <HAL_UART_IRQHandler+0x14e>
 80047b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047b8:	f003 0320 	and.w	r3, r3, #32
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d002      	beq.n	80047c6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	f000 fb5e 	bl	8004e82 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	695b      	ldr	r3, [r3, #20]
 80047cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047d0:	2b40      	cmp	r3, #64	; 0x40
 80047d2:	bf0c      	ite	eq
 80047d4:	2301      	moveq	r3, #1
 80047d6:	2300      	movne	r3, #0
 80047d8:	b2db      	uxtb	r3, r3
 80047da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e2:	f003 0308 	and.w	r3, r3, #8
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d103      	bne.n	80047f2 <HAL_UART_IRQHandler+0x17a>
 80047ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d04f      	beq.n	8004892 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f000 fa66 	bl	8004cc4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	695b      	ldr	r3, [r3, #20]
 80047fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004802:	2b40      	cmp	r3, #64	; 0x40
 8004804:	d141      	bne.n	800488a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	3314      	adds	r3, #20
 800480c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004810:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004814:	e853 3f00 	ldrex	r3, [r3]
 8004818:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800481c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004820:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004824:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	3314      	adds	r3, #20
 800482e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004832:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004836:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800483a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800483e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004842:	e841 2300 	strex	r3, r2, [r1]
 8004846:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800484a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800484e:	2b00      	cmp	r3, #0
 8004850:	d1d9      	bne.n	8004806 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004856:	2b00      	cmp	r3, #0
 8004858:	d013      	beq.n	8004882 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800485e:	4a7d      	ldr	r2, [pc, #500]	; (8004a54 <HAL_UART_IRQHandler+0x3dc>)
 8004860:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004866:	4618      	mov	r0, r3
 8004868:	f7fd f81e 	bl	80018a8 <HAL_DMA_Abort_IT>
 800486c:	4603      	mov	r3, r0
 800486e:	2b00      	cmp	r3, #0
 8004870:	d016      	beq.n	80048a0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004876:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004878:	687a      	ldr	r2, [r7, #4]
 800487a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800487c:	4610      	mov	r0, r2
 800487e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004880:	e00e      	b.n	80048a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f000 f99a 	bl	8004bbc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004888:	e00a      	b.n	80048a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f000 f996 	bl	8004bbc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004890:	e006      	b.n	80048a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f000 f992 	bl	8004bbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2200      	movs	r2, #0
 800489c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800489e:	e170      	b.n	8004b82 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048a0:	bf00      	nop
    return;
 80048a2:	e16e      	b.n	8004b82 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	f040 814a 	bne.w	8004b42 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80048ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048b2:	f003 0310 	and.w	r3, r3, #16
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	f000 8143 	beq.w	8004b42 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80048bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048c0:	f003 0310 	and.w	r3, r3, #16
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	f000 813c 	beq.w	8004b42 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80048ca:	2300      	movs	r3, #0
 80048cc:	60bb      	str	r3, [r7, #8]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	60bb      	str	r3, [r7, #8]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	60bb      	str	r3, [r7, #8]
 80048de:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	695b      	ldr	r3, [r3, #20]
 80048e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048ea:	2b40      	cmp	r3, #64	; 0x40
 80048ec:	f040 80b4 	bne.w	8004a58 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80048fc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004900:	2b00      	cmp	r3, #0
 8004902:	f000 8140 	beq.w	8004b86 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800490a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800490e:	429a      	cmp	r2, r3
 8004910:	f080 8139 	bcs.w	8004b86 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800491a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004920:	69db      	ldr	r3, [r3, #28]
 8004922:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004926:	f000 8088 	beq.w	8004a3a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	330c      	adds	r3, #12
 8004930:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004934:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004938:	e853 3f00 	ldrex	r3, [r3]
 800493c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004940:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004944:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004948:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	330c      	adds	r3, #12
 8004952:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004956:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800495a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800495e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004962:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004966:	e841 2300 	strex	r3, r2, [r1]
 800496a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800496e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004972:	2b00      	cmp	r3, #0
 8004974:	d1d9      	bne.n	800492a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	3314      	adds	r3, #20
 800497c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800497e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004980:	e853 3f00 	ldrex	r3, [r3]
 8004984:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004986:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004988:	f023 0301 	bic.w	r3, r3, #1
 800498c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	3314      	adds	r3, #20
 8004996:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800499a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800499e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049a0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80049a2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80049a6:	e841 2300 	strex	r3, r2, [r1]
 80049aa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80049ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d1e1      	bne.n	8004976 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	3314      	adds	r3, #20
 80049b8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80049bc:	e853 3f00 	ldrex	r3, [r3]
 80049c0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80049c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	3314      	adds	r3, #20
 80049d2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80049d6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80049d8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049da:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80049dc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80049de:	e841 2300 	strex	r3, r2, [r1]
 80049e2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80049e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d1e3      	bne.n	80049b2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2220      	movs	r2, #32
 80049ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2200      	movs	r2, #0
 80049f6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	330c      	adds	r3, #12
 80049fe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a02:	e853 3f00 	ldrex	r3, [r3]
 8004a06:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004a08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a0a:	f023 0310 	bic.w	r3, r3, #16
 8004a0e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	330c      	adds	r3, #12
 8004a18:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004a1c:	65ba      	str	r2, [r7, #88]	; 0x58
 8004a1e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a20:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004a22:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004a24:	e841 2300 	strex	r3, r2, [r1]
 8004a28:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004a2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d1e3      	bne.n	80049f8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a34:	4618      	mov	r0, r3
 8004a36:	f7fc fec7 	bl	80017c8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	1ad3      	subs	r3, r2, r3
 8004a46:	b29b      	uxth	r3, r3
 8004a48:	4619      	mov	r1, r3
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f000 f8c0 	bl	8004bd0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004a50:	e099      	b.n	8004b86 <HAL_UART_IRQHandler+0x50e>
 8004a52:	bf00      	nop
 8004a54:	08004d8b 	.word	0x08004d8b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a60:	b29b      	uxth	r3, r3
 8004a62:	1ad3      	subs	r3, r2, r3
 8004a64:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a6c:	b29b      	uxth	r3, r3
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	f000 808b 	beq.w	8004b8a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004a74:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	f000 8086 	beq.w	8004b8a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	330c      	adds	r3, #12
 8004a84:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a88:	e853 3f00 	ldrex	r3, [r3]
 8004a8c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004a8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a90:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a94:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	330c      	adds	r3, #12
 8004a9e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004aa2:	647a      	str	r2, [r7, #68]	; 0x44
 8004aa4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aa6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004aa8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004aaa:	e841 2300 	strex	r3, r2, [r1]
 8004aae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004ab0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d1e3      	bne.n	8004a7e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	3314      	adds	r3, #20
 8004abc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac0:	e853 3f00 	ldrex	r3, [r3]
 8004ac4:	623b      	str	r3, [r7, #32]
   return(result);
 8004ac6:	6a3b      	ldr	r3, [r7, #32]
 8004ac8:	f023 0301 	bic.w	r3, r3, #1
 8004acc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	3314      	adds	r3, #20
 8004ad6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004ada:	633a      	str	r2, [r7, #48]	; 0x30
 8004adc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ade:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ae0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ae2:	e841 2300 	strex	r3, r2, [r1]
 8004ae6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d1e3      	bne.n	8004ab6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2220      	movs	r2, #32
 8004af2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2200      	movs	r2, #0
 8004afa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	330c      	adds	r3, #12
 8004b02:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	e853 3f00 	ldrex	r3, [r3]
 8004b0a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	f023 0310 	bic.w	r3, r3, #16
 8004b12:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	330c      	adds	r3, #12
 8004b1c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004b20:	61fa      	str	r2, [r7, #28]
 8004b22:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b24:	69b9      	ldr	r1, [r7, #24]
 8004b26:	69fa      	ldr	r2, [r7, #28]
 8004b28:	e841 2300 	strex	r3, r2, [r1]
 8004b2c:	617b      	str	r3, [r7, #20]
   return(result);
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d1e3      	bne.n	8004afc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004b34:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004b38:	4619      	mov	r1, r3
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f000 f848 	bl	8004bd0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004b40:	e023      	b.n	8004b8a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004b42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d009      	beq.n	8004b62 <HAL_UART_IRQHandler+0x4ea>
 8004b4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d003      	beq.n	8004b62 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f000 f929 	bl	8004db2 <UART_Transmit_IT>
    return;
 8004b60:	e014      	b.n	8004b8c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004b62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d00e      	beq.n	8004b8c <HAL_UART_IRQHandler+0x514>
 8004b6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d008      	beq.n	8004b8c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f000 f969 	bl	8004e52 <UART_EndTransmit_IT>
    return;
 8004b80:	e004      	b.n	8004b8c <HAL_UART_IRQHandler+0x514>
    return;
 8004b82:	bf00      	nop
 8004b84:	e002      	b.n	8004b8c <HAL_UART_IRQHandler+0x514>
      return;
 8004b86:	bf00      	nop
 8004b88:	e000      	b.n	8004b8c <HAL_UART_IRQHandler+0x514>
      return;
 8004b8a:	bf00      	nop
  }
}
 8004b8c:	37e8      	adds	r7, #232	; 0xe8
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}
 8004b92:	bf00      	nop

08004b94 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b083      	sub	sp, #12
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004b9c:	bf00      	nop
 8004b9e:	370c      	adds	r7, #12
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr

08004ba8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b083      	sub	sp, #12
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004bb0:	bf00      	nop
 8004bb2:	370c      	adds	r7, #12
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bba:	4770      	bx	lr

08004bbc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b083      	sub	sp, #12
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004bc4:	bf00      	nop
 8004bc6:	370c      	adds	r7, #12
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr

08004bd0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b083      	sub	sp, #12
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	460b      	mov	r3, r1
 8004bda:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004bdc:	bf00      	nop
 8004bde:	370c      	adds	r7, #12
 8004be0:	46bd      	mov	sp, r7
 8004be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be6:	4770      	bx	lr

08004be8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b090      	sub	sp, #64	; 0x40
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	60f8      	str	r0, [r7, #12]
 8004bf0:	60b9      	str	r1, [r7, #8]
 8004bf2:	603b      	str	r3, [r7, #0]
 8004bf4:	4613      	mov	r3, r2
 8004bf6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bf8:	e050      	b.n	8004c9c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c00:	d04c      	beq.n	8004c9c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004c02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d007      	beq.n	8004c18 <UART_WaitOnFlagUntilTimeout+0x30>
 8004c08:	f7fc fb96 	bl	8001338 <HAL_GetTick>
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	1ad3      	subs	r3, r2, r3
 8004c12:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c14:	429a      	cmp	r2, r3
 8004c16:	d241      	bcs.n	8004c9c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	330c      	adds	r3, #12
 8004c1e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c22:	e853 3f00 	ldrex	r3, [r3]
 8004c26:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	330c      	adds	r3, #12
 8004c36:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004c38:	637a      	str	r2, [r7, #52]	; 0x34
 8004c3a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c3c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004c3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c40:	e841 2300 	strex	r3, r2, [r1]
 8004c44:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d1e5      	bne.n	8004c18 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	3314      	adds	r3, #20
 8004c52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	e853 3f00 	ldrex	r3, [r3]
 8004c5a:	613b      	str	r3, [r7, #16]
   return(result);
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	f023 0301 	bic.w	r3, r3, #1
 8004c62:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	3314      	adds	r3, #20
 8004c6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c6c:	623a      	str	r2, [r7, #32]
 8004c6e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c70:	69f9      	ldr	r1, [r7, #28]
 8004c72:	6a3a      	ldr	r2, [r7, #32]
 8004c74:	e841 2300 	strex	r3, r2, [r1]
 8004c78:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c7a:	69bb      	ldr	r3, [r7, #24]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d1e5      	bne.n	8004c4c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2220      	movs	r2, #32
 8004c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2220      	movs	r2, #32
 8004c8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2200      	movs	r2, #0
 8004c94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004c98:	2303      	movs	r3, #3
 8004c9a:	e00f      	b.n	8004cbc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	4013      	ands	r3, r2
 8004ca6:	68ba      	ldr	r2, [r7, #8]
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	bf0c      	ite	eq
 8004cac:	2301      	moveq	r3, #1
 8004cae:	2300      	movne	r3, #0
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	461a      	mov	r2, r3
 8004cb4:	79fb      	ldrb	r3, [r7, #7]
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d09f      	beq.n	8004bfa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004cba:	2300      	movs	r3, #0
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	3740      	adds	r7, #64	; 0x40
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}

08004cc4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b095      	sub	sp, #84	; 0x54
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	330c      	adds	r3, #12
 8004cd2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cd6:	e853 3f00 	ldrex	r3, [r3]
 8004cda:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cde:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ce2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	330c      	adds	r3, #12
 8004cea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004cec:	643a      	str	r2, [r7, #64]	; 0x40
 8004cee:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cf0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004cf2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004cf4:	e841 2300 	strex	r3, r2, [r1]
 8004cf8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d1e5      	bne.n	8004ccc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	3314      	adds	r3, #20
 8004d06:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d08:	6a3b      	ldr	r3, [r7, #32]
 8004d0a:	e853 3f00 	ldrex	r3, [r3]
 8004d0e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d10:	69fb      	ldr	r3, [r7, #28]
 8004d12:	f023 0301 	bic.w	r3, r3, #1
 8004d16:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	3314      	adds	r3, #20
 8004d1e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d20:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d22:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d28:	e841 2300 	strex	r3, r2, [r1]
 8004d2c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d1e5      	bne.n	8004d00 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d119      	bne.n	8004d70 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	330c      	adds	r3, #12
 8004d42:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	e853 3f00 	ldrex	r3, [r3]
 8004d4a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	f023 0310 	bic.w	r3, r3, #16
 8004d52:	647b      	str	r3, [r7, #68]	; 0x44
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	330c      	adds	r3, #12
 8004d5a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d5c:	61ba      	str	r2, [r7, #24]
 8004d5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d60:	6979      	ldr	r1, [r7, #20]
 8004d62:	69ba      	ldr	r2, [r7, #24]
 8004d64:	e841 2300 	strex	r3, r2, [r1]
 8004d68:	613b      	str	r3, [r7, #16]
   return(result);
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d1e5      	bne.n	8004d3c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2220      	movs	r2, #32
 8004d74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004d7e:	bf00      	nop
 8004d80:	3754      	adds	r7, #84	; 0x54
 8004d82:	46bd      	mov	sp, r7
 8004d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d88:	4770      	bx	lr

08004d8a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004d8a:	b580      	push	{r7, lr}
 8004d8c:	b084      	sub	sp, #16
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d96:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2200      	movs	r2, #0
 8004da2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004da4:	68f8      	ldr	r0, [r7, #12]
 8004da6:	f7ff ff09 	bl	8004bbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004daa:	bf00      	nop
 8004dac:	3710      	adds	r7, #16
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}

08004db2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004db2:	b480      	push	{r7}
 8004db4:	b085      	sub	sp, #20
 8004db6:	af00      	add	r7, sp, #0
 8004db8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dc0:	b2db      	uxtb	r3, r3
 8004dc2:	2b21      	cmp	r3, #33	; 0x21
 8004dc4:	d13e      	bne.n	8004e44 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dce:	d114      	bne.n	8004dfa <UART_Transmit_IT+0x48>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	691b      	ldr	r3, [r3, #16]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d110      	bne.n	8004dfa <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6a1b      	ldr	r3, [r3, #32]
 8004ddc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	881b      	ldrh	r3, [r3, #0]
 8004de2:	461a      	mov	r2, r3
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004dec:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6a1b      	ldr	r3, [r3, #32]
 8004df2:	1c9a      	adds	r2, r3, #2
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	621a      	str	r2, [r3, #32]
 8004df8:	e008      	b.n	8004e0c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6a1b      	ldr	r3, [r3, #32]
 8004dfe:	1c59      	adds	r1, r3, #1
 8004e00:	687a      	ldr	r2, [r7, #4]
 8004e02:	6211      	str	r1, [r2, #32]
 8004e04:	781a      	ldrb	r2, [r3, #0]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	3b01      	subs	r3, #1
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	687a      	ldr	r2, [r7, #4]
 8004e18:	4619      	mov	r1, r3
 8004e1a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d10f      	bne.n	8004e40 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	68da      	ldr	r2, [r3, #12]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e2e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	68da      	ldr	r2, [r3, #12]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e3e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004e40:	2300      	movs	r3, #0
 8004e42:	e000      	b.n	8004e46 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004e44:	2302      	movs	r3, #2
  }
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3714      	adds	r7, #20
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr

08004e52 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004e52:	b580      	push	{r7, lr}
 8004e54:	b082      	sub	sp, #8
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	68da      	ldr	r2, [r3, #12]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e68:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2220      	movs	r2, #32
 8004e6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f7ff fe8e 	bl	8004b94 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004e78:	2300      	movs	r3, #0
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3708      	adds	r7, #8
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}

08004e82 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004e82:	b580      	push	{r7, lr}
 8004e84:	b08c      	sub	sp, #48	; 0x30
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	2b22      	cmp	r3, #34	; 0x22
 8004e94:	f040 80ab 	bne.w	8004fee <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	689b      	ldr	r3, [r3, #8]
 8004e9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ea0:	d117      	bne.n	8004ed2 <UART_Receive_IT+0x50>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	691b      	ldr	r3, [r3, #16]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d113      	bne.n	8004ed2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eb2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	b29b      	uxth	r3, r3
 8004ebc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ec0:	b29a      	uxth	r2, r3
 8004ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ec4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eca:	1c9a      	adds	r2, r3, #2
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	629a      	str	r2, [r3, #40]	; 0x28
 8004ed0:	e026      	b.n	8004f20 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004ed8:	2300      	movs	r3, #0
 8004eda:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ee4:	d007      	beq.n	8004ef6 <UART_Receive_IT+0x74>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d10a      	bne.n	8004f04 <UART_Receive_IT+0x82>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	691b      	ldr	r3, [r3, #16]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d106      	bne.n	8004f04 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	b2da      	uxtb	r2, r3
 8004efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f00:	701a      	strb	r2, [r3, #0]
 8004f02:	e008      	b.n	8004f16 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	b2db      	uxtb	r3, r3
 8004f0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f10:	b2da      	uxtb	r2, r3
 8004f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f14:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f1a:	1c5a      	adds	r2, r3, #1
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f24:	b29b      	uxth	r3, r3
 8004f26:	3b01      	subs	r3, #1
 8004f28:	b29b      	uxth	r3, r3
 8004f2a:	687a      	ldr	r2, [r7, #4]
 8004f2c:	4619      	mov	r1, r3
 8004f2e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d15a      	bne.n	8004fea <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	68da      	ldr	r2, [r3, #12]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f022 0220 	bic.w	r2, r2, #32
 8004f42:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	68da      	ldr	r2, [r3, #12]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f52:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	695a      	ldr	r2, [r3, #20]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f022 0201 	bic.w	r2, r2, #1
 8004f62:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2220      	movs	r2, #32
 8004f68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d135      	bne.n	8004fe0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2200      	movs	r2, #0
 8004f78:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	330c      	adds	r3, #12
 8004f80:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	e853 3f00 	ldrex	r3, [r3]
 8004f88:	613b      	str	r3, [r7, #16]
   return(result);
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	f023 0310 	bic.w	r3, r3, #16
 8004f90:	627b      	str	r3, [r7, #36]	; 0x24
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	330c      	adds	r3, #12
 8004f98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f9a:	623a      	str	r2, [r7, #32]
 8004f9c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f9e:	69f9      	ldr	r1, [r7, #28]
 8004fa0:	6a3a      	ldr	r2, [r7, #32]
 8004fa2:	e841 2300 	strex	r3, r2, [r1]
 8004fa6:	61bb      	str	r3, [r7, #24]
   return(result);
 8004fa8:	69bb      	ldr	r3, [r7, #24]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d1e5      	bne.n	8004f7a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f003 0310 	and.w	r3, r3, #16
 8004fb8:	2b10      	cmp	r3, #16
 8004fba:	d10a      	bne.n	8004fd2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	60fb      	str	r3, [r7, #12]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	60fb      	str	r3, [r7, #12]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	60fb      	str	r3, [r7, #12]
 8004fd0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004fd6:	4619      	mov	r1, r3
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	f7ff fdf9 	bl	8004bd0 <HAL_UARTEx_RxEventCallback>
 8004fde:	e002      	b.n	8004fe6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f7ff fde1 	bl	8004ba8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	e002      	b.n	8004ff0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004fea:	2300      	movs	r3, #0
 8004fec:	e000      	b.n	8004ff0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004fee:	2302      	movs	r3, #2
  }
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	3730      	adds	r7, #48	; 0x30
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}

08004ff8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ff8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ffc:	b0c0      	sub	sp, #256	; 0x100
 8004ffe:	af00      	add	r7, sp, #0
 8005000:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	691b      	ldr	r3, [r3, #16]
 800500c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005014:	68d9      	ldr	r1, [r3, #12]
 8005016:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	ea40 0301 	orr.w	r3, r0, r1
 8005020:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005022:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005026:	689a      	ldr	r2, [r3, #8]
 8005028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800502c:	691b      	ldr	r3, [r3, #16]
 800502e:	431a      	orrs	r2, r3
 8005030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005034:	695b      	ldr	r3, [r3, #20]
 8005036:	431a      	orrs	r2, r3
 8005038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800503c:	69db      	ldr	r3, [r3, #28]
 800503e:	4313      	orrs	r3, r2
 8005040:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	68db      	ldr	r3, [r3, #12]
 800504c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005050:	f021 010c 	bic.w	r1, r1, #12
 8005054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800505e:	430b      	orrs	r3, r1
 8005060:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005062:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	695b      	ldr	r3, [r3, #20]
 800506a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800506e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005072:	6999      	ldr	r1, [r3, #24]
 8005074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	ea40 0301 	orr.w	r3, r0, r1
 800507e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005084:	681a      	ldr	r2, [r3, #0]
 8005086:	4b8f      	ldr	r3, [pc, #572]	; (80052c4 <UART_SetConfig+0x2cc>)
 8005088:	429a      	cmp	r2, r3
 800508a:	d005      	beq.n	8005098 <UART_SetConfig+0xa0>
 800508c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	4b8d      	ldr	r3, [pc, #564]	; (80052c8 <UART_SetConfig+0x2d0>)
 8005094:	429a      	cmp	r2, r3
 8005096:	d104      	bne.n	80050a2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005098:	f7fd fd2c 	bl	8002af4 <HAL_RCC_GetPCLK2Freq>
 800509c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80050a0:	e003      	b.n	80050aa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80050a2:	f7fd fd13 	bl	8002acc <HAL_RCC_GetPCLK1Freq>
 80050a6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050ae:	69db      	ldr	r3, [r3, #28]
 80050b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050b4:	f040 810c 	bne.w	80052d0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80050b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050bc:	2200      	movs	r2, #0
 80050be:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80050c2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80050c6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80050ca:	4622      	mov	r2, r4
 80050cc:	462b      	mov	r3, r5
 80050ce:	1891      	adds	r1, r2, r2
 80050d0:	65b9      	str	r1, [r7, #88]	; 0x58
 80050d2:	415b      	adcs	r3, r3
 80050d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80050d6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80050da:	4621      	mov	r1, r4
 80050dc:	eb12 0801 	adds.w	r8, r2, r1
 80050e0:	4629      	mov	r1, r5
 80050e2:	eb43 0901 	adc.w	r9, r3, r1
 80050e6:	f04f 0200 	mov.w	r2, #0
 80050ea:	f04f 0300 	mov.w	r3, #0
 80050ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80050f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80050f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80050fa:	4690      	mov	r8, r2
 80050fc:	4699      	mov	r9, r3
 80050fe:	4623      	mov	r3, r4
 8005100:	eb18 0303 	adds.w	r3, r8, r3
 8005104:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005108:	462b      	mov	r3, r5
 800510a:	eb49 0303 	adc.w	r3, r9, r3
 800510e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005112:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	2200      	movs	r2, #0
 800511a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800511e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005122:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005126:	460b      	mov	r3, r1
 8005128:	18db      	adds	r3, r3, r3
 800512a:	653b      	str	r3, [r7, #80]	; 0x50
 800512c:	4613      	mov	r3, r2
 800512e:	eb42 0303 	adc.w	r3, r2, r3
 8005132:	657b      	str	r3, [r7, #84]	; 0x54
 8005134:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005138:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800513c:	f7fb f8a8 	bl	8000290 <__aeabi_uldivmod>
 8005140:	4602      	mov	r2, r0
 8005142:	460b      	mov	r3, r1
 8005144:	4b61      	ldr	r3, [pc, #388]	; (80052cc <UART_SetConfig+0x2d4>)
 8005146:	fba3 2302 	umull	r2, r3, r3, r2
 800514a:	095b      	lsrs	r3, r3, #5
 800514c:	011c      	lsls	r4, r3, #4
 800514e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005152:	2200      	movs	r2, #0
 8005154:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005158:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800515c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005160:	4642      	mov	r2, r8
 8005162:	464b      	mov	r3, r9
 8005164:	1891      	adds	r1, r2, r2
 8005166:	64b9      	str	r1, [r7, #72]	; 0x48
 8005168:	415b      	adcs	r3, r3
 800516a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800516c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005170:	4641      	mov	r1, r8
 8005172:	eb12 0a01 	adds.w	sl, r2, r1
 8005176:	4649      	mov	r1, r9
 8005178:	eb43 0b01 	adc.w	fp, r3, r1
 800517c:	f04f 0200 	mov.w	r2, #0
 8005180:	f04f 0300 	mov.w	r3, #0
 8005184:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005188:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800518c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005190:	4692      	mov	sl, r2
 8005192:	469b      	mov	fp, r3
 8005194:	4643      	mov	r3, r8
 8005196:	eb1a 0303 	adds.w	r3, sl, r3
 800519a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800519e:	464b      	mov	r3, r9
 80051a0:	eb4b 0303 	adc.w	r3, fp, r3
 80051a4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80051a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	2200      	movs	r2, #0
 80051b0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80051b4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80051b8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80051bc:	460b      	mov	r3, r1
 80051be:	18db      	adds	r3, r3, r3
 80051c0:	643b      	str	r3, [r7, #64]	; 0x40
 80051c2:	4613      	mov	r3, r2
 80051c4:	eb42 0303 	adc.w	r3, r2, r3
 80051c8:	647b      	str	r3, [r7, #68]	; 0x44
 80051ca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80051ce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80051d2:	f7fb f85d 	bl	8000290 <__aeabi_uldivmod>
 80051d6:	4602      	mov	r2, r0
 80051d8:	460b      	mov	r3, r1
 80051da:	4611      	mov	r1, r2
 80051dc:	4b3b      	ldr	r3, [pc, #236]	; (80052cc <UART_SetConfig+0x2d4>)
 80051de:	fba3 2301 	umull	r2, r3, r3, r1
 80051e2:	095b      	lsrs	r3, r3, #5
 80051e4:	2264      	movs	r2, #100	; 0x64
 80051e6:	fb02 f303 	mul.w	r3, r2, r3
 80051ea:	1acb      	subs	r3, r1, r3
 80051ec:	00db      	lsls	r3, r3, #3
 80051ee:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80051f2:	4b36      	ldr	r3, [pc, #216]	; (80052cc <UART_SetConfig+0x2d4>)
 80051f4:	fba3 2302 	umull	r2, r3, r3, r2
 80051f8:	095b      	lsrs	r3, r3, #5
 80051fa:	005b      	lsls	r3, r3, #1
 80051fc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005200:	441c      	add	r4, r3
 8005202:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005206:	2200      	movs	r2, #0
 8005208:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800520c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005210:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005214:	4642      	mov	r2, r8
 8005216:	464b      	mov	r3, r9
 8005218:	1891      	adds	r1, r2, r2
 800521a:	63b9      	str	r1, [r7, #56]	; 0x38
 800521c:	415b      	adcs	r3, r3
 800521e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005220:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005224:	4641      	mov	r1, r8
 8005226:	1851      	adds	r1, r2, r1
 8005228:	6339      	str	r1, [r7, #48]	; 0x30
 800522a:	4649      	mov	r1, r9
 800522c:	414b      	adcs	r3, r1
 800522e:	637b      	str	r3, [r7, #52]	; 0x34
 8005230:	f04f 0200 	mov.w	r2, #0
 8005234:	f04f 0300 	mov.w	r3, #0
 8005238:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800523c:	4659      	mov	r1, fp
 800523e:	00cb      	lsls	r3, r1, #3
 8005240:	4651      	mov	r1, sl
 8005242:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005246:	4651      	mov	r1, sl
 8005248:	00ca      	lsls	r2, r1, #3
 800524a:	4610      	mov	r0, r2
 800524c:	4619      	mov	r1, r3
 800524e:	4603      	mov	r3, r0
 8005250:	4642      	mov	r2, r8
 8005252:	189b      	adds	r3, r3, r2
 8005254:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005258:	464b      	mov	r3, r9
 800525a:	460a      	mov	r2, r1
 800525c:	eb42 0303 	adc.w	r3, r2, r3
 8005260:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	2200      	movs	r2, #0
 800526c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005270:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005274:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005278:	460b      	mov	r3, r1
 800527a:	18db      	adds	r3, r3, r3
 800527c:	62bb      	str	r3, [r7, #40]	; 0x28
 800527e:	4613      	mov	r3, r2
 8005280:	eb42 0303 	adc.w	r3, r2, r3
 8005284:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005286:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800528a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800528e:	f7fa ffff 	bl	8000290 <__aeabi_uldivmod>
 8005292:	4602      	mov	r2, r0
 8005294:	460b      	mov	r3, r1
 8005296:	4b0d      	ldr	r3, [pc, #52]	; (80052cc <UART_SetConfig+0x2d4>)
 8005298:	fba3 1302 	umull	r1, r3, r3, r2
 800529c:	095b      	lsrs	r3, r3, #5
 800529e:	2164      	movs	r1, #100	; 0x64
 80052a0:	fb01 f303 	mul.w	r3, r1, r3
 80052a4:	1ad3      	subs	r3, r2, r3
 80052a6:	00db      	lsls	r3, r3, #3
 80052a8:	3332      	adds	r3, #50	; 0x32
 80052aa:	4a08      	ldr	r2, [pc, #32]	; (80052cc <UART_SetConfig+0x2d4>)
 80052ac:	fba2 2303 	umull	r2, r3, r2, r3
 80052b0:	095b      	lsrs	r3, r3, #5
 80052b2:	f003 0207 	and.w	r2, r3, #7
 80052b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4422      	add	r2, r4
 80052be:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80052c0:	e105      	b.n	80054ce <UART_SetConfig+0x4d6>
 80052c2:	bf00      	nop
 80052c4:	40011000 	.word	0x40011000
 80052c8:	40011400 	.word	0x40011400
 80052cc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80052d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052d4:	2200      	movs	r2, #0
 80052d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80052da:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80052de:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80052e2:	4642      	mov	r2, r8
 80052e4:	464b      	mov	r3, r9
 80052e6:	1891      	adds	r1, r2, r2
 80052e8:	6239      	str	r1, [r7, #32]
 80052ea:	415b      	adcs	r3, r3
 80052ec:	627b      	str	r3, [r7, #36]	; 0x24
 80052ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80052f2:	4641      	mov	r1, r8
 80052f4:	1854      	adds	r4, r2, r1
 80052f6:	4649      	mov	r1, r9
 80052f8:	eb43 0501 	adc.w	r5, r3, r1
 80052fc:	f04f 0200 	mov.w	r2, #0
 8005300:	f04f 0300 	mov.w	r3, #0
 8005304:	00eb      	lsls	r3, r5, #3
 8005306:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800530a:	00e2      	lsls	r2, r4, #3
 800530c:	4614      	mov	r4, r2
 800530e:	461d      	mov	r5, r3
 8005310:	4643      	mov	r3, r8
 8005312:	18e3      	adds	r3, r4, r3
 8005314:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005318:	464b      	mov	r3, r9
 800531a:	eb45 0303 	adc.w	r3, r5, r3
 800531e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005322:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	2200      	movs	r2, #0
 800532a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800532e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005332:	f04f 0200 	mov.w	r2, #0
 8005336:	f04f 0300 	mov.w	r3, #0
 800533a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800533e:	4629      	mov	r1, r5
 8005340:	008b      	lsls	r3, r1, #2
 8005342:	4621      	mov	r1, r4
 8005344:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005348:	4621      	mov	r1, r4
 800534a:	008a      	lsls	r2, r1, #2
 800534c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005350:	f7fa ff9e 	bl	8000290 <__aeabi_uldivmod>
 8005354:	4602      	mov	r2, r0
 8005356:	460b      	mov	r3, r1
 8005358:	4b60      	ldr	r3, [pc, #384]	; (80054dc <UART_SetConfig+0x4e4>)
 800535a:	fba3 2302 	umull	r2, r3, r3, r2
 800535e:	095b      	lsrs	r3, r3, #5
 8005360:	011c      	lsls	r4, r3, #4
 8005362:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005366:	2200      	movs	r2, #0
 8005368:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800536c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005370:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005374:	4642      	mov	r2, r8
 8005376:	464b      	mov	r3, r9
 8005378:	1891      	adds	r1, r2, r2
 800537a:	61b9      	str	r1, [r7, #24]
 800537c:	415b      	adcs	r3, r3
 800537e:	61fb      	str	r3, [r7, #28]
 8005380:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005384:	4641      	mov	r1, r8
 8005386:	1851      	adds	r1, r2, r1
 8005388:	6139      	str	r1, [r7, #16]
 800538a:	4649      	mov	r1, r9
 800538c:	414b      	adcs	r3, r1
 800538e:	617b      	str	r3, [r7, #20]
 8005390:	f04f 0200 	mov.w	r2, #0
 8005394:	f04f 0300 	mov.w	r3, #0
 8005398:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800539c:	4659      	mov	r1, fp
 800539e:	00cb      	lsls	r3, r1, #3
 80053a0:	4651      	mov	r1, sl
 80053a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80053a6:	4651      	mov	r1, sl
 80053a8:	00ca      	lsls	r2, r1, #3
 80053aa:	4610      	mov	r0, r2
 80053ac:	4619      	mov	r1, r3
 80053ae:	4603      	mov	r3, r0
 80053b0:	4642      	mov	r2, r8
 80053b2:	189b      	adds	r3, r3, r2
 80053b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80053b8:	464b      	mov	r3, r9
 80053ba:	460a      	mov	r2, r1
 80053bc:	eb42 0303 	adc.w	r3, r2, r3
 80053c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80053c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	2200      	movs	r2, #0
 80053cc:	67bb      	str	r3, [r7, #120]	; 0x78
 80053ce:	67fa      	str	r2, [r7, #124]	; 0x7c
 80053d0:	f04f 0200 	mov.w	r2, #0
 80053d4:	f04f 0300 	mov.w	r3, #0
 80053d8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80053dc:	4649      	mov	r1, r9
 80053de:	008b      	lsls	r3, r1, #2
 80053e0:	4641      	mov	r1, r8
 80053e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80053e6:	4641      	mov	r1, r8
 80053e8:	008a      	lsls	r2, r1, #2
 80053ea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80053ee:	f7fa ff4f 	bl	8000290 <__aeabi_uldivmod>
 80053f2:	4602      	mov	r2, r0
 80053f4:	460b      	mov	r3, r1
 80053f6:	4b39      	ldr	r3, [pc, #228]	; (80054dc <UART_SetConfig+0x4e4>)
 80053f8:	fba3 1302 	umull	r1, r3, r3, r2
 80053fc:	095b      	lsrs	r3, r3, #5
 80053fe:	2164      	movs	r1, #100	; 0x64
 8005400:	fb01 f303 	mul.w	r3, r1, r3
 8005404:	1ad3      	subs	r3, r2, r3
 8005406:	011b      	lsls	r3, r3, #4
 8005408:	3332      	adds	r3, #50	; 0x32
 800540a:	4a34      	ldr	r2, [pc, #208]	; (80054dc <UART_SetConfig+0x4e4>)
 800540c:	fba2 2303 	umull	r2, r3, r2, r3
 8005410:	095b      	lsrs	r3, r3, #5
 8005412:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005416:	441c      	add	r4, r3
 8005418:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800541c:	2200      	movs	r2, #0
 800541e:	673b      	str	r3, [r7, #112]	; 0x70
 8005420:	677a      	str	r2, [r7, #116]	; 0x74
 8005422:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005426:	4642      	mov	r2, r8
 8005428:	464b      	mov	r3, r9
 800542a:	1891      	adds	r1, r2, r2
 800542c:	60b9      	str	r1, [r7, #8]
 800542e:	415b      	adcs	r3, r3
 8005430:	60fb      	str	r3, [r7, #12]
 8005432:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005436:	4641      	mov	r1, r8
 8005438:	1851      	adds	r1, r2, r1
 800543a:	6039      	str	r1, [r7, #0]
 800543c:	4649      	mov	r1, r9
 800543e:	414b      	adcs	r3, r1
 8005440:	607b      	str	r3, [r7, #4]
 8005442:	f04f 0200 	mov.w	r2, #0
 8005446:	f04f 0300 	mov.w	r3, #0
 800544a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800544e:	4659      	mov	r1, fp
 8005450:	00cb      	lsls	r3, r1, #3
 8005452:	4651      	mov	r1, sl
 8005454:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005458:	4651      	mov	r1, sl
 800545a:	00ca      	lsls	r2, r1, #3
 800545c:	4610      	mov	r0, r2
 800545e:	4619      	mov	r1, r3
 8005460:	4603      	mov	r3, r0
 8005462:	4642      	mov	r2, r8
 8005464:	189b      	adds	r3, r3, r2
 8005466:	66bb      	str	r3, [r7, #104]	; 0x68
 8005468:	464b      	mov	r3, r9
 800546a:	460a      	mov	r2, r1
 800546c:	eb42 0303 	adc.w	r3, r2, r3
 8005470:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005472:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	2200      	movs	r2, #0
 800547a:	663b      	str	r3, [r7, #96]	; 0x60
 800547c:	667a      	str	r2, [r7, #100]	; 0x64
 800547e:	f04f 0200 	mov.w	r2, #0
 8005482:	f04f 0300 	mov.w	r3, #0
 8005486:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800548a:	4649      	mov	r1, r9
 800548c:	008b      	lsls	r3, r1, #2
 800548e:	4641      	mov	r1, r8
 8005490:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005494:	4641      	mov	r1, r8
 8005496:	008a      	lsls	r2, r1, #2
 8005498:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800549c:	f7fa fef8 	bl	8000290 <__aeabi_uldivmod>
 80054a0:	4602      	mov	r2, r0
 80054a2:	460b      	mov	r3, r1
 80054a4:	4b0d      	ldr	r3, [pc, #52]	; (80054dc <UART_SetConfig+0x4e4>)
 80054a6:	fba3 1302 	umull	r1, r3, r3, r2
 80054aa:	095b      	lsrs	r3, r3, #5
 80054ac:	2164      	movs	r1, #100	; 0x64
 80054ae:	fb01 f303 	mul.w	r3, r1, r3
 80054b2:	1ad3      	subs	r3, r2, r3
 80054b4:	011b      	lsls	r3, r3, #4
 80054b6:	3332      	adds	r3, #50	; 0x32
 80054b8:	4a08      	ldr	r2, [pc, #32]	; (80054dc <UART_SetConfig+0x4e4>)
 80054ba:	fba2 2303 	umull	r2, r3, r2, r3
 80054be:	095b      	lsrs	r3, r3, #5
 80054c0:	f003 020f 	and.w	r2, r3, #15
 80054c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4422      	add	r2, r4
 80054cc:	609a      	str	r2, [r3, #8]
}
 80054ce:	bf00      	nop
 80054d0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80054d4:	46bd      	mov	sp, r7
 80054d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80054da:	bf00      	nop
 80054dc:	51eb851f 	.word	0x51eb851f

080054e0 <__errno>:
 80054e0:	4b01      	ldr	r3, [pc, #4]	; (80054e8 <__errno+0x8>)
 80054e2:	6818      	ldr	r0, [r3, #0]
 80054e4:	4770      	bx	lr
 80054e6:	bf00      	nop
 80054e8:	2000000c 	.word	0x2000000c

080054ec <__libc_init_array>:
 80054ec:	b570      	push	{r4, r5, r6, lr}
 80054ee:	4d0d      	ldr	r5, [pc, #52]	; (8005524 <__libc_init_array+0x38>)
 80054f0:	4c0d      	ldr	r4, [pc, #52]	; (8005528 <__libc_init_array+0x3c>)
 80054f2:	1b64      	subs	r4, r4, r5
 80054f4:	10a4      	asrs	r4, r4, #2
 80054f6:	2600      	movs	r6, #0
 80054f8:	42a6      	cmp	r6, r4
 80054fa:	d109      	bne.n	8005510 <__libc_init_array+0x24>
 80054fc:	4d0b      	ldr	r5, [pc, #44]	; (800552c <__libc_init_array+0x40>)
 80054fe:	4c0c      	ldr	r4, [pc, #48]	; (8005530 <__libc_init_array+0x44>)
 8005500:	f001 f824 	bl	800654c <_init>
 8005504:	1b64      	subs	r4, r4, r5
 8005506:	10a4      	asrs	r4, r4, #2
 8005508:	2600      	movs	r6, #0
 800550a:	42a6      	cmp	r6, r4
 800550c:	d105      	bne.n	800551a <__libc_init_array+0x2e>
 800550e:	bd70      	pop	{r4, r5, r6, pc}
 8005510:	f855 3b04 	ldr.w	r3, [r5], #4
 8005514:	4798      	blx	r3
 8005516:	3601      	adds	r6, #1
 8005518:	e7ee      	b.n	80054f8 <__libc_init_array+0xc>
 800551a:	f855 3b04 	ldr.w	r3, [r5], #4
 800551e:	4798      	blx	r3
 8005520:	3601      	adds	r6, #1
 8005522:	e7f2      	b.n	800550a <__libc_init_array+0x1e>
 8005524:	08006674 	.word	0x08006674
 8005528:	08006674 	.word	0x08006674
 800552c:	08006674 	.word	0x08006674
 8005530:	08006678 	.word	0x08006678

08005534 <memset>:
 8005534:	4402      	add	r2, r0
 8005536:	4603      	mov	r3, r0
 8005538:	4293      	cmp	r3, r2
 800553a:	d100      	bne.n	800553e <memset+0xa>
 800553c:	4770      	bx	lr
 800553e:	f803 1b01 	strb.w	r1, [r3], #1
 8005542:	e7f9      	b.n	8005538 <memset+0x4>

08005544 <iprintf>:
 8005544:	b40f      	push	{r0, r1, r2, r3}
 8005546:	4b0a      	ldr	r3, [pc, #40]	; (8005570 <iprintf+0x2c>)
 8005548:	b513      	push	{r0, r1, r4, lr}
 800554a:	681c      	ldr	r4, [r3, #0]
 800554c:	b124      	cbz	r4, 8005558 <iprintf+0x14>
 800554e:	69a3      	ldr	r3, [r4, #24]
 8005550:	b913      	cbnz	r3, 8005558 <iprintf+0x14>
 8005552:	4620      	mov	r0, r4
 8005554:	f000 fa5e 	bl	8005a14 <__sinit>
 8005558:	ab05      	add	r3, sp, #20
 800555a:	9a04      	ldr	r2, [sp, #16]
 800555c:	68a1      	ldr	r1, [r4, #8]
 800555e:	9301      	str	r3, [sp, #4]
 8005560:	4620      	mov	r0, r4
 8005562:	f000 fc67 	bl	8005e34 <_vfiprintf_r>
 8005566:	b002      	add	sp, #8
 8005568:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800556c:	b004      	add	sp, #16
 800556e:	4770      	bx	lr
 8005570:	2000000c 	.word	0x2000000c

08005574 <_puts_r>:
 8005574:	b570      	push	{r4, r5, r6, lr}
 8005576:	460e      	mov	r6, r1
 8005578:	4605      	mov	r5, r0
 800557a:	b118      	cbz	r0, 8005584 <_puts_r+0x10>
 800557c:	6983      	ldr	r3, [r0, #24]
 800557e:	b90b      	cbnz	r3, 8005584 <_puts_r+0x10>
 8005580:	f000 fa48 	bl	8005a14 <__sinit>
 8005584:	69ab      	ldr	r3, [r5, #24]
 8005586:	68ac      	ldr	r4, [r5, #8]
 8005588:	b913      	cbnz	r3, 8005590 <_puts_r+0x1c>
 800558a:	4628      	mov	r0, r5
 800558c:	f000 fa42 	bl	8005a14 <__sinit>
 8005590:	4b2c      	ldr	r3, [pc, #176]	; (8005644 <_puts_r+0xd0>)
 8005592:	429c      	cmp	r4, r3
 8005594:	d120      	bne.n	80055d8 <_puts_r+0x64>
 8005596:	686c      	ldr	r4, [r5, #4]
 8005598:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800559a:	07db      	lsls	r3, r3, #31
 800559c:	d405      	bmi.n	80055aa <_puts_r+0x36>
 800559e:	89a3      	ldrh	r3, [r4, #12]
 80055a0:	0598      	lsls	r0, r3, #22
 80055a2:	d402      	bmi.n	80055aa <_puts_r+0x36>
 80055a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80055a6:	f000 fad3 	bl	8005b50 <__retarget_lock_acquire_recursive>
 80055aa:	89a3      	ldrh	r3, [r4, #12]
 80055ac:	0719      	lsls	r1, r3, #28
 80055ae:	d51d      	bpl.n	80055ec <_puts_r+0x78>
 80055b0:	6923      	ldr	r3, [r4, #16]
 80055b2:	b1db      	cbz	r3, 80055ec <_puts_r+0x78>
 80055b4:	3e01      	subs	r6, #1
 80055b6:	68a3      	ldr	r3, [r4, #8]
 80055b8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80055bc:	3b01      	subs	r3, #1
 80055be:	60a3      	str	r3, [r4, #8]
 80055c0:	bb39      	cbnz	r1, 8005612 <_puts_r+0x9e>
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	da38      	bge.n	8005638 <_puts_r+0xc4>
 80055c6:	4622      	mov	r2, r4
 80055c8:	210a      	movs	r1, #10
 80055ca:	4628      	mov	r0, r5
 80055cc:	f000 f848 	bl	8005660 <__swbuf_r>
 80055d0:	3001      	adds	r0, #1
 80055d2:	d011      	beq.n	80055f8 <_puts_r+0x84>
 80055d4:	250a      	movs	r5, #10
 80055d6:	e011      	b.n	80055fc <_puts_r+0x88>
 80055d8:	4b1b      	ldr	r3, [pc, #108]	; (8005648 <_puts_r+0xd4>)
 80055da:	429c      	cmp	r4, r3
 80055dc:	d101      	bne.n	80055e2 <_puts_r+0x6e>
 80055de:	68ac      	ldr	r4, [r5, #8]
 80055e0:	e7da      	b.n	8005598 <_puts_r+0x24>
 80055e2:	4b1a      	ldr	r3, [pc, #104]	; (800564c <_puts_r+0xd8>)
 80055e4:	429c      	cmp	r4, r3
 80055e6:	bf08      	it	eq
 80055e8:	68ec      	ldreq	r4, [r5, #12]
 80055ea:	e7d5      	b.n	8005598 <_puts_r+0x24>
 80055ec:	4621      	mov	r1, r4
 80055ee:	4628      	mov	r0, r5
 80055f0:	f000 f888 	bl	8005704 <__swsetup_r>
 80055f4:	2800      	cmp	r0, #0
 80055f6:	d0dd      	beq.n	80055b4 <_puts_r+0x40>
 80055f8:	f04f 35ff 	mov.w	r5, #4294967295
 80055fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80055fe:	07da      	lsls	r2, r3, #31
 8005600:	d405      	bmi.n	800560e <_puts_r+0x9a>
 8005602:	89a3      	ldrh	r3, [r4, #12]
 8005604:	059b      	lsls	r3, r3, #22
 8005606:	d402      	bmi.n	800560e <_puts_r+0x9a>
 8005608:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800560a:	f000 faa2 	bl	8005b52 <__retarget_lock_release_recursive>
 800560e:	4628      	mov	r0, r5
 8005610:	bd70      	pop	{r4, r5, r6, pc}
 8005612:	2b00      	cmp	r3, #0
 8005614:	da04      	bge.n	8005620 <_puts_r+0xac>
 8005616:	69a2      	ldr	r2, [r4, #24]
 8005618:	429a      	cmp	r2, r3
 800561a:	dc06      	bgt.n	800562a <_puts_r+0xb6>
 800561c:	290a      	cmp	r1, #10
 800561e:	d004      	beq.n	800562a <_puts_r+0xb6>
 8005620:	6823      	ldr	r3, [r4, #0]
 8005622:	1c5a      	adds	r2, r3, #1
 8005624:	6022      	str	r2, [r4, #0]
 8005626:	7019      	strb	r1, [r3, #0]
 8005628:	e7c5      	b.n	80055b6 <_puts_r+0x42>
 800562a:	4622      	mov	r2, r4
 800562c:	4628      	mov	r0, r5
 800562e:	f000 f817 	bl	8005660 <__swbuf_r>
 8005632:	3001      	adds	r0, #1
 8005634:	d1bf      	bne.n	80055b6 <_puts_r+0x42>
 8005636:	e7df      	b.n	80055f8 <_puts_r+0x84>
 8005638:	6823      	ldr	r3, [r4, #0]
 800563a:	250a      	movs	r5, #10
 800563c:	1c5a      	adds	r2, r3, #1
 800563e:	6022      	str	r2, [r4, #0]
 8005640:	701d      	strb	r5, [r3, #0]
 8005642:	e7db      	b.n	80055fc <_puts_r+0x88>
 8005644:	080065f8 	.word	0x080065f8
 8005648:	08006618 	.word	0x08006618
 800564c:	080065d8 	.word	0x080065d8

08005650 <puts>:
 8005650:	4b02      	ldr	r3, [pc, #8]	; (800565c <puts+0xc>)
 8005652:	4601      	mov	r1, r0
 8005654:	6818      	ldr	r0, [r3, #0]
 8005656:	f7ff bf8d 	b.w	8005574 <_puts_r>
 800565a:	bf00      	nop
 800565c:	2000000c 	.word	0x2000000c

08005660 <__swbuf_r>:
 8005660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005662:	460e      	mov	r6, r1
 8005664:	4614      	mov	r4, r2
 8005666:	4605      	mov	r5, r0
 8005668:	b118      	cbz	r0, 8005672 <__swbuf_r+0x12>
 800566a:	6983      	ldr	r3, [r0, #24]
 800566c:	b90b      	cbnz	r3, 8005672 <__swbuf_r+0x12>
 800566e:	f000 f9d1 	bl	8005a14 <__sinit>
 8005672:	4b21      	ldr	r3, [pc, #132]	; (80056f8 <__swbuf_r+0x98>)
 8005674:	429c      	cmp	r4, r3
 8005676:	d12b      	bne.n	80056d0 <__swbuf_r+0x70>
 8005678:	686c      	ldr	r4, [r5, #4]
 800567a:	69a3      	ldr	r3, [r4, #24]
 800567c:	60a3      	str	r3, [r4, #8]
 800567e:	89a3      	ldrh	r3, [r4, #12]
 8005680:	071a      	lsls	r2, r3, #28
 8005682:	d52f      	bpl.n	80056e4 <__swbuf_r+0x84>
 8005684:	6923      	ldr	r3, [r4, #16]
 8005686:	b36b      	cbz	r3, 80056e4 <__swbuf_r+0x84>
 8005688:	6923      	ldr	r3, [r4, #16]
 800568a:	6820      	ldr	r0, [r4, #0]
 800568c:	1ac0      	subs	r0, r0, r3
 800568e:	6963      	ldr	r3, [r4, #20]
 8005690:	b2f6      	uxtb	r6, r6
 8005692:	4283      	cmp	r3, r0
 8005694:	4637      	mov	r7, r6
 8005696:	dc04      	bgt.n	80056a2 <__swbuf_r+0x42>
 8005698:	4621      	mov	r1, r4
 800569a:	4628      	mov	r0, r5
 800569c:	f000 f926 	bl	80058ec <_fflush_r>
 80056a0:	bb30      	cbnz	r0, 80056f0 <__swbuf_r+0x90>
 80056a2:	68a3      	ldr	r3, [r4, #8]
 80056a4:	3b01      	subs	r3, #1
 80056a6:	60a3      	str	r3, [r4, #8]
 80056a8:	6823      	ldr	r3, [r4, #0]
 80056aa:	1c5a      	adds	r2, r3, #1
 80056ac:	6022      	str	r2, [r4, #0]
 80056ae:	701e      	strb	r6, [r3, #0]
 80056b0:	6963      	ldr	r3, [r4, #20]
 80056b2:	3001      	adds	r0, #1
 80056b4:	4283      	cmp	r3, r0
 80056b6:	d004      	beq.n	80056c2 <__swbuf_r+0x62>
 80056b8:	89a3      	ldrh	r3, [r4, #12]
 80056ba:	07db      	lsls	r3, r3, #31
 80056bc:	d506      	bpl.n	80056cc <__swbuf_r+0x6c>
 80056be:	2e0a      	cmp	r6, #10
 80056c0:	d104      	bne.n	80056cc <__swbuf_r+0x6c>
 80056c2:	4621      	mov	r1, r4
 80056c4:	4628      	mov	r0, r5
 80056c6:	f000 f911 	bl	80058ec <_fflush_r>
 80056ca:	b988      	cbnz	r0, 80056f0 <__swbuf_r+0x90>
 80056cc:	4638      	mov	r0, r7
 80056ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056d0:	4b0a      	ldr	r3, [pc, #40]	; (80056fc <__swbuf_r+0x9c>)
 80056d2:	429c      	cmp	r4, r3
 80056d4:	d101      	bne.n	80056da <__swbuf_r+0x7a>
 80056d6:	68ac      	ldr	r4, [r5, #8]
 80056d8:	e7cf      	b.n	800567a <__swbuf_r+0x1a>
 80056da:	4b09      	ldr	r3, [pc, #36]	; (8005700 <__swbuf_r+0xa0>)
 80056dc:	429c      	cmp	r4, r3
 80056de:	bf08      	it	eq
 80056e0:	68ec      	ldreq	r4, [r5, #12]
 80056e2:	e7ca      	b.n	800567a <__swbuf_r+0x1a>
 80056e4:	4621      	mov	r1, r4
 80056e6:	4628      	mov	r0, r5
 80056e8:	f000 f80c 	bl	8005704 <__swsetup_r>
 80056ec:	2800      	cmp	r0, #0
 80056ee:	d0cb      	beq.n	8005688 <__swbuf_r+0x28>
 80056f0:	f04f 37ff 	mov.w	r7, #4294967295
 80056f4:	e7ea      	b.n	80056cc <__swbuf_r+0x6c>
 80056f6:	bf00      	nop
 80056f8:	080065f8 	.word	0x080065f8
 80056fc:	08006618 	.word	0x08006618
 8005700:	080065d8 	.word	0x080065d8

08005704 <__swsetup_r>:
 8005704:	4b32      	ldr	r3, [pc, #200]	; (80057d0 <__swsetup_r+0xcc>)
 8005706:	b570      	push	{r4, r5, r6, lr}
 8005708:	681d      	ldr	r5, [r3, #0]
 800570a:	4606      	mov	r6, r0
 800570c:	460c      	mov	r4, r1
 800570e:	b125      	cbz	r5, 800571a <__swsetup_r+0x16>
 8005710:	69ab      	ldr	r3, [r5, #24]
 8005712:	b913      	cbnz	r3, 800571a <__swsetup_r+0x16>
 8005714:	4628      	mov	r0, r5
 8005716:	f000 f97d 	bl	8005a14 <__sinit>
 800571a:	4b2e      	ldr	r3, [pc, #184]	; (80057d4 <__swsetup_r+0xd0>)
 800571c:	429c      	cmp	r4, r3
 800571e:	d10f      	bne.n	8005740 <__swsetup_r+0x3c>
 8005720:	686c      	ldr	r4, [r5, #4]
 8005722:	89a3      	ldrh	r3, [r4, #12]
 8005724:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005728:	0719      	lsls	r1, r3, #28
 800572a:	d42c      	bmi.n	8005786 <__swsetup_r+0x82>
 800572c:	06dd      	lsls	r5, r3, #27
 800572e:	d411      	bmi.n	8005754 <__swsetup_r+0x50>
 8005730:	2309      	movs	r3, #9
 8005732:	6033      	str	r3, [r6, #0]
 8005734:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005738:	81a3      	strh	r3, [r4, #12]
 800573a:	f04f 30ff 	mov.w	r0, #4294967295
 800573e:	e03e      	b.n	80057be <__swsetup_r+0xba>
 8005740:	4b25      	ldr	r3, [pc, #148]	; (80057d8 <__swsetup_r+0xd4>)
 8005742:	429c      	cmp	r4, r3
 8005744:	d101      	bne.n	800574a <__swsetup_r+0x46>
 8005746:	68ac      	ldr	r4, [r5, #8]
 8005748:	e7eb      	b.n	8005722 <__swsetup_r+0x1e>
 800574a:	4b24      	ldr	r3, [pc, #144]	; (80057dc <__swsetup_r+0xd8>)
 800574c:	429c      	cmp	r4, r3
 800574e:	bf08      	it	eq
 8005750:	68ec      	ldreq	r4, [r5, #12]
 8005752:	e7e6      	b.n	8005722 <__swsetup_r+0x1e>
 8005754:	0758      	lsls	r0, r3, #29
 8005756:	d512      	bpl.n	800577e <__swsetup_r+0x7a>
 8005758:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800575a:	b141      	cbz	r1, 800576e <__swsetup_r+0x6a>
 800575c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005760:	4299      	cmp	r1, r3
 8005762:	d002      	beq.n	800576a <__swsetup_r+0x66>
 8005764:	4630      	mov	r0, r6
 8005766:	f000 fa5b 	bl	8005c20 <_free_r>
 800576a:	2300      	movs	r3, #0
 800576c:	6363      	str	r3, [r4, #52]	; 0x34
 800576e:	89a3      	ldrh	r3, [r4, #12]
 8005770:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005774:	81a3      	strh	r3, [r4, #12]
 8005776:	2300      	movs	r3, #0
 8005778:	6063      	str	r3, [r4, #4]
 800577a:	6923      	ldr	r3, [r4, #16]
 800577c:	6023      	str	r3, [r4, #0]
 800577e:	89a3      	ldrh	r3, [r4, #12]
 8005780:	f043 0308 	orr.w	r3, r3, #8
 8005784:	81a3      	strh	r3, [r4, #12]
 8005786:	6923      	ldr	r3, [r4, #16]
 8005788:	b94b      	cbnz	r3, 800579e <__swsetup_r+0x9a>
 800578a:	89a3      	ldrh	r3, [r4, #12]
 800578c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005790:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005794:	d003      	beq.n	800579e <__swsetup_r+0x9a>
 8005796:	4621      	mov	r1, r4
 8005798:	4630      	mov	r0, r6
 800579a:	f000 fa01 	bl	8005ba0 <__smakebuf_r>
 800579e:	89a0      	ldrh	r0, [r4, #12]
 80057a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80057a4:	f010 0301 	ands.w	r3, r0, #1
 80057a8:	d00a      	beq.n	80057c0 <__swsetup_r+0xbc>
 80057aa:	2300      	movs	r3, #0
 80057ac:	60a3      	str	r3, [r4, #8]
 80057ae:	6963      	ldr	r3, [r4, #20]
 80057b0:	425b      	negs	r3, r3
 80057b2:	61a3      	str	r3, [r4, #24]
 80057b4:	6923      	ldr	r3, [r4, #16]
 80057b6:	b943      	cbnz	r3, 80057ca <__swsetup_r+0xc6>
 80057b8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80057bc:	d1ba      	bne.n	8005734 <__swsetup_r+0x30>
 80057be:	bd70      	pop	{r4, r5, r6, pc}
 80057c0:	0781      	lsls	r1, r0, #30
 80057c2:	bf58      	it	pl
 80057c4:	6963      	ldrpl	r3, [r4, #20]
 80057c6:	60a3      	str	r3, [r4, #8]
 80057c8:	e7f4      	b.n	80057b4 <__swsetup_r+0xb0>
 80057ca:	2000      	movs	r0, #0
 80057cc:	e7f7      	b.n	80057be <__swsetup_r+0xba>
 80057ce:	bf00      	nop
 80057d0:	2000000c 	.word	0x2000000c
 80057d4:	080065f8 	.word	0x080065f8
 80057d8:	08006618 	.word	0x08006618
 80057dc:	080065d8 	.word	0x080065d8

080057e0 <__sflush_r>:
 80057e0:	898a      	ldrh	r2, [r1, #12]
 80057e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057e6:	4605      	mov	r5, r0
 80057e8:	0710      	lsls	r0, r2, #28
 80057ea:	460c      	mov	r4, r1
 80057ec:	d458      	bmi.n	80058a0 <__sflush_r+0xc0>
 80057ee:	684b      	ldr	r3, [r1, #4]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	dc05      	bgt.n	8005800 <__sflush_r+0x20>
 80057f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	dc02      	bgt.n	8005800 <__sflush_r+0x20>
 80057fa:	2000      	movs	r0, #0
 80057fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005800:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005802:	2e00      	cmp	r6, #0
 8005804:	d0f9      	beq.n	80057fa <__sflush_r+0x1a>
 8005806:	2300      	movs	r3, #0
 8005808:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800580c:	682f      	ldr	r7, [r5, #0]
 800580e:	602b      	str	r3, [r5, #0]
 8005810:	d032      	beq.n	8005878 <__sflush_r+0x98>
 8005812:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005814:	89a3      	ldrh	r3, [r4, #12]
 8005816:	075a      	lsls	r2, r3, #29
 8005818:	d505      	bpl.n	8005826 <__sflush_r+0x46>
 800581a:	6863      	ldr	r3, [r4, #4]
 800581c:	1ac0      	subs	r0, r0, r3
 800581e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005820:	b10b      	cbz	r3, 8005826 <__sflush_r+0x46>
 8005822:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005824:	1ac0      	subs	r0, r0, r3
 8005826:	2300      	movs	r3, #0
 8005828:	4602      	mov	r2, r0
 800582a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800582c:	6a21      	ldr	r1, [r4, #32]
 800582e:	4628      	mov	r0, r5
 8005830:	47b0      	blx	r6
 8005832:	1c43      	adds	r3, r0, #1
 8005834:	89a3      	ldrh	r3, [r4, #12]
 8005836:	d106      	bne.n	8005846 <__sflush_r+0x66>
 8005838:	6829      	ldr	r1, [r5, #0]
 800583a:	291d      	cmp	r1, #29
 800583c:	d82c      	bhi.n	8005898 <__sflush_r+0xb8>
 800583e:	4a2a      	ldr	r2, [pc, #168]	; (80058e8 <__sflush_r+0x108>)
 8005840:	40ca      	lsrs	r2, r1
 8005842:	07d6      	lsls	r6, r2, #31
 8005844:	d528      	bpl.n	8005898 <__sflush_r+0xb8>
 8005846:	2200      	movs	r2, #0
 8005848:	6062      	str	r2, [r4, #4]
 800584a:	04d9      	lsls	r1, r3, #19
 800584c:	6922      	ldr	r2, [r4, #16]
 800584e:	6022      	str	r2, [r4, #0]
 8005850:	d504      	bpl.n	800585c <__sflush_r+0x7c>
 8005852:	1c42      	adds	r2, r0, #1
 8005854:	d101      	bne.n	800585a <__sflush_r+0x7a>
 8005856:	682b      	ldr	r3, [r5, #0]
 8005858:	b903      	cbnz	r3, 800585c <__sflush_r+0x7c>
 800585a:	6560      	str	r0, [r4, #84]	; 0x54
 800585c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800585e:	602f      	str	r7, [r5, #0]
 8005860:	2900      	cmp	r1, #0
 8005862:	d0ca      	beq.n	80057fa <__sflush_r+0x1a>
 8005864:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005868:	4299      	cmp	r1, r3
 800586a:	d002      	beq.n	8005872 <__sflush_r+0x92>
 800586c:	4628      	mov	r0, r5
 800586e:	f000 f9d7 	bl	8005c20 <_free_r>
 8005872:	2000      	movs	r0, #0
 8005874:	6360      	str	r0, [r4, #52]	; 0x34
 8005876:	e7c1      	b.n	80057fc <__sflush_r+0x1c>
 8005878:	6a21      	ldr	r1, [r4, #32]
 800587a:	2301      	movs	r3, #1
 800587c:	4628      	mov	r0, r5
 800587e:	47b0      	blx	r6
 8005880:	1c41      	adds	r1, r0, #1
 8005882:	d1c7      	bne.n	8005814 <__sflush_r+0x34>
 8005884:	682b      	ldr	r3, [r5, #0]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d0c4      	beq.n	8005814 <__sflush_r+0x34>
 800588a:	2b1d      	cmp	r3, #29
 800588c:	d001      	beq.n	8005892 <__sflush_r+0xb2>
 800588e:	2b16      	cmp	r3, #22
 8005890:	d101      	bne.n	8005896 <__sflush_r+0xb6>
 8005892:	602f      	str	r7, [r5, #0]
 8005894:	e7b1      	b.n	80057fa <__sflush_r+0x1a>
 8005896:	89a3      	ldrh	r3, [r4, #12]
 8005898:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800589c:	81a3      	strh	r3, [r4, #12]
 800589e:	e7ad      	b.n	80057fc <__sflush_r+0x1c>
 80058a0:	690f      	ldr	r7, [r1, #16]
 80058a2:	2f00      	cmp	r7, #0
 80058a4:	d0a9      	beq.n	80057fa <__sflush_r+0x1a>
 80058a6:	0793      	lsls	r3, r2, #30
 80058a8:	680e      	ldr	r6, [r1, #0]
 80058aa:	bf08      	it	eq
 80058ac:	694b      	ldreq	r3, [r1, #20]
 80058ae:	600f      	str	r7, [r1, #0]
 80058b0:	bf18      	it	ne
 80058b2:	2300      	movne	r3, #0
 80058b4:	eba6 0807 	sub.w	r8, r6, r7
 80058b8:	608b      	str	r3, [r1, #8]
 80058ba:	f1b8 0f00 	cmp.w	r8, #0
 80058be:	dd9c      	ble.n	80057fa <__sflush_r+0x1a>
 80058c0:	6a21      	ldr	r1, [r4, #32]
 80058c2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80058c4:	4643      	mov	r3, r8
 80058c6:	463a      	mov	r2, r7
 80058c8:	4628      	mov	r0, r5
 80058ca:	47b0      	blx	r6
 80058cc:	2800      	cmp	r0, #0
 80058ce:	dc06      	bgt.n	80058de <__sflush_r+0xfe>
 80058d0:	89a3      	ldrh	r3, [r4, #12]
 80058d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058d6:	81a3      	strh	r3, [r4, #12]
 80058d8:	f04f 30ff 	mov.w	r0, #4294967295
 80058dc:	e78e      	b.n	80057fc <__sflush_r+0x1c>
 80058de:	4407      	add	r7, r0
 80058e0:	eba8 0800 	sub.w	r8, r8, r0
 80058e4:	e7e9      	b.n	80058ba <__sflush_r+0xda>
 80058e6:	bf00      	nop
 80058e8:	20400001 	.word	0x20400001

080058ec <_fflush_r>:
 80058ec:	b538      	push	{r3, r4, r5, lr}
 80058ee:	690b      	ldr	r3, [r1, #16]
 80058f0:	4605      	mov	r5, r0
 80058f2:	460c      	mov	r4, r1
 80058f4:	b913      	cbnz	r3, 80058fc <_fflush_r+0x10>
 80058f6:	2500      	movs	r5, #0
 80058f8:	4628      	mov	r0, r5
 80058fa:	bd38      	pop	{r3, r4, r5, pc}
 80058fc:	b118      	cbz	r0, 8005906 <_fflush_r+0x1a>
 80058fe:	6983      	ldr	r3, [r0, #24]
 8005900:	b90b      	cbnz	r3, 8005906 <_fflush_r+0x1a>
 8005902:	f000 f887 	bl	8005a14 <__sinit>
 8005906:	4b14      	ldr	r3, [pc, #80]	; (8005958 <_fflush_r+0x6c>)
 8005908:	429c      	cmp	r4, r3
 800590a:	d11b      	bne.n	8005944 <_fflush_r+0x58>
 800590c:	686c      	ldr	r4, [r5, #4]
 800590e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d0ef      	beq.n	80058f6 <_fflush_r+0xa>
 8005916:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005918:	07d0      	lsls	r0, r2, #31
 800591a:	d404      	bmi.n	8005926 <_fflush_r+0x3a>
 800591c:	0599      	lsls	r1, r3, #22
 800591e:	d402      	bmi.n	8005926 <_fflush_r+0x3a>
 8005920:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005922:	f000 f915 	bl	8005b50 <__retarget_lock_acquire_recursive>
 8005926:	4628      	mov	r0, r5
 8005928:	4621      	mov	r1, r4
 800592a:	f7ff ff59 	bl	80057e0 <__sflush_r>
 800592e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005930:	07da      	lsls	r2, r3, #31
 8005932:	4605      	mov	r5, r0
 8005934:	d4e0      	bmi.n	80058f8 <_fflush_r+0xc>
 8005936:	89a3      	ldrh	r3, [r4, #12]
 8005938:	059b      	lsls	r3, r3, #22
 800593a:	d4dd      	bmi.n	80058f8 <_fflush_r+0xc>
 800593c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800593e:	f000 f908 	bl	8005b52 <__retarget_lock_release_recursive>
 8005942:	e7d9      	b.n	80058f8 <_fflush_r+0xc>
 8005944:	4b05      	ldr	r3, [pc, #20]	; (800595c <_fflush_r+0x70>)
 8005946:	429c      	cmp	r4, r3
 8005948:	d101      	bne.n	800594e <_fflush_r+0x62>
 800594a:	68ac      	ldr	r4, [r5, #8]
 800594c:	e7df      	b.n	800590e <_fflush_r+0x22>
 800594e:	4b04      	ldr	r3, [pc, #16]	; (8005960 <_fflush_r+0x74>)
 8005950:	429c      	cmp	r4, r3
 8005952:	bf08      	it	eq
 8005954:	68ec      	ldreq	r4, [r5, #12]
 8005956:	e7da      	b.n	800590e <_fflush_r+0x22>
 8005958:	080065f8 	.word	0x080065f8
 800595c:	08006618 	.word	0x08006618
 8005960:	080065d8 	.word	0x080065d8

08005964 <std>:
 8005964:	2300      	movs	r3, #0
 8005966:	b510      	push	{r4, lr}
 8005968:	4604      	mov	r4, r0
 800596a:	e9c0 3300 	strd	r3, r3, [r0]
 800596e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005972:	6083      	str	r3, [r0, #8]
 8005974:	8181      	strh	r1, [r0, #12]
 8005976:	6643      	str	r3, [r0, #100]	; 0x64
 8005978:	81c2      	strh	r2, [r0, #14]
 800597a:	6183      	str	r3, [r0, #24]
 800597c:	4619      	mov	r1, r3
 800597e:	2208      	movs	r2, #8
 8005980:	305c      	adds	r0, #92	; 0x5c
 8005982:	f7ff fdd7 	bl	8005534 <memset>
 8005986:	4b05      	ldr	r3, [pc, #20]	; (800599c <std+0x38>)
 8005988:	6263      	str	r3, [r4, #36]	; 0x24
 800598a:	4b05      	ldr	r3, [pc, #20]	; (80059a0 <std+0x3c>)
 800598c:	62a3      	str	r3, [r4, #40]	; 0x28
 800598e:	4b05      	ldr	r3, [pc, #20]	; (80059a4 <std+0x40>)
 8005990:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005992:	4b05      	ldr	r3, [pc, #20]	; (80059a8 <std+0x44>)
 8005994:	6224      	str	r4, [r4, #32]
 8005996:	6323      	str	r3, [r4, #48]	; 0x30
 8005998:	bd10      	pop	{r4, pc}
 800599a:	bf00      	nop
 800599c:	080063dd 	.word	0x080063dd
 80059a0:	080063ff 	.word	0x080063ff
 80059a4:	08006437 	.word	0x08006437
 80059a8:	0800645b 	.word	0x0800645b

080059ac <_cleanup_r>:
 80059ac:	4901      	ldr	r1, [pc, #4]	; (80059b4 <_cleanup_r+0x8>)
 80059ae:	f000 b8af 	b.w	8005b10 <_fwalk_reent>
 80059b2:	bf00      	nop
 80059b4:	080058ed 	.word	0x080058ed

080059b8 <__sfmoreglue>:
 80059b8:	b570      	push	{r4, r5, r6, lr}
 80059ba:	2268      	movs	r2, #104	; 0x68
 80059bc:	1e4d      	subs	r5, r1, #1
 80059be:	4355      	muls	r5, r2
 80059c0:	460e      	mov	r6, r1
 80059c2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80059c6:	f000 f997 	bl	8005cf8 <_malloc_r>
 80059ca:	4604      	mov	r4, r0
 80059cc:	b140      	cbz	r0, 80059e0 <__sfmoreglue+0x28>
 80059ce:	2100      	movs	r1, #0
 80059d0:	e9c0 1600 	strd	r1, r6, [r0]
 80059d4:	300c      	adds	r0, #12
 80059d6:	60a0      	str	r0, [r4, #8]
 80059d8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80059dc:	f7ff fdaa 	bl	8005534 <memset>
 80059e0:	4620      	mov	r0, r4
 80059e2:	bd70      	pop	{r4, r5, r6, pc}

080059e4 <__sfp_lock_acquire>:
 80059e4:	4801      	ldr	r0, [pc, #4]	; (80059ec <__sfp_lock_acquire+0x8>)
 80059e6:	f000 b8b3 	b.w	8005b50 <__retarget_lock_acquire_recursive>
 80059ea:	bf00      	nop
 80059ec:	200001d5 	.word	0x200001d5

080059f0 <__sfp_lock_release>:
 80059f0:	4801      	ldr	r0, [pc, #4]	; (80059f8 <__sfp_lock_release+0x8>)
 80059f2:	f000 b8ae 	b.w	8005b52 <__retarget_lock_release_recursive>
 80059f6:	bf00      	nop
 80059f8:	200001d5 	.word	0x200001d5

080059fc <__sinit_lock_acquire>:
 80059fc:	4801      	ldr	r0, [pc, #4]	; (8005a04 <__sinit_lock_acquire+0x8>)
 80059fe:	f000 b8a7 	b.w	8005b50 <__retarget_lock_acquire_recursive>
 8005a02:	bf00      	nop
 8005a04:	200001d6 	.word	0x200001d6

08005a08 <__sinit_lock_release>:
 8005a08:	4801      	ldr	r0, [pc, #4]	; (8005a10 <__sinit_lock_release+0x8>)
 8005a0a:	f000 b8a2 	b.w	8005b52 <__retarget_lock_release_recursive>
 8005a0e:	bf00      	nop
 8005a10:	200001d6 	.word	0x200001d6

08005a14 <__sinit>:
 8005a14:	b510      	push	{r4, lr}
 8005a16:	4604      	mov	r4, r0
 8005a18:	f7ff fff0 	bl	80059fc <__sinit_lock_acquire>
 8005a1c:	69a3      	ldr	r3, [r4, #24]
 8005a1e:	b11b      	cbz	r3, 8005a28 <__sinit+0x14>
 8005a20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a24:	f7ff bff0 	b.w	8005a08 <__sinit_lock_release>
 8005a28:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005a2c:	6523      	str	r3, [r4, #80]	; 0x50
 8005a2e:	4b13      	ldr	r3, [pc, #76]	; (8005a7c <__sinit+0x68>)
 8005a30:	4a13      	ldr	r2, [pc, #76]	; (8005a80 <__sinit+0x6c>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	62a2      	str	r2, [r4, #40]	; 0x28
 8005a36:	42a3      	cmp	r3, r4
 8005a38:	bf04      	itt	eq
 8005a3a:	2301      	moveq	r3, #1
 8005a3c:	61a3      	streq	r3, [r4, #24]
 8005a3e:	4620      	mov	r0, r4
 8005a40:	f000 f820 	bl	8005a84 <__sfp>
 8005a44:	6060      	str	r0, [r4, #4]
 8005a46:	4620      	mov	r0, r4
 8005a48:	f000 f81c 	bl	8005a84 <__sfp>
 8005a4c:	60a0      	str	r0, [r4, #8]
 8005a4e:	4620      	mov	r0, r4
 8005a50:	f000 f818 	bl	8005a84 <__sfp>
 8005a54:	2200      	movs	r2, #0
 8005a56:	60e0      	str	r0, [r4, #12]
 8005a58:	2104      	movs	r1, #4
 8005a5a:	6860      	ldr	r0, [r4, #4]
 8005a5c:	f7ff ff82 	bl	8005964 <std>
 8005a60:	68a0      	ldr	r0, [r4, #8]
 8005a62:	2201      	movs	r2, #1
 8005a64:	2109      	movs	r1, #9
 8005a66:	f7ff ff7d 	bl	8005964 <std>
 8005a6a:	68e0      	ldr	r0, [r4, #12]
 8005a6c:	2202      	movs	r2, #2
 8005a6e:	2112      	movs	r1, #18
 8005a70:	f7ff ff78 	bl	8005964 <std>
 8005a74:	2301      	movs	r3, #1
 8005a76:	61a3      	str	r3, [r4, #24]
 8005a78:	e7d2      	b.n	8005a20 <__sinit+0xc>
 8005a7a:	bf00      	nop
 8005a7c:	080065d4 	.word	0x080065d4
 8005a80:	080059ad 	.word	0x080059ad

08005a84 <__sfp>:
 8005a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a86:	4607      	mov	r7, r0
 8005a88:	f7ff ffac 	bl	80059e4 <__sfp_lock_acquire>
 8005a8c:	4b1e      	ldr	r3, [pc, #120]	; (8005b08 <__sfp+0x84>)
 8005a8e:	681e      	ldr	r6, [r3, #0]
 8005a90:	69b3      	ldr	r3, [r6, #24]
 8005a92:	b913      	cbnz	r3, 8005a9a <__sfp+0x16>
 8005a94:	4630      	mov	r0, r6
 8005a96:	f7ff ffbd 	bl	8005a14 <__sinit>
 8005a9a:	3648      	adds	r6, #72	; 0x48
 8005a9c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005aa0:	3b01      	subs	r3, #1
 8005aa2:	d503      	bpl.n	8005aac <__sfp+0x28>
 8005aa4:	6833      	ldr	r3, [r6, #0]
 8005aa6:	b30b      	cbz	r3, 8005aec <__sfp+0x68>
 8005aa8:	6836      	ldr	r6, [r6, #0]
 8005aaa:	e7f7      	b.n	8005a9c <__sfp+0x18>
 8005aac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005ab0:	b9d5      	cbnz	r5, 8005ae8 <__sfp+0x64>
 8005ab2:	4b16      	ldr	r3, [pc, #88]	; (8005b0c <__sfp+0x88>)
 8005ab4:	60e3      	str	r3, [r4, #12]
 8005ab6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005aba:	6665      	str	r5, [r4, #100]	; 0x64
 8005abc:	f000 f847 	bl	8005b4e <__retarget_lock_init_recursive>
 8005ac0:	f7ff ff96 	bl	80059f0 <__sfp_lock_release>
 8005ac4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005ac8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005acc:	6025      	str	r5, [r4, #0]
 8005ace:	61a5      	str	r5, [r4, #24]
 8005ad0:	2208      	movs	r2, #8
 8005ad2:	4629      	mov	r1, r5
 8005ad4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005ad8:	f7ff fd2c 	bl	8005534 <memset>
 8005adc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005ae0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005ae4:	4620      	mov	r0, r4
 8005ae6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ae8:	3468      	adds	r4, #104	; 0x68
 8005aea:	e7d9      	b.n	8005aa0 <__sfp+0x1c>
 8005aec:	2104      	movs	r1, #4
 8005aee:	4638      	mov	r0, r7
 8005af0:	f7ff ff62 	bl	80059b8 <__sfmoreglue>
 8005af4:	4604      	mov	r4, r0
 8005af6:	6030      	str	r0, [r6, #0]
 8005af8:	2800      	cmp	r0, #0
 8005afa:	d1d5      	bne.n	8005aa8 <__sfp+0x24>
 8005afc:	f7ff ff78 	bl	80059f0 <__sfp_lock_release>
 8005b00:	230c      	movs	r3, #12
 8005b02:	603b      	str	r3, [r7, #0]
 8005b04:	e7ee      	b.n	8005ae4 <__sfp+0x60>
 8005b06:	bf00      	nop
 8005b08:	080065d4 	.word	0x080065d4
 8005b0c:	ffff0001 	.word	0xffff0001

08005b10 <_fwalk_reent>:
 8005b10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b14:	4606      	mov	r6, r0
 8005b16:	4688      	mov	r8, r1
 8005b18:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005b1c:	2700      	movs	r7, #0
 8005b1e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005b22:	f1b9 0901 	subs.w	r9, r9, #1
 8005b26:	d505      	bpl.n	8005b34 <_fwalk_reent+0x24>
 8005b28:	6824      	ldr	r4, [r4, #0]
 8005b2a:	2c00      	cmp	r4, #0
 8005b2c:	d1f7      	bne.n	8005b1e <_fwalk_reent+0xe>
 8005b2e:	4638      	mov	r0, r7
 8005b30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b34:	89ab      	ldrh	r3, [r5, #12]
 8005b36:	2b01      	cmp	r3, #1
 8005b38:	d907      	bls.n	8005b4a <_fwalk_reent+0x3a>
 8005b3a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005b3e:	3301      	adds	r3, #1
 8005b40:	d003      	beq.n	8005b4a <_fwalk_reent+0x3a>
 8005b42:	4629      	mov	r1, r5
 8005b44:	4630      	mov	r0, r6
 8005b46:	47c0      	blx	r8
 8005b48:	4307      	orrs	r7, r0
 8005b4a:	3568      	adds	r5, #104	; 0x68
 8005b4c:	e7e9      	b.n	8005b22 <_fwalk_reent+0x12>

08005b4e <__retarget_lock_init_recursive>:
 8005b4e:	4770      	bx	lr

08005b50 <__retarget_lock_acquire_recursive>:
 8005b50:	4770      	bx	lr

08005b52 <__retarget_lock_release_recursive>:
 8005b52:	4770      	bx	lr

08005b54 <__swhatbuf_r>:
 8005b54:	b570      	push	{r4, r5, r6, lr}
 8005b56:	460e      	mov	r6, r1
 8005b58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b5c:	2900      	cmp	r1, #0
 8005b5e:	b096      	sub	sp, #88	; 0x58
 8005b60:	4614      	mov	r4, r2
 8005b62:	461d      	mov	r5, r3
 8005b64:	da08      	bge.n	8005b78 <__swhatbuf_r+0x24>
 8005b66:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	602a      	str	r2, [r5, #0]
 8005b6e:	061a      	lsls	r2, r3, #24
 8005b70:	d410      	bmi.n	8005b94 <__swhatbuf_r+0x40>
 8005b72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b76:	e00e      	b.n	8005b96 <__swhatbuf_r+0x42>
 8005b78:	466a      	mov	r2, sp
 8005b7a:	f000 fc95 	bl	80064a8 <_fstat_r>
 8005b7e:	2800      	cmp	r0, #0
 8005b80:	dbf1      	blt.n	8005b66 <__swhatbuf_r+0x12>
 8005b82:	9a01      	ldr	r2, [sp, #4]
 8005b84:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005b88:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005b8c:	425a      	negs	r2, r3
 8005b8e:	415a      	adcs	r2, r3
 8005b90:	602a      	str	r2, [r5, #0]
 8005b92:	e7ee      	b.n	8005b72 <__swhatbuf_r+0x1e>
 8005b94:	2340      	movs	r3, #64	; 0x40
 8005b96:	2000      	movs	r0, #0
 8005b98:	6023      	str	r3, [r4, #0]
 8005b9a:	b016      	add	sp, #88	; 0x58
 8005b9c:	bd70      	pop	{r4, r5, r6, pc}
	...

08005ba0 <__smakebuf_r>:
 8005ba0:	898b      	ldrh	r3, [r1, #12]
 8005ba2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005ba4:	079d      	lsls	r5, r3, #30
 8005ba6:	4606      	mov	r6, r0
 8005ba8:	460c      	mov	r4, r1
 8005baa:	d507      	bpl.n	8005bbc <__smakebuf_r+0x1c>
 8005bac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005bb0:	6023      	str	r3, [r4, #0]
 8005bb2:	6123      	str	r3, [r4, #16]
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	6163      	str	r3, [r4, #20]
 8005bb8:	b002      	add	sp, #8
 8005bba:	bd70      	pop	{r4, r5, r6, pc}
 8005bbc:	ab01      	add	r3, sp, #4
 8005bbe:	466a      	mov	r2, sp
 8005bc0:	f7ff ffc8 	bl	8005b54 <__swhatbuf_r>
 8005bc4:	9900      	ldr	r1, [sp, #0]
 8005bc6:	4605      	mov	r5, r0
 8005bc8:	4630      	mov	r0, r6
 8005bca:	f000 f895 	bl	8005cf8 <_malloc_r>
 8005bce:	b948      	cbnz	r0, 8005be4 <__smakebuf_r+0x44>
 8005bd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005bd4:	059a      	lsls	r2, r3, #22
 8005bd6:	d4ef      	bmi.n	8005bb8 <__smakebuf_r+0x18>
 8005bd8:	f023 0303 	bic.w	r3, r3, #3
 8005bdc:	f043 0302 	orr.w	r3, r3, #2
 8005be0:	81a3      	strh	r3, [r4, #12]
 8005be2:	e7e3      	b.n	8005bac <__smakebuf_r+0xc>
 8005be4:	4b0d      	ldr	r3, [pc, #52]	; (8005c1c <__smakebuf_r+0x7c>)
 8005be6:	62b3      	str	r3, [r6, #40]	; 0x28
 8005be8:	89a3      	ldrh	r3, [r4, #12]
 8005bea:	6020      	str	r0, [r4, #0]
 8005bec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bf0:	81a3      	strh	r3, [r4, #12]
 8005bf2:	9b00      	ldr	r3, [sp, #0]
 8005bf4:	6163      	str	r3, [r4, #20]
 8005bf6:	9b01      	ldr	r3, [sp, #4]
 8005bf8:	6120      	str	r0, [r4, #16]
 8005bfa:	b15b      	cbz	r3, 8005c14 <__smakebuf_r+0x74>
 8005bfc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c00:	4630      	mov	r0, r6
 8005c02:	f000 fc63 	bl	80064cc <_isatty_r>
 8005c06:	b128      	cbz	r0, 8005c14 <__smakebuf_r+0x74>
 8005c08:	89a3      	ldrh	r3, [r4, #12]
 8005c0a:	f023 0303 	bic.w	r3, r3, #3
 8005c0e:	f043 0301 	orr.w	r3, r3, #1
 8005c12:	81a3      	strh	r3, [r4, #12]
 8005c14:	89a0      	ldrh	r0, [r4, #12]
 8005c16:	4305      	orrs	r5, r0
 8005c18:	81a5      	strh	r5, [r4, #12]
 8005c1a:	e7cd      	b.n	8005bb8 <__smakebuf_r+0x18>
 8005c1c:	080059ad 	.word	0x080059ad

08005c20 <_free_r>:
 8005c20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005c22:	2900      	cmp	r1, #0
 8005c24:	d044      	beq.n	8005cb0 <_free_r+0x90>
 8005c26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c2a:	9001      	str	r0, [sp, #4]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	f1a1 0404 	sub.w	r4, r1, #4
 8005c32:	bfb8      	it	lt
 8005c34:	18e4      	addlt	r4, r4, r3
 8005c36:	f000 fc6b 	bl	8006510 <__malloc_lock>
 8005c3a:	4a1e      	ldr	r2, [pc, #120]	; (8005cb4 <_free_r+0x94>)
 8005c3c:	9801      	ldr	r0, [sp, #4]
 8005c3e:	6813      	ldr	r3, [r2, #0]
 8005c40:	b933      	cbnz	r3, 8005c50 <_free_r+0x30>
 8005c42:	6063      	str	r3, [r4, #4]
 8005c44:	6014      	str	r4, [r2, #0]
 8005c46:	b003      	add	sp, #12
 8005c48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005c4c:	f000 bc66 	b.w	800651c <__malloc_unlock>
 8005c50:	42a3      	cmp	r3, r4
 8005c52:	d908      	bls.n	8005c66 <_free_r+0x46>
 8005c54:	6825      	ldr	r5, [r4, #0]
 8005c56:	1961      	adds	r1, r4, r5
 8005c58:	428b      	cmp	r3, r1
 8005c5a:	bf01      	itttt	eq
 8005c5c:	6819      	ldreq	r1, [r3, #0]
 8005c5e:	685b      	ldreq	r3, [r3, #4]
 8005c60:	1949      	addeq	r1, r1, r5
 8005c62:	6021      	streq	r1, [r4, #0]
 8005c64:	e7ed      	b.n	8005c42 <_free_r+0x22>
 8005c66:	461a      	mov	r2, r3
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	b10b      	cbz	r3, 8005c70 <_free_r+0x50>
 8005c6c:	42a3      	cmp	r3, r4
 8005c6e:	d9fa      	bls.n	8005c66 <_free_r+0x46>
 8005c70:	6811      	ldr	r1, [r2, #0]
 8005c72:	1855      	adds	r5, r2, r1
 8005c74:	42a5      	cmp	r5, r4
 8005c76:	d10b      	bne.n	8005c90 <_free_r+0x70>
 8005c78:	6824      	ldr	r4, [r4, #0]
 8005c7a:	4421      	add	r1, r4
 8005c7c:	1854      	adds	r4, r2, r1
 8005c7e:	42a3      	cmp	r3, r4
 8005c80:	6011      	str	r1, [r2, #0]
 8005c82:	d1e0      	bne.n	8005c46 <_free_r+0x26>
 8005c84:	681c      	ldr	r4, [r3, #0]
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	6053      	str	r3, [r2, #4]
 8005c8a:	4421      	add	r1, r4
 8005c8c:	6011      	str	r1, [r2, #0]
 8005c8e:	e7da      	b.n	8005c46 <_free_r+0x26>
 8005c90:	d902      	bls.n	8005c98 <_free_r+0x78>
 8005c92:	230c      	movs	r3, #12
 8005c94:	6003      	str	r3, [r0, #0]
 8005c96:	e7d6      	b.n	8005c46 <_free_r+0x26>
 8005c98:	6825      	ldr	r5, [r4, #0]
 8005c9a:	1961      	adds	r1, r4, r5
 8005c9c:	428b      	cmp	r3, r1
 8005c9e:	bf04      	itt	eq
 8005ca0:	6819      	ldreq	r1, [r3, #0]
 8005ca2:	685b      	ldreq	r3, [r3, #4]
 8005ca4:	6063      	str	r3, [r4, #4]
 8005ca6:	bf04      	itt	eq
 8005ca8:	1949      	addeq	r1, r1, r5
 8005caa:	6021      	streq	r1, [r4, #0]
 8005cac:	6054      	str	r4, [r2, #4]
 8005cae:	e7ca      	b.n	8005c46 <_free_r+0x26>
 8005cb0:	b003      	add	sp, #12
 8005cb2:	bd30      	pop	{r4, r5, pc}
 8005cb4:	200001d8 	.word	0x200001d8

08005cb8 <sbrk_aligned>:
 8005cb8:	b570      	push	{r4, r5, r6, lr}
 8005cba:	4e0e      	ldr	r6, [pc, #56]	; (8005cf4 <sbrk_aligned+0x3c>)
 8005cbc:	460c      	mov	r4, r1
 8005cbe:	6831      	ldr	r1, [r6, #0]
 8005cc0:	4605      	mov	r5, r0
 8005cc2:	b911      	cbnz	r1, 8005cca <sbrk_aligned+0x12>
 8005cc4:	f000 fb7a 	bl	80063bc <_sbrk_r>
 8005cc8:	6030      	str	r0, [r6, #0]
 8005cca:	4621      	mov	r1, r4
 8005ccc:	4628      	mov	r0, r5
 8005cce:	f000 fb75 	bl	80063bc <_sbrk_r>
 8005cd2:	1c43      	adds	r3, r0, #1
 8005cd4:	d00a      	beq.n	8005cec <sbrk_aligned+0x34>
 8005cd6:	1cc4      	adds	r4, r0, #3
 8005cd8:	f024 0403 	bic.w	r4, r4, #3
 8005cdc:	42a0      	cmp	r0, r4
 8005cde:	d007      	beq.n	8005cf0 <sbrk_aligned+0x38>
 8005ce0:	1a21      	subs	r1, r4, r0
 8005ce2:	4628      	mov	r0, r5
 8005ce4:	f000 fb6a 	bl	80063bc <_sbrk_r>
 8005ce8:	3001      	adds	r0, #1
 8005cea:	d101      	bne.n	8005cf0 <sbrk_aligned+0x38>
 8005cec:	f04f 34ff 	mov.w	r4, #4294967295
 8005cf0:	4620      	mov	r0, r4
 8005cf2:	bd70      	pop	{r4, r5, r6, pc}
 8005cf4:	200001dc 	.word	0x200001dc

08005cf8 <_malloc_r>:
 8005cf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cfc:	1ccd      	adds	r5, r1, #3
 8005cfe:	f025 0503 	bic.w	r5, r5, #3
 8005d02:	3508      	adds	r5, #8
 8005d04:	2d0c      	cmp	r5, #12
 8005d06:	bf38      	it	cc
 8005d08:	250c      	movcc	r5, #12
 8005d0a:	2d00      	cmp	r5, #0
 8005d0c:	4607      	mov	r7, r0
 8005d0e:	db01      	blt.n	8005d14 <_malloc_r+0x1c>
 8005d10:	42a9      	cmp	r1, r5
 8005d12:	d905      	bls.n	8005d20 <_malloc_r+0x28>
 8005d14:	230c      	movs	r3, #12
 8005d16:	603b      	str	r3, [r7, #0]
 8005d18:	2600      	movs	r6, #0
 8005d1a:	4630      	mov	r0, r6
 8005d1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d20:	4e2e      	ldr	r6, [pc, #184]	; (8005ddc <_malloc_r+0xe4>)
 8005d22:	f000 fbf5 	bl	8006510 <__malloc_lock>
 8005d26:	6833      	ldr	r3, [r6, #0]
 8005d28:	461c      	mov	r4, r3
 8005d2a:	bb34      	cbnz	r4, 8005d7a <_malloc_r+0x82>
 8005d2c:	4629      	mov	r1, r5
 8005d2e:	4638      	mov	r0, r7
 8005d30:	f7ff ffc2 	bl	8005cb8 <sbrk_aligned>
 8005d34:	1c43      	adds	r3, r0, #1
 8005d36:	4604      	mov	r4, r0
 8005d38:	d14d      	bne.n	8005dd6 <_malloc_r+0xde>
 8005d3a:	6834      	ldr	r4, [r6, #0]
 8005d3c:	4626      	mov	r6, r4
 8005d3e:	2e00      	cmp	r6, #0
 8005d40:	d140      	bne.n	8005dc4 <_malloc_r+0xcc>
 8005d42:	6823      	ldr	r3, [r4, #0]
 8005d44:	4631      	mov	r1, r6
 8005d46:	4638      	mov	r0, r7
 8005d48:	eb04 0803 	add.w	r8, r4, r3
 8005d4c:	f000 fb36 	bl	80063bc <_sbrk_r>
 8005d50:	4580      	cmp	r8, r0
 8005d52:	d13a      	bne.n	8005dca <_malloc_r+0xd2>
 8005d54:	6821      	ldr	r1, [r4, #0]
 8005d56:	3503      	adds	r5, #3
 8005d58:	1a6d      	subs	r5, r5, r1
 8005d5a:	f025 0503 	bic.w	r5, r5, #3
 8005d5e:	3508      	adds	r5, #8
 8005d60:	2d0c      	cmp	r5, #12
 8005d62:	bf38      	it	cc
 8005d64:	250c      	movcc	r5, #12
 8005d66:	4629      	mov	r1, r5
 8005d68:	4638      	mov	r0, r7
 8005d6a:	f7ff ffa5 	bl	8005cb8 <sbrk_aligned>
 8005d6e:	3001      	adds	r0, #1
 8005d70:	d02b      	beq.n	8005dca <_malloc_r+0xd2>
 8005d72:	6823      	ldr	r3, [r4, #0]
 8005d74:	442b      	add	r3, r5
 8005d76:	6023      	str	r3, [r4, #0]
 8005d78:	e00e      	b.n	8005d98 <_malloc_r+0xa0>
 8005d7a:	6822      	ldr	r2, [r4, #0]
 8005d7c:	1b52      	subs	r2, r2, r5
 8005d7e:	d41e      	bmi.n	8005dbe <_malloc_r+0xc6>
 8005d80:	2a0b      	cmp	r2, #11
 8005d82:	d916      	bls.n	8005db2 <_malloc_r+0xba>
 8005d84:	1961      	adds	r1, r4, r5
 8005d86:	42a3      	cmp	r3, r4
 8005d88:	6025      	str	r5, [r4, #0]
 8005d8a:	bf18      	it	ne
 8005d8c:	6059      	strne	r1, [r3, #4]
 8005d8e:	6863      	ldr	r3, [r4, #4]
 8005d90:	bf08      	it	eq
 8005d92:	6031      	streq	r1, [r6, #0]
 8005d94:	5162      	str	r2, [r4, r5]
 8005d96:	604b      	str	r3, [r1, #4]
 8005d98:	4638      	mov	r0, r7
 8005d9a:	f104 060b 	add.w	r6, r4, #11
 8005d9e:	f000 fbbd 	bl	800651c <__malloc_unlock>
 8005da2:	f026 0607 	bic.w	r6, r6, #7
 8005da6:	1d23      	adds	r3, r4, #4
 8005da8:	1af2      	subs	r2, r6, r3
 8005daa:	d0b6      	beq.n	8005d1a <_malloc_r+0x22>
 8005dac:	1b9b      	subs	r3, r3, r6
 8005dae:	50a3      	str	r3, [r4, r2]
 8005db0:	e7b3      	b.n	8005d1a <_malloc_r+0x22>
 8005db2:	6862      	ldr	r2, [r4, #4]
 8005db4:	42a3      	cmp	r3, r4
 8005db6:	bf0c      	ite	eq
 8005db8:	6032      	streq	r2, [r6, #0]
 8005dba:	605a      	strne	r2, [r3, #4]
 8005dbc:	e7ec      	b.n	8005d98 <_malloc_r+0xa0>
 8005dbe:	4623      	mov	r3, r4
 8005dc0:	6864      	ldr	r4, [r4, #4]
 8005dc2:	e7b2      	b.n	8005d2a <_malloc_r+0x32>
 8005dc4:	4634      	mov	r4, r6
 8005dc6:	6876      	ldr	r6, [r6, #4]
 8005dc8:	e7b9      	b.n	8005d3e <_malloc_r+0x46>
 8005dca:	230c      	movs	r3, #12
 8005dcc:	603b      	str	r3, [r7, #0]
 8005dce:	4638      	mov	r0, r7
 8005dd0:	f000 fba4 	bl	800651c <__malloc_unlock>
 8005dd4:	e7a1      	b.n	8005d1a <_malloc_r+0x22>
 8005dd6:	6025      	str	r5, [r4, #0]
 8005dd8:	e7de      	b.n	8005d98 <_malloc_r+0xa0>
 8005dda:	bf00      	nop
 8005ddc:	200001d8 	.word	0x200001d8

08005de0 <__sfputc_r>:
 8005de0:	6893      	ldr	r3, [r2, #8]
 8005de2:	3b01      	subs	r3, #1
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	b410      	push	{r4}
 8005de8:	6093      	str	r3, [r2, #8]
 8005dea:	da08      	bge.n	8005dfe <__sfputc_r+0x1e>
 8005dec:	6994      	ldr	r4, [r2, #24]
 8005dee:	42a3      	cmp	r3, r4
 8005df0:	db01      	blt.n	8005df6 <__sfputc_r+0x16>
 8005df2:	290a      	cmp	r1, #10
 8005df4:	d103      	bne.n	8005dfe <__sfputc_r+0x1e>
 8005df6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005dfa:	f7ff bc31 	b.w	8005660 <__swbuf_r>
 8005dfe:	6813      	ldr	r3, [r2, #0]
 8005e00:	1c58      	adds	r0, r3, #1
 8005e02:	6010      	str	r0, [r2, #0]
 8005e04:	7019      	strb	r1, [r3, #0]
 8005e06:	4608      	mov	r0, r1
 8005e08:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005e0c:	4770      	bx	lr

08005e0e <__sfputs_r>:
 8005e0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e10:	4606      	mov	r6, r0
 8005e12:	460f      	mov	r7, r1
 8005e14:	4614      	mov	r4, r2
 8005e16:	18d5      	adds	r5, r2, r3
 8005e18:	42ac      	cmp	r4, r5
 8005e1a:	d101      	bne.n	8005e20 <__sfputs_r+0x12>
 8005e1c:	2000      	movs	r0, #0
 8005e1e:	e007      	b.n	8005e30 <__sfputs_r+0x22>
 8005e20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e24:	463a      	mov	r2, r7
 8005e26:	4630      	mov	r0, r6
 8005e28:	f7ff ffda 	bl	8005de0 <__sfputc_r>
 8005e2c:	1c43      	adds	r3, r0, #1
 8005e2e:	d1f3      	bne.n	8005e18 <__sfputs_r+0xa>
 8005e30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005e34 <_vfiprintf_r>:
 8005e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e38:	460d      	mov	r5, r1
 8005e3a:	b09d      	sub	sp, #116	; 0x74
 8005e3c:	4614      	mov	r4, r2
 8005e3e:	4698      	mov	r8, r3
 8005e40:	4606      	mov	r6, r0
 8005e42:	b118      	cbz	r0, 8005e4c <_vfiprintf_r+0x18>
 8005e44:	6983      	ldr	r3, [r0, #24]
 8005e46:	b90b      	cbnz	r3, 8005e4c <_vfiprintf_r+0x18>
 8005e48:	f7ff fde4 	bl	8005a14 <__sinit>
 8005e4c:	4b89      	ldr	r3, [pc, #548]	; (8006074 <_vfiprintf_r+0x240>)
 8005e4e:	429d      	cmp	r5, r3
 8005e50:	d11b      	bne.n	8005e8a <_vfiprintf_r+0x56>
 8005e52:	6875      	ldr	r5, [r6, #4]
 8005e54:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005e56:	07d9      	lsls	r1, r3, #31
 8005e58:	d405      	bmi.n	8005e66 <_vfiprintf_r+0x32>
 8005e5a:	89ab      	ldrh	r3, [r5, #12]
 8005e5c:	059a      	lsls	r2, r3, #22
 8005e5e:	d402      	bmi.n	8005e66 <_vfiprintf_r+0x32>
 8005e60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005e62:	f7ff fe75 	bl	8005b50 <__retarget_lock_acquire_recursive>
 8005e66:	89ab      	ldrh	r3, [r5, #12]
 8005e68:	071b      	lsls	r3, r3, #28
 8005e6a:	d501      	bpl.n	8005e70 <_vfiprintf_r+0x3c>
 8005e6c:	692b      	ldr	r3, [r5, #16]
 8005e6e:	b9eb      	cbnz	r3, 8005eac <_vfiprintf_r+0x78>
 8005e70:	4629      	mov	r1, r5
 8005e72:	4630      	mov	r0, r6
 8005e74:	f7ff fc46 	bl	8005704 <__swsetup_r>
 8005e78:	b1c0      	cbz	r0, 8005eac <_vfiprintf_r+0x78>
 8005e7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005e7c:	07dc      	lsls	r4, r3, #31
 8005e7e:	d50e      	bpl.n	8005e9e <_vfiprintf_r+0x6a>
 8005e80:	f04f 30ff 	mov.w	r0, #4294967295
 8005e84:	b01d      	add	sp, #116	; 0x74
 8005e86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e8a:	4b7b      	ldr	r3, [pc, #492]	; (8006078 <_vfiprintf_r+0x244>)
 8005e8c:	429d      	cmp	r5, r3
 8005e8e:	d101      	bne.n	8005e94 <_vfiprintf_r+0x60>
 8005e90:	68b5      	ldr	r5, [r6, #8]
 8005e92:	e7df      	b.n	8005e54 <_vfiprintf_r+0x20>
 8005e94:	4b79      	ldr	r3, [pc, #484]	; (800607c <_vfiprintf_r+0x248>)
 8005e96:	429d      	cmp	r5, r3
 8005e98:	bf08      	it	eq
 8005e9a:	68f5      	ldreq	r5, [r6, #12]
 8005e9c:	e7da      	b.n	8005e54 <_vfiprintf_r+0x20>
 8005e9e:	89ab      	ldrh	r3, [r5, #12]
 8005ea0:	0598      	lsls	r0, r3, #22
 8005ea2:	d4ed      	bmi.n	8005e80 <_vfiprintf_r+0x4c>
 8005ea4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005ea6:	f7ff fe54 	bl	8005b52 <__retarget_lock_release_recursive>
 8005eaa:	e7e9      	b.n	8005e80 <_vfiprintf_r+0x4c>
 8005eac:	2300      	movs	r3, #0
 8005eae:	9309      	str	r3, [sp, #36]	; 0x24
 8005eb0:	2320      	movs	r3, #32
 8005eb2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005eb6:	f8cd 800c 	str.w	r8, [sp, #12]
 8005eba:	2330      	movs	r3, #48	; 0x30
 8005ebc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006080 <_vfiprintf_r+0x24c>
 8005ec0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005ec4:	f04f 0901 	mov.w	r9, #1
 8005ec8:	4623      	mov	r3, r4
 8005eca:	469a      	mov	sl, r3
 8005ecc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ed0:	b10a      	cbz	r2, 8005ed6 <_vfiprintf_r+0xa2>
 8005ed2:	2a25      	cmp	r2, #37	; 0x25
 8005ed4:	d1f9      	bne.n	8005eca <_vfiprintf_r+0x96>
 8005ed6:	ebba 0b04 	subs.w	fp, sl, r4
 8005eda:	d00b      	beq.n	8005ef4 <_vfiprintf_r+0xc0>
 8005edc:	465b      	mov	r3, fp
 8005ede:	4622      	mov	r2, r4
 8005ee0:	4629      	mov	r1, r5
 8005ee2:	4630      	mov	r0, r6
 8005ee4:	f7ff ff93 	bl	8005e0e <__sfputs_r>
 8005ee8:	3001      	adds	r0, #1
 8005eea:	f000 80aa 	beq.w	8006042 <_vfiprintf_r+0x20e>
 8005eee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ef0:	445a      	add	r2, fp
 8005ef2:	9209      	str	r2, [sp, #36]	; 0x24
 8005ef4:	f89a 3000 	ldrb.w	r3, [sl]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	f000 80a2 	beq.w	8006042 <_vfiprintf_r+0x20e>
 8005efe:	2300      	movs	r3, #0
 8005f00:	f04f 32ff 	mov.w	r2, #4294967295
 8005f04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005f08:	f10a 0a01 	add.w	sl, sl, #1
 8005f0c:	9304      	str	r3, [sp, #16]
 8005f0e:	9307      	str	r3, [sp, #28]
 8005f10:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005f14:	931a      	str	r3, [sp, #104]	; 0x68
 8005f16:	4654      	mov	r4, sl
 8005f18:	2205      	movs	r2, #5
 8005f1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f1e:	4858      	ldr	r0, [pc, #352]	; (8006080 <_vfiprintf_r+0x24c>)
 8005f20:	f7fa f966 	bl	80001f0 <memchr>
 8005f24:	9a04      	ldr	r2, [sp, #16]
 8005f26:	b9d8      	cbnz	r0, 8005f60 <_vfiprintf_r+0x12c>
 8005f28:	06d1      	lsls	r1, r2, #27
 8005f2a:	bf44      	itt	mi
 8005f2c:	2320      	movmi	r3, #32
 8005f2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f32:	0713      	lsls	r3, r2, #28
 8005f34:	bf44      	itt	mi
 8005f36:	232b      	movmi	r3, #43	; 0x2b
 8005f38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f3c:	f89a 3000 	ldrb.w	r3, [sl]
 8005f40:	2b2a      	cmp	r3, #42	; 0x2a
 8005f42:	d015      	beq.n	8005f70 <_vfiprintf_r+0x13c>
 8005f44:	9a07      	ldr	r2, [sp, #28]
 8005f46:	4654      	mov	r4, sl
 8005f48:	2000      	movs	r0, #0
 8005f4a:	f04f 0c0a 	mov.w	ip, #10
 8005f4e:	4621      	mov	r1, r4
 8005f50:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005f54:	3b30      	subs	r3, #48	; 0x30
 8005f56:	2b09      	cmp	r3, #9
 8005f58:	d94e      	bls.n	8005ff8 <_vfiprintf_r+0x1c4>
 8005f5a:	b1b0      	cbz	r0, 8005f8a <_vfiprintf_r+0x156>
 8005f5c:	9207      	str	r2, [sp, #28]
 8005f5e:	e014      	b.n	8005f8a <_vfiprintf_r+0x156>
 8005f60:	eba0 0308 	sub.w	r3, r0, r8
 8005f64:	fa09 f303 	lsl.w	r3, r9, r3
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	9304      	str	r3, [sp, #16]
 8005f6c:	46a2      	mov	sl, r4
 8005f6e:	e7d2      	b.n	8005f16 <_vfiprintf_r+0xe2>
 8005f70:	9b03      	ldr	r3, [sp, #12]
 8005f72:	1d19      	adds	r1, r3, #4
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	9103      	str	r1, [sp, #12]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	bfbb      	ittet	lt
 8005f7c:	425b      	neglt	r3, r3
 8005f7e:	f042 0202 	orrlt.w	r2, r2, #2
 8005f82:	9307      	strge	r3, [sp, #28]
 8005f84:	9307      	strlt	r3, [sp, #28]
 8005f86:	bfb8      	it	lt
 8005f88:	9204      	strlt	r2, [sp, #16]
 8005f8a:	7823      	ldrb	r3, [r4, #0]
 8005f8c:	2b2e      	cmp	r3, #46	; 0x2e
 8005f8e:	d10c      	bne.n	8005faa <_vfiprintf_r+0x176>
 8005f90:	7863      	ldrb	r3, [r4, #1]
 8005f92:	2b2a      	cmp	r3, #42	; 0x2a
 8005f94:	d135      	bne.n	8006002 <_vfiprintf_r+0x1ce>
 8005f96:	9b03      	ldr	r3, [sp, #12]
 8005f98:	1d1a      	adds	r2, r3, #4
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	9203      	str	r2, [sp, #12]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	bfb8      	it	lt
 8005fa2:	f04f 33ff 	movlt.w	r3, #4294967295
 8005fa6:	3402      	adds	r4, #2
 8005fa8:	9305      	str	r3, [sp, #20]
 8005faa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006090 <_vfiprintf_r+0x25c>
 8005fae:	7821      	ldrb	r1, [r4, #0]
 8005fb0:	2203      	movs	r2, #3
 8005fb2:	4650      	mov	r0, sl
 8005fb4:	f7fa f91c 	bl	80001f0 <memchr>
 8005fb8:	b140      	cbz	r0, 8005fcc <_vfiprintf_r+0x198>
 8005fba:	2340      	movs	r3, #64	; 0x40
 8005fbc:	eba0 000a 	sub.w	r0, r0, sl
 8005fc0:	fa03 f000 	lsl.w	r0, r3, r0
 8005fc4:	9b04      	ldr	r3, [sp, #16]
 8005fc6:	4303      	orrs	r3, r0
 8005fc8:	3401      	adds	r4, #1
 8005fca:	9304      	str	r3, [sp, #16]
 8005fcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005fd0:	482c      	ldr	r0, [pc, #176]	; (8006084 <_vfiprintf_r+0x250>)
 8005fd2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005fd6:	2206      	movs	r2, #6
 8005fd8:	f7fa f90a 	bl	80001f0 <memchr>
 8005fdc:	2800      	cmp	r0, #0
 8005fde:	d03f      	beq.n	8006060 <_vfiprintf_r+0x22c>
 8005fe0:	4b29      	ldr	r3, [pc, #164]	; (8006088 <_vfiprintf_r+0x254>)
 8005fe2:	bb1b      	cbnz	r3, 800602c <_vfiprintf_r+0x1f8>
 8005fe4:	9b03      	ldr	r3, [sp, #12]
 8005fe6:	3307      	adds	r3, #7
 8005fe8:	f023 0307 	bic.w	r3, r3, #7
 8005fec:	3308      	adds	r3, #8
 8005fee:	9303      	str	r3, [sp, #12]
 8005ff0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ff2:	443b      	add	r3, r7
 8005ff4:	9309      	str	r3, [sp, #36]	; 0x24
 8005ff6:	e767      	b.n	8005ec8 <_vfiprintf_r+0x94>
 8005ff8:	fb0c 3202 	mla	r2, ip, r2, r3
 8005ffc:	460c      	mov	r4, r1
 8005ffe:	2001      	movs	r0, #1
 8006000:	e7a5      	b.n	8005f4e <_vfiprintf_r+0x11a>
 8006002:	2300      	movs	r3, #0
 8006004:	3401      	adds	r4, #1
 8006006:	9305      	str	r3, [sp, #20]
 8006008:	4619      	mov	r1, r3
 800600a:	f04f 0c0a 	mov.w	ip, #10
 800600e:	4620      	mov	r0, r4
 8006010:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006014:	3a30      	subs	r2, #48	; 0x30
 8006016:	2a09      	cmp	r2, #9
 8006018:	d903      	bls.n	8006022 <_vfiprintf_r+0x1ee>
 800601a:	2b00      	cmp	r3, #0
 800601c:	d0c5      	beq.n	8005faa <_vfiprintf_r+0x176>
 800601e:	9105      	str	r1, [sp, #20]
 8006020:	e7c3      	b.n	8005faa <_vfiprintf_r+0x176>
 8006022:	fb0c 2101 	mla	r1, ip, r1, r2
 8006026:	4604      	mov	r4, r0
 8006028:	2301      	movs	r3, #1
 800602a:	e7f0      	b.n	800600e <_vfiprintf_r+0x1da>
 800602c:	ab03      	add	r3, sp, #12
 800602e:	9300      	str	r3, [sp, #0]
 8006030:	462a      	mov	r2, r5
 8006032:	4b16      	ldr	r3, [pc, #88]	; (800608c <_vfiprintf_r+0x258>)
 8006034:	a904      	add	r1, sp, #16
 8006036:	4630      	mov	r0, r6
 8006038:	f3af 8000 	nop.w
 800603c:	4607      	mov	r7, r0
 800603e:	1c78      	adds	r0, r7, #1
 8006040:	d1d6      	bne.n	8005ff0 <_vfiprintf_r+0x1bc>
 8006042:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006044:	07d9      	lsls	r1, r3, #31
 8006046:	d405      	bmi.n	8006054 <_vfiprintf_r+0x220>
 8006048:	89ab      	ldrh	r3, [r5, #12]
 800604a:	059a      	lsls	r2, r3, #22
 800604c:	d402      	bmi.n	8006054 <_vfiprintf_r+0x220>
 800604e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006050:	f7ff fd7f 	bl	8005b52 <__retarget_lock_release_recursive>
 8006054:	89ab      	ldrh	r3, [r5, #12]
 8006056:	065b      	lsls	r3, r3, #25
 8006058:	f53f af12 	bmi.w	8005e80 <_vfiprintf_r+0x4c>
 800605c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800605e:	e711      	b.n	8005e84 <_vfiprintf_r+0x50>
 8006060:	ab03      	add	r3, sp, #12
 8006062:	9300      	str	r3, [sp, #0]
 8006064:	462a      	mov	r2, r5
 8006066:	4b09      	ldr	r3, [pc, #36]	; (800608c <_vfiprintf_r+0x258>)
 8006068:	a904      	add	r1, sp, #16
 800606a:	4630      	mov	r0, r6
 800606c:	f000 f880 	bl	8006170 <_printf_i>
 8006070:	e7e4      	b.n	800603c <_vfiprintf_r+0x208>
 8006072:	bf00      	nop
 8006074:	080065f8 	.word	0x080065f8
 8006078:	08006618 	.word	0x08006618
 800607c:	080065d8 	.word	0x080065d8
 8006080:	08006638 	.word	0x08006638
 8006084:	08006642 	.word	0x08006642
 8006088:	00000000 	.word	0x00000000
 800608c:	08005e0f 	.word	0x08005e0f
 8006090:	0800663e 	.word	0x0800663e

08006094 <_printf_common>:
 8006094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006098:	4616      	mov	r6, r2
 800609a:	4699      	mov	r9, r3
 800609c:	688a      	ldr	r2, [r1, #8]
 800609e:	690b      	ldr	r3, [r1, #16]
 80060a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80060a4:	4293      	cmp	r3, r2
 80060a6:	bfb8      	it	lt
 80060a8:	4613      	movlt	r3, r2
 80060aa:	6033      	str	r3, [r6, #0]
 80060ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80060b0:	4607      	mov	r7, r0
 80060b2:	460c      	mov	r4, r1
 80060b4:	b10a      	cbz	r2, 80060ba <_printf_common+0x26>
 80060b6:	3301      	adds	r3, #1
 80060b8:	6033      	str	r3, [r6, #0]
 80060ba:	6823      	ldr	r3, [r4, #0]
 80060bc:	0699      	lsls	r1, r3, #26
 80060be:	bf42      	ittt	mi
 80060c0:	6833      	ldrmi	r3, [r6, #0]
 80060c2:	3302      	addmi	r3, #2
 80060c4:	6033      	strmi	r3, [r6, #0]
 80060c6:	6825      	ldr	r5, [r4, #0]
 80060c8:	f015 0506 	ands.w	r5, r5, #6
 80060cc:	d106      	bne.n	80060dc <_printf_common+0x48>
 80060ce:	f104 0a19 	add.w	sl, r4, #25
 80060d2:	68e3      	ldr	r3, [r4, #12]
 80060d4:	6832      	ldr	r2, [r6, #0]
 80060d6:	1a9b      	subs	r3, r3, r2
 80060d8:	42ab      	cmp	r3, r5
 80060da:	dc26      	bgt.n	800612a <_printf_common+0x96>
 80060dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80060e0:	1e13      	subs	r3, r2, #0
 80060e2:	6822      	ldr	r2, [r4, #0]
 80060e4:	bf18      	it	ne
 80060e6:	2301      	movne	r3, #1
 80060e8:	0692      	lsls	r2, r2, #26
 80060ea:	d42b      	bmi.n	8006144 <_printf_common+0xb0>
 80060ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80060f0:	4649      	mov	r1, r9
 80060f2:	4638      	mov	r0, r7
 80060f4:	47c0      	blx	r8
 80060f6:	3001      	adds	r0, #1
 80060f8:	d01e      	beq.n	8006138 <_printf_common+0xa4>
 80060fa:	6823      	ldr	r3, [r4, #0]
 80060fc:	68e5      	ldr	r5, [r4, #12]
 80060fe:	6832      	ldr	r2, [r6, #0]
 8006100:	f003 0306 	and.w	r3, r3, #6
 8006104:	2b04      	cmp	r3, #4
 8006106:	bf08      	it	eq
 8006108:	1aad      	subeq	r5, r5, r2
 800610a:	68a3      	ldr	r3, [r4, #8]
 800610c:	6922      	ldr	r2, [r4, #16]
 800610e:	bf0c      	ite	eq
 8006110:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006114:	2500      	movne	r5, #0
 8006116:	4293      	cmp	r3, r2
 8006118:	bfc4      	itt	gt
 800611a:	1a9b      	subgt	r3, r3, r2
 800611c:	18ed      	addgt	r5, r5, r3
 800611e:	2600      	movs	r6, #0
 8006120:	341a      	adds	r4, #26
 8006122:	42b5      	cmp	r5, r6
 8006124:	d11a      	bne.n	800615c <_printf_common+0xc8>
 8006126:	2000      	movs	r0, #0
 8006128:	e008      	b.n	800613c <_printf_common+0xa8>
 800612a:	2301      	movs	r3, #1
 800612c:	4652      	mov	r2, sl
 800612e:	4649      	mov	r1, r9
 8006130:	4638      	mov	r0, r7
 8006132:	47c0      	blx	r8
 8006134:	3001      	adds	r0, #1
 8006136:	d103      	bne.n	8006140 <_printf_common+0xac>
 8006138:	f04f 30ff 	mov.w	r0, #4294967295
 800613c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006140:	3501      	adds	r5, #1
 8006142:	e7c6      	b.n	80060d2 <_printf_common+0x3e>
 8006144:	18e1      	adds	r1, r4, r3
 8006146:	1c5a      	adds	r2, r3, #1
 8006148:	2030      	movs	r0, #48	; 0x30
 800614a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800614e:	4422      	add	r2, r4
 8006150:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006154:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006158:	3302      	adds	r3, #2
 800615a:	e7c7      	b.n	80060ec <_printf_common+0x58>
 800615c:	2301      	movs	r3, #1
 800615e:	4622      	mov	r2, r4
 8006160:	4649      	mov	r1, r9
 8006162:	4638      	mov	r0, r7
 8006164:	47c0      	blx	r8
 8006166:	3001      	adds	r0, #1
 8006168:	d0e6      	beq.n	8006138 <_printf_common+0xa4>
 800616a:	3601      	adds	r6, #1
 800616c:	e7d9      	b.n	8006122 <_printf_common+0x8e>
	...

08006170 <_printf_i>:
 8006170:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006174:	7e0f      	ldrb	r7, [r1, #24]
 8006176:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006178:	2f78      	cmp	r7, #120	; 0x78
 800617a:	4691      	mov	r9, r2
 800617c:	4680      	mov	r8, r0
 800617e:	460c      	mov	r4, r1
 8006180:	469a      	mov	sl, r3
 8006182:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006186:	d807      	bhi.n	8006198 <_printf_i+0x28>
 8006188:	2f62      	cmp	r7, #98	; 0x62
 800618a:	d80a      	bhi.n	80061a2 <_printf_i+0x32>
 800618c:	2f00      	cmp	r7, #0
 800618e:	f000 80d8 	beq.w	8006342 <_printf_i+0x1d2>
 8006192:	2f58      	cmp	r7, #88	; 0x58
 8006194:	f000 80a3 	beq.w	80062de <_printf_i+0x16e>
 8006198:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800619c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80061a0:	e03a      	b.n	8006218 <_printf_i+0xa8>
 80061a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80061a6:	2b15      	cmp	r3, #21
 80061a8:	d8f6      	bhi.n	8006198 <_printf_i+0x28>
 80061aa:	a101      	add	r1, pc, #4	; (adr r1, 80061b0 <_printf_i+0x40>)
 80061ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80061b0:	08006209 	.word	0x08006209
 80061b4:	0800621d 	.word	0x0800621d
 80061b8:	08006199 	.word	0x08006199
 80061bc:	08006199 	.word	0x08006199
 80061c0:	08006199 	.word	0x08006199
 80061c4:	08006199 	.word	0x08006199
 80061c8:	0800621d 	.word	0x0800621d
 80061cc:	08006199 	.word	0x08006199
 80061d0:	08006199 	.word	0x08006199
 80061d4:	08006199 	.word	0x08006199
 80061d8:	08006199 	.word	0x08006199
 80061dc:	08006329 	.word	0x08006329
 80061e0:	0800624d 	.word	0x0800624d
 80061e4:	0800630b 	.word	0x0800630b
 80061e8:	08006199 	.word	0x08006199
 80061ec:	08006199 	.word	0x08006199
 80061f0:	0800634b 	.word	0x0800634b
 80061f4:	08006199 	.word	0x08006199
 80061f8:	0800624d 	.word	0x0800624d
 80061fc:	08006199 	.word	0x08006199
 8006200:	08006199 	.word	0x08006199
 8006204:	08006313 	.word	0x08006313
 8006208:	682b      	ldr	r3, [r5, #0]
 800620a:	1d1a      	adds	r2, r3, #4
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	602a      	str	r2, [r5, #0]
 8006210:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006214:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006218:	2301      	movs	r3, #1
 800621a:	e0a3      	b.n	8006364 <_printf_i+0x1f4>
 800621c:	6820      	ldr	r0, [r4, #0]
 800621e:	6829      	ldr	r1, [r5, #0]
 8006220:	0606      	lsls	r6, r0, #24
 8006222:	f101 0304 	add.w	r3, r1, #4
 8006226:	d50a      	bpl.n	800623e <_printf_i+0xce>
 8006228:	680e      	ldr	r6, [r1, #0]
 800622a:	602b      	str	r3, [r5, #0]
 800622c:	2e00      	cmp	r6, #0
 800622e:	da03      	bge.n	8006238 <_printf_i+0xc8>
 8006230:	232d      	movs	r3, #45	; 0x2d
 8006232:	4276      	negs	r6, r6
 8006234:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006238:	485e      	ldr	r0, [pc, #376]	; (80063b4 <_printf_i+0x244>)
 800623a:	230a      	movs	r3, #10
 800623c:	e019      	b.n	8006272 <_printf_i+0x102>
 800623e:	680e      	ldr	r6, [r1, #0]
 8006240:	602b      	str	r3, [r5, #0]
 8006242:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006246:	bf18      	it	ne
 8006248:	b236      	sxthne	r6, r6
 800624a:	e7ef      	b.n	800622c <_printf_i+0xbc>
 800624c:	682b      	ldr	r3, [r5, #0]
 800624e:	6820      	ldr	r0, [r4, #0]
 8006250:	1d19      	adds	r1, r3, #4
 8006252:	6029      	str	r1, [r5, #0]
 8006254:	0601      	lsls	r1, r0, #24
 8006256:	d501      	bpl.n	800625c <_printf_i+0xec>
 8006258:	681e      	ldr	r6, [r3, #0]
 800625a:	e002      	b.n	8006262 <_printf_i+0xf2>
 800625c:	0646      	lsls	r6, r0, #25
 800625e:	d5fb      	bpl.n	8006258 <_printf_i+0xe8>
 8006260:	881e      	ldrh	r6, [r3, #0]
 8006262:	4854      	ldr	r0, [pc, #336]	; (80063b4 <_printf_i+0x244>)
 8006264:	2f6f      	cmp	r7, #111	; 0x6f
 8006266:	bf0c      	ite	eq
 8006268:	2308      	moveq	r3, #8
 800626a:	230a      	movne	r3, #10
 800626c:	2100      	movs	r1, #0
 800626e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006272:	6865      	ldr	r5, [r4, #4]
 8006274:	60a5      	str	r5, [r4, #8]
 8006276:	2d00      	cmp	r5, #0
 8006278:	bfa2      	ittt	ge
 800627a:	6821      	ldrge	r1, [r4, #0]
 800627c:	f021 0104 	bicge.w	r1, r1, #4
 8006280:	6021      	strge	r1, [r4, #0]
 8006282:	b90e      	cbnz	r6, 8006288 <_printf_i+0x118>
 8006284:	2d00      	cmp	r5, #0
 8006286:	d04d      	beq.n	8006324 <_printf_i+0x1b4>
 8006288:	4615      	mov	r5, r2
 800628a:	fbb6 f1f3 	udiv	r1, r6, r3
 800628e:	fb03 6711 	mls	r7, r3, r1, r6
 8006292:	5dc7      	ldrb	r7, [r0, r7]
 8006294:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006298:	4637      	mov	r7, r6
 800629a:	42bb      	cmp	r3, r7
 800629c:	460e      	mov	r6, r1
 800629e:	d9f4      	bls.n	800628a <_printf_i+0x11a>
 80062a0:	2b08      	cmp	r3, #8
 80062a2:	d10b      	bne.n	80062bc <_printf_i+0x14c>
 80062a4:	6823      	ldr	r3, [r4, #0]
 80062a6:	07de      	lsls	r6, r3, #31
 80062a8:	d508      	bpl.n	80062bc <_printf_i+0x14c>
 80062aa:	6923      	ldr	r3, [r4, #16]
 80062ac:	6861      	ldr	r1, [r4, #4]
 80062ae:	4299      	cmp	r1, r3
 80062b0:	bfde      	ittt	le
 80062b2:	2330      	movle	r3, #48	; 0x30
 80062b4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80062b8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80062bc:	1b52      	subs	r2, r2, r5
 80062be:	6122      	str	r2, [r4, #16]
 80062c0:	f8cd a000 	str.w	sl, [sp]
 80062c4:	464b      	mov	r3, r9
 80062c6:	aa03      	add	r2, sp, #12
 80062c8:	4621      	mov	r1, r4
 80062ca:	4640      	mov	r0, r8
 80062cc:	f7ff fee2 	bl	8006094 <_printf_common>
 80062d0:	3001      	adds	r0, #1
 80062d2:	d14c      	bne.n	800636e <_printf_i+0x1fe>
 80062d4:	f04f 30ff 	mov.w	r0, #4294967295
 80062d8:	b004      	add	sp, #16
 80062da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062de:	4835      	ldr	r0, [pc, #212]	; (80063b4 <_printf_i+0x244>)
 80062e0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80062e4:	6829      	ldr	r1, [r5, #0]
 80062e6:	6823      	ldr	r3, [r4, #0]
 80062e8:	f851 6b04 	ldr.w	r6, [r1], #4
 80062ec:	6029      	str	r1, [r5, #0]
 80062ee:	061d      	lsls	r5, r3, #24
 80062f0:	d514      	bpl.n	800631c <_printf_i+0x1ac>
 80062f2:	07df      	lsls	r7, r3, #31
 80062f4:	bf44      	itt	mi
 80062f6:	f043 0320 	orrmi.w	r3, r3, #32
 80062fa:	6023      	strmi	r3, [r4, #0]
 80062fc:	b91e      	cbnz	r6, 8006306 <_printf_i+0x196>
 80062fe:	6823      	ldr	r3, [r4, #0]
 8006300:	f023 0320 	bic.w	r3, r3, #32
 8006304:	6023      	str	r3, [r4, #0]
 8006306:	2310      	movs	r3, #16
 8006308:	e7b0      	b.n	800626c <_printf_i+0xfc>
 800630a:	6823      	ldr	r3, [r4, #0]
 800630c:	f043 0320 	orr.w	r3, r3, #32
 8006310:	6023      	str	r3, [r4, #0]
 8006312:	2378      	movs	r3, #120	; 0x78
 8006314:	4828      	ldr	r0, [pc, #160]	; (80063b8 <_printf_i+0x248>)
 8006316:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800631a:	e7e3      	b.n	80062e4 <_printf_i+0x174>
 800631c:	0659      	lsls	r1, r3, #25
 800631e:	bf48      	it	mi
 8006320:	b2b6      	uxthmi	r6, r6
 8006322:	e7e6      	b.n	80062f2 <_printf_i+0x182>
 8006324:	4615      	mov	r5, r2
 8006326:	e7bb      	b.n	80062a0 <_printf_i+0x130>
 8006328:	682b      	ldr	r3, [r5, #0]
 800632a:	6826      	ldr	r6, [r4, #0]
 800632c:	6961      	ldr	r1, [r4, #20]
 800632e:	1d18      	adds	r0, r3, #4
 8006330:	6028      	str	r0, [r5, #0]
 8006332:	0635      	lsls	r5, r6, #24
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	d501      	bpl.n	800633c <_printf_i+0x1cc>
 8006338:	6019      	str	r1, [r3, #0]
 800633a:	e002      	b.n	8006342 <_printf_i+0x1d2>
 800633c:	0670      	lsls	r0, r6, #25
 800633e:	d5fb      	bpl.n	8006338 <_printf_i+0x1c8>
 8006340:	8019      	strh	r1, [r3, #0]
 8006342:	2300      	movs	r3, #0
 8006344:	6123      	str	r3, [r4, #16]
 8006346:	4615      	mov	r5, r2
 8006348:	e7ba      	b.n	80062c0 <_printf_i+0x150>
 800634a:	682b      	ldr	r3, [r5, #0]
 800634c:	1d1a      	adds	r2, r3, #4
 800634e:	602a      	str	r2, [r5, #0]
 8006350:	681d      	ldr	r5, [r3, #0]
 8006352:	6862      	ldr	r2, [r4, #4]
 8006354:	2100      	movs	r1, #0
 8006356:	4628      	mov	r0, r5
 8006358:	f7f9 ff4a 	bl	80001f0 <memchr>
 800635c:	b108      	cbz	r0, 8006362 <_printf_i+0x1f2>
 800635e:	1b40      	subs	r0, r0, r5
 8006360:	6060      	str	r0, [r4, #4]
 8006362:	6863      	ldr	r3, [r4, #4]
 8006364:	6123      	str	r3, [r4, #16]
 8006366:	2300      	movs	r3, #0
 8006368:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800636c:	e7a8      	b.n	80062c0 <_printf_i+0x150>
 800636e:	6923      	ldr	r3, [r4, #16]
 8006370:	462a      	mov	r2, r5
 8006372:	4649      	mov	r1, r9
 8006374:	4640      	mov	r0, r8
 8006376:	47d0      	blx	sl
 8006378:	3001      	adds	r0, #1
 800637a:	d0ab      	beq.n	80062d4 <_printf_i+0x164>
 800637c:	6823      	ldr	r3, [r4, #0]
 800637e:	079b      	lsls	r3, r3, #30
 8006380:	d413      	bmi.n	80063aa <_printf_i+0x23a>
 8006382:	68e0      	ldr	r0, [r4, #12]
 8006384:	9b03      	ldr	r3, [sp, #12]
 8006386:	4298      	cmp	r0, r3
 8006388:	bfb8      	it	lt
 800638a:	4618      	movlt	r0, r3
 800638c:	e7a4      	b.n	80062d8 <_printf_i+0x168>
 800638e:	2301      	movs	r3, #1
 8006390:	4632      	mov	r2, r6
 8006392:	4649      	mov	r1, r9
 8006394:	4640      	mov	r0, r8
 8006396:	47d0      	blx	sl
 8006398:	3001      	adds	r0, #1
 800639a:	d09b      	beq.n	80062d4 <_printf_i+0x164>
 800639c:	3501      	adds	r5, #1
 800639e:	68e3      	ldr	r3, [r4, #12]
 80063a0:	9903      	ldr	r1, [sp, #12]
 80063a2:	1a5b      	subs	r3, r3, r1
 80063a4:	42ab      	cmp	r3, r5
 80063a6:	dcf2      	bgt.n	800638e <_printf_i+0x21e>
 80063a8:	e7eb      	b.n	8006382 <_printf_i+0x212>
 80063aa:	2500      	movs	r5, #0
 80063ac:	f104 0619 	add.w	r6, r4, #25
 80063b0:	e7f5      	b.n	800639e <_printf_i+0x22e>
 80063b2:	bf00      	nop
 80063b4:	08006649 	.word	0x08006649
 80063b8:	0800665a 	.word	0x0800665a

080063bc <_sbrk_r>:
 80063bc:	b538      	push	{r3, r4, r5, lr}
 80063be:	4d06      	ldr	r5, [pc, #24]	; (80063d8 <_sbrk_r+0x1c>)
 80063c0:	2300      	movs	r3, #0
 80063c2:	4604      	mov	r4, r0
 80063c4:	4608      	mov	r0, r1
 80063c6:	602b      	str	r3, [r5, #0]
 80063c8:	f7fa fc9c 	bl	8000d04 <_sbrk>
 80063cc:	1c43      	adds	r3, r0, #1
 80063ce:	d102      	bne.n	80063d6 <_sbrk_r+0x1a>
 80063d0:	682b      	ldr	r3, [r5, #0]
 80063d2:	b103      	cbz	r3, 80063d6 <_sbrk_r+0x1a>
 80063d4:	6023      	str	r3, [r4, #0]
 80063d6:	bd38      	pop	{r3, r4, r5, pc}
 80063d8:	200001e0 	.word	0x200001e0

080063dc <__sread>:
 80063dc:	b510      	push	{r4, lr}
 80063de:	460c      	mov	r4, r1
 80063e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063e4:	f000 f8a0 	bl	8006528 <_read_r>
 80063e8:	2800      	cmp	r0, #0
 80063ea:	bfab      	itete	ge
 80063ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80063ee:	89a3      	ldrhlt	r3, [r4, #12]
 80063f0:	181b      	addge	r3, r3, r0
 80063f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80063f6:	bfac      	ite	ge
 80063f8:	6563      	strge	r3, [r4, #84]	; 0x54
 80063fa:	81a3      	strhlt	r3, [r4, #12]
 80063fc:	bd10      	pop	{r4, pc}

080063fe <__swrite>:
 80063fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006402:	461f      	mov	r7, r3
 8006404:	898b      	ldrh	r3, [r1, #12]
 8006406:	05db      	lsls	r3, r3, #23
 8006408:	4605      	mov	r5, r0
 800640a:	460c      	mov	r4, r1
 800640c:	4616      	mov	r6, r2
 800640e:	d505      	bpl.n	800641c <__swrite+0x1e>
 8006410:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006414:	2302      	movs	r3, #2
 8006416:	2200      	movs	r2, #0
 8006418:	f000 f868 	bl	80064ec <_lseek_r>
 800641c:	89a3      	ldrh	r3, [r4, #12]
 800641e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006422:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006426:	81a3      	strh	r3, [r4, #12]
 8006428:	4632      	mov	r2, r6
 800642a:	463b      	mov	r3, r7
 800642c:	4628      	mov	r0, r5
 800642e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006432:	f000 b817 	b.w	8006464 <_write_r>

08006436 <__sseek>:
 8006436:	b510      	push	{r4, lr}
 8006438:	460c      	mov	r4, r1
 800643a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800643e:	f000 f855 	bl	80064ec <_lseek_r>
 8006442:	1c43      	adds	r3, r0, #1
 8006444:	89a3      	ldrh	r3, [r4, #12]
 8006446:	bf15      	itete	ne
 8006448:	6560      	strne	r0, [r4, #84]	; 0x54
 800644a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800644e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006452:	81a3      	strheq	r3, [r4, #12]
 8006454:	bf18      	it	ne
 8006456:	81a3      	strhne	r3, [r4, #12]
 8006458:	bd10      	pop	{r4, pc}

0800645a <__sclose>:
 800645a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800645e:	f000 b813 	b.w	8006488 <_close_r>
	...

08006464 <_write_r>:
 8006464:	b538      	push	{r3, r4, r5, lr}
 8006466:	4d07      	ldr	r5, [pc, #28]	; (8006484 <_write_r+0x20>)
 8006468:	4604      	mov	r4, r0
 800646a:	4608      	mov	r0, r1
 800646c:	4611      	mov	r1, r2
 800646e:	2200      	movs	r2, #0
 8006470:	602a      	str	r2, [r5, #0]
 8006472:	461a      	mov	r2, r3
 8006474:	f7fa f9be 	bl	80007f4 <_write>
 8006478:	1c43      	adds	r3, r0, #1
 800647a:	d102      	bne.n	8006482 <_write_r+0x1e>
 800647c:	682b      	ldr	r3, [r5, #0]
 800647e:	b103      	cbz	r3, 8006482 <_write_r+0x1e>
 8006480:	6023      	str	r3, [r4, #0]
 8006482:	bd38      	pop	{r3, r4, r5, pc}
 8006484:	200001e0 	.word	0x200001e0

08006488 <_close_r>:
 8006488:	b538      	push	{r3, r4, r5, lr}
 800648a:	4d06      	ldr	r5, [pc, #24]	; (80064a4 <_close_r+0x1c>)
 800648c:	2300      	movs	r3, #0
 800648e:	4604      	mov	r4, r0
 8006490:	4608      	mov	r0, r1
 8006492:	602b      	str	r3, [r5, #0]
 8006494:	f7fa fc01 	bl	8000c9a <_close>
 8006498:	1c43      	adds	r3, r0, #1
 800649a:	d102      	bne.n	80064a2 <_close_r+0x1a>
 800649c:	682b      	ldr	r3, [r5, #0]
 800649e:	b103      	cbz	r3, 80064a2 <_close_r+0x1a>
 80064a0:	6023      	str	r3, [r4, #0]
 80064a2:	bd38      	pop	{r3, r4, r5, pc}
 80064a4:	200001e0 	.word	0x200001e0

080064a8 <_fstat_r>:
 80064a8:	b538      	push	{r3, r4, r5, lr}
 80064aa:	4d07      	ldr	r5, [pc, #28]	; (80064c8 <_fstat_r+0x20>)
 80064ac:	2300      	movs	r3, #0
 80064ae:	4604      	mov	r4, r0
 80064b0:	4608      	mov	r0, r1
 80064b2:	4611      	mov	r1, r2
 80064b4:	602b      	str	r3, [r5, #0]
 80064b6:	f7fa fbfc 	bl	8000cb2 <_fstat>
 80064ba:	1c43      	adds	r3, r0, #1
 80064bc:	d102      	bne.n	80064c4 <_fstat_r+0x1c>
 80064be:	682b      	ldr	r3, [r5, #0]
 80064c0:	b103      	cbz	r3, 80064c4 <_fstat_r+0x1c>
 80064c2:	6023      	str	r3, [r4, #0]
 80064c4:	bd38      	pop	{r3, r4, r5, pc}
 80064c6:	bf00      	nop
 80064c8:	200001e0 	.word	0x200001e0

080064cc <_isatty_r>:
 80064cc:	b538      	push	{r3, r4, r5, lr}
 80064ce:	4d06      	ldr	r5, [pc, #24]	; (80064e8 <_isatty_r+0x1c>)
 80064d0:	2300      	movs	r3, #0
 80064d2:	4604      	mov	r4, r0
 80064d4:	4608      	mov	r0, r1
 80064d6:	602b      	str	r3, [r5, #0]
 80064d8:	f7fa fbfb 	bl	8000cd2 <_isatty>
 80064dc:	1c43      	adds	r3, r0, #1
 80064de:	d102      	bne.n	80064e6 <_isatty_r+0x1a>
 80064e0:	682b      	ldr	r3, [r5, #0]
 80064e2:	b103      	cbz	r3, 80064e6 <_isatty_r+0x1a>
 80064e4:	6023      	str	r3, [r4, #0]
 80064e6:	bd38      	pop	{r3, r4, r5, pc}
 80064e8:	200001e0 	.word	0x200001e0

080064ec <_lseek_r>:
 80064ec:	b538      	push	{r3, r4, r5, lr}
 80064ee:	4d07      	ldr	r5, [pc, #28]	; (800650c <_lseek_r+0x20>)
 80064f0:	4604      	mov	r4, r0
 80064f2:	4608      	mov	r0, r1
 80064f4:	4611      	mov	r1, r2
 80064f6:	2200      	movs	r2, #0
 80064f8:	602a      	str	r2, [r5, #0]
 80064fa:	461a      	mov	r2, r3
 80064fc:	f7fa fbf4 	bl	8000ce8 <_lseek>
 8006500:	1c43      	adds	r3, r0, #1
 8006502:	d102      	bne.n	800650a <_lseek_r+0x1e>
 8006504:	682b      	ldr	r3, [r5, #0]
 8006506:	b103      	cbz	r3, 800650a <_lseek_r+0x1e>
 8006508:	6023      	str	r3, [r4, #0]
 800650a:	bd38      	pop	{r3, r4, r5, pc}
 800650c:	200001e0 	.word	0x200001e0

08006510 <__malloc_lock>:
 8006510:	4801      	ldr	r0, [pc, #4]	; (8006518 <__malloc_lock+0x8>)
 8006512:	f7ff bb1d 	b.w	8005b50 <__retarget_lock_acquire_recursive>
 8006516:	bf00      	nop
 8006518:	200001d4 	.word	0x200001d4

0800651c <__malloc_unlock>:
 800651c:	4801      	ldr	r0, [pc, #4]	; (8006524 <__malloc_unlock+0x8>)
 800651e:	f7ff bb18 	b.w	8005b52 <__retarget_lock_release_recursive>
 8006522:	bf00      	nop
 8006524:	200001d4 	.word	0x200001d4

08006528 <_read_r>:
 8006528:	b538      	push	{r3, r4, r5, lr}
 800652a:	4d07      	ldr	r5, [pc, #28]	; (8006548 <_read_r+0x20>)
 800652c:	4604      	mov	r4, r0
 800652e:	4608      	mov	r0, r1
 8006530:	4611      	mov	r1, r2
 8006532:	2200      	movs	r2, #0
 8006534:	602a      	str	r2, [r5, #0]
 8006536:	461a      	mov	r2, r3
 8006538:	f7fa fb92 	bl	8000c60 <_read>
 800653c:	1c43      	adds	r3, r0, #1
 800653e:	d102      	bne.n	8006546 <_read_r+0x1e>
 8006540:	682b      	ldr	r3, [r5, #0]
 8006542:	b103      	cbz	r3, 8006546 <_read_r+0x1e>
 8006544:	6023      	str	r3, [r4, #0]
 8006546:	bd38      	pop	{r3, r4, r5, pc}
 8006548:	200001e0 	.word	0x200001e0

0800654c <_init>:
 800654c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800654e:	bf00      	nop
 8006550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006552:	bc08      	pop	{r3}
 8006554:	469e      	mov	lr, r3
 8006556:	4770      	bx	lr

08006558 <_fini>:
 8006558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800655a:	bf00      	nop
 800655c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800655e:	bc08      	pop	{r3}
 8006560:	469e      	mov	lr, r3
 8006562:	4770      	bx	lr
