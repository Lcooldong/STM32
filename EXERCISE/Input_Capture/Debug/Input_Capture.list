
Input_Capture.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006198  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  08006348  08006348  00016348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006450  08006450  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006450  08006450  00016450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006458  08006458  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006458  08006458  00016458  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800645c  0800645c  0001645c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006460  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000198  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000208  20000208  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001212b  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000026f4  00000000  00000000  000321cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000df0  00000000  00000000  000348c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ce8  00000000  00000000  000356b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025050  00000000  00000000  00036398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010d12  00000000  00000000  0005b3e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dbdae  00000000  00000000  0006c0fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00147ea8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000040e4  00000000  00000000  00147efc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006330 	.word	0x08006330

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	08006330 	.word	0x08006330

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800058e:	2300      	movs	r3, #0
 8000590:	607b      	str	r3, [r7, #4]
 8000592:	4b0c      	ldr	r3, [pc, #48]	; (80005c4 <MX_DMA_Init+0x3c>)
 8000594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000596:	4a0b      	ldr	r2, [pc, #44]	; (80005c4 <MX_DMA_Init+0x3c>)
 8000598:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800059c:	6313      	str	r3, [r2, #48]	; 0x30
 800059e:	4b09      	ldr	r3, [pc, #36]	; (80005c4 <MX_DMA_Init+0x3c>)
 80005a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80005a6:	607b      	str	r3, [r7, #4]
 80005a8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80005aa:	2200      	movs	r2, #0
 80005ac:	2100      	movs	r1, #0
 80005ae:	200f      	movs	r0, #15
 80005b0:	f000 ffc7 	bl	8001542 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80005b4:	200f      	movs	r0, #15
 80005b6:	f000 ffe0 	bl	800157a <HAL_NVIC_EnableIRQ>

}
 80005ba:	bf00      	nop
 80005bc:	3708      	adds	r7, #8
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	40023800 	.word	0x40023800

080005c8 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b08c      	sub	sp, #48	; 0x30
 80005cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ce:	f107 031c 	add.w	r3, r7, #28
 80005d2:	2200      	movs	r2, #0
 80005d4:	601a      	str	r2, [r3, #0]
 80005d6:	605a      	str	r2, [r3, #4]
 80005d8:	609a      	str	r2, [r3, #8]
 80005da:	60da      	str	r2, [r3, #12]
 80005dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005de:	2300      	movs	r3, #0
 80005e0:	61bb      	str	r3, [r7, #24]
 80005e2:	4b7c      	ldr	r3, [pc, #496]	; (80007d4 <MX_GPIO_Init+0x20c>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e6:	4a7b      	ldr	r2, [pc, #492]	; (80007d4 <MX_GPIO_Init+0x20c>)
 80005e8:	f043 0304 	orr.w	r3, r3, #4
 80005ec:	6313      	str	r3, [r2, #48]	; 0x30
 80005ee:	4b79      	ldr	r3, [pc, #484]	; (80007d4 <MX_GPIO_Init+0x20c>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f2:	f003 0304 	and.w	r3, r3, #4
 80005f6:	61bb      	str	r3, [r7, #24]
 80005f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005fa:	2300      	movs	r3, #0
 80005fc:	617b      	str	r3, [r7, #20]
 80005fe:	4b75      	ldr	r3, [pc, #468]	; (80007d4 <MX_GPIO_Init+0x20c>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000602:	4a74      	ldr	r2, [pc, #464]	; (80007d4 <MX_GPIO_Init+0x20c>)
 8000604:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000608:	6313      	str	r3, [r2, #48]	; 0x30
 800060a:	4b72      	ldr	r3, [pc, #456]	; (80007d4 <MX_GPIO_Init+0x20c>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000612:	617b      	str	r3, [r7, #20]
 8000614:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000616:	2300      	movs	r3, #0
 8000618:	613b      	str	r3, [r7, #16]
 800061a:	4b6e      	ldr	r3, [pc, #440]	; (80007d4 <MX_GPIO_Init+0x20c>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061e:	4a6d      	ldr	r2, [pc, #436]	; (80007d4 <MX_GPIO_Init+0x20c>)
 8000620:	f043 0301 	orr.w	r3, r3, #1
 8000624:	6313      	str	r3, [r2, #48]	; 0x30
 8000626:	4b6b      	ldr	r3, [pc, #428]	; (80007d4 <MX_GPIO_Init+0x20c>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062a:	f003 0301 	and.w	r3, r3, #1
 800062e:	613b      	str	r3, [r7, #16]
 8000630:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000632:	2300      	movs	r3, #0
 8000634:	60fb      	str	r3, [r7, #12]
 8000636:	4b67      	ldr	r3, [pc, #412]	; (80007d4 <MX_GPIO_Init+0x20c>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063a:	4a66      	ldr	r2, [pc, #408]	; (80007d4 <MX_GPIO_Init+0x20c>)
 800063c:	f043 0302 	orr.w	r3, r3, #2
 8000640:	6313      	str	r3, [r2, #48]	; 0x30
 8000642:	4b64      	ldr	r3, [pc, #400]	; (80007d4 <MX_GPIO_Init+0x20c>)
 8000644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000646:	f003 0302 	and.w	r3, r3, #2
 800064a:	60fb      	str	r3, [r7, #12]
 800064c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800064e:	2300      	movs	r3, #0
 8000650:	60bb      	str	r3, [r7, #8]
 8000652:	4b60      	ldr	r3, [pc, #384]	; (80007d4 <MX_GPIO_Init+0x20c>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000656:	4a5f      	ldr	r2, [pc, #380]	; (80007d4 <MX_GPIO_Init+0x20c>)
 8000658:	f043 0308 	orr.w	r3, r3, #8
 800065c:	6313      	str	r3, [r2, #48]	; 0x30
 800065e:	4b5d      	ldr	r3, [pc, #372]	; (80007d4 <MX_GPIO_Init+0x20c>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000662:	f003 0308 	and.w	r3, r3, #8
 8000666:	60bb      	str	r3, [r7, #8]
 8000668:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800066a:	2300      	movs	r3, #0
 800066c:	607b      	str	r3, [r7, #4]
 800066e:	4b59      	ldr	r3, [pc, #356]	; (80007d4 <MX_GPIO_Init+0x20c>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000672:	4a58      	ldr	r2, [pc, #352]	; (80007d4 <MX_GPIO_Init+0x20c>)
 8000674:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000678:	6313      	str	r3, [r2, #48]	; 0x30
 800067a:	4b56      	ldr	r3, [pc, #344]	; (80007d4 <MX_GPIO_Init+0x20c>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000682:	607b      	str	r3, [r7, #4]
 8000684:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|TRIGGER_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000686:	2200      	movs	r2, #0
 8000688:	f244 01c1 	movw	r1, #16577	; 0x40c1
 800068c:	4852      	ldr	r0, [pc, #328]	; (80007d8 <MX_GPIO_Init+0x210>)
 800068e:	f001 fd3d 	bl	800210c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000692:	2200      	movs	r2, #0
 8000694:	2140      	movs	r1, #64	; 0x40
 8000696:	4851      	ldr	r0, [pc, #324]	; (80007dc <MX_GPIO_Init+0x214>)
 8000698:	f001 fd38 	bl	800210c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800069c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006a2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80006a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a8:	2300      	movs	r3, #0
 80006aa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80006ac:	f107 031c 	add.w	r3, r7, #28
 80006b0:	4619      	mov	r1, r3
 80006b2:	484b      	ldr	r0, [pc, #300]	; (80007e0 <MX_GPIO_Init+0x218>)
 80006b4:	f001 fb7e 	bl	8001db4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80006b8:	2332      	movs	r3, #50	; 0x32
 80006ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006bc:	2302      	movs	r3, #2
 80006be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c0:	2300      	movs	r3, #0
 80006c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006c4:	2303      	movs	r3, #3
 80006c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006c8:	230b      	movs	r3, #11
 80006ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006cc:	f107 031c 	add.w	r3, r7, #28
 80006d0:	4619      	mov	r1, r3
 80006d2:	4843      	ldr	r0, [pc, #268]	; (80007e0 <MX_GPIO_Init+0x218>)
 80006d4:	f001 fb6e 	bl	8001db4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80006d8:	2386      	movs	r3, #134	; 0x86
 80006da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006dc:	2302      	movs	r3, #2
 80006de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e0:	2300      	movs	r3, #0
 80006e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006e4:	2303      	movs	r3, #3
 80006e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006e8:	230b      	movs	r3, #11
 80006ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ec:	f107 031c 	add.w	r3, r7, #28
 80006f0:	4619      	mov	r1, r3
 80006f2:	483c      	ldr	r0, [pc, #240]	; (80007e4 <MX_GPIO_Init+0x21c>)
 80006f4:	f001 fb5e 	bl	8001db4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|TRIGGER_Pin|LD2_Pin;
 80006f8:	f244 03c1 	movw	r3, #16577	; 0x40c1
 80006fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006fe:	2301      	movs	r3, #1
 8000700:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000702:	2300      	movs	r3, #0
 8000704:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000706:	2300      	movs	r3, #0
 8000708:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800070a:	f107 031c 	add.w	r3, r7, #28
 800070e:	4619      	mov	r1, r3
 8000710:	4831      	ldr	r0, [pc, #196]	; (80007d8 <MX_GPIO_Init+0x210>)
 8000712:	f001 fb4f 	bl	8001db4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000716:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800071a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800071c:	2302      	movs	r3, #2
 800071e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000720:	2300      	movs	r3, #0
 8000722:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000724:	2303      	movs	r3, #3
 8000726:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000728:	230b      	movs	r3, #11
 800072a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800072c:	f107 031c 	add.w	r3, r7, #28
 8000730:	4619      	mov	r1, r3
 8000732:	4829      	ldr	r0, [pc, #164]	; (80007d8 <MX_GPIO_Init+0x210>)
 8000734:	f001 fb3e 	bl	8001db4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000738:	2340      	movs	r3, #64	; 0x40
 800073a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800073c:	2301      	movs	r3, #1
 800073e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000740:	2300      	movs	r3, #0
 8000742:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000744:	2300      	movs	r3, #0
 8000746:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000748:	f107 031c 	add.w	r3, r7, #28
 800074c:	4619      	mov	r1, r3
 800074e:	4823      	ldr	r0, [pc, #140]	; (80007dc <MX_GPIO_Init+0x214>)
 8000750:	f001 fb30 	bl	8001db4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000754:	2380      	movs	r3, #128	; 0x80
 8000756:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000758:	2300      	movs	r3, #0
 800075a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075c:	2300      	movs	r3, #0
 800075e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000760:	f107 031c 	add.w	r3, r7, #28
 8000764:	4619      	mov	r1, r3
 8000766:	481d      	ldr	r0, [pc, #116]	; (80007dc <MX_GPIO_Init+0x214>)
 8000768:	f001 fb24 	bl	8001db4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800076c:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000770:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000772:	2302      	movs	r3, #2
 8000774:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000776:	2300      	movs	r3, #0
 8000778:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800077a:	2303      	movs	r3, #3
 800077c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800077e:	230a      	movs	r3, #10
 8000780:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000782:	f107 031c 	add.w	r3, r7, #28
 8000786:	4619      	mov	r1, r3
 8000788:	4816      	ldr	r0, [pc, #88]	; (80007e4 <MX_GPIO_Init+0x21c>)
 800078a:	f001 fb13 	bl	8001db4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800078e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000792:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000794:	2300      	movs	r3, #0
 8000796:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000798:	2300      	movs	r3, #0
 800079a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800079c:	f107 031c 	add.w	r3, r7, #28
 80007a0:	4619      	mov	r1, r3
 80007a2:	4810      	ldr	r0, [pc, #64]	; (80007e4 <MX_GPIO_Init+0x21c>)
 80007a4:	f001 fb06 	bl	8001db4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80007a8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80007ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ae:	2302      	movs	r3, #2
 80007b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b2:	2300      	movs	r3, #0
 80007b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007b6:	2303      	movs	r3, #3
 80007b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007ba:	230b      	movs	r3, #11
 80007bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007be:	f107 031c 	add.w	r3, r7, #28
 80007c2:	4619      	mov	r1, r3
 80007c4:	4805      	ldr	r0, [pc, #20]	; (80007dc <MX_GPIO_Init+0x214>)
 80007c6:	f001 faf5 	bl	8001db4 <HAL_GPIO_Init>

}
 80007ca:	bf00      	nop
 80007cc:	3730      	adds	r7, #48	; 0x30
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	40023800 	.word	0x40023800
 80007d8:	40020400 	.word	0x40020400
 80007dc:	40021800 	.word	0x40021800
 80007e0:	40020800 	.word	0x40020800
 80007e4:	40020000 	.word	0x40020000

080007e8 <_write>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
int _write(int file, char* p, int len)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b084      	sub	sp, #16
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	60f8      	str	r0, [r7, #12]
 80007f0:	60b9      	str	r1, [r7, #8]
 80007f2:	607a      	str	r2, [r7, #4]
	if(HAL_UART_Transmit(&huart3, (uint8_t *)p, len, 10) == HAL_OK) return len;
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	b29a      	uxth	r2, r3
 80007f8:	230a      	movs	r3, #10
 80007fa:	68b9      	ldr	r1, [r7, #8]
 80007fc:	4806      	ldr	r0, [pc, #24]	; (8000818 <_write+0x30>)
 80007fe:	f003 fe7e 	bl	80044fe <HAL_UART_Transmit>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d101      	bne.n	800080c <_write+0x24>
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	e000      	b.n	800080e <_write+0x26>
	else return 0;
 800080c:	2300      	movs	r3, #0
}
 800080e:	4618      	mov	r0, r3
 8000810:	3710      	adds	r7, #16
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	200001b0 	.word	0x200001b0

0800081c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800081c:	b590      	push	{r4, r7, lr}
 800081e:	b085      	sub	sp, #20
 8000820:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000822:	f000 fd1d 	bl	8001260 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000826:	f000 f86b 	bl	8000900 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800082a:	f7ff fecd 	bl	80005c8 <MX_GPIO_Init>
  MX_DMA_Init();
 800082e:	f7ff feab 	bl	8000588 <MX_DMA_Init>
  MX_TIM3_Init();
 8000832:	f000 faa9 	bl	8000d88 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000836:	f000 fb17 	bl	8000e68 <MX_TIM4_Init>
  MX_USART3_UART_Init();
 800083a:	f000 fc6d 	bl	8001118 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  DWT_Delay_Init();
 800083e:	f000 f959 	bl	8000af4 <DWT_Delay_Init>
  HAL_TIM_Base_Start_IT(&htim3);
 8000842:	4826      	ldr	r0, [pc, #152]	; (80008dc <main+0xc0>)
 8000844:	f002 f990 	bl	8002b68 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);	// Sonar
 8000848:	4825      	ldr	r0, [pc, #148]	; (80008e0 <main+0xc4>)
 800084a:	f002 f98d 	bl	8002b68 <HAL_TIM_Base_Start_IT>
  //HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);

  HAL_TIM_OC_Start_IT(&htim4, TIM_CHANNEL_1);		// Sonar
 800084e:	2100      	movs	r1, #0
 8000850:	4823      	ldr	r0, [pc, #140]	; (80008e0 <main+0xc4>)
 8000852:	f002 fa53 	bl	8002cfc <HAL_TIM_OC_Start_IT>

  //htim3.State = HAL_TIM_STATE_READY;
  HAL_TIM_IC_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t *)capture1, 2);
 8000856:	2302      	movs	r3, #2
 8000858:	4a22      	ldr	r2, [pc, #136]	; (80008e4 <main+0xc8>)
 800085a:	2100      	movs	r1, #0
 800085c:	481f      	ldr	r0, [pc, #124]	; (80008dc <main+0xc0>)
 800085e:	f002 fbbd 	bl	8002fdc <HAL_TIM_IC_Start_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf("start this program \r\n");
 8000862:	4821      	ldr	r0, [pc, #132]	; (80008e8 <main+0xcc>)
 8000864:	f004 fe1e 	bl	80054a4 <puts>
  HAL_Delay(1000);
 8000868:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800086c:	f000 fd6a 	bl	8001344 <HAL_Delay>
  while (1)
  {
	 //if(ch1done == true)
	 //{
		 DMAwidth = capture1[0] - capture1[1];
 8000870:	4b1c      	ldr	r3, [pc, #112]	; (80008e4 <main+0xc8>)
 8000872:	881b      	ldrh	r3, [r3, #0]
 8000874:	b29a      	uxth	r2, r3
 8000876:	4b1b      	ldr	r3, [pc, #108]	; (80008e4 <main+0xc8>)
 8000878:	885b      	ldrh	r3, [r3, #2]
 800087a:	b29b      	uxth	r3, r3
 800087c:	1ad3      	subs	r3, r2, r3
 800087e:	b29a      	uxth	r2, r3
 8000880:	4b1a      	ldr	r3, [pc, #104]	; (80008ec <main+0xd0>)
 8000882:	801a      	strh	r2, [r3, #0]
		 DMAdistance = DMAwidth/58;
 8000884:	4b19      	ldr	r3, [pc, #100]	; (80008ec <main+0xd0>)
 8000886:	881b      	ldrh	r3, [r3, #0]
 8000888:	4a19      	ldr	r2, [pc, #100]	; (80008f0 <main+0xd4>)
 800088a:	fba2 2303 	umull	r2, r3, r2, r3
 800088e:	095b      	lsrs	r3, r3, #5
 8000890:	b29a      	uxth	r2, r3
 8000892:	4b18      	ldr	r3, [pc, #96]	; (80008f4 <main+0xd8>)
 8000894:	801a      	strh	r2, [r3, #0]
		 if(DMAdistance > 400) DMAdistance = 400;
 8000896:	4b17      	ldr	r3, [pc, #92]	; (80008f4 <main+0xd8>)
 8000898:	881b      	ldrh	r3, [r3, #0]
 800089a:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800089e:	d903      	bls.n	80008a8 <main+0x8c>
 80008a0:	4b14      	ldr	r3, [pc, #80]	; (80008f4 <main+0xd8>)
 80008a2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80008a6:	801a      	strh	r2, [r3, #0]
		 printf("%lx %x %5d-%5d DMAWidth : %5d => DMAdistance : %4d cm\r\n",TIM3->CCER & TIM_CCER_CC1P, 0x01 << 1 ,capture1[0], capture1[1], DMAwidth, DMAdistance);
 80008a8:	4b13      	ldr	r3, [pc, #76]	; (80008f8 <main+0xdc>)
 80008aa:	6a1b      	ldr	r3, [r3, #32]
 80008ac:	f003 0102 	and.w	r1, r3, #2
 80008b0:	4b0c      	ldr	r3, [pc, #48]	; (80008e4 <main+0xc8>)
 80008b2:	881b      	ldrh	r3, [r3, #0]
 80008b4:	b29b      	uxth	r3, r3
 80008b6:	461c      	mov	r4, r3
 80008b8:	4b0a      	ldr	r3, [pc, #40]	; (80008e4 <main+0xc8>)
 80008ba:	885b      	ldrh	r3, [r3, #2]
 80008bc:	b29b      	uxth	r3, r3
 80008be:	461a      	mov	r2, r3
 80008c0:	4b0a      	ldr	r3, [pc, #40]	; (80008ec <main+0xd0>)
 80008c2:	881b      	ldrh	r3, [r3, #0]
 80008c4:	4618      	mov	r0, r3
 80008c6:	4b0b      	ldr	r3, [pc, #44]	; (80008f4 <main+0xd8>)
 80008c8:	881b      	ldrh	r3, [r3, #0]
 80008ca:	9302      	str	r3, [sp, #8]
 80008cc:	9001      	str	r0, [sp, #4]
 80008ce:	9200      	str	r2, [sp, #0]
 80008d0:	4623      	mov	r3, r4
 80008d2:	2202      	movs	r2, #2
 80008d4:	4809      	ldr	r0, [pc, #36]	; (80008fc <main+0xe0>)
 80008d6:	f004 fd5f 	bl	8005398 <iprintf>
		 DMAwidth = capture1[0] - capture1[1];
 80008da:	e7c9      	b.n	8000870 <main+0x54>
 80008dc:	20000108 	.word	0x20000108
 80008e0:	200000c0 	.word	0x200000c0
 80008e4:	200000a8 	.word	0x200000a8
 80008e8:	08006348 	.word	0x08006348
 80008ec:	2000008c 	.word	0x2000008c
 80008f0:	8d3dcb09 	.word	0x8d3dcb09
 80008f4:	2000008e 	.word	0x2000008e
 80008f8:	40000400 	.word	0x40000400
 80008fc:	08006360 	.word	0x08006360

08000900 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b094      	sub	sp, #80	; 0x50
 8000904:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000906:	f107 0320 	add.w	r3, r7, #32
 800090a:	2230      	movs	r2, #48	; 0x30
 800090c:	2100      	movs	r1, #0
 800090e:	4618      	mov	r0, r3
 8000910:	f004 fd3a 	bl	8005388 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000914:	f107 030c 	add.w	r3, r7, #12
 8000918:	2200      	movs	r2, #0
 800091a:	601a      	str	r2, [r3, #0]
 800091c:	605a      	str	r2, [r3, #4]
 800091e:	609a      	str	r2, [r3, #8]
 8000920:	60da      	str	r2, [r3, #12]
 8000922:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000924:	2300      	movs	r3, #0
 8000926:	60bb      	str	r3, [r7, #8]
 8000928:	4b2b      	ldr	r3, [pc, #172]	; (80009d8 <SystemClock_Config+0xd8>)
 800092a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800092c:	4a2a      	ldr	r2, [pc, #168]	; (80009d8 <SystemClock_Config+0xd8>)
 800092e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000932:	6413      	str	r3, [r2, #64]	; 0x40
 8000934:	4b28      	ldr	r3, [pc, #160]	; (80009d8 <SystemClock_Config+0xd8>)
 8000936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000938:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800093c:	60bb      	str	r3, [r7, #8]
 800093e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000940:	2300      	movs	r3, #0
 8000942:	607b      	str	r3, [r7, #4]
 8000944:	4b25      	ldr	r3, [pc, #148]	; (80009dc <SystemClock_Config+0xdc>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4a24      	ldr	r2, [pc, #144]	; (80009dc <SystemClock_Config+0xdc>)
 800094a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800094e:	6013      	str	r3, [r2, #0]
 8000950:	4b22      	ldr	r3, [pc, #136]	; (80009dc <SystemClock_Config+0xdc>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000958:	607b      	str	r3, [r7, #4]
 800095a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800095c:	2301      	movs	r3, #1
 800095e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000960:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000964:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000966:	2302      	movs	r3, #2
 8000968:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800096a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800096e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000970:	2304      	movs	r3, #4
 8000972:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000974:	23b4      	movs	r3, #180	; 0xb4
 8000976:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000978:	2302      	movs	r3, #2
 800097a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800097c:	2304      	movs	r3, #4
 800097e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000980:	f107 0320 	add.w	r3, r7, #32
 8000984:	4618      	mov	r0, r3
 8000986:	f001 fc2b 	bl	80021e0 <HAL_RCC_OscConfig>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000990:	f000 f8e0 	bl	8000b54 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000994:	f001 fbd4 	bl	8002140 <HAL_PWREx_EnableOverDrive>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800099e:	f000 f8d9 	bl	8000b54 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009a2:	230f      	movs	r3, #15
 80009a4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009a6:	2302      	movs	r3, #2
 80009a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009aa:	2300      	movs	r3, #0
 80009ac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80009ae:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80009b2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80009b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009b8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80009ba:	f107 030c 	add.w	r3, r7, #12
 80009be:	2105      	movs	r1, #5
 80009c0:	4618      	mov	r0, r3
 80009c2:	f001 fe85 	bl	80026d0 <HAL_RCC_ClockConfig>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80009cc:	f000 f8c2 	bl	8000b54 <Error_Handler>
  }
}
 80009d0:	bf00      	nop
 80009d2:	3750      	adds	r7, #80	; 0x50
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	40023800 	.word	0x40023800
 80009dc:	40007000 	.word	0x40007000

080009e0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
/* DMA */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM4)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a0a      	ldr	r2, [pc, #40]	; (8000a18 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d10b      	bne.n	8000a0a <HAL_TIM_PeriodElapsedCallback+0x2a>
	{
		GPIOB->ODR |= 0x01 << 6;  // PB 6 SET
 80009f2:	4b0a      	ldr	r3, [pc, #40]	; (8000a1c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80009f4:	695b      	ldr	r3, [r3, #20]
 80009f6:	4a09      	ldr	r2, [pc, #36]	; (8000a1c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80009f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009fc:	6153      	str	r3, [r2, #20]
		GPIOB->ODR |= LD1_Pin;
 80009fe:	4b07      	ldr	r3, [pc, #28]	; (8000a1c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000a00:	695b      	ldr	r3, [r3, #20]
 8000a02:	4a06      	ldr	r2, [pc, #24]	; (8000a1c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000a04:	f043 0301 	orr.w	r3, r3, #1
 8000a08:	6153      	str	r3, [r2, #20]
		//TriggerEnable();
	}

}
 8000a0a:	bf00      	nop
 8000a0c:	370c      	adds	r7, #12
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	40000800 	.word	0x40000800
 8000a1c:	40020400 	.word	0x40020400

08000a20 <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM4)	// Pulse 7
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a0a      	ldr	r2, [pc, #40]	; (8000a58 <HAL_TIM_OC_DelayElapsedCallback+0x38>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d10b      	bne.n	8000a4a <HAL_TIM_OC_DelayElapsedCallback+0x2a>
	{
		GPIOB->ODR &= ~(0x01 << 6);	// PB 6	RESET, Pulse
 8000a32:	4b0a      	ldr	r3, [pc, #40]	; (8000a5c <HAL_TIM_OC_DelayElapsedCallback+0x3c>)
 8000a34:	695b      	ldr	r3, [r3, #20]
 8000a36:	4a09      	ldr	r2, [pc, #36]	; (8000a5c <HAL_TIM_OC_DelayElapsedCallback+0x3c>)
 8000a38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000a3c:	6153      	str	r3, [r2, #20]
		GPIOB->ODR &= ~LD1_Pin;
 8000a3e:	4b07      	ldr	r3, [pc, #28]	; (8000a5c <HAL_TIM_OC_DelayElapsedCallback+0x3c>)
 8000a40:	695b      	ldr	r3, [r3, #20]
 8000a42:	4a06      	ldr	r2, [pc, #24]	; (8000a5c <HAL_TIM_OC_DelayElapsedCallback+0x3c>)
 8000a44:	f023 0301 	bic.w	r3, r3, #1
 8000a48:	6153      	str	r3, [r2, #20]
	}
}
 8000a4a:	bf00      	nop
 8000a4c:	370c      	adds	r7, #12
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	40000800 	.word	0x40000800
 8000a5c:	40020400 	.word	0x40020400

08000a60 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b083      	sub	sp, #12
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]

	if(htim->Instance == TIM3 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a1e      	ldr	r2, [pc, #120]	; (8000ae8 <HAL_TIM_IC_CaptureCallback+0x88>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d134      	bne.n	8000adc <HAL_TIM_IC_CaptureCallback+0x7c>
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	7f1b      	ldrb	r3, [r3, #28]
 8000a76:	2b01      	cmp	r3, #1
 8000a78:	d130      	bne.n	8000adc <HAL_TIM_IC_CaptureCallback+0x7c>
	{
		/*   */
		if((TIM3->CCER & TIM_CCER_CC1P) != (0x01 << 1))
 8000a7a:	4b1b      	ldr	r3, [pc, #108]	; (8000ae8 <HAL_TIM_IC_CaptureCallback+0x88>)
 8000a7c:	6a1b      	ldr	r3, [r3, #32]
 8000a7e:	f003 0302 	and.w	r3, r3, #2
 8000a82:	2b02      	cmp	r3, #2
 8000a84:	d015      	beq.n	8000ab2 <HAL_TIM_IC_CaptureCallback+0x52>
		{

			TIM3->CCER |= TIM_CCER_CC1P;		// Rising -> Falling (0 -> 1)
 8000a86:	4b18      	ldr	r3, [pc, #96]	; (8000ae8 <HAL_TIM_IC_CaptureCallback+0x88>)
 8000a88:	6a1b      	ldr	r3, [r3, #32]
 8000a8a:	4a17      	ldr	r2, [pc, #92]	; (8000ae8 <HAL_TIM_IC_CaptureCallback+0x88>)
 8000a8c:	f043 0302 	orr.w	r3, r3, #2
 8000a90:	6213      	str	r3, [r2, #32]
			GPIOB->ODR |= LD2_Pin;
 8000a92:	4b16      	ldr	r3, [pc, #88]	; (8000aec <HAL_TIM_IC_CaptureCallback+0x8c>)
 8000a94:	695b      	ldr	r3, [r3, #20]
 8000a96:	4a15      	ldr	r2, [pc, #84]	; (8000aec <HAL_TIM_IC_CaptureCallback+0x8c>)
 8000a98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a9c:	6153      	str	r3, [r2, #20]
			GPIOB->ODR &= ~LD3_Pin;
 8000a9e:	4b13      	ldr	r3, [pc, #76]	; (8000aec <HAL_TIM_IC_CaptureCallback+0x8c>)
 8000aa0:	695b      	ldr	r3, [r3, #20]
 8000aa2:	4a12      	ldr	r2, [pc, #72]	; (8000aec <HAL_TIM_IC_CaptureCallback+0x8c>)
 8000aa4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000aa8:	6153      	str	r3, [r2, #20]
			ch1done = true;
 8000aaa:	4b11      	ldr	r3, [pc, #68]	; (8000af0 <HAL_TIM_IC_CaptureCallback+0x90>)
 8000aac:	2201      	movs	r2, #1
 8000aae:	701a      	strb	r2, [r3, #0]
			ch1done = false;

		}

	}
}
 8000ab0:	e014      	b.n	8000adc <HAL_TIM_IC_CaptureCallback+0x7c>
			TIM3->CCER &= ~TIM_CCER_CC1P;		// Falling -> Rising	(1 -> 0)
 8000ab2:	4b0d      	ldr	r3, [pc, #52]	; (8000ae8 <HAL_TIM_IC_CaptureCallback+0x88>)
 8000ab4:	6a1b      	ldr	r3, [r3, #32]
 8000ab6:	4a0c      	ldr	r2, [pc, #48]	; (8000ae8 <HAL_TIM_IC_CaptureCallback+0x88>)
 8000ab8:	f023 0302 	bic.w	r3, r3, #2
 8000abc:	6213      	str	r3, [r2, #32]
			GPIOB->ODR |= LD3_Pin;
 8000abe:	4b0b      	ldr	r3, [pc, #44]	; (8000aec <HAL_TIM_IC_CaptureCallback+0x8c>)
 8000ac0:	695b      	ldr	r3, [r3, #20]
 8000ac2:	4a0a      	ldr	r2, [pc, #40]	; (8000aec <HAL_TIM_IC_CaptureCallback+0x8c>)
 8000ac4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ac8:	6153      	str	r3, [r2, #20]
			GPIOB->ODR &= ~LD2_Pin;
 8000aca:	4b08      	ldr	r3, [pc, #32]	; (8000aec <HAL_TIM_IC_CaptureCallback+0x8c>)
 8000acc:	695b      	ldr	r3, [r3, #20]
 8000ace:	4a07      	ldr	r2, [pc, #28]	; (8000aec <HAL_TIM_IC_CaptureCallback+0x8c>)
 8000ad0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000ad4:	6153      	str	r3, [r2, #20]
			ch1done = false;
 8000ad6:	4b06      	ldr	r3, [pc, #24]	; (8000af0 <HAL_TIM_IC_CaptureCallback+0x90>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	701a      	strb	r2, [r3, #0]
}
 8000adc:	bf00      	nop
 8000ade:	370c      	adds	r7, #12
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr
 8000ae8:	40000400 	.word	0x40000400
 8000aec:	40020400 	.word	0x40020400
 8000af0:	20000090 	.word	0x20000090

08000af4 <DWT_Delay_Init>:

uint32_t DWT_Delay_Init(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000af8:	4b14      	ldr	r3, [pc, #80]	; (8000b4c <DWT_Delay_Init+0x58>)
 8000afa:	68db      	ldr	r3, [r3, #12]
 8000afc:	4a13      	ldr	r2, [pc, #76]	; (8000b4c <DWT_Delay_Init+0x58>)
 8000afe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000b02:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000b04:	4b11      	ldr	r3, [pc, #68]	; (8000b4c <DWT_Delay_Init+0x58>)
 8000b06:	68db      	ldr	r3, [r3, #12]
 8000b08:	4a10      	ldr	r2, [pc, #64]	; (8000b4c <DWT_Delay_Init+0x58>)
 8000b0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000b0e:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000b10:	4b0f      	ldr	r3, [pc, #60]	; (8000b50 <DWT_Delay_Init+0x5c>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a0e      	ldr	r2, [pc, #56]	; (8000b50 <DWT_Delay_Init+0x5c>)
 8000b16:	f023 0301 	bic.w	r3, r3, #1
 8000b1a:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000b1c:	4b0c      	ldr	r3, [pc, #48]	; (8000b50 <DWT_Delay_Init+0x5c>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a0b      	ldr	r2, [pc, #44]	; (8000b50 <DWT_Delay_Init+0x5c>)
 8000b22:	f043 0301 	orr.w	r3, r3, #1
 8000b26:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8000b28:	4b09      	ldr	r3, [pc, #36]	; (8000b50 <DWT_Delay_Init+0x5c>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 8000b2e:	bf00      	nop
     __ASM volatile ("NOP");
 8000b30:	bf00      	nop
  __ASM volatile ("NOP");
 8000b32:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 8000b34:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <DWT_Delay_Init+0x5c>)
 8000b36:	685b      	ldr	r3, [r3, #4]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	e000      	b.n	8000b42 <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 8000b40:	2301      	movs	r3, #1
  }
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr
 8000b4c:	e000edf0 	.word	0xe000edf0
 8000b50:	e0001000 	.word	0xe0001000

08000b54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b58:	b672      	cpsid	i
}
 8000b5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b5c:	e7fe      	b.n	8000b5c <Error_Handler+0x8>
	...

08000b60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	607b      	str	r3, [r7, #4]
 8000b6a:	4b10      	ldr	r3, [pc, #64]	; (8000bac <HAL_MspInit+0x4c>)
 8000b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b6e:	4a0f      	ldr	r2, [pc, #60]	; (8000bac <HAL_MspInit+0x4c>)
 8000b70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b74:	6453      	str	r3, [r2, #68]	; 0x44
 8000b76:	4b0d      	ldr	r3, [pc, #52]	; (8000bac <HAL_MspInit+0x4c>)
 8000b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b7e:	607b      	str	r3, [r7, #4]
 8000b80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b82:	2300      	movs	r3, #0
 8000b84:	603b      	str	r3, [r7, #0]
 8000b86:	4b09      	ldr	r3, [pc, #36]	; (8000bac <HAL_MspInit+0x4c>)
 8000b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8a:	4a08      	ldr	r2, [pc, #32]	; (8000bac <HAL_MspInit+0x4c>)
 8000b8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b90:	6413      	str	r3, [r2, #64]	; 0x40
 8000b92:	4b06      	ldr	r3, [pc, #24]	; (8000bac <HAL_MspInit+0x4c>)
 8000b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b9a:	603b      	str	r3, [r7, #0]
 8000b9c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b9e:	bf00      	nop
 8000ba0:	370c      	adds	r7, #12
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	40023800 	.word	0x40023800

08000bb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bb4:	e7fe      	b.n	8000bb4 <NMI_Handler+0x4>

08000bb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bba:	e7fe      	b.n	8000bba <HardFault_Handler+0x4>

08000bbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bc0:	e7fe      	b.n	8000bc0 <MemManage_Handler+0x4>

08000bc2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bc6:	e7fe      	b.n	8000bc6 <BusFault_Handler+0x4>

08000bc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bcc:	e7fe      	b.n	8000bcc <UsageFault_Handler+0x4>

08000bce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bd2:	bf00      	nop
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr

08000bdc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000be0:	bf00      	nop
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr

08000bea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bea:	b480      	push	{r7}
 8000bec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr

08000bf8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bfc:	f000 fb82 	bl	8001304 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c00:	bf00      	nop
 8000c02:	bd80      	pop	{r7, pc}

08000c04 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 8000c08:	4802      	ldr	r0, [pc, #8]	; (8000c14 <DMA1_Stream4_IRQHandler+0x10>)
 8000c0a:	f000 fe69 	bl	80018e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8000c0e:	bf00      	nop
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	20000150 	.word	0x20000150

08000c18 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000c1c:	4802      	ldr	r0, [pc, #8]	; (8000c28 <TIM3_IRQHandler+0x10>)
 8000c1e:	f002 fb87 	bl	8003330 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000c22:	bf00      	nop
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	20000108 	.word	0x20000108

08000c2c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000c30:	4802      	ldr	r0, [pc, #8]	; (8000c3c <TIM4_IRQHandler+0x10>)
 8000c32:	f002 fb7d 	bl	8003330 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000c36:	bf00      	nop
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	200000c0 	.word	0x200000c0

08000c40 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000c44:	4802      	ldr	r0, [pc, #8]	; (8000c50 <USART3_IRQHandler+0x10>)
 8000c46:	f003 fced 	bl	8004624 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000c4a:	bf00      	nop
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	200001b0 	.word	0x200001b0

08000c54 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b086      	sub	sp, #24
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	60f8      	str	r0, [r7, #12]
 8000c5c:	60b9      	str	r1, [r7, #8]
 8000c5e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c60:	2300      	movs	r3, #0
 8000c62:	617b      	str	r3, [r7, #20]
 8000c64:	e00a      	b.n	8000c7c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c66:	f3af 8000 	nop.w
 8000c6a:	4601      	mov	r1, r0
 8000c6c:	68bb      	ldr	r3, [r7, #8]
 8000c6e:	1c5a      	adds	r2, r3, #1
 8000c70:	60ba      	str	r2, [r7, #8]
 8000c72:	b2ca      	uxtb	r2, r1
 8000c74:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c76:	697b      	ldr	r3, [r7, #20]
 8000c78:	3301      	adds	r3, #1
 8000c7a:	617b      	str	r3, [r7, #20]
 8000c7c:	697a      	ldr	r2, [r7, #20]
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	429a      	cmp	r2, r3
 8000c82:	dbf0      	blt.n	8000c66 <_read+0x12>
	}

return len;
 8000c84:	687b      	ldr	r3, [r7, #4]
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	3718      	adds	r7, #24
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}

08000c8e <_close>:
	}
	return len;
}

int _close(int file)
{
 8000c8e:	b480      	push	{r7}
 8000c90:	b083      	sub	sp, #12
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	6078      	str	r0, [r7, #4]
	return -1;
 8000c96:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	370c      	adds	r7, #12
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr

08000ca6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ca6:	b480      	push	{r7}
 8000ca8:	b083      	sub	sp, #12
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	6078      	str	r0, [r7, #4]
 8000cae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cb6:	605a      	str	r2, [r3, #4]
	return 0;
 8000cb8:	2300      	movs	r3, #0
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	370c      	adds	r7, #12
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr

08000cc6 <_isatty>:

int _isatty(int file)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	b083      	sub	sp, #12
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	6078      	str	r0, [r7, #4]
	return 1;
 8000cce:	2301      	movs	r3, #1
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	370c      	adds	r7, #12
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr

08000cdc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b085      	sub	sp, #20
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	60f8      	str	r0, [r7, #12]
 8000ce4:	60b9      	str	r1, [r7, #8]
 8000ce6:	607a      	str	r2, [r7, #4]
	return 0;
 8000ce8:	2300      	movs	r3, #0
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3714      	adds	r7, #20
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
	...

08000cf8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b086      	sub	sp, #24
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d00:	4a14      	ldr	r2, [pc, #80]	; (8000d54 <_sbrk+0x5c>)
 8000d02:	4b15      	ldr	r3, [pc, #84]	; (8000d58 <_sbrk+0x60>)
 8000d04:	1ad3      	subs	r3, r2, r3
 8000d06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d0c:	4b13      	ldr	r3, [pc, #76]	; (8000d5c <_sbrk+0x64>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d102      	bne.n	8000d1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d14:	4b11      	ldr	r3, [pc, #68]	; (8000d5c <_sbrk+0x64>)
 8000d16:	4a12      	ldr	r2, [pc, #72]	; (8000d60 <_sbrk+0x68>)
 8000d18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d1a:	4b10      	ldr	r3, [pc, #64]	; (8000d5c <_sbrk+0x64>)
 8000d1c:	681a      	ldr	r2, [r3, #0]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	4413      	add	r3, r2
 8000d22:	693a      	ldr	r2, [r7, #16]
 8000d24:	429a      	cmp	r2, r3
 8000d26:	d207      	bcs.n	8000d38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d28:	f004 fb04 	bl	8005334 <__errno>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	220c      	movs	r2, #12
 8000d30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d32:	f04f 33ff 	mov.w	r3, #4294967295
 8000d36:	e009      	b.n	8000d4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d38:	4b08      	ldr	r3, [pc, #32]	; (8000d5c <_sbrk+0x64>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d3e:	4b07      	ldr	r3, [pc, #28]	; (8000d5c <_sbrk+0x64>)
 8000d40:	681a      	ldr	r2, [r3, #0]
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4413      	add	r3, r2
 8000d46:	4a05      	ldr	r2, [pc, #20]	; (8000d5c <_sbrk+0x64>)
 8000d48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d4a:	68fb      	ldr	r3, [r7, #12]
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	3718      	adds	r7, #24
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	20030000 	.word	0x20030000
 8000d58:	00000400 	.word	0x00000400
 8000d5c:	20000094 	.word	0x20000094
 8000d60:	20000208 	.word	0x20000208

08000d64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d68:	4b06      	ldr	r3, [pc, #24]	; (8000d84 <SystemInit+0x20>)
 8000d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d6e:	4a05      	ldr	r2, [pc, #20]	; (8000d84 <SystemInit+0x20>)
 8000d70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d78:	bf00      	nop
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	e000ed00 	.word	0xe000ed00

08000d88 <MX_TIM3_Init>:
TIM_HandleTypeDef htim4;
DMA_HandleTypeDef hdma_tim3_ch1_trig;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b08a      	sub	sp, #40	; 0x28
 8000d8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d8e:	f107 0318 	add.w	r3, r7, #24
 8000d92:	2200      	movs	r2, #0
 8000d94:	601a      	str	r2, [r3, #0]
 8000d96:	605a      	str	r2, [r3, #4]
 8000d98:	609a      	str	r2, [r3, #8]
 8000d9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d9c:	f107 0310 	add.w	r3, r7, #16
 8000da0:	2200      	movs	r2, #0
 8000da2:	601a      	str	r2, [r3, #0]
 8000da4:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000da6:	463b      	mov	r3, r7
 8000da8:	2200      	movs	r2, #0
 8000daa:	601a      	str	r2, [r3, #0]
 8000dac:	605a      	str	r2, [r3, #4]
 8000dae:	609a      	str	r2, [r3, #8]
 8000db0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000db2:	4b2b      	ldr	r3, [pc, #172]	; (8000e60 <MX_TIM3_Init+0xd8>)
 8000db4:	4a2b      	ldr	r2, [pc, #172]	; (8000e64 <MX_TIM3_Init+0xdc>)
 8000db6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 90-1;
 8000db8:	4b29      	ldr	r3, [pc, #164]	; (8000e60 <MX_TIM3_Init+0xd8>)
 8000dba:	2259      	movs	r2, #89	; 0x59
 8000dbc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dbe:	4b28      	ldr	r3, [pc, #160]	; (8000e60 <MX_TIM3_Init+0xd8>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000dc4:	4b26      	ldr	r3, [pc, #152]	; (8000e60 <MX_TIM3_Init+0xd8>)
 8000dc6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000dca:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dcc:	4b24      	ldr	r3, [pc, #144]	; (8000e60 <MX_TIM3_Init+0xd8>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000dd2:	4b23      	ldr	r3, [pc, #140]	; (8000e60 <MX_TIM3_Init+0xd8>)
 8000dd4:	2280      	movs	r2, #128	; 0x80
 8000dd6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000dd8:	4821      	ldr	r0, [pc, #132]	; (8000e60 <MX_TIM3_Init+0xd8>)
 8000dda:	f001 fe75 	bl	8002ac8 <HAL_TIM_Base_Init>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8000de4:	f7ff feb6 	bl	8000b54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000de8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dec:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000dee:	f107 0318 	add.w	r3, r7, #24
 8000df2:	4619      	mov	r1, r3
 8000df4:	481a      	ldr	r0, [pc, #104]	; (8000e60 <MX_TIM3_Init+0xd8>)
 8000df6:	f002 fc9b 	bl	8003730 <HAL_TIM_ConfigClockSource>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000e00:	f7ff fea8 	bl	8000b54 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8000e04:	4816      	ldr	r0, [pc, #88]	; (8000e60 <MX_TIM3_Init+0xd8>)
 8000e06:	f002 f88f 	bl	8002f28 <HAL_TIM_IC_Init>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000e10:	f7ff fea0 	bl	8000b54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e14:	2300      	movs	r3, #0
 8000e16:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e1c:	f107 0310 	add.w	r3, r7, #16
 8000e20:	4619      	mov	r1, r3
 8000e22:	480f      	ldr	r0, [pc, #60]	; (8000e60 <MX_TIM3_Init+0xd8>)
 8000e24:	f003 fa8e 	bl	8004344 <HAL_TIMEx_MasterConfigSynchronization>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 8000e2e:	f7ff fe91 	bl	8000b54 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000e32:	2300      	movs	r3, #0
 8000e34:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000e36:	2301      	movs	r3, #1
 8000e38:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 8000e3e:	230f      	movs	r3, #15
 8000e40:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000e42:	463b      	mov	r3, r7
 8000e44:	2200      	movs	r2, #0
 8000e46:	4619      	mov	r1, r3
 8000e48:	4805      	ldr	r0, [pc, #20]	; (8000e60 <MX_TIM3_Init+0xd8>)
 8000e4a:	f002 fbd5 	bl	80035f8 <HAL_TIM_IC_ConfigChannel>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8000e54:	f7ff fe7e 	bl	8000b54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000e58:	bf00      	nop
 8000e5a:	3728      	adds	r7, #40	; 0x28
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	20000108 	.word	0x20000108
 8000e64:	40000400 	.word	0x40000400

08000e68 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b08e      	sub	sp, #56	; 0x38
 8000e6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e72:	2200      	movs	r2, #0
 8000e74:	601a      	str	r2, [r3, #0]
 8000e76:	605a      	str	r2, [r3, #4]
 8000e78:	609a      	str	r2, [r3, #8]
 8000e7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e7c:	f107 0320 	add.w	r3, r7, #32
 8000e80:	2200      	movs	r2, #0
 8000e82:	601a      	str	r2, [r3, #0]
 8000e84:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e86:	1d3b      	adds	r3, r7, #4
 8000e88:	2200      	movs	r2, #0
 8000e8a:	601a      	str	r2, [r3, #0]
 8000e8c:	605a      	str	r2, [r3, #4]
 8000e8e:	609a      	str	r2, [r3, #8]
 8000e90:	60da      	str	r2, [r3, #12]
 8000e92:	611a      	str	r2, [r3, #16]
 8000e94:	615a      	str	r2, [r3, #20]
 8000e96:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000e98:	4b2c      	ldr	r3, [pc, #176]	; (8000f4c <MX_TIM4_Init+0xe4>)
 8000e9a:	4a2d      	ldr	r2, [pc, #180]	; (8000f50 <MX_TIM4_Init+0xe8>)
 8000e9c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 150-1;
 8000e9e:	4b2b      	ldr	r3, [pc, #172]	; (8000f4c <MX_TIM4_Init+0xe4>)
 8000ea0:	2295      	movs	r2, #149	; 0x95
 8000ea2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ea4:	4b29      	ldr	r3, [pc, #164]	; (8000f4c <MX_TIM4_Init+0xe4>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 60000-1;
 8000eaa:	4b28      	ldr	r3, [pc, #160]	; (8000f4c <MX_TIM4_Init+0xe4>)
 8000eac:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8000eb0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eb2:	4b26      	ldr	r3, [pc, #152]	; (8000f4c <MX_TIM4_Init+0xe4>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000eb8:	4b24      	ldr	r3, [pc, #144]	; (8000f4c <MX_TIM4_Init+0xe4>)
 8000eba:	2280      	movs	r2, #128	; 0x80
 8000ebc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000ebe:	4823      	ldr	r0, [pc, #140]	; (8000f4c <MX_TIM4_Init+0xe4>)
 8000ec0:	f001 fe02 	bl	8002ac8 <HAL_TIM_Base_Init>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000eca:	f7ff fe43 	bl	8000b54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ece:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ed2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000ed4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ed8:	4619      	mov	r1, r3
 8000eda:	481c      	ldr	r0, [pc, #112]	; (8000f4c <MX_TIM4_Init+0xe4>)
 8000edc:	f002 fc28 	bl	8003730 <HAL_TIM_ConfigClockSource>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8000ee6:	f7ff fe35 	bl	8000b54 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8000eea:	4818      	ldr	r0, [pc, #96]	; (8000f4c <MX_TIM4_Init+0xe4>)
 8000eec:	f001 feac 	bl	8002c48 <HAL_TIM_OC_Init>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8000ef6:	f7ff fe2d 	bl	8000b54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000efa:	2300      	movs	r3, #0
 8000efc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000efe:	2300      	movs	r3, #0
 8000f00:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000f02:	f107 0320 	add.w	r3, r7, #32
 8000f06:	4619      	mov	r1, r3
 8000f08:	4810      	ldr	r0, [pc, #64]	; (8000f4c <MX_TIM4_Init+0xe4>)
 8000f0a:	f003 fa1b 	bl	8004344 <HAL_TIMEx_MasterConfigSynchronization>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000f14:	f7ff fe1e 	bl	8000b54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 7;
 8000f1c:	2307      	movs	r3, #7
 8000f1e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f20:	2300      	movs	r3, #0
 8000f22:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f24:	2300      	movs	r3, #0
 8000f26:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f28:	1d3b      	adds	r3, r7, #4
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	4807      	ldr	r0, [pc, #28]	; (8000f4c <MX_TIM4_Init+0xe4>)
 8000f30:	f002 fb06 	bl	8003540 <HAL_TIM_OC_ConfigChannel>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8000f3a:	f7ff fe0b 	bl	8000b54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000f3e:	4803      	ldr	r0, [pc, #12]	; (8000f4c <MX_TIM4_Init+0xe4>)
 8000f40:	f000 f8b0 	bl	80010a4 <HAL_TIM_MspPostInit>

}
 8000f44:	bf00      	nop
 8000f46:	3738      	adds	r7, #56	; 0x38
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	200000c0 	.word	0x200000c0
 8000f50:	40000800 	.word	0x40000800

08000f54 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b08a      	sub	sp, #40	; 0x28
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f5c:	f107 0314 	add.w	r3, r7, #20
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	605a      	str	r2, [r3, #4]
 8000f66:	609a      	str	r2, [r3, #8]
 8000f68:	60da      	str	r2, [r3, #12]
 8000f6a:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM3)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a46      	ldr	r2, [pc, #280]	; (800108c <HAL_TIM_Base_MspInit+0x138>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d16b      	bne.n	800104e <HAL_TIM_Base_MspInit+0xfa>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f76:	2300      	movs	r3, #0
 8000f78:	613b      	str	r3, [r7, #16]
 8000f7a:	4b45      	ldr	r3, [pc, #276]	; (8001090 <HAL_TIM_Base_MspInit+0x13c>)
 8000f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7e:	4a44      	ldr	r2, [pc, #272]	; (8001090 <HAL_TIM_Base_MspInit+0x13c>)
 8000f80:	f043 0302 	orr.w	r3, r3, #2
 8000f84:	6413      	str	r3, [r2, #64]	; 0x40
 8000f86:	4b42      	ldr	r3, [pc, #264]	; (8001090 <HAL_TIM_Base_MspInit+0x13c>)
 8000f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8a:	f003 0302 	and.w	r3, r3, #2
 8000f8e:	613b      	str	r3, [r7, #16]
 8000f90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f92:	2300      	movs	r3, #0
 8000f94:	60fb      	str	r3, [r7, #12]
 8000f96:	4b3e      	ldr	r3, [pc, #248]	; (8001090 <HAL_TIM_Base_MspInit+0x13c>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9a:	4a3d      	ldr	r2, [pc, #244]	; (8001090 <HAL_TIM_Base_MspInit+0x13c>)
 8000f9c:	f043 0301 	orr.w	r3, r3, #1
 8000fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa2:	4b3b      	ldr	r3, [pc, #236]	; (8001090 <HAL_TIM_Base_MspInit+0x13c>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa6:	f003 0301 	and.w	r3, r3, #1
 8000faa:	60fb      	str	r3, [r7, #12]
 8000fac:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000fae:	2340      	movs	r3, #64	; 0x40
 8000fb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc2:	f107 0314 	add.w	r3, r7, #20
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	4832      	ldr	r0, [pc, #200]	; (8001094 <HAL_TIM_Base_MspInit+0x140>)
 8000fca:	f000 fef3 	bl	8001db4 <HAL_GPIO_Init>

    /* TIM3 DMA Init */
    /* TIM3_CH1_TRIG Init */
    hdma_tim3_ch1_trig.Instance = DMA1_Stream4;
 8000fce:	4b32      	ldr	r3, [pc, #200]	; (8001098 <HAL_TIM_Base_MspInit+0x144>)
 8000fd0:	4a32      	ldr	r2, [pc, #200]	; (800109c <HAL_TIM_Base_MspInit+0x148>)
 8000fd2:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Channel = DMA_CHANNEL_5;
 8000fd4:	4b30      	ldr	r3, [pc, #192]	; (8001098 <HAL_TIM_Base_MspInit+0x144>)
 8000fd6:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8000fda:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fdc:	4b2e      	ldr	r3, [pc, #184]	; (8001098 <HAL_TIM_Base_MspInit+0x144>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fe2:	4b2d      	ldr	r3, [pc, #180]	; (8001098 <HAL_TIM_Base_MspInit+0x144>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 8000fe8:	4b2b      	ldr	r3, [pc, #172]	; (8001098 <HAL_TIM_Base_MspInit+0x144>)
 8000fea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fee:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ff0:	4b29      	ldr	r3, [pc, #164]	; (8001098 <HAL_TIM_Base_MspInit+0x144>)
 8000ff2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ff6:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ff8:	4b27      	ldr	r3, [pc, #156]	; (8001098 <HAL_TIM_Base_MspInit+0x144>)
 8000ffa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ffe:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Mode = DMA_CIRCULAR;
 8001000:	4b25      	ldr	r3, [pc, #148]	; (8001098 <HAL_TIM_Base_MspInit+0x144>)
 8001002:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001006:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 8001008:	4b23      	ldr	r3, [pc, #140]	; (8001098 <HAL_TIM_Base_MspInit+0x144>)
 800100a:	2200      	movs	r2, #0
 800100c:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1_trig.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800100e:	4b22      	ldr	r3, [pc, #136]	; (8001098 <HAL_TIM_Base_MspInit+0x144>)
 8001010:	2200      	movs	r2, #0
 8001012:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 8001014:	4820      	ldr	r0, [pc, #128]	; (8001098 <HAL_TIM_Base_MspInit+0x144>)
 8001016:	f000 facb 	bl	80015b0 <HAL_DMA_Init>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <HAL_TIM_Base_MspInit+0xd0>
    {
      Error_Handler();
 8001020:	f7ff fd98 	bl	8000b54 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	4a1c      	ldr	r2, [pc, #112]	; (8001098 <HAL_TIM_Base_MspInit+0x144>)
 8001028:	625a      	str	r2, [r3, #36]	; 0x24
 800102a:	4a1b      	ldr	r2, [pc, #108]	; (8001098 <HAL_TIM_Base_MspInit+0x144>)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	4a19      	ldr	r2, [pc, #100]	; (8001098 <HAL_TIM_Base_MspInit+0x144>)
 8001034:	639a      	str	r2, [r3, #56]	; 0x38
 8001036:	4a18      	ldr	r2, [pc, #96]	; (8001098 <HAL_TIM_Base_MspInit+0x144>)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800103c:	2200      	movs	r2, #0
 800103e:	2100      	movs	r1, #0
 8001040:	201d      	movs	r0, #29
 8001042:	f000 fa7e 	bl	8001542 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001046:	201d      	movs	r0, #29
 8001048:	f000 fa97 	bl	800157a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800104c:	e01a      	b.n	8001084 <HAL_TIM_Base_MspInit+0x130>
  else if(tim_baseHandle->Instance==TIM4)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4a13      	ldr	r2, [pc, #76]	; (80010a0 <HAL_TIM_Base_MspInit+0x14c>)
 8001054:	4293      	cmp	r3, r2
 8001056:	d115      	bne.n	8001084 <HAL_TIM_Base_MspInit+0x130>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001058:	2300      	movs	r3, #0
 800105a:	60bb      	str	r3, [r7, #8]
 800105c:	4b0c      	ldr	r3, [pc, #48]	; (8001090 <HAL_TIM_Base_MspInit+0x13c>)
 800105e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001060:	4a0b      	ldr	r2, [pc, #44]	; (8001090 <HAL_TIM_Base_MspInit+0x13c>)
 8001062:	f043 0304 	orr.w	r3, r3, #4
 8001066:	6413      	str	r3, [r2, #64]	; 0x40
 8001068:	4b09      	ldr	r3, [pc, #36]	; (8001090 <HAL_TIM_Base_MspInit+0x13c>)
 800106a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106c:	f003 0304 	and.w	r3, r3, #4
 8001070:	60bb      	str	r3, [r7, #8]
 8001072:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001074:	2200      	movs	r2, #0
 8001076:	2100      	movs	r1, #0
 8001078:	201e      	movs	r0, #30
 800107a:	f000 fa62 	bl	8001542 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800107e:	201e      	movs	r0, #30
 8001080:	f000 fa7b 	bl	800157a <HAL_NVIC_EnableIRQ>
}
 8001084:	bf00      	nop
 8001086:	3728      	adds	r7, #40	; 0x28
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	40000400 	.word	0x40000400
 8001090:	40023800 	.word	0x40023800
 8001094:	40020000 	.word	0x40020000
 8001098:	20000150 	.word	0x20000150
 800109c:	40026070 	.word	0x40026070
 80010a0:	40000800 	.word	0x40000800

080010a4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b088      	sub	sp, #32
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ac:	f107 030c 	add.w	r3, r7, #12
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	605a      	str	r2, [r3, #4]
 80010b6:	609a      	str	r2, [r3, #8]
 80010b8:	60da      	str	r2, [r3, #12]
 80010ba:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a12      	ldr	r2, [pc, #72]	; (800110c <HAL_TIM_MspPostInit+0x68>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d11e      	bne.n	8001104 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010c6:	2300      	movs	r3, #0
 80010c8:	60bb      	str	r3, [r7, #8]
 80010ca:	4b11      	ldr	r3, [pc, #68]	; (8001110 <HAL_TIM_MspPostInit+0x6c>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ce:	4a10      	ldr	r2, [pc, #64]	; (8001110 <HAL_TIM_MspPostInit+0x6c>)
 80010d0:	f043 0308 	orr.w	r3, r3, #8
 80010d4:	6313      	str	r3, [r2, #48]	; 0x30
 80010d6:	4b0e      	ldr	r3, [pc, #56]	; (8001110 <HAL_TIM_MspPostInit+0x6c>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010da:	f003 0308 	and.w	r3, r3, #8
 80010de:	60bb      	str	r3, [r7, #8]
 80010e0:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80010e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010e6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e8:	2302      	movs	r3, #2
 80010ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ec:	2300      	movs	r3, #0
 80010ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f0:	2300      	movs	r3, #0
 80010f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80010f4:	2302      	movs	r3, #2
 80010f6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010f8:	f107 030c 	add.w	r3, r7, #12
 80010fc:	4619      	mov	r1, r3
 80010fe:	4805      	ldr	r0, [pc, #20]	; (8001114 <HAL_TIM_MspPostInit+0x70>)
 8001100:	f000 fe58 	bl	8001db4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001104:	bf00      	nop
 8001106:	3720      	adds	r7, #32
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	40000800 	.word	0x40000800
 8001110:	40023800 	.word	0x40023800
 8001114:	40020c00 	.word	0x40020c00

08001118 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800111c:	4b11      	ldr	r3, [pc, #68]	; (8001164 <MX_USART3_UART_Init+0x4c>)
 800111e:	4a12      	ldr	r2, [pc, #72]	; (8001168 <MX_USART3_UART_Init+0x50>)
 8001120:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001122:	4b10      	ldr	r3, [pc, #64]	; (8001164 <MX_USART3_UART_Init+0x4c>)
 8001124:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001128:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800112a:	4b0e      	ldr	r3, [pc, #56]	; (8001164 <MX_USART3_UART_Init+0x4c>)
 800112c:	2200      	movs	r2, #0
 800112e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001130:	4b0c      	ldr	r3, [pc, #48]	; (8001164 <MX_USART3_UART_Init+0x4c>)
 8001132:	2200      	movs	r2, #0
 8001134:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001136:	4b0b      	ldr	r3, [pc, #44]	; (8001164 <MX_USART3_UART_Init+0x4c>)
 8001138:	2200      	movs	r2, #0
 800113a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800113c:	4b09      	ldr	r3, [pc, #36]	; (8001164 <MX_USART3_UART_Init+0x4c>)
 800113e:	220c      	movs	r2, #12
 8001140:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001142:	4b08      	ldr	r3, [pc, #32]	; (8001164 <MX_USART3_UART_Init+0x4c>)
 8001144:	2200      	movs	r2, #0
 8001146:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001148:	4b06      	ldr	r3, [pc, #24]	; (8001164 <MX_USART3_UART_Init+0x4c>)
 800114a:	2200      	movs	r2, #0
 800114c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800114e:	4805      	ldr	r0, [pc, #20]	; (8001164 <MX_USART3_UART_Init+0x4c>)
 8001150:	f003 f988 	bl	8004464 <HAL_UART_Init>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800115a:	f7ff fcfb 	bl	8000b54 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800115e:	bf00      	nop
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	200001b0 	.word	0x200001b0
 8001168:	40004800 	.word	0x40004800

0800116c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b08a      	sub	sp, #40	; 0x28
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001174:	f107 0314 	add.w	r3, r7, #20
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	605a      	str	r2, [r3, #4]
 800117e:	609a      	str	r2, [r3, #8]
 8001180:	60da      	str	r2, [r3, #12]
 8001182:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a1d      	ldr	r2, [pc, #116]	; (8001200 <HAL_UART_MspInit+0x94>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d134      	bne.n	80011f8 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800118e:	2300      	movs	r3, #0
 8001190:	613b      	str	r3, [r7, #16]
 8001192:	4b1c      	ldr	r3, [pc, #112]	; (8001204 <HAL_UART_MspInit+0x98>)
 8001194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001196:	4a1b      	ldr	r2, [pc, #108]	; (8001204 <HAL_UART_MspInit+0x98>)
 8001198:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800119c:	6413      	str	r3, [r2, #64]	; 0x40
 800119e:	4b19      	ldr	r3, [pc, #100]	; (8001204 <HAL_UART_MspInit+0x98>)
 80011a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011a6:	613b      	str	r3, [r7, #16]
 80011a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011aa:	2300      	movs	r3, #0
 80011ac:	60fb      	str	r3, [r7, #12]
 80011ae:	4b15      	ldr	r3, [pc, #84]	; (8001204 <HAL_UART_MspInit+0x98>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b2:	4a14      	ldr	r2, [pc, #80]	; (8001204 <HAL_UART_MspInit+0x98>)
 80011b4:	f043 0302 	orr.w	r3, r3, #2
 80011b8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ba:	4b12      	ldr	r3, [pc, #72]	; (8001204 <HAL_UART_MspInit+0x98>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	f003 0302 	and.w	r3, r3, #2
 80011c2:	60fb      	str	r3, [r7, #12]
 80011c4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80011c6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80011ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011cc:	2302      	movs	r3, #2
 80011ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	2300      	movs	r3, #0
 80011d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d4:	2303      	movs	r3, #3
 80011d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80011d8:	2307      	movs	r3, #7
 80011da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011dc:	f107 0314 	add.w	r3, r7, #20
 80011e0:	4619      	mov	r1, r3
 80011e2:	4809      	ldr	r0, [pc, #36]	; (8001208 <HAL_UART_MspInit+0x9c>)
 80011e4:	f000 fde6 	bl	8001db4 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80011e8:	2200      	movs	r2, #0
 80011ea:	2100      	movs	r1, #0
 80011ec:	2027      	movs	r0, #39	; 0x27
 80011ee:	f000 f9a8 	bl	8001542 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80011f2:	2027      	movs	r0, #39	; 0x27
 80011f4:	f000 f9c1 	bl	800157a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80011f8:	bf00      	nop
 80011fa:	3728      	adds	r7, #40	; 0x28
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	40004800 	.word	0x40004800
 8001204:	40023800 	.word	0x40023800
 8001208:	40020400 	.word	0x40020400

0800120c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800120c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001244 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001210:	480d      	ldr	r0, [pc, #52]	; (8001248 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001212:	490e      	ldr	r1, [pc, #56]	; (800124c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001214:	4a0e      	ldr	r2, [pc, #56]	; (8001250 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001216:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001218:	e002      	b.n	8001220 <LoopCopyDataInit>

0800121a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800121a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800121c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800121e:	3304      	adds	r3, #4

08001220 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001220:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001222:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001224:	d3f9      	bcc.n	800121a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001226:	4a0b      	ldr	r2, [pc, #44]	; (8001254 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001228:	4c0b      	ldr	r4, [pc, #44]	; (8001258 <LoopFillZerobss+0x26>)
  movs r3, #0
 800122a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800122c:	e001      	b.n	8001232 <LoopFillZerobss>

0800122e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800122e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001230:	3204      	adds	r2, #4

08001232 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001232:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001234:	d3fb      	bcc.n	800122e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001236:	f7ff fd95 	bl	8000d64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800123a:	f004 f881 	bl	8005340 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800123e:	f7ff faed 	bl	800081c <main>
  bx  lr    
 8001242:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001244:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001248:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800124c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001250:	08006460 	.word	0x08006460
  ldr r2, =_sbss
 8001254:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001258:	20000208 	.word	0x20000208

0800125c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800125c:	e7fe      	b.n	800125c <ADC_IRQHandler>
	...

08001260 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001264:	4b0e      	ldr	r3, [pc, #56]	; (80012a0 <HAL_Init+0x40>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a0d      	ldr	r2, [pc, #52]	; (80012a0 <HAL_Init+0x40>)
 800126a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800126e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001270:	4b0b      	ldr	r3, [pc, #44]	; (80012a0 <HAL_Init+0x40>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a0a      	ldr	r2, [pc, #40]	; (80012a0 <HAL_Init+0x40>)
 8001276:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800127a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800127c:	4b08      	ldr	r3, [pc, #32]	; (80012a0 <HAL_Init+0x40>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a07      	ldr	r2, [pc, #28]	; (80012a0 <HAL_Init+0x40>)
 8001282:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001286:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001288:	2003      	movs	r0, #3
 800128a:	f000 f94f 	bl	800152c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800128e:	2000      	movs	r0, #0
 8001290:	f000 f808 	bl	80012a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001294:	f7ff fc64 	bl	8000b60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001298:	2300      	movs	r3, #0
}
 800129a:	4618      	mov	r0, r3
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	40023c00 	.word	0x40023c00

080012a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012ac:	4b12      	ldr	r3, [pc, #72]	; (80012f8 <HAL_InitTick+0x54>)
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	4b12      	ldr	r3, [pc, #72]	; (80012fc <HAL_InitTick+0x58>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	4619      	mov	r1, r3
 80012b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80012be:	fbb2 f3f3 	udiv	r3, r2, r3
 80012c2:	4618      	mov	r0, r3
 80012c4:	f000 f967 	bl	8001596 <HAL_SYSTICK_Config>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012ce:	2301      	movs	r3, #1
 80012d0:	e00e      	b.n	80012f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2b0f      	cmp	r3, #15
 80012d6:	d80a      	bhi.n	80012ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012d8:	2200      	movs	r2, #0
 80012da:	6879      	ldr	r1, [r7, #4]
 80012dc:	f04f 30ff 	mov.w	r0, #4294967295
 80012e0:	f000 f92f 	bl	8001542 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012e4:	4a06      	ldr	r2, [pc, #24]	; (8001300 <HAL_InitTick+0x5c>)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012ea:	2300      	movs	r3, #0
 80012ec:	e000      	b.n	80012f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	3708      	adds	r7, #8
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	20000000 	.word	0x20000000
 80012fc:	20000008 	.word	0x20000008
 8001300:	20000004 	.word	0x20000004

08001304 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001308:	4b06      	ldr	r3, [pc, #24]	; (8001324 <HAL_IncTick+0x20>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	461a      	mov	r2, r3
 800130e:	4b06      	ldr	r3, [pc, #24]	; (8001328 <HAL_IncTick+0x24>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4413      	add	r3, r2
 8001314:	4a04      	ldr	r2, [pc, #16]	; (8001328 <HAL_IncTick+0x24>)
 8001316:	6013      	str	r3, [r2, #0]
}
 8001318:	bf00      	nop
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	20000008 	.word	0x20000008
 8001328:	200001f4 	.word	0x200001f4

0800132c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  return uwTick;
 8001330:	4b03      	ldr	r3, [pc, #12]	; (8001340 <HAL_GetTick+0x14>)
 8001332:	681b      	ldr	r3, [r3, #0]
}
 8001334:	4618      	mov	r0, r3
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	200001f4 	.word	0x200001f4

08001344 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b084      	sub	sp, #16
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800134c:	f7ff ffee 	bl	800132c <HAL_GetTick>
 8001350:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800135c:	d005      	beq.n	800136a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800135e:	4b0a      	ldr	r3, [pc, #40]	; (8001388 <HAL_Delay+0x44>)
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	461a      	mov	r2, r3
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	4413      	add	r3, r2
 8001368:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800136a:	bf00      	nop
 800136c:	f7ff ffde 	bl	800132c <HAL_GetTick>
 8001370:	4602      	mov	r2, r0
 8001372:	68bb      	ldr	r3, [r7, #8]
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	68fa      	ldr	r2, [r7, #12]
 8001378:	429a      	cmp	r2, r3
 800137a:	d8f7      	bhi.n	800136c <HAL_Delay+0x28>
  {
  }
}
 800137c:	bf00      	nop
 800137e:	bf00      	nop
 8001380:	3710      	adds	r7, #16
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	20000008 	.word	0x20000008

0800138c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800138c:	b480      	push	{r7}
 800138e:	b085      	sub	sp, #20
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	f003 0307 	and.w	r3, r3, #7
 800139a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800139c:	4b0c      	ldr	r3, [pc, #48]	; (80013d0 <__NVIC_SetPriorityGrouping+0x44>)
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013a2:	68ba      	ldr	r2, [r7, #8]
 80013a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013a8:	4013      	ands	r3, r2
 80013aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013be:	4a04      	ldr	r2, [pc, #16]	; (80013d0 <__NVIC_SetPriorityGrouping+0x44>)
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	60d3      	str	r3, [r2, #12]
}
 80013c4:	bf00      	nop
 80013c6:	3714      	adds	r7, #20
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr
 80013d0:	e000ed00 	.word	0xe000ed00

080013d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013d8:	4b04      	ldr	r3, [pc, #16]	; (80013ec <__NVIC_GetPriorityGrouping+0x18>)
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	0a1b      	lsrs	r3, r3, #8
 80013de:	f003 0307 	and.w	r3, r3, #7
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr
 80013ec:	e000ed00 	.word	0xe000ed00

080013f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	4603      	mov	r3, r0
 80013f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	db0b      	blt.n	800141a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001402:	79fb      	ldrb	r3, [r7, #7]
 8001404:	f003 021f 	and.w	r2, r3, #31
 8001408:	4907      	ldr	r1, [pc, #28]	; (8001428 <__NVIC_EnableIRQ+0x38>)
 800140a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800140e:	095b      	lsrs	r3, r3, #5
 8001410:	2001      	movs	r0, #1
 8001412:	fa00 f202 	lsl.w	r2, r0, r2
 8001416:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800141a:	bf00      	nop
 800141c:	370c      	adds	r7, #12
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	e000e100 	.word	0xe000e100

0800142c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	4603      	mov	r3, r0
 8001434:	6039      	str	r1, [r7, #0]
 8001436:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001438:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800143c:	2b00      	cmp	r3, #0
 800143e:	db0a      	blt.n	8001456 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	b2da      	uxtb	r2, r3
 8001444:	490c      	ldr	r1, [pc, #48]	; (8001478 <__NVIC_SetPriority+0x4c>)
 8001446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144a:	0112      	lsls	r2, r2, #4
 800144c:	b2d2      	uxtb	r2, r2
 800144e:	440b      	add	r3, r1
 8001450:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001454:	e00a      	b.n	800146c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	b2da      	uxtb	r2, r3
 800145a:	4908      	ldr	r1, [pc, #32]	; (800147c <__NVIC_SetPriority+0x50>)
 800145c:	79fb      	ldrb	r3, [r7, #7]
 800145e:	f003 030f 	and.w	r3, r3, #15
 8001462:	3b04      	subs	r3, #4
 8001464:	0112      	lsls	r2, r2, #4
 8001466:	b2d2      	uxtb	r2, r2
 8001468:	440b      	add	r3, r1
 800146a:	761a      	strb	r2, [r3, #24]
}
 800146c:	bf00      	nop
 800146e:	370c      	adds	r7, #12
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr
 8001478:	e000e100 	.word	0xe000e100
 800147c:	e000ed00 	.word	0xe000ed00

08001480 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001480:	b480      	push	{r7}
 8001482:	b089      	sub	sp, #36	; 0x24
 8001484:	af00      	add	r7, sp, #0
 8001486:	60f8      	str	r0, [r7, #12]
 8001488:	60b9      	str	r1, [r7, #8]
 800148a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	f003 0307 	and.w	r3, r3, #7
 8001492:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	f1c3 0307 	rsb	r3, r3, #7
 800149a:	2b04      	cmp	r3, #4
 800149c:	bf28      	it	cs
 800149e:	2304      	movcs	r3, #4
 80014a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	3304      	adds	r3, #4
 80014a6:	2b06      	cmp	r3, #6
 80014a8:	d902      	bls.n	80014b0 <NVIC_EncodePriority+0x30>
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	3b03      	subs	r3, #3
 80014ae:	e000      	b.n	80014b2 <NVIC_EncodePriority+0x32>
 80014b0:	2300      	movs	r3, #0
 80014b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014b4:	f04f 32ff 	mov.w	r2, #4294967295
 80014b8:	69bb      	ldr	r3, [r7, #24]
 80014ba:	fa02 f303 	lsl.w	r3, r2, r3
 80014be:	43da      	mvns	r2, r3
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	401a      	ands	r2, r3
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014c8:	f04f 31ff 	mov.w	r1, #4294967295
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	fa01 f303 	lsl.w	r3, r1, r3
 80014d2:	43d9      	mvns	r1, r3
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014d8:	4313      	orrs	r3, r2
         );
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3724      	adds	r7, #36	; 0x24
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
	...

080014e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	3b01      	subs	r3, #1
 80014f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014f8:	d301      	bcc.n	80014fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014fa:	2301      	movs	r3, #1
 80014fc:	e00f      	b.n	800151e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014fe:	4a0a      	ldr	r2, [pc, #40]	; (8001528 <SysTick_Config+0x40>)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	3b01      	subs	r3, #1
 8001504:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001506:	210f      	movs	r1, #15
 8001508:	f04f 30ff 	mov.w	r0, #4294967295
 800150c:	f7ff ff8e 	bl	800142c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001510:	4b05      	ldr	r3, [pc, #20]	; (8001528 <SysTick_Config+0x40>)
 8001512:	2200      	movs	r2, #0
 8001514:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001516:	4b04      	ldr	r3, [pc, #16]	; (8001528 <SysTick_Config+0x40>)
 8001518:	2207      	movs	r2, #7
 800151a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800151c:	2300      	movs	r3, #0
}
 800151e:	4618      	mov	r0, r3
 8001520:	3708      	adds	r7, #8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	e000e010 	.word	0xe000e010

0800152c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001534:	6878      	ldr	r0, [r7, #4]
 8001536:	f7ff ff29 	bl	800138c <__NVIC_SetPriorityGrouping>
}
 800153a:	bf00      	nop
 800153c:	3708      	adds	r7, #8
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}

08001542 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001542:	b580      	push	{r7, lr}
 8001544:	b086      	sub	sp, #24
 8001546:	af00      	add	r7, sp, #0
 8001548:	4603      	mov	r3, r0
 800154a:	60b9      	str	r1, [r7, #8]
 800154c:	607a      	str	r2, [r7, #4]
 800154e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001550:	2300      	movs	r3, #0
 8001552:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001554:	f7ff ff3e 	bl	80013d4 <__NVIC_GetPriorityGrouping>
 8001558:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800155a:	687a      	ldr	r2, [r7, #4]
 800155c:	68b9      	ldr	r1, [r7, #8]
 800155e:	6978      	ldr	r0, [r7, #20]
 8001560:	f7ff ff8e 	bl	8001480 <NVIC_EncodePriority>
 8001564:	4602      	mov	r2, r0
 8001566:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800156a:	4611      	mov	r1, r2
 800156c:	4618      	mov	r0, r3
 800156e:	f7ff ff5d 	bl	800142c <__NVIC_SetPriority>
}
 8001572:	bf00      	nop
 8001574:	3718      	adds	r7, #24
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}

0800157a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800157a:	b580      	push	{r7, lr}
 800157c:	b082      	sub	sp, #8
 800157e:	af00      	add	r7, sp, #0
 8001580:	4603      	mov	r3, r0
 8001582:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001584:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001588:	4618      	mov	r0, r3
 800158a:	f7ff ff31 	bl	80013f0 <__NVIC_EnableIRQ>
}
 800158e:	bf00      	nop
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}

08001596 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001596:	b580      	push	{r7, lr}
 8001598:	b082      	sub	sp, #8
 800159a:	af00      	add	r7, sp, #0
 800159c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	f7ff ffa2 	bl	80014e8 <SysTick_Config>
 80015a4:	4603      	mov	r3, r0
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
	...

080015b0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b086      	sub	sp, #24
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80015b8:	2300      	movs	r3, #0
 80015ba:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80015bc:	f7ff feb6 	bl	800132c <HAL_GetTick>
 80015c0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d101      	bne.n	80015cc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	e099      	b.n	8001700 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2202      	movs	r2, #2
 80015d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2200      	movs	r2, #0
 80015d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f022 0201 	bic.w	r2, r2, #1
 80015ea:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015ec:	e00f      	b.n	800160e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80015ee:	f7ff fe9d 	bl	800132c <HAL_GetTick>
 80015f2:	4602      	mov	r2, r0
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	1ad3      	subs	r3, r2, r3
 80015f8:	2b05      	cmp	r3, #5
 80015fa:	d908      	bls.n	800160e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2220      	movs	r2, #32
 8001600:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2203      	movs	r2, #3
 8001606:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800160a:	2303      	movs	r3, #3
 800160c:	e078      	b.n	8001700 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f003 0301 	and.w	r3, r3, #1
 8001618:	2b00      	cmp	r3, #0
 800161a:	d1e8      	bne.n	80015ee <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001624:	697a      	ldr	r2, [r7, #20]
 8001626:	4b38      	ldr	r3, [pc, #224]	; (8001708 <HAL_DMA_Init+0x158>)
 8001628:	4013      	ands	r3, r2
 800162a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	685a      	ldr	r2, [r3, #4]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800163a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	691b      	ldr	r3, [r3, #16]
 8001640:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001646:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	699b      	ldr	r3, [r3, #24]
 800164c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001652:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6a1b      	ldr	r3, [r3, #32]
 8001658:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800165a:	697a      	ldr	r2, [r7, #20]
 800165c:	4313      	orrs	r3, r2
 800165e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001664:	2b04      	cmp	r3, #4
 8001666:	d107      	bne.n	8001678 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001670:	4313      	orrs	r3, r2
 8001672:	697a      	ldr	r2, [r7, #20]
 8001674:	4313      	orrs	r3, r2
 8001676:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	697a      	ldr	r2, [r7, #20]
 800167e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	695b      	ldr	r3, [r3, #20]
 8001686:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	f023 0307 	bic.w	r3, r3, #7
 800168e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001694:	697a      	ldr	r2, [r7, #20]
 8001696:	4313      	orrs	r3, r2
 8001698:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800169e:	2b04      	cmp	r3, #4
 80016a0:	d117      	bne.n	80016d2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016a6:	697a      	ldr	r2, [r7, #20]
 80016a8:	4313      	orrs	r3, r2
 80016aa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d00e      	beq.n	80016d2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	f000 fb01 	bl	8001cbc <DMA_CheckFifoParam>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d008      	beq.n	80016d2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2240      	movs	r2, #64	; 0x40
 80016c4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2201      	movs	r2, #1
 80016ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80016ce:	2301      	movs	r3, #1
 80016d0:	e016      	b.n	8001700 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	697a      	ldr	r2, [r7, #20]
 80016d8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f000 fab8 	bl	8001c50 <DMA_CalcBaseAndBitshift>
 80016e0:	4603      	mov	r3, r0
 80016e2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016e8:	223f      	movs	r2, #63	; 0x3f
 80016ea:	409a      	lsls	r2, r3
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2200      	movs	r2, #0
 80016f4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2201      	movs	r2, #1
 80016fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80016fe:	2300      	movs	r3, #0
}
 8001700:	4618      	mov	r0, r3
 8001702:	3718      	adds	r7, #24
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	f010803f 	.word	0xf010803f

0800170c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b086      	sub	sp, #24
 8001710:	af00      	add	r7, sp, #0
 8001712:	60f8      	str	r0, [r7, #12]
 8001714:	60b9      	str	r1, [r7, #8]
 8001716:	607a      	str	r2, [r7, #4]
 8001718:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800171a:	2300      	movs	r3, #0
 800171c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001722:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800172a:	2b01      	cmp	r3, #1
 800172c:	d101      	bne.n	8001732 <HAL_DMA_Start_IT+0x26>
 800172e:	2302      	movs	r3, #2
 8001730:	e040      	b.n	80017b4 <HAL_DMA_Start_IT+0xa8>
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	2201      	movs	r2, #1
 8001736:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001740:	b2db      	uxtb	r3, r3
 8001742:	2b01      	cmp	r3, #1
 8001744:	d12f      	bne.n	80017a6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	2202      	movs	r2, #2
 800174a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	2200      	movs	r2, #0
 8001752:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	687a      	ldr	r2, [r7, #4]
 8001758:	68b9      	ldr	r1, [r7, #8]
 800175a:	68f8      	ldr	r0, [r7, #12]
 800175c:	f000 fa4a 	bl	8001bf4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001764:	223f      	movs	r2, #63	; 0x3f
 8001766:	409a      	lsls	r2, r3
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f042 0216 	orr.w	r2, r2, #22
 800177a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001780:	2b00      	cmp	r3, #0
 8001782:	d007      	beq.n	8001794 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f042 0208 	orr.w	r2, r2, #8
 8001792:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f042 0201 	orr.w	r2, r2, #1
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	e005      	b.n	80017b2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	2200      	movs	r2, #0
 80017aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80017ae:	2302      	movs	r3, #2
 80017b0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80017b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3718      	adds	r7, #24
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}

080017bc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b084      	sub	sp, #16
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017c8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80017ca:	f7ff fdaf 	bl	800132c <HAL_GetTick>
 80017ce:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017d6:	b2db      	uxtb	r3, r3
 80017d8:	2b02      	cmp	r3, #2
 80017da:	d008      	beq.n	80017ee <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2280      	movs	r2, #128	; 0x80
 80017e0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2200      	movs	r2, #0
 80017e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e052      	b.n	8001894 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f022 0216 	bic.w	r2, r2, #22
 80017fc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	695a      	ldr	r2, [r3, #20]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800180c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001812:	2b00      	cmp	r3, #0
 8001814:	d103      	bne.n	800181e <HAL_DMA_Abort+0x62>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800181a:	2b00      	cmp	r3, #0
 800181c:	d007      	beq.n	800182e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f022 0208 	bic.w	r2, r2, #8
 800182c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f022 0201 	bic.w	r2, r2, #1
 800183c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800183e:	e013      	b.n	8001868 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001840:	f7ff fd74 	bl	800132c <HAL_GetTick>
 8001844:	4602      	mov	r2, r0
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	2b05      	cmp	r3, #5
 800184c:	d90c      	bls.n	8001868 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2220      	movs	r2, #32
 8001852:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2203      	movs	r2, #3
 8001858:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2200      	movs	r2, #0
 8001860:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001864:	2303      	movs	r3, #3
 8001866:	e015      	b.n	8001894 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 0301 	and.w	r3, r3, #1
 8001872:	2b00      	cmp	r3, #0
 8001874:	d1e4      	bne.n	8001840 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800187a:	223f      	movs	r2, #63	; 0x3f
 800187c:	409a      	lsls	r2, r3
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2201      	movs	r2, #1
 8001886:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2200      	movs	r2, #0
 800188e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001892:	2300      	movs	r3, #0
}
 8001894:	4618      	mov	r0, r3
 8001896:	3710      	adds	r7, #16
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}

0800189c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	2b02      	cmp	r3, #2
 80018ae:	d004      	beq.n	80018ba <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2280      	movs	r2, #128	; 0x80
 80018b4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e00c      	b.n	80018d4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2205      	movs	r2, #5
 80018be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f022 0201 	bic.w	r2, r2, #1
 80018d0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80018d2:	2300      	movs	r3, #0
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	370c      	adds	r7, #12
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr

080018e0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b086      	sub	sp, #24
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80018e8:	2300      	movs	r3, #0
 80018ea:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80018ec:	4b92      	ldr	r3, [pc, #584]	; (8001b38 <HAL_DMA_IRQHandler+0x258>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a92      	ldr	r2, [pc, #584]	; (8001b3c <HAL_DMA_IRQHandler+0x25c>)
 80018f2:	fba2 2303 	umull	r2, r3, r2, r3
 80018f6:	0a9b      	lsrs	r3, r3, #10
 80018f8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018fe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800190a:	2208      	movs	r2, #8
 800190c:	409a      	lsls	r2, r3
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	4013      	ands	r3, r2
 8001912:	2b00      	cmp	r3, #0
 8001914:	d01a      	beq.n	800194c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 0304 	and.w	r3, r3, #4
 8001920:	2b00      	cmp	r3, #0
 8001922:	d013      	beq.n	800194c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f022 0204 	bic.w	r2, r2, #4
 8001932:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001938:	2208      	movs	r2, #8
 800193a:	409a      	lsls	r2, r3
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001944:	f043 0201 	orr.w	r2, r3, #1
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001950:	2201      	movs	r2, #1
 8001952:	409a      	lsls	r2, r3
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	4013      	ands	r3, r2
 8001958:	2b00      	cmp	r3, #0
 800195a:	d012      	beq.n	8001982 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	695b      	ldr	r3, [r3, #20]
 8001962:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001966:	2b00      	cmp	r3, #0
 8001968:	d00b      	beq.n	8001982 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800196e:	2201      	movs	r2, #1
 8001970:	409a      	lsls	r2, r3
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800197a:	f043 0202 	orr.w	r2, r3, #2
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001986:	2204      	movs	r2, #4
 8001988:	409a      	lsls	r2, r3
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	4013      	ands	r3, r2
 800198e:	2b00      	cmp	r3, #0
 8001990:	d012      	beq.n	80019b8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 0302 	and.w	r3, r3, #2
 800199c:	2b00      	cmp	r3, #0
 800199e:	d00b      	beq.n	80019b8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019a4:	2204      	movs	r2, #4
 80019a6:	409a      	lsls	r2, r3
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019b0:	f043 0204 	orr.w	r2, r3, #4
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019bc:	2210      	movs	r2, #16
 80019be:	409a      	lsls	r2, r3
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	4013      	ands	r3, r2
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d043      	beq.n	8001a50 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 0308 	and.w	r3, r3, #8
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d03c      	beq.n	8001a50 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019da:	2210      	movs	r2, #16
 80019dc:	409a      	lsls	r2, r3
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d018      	beq.n	8001a22 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d108      	bne.n	8001a10 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d024      	beq.n	8001a50 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	4798      	blx	r3
 8001a0e:	e01f      	b.n	8001a50 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d01b      	beq.n	8001a50 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	4798      	blx	r3
 8001a20:	e016      	b.n	8001a50 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d107      	bne.n	8001a40 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f022 0208 	bic.w	r2, r2, #8
 8001a3e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d003      	beq.n	8001a50 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a54:	2220      	movs	r2, #32
 8001a56:	409a      	lsls	r2, r3
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	f000 808e 	beq.w	8001b7e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 0310 	and.w	r3, r3, #16
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	f000 8086 	beq.w	8001b7e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a76:	2220      	movs	r2, #32
 8001a78:	409a      	lsls	r2, r3
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	2b05      	cmp	r3, #5
 8001a88:	d136      	bne.n	8001af8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f022 0216 	bic.w	r2, r2, #22
 8001a98:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	695a      	ldr	r2, [r3, #20]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001aa8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d103      	bne.n	8001aba <HAL_DMA_IRQHandler+0x1da>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d007      	beq.n	8001aca <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f022 0208 	bic.w	r2, r2, #8
 8001ac8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ace:	223f      	movs	r2, #63	; 0x3f
 8001ad0:	409a      	lsls	r2, r3
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2201      	movs	r2, #1
 8001ada:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d07d      	beq.n	8001bea <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	4798      	blx	r3
        }
        return;
 8001af6:	e078      	b.n	8001bea <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d01c      	beq.n	8001b40 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d108      	bne.n	8001b26 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d030      	beq.n	8001b7e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	4798      	blx	r3
 8001b24:	e02b      	b.n	8001b7e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d027      	beq.n	8001b7e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	4798      	blx	r3
 8001b36:	e022      	b.n	8001b7e <HAL_DMA_IRQHandler+0x29e>
 8001b38:	20000000 	.word	0x20000000
 8001b3c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d10f      	bne.n	8001b6e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f022 0210 	bic.w	r2, r2, #16
 8001b5c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2201      	movs	r2, #1
 8001b62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d003      	beq.n	8001b7e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d032      	beq.n	8001bec <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b8a:	f003 0301 	and.w	r3, r3, #1
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d022      	beq.n	8001bd8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2205      	movs	r2, #5
 8001b96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f022 0201 	bic.w	r2, r2, #1
 8001ba8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	3301      	adds	r3, #1
 8001bae:	60bb      	str	r3, [r7, #8]
 8001bb0:	697a      	ldr	r2, [r7, #20]
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d307      	bcc.n	8001bc6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0301 	and.w	r3, r3, #1
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d1f2      	bne.n	8001baa <HAL_DMA_IRQHandler+0x2ca>
 8001bc4:	e000      	b.n	8001bc8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001bc6:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2201      	movs	r2, #1
 8001bcc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d005      	beq.n	8001bec <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	4798      	blx	r3
 8001be8:	e000      	b.n	8001bec <HAL_DMA_IRQHandler+0x30c>
        return;
 8001bea:	bf00      	nop
    }
  }
}
 8001bec:	3718      	adds	r7, #24
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop

08001bf4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b085      	sub	sp, #20
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	60f8      	str	r0, [r7, #12]
 8001bfc:	60b9      	str	r1, [r7, #8]
 8001bfe:	607a      	str	r2, [r7, #4]
 8001c00:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001c10:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	683a      	ldr	r2, [r7, #0]
 8001c18:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	2b40      	cmp	r3, #64	; 0x40
 8001c20:	d108      	bne.n	8001c34 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	687a      	ldr	r2, [r7, #4]
 8001c28:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	68ba      	ldr	r2, [r7, #8]
 8001c30:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001c32:	e007      	b.n	8001c44 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	68ba      	ldr	r2, [r7, #8]
 8001c3a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	687a      	ldr	r2, [r7, #4]
 8001c42:	60da      	str	r2, [r3, #12]
}
 8001c44:	bf00      	nop
 8001c46:	3714      	adds	r7, #20
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr

08001c50 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b085      	sub	sp, #20
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	3b10      	subs	r3, #16
 8001c60:	4a14      	ldr	r2, [pc, #80]	; (8001cb4 <DMA_CalcBaseAndBitshift+0x64>)
 8001c62:	fba2 2303 	umull	r2, r3, r2, r3
 8001c66:	091b      	lsrs	r3, r3, #4
 8001c68:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001c6a:	4a13      	ldr	r2, [pc, #76]	; (8001cb8 <DMA_CalcBaseAndBitshift+0x68>)
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	4413      	add	r3, r2
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	461a      	mov	r2, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	2b03      	cmp	r3, #3
 8001c7c:	d909      	bls.n	8001c92 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001c86:	f023 0303 	bic.w	r3, r3, #3
 8001c8a:	1d1a      	adds	r2, r3, #4
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	659a      	str	r2, [r3, #88]	; 0x58
 8001c90:	e007      	b.n	8001ca2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001c9a:	f023 0303 	bic.w	r3, r3, #3
 8001c9e:	687a      	ldr	r2, [r7, #4]
 8001ca0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3714      	adds	r7, #20
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	aaaaaaab 	.word	0xaaaaaaab
 8001cb8:	080063b0 	.word	0x080063b0

08001cbc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b085      	sub	sp, #20
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ccc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	699b      	ldr	r3, [r3, #24]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d11f      	bne.n	8001d16 <DMA_CheckFifoParam+0x5a>
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	2b03      	cmp	r3, #3
 8001cda:	d856      	bhi.n	8001d8a <DMA_CheckFifoParam+0xce>
 8001cdc:	a201      	add	r2, pc, #4	; (adr r2, 8001ce4 <DMA_CheckFifoParam+0x28>)
 8001cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ce2:	bf00      	nop
 8001ce4:	08001cf5 	.word	0x08001cf5
 8001ce8:	08001d07 	.word	0x08001d07
 8001cec:	08001cf5 	.word	0x08001cf5
 8001cf0:	08001d8b 	.word	0x08001d8b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cf8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d046      	beq.n	8001d8e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d04:	e043      	b.n	8001d8e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d0a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001d0e:	d140      	bne.n	8001d92 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d14:	e03d      	b.n	8001d92 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	699b      	ldr	r3, [r3, #24]
 8001d1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d1e:	d121      	bne.n	8001d64 <DMA_CheckFifoParam+0xa8>
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	2b03      	cmp	r3, #3
 8001d24:	d837      	bhi.n	8001d96 <DMA_CheckFifoParam+0xda>
 8001d26:	a201      	add	r2, pc, #4	; (adr r2, 8001d2c <DMA_CheckFifoParam+0x70>)
 8001d28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d2c:	08001d3d 	.word	0x08001d3d
 8001d30:	08001d43 	.word	0x08001d43
 8001d34:	08001d3d 	.word	0x08001d3d
 8001d38:	08001d55 	.word	0x08001d55
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	73fb      	strb	r3, [r7, #15]
      break;
 8001d40:	e030      	b.n	8001da4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d025      	beq.n	8001d9a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d52:	e022      	b.n	8001d9a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d58:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001d5c:	d11f      	bne.n	8001d9e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001d62:	e01c      	b.n	8001d9e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	d903      	bls.n	8001d72 <DMA_CheckFifoParam+0xb6>
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	2b03      	cmp	r3, #3
 8001d6e:	d003      	beq.n	8001d78 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001d70:	e018      	b.n	8001da4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	73fb      	strb	r3, [r7, #15]
      break;
 8001d76:	e015      	b.n	8001da4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d00e      	beq.n	8001da2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	73fb      	strb	r3, [r7, #15]
      break;
 8001d88:	e00b      	b.n	8001da2 <DMA_CheckFifoParam+0xe6>
      break;
 8001d8a:	bf00      	nop
 8001d8c:	e00a      	b.n	8001da4 <DMA_CheckFifoParam+0xe8>
      break;
 8001d8e:	bf00      	nop
 8001d90:	e008      	b.n	8001da4 <DMA_CheckFifoParam+0xe8>
      break;
 8001d92:	bf00      	nop
 8001d94:	e006      	b.n	8001da4 <DMA_CheckFifoParam+0xe8>
      break;
 8001d96:	bf00      	nop
 8001d98:	e004      	b.n	8001da4 <DMA_CheckFifoParam+0xe8>
      break;
 8001d9a:	bf00      	nop
 8001d9c:	e002      	b.n	8001da4 <DMA_CheckFifoParam+0xe8>
      break;   
 8001d9e:	bf00      	nop
 8001da0:	e000      	b.n	8001da4 <DMA_CheckFifoParam+0xe8>
      break;
 8001da2:	bf00      	nop
    }
  } 
  
  return status; 
 8001da4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3714      	adds	r7, #20
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
 8001db2:	bf00      	nop

08001db4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b089      	sub	sp, #36	; 0x24
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dca:	2300      	movs	r3, #0
 8001dcc:	61fb      	str	r3, [r7, #28]
 8001dce:	e177      	b.n	80020c0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	697a      	ldr	r2, [r7, #20]
 8001de0:	4013      	ands	r3, r2
 8001de2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001de4:	693a      	ldr	r2, [r7, #16]
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	429a      	cmp	r2, r3
 8001dea:	f040 8166 	bne.w	80020ba <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	f003 0303 	and.w	r3, r3, #3
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d005      	beq.n	8001e06 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d130      	bne.n	8001e68 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	005b      	lsls	r3, r3, #1
 8001e10:	2203      	movs	r2, #3
 8001e12:	fa02 f303 	lsl.w	r3, r2, r3
 8001e16:	43db      	mvns	r3, r3
 8001e18:	69ba      	ldr	r2, [r7, #24]
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	68da      	ldr	r2, [r3, #12]
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	005b      	lsls	r3, r3, #1
 8001e26:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2a:	69ba      	ldr	r2, [r7, #24]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	69ba      	ldr	r2, [r7, #24]
 8001e34:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	fa02 f303 	lsl.w	r3, r2, r3
 8001e44:	43db      	mvns	r3, r3
 8001e46:	69ba      	ldr	r2, [r7, #24]
 8001e48:	4013      	ands	r3, r2
 8001e4a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	091b      	lsrs	r3, r3, #4
 8001e52:	f003 0201 	and.w	r2, r3, #1
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5c:	69ba      	ldr	r2, [r7, #24]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	69ba      	ldr	r2, [r7, #24]
 8001e66:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f003 0303 	and.w	r3, r3, #3
 8001e70:	2b03      	cmp	r3, #3
 8001e72:	d017      	beq.n	8001ea4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	005b      	lsls	r3, r3, #1
 8001e7e:	2203      	movs	r2, #3
 8001e80:	fa02 f303 	lsl.w	r3, r2, r3
 8001e84:	43db      	mvns	r3, r3
 8001e86:	69ba      	ldr	r2, [r7, #24]
 8001e88:	4013      	ands	r3, r2
 8001e8a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	689a      	ldr	r2, [r3, #8]
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	005b      	lsls	r3, r3, #1
 8001e94:	fa02 f303 	lsl.w	r3, r2, r3
 8001e98:	69ba      	ldr	r2, [r7, #24]
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	69ba      	ldr	r2, [r7, #24]
 8001ea2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f003 0303 	and.w	r3, r3, #3
 8001eac:	2b02      	cmp	r3, #2
 8001eae:	d123      	bne.n	8001ef8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	08da      	lsrs	r2, r3, #3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	3208      	adds	r2, #8
 8001eb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ebc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	f003 0307 	and.w	r3, r3, #7
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	220f      	movs	r2, #15
 8001ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ecc:	43db      	mvns	r3, r3
 8001ece:	69ba      	ldr	r2, [r7, #24]
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	691a      	ldr	r2, [r3, #16]
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	f003 0307 	and.w	r3, r3, #7
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee4:	69ba      	ldr	r2, [r7, #24]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	08da      	lsrs	r2, r3, #3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	3208      	adds	r2, #8
 8001ef2:	69b9      	ldr	r1, [r7, #24]
 8001ef4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	005b      	lsls	r3, r3, #1
 8001f02:	2203      	movs	r2, #3
 8001f04:	fa02 f303 	lsl.w	r3, r2, r3
 8001f08:	43db      	mvns	r3, r3
 8001f0a:	69ba      	ldr	r2, [r7, #24]
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f003 0203 	and.w	r2, r3, #3
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	005b      	lsls	r3, r3, #1
 8001f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	69ba      	ldr	r2, [r7, #24]
 8001f2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	f000 80c0 	beq.w	80020ba <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	60fb      	str	r3, [r7, #12]
 8001f3e:	4b66      	ldr	r3, [pc, #408]	; (80020d8 <HAL_GPIO_Init+0x324>)
 8001f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f42:	4a65      	ldr	r2, [pc, #404]	; (80020d8 <HAL_GPIO_Init+0x324>)
 8001f44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f48:	6453      	str	r3, [r2, #68]	; 0x44
 8001f4a:	4b63      	ldr	r3, [pc, #396]	; (80020d8 <HAL_GPIO_Init+0x324>)
 8001f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f52:	60fb      	str	r3, [r7, #12]
 8001f54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f56:	4a61      	ldr	r2, [pc, #388]	; (80020dc <HAL_GPIO_Init+0x328>)
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	089b      	lsrs	r3, r3, #2
 8001f5c:	3302      	adds	r3, #2
 8001f5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	f003 0303 	and.w	r3, r3, #3
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	220f      	movs	r2, #15
 8001f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f72:	43db      	mvns	r3, r3
 8001f74:	69ba      	ldr	r2, [r7, #24]
 8001f76:	4013      	ands	r3, r2
 8001f78:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4a58      	ldr	r2, [pc, #352]	; (80020e0 <HAL_GPIO_Init+0x32c>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d037      	beq.n	8001ff2 <HAL_GPIO_Init+0x23e>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4a57      	ldr	r2, [pc, #348]	; (80020e4 <HAL_GPIO_Init+0x330>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d031      	beq.n	8001fee <HAL_GPIO_Init+0x23a>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4a56      	ldr	r2, [pc, #344]	; (80020e8 <HAL_GPIO_Init+0x334>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d02b      	beq.n	8001fea <HAL_GPIO_Init+0x236>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4a55      	ldr	r2, [pc, #340]	; (80020ec <HAL_GPIO_Init+0x338>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d025      	beq.n	8001fe6 <HAL_GPIO_Init+0x232>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4a54      	ldr	r2, [pc, #336]	; (80020f0 <HAL_GPIO_Init+0x33c>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d01f      	beq.n	8001fe2 <HAL_GPIO_Init+0x22e>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4a53      	ldr	r2, [pc, #332]	; (80020f4 <HAL_GPIO_Init+0x340>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d019      	beq.n	8001fde <HAL_GPIO_Init+0x22a>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4a52      	ldr	r2, [pc, #328]	; (80020f8 <HAL_GPIO_Init+0x344>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d013      	beq.n	8001fda <HAL_GPIO_Init+0x226>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4a51      	ldr	r2, [pc, #324]	; (80020fc <HAL_GPIO_Init+0x348>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d00d      	beq.n	8001fd6 <HAL_GPIO_Init+0x222>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4a50      	ldr	r2, [pc, #320]	; (8002100 <HAL_GPIO_Init+0x34c>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d007      	beq.n	8001fd2 <HAL_GPIO_Init+0x21e>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4a4f      	ldr	r2, [pc, #316]	; (8002104 <HAL_GPIO_Init+0x350>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d101      	bne.n	8001fce <HAL_GPIO_Init+0x21a>
 8001fca:	2309      	movs	r3, #9
 8001fcc:	e012      	b.n	8001ff4 <HAL_GPIO_Init+0x240>
 8001fce:	230a      	movs	r3, #10
 8001fd0:	e010      	b.n	8001ff4 <HAL_GPIO_Init+0x240>
 8001fd2:	2308      	movs	r3, #8
 8001fd4:	e00e      	b.n	8001ff4 <HAL_GPIO_Init+0x240>
 8001fd6:	2307      	movs	r3, #7
 8001fd8:	e00c      	b.n	8001ff4 <HAL_GPIO_Init+0x240>
 8001fda:	2306      	movs	r3, #6
 8001fdc:	e00a      	b.n	8001ff4 <HAL_GPIO_Init+0x240>
 8001fde:	2305      	movs	r3, #5
 8001fe0:	e008      	b.n	8001ff4 <HAL_GPIO_Init+0x240>
 8001fe2:	2304      	movs	r3, #4
 8001fe4:	e006      	b.n	8001ff4 <HAL_GPIO_Init+0x240>
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	e004      	b.n	8001ff4 <HAL_GPIO_Init+0x240>
 8001fea:	2302      	movs	r3, #2
 8001fec:	e002      	b.n	8001ff4 <HAL_GPIO_Init+0x240>
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e000      	b.n	8001ff4 <HAL_GPIO_Init+0x240>
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	69fa      	ldr	r2, [r7, #28]
 8001ff6:	f002 0203 	and.w	r2, r2, #3
 8001ffa:	0092      	lsls	r2, r2, #2
 8001ffc:	4093      	lsls	r3, r2
 8001ffe:	69ba      	ldr	r2, [r7, #24]
 8002000:	4313      	orrs	r3, r2
 8002002:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002004:	4935      	ldr	r1, [pc, #212]	; (80020dc <HAL_GPIO_Init+0x328>)
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	089b      	lsrs	r3, r3, #2
 800200a:	3302      	adds	r3, #2
 800200c:	69ba      	ldr	r2, [r7, #24]
 800200e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002012:	4b3d      	ldr	r3, [pc, #244]	; (8002108 <HAL_GPIO_Init+0x354>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	43db      	mvns	r3, r3
 800201c:	69ba      	ldr	r2, [r7, #24]
 800201e:	4013      	ands	r3, r2
 8002020:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d003      	beq.n	8002036 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800202e:	69ba      	ldr	r2, [r7, #24]
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	4313      	orrs	r3, r2
 8002034:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002036:	4a34      	ldr	r2, [pc, #208]	; (8002108 <HAL_GPIO_Init+0x354>)
 8002038:	69bb      	ldr	r3, [r7, #24]
 800203a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800203c:	4b32      	ldr	r3, [pc, #200]	; (8002108 <HAL_GPIO_Init+0x354>)
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	43db      	mvns	r3, r3
 8002046:	69ba      	ldr	r2, [r7, #24]
 8002048:	4013      	ands	r3, r2
 800204a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002054:	2b00      	cmp	r3, #0
 8002056:	d003      	beq.n	8002060 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002058:	69ba      	ldr	r2, [r7, #24]
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	4313      	orrs	r3, r2
 800205e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002060:	4a29      	ldr	r2, [pc, #164]	; (8002108 <HAL_GPIO_Init+0x354>)
 8002062:	69bb      	ldr	r3, [r7, #24]
 8002064:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002066:	4b28      	ldr	r3, [pc, #160]	; (8002108 <HAL_GPIO_Init+0x354>)
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	43db      	mvns	r3, r3
 8002070:	69ba      	ldr	r2, [r7, #24]
 8002072:	4013      	ands	r3, r2
 8002074:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d003      	beq.n	800208a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002082:	69ba      	ldr	r2, [r7, #24]
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	4313      	orrs	r3, r2
 8002088:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800208a:	4a1f      	ldr	r2, [pc, #124]	; (8002108 <HAL_GPIO_Init+0x354>)
 800208c:	69bb      	ldr	r3, [r7, #24]
 800208e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002090:	4b1d      	ldr	r3, [pc, #116]	; (8002108 <HAL_GPIO_Init+0x354>)
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	43db      	mvns	r3, r3
 800209a:	69ba      	ldr	r2, [r7, #24]
 800209c:	4013      	ands	r3, r2
 800209e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d003      	beq.n	80020b4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80020ac:	69ba      	ldr	r2, [r7, #24]
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020b4:	4a14      	ldr	r2, [pc, #80]	; (8002108 <HAL_GPIO_Init+0x354>)
 80020b6:	69bb      	ldr	r3, [r7, #24]
 80020b8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	3301      	adds	r3, #1
 80020be:	61fb      	str	r3, [r7, #28]
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	2b0f      	cmp	r3, #15
 80020c4:	f67f ae84 	bls.w	8001dd0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80020c8:	bf00      	nop
 80020ca:	bf00      	nop
 80020cc:	3724      	adds	r7, #36	; 0x24
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	40023800 	.word	0x40023800
 80020dc:	40013800 	.word	0x40013800
 80020e0:	40020000 	.word	0x40020000
 80020e4:	40020400 	.word	0x40020400
 80020e8:	40020800 	.word	0x40020800
 80020ec:	40020c00 	.word	0x40020c00
 80020f0:	40021000 	.word	0x40021000
 80020f4:	40021400 	.word	0x40021400
 80020f8:	40021800 	.word	0x40021800
 80020fc:	40021c00 	.word	0x40021c00
 8002100:	40022000 	.word	0x40022000
 8002104:	40022400 	.word	0x40022400
 8002108:	40013c00 	.word	0x40013c00

0800210c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	460b      	mov	r3, r1
 8002116:	807b      	strh	r3, [r7, #2]
 8002118:	4613      	mov	r3, r2
 800211a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800211c:	787b      	ldrb	r3, [r7, #1]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d003      	beq.n	800212a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002122:	887a      	ldrh	r2, [r7, #2]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002128:	e003      	b.n	8002132 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800212a:	887b      	ldrh	r3, [r7, #2]
 800212c:	041a      	lsls	r2, r3, #16
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	619a      	str	r2, [r3, #24]
}
 8002132:	bf00      	nop
 8002134:	370c      	adds	r7, #12
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
	...

08002140 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002146:	2300      	movs	r3, #0
 8002148:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800214a:	2300      	movs	r3, #0
 800214c:	603b      	str	r3, [r7, #0]
 800214e:	4b20      	ldr	r3, [pc, #128]	; (80021d0 <HAL_PWREx_EnableOverDrive+0x90>)
 8002150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002152:	4a1f      	ldr	r2, [pc, #124]	; (80021d0 <HAL_PWREx_EnableOverDrive+0x90>)
 8002154:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002158:	6413      	str	r3, [r2, #64]	; 0x40
 800215a:	4b1d      	ldr	r3, [pc, #116]	; (80021d0 <HAL_PWREx_EnableOverDrive+0x90>)
 800215c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002162:	603b      	str	r3, [r7, #0]
 8002164:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002166:	4b1b      	ldr	r3, [pc, #108]	; (80021d4 <HAL_PWREx_EnableOverDrive+0x94>)
 8002168:	2201      	movs	r2, #1
 800216a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800216c:	f7ff f8de 	bl	800132c <HAL_GetTick>
 8002170:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002172:	e009      	b.n	8002188 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002174:	f7ff f8da 	bl	800132c <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002182:	d901      	bls.n	8002188 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002184:	2303      	movs	r3, #3
 8002186:	e01f      	b.n	80021c8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002188:	4b13      	ldr	r3, [pc, #76]	; (80021d8 <HAL_PWREx_EnableOverDrive+0x98>)
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002190:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002194:	d1ee      	bne.n	8002174 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002196:	4b11      	ldr	r3, [pc, #68]	; (80021dc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002198:	2201      	movs	r2, #1
 800219a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800219c:	f7ff f8c6 	bl	800132c <HAL_GetTick>
 80021a0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80021a2:	e009      	b.n	80021b8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80021a4:	f7ff f8c2 	bl	800132c <HAL_GetTick>
 80021a8:	4602      	mov	r2, r0
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80021b2:	d901      	bls.n	80021b8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80021b4:	2303      	movs	r3, #3
 80021b6:	e007      	b.n	80021c8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80021b8:	4b07      	ldr	r3, [pc, #28]	; (80021d8 <HAL_PWREx_EnableOverDrive+0x98>)
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80021c4:	d1ee      	bne.n	80021a4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80021c6:	2300      	movs	r3, #0
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3708      	adds	r7, #8
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	40023800 	.word	0x40023800
 80021d4:	420e0040 	.word	0x420e0040
 80021d8:	40007000 	.word	0x40007000
 80021dc:	420e0044 	.word	0x420e0044

080021e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b086      	sub	sp, #24
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d101      	bne.n	80021f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e264      	b.n	80026bc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0301 	and.w	r3, r3, #1
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d075      	beq.n	80022ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80021fe:	4ba3      	ldr	r3, [pc, #652]	; (800248c <HAL_RCC_OscConfig+0x2ac>)
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	f003 030c 	and.w	r3, r3, #12
 8002206:	2b04      	cmp	r3, #4
 8002208:	d00c      	beq.n	8002224 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800220a:	4ba0      	ldr	r3, [pc, #640]	; (800248c <HAL_RCC_OscConfig+0x2ac>)
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002212:	2b08      	cmp	r3, #8
 8002214:	d112      	bne.n	800223c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002216:	4b9d      	ldr	r3, [pc, #628]	; (800248c <HAL_RCC_OscConfig+0x2ac>)
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800221e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002222:	d10b      	bne.n	800223c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002224:	4b99      	ldr	r3, [pc, #612]	; (800248c <HAL_RCC_OscConfig+0x2ac>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800222c:	2b00      	cmp	r3, #0
 800222e:	d05b      	beq.n	80022e8 <HAL_RCC_OscConfig+0x108>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d157      	bne.n	80022e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e23f      	b.n	80026bc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002244:	d106      	bne.n	8002254 <HAL_RCC_OscConfig+0x74>
 8002246:	4b91      	ldr	r3, [pc, #580]	; (800248c <HAL_RCC_OscConfig+0x2ac>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a90      	ldr	r2, [pc, #576]	; (800248c <HAL_RCC_OscConfig+0x2ac>)
 800224c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002250:	6013      	str	r3, [r2, #0]
 8002252:	e01d      	b.n	8002290 <HAL_RCC_OscConfig+0xb0>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800225c:	d10c      	bne.n	8002278 <HAL_RCC_OscConfig+0x98>
 800225e:	4b8b      	ldr	r3, [pc, #556]	; (800248c <HAL_RCC_OscConfig+0x2ac>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a8a      	ldr	r2, [pc, #552]	; (800248c <HAL_RCC_OscConfig+0x2ac>)
 8002264:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002268:	6013      	str	r3, [r2, #0]
 800226a:	4b88      	ldr	r3, [pc, #544]	; (800248c <HAL_RCC_OscConfig+0x2ac>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a87      	ldr	r2, [pc, #540]	; (800248c <HAL_RCC_OscConfig+0x2ac>)
 8002270:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002274:	6013      	str	r3, [r2, #0]
 8002276:	e00b      	b.n	8002290 <HAL_RCC_OscConfig+0xb0>
 8002278:	4b84      	ldr	r3, [pc, #528]	; (800248c <HAL_RCC_OscConfig+0x2ac>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a83      	ldr	r2, [pc, #524]	; (800248c <HAL_RCC_OscConfig+0x2ac>)
 800227e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002282:	6013      	str	r3, [r2, #0]
 8002284:	4b81      	ldr	r3, [pc, #516]	; (800248c <HAL_RCC_OscConfig+0x2ac>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a80      	ldr	r2, [pc, #512]	; (800248c <HAL_RCC_OscConfig+0x2ac>)
 800228a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800228e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d013      	beq.n	80022c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002298:	f7ff f848 	bl	800132c <HAL_GetTick>
 800229c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800229e:	e008      	b.n	80022b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022a0:	f7ff f844 	bl	800132c <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	2b64      	cmp	r3, #100	; 0x64
 80022ac:	d901      	bls.n	80022b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e204      	b.n	80026bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022b2:	4b76      	ldr	r3, [pc, #472]	; (800248c <HAL_RCC_OscConfig+0x2ac>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d0f0      	beq.n	80022a0 <HAL_RCC_OscConfig+0xc0>
 80022be:	e014      	b.n	80022ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c0:	f7ff f834 	bl	800132c <HAL_GetTick>
 80022c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022c6:	e008      	b.n	80022da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022c8:	f7ff f830 	bl	800132c <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	2b64      	cmp	r3, #100	; 0x64
 80022d4:	d901      	bls.n	80022da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e1f0      	b.n	80026bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022da:	4b6c      	ldr	r3, [pc, #432]	; (800248c <HAL_RCC_OscConfig+0x2ac>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d1f0      	bne.n	80022c8 <HAL_RCC_OscConfig+0xe8>
 80022e6:	e000      	b.n	80022ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0302 	and.w	r3, r3, #2
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d063      	beq.n	80023be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80022f6:	4b65      	ldr	r3, [pc, #404]	; (800248c <HAL_RCC_OscConfig+0x2ac>)
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	f003 030c 	and.w	r3, r3, #12
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d00b      	beq.n	800231a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002302:	4b62      	ldr	r3, [pc, #392]	; (800248c <HAL_RCC_OscConfig+0x2ac>)
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800230a:	2b08      	cmp	r3, #8
 800230c:	d11c      	bne.n	8002348 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800230e:	4b5f      	ldr	r3, [pc, #380]	; (800248c <HAL_RCC_OscConfig+0x2ac>)
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d116      	bne.n	8002348 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800231a:	4b5c      	ldr	r3, [pc, #368]	; (800248c <HAL_RCC_OscConfig+0x2ac>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0302 	and.w	r3, r3, #2
 8002322:	2b00      	cmp	r3, #0
 8002324:	d005      	beq.n	8002332 <HAL_RCC_OscConfig+0x152>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	68db      	ldr	r3, [r3, #12]
 800232a:	2b01      	cmp	r3, #1
 800232c:	d001      	beq.n	8002332 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e1c4      	b.n	80026bc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002332:	4b56      	ldr	r3, [pc, #344]	; (800248c <HAL_RCC_OscConfig+0x2ac>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	691b      	ldr	r3, [r3, #16]
 800233e:	00db      	lsls	r3, r3, #3
 8002340:	4952      	ldr	r1, [pc, #328]	; (800248c <HAL_RCC_OscConfig+0x2ac>)
 8002342:	4313      	orrs	r3, r2
 8002344:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002346:	e03a      	b.n	80023be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d020      	beq.n	8002392 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002350:	4b4f      	ldr	r3, [pc, #316]	; (8002490 <HAL_RCC_OscConfig+0x2b0>)
 8002352:	2201      	movs	r2, #1
 8002354:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002356:	f7fe ffe9 	bl	800132c <HAL_GetTick>
 800235a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800235c:	e008      	b.n	8002370 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800235e:	f7fe ffe5 	bl	800132c <HAL_GetTick>
 8002362:	4602      	mov	r2, r0
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	2b02      	cmp	r3, #2
 800236a:	d901      	bls.n	8002370 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800236c:	2303      	movs	r3, #3
 800236e:	e1a5      	b.n	80026bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002370:	4b46      	ldr	r3, [pc, #280]	; (800248c <HAL_RCC_OscConfig+0x2ac>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0302 	and.w	r3, r3, #2
 8002378:	2b00      	cmp	r3, #0
 800237a:	d0f0      	beq.n	800235e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800237c:	4b43      	ldr	r3, [pc, #268]	; (800248c <HAL_RCC_OscConfig+0x2ac>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	691b      	ldr	r3, [r3, #16]
 8002388:	00db      	lsls	r3, r3, #3
 800238a:	4940      	ldr	r1, [pc, #256]	; (800248c <HAL_RCC_OscConfig+0x2ac>)
 800238c:	4313      	orrs	r3, r2
 800238e:	600b      	str	r3, [r1, #0]
 8002390:	e015      	b.n	80023be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002392:	4b3f      	ldr	r3, [pc, #252]	; (8002490 <HAL_RCC_OscConfig+0x2b0>)
 8002394:	2200      	movs	r2, #0
 8002396:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002398:	f7fe ffc8 	bl	800132c <HAL_GetTick>
 800239c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800239e:	e008      	b.n	80023b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023a0:	f7fe ffc4 	bl	800132c <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d901      	bls.n	80023b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e184      	b.n	80026bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023b2:	4b36      	ldr	r3, [pc, #216]	; (800248c <HAL_RCC_OscConfig+0x2ac>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0302 	and.w	r3, r3, #2
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d1f0      	bne.n	80023a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0308 	and.w	r3, r3, #8
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d030      	beq.n	800242c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	695b      	ldr	r3, [r3, #20]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d016      	beq.n	8002400 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023d2:	4b30      	ldr	r3, [pc, #192]	; (8002494 <HAL_RCC_OscConfig+0x2b4>)
 80023d4:	2201      	movs	r2, #1
 80023d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023d8:	f7fe ffa8 	bl	800132c <HAL_GetTick>
 80023dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023de:	e008      	b.n	80023f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023e0:	f7fe ffa4 	bl	800132c <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d901      	bls.n	80023f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80023ee:	2303      	movs	r3, #3
 80023f0:	e164      	b.n	80026bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023f2:	4b26      	ldr	r3, [pc, #152]	; (800248c <HAL_RCC_OscConfig+0x2ac>)
 80023f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023f6:	f003 0302 	and.w	r3, r3, #2
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d0f0      	beq.n	80023e0 <HAL_RCC_OscConfig+0x200>
 80023fe:	e015      	b.n	800242c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002400:	4b24      	ldr	r3, [pc, #144]	; (8002494 <HAL_RCC_OscConfig+0x2b4>)
 8002402:	2200      	movs	r2, #0
 8002404:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002406:	f7fe ff91 	bl	800132c <HAL_GetTick>
 800240a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800240c:	e008      	b.n	8002420 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800240e:	f7fe ff8d 	bl	800132c <HAL_GetTick>
 8002412:	4602      	mov	r2, r0
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	2b02      	cmp	r3, #2
 800241a:	d901      	bls.n	8002420 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800241c:	2303      	movs	r3, #3
 800241e:	e14d      	b.n	80026bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002420:	4b1a      	ldr	r3, [pc, #104]	; (800248c <HAL_RCC_OscConfig+0x2ac>)
 8002422:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002424:	f003 0302 	and.w	r3, r3, #2
 8002428:	2b00      	cmp	r3, #0
 800242a:	d1f0      	bne.n	800240e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0304 	and.w	r3, r3, #4
 8002434:	2b00      	cmp	r3, #0
 8002436:	f000 80a0 	beq.w	800257a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800243a:	2300      	movs	r3, #0
 800243c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800243e:	4b13      	ldr	r3, [pc, #76]	; (800248c <HAL_RCC_OscConfig+0x2ac>)
 8002440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002442:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d10f      	bne.n	800246a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800244a:	2300      	movs	r3, #0
 800244c:	60bb      	str	r3, [r7, #8]
 800244e:	4b0f      	ldr	r3, [pc, #60]	; (800248c <HAL_RCC_OscConfig+0x2ac>)
 8002450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002452:	4a0e      	ldr	r2, [pc, #56]	; (800248c <HAL_RCC_OscConfig+0x2ac>)
 8002454:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002458:	6413      	str	r3, [r2, #64]	; 0x40
 800245a:	4b0c      	ldr	r3, [pc, #48]	; (800248c <HAL_RCC_OscConfig+0x2ac>)
 800245c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002462:	60bb      	str	r3, [r7, #8]
 8002464:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002466:	2301      	movs	r3, #1
 8002468:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800246a:	4b0b      	ldr	r3, [pc, #44]	; (8002498 <HAL_RCC_OscConfig+0x2b8>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002472:	2b00      	cmp	r3, #0
 8002474:	d121      	bne.n	80024ba <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002476:	4b08      	ldr	r3, [pc, #32]	; (8002498 <HAL_RCC_OscConfig+0x2b8>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a07      	ldr	r2, [pc, #28]	; (8002498 <HAL_RCC_OscConfig+0x2b8>)
 800247c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002480:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002482:	f7fe ff53 	bl	800132c <HAL_GetTick>
 8002486:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002488:	e011      	b.n	80024ae <HAL_RCC_OscConfig+0x2ce>
 800248a:	bf00      	nop
 800248c:	40023800 	.word	0x40023800
 8002490:	42470000 	.word	0x42470000
 8002494:	42470e80 	.word	0x42470e80
 8002498:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800249c:	f7fe ff46 	bl	800132c <HAL_GetTick>
 80024a0:	4602      	mov	r2, r0
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	d901      	bls.n	80024ae <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80024aa:	2303      	movs	r3, #3
 80024ac:	e106      	b.n	80026bc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024ae:	4b85      	ldr	r3, [pc, #532]	; (80026c4 <HAL_RCC_OscConfig+0x4e4>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d0f0      	beq.n	800249c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d106      	bne.n	80024d0 <HAL_RCC_OscConfig+0x2f0>
 80024c2:	4b81      	ldr	r3, [pc, #516]	; (80026c8 <HAL_RCC_OscConfig+0x4e8>)
 80024c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024c6:	4a80      	ldr	r2, [pc, #512]	; (80026c8 <HAL_RCC_OscConfig+0x4e8>)
 80024c8:	f043 0301 	orr.w	r3, r3, #1
 80024cc:	6713      	str	r3, [r2, #112]	; 0x70
 80024ce:	e01c      	b.n	800250a <HAL_RCC_OscConfig+0x32a>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	2b05      	cmp	r3, #5
 80024d6:	d10c      	bne.n	80024f2 <HAL_RCC_OscConfig+0x312>
 80024d8:	4b7b      	ldr	r3, [pc, #492]	; (80026c8 <HAL_RCC_OscConfig+0x4e8>)
 80024da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024dc:	4a7a      	ldr	r2, [pc, #488]	; (80026c8 <HAL_RCC_OscConfig+0x4e8>)
 80024de:	f043 0304 	orr.w	r3, r3, #4
 80024e2:	6713      	str	r3, [r2, #112]	; 0x70
 80024e4:	4b78      	ldr	r3, [pc, #480]	; (80026c8 <HAL_RCC_OscConfig+0x4e8>)
 80024e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024e8:	4a77      	ldr	r2, [pc, #476]	; (80026c8 <HAL_RCC_OscConfig+0x4e8>)
 80024ea:	f043 0301 	orr.w	r3, r3, #1
 80024ee:	6713      	str	r3, [r2, #112]	; 0x70
 80024f0:	e00b      	b.n	800250a <HAL_RCC_OscConfig+0x32a>
 80024f2:	4b75      	ldr	r3, [pc, #468]	; (80026c8 <HAL_RCC_OscConfig+0x4e8>)
 80024f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024f6:	4a74      	ldr	r2, [pc, #464]	; (80026c8 <HAL_RCC_OscConfig+0x4e8>)
 80024f8:	f023 0301 	bic.w	r3, r3, #1
 80024fc:	6713      	str	r3, [r2, #112]	; 0x70
 80024fe:	4b72      	ldr	r3, [pc, #456]	; (80026c8 <HAL_RCC_OscConfig+0x4e8>)
 8002500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002502:	4a71      	ldr	r2, [pc, #452]	; (80026c8 <HAL_RCC_OscConfig+0x4e8>)
 8002504:	f023 0304 	bic.w	r3, r3, #4
 8002508:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d015      	beq.n	800253e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002512:	f7fe ff0b 	bl	800132c <HAL_GetTick>
 8002516:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002518:	e00a      	b.n	8002530 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800251a:	f7fe ff07 	bl	800132c <HAL_GetTick>
 800251e:	4602      	mov	r2, r0
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	f241 3288 	movw	r2, #5000	; 0x1388
 8002528:	4293      	cmp	r3, r2
 800252a:	d901      	bls.n	8002530 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800252c:	2303      	movs	r3, #3
 800252e:	e0c5      	b.n	80026bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002530:	4b65      	ldr	r3, [pc, #404]	; (80026c8 <HAL_RCC_OscConfig+0x4e8>)
 8002532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002534:	f003 0302 	and.w	r3, r3, #2
 8002538:	2b00      	cmp	r3, #0
 800253a:	d0ee      	beq.n	800251a <HAL_RCC_OscConfig+0x33a>
 800253c:	e014      	b.n	8002568 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800253e:	f7fe fef5 	bl	800132c <HAL_GetTick>
 8002542:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002544:	e00a      	b.n	800255c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002546:	f7fe fef1 	bl	800132c <HAL_GetTick>
 800254a:	4602      	mov	r2, r0
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	1ad3      	subs	r3, r2, r3
 8002550:	f241 3288 	movw	r2, #5000	; 0x1388
 8002554:	4293      	cmp	r3, r2
 8002556:	d901      	bls.n	800255c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002558:	2303      	movs	r3, #3
 800255a:	e0af      	b.n	80026bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800255c:	4b5a      	ldr	r3, [pc, #360]	; (80026c8 <HAL_RCC_OscConfig+0x4e8>)
 800255e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002560:	f003 0302 	and.w	r3, r3, #2
 8002564:	2b00      	cmp	r3, #0
 8002566:	d1ee      	bne.n	8002546 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002568:	7dfb      	ldrb	r3, [r7, #23]
 800256a:	2b01      	cmp	r3, #1
 800256c:	d105      	bne.n	800257a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800256e:	4b56      	ldr	r3, [pc, #344]	; (80026c8 <HAL_RCC_OscConfig+0x4e8>)
 8002570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002572:	4a55      	ldr	r2, [pc, #340]	; (80026c8 <HAL_RCC_OscConfig+0x4e8>)
 8002574:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002578:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	699b      	ldr	r3, [r3, #24]
 800257e:	2b00      	cmp	r3, #0
 8002580:	f000 809b 	beq.w	80026ba <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002584:	4b50      	ldr	r3, [pc, #320]	; (80026c8 <HAL_RCC_OscConfig+0x4e8>)
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	f003 030c 	and.w	r3, r3, #12
 800258c:	2b08      	cmp	r3, #8
 800258e:	d05c      	beq.n	800264a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	699b      	ldr	r3, [r3, #24]
 8002594:	2b02      	cmp	r3, #2
 8002596:	d141      	bne.n	800261c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002598:	4b4c      	ldr	r3, [pc, #304]	; (80026cc <HAL_RCC_OscConfig+0x4ec>)
 800259a:	2200      	movs	r2, #0
 800259c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800259e:	f7fe fec5 	bl	800132c <HAL_GetTick>
 80025a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025a4:	e008      	b.n	80025b8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025a6:	f7fe fec1 	bl	800132c <HAL_GetTick>
 80025aa:	4602      	mov	r2, r0
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	1ad3      	subs	r3, r2, r3
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	d901      	bls.n	80025b8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80025b4:	2303      	movs	r3, #3
 80025b6:	e081      	b.n	80026bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025b8:	4b43      	ldr	r3, [pc, #268]	; (80026c8 <HAL_RCC_OscConfig+0x4e8>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d1f0      	bne.n	80025a6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	69da      	ldr	r2, [r3, #28]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6a1b      	ldr	r3, [r3, #32]
 80025cc:	431a      	orrs	r2, r3
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d2:	019b      	lsls	r3, r3, #6
 80025d4:	431a      	orrs	r2, r3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025da:	085b      	lsrs	r3, r3, #1
 80025dc:	3b01      	subs	r3, #1
 80025de:	041b      	lsls	r3, r3, #16
 80025e0:	431a      	orrs	r2, r3
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e6:	061b      	lsls	r3, r3, #24
 80025e8:	4937      	ldr	r1, [pc, #220]	; (80026c8 <HAL_RCC_OscConfig+0x4e8>)
 80025ea:	4313      	orrs	r3, r2
 80025ec:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025ee:	4b37      	ldr	r3, [pc, #220]	; (80026cc <HAL_RCC_OscConfig+0x4ec>)
 80025f0:	2201      	movs	r2, #1
 80025f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025f4:	f7fe fe9a 	bl	800132c <HAL_GetTick>
 80025f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025fa:	e008      	b.n	800260e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025fc:	f7fe fe96 	bl	800132c <HAL_GetTick>
 8002600:	4602      	mov	r2, r0
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	2b02      	cmp	r3, #2
 8002608:	d901      	bls.n	800260e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800260a:	2303      	movs	r3, #3
 800260c:	e056      	b.n	80026bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800260e:	4b2e      	ldr	r3, [pc, #184]	; (80026c8 <HAL_RCC_OscConfig+0x4e8>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d0f0      	beq.n	80025fc <HAL_RCC_OscConfig+0x41c>
 800261a:	e04e      	b.n	80026ba <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800261c:	4b2b      	ldr	r3, [pc, #172]	; (80026cc <HAL_RCC_OscConfig+0x4ec>)
 800261e:	2200      	movs	r2, #0
 8002620:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002622:	f7fe fe83 	bl	800132c <HAL_GetTick>
 8002626:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002628:	e008      	b.n	800263c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800262a:	f7fe fe7f 	bl	800132c <HAL_GetTick>
 800262e:	4602      	mov	r2, r0
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	2b02      	cmp	r3, #2
 8002636:	d901      	bls.n	800263c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002638:	2303      	movs	r3, #3
 800263a:	e03f      	b.n	80026bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800263c:	4b22      	ldr	r3, [pc, #136]	; (80026c8 <HAL_RCC_OscConfig+0x4e8>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002644:	2b00      	cmp	r3, #0
 8002646:	d1f0      	bne.n	800262a <HAL_RCC_OscConfig+0x44a>
 8002648:	e037      	b.n	80026ba <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	699b      	ldr	r3, [r3, #24]
 800264e:	2b01      	cmp	r3, #1
 8002650:	d101      	bne.n	8002656 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e032      	b.n	80026bc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002656:	4b1c      	ldr	r3, [pc, #112]	; (80026c8 <HAL_RCC_OscConfig+0x4e8>)
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	699b      	ldr	r3, [r3, #24]
 8002660:	2b01      	cmp	r3, #1
 8002662:	d028      	beq.n	80026b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800266e:	429a      	cmp	r2, r3
 8002670:	d121      	bne.n	80026b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800267c:	429a      	cmp	r2, r3
 800267e:	d11a      	bne.n	80026b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002680:	68fa      	ldr	r2, [r7, #12]
 8002682:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002686:	4013      	ands	r3, r2
 8002688:	687a      	ldr	r2, [r7, #4]
 800268a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800268c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800268e:	4293      	cmp	r3, r2
 8002690:	d111      	bne.n	80026b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800269c:	085b      	lsrs	r3, r3, #1
 800269e:	3b01      	subs	r3, #1
 80026a0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d107      	bne.n	80026b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d001      	beq.n	80026ba <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e000      	b.n	80026bc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80026ba:	2300      	movs	r3, #0
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3718      	adds	r7, #24
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	40007000 	.word	0x40007000
 80026c8:	40023800 	.word	0x40023800
 80026cc:	42470060 	.word	0x42470060

080026d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b084      	sub	sp, #16
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d101      	bne.n	80026e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e0cc      	b.n	800287e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026e4:	4b68      	ldr	r3, [pc, #416]	; (8002888 <HAL_RCC_ClockConfig+0x1b8>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 030f 	and.w	r3, r3, #15
 80026ec:	683a      	ldr	r2, [r7, #0]
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d90c      	bls.n	800270c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026f2:	4b65      	ldr	r3, [pc, #404]	; (8002888 <HAL_RCC_ClockConfig+0x1b8>)
 80026f4:	683a      	ldr	r2, [r7, #0]
 80026f6:	b2d2      	uxtb	r2, r2
 80026f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026fa:	4b63      	ldr	r3, [pc, #396]	; (8002888 <HAL_RCC_ClockConfig+0x1b8>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 030f 	and.w	r3, r3, #15
 8002702:	683a      	ldr	r2, [r7, #0]
 8002704:	429a      	cmp	r2, r3
 8002706:	d001      	beq.n	800270c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e0b8      	b.n	800287e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0302 	and.w	r3, r3, #2
 8002714:	2b00      	cmp	r3, #0
 8002716:	d020      	beq.n	800275a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0304 	and.w	r3, r3, #4
 8002720:	2b00      	cmp	r3, #0
 8002722:	d005      	beq.n	8002730 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002724:	4b59      	ldr	r3, [pc, #356]	; (800288c <HAL_RCC_ClockConfig+0x1bc>)
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	4a58      	ldr	r2, [pc, #352]	; (800288c <HAL_RCC_ClockConfig+0x1bc>)
 800272a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800272e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 0308 	and.w	r3, r3, #8
 8002738:	2b00      	cmp	r3, #0
 800273a:	d005      	beq.n	8002748 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800273c:	4b53      	ldr	r3, [pc, #332]	; (800288c <HAL_RCC_ClockConfig+0x1bc>)
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	4a52      	ldr	r2, [pc, #328]	; (800288c <HAL_RCC_ClockConfig+0x1bc>)
 8002742:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002746:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002748:	4b50      	ldr	r3, [pc, #320]	; (800288c <HAL_RCC_ClockConfig+0x1bc>)
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	494d      	ldr	r1, [pc, #308]	; (800288c <HAL_RCC_ClockConfig+0x1bc>)
 8002756:	4313      	orrs	r3, r2
 8002758:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0301 	and.w	r3, r3, #1
 8002762:	2b00      	cmp	r3, #0
 8002764:	d044      	beq.n	80027f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	2b01      	cmp	r3, #1
 800276c:	d107      	bne.n	800277e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800276e:	4b47      	ldr	r3, [pc, #284]	; (800288c <HAL_RCC_ClockConfig+0x1bc>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d119      	bne.n	80027ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e07f      	b.n	800287e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	2b02      	cmp	r3, #2
 8002784:	d003      	beq.n	800278e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800278a:	2b03      	cmp	r3, #3
 800278c:	d107      	bne.n	800279e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800278e:	4b3f      	ldr	r3, [pc, #252]	; (800288c <HAL_RCC_ClockConfig+0x1bc>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d109      	bne.n	80027ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e06f      	b.n	800287e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800279e:	4b3b      	ldr	r3, [pc, #236]	; (800288c <HAL_RCC_ClockConfig+0x1bc>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0302 	and.w	r3, r3, #2
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d101      	bne.n	80027ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e067      	b.n	800287e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027ae:	4b37      	ldr	r3, [pc, #220]	; (800288c <HAL_RCC_ClockConfig+0x1bc>)
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	f023 0203 	bic.w	r2, r3, #3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	4934      	ldr	r1, [pc, #208]	; (800288c <HAL_RCC_ClockConfig+0x1bc>)
 80027bc:	4313      	orrs	r3, r2
 80027be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027c0:	f7fe fdb4 	bl	800132c <HAL_GetTick>
 80027c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027c6:	e00a      	b.n	80027de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027c8:	f7fe fdb0 	bl	800132c <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d901      	bls.n	80027de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e04f      	b.n	800287e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027de:	4b2b      	ldr	r3, [pc, #172]	; (800288c <HAL_RCC_ClockConfig+0x1bc>)
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	f003 020c 	and.w	r2, r3, #12
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d1eb      	bne.n	80027c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027f0:	4b25      	ldr	r3, [pc, #148]	; (8002888 <HAL_RCC_ClockConfig+0x1b8>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 030f 	and.w	r3, r3, #15
 80027f8:	683a      	ldr	r2, [r7, #0]
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d20c      	bcs.n	8002818 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027fe:	4b22      	ldr	r3, [pc, #136]	; (8002888 <HAL_RCC_ClockConfig+0x1b8>)
 8002800:	683a      	ldr	r2, [r7, #0]
 8002802:	b2d2      	uxtb	r2, r2
 8002804:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002806:	4b20      	ldr	r3, [pc, #128]	; (8002888 <HAL_RCC_ClockConfig+0x1b8>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 030f 	and.w	r3, r3, #15
 800280e:	683a      	ldr	r2, [r7, #0]
 8002810:	429a      	cmp	r2, r3
 8002812:	d001      	beq.n	8002818 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e032      	b.n	800287e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0304 	and.w	r3, r3, #4
 8002820:	2b00      	cmp	r3, #0
 8002822:	d008      	beq.n	8002836 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002824:	4b19      	ldr	r3, [pc, #100]	; (800288c <HAL_RCC_ClockConfig+0x1bc>)
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	4916      	ldr	r1, [pc, #88]	; (800288c <HAL_RCC_ClockConfig+0x1bc>)
 8002832:	4313      	orrs	r3, r2
 8002834:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 0308 	and.w	r3, r3, #8
 800283e:	2b00      	cmp	r3, #0
 8002840:	d009      	beq.n	8002856 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002842:	4b12      	ldr	r3, [pc, #72]	; (800288c <HAL_RCC_ClockConfig+0x1bc>)
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	691b      	ldr	r3, [r3, #16]
 800284e:	00db      	lsls	r3, r3, #3
 8002850:	490e      	ldr	r1, [pc, #56]	; (800288c <HAL_RCC_ClockConfig+0x1bc>)
 8002852:	4313      	orrs	r3, r2
 8002854:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002856:	f000 f821 	bl	800289c <HAL_RCC_GetSysClockFreq>
 800285a:	4602      	mov	r2, r0
 800285c:	4b0b      	ldr	r3, [pc, #44]	; (800288c <HAL_RCC_ClockConfig+0x1bc>)
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	091b      	lsrs	r3, r3, #4
 8002862:	f003 030f 	and.w	r3, r3, #15
 8002866:	490a      	ldr	r1, [pc, #40]	; (8002890 <HAL_RCC_ClockConfig+0x1c0>)
 8002868:	5ccb      	ldrb	r3, [r1, r3]
 800286a:	fa22 f303 	lsr.w	r3, r2, r3
 800286e:	4a09      	ldr	r2, [pc, #36]	; (8002894 <HAL_RCC_ClockConfig+0x1c4>)
 8002870:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002872:	4b09      	ldr	r3, [pc, #36]	; (8002898 <HAL_RCC_ClockConfig+0x1c8>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4618      	mov	r0, r3
 8002878:	f7fe fd14 	bl	80012a4 <HAL_InitTick>

  return HAL_OK;
 800287c:	2300      	movs	r3, #0
}
 800287e:	4618      	mov	r0, r3
 8002880:	3710      	adds	r7, #16
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	40023c00 	.word	0x40023c00
 800288c:	40023800 	.word	0x40023800
 8002890:	08006398 	.word	0x08006398
 8002894:	20000000 	.word	0x20000000
 8002898:	20000004 	.word	0x20000004

0800289c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800289c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80028a0:	b084      	sub	sp, #16
 80028a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80028a4:	2300      	movs	r3, #0
 80028a6:	607b      	str	r3, [r7, #4]
 80028a8:	2300      	movs	r3, #0
 80028aa:	60fb      	str	r3, [r7, #12]
 80028ac:	2300      	movs	r3, #0
 80028ae:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80028b0:	2300      	movs	r3, #0
 80028b2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028b4:	4b67      	ldr	r3, [pc, #412]	; (8002a54 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	f003 030c 	and.w	r3, r3, #12
 80028bc:	2b08      	cmp	r3, #8
 80028be:	d00d      	beq.n	80028dc <HAL_RCC_GetSysClockFreq+0x40>
 80028c0:	2b08      	cmp	r3, #8
 80028c2:	f200 80bd 	bhi.w	8002a40 <HAL_RCC_GetSysClockFreq+0x1a4>
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d002      	beq.n	80028d0 <HAL_RCC_GetSysClockFreq+0x34>
 80028ca:	2b04      	cmp	r3, #4
 80028cc:	d003      	beq.n	80028d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80028ce:	e0b7      	b.n	8002a40 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80028d0:	4b61      	ldr	r3, [pc, #388]	; (8002a58 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80028d2:	60bb      	str	r3, [r7, #8]
       break;
 80028d4:	e0b7      	b.n	8002a46 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80028d6:	4b61      	ldr	r3, [pc, #388]	; (8002a5c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80028d8:	60bb      	str	r3, [r7, #8]
      break;
 80028da:	e0b4      	b.n	8002a46 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028dc:	4b5d      	ldr	r3, [pc, #372]	; (8002a54 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80028e4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80028e6:	4b5b      	ldr	r3, [pc, #364]	; (8002a54 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d04d      	beq.n	800298e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028f2:	4b58      	ldr	r3, [pc, #352]	; (8002a54 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	099b      	lsrs	r3, r3, #6
 80028f8:	461a      	mov	r2, r3
 80028fa:	f04f 0300 	mov.w	r3, #0
 80028fe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002902:	f04f 0100 	mov.w	r1, #0
 8002906:	ea02 0800 	and.w	r8, r2, r0
 800290a:	ea03 0901 	and.w	r9, r3, r1
 800290e:	4640      	mov	r0, r8
 8002910:	4649      	mov	r1, r9
 8002912:	f04f 0200 	mov.w	r2, #0
 8002916:	f04f 0300 	mov.w	r3, #0
 800291a:	014b      	lsls	r3, r1, #5
 800291c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002920:	0142      	lsls	r2, r0, #5
 8002922:	4610      	mov	r0, r2
 8002924:	4619      	mov	r1, r3
 8002926:	ebb0 0008 	subs.w	r0, r0, r8
 800292a:	eb61 0109 	sbc.w	r1, r1, r9
 800292e:	f04f 0200 	mov.w	r2, #0
 8002932:	f04f 0300 	mov.w	r3, #0
 8002936:	018b      	lsls	r3, r1, #6
 8002938:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800293c:	0182      	lsls	r2, r0, #6
 800293e:	1a12      	subs	r2, r2, r0
 8002940:	eb63 0301 	sbc.w	r3, r3, r1
 8002944:	f04f 0000 	mov.w	r0, #0
 8002948:	f04f 0100 	mov.w	r1, #0
 800294c:	00d9      	lsls	r1, r3, #3
 800294e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002952:	00d0      	lsls	r0, r2, #3
 8002954:	4602      	mov	r2, r0
 8002956:	460b      	mov	r3, r1
 8002958:	eb12 0208 	adds.w	r2, r2, r8
 800295c:	eb43 0309 	adc.w	r3, r3, r9
 8002960:	f04f 0000 	mov.w	r0, #0
 8002964:	f04f 0100 	mov.w	r1, #0
 8002968:	0259      	lsls	r1, r3, #9
 800296a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800296e:	0250      	lsls	r0, r2, #9
 8002970:	4602      	mov	r2, r0
 8002972:	460b      	mov	r3, r1
 8002974:	4610      	mov	r0, r2
 8002976:	4619      	mov	r1, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	461a      	mov	r2, r3
 800297c:	f04f 0300 	mov.w	r3, #0
 8002980:	f7fd fc86 	bl	8000290 <__aeabi_uldivmod>
 8002984:	4602      	mov	r2, r0
 8002986:	460b      	mov	r3, r1
 8002988:	4613      	mov	r3, r2
 800298a:	60fb      	str	r3, [r7, #12]
 800298c:	e04a      	b.n	8002a24 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800298e:	4b31      	ldr	r3, [pc, #196]	; (8002a54 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	099b      	lsrs	r3, r3, #6
 8002994:	461a      	mov	r2, r3
 8002996:	f04f 0300 	mov.w	r3, #0
 800299a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800299e:	f04f 0100 	mov.w	r1, #0
 80029a2:	ea02 0400 	and.w	r4, r2, r0
 80029a6:	ea03 0501 	and.w	r5, r3, r1
 80029aa:	4620      	mov	r0, r4
 80029ac:	4629      	mov	r1, r5
 80029ae:	f04f 0200 	mov.w	r2, #0
 80029b2:	f04f 0300 	mov.w	r3, #0
 80029b6:	014b      	lsls	r3, r1, #5
 80029b8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80029bc:	0142      	lsls	r2, r0, #5
 80029be:	4610      	mov	r0, r2
 80029c0:	4619      	mov	r1, r3
 80029c2:	1b00      	subs	r0, r0, r4
 80029c4:	eb61 0105 	sbc.w	r1, r1, r5
 80029c8:	f04f 0200 	mov.w	r2, #0
 80029cc:	f04f 0300 	mov.w	r3, #0
 80029d0:	018b      	lsls	r3, r1, #6
 80029d2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80029d6:	0182      	lsls	r2, r0, #6
 80029d8:	1a12      	subs	r2, r2, r0
 80029da:	eb63 0301 	sbc.w	r3, r3, r1
 80029de:	f04f 0000 	mov.w	r0, #0
 80029e2:	f04f 0100 	mov.w	r1, #0
 80029e6:	00d9      	lsls	r1, r3, #3
 80029e8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80029ec:	00d0      	lsls	r0, r2, #3
 80029ee:	4602      	mov	r2, r0
 80029f0:	460b      	mov	r3, r1
 80029f2:	1912      	adds	r2, r2, r4
 80029f4:	eb45 0303 	adc.w	r3, r5, r3
 80029f8:	f04f 0000 	mov.w	r0, #0
 80029fc:	f04f 0100 	mov.w	r1, #0
 8002a00:	0299      	lsls	r1, r3, #10
 8002a02:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002a06:	0290      	lsls	r0, r2, #10
 8002a08:	4602      	mov	r2, r0
 8002a0a:	460b      	mov	r3, r1
 8002a0c:	4610      	mov	r0, r2
 8002a0e:	4619      	mov	r1, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	461a      	mov	r2, r3
 8002a14:	f04f 0300 	mov.w	r3, #0
 8002a18:	f7fd fc3a 	bl	8000290 <__aeabi_uldivmod>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	460b      	mov	r3, r1
 8002a20:	4613      	mov	r3, r2
 8002a22:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a24:	4b0b      	ldr	r3, [pc, #44]	; (8002a54 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	0c1b      	lsrs	r3, r3, #16
 8002a2a:	f003 0303 	and.w	r3, r3, #3
 8002a2e:	3301      	adds	r3, #1
 8002a30:	005b      	lsls	r3, r3, #1
 8002a32:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002a34:	68fa      	ldr	r2, [r7, #12]
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a3c:	60bb      	str	r3, [r7, #8]
      break;
 8002a3e:	e002      	b.n	8002a46 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a40:	4b05      	ldr	r3, [pc, #20]	; (8002a58 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002a42:	60bb      	str	r3, [r7, #8]
      break;
 8002a44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a46:	68bb      	ldr	r3, [r7, #8]
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3710      	adds	r7, #16
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002a52:	bf00      	nop
 8002a54:	40023800 	.word	0x40023800
 8002a58:	00f42400 	.word	0x00f42400
 8002a5c:	007a1200 	.word	0x007a1200

08002a60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a60:	b480      	push	{r7}
 8002a62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a64:	4b03      	ldr	r3, [pc, #12]	; (8002a74 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a66:	681b      	ldr	r3, [r3, #0]
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr
 8002a72:	bf00      	nop
 8002a74:	20000000 	.word	0x20000000

08002a78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002a7c:	f7ff fff0 	bl	8002a60 <HAL_RCC_GetHCLKFreq>
 8002a80:	4602      	mov	r2, r0
 8002a82:	4b05      	ldr	r3, [pc, #20]	; (8002a98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	0a9b      	lsrs	r3, r3, #10
 8002a88:	f003 0307 	and.w	r3, r3, #7
 8002a8c:	4903      	ldr	r1, [pc, #12]	; (8002a9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a8e:	5ccb      	ldrb	r3, [r1, r3]
 8002a90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	40023800 	.word	0x40023800
 8002a9c:	080063a8 	.word	0x080063a8

08002aa0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002aa4:	f7ff ffdc 	bl	8002a60 <HAL_RCC_GetHCLKFreq>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	4b05      	ldr	r3, [pc, #20]	; (8002ac0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	0b5b      	lsrs	r3, r3, #13
 8002ab0:	f003 0307 	and.w	r3, r3, #7
 8002ab4:	4903      	ldr	r1, [pc, #12]	; (8002ac4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ab6:	5ccb      	ldrb	r3, [r1, r3]
 8002ab8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	40023800 	.word	0x40023800
 8002ac4:	080063a8 	.word	0x080063a8

08002ac8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b082      	sub	sp, #8
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d101      	bne.n	8002ada <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e041      	b.n	8002b5e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d106      	bne.n	8002af4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f7fe fa30 	bl	8000f54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2202      	movs	r2, #2
 8002af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	3304      	adds	r3, #4
 8002b04:	4619      	mov	r1, r3
 8002b06:	4610      	mov	r0, r2
 8002b08:	f000 ffe2 	bl	8003ad0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2201      	movs	r2, #1
 8002b18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2201      	movs	r2, #1
 8002b38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2201      	movs	r2, #1
 8002b48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2201      	movs	r2, #1
 8002b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b5c:	2300      	movs	r3, #0
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3708      	adds	r7, #8
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
	...

08002b68 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b085      	sub	sp, #20
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d001      	beq.n	8002b80 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e04e      	b.n	8002c1e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2202      	movs	r2, #2
 8002b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	68da      	ldr	r2, [r3, #12]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f042 0201 	orr.w	r2, r2, #1
 8002b96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a23      	ldr	r2, [pc, #140]	; (8002c2c <HAL_TIM_Base_Start_IT+0xc4>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d022      	beq.n	8002be8 <HAL_TIM_Base_Start_IT+0x80>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002baa:	d01d      	beq.n	8002be8 <HAL_TIM_Base_Start_IT+0x80>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a1f      	ldr	r2, [pc, #124]	; (8002c30 <HAL_TIM_Base_Start_IT+0xc8>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d018      	beq.n	8002be8 <HAL_TIM_Base_Start_IT+0x80>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a1e      	ldr	r2, [pc, #120]	; (8002c34 <HAL_TIM_Base_Start_IT+0xcc>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d013      	beq.n	8002be8 <HAL_TIM_Base_Start_IT+0x80>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a1c      	ldr	r2, [pc, #112]	; (8002c38 <HAL_TIM_Base_Start_IT+0xd0>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d00e      	beq.n	8002be8 <HAL_TIM_Base_Start_IT+0x80>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a1b      	ldr	r2, [pc, #108]	; (8002c3c <HAL_TIM_Base_Start_IT+0xd4>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d009      	beq.n	8002be8 <HAL_TIM_Base_Start_IT+0x80>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a19      	ldr	r2, [pc, #100]	; (8002c40 <HAL_TIM_Base_Start_IT+0xd8>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d004      	beq.n	8002be8 <HAL_TIM_Base_Start_IT+0x80>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a18      	ldr	r2, [pc, #96]	; (8002c44 <HAL_TIM_Base_Start_IT+0xdc>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d111      	bne.n	8002c0c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	f003 0307 	and.w	r3, r3, #7
 8002bf2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2b06      	cmp	r3, #6
 8002bf8:	d010      	beq.n	8002c1c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f042 0201 	orr.w	r2, r2, #1
 8002c08:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c0a:	e007      	b.n	8002c1c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f042 0201 	orr.w	r2, r2, #1
 8002c1a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c1c:	2300      	movs	r3, #0
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3714      	adds	r7, #20
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr
 8002c2a:	bf00      	nop
 8002c2c:	40010000 	.word	0x40010000
 8002c30:	40000400 	.word	0x40000400
 8002c34:	40000800 	.word	0x40000800
 8002c38:	40000c00 	.word	0x40000c00
 8002c3c:	40010400 	.word	0x40010400
 8002c40:	40014000 	.word	0x40014000
 8002c44:	40001800 	.word	0x40001800

08002c48 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b082      	sub	sp, #8
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d101      	bne.n	8002c5a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e041      	b.n	8002cde <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d106      	bne.n	8002c74 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f000 f839 	bl	8002ce6 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2202      	movs	r2, #2
 8002c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	3304      	adds	r3, #4
 8002c84:	4619      	mov	r1, r3
 8002c86:	4610      	mov	r0, r2
 8002c88:	f000 ff22 	bl	8003ad0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2201      	movs	r2, #1
 8002c98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002cdc:	2300      	movs	r3, #0
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3708      	adds	r7, #8
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}

08002ce6 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8002ce6:	b480      	push	{r7}
 8002ce8:	b083      	sub	sp, #12
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8002cee:	bf00      	nop
 8002cf0:	370c      	adds	r7, #12
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr
	...

08002cfc <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b084      	sub	sp, #16
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d06:	2300      	movs	r3, #0
 8002d08:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d109      	bne.n	8002d24 <HAL_TIM_OC_Start_IT+0x28>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	bf14      	ite	ne
 8002d1c:	2301      	movne	r3, #1
 8002d1e:	2300      	moveq	r3, #0
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	e022      	b.n	8002d6a <HAL_TIM_OC_Start_IT+0x6e>
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	2b04      	cmp	r3, #4
 8002d28:	d109      	bne.n	8002d3e <HAL_TIM_OC_Start_IT+0x42>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	bf14      	ite	ne
 8002d36:	2301      	movne	r3, #1
 8002d38:	2300      	moveq	r3, #0
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	e015      	b.n	8002d6a <HAL_TIM_OC_Start_IT+0x6e>
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	2b08      	cmp	r3, #8
 8002d42:	d109      	bne.n	8002d58 <HAL_TIM_OC_Start_IT+0x5c>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	bf14      	ite	ne
 8002d50:	2301      	movne	r3, #1
 8002d52:	2300      	moveq	r3, #0
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	e008      	b.n	8002d6a <HAL_TIM_OC_Start_IT+0x6e>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	bf14      	ite	ne
 8002d64:	2301      	movne	r3, #1
 8002d66:	2300      	moveq	r3, #0
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d001      	beq.n	8002d72 <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e0c7      	b.n	8002f02 <HAL_TIM_OC_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d104      	bne.n	8002d82 <HAL_TIM_OC_Start_IT+0x86>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2202      	movs	r2, #2
 8002d7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d80:	e013      	b.n	8002daa <HAL_TIM_OC_Start_IT+0xae>
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	2b04      	cmp	r3, #4
 8002d86:	d104      	bne.n	8002d92 <HAL_TIM_OC_Start_IT+0x96>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2202      	movs	r2, #2
 8002d8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d90:	e00b      	b.n	8002daa <HAL_TIM_OC_Start_IT+0xae>
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	2b08      	cmp	r3, #8
 8002d96:	d104      	bne.n	8002da2 <HAL_TIM_OC_Start_IT+0xa6>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2202      	movs	r2, #2
 8002d9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002da0:	e003      	b.n	8002daa <HAL_TIM_OC_Start_IT+0xae>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2202      	movs	r2, #2
 8002da6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	2b0c      	cmp	r3, #12
 8002dae:	d841      	bhi.n	8002e34 <HAL_TIM_OC_Start_IT+0x138>
 8002db0:	a201      	add	r2, pc, #4	; (adr r2, 8002db8 <HAL_TIM_OC_Start_IT+0xbc>)
 8002db2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002db6:	bf00      	nop
 8002db8:	08002ded 	.word	0x08002ded
 8002dbc:	08002e35 	.word	0x08002e35
 8002dc0:	08002e35 	.word	0x08002e35
 8002dc4:	08002e35 	.word	0x08002e35
 8002dc8:	08002dff 	.word	0x08002dff
 8002dcc:	08002e35 	.word	0x08002e35
 8002dd0:	08002e35 	.word	0x08002e35
 8002dd4:	08002e35 	.word	0x08002e35
 8002dd8:	08002e11 	.word	0x08002e11
 8002ddc:	08002e35 	.word	0x08002e35
 8002de0:	08002e35 	.word	0x08002e35
 8002de4:	08002e35 	.word	0x08002e35
 8002de8:	08002e23 	.word	0x08002e23
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	68da      	ldr	r2, [r3, #12]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f042 0202 	orr.w	r2, r2, #2
 8002dfa:	60da      	str	r2, [r3, #12]
      break;
 8002dfc:	e01d      	b.n	8002e3a <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	68da      	ldr	r2, [r3, #12]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f042 0204 	orr.w	r2, r2, #4
 8002e0c:	60da      	str	r2, [r3, #12]
      break;
 8002e0e:	e014      	b.n	8002e3a <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	68da      	ldr	r2, [r3, #12]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f042 0208 	orr.w	r2, r2, #8
 8002e1e:	60da      	str	r2, [r3, #12]
      break;
 8002e20:	e00b      	b.n	8002e3a <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	68da      	ldr	r2, [r3, #12]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f042 0210 	orr.w	r2, r2, #16
 8002e30:	60da      	str	r2, [r3, #12]
      break;
 8002e32:	e002      	b.n	8002e3a <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	73fb      	strb	r3, [r7, #15]
      break;
 8002e38:	bf00      	nop
  }

  if (status == HAL_OK)
 8002e3a:	7bfb      	ldrb	r3, [r7, #15]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d15f      	bne.n	8002f00 <HAL_TIM_OC_Start_IT+0x204>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	2201      	movs	r2, #1
 8002e46:	6839      	ldr	r1, [r7, #0]
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f001 fa55 	bl	80042f8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a2e      	ldr	r2, [pc, #184]	; (8002f0c <HAL_TIM_OC_Start_IT+0x210>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d004      	beq.n	8002e62 <HAL_TIM_OC_Start_IT+0x166>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a2c      	ldr	r2, [pc, #176]	; (8002f10 <HAL_TIM_OC_Start_IT+0x214>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d101      	bne.n	8002e66 <HAL_TIM_OC_Start_IT+0x16a>
 8002e62:	2301      	movs	r3, #1
 8002e64:	e000      	b.n	8002e68 <HAL_TIM_OC_Start_IT+0x16c>
 8002e66:	2300      	movs	r3, #0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d007      	beq.n	8002e7c <HAL_TIM_OC_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e7a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a22      	ldr	r2, [pc, #136]	; (8002f0c <HAL_TIM_OC_Start_IT+0x210>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d022      	beq.n	8002ecc <HAL_TIM_OC_Start_IT+0x1d0>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e8e:	d01d      	beq.n	8002ecc <HAL_TIM_OC_Start_IT+0x1d0>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a1f      	ldr	r2, [pc, #124]	; (8002f14 <HAL_TIM_OC_Start_IT+0x218>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d018      	beq.n	8002ecc <HAL_TIM_OC_Start_IT+0x1d0>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a1e      	ldr	r2, [pc, #120]	; (8002f18 <HAL_TIM_OC_Start_IT+0x21c>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d013      	beq.n	8002ecc <HAL_TIM_OC_Start_IT+0x1d0>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a1c      	ldr	r2, [pc, #112]	; (8002f1c <HAL_TIM_OC_Start_IT+0x220>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d00e      	beq.n	8002ecc <HAL_TIM_OC_Start_IT+0x1d0>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a17      	ldr	r2, [pc, #92]	; (8002f10 <HAL_TIM_OC_Start_IT+0x214>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d009      	beq.n	8002ecc <HAL_TIM_OC_Start_IT+0x1d0>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a18      	ldr	r2, [pc, #96]	; (8002f20 <HAL_TIM_OC_Start_IT+0x224>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d004      	beq.n	8002ecc <HAL_TIM_OC_Start_IT+0x1d0>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a17      	ldr	r2, [pc, #92]	; (8002f24 <HAL_TIM_OC_Start_IT+0x228>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d111      	bne.n	8002ef0 <HAL_TIM_OC_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	f003 0307 	and.w	r3, r3, #7
 8002ed6:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	2b06      	cmp	r3, #6
 8002edc:	d010      	beq.n	8002f00 <HAL_TIM_OC_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f042 0201 	orr.w	r2, r2, #1
 8002eec:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002eee:	e007      	b.n	8002f00 <HAL_TIM_OC_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f042 0201 	orr.w	r2, r2, #1
 8002efe:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002f00:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3710      	adds	r7, #16
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	40010000 	.word	0x40010000
 8002f10:	40010400 	.word	0x40010400
 8002f14:	40000400 	.word	0x40000400
 8002f18:	40000800 	.word	0x40000800
 8002f1c:	40000c00 	.word	0x40000c00
 8002f20:	40014000 	.word	0x40014000
 8002f24:	40001800 	.word	0x40001800

08002f28 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d101      	bne.n	8002f3a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e041      	b.n	8002fbe <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d106      	bne.n	8002f54 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f000 f839 	bl	8002fc6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2202      	movs	r2, #2
 8002f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	3304      	adds	r3, #4
 8002f64:	4619      	mov	r1, r3
 8002f66:	4610      	mov	r0, r2
 8002f68:	f000 fdb2 	bl	8003ad0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2201      	movs	r2, #1
 8002f78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2201      	movs	r2, #1
 8002f88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2201      	movs	r2, #1
 8002f98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002fbc:	2300      	movs	r3, #0
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3708      	adds	r7, #8
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}

08002fc6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002fc6:	b480      	push	{r7}
 8002fc8:	b083      	sub	sp, #12
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002fce:	bf00      	nop
 8002fd0:	370c      	adds	r7, #12
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr
	...

08002fdc <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b086      	sub	sp, #24
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	60f8      	str	r0, [r7, #12]
 8002fe4:	60b9      	str	r1, [r7, #8]
 8002fe6:	607a      	str	r2, [r7, #4]
 8002fe8:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8002fea:	2300      	movs	r3, #0
 8002fec:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d104      	bne.n	8002ffe <HAL_TIM_IC_Start_DMA+0x22>
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	e013      	b.n	8003026 <HAL_TIM_IC_Start_DMA+0x4a>
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	2b04      	cmp	r3, #4
 8003002:	d104      	bne.n	800300e <HAL_TIM_IC_Start_DMA+0x32>
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800300a:	b2db      	uxtb	r3, r3
 800300c:	e00b      	b.n	8003026 <HAL_TIM_IC_Start_DMA+0x4a>
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	2b08      	cmp	r3, #8
 8003012:	d104      	bne.n	800301e <HAL_TIM_IC_Start_DMA+0x42>
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800301a:	b2db      	uxtb	r3, r3
 800301c:	e003      	b.n	8003026 <HAL_TIM_IC_Start_DMA+0x4a>
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003024:	b2db      	uxtb	r3, r3
 8003026:	75bb      	strb	r3, [r7, #22]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d104      	bne.n	8003038 <HAL_TIM_IC_Start_DMA+0x5c>
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003034:	b2db      	uxtb	r3, r3
 8003036:	e013      	b.n	8003060 <HAL_TIM_IC_Start_DMA+0x84>
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	2b04      	cmp	r3, #4
 800303c:	d104      	bne.n	8003048 <HAL_TIM_IC_Start_DMA+0x6c>
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003044:	b2db      	uxtb	r3, r3
 8003046:	e00b      	b.n	8003060 <HAL_TIM_IC_Start_DMA+0x84>
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	2b08      	cmp	r3, #8
 800304c:	d104      	bne.n	8003058 <HAL_TIM_IC_Start_DMA+0x7c>
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003054:	b2db      	uxtb	r3, r3
 8003056:	e003      	b.n	8003060 <HAL_TIM_IC_Start_DMA+0x84>
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800305e:	b2db      	uxtb	r3, r3
 8003060:	757b      	strb	r3, [r7, #21]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 8003062:	7dbb      	ldrb	r3, [r7, #22]
 8003064:	2b02      	cmp	r3, #2
 8003066:	d002      	beq.n	800306e <HAL_TIM_IC_Start_DMA+0x92>
      || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 8003068:	7d7b      	ldrb	r3, [r7, #21]
 800306a:	2b02      	cmp	r3, #2
 800306c:	d101      	bne.n	8003072 <HAL_TIM_IC_Start_DMA+0x96>
  {
    return HAL_BUSY;
 800306e:	2302      	movs	r3, #2
 8003070:	e146      	b.n	8003300 <HAL_TIM_IC_Start_DMA+0x324>
  }
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 8003072:	7dbb      	ldrb	r3, [r7, #22]
 8003074:	2b01      	cmp	r3, #1
 8003076:	d143      	bne.n	8003100 <HAL_TIM_IC_Start_DMA+0x124>
           && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 8003078:	7d7b      	ldrb	r3, [r7, #21]
 800307a:	2b01      	cmp	r3, #1
 800307c:	d140      	bne.n	8003100 <HAL_TIM_IC_Start_DMA+0x124>
  {
    if ((pData == NULL) && (Length > 0U))
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d104      	bne.n	800308e <HAL_TIM_IC_Start_DMA+0xb2>
 8003084:	887b      	ldrh	r3, [r7, #2]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d001      	beq.n	800308e <HAL_TIM_IC_Start_DMA+0xb2>
    {
      return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e138      	b.n	8003300 <HAL_TIM_IC_Start_DMA+0x324>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d104      	bne.n	800309e <HAL_TIM_IC_Start_DMA+0xc2>
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2202      	movs	r2, #2
 8003098:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800309c:	e013      	b.n	80030c6 <HAL_TIM_IC_Start_DMA+0xea>
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	2b04      	cmp	r3, #4
 80030a2:	d104      	bne.n	80030ae <HAL_TIM_IC_Start_DMA+0xd2>
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2202      	movs	r2, #2
 80030a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030ac:	e00b      	b.n	80030c6 <HAL_TIM_IC_Start_DMA+0xea>
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	2b08      	cmp	r3, #8
 80030b2:	d104      	bne.n	80030be <HAL_TIM_IC_Start_DMA+0xe2>
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2202      	movs	r2, #2
 80030b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030bc:	e003      	b.n	80030c6 <HAL_TIM_IC_Start_DMA+0xea>
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2202      	movs	r2, #2
 80030c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d104      	bne.n	80030d6 <HAL_TIM_IC_Start_DMA+0xfa>
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2202      	movs	r2, #2
 80030d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    if ((pData == NULL) && (Length > 0U))
 80030d4:	e016      	b.n	8003104 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	2b04      	cmp	r3, #4
 80030da:	d104      	bne.n	80030e6 <HAL_TIM_IC_Start_DMA+0x10a>
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2202      	movs	r2, #2
 80030e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    if ((pData == NULL) && (Length > 0U))
 80030e4:	e00e      	b.n	8003104 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	2b08      	cmp	r3, #8
 80030ea:	d104      	bne.n	80030f6 <HAL_TIM_IC_Start_DMA+0x11a>
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2202      	movs	r2, #2
 80030f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    if ((pData == NULL) && (Length > 0U))
 80030f4:	e006      	b.n	8003104 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2202      	movs	r2, #2
 80030fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    if ((pData == NULL) && (Length > 0U))
 80030fe:	e001      	b.n	8003104 <HAL_TIM_IC_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e0fd      	b.n	8003300 <HAL_TIM_IC_Start_DMA+0x324>
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	2201      	movs	r2, #1
 800310a:	68b9      	ldr	r1, [r7, #8]
 800310c:	4618      	mov	r0, r3
 800310e:	f001 f8f3 	bl	80042f8 <TIM_CCxChannelCmd>
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	2b0c      	cmp	r3, #12
 8003116:	f200 80ad 	bhi.w	8003274 <HAL_TIM_IC_Start_DMA+0x298>
 800311a:	a201      	add	r2, pc, #4	; (adr r2, 8003120 <HAL_TIM_IC_Start_DMA+0x144>)
 800311c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003120:	08003155 	.word	0x08003155
 8003124:	08003275 	.word	0x08003275
 8003128:	08003275 	.word	0x08003275
 800312c:	08003275 	.word	0x08003275
 8003130:	0800319d 	.word	0x0800319d
 8003134:	08003275 	.word	0x08003275
 8003138:	08003275 	.word	0x08003275
 800313c:	08003275 	.word	0x08003275
 8003140:	080031e5 	.word	0x080031e5
 8003144:	08003275 	.word	0x08003275
 8003148:	08003275 	.word	0x08003275
 800314c:	08003275 	.word	0x08003275
 8003150:	0800322d 	.word	0x0800322d
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003158:	4a6b      	ldr	r2, [pc, #428]	; (8003308 <HAL_TIM_IC_Start_DMA+0x32c>)
 800315a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003160:	4a6a      	ldr	r2, [pc, #424]	; (800330c <HAL_TIM_IC_Start_DMA+0x330>)
 8003162:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003168:	4a69      	ldr	r2, [pc, #420]	; (8003310 <HAL_TIM_IC_Start_DMA+0x334>)
 800316a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	3334      	adds	r3, #52	; 0x34
 8003176:	4619      	mov	r1, r3
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	887b      	ldrh	r3, [r7, #2]
 800317c:	f7fe fac6 	bl	800170c <HAL_DMA_Start_IT>
 8003180:	4603      	mov	r3, r0
 8003182:	2b00      	cmp	r3, #0
 8003184:	d001      	beq.n	800318a <HAL_TIM_IC_Start_DMA+0x1ae>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e0ba      	b.n	8003300 <HAL_TIM_IC_Start_DMA+0x324>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	68da      	ldr	r2, [r3, #12]
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003198:	60da      	str	r2, [r3, #12]
      break;
 800319a:	e06e      	b.n	800327a <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031a0:	4a59      	ldr	r2, [pc, #356]	; (8003308 <HAL_TIM_IC_Start_DMA+0x32c>)
 80031a2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031a8:	4a58      	ldr	r2, [pc, #352]	; (800330c <HAL_TIM_IC_Start_DMA+0x330>)
 80031aa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031b0:	4a57      	ldr	r2, [pc, #348]	; (8003310 <HAL_TIM_IC_Start_DMA+0x334>)
 80031b2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	3338      	adds	r3, #56	; 0x38
 80031be:	4619      	mov	r1, r3
 80031c0:	687a      	ldr	r2, [r7, #4]
 80031c2:	887b      	ldrh	r3, [r7, #2]
 80031c4:	f7fe faa2 	bl	800170c <HAL_DMA_Start_IT>
 80031c8:	4603      	mov	r3, r0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d001      	beq.n	80031d2 <HAL_TIM_IC_Start_DMA+0x1f6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e096      	b.n	8003300 <HAL_TIM_IC_Start_DMA+0x324>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	68da      	ldr	r2, [r3, #12]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80031e0:	60da      	str	r2, [r3, #12]
      break;
 80031e2:	e04a      	b.n	800327a <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e8:	4a47      	ldr	r2, [pc, #284]	; (8003308 <HAL_TIM_IC_Start_DMA+0x32c>)
 80031ea:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f0:	4a46      	ldr	r2, [pc, #280]	; (800330c <HAL_TIM_IC_Start_DMA+0x330>)
 80031f2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f8:	4a45      	ldr	r2, [pc, #276]	; (8003310 <HAL_TIM_IC_Start_DMA+0x334>)
 80031fa:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	333c      	adds	r3, #60	; 0x3c
 8003206:	4619      	mov	r1, r3
 8003208:	687a      	ldr	r2, [r7, #4]
 800320a:	887b      	ldrh	r3, [r7, #2]
 800320c:	f7fe fa7e 	bl	800170c <HAL_DMA_Start_IT>
 8003210:	4603      	mov	r3, r0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d001      	beq.n	800321a <HAL_TIM_IC_Start_DMA+0x23e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e072      	b.n	8003300 <HAL_TIM_IC_Start_DMA+0x324>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	68da      	ldr	r2, [r3, #12]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003228:	60da      	str	r2, [r3, #12]
      break;
 800322a:	e026      	b.n	800327a <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003230:	4a35      	ldr	r2, [pc, #212]	; (8003308 <HAL_TIM_IC_Start_DMA+0x32c>)
 8003232:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003238:	4a34      	ldr	r2, [pc, #208]	; (800330c <HAL_TIM_IC_Start_DMA+0x330>)
 800323a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003240:	4a33      	ldr	r2, [pc, #204]	; (8003310 <HAL_TIM_IC_Start_DMA+0x334>)
 8003242:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	3340      	adds	r3, #64	; 0x40
 800324e:	4619      	mov	r1, r3
 8003250:	687a      	ldr	r2, [r7, #4]
 8003252:	887b      	ldrh	r3, [r7, #2]
 8003254:	f7fe fa5a 	bl	800170c <HAL_DMA_Start_IT>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d001      	beq.n	8003262 <HAL_TIM_IC_Start_DMA+0x286>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e04e      	b.n	8003300 <HAL_TIM_IC_Start_DMA+0x324>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	68da      	ldr	r2, [r3, #12]
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003270:	60da      	str	r2, [r3, #12]
      break;
 8003272:	e002      	b.n	800327a <HAL_TIM_IC_Start_DMA+0x29e>
    }

    default:
      status = HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	75fb      	strb	r3, [r7, #23]
      break;
 8003278:	bf00      	nop
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a25      	ldr	r2, [pc, #148]	; (8003314 <HAL_TIM_IC_Start_DMA+0x338>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d022      	beq.n	80032ca <HAL_TIM_IC_Start_DMA+0x2ee>
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800328c:	d01d      	beq.n	80032ca <HAL_TIM_IC_Start_DMA+0x2ee>
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a21      	ldr	r2, [pc, #132]	; (8003318 <HAL_TIM_IC_Start_DMA+0x33c>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d018      	beq.n	80032ca <HAL_TIM_IC_Start_DMA+0x2ee>
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a1f      	ldr	r2, [pc, #124]	; (800331c <HAL_TIM_IC_Start_DMA+0x340>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d013      	beq.n	80032ca <HAL_TIM_IC_Start_DMA+0x2ee>
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a1e      	ldr	r2, [pc, #120]	; (8003320 <HAL_TIM_IC_Start_DMA+0x344>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d00e      	beq.n	80032ca <HAL_TIM_IC_Start_DMA+0x2ee>
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a1c      	ldr	r2, [pc, #112]	; (8003324 <HAL_TIM_IC_Start_DMA+0x348>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d009      	beq.n	80032ca <HAL_TIM_IC_Start_DMA+0x2ee>
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a1b      	ldr	r2, [pc, #108]	; (8003328 <HAL_TIM_IC_Start_DMA+0x34c>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d004      	beq.n	80032ca <HAL_TIM_IC_Start_DMA+0x2ee>
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a19      	ldr	r2, [pc, #100]	; (800332c <HAL_TIM_IC_Start_DMA+0x350>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d111      	bne.n	80032ee <HAL_TIM_IC_Start_DMA+0x312>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	f003 0307 	and.w	r3, r3, #7
 80032d4:	613b      	str	r3, [r7, #16]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	2b06      	cmp	r3, #6
 80032da:	d010      	beq.n	80032fe <HAL_TIM_IC_Start_DMA+0x322>
    {
      __HAL_TIM_ENABLE(htim);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f042 0201 	orr.w	r2, r2, #1
 80032ea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032ec:	e007      	b.n	80032fe <HAL_TIM_IC_Start_DMA+0x322>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f042 0201 	orr.w	r2, r2, #1
 80032fc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80032fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8003300:	4618      	mov	r0, r3
 8003302:	3718      	adds	r7, #24
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}
 8003308:	080039a1 	.word	0x080039a1
 800330c:	08003a69 	.word	0x08003a69
 8003310:	0800390f 	.word	0x0800390f
 8003314:	40010000 	.word	0x40010000
 8003318:	40000400 	.word	0x40000400
 800331c:	40000800 	.word	0x40000800
 8003320:	40000c00 	.word	0x40000c00
 8003324:	40010400 	.word	0x40010400
 8003328:	40014000 	.word	0x40014000
 800332c:	40001800 	.word	0x40001800

08003330 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b082      	sub	sp, #8
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	691b      	ldr	r3, [r3, #16]
 800333e:	f003 0302 	and.w	r3, r3, #2
 8003342:	2b02      	cmp	r3, #2
 8003344:	d122      	bne.n	800338c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	f003 0302 	and.w	r3, r3, #2
 8003350:	2b02      	cmp	r3, #2
 8003352:	d11b      	bne.n	800338c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f06f 0202 	mvn.w	r2, #2
 800335c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2201      	movs	r2, #1
 8003362:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	699b      	ldr	r3, [r3, #24]
 800336a:	f003 0303 	and.w	r3, r3, #3
 800336e:	2b00      	cmp	r3, #0
 8003370:	d003      	beq.n	800337a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f7fd fb74 	bl	8000a60 <HAL_TIM_IC_CaptureCallback>
 8003378:	e005      	b.n	8003386 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f7fd fb50 	bl	8000a20 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	f000 faa6 	bl	80038d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	691b      	ldr	r3, [r3, #16]
 8003392:	f003 0304 	and.w	r3, r3, #4
 8003396:	2b04      	cmp	r3, #4
 8003398:	d122      	bne.n	80033e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	f003 0304 	and.w	r3, r3, #4
 80033a4:	2b04      	cmp	r3, #4
 80033a6:	d11b      	bne.n	80033e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f06f 0204 	mvn.w	r2, #4
 80033b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2202      	movs	r2, #2
 80033b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	699b      	ldr	r3, [r3, #24]
 80033be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d003      	beq.n	80033ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f7fd fb4a 	bl	8000a60 <HAL_TIM_IC_CaptureCallback>
 80033cc:	e005      	b.n	80033da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f7fd fb26 	bl	8000a20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033d4:	6878      	ldr	r0, [r7, #4]
 80033d6:	f000 fa7c 	bl	80038d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2200      	movs	r2, #0
 80033de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	691b      	ldr	r3, [r3, #16]
 80033e6:	f003 0308 	and.w	r3, r3, #8
 80033ea:	2b08      	cmp	r3, #8
 80033ec:	d122      	bne.n	8003434 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	f003 0308 	and.w	r3, r3, #8
 80033f8:	2b08      	cmp	r3, #8
 80033fa:	d11b      	bne.n	8003434 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f06f 0208 	mvn.w	r2, #8
 8003404:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2204      	movs	r2, #4
 800340a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	69db      	ldr	r3, [r3, #28]
 8003412:	f003 0303 	and.w	r3, r3, #3
 8003416:	2b00      	cmp	r3, #0
 8003418:	d003      	beq.n	8003422 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f7fd fb20 	bl	8000a60 <HAL_TIM_IC_CaptureCallback>
 8003420:	e005      	b.n	800342e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f7fd fafc 	bl	8000a20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f000 fa52 	bl	80038d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	691b      	ldr	r3, [r3, #16]
 800343a:	f003 0310 	and.w	r3, r3, #16
 800343e:	2b10      	cmp	r3, #16
 8003440:	d122      	bne.n	8003488 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	f003 0310 	and.w	r3, r3, #16
 800344c:	2b10      	cmp	r3, #16
 800344e:	d11b      	bne.n	8003488 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f06f 0210 	mvn.w	r2, #16
 8003458:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2208      	movs	r2, #8
 800345e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	69db      	ldr	r3, [r3, #28]
 8003466:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800346a:	2b00      	cmp	r3, #0
 800346c:	d003      	beq.n	8003476 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f7fd faf6 	bl	8000a60 <HAL_TIM_IC_CaptureCallback>
 8003474:	e005      	b.n	8003482 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f7fd fad2 	bl	8000a20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f000 fa28 	bl	80038d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	691b      	ldr	r3, [r3, #16]
 800348e:	f003 0301 	and.w	r3, r3, #1
 8003492:	2b01      	cmp	r3, #1
 8003494:	d10e      	bne.n	80034b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	f003 0301 	and.w	r3, r3, #1
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d107      	bne.n	80034b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f06f 0201 	mvn.w	r2, #1
 80034ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f7fd fa96 	bl	80009e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	691b      	ldr	r3, [r3, #16]
 80034ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034be:	2b80      	cmp	r3, #128	; 0x80
 80034c0:	d10e      	bne.n	80034e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034cc:	2b80      	cmp	r3, #128	; 0x80
 80034ce:	d107      	bne.n	80034e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80034d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f000 ffb8 	bl	8004450 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	691b      	ldr	r3, [r3, #16]
 80034e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034ea:	2b40      	cmp	r3, #64	; 0x40
 80034ec:	d10e      	bne.n	800350c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034f8:	2b40      	cmp	r3, #64	; 0x40
 80034fa:	d107      	bne.n	800350c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003504:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f000 f9ed 	bl	80038e6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	691b      	ldr	r3, [r3, #16]
 8003512:	f003 0320 	and.w	r3, r3, #32
 8003516:	2b20      	cmp	r3, #32
 8003518:	d10e      	bne.n	8003538 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	f003 0320 	and.w	r3, r3, #32
 8003524:	2b20      	cmp	r3, #32
 8003526:	d107      	bne.n	8003538 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f06f 0220 	mvn.w	r2, #32
 8003530:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f000 ff82 	bl	800443c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003538:	bf00      	nop
 800353a:	3708      	adds	r7, #8
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}

08003540 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b086      	sub	sp, #24
 8003544:	af00      	add	r7, sp, #0
 8003546:	60f8      	str	r0, [r7, #12]
 8003548:	60b9      	str	r1, [r7, #8]
 800354a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800354c:	2300      	movs	r3, #0
 800354e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003556:	2b01      	cmp	r3, #1
 8003558:	d101      	bne.n	800355e <HAL_TIM_OC_ConfigChannel+0x1e>
 800355a:	2302      	movs	r3, #2
 800355c:	e048      	b.n	80035f0 <HAL_TIM_OC_ConfigChannel+0xb0>
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2201      	movs	r2, #1
 8003562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2b0c      	cmp	r3, #12
 800356a:	d839      	bhi.n	80035e0 <HAL_TIM_OC_ConfigChannel+0xa0>
 800356c:	a201      	add	r2, pc, #4	; (adr r2, 8003574 <HAL_TIM_OC_ConfigChannel+0x34>)
 800356e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003572:	bf00      	nop
 8003574:	080035a9 	.word	0x080035a9
 8003578:	080035e1 	.word	0x080035e1
 800357c:	080035e1 	.word	0x080035e1
 8003580:	080035e1 	.word	0x080035e1
 8003584:	080035b7 	.word	0x080035b7
 8003588:	080035e1 	.word	0x080035e1
 800358c:	080035e1 	.word	0x080035e1
 8003590:	080035e1 	.word	0x080035e1
 8003594:	080035c5 	.word	0x080035c5
 8003598:	080035e1 	.word	0x080035e1
 800359c:	080035e1 	.word	0x080035e1
 80035a0:	080035e1 	.word	0x080035e1
 80035a4:	080035d3 	.word	0x080035d3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	68b9      	ldr	r1, [r7, #8]
 80035ae:	4618      	mov	r0, r3
 80035b0:	f000 fb2e 	bl	8003c10 <TIM_OC1_SetConfig>
      break;
 80035b4:	e017      	b.n	80035e6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	68b9      	ldr	r1, [r7, #8]
 80035bc:	4618      	mov	r0, r3
 80035be:	f000 fb97 	bl	8003cf0 <TIM_OC2_SetConfig>
      break;
 80035c2:	e010      	b.n	80035e6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	68b9      	ldr	r1, [r7, #8]
 80035ca:	4618      	mov	r0, r3
 80035cc:	f000 fc06 	bl	8003ddc <TIM_OC3_SetConfig>
      break;
 80035d0:	e009      	b.n	80035e6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	68b9      	ldr	r1, [r7, #8]
 80035d8:	4618      	mov	r0, r3
 80035da:	f000 fc73 	bl	8003ec4 <TIM_OC4_SetConfig>
      break;
 80035de:	e002      	b.n	80035e6 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	75fb      	strb	r3, [r7, #23]
      break;
 80035e4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2200      	movs	r2, #0
 80035ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80035ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3718      	adds	r7, #24
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}

080035f8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b086      	sub	sp, #24
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	60f8      	str	r0, [r7, #12]
 8003600:	60b9      	str	r1, [r7, #8]
 8003602:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003604:	2300      	movs	r3, #0
 8003606:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800360e:	2b01      	cmp	r3, #1
 8003610:	d101      	bne.n	8003616 <HAL_TIM_IC_ConfigChannel+0x1e>
 8003612:	2302      	movs	r3, #2
 8003614:	e088      	b.n	8003728 <HAL_TIM_IC_ConfigChannel+0x130>
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2201      	movs	r2, #1
 800361a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d11b      	bne.n	800365c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6818      	ldr	r0, [r3, #0]
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	6819      	ldr	r1, [r3, #0]
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	685a      	ldr	r2, [r3, #4]
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	f000 fc9c 	bl	8003f70 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	699a      	ldr	r2, [r3, #24]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f022 020c 	bic.w	r2, r2, #12
 8003646:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	6999      	ldr	r1, [r3, #24]
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	689a      	ldr	r2, [r3, #8]
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	430a      	orrs	r2, r1
 8003658:	619a      	str	r2, [r3, #24]
 800365a:	e060      	b.n	800371e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2b04      	cmp	r3, #4
 8003660:	d11c      	bne.n	800369c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	6818      	ldr	r0, [r3, #0]
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	6819      	ldr	r1, [r3, #0]
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	685a      	ldr	r2, [r3, #4]
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	f000 fd20 	bl	80040b6 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	699a      	ldr	r2, [r3, #24]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003684:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	6999      	ldr	r1, [r3, #24]
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	021a      	lsls	r2, r3, #8
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	430a      	orrs	r2, r1
 8003698:	619a      	str	r2, [r3, #24]
 800369a:	e040      	b.n	800371e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2b08      	cmp	r3, #8
 80036a0:	d11b      	bne.n	80036da <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	6818      	ldr	r0, [r3, #0]
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	6819      	ldr	r1, [r3, #0]
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	685a      	ldr	r2, [r3, #4]
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	68db      	ldr	r3, [r3, #12]
 80036b2:	f000 fd6d 	bl	8004190 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	69da      	ldr	r2, [r3, #28]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f022 020c 	bic.w	r2, r2, #12
 80036c4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	69d9      	ldr	r1, [r3, #28]
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	689a      	ldr	r2, [r3, #8]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	430a      	orrs	r2, r1
 80036d6:	61da      	str	r2, [r3, #28]
 80036d8:	e021      	b.n	800371e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2b0c      	cmp	r3, #12
 80036de:	d11c      	bne.n	800371a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	6818      	ldr	r0, [r3, #0]
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	6819      	ldr	r1, [r3, #0]
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	685a      	ldr	r2, [r3, #4]
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	f000 fd8a 	bl	8004208 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	69da      	ldr	r2, [r3, #28]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003702:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	69d9      	ldr	r1, [r3, #28]
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	021a      	lsls	r2, r3, #8
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	430a      	orrs	r2, r1
 8003716:	61da      	str	r2, [r3, #28]
 8003718:	e001      	b.n	800371e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2200      	movs	r2, #0
 8003722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003726:	7dfb      	ldrb	r3, [r7, #23]
}
 8003728:	4618      	mov	r0, r3
 800372a:	3718      	adds	r7, #24
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}

08003730 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800373a:	2300      	movs	r3, #0
 800373c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003744:	2b01      	cmp	r3, #1
 8003746:	d101      	bne.n	800374c <HAL_TIM_ConfigClockSource+0x1c>
 8003748:	2302      	movs	r3, #2
 800374a:	e0b4      	b.n	80038b6 <HAL_TIM_ConfigClockSource+0x186>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2201      	movs	r2, #1
 8003750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2202      	movs	r2, #2
 8003758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800376a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003772:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	68ba      	ldr	r2, [r7, #8]
 800377a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003784:	d03e      	beq.n	8003804 <HAL_TIM_ConfigClockSource+0xd4>
 8003786:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800378a:	f200 8087 	bhi.w	800389c <HAL_TIM_ConfigClockSource+0x16c>
 800378e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003792:	f000 8086 	beq.w	80038a2 <HAL_TIM_ConfigClockSource+0x172>
 8003796:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800379a:	d87f      	bhi.n	800389c <HAL_TIM_ConfigClockSource+0x16c>
 800379c:	2b70      	cmp	r3, #112	; 0x70
 800379e:	d01a      	beq.n	80037d6 <HAL_TIM_ConfigClockSource+0xa6>
 80037a0:	2b70      	cmp	r3, #112	; 0x70
 80037a2:	d87b      	bhi.n	800389c <HAL_TIM_ConfigClockSource+0x16c>
 80037a4:	2b60      	cmp	r3, #96	; 0x60
 80037a6:	d050      	beq.n	800384a <HAL_TIM_ConfigClockSource+0x11a>
 80037a8:	2b60      	cmp	r3, #96	; 0x60
 80037aa:	d877      	bhi.n	800389c <HAL_TIM_ConfigClockSource+0x16c>
 80037ac:	2b50      	cmp	r3, #80	; 0x50
 80037ae:	d03c      	beq.n	800382a <HAL_TIM_ConfigClockSource+0xfa>
 80037b0:	2b50      	cmp	r3, #80	; 0x50
 80037b2:	d873      	bhi.n	800389c <HAL_TIM_ConfigClockSource+0x16c>
 80037b4:	2b40      	cmp	r3, #64	; 0x40
 80037b6:	d058      	beq.n	800386a <HAL_TIM_ConfigClockSource+0x13a>
 80037b8:	2b40      	cmp	r3, #64	; 0x40
 80037ba:	d86f      	bhi.n	800389c <HAL_TIM_ConfigClockSource+0x16c>
 80037bc:	2b30      	cmp	r3, #48	; 0x30
 80037be:	d064      	beq.n	800388a <HAL_TIM_ConfigClockSource+0x15a>
 80037c0:	2b30      	cmp	r3, #48	; 0x30
 80037c2:	d86b      	bhi.n	800389c <HAL_TIM_ConfigClockSource+0x16c>
 80037c4:	2b20      	cmp	r3, #32
 80037c6:	d060      	beq.n	800388a <HAL_TIM_ConfigClockSource+0x15a>
 80037c8:	2b20      	cmp	r3, #32
 80037ca:	d867      	bhi.n	800389c <HAL_TIM_ConfigClockSource+0x16c>
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d05c      	beq.n	800388a <HAL_TIM_ConfigClockSource+0x15a>
 80037d0:	2b10      	cmp	r3, #16
 80037d2:	d05a      	beq.n	800388a <HAL_TIM_ConfigClockSource+0x15a>
 80037d4:	e062      	b.n	800389c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6818      	ldr	r0, [r3, #0]
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	6899      	ldr	r1, [r3, #8]
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	685a      	ldr	r2, [r3, #4]
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	f000 fd67 	bl	80042b8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80037f8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	68ba      	ldr	r2, [r7, #8]
 8003800:	609a      	str	r2, [r3, #8]
      break;
 8003802:	e04f      	b.n	80038a4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6818      	ldr	r0, [r3, #0]
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	6899      	ldr	r1, [r3, #8]
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	685a      	ldr	r2, [r3, #4]
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	68db      	ldr	r3, [r3, #12]
 8003814:	f000 fd50 	bl	80042b8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	689a      	ldr	r2, [r3, #8]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003826:	609a      	str	r2, [r3, #8]
      break;
 8003828:	e03c      	b.n	80038a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6818      	ldr	r0, [r3, #0]
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	6859      	ldr	r1, [r3, #4]
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	68db      	ldr	r3, [r3, #12]
 8003836:	461a      	mov	r2, r3
 8003838:	f000 fc0e 	bl	8004058 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	2150      	movs	r1, #80	; 0x50
 8003842:	4618      	mov	r0, r3
 8003844:	f000 fd1d 	bl	8004282 <TIM_ITRx_SetConfig>
      break;
 8003848:	e02c      	b.n	80038a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6818      	ldr	r0, [r3, #0]
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	6859      	ldr	r1, [r3, #4]
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	68db      	ldr	r3, [r3, #12]
 8003856:	461a      	mov	r2, r3
 8003858:	f000 fc6a 	bl	8004130 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	2160      	movs	r1, #96	; 0x60
 8003862:	4618      	mov	r0, r3
 8003864:	f000 fd0d 	bl	8004282 <TIM_ITRx_SetConfig>
      break;
 8003868:	e01c      	b.n	80038a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6818      	ldr	r0, [r3, #0]
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	6859      	ldr	r1, [r3, #4]
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	68db      	ldr	r3, [r3, #12]
 8003876:	461a      	mov	r2, r3
 8003878:	f000 fbee 	bl	8004058 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	2140      	movs	r1, #64	; 0x40
 8003882:	4618      	mov	r0, r3
 8003884:	f000 fcfd 	bl	8004282 <TIM_ITRx_SetConfig>
      break;
 8003888:	e00c      	b.n	80038a4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4619      	mov	r1, r3
 8003894:	4610      	mov	r0, r2
 8003896:	f000 fcf4 	bl	8004282 <TIM_ITRx_SetConfig>
      break;
 800389a:	e003      	b.n	80038a4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	73fb      	strb	r3, [r7, #15]
      break;
 80038a0:	e000      	b.n	80038a4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80038a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2201      	movs	r2, #1
 80038a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80038b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3710      	adds	r7, #16
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}

080038be <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80038be:	b480      	push	{r7}
 80038c0:	b083      	sub	sp, #12
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 80038c6:	bf00      	nop
 80038c8:	370c      	adds	r7, #12
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr

080038d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80038d2:	b480      	push	{r7}
 80038d4:	b083      	sub	sp, #12
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80038da:	bf00      	nop
 80038dc:	370c      	adds	r7, #12
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr

080038e6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80038e6:	b480      	push	{r7}
 80038e8:	b083      	sub	sp, #12
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80038ee:	bf00      	nop
 80038f0:	370c      	adds	r7, #12
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr

080038fa <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80038fa:	b480      	push	{r7}
 80038fc:	b083      	sub	sp, #12
 80038fe:	af00      	add	r7, sp, #0
 8003900:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8003902:	bf00      	nop
 8003904:	370c      	adds	r7, #12
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr

0800390e <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800390e:	b580      	push	{r7, lr}
 8003910:	b084      	sub	sp, #16
 8003912:	af00      	add	r7, sp, #0
 8003914:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800391a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	429a      	cmp	r2, r3
 8003924:	d107      	bne.n	8003936 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2201      	movs	r2, #1
 800392a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2201      	movs	r2, #1
 8003930:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003934:	e02a      	b.n	800398c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	429a      	cmp	r2, r3
 800393e:	d107      	bne.n	8003950 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2202      	movs	r2, #2
 8003944:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2201      	movs	r2, #1
 800394a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800394e:	e01d      	b.n	800398c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	429a      	cmp	r2, r3
 8003958:	d107      	bne.n	800396a <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2204      	movs	r2, #4
 800395e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2201      	movs	r2, #1
 8003964:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003968:	e010      	b.n	800398c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	429a      	cmp	r2, r3
 8003972:	d107      	bne.n	8003984 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2208      	movs	r2, #8
 8003978:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2201      	movs	r2, #1
 800397e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003982:	e003      	b.n	800398c <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2201      	movs	r2, #1
 8003988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800398c:	68f8      	ldr	r0, [r7, #12]
 800398e:	f7ff ffb4 	bl	80038fa <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2200      	movs	r2, #0
 8003996:	771a      	strb	r2, [r3, #28]
}
 8003998:	bf00      	nop
 800399a:	3710      	adds	r7, #16
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}

080039a0 <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b084      	sub	sp, #16
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ac:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d10f      	bne.n	80039d8 <TIM_DMACaptureCplt+0x38>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2201      	movs	r2, #1
 80039bc:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	69db      	ldr	r3, [r3, #28]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d146      	bne.n	8003a54 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2201      	movs	r2, #1
 80039ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2201      	movs	r2, #1
 80039d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039d6:	e03d      	b.n	8003a54 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039dc:	687a      	ldr	r2, [r7, #4]
 80039de:	429a      	cmp	r2, r3
 80039e0:	d10f      	bne.n	8003a02 <TIM_DMACaptureCplt+0x62>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2202      	movs	r2, #2
 80039e6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	69db      	ldr	r3, [r3, #28]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d131      	bne.n	8003a54 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2201      	movs	r2, #1
 80039fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a00:	e028      	b.n	8003a54 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d10f      	bne.n	8003a2c <TIM_DMACaptureCplt+0x8c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2204      	movs	r2, #4
 8003a10:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	69db      	ldr	r3, [r3, #28]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d11c      	bne.n	8003a54 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2201      	movs	r2, #1
 8003a26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a2a:	e013      	b.n	8003a54 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a30:	687a      	ldr	r2, [r7, #4]
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d10e      	bne.n	8003a54 <TIM_DMACaptureCplt+0xb4>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2208      	movs	r2, #8
 8003a3a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	69db      	ldr	r3, [r3, #28]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d107      	bne.n	8003a54 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2201      	movs	r2, #1
 8003a48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 8003a54:	68f8      	ldr	r0, [r7, #12]
 8003a56:	f7fd f803 	bl	8000a60 <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	771a      	strb	r2, [r3, #28]
}
 8003a60:	bf00      	nop
 8003a62:	3710      	adds	r7, #16
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}

08003a68 <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b084      	sub	sp, #16
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a74:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d103      	bne.n	8003a88 <TIM_DMACaptureHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2201      	movs	r2, #1
 8003a84:	771a      	strb	r2, [r3, #28]
 8003a86:	e019      	b.n	8003abc <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a8c:	687a      	ldr	r2, [r7, #4]
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	d103      	bne.n	8003a9a <TIM_DMACaptureHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2202      	movs	r2, #2
 8003a96:	771a      	strb	r2, [r3, #28]
 8003a98:	e010      	b.n	8003abc <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d103      	bne.n	8003aac <TIM_DMACaptureHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2204      	movs	r2, #4
 8003aa8:	771a      	strb	r2, [r3, #28]
 8003aaa:	e007      	b.n	8003abc <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab0:	687a      	ldr	r2, [r7, #4]
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	d102      	bne.n	8003abc <TIM_DMACaptureHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2208      	movs	r2, #8
 8003aba:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8003abc:	68f8      	ldr	r0, [r7, #12]
 8003abe:	f7ff fefe 	bl	80038be <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	771a      	strb	r2, [r3, #28]
}
 8003ac8:	bf00      	nop
 8003aca:	3710      	adds	r7, #16
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}

08003ad0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b085      	sub	sp, #20
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
 8003ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	4a40      	ldr	r2, [pc, #256]	; (8003be4 <TIM_Base_SetConfig+0x114>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d013      	beq.n	8003b10 <TIM_Base_SetConfig+0x40>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aee:	d00f      	beq.n	8003b10 <TIM_Base_SetConfig+0x40>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	4a3d      	ldr	r2, [pc, #244]	; (8003be8 <TIM_Base_SetConfig+0x118>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d00b      	beq.n	8003b10 <TIM_Base_SetConfig+0x40>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	4a3c      	ldr	r2, [pc, #240]	; (8003bec <TIM_Base_SetConfig+0x11c>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d007      	beq.n	8003b10 <TIM_Base_SetConfig+0x40>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	4a3b      	ldr	r2, [pc, #236]	; (8003bf0 <TIM_Base_SetConfig+0x120>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d003      	beq.n	8003b10 <TIM_Base_SetConfig+0x40>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	4a3a      	ldr	r2, [pc, #232]	; (8003bf4 <TIM_Base_SetConfig+0x124>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d108      	bne.n	8003b22 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	68fa      	ldr	r2, [r7, #12]
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	4a2f      	ldr	r2, [pc, #188]	; (8003be4 <TIM_Base_SetConfig+0x114>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d02b      	beq.n	8003b82 <TIM_Base_SetConfig+0xb2>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b30:	d027      	beq.n	8003b82 <TIM_Base_SetConfig+0xb2>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	4a2c      	ldr	r2, [pc, #176]	; (8003be8 <TIM_Base_SetConfig+0x118>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d023      	beq.n	8003b82 <TIM_Base_SetConfig+0xb2>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	4a2b      	ldr	r2, [pc, #172]	; (8003bec <TIM_Base_SetConfig+0x11c>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d01f      	beq.n	8003b82 <TIM_Base_SetConfig+0xb2>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	4a2a      	ldr	r2, [pc, #168]	; (8003bf0 <TIM_Base_SetConfig+0x120>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d01b      	beq.n	8003b82 <TIM_Base_SetConfig+0xb2>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4a29      	ldr	r2, [pc, #164]	; (8003bf4 <TIM_Base_SetConfig+0x124>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d017      	beq.n	8003b82 <TIM_Base_SetConfig+0xb2>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	4a28      	ldr	r2, [pc, #160]	; (8003bf8 <TIM_Base_SetConfig+0x128>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d013      	beq.n	8003b82 <TIM_Base_SetConfig+0xb2>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	4a27      	ldr	r2, [pc, #156]	; (8003bfc <TIM_Base_SetConfig+0x12c>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d00f      	beq.n	8003b82 <TIM_Base_SetConfig+0xb2>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	4a26      	ldr	r2, [pc, #152]	; (8003c00 <TIM_Base_SetConfig+0x130>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d00b      	beq.n	8003b82 <TIM_Base_SetConfig+0xb2>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	4a25      	ldr	r2, [pc, #148]	; (8003c04 <TIM_Base_SetConfig+0x134>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d007      	beq.n	8003b82 <TIM_Base_SetConfig+0xb2>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4a24      	ldr	r2, [pc, #144]	; (8003c08 <TIM_Base_SetConfig+0x138>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d003      	beq.n	8003b82 <TIM_Base_SetConfig+0xb2>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	4a23      	ldr	r2, [pc, #140]	; (8003c0c <TIM_Base_SetConfig+0x13c>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d108      	bne.n	8003b94 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	68db      	ldr	r3, [r3, #12]
 8003b8e:	68fa      	ldr	r2, [r7, #12]
 8003b90:	4313      	orrs	r3, r2
 8003b92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	695b      	ldr	r3, [r3, #20]
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	68fa      	ldr	r2, [r7, #12]
 8003ba6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	689a      	ldr	r2, [r3, #8]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	4a0a      	ldr	r2, [pc, #40]	; (8003be4 <TIM_Base_SetConfig+0x114>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d003      	beq.n	8003bc8 <TIM_Base_SetConfig+0xf8>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	4a0c      	ldr	r2, [pc, #48]	; (8003bf4 <TIM_Base_SetConfig+0x124>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d103      	bne.n	8003bd0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	691a      	ldr	r2, [r3, #16]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	615a      	str	r2, [r3, #20]
}
 8003bd6:	bf00      	nop
 8003bd8:	3714      	adds	r7, #20
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr
 8003be2:	bf00      	nop
 8003be4:	40010000 	.word	0x40010000
 8003be8:	40000400 	.word	0x40000400
 8003bec:	40000800 	.word	0x40000800
 8003bf0:	40000c00 	.word	0x40000c00
 8003bf4:	40010400 	.word	0x40010400
 8003bf8:	40014000 	.word	0x40014000
 8003bfc:	40014400 	.word	0x40014400
 8003c00:	40014800 	.word	0x40014800
 8003c04:	40001800 	.word	0x40001800
 8003c08:	40001c00 	.word	0x40001c00
 8003c0c:	40002000 	.word	0x40002000

08003c10 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b087      	sub	sp, #28
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6a1b      	ldr	r3, [r3, #32]
 8003c1e:	f023 0201 	bic.w	r2, r3, #1
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6a1b      	ldr	r3, [r3, #32]
 8003c2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	699b      	ldr	r3, [r3, #24]
 8003c36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f023 0303 	bic.w	r3, r3, #3
 8003c46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	68fa      	ldr	r2, [r7, #12]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	f023 0302 	bic.w	r3, r3, #2
 8003c58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	697a      	ldr	r2, [r7, #20]
 8003c60:	4313      	orrs	r3, r2
 8003c62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	4a20      	ldr	r2, [pc, #128]	; (8003ce8 <TIM_OC1_SetConfig+0xd8>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d003      	beq.n	8003c74 <TIM_OC1_SetConfig+0x64>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	4a1f      	ldr	r2, [pc, #124]	; (8003cec <TIM_OC1_SetConfig+0xdc>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d10c      	bne.n	8003c8e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	f023 0308 	bic.w	r3, r3, #8
 8003c7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	68db      	ldr	r3, [r3, #12]
 8003c80:	697a      	ldr	r2, [r7, #20]
 8003c82:	4313      	orrs	r3, r2
 8003c84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	f023 0304 	bic.w	r3, r3, #4
 8003c8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4a15      	ldr	r2, [pc, #84]	; (8003ce8 <TIM_OC1_SetConfig+0xd8>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d003      	beq.n	8003c9e <TIM_OC1_SetConfig+0x8e>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4a14      	ldr	r2, [pc, #80]	; (8003cec <TIM_OC1_SetConfig+0xdc>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d111      	bne.n	8003cc2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ca4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003cac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	695b      	ldr	r3, [r3, #20]
 8003cb2:	693a      	ldr	r2, [r7, #16]
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	699b      	ldr	r3, [r3, #24]
 8003cbc:	693a      	ldr	r2, [r7, #16]
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	693a      	ldr	r2, [r7, #16]
 8003cc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	68fa      	ldr	r2, [r7, #12]
 8003ccc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	685a      	ldr	r2, [r3, #4]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	697a      	ldr	r2, [r7, #20]
 8003cda:	621a      	str	r2, [r3, #32]
}
 8003cdc:	bf00      	nop
 8003cde:	371c      	adds	r7, #28
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr
 8003ce8:	40010000 	.word	0x40010000
 8003cec:	40010400 	.word	0x40010400

08003cf0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b087      	sub	sp, #28
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6a1b      	ldr	r3, [r3, #32]
 8003cfe:	f023 0210 	bic.w	r2, r3, #16
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6a1b      	ldr	r3, [r3, #32]
 8003d0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	699b      	ldr	r3, [r3, #24]
 8003d16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	021b      	lsls	r3, r3, #8
 8003d2e:	68fa      	ldr	r2, [r7, #12]
 8003d30:	4313      	orrs	r3, r2
 8003d32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	f023 0320 	bic.w	r3, r3, #32
 8003d3a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	011b      	lsls	r3, r3, #4
 8003d42:	697a      	ldr	r2, [r7, #20]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	4a22      	ldr	r2, [pc, #136]	; (8003dd4 <TIM_OC2_SetConfig+0xe4>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d003      	beq.n	8003d58 <TIM_OC2_SetConfig+0x68>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	4a21      	ldr	r2, [pc, #132]	; (8003dd8 <TIM_OC2_SetConfig+0xe8>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d10d      	bne.n	8003d74 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	011b      	lsls	r3, r3, #4
 8003d66:	697a      	ldr	r2, [r7, #20]
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d72:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	4a17      	ldr	r2, [pc, #92]	; (8003dd4 <TIM_OC2_SetConfig+0xe4>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d003      	beq.n	8003d84 <TIM_OC2_SetConfig+0x94>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	4a16      	ldr	r2, [pc, #88]	; (8003dd8 <TIM_OC2_SetConfig+0xe8>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d113      	bne.n	8003dac <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d8a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d92:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	695b      	ldr	r3, [r3, #20]
 8003d98:	009b      	lsls	r3, r3, #2
 8003d9a:	693a      	ldr	r2, [r7, #16]
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	699b      	ldr	r3, [r3, #24]
 8003da4:	009b      	lsls	r3, r3, #2
 8003da6:	693a      	ldr	r2, [r7, #16]
 8003da8:	4313      	orrs	r3, r2
 8003daa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	693a      	ldr	r2, [r7, #16]
 8003db0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	68fa      	ldr	r2, [r7, #12]
 8003db6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	685a      	ldr	r2, [r3, #4]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	697a      	ldr	r2, [r7, #20]
 8003dc4:	621a      	str	r2, [r3, #32]
}
 8003dc6:	bf00      	nop
 8003dc8:	371c      	adds	r7, #28
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr
 8003dd2:	bf00      	nop
 8003dd4:	40010000 	.word	0x40010000
 8003dd8:	40010400 	.word	0x40010400

08003ddc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b087      	sub	sp, #28
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
 8003de4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6a1b      	ldr	r3, [r3, #32]
 8003dea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6a1b      	ldr	r3, [r3, #32]
 8003df6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	69db      	ldr	r3, [r3, #28]
 8003e02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	f023 0303 	bic.w	r3, r3, #3
 8003e12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	68fa      	ldr	r2, [r7, #12]
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	021b      	lsls	r3, r3, #8
 8003e2c:	697a      	ldr	r2, [r7, #20]
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4a21      	ldr	r2, [pc, #132]	; (8003ebc <TIM_OC3_SetConfig+0xe0>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d003      	beq.n	8003e42 <TIM_OC3_SetConfig+0x66>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4a20      	ldr	r2, [pc, #128]	; (8003ec0 <TIM_OC3_SetConfig+0xe4>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d10d      	bne.n	8003e5e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e48:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	68db      	ldr	r3, [r3, #12]
 8003e4e:	021b      	lsls	r3, r3, #8
 8003e50:	697a      	ldr	r2, [r7, #20]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4a16      	ldr	r2, [pc, #88]	; (8003ebc <TIM_OC3_SetConfig+0xe0>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d003      	beq.n	8003e6e <TIM_OC3_SetConfig+0x92>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	4a15      	ldr	r2, [pc, #84]	; (8003ec0 <TIM_OC3_SetConfig+0xe4>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d113      	bne.n	8003e96 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	695b      	ldr	r3, [r3, #20]
 8003e82:	011b      	lsls	r3, r3, #4
 8003e84:	693a      	ldr	r2, [r7, #16]
 8003e86:	4313      	orrs	r3, r2
 8003e88:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	699b      	ldr	r3, [r3, #24]
 8003e8e:	011b      	lsls	r3, r3, #4
 8003e90:	693a      	ldr	r2, [r7, #16]
 8003e92:	4313      	orrs	r3, r2
 8003e94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	693a      	ldr	r2, [r7, #16]
 8003e9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	68fa      	ldr	r2, [r7, #12]
 8003ea0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	685a      	ldr	r2, [r3, #4]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	697a      	ldr	r2, [r7, #20]
 8003eae:	621a      	str	r2, [r3, #32]
}
 8003eb0:	bf00      	nop
 8003eb2:	371c      	adds	r7, #28
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr
 8003ebc:	40010000 	.word	0x40010000
 8003ec0:	40010400 	.word	0x40010400

08003ec4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b087      	sub	sp, #28
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
 8003ecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a1b      	ldr	r3, [r3, #32]
 8003ed2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6a1b      	ldr	r3, [r3, #32]
 8003ede:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	69db      	ldr	r3, [r3, #28]
 8003eea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ef2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003efa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	021b      	lsls	r3, r3, #8
 8003f02:	68fa      	ldr	r2, [r7, #12]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f0e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	031b      	lsls	r3, r3, #12
 8003f16:	693a      	ldr	r2, [r7, #16]
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	4a12      	ldr	r2, [pc, #72]	; (8003f68 <TIM_OC4_SetConfig+0xa4>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d003      	beq.n	8003f2c <TIM_OC4_SetConfig+0x68>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	4a11      	ldr	r2, [pc, #68]	; (8003f6c <TIM_OC4_SetConfig+0xa8>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d109      	bne.n	8003f40 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f32:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	695b      	ldr	r3, [r3, #20]
 8003f38:	019b      	lsls	r3, r3, #6
 8003f3a:	697a      	ldr	r2, [r7, #20]
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	697a      	ldr	r2, [r7, #20]
 8003f44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	68fa      	ldr	r2, [r7, #12]
 8003f4a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	685a      	ldr	r2, [r3, #4]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	693a      	ldr	r2, [r7, #16]
 8003f58:	621a      	str	r2, [r3, #32]
}
 8003f5a:	bf00      	nop
 8003f5c:	371c      	adds	r7, #28
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr
 8003f66:	bf00      	nop
 8003f68:	40010000 	.word	0x40010000
 8003f6c:	40010400 	.word	0x40010400

08003f70 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b087      	sub	sp, #28
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	60f8      	str	r0, [r7, #12]
 8003f78:	60b9      	str	r1, [r7, #8]
 8003f7a:	607a      	str	r2, [r7, #4]
 8003f7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	6a1b      	ldr	r3, [r3, #32]
 8003f82:	f023 0201 	bic.w	r2, r3, #1
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	699b      	ldr	r3, [r3, #24]
 8003f8e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	6a1b      	ldr	r3, [r3, #32]
 8003f94:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	4a28      	ldr	r2, [pc, #160]	; (800403c <TIM_TI1_SetConfig+0xcc>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d01b      	beq.n	8003fd6 <TIM_TI1_SetConfig+0x66>
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fa4:	d017      	beq.n	8003fd6 <TIM_TI1_SetConfig+0x66>
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	4a25      	ldr	r2, [pc, #148]	; (8004040 <TIM_TI1_SetConfig+0xd0>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d013      	beq.n	8003fd6 <TIM_TI1_SetConfig+0x66>
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	4a24      	ldr	r2, [pc, #144]	; (8004044 <TIM_TI1_SetConfig+0xd4>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d00f      	beq.n	8003fd6 <TIM_TI1_SetConfig+0x66>
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	4a23      	ldr	r2, [pc, #140]	; (8004048 <TIM_TI1_SetConfig+0xd8>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d00b      	beq.n	8003fd6 <TIM_TI1_SetConfig+0x66>
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	4a22      	ldr	r2, [pc, #136]	; (800404c <TIM_TI1_SetConfig+0xdc>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d007      	beq.n	8003fd6 <TIM_TI1_SetConfig+0x66>
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	4a21      	ldr	r2, [pc, #132]	; (8004050 <TIM_TI1_SetConfig+0xe0>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d003      	beq.n	8003fd6 <TIM_TI1_SetConfig+0x66>
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	4a20      	ldr	r2, [pc, #128]	; (8004054 <TIM_TI1_SetConfig+0xe4>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d101      	bne.n	8003fda <TIM_TI1_SetConfig+0x6a>
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e000      	b.n	8003fdc <TIM_TI1_SetConfig+0x6c>
 8003fda:	2300      	movs	r3, #0
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d008      	beq.n	8003ff2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	f023 0303 	bic.w	r3, r3, #3
 8003fe6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003fe8:	697a      	ldr	r2, [r7, #20]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	4313      	orrs	r3, r2
 8003fee:	617b      	str	r3, [r7, #20]
 8003ff0:	e003      	b.n	8003ffa <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	f043 0301 	orr.w	r3, r3, #1
 8003ff8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004000:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	011b      	lsls	r3, r3, #4
 8004006:	b2db      	uxtb	r3, r3
 8004008:	697a      	ldr	r2, [r7, #20]
 800400a:	4313      	orrs	r3, r2
 800400c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	f023 030a 	bic.w	r3, r3, #10
 8004014:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	f003 030a 	and.w	r3, r3, #10
 800401c:	693a      	ldr	r2, [r7, #16]
 800401e:	4313      	orrs	r3, r2
 8004020:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	697a      	ldr	r2, [r7, #20]
 8004026:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	693a      	ldr	r2, [r7, #16]
 800402c:	621a      	str	r2, [r3, #32]
}
 800402e:	bf00      	nop
 8004030:	371c      	adds	r7, #28
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr
 800403a:	bf00      	nop
 800403c:	40010000 	.word	0x40010000
 8004040:	40000400 	.word	0x40000400
 8004044:	40000800 	.word	0x40000800
 8004048:	40000c00 	.word	0x40000c00
 800404c:	40010400 	.word	0x40010400
 8004050:	40014000 	.word	0x40014000
 8004054:	40001800 	.word	0x40001800

08004058 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004058:	b480      	push	{r7}
 800405a:	b087      	sub	sp, #28
 800405c:	af00      	add	r7, sp, #0
 800405e:	60f8      	str	r0, [r7, #12]
 8004060:	60b9      	str	r1, [r7, #8]
 8004062:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	6a1b      	ldr	r3, [r3, #32]
 8004068:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	6a1b      	ldr	r3, [r3, #32]
 800406e:	f023 0201 	bic.w	r2, r3, #1
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	699b      	ldr	r3, [r3, #24]
 800407a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004082:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	011b      	lsls	r3, r3, #4
 8004088:	693a      	ldr	r2, [r7, #16]
 800408a:	4313      	orrs	r3, r2
 800408c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	f023 030a 	bic.w	r3, r3, #10
 8004094:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004096:	697a      	ldr	r2, [r7, #20]
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	4313      	orrs	r3, r2
 800409c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	693a      	ldr	r2, [r7, #16]
 80040a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	697a      	ldr	r2, [r7, #20]
 80040a8:	621a      	str	r2, [r3, #32]
}
 80040aa:	bf00      	nop
 80040ac:	371c      	adds	r7, #28
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr

080040b6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80040b6:	b480      	push	{r7}
 80040b8:	b087      	sub	sp, #28
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	60f8      	str	r0, [r7, #12]
 80040be:	60b9      	str	r1, [r7, #8]
 80040c0:	607a      	str	r2, [r7, #4]
 80040c2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	6a1b      	ldr	r3, [r3, #32]
 80040c8:	f023 0210 	bic.w	r2, r3, #16
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	699b      	ldr	r3, [r3, #24]
 80040d4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	6a1b      	ldr	r3, [r3, #32]
 80040da:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040e2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	021b      	lsls	r3, r3, #8
 80040e8:	697a      	ldr	r2, [r7, #20]
 80040ea:	4313      	orrs	r3, r2
 80040ec:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80040f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	031b      	lsls	r3, r3, #12
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	697a      	ldr	r2, [r7, #20]
 80040fe:	4313      	orrs	r3, r2
 8004100:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004108:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	011b      	lsls	r3, r3, #4
 800410e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004112:	693a      	ldr	r2, [r7, #16]
 8004114:	4313      	orrs	r3, r2
 8004116:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	697a      	ldr	r2, [r7, #20]
 800411c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	693a      	ldr	r2, [r7, #16]
 8004122:	621a      	str	r2, [r3, #32]
}
 8004124:	bf00      	nop
 8004126:	371c      	adds	r7, #28
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr

08004130 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004130:	b480      	push	{r7}
 8004132:	b087      	sub	sp, #28
 8004134:	af00      	add	r7, sp, #0
 8004136:	60f8      	str	r0, [r7, #12]
 8004138:	60b9      	str	r1, [r7, #8]
 800413a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	6a1b      	ldr	r3, [r3, #32]
 8004140:	f023 0210 	bic.w	r2, r3, #16
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	699b      	ldr	r3, [r3, #24]
 800414c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	6a1b      	ldr	r3, [r3, #32]
 8004152:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800415a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	031b      	lsls	r3, r3, #12
 8004160:	697a      	ldr	r2, [r7, #20]
 8004162:	4313      	orrs	r3, r2
 8004164:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800416c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	011b      	lsls	r3, r3, #4
 8004172:	693a      	ldr	r2, [r7, #16]
 8004174:	4313      	orrs	r3, r2
 8004176:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	697a      	ldr	r2, [r7, #20]
 800417c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	693a      	ldr	r2, [r7, #16]
 8004182:	621a      	str	r2, [r3, #32]
}
 8004184:	bf00      	nop
 8004186:	371c      	adds	r7, #28
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr

08004190 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004190:	b480      	push	{r7}
 8004192:	b087      	sub	sp, #28
 8004194:	af00      	add	r7, sp, #0
 8004196:	60f8      	str	r0, [r7, #12]
 8004198:	60b9      	str	r1, [r7, #8]
 800419a:	607a      	str	r2, [r7, #4]
 800419c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	6a1b      	ldr	r3, [r3, #32]
 80041a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	69db      	ldr	r3, [r3, #28]
 80041ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	6a1b      	ldr	r3, [r3, #32]
 80041b4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	f023 0303 	bic.w	r3, r3, #3
 80041bc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80041be:	697a      	ldr	r2, [r7, #20]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	4313      	orrs	r3, r2
 80041c4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80041cc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	011b      	lsls	r3, r3, #4
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	697a      	ldr	r2, [r7, #20]
 80041d6:	4313      	orrs	r3, r2
 80041d8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80041e0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	021b      	lsls	r3, r3, #8
 80041e6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80041ea:	693a      	ldr	r2, [r7, #16]
 80041ec:	4313      	orrs	r3, r2
 80041ee:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	697a      	ldr	r2, [r7, #20]
 80041f4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	693a      	ldr	r2, [r7, #16]
 80041fa:	621a      	str	r2, [r3, #32]
}
 80041fc:	bf00      	nop
 80041fe:	371c      	adds	r7, #28
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr

08004208 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004208:	b480      	push	{r7}
 800420a:	b087      	sub	sp, #28
 800420c:	af00      	add	r7, sp, #0
 800420e:	60f8      	str	r0, [r7, #12]
 8004210:	60b9      	str	r1, [r7, #8]
 8004212:	607a      	str	r2, [r7, #4]
 8004214:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	6a1b      	ldr	r3, [r3, #32]
 800421a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	69db      	ldr	r3, [r3, #28]
 8004226:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	6a1b      	ldr	r3, [r3, #32]
 800422c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004234:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	021b      	lsls	r3, r3, #8
 800423a:	697a      	ldr	r2, [r7, #20]
 800423c:	4313      	orrs	r3, r2
 800423e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004246:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	031b      	lsls	r3, r3, #12
 800424c:	b29b      	uxth	r3, r3
 800424e:	697a      	ldr	r2, [r7, #20]
 8004250:	4313      	orrs	r3, r2
 8004252:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800425a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	031b      	lsls	r3, r3, #12
 8004260:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004264:	693a      	ldr	r2, [r7, #16]
 8004266:	4313      	orrs	r3, r2
 8004268:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	697a      	ldr	r2, [r7, #20]
 800426e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	693a      	ldr	r2, [r7, #16]
 8004274:	621a      	str	r2, [r3, #32]
}
 8004276:	bf00      	nop
 8004278:	371c      	adds	r7, #28
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr

08004282 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004282:	b480      	push	{r7}
 8004284:	b085      	sub	sp, #20
 8004286:	af00      	add	r7, sp, #0
 8004288:	6078      	str	r0, [r7, #4]
 800428a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004298:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800429a:	683a      	ldr	r2, [r7, #0]
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	4313      	orrs	r3, r2
 80042a0:	f043 0307 	orr.w	r3, r3, #7
 80042a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	68fa      	ldr	r2, [r7, #12]
 80042aa:	609a      	str	r2, [r3, #8]
}
 80042ac:	bf00      	nop
 80042ae:	3714      	adds	r7, #20
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr

080042b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b087      	sub	sp, #28
 80042bc:	af00      	add	r7, sp, #0
 80042be:	60f8      	str	r0, [r7, #12]
 80042c0:	60b9      	str	r1, [r7, #8]
 80042c2:	607a      	str	r2, [r7, #4]
 80042c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	021a      	lsls	r2, r3, #8
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	431a      	orrs	r2, r3
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	4313      	orrs	r3, r2
 80042e0:	697a      	ldr	r2, [r7, #20]
 80042e2:	4313      	orrs	r3, r2
 80042e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	697a      	ldr	r2, [r7, #20]
 80042ea:	609a      	str	r2, [r3, #8]
}
 80042ec:	bf00      	nop
 80042ee:	371c      	adds	r7, #28
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr

080042f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b087      	sub	sp, #28
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	60f8      	str	r0, [r7, #12]
 8004300:	60b9      	str	r1, [r7, #8]
 8004302:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	f003 031f 	and.w	r3, r3, #31
 800430a:	2201      	movs	r2, #1
 800430c:	fa02 f303 	lsl.w	r3, r2, r3
 8004310:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	6a1a      	ldr	r2, [r3, #32]
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	43db      	mvns	r3, r3
 800431a:	401a      	ands	r2, r3
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	6a1a      	ldr	r2, [r3, #32]
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	f003 031f 	and.w	r3, r3, #31
 800432a:	6879      	ldr	r1, [r7, #4]
 800432c:	fa01 f303 	lsl.w	r3, r1, r3
 8004330:	431a      	orrs	r2, r3
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	621a      	str	r2, [r3, #32]
}
 8004336:	bf00      	nop
 8004338:	371c      	adds	r7, #28
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr
	...

08004344 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004344:	b480      	push	{r7}
 8004346:	b085      	sub	sp, #20
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
 800434c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004354:	2b01      	cmp	r3, #1
 8004356:	d101      	bne.n	800435c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004358:	2302      	movs	r3, #2
 800435a:	e05a      	b.n	8004412 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2201      	movs	r2, #1
 8004360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2202      	movs	r2, #2
 8004368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004382:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	68fa      	ldr	r2, [r7, #12]
 800438a:	4313      	orrs	r3, r2
 800438c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	68fa      	ldr	r2, [r7, #12]
 8004394:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a21      	ldr	r2, [pc, #132]	; (8004420 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d022      	beq.n	80043e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043a8:	d01d      	beq.n	80043e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a1d      	ldr	r2, [pc, #116]	; (8004424 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d018      	beq.n	80043e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a1b      	ldr	r2, [pc, #108]	; (8004428 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d013      	beq.n	80043e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a1a      	ldr	r2, [pc, #104]	; (800442c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d00e      	beq.n	80043e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a18      	ldr	r2, [pc, #96]	; (8004430 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d009      	beq.n	80043e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a17      	ldr	r2, [pc, #92]	; (8004434 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d004      	beq.n	80043e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a15      	ldr	r2, [pc, #84]	; (8004438 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d10c      	bne.n	8004400 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	68ba      	ldr	r2, [r7, #8]
 80043f4:	4313      	orrs	r3, r2
 80043f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	68ba      	ldr	r2, [r7, #8]
 80043fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2201      	movs	r2, #1
 8004404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2200      	movs	r2, #0
 800440c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004410:	2300      	movs	r3, #0
}
 8004412:	4618      	mov	r0, r3
 8004414:	3714      	adds	r7, #20
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr
 800441e:	bf00      	nop
 8004420:	40010000 	.word	0x40010000
 8004424:	40000400 	.word	0x40000400
 8004428:	40000800 	.word	0x40000800
 800442c:	40000c00 	.word	0x40000c00
 8004430:	40010400 	.word	0x40010400
 8004434:	40014000 	.word	0x40014000
 8004438:	40001800 	.word	0x40001800

0800443c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800443c:	b480      	push	{r7}
 800443e:	b083      	sub	sp, #12
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004444:	bf00      	nop
 8004446:	370c      	adds	r7, #12
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr

08004450 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004450:	b480      	push	{r7}
 8004452:	b083      	sub	sp, #12
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004458:	bf00      	nop
 800445a:	370c      	adds	r7, #12
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr

08004464 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b082      	sub	sp, #8
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d101      	bne.n	8004476 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	e03f      	b.n	80044f6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800447c:	b2db      	uxtb	r3, r3
 800447e:	2b00      	cmp	r3, #0
 8004480:	d106      	bne.n	8004490 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2200      	movs	r2, #0
 8004486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f7fc fe6e 	bl	800116c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2224      	movs	r2, #36	; 0x24
 8004494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	68da      	ldr	r2, [r3, #12]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80044a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f000 fd7b 	bl	8004fa4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	691a      	ldr	r2, [r3, #16]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80044bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	695a      	ldr	r2, [r3, #20]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80044cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	68da      	ldr	r2, [r3, #12]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80044dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2200      	movs	r2, #0
 80044e2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2220      	movs	r2, #32
 80044e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2220      	movs	r2, #32
 80044f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80044f4:	2300      	movs	r3, #0
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3708      	adds	r7, #8
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}

080044fe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044fe:	b580      	push	{r7, lr}
 8004500:	b08a      	sub	sp, #40	; 0x28
 8004502:	af02      	add	r7, sp, #8
 8004504:	60f8      	str	r0, [r7, #12]
 8004506:	60b9      	str	r1, [r7, #8]
 8004508:	603b      	str	r3, [r7, #0]
 800450a:	4613      	mov	r3, r2
 800450c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800450e:	2300      	movs	r3, #0
 8004510:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004518:	b2db      	uxtb	r3, r3
 800451a:	2b20      	cmp	r3, #32
 800451c:	d17c      	bne.n	8004618 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d002      	beq.n	800452a <HAL_UART_Transmit+0x2c>
 8004524:	88fb      	ldrh	r3, [r7, #6]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d101      	bne.n	800452e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	e075      	b.n	800461a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004534:	2b01      	cmp	r3, #1
 8004536:	d101      	bne.n	800453c <HAL_UART_Transmit+0x3e>
 8004538:	2302      	movs	r3, #2
 800453a:	e06e      	b.n	800461a <HAL_UART_Transmit+0x11c>
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2201      	movs	r2, #1
 8004540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2200      	movs	r2, #0
 8004548:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2221      	movs	r2, #33	; 0x21
 800454e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004552:	f7fc feeb 	bl	800132c <HAL_GetTick>
 8004556:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	88fa      	ldrh	r2, [r7, #6]
 800455c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	88fa      	ldrh	r2, [r7, #6]
 8004562:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800456c:	d108      	bne.n	8004580 <HAL_UART_Transmit+0x82>
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	691b      	ldr	r3, [r3, #16]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d104      	bne.n	8004580 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004576:	2300      	movs	r3, #0
 8004578:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	61bb      	str	r3, [r7, #24]
 800457e:	e003      	b.n	8004588 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004584:	2300      	movs	r3, #0
 8004586:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2200      	movs	r2, #0
 800458c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004590:	e02a      	b.n	80045e8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	9300      	str	r3, [sp, #0]
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	2200      	movs	r2, #0
 800459a:	2180      	movs	r1, #128	; 0x80
 800459c:	68f8      	ldr	r0, [r7, #12]
 800459e:	f000 faf9 	bl	8004b94 <UART_WaitOnFlagUntilTimeout>
 80045a2:	4603      	mov	r3, r0
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d001      	beq.n	80045ac <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80045a8:	2303      	movs	r3, #3
 80045aa:	e036      	b.n	800461a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80045ac:	69fb      	ldr	r3, [r7, #28]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d10b      	bne.n	80045ca <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80045b2:	69bb      	ldr	r3, [r7, #24]
 80045b4:	881b      	ldrh	r3, [r3, #0]
 80045b6:	461a      	mov	r2, r3
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045c0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80045c2:	69bb      	ldr	r3, [r7, #24]
 80045c4:	3302      	adds	r3, #2
 80045c6:	61bb      	str	r3, [r7, #24]
 80045c8:	e007      	b.n	80045da <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	781a      	ldrb	r2, [r3, #0]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80045d4:	69fb      	ldr	r3, [r7, #28]
 80045d6:	3301      	adds	r3, #1
 80045d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80045de:	b29b      	uxth	r3, r3
 80045e0:	3b01      	subs	r3, #1
 80045e2:	b29a      	uxth	r2, r3
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80045ec:	b29b      	uxth	r3, r3
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d1cf      	bne.n	8004592 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	9300      	str	r3, [sp, #0]
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	2200      	movs	r2, #0
 80045fa:	2140      	movs	r1, #64	; 0x40
 80045fc:	68f8      	ldr	r0, [r7, #12]
 80045fe:	f000 fac9 	bl	8004b94 <UART_WaitOnFlagUntilTimeout>
 8004602:	4603      	mov	r3, r0
 8004604:	2b00      	cmp	r3, #0
 8004606:	d001      	beq.n	800460c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004608:	2303      	movs	r3, #3
 800460a:	e006      	b.n	800461a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2220      	movs	r2, #32
 8004610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004614:	2300      	movs	r3, #0
 8004616:	e000      	b.n	800461a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004618:	2302      	movs	r3, #2
  }
}
 800461a:	4618      	mov	r0, r3
 800461c:	3720      	adds	r7, #32
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}
	...

08004624 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b0ba      	sub	sp, #232	; 0xe8
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	68db      	ldr	r3, [r3, #12]
 800463c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	695b      	ldr	r3, [r3, #20]
 8004646:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800464a:	2300      	movs	r3, #0
 800464c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004650:	2300      	movs	r3, #0
 8004652:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004656:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800465a:	f003 030f 	and.w	r3, r3, #15
 800465e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004662:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004666:	2b00      	cmp	r3, #0
 8004668:	d10f      	bne.n	800468a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800466a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800466e:	f003 0320 	and.w	r3, r3, #32
 8004672:	2b00      	cmp	r3, #0
 8004674:	d009      	beq.n	800468a <HAL_UART_IRQHandler+0x66>
 8004676:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800467a:	f003 0320 	and.w	r3, r3, #32
 800467e:	2b00      	cmp	r3, #0
 8004680:	d003      	beq.n	800468a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f000 fbd3 	bl	8004e2e <UART_Receive_IT>
      return;
 8004688:	e256      	b.n	8004b38 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800468a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800468e:	2b00      	cmp	r3, #0
 8004690:	f000 80de 	beq.w	8004850 <HAL_UART_IRQHandler+0x22c>
 8004694:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004698:	f003 0301 	and.w	r3, r3, #1
 800469c:	2b00      	cmp	r3, #0
 800469e:	d106      	bne.n	80046ae <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80046a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046a4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	f000 80d1 	beq.w	8004850 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80046ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046b2:	f003 0301 	and.w	r3, r3, #1
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d00b      	beq.n	80046d2 <HAL_UART_IRQHandler+0xae>
 80046ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d005      	beq.n	80046d2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ca:	f043 0201 	orr.w	r2, r3, #1
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80046d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046d6:	f003 0304 	and.w	r3, r3, #4
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d00b      	beq.n	80046f6 <HAL_UART_IRQHandler+0xd2>
 80046de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046e2:	f003 0301 	and.w	r3, r3, #1
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d005      	beq.n	80046f6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ee:	f043 0202 	orr.w	r2, r3, #2
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80046f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046fa:	f003 0302 	and.w	r3, r3, #2
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d00b      	beq.n	800471a <HAL_UART_IRQHandler+0xf6>
 8004702:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004706:	f003 0301 	and.w	r3, r3, #1
 800470a:	2b00      	cmp	r3, #0
 800470c:	d005      	beq.n	800471a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004712:	f043 0204 	orr.w	r2, r3, #4
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800471a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800471e:	f003 0308 	and.w	r3, r3, #8
 8004722:	2b00      	cmp	r3, #0
 8004724:	d011      	beq.n	800474a <HAL_UART_IRQHandler+0x126>
 8004726:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800472a:	f003 0320 	and.w	r3, r3, #32
 800472e:	2b00      	cmp	r3, #0
 8004730:	d105      	bne.n	800473e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004732:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004736:	f003 0301 	and.w	r3, r3, #1
 800473a:	2b00      	cmp	r3, #0
 800473c:	d005      	beq.n	800474a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004742:	f043 0208 	orr.w	r2, r3, #8
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800474e:	2b00      	cmp	r3, #0
 8004750:	f000 81ed 	beq.w	8004b2e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004754:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004758:	f003 0320 	and.w	r3, r3, #32
 800475c:	2b00      	cmp	r3, #0
 800475e:	d008      	beq.n	8004772 <HAL_UART_IRQHandler+0x14e>
 8004760:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004764:	f003 0320 	and.w	r3, r3, #32
 8004768:	2b00      	cmp	r3, #0
 800476a:	d002      	beq.n	8004772 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	f000 fb5e 	bl	8004e2e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	695b      	ldr	r3, [r3, #20]
 8004778:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800477c:	2b40      	cmp	r3, #64	; 0x40
 800477e:	bf0c      	ite	eq
 8004780:	2301      	moveq	r3, #1
 8004782:	2300      	movne	r3, #0
 8004784:	b2db      	uxtb	r3, r3
 8004786:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478e:	f003 0308 	and.w	r3, r3, #8
 8004792:	2b00      	cmp	r3, #0
 8004794:	d103      	bne.n	800479e <HAL_UART_IRQHandler+0x17a>
 8004796:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800479a:	2b00      	cmp	r3, #0
 800479c:	d04f      	beq.n	800483e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f000 fa66 	bl	8004c70 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	695b      	ldr	r3, [r3, #20]
 80047aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047ae:	2b40      	cmp	r3, #64	; 0x40
 80047b0:	d141      	bne.n	8004836 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	3314      	adds	r3, #20
 80047b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80047c0:	e853 3f00 	ldrex	r3, [r3]
 80047c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80047c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80047cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	3314      	adds	r3, #20
 80047da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80047de:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80047e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80047ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80047ee:	e841 2300 	strex	r3, r2, [r1]
 80047f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80047f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d1d9      	bne.n	80047b2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004802:	2b00      	cmp	r3, #0
 8004804:	d013      	beq.n	800482e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800480a:	4a7d      	ldr	r2, [pc, #500]	; (8004a00 <HAL_UART_IRQHandler+0x3dc>)
 800480c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004812:	4618      	mov	r0, r3
 8004814:	f7fd f842 	bl	800189c <HAL_DMA_Abort_IT>
 8004818:	4603      	mov	r3, r0
 800481a:	2b00      	cmp	r3, #0
 800481c:	d016      	beq.n	800484c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004822:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004824:	687a      	ldr	r2, [r7, #4]
 8004826:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004828:	4610      	mov	r0, r2
 800482a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800482c:	e00e      	b.n	800484c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f000 f99a 	bl	8004b68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004834:	e00a      	b.n	800484c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f000 f996 	bl	8004b68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800483c:	e006      	b.n	800484c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f000 f992 	bl	8004b68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2200      	movs	r2, #0
 8004848:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800484a:	e170      	b.n	8004b2e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800484c:	bf00      	nop
    return;
 800484e:	e16e      	b.n	8004b2e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004854:	2b01      	cmp	r3, #1
 8004856:	f040 814a 	bne.w	8004aee <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800485a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800485e:	f003 0310 	and.w	r3, r3, #16
 8004862:	2b00      	cmp	r3, #0
 8004864:	f000 8143 	beq.w	8004aee <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004868:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800486c:	f003 0310 	and.w	r3, r3, #16
 8004870:	2b00      	cmp	r3, #0
 8004872:	f000 813c 	beq.w	8004aee <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004876:	2300      	movs	r3, #0
 8004878:	60bb      	str	r3, [r7, #8]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	60bb      	str	r3, [r7, #8]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	60bb      	str	r3, [r7, #8]
 800488a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	695b      	ldr	r3, [r3, #20]
 8004892:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004896:	2b40      	cmp	r3, #64	; 0x40
 8004898:	f040 80b4 	bne.w	8004a04 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80048a8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	f000 8140 	beq.w	8004b32 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80048b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80048ba:	429a      	cmp	r2, r3
 80048bc:	f080 8139 	bcs.w	8004b32 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80048c6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048cc:	69db      	ldr	r3, [r3, #28]
 80048ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048d2:	f000 8088 	beq.w	80049e6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	330c      	adds	r3, #12
 80048dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80048e4:	e853 3f00 	ldrex	r3, [r3]
 80048e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80048ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80048f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80048f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	330c      	adds	r3, #12
 80048fe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004902:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004906:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800490a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800490e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004912:	e841 2300 	strex	r3, r2, [r1]
 8004916:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800491a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800491e:	2b00      	cmp	r3, #0
 8004920:	d1d9      	bne.n	80048d6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	3314      	adds	r3, #20
 8004928:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800492a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800492c:	e853 3f00 	ldrex	r3, [r3]
 8004930:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004932:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004934:	f023 0301 	bic.w	r3, r3, #1
 8004938:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	3314      	adds	r3, #20
 8004942:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004946:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800494a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800494c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800494e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004952:	e841 2300 	strex	r3, r2, [r1]
 8004956:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004958:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800495a:	2b00      	cmp	r3, #0
 800495c:	d1e1      	bne.n	8004922 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	3314      	adds	r3, #20
 8004964:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004966:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004968:	e853 3f00 	ldrex	r3, [r3]
 800496c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800496e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004970:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004974:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	3314      	adds	r3, #20
 800497e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004982:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004984:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004986:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004988:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800498a:	e841 2300 	strex	r3, r2, [r1]
 800498e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004990:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004992:	2b00      	cmp	r3, #0
 8004994:	d1e3      	bne.n	800495e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2220      	movs	r2, #32
 800499a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2200      	movs	r2, #0
 80049a2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	330c      	adds	r3, #12
 80049aa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049ae:	e853 3f00 	ldrex	r3, [r3]
 80049b2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80049b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049b6:	f023 0310 	bic.w	r3, r3, #16
 80049ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	330c      	adds	r3, #12
 80049c4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80049c8:	65ba      	str	r2, [r7, #88]	; 0x58
 80049ca:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049cc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80049ce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80049d0:	e841 2300 	strex	r3, r2, [r1]
 80049d4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80049d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d1e3      	bne.n	80049a4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049e0:	4618      	mov	r0, r3
 80049e2:	f7fc feeb 	bl	80017bc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	1ad3      	subs	r3, r2, r3
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	4619      	mov	r1, r3
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f000 f8c0 	bl	8004b7c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80049fc:	e099      	b.n	8004b32 <HAL_UART_IRQHandler+0x50e>
 80049fe:	bf00      	nop
 8004a00:	08004d37 	.word	0x08004d37
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a0c:	b29b      	uxth	r3, r3
 8004a0e:	1ad3      	subs	r3, r2, r3
 8004a10:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a18:	b29b      	uxth	r3, r3
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	f000 808b 	beq.w	8004b36 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004a20:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	f000 8086 	beq.w	8004b36 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	330c      	adds	r3, #12
 8004a30:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a34:	e853 3f00 	ldrex	r3, [r3]
 8004a38:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004a3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a3c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a40:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	330c      	adds	r3, #12
 8004a4a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004a4e:	647a      	str	r2, [r7, #68]	; 0x44
 8004a50:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a52:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004a54:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a56:	e841 2300 	strex	r3, r2, [r1]
 8004a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004a5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d1e3      	bne.n	8004a2a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	3314      	adds	r3, #20
 8004a68:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6c:	e853 3f00 	ldrex	r3, [r3]
 8004a70:	623b      	str	r3, [r7, #32]
   return(result);
 8004a72:	6a3b      	ldr	r3, [r7, #32]
 8004a74:	f023 0301 	bic.w	r3, r3, #1
 8004a78:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	3314      	adds	r3, #20
 8004a82:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004a86:	633a      	str	r2, [r7, #48]	; 0x30
 8004a88:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004a8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a8e:	e841 2300 	strex	r3, r2, [r1]
 8004a92:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d1e3      	bne.n	8004a62 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2220      	movs	r2, #32
 8004a9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	330c      	adds	r3, #12
 8004aae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	e853 3f00 	ldrex	r3, [r3]
 8004ab6:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f023 0310 	bic.w	r3, r3, #16
 8004abe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	330c      	adds	r3, #12
 8004ac8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004acc:	61fa      	str	r2, [r7, #28]
 8004ace:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ad0:	69b9      	ldr	r1, [r7, #24]
 8004ad2:	69fa      	ldr	r2, [r7, #28]
 8004ad4:	e841 2300 	strex	r3, r2, [r1]
 8004ad8:	617b      	str	r3, [r7, #20]
   return(result);
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d1e3      	bne.n	8004aa8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004ae0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004ae4:	4619      	mov	r1, r3
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f000 f848 	bl	8004b7c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004aec:	e023      	b.n	8004b36 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004aee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004af2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d009      	beq.n	8004b0e <HAL_UART_IRQHandler+0x4ea>
 8004afa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004afe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d003      	beq.n	8004b0e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f000 f929 	bl	8004d5e <UART_Transmit_IT>
    return;
 8004b0c:	e014      	b.n	8004b38 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004b0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d00e      	beq.n	8004b38 <HAL_UART_IRQHandler+0x514>
 8004b1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d008      	beq.n	8004b38 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f000 f969 	bl	8004dfe <UART_EndTransmit_IT>
    return;
 8004b2c:	e004      	b.n	8004b38 <HAL_UART_IRQHandler+0x514>
    return;
 8004b2e:	bf00      	nop
 8004b30:	e002      	b.n	8004b38 <HAL_UART_IRQHandler+0x514>
      return;
 8004b32:	bf00      	nop
 8004b34:	e000      	b.n	8004b38 <HAL_UART_IRQHandler+0x514>
      return;
 8004b36:	bf00      	nop
  }
}
 8004b38:	37e8      	adds	r7, #232	; 0xe8
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}
 8004b3e:	bf00      	nop

08004b40 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b083      	sub	sp, #12
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004b48:	bf00      	nop
 8004b4a:	370c      	adds	r7, #12
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b52:	4770      	bx	lr

08004b54 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b083      	sub	sp, #12
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004b5c:	bf00      	nop
 8004b5e:	370c      	adds	r7, #12
 8004b60:	46bd      	mov	sp, r7
 8004b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b66:	4770      	bx	lr

08004b68 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b083      	sub	sp, #12
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004b70:	bf00      	nop
 8004b72:	370c      	adds	r7, #12
 8004b74:	46bd      	mov	sp, r7
 8004b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7a:	4770      	bx	lr

08004b7c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b083      	sub	sp, #12
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
 8004b84:	460b      	mov	r3, r1
 8004b86:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004b88:	bf00      	nop
 8004b8a:	370c      	adds	r7, #12
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr

08004b94 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b090      	sub	sp, #64	; 0x40
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	60f8      	str	r0, [r7, #12]
 8004b9c:	60b9      	str	r1, [r7, #8]
 8004b9e:	603b      	str	r3, [r7, #0]
 8004ba0:	4613      	mov	r3, r2
 8004ba2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ba4:	e050      	b.n	8004c48 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ba6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bac:	d04c      	beq.n	8004c48 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004bae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d007      	beq.n	8004bc4 <UART_WaitOnFlagUntilTimeout+0x30>
 8004bb4:	f7fc fbba 	bl	800132c <HAL_GetTick>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	1ad3      	subs	r3, r2, r3
 8004bbe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	d241      	bcs.n	8004c48 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	330c      	adds	r3, #12
 8004bca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bce:	e853 3f00 	ldrex	r3, [r3]
 8004bd2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004bda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	330c      	adds	r3, #12
 8004be2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004be4:	637a      	str	r2, [r7, #52]	; 0x34
 8004be6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004be8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004bea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004bec:	e841 2300 	strex	r3, r2, [r1]
 8004bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d1e5      	bne.n	8004bc4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	3314      	adds	r3, #20
 8004bfe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	e853 3f00 	ldrex	r3, [r3]
 8004c06:	613b      	str	r3, [r7, #16]
   return(result);
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	f023 0301 	bic.w	r3, r3, #1
 8004c0e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	3314      	adds	r3, #20
 8004c16:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c18:	623a      	str	r2, [r7, #32]
 8004c1a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c1c:	69f9      	ldr	r1, [r7, #28]
 8004c1e:	6a3a      	ldr	r2, [r7, #32]
 8004c20:	e841 2300 	strex	r3, r2, [r1]
 8004c24:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c26:	69bb      	ldr	r3, [r7, #24]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d1e5      	bne.n	8004bf8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2220      	movs	r2, #32
 8004c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2220      	movs	r2, #32
 8004c38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004c44:	2303      	movs	r3, #3
 8004c46:	e00f      	b.n	8004c68 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	681a      	ldr	r2, [r3, #0]
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	4013      	ands	r3, r2
 8004c52:	68ba      	ldr	r2, [r7, #8]
 8004c54:	429a      	cmp	r2, r3
 8004c56:	bf0c      	ite	eq
 8004c58:	2301      	moveq	r3, #1
 8004c5a:	2300      	movne	r3, #0
 8004c5c:	b2db      	uxtb	r3, r3
 8004c5e:	461a      	mov	r2, r3
 8004c60:	79fb      	ldrb	r3, [r7, #7]
 8004c62:	429a      	cmp	r2, r3
 8004c64:	d09f      	beq.n	8004ba6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004c66:	2300      	movs	r3, #0
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	3740      	adds	r7, #64	; 0x40
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}

08004c70 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b095      	sub	sp, #84	; 0x54
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	330c      	adds	r3, #12
 8004c7e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c82:	e853 3f00 	ldrex	r3, [r3]
 8004c86:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c8a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004c8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	330c      	adds	r3, #12
 8004c96:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004c98:	643a      	str	r2, [r7, #64]	; 0x40
 8004c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c9c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004c9e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004ca0:	e841 2300 	strex	r3, r2, [r1]
 8004ca4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d1e5      	bne.n	8004c78 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	3314      	adds	r3, #20
 8004cb2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cb4:	6a3b      	ldr	r3, [r7, #32]
 8004cb6:	e853 3f00 	ldrex	r3, [r3]
 8004cba:	61fb      	str	r3, [r7, #28]
   return(result);
 8004cbc:	69fb      	ldr	r3, [r7, #28]
 8004cbe:	f023 0301 	bic.w	r3, r3, #1
 8004cc2:	64bb      	str	r3, [r7, #72]	; 0x48
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	3314      	adds	r3, #20
 8004cca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ccc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004cce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cd0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004cd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004cd4:	e841 2300 	strex	r3, r2, [r1]
 8004cd8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d1e5      	bne.n	8004cac <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d119      	bne.n	8004d1c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	330c      	adds	r3, #12
 8004cee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	e853 3f00 	ldrex	r3, [r3]
 8004cf6:	60bb      	str	r3, [r7, #8]
   return(result);
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	f023 0310 	bic.w	r3, r3, #16
 8004cfe:	647b      	str	r3, [r7, #68]	; 0x44
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	330c      	adds	r3, #12
 8004d06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d08:	61ba      	str	r2, [r7, #24]
 8004d0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d0c:	6979      	ldr	r1, [r7, #20]
 8004d0e:	69ba      	ldr	r2, [r7, #24]
 8004d10:	e841 2300 	strex	r3, r2, [r1]
 8004d14:	613b      	str	r3, [r7, #16]
   return(result);
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d1e5      	bne.n	8004ce8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2220      	movs	r2, #32
 8004d20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2200      	movs	r2, #0
 8004d28:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004d2a:	bf00      	nop
 8004d2c:	3754      	adds	r7, #84	; 0x54
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d34:	4770      	bx	lr

08004d36 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004d36:	b580      	push	{r7, lr}
 8004d38:	b084      	sub	sp, #16
 8004d3a:	af00      	add	r7, sp, #0
 8004d3c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d42:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2200      	movs	r2, #0
 8004d48:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004d50:	68f8      	ldr	r0, [r7, #12]
 8004d52:	f7ff ff09 	bl	8004b68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d56:	bf00      	nop
 8004d58:	3710      	adds	r7, #16
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}

08004d5e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004d5e:	b480      	push	{r7}
 8004d60:	b085      	sub	sp, #20
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d6c:	b2db      	uxtb	r3, r3
 8004d6e:	2b21      	cmp	r3, #33	; 0x21
 8004d70:	d13e      	bne.n	8004df0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d7a:	d114      	bne.n	8004da6 <UART_Transmit_IT+0x48>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	691b      	ldr	r3, [r3, #16]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d110      	bne.n	8004da6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6a1b      	ldr	r3, [r3, #32]
 8004d88:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	881b      	ldrh	r3, [r3, #0]
 8004d8e:	461a      	mov	r2, r3
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d98:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6a1b      	ldr	r3, [r3, #32]
 8004d9e:	1c9a      	adds	r2, r3, #2
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	621a      	str	r2, [r3, #32]
 8004da4:	e008      	b.n	8004db8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6a1b      	ldr	r3, [r3, #32]
 8004daa:	1c59      	adds	r1, r3, #1
 8004dac:	687a      	ldr	r2, [r7, #4]
 8004dae:	6211      	str	r1, [r2, #32]
 8004db0:	781a      	ldrb	r2, [r3, #0]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	3b01      	subs	r3, #1
 8004dc0:	b29b      	uxth	r3, r3
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	4619      	mov	r1, r3
 8004dc6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d10f      	bne.n	8004dec <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	68da      	ldr	r2, [r3, #12]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004dda:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	68da      	ldr	r2, [r3, #12]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004dea:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004dec:	2300      	movs	r3, #0
 8004dee:	e000      	b.n	8004df2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004df0:	2302      	movs	r3, #2
  }
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3714      	adds	r7, #20
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr

08004dfe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004dfe:	b580      	push	{r7, lr}
 8004e00:	b082      	sub	sp, #8
 8004e02:	af00      	add	r7, sp, #0
 8004e04:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	68da      	ldr	r2, [r3, #12]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e14:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2220      	movs	r2, #32
 8004e1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f7ff fe8e 	bl	8004b40 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004e24:	2300      	movs	r3, #0
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3708      	adds	r7, #8
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}

08004e2e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004e2e:	b580      	push	{r7, lr}
 8004e30:	b08c      	sub	sp, #48	; 0x30
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e3c:	b2db      	uxtb	r3, r3
 8004e3e:	2b22      	cmp	r3, #34	; 0x22
 8004e40:	f040 80ab 	bne.w	8004f9a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e4c:	d117      	bne.n	8004e7e <UART_Receive_IT+0x50>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	691b      	ldr	r3, [r3, #16]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d113      	bne.n	8004e7e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004e56:	2300      	movs	r3, #0
 8004e58:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e5e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	b29b      	uxth	r3, r3
 8004e68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e6c:	b29a      	uxth	r2, r3
 8004e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e70:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e76:	1c9a      	adds	r2, r3, #2
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	629a      	str	r2, [r3, #40]	; 0x28
 8004e7c:	e026      	b.n	8004ecc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e82:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004e84:	2300      	movs	r3, #0
 8004e86:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e90:	d007      	beq.n	8004ea2 <UART_Receive_IT+0x74>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d10a      	bne.n	8004eb0 <UART_Receive_IT+0x82>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	691b      	ldr	r3, [r3, #16]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d106      	bne.n	8004eb0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	b2da      	uxtb	r2, r3
 8004eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eac:	701a      	strb	r2, [r3, #0]
 8004eae:	e008      	b.n	8004ec2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	b2db      	uxtb	r3, r3
 8004eb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ebc:	b2da      	uxtb	r2, r3
 8004ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ec0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ec6:	1c5a      	adds	r2, r3, #1
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ed0:	b29b      	uxth	r3, r3
 8004ed2:	3b01      	subs	r3, #1
 8004ed4:	b29b      	uxth	r3, r3
 8004ed6:	687a      	ldr	r2, [r7, #4]
 8004ed8:	4619      	mov	r1, r3
 8004eda:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d15a      	bne.n	8004f96 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	68da      	ldr	r2, [r3, #12]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f022 0220 	bic.w	r2, r2, #32
 8004eee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	68da      	ldr	r2, [r3, #12]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004efe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	695a      	ldr	r2, [r3, #20]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f022 0201 	bic.w	r2, r2, #1
 8004f0e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2220      	movs	r2, #32
 8004f14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	d135      	bne.n	8004f8c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2200      	movs	r2, #0
 8004f24:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	330c      	adds	r3, #12
 8004f2c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	e853 3f00 	ldrex	r3, [r3]
 8004f34:	613b      	str	r3, [r7, #16]
   return(result);
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	f023 0310 	bic.w	r3, r3, #16
 8004f3c:	627b      	str	r3, [r7, #36]	; 0x24
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	330c      	adds	r3, #12
 8004f44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f46:	623a      	str	r2, [r7, #32]
 8004f48:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f4a:	69f9      	ldr	r1, [r7, #28]
 8004f4c:	6a3a      	ldr	r2, [r7, #32]
 8004f4e:	e841 2300 	strex	r3, r2, [r1]
 8004f52:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f54:	69bb      	ldr	r3, [r7, #24]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d1e5      	bne.n	8004f26 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f003 0310 	and.w	r3, r3, #16
 8004f64:	2b10      	cmp	r3, #16
 8004f66:	d10a      	bne.n	8004f7e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004f68:	2300      	movs	r3, #0
 8004f6a:	60fb      	str	r3, [r7, #12]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	60fb      	str	r3, [r7, #12]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	60fb      	str	r3, [r7, #12]
 8004f7c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004f82:	4619      	mov	r1, r3
 8004f84:	6878      	ldr	r0, [r7, #4]
 8004f86:	f7ff fdf9 	bl	8004b7c <HAL_UARTEx_RxEventCallback>
 8004f8a:	e002      	b.n	8004f92 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004f8c:	6878      	ldr	r0, [r7, #4]
 8004f8e:	f7ff fde1 	bl	8004b54 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004f92:	2300      	movs	r3, #0
 8004f94:	e002      	b.n	8004f9c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004f96:	2300      	movs	r3, #0
 8004f98:	e000      	b.n	8004f9c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004f9a:	2302      	movs	r3, #2
  }
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3730      	adds	r7, #48	; 0x30
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}

08004fa4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fa8:	b09f      	sub	sp, #124	; 0x7c
 8004faa:	af00      	add	r7, sp, #0
 8004fac:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004fae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	691b      	ldr	r3, [r3, #16]
 8004fb4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004fb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fba:	68d9      	ldr	r1, [r3, #12]
 8004fbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fbe:	681a      	ldr	r2, [r3, #0]
 8004fc0:	ea40 0301 	orr.w	r3, r0, r1
 8004fc4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004fc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fc8:	689a      	ldr	r2, [r3, #8]
 8004fca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fcc:	691b      	ldr	r3, [r3, #16]
 8004fce:	431a      	orrs	r2, r3
 8004fd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fd2:	695b      	ldr	r3, [r3, #20]
 8004fd4:	431a      	orrs	r2, r3
 8004fd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fd8:	69db      	ldr	r3, [r3, #28]
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004fde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	68db      	ldr	r3, [r3, #12]
 8004fe4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004fe8:	f021 010c 	bic.w	r1, r1, #12
 8004fec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ff2:	430b      	orrs	r3, r1
 8004ff4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004ff6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	695b      	ldr	r3, [r3, #20]
 8004ffc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005000:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005002:	6999      	ldr	r1, [r3, #24]
 8005004:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	ea40 0301 	orr.w	r3, r0, r1
 800500c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800500e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	4bc5      	ldr	r3, [pc, #788]	; (8005328 <UART_SetConfig+0x384>)
 8005014:	429a      	cmp	r2, r3
 8005016:	d004      	beq.n	8005022 <UART_SetConfig+0x7e>
 8005018:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	4bc3      	ldr	r3, [pc, #780]	; (800532c <UART_SetConfig+0x388>)
 800501e:	429a      	cmp	r2, r3
 8005020:	d103      	bne.n	800502a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005022:	f7fd fd3d 	bl	8002aa0 <HAL_RCC_GetPCLK2Freq>
 8005026:	6778      	str	r0, [r7, #116]	; 0x74
 8005028:	e002      	b.n	8005030 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800502a:	f7fd fd25 	bl	8002a78 <HAL_RCC_GetPCLK1Freq>
 800502e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005030:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005032:	69db      	ldr	r3, [r3, #28]
 8005034:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005038:	f040 80b6 	bne.w	80051a8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800503c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800503e:	461c      	mov	r4, r3
 8005040:	f04f 0500 	mov.w	r5, #0
 8005044:	4622      	mov	r2, r4
 8005046:	462b      	mov	r3, r5
 8005048:	1891      	adds	r1, r2, r2
 800504a:	6439      	str	r1, [r7, #64]	; 0x40
 800504c:	415b      	adcs	r3, r3
 800504e:	647b      	str	r3, [r7, #68]	; 0x44
 8005050:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005054:	1912      	adds	r2, r2, r4
 8005056:	eb45 0303 	adc.w	r3, r5, r3
 800505a:	f04f 0000 	mov.w	r0, #0
 800505e:	f04f 0100 	mov.w	r1, #0
 8005062:	00d9      	lsls	r1, r3, #3
 8005064:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005068:	00d0      	lsls	r0, r2, #3
 800506a:	4602      	mov	r2, r0
 800506c:	460b      	mov	r3, r1
 800506e:	1911      	adds	r1, r2, r4
 8005070:	6639      	str	r1, [r7, #96]	; 0x60
 8005072:	416b      	adcs	r3, r5
 8005074:	667b      	str	r3, [r7, #100]	; 0x64
 8005076:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	461a      	mov	r2, r3
 800507c:	f04f 0300 	mov.w	r3, #0
 8005080:	1891      	adds	r1, r2, r2
 8005082:	63b9      	str	r1, [r7, #56]	; 0x38
 8005084:	415b      	adcs	r3, r3
 8005086:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005088:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800508c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005090:	f7fb f8fe 	bl	8000290 <__aeabi_uldivmod>
 8005094:	4602      	mov	r2, r0
 8005096:	460b      	mov	r3, r1
 8005098:	4ba5      	ldr	r3, [pc, #660]	; (8005330 <UART_SetConfig+0x38c>)
 800509a:	fba3 2302 	umull	r2, r3, r3, r2
 800509e:	095b      	lsrs	r3, r3, #5
 80050a0:	011e      	lsls	r6, r3, #4
 80050a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80050a4:	461c      	mov	r4, r3
 80050a6:	f04f 0500 	mov.w	r5, #0
 80050aa:	4622      	mov	r2, r4
 80050ac:	462b      	mov	r3, r5
 80050ae:	1891      	adds	r1, r2, r2
 80050b0:	6339      	str	r1, [r7, #48]	; 0x30
 80050b2:	415b      	adcs	r3, r3
 80050b4:	637b      	str	r3, [r7, #52]	; 0x34
 80050b6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80050ba:	1912      	adds	r2, r2, r4
 80050bc:	eb45 0303 	adc.w	r3, r5, r3
 80050c0:	f04f 0000 	mov.w	r0, #0
 80050c4:	f04f 0100 	mov.w	r1, #0
 80050c8:	00d9      	lsls	r1, r3, #3
 80050ca:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80050ce:	00d0      	lsls	r0, r2, #3
 80050d0:	4602      	mov	r2, r0
 80050d2:	460b      	mov	r3, r1
 80050d4:	1911      	adds	r1, r2, r4
 80050d6:	65b9      	str	r1, [r7, #88]	; 0x58
 80050d8:	416b      	adcs	r3, r5
 80050da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80050dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	461a      	mov	r2, r3
 80050e2:	f04f 0300 	mov.w	r3, #0
 80050e6:	1891      	adds	r1, r2, r2
 80050e8:	62b9      	str	r1, [r7, #40]	; 0x28
 80050ea:	415b      	adcs	r3, r3
 80050ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80050f2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80050f6:	f7fb f8cb 	bl	8000290 <__aeabi_uldivmod>
 80050fa:	4602      	mov	r2, r0
 80050fc:	460b      	mov	r3, r1
 80050fe:	4b8c      	ldr	r3, [pc, #560]	; (8005330 <UART_SetConfig+0x38c>)
 8005100:	fba3 1302 	umull	r1, r3, r3, r2
 8005104:	095b      	lsrs	r3, r3, #5
 8005106:	2164      	movs	r1, #100	; 0x64
 8005108:	fb01 f303 	mul.w	r3, r1, r3
 800510c:	1ad3      	subs	r3, r2, r3
 800510e:	00db      	lsls	r3, r3, #3
 8005110:	3332      	adds	r3, #50	; 0x32
 8005112:	4a87      	ldr	r2, [pc, #540]	; (8005330 <UART_SetConfig+0x38c>)
 8005114:	fba2 2303 	umull	r2, r3, r2, r3
 8005118:	095b      	lsrs	r3, r3, #5
 800511a:	005b      	lsls	r3, r3, #1
 800511c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005120:	441e      	add	r6, r3
 8005122:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005124:	4618      	mov	r0, r3
 8005126:	f04f 0100 	mov.w	r1, #0
 800512a:	4602      	mov	r2, r0
 800512c:	460b      	mov	r3, r1
 800512e:	1894      	adds	r4, r2, r2
 8005130:	623c      	str	r4, [r7, #32]
 8005132:	415b      	adcs	r3, r3
 8005134:	627b      	str	r3, [r7, #36]	; 0x24
 8005136:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800513a:	1812      	adds	r2, r2, r0
 800513c:	eb41 0303 	adc.w	r3, r1, r3
 8005140:	f04f 0400 	mov.w	r4, #0
 8005144:	f04f 0500 	mov.w	r5, #0
 8005148:	00dd      	lsls	r5, r3, #3
 800514a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800514e:	00d4      	lsls	r4, r2, #3
 8005150:	4622      	mov	r2, r4
 8005152:	462b      	mov	r3, r5
 8005154:	1814      	adds	r4, r2, r0
 8005156:	653c      	str	r4, [r7, #80]	; 0x50
 8005158:	414b      	adcs	r3, r1
 800515a:	657b      	str	r3, [r7, #84]	; 0x54
 800515c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	461a      	mov	r2, r3
 8005162:	f04f 0300 	mov.w	r3, #0
 8005166:	1891      	adds	r1, r2, r2
 8005168:	61b9      	str	r1, [r7, #24]
 800516a:	415b      	adcs	r3, r3
 800516c:	61fb      	str	r3, [r7, #28]
 800516e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005172:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005176:	f7fb f88b 	bl	8000290 <__aeabi_uldivmod>
 800517a:	4602      	mov	r2, r0
 800517c:	460b      	mov	r3, r1
 800517e:	4b6c      	ldr	r3, [pc, #432]	; (8005330 <UART_SetConfig+0x38c>)
 8005180:	fba3 1302 	umull	r1, r3, r3, r2
 8005184:	095b      	lsrs	r3, r3, #5
 8005186:	2164      	movs	r1, #100	; 0x64
 8005188:	fb01 f303 	mul.w	r3, r1, r3
 800518c:	1ad3      	subs	r3, r2, r3
 800518e:	00db      	lsls	r3, r3, #3
 8005190:	3332      	adds	r3, #50	; 0x32
 8005192:	4a67      	ldr	r2, [pc, #412]	; (8005330 <UART_SetConfig+0x38c>)
 8005194:	fba2 2303 	umull	r2, r3, r2, r3
 8005198:	095b      	lsrs	r3, r3, #5
 800519a:	f003 0207 	and.w	r2, r3, #7
 800519e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4432      	add	r2, r6
 80051a4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80051a6:	e0b9      	b.n	800531c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80051a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051aa:	461c      	mov	r4, r3
 80051ac:	f04f 0500 	mov.w	r5, #0
 80051b0:	4622      	mov	r2, r4
 80051b2:	462b      	mov	r3, r5
 80051b4:	1891      	adds	r1, r2, r2
 80051b6:	6139      	str	r1, [r7, #16]
 80051b8:	415b      	adcs	r3, r3
 80051ba:	617b      	str	r3, [r7, #20]
 80051bc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80051c0:	1912      	adds	r2, r2, r4
 80051c2:	eb45 0303 	adc.w	r3, r5, r3
 80051c6:	f04f 0000 	mov.w	r0, #0
 80051ca:	f04f 0100 	mov.w	r1, #0
 80051ce:	00d9      	lsls	r1, r3, #3
 80051d0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80051d4:	00d0      	lsls	r0, r2, #3
 80051d6:	4602      	mov	r2, r0
 80051d8:	460b      	mov	r3, r1
 80051da:	eb12 0804 	adds.w	r8, r2, r4
 80051de:	eb43 0905 	adc.w	r9, r3, r5
 80051e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	4618      	mov	r0, r3
 80051e8:	f04f 0100 	mov.w	r1, #0
 80051ec:	f04f 0200 	mov.w	r2, #0
 80051f0:	f04f 0300 	mov.w	r3, #0
 80051f4:	008b      	lsls	r3, r1, #2
 80051f6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80051fa:	0082      	lsls	r2, r0, #2
 80051fc:	4640      	mov	r0, r8
 80051fe:	4649      	mov	r1, r9
 8005200:	f7fb f846 	bl	8000290 <__aeabi_uldivmod>
 8005204:	4602      	mov	r2, r0
 8005206:	460b      	mov	r3, r1
 8005208:	4b49      	ldr	r3, [pc, #292]	; (8005330 <UART_SetConfig+0x38c>)
 800520a:	fba3 2302 	umull	r2, r3, r3, r2
 800520e:	095b      	lsrs	r3, r3, #5
 8005210:	011e      	lsls	r6, r3, #4
 8005212:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005214:	4618      	mov	r0, r3
 8005216:	f04f 0100 	mov.w	r1, #0
 800521a:	4602      	mov	r2, r0
 800521c:	460b      	mov	r3, r1
 800521e:	1894      	adds	r4, r2, r2
 8005220:	60bc      	str	r4, [r7, #8]
 8005222:	415b      	adcs	r3, r3
 8005224:	60fb      	str	r3, [r7, #12]
 8005226:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800522a:	1812      	adds	r2, r2, r0
 800522c:	eb41 0303 	adc.w	r3, r1, r3
 8005230:	f04f 0400 	mov.w	r4, #0
 8005234:	f04f 0500 	mov.w	r5, #0
 8005238:	00dd      	lsls	r5, r3, #3
 800523a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800523e:	00d4      	lsls	r4, r2, #3
 8005240:	4622      	mov	r2, r4
 8005242:	462b      	mov	r3, r5
 8005244:	1814      	adds	r4, r2, r0
 8005246:	64bc      	str	r4, [r7, #72]	; 0x48
 8005248:	414b      	adcs	r3, r1
 800524a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800524c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	4618      	mov	r0, r3
 8005252:	f04f 0100 	mov.w	r1, #0
 8005256:	f04f 0200 	mov.w	r2, #0
 800525a:	f04f 0300 	mov.w	r3, #0
 800525e:	008b      	lsls	r3, r1, #2
 8005260:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005264:	0082      	lsls	r2, r0, #2
 8005266:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800526a:	f7fb f811 	bl	8000290 <__aeabi_uldivmod>
 800526e:	4602      	mov	r2, r0
 8005270:	460b      	mov	r3, r1
 8005272:	4b2f      	ldr	r3, [pc, #188]	; (8005330 <UART_SetConfig+0x38c>)
 8005274:	fba3 1302 	umull	r1, r3, r3, r2
 8005278:	095b      	lsrs	r3, r3, #5
 800527a:	2164      	movs	r1, #100	; 0x64
 800527c:	fb01 f303 	mul.w	r3, r1, r3
 8005280:	1ad3      	subs	r3, r2, r3
 8005282:	011b      	lsls	r3, r3, #4
 8005284:	3332      	adds	r3, #50	; 0x32
 8005286:	4a2a      	ldr	r2, [pc, #168]	; (8005330 <UART_SetConfig+0x38c>)
 8005288:	fba2 2303 	umull	r2, r3, r2, r3
 800528c:	095b      	lsrs	r3, r3, #5
 800528e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005292:	441e      	add	r6, r3
 8005294:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005296:	4618      	mov	r0, r3
 8005298:	f04f 0100 	mov.w	r1, #0
 800529c:	4602      	mov	r2, r0
 800529e:	460b      	mov	r3, r1
 80052a0:	1894      	adds	r4, r2, r2
 80052a2:	603c      	str	r4, [r7, #0]
 80052a4:	415b      	adcs	r3, r3
 80052a6:	607b      	str	r3, [r7, #4]
 80052a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80052ac:	1812      	adds	r2, r2, r0
 80052ae:	eb41 0303 	adc.w	r3, r1, r3
 80052b2:	f04f 0400 	mov.w	r4, #0
 80052b6:	f04f 0500 	mov.w	r5, #0
 80052ba:	00dd      	lsls	r5, r3, #3
 80052bc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80052c0:	00d4      	lsls	r4, r2, #3
 80052c2:	4622      	mov	r2, r4
 80052c4:	462b      	mov	r3, r5
 80052c6:	eb12 0a00 	adds.w	sl, r2, r0
 80052ca:	eb43 0b01 	adc.w	fp, r3, r1
 80052ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	4618      	mov	r0, r3
 80052d4:	f04f 0100 	mov.w	r1, #0
 80052d8:	f04f 0200 	mov.w	r2, #0
 80052dc:	f04f 0300 	mov.w	r3, #0
 80052e0:	008b      	lsls	r3, r1, #2
 80052e2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80052e6:	0082      	lsls	r2, r0, #2
 80052e8:	4650      	mov	r0, sl
 80052ea:	4659      	mov	r1, fp
 80052ec:	f7fa ffd0 	bl	8000290 <__aeabi_uldivmod>
 80052f0:	4602      	mov	r2, r0
 80052f2:	460b      	mov	r3, r1
 80052f4:	4b0e      	ldr	r3, [pc, #56]	; (8005330 <UART_SetConfig+0x38c>)
 80052f6:	fba3 1302 	umull	r1, r3, r3, r2
 80052fa:	095b      	lsrs	r3, r3, #5
 80052fc:	2164      	movs	r1, #100	; 0x64
 80052fe:	fb01 f303 	mul.w	r3, r1, r3
 8005302:	1ad3      	subs	r3, r2, r3
 8005304:	011b      	lsls	r3, r3, #4
 8005306:	3332      	adds	r3, #50	; 0x32
 8005308:	4a09      	ldr	r2, [pc, #36]	; (8005330 <UART_SetConfig+0x38c>)
 800530a:	fba2 2303 	umull	r2, r3, r2, r3
 800530e:	095b      	lsrs	r3, r3, #5
 8005310:	f003 020f 	and.w	r2, r3, #15
 8005314:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4432      	add	r2, r6
 800531a:	609a      	str	r2, [r3, #8]
}
 800531c:	bf00      	nop
 800531e:	377c      	adds	r7, #124	; 0x7c
 8005320:	46bd      	mov	sp, r7
 8005322:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005326:	bf00      	nop
 8005328:	40011000 	.word	0x40011000
 800532c:	40011400 	.word	0x40011400
 8005330:	51eb851f 	.word	0x51eb851f

08005334 <__errno>:
 8005334:	4b01      	ldr	r3, [pc, #4]	; (800533c <__errno+0x8>)
 8005336:	6818      	ldr	r0, [r3, #0]
 8005338:	4770      	bx	lr
 800533a:	bf00      	nop
 800533c:	2000000c 	.word	0x2000000c

08005340 <__libc_init_array>:
 8005340:	b570      	push	{r4, r5, r6, lr}
 8005342:	4d0d      	ldr	r5, [pc, #52]	; (8005378 <__libc_init_array+0x38>)
 8005344:	4c0d      	ldr	r4, [pc, #52]	; (800537c <__libc_init_array+0x3c>)
 8005346:	1b64      	subs	r4, r4, r5
 8005348:	10a4      	asrs	r4, r4, #2
 800534a:	2600      	movs	r6, #0
 800534c:	42a6      	cmp	r6, r4
 800534e:	d109      	bne.n	8005364 <__libc_init_array+0x24>
 8005350:	4d0b      	ldr	r5, [pc, #44]	; (8005380 <__libc_init_array+0x40>)
 8005352:	4c0c      	ldr	r4, [pc, #48]	; (8005384 <__libc_init_array+0x44>)
 8005354:	f000 ffec 	bl	8006330 <_init>
 8005358:	1b64      	subs	r4, r4, r5
 800535a:	10a4      	asrs	r4, r4, #2
 800535c:	2600      	movs	r6, #0
 800535e:	42a6      	cmp	r6, r4
 8005360:	d105      	bne.n	800536e <__libc_init_array+0x2e>
 8005362:	bd70      	pop	{r4, r5, r6, pc}
 8005364:	f855 3b04 	ldr.w	r3, [r5], #4
 8005368:	4798      	blx	r3
 800536a:	3601      	adds	r6, #1
 800536c:	e7ee      	b.n	800534c <__libc_init_array+0xc>
 800536e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005372:	4798      	blx	r3
 8005374:	3601      	adds	r6, #1
 8005376:	e7f2      	b.n	800535e <__libc_init_array+0x1e>
 8005378:	08006458 	.word	0x08006458
 800537c:	08006458 	.word	0x08006458
 8005380:	08006458 	.word	0x08006458
 8005384:	0800645c 	.word	0x0800645c

08005388 <memset>:
 8005388:	4402      	add	r2, r0
 800538a:	4603      	mov	r3, r0
 800538c:	4293      	cmp	r3, r2
 800538e:	d100      	bne.n	8005392 <memset+0xa>
 8005390:	4770      	bx	lr
 8005392:	f803 1b01 	strb.w	r1, [r3], #1
 8005396:	e7f9      	b.n	800538c <memset+0x4>

08005398 <iprintf>:
 8005398:	b40f      	push	{r0, r1, r2, r3}
 800539a:	4b0a      	ldr	r3, [pc, #40]	; (80053c4 <iprintf+0x2c>)
 800539c:	b513      	push	{r0, r1, r4, lr}
 800539e:	681c      	ldr	r4, [r3, #0]
 80053a0:	b124      	cbz	r4, 80053ac <iprintf+0x14>
 80053a2:	69a3      	ldr	r3, [r4, #24]
 80053a4:	b913      	cbnz	r3, 80053ac <iprintf+0x14>
 80053a6:	4620      	mov	r0, r4
 80053a8:	f000 fa5e 	bl	8005868 <__sinit>
 80053ac:	ab05      	add	r3, sp, #20
 80053ae:	9a04      	ldr	r2, [sp, #16]
 80053b0:	68a1      	ldr	r1, [r4, #8]
 80053b2:	9301      	str	r3, [sp, #4]
 80053b4:	4620      	mov	r0, r4
 80053b6:	f000 fc2f 	bl	8005c18 <_vfiprintf_r>
 80053ba:	b002      	add	sp, #8
 80053bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053c0:	b004      	add	sp, #16
 80053c2:	4770      	bx	lr
 80053c4:	2000000c 	.word	0x2000000c

080053c8 <_puts_r>:
 80053c8:	b570      	push	{r4, r5, r6, lr}
 80053ca:	460e      	mov	r6, r1
 80053cc:	4605      	mov	r5, r0
 80053ce:	b118      	cbz	r0, 80053d8 <_puts_r+0x10>
 80053d0:	6983      	ldr	r3, [r0, #24]
 80053d2:	b90b      	cbnz	r3, 80053d8 <_puts_r+0x10>
 80053d4:	f000 fa48 	bl	8005868 <__sinit>
 80053d8:	69ab      	ldr	r3, [r5, #24]
 80053da:	68ac      	ldr	r4, [r5, #8]
 80053dc:	b913      	cbnz	r3, 80053e4 <_puts_r+0x1c>
 80053de:	4628      	mov	r0, r5
 80053e0:	f000 fa42 	bl	8005868 <__sinit>
 80053e4:	4b2c      	ldr	r3, [pc, #176]	; (8005498 <_puts_r+0xd0>)
 80053e6:	429c      	cmp	r4, r3
 80053e8:	d120      	bne.n	800542c <_puts_r+0x64>
 80053ea:	686c      	ldr	r4, [r5, #4]
 80053ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80053ee:	07db      	lsls	r3, r3, #31
 80053f0:	d405      	bmi.n	80053fe <_puts_r+0x36>
 80053f2:	89a3      	ldrh	r3, [r4, #12]
 80053f4:	0598      	lsls	r0, r3, #22
 80053f6:	d402      	bmi.n	80053fe <_puts_r+0x36>
 80053f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80053fa:	f000 fad3 	bl	80059a4 <__retarget_lock_acquire_recursive>
 80053fe:	89a3      	ldrh	r3, [r4, #12]
 8005400:	0719      	lsls	r1, r3, #28
 8005402:	d51d      	bpl.n	8005440 <_puts_r+0x78>
 8005404:	6923      	ldr	r3, [r4, #16]
 8005406:	b1db      	cbz	r3, 8005440 <_puts_r+0x78>
 8005408:	3e01      	subs	r6, #1
 800540a:	68a3      	ldr	r3, [r4, #8]
 800540c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005410:	3b01      	subs	r3, #1
 8005412:	60a3      	str	r3, [r4, #8]
 8005414:	bb39      	cbnz	r1, 8005466 <_puts_r+0x9e>
 8005416:	2b00      	cmp	r3, #0
 8005418:	da38      	bge.n	800548c <_puts_r+0xc4>
 800541a:	4622      	mov	r2, r4
 800541c:	210a      	movs	r1, #10
 800541e:	4628      	mov	r0, r5
 8005420:	f000 f848 	bl	80054b4 <__swbuf_r>
 8005424:	3001      	adds	r0, #1
 8005426:	d011      	beq.n	800544c <_puts_r+0x84>
 8005428:	250a      	movs	r5, #10
 800542a:	e011      	b.n	8005450 <_puts_r+0x88>
 800542c:	4b1b      	ldr	r3, [pc, #108]	; (800549c <_puts_r+0xd4>)
 800542e:	429c      	cmp	r4, r3
 8005430:	d101      	bne.n	8005436 <_puts_r+0x6e>
 8005432:	68ac      	ldr	r4, [r5, #8]
 8005434:	e7da      	b.n	80053ec <_puts_r+0x24>
 8005436:	4b1a      	ldr	r3, [pc, #104]	; (80054a0 <_puts_r+0xd8>)
 8005438:	429c      	cmp	r4, r3
 800543a:	bf08      	it	eq
 800543c:	68ec      	ldreq	r4, [r5, #12]
 800543e:	e7d5      	b.n	80053ec <_puts_r+0x24>
 8005440:	4621      	mov	r1, r4
 8005442:	4628      	mov	r0, r5
 8005444:	f000 f888 	bl	8005558 <__swsetup_r>
 8005448:	2800      	cmp	r0, #0
 800544a:	d0dd      	beq.n	8005408 <_puts_r+0x40>
 800544c:	f04f 35ff 	mov.w	r5, #4294967295
 8005450:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005452:	07da      	lsls	r2, r3, #31
 8005454:	d405      	bmi.n	8005462 <_puts_r+0x9a>
 8005456:	89a3      	ldrh	r3, [r4, #12]
 8005458:	059b      	lsls	r3, r3, #22
 800545a:	d402      	bmi.n	8005462 <_puts_r+0x9a>
 800545c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800545e:	f000 faa2 	bl	80059a6 <__retarget_lock_release_recursive>
 8005462:	4628      	mov	r0, r5
 8005464:	bd70      	pop	{r4, r5, r6, pc}
 8005466:	2b00      	cmp	r3, #0
 8005468:	da04      	bge.n	8005474 <_puts_r+0xac>
 800546a:	69a2      	ldr	r2, [r4, #24]
 800546c:	429a      	cmp	r2, r3
 800546e:	dc06      	bgt.n	800547e <_puts_r+0xb6>
 8005470:	290a      	cmp	r1, #10
 8005472:	d004      	beq.n	800547e <_puts_r+0xb6>
 8005474:	6823      	ldr	r3, [r4, #0]
 8005476:	1c5a      	adds	r2, r3, #1
 8005478:	6022      	str	r2, [r4, #0]
 800547a:	7019      	strb	r1, [r3, #0]
 800547c:	e7c5      	b.n	800540a <_puts_r+0x42>
 800547e:	4622      	mov	r2, r4
 8005480:	4628      	mov	r0, r5
 8005482:	f000 f817 	bl	80054b4 <__swbuf_r>
 8005486:	3001      	adds	r0, #1
 8005488:	d1bf      	bne.n	800540a <_puts_r+0x42>
 800548a:	e7df      	b.n	800544c <_puts_r+0x84>
 800548c:	6823      	ldr	r3, [r4, #0]
 800548e:	250a      	movs	r5, #10
 8005490:	1c5a      	adds	r2, r3, #1
 8005492:	6022      	str	r2, [r4, #0]
 8005494:	701d      	strb	r5, [r3, #0]
 8005496:	e7db      	b.n	8005450 <_puts_r+0x88>
 8005498:	080063dc 	.word	0x080063dc
 800549c:	080063fc 	.word	0x080063fc
 80054a0:	080063bc 	.word	0x080063bc

080054a4 <puts>:
 80054a4:	4b02      	ldr	r3, [pc, #8]	; (80054b0 <puts+0xc>)
 80054a6:	4601      	mov	r1, r0
 80054a8:	6818      	ldr	r0, [r3, #0]
 80054aa:	f7ff bf8d 	b.w	80053c8 <_puts_r>
 80054ae:	bf00      	nop
 80054b0:	2000000c 	.word	0x2000000c

080054b4 <__swbuf_r>:
 80054b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054b6:	460e      	mov	r6, r1
 80054b8:	4614      	mov	r4, r2
 80054ba:	4605      	mov	r5, r0
 80054bc:	b118      	cbz	r0, 80054c6 <__swbuf_r+0x12>
 80054be:	6983      	ldr	r3, [r0, #24]
 80054c0:	b90b      	cbnz	r3, 80054c6 <__swbuf_r+0x12>
 80054c2:	f000 f9d1 	bl	8005868 <__sinit>
 80054c6:	4b21      	ldr	r3, [pc, #132]	; (800554c <__swbuf_r+0x98>)
 80054c8:	429c      	cmp	r4, r3
 80054ca:	d12b      	bne.n	8005524 <__swbuf_r+0x70>
 80054cc:	686c      	ldr	r4, [r5, #4]
 80054ce:	69a3      	ldr	r3, [r4, #24]
 80054d0:	60a3      	str	r3, [r4, #8]
 80054d2:	89a3      	ldrh	r3, [r4, #12]
 80054d4:	071a      	lsls	r2, r3, #28
 80054d6:	d52f      	bpl.n	8005538 <__swbuf_r+0x84>
 80054d8:	6923      	ldr	r3, [r4, #16]
 80054da:	b36b      	cbz	r3, 8005538 <__swbuf_r+0x84>
 80054dc:	6923      	ldr	r3, [r4, #16]
 80054de:	6820      	ldr	r0, [r4, #0]
 80054e0:	1ac0      	subs	r0, r0, r3
 80054e2:	6963      	ldr	r3, [r4, #20]
 80054e4:	b2f6      	uxtb	r6, r6
 80054e6:	4283      	cmp	r3, r0
 80054e8:	4637      	mov	r7, r6
 80054ea:	dc04      	bgt.n	80054f6 <__swbuf_r+0x42>
 80054ec:	4621      	mov	r1, r4
 80054ee:	4628      	mov	r0, r5
 80054f0:	f000 f926 	bl	8005740 <_fflush_r>
 80054f4:	bb30      	cbnz	r0, 8005544 <__swbuf_r+0x90>
 80054f6:	68a3      	ldr	r3, [r4, #8]
 80054f8:	3b01      	subs	r3, #1
 80054fa:	60a3      	str	r3, [r4, #8]
 80054fc:	6823      	ldr	r3, [r4, #0]
 80054fe:	1c5a      	adds	r2, r3, #1
 8005500:	6022      	str	r2, [r4, #0]
 8005502:	701e      	strb	r6, [r3, #0]
 8005504:	6963      	ldr	r3, [r4, #20]
 8005506:	3001      	adds	r0, #1
 8005508:	4283      	cmp	r3, r0
 800550a:	d004      	beq.n	8005516 <__swbuf_r+0x62>
 800550c:	89a3      	ldrh	r3, [r4, #12]
 800550e:	07db      	lsls	r3, r3, #31
 8005510:	d506      	bpl.n	8005520 <__swbuf_r+0x6c>
 8005512:	2e0a      	cmp	r6, #10
 8005514:	d104      	bne.n	8005520 <__swbuf_r+0x6c>
 8005516:	4621      	mov	r1, r4
 8005518:	4628      	mov	r0, r5
 800551a:	f000 f911 	bl	8005740 <_fflush_r>
 800551e:	b988      	cbnz	r0, 8005544 <__swbuf_r+0x90>
 8005520:	4638      	mov	r0, r7
 8005522:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005524:	4b0a      	ldr	r3, [pc, #40]	; (8005550 <__swbuf_r+0x9c>)
 8005526:	429c      	cmp	r4, r3
 8005528:	d101      	bne.n	800552e <__swbuf_r+0x7a>
 800552a:	68ac      	ldr	r4, [r5, #8]
 800552c:	e7cf      	b.n	80054ce <__swbuf_r+0x1a>
 800552e:	4b09      	ldr	r3, [pc, #36]	; (8005554 <__swbuf_r+0xa0>)
 8005530:	429c      	cmp	r4, r3
 8005532:	bf08      	it	eq
 8005534:	68ec      	ldreq	r4, [r5, #12]
 8005536:	e7ca      	b.n	80054ce <__swbuf_r+0x1a>
 8005538:	4621      	mov	r1, r4
 800553a:	4628      	mov	r0, r5
 800553c:	f000 f80c 	bl	8005558 <__swsetup_r>
 8005540:	2800      	cmp	r0, #0
 8005542:	d0cb      	beq.n	80054dc <__swbuf_r+0x28>
 8005544:	f04f 37ff 	mov.w	r7, #4294967295
 8005548:	e7ea      	b.n	8005520 <__swbuf_r+0x6c>
 800554a:	bf00      	nop
 800554c:	080063dc 	.word	0x080063dc
 8005550:	080063fc 	.word	0x080063fc
 8005554:	080063bc 	.word	0x080063bc

08005558 <__swsetup_r>:
 8005558:	4b32      	ldr	r3, [pc, #200]	; (8005624 <__swsetup_r+0xcc>)
 800555a:	b570      	push	{r4, r5, r6, lr}
 800555c:	681d      	ldr	r5, [r3, #0]
 800555e:	4606      	mov	r6, r0
 8005560:	460c      	mov	r4, r1
 8005562:	b125      	cbz	r5, 800556e <__swsetup_r+0x16>
 8005564:	69ab      	ldr	r3, [r5, #24]
 8005566:	b913      	cbnz	r3, 800556e <__swsetup_r+0x16>
 8005568:	4628      	mov	r0, r5
 800556a:	f000 f97d 	bl	8005868 <__sinit>
 800556e:	4b2e      	ldr	r3, [pc, #184]	; (8005628 <__swsetup_r+0xd0>)
 8005570:	429c      	cmp	r4, r3
 8005572:	d10f      	bne.n	8005594 <__swsetup_r+0x3c>
 8005574:	686c      	ldr	r4, [r5, #4]
 8005576:	89a3      	ldrh	r3, [r4, #12]
 8005578:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800557c:	0719      	lsls	r1, r3, #28
 800557e:	d42c      	bmi.n	80055da <__swsetup_r+0x82>
 8005580:	06dd      	lsls	r5, r3, #27
 8005582:	d411      	bmi.n	80055a8 <__swsetup_r+0x50>
 8005584:	2309      	movs	r3, #9
 8005586:	6033      	str	r3, [r6, #0]
 8005588:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800558c:	81a3      	strh	r3, [r4, #12]
 800558e:	f04f 30ff 	mov.w	r0, #4294967295
 8005592:	e03e      	b.n	8005612 <__swsetup_r+0xba>
 8005594:	4b25      	ldr	r3, [pc, #148]	; (800562c <__swsetup_r+0xd4>)
 8005596:	429c      	cmp	r4, r3
 8005598:	d101      	bne.n	800559e <__swsetup_r+0x46>
 800559a:	68ac      	ldr	r4, [r5, #8]
 800559c:	e7eb      	b.n	8005576 <__swsetup_r+0x1e>
 800559e:	4b24      	ldr	r3, [pc, #144]	; (8005630 <__swsetup_r+0xd8>)
 80055a0:	429c      	cmp	r4, r3
 80055a2:	bf08      	it	eq
 80055a4:	68ec      	ldreq	r4, [r5, #12]
 80055a6:	e7e6      	b.n	8005576 <__swsetup_r+0x1e>
 80055a8:	0758      	lsls	r0, r3, #29
 80055aa:	d512      	bpl.n	80055d2 <__swsetup_r+0x7a>
 80055ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80055ae:	b141      	cbz	r1, 80055c2 <__swsetup_r+0x6a>
 80055b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80055b4:	4299      	cmp	r1, r3
 80055b6:	d002      	beq.n	80055be <__swsetup_r+0x66>
 80055b8:	4630      	mov	r0, r6
 80055ba:	f000 fa59 	bl	8005a70 <_free_r>
 80055be:	2300      	movs	r3, #0
 80055c0:	6363      	str	r3, [r4, #52]	; 0x34
 80055c2:	89a3      	ldrh	r3, [r4, #12]
 80055c4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80055c8:	81a3      	strh	r3, [r4, #12]
 80055ca:	2300      	movs	r3, #0
 80055cc:	6063      	str	r3, [r4, #4]
 80055ce:	6923      	ldr	r3, [r4, #16]
 80055d0:	6023      	str	r3, [r4, #0]
 80055d2:	89a3      	ldrh	r3, [r4, #12]
 80055d4:	f043 0308 	orr.w	r3, r3, #8
 80055d8:	81a3      	strh	r3, [r4, #12]
 80055da:	6923      	ldr	r3, [r4, #16]
 80055dc:	b94b      	cbnz	r3, 80055f2 <__swsetup_r+0x9a>
 80055de:	89a3      	ldrh	r3, [r4, #12]
 80055e0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80055e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055e8:	d003      	beq.n	80055f2 <__swsetup_r+0x9a>
 80055ea:	4621      	mov	r1, r4
 80055ec:	4630      	mov	r0, r6
 80055ee:	f000 f9ff 	bl	80059f0 <__smakebuf_r>
 80055f2:	89a0      	ldrh	r0, [r4, #12]
 80055f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80055f8:	f010 0301 	ands.w	r3, r0, #1
 80055fc:	d00a      	beq.n	8005614 <__swsetup_r+0xbc>
 80055fe:	2300      	movs	r3, #0
 8005600:	60a3      	str	r3, [r4, #8]
 8005602:	6963      	ldr	r3, [r4, #20]
 8005604:	425b      	negs	r3, r3
 8005606:	61a3      	str	r3, [r4, #24]
 8005608:	6923      	ldr	r3, [r4, #16]
 800560a:	b943      	cbnz	r3, 800561e <__swsetup_r+0xc6>
 800560c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005610:	d1ba      	bne.n	8005588 <__swsetup_r+0x30>
 8005612:	bd70      	pop	{r4, r5, r6, pc}
 8005614:	0781      	lsls	r1, r0, #30
 8005616:	bf58      	it	pl
 8005618:	6963      	ldrpl	r3, [r4, #20]
 800561a:	60a3      	str	r3, [r4, #8]
 800561c:	e7f4      	b.n	8005608 <__swsetup_r+0xb0>
 800561e:	2000      	movs	r0, #0
 8005620:	e7f7      	b.n	8005612 <__swsetup_r+0xba>
 8005622:	bf00      	nop
 8005624:	2000000c 	.word	0x2000000c
 8005628:	080063dc 	.word	0x080063dc
 800562c:	080063fc 	.word	0x080063fc
 8005630:	080063bc 	.word	0x080063bc

08005634 <__sflush_r>:
 8005634:	898a      	ldrh	r2, [r1, #12]
 8005636:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800563a:	4605      	mov	r5, r0
 800563c:	0710      	lsls	r0, r2, #28
 800563e:	460c      	mov	r4, r1
 8005640:	d458      	bmi.n	80056f4 <__sflush_r+0xc0>
 8005642:	684b      	ldr	r3, [r1, #4]
 8005644:	2b00      	cmp	r3, #0
 8005646:	dc05      	bgt.n	8005654 <__sflush_r+0x20>
 8005648:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800564a:	2b00      	cmp	r3, #0
 800564c:	dc02      	bgt.n	8005654 <__sflush_r+0x20>
 800564e:	2000      	movs	r0, #0
 8005650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005654:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005656:	2e00      	cmp	r6, #0
 8005658:	d0f9      	beq.n	800564e <__sflush_r+0x1a>
 800565a:	2300      	movs	r3, #0
 800565c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005660:	682f      	ldr	r7, [r5, #0]
 8005662:	602b      	str	r3, [r5, #0]
 8005664:	d032      	beq.n	80056cc <__sflush_r+0x98>
 8005666:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005668:	89a3      	ldrh	r3, [r4, #12]
 800566a:	075a      	lsls	r2, r3, #29
 800566c:	d505      	bpl.n	800567a <__sflush_r+0x46>
 800566e:	6863      	ldr	r3, [r4, #4]
 8005670:	1ac0      	subs	r0, r0, r3
 8005672:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005674:	b10b      	cbz	r3, 800567a <__sflush_r+0x46>
 8005676:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005678:	1ac0      	subs	r0, r0, r3
 800567a:	2300      	movs	r3, #0
 800567c:	4602      	mov	r2, r0
 800567e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005680:	6a21      	ldr	r1, [r4, #32]
 8005682:	4628      	mov	r0, r5
 8005684:	47b0      	blx	r6
 8005686:	1c43      	adds	r3, r0, #1
 8005688:	89a3      	ldrh	r3, [r4, #12]
 800568a:	d106      	bne.n	800569a <__sflush_r+0x66>
 800568c:	6829      	ldr	r1, [r5, #0]
 800568e:	291d      	cmp	r1, #29
 8005690:	d82c      	bhi.n	80056ec <__sflush_r+0xb8>
 8005692:	4a2a      	ldr	r2, [pc, #168]	; (800573c <__sflush_r+0x108>)
 8005694:	40ca      	lsrs	r2, r1
 8005696:	07d6      	lsls	r6, r2, #31
 8005698:	d528      	bpl.n	80056ec <__sflush_r+0xb8>
 800569a:	2200      	movs	r2, #0
 800569c:	6062      	str	r2, [r4, #4]
 800569e:	04d9      	lsls	r1, r3, #19
 80056a0:	6922      	ldr	r2, [r4, #16]
 80056a2:	6022      	str	r2, [r4, #0]
 80056a4:	d504      	bpl.n	80056b0 <__sflush_r+0x7c>
 80056a6:	1c42      	adds	r2, r0, #1
 80056a8:	d101      	bne.n	80056ae <__sflush_r+0x7a>
 80056aa:	682b      	ldr	r3, [r5, #0]
 80056ac:	b903      	cbnz	r3, 80056b0 <__sflush_r+0x7c>
 80056ae:	6560      	str	r0, [r4, #84]	; 0x54
 80056b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80056b2:	602f      	str	r7, [r5, #0]
 80056b4:	2900      	cmp	r1, #0
 80056b6:	d0ca      	beq.n	800564e <__sflush_r+0x1a>
 80056b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80056bc:	4299      	cmp	r1, r3
 80056be:	d002      	beq.n	80056c6 <__sflush_r+0x92>
 80056c0:	4628      	mov	r0, r5
 80056c2:	f000 f9d5 	bl	8005a70 <_free_r>
 80056c6:	2000      	movs	r0, #0
 80056c8:	6360      	str	r0, [r4, #52]	; 0x34
 80056ca:	e7c1      	b.n	8005650 <__sflush_r+0x1c>
 80056cc:	6a21      	ldr	r1, [r4, #32]
 80056ce:	2301      	movs	r3, #1
 80056d0:	4628      	mov	r0, r5
 80056d2:	47b0      	blx	r6
 80056d4:	1c41      	adds	r1, r0, #1
 80056d6:	d1c7      	bne.n	8005668 <__sflush_r+0x34>
 80056d8:	682b      	ldr	r3, [r5, #0]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d0c4      	beq.n	8005668 <__sflush_r+0x34>
 80056de:	2b1d      	cmp	r3, #29
 80056e0:	d001      	beq.n	80056e6 <__sflush_r+0xb2>
 80056e2:	2b16      	cmp	r3, #22
 80056e4:	d101      	bne.n	80056ea <__sflush_r+0xb6>
 80056e6:	602f      	str	r7, [r5, #0]
 80056e8:	e7b1      	b.n	800564e <__sflush_r+0x1a>
 80056ea:	89a3      	ldrh	r3, [r4, #12]
 80056ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056f0:	81a3      	strh	r3, [r4, #12]
 80056f2:	e7ad      	b.n	8005650 <__sflush_r+0x1c>
 80056f4:	690f      	ldr	r7, [r1, #16]
 80056f6:	2f00      	cmp	r7, #0
 80056f8:	d0a9      	beq.n	800564e <__sflush_r+0x1a>
 80056fa:	0793      	lsls	r3, r2, #30
 80056fc:	680e      	ldr	r6, [r1, #0]
 80056fe:	bf08      	it	eq
 8005700:	694b      	ldreq	r3, [r1, #20]
 8005702:	600f      	str	r7, [r1, #0]
 8005704:	bf18      	it	ne
 8005706:	2300      	movne	r3, #0
 8005708:	eba6 0807 	sub.w	r8, r6, r7
 800570c:	608b      	str	r3, [r1, #8]
 800570e:	f1b8 0f00 	cmp.w	r8, #0
 8005712:	dd9c      	ble.n	800564e <__sflush_r+0x1a>
 8005714:	6a21      	ldr	r1, [r4, #32]
 8005716:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005718:	4643      	mov	r3, r8
 800571a:	463a      	mov	r2, r7
 800571c:	4628      	mov	r0, r5
 800571e:	47b0      	blx	r6
 8005720:	2800      	cmp	r0, #0
 8005722:	dc06      	bgt.n	8005732 <__sflush_r+0xfe>
 8005724:	89a3      	ldrh	r3, [r4, #12]
 8005726:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800572a:	81a3      	strh	r3, [r4, #12]
 800572c:	f04f 30ff 	mov.w	r0, #4294967295
 8005730:	e78e      	b.n	8005650 <__sflush_r+0x1c>
 8005732:	4407      	add	r7, r0
 8005734:	eba8 0800 	sub.w	r8, r8, r0
 8005738:	e7e9      	b.n	800570e <__sflush_r+0xda>
 800573a:	bf00      	nop
 800573c:	20400001 	.word	0x20400001

08005740 <_fflush_r>:
 8005740:	b538      	push	{r3, r4, r5, lr}
 8005742:	690b      	ldr	r3, [r1, #16]
 8005744:	4605      	mov	r5, r0
 8005746:	460c      	mov	r4, r1
 8005748:	b913      	cbnz	r3, 8005750 <_fflush_r+0x10>
 800574a:	2500      	movs	r5, #0
 800574c:	4628      	mov	r0, r5
 800574e:	bd38      	pop	{r3, r4, r5, pc}
 8005750:	b118      	cbz	r0, 800575a <_fflush_r+0x1a>
 8005752:	6983      	ldr	r3, [r0, #24]
 8005754:	b90b      	cbnz	r3, 800575a <_fflush_r+0x1a>
 8005756:	f000 f887 	bl	8005868 <__sinit>
 800575a:	4b14      	ldr	r3, [pc, #80]	; (80057ac <_fflush_r+0x6c>)
 800575c:	429c      	cmp	r4, r3
 800575e:	d11b      	bne.n	8005798 <_fflush_r+0x58>
 8005760:	686c      	ldr	r4, [r5, #4]
 8005762:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d0ef      	beq.n	800574a <_fflush_r+0xa>
 800576a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800576c:	07d0      	lsls	r0, r2, #31
 800576e:	d404      	bmi.n	800577a <_fflush_r+0x3a>
 8005770:	0599      	lsls	r1, r3, #22
 8005772:	d402      	bmi.n	800577a <_fflush_r+0x3a>
 8005774:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005776:	f000 f915 	bl	80059a4 <__retarget_lock_acquire_recursive>
 800577a:	4628      	mov	r0, r5
 800577c:	4621      	mov	r1, r4
 800577e:	f7ff ff59 	bl	8005634 <__sflush_r>
 8005782:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005784:	07da      	lsls	r2, r3, #31
 8005786:	4605      	mov	r5, r0
 8005788:	d4e0      	bmi.n	800574c <_fflush_r+0xc>
 800578a:	89a3      	ldrh	r3, [r4, #12]
 800578c:	059b      	lsls	r3, r3, #22
 800578e:	d4dd      	bmi.n	800574c <_fflush_r+0xc>
 8005790:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005792:	f000 f908 	bl	80059a6 <__retarget_lock_release_recursive>
 8005796:	e7d9      	b.n	800574c <_fflush_r+0xc>
 8005798:	4b05      	ldr	r3, [pc, #20]	; (80057b0 <_fflush_r+0x70>)
 800579a:	429c      	cmp	r4, r3
 800579c:	d101      	bne.n	80057a2 <_fflush_r+0x62>
 800579e:	68ac      	ldr	r4, [r5, #8]
 80057a0:	e7df      	b.n	8005762 <_fflush_r+0x22>
 80057a2:	4b04      	ldr	r3, [pc, #16]	; (80057b4 <_fflush_r+0x74>)
 80057a4:	429c      	cmp	r4, r3
 80057a6:	bf08      	it	eq
 80057a8:	68ec      	ldreq	r4, [r5, #12]
 80057aa:	e7da      	b.n	8005762 <_fflush_r+0x22>
 80057ac:	080063dc 	.word	0x080063dc
 80057b0:	080063fc 	.word	0x080063fc
 80057b4:	080063bc 	.word	0x080063bc

080057b8 <std>:
 80057b8:	2300      	movs	r3, #0
 80057ba:	b510      	push	{r4, lr}
 80057bc:	4604      	mov	r4, r0
 80057be:	e9c0 3300 	strd	r3, r3, [r0]
 80057c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80057c6:	6083      	str	r3, [r0, #8]
 80057c8:	8181      	strh	r1, [r0, #12]
 80057ca:	6643      	str	r3, [r0, #100]	; 0x64
 80057cc:	81c2      	strh	r2, [r0, #14]
 80057ce:	6183      	str	r3, [r0, #24]
 80057d0:	4619      	mov	r1, r3
 80057d2:	2208      	movs	r2, #8
 80057d4:	305c      	adds	r0, #92	; 0x5c
 80057d6:	f7ff fdd7 	bl	8005388 <memset>
 80057da:	4b05      	ldr	r3, [pc, #20]	; (80057f0 <std+0x38>)
 80057dc:	6263      	str	r3, [r4, #36]	; 0x24
 80057de:	4b05      	ldr	r3, [pc, #20]	; (80057f4 <std+0x3c>)
 80057e0:	62a3      	str	r3, [r4, #40]	; 0x28
 80057e2:	4b05      	ldr	r3, [pc, #20]	; (80057f8 <std+0x40>)
 80057e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80057e6:	4b05      	ldr	r3, [pc, #20]	; (80057fc <std+0x44>)
 80057e8:	6224      	str	r4, [r4, #32]
 80057ea:	6323      	str	r3, [r4, #48]	; 0x30
 80057ec:	bd10      	pop	{r4, pc}
 80057ee:	bf00      	nop
 80057f0:	080061c1 	.word	0x080061c1
 80057f4:	080061e3 	.word	0x080061e3
 80057f8:	0800621b 	.word	0x0800621b
 80057fc:	0800623f 	.word	0x0800623f

08005800 <_cleanup_r>:
 8005800:	4901      	ldr	r1, [pc, #4]	; (8005808 <_cleanup_r+0x8>)
 8005802:	f000 b8af 	b.w	8005964 <_fwalk_reent>
 8005806:	bf00      	nop
 8005808:	08005741 	.word	0x08005741

0800580c <__sfmoreglue>:
 800580c:	b570      	push	{r4, r5, r6, lr}
 800580e:	1e4a      	subs	r2, r1, #1
 8005810:	2568      	movs	r5, #104	; 0x68
 8005812:	4355      	muls	r5, r2
 8005814:	460e      	mov	r6, r1
 8005816:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800581a:	f000 f979 	bl	8005b10 <_malloc_r>
 800581e:	4604      	mov	r4, r0
 8005820:	b140      	cbz	r0, 8005834 <__sfmoreglue+0x28>
 8005822:	2100      	movs	r1, #0
 8005824:	e9c0 1600 	strd	r1, r6, [r0]
 8005828:	300c      	adds	r0, #12
 800582a:	60a0      	str	r0, [r4, #8]
 800582c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005830:	f7ff fdaa 	bl	8005388 <memset>
 8005834:	4620      	mov	r0, r4
 8005836:	bd70      	pop	{r4, r5, r6, pc}

08005838 <__sfp_lock_acquire>:
 8005838:	4801      	ldr	r0, [pc, #4]	; (8005840 <__sfp_lock_acquire+0x8>)
 800583a:	f000 b8b3 	b.w	80059a4 <__retarget_lock_acquire_recursive>
 800583e:	bf00      	nop
 8005840:	20000200 	.word	0x20000200

08005844 <__sfp_lock_release>:
 8005844:	4801      	ldr	r0, [pc, #4]	; (800584c <__sfp_lock_release+0x8>)
 8005846:	f000 b8ae 	b.w	80059a6 <__retarget_lock_release_recursive>
 800584a:	bf00      	nop
 800584c:	20000200 	.word	0x20000200

08005850 <__sinit_lock_acquire>:
 8005850:	4801      	ldr	r0, [pc, #4]	; (8005858 <__sinit_lock_acquire+0x8>)
 8005852:	f000 b8a7 	b.w	80059a4 <__retarget_lock_acquire_recursive>
 8005856:	bf00      	nop
 8005858:	200001fb 	.word	0x200001fb

0800585c <__sinit_lock_release>:
 800585c:	4801      	ldr	r0, [pc, #4]	; (8005864 <__sinit_lock_release+0x8>)
 800585e:	f000 b8a2 	b.w	80059a6 <__retarget_lock_release_recursive>
 8005862:	bf00      	nop
 8005864:	200001fb 	.word	0x200001fb

08005868 <__sinit>:
 8005868:	b510      	push	{r4, lr}
 800586a:	4604      	mov	r4, r0
 800586c:	f7ff fff0 	bl	8005850 <__sinit_lock_acquire>
 8005870:	69a3      	ldr	r3, [r4, #24]
 8005872:	b11b      	cbz	r3, 800587c <__sinit+0x14>
 8005874:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005878:	f7ff bff0 	b.w	800585c <__sinit_lock_release>
 800587c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005880:	6523      	str	r3, [r4, #80]	; 0x50
 8005882:	4b13      	ldr	r3, [pc, #76]	; (80058d0 <__sinit+0x68>)
 8005884:	4a13      	ldr	r2, [pc, #76]	; (80058d4 <__sinit+0x6c>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	62a2      	str	r2, [r4, #40]	; 0x28
 800588a:	42a3      	cmp	r3, r4
 800588c:	bf04      	itt	eq
 800588e:	2301      	moveq	r3, #1
 8005890:	61a3      	streq	r3, [r4, #24]
 8005892:	4620      	mov	r0, r4
 8005894:	f000 f820 	bl	80058d8 <__sfp>
 8005898:	6060      	str	r0, [r4, #4]
 800589a:	4620      	mov	r0, r4
 800589c:	f000 f81c 	bl	80058d8 <__sfp>
 80058a0:	60a0      	str	r0, [r4, #8]
 80058a2:	4620      	mov	r0, r4
 80058a4:	f000 f818 	bl	80058d8 <__sfp>
 80058a8:	2200      	movs	r2, #0
 80058aa:	60e0      	str	r0, [r4, #12]
 80058ac:	2104      	movs	r1, #4
 80058ae:	6860      	ldr	r0, [r4, #4]
 80058b0:	f7ff ff82 	bl	80057b8 <std>
 80058b4:	68a0      	ldr	r0, [r4, #8]
 80058b6:	2201      	movs	r2, #1
 80058b8:	2109      	movs	r1, #9
 80058ba:	f7ff ff7d 	bl	80057b8 <std>
 80058be:	68e0      	ldr	r0, [r4, #12]
 80058c0:	2202      	movs	r2, #2
 80058c2:	2112      	movs	r1, #18
 80058c4:	f7ff ff78 	bl	80057b8 <std>
 80058c8:	2301      	movs	r3, #1
 80058ca:	61a3      	str	r3, [r4, #24]
 80058cc:	e7d2      	b.n	8005874 <__sinit+0xc>
 80058ce:	bf00      	nop
 80058d0:	080063b8 	.word	0x080063b8
 80058d4:	08005801 	.word	0x08005801

080058d8 <__sfp>:
 80058d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058da:	4607      	mov	r7, r0
 80058dc:	f7ff ffac 	bl	8005838 <__sfp_lock_acquire>
 80058e0:	4b1e      	ldr	r3, [pc, #120]	; (800595c <__sfp+0x84>)
 80058e2:	681e      	ldr	r6, [r3, #0]
 80058e4:	69b3      	ldr	r3, [r6, #24]
 80058e6:	b913      	cbnz	r3, 80058ee <__sfp+0x16>
 80058e8:	4630      	mov	r0, r6
 80058ea:	f7ff ffbd 	bl	8005868 <__sinit>
 80058ee:	3648      	adds	r6, #72	; 0x48
 80058f0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80058f4:	3b01      	subs	r3, #1
 80058f6:	d503      	bpl.n	8005900 <__sfp+0x28>
 80058f8:	6833      	ldr	r3, [r6, #0]
 80058fa:	b30b      	cbz	r3, 8005940 <__sfp+0x68>
 80058fc:	6836      	ldr	r6, [r6, #0]
 80058fe:	e7f7      	b.n	80058f0 <__sfp+0x18>
 8005900:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005904:	b9d5      	cbnz	r5, 800593c <__sfp+0x64>
 8005906:	4b16      	ldr	r3, [pc, #88]	; (8005960 <__sfp+0x88>)
 8005908:	60e3      	str	r3, [r4, #12]
 800590a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800590e:	6665      	str	r5, [r4, #100]	; 0x64
 8005910:	f000 f847 	bl	80059a2 <__retarget_lock_init_recursive>
 8005914:	f7ff ff96 	bl	8005844 <__sfp_lock_release>
 8005918:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800591c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005920:	6025      	str	r5, [r4, #0]
 8005922:	61a5      	str	r5, [r4, #24]
 8005924:	2208      	movs	r2, #8
 8005926:	4629      	mov	r1, r5
 8005928:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800592c:	f7ff fd2c 	bl	8005388 <memset>
 8005930:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005934:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005938:	4620      	mov	r0, r4
 800593a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800593c:	3468      	adds	r4, #104	; 0x68
 800593e:	e7d9      	b.n	80058f4 <__sfp+0x1c>
 8005940:	2104      	movs	r1, #4
 8005942:	4638      	mov	r0, r7
 8005944:	f7ff ff62 	bl	800580c <__sfmoreglue>
 8005948:	4604      	mov	r4, r0
 800594a:	6030      	str	r0, [r6, #0]
 800594c:	2800      	cmp	r0, #0
 800594e:	d1d5      	bne.n	80058fc <__sfp+0x24>
 8005950:	f7ff ff78 	bl	8005844 <__sfp_lock_release>
 8005954:	230c      	movs	r3, #12
 8005956:	603b      	str	r3, [r7, #0]
 8005958:	e7ee      	b.n	8005938 <__sfp+0x60>
 800595a:	bf00      	nop
 800595c:	080063b8 	.word	0x080063b8
 8005960:	ffff0001 	.word	0xffff0001

08005964 <_fwalk_reent>:
 8005964:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005968:	4606      	mov	r6, r0
 800596a:	4688      	mov	r8, r1
 800596c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005970:	2700      	movs	r7, #0
 8005972:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005976:	f1b9 0901 	subs.w	r9, r9, #1
 800597a:	d505      	bpl.n	8005988 <_fwalk_reent+0x24>
 800597c:	6824      	ldr	r4, [r4, #0]
 800597e:	2c00      	cmp	r4, #0
 8005980:	d1f7      	bne.n	8005972 <_fwalk_reent+0xe>
 8005982:	4638      	mov	r0, r7
 8005984:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005988:	89ab      	ldrh	r3, [r5, #12]
 800598a:	2b01      	cmp	r3, #1
 800598c:	d907      	bls.n	800599e <_fwalk_reent+0x3a>
 800598e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005992:	3301      	adds	r3, #1
 8005994:	d003      	beq.n	800599e <_fwalk_reent+0x3a>
 8005996:	4629      	mov	r1, r5
 8005998:	4630      	mov	r0, r6
 800599a:	47c0      	blx	r8
 800599c:	4307      	orrs	r7, r0
 800599e:	3568      	adds	r5, #104	; 0x68
 80059a0:	e7e9      	b.n	8005976 <_fwalk_reent+0x12>

080059a2 <__retarget_lock_init_recursive>:
 80059a2:	4770      	bx	lr

080059a4 <__retarget_lock_acquire_recursive>:
 80059a4:	4770      	bx	lr

080059a6 <__retarget_lock_release_recursive>:
 80059a6:	4770      	bx	lr

080059a8 <__swhatbuf_r>:
 80059a8:	b570      	push	{r4, r5, r6, lr}
 80059aa:	460e      	mov	r6, r1
 80059ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059b0:	2900      	cmp	r1, #0
 80059b2:	b096      	sub	sp, #88	; 0x58
 80059b4:	4614      	mov	r4, r2
 80059b6:	461d      	mov	r5, r3
 80059b8:	da07      	bge.n	80059ca <__swhatbuf_r+0x22>
 80059ba:	2300      	movs	r3, #0
 80059bc:	602b      	str	r3, [r5, #0]
 80059be:	89b3      	ldrh	r3, [r6, #12]
 80059c0:	061a      	lsls	r2, r3, #24
 80059c2:	d410      	bmi.n	80059e6 <__swhatbuf_r+0x3e>
 80059c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80059c8:	e00e      	b.n	80059e8 <__swhatbuf_r+0x40>
 80059ca:	466a      	mov	r2, sp
 80059cc:	f000 fc5e 	bl	800628c <_fstat_r>
 80059d0:	2800      	cmp	r0, #0
 80059d2:	dbf2      	blt.n	80059ba <__swhatbuf_r+0x12>
 80059d4:	9a01      	ldr	r2, [sp, #4]
 80059d6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80059da:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80059de:	425a      	negs	r2, r3
 80059e0:	415a      	adcs	r2, r3
 80059e2:	602a      	str	r2, [r5, #0]
 80059e4:	e7ee      	b.n	80059c4 <__swhatbuf_r+0x1c>
 80059e6:	2340      	movs	r3, #64	; 0x40
 80059e8:	2000      	movs	r0, #0
 80059ea:	6023      	str	r3, [r4, #0]
 80059ec:	b016      	add	sp, #88	; 0x58
 80059ee:	bd70      	pop	{r4, r5, r6, pc}

080059f0 <__smakebuf_r>:
 80059f0:	898b      	ldrh	r3, [r1, #12]
 80059f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80059f4:	079d      	lsls	r5, r3, #30
 80059f6:	4606      	mov	r6, r0
 80059f8:	460c      	mov	r4, r1
 80059fa:	d507      	bpl.n	8005a0c <__smakebuf_r+0x1c>
 80059fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005a00:	6023      	str	r3, [r4, #0]
 8005a02:	6123      	str	r3, [r4, #16]
 8005a04:	2301      	movs	r3, #1
 8005a06:	6163      	str	r3, [r4, #20]
 8005a08:	b002      	add	sp, #8
 8005a0a:	bd70      	pop	{r4, r5, r6, pc}
 8005a0c:	ab01      	add	r3, sp, #4
 8005a0e:	466a      	mov	r2, sp
 8005a10:	f7ff ffca 	bl	80059a8 <__swhatbuf_r>
 8005a14:	9900      	ldr	r1, [sp, #0]
 8005a16:	4605      	mov	r5, r0
 8005a18:	4630      	mov	r0, r6
 8005a1a:	f000 f879 	bl	8005b10 <_malloc_r>
 8005a1e:	b948      	cbnz	r0, 8005a34 <__smakebuf_r+0x44>
 8005a20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a24:	059a      	lsls	r2, r3, #22
 8005a26:	d4ef      	bmi.n	8005a08 <__smakebuf_r+0x18>
 8005a28:	f023 0303 	bic.w	r3, r3, #3
 8005a2c:	f043 0302 	orr.w	r3, r3, #2
 8005a30:	81a3      	strh	r3, [r4, #12]
 8005a32:	e7e3      	b.n	80059fc <__smakebuf_r+0xc>
 8005a34:	4b0d      	ldr	r3, [pc, #52]	; (8005a6c <__smakebuf_r+0x7c>)
 8005a36:	62b3      	str	r3, [r6, #40]	; 0x28
 8005a38:	89a3      	ldrh	r3, [r4, #12]
 8005a3a:	6020      	str	r0, [r4, #0]
 8005a3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a40:	81a3      	strh	r3, [r4, #12]
 8005a42:	9b00      	ldr	r3, [sp, #0]
 8005a44:	6163      	str	r3, [r4, #20]
 8005a46:	9b01      	ldr	r3, [sp, #4]
 8005a48:	6120      	str	r0, [r4, #16]
 8005a4a:	b15b      	cbz	r3, 8005a64 <__smakebuf_r+0x74>
 8005a4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a50:	4630      	mov	r0, r6
 8005a52:	f000 fc2d 	bl	80062b0 <_isatty_r>
 8005a56:	b128      	cbz	r0, 8005a64 <__smakebuf_r+0x74>
 8005a58:	89a3      	ldrh	r3, [r4, #12]
 8005a5a:	f023 0303 	bic.w	r3, r3, #3
 8005a5e:	f043 0301 	orr.w	r3, r3, #1
 8005a62:	81a3      	strh	r3, [r4, #12]
 8005a64:	89a0      	ldrh	r0, [r4, #12]
 8005a66:	4305      	orrs	r5, r0
 8005a68:	81a5      	strh	r5, [r4, #12]
 8005a6a:	e7cd      	b.n	8005a08 <__smakebuf_r+0x18>
 8005a6c:	08005801 	.word	0x08005801

08005a70 <_free_r>:
 8005a70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005a72:	2900      	cmp	r1, #0
 8005a74:	d048      	beq.n	8005b08 <_free_r+0x98>
 8005a76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a7a:	9001      	str	r0, [sp, #4]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	f1a1 0404 	sub.w	r4, r1, #4
 8005a82:	bfb8      	it	lt
 8005a84:	18e4      	addlt	r4, r4, r3
 8005a86:	f000 fc35 	bl	80062f4 <__malloc_lock>
 8005a8a:	4a20      	ldr	r2, [pc, #128]	; (8005b0c <_free_r+0x9c>)
 8005a8c:	9801      	ldr	r0, [sp, #4]
 8005a8e:	6813      	ldr	r3, [r2, #0]
 8005a90:	4615      	mov	r5, r2
 8005a92:	b933      	cbnz	r3, 8005aa2 <_free_r+0x32>
 8005a94:	6063      	str	r3, [r4, #4]
 8005a96:	6014      	str	r4, [r2, #0]
 8005a98:	b003      	add	sp, #12
 8005a9a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005a9e:	f000 bc2f 	b.w	8006300 <__malloc_unlock>
 8005aa2:	42a3      	cmp	r3, r4
 8005aa4:	d90b      	bls.n	8005abe <_free_r+0x4e>
 8005aa6:	6821      	ldr	r1, [r4, #0]
 8005aa8:	1862      	adds	r2, r4, r1
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	bf04      	itt	eq
 8005aae:	681a      	ldreq	r2, [r3, #0]
 8005ab0:	685b      	ldreq	r3, [r3, #4]
 8005ab2:	6063      	str	r3, [r4, #4]
 8005ab4:	bf04      	itt	eq
 8005ab6:	1852      	addeq	r2, r2, r1
 8005ab8:	6022      	streq	r2, [r4, #0]
 8005aba:	602c      	str	r4, [r5, #0]
 8005abc:	e7ec      	b.n	8005a98 <_free_r+0x28>
 8005abe:	461a      	mov	r2, r3
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	b10b      	cbz	r3, 8005ac8 <_free_r+0x58>
 8005ac4:	42a3      	cmp	r3, r4
 8005ac6:	d9fa      	bls.n	8005abe <_free_r+0x4e>
 8005ac8:	6811      	ldr	r1, [r2, #0]
 8005aca:	1855      	adds	r5, r2, r1
 8005acc:	42a5      	cmp	r5, r4
 8005ace:	d10b      	bne.n	8005ae8 <_free_r+0x78>
 8005ad0:	6824      	ldr	r4, [r4, #0]
 8005ad2:	4421      	add	r1, r4
 8005ad4:	1854      	adds	r4, r2, r1
 8005ad6:	42a3      	cmp	r3, r4
 8005ad8:	6011      	str	r1, [r2, #0]
 8005ada:	d1dd      	bne.n	8005a98 <_free_r+0x28>
 8005adc:	681c      	ldr	r4, [r3, #0]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	6053      	str	r3, [r2, #4]
 8005ae2:	4421      	add	r1, r4
 8005ae4:	6011      	str	r1, [r2, #0]
 8005ae6:	e7d7      	b.n	8005a98 <_free_r+0x28>
 8005ae8:	d902      	bls.n	8005af0 <_free_r+0x80>
 8005aea:	230c      	movs	r3, #12
 8005aec:	6003      	str	r3, [r0, #0]
 8005aee:	e7d3      	b.n	8005a98 <_free_r+0x28>
 8005af0:	6825      	ldr	r5, [r4, #0]
 8005af2:	1961      	adds	r1, r4, r5
 8005af4:	428b      	cmp	r3, r1
 8005af6:	bf04      	itt	eq
 8005af8:	6819      	ldreq	r1, [r3, #0]
 8005afa:	685b      	ldreq	r3, [r3, #4]
 8005afc:	6063      	str	r3, [r4, #4]
 8005afe:	bf04      	itt	eq
 8005b00:	1949      	addeq	r1, r1, r5
 8005b02:	6021      	streq	r1, [r4, #0]
 8005b04:	6054      	str	r4, [r2, #4]
 8005b06:	e7c7      	b.n	8005a98 <_free_r+0x28>
 8005b08:	b003      	add	sp, #12
 8005b0a:	bd30      	pop	{r4, r5, pc}
 8005b0c:	20000098 	.word	0x20000098

08005b10 <_malloc_r>:
 8005b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b12:	1ccd      	adds	r5, r1, #3
 8005b14:	f025 0503 	bic.w	r5, r5, #3
 8005b18:	3508      	adds	r5, #8
 8005b1a:	2d0c      	cmp	r5, #12
 8005b1c:	bf38      	it	cc
 8005b1e:	250c      	movcc	r5, #12
 8005b20:	2d00      	cmp	r5, #0
 8005b22:	4606      	mov	r6, r0
 8005b24:	db01      	blt.n	8005b2a <_malloc_r+0x1a>
 8005b26:	42a9      	cmp	r1, r5
 8005b28:	d903      	bls.n	8005b32 <_malloc_r+0x22>
 8005b2a:	230c      	movs	r3, #12
 8005b2c:	6033      	str	r3, [r6, #0]
 8005b2e:	2000      	movs	r0, #0
 8005b30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b32:	f000 fbdf 	bl	80062f4 <__malloc_lock>
 8005b36:	4921      	ldr	r1, [pc, #132]	; (8005bbc <_malloc_r+0xac>)
 8005b38:	680a      	ldr	r2, [r1, #0]
 8005b3a:	4614      	mov	r4, r2
 8005b3c:	b99c      	cbnz	r4, 8005b66 <_malloc_r+0x56>
 8005b3e:	4f20      	ldr	r7, [pc, #128]	; (8005bc0 <_malloc_r+0xb0>)
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	b923      	cbnz	r3, 8005b4e <_malloc_r+0x3e>
 8005b44:	4621      	mov	r1, r4
 8005b46:	4630      	mov	r0, r6
 8005b48:	f000 fb2a 	bl	80061a0 <_sbrk_r>
 8005b4c:	6038      	str	r0, [r7, #0]
 8005b4e:	4629      	mov	r1, r5
 8005b50:	4630      	mov	r0, r6
 8005b52:	f000 fb25 	bl	80061a0 <_sbrk_r>
 8005b56:	1c43      	adds	r3, r0, #1
 8005b58:	d123      	bne.n	8005ba2 <_malloc_r+0x92>
 8005b5a:	230c      	movs	r3, #12
 8005b5c:	6033      	str	r3, [r6, #0]
 8005b5e:	4630      	mov	r0, r6
 8005b60:	f000 fbce 	bl	8006300 <__malloc_unlock>
 8005b64:	e7e3      	b.n	8005b2e <_malloc_r+0x1e>
 8005b66:	6823      	ldr	r3, [r4, #0]
 8005b68:	1b5b      	subs	r3, r3, r5
 8005b6a:	d417      	bmi.n	8005b9c <_malloc_r+0x8c>
 8005b6c:	2b0b      	cmp	r3, #11
 8005b6e:	d903      	bls.n	8005b78 <_malloc_r+0x68>
 8005b70:	6023      	str	r3, [r4, #0]
 8005b72:	441c      	add	r4, r3
 8005b74:	6025      	str	r5, [r4, #0]
 8005b76:	e004      	b.n	8005b82 <_malloc_r+0x72>
 8005b78:	6863      	ldr	r3, [r4, #4]
 8005b7a:	42a2      	cmp	r2, r4
 8005b7c:	bf0c      	ite	eq
 8005b7e:	600b      	streq	r3, [r1, #0]
 8005b80:	6053      	strne	r3, [r2, #4]
 8005b82:	4630      	mov	r0, r6
 8005b84:	f000 fbbc 	bl	8006300 <__malloc_unlock>
 8005b88:	f104 000b 	add.w	r0, r4, #11
 8005b8c:	1d23      	adds	r3, r4, #4
 8005b8e:	f020 0007 	bic.w	r0, r0, #7
 8005b92:	1ac2      	subs	r2, r0, r3
 8005b94:	d0cc      	beq.n	8005b30 <_malloc_r+0x20>
 8005b96:	1a1b      	subs	r3, r3, r0
 8005b98:	50a3      	str	r3, [r4, r2]
 8005b9a:	e7c9      	b.n	8005b30 <_malloc_r+0x20>
 8005b9c:	4622      	mov	r2, r4
 8005b9e:	6864      	ldr	r4, [r4, #4]
 8005ba0:	e7cc      	b.n	8005b3c <_malloc_r+0x2c>
 8005ba2:	1cc4      	adds	r4, r0, #3
 8005ba4:	f024 0403 	bic.w	r4, r4, #3
 8005ba8:	42a0      	cmp	r0, r4
 8005baa:	d0e3      	beq.n	8005b74 <_malloc_r+0x64>
 8005bac:	1a21      	subs	r1, r4, r0
 8005bae:	4630      	mov	r0, r6
 8005bb0:	f000 faf6 	bl	80061a0 <_sbrk_r>
 8005bb4:	3001      	adds	r0, #1
 8005bb6:	d1dd      	bne.n	8005b74 <_malloc_r+0x64>
 8005bb8:	e7cf      	b.n	8005b5a <_malloc_r+0x4a>
 8005bba:	bf00      	nop
 8005bbc:	20000098 	.word	0x20000098
 8005bc0:	2000009c 	.word	0x2000009c

08005bc4 <__sfputc_r>:
 8005bc4:	6893      	ldr	r3, [r2, #8]
 8005bc6:	3b01      	subs	r3, #1
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	b410      	push	{r4}
 8005bcc:	6093      	str	r3, [r2, #8]
 8005bce:	da08      	bge.n	8005be2 <__sfputc_r+0x1e>
 8005bd0:	6994      	ldr	r4, [r2, #24]
 8005bd2:	42a3      	cmp	r3, r4
 8005bd4:	db01      	blt.n	8005bda <__sfputc_r+0x16>
 8005bd6:	290a      	cmp	r1, #10
 8005bd8:	d103      	bne.n	8005be2 <__sfputc_r+0x1e>
 8005bda:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005bde:	f7ff bc69 	b.w	80054b4 <__swbuf_r>
 8005be2:	6813      	ldr	r3, [r2, #0]
 8005be4:	1c58      	adds	r0, r3, #1
 8005be6:	6010      	str	r0, [r2, #0]
 8005be8:	7019      	strb	r1, [r3, #0]
 8005bea:	4608      	mov	r0, r1
 8005bec:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005bf0:	4770      	bx	lr

08005bf2 <__sfputs_r>:
 8005bf2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bf4:	4606      	mov	r6, r0
 8005bf6:	460f      	mov	r7, r1
 8005bf8:	4614      	mov	r4, r2
 8005bfa:	18d5      	adds	r5, r2, r3
 8005bfc:	42ac      	cmp	r4, r5
 8005bfe:	d101      	bne.n	8005c04 <__sfputs_r+0x12>
 8005c00:	2000      	movs	r0, #0
 8005c02:	e007      	b.n	8005c14 <__sfputs_r+0x22>
 8005c04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c08:	463a      	mov	r2, r7
 8005c0a:	4630      	mov	r0, r6
 8005c0c:	f7ff ffda 	bl	8005bc4 <__sfputc_r>
 8005c10:	1c43      	adds	r3, r0, #1
 8005c12:	d1f3      	bne.n	8005bfc <__sfputs_r+0xa>
 8005c14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005c18 <_vfiprintf_r>:
 8005c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c1c:	460d      	mov	r5, r1
 8005c1e:	b09d      	sub	sp, #116	; 0x74
 8005c20:	4614      	mov	r4, r2
 8005c22:	4698      	mov	r8, r3
 8005c24:	4606      	mov	r6, r0
 8005c26:	b118      	cbz	r0, 8005c30 <_vfiprintf_r+0x18>
 8005c28:	6983      	ldr	r3, [r0, #24]
 8005c2a:	b90b      	cbnz	r3, 8005c30 <_vfiprintf_r+0x18>
 8005c2c:	f7ff fe1c 	bl	8005868 <__sinit>
 8005c30:	4b89      	ldr	r3, [pc, #548]	; (8005e58 <_vfiprintf_r+0x240>)
 8005c32:	429d      	cmp	r5, r3
 8005c34:	d11b      	bne.n	8005c6e <_vfiprintf_r+0x56>
 8005c36:	6875      	ldr	r5, [r6, #4]
 8005c38:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005c3a:	07d9      	lsls	r1, r3, #31
 8005c3c:	d405      	bmi.n	8005c4a <_vfiprintf_r+0x32>
 8005c3e:	89ab      	ldrh	r3, [r5, #12]
 8005c40:	059a      	lsls	r2, r3, #22
 8005c42:	d402      	bmi.n	8005c4a <_vfiprintf_r+0x32>
 8005c44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005c46:	f7ff fead 	bl	80059a4 <__retarget_lock_acquire_recursive>
 8005c4a:	89ab      	ldrh	r3, [r5, #12]
 8005c4c:	071b      	lsls	r3, r3, #28
 8005c4e:	d501      	bpl.n	8005c54 <_vfiprintf_r+0x3c>
 8005c50:	692b      	ldr	r3, [r5, #16]
 8005c52:	b9eb      	cbnz	r3, 8005c90 <_vfiprintf_r+0x78>
 8005c54:	4629      	mov	r1, r5
 8005c56:	4630      	mov	r0, r6
 8005c58:	f7ff fc7e 	bl	8005558 <__swsetup_r>
 8005c5c:	b1c0      	cbz	r0, 8005c90 <_vfiprintf_r+0x78>
 8005c5e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005c60:	07dc      	lsls	r4, r3, #31
 8005c62:	d50e      	bpl.n	8005c82 <_vfiprintf_r+0x6a>
 8005c64:	f04f 30ff 	mov.w	r0, #4294967295
 8005c68:	b01d      	add	sp, #116	; 0x74
 8005c6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c6e:	4b7b      	ldr	r3, [pc, #492]	; (8005e5c <_vfiprintf_r+0x244>)
 8005c70:	429d      	cmp	r5, r3
 8005c72:	d101      	bne.n	8005c78 <_vfiprintf_r+0x60>
 8005c74:	68b5      	ldr	r5, [r6, #8]
 8005c76:	e7df      	b.n	8005c38 <_vfiprintf_r+0x20>
 8005c78:	4b79      	ldr	r3, [pc, #484]	; (8005e60 <_vfiprintf_r+0x248>)
 8005c7a:	429d      	cmp	r5, r3
 8005c7c:	bf08      	it	eq
 8005c7e:	68f5      	ldreq	r5, [r6, #12]
 8005c80:	e7da      	b.n	8005c38 <_vfiprintf_r+0x20>
 8005c82:	89ab      	ldrh	r3, [r5, #12]
 8005c84:	0598      	lsls	r0, r3, #22
 8005c86:	d4ed      	bmi.n	8005c64 <_vfiprintf_r+0x4c>
 8005c88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005c8a:	f7ff fe8c 	bl	80059a6 <__retarget_lock_release_recursive>
 8005c8e:	e7e9      	b.n	8005c64 <_vfiprintf_r+0x4c>
 8005c90:	2300      	movs	r3, #0
 8005c92:	9309      	str	r3, [sp, #36]	; 0x24
 8005c94:	2320      	movs	r3, #32
 8005c96:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005c9a:	f8cd 800c 	str.w	r8, [sp, #12]
 8005c9e:	2330      	movs	r3, #48	; 0x30
 8005ca0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005e64 <_vfiprintf_r+0x24c>
 8005ca4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005ca8:	f04f 0901 	mov.w	r9, #1
 8005cac:	4623      	mov	r3, r4
 8005cae:	469a      	mov	sl, r3
 8005cb0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005cb4:	b10a      	cbz	r2, 8005cba <_vfiprintf_r+0xa2>
 8005cb6:	2a25      	cmp	r2, #37	; 0x25
 8005cb8:	d1f9      	bne.n	8005cae <_vfiprintf_r+0x96>
 8005cba:	ebba 0b04 	subs.w	fp, sl, r4
 8005cbe:	d00b      	beq.n	8005cd8 <_vfiprintf_r+0xc0>
 8005cc0:	465b      	mov	r3, fp
 8005cc2:	4622      	mov	r2, r4
 8005cc4:	4629      	mov	r1, r5
 8005cc6:	4630      	mov	r0, r6
 8005cc8:	f7ff ff93 	bl	8005bf2 <__sfputs_r>
 8005ccc:	3001      	adds	r0, #1
 8005cce:	f000 80aa 	beq.w	8005e26 <_vfiprintf_r+0x20e>
 8005cd2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005cd4:	445a      	add	r2, fp
 8005cd6:	9209      	str	r2, [sp, #36]	; 0x24
 8005cd8:	f89a 3000 	ldrb.w	r3, [sl]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	f000 80a2 	beq.w	8005e26 <_vfiprintf_r+0x20e>
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	f04f 32ff 	mov.w	r2, #4294967295
 8005ce8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005cec:	f10a 0a01 	add.w	sl, sl, #1
 8005cf0:	9304      	str	r3, [sp, #16]
 8005cf2:	9307      	str	r3, [sp, #28]
 8005cf4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005cf8:	931a      	str	r3, [sp, #104]	; 0x68
 8005cfa:	4654      	mov	r4, sl
 8005cfc:	2205      	movs	r2, #5
 8005cfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d02:	4858      	ldr	r0, [pc, #352]	; (8005e64 <_vfiprintf_r+0x24c>)
 8005d04:	f7fa fa74 	bl	80001f0 <memchr>
 8005d08:	9a04      	ldr	r2, [sp, #16]
 8005d0a:	b9d8      	cbnz	r0, 8005d44 <_vfiprintf_r+0x12c>
 8005d0c:	06d1      	lsls	r1, r2, #27
 8005d0e:	bf44      	itt	mi
 8005d10:	2320      	movmi	r3, #32
 8005d12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005d16:	0713      	lsls	r3, r2, #28
 8005d18:	bf44      	itt	mi
 8005d1a:	232b      	movmi	r3, #43	; 0x2b
 8005d1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005d20:	f89a 3000 	ldrb.w	r3, [sl]
 8005d24:	2b2a      	cmp	r3, #42	; 0x2a
 8005d26:	d015      	beq.n	8005d54 <_vfiprintf_r+0x13c>
 8005d28:	9a07      	ldr	r2, [sp, #28]
 8005d2a:	4654      	mov	r4, sl
 8005d2c:	2000      	movs	r0, #0
 8005d2e:	f04f 0c0a 	mov.w	ip, #10
 8005d32:	4621      	mov	r1, r4
 8005d34:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005d38:	3b30      	subs	r3, #48	; 0x30
 8005d3a:	2b09      	cmp	r3, #9
 8005d3c:	d94e      	bls.n	8005ddc <_vfiprintf_r+0x1c4>
 8005d3e:	b1b0      	cbz	r0, 8005d6e <_vfiprintf_r+0x156>
 8005d40:	9207      	str	r2, [sp, #28]
 8005d42:	e014      	b.n	8005d6e <_vfiprintf_r+0x156>
 8005d44:	eba0 0308 	sub.w	r3, r0, r8
 8005d48:	fa09 f303 	lsl.w	r3, r9, r3
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	9304      	str	r3, [sp, #16]
 8005d50:	46a2      	mov	sl, r4
 8005d52:	e7d2      	b.n	8005cfa <_vfiprintf_r+0xe2>
 8005d54:	9b03      	ldr	r3, [sp, #12]
 8005d56:	1d19      	adds	r1, r3, #4
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	9103      	str	r1, [sp, #12]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	bfbb      	ittet	lt
 8005d60:	425b      	neglt	r3, r3
 8005d62:	f042 0202 	orrlt.w	r2, r2, #2
 8005d66:	9307      	strge	r3, [sp, #28]
 8005d68:	9307      	strlt	r3, [sp, #28]
 8005d6a:	bfb8      	it	lt
 8005d6c:	9204      	strlt	r2, [sp, #16]
 8005d6e:	7823      	ldrb	r3, [r4, #0]
 8005d70:	2b2e      	cmp	r3, #46	; 0x2e
 8005d72:	d10c      	bne.n	8005d8e <_vfiprintf_r+0x176>
 8005d74:	7863      	ldrb	r3, [r4, #1]
 8005d76:	2b2a      	cmp	r3, #42	; 0x2a
 8005d78:	d135      	bne.n	8005de6 <_vfiprintf_r+0x1ce>
 8005d7a:	9b03      	ldr	r3, [sp, #12]
 8005d7c:	1d1a      	adds	r2, r3, #4
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	9203      	str	r2, [sp, #12]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	bfb8      	it	lt
 8005d86:	f04f 33ff 	movlt.w	r3, #4294967295
 8005d8a:	3402      	adds	r4, #2
 8005d8c:	9305      	str	r3, [sp, #20]
 8005d8e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005e74 <_vfiprintf_r+0x25c>
 8005d92:	7821      	ldrb	r1, [r4, #0]
 8005d94:	2203      	movs	r2, #3
 8005d96:	4650      	mov	r0, sl
 8005d98:	f7fa fa2a 	bl	80001f0 <memchr>
 8005d9c:	b140      	cbz	r0, 8005db0 <_vfiprintf_r+0x198>
 8005d9e:	2340      	movs	r3, #64	; 0x40
 8005da0:	eba0 000a 	sub.w	r0, r0, sl
 8005da4:	fa03 f000 	lsl.w	r0, r3, r0
 8005da8:	9b04      	ldr	r3, [sp, #16]
 8005daa:	4303      	orrs	r3, r0
 8005dac:	3401      	adds	r4, #1
 8005dae:	9304      	str	r3, [sp, #16]
 8005db0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005db4:	482c      	ldr	r0, [pc, #176]	; (8005e68 <_vfiprintf_r+0x250>)
 8005db6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005dba:	2206      	movs	r2, #6
 8005dbc:	f7fa fa18 	bl	80001f0 <memchr>
 8005dc0:	2800      	cmp	r0, #0
 8005dc2:	d03f      	beq.n	8005e44 <_vfiprintf_r+0x22c>
 8005dc4:	4b29      	ldr	r3, [pc, #164]	; (8005e6c <_vfiprintf_r+0x254>)
 8005dc6:	bb1b      	cbnz	r3, 8005e10 <_vfiprintf_r+0x1f8>
 8005dc8:	9b03      	ldr	r3, [sp, #12]
 8005dca:	3307      	adds	r3, #7
 8005dcc:	f023 0307 	bic.w	r3, r3, #7
 8005dd0:	3308      	adds	r3, #8
 8005dd2:	9303      	str	r3, [sp, #12]
 8005dd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005dd6:	443b      	add	r3, r7
 8005dd8:	9309      	str	r3, [sp, #36]	; 0x24
 8005dda:	e767      	b.n	8005cac <_vfiprintf_r+0x94>
 8005ddc:	fb0c 3202 	mla	r2, ip, r2, r3
 8005de0:	460c      	mov	r4, r1
 8005de2:	2001      	movs	r0, #1
 8005de4:	e7a5      	b.n	8005d32 <_vfiprintf_r+0x11a>
 8005de6:	2300      	movs	r3, #0
 8005de8:	3401      	adds	r4, #1
 8005dea:	9305      	str	r3, [sp, #20]
 8005dec:	4619      	mov	r1, r3
 8005dee:	f04f 0c0a 	mov.w	ip, #10
 8005df2:	4620      	mov	r0, r4
 8005df4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005df8:	3a30      	subs	r2, #48	; 0x30
 8005dfa:	2a09      	cmp	r2, #9
 8005dfc:	d903      	bls.n	8005e06 <_vfiprintf_r+0x1ee>
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d0c5      	beq.n	8005d8e <_vfiprintf_r+0x176>
 8005e02:	9105      	str	r1, [sp, #20]
 8005e04:	e7c3      	b.n	8005d8e <_vfiprintf_r+0x176>
 8005e06:	fb0c 2101 	mla	r1, ip, r1, r2
 8005e0a:	4604      	mov	r4, r0
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	e7f0      	b.n	8005df2 <_vfiprintf_r+0x1da>
 8005e10:	ab03      	add	r3, sp, #12
 8005e12:	9300      	str	r3, [sp, #0]
 8005e14:	462a      	mov	r2, r5
 8005e16:	4b16      	ldr	r3, [pc, #88]	; (8005e70 <_vfiprintf_r+0x258>)
 8005e18:	a904      	add	r1, sp, #16
 8005e1a:	4630      	mov	r0, r6
 8005e1c:	f3af 8000 	nop.w
 8005e20:	4607      	mov	r7, r0
 8005e22:	1c78      	adds	r0, r7, #1
 8005e24:	d1d6      	bne.n	8005dd4 <_vfiprintf_r+0x1bc>
 8005e26:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005e28:	07d9      	lsls	r1, r3, #31
 8005e2a:	d405      	bmi.n	8005e38 <_vfiprintf_r+0x220>
 8005e2c:	89ab      	ldrh	r3, [r5, #12]
 8005e2e:	059a      	lsls	r2, r3, #22
 8005e30:	d402      	bmi.n	8005e38 <_vfiprintf_r+0x220>
 8005e32:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005e34:	f7ff fdb7 	bl	80059a6 <__retarget_lock_release_recursive>
 8005e38:	89ab      	ldrh	r3, [r5, #12]
 8005e3a:	065b      	lsls	r3, r3, #25
 8005e3c:	f53f af12 	bmi.w	8005c64 <_vfiprintf_r+0x4c>
 8005e40:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005e42:	e711      	b.n	8005c68 <_vfiprintf_r+0x50>
 8005e44:	ab03      	add	r3, sp, #12
 8005e46:	9300      	str	r3, [sp, #0]
 8005e48:	462a      	mov	r2, r5
 8005e4a:	4b09      	ldr	r3, [pc, #36]	; (8005e70 <_vfiprintf_r+0x258>)
 8005e4c:	a904      	add	r1, sp, #16
 8005e4e:	4630      	mov	r0, r6
 8005e50:	f000 f880 	bl	8005f54 <_printf_i>
 8005e54:	e7e4      	b.n	8005e20 <_vfiprintf_r+0x208>
 8005e56:	bf00      	nop
 8005e58:	080063dc 	.word	0x080063dc
 8005e5c:	080063fc 	.word	0x080063fc
 8005e60:	080063bc 	.word	0x080063bc
 8005e64:	0800641c 	.word	0x0800641c
 8005e68:	08006426 	.word	0x08006426
 8005e6c:	00000000 	.word	0x00000000
 8005e70:	08005bf3 	.word	0x08005bf3
 8005e74:	08006422 	.word	0x08006422

08005e78 <_printf_common>:
 8005e78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e7c:	4616      	mov	r6, r2
 8005e7e:	4699      	mov	r9, r3
 8005e80:	688a      	ldr	r2, [r1, #8]
 8005e82:	690b      	ldr	r3, [r1, #16]
 8005e84:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	bfb8      	it	lt
 8005e8c:	4613      	movlt	r3, r2
 8005e8e:	6033      	str	r3, [r6, #0]
 8005e90:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005e94:	4607      	mov	r7, r0
 8005e96:	460c      	mov	r4, r1
 8005e98:	b10a      	cbz	r2, 8005e9e <_printf_common+0x26>
 8005e9a:	3301      	adds	r3, #1
 8005e9c:	6033      	str	r3, [r6, #0]
 8005e9e:	6823      	ldr	r3, [r4, #0]
 8005ea0:	0699      	lsls	r1, r3, #26
 8005ea2:	bf42      	ittt	mi
 8005ea4:	6833      	ldrmi	r3, [r6, #0]
 8005ea6:	3302      	addmi	r3, #2
 8005ea8:	6033      	strmi	r3, [r6, #0]
 8005eaa:	6825      	ldr	r5, [r4, #0]
 8005eac:	f015 0506 	ands.w	r5, r5, #6
 8005eb0:	d106      	bne.n	8005ec0 <_printf_common+0x48>
 8005eb2:	f104 0a19 	add.w	sl, r4, #25
 8005eb6:	68e3      	ldr	r3, [r4, #12]
 8005eb8:	6832      	ldr	r2, [r6, #0]
 8005eba:	1a9b      	subs	r3, r3, r2
 8005ebc:	42ab      	cmp	r3, r5
 8005ebe:	dc26      	bgt.n	8005f0e <_printf_common+0x96>
 8005ec0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005ec4:	1e13      	subs	r3, r2, #0
 8005ec6:	6822      	ldr	r2, [r4, #0]
 8005ec8:	bf18      	it	ne
 8005eca:	2301      	movne	r3, #1
 8005ecc:	0692      	lsls	r2, r2, #26
 8005ece:	d42b      	bmi.n	8005f28 <_printf_common+0xb0>
 8005ed0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ed4:	4649      	mov	r1, r9
 8005ed6:	4638      	mov	r0, r7
 8005ed8:	47c0      	blx	r8
 8005eda:	3001      	adds	r0, #1
 8005edc:	d01e      	beq.n	8005f1c <_printf_common+0xa4>
 8005ede:	6823      	ldr	r3, [r4, #0]
 8005ee0:	68e5      	ldr	r5, [r4, #12]
 8005ee2:	6832      	ldr	r2, [r6, #0]
 8005ee4:	f003 0306 	and.w	r3, r3, #6
 8005ee8:	2b04      	cmp	r3, #4
 8005eea:	bf08      	it	eq
 8005eec:	1aad      	subeq	r5, r5, r2
 8005eee:	68a3      	ldr	r3, [r4, #8]
 8005ef0:	6922      	ldr	r2, [r4, #16]
 8005ef2:	bf0c      	ite	eq
 8005ef4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ef8:	2500      	movne	r5, #0
 8005efa:	4293      	cmp	r3, r2
 8005efc:	bfc4      	itt	gt
 8005efe:	1a9b      	subgt	r3, r3, r2
 8005f00:	18ed      	addgt	r5, r5, r3
 8005f02:	2600      	movs	r6, #0
 8005f04:	341a      	adds	r4, #26
 8005f06:	42b5      	cmp	r5, r6
 8005f08:	d11a      	bne.n	8005f40 <_printf_common+0xc8>
 8005f0a:	2000      	movs	r0, #0
 8005f0c:	e008      	b.n	8005f20 <_printf_common+0xa8>
 8005f0e:	2301      	movs	r3, #1
 8005f10:	4652      	mov	r2, sl
 8005f12:	4649      	mov	r1, r9
 8005f14:	4638      	mov	r0, r7
 8005f16:	47c0      	blx	r8
 8005f18:	3001      	adds	r0, #1
 8005f1a:	d103      	bne.n	8005f24 <_printf_common+0xac>
 8005f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8005f20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f24:	3501      	adds	r5, #1
 8005f26:	e7c6      	b.n	8005eb6 <_printf_common+0x3e>
 8005f28:	18e1      	adds	r1, r4, r3
 8005f2a:	1c5a      	adds	r2, r3, #1
 8005f2c:	2030      	movs	r0, #48	; 0x30
 8005f2e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005f32:	4422      	add	r2, r4
 8005f34:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005f38:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005f3c:	3302      	adds	r3, #2
 8005f3e:	e7c7      	b.n	8005ed0 <_printf_common+0x58>
 8005f40:	2301      	movs	r3, #1
 8005f42:	4622      	mov	r2, r4
 8005f44:	4649      	mov	r1, r9
 8005f46:	4638      	mov	r0, r7
 8005f48:	47c0      	blx	r8
 8005f4a:	3001      	adds	r0, #1
 8005f4c:	d0e6      	beq.n	8005f1c <_printf_common+0xa4>
 8005f4e:	3601      	adds	r6, #1
 8005f50:	e7d9      	b.n	8005f06 <_printf_common+0x8e>
	...

08005f54 <_printf_i>:
 8005f54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f58:	460c      	mov	r4, r1
 8005f5a:	4691      	mov	r9, r2
 8005f5c:	7e27      	ldrb	r7, [r4, #24]
 8005f5e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005f60:	2f78      	cmp	r7, #120	; 0x78
 8005f62:	4680      	mov	r8, r0
 8005f64:	469a      	mov	sl, r3
 8005f66:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005f6a:	d807      	bhi.n	8005f7c <_printf_i+0x28>
 8005f6c:	2f62      	cmp	r7, #98	; 0x62
 8005f6e:	d80a      	bhi.n	8005f86 <_printf_i+0x32>
 8005f70:	2f00      	cmp	r7, #0
 8005f72:	f000 80d8 	beq.w	8006126 <_printf_i+0x1d2>
 8005f76:	2f58      	cmp	r7, #88	; 0x58
 8005f78:	f000 80a3 	beq.w	80060c2 <_printf_i+0x16e>
 8005f7c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005f80:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005f84:	e03a      	b.n	8005ffc <_printf_i+0xa8>
 8005f86:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005f8a:	2b15      	cmp	r3, #21
 8005f8c:	d8f6      	bhi.n	8005f7c <_printf_i+0x28>
 8005f8e:	a001      	add	r0, pc, #4	; (adr r0, 8005f94 <_printf_i+0x40>)
 8005f90:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005f94:	08005fed 	.word	0x08005fed
 8005f98:	08006001 	.word	0x08006001
 8005f9c:	08005f7d 	.word	0x08005f7d
 8005fa0:	08005f7d 	.word	0x08005f7d
 8005fa4:	08005f7d 	.word	0x08005f7d
 8005fa8:	08005f7d 	.word	0x08005f7d
 8005fac:	08006001 	.word	0x08006001
 8005fb0:	08005f7d 	.word	0x08005f7d
 8005fb4:	08005f7d 	.word	0x08005f7d
 8005fb8:	08005f7d 	.word	0x08005f7d
 8005fbc:	08005f7d 	.word	0x08005f7d
 8005fc0:	0800610d 	.word	0x0800610d
 8005fc4:	08006031 	.word	0x08006031
 8005fc8:	080060ef 	.word	0x080060ef
 8005fcc:	08005f7d 	.word	0x08005f7d
 8005fd0:	08005f7d 	.word	0x08005f7d
 8005fd4:	0800612f 	.word	0x0800612f
 8005fd8:	08005f7d 	.word	0x08005f7d
 8005fdc:	08006031 	.word	0x08006031
 8005fe0:	08005f7d 	.word	0x08005f7d
 8005fe4:	08005f7d 	.word	0x08005f7d
 8005fe8:	080060f7 	.word	0x080060f7
 8005fec:	680b      	ldr	r3, [r1, #0]
 8005fee:	1d1a      	adds	r2, r3, #4
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	600a      	str	r2, [r1, #0]
 8005ff4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005ff8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	e0a3      	b.n	8006148 <_printf_i+0x1f4>
 8006000:	6825      	ldr	r5, [r4, #0]
 8006002:	6808      	ldr	r0, [r1, #0]
 8006004:	062e      	lsls	r6, r5, #24
 8006006:	f100 0304 	add.w	r3, r0, #4
 800600a:	d50a      	bpl.n	8006022 <_printf_i+0xce>
 800600c:	6805      	ldr	r5, [r0, #0]
 800600e:	600b      	str	r3, [r1, #0]
 8006010:	2d00      	cmp	r5, #0
 8006012:	da03      	bge.n	800601c <_printf_i+0xc8>
 8006014:	232d      	movs	r3, #45	; 0x2d
 8006016:	426d      	negs	r5, r5
 8006018:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800601c:	485e      	ldr	r0, [pc, #376]	; (8006198 <_printf_i+0x244>)
 800601e:	230a      	movs	r3, #10
 8006020:	e019      	b.n	8006056 <_printf_i+0x102>
 8006022:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006026:	6805      	ldr	r5, [r0, #0]
 8006028:	600b      	str	r3, [r1, #0]
 800602a:	bf18      	it	ne
 800602c:	b22d      	sxthne	r5, r5
 800602e:	e7ef      	b.n	8006010 <_printf_i+0xbc>
 8006030:	680b      	ldr	r3, [r1, #0]
 8006032:	6825      	ldr	r5, [r4, #0]
 8006034:	1d18      	adds	r0, r3, #4
 8006036:	6008      	str	r0, [r1, #0]
 8006038:	0628      	lsls	r0, r5, #24
 800603a:	d501      	bpl.n	8006040 <_printf_i+0xec>
 800603c:	681d      	ldr	r5, [r3, #0]
 800603e:	e002      	b.n	8006046 <_printf_i+0xf2>
 8006040:	0669      	lsls	r1, r5, #25
 8006042:	d5fb      	bpl.n	800603c <_printf_i+0xe8>
 8006044:	881d      	ldrh	r5, [r3, #0]
 8006046:	4854      	ldr	r0, [pc, #336]	; (8006198 <_printf_i+0x244>)
 8006048:	2f6f      	cmp	r7, #111	; 0x6f
 800604a:	bf0c      	ite	eq
 800604c:	2308      	moveq	r3, #8
 800604e:	230a      	movne	r3, #10
 8006050:	2100      	movs	r1, #0
 8006052:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006056:	6866      	ldr	r6, [r4, #4]
 8006058:	60a6      	str	r6, [r4, #8]
 800605a:	2e00      	cmp	r6, #0
 800605c:	bfa2      	ittt	ge
 800605e:	6821      	ldrge	r1, [r4, #0]
 8006060:	f021 0104 	bicge.w	r1, r1, #4
 8006064:	6021      	strge	r1, [r4, #0]
 8006066:	b90d      	cbnz	r5, 800606c <_printf_i+0x118>
 8006068:	2e00      	cmp	r6, #0
 800606a:	d04d      	beq.n	8006108 <_printf_i+0x1b4>
 800606c:	4616      	mov	r6, r2
 800606e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006072:	fb03 5711 	mls	r7, r3, r1, r5
 8006076:	5dc7      	ldrb	r7, [r0, r7]
 8006078:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800607c:	462f      	mov	r7, r5
 800607e:	42bb      	cmp	r3, r7
 8006080:	460d      	mov	r5, r1
 8006082:	d9f4      	bls.n	800606e <_printf_i+0x11a>
 8006084:	2b08      	cmp	r3, #8
 8006086:	d10b      	bne.n	80060a0 <_printf_i+0x14c>
 8006088:	6823      	ldr	r3, [r4, #0]
 800608a:	07df      	lsls	r7, r3, #31
 800608c:	d508      	bpl.n	80060a0 <_printf_i+0x14c>
 800608e:	6923      	ldr	r3, [r4, #16]
 8006090:	6861      	ldr	r1, [r4, #4]
 8006092:	4299      	cmp	r1, r3
 8006094:	bfde      	ittt	le
 8006096:	2330      	movle	r3, #48	; 0x30
 8006098:	f806 3c01 	strble.w	r3, [r6, #-1]
 800609c:	f106 36ff 	addle.w	r6, r6, #4294967295
 80060a0:	1b92      	subs	r2, r2, r6
 80060a2:	6122      	str	r2, [r4, #16]
 80060a4:	f8cd a000 	str.w	sl, [sp]
 80060a8:	464b      	mov	r3, r9
 80060aa:	aa03      	add	r2, sp, #12
 80060ac:	4621      	mov	r1, r4
 80060ae:	4640      	mov	r0, r8
 80060b0:	f7ff fee2 	bl	8005e78 <_printf_common>
 80060b4:	3001      	adds	r0, #1
 80060b6:	d14c      	bne.n	8006152 <_printf_i+0x1fe>
 80060b8:	f04f 30ff 	mov.w	r0, #4294967295
 80060bc:	b004      	add	sp, #16
 80060be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060c2:	4835      	ldr	r0, [pc, #212]	; (8006198 <_printf_i+0x244>)
 80060c4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80060c8:	6823      	ldr	r3, [r4, #0]
 80060ca:	680e      	ldr	r6, [r1, #0]
 80060cc:	061f      	lsls	r7, r3, #24
 80060ce:	f856 5b04 	ldr.w	r5, [r6], #4
 80060d2:	600e      	str	r6, [r1, #0]
 80060d4:	d514      	bpl.n	8006100 <_printf_i+0x1ac>
 80060d6:	07d9      	lsls	r1, r3, #31
 80060d8:	bf44      	itt	mi
 80060da:	f043 0320 	orrmi.w	r3, r3, #32
 80060de:	6023      	strmi	r3, [r4, #0]
 80060e0:	b91d      	cbnz	r5, 80060ea <_printf_i+0x196>
 80060e2:	6823      	ldr	r3, [r4, #0]
 80060e4:	f023 0320 	bic.w	r3, r3, #32
 80060e8:	6023      	str	r3, [r4, #0]
 80060ea:	2310      	movs	r3, #16
 80060ec:	e7b0      	b.n	8006050 <_printf_i+0xfc>
 80060ee:	6823      	ldr	r3, [r4, #0]
 80060f0:	f043 0320 	orr.w	r3, r3, #32
 80060f4:	6023      	str	r3, [r4, #0]
 80060f6:	2378      	movs	r3, #120	; 0x78
 80060f8:	4828      	ldr	r0, [pc, #160]	; (800619c <_printf_i+0x248>)
 80060fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80060fe:	e7e3      	b.n	80060c8 <_printf_i+0x174>
 8006100:	065e      	lsls	r6, r3, #25
 8006102:	bf48      	it	mi
 8006104:	b2ad      	uxthmi	r5, r5
 8006106:	e7e6      	b.n	80060d6 <_printf_i+0x182>
 8006108:	4616      	mov	r6, r2
 800610a:	e7bb      	b.n	8006084 <_printf_i+0x130>
 800610c:	680b      	ldr	r3, [r1, #0]
 800610e:	6826      	ldr	r6, [r4, #0]
 8006110:	6960      	ldr	r0, [r4, #20]
 8006112:	1d1d      	adds	r5, r3, #4
 8006114:	600d      	str	r5, [r1, #0]
 8006116:	0635      	lsls	r5, r6, #24
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	d501      	bpl.n	8006120 <_printf_i+0x1cc>
 800611c:	6018      	str	r0, [r3, #0]
 800611e:	e002      	b.n	8006126 <_printf_i+0x1d2>
 8006120:	0671      	lsls	r1, r6, #25
 8006122:	d5fb      	bpl.n	800611c <_printf_i+0x1c8>
 8006124:	8018      	strh	r0, [r3, #0]
 8006126:	2300      	movs	r3, #0
 8006128:	6123      	str	r3, [r4, #16]
 800612a:	4616      	mov	r6, r2
 800612c:	e7ba      	b.n	80060a4 <_printf_i+0x150>
 800612e:	680b      	ldr	r3, [r1, #0]
 8006130:	1d1a      	adds	r2, r3, #4
 8006132:	600a      	str	r2, [r1, #0]
 8006134:	681e      	ldr	r6, [r3, #0]
 8006136:	6862      	ldr	r2, [r4, #4]
 8006138:	2100      	movs	r1, #0
 800613a:	4630      	mov	r0, r6
 800613c:	f7fa f858 	bl	80001f0 <memchr>
 8006140:	b108      	cbz	r0, 8006146 <_printf_i+0x1f2>
 8006142:	1b80      	subs	r0, r0, r6
 8006144:	6060      	str	r0, [r4, #4]
 8006146:	6863      	ldr	r3, [r4, #4]
 8006148:	6123      	str	r3, [r4, #16]
 800614a:	2300      	movs	r3, #0
 800614c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006150:	e7a8      	b.n	80060a4 <_printf_i+0x150>
 8006152:	6923      	ldr	r3, [r4, #16]
 8006154:	4632      	mov	r2, r6
 8006156:	4649      	mov	r1, r9
 8006158:	4640      	mov	r0, r8
 800615a:	47d0      	blx	sl
 800615c:	3001      	adds	r0, #1
 800615e:	d0ab      	beq.n	80060b8 <_printf_i+0x164>
 8006160:	6823      	ldr	r3, [r4, #0]
 8006162:	079b      	lsls	r3, r3, #30
 8006164:	d413      	bmi.n	800618e <_printf_i+0x23a>
 8006166:	68e0      	ldr	r0, [r4, #12]
 8006168:	9b03      	ldr	r3, [sp, #12]
 800616a:	4298      	cmp	r0, r3
 800616c:	bfb8      	it	lt
 800616e:	4618      	movlt	r0, r3
 8006170:	e7a4      	b.n	80060bc <_printf_i+0x168>
 8006172:	2301      	movs	r3, #1
 8006174:	4632      	mov	r2, r6
 8006176:	4649      	mov	r1, r9
 8006178:	4640      	mov	r0, r8
 800617a:	47d0      	blx	sl
 800617c:	3001      	adds	r0, #1
 800617e:	d09b      	beq.n	80060b8 <_printf_i+0x164>
 8006180:	3501      	adds	r5, #1
 8006182:	68e3      	ldr	r3, [r4, #12]
 8006184:	9903      	ldr	r1, [sp, #12]
 8006186:	1a5b      	subs	r3, r3, r1
 8006188:	42ab      	cmp	r3, r5
 800618a:	dcf2      	bgt.n	8006172 <_printf_i+0x21e>
 800618c:	e7eb      	b.n	8006166 <_printf_i+0x212>
 800618e:	2500      	movs	r5, #0
 8006190:	f104 0619 	add.w	r6, r4, #25
 8006194:	e7f5      	b.n	8006182 <_printf_i+0x22e>
 8006196:	bf00      	nop
 8006198:	0800642d 	.word	0x0800642d
 800619c:	0800643e 	.word	0x0800643e

080061a0 <_sbrk_r>:
 80061a0:	b538      	push	{r3, r4, r5, lr}
 80061a2:	4d06      	ldr	r5, [pc, #24]	; (80061bc <_sbrk_r+0x1c>)
 80061a4:	2300      	movs	r3, #0
 80061a6:	4604      	mov	r4, r0
 80061a8:	4608      	mov	r0, r1
 80061aa:	602b      	str	r3, [r5, #0]
 80061ac:	f7fa fda4 	bl	8000cf8 <_sbrk>
 80061b0:	1c43      	adds	r3, r0, #1
 80061b2:	d102      	bne.n	80061ba <_sbrk_r+0x1a>
 80061b4:	682b      	ldr	r3, [r5, #0]
 80061b6:	b103      	cbz	r3, 80061ba <_sbrk_r+0x1a>
 80061b8:	6023      	str	r3, [r4, #0]
 80061ba:	bd38      	pop	{r3, r4, r5, pc}
 80061bc:	20000204 	.word	0x20000204

080061c0 <__sread>:
 80061c0:	b510      	push	{r4, lr}
 80061c2:	460c      	mov	r4, r1
 80061c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061c8:	f000 f8a0 	bl	800630c <_read_r>
 80061cc:	2800      	cmp	r0, #0
 80061ce:	bfab      	itete	ge
 80061d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80061d2:	89a3      	ldrhlt	r3, [r4, #12]
 80061d4:	181b      	addge	r3, r3, r0
 80061d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80061da:	bfac      	ite	ge
 80061dc:	6563      	strge	r3, [r4, #84]	; 0x54
 80061de:	81a3      	strhlt	r3, [r4, #12]
 80061e0:	bd10      	pop	{r4, pc}

080061e2 <__swrite>:
 80061e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061e6:	461f      	mov	r7, r3
 80061e8:	898b      	ldrh	r3, [r1, #12]
 80061ea:	05db      	lsls	r3, r3, #23
 80061ec:	4605      	mov	r5, r0
 80061ee:	460c      	mov	r4, r1
 80061f0:	4616      	mov	r6, r2
 80061f2:	d505      	bpl.n	8006200 <__swrite+0x1e>
 80061f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061f8:	2302      	movs	r3, #2
 80061fa:	2200      	movs	r2, #0
 80061fc:	f000 f868 	bl	80062d0 <_lseek_r>
 8006200:	89a3      	ldrh	r3, [r4, #12]
 8006202:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006206:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800620a:	81a3      	strh	r3, [r4, #12]
 800620c:	4632      	mov	r2, r6
 800620e:	463b      	mov	r3, r7
 8006210:	4628      	mov	r0, r5
 8006212:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006216:	f000 b817 	b.w	8006248 <_write_r>

0800621a <__sseek>:
 800621a:	b510      	push	{r4, lr}
 800621c:	460c      	mov	r4, r1
 800621e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006222:	f000 f855 	bl	80062d0 <_lseek_r>
 8006226:	1c43      	adds	r3, r0, #1
 8006228:	89a3      	ldrh	r3, [r4, #12]
 800622a:	bf15      	itete	ne
 800622c:	6560      	strne	r0, [r4, #84]	; 0x54
 800622e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006232:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006236:	81a3      	strheq	r3, [r4, #12]
 8006238:	bf18      	it	ne
 800623a:	81a3      	strhne	r3, [r4, #12]
 800623c:	bd10      	pop	{r4, pc}

0800623e <__sclose>:
 800623e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006242:	f000 b813 	b.w	800626c <_close_r>
	...

08006248 <_write_r>:
 8006248:	b538      	push	{r3, r4, r5, lr}
 800624a:	4d07      	ldr	r5, [pc, #28]	; (8006268 <_write_r+0x20>)
 800624c:	4604      	mov	r4, r0
 800624e:	4608      	mov	r0, r1
 8006250:	4611      	mov	r1, r2
 8006252:	2200      	movs	r2, #0
 8006254:	602a      	str	r2, [r5, #0]
 8006256:	461a      	mov	r2, r3
 8006258:	f7fa fac6 	bl	80007e8 <_write>
 800625c:	1c43      	adds	r3, r0, #1
 800625e:	d102      	bne.n	8006266 <_write_r+0x1e>
 8006260:	682b      	ldr	r3, [r5, #0]
 8006262:	b103      	cbz	r3, 8006266 <_write_r+0x1e>
 8006264:	6023      	str	r3, [r4, #0]
 8006266:	bd38      	pop	{r3, r4, r5, pc}
 8006268:	20000204 	.word	0x20000204

0800626c <_close_r>:
 800626c:	b538      	push	{r3, r4, r5, lr}
 800626e:	4d06      	ldr	r5, [pc, #24]	; (8006288 <_close_r+0x1c>)
 8006270:	2300      	movs	r3, #0
 8006272:	4604      	mov	r4, r0
 8006274:	4608      	mov	r0, r1
 8006276:	602b      	str	r3, [r5, #0]
 8006278:	f7fa fd09 	bl	8000c8e <_close>
 800627c:	1c43      	adds	r3, r0, #1
 800627e:	d102      	bne.n	8006286 <_close_r+0x1a>
 8006280:	682b      	ldr	r3, [r5, #0]
 8006282:	b103      	cbz	r3, 8006286 <_close_r+0x1a>
 8006284:	6023      	str	r3, [r4, #0]
 8006286:	bd38      	pop	{r3, r4, r5, pc}
 8006288:	20000204 	.word	0x20000204

0800628c <_fstat_r>:
 800628c:	b538      	push	{r3, r4, r5, lr}
 800628e:	4d07      	ldr	r5, [pc, #28]	; (80062ac <_fstat_r+0x20>)
 8006290:	2300      	movs	r3, #0
 8006292:	4604      	mov	r4, r0
 8006294:	4608      	mov	r0, r1
 8006296:	4611      	mov	r1, r2
 8006298:	602b      	str	r3, [r5, #0]
 800629a:	f7fa fd04 	bl	8000ca6 <_fstat>
 800629e:	1c43      	adds	r3, r0, #1
 80062a0:	d102      	bne.n	80062a8 <_fstat_r+0x1c>
 80062a2:	682b      	ldr	r3, [r5, #0]
 80062a4:	b103      	cbz	r3, 80062a8 <_fstat_r+0x1c>
 80062a6:	6023      	str	r3, [r4, #0]
 80062a8:	bd38      	pop	{r3, r4, r5, pc}
 80062aa:	bf00      	nop
 80062ac:	20000204 	.word	0x20000204

080062b0 <_isatty_r>:
 80062b0:	b538      	push	{r3, r4, r5, lr}
 80062b2:	4d06      	ldr	r5, [pc, #24]	; (80062cc <_isatty_r+0x1c>)
 80062b4:	2300      	movs	r3, #0
 80062b6:	4604      	mov	r4, r0
 80062b8:	4608      	mov	r0, r1
 80062ba:	602b      	str	r3, [r5, #0]
 80062bc:	f7fa fd03 	bl	8000cc6 <_isatty>
 80062c0:	1c43      	adds	r3, r0, #1
 80062c2:	d102      	bne.n	80062ca <_isatty_r+0x1a>
 80062c4:	682b      	ldr	r3, [r5, #0]
 80062c6:	b103      	cbz	r3, 80062ca <_isatty_r+0x1a>
 80062c8:	6023      	str	r3, [r4, #0]
 80062ca:	bd38      	pop	{r3, r4, r5, pc}
 80062cc:	20000204 	.word	0x20000204

080062d0 <_lseek_r>:
 80062d0:	b538      	push	{r3, r4, r5, lr}
 80062d2:	4d07      	ldr	r5, [pc, #28]	; (80062f0 <_lseek_r+0x20>)
 80062d4:	4604      	mov	r4, r0
 80062d6:	4608      	mov	r0, r1
 80062d8:	4611      	mov	r1, r2
 80062da:	2200      	movs	r2, #0
 80062dc:	602a      	str	r2, [r5, #0]
 80062de:	461a      	mov	r2, r3
 80062e0:	f7fa fcfc 	bl	8000cdc <_lseek>
 80062e4:	1c43      	adds	r3, r0, #1
 80062e6:	d102      	bne.n	80062ee <_lseek_r+0x1e>
 80062e8:	682b      	ldr	r3, [r5, #0]
 80062ea:	b103      	cbz	r3, 80062ee <_lseek_r+0x1e>
 80062ec:	6023      	str	r3, [r4, #0]
 80062ee:	bd38      	pop	{r3, r4, r5, pc}
 80062f0:	20000204 	.word	0x20000204

080062f4 <__malloc_lock>:
 80062f4:	4801      	ldr	r0, [pc, #4]	; (80062fc <__malloc_lock+0x8>)
 80062f6:	f7ff bb55 	b.w	80059a4 <__retarget_lock_acquire_recursive>
 80062fa:	bf00      	nop
 80062fc:	200001fc 	.word	0x200001fc

08006300 <__malloc_unlock>:
 8006300:	4801      	ldr	r0, [pc, #4]	; (8006308 <__malloc_unlock+0x8>)
 8006302:	f7ff bb50 	b.w	80059a6 <__retarget_lock_release_recursive>
 8006306:	bf00      	nop
 8006308:	200001fc 	.word	0x200001fc

0800630c <_read_r>:
 800630c:	b538      	push	{r3, r4, r5, lr}
 800630e:	4d07      	ldr	r5, [pc, #28]	; (800632c <_read_r+0x20>)
 8006310:	4604      	mov	r4, r0
 8006312:	4608      	mov	r0, r1
 8006314:	4611      	mov	r1, r2
 8006316:	2200      	movs	r2, #0
 8006318:	602a      	str	r2, [r5, #0]
 800631a:	461a      	mov	r2, r3
 800631c:	f7fa fc9a 	bl	8000c54 <_read>
 8006320:	1c43      	adds	r3, r0, #1
 8006322:	d102      	bne.n	800632a <_read_r+0x1e>
 8006324:	682b      	ldr	r3, [r5, #0]
 8006326:	b103      	cbz	r3, 800632a <_read_r+0x1e>
 8006328:	6023      	str	r3, [r4, #0]
 800632a:	bd38      	pop	{r3, r4, r5, pc}
 800632c:	20000204 	.word	0x20000204

08006330 <_init>:
 8006330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006332:	bf00      	nop
 8006334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006336:	bc08      	pop	{r3}
 8006338:	469e      	mov	lr, r3
 800633a:	4770      	bx	lr

0800633c <_fini>:
 800633c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800633e:	bf00      	nop
 8006340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006342:	bc08      	pop	{r3}
 8006344:	469e      	mov	lr, r3
 8006346:	4770      	bx	lr
