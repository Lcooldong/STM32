
Ethernet_Client.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001171c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003000  080118cc  080118cc  000218cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080148cc  080148cc  00030094  2**0
                  CONTENTS
  4 .ARM          00000008  080148cc  080148cc  000248cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080148d4  080148d4  00030094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080148d4  080148d4  000248d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080148d8  080148d8  000248d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  080148dc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030094  2**0
                  CONTENTS
 10 .bss          00007d60  20000094  20000094  00030094  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20007df4  20007df4  00030094  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030094  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f823  00000000  00000000  000300c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000057a1  00000000  00000000  0004f8e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001638  00000000  00000000  00055088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001568  00000000  00000000  000566c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003052d  00000000  00000000  00057c28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00026b02  00000000  00000000  00088155  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ec848  00000000  00000000  000aec57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0019b49f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006228  00000000  00000000  0019b4f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000094 	.word	0x20000094
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080118b4 	.word	0x080118b4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000098 	.word	0x20000098
 80001ec:	080118b4 	.word	0x080118b4

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <MX_GPIO_Init>:
     PA10   ------> USB_OTG_FS_ID
     PA11   ------> USB_OTG_FS_DM
     PA12   ------> USB_OTG_FS_DP
*/
void MX_GPIO_Init(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b08c      	sub	sp, #48	; 0x30
 8000598:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800059a:	f107 031c 	add.w	r3, r7, #28
 800059e:	2200      	movs	r2, #0
 80005a0:	601a      	str	r2, [r3, #0]
 80005a2:	605a      	str	r2, [r3, #4]
 80005a4:	609a      	str	r2, [r3, #8]
 80005a6:	60da      	str	r2, [r3, #12]
 80005a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005aa:	2300      	movs	r3, #0
 80005ac:	61bb      	str	r3, [r7, #24]
 80005ae:	4b5b      	ldr	r3, [pc, #364]	; (800071c <MX_GPIO_Init+0x188>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b2:	4a5a      	ldr	r2, [pc, #360]	; (800071c <MX_GPIO_Init+0x188>)
 80005b4:	f043 0304 	orr.w	r3, r3, #4
 80005b8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ba:	4b58      	ldr	r3, [pc, #352]	; (800071c <MX_GPIO_Init+0x188>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	f003 0304 	and.w	r3, r3, #4
 80005c2:	61bb      	str	r3, [r7, #24]
 80005c4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005c6:	2300      	movs	r3, #0
 80005c8:	617b      	str	r3, [r7, #20]
 80005ca:	4b54      	ldr	r3, [pc, #336]	; (800071c <MX_GPIO_Init+0x188>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	4a53      	ldr	r2, [pc, #332]	; (800071c <MX_GPIO_Init+0x188>)
 80005d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005d4:	6313      	str	r3, [r2, #48]	; 0x30
 80005d6:	4b51      	ldr	r3, [pc, #324]	; (800071c <MX_GPIO_Init+0x188>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005de:	617b      	str	r3, [r7, #20]
 80005e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e2:	2300      	movs	r3, #0
 80005e4:	613b      	str	r3, [r7, #16]
 80005e6:	4b4d      	ldr	r3, [pc, #308]	; (800071c <MX_GPIO_Init+0x188>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	4a4c      	ldr	r2, [pc, #304]	; (800071c <MX_GPIO_Init+0x188>)
 80005ec:	f043 0301 	orr.w	r3, r3, #1
 80005f0:	6313      	str	r3, [r2, #48]	; 0x30
 80005f2:	4b4a      	ldr	r3, [pc, #296]	; (800071c <MX_GPIO_Init+0x188>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f6:	f003 0301 	and.w	r3, r3, #1
 80005fa:	613b      	str	r3, [r7, #16]
 80005fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005fe:	2300      	movs	r3, #0
 8000600:	60fb      	str	r3, [r7, #12]
 8000602:	4b46      	ldr	r3, [pc, #280]	; (800071c <MX_GPIO_Init+0x188>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000606:	4a45      	ldr	r2, [pc, #276]	; (800071c <MX_GPIO_Init+0x188>)
 8000608:	f043 0302 	orr.w	r3, r3, #2
 800060c:	6313      	str	r3, [r2, #48]	; 0x30
 800060e:	4b43      	ldr	r3, [pc, #268]	; (800071c <MX_GPIO_Init+0x188>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000612:	f003 0302 	and.w	r3, r3, #2
 8000616:	60fb      	str	r3, [r7, #12]
 8000618:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800061a:	2300      	movs	r3, #0
 800061c:	60bb      	str	r3, [r7, #8]
 800061e:	4b3f      	ldr	r3, [pc, #252]	; (800071c <MX_GPIO_Init+0x188>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000622:	4a3e      	ldr	r2, [pc, #248]	; (800071c <MX_GPIO_Init+0x188>)
 8000624:	f043 0308 	orr.w	r3, r3, #8
 8000628:	6313      	str	r3, [r2, #48]	; 0x30
 800062a:	4b3c      	ldr	r3, [pc, #240]	; (800071c <MX_GPIO_Init+0x188>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062e:	f003 0308 	and.w	r3, r3, #8
 8000632:	60bb      	str	r3, [r7, #8]
 8000634:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000636:	2300      	movs	r3, #0
 8000638:	607b      	str	r3, [r7, #4]
 800063a:	4b38      	ldr	r3, [pc, #224]	; (800071c <MX_GPIO_Init+0x188>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	4a37      	ldr	r2, [pc, #220]	; (800071c <MX_GPIO_Init+0x188>)
 8000640:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000644:	6313      	str	r3, [r2, #48]	; 0x30
 8000646:	4b35      	ldr	r3, [pc, #212]	; (800071c <MX_GPIO_Init+0x188>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000652:	2200      	movs	r2, #0
 8000654:	f244 0181 	movw	r1, #16513	; 0x4081
 8000658:	4831      	ldr	r0, [pc, #196]	; (8000720 <MX_GPIO_Init+0x18c>)
 800065a:	f001 fff3 	bl	8002644 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800065e:	2200      	movs	r2, #0
 8000660:	2140      	movs	r1, #64	; 0x40
 8000662:	4830      	ldr	r0, [pc, #192]	; (8000724 <MX_GPIO_Init+0x190>)
 8000664:	f001 ffee 	bl	8002644 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000668:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800066c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800066e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000672:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000674:	2300      	movs	r3, #0
 8000676:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000678:	f107 031c 	add.w	r3, r7, #28
 800067c:	4619      	mov	r1, r3
 800067e:	482a      	ldr	r0, [pc, #168]	; (8000728 <MX_GPIO_Init+0x194>)
 8000680:	f001 fe34 	bl	80022ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000684:	f244 0381 	movw	r3, #16513	; 0x4081
 8000688:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800068a:	2301      	movs	r3, #1
 800068c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068e:	2300      	movs	r3, #0
 8000690:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000692:	2300      	movs	r3, #0
 8000694:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000696:	f107 031c 	add.w	r3, r7, #28
 800069a:	4619      	mov	r1, r3
 800069c:	4820      	ldr	r0, [pc, #128]	; (8000720 <MX_GPIO_Init+0x18c>)
 800069e:	f001 fe25 	bl	80022ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80006a2:	2340      	movs	r3, #64	; 0x40
 80006a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a6:	2301      	movs	r3, #1
 80006a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006aa:	2300      	movs	r3, #0
 80006ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ae:	2300      	movs	r3, #0
 80006b0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80006b2:	f107 031c 	add.w	r3, r7, #28
 80006b6:	4619      	mov	r1, r3
 80006b8:	481a      	ldr	r0, [pc, #104]	; (8000724 <MX_GPIO_Init+0x190>)
 80006ba:	f001 fe17 	bl	80022ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80006be:	2380      	movs	r3, #128	; 0x80
 80006c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006c2:	2300      	movs	r3, #0
 80006c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c6:	2300      	movs	r3, #0
 80006c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80006ca:	f107 031c 	add.w	r3, r7, #28
 80006ce:	4619      	mov	r1, r3
 80006d0:	4814      	ldr	r0, [pc, #80]	; (8000724 <MX_GPIO_Init+0x190>)
 80006d2:	f001 fe0b 	bl	80022ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80006d6:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80006da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006dc:	2302      	movs	r3, #2
 80006de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e0:	2300      	movs	r3, #0
 80006e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006e4:	2303      	movs	r3, #3
 80006e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80006e8:	230a      	movs	r3, #10
 80006ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ec:	f107 031c 	add.w	r3, r7, #28
 80006f0:	4619      	mov	r1, r3
 80006f2:	480e      	ldr	r0, [pc, #56]	; (800072c <MX_GPIO_Init+0x198>)
 80006f4:	f001 fdfa 	bl	80022ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80006f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80006fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006fe:	2300      	movs	r3, #0
 8000700:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000702:	2300      	movs	r3, #0
 8000704:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000706:	f107 031c 	add.w	r3, r7, #28
 800070a:	4619      	mov	r1, r3
 800070c:	4807      	ldr	r0, [pc, #28]	; (800072c <MX_GPIO_Init+0x198>)
 800070e:	f001 fded 	bl	80022ec <HAL_GPIO_Init>

}
 8000712:	bf00      	nop
 8000714:	3730      	adds	r7, #48	; 0x30
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	40023800 	.word	0x40023800
 8000720:	40020400 	.word	0x40020400
 8000724:	40021800 	.word	0x40021800
 8000728:	40020800 	.word	0x40020800
 800072c:	40020000 	.word	0x40020000

08000730 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000734:	f000 fbba 	bl	8000eac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000738:	f000 f808 	bl	800074c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800073c:	f7ff ff2a 	bl	8000594 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000740:	f000 f9b0 	bl	8000aa4 <MX_USART3_UART_Init>
  MX_LWIP_Init();
 8000744:	f003 fc94 	bl	8004070 <MX_LWIP_Init>
//  ethernetif_notify_conn_changed(&gnetif);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000748:	e7fe      	b.n	8000748 <main+0x18>
	...

0800074c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b094      	sub	sp, #80	; 0x50
 8000750:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000752:	f107 0320 	add.w	r3, r7, #32
 8000756:	2230      	movs	r2, #48	; 0x30
 8000758:	2100      	movs	r1, #0
 800075a:	4618      	mov	r0, r3
 800075c:	f00f ffdc 	bl	8010718 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000760:	f107 030c 	add.w	r3, r7, #12
 8000764:	2200      	movs	r2, #0
 8000766:	601a      	str	r2, [r3, #0]
 8000768:	605a      	str	r2, [r3, #4]
 800076a:	609a      	str	r2, [r3, #8]
 800076c:	60da      	str	r2, [r3, #12]
 800076e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000770:	2300      	movs	r3, #0
 8000772:	60bb      	str	r3, [r7, #8]
 8000774:	4b2b      	ldr	r3, [pc, #172]	; (8000824 <SystemClock_Config+0xd8>)
 8000776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000778:	4a2a      	ldr	r2, [pc, #168]	; (8000824 <SystemClock_Config+0xd8>)
 800077a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800077e:	6413      	str	r3, [r2, #64]	; 0x40
 8000780:	4b28      	ldr	r3, [pc, #160]	; (8000824 <SystemClock_Config+0xd8>)
 8000782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000784:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000788:	60bb      	str	r3, [r7, #8]
 800078a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800078c:	2300      	movs	r3, #0
 800078e:	607b      	str	r3, [r7, #4]
 8000790:	4b25      	ldr	r3, [pc, #148]	; (8000828 <SystemClock_Config+0xdc>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4a24      	ldr	r2, [pc, #144]	; (8000828 <SystemClock_Config+0xdc>)
 8000796:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800079a:	6013      	str	r3, [r2, #0]
 800079c:	4b22      	ldr	r3, [pc, #136]	; (8000828 <SystemClock_Config+0xdc>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007a4:	607b      	str	r3, [r7, #4]
 80007a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007a8:	2301      	movs	r3, #1
 80007aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007ac:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80007b0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007b2:	2302      	movs	r3, #2
 80007b4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007b6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007bc:	2304      	movs	r3, #4
 80007be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 80007c0:	23b4      	movs	r3, #180	; 0xb4
 80007c2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007c4:	2302      	movs	r3, #2
 80007c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007c8:	2304      	movs	r3, #4
 80007ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007cc:	f107 0320 	add.w	r3, r7, #32
 80007d0:	4618      	mov	r0, r3
 80007d2:	f001 ffa1 	bl	8002718 <HAL_RCC_OscConfig>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007dc:	f000 f840 	bl	8000860 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007e0:	f001 ff4a 	bl	8002678 <HAL_PWREx_EnableOverDrive>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80007ea:	f000 f839 	bl	8000860 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ee:	230f      	movs	r3, #15
 80007f0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007f2:	2302      	movs	r3, #2
 80007f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007f6:	2300      	movs	r3, #0
 80007f8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007fa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007fe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000800:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000804:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000806:	f107 030c 	add.w	r3, r7, #12
 800080a:	2105      	movs	r1, #5
 800080c:	4618      	mov	r0, r3
 800080e:	f002 f9fb 	bl	8002c08 <HAL_RCC_ClockConfig>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000818:	f000 f822 	bl	8000860 <Error_Handler>
  }
}
 800081c:	bf00      	nop
 800081e:	3750      	adds	r7, #80	; 0x50
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	40023800 	.word	0x40023800
 8000828:	40007000 	.word	0x40007000

0800082c <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char* p, int len)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b084      	sub	sp, #16
 8000830:	af00      	add	r7, sp, #0
 8000832:	60f8      	str	r0, [r7, #12]
 8000834:	60b9      	str	r1, [r7, #8]
 8000836:	607a      	str	r2, [r7, #4]
	if(HAL_UART_Transmit(&huart3, (uint8_t*)p, len, 10)== HAL_OK) return len;
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	b29a      	uxth	r2, r3
 800083c:	230a      	movs	r3, #10
 800083e:	68b9      	ldr	r1, [r7, #8]
 8000840:	4806      	ldr	r0, [pc, #24]	; (800085c <_write+0x30>)
 8000842:	f002 fc4e 	bl	80030e2 <HAL_UART_Transmit>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d101      	bne.n	8000850 <_write+0x24>
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	e000      	b.n	8000852 <_write+0x26>
	else return 0;
 8000850:	2300      	movs	r3, #0
}
 8000852:	4618      	mov	r0, r3
 8000854:	3710      	adds	r7, #16
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	200000b4 	.word	0x200000b4

08000860 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000864:	b672      	cpsid	i
}
 8000866:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000868:	e7fe      	b.n	8000868 <Error_Handler+0x8>
	...

0800086c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800086c:	b480      	push	{r7}
 800086e:	b083      	sub	sp, #12
 8000870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	607b      	str	r3, [r7, #4]
 8000876:	4b10      	ldr	r3, [pc, #64]	; (80008b8 <HAL_MspInit+0x4c>)
 8000878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800087a:	4a0f      	ldr	r2, [pc, #60]	; (80008b8 <HAL_MspInit+0x4c>)
 800087c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000880:	6453      	str	r3, [r2, #68]	; 0x44
 8000882:	4b0d      	ldr	r3, [pc, #52]	; (80008b8 <HAL_MspInit+0x4c>)
 8000884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000886:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800088a:	607b      	str	r3, [r7, #4]
 800088c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	603b      	str	r3, [r7, #0]
 8000892:	4b09      	ldr	r3, [pc, #36]	; (80008b8 <HAL_MspInit+0x4c>)
 8000894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000896:	4a08      	ldr	r2, [pc, #32]	; (80008b8 <HAL_MspInit+0x4c>)
 8000898:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800089c:	6413      	str	r3, [r2, #64]	; 0x40
 800089e:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <HAL_MspInit+0x4c>)
 80008a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008a6:	603b      	str	r3, [r7, #0]
 80008a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008aa:	bf00      	nop
 80008ac:	370c      	adds	r7, #12
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop
 80008b8:	40023800 	.word	0x40023800

080008bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008c0:	e7fe      	b.n	80008c0 <NMI_Handler+0x4>

080008c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008c2:	b480      	push	{r7}
 80008c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008c6:	e7fe      	b.n	80008c6 <HardFault_Handler+0x4>

080008c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008cc:	e7fe      	b.n	80008cc <MemManage_Handler+0x4>

080008ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008ce:	b480      	push	{r7}
 80008d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008d2:	e7fe      	b.n	80008d2 <BusFault_Handler+0x4>

080008d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008d8:	e7fe      	b.n	80008d8 <UsageFault_Handler+0x4>

080008da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008da:	b480      	push	{r7}
 80008dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008de:	bf00      	nop
 80008e0:	46bd      	mov	sp, r7
 80008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e6:	4770      	bx	lr

080008e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008ec:	bf00      	nop
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr

080008f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008f6:	b480      	push	{r7}
 80008f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008fa:	bf00      	nop
 80008fc:	46bd      	mov	sp, r7
 80008fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000902:	4770      	bx	lr

08000904 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000908:	f000 fb22 	bl	8000f50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800090c:	bf00      	nop
 800090e:	bd80      	pop	{r7, pc}

08000910 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000914:	4802      	ldr	r0, [pc, #8]	; (8000920 <USART3_IRQHandler+0x10>)
 8000916:	f002 fc77 	bl	8003208 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800091a:	bf00      	nop
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	200000b4 	.word	0x200000b4

08000924 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
	return 1;
 8000928:	2301      	movs	r3, #1
}
 800092a:	4618      	mov	r0, r3
 800092c:	46bd      	mov	sp, r7
 800092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000932:	4770      	bx	lr

08000934 <_kill>:

int _kill(int pid, int sig)
{
 8000934:	b480      	push	{r7}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
 800093c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800093e:	4b05      	ldr	r3, [pc, #20]	; (8000954 <_kill+0x20>)
 8000940:	2216      	movs	r2, #22
 8000942:	601a      	str	r2, [r3, #0]
	return -1;
 8000944:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000948:	4618      	mov	r0, r3
 800094a:	370c      	adds	r7, #12
 800094c:	46bd      	mov	sp, r7
 800094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000952:	4770      	bx	lr
 8000954:	20007de4 	.word	0x20007de4

08000958 <_exit>:

void _exit (int status)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000960:	f04f 31ff 	mov.w	r1, #4294967295
 8000964:	6878      	ldr	r0, [r7, #4]
 8000966:	f7ff ffe5 	bl	8000934 <_kill>
	while (1) {}		/* Make sure we hang here */
 800096a:	e7fe      	b.n	800096a <_exit+0x12>

0800096c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b086      	sub	sp, #24
 8000970:	af00      	add	r7, sp, #0
 8000972:	60f8      	str	r0, [r7, #12]
 8000974:	60b9      	str	r1, [r7, #8]
 8000976:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000978:	2300      	movs	r3, #0
 800097a:	617b      	str	r3, [r7, #20]
 800097c:	e00a      	b.n	8000994 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800097e:	f3af 8000 	nop.w
 8000982:	4601      	mov	r1, r0
 8000984:	68bb      	ldr	r3, [r7, #8]
 8000986:	1c5a      	adds	r2, r3, #1
 8000988:	60ba      	str	r2, [r7, #8]
 800098a:	b2ca      	uxtb	r2, r1
 800098c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800098e:	697b      	ldr	r3, [r7, #20]
 8000990:	3301      	adds	r3, #1
 8000992:	617b      	str	r3, [r7, #20]
 8000994:	697a      	ldr	r2, [r7, #20]
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	429a      	cmp	r2, r3
 800099a:	dbf0      	blt.n	800097e <_read+0x12>
	}

return len;
 800099c:	687b      	ldr	r3, [r7, #4]
}
 800099e:	4618      	mov	r0, r3
 80009a0:	3718      	adds	r7, #24
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}

080009a6 <_close>:
	}
	return len;
}

int _close(int file)
{
 80009a6:	b480      	push	{r7}
 80009a8:	b083      	sub	sp, #12
 80009aa:	af00      	add	r7, sp, #0
 80009ac:	6078      	str	r0, [r7, #4]
	return -1;
 80009ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	370c      	adds	r7, #12
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr

080009be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009be:	b480      	push	{r7}
 80009c0:	b083      	sub	sp, #12
 80009c2:	af00      	add	r7, sp, #0
 80009c4:	6078      	str	r0, [r7, #4]
 80009c6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009ce:	605a      	str	r2, [r3, #4]
	return 0;
 80009d0:	2300      	movs	r3, #0
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	370c      	adds	r7, #12
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr

080009de <_isatty>:

int _isatty(int file)
{
 80009de:	b480      	push	{r7}
 80009e0:	b083      	sub	sp, #12
 80009e2:	af00      	add	r7, sp, #0
 80009e4:	6078      	str	r0, [r7, #4]
	return 1;
 80009e6:	2301      	movs	r3, #1
}
 80009e8:	4618      	mov	r0, r3
 80009ea:	370c      	adds	r7, #12
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr

080009f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b085      	sub	sp, #20
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	60f8      	str	r0, [r7, #12]
 80009fc:	60b9      	str	r1, [r7, #8]
 80009fe:	607a      	str	r2, [r7, #4]
	return 0;
 8000a00:	2300      	movs	r3, #0
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	3714      	adds	r7, #20
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
	...

08000a10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b087      	sub	sp, #28
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a18:	4a14      	ldr	r2, [pc, #80]	; (8000a6c <_sbrk+0x5c>)
 8000a1a:	4b15      	ldr	r3, [pc, #84]	; (8000a70 <_sbrk+0x60>)
 8000a1c:	1ad3      	subs	r3, r2, r3
 8000a1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a20:	697b      	ldr	r3, [r7, #20]
 8000a22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a24:	4b13      	ldr	r3, [pc, #76]	; (8000a74 <_sbrk+0x64>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d102      	bne.n	8000a32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a2c:	4b11      	ldr	r3, [pc, #68]	; (8000a74 <_sbrk+0x64>)
 8000a2e:	4a12      	ldr	r2, [pc, #72]	; (8000a78 <_sbrk+0x68>)
 8000a30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a32:	4b10      	ldr	r3, [pc, #64]	; (8000a74 <_sbrk+0x64>)
 8000a34:	681a      	ldr	r2, [r3, #0]
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	4413      	add	r3, r2
 8000a3a:	693a      	ldr	r2, [r7, #16]
 8000a3c:	429a      	cmp	r2, r3
 8000a3e:	d205      	bcs.n	8000a4c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000a40:	4b0e      	ldr	r3, [pc, #56]	; (8000a7c <_sbrk+0x6c>)
 8000a42:	220c      	movs	r2, #12
 8000a44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a46:	f04f 33ff 	mov.w	r3, #4294967295
 8000a4a:	e009      	b.n	8000a60 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a4c:	4b09      	ldr	r3, [pc, #36]	; (8000a74 <_sbrk+0x64>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a52:	4b08      	ldr	r3, [pc, #32]	; (8000a74 <_sbrk+0x64>)
 8000a54:	681a      	ldr	r2, [r3, #0]
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	4413      	add	r3, r2
 8000a5a:	4a06      	ldr	r2, [pc, #24]	; (8000a74 <_sbrk+0x64>)
 8000a5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a5e:	68fb      	ldr	r3, [r7, #12]
}
 8000a60:	4618      	mov	r0, r3
 8000a62:	371c      	adds	r7, #28
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr
 8000a6c:	20030000 	.word	0x20030000
 8000a70:	00000400 	.word	0x00000400
 8000a74:	200000b0 	.word	0x200000b0
 8000a78:	20007df8 	.word	0x20007df8
 8000a7c:	20007de4 	.word	0x20007de4

08000a80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a84:	4b06      	ldr	r3, [pc, #24]	; (8000aa0 <SystemInit+0x20>)
 8000a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a8a:	4a05      	ldr	r2, [pc, #20]	; (8000aa0 <SystemInit+0x20>)
 8000a8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a94:	bf00      	nop
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	e000ed00 	.word	0xe000ed00

08000aa4 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000aa8:	4b11      	ldr	r3, [pc, #68]	; (8000af0 <MX_USART3_UART_Init+0x4c>)
 8000aaa:	4a12      	ldr	r2, [pc, #72]	; (8000af4 <MX_USART3_UART_Init+0x50>)
 8000aac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000aae:	4b10      	ldr	r3, [pc, #64]	; (8000af0 <MX_USART3_UART_Init+0x4c>)
 8000ab0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ab4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ab6:	4b0e      	ldr	r3, [pc, #56]	; (8000af0 <MX_USART3_UART_Init+0x4c>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000abc:	4b0c      	ldr	r3, [pc, #48]	; (8000af0 <MX_USART3_UART_Init+0x4c>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ac2:	4b0b      	ldr	r3, [pc, #44]	; (8000af0 <MX_USART3_UART_Init+0x4c>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ac8:	4b09      	ldr	r3, [pc, #36]	; (8000af0 <MX_USART3_UART_Init+0x4c>)
 8000aca:	220c      	movs	r2, #12
 8000acc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ace:	4b08      	ldr	r3, [pc, #32]	; (8000af0 <MX_USART3_UART_Init+0x4c>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ad4:	4b06      	ldr	r3, [pc, #24]	; (8000af0 <MX_USART3_UART_Init+0x4c>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ada:	4805      	ldr	r0, [pc, #20]	; (8000af0 <MX_USART3_UART_Init+0x4c>)
 8000adc:	f002 fab4 	bl	8003048 <HAL_UART_Init>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000ae6:	f7ff febb 	bl	8000860 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000aea:	bf00      	nop
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	200000b4 	.word	0x200000b4
 8000af4:	40004800 	.word	0x40004800

08000af8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b08a      	sub	sp, #40	; 0x28
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b00:	f107 0314 	add.w	r3, r7, #20
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	605a      	str	r2, [r3, #4]
 8000b0a:	609a      	str	r2, [r3, #8]
 8000b0c:	60da      	str	r2, [r3, #12]
 8000b0e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a1d      	ldr	r2, [pc, #116]	; (8000b8c <HAL_UART_MspInit+0x94>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d134      	bne.n	8000b84 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	613b      	str	r3, [r7, #16]
 8000b1e:	4b1c      	ldr	r3, [pc, #112]	; (8000b90 <HAL_UART_MspInit+0x98>)
 8000b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b22:	4a1b      	ldr	r2, [pc, #108]	; (8000b90 <HAL_UART_MspInit+0x98>)
 8000b24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b28:	6413      	str	r3, [r2, #64]	; 0x40
 8000b2a:	4b19      	ldr	r3, [pc, #100]	; (8000b90 <HAL_UART_MspInit+0x98>)
 8000b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b32:	613b      	str	r3, [r7, #16]
 8000b34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b36:	2300      	movs	r3, #0
 8000b38:	60fb      	str	r3, [r7, #12]
 8000b3a:	4b15      	ldr	r3, [pc, #84]	; (8000b90 <HAL_UART_MspInit+0x98>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	4a14      	ldr	r2, [pc, #80]	; (8000b90 <HAL_UART_MspInit+0x98>)
 8000b40:	f043 0308 	orr.w	r3, r3, #8
 8000b44:	6313      	str	r3, [r2, #48]	; 0x30
 8000b46:	4b12      	ldr	r3, [pc, #72]	; (8000b90 <HAL_UART_MspInit+0x98>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	f003 0308 	and.w	r3, r3, #8
 8000b4e:	60fb      	str	r3, [r7, #12]
 8000b50:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000b52:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b60:	2303      	movs	r3, #3
 8000b62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b64:	2307      	movs	r3, #7
 8000b66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b68:	f107 0314 	add.w	r3, r7, #20
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	4809      	ldr	r0, [pc, #36]	; (8000b94 <HAL_UART_MspInit+0x9c>)
 8000b70:	f001 fbbc 	bl	80022ec <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000b74:	2200      	movs	r2, #0
 8000b76:	2100      	movs	r1, #0
 8000b78:	2027      	movs	r0, #39	; 0x27
 8000b7a:	f000 fb08 	bl	800118e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000b7e:	2027      	movs	r0, #39	; 0x27
 8000b80:	f000 fb21 	bl	80011c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000b84:	bf00      	nop
 8000b86:	3728      	adds	r7, #40	; 0x28
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	40004800 	.word	0x40004800
 8000b90:	40023800 	.word	0x40023800
 8000b94:	40020c00 	.word	0x40020c00

08000b98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000b98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bd0 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b9c:	480d      	ldr	r0, [pc, #52]	; (8000bd4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b9e:	490e      	ldr	r1, [pc, #56]	; (8000bd8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ba0:	4a0e      	ldr	r2, [pc, #56]	; (8000bdc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ba2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ba4:	e002      	b.n	8000bac <LoopCopyDataInit>

08000ba6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ba6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ba8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000baa:	3304      	adds	r3, #4

08000bac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bb0:	d3f9      	bcc.n	8000ba6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bb2:	4a0b      	ldr	r2, [pc, #44]	; (8000be0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000bb4:	4c0b      	ldr	r4, [pc, #44]	; (8000be4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bb8:	e001      	b.n	8000bbe <LoopFillZerobss>

08000bba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bbc:	3204      	adds	r2, #4

08000bbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bc0:	d3fb      	bcc.n	8000bba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000bc2:	f7ff ff5d 	bl	8000a80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bc6:	f00f fd65 	bl	8010694 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bca:	f7ff fdb1 	bl	8000730 <main>
  bx  lr    
 8000bce:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000bd0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000bd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bd8:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8000bdc:	080148dc 	.word	0x080148dc
  ldr r2, =_sbss
 8000be0:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8000be4:	20007df4 	.word	0x20007df4

08000be8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000be8:	e7fe      	b.n	8000be8 <ADC_IRQHandler>

08000bea <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8000bea:	b480      	push	{r7}
 8000bec:	b083      	sub	sp, #12
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	6078      	str	r0, [r7, #4]
 8000bf2:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d00b      	beq.n	8000c12 <LAN8742_RegisterBusIO+0x28>
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	68db      	ldr	r3, [r3, #12]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d007      	beq.n	8000c12 <LAN8742_RegisterBusIO+0x28>
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	689b      	ldr	r3, [r3, #8]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d003      	beq.n	8000c12 <LAN8742_RegisterBusIO+0x28>
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	691b      	ldr	r3, [r3, #16]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d102      	bne.n	8000c18 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8000c12:	f04f 33ff 	mov.w	r3, #4294967295
 8000c16:	e014      	b.n	8000c42 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	681a      	ldr	r2, [r3, #0]
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	685a      	ldr	r2, [r3, #4]
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	68da      	ldr	r2, [r3, #12]
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	689a      	ldr	r2, [r3, #8]
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	691a      	ldr	r2, [r3, #16]
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8000c40:	2300      	movs	r3, #0
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	370c      	adds	r7, #12
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr

08000c4e <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8000c4e:	b580      	push	{r7, lr}
 8000c50:	b086      	sub	sp, #24
 8000c52:	af00      	add	r7, sp, #0
 8000c54:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8000c56:	2300      	movs	r3, #0
 8000c58:	60fb      	str	r3, [r7, #12]
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	60bb      	str	r3, [r7, #8]
 8000c5e:	2300      	movs	r3, #0
 8000c60:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8000c62:	2300      	movs	r3, #0
 8000c64:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	685b      	ldr	r3, [r3, #4]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d17c      	bne.n	8000d68 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	689b      	ldr	r3, [r3, #8]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d002      	beq.n	8000c7c <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	689b      	ldr	r3, [r3, #8]
 8000c7a:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	2220      	movs	r2, #32
 8000c80:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000c82:	2300      	movs	r3, #0
 8000c84:	617b      	str	r3, [r7, #20]
 8000c86:	e01c      	b.n	8000cc2 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	695b      	ldr	r3, [r3, #20]
 8000c8c:	f107 0208 	add.w	r2, r7, #8
 8000c90:	2112      	movs	r1, #18
 8000c92:	6978      	ldr	r0, [r7, #20]
 8000c94:	4798      	blx	r3
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	da03      	bge.n	8000ca4 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8000c9c:	f06f 0304 	mvn.w	r3, #4
 8000ca0:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8000ca2:	e00b      	b.n	8000cbc <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	f003 031f 	and.w	r3, r3, #31
 8000caa:	697a      	ldr	r2, [r7, #20]
 8000cac:	429a      	cmp	r2, r3
 8000cae:	d105      	bne.n	8000cbc <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	697a      	ldr	r2, [r7, #20]
 8000cb4:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	613b      	str	r3, [r7, #16]
         break;
 8000cba:	e005      	b.n	8000cc8 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	3301      	adds	r3, #1
 8000cc0:	617b      	str	r3, [r7, #20]
 8000cc2:	697b      	ldr	r3, [r7, #20]
 8000cc4:	2b1f      	cmp	r3, #31
 8000cc6:	d9df      	bls.n	8000c88 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	2b1f      	cmp	r3, #31
 8000cce:	d902      	bls.n	8000cd6 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8000cd0:	f06f 0302 	mvn.w	r3, #2
 8000cd4:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8000cd6:	693b      	ldr	r3, [r7, #16]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d145      	bne.n	8000d68 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	691b      	ldr	r3, [r3, #16]
 8000ce0:	687a      	ldr	r2, [r7, #4]
 8000ce2:	6810      	ldr	r0, [r2, #0]
 8000ce4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000ce8:	2100      	movs	r1, #0
 8000cea:	4798      	blx	r3
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	db37      	blt.n	8000d62 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	695b      	ldr	r3, [r3, #20]
 8000cf6:	687a      	ldr	r2, [r7, #4]
 8000cf8:	6810      	ldr	r0, [r2, #0]
 8000cfa:	f107 0208 	add.w	r2, r7, #8
 8000cfe:	2100      	movs	r1, #0
 8000d00:	4798      	blx	r3
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	db28      	blt.n	8000d5a <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	699b      	ldr	r3, [r3, #24]
 8000d0c:	4798      	blx	r3
 8000d0e:	4603      	mov	r3, r0
 8000d10:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8000d12:	e01c      	b.n	8000d4e <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	699b      	ldr	r3, [r3, #24]
 8000d18:	4798      	blx	r3
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	461a      	mov	r2, r3
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	1ad3      	subs	r3, r2, r3
 8000d22:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000d26:	d80e      	bhi.n	8000d46 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	695b      	ldr	r3, [r3, #20]
 8000d2c:	687a      	ldr	r2, [r7, #4]
 8000d2e:	6810      	ldr	r0, [r2, #0]
 8000d30:	f107 0208 	add.w	r2, r7, #8
 8000d34:	2100      	movs	r1, #0
 8000d36:	4798      	blx	r3
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	da07      	bge.n	8000d4e <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8000d3e:	f06f 0304 	mvn.w	r3, #4
 8000d42:	613b      	str	r3, [r7, #16]
                 break;
 8000d44:	e010      	b.n	8000d68 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8000d46:	f06f 0301 	mvn.w	r3, #1
 8000d4a:	613b      	str	r3, [r7, #16]
               break;
 8000d4c:	e00c      	b.n	8000d68 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8000d4e:	68bb      	ldr	r3, [r7, #8]
 8000d50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d1dd      	bne.n	8000d14 <LAN8742_Init+0xc6>
 8000d58:	e006      	b.n	8000d68 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8000d5a:	f06f 0304 	mvn.w	r3, #4
 8000d5e:	613b      	str	r3, [r7, #16]
 8000d60:	e002      	b.n	8000d68 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8000d62:	f06f 0303 	mvn.w	r3, #3
 8000d66:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8000d68:	693b      	ldr	r3, [r7, #16]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d112      	bne.n	8000d94 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	699b      	ldr	r3, [r3, #24]
 8000d72:	4798      	blx	r3
 8000d74:	4603      	mov	r3, r0
 8000d76:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8000d78:	bf00      	nop
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	699b      	ldr	r3, [r3, #24]
 8000d7e:	4798      	blx	r3
 8000d80:	4603      	mov	r3, r0
 8000d82:	461a      	mov	r2, r3
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	1ad3      	subs	r3, r2, r3
 8000d88:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000d8c:	d9f5      	bls.n	8000d7a <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	2201      	movs	r2, #1
 8000d92:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8000d94:	693b      	ldr	r3, [r7, #16]
 }
 8000d96:	4618      	mov	r0, r3
 8000d98:	3718      	adds	r7, #24
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}

08000d9e <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8000d9e:	b580      	push	{r7, lr}
 8000da0:	b084      	sub	sp, #16
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8000da6:	2300      	movs	r3, #0
 8000da8:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	695b      	ldr	r3, [r3, #20]
 8000dae:	687a      	ldr	r2, [r7, #4]
 8000db0:	6810      	ldr	r0, [r2, #0]
 8000db2:	f107 020c 	add.w	r2, r7, #12
 8000db6:	2101      	movs	r1, #1
 8000db8:	4798      	blx	r3
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	da02      	bge.n	8000dc6 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000dc0:	f06f 0304 	mvn.w	r3, #4
 8000dc4:	e06e      	b.n	8000ea4 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	695b      	ldr	r3, [r3, #20]
 8000dca:	687a      	ldr	r2, [r7, #4]
 8000dcc:	6810      	ldr	r0, [r2, #0]
 8000dce:	f107 020c 	add.w	r2, r7, #12
 8000dd2:	2101      	movs	r1, #1
 8000dd4:	4798      	blx	r3
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	da02      	bge.n	8000de2 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000ddc:	f06f 0304 	mvn.w	r3, #4
 8000de0:	e060      	b.n	8000ea4 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	f003 0304 	and.w	r3, r3, #4
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d101      	bne.n	8000df0 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8000dec:	2301      	movs	r3, #1
 8000dee:	e059      	b.n	8000ea4 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	695b      	ldr	r3, [r3, #20]
 8000df4:	687a      	ldr	r2, [r7, #4]
 8000df6:	6810      	ldr	r0, [r2, #0]
 8000df8:	f107 020c 	add.w	r2, r7, #12
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	4798      	blx	r3
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	da02      	bge.n	8000e0c <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000e06:	f06f 0304 	mvn.w	r3, #4
 8000e0a:	e04b      	b.n	8000ea4 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d11b      	bne.n	8000e4e <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d006      	beq.n	8000e2e <LAN8742_GetLinkState+0x90>
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	e03a      	b.n	8000ea4 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000e38:	2303      	movs	r3, #3
 8000e3a:	e033      	b.n	8000ea4 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000e46:	2304      	movs	r3, #4
 8000e48:	e02c      	b.n	8000ea4 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000e4a:	2305      	movs	r3, #5
 8000e4c:	e02a      	b.n	8000ea4 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	695b      	ldr	r3, [r3, #20]
 8000e52:	687a      	ldr	r2, [r7, #4]
 8000e54:	6810      	ldr	r0, [r2, #0]
 8000e56:	f107 020c 	add.w	r2, r7, #12
 8000e5a:	211f      	movs	r1, #31
 8000e5c:	4798      	blx	r3
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	da02      	bge.n	8000e6a <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8000e64:	f06f 0304 	mvn.w	r3, #4
 8000e68:	e01c      	b.n	8000ea4 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d101      	bne.n	8000e78 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8000e74:	2306      	movs	r3, #6
 8000e76:	e015      	b.n	8000ea4 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	f003 031c 	and.w	r3, r3, #28
 8000e7e:	2b18      	cmp	r3, #24
 8000e80:	d101      	bne.n	8000e86 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000e82:	2302      	movs	r3, #2
 8000e84:	e00e      	b.n	8000ea4 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	f003 031c 	and.w	r3, r3, #28
 8000e8c:	2b08      	cmp	r3, #8
 8000e8e:	d101      	bne.n	8000e94 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000e90:	2303      	movs	r3, #3
 8000e92:	e007      	b.n	8000ea4 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	f003 031c 	and.w	r3, r3, #28
 8000e9a:	2b14      	cmp	r3, #20
 8000e9c:	d101      	bne.n	8000ea2 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000e9e:	2304      	movs	r3, #4
 8000ea0:	e000      	b.n	8000ea4 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000ea2:	2305      	movs	r3, #5
    }				
  }
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	3710      	adds	r7, #16
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}

08000eac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000eb0:	4b0e      	ldr	r3, [pc, #56]	; (8000eec <HAL_Init+0x40>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a0d      	ldr	r2, [pc, #52]	; (8000eec <HAL_Init+0x40>)
 8000eb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000eba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ebc:	4b0b      	ldr	r3, [pc, #44]	; (8000eec <HAL_Init+0x40>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a0a      	ldr	r2, [pc, #40]	; (8000eec <HAL_Init+0x40>)
 8000ec2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ec6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ec8:	4b08      	ldr	r3, [pc, #32]	; (8000eec <HAL_Init+0x40>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a07      	ldr	r2, [pc, #28]	; (8000eec <HAL_Init+0x40>)
 8000ece:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ed2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ed4:	2003      	movs	r0, #3
 8000ed6:	f000 f94f 	bl	8001178 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eda:	2000      	movs	r0, #0
 8000edc:	f000 f808 	bl	8000ef0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ee0:	f7ff fcc4 	bl	800086c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ee4:	2300      	movs	r3, #0
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	40023c00 	.word	0x40023c00

08000ef0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ef8:	4b12      	ldr	r3, [pc, #72]	; (8000f44 <HAL_InitTick+0x54>)
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	4b12      	ldr	r3, [pc, #72]	; (8000f48 <HAL_InitTick+0x58>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	4619      	mov	r1, r3
 8000f02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f06:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f000 f967 	bl	80011e2 <HAL_SYSTICK_Config>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	e00e      	b.n	8000f3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2b0f      	cmp	r3, #15
 8000f22:	d80a      	bhi.n	8000f3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f24:	2200      	movs	r2, #0
 8000f26:	6879      	ldr	r1, [r7, #4]
 8000f28:	f04f 30ff 	mov.w	r0, #4294967295
 8000f2c:	f000 f92f 	bl	800118e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f30:	4a06      	ldr	r2, [pc, #24]	; (8000f4c <HAL_InitTick+0x5c>)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f36:	2300      	movs	r3, #0
 8000f38:	e000      	b.n	8000f3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f3a:	2301      	movs	r3, #1
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3708      	adds	r7, #8
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	20000000 	.word	0x20000000
 8000f48:	20000008 	.word	0x20000008
 8000f4c:	20000004 	.word	0x20000004

08000f50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f54:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <HAL_IncTick+0x20>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	461a      	mov	r2, r3
 8000f5a:	4b06      	ldr	r3, [pc, #24]	; (8000f74 <HAL_IncTick+0x24>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4413      	add	r3, r2
 8000f60:	4a04      	ldr	r2, [pc, #16]	; (8000f74 <HAL_IncTick+0x24>)
 8000f62:	6013      	str	r3, [r2, #0]
}
 8000f64:	bf00      	nop
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	20000008 	.word	0x20000008
 8000f74:	200000f8 	.word	0x200000f8

08000f78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f7c:	4b03      	ldr	r3, [pc, #12]	; (8000f8c <HAL_GetTick+0x14>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	200000f8 	.word	0x200000f8

08000f90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f98:	f7ff ffee 	bl	8000f78 <HAL_GetTick>
 8000f9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fa8:	d005      	beq.n	8000fb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000faa:	4b0a      	ldr	r3, [pc, #40]	; (8000fd4 <HAL_Delay+0x44>)
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	461a      	mov	r2, r3
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	4413      	add	r3, r2
 8000fb4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fb6:	bf00      	nop
 8000fb8:	f7ff ffde 	bl	8000f78 <HAL_GetTick>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	68bb      	ldr	r3, [r7, #8]
 8000fc0:	1ad3      	subs	r3, r2, r3
 8000fc2:	68fa      	ldr	r2, [r7, #12]
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	d8f7      	bhi.n	8000fb8 <HAL_Delay+0x28>
  {
  }
}
 8000fc8:	bf00      	nop
 8000fca:	bf00      	nop
 8000fcc:	3710      	adds	r7, #16
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	20000008 	.word	0x20000008

08000fd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b085      	sub	sp, #20
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	f003 0307 	and.w	r3, r3, #7
 8000fe6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fe8:	4b0c      	ldr	r3, [pc, #48]	; (800101c <__NVIC_SetPriorityGrouping+0x44>)
 8000fea:	68db      	ldr	r3, [r3, #12]
 8000fec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fee:	68ba      	ldr	r2, [r7, #8]
 8000ff0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001000:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001004:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001008:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800100a:	4a04      	ldr	r2, [pc, #16]	; (800101c <__NVIC_SetPriorityGrouping+0x44>)
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	60d3      	str	r3, [r2, #12]
}
 8001010:	bf00      	nop
 8001012:	3714      	adds	r7, #20
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr
 800101c:	e000ed00 	.word	0xe000ed00

08001020 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001024:	4b04      	ldr	r3, [pc, #16]	; (8001038 <__NVIC_GetPriorityGrouping+0x18>)
 8001026:	68db      	ldr	r3, [r3, #12]
 8001028:	0a1b      	lsrs	r3, r3, #8
 800102a:	f003 0307 	and.w	r3, r3, #7
}
 800102e:	4618      	mov	r0, r3
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr
 8001038:	e000ed00 	.word	0xe000ed00

0800103c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	4603      	mov	r3, r0
 8001044:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104a:	2b00      	cmp	r3, #0
 800104c:	db0b      	blt.n	8001066 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800104e:	79fb      	ldrb	r3, [r7, #7]
 8001050:	f003 021f 	and.w	r2, r3, #31
 8001054:	4907      	ldr	r1, [pc, #28]	; (8001074 <__NVIC_EnableIRQ+0x38>)
 8001056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105a:	095b      	lsrs	r3, r3, #5
 800105c:	2001      	movs	r0, #1
 800105e:	fa00 f202 	lsl.w	r2, r0, r2
 8001062:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001066:	bf00      	nop
 8001068:	370c      	adds	r7, #12
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	e000e100 	.word	0xe000e100

08001078 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	4603      	mov	r3, r0
 8001080:	6039      	str	r1, [r7, #0]
 8001082:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001084:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001088:	2b00      	cmp	r3, #0
 800108a:	db0a      	blt.n	80010a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	b2da      	uxtb	r2, r3
 8001090:	490c      	ldr	r1, [pc, #48]	; (80010c4 <__NVIC_SetPriority+0x4c>)
 8001092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001096:	0112      	lsls	r2, r2, #4
 8001098:	b2d2      	uxtb	r2, r2
 800109a:	440b      	add	r3, r1
 800109c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010a0:	e00a      	b.n	80010b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	b2da      	uxtb	r2, r3
 80010a6:	4908      	ldr	r1, [pc, #32]	; (80010c8 <__NVIC_SetPriority+0x50>)
 80010a8:	79fb      	ldrb	r3, [r7, #7]
 80010aa:	f003 030f 	and.w	r3, r3, #15
 80010ae:	3b04      	subs	r3, #4
 80010b0:	0112      	lsls	r2, r2, #4
 80010b2:	b2d2      	uxtb	r2, r2
 80010b4:	440b      	add	r3, r1
 80010b6:	761a      	strb	r2, [r3, #24]
}
 80010b8:	bf00      	nop
 80010ba:	370c      	adds	r7, #12
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr
 80010c4:	e000e100 	.word	0xe000e100
 80010c8:	e000ed00 	.word	0xe000ed00

080010cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b089      	sub	sp, #36	; 0x24
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	60f8      	str	r0, [r7, #12]
 80010d4:	60b9      	str	r1, [r7, #8]
 80010d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	f003 0307 	and.w	r3, r3, #7
 80010de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	f1c3 0307 	rsb	r3, r3, #7
 80010e6:	2b04      	cmp	r3, #4
 80010e8:	bf28      	it	cs
 80010ea:	2304      	movcs	r3, #4
 80010ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	3304      	adds	r3, #4
 80010f2:	2b06      	cmp	r3, #6
 80010f4:	d902      	bls.n	80010fc <NVIC_EncodePriority+0x30>
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	3b03      	subs	r3, #3
 80010fa:	e000      	b.n	80010fe <NVIC_EncodePriority+0x32>
 80010fc:	2300      	movs	r3, #0
 80010fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001100:	f04f 32ff 	mov.w	r2, #4294967295
 8001104:	69bb      	ldr	r3, [r7, #24]
 8001106:	fa02 f303 	lsl.w	r3, r2, r3
 800110a:	43da      	mvns	r2, r3
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	401a      	ands	r2, r3
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001114:	f04f 31ff 	mov.w	r1, #4294967295
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	fa01 f303 	lsl.w	r3, r1, r3
 800111e:	43d9      	mvns	r1, r3
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001124:	4313      	orrs	r3, r2
         );
}
 8001126:	4618      	mov	r0, r3
 8001128:	3724      	adds	r7, #36	; 0x24
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
	...

08001134 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	3b01      	subs	r3, #1
 8001140:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001144:	d301      	bcc.n	800114a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001146:	2301      	movs	r3, #1
 8001148:	e00f      	b.n	800116a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800114a:	4a0a      	ldr	r2, [pc, #40]	; (8001174 <SysTick_Config+0x40>)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	3b01      	subs	r3, #1
 8001150:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001152:	210f      	movs	r1, #15
 8001154:	f04f 30ff 	mov.w	r0, #4294967295
 8001158:	f7ff ff8e 	bl	8001078 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800115c:	4b05      	ldr	r3, [pc, #20]	; (8001174 <SysTick_Config+0x40>)
 800115e:	2200      	movs	r2, #0
 8001160:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001162:	4b04      	ldr	r3, [pc, #16]	; (8001174 <SysTick_Config+0x40>)
 8001164:	2207      	movs	r2, #7
 8001166:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001168:	2300      	movs	r3, #0
}
 800116a:	4618      	mov	r0, r3
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	e000e010 	.word	0xe000e010

08001178 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001180:	6878      	ldr	r0, [r7, #4]
 8001182:	f7ff ff29 	bl	8000fd8 <__NVIC_SetPriorityGrouping>
}
 8001186:	bf00      	nop
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}

0800118e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800118e:	b580      	push	{r7, lr}
 8001190:	b086      	sub	sp, #24
 8001192:	af00      	add	r7, sp, #0
 8001194:	4603      	mov	r3, r0
 8001196:	60b9      	str	r1, [r7, #8]
 8001198:	607a      	str	r2, [r7, #4]
 800119a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800119c:	2300      	movs	r3, #0
 800119e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011a0:	f7ff ff3e 	bl	8001020 <__NVIC_GetPriorityGrouping>
 80011a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011a6:	687a      	ldr	r2, [r7, #4]
 80011a8:	68b9      	ldr	r1, [r7, #8]
 80011aa:	6978      	ldr	r0, [r7, #20]
 80011ac:	f7ff ff8e 	bl	80010cc <NVIC_EncodePriority>
 80011b0:	4602      	mov	r2, r0
 80011b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011b6:	4611      	mov	r1, r2
 80011b8:	4618      	mov	r0, r3
 80011ba:	f7ff ff5d 	bl	8001078 <__NVIC_SetPriority>
}
 80011be:	bf00      	nop
 80011c0:	3718      	adds	r7, #24
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}

080011c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011c6:	b580      	push	{r7, lr}
 80011c8:	b082      	sub	sp, #8
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	4603      	mov	r3, r0
 80011ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff ff31 	bl	800103c <__NVIC_EnableIRQ>
}
 80011da:	bf00      	nop
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011e2:	b580      	push	{r7, lr}
 80011e4:	b082      	sub	sp, #8
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f7ff ffa2 	bl	8001134 <SysTick_Config>
 80011f0:	4603      	mov	r3, r0
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}

080011fa <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80011fa:	b580      	push	{r7, lr}
 80011fc:	b084      	sub	sp, #16
 80011fe:	af00      	add	r7, sp, #0
 8001200:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001206:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001208:	f7ff feb6 	bl	8000f78 <HAL_GetTick>
 800120c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001214:	b2db      	uxtb	r3, r3
 8001216:	2b02      	cmp	r3, #2
 8001218:	d008      	beq.n	800122c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2280      	movs	r2, #128	; 0x80
 800121e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2200      	movs	r2, #0
 8001224:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001228:	2301      	movs	r3, #1
 800122a:	e052      	b.n	80012d2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f022 0216 	bic.w	r2, r2, #22
 800123a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	695a      	ldr	r2, [r3, #20]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800124a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001250:	2b00      	cmp	r3, #0
 8001252:	d103      	bne.n	800125c <HAL_DMA_Abort+0x62>
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001258:	2b00      	cmp	r3, #0
 800125a:	d007      	beq.n	800126c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f022 0208 	bic.w	r2, r2, #8
 800126a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f022 0201 	bic.w	r2, r2, #1
 800127a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800127c:	e013      	b.n	80012a6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800127e:	f7ff fe7b 	bl	8000f78 <HAL_GetTick>
 8001282:	4602      	mov	r2, r0
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	1ad3      	subs	r3, r2, r3
 8001288:	2b05      	cmp	r3, #5
 800128a:	d90c      	bls.n	80012a6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2220      	movs	r2, #32
 8001290:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2203      	movs	r2, #3
 8001296:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2200      	movs	r2, #0
 800129e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80012a2:	2303      	movs	r3, #3
 80012a4:	e015      	b.n	80012d2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f003 0301 	and.w	r3, r3, #1
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d1e4      	bne.n	800127e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012b8:	223f      	movs	r2, #63	; 0x3f
 80012ba:	409a      	lsls	r2, r3
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2201      	movs	r2, #1
 80012c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2200      	movs	r2, #0
 80012cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80012d0:	2300      	movs	r3, #0
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3710      	adds	r7, #16
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}

080012da <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80012da:	b480      	push	{r7}
 80012dc:	b083      	sub	sp, #12
 80012de:	af00      	add	r7, sp, #0
 80012e0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	2b02      	cmp	r3, #2
 80012ec:	d004      	beq.n	80012f8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2280      	movs	r2, #128	; 0x80
 80012f2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80012f4:	2301      	movs	r3, #1
 80012f6:	e00c      	b.n	8001312 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2205      	movs	r2, #5
 80012fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f022 0201 	bic.w	r2, r2, #1
 800130e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001310:	2300      	movs	r3, #0
}
 8001312:	4618      	mov	r0, r3
 8001314:	370c      	adds	r7, #12
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
	...

08001320 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d101      	bne.n	8001332 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	e06c      	b.n	800140c <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001338:	2b00      	cmp	r3, #0
 800133a:	d106      	bne.n	800134a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2223      	movs	r2, #35	; 0x23
 8001340:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001344:	6878      	ldr	r0, [r7, #4]
 8001346:	f003 f875 	bl	8004434 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800134a:	2300      	movs	r3, #0
 800134c:	60bb      	str	r3, [r7, #8]
 800134e:	4b31      	ldr	r3, [pc, #196]	; (8001414 <HAL_ETH_Init+0xf4>)
 8001350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001352:	4a30      	ldr	r2, [pc, #192]	; (8001414 <HAL_ETH_Init+0xf4>)
 8001354:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001358:	6453      	str	r3, [r2, #68]	; 0x44
 800135a:	4b2e      	ldr	r3, [pc, #184]	; (8001414 <HAL_ETH_Init+0xf4>)
 800135c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800135e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001362:	60bb      	str	r3, [r7, #8]
 8001364:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001366:	4b2c      	ldr	r3, [pc, #176]	; (8001418 <HAL_ETH_Init+0xf8>)
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	4a2b      	ldr	r2, [pc, #172]	; (8001418 <HAL_ETH_Init+0xf8>)
 800136c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001370:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001372:	4b29      	ldr	r3, [pc, #164]	; (8001418 <HAL_ETH_Init+0xf8>)
 8001374:	685a      	ldr	r2, [r3, #4]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	4927      	ldr	r1, [pc, #156]	; (8001418 <HAL_ETH_Init+0xf8>)
 800137c:	4313      	orrs	r3, r2
 800137e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001380:	4b25      	ldr	r3, [pc, #148]	; (8001418 <HAL_ETH_Init+0xf8>)
 8001382:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	687a      	ldr	r2, [r7, #4]
 8001390:	6812      	ldr	r2, [r2, #0]
 8001392:	f043 0301 	orr.w	r3, r3, #1
 8001396:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800139a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800139c:	f7ff fdec 	bl	8000f78 <HAL_GetTick>
 80013a0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80013a2:	e011      	b.n	80013c8 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80013a4:	f7ff fde8 	bl	8000f78 <HAL_GetTick>
 80013a8:	4602      	mov	r2, r0
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80013b2:	d909      	bls.n	80013c8 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2204      	movs	r2, #4
 80013b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	22e0      	movs	r2, #224	; 0xe0
 80013c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80013c4:	2301      	movs	r3, #1
 80013c6:	e021      	b.n	800140c <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f003 0301 	and.w	r3, r3, #1
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d1e4      	bne.n	80013a4 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	f000 fce0 	bl	8001da0 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80013e0:	6878      	ldr	r0, [r7, #4]
 80013e2:	f000 fd87 	bl	8001ef4 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	f000 fddd 	bl	8001fa6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	461a      	mov	r2, r3
 80013f2:	2100      	movs	r1, #0
 80013f4:	6878      	ldr	r0, [r7, #4]
 80013f6:	f000 fd45 	bl	8001e84 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2200      	movs	r2, #0
 80013fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2210      	movs	r2, #16
 8001406:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800140a:	2300      	movs	r3, #0
}
 800140c:	4618      	mov	r0, r3
 800140e:	3710      	adds	r7, #16
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	40023800 	.word	0x40023800
 8001418:	40013800 	.word	0x40013800

0800141c <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800142a:	2b10      	cmp	r3, #16
 800142c:	d13a      	bne.n	80014a4 <HAL_ETH_Start+0x88>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2223      	movs	r2, #35	; 0x23
 8001432:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2204      	movs	r2, #4
 800143a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 800143c:	6878      	ldr	r0, [r7, #4]
 800143e:	f000 f909 	bl	8001654 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f042 0208 	orr.w	r2, r2, #8
 8001450:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f042 0204 	orr.w	r2, r2, #4
 8001460:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	f000 fb50 	bl	8001b08 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001470:	699b      	ldr	r3, [r3, #24]
 8001472:	687a      	ldr	r2, [r7, #4]
 8001474:	6812      	ldr	r2, [r2, #0]
 8001476:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800147a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800147e:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001488:	699b      	ldr	r3, [r3, #24]
 800148a:	687a      	ldr	r2, [r7, #4]
 800148c:	6812      	ldr	r2, [r2, #0]
 800148e:	f043 0302 	orr.w	r3, r3, #2
 8001492:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001496:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2223      	movs	r2, #35	; 0x23
 800149c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80014a0:	2300      	movs	r3, #0
 80014a2:	e000      	b.n	80014a6 <HAL_ETH_Start+0x8a>
  }
  else
  {
    return HAL_ERROR;
 80014a4:	2301      	movs	r3, #1
  }
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}

080014ae <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 80014ae:	b580      	push	{r7, lr}
 80014b0:	b082      	sub	sp, #8
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_STARTED)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80014bc:	2b23      	cmp	r3, #35	; 0x23
 80014be:	d130      	bne.n	8001522 <HAL_ETH_Stop+0x74>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2223      	movs	r2, #35	; 0x23
 80014c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f022 0208 	bic.w	r2, r2, #8
 80014d6:	601a      	str	r2, [r3, #0]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014e0:	699b      	ldr	r3, [r3, #24]
 80014e2:	687a      	ldr	r2, [r7, #4]
 80014e4:	6812      	ldr	r2, [r2, #0]
 80014e6:	f023 0302 	bic.w	r3, r3, #2
 80014ea:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80014ee:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f022 0204 	bic.w	r2, r2, #4
 80014fe:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	f000 fb01 	bl	8001b08 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f022 0208 	bic.w	r2, r2, #8
 8001514:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2210      	movs	r2, #16
 800151a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 800151e:	2300      	movs	r3, #0
 8001520:	e000      	b.n	8001524 <HAL_ETH_Stop+0x76>
  }
  else
  {
    return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
  }
}
 8001524:	4618      	mov	r0, r3
 8001526:	3708      	adds	r7, #8
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}

0800152c <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b086      	sub	sp, #24
 8001530:	af00      	add	r7, sp, #0
 8001532:	60f8      	str	r0, [r7, #12]
 8001534:	60b9      	str	r1, [r7, #8]
 8001536:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d109      	bne.n	8001552 <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001544:	f043 0201 	orr.w	r2, r3, #1
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e07c      	b.n	800164c <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001558:	2b23      	cmp	r3, #35	; 0x23
 800155a:	d176      	bne.n	800164a <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 800155c:	2200      	movs	r2, #0
 800155e:	68b9      	ldr	r1, [r7, #8]
 8001560:	68f8      	ldr	r0, [r7, #12]
 8001562:	f000 fd8d 	bl	8002080 <ETH_Prepare_Tx_Descriptors>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d009      	beq.n	8001580 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001572:	f043 0202 	orr.w	r2, r3, #2
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 800157c:	2301      	movs	r3, #1
 800157e:	e065      	b.n	800164c <HAL_ETH_Transmit+0x120>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001580:	f3bf 8f4f 	dsb	sy
}
 8001584:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	3206      	adds	r2, #6
 800158e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001592:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001598:	1c5a      	adds	r2, r3, #1
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	629a      	str	r2, [r3, #40]	; 0x28
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015a2:	2b03      	cmp	r3, #3
 80015a4:	d904      	bls.n	80015b0 <HAL_ETH_Transmit+0x84>
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015aa:	1f1a      	subs	r2, r3, #4
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	3106      	adds	r1, #6
 80015bc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80015c0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80015c4:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 80015c6:	f7ff fcd7 	bl	8000f78 <HAL_GetTick>
 80015ca:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80015cc:	e037      	b.n	800163e <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015d6:	695b      	ldr	r3, [r3, #20]
 80015d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d011      	beq.n	8001604 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015e6:	f043 0208 	orr.w	r2, r3, #8
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015f8:	695a      	ldr	r2, [r3, #20]
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	e023      	b.n	800164c <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	f1b3 3fff 	cmp.w	r3, #4294967295
 800160a:	d018      	beq.n	800163e <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800160c:	f7ff fcb4 	bl	8000f78 <HAL_GetTick>
 8001610:	4602      	mov	r2, r0
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	687a      	ldr	r2, [r7, #4]
 8001618:	429a      	cmp	r2, r3
 800161a:	d302      	bcc.n	8001622 <HAL_ETH_Transmit+0xf6>
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d10d      	bne.n	800163e <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001628:	f043 0204 	orr.w	r2, r3, #4
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8001638:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	e006      	b.n	800164c <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	2b00      	cmp	r3, #0
 8001644:	dbc3      	blt.n	80015ce <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8001646:	2300      	movs	r3, #0
 8001648:	e000      	b.n	800164c <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
  }
}
 800164c:	4618      	mov	r0, r3
 800164e:	3718      	adds	r7, #24
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}

08001654 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b088      	sub	sp, #32
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 800165c:	2300      	movs	r3, #0
 800165e:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8001660:	2301      	movs	r3, #1
 8001662:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001668:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	69fa      	ldr	r2, [r7, #28]
 800166e:	3212      	adds	r2, #18
 8001670:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001674:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800167a:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 800167c:	e03e      	b.n	80016fc <ETH_UpdateDescriptor+0xa8>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	6a1b      	ldr	r3, [r3, #32]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d112      	bne.n	80016ac <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001686:	f107 030c 	add.w	r3, r7, #12
 800168a:	4618      	mov	r0, r3
 800168c:	f003 f872 	bl	8004774 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d102      	bne.n	800169c <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001696:	2300      	movs	r3, #0
 8001698:	74fb      	strb	r3, [r7, #19]
 800169a:	e007      	b.n	80016ac <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	461a      	mov	r2, r3
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	461a      	mov	r2, r3
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 80016ac:	7cfb      	ldrb	r3, [r7, #19]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d024      	beq.n	80016fc <ETH_UpdateDescriptor+0xa8>
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80016b2:	f3bf 8f5f 	dmb	sy
}
 80016b6:	bf00      	nop
    {
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();

      WRITE_REG(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80016be:	601a      	str	r2, [r3, #0]

      if (heth->RxDescList.ItMode == 0U)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d103      	bne.n	80016d0 <ETH_UpdateDescriptor+0x7c>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | 1000U | ETH_DMARXDESC_RCH);
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	4a1a      	ldr	r2, [pc, #104]	; (8001734 <ETH_UpdateDescriptor+0xe0>)
 80016cc:	605a      	str	r2, [r3, #4]
 80016ce:	e003      	b.n	80016d8 <ETH_UpdateDescriptor+0x84>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, 1000U | ETH_DMARXDESC_RCH);
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	f244 32e8 	movw	r2, #17384	; 0x43e8
 80016d6:	605a      	str	r2, [r3, #4]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	3301      	adds	r3, #1
 80016dc:	61fb      	str	r3, [r7, #28]
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	2b03      	cmp	r3, #3
 80016e2:	d902      	bls.n	80016ea <ETH_UpdateDescriptor+0x96>
 80016e4:	69fb      	ldr	r3, [r7, #28]
 80016e6:	3b04      	subs	r3, #4
 80016e8:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	69fa      	ldr	r2, [r7, #28]
 80016ee:	3212      	adds	r2, #18
 80016f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016f4:	617b      	str	r3, [r7, #20]
      desccount--;
 80016f6:	69bb      	ldr	r3, [r7, #24]
 80016f8:	3b01      	subs	r3, #1
 80016fa:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 80016fc:	69bb      	ldr	r3, [r7, #24]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d002      	beq.n	8001708 <ETH_UpdateDescriptor+0xb4>
 8001702:	7cfb      	ldrb	r3, [r7, #19]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d1ba      	bne.n	800167e <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800170c:	69ba      	ldr	r2, [r7, #24]
 800170e:	429a      	cmp	r2, r3
 8001710:	d00c      	beq.n	800172c <ETH_UpdateDescriptor+0xd8>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800171a:	461a      	mov	r2, r3
 800171c:	2300      	movs	r3, #0
 800171e:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	69fa      	ldr	r2, [r7, #28]
 8001724:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	69ba      	ldr	r2, [r7, #24]
 800172a:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 800172c:	bf00      	nop
 800172e:	3720      	adds	r7, #32
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	800043e8 	.word	0x800043e8

08001738 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b086      	sub	sp, #24
 800173c:	af00      	add	r7, sp, #0
 800173e:	60f8      	str	r0, [r7, #12]
 8001740:	60b9      	str	r1, [r7, #8]
 8001742:	607a      	str	r2, [r7, #4]
 8001744:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	691b      	ldr	r3, [r3, #16]
 800174c:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	f003 031c 	and.w	r3, r3, #28
 8001754:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8001756:	68bb      	ldr	r3, [r7, #8]
 8001758:	02db      	lsls	r3, r3, #11
 800175a:	b29b      	uxth	r3, r3
 800175c:	697a      	ldr	r2, [r7, #20]
 800175e:	4313      	orrs	r3, r2
 8001760:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	019b      	lsls	r3, r3, #6
 8001766:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800176a:	697a      	ldr	r2, [r7, #20]
 800176c:	4313      	orrs	r3, r2
 800176e:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	f023 0302 	bic.w	r3, r3, #2
 8001776:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	f043 0301 	orr.w	r3, r3, #1
 800177e:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	697a      	ldr	r2, [r7, #20]
 8001786:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8001788:	f7ff fbf6 	bl	8000f78 <HAL_GetTick>
 800178c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800178e:	e00d      	b.n	80017ac <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8001790:	f7ff fbf2 	bl	8000f78 <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800179e:	d301      	bcc.n	80017a4 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 80017a0:	2301      	movs	r3, #1
 80017a2:	e010      	b.n	80017c6 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	691b      	ldr	r3, [r3, #16]
 80017aa:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	f003 0301 	and.w	r3, r3, #1
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d1ec      	bne.n	8001790 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	695b      	ldr	r3, [r3, #20]
 80017bc:	b29b      	uxth	r3, r3
 80017be:	461a      	mov	r2, r3
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80017c4:	2300      	movs	r3, #0
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3718      	adds	r7, #24
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}

080017ce <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 80017ce:	b580      	push	{r7, lr}
 80017d0:	b086      	sub	sp, #24
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	60f8      	str	r0, [r7, #12]
 80017d6:	60b9      	str	r1, [r7, #8]
 80017d8:	607a      	str	r2, [r7, #4]
 80017da:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	691b      	ldr	r3, [r3, #16]
 80017e2:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	f003 031c 	and.w	r3, r3, #28
 80017ea:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	02db      	lsls	r3, r3, #11
 80017f0:	b29b      	uxth	r3, r3
 80017f2:	697a      	ldr	r2, [r7, #20]
 80017f4:	4313      	orrs	r3, r2
 80017f6:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	019b      	lsls	r3, r3, #6
 80017fc:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001800:	697a      	ldr	r2, [r7, #20]
 8001802:	4313      	orrs	r3, r2
 8001804:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	f043 0302 	orr.w	r3, r3, #2
 800180c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	f043 0301 	orr.w	r3, r3, #1
 8001814:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	b29a      	uxth	r2, r3
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	697a      	ldr	r2, [r7, #20]
 8001826:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001828:	f7ff fba6 	bl	8000f78 <HAL_GetTick>
 800182c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800182e:	e00d      	b.n	800184c <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8001830:	f7ff fba2 	bl	8000f78 <HAL_GetTick>
 8001834:	4602      	mov	r2, r0
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800183e:	d301      	bcc.n	8001844 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8001840:	2301      	movs	r3, #1
 8001842:	e009      	b.n	8001858 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	691b      	ldr	r3, [r3, #16]
 800184a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	f003 0301 	and.w	r3, r3, #1
 8001852:	2b00      	cmp	r3, #0
 8001854:	d1ec      	bne.n	8001830 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8001856:	2300      	movs	r3, #0
}
 8001858:	4618      	mov	r0, r3
 800185a:	3718      	adds	r7, #24
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}

08001860 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d101      	bne.n	8001874 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	e0d2      	b.n	8001a1a <HAL_ETH_GetMACConfig+0x1ba>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 0310 	and.w	r3, r3, #16
 800187e:	2b00      	cmp	r3, #0
 8001880:	bf14      	ite	ne
 8001882:	2301      	movne	r3, #1
 8001884:	2300      	moveq	r3, #0
 8001886:	b2db      	uxtb	r3, r3
 8001888:	461a      	mov	r2, r3
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 0260 	and.w	r2, r3, #96	; 0x60
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	bf0c      	ite	eq
 80018ac:	2301      	moveq	r3, #1
 80018ae:	2300      	movne	r3, #0
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	461a      	mov	r2, r3
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	bf14      	ite	ne
 80018c8:	2301      	movne	r3, #1
 80018ca:	2300      	moveq	r3, #0
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018de:	2b00      	cmp	r3, #0
 80018e0:	bf0c      	ite	eq
 80018e2:	2301      	moveq	r3, #1
 80018e4:	2300      	movne	r3, #0
 80018e6:	b2db      	uxtb	r3, r3
 80018e8:	461a      	mov	r2, r3
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	bf14      	ite	ne
 80018fc:	2301      	movne	r3, #1
 80018fe:	2300      	moveq	r3, #0
 8001900:	b2db      	uxtb	r3, r3
 8001902:	461a      	mov	r2, r3
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800192e:	2b00      	cmp	r3, #0
 8001930:	bf0c      	ite	eq
 8001932:	2301      	moveq	r3, #1
 8001934:	2300      	movne	r3, #0
 8001936:	b2db      	uxtb	r3, r3
 8001938:	461a      	mov	r2, r3
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001948:	2b00      	cmp	r3, #0
 800194a:	bf0c      	ite	eq
 800194c:	2301      	moveq	r3, #1
 800194e:	2300      	movne	r3, #0
 8001950:	b2db      	uxtb	r3, r3
 8001952:	461a      	mov	r2, r3
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001962:	2b00      	cmp	r3, #0
 8001964:	bf14      	ite	ne
 8001966:	2301      	movne	r3, #1
 8001968:	2300      	moveq	r3, #0
 800196a:	b2db      	uxtb	r3, r3
 800196c:	461a      	mov	r2, r3
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 27) > 0U) ? ENABLE : DISABLE;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	2200      	movs	r2, #0
 800198a:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	699b      	ldr	r3, [r3, #24]
 8001992:	f003 0302 	and.w	r3, r3, #2
 8001996:	2b00      	cmp	r3, #0
 8001998:	bf14      	ite	ne
 800199a:	2301      	movne	r3, #1
 800199c:	2300      	moveq	r3, #0
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	461a      	mov	r2, r3
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	699b      	ldr	r3, [r3, #24]
 80019ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	bf0c      	ite	eq
 80019b6:	2301      	moveq	r3, #1
 80019b8:	2300      	movne	r3, #0
 80019ba:	b2db      	uxtb	r3, r3
 80019bc:	461a      	mov	r2, r3
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	699b      	ldr	r3, [r3, #24]
 80019ca:	f003 0230 	and.w	r2, r3, #48	; 0x30
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	699b      	ldr	r3, [r3, #24]
 80019d8:	0c1b      	lsrs	r3, r3, #16
 80019da:	b29a      	uxth	r2, r3
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) > 0U) ? ENABLE : DISABLE;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	699b      	ldr	r3, [r3, #24]
 80019e6:	f003 0304 	and.w	r3, r3, #4
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	bf14      	ite	ne
 80019ee:	2301      	movne	r3, #1
 80019f0:	2300      	moveq	r3, #0
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	461a      	mov	r2, r3
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 1) > 0U)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	699b      	ldr	r3, [r3, #24]
 8001a02:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	bf14      	ite	ne
 8001a0a:	2301      	movne	r3, #1
 8001a0c:	2300      	moveq	r3, #0
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 1) > 0U)
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8001a18:	2300      	movs	r3, #0
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	370c      	adds	r7, #12
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr

08001a26 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001a26:	b580      	push	{r7, lr}
 8001a28:	b082      	sub	sp, #8
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	6078      	str	r0, [r7, #4]
 8001a2e:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d101      	bne.n	8001a3a <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e00b      	b.n	8001a52 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001a40:	2b10      	cmp	r3, #16
 8001a42:	d105      	bne.n	8001a50 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8001a44:	6839      	ldr	r1, [r7, #0]
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f000 f884 	bl	8001b54 <ETH_SetMACConfig>

    return HAL_OK;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	e000      	b.n	8001a52 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
  }
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
	...

08001a5c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b084      	sub	sp, #16
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	691b      	ldr	r3, [r3, #16]
 8001a6a:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	f023 031c 	bic.w	r3, r3, #28
 8001a72:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001a74:	f001 fab4 	bl	8002fe0 <HAL_RCC_GetHCLKFreq>
 8001a78:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	4a1d      	ldr	r2, [pc, #116]	; (8001af4 <HAL_ETH_SetMDIOClockRange+0x98>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d908      	bls.n	8001a94 <HAL_ETH_SetMDIOClockRange+0x38>
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	4a1c      	ldr	r2, [pc, #112]	; (8001af8 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d804      	bhi.n	8001a94 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	f043 0308 	orr.w	r3, r3, #8
 8001a90:	60fb      	str	r3, [r7, #12]
 8001a92:	e027      	b.n	8001ae4 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	4a18      	ldr	r2, [pc, #96]	; (8001af8 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d908      	bls.n	8001aae <HAL_ETH_SetMDIOClockRange+0x52>
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	4a17      	ldr	r2, [pc, #92]	; (8001afc <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d204      	bcs.n	8001aae <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	f043 030c 	orr.w	r3, r3, #12
 8001aaa:	60fb      	str	r3, [r7, #12]
 8001aac:	e01a      	b.n	8001ae4 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	4a12      	ldr	r2, [pc, #72]	; (8001afc <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d303      	bcc.n	8001abe <HAL_ETH_SetMDIOClockRange+0x62>
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	4a11      	ldr	r2, [pc, #68]	; (8001b00 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d911      	bls.n	8001ae2 <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	4a0f      	ldr	r2, [pc, #60]	; (8001b00 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d908      	bls.n	8001ad8 <HAL_ETH_SetMDIOClockRange+0x7c>
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	4a0e      	ldr	r2, [pc, #56]	; (8001b04 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d804      	bhi.n	8001ad8 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	f043 0304 	orr.w	r3, r3, #4
 8001ad4:	60fb      	str	r3, [r7, #12]
 8001ad6:	e005      	b.n	8001ae4 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	f043 0310 	orr.w	r3, r3, #16
 8001ade:	60fb      	str	r3, [r7, #12]
 8001ae0:	e000      	b.n	8001ae4 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001ae2:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	68fa      	ldr	r2, [r7, #12]
 8001aea:	611a      	str	r2, [r3, #16]
}
 8001aec:	bf00      	nop
 8001aee:	3710      	adds	r7, #16
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	01312cff 	.word	0x01312cff
 8001af8:	02160ebf 	.word	0x02160ebf
 8001afc:	03938700 	.word	0x03938700
 8001b00:	05f5e0ff 	.word	0x05f5e0ff
 8001b04:	08f0d17f 	.word	0x08f0d17f

08001b08 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b084      	sub	sp, #16
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8001b10:	2300      	movs	r3, #0
 8001b12:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b1c:	699b      	ldr	r3, [r3, #24]
 8001b1e:	687a      	ldr	r2, [r7, #4]
 8001b20:	6812      	ldr	r2, [r2, #0]
 8001b22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001b26:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001b2a:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b34:	699b      	ldr	r3, [r3, #24]
 8001b36:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b38:	2001      	movs	r0, #1
 8001b3a:	f7ff fa29 	bl	8000f90 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001b48:	6193      	str	r3, [r2, #24]
}
 8001b4a:	bf00      	nop
 8001b4c:	3710      	adds	r7, #16
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
	...

08001b54 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b084      	sub	sp, #16
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001b66:	68fa      	ldr	r2, [r7, #12]
 8001b68:	4b47      	ldr	r3, [pc, #284]	; (8001c88 <ETH_SetMACConfig+0x134>)
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	7c1b      	ldrb	r3, [r3, #16]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d102      	bne.n	8001b7c <ETH_SetMACConfig+0x28>
 8001b76:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001b7a:	e000      	b.n	8001b7e <ETH_SetMACConfig+0x2a>
 8001b7c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	7c5b      	ldrb	r3, [r3, #17]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d102      	bne.n	8001b8c <ETH_SetMACConfig+0x38>
 8001b86:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b8a:	e000      	b.n	8001b8e <ETH_SetMACConfig+0x3a>
 8001b8c:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001b8e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001b94:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	7fdb      	ldrb	r3, [r3, #31]
 8001b9a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001b9c:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001ba2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001ba4:	683a      	ldr	r2, [r7, #0]
 8001ba6:	7f92      	ldrb	r2, [r2, #30]
 8001ba8:	2a00      	cmp	r2, #0
 8001baa:	d102      	bne.n	8001bb2 <ETH_SetMACConfig+0x5e>
 8001bac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bb0:	e000      	b.n	8001bb4 <ETH_SetMACConfig+0x60>
 8001bb2:	2200      	movs	r2, #0
                        macconf->Speed |
 8001bb4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	7f1b      	ldrb	r3, [r3, #28]
 8001bba:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001bbc:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001bc2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	791b      	ldrb	r3, [r3, #4]
 8001bc8:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001bca:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001bcc:	683a      	ldr	r2, [r7, #0]
 8001bce:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001bd2:	2a00      	cmp	r2, #0
 8001bd4:	d102      	bne.n	8001bdc <ETH_SetMACConfig+0x88>
 8001bd6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bda:	e000      	b.n	8001bde <ETH_SetMACConfig+0x8a>
 8001bdc:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001bde:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	7bdb      	ldrb	r3, [r3, #15]
 8001be4:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001be6:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001bec:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001bf4:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	68fa      	ldr	r2, [r7, #12]
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	68fa      	ldr	r2, [r7, #12]
 8001c04:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c0e:	2001      	movs	r0, #1
 8001c10:	f7ff f9be 	bl	8000f90 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	68fa      	ldr	r2, [r7, #12]
 8001c1a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	699b      	ldr	r3, [r3, #24]
 8001c22:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001c24:	68fa      	ldr	r2, [r7, #12]
 8001c26:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c32:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->ZeroQuantaPause |
 8001c34:	683a      	ldr	r2, [r7, #0]
 8001c36:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001c3a:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        (uint32_t)macconf->ZeroQuantaPause |
 8001c40:	4313      	orrs	r3, r2
                        (uint32_t)macconf->UnicastSlowProtocolPacketDetect |
 8001c42:	683a      	ldr	r2, [r7, #0]
 8001c44:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
                        macconf->PauseLowThreshold |
 8001c48:	4313      	orrs	r3, r2
                        (uint32_t)macconf->ReceiveFlowControl |
 8001c4a:	683a      	ldr	r2, [r7, #0]
 8001c4c:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
                        (uint32_t)macconf->UnicastSlowProtocolPacketDetect |
 8001c50:	4313      	orrs	r3, r2
                        (uint32_t)macconf->TransmitFlowControl);
 8001c52:	683a      	ldr	r2, [r7, #0]
 8001c54:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	68fa      	ldr	r2, [r7, #12]
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	68fa      	ldr	r2, [r7, #12]
 8001c66:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	699b      	ldr	r3, [r3, #24]
 8001c6e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c70:	2001      	movs	r0, #1
 8001c72:	f7ff f98d 	bl	8000f90 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	68fa      	ldr	r2, [r7, #12]
 8001c7c:	619a      	str	r2, [r3, #24]
}
 8001c7e:	bf00      	nop
 8001c80:	3710      	adds	r7, #16
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	ff20810f 	.word	0xff20810f

08001c8c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c9e:	699b      	ldr	r3, [r3, #24]
 8001ca0:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001ca2:	68fa      	ldr	r2, [r7, #12]
 8001ca4:	4b3d      	ldr	r3, [pc, #244]	; (8001d9c <ETH_SetDMAConfig+0x110>)
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	7b1b      	ldrb	r3, [r3, #12]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d102      	bne.n	8001cb8 <ETH_SetDMAConfig+0x2c>
 8001cb2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001cb6:	e000      	b.n	8001cba <ETH_SetDMAConfig+0x2e>
 8001cb8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	7b5b      	ldrb	r3, [r3, #13]
 8001cbe:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001cc0:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001cc2:	683a      	ldr	r2, [r7, #0]
 8001cc4:	7f52      	ldrb	r2, [r2, #29]
 8001cc6:	2a00      	cmp	r2, #0
 8001cc8:	d102      	bne.n	8001cd0 <ETH_SetDMAConfig+0x44>
 8001cca:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001cce:	e000      	b.n	8001cd2 <ETH_SetDMAConfig+0x46>
 8001cd0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001cd2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	7b9b      	ldrb	r3, [r3, #14]
 8001cd8:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001cda:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001ce0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	7f1b      	ldrb	r3, [r3, #28]
 8001ce6:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001ce8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	7f9b      	ldrb	r3, [r3, #30]
 8001cee:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001cf0:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001cf6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001cfe:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001d00:	4313      	orrs	r3, r2
 8001d02:	68fa      	ldr	r2, [r7, #12]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d10:	461a      	mov	r2, r3
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d1e:	699b      	ldr	r3, [r3, #24]
 8001d20:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d22:	2001      	movs	r0, #1
 8001d24:	f7ff f934 	bl	8000f90 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d30:	461a      	mov	r2, r3
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	791b      	ldrb	r3, [r3, #4]
 8001d3a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001d40:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001d46:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001d4c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001d54:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001d56:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d5c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001d5e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001d64:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	6812      	ldr	r2, [r2, #0]
 8001d6a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001d6e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001d72:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d80:	2001      	movs	r0, #1
 8001d82:	f7ff f905 	bl	8000f90 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d8e:	461a      	mov	r2, r3
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	6013      	str	r3, [r2, #0]
}
 8001d94:	bf00      	nop
 8001d96:	3710      	adds	r7, #16
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	f8de3f23 	.word	0xf8de3f23

08001da0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b0a6      	sub	sp, #152	; 0x98
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001da8:	2301      	movs	r3, #1
 8001daa:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001dae:	2301      	movs	r3, #1
 8001db0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001db4:	2300      	movs	r3, #0
 8001db6:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001db8:	2300      	movs	r3, #0
 8001dba:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001de0:	2300      	movs	r3, #0
 8001de2:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001de6:	2300      	movs	r3, #0
 8001de8:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001dea:	2300      	movs	r3, #0
 8001dec:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001df0:	2300      	movs	r3, #0
 8001df2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001df6:	2300      	movs	r3, #0
 8001df8:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001e02:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001e06:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001e08:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001e0c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001e14:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001e18:	4619      	mov	r1, r3
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f7ff fe9a 	bl	8001b54 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001e20:	2301      	movs	r3, #1
 8001e22:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001e24:	2301      	movs	r3, #1
 8001e26:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001e32:	2300      	movs	r3, #0
 8001e34:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001e36:	2300      	movs	r3, #0
 8001e38:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001e42:	2300      	movs	r3, #0
 8001e44:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001e46:	2301      	movs	r3, #1
 8001e48:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001e50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e54:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001e56:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001e5a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001e5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e60:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001e62:	2301      	movs	r3, #1
 8001e64:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001e70:	f107 0308 	add.w	r3, r7, #8
 8001e74:	4619      	mov	r1, r3
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f7ff ff08 	bl	8001c8c <ETH_SetDMAConfig>
}
 8001e7c:	bf00      	nop
 8001e7e:	3798      	adds	r7, #152	; 0x98
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}

08001e84 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b087      	sub	sp, #28
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	60f8      	str	r0, [r7, #12]
 8001e8c:	60b9      	str	r1, [r7, #8]
 8001e8e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	3305      	adds	r3, #5
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	021b      	lsls	r3, r3, #8
 8001e98:	687a      	ldr	r2, [r7, #4]
 8001e9a:	3204      	adds	r2, #4
 8001e9c:	7812      	ldrb	r2, [r2, #0]
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001ea2:	68ba      	ldr	r2, [r7, #8]
 8001ea4:	4b11      	ldr	r3, [pc, #68]	; (8001eec <ETH_MACAddressConfig+0x68>)
 8001ea6:	4413      	add	r3, r2
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	3303      	adds	r3, #3
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	061a      	lsls	r2, r3, #24
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	3302      	adds	r3, #2
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	041b      	lsls	r3, r3, #16
 8001ebe:	431a      	orrs	r2, r3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	3301      	adds	r3, #1
 8001ec4:	781b      	ldrb	r3, [r3, #0]
 8001ec6:	021b      	lsls	r3, r3, #8
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	7812      	ldrb	r2, [r2, #0]
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001ed2:	68ba      	ldr	r2, [r7, #8]
 8001ed4:	4b06      	ldr	r3, [pc, #24]	; (8001ef0 <ETH_MACAddressConfig+0x6c>)
 8001ed6:	4413      	add	r3, r2
 8001ed8:	461a      	mov	r2, r3
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	6013      	str	r3, [r2, #0]
}
 8001ede:	bf00      	nop
 8001ee0:	371c      	adds	r7, #28
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	40028040 	.word	0x40028040
 8001ef0:	40028044 	.word	0x40028044

08001ef4 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b085      	sub	sp, #20
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001efc:	2300      	movs	r3, #0
 8001efe:	60fb      	str	r3, [r7, #12]
 8001f00:	e03e      	b.n	8001f80 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	68d9      	ldr	r1, [r3, #12]
 8001f06:	68fa      	ldr	r2, [r7, #12]
 8001f08:	4613      	mov	r3, r2
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	4413      	add	r3, r2
 8001f0e:	00db      	lsls	r3, r3, #3
 8001f10:	440b      	add	r3, r1
 8001f12:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	2200      	movs	r2, #0
 8001f18:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	2200      	movs	r2, #0
 8001f24:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001f2c:	68b9      	ldr	r1, [r7, #8]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	68fa      	ldr	r2, [r7, #12]
 8001f32:	3206      	adds	r2, #6
 8001f34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	2b02      	cmp	r3, #2
 8001f48:	d80c      	bhi.n	8001f64 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	68d9      	ldr	r1, [r3, #12]
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	1c5a      	adds	r2, r3, #1
 8001f52:	4613      	mov	r3, r2
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	4413      	add	r3, r2
 8001f58:	00db      	lsls	r3, r3, #3
 8001f5a:	440b      	add	r3, r1
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	60da      	str	r2, [r3, #12]
 8001f62:	e004      	b.n	8001f6e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	461a      	mov	r2, r3
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	60fb      	str	r3, [r7, #12]
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2b03      	cmp	r3, #3
 8001f84:	d9bd      	bls.n	8001f02 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	68da      	ldr	r2, [r3, #12]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f98:	611a      	str	r2, [r3, #16]
}
 8001f9a:	bf00      	nop
 8001f9c:	3714      	adds	r7, #20
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr

08001fa6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001fa6:	b480      	push	{r7}
 8001fa8:	b085      	sub	sp, #20
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001fae:	2300      	movs	r3, #0
 8001fb0:	60fb      	str	r3, [r7, #12]
 8001fb2:	e046      	b.n	8002042 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6919      	ldr	r1, [r3, #16]
 8001fb8:	68fa      	ldr	r2, [r7, #12]
 8001fba:	4613      	mov	r3, r2
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	4413      	add	r3, r2
 8001fc0:	00db      	lsls	r3, r3, #3
 8001fc2:	440b      	add	r3, r1
 8001fc4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001ff0:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8001ff8:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002006:	68b9      	ldr	r1, [r7, #8]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	68fa      	ldr	r2, [r7, #12]
 800200c:	3212      	adds	r2, #18
 800200e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	2b02      	cmp	r3, #2
 8002016:	d80c      	bhi.n	8002032 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6919      	ldr	r1, [r3, #16]
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	1c5a      	adds	r2, r3, #1
 8002020:	4613      	mov	r3, r2
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	4413      	add	r3, r2
 8002026:	00db      	lsls	r3, r3, #3
 8002028:	440b      	add	r3, r1
 800202a:	461a      	mov	r2, r3
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	60da      	str	r2, [r3, #12]
 8002030:	e004      	b.n	800203c <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	691b      	ldr	r3, [r3, #16]
 8002036:	461a      	mov	r2, r3
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	3301      	adds	r3, #1
 8002040:	60fb      	str	r3, [r7, #12]
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	2b03      	cmp	r3, #3
 8002046:	d9b5      	bls.n	8001fb4 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2200      	movs	r2, #0
 800204c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2200      	movs	r2, #0
 8002052:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2200      	movs	r2, #0
 8002058:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2200      	movs	r2, #0
 800205e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2200      	movs	r2, #0
 8002064:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	691a      	ldr	r2, [r3, #16]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002072:	60da      	str	r2, [r3, #12]
}
 8002074:	bf00      	nop
 8002076:	3714      	adds	r7, #20
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr

08002080 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8002080:	b480      	push	{r7}
 8002082:	b08d      	sub	sp, #52	; 0x34
 8002084:	af00      	add	r7, sp, #0
 8002086:	60f8      	str	r0, [r7, #12]
 8002088:	60b9      	str	r1, [r7, #8]
 800208a:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	3318      	adds	r3, #24
 8002090:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	691b      	ldr	r3, [r3, #16]
 8002096:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	691b      	ldr	r3, [r3, #16]
 800209c:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 800209e:	2300      	movs	r3, #0
 80020a0:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020aa:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 80020b2:	2300      	movs	r3, #0
 80020b4:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80020b6:	6a3b      	ldr	r3, [r7, #32]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80020be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80020c2:	d007      	beq.n	80020d4 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80020c4:	697a      	ldr	r2, [r7, #20]
 80020c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020c8:	3304      	adds	r3, #4
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	4413      	add	r3, r2
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d001      	beq.n	80020d8 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80020d4:	2302      	movs	r3, #2
 80020d6:	e103      	b.n	80022e0 <ETH_Prepare_Tx_Descriptors+0x260>
  }


  descnbr += 1U;
 80020d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020da:	3301      	adds	r3, #1
 80020dc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	461a      	mov	r2, r3
 80020e4:	6a3b      	ldr	r3, [r7, #32]
 80020e6:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80020e8:	6a3b      	ldr	r3, [r7, #32]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 80020f0:	f023 031f 	bic.w	r3, r3, #31
 80020f4:	69fa      	ldr	r2, [r7, #28]
 80020f6:	6852      	ldr	r2, [r2, #4]
 80020f8:	431a      	orrs	r2, r3
 80020fa:	6a3b      	ldr	r3, [r7, #32]
 80020fc:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0301 	and.w	r3, r3, #1
 8002106:	2b00      	cmp	r3, #0
 8002108:	d008      	beq.n	800211c <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 800210a:	6a3b      	ldr	r3, [r7, #32]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	695b      	ldr	r3, [r3, #20]
 8002116:	431a      	orrs	r2, r3
 8002118:	6a3b      	ldr	r3, [r7, #32]
 800211a:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0320 	and.w	r3, r3, #32
 8002124:	2b00      	cmp	r3, #0
 8002126:	d008      	beq.n	800213a <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8002128:	6a3b      	ldr	r3, [r7, #32]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	691b      	ldr	r3, [r3, #16]
 8002134:	431a      	orrs	r2, r3
 8002136:	6a3b      	ldr	r3, [r7, #32]
 8002138:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0304 	and.w	r3, r3, #4
 8002142:	2b00      	cmp	r3, #0
 8002144:	d005      	beq.n	8002152 <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8002146:	6a3b      	ldr	r3, [r7, #32]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800214e:	6a3b      	ldr	r3, [r7, #32]
 8002150:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002152:	6a3b      	ldr	r3, [r7, #32]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800215a:	6a3b      	ldr	r3, [r7, #32]
 800215c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 800215e:	f3bf 8f5f 	dmb	sy
}
 8002162:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002164:	6a3b      	ldr	r3, [r7, #32]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800216c:	6a3b      	ldr	r3, [r7, #32]
 800216e:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002170:	e084      	b.n	800227c <ETH_Prepare_Tx_Descriptors+0x1fc>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002172:	6a3b      	ldr	r3, [r7, #32]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800217a:	6a3b      	ldr	r3, [r7, #32]
 800217c:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d006      	beq.n	8002192 <ETH_Prepare_Tx_Descriptors+0x112>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002184:	6a3b      	ldr	r3, [r7, #32]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800218c:	6a3b      	ldr	r3, [r7, #32]
 800218e:	601a      	str	r2, [r3, #0]
 8002190:	e005      	b.n	800219e <ETH_Prepare_Tx_Descriptors+0x11e>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002192:	6a3b      	ldr	r3, [r7, #32]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800219a:	6a3b      	ldr	r3, [r7, #32]
 800219c:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800219e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021a0:	3301      	adds	r3, #1
 80021a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021a6:	2b03      	cmp	r3, #3
 80021a8:	d902      	bls.n	80021b0 <ETH_Prepare_Tx_Descriptors+0x130>
 80021aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021ac:	3b04      	subs	r3, #4
 80021ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021b8:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80021ba:	6a3b      	ldr	r3, [r7, #32]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80021c2:	6a3b      	ldr	r3, [r7, #32]
 80021c4:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80021c6:	6a3b      	ldr	r3, [r7, #32]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80021ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80021d2:	d007      	beq.n	80021e4 <ETH_Prepare_Tx_Descriptors+0x164>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80021d4:	697a      	ldr	r2, [r7, #20]
 80021d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021d8:	3304      	adds	r3, #4
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	4413      	add	r3, r2
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d029      	beq.n	8002238 <ETH_Prepare_Tx_Descriptors+0x1b8>
    {
      descidx = firstdescidx;
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021f0:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 80021f2:	2300      	movs	r3, #0
 80021f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80021f6:	e019      	b.n	800222c <ETH_Prepare_Tx_Descriptors+0x1ac>
  __ASM volatile ("dmb 0xF":::"memory");
 80021f8:	f3bf 8f5f 	dmb	sy
}
 80021fc:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80021fe:	6a3b      	ldr	r3, [r7, #32]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002206:	6a3b      	ldr	r3, [r7, #32]
 8002208:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 800220a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800220c:	3301      	adds	r3, #1
 800220e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002212:	2b03      	cmp	r3, #3
 8002214:	d902      	bls.n	800221c <ETH_Prepare_Tx_Descriptors+0x19c>
 8002216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002218:	3b04      	subs	r3, #4
 800221a:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002220:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002224:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8002226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002228:	3301      	adds	r3, #1
 800222a:	62bb      	str	r3, [r7, #40]	; 0x28
 800222c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800222e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002230:	429a      	cmp	r2, r3
 8002232:	d3e1      	bcc.n	80021f8 <ETH_Prepare_Tx_Descriptors+0x178>
      }

      return HAL_ETH_ERROR_BUSY;
 8002234:	2302      	movs	r3, #2
 8002236:	e053      	b.n	80022e0 <ETH_Prepare_Tx_Descriptors+0x260>
    }

    descnbr += 1U;
 8002238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223a:	3301      	adds	r3, #1
 800223c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	461a      	mov	r2, r3
 800224a:	6a3b      	ldr	r3, [r7, #32]
 800224c:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800224e:	6a3b      	ldr	r3, [r7, #32]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8002256:	f023 031f 	bic.w	r3, r3, #31
 800225a:	69fa      	ldr	r2, [r7, #28]
 800225c:	6852      	ldr	r2, [r2, #4]
 800225e:	431a      	orrs	r2, r3
 8002260:	6a3b      	ldr	r3, [r7, #32]
 8002262:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8002264:	69bb      	ldr	r3, [r7, #24]
 8002266:	3301      	adds	r3, #1
 8002268:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 800226a:	f3bf 8f5f 	dmb	sy
}
 800226e:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002270:	6a3b      	ldr	r3, [r7, #32]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002278:	6a3b      	ldr	r3, [r7, #32]
 800227a:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	2b00      	cmp	r3, #0
 8002282:	f47f af76 	bne.w	8002172 <ETH_Prepare_Tx_Descriptors+0xf2>
  }

  if (ItMode != ((uint32_t)RESET))
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d006      	beq.n	800229a <ETH_Prepare_Tx_Descriptors+0x21a>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800228c:	6a3b      	ldr	r3, [r7, #32]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002294:	6a3b      	ldr	r3, [r7, #32]
 8002296:	601a      	str	r2, [r3, #0]
 8002298:	e005      	b.n	80022a6 <ETH_Prepare_Tx_Descriptors+0x226>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800229a:	6a3b      	ldr	r3, [r7, #32]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80022a2:	6a3b      	ldr	r3, [r7, #32]
 80022a4:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80022a6:	6a3b      	ldr	r3, [r7, #32]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80022ae:	6a3b      	ldr	r3, [r7, #32]
 80022b0:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022b6:	6979      	ldr	r1, [r7, #20]
 80022b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022ba:	3304      	adds	r3, #4
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	440b      	add	r3, r1
 80022c0:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022c6:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80022c8:	b672      	cpsid	i
}
 80022ca:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80022d0:	69bb      	ldr	r3, [r7, #24]
 80022d2:	4413      	add	r3, r2
 80022d4:	1c5a      	adds	r2, r3, #1
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 80022da:	b662      	cpsie	i
}
 80022dc:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80022de:	2300      	movs	r3, #0
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3734      	adds	r7, #52	; 0x34
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr

080022ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b089      	sub	sp, #36	; 0x24
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022f6:	2300      	movs	r3, #0
 80022f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022fa:	2300      	movs	r3, #0
 80022fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022fe:	2300      	movs	r3, #0
 8002300:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002302:	2300      	movs	r3, #0
 8002304:	61fb      	str	r3, [r7, #28]
 8002306:	e177      	b.n	80025f8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002308:	2201      	movs	r2, #1
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	fa02 f303 	lsl.w	r3, r2, r3
 8002310:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	697a      	ldr	r2, [r7, #20]
 8002318:	4013      	ands	r3, r2
 800231a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800231c:	693a      	ldr	r2, [r7, #16]
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	429a      	cmp	r2, r3
 8002322:	f040 8166 	bne.w	80025f2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	f003 0303 	and.w	r3, r3, #3
 800232e:	2b01      	cmp	r3, #1
 8002330:	d005      	beq.n	800233e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800233a:	2b02      	cmp	r3, #2
 800233c:	d130      	bne.n	80023a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	005b      	lsls	r3, r3, #1
 8002348:	2203      	movs	r2, #3
 800234a:	fa02 f303 	lsl.w	r3, r2, r3
 800234e:	43db      	mvns	r3, r3
 8002350:	69ba      	ldr	r2, [r7, #24]
 8002352:	4013      	ands	r3, r2
 8002354:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	68da      	ldr	r2, [r3, #12]
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	005b      	lsls	r3, r3, #1
 800235e:	fa02 f303 	lsl.w	r3, r2, r3
 8002362:	69ba      	ldr	r2, [r7, #24]
 8002364:	4313      	orrs	r3, r2
 8002366:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	69ba      	ldr	r2, [r7, #24]
 800236c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002374:	2201      	movs	r2, #1
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	fa02 f303 	lsl.w	r3, r2, r3
 800237c:	43db      	mvns	r3, r3
 800237e:	69ba      	ldr	r2, [r7, #24]
 8002380:	4013      	ands	r3, r2
 8002382:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	091b      	lsrs	r3, r3, #4
 800238a:	f003 0201 	and.w	r2, r3, #1
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	fa02 f303 	lsl.w	r3, r2, r3
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	4313      	orrs	r3, r2
 8002398:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	69ba      	ldr	r2, [r7, #24]
 800239e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f003 0303 	and.w	r3, r3, #3
 80023a8:	2b03      	cmp	r3, #3
 80023aa:	d017      	beq.n	80023dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	005b      	lsls	r3, r3, #1
 80023b6:	2203      	movs	r2, #3
 80023b8:	fa02 f303 	lsl.w	r3, r2, r3
 80023bc:	43db      	mvns	r3, r3
 80023be:	69ba      	ldr	r2, [r7, #24]
 80023c0:	4013      	ands	r3, r2
 80023c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	689a      	ldr	r2, [r3, #8]
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	005b      	lsls	r3, r3, #1
 80023cc:	fa02 f303 	lsl.w	r3, r2, r3
 80023d0:	69ba      	ldr	r2, [r7, #24]
 80023d2:	4313      	orrs	r3, r2
 80023d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	69ba      	ldr	r2, [r7, #24]
 80023da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f003 0303 	and.w	r3, r3, #3
 80023e4:	2b02      	cmp	r3, #2
 80023e6:	d123      	bne.n	8002430 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023e8:	69fb      	ldr	r3, [r7, #28]
 80023ea:	08da      	lsrs	r2, r3, #3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	3208      	adds	r2, #8
 80023f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	f003 0307 	and.w	r3, r3, #7
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	220f      	movs	r2, #15
 8002400:	fa02 f303 	lsl.w	r3, r2, r3
 8002404:	43db      	mvns	r3, r3
 8002406:	69ba      	ldr	r2, [r7, #24]
 8002408:	4013      	ands	r3, r2
 800240a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	691a      	ldr	r2, [r3, #16]
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	f003 0307 	and.w	r3, r3, #7
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	fa02 f303 	lsl.w	r3, r2, r3
 800241c:	69ba      	ldr	r2, [r7, #24]
 800241e:	4313      	orrs	r3, r2
 8002420:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	08da      	lsrs	r2, r3, #3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	3208      	adds	r2, #8
 800242a:	69b9      	ldr	r1, [r7, #24]
 800242c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	005b      	lsls	r3, r3, #1
 800243a:	2203      	movs	r2, #3
 800243c:	fa02 f303 	lsl.w	r3, r2, r3
 8002440:	43db      	mvns	r3, r3
 8002442:	69ba      	ldr	r2, [r7, #24]
 8002444:	4013      	ands	r3, r2
 8002446:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f003 0203 	and.w	r2, r3, #3
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	005b      	lsls	r3, r3, #1
 8002454:	fa02 f303 	lsl.w	r3, r2, r3
 8002458:	69ba      	ldr	r2, [r7, #24]
 800245a:	4313      	orrs	r3, r2
 800245c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	69ba      	ldr	r2, [r7, #24]
 8002462:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800246c:	2b00      	cmp	r3, #0
 800246e:	f000 80c0 	beq.w	80025f2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002472:	2300      	movs	r3, #0
 8002474:	60fb      	str	r3, [r7, #12]
 8002476:	4b66      	ldr	r3, [pc, #408]	; (8002610 <HAL_GPIO_Init+0x324>)
 8002478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800247a:	4a65      	ldr	r2, [pc, #404]	; (8002610 <HAL_GPIO_Init+0x324>)
 800247c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002480:	6453      	str	r3, [r2, #68]	; 0x44
 8002482:	4b63      	ldr	r3, [pc, #396]	; (8002610 <HAL_GPIO_Init+0x324>)
 8002484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002486:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800248a:	60fb      	str	r3, [r7, #12]
 800248c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800248e:	4a61      	ldr	r2, [pc, #388]	; (8002614 <HAL_GPIO_Init+0x328>)
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	089b      	lsrs	r3, r3, #2
 8002494:	3302      	adds	r3, #2
 8002496:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800249a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	f003 0303 	and.w	r3, r3, #3
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	220f      	movs	r2, #15
 80024a6:	fa02 f303 	lsl.w	r3, r2, r3
 80024aa:	43db      	mvns	r3, r3
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	4013      	ands	r3, r2
 80024b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4a58      	ldr	r2, [pc, #352]	; (8002618 <HAL_GPIO_Init+0x32c>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d037      	beq.n	800252a <HAL_GPIO_Init+0x23e>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4a57      	ldr	r2, [pc, #348]	; (800261c <HAL_GPIO_Init+0x330>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d031      	beq.n	8002526 <HAL_GPIO_Init+0x23a>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4a56      	ldr	r2, [pc, #344]	; (8002620 <HAL_GPIO_Init+0x334>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d02b      	beq.n	8002522 <HAL_GPIO_Init+0x236>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4a55      	ldr	r2, [pc, #340]	; (8002624 <HAL_GPIO_Init+0x338>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d025      	beq.n	800251e <HAL_GPIO_Init+0x232>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4a54      	ldr	r2, [pc, #336]	; (8002628 <HAL_GPIO_Init+0x33c>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d01f      	beq.n	800251a <HAL_GPIO_Init+0x22e>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4a53      	ldr	r2, [pc, #332]	; (800262c <HAL_GPIO_Init+0x340>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d019      	beq.n	8002516 <HAL_GPIO_Init+0x22a>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4a52      	ldr	r2, [pc, #328]	; (8002630 <HAL_GPIO_Init+0x344>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d013      	beq.n	8002512 <HAL_GPIO_Init+0x226>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4a51      	ldr	r2, [pc, #324]	; (8002634 <HAL_GPIO_Init+0x348>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d00d      	beq.n	800250e <HAL_GPIO_Init+0x222>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4a50      	ldr	r2, [pc, #320]	; (8002638 <HAL_GPIO_Init+0x34c>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d007      	beq.n	800250a <HAL_GPIO_Init+0x21e>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4a4f      	ldr	r2, [pc, #316]	; (800263c <HAL_GPIO_Init+0x350>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d101      	bne.n	8002506 <HAL_GPIO_Init+0x21a>
 8002502:	2309      	movs	r3, #9
 8002504:	e012      	b.n	800252c <HAL_GPIO_Init+0x240>
 8002506:	230a      	movs	r3, #10
 8002508:	e010      	b.n	800252c <HAL_GPIO_Init+0x240>
 800250a:	2308      	movs	r3, #8
 800250c:	e00e      	b.n	800252c <HAL_GPIO_Init+0x240>
 800250e:	2307      	movs	r3, #7
 8002510:	e00c      	b.n	800252c <HAL_GPIO_Init+0x240>
 8002512:	2306      	movs	r3, #6
 8002514:	e00a      	b.n	800252c <HAL_GPIO_Init+0x240>
 8002516:	2305      	movs	r3, #5
 8002518:	e008      	b.n	800252c <HAL_GPIO_Init+0x240>
 800251a:	2304      	movs	r3, #4
 800251c:	e006      	b.n	800252c <HAL_GPIO_Init+0x240>
 800251e:	2303      	movs	r3, #3
 8002520:	e004      	b.n	800252c <HAL_GPIO_Init+0x240>
 8002522:	2302      	movs	r3, #2
 8002524:	e002      	b.n	800252c <HAL_GPIO_Init+0x240>
 8002526:	2301      	movs	r3, #1
 8002528:	e000      	b.n	800252c <HAL_GPIO_Init+0x240>
 800252a:	2300      	movs	r3, #0
 800252c:	69fa      	ldr	r2, [r7, #28]
 800252e:	f002 0203 	and.w	r2, r2, #3
 8002532:	0092      	lsls	r2, r2, #2
 8002534:	4093      	lsls	r3, r2
 8002536:	69ba      	ldr	r2, [r7, #24]
 8002538:	4313      	orrs	r3, r2
 800253a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800253c:	4935      	ldr	r1, [pc, #212]	; (8002614 <HAL_GPIO_Init+0x328>)
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	089b      	lsrs	r3, r3, #2
 8002542:	3302      	adds	r3, #2
 8002544:	69ba      	ldr	r2, [r7, #24]
 8002546:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800254a:	4b3d      	ldr	r3, [pc, #244]	; (8002640 <HAL_GPIO_Init+0x354>)
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	43db      	mvns	r3, r3
 8002554:	69ba      	ldr	r2, [r7, #24]
 8002556:	4013      	ands	r3, r2
 8002558:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d003      	beq.n	800256e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002566:	69ba      	ldr	r2, [r7, #24]
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	4313      	orrs	r3, r2
 800256c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800256e:	4a34      	ldr	r2, [pc, #208]	; (8002640 <HAL_GPIO_Init+0x354>)
 8002570:	69bb      	ldr	r3, [r7, #24]
 8002572:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002574:	4b32      	ldr	r3, [pc, #200]	; (8002640 <HAL_GPIO_Init+0x354>)
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	43db      	mvns	r3, r3
 800257e:	69ba      	ldr	r2, [r7, #24]
 8002580:	4013      	ands	r3, r2
 8002582:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800258c:	2b00      	cmp	r3, #0
 800258e:	d003      	beq.n	8002598 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	4313      	orrs	r3, r2
 8002596:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002598:	4a29      	ldr	r2, [pc, #164]	; (8002640 <HAL_GPIO_Init+0x354>)
 800259a:	69bb      	ldr	r3, [r7, #24]
 800259c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800259e:	4b28      	ldr	r3, [pc, #160]	; (8002640 <HAL_GPIO_Init+0x354>)
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	43db      	mvns	r3, r3
 80025a8:	69ba      	ldr	r2, [r7, #24]
 80025aa:	4013      	ands	r3, r2
 80025ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d003      	beq.n	80025c2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80025ba:	69ba      	ldr	r2, [r7, #24]
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	4313      	orrs	r3, r2
 80025c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025c2:	4a1f      	ldr	r2, [pc, #124]	; (8002640 <HAL_GPIO_Init+0x354>)
 80025c4:	69bb      	ldr	r3, [r7, #24]
 80025c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025c8:	4b1d      	ldr	r3, [pc, #116]	; (8002640 <HAL_GPIO_Init+0x354>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	43db      	mvns	r3, r3
 80025d2:	69ba      	ldr	r2, [r7, #24]
 80025d4:	4013      	ands	r3, r2
 80025d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d003      	beq.n	80025ec <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80025e4:	69ba      	ldr	r2, [r7, #24]
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025ec:	4a14      	ldr	r2, [pc, #80]	; (8002640 <HAL_GPIO_Init+0x354>)
 80025ee:	69bb      	ldr	r3, [r7, #24]
 80025f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	3301      	adds	r3, #1
 80025f6:	61fb      	str	r3, [r7, #28]
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	2b0f      	cmp	r3, #15
 80025fc:	f67f ae84 	bls.w	8002308 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002600:	bf00      	nop
 8002602:	bf00      	nop
 8002604:	3724      	adds	r7, #36	; 0x24
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr
 800260e:	bf00      	nop
 8002610:	40023800 	.word	0x40023800
 8002614:	40013800 	.word	0x40013800
 8002618:	40020000 	.word	0x40020000
 800261c:	40020400 	.word	0x40020400
 8002620:	40020800 	.word	0x40020800
 8002624:	40020c00 	.word	0x40020c00
 8002628:	40021000 	.word	0x40021000
 800262c:	40021400 	.word	0x40021400
 8002630:	40021800 	.word	0x40021800
 8002634:	40021c00 	.word	0x40021c00
 8002638:	40022000 	.word	0x40022000
 800263c:	40022400 	.word	0x40022400
 8002640:	40013c00 	.word	0x40013c00

08002644 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	460b      	mov	r3, r1
 800264e:	807b      	strh	r3, [r7, #2]
 8002650:	4613      	mov	r3, r2
 8002652:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002654:	787b      	ldrb	r3, [r7, #1]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d003      	beq.n	8002662 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800265a:	887a      	ldrh	r2, [r7, #2]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002660:	e003      	b.n	800266a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002662:	887b      	ldrh	r3, [r7, #2]
 8002664:	041a      	lsls	r2, r3, #16
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	619a      	str	r2, [r3, #24]
}
 800266a:	bf00      	nop
 800266c:	370c      	adds	r7, #12
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr
	...

08002678 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800267e:	2300      	movs	r3, #0
 8002680:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002682:	2300      	movs	r3, #0
 8002684:	603b      	str	r3, [r7, #0]
 8002686:	4b20      	ldr	r3, [pc, #128]	; (8002708 <HAL_PWREx_EnableOverDrive+0x90>)
 8002688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268a:	4a1f      	ldr	r2, [pc, #124]	; (8002708 <HAL_PWREx_EnableOverDrive+0x90>)
 800268c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002690:	6413      	str	r3, [r2, #64]	; 0x40
 8002692:	4b1d      	ldr	r3, [pc, #116]	; (8002708 <HAL_PWREx_EnableOverDrive+0x90>)
 8002694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002696:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800269a:	603b      	str	r3, [r7, #0]
 800269c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800269e:	4b1b      	ldr	r3, [pc, #108]	; (800270c <HAL_PWREx_EnableOverDrive+0x94>)
 80026a0:	2201      	movs	r2, #1
 80026a2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80026a4:	f7fe fc68 	bl	8000f78 <HAL_GetTick>
 80026a8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80026aa:	e009      	b.n	80026c0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80026ac:	f7fe fc64 	bl	8000f78 <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80026ba:	d901      	bls.n	80026c0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80026bc:	2303      	movs	r3, #3
 80026be:	e01f      	b.n	8002700 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80026c0:	4b13      	ldr	r3, [pc, #76]	; (8002710 <HAL_PWREx_EnableOverDrive+0x98>)
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026cc:	d1ee      	bne.n	80026ac <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80026ce:	4b11      	ldr	r3, [pc, #68]	; (8002714 <HAL_PWREx_EnableOverDrive+0x9c>)
 80026d0:	2201      	movs	r2, #1
 80026d2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80026d4:	f7fe fc50 	bl	8000f78 <HAL_GetTick>
 80026d8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80026da:	e009      	b.n	80026f0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80026dc:	f7fe fc4c 	bl	8000f78 <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80026ea:	d901      	bls.n	80026f0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80026ec:	2303      	movs	r3, #3
 80026ee:	e007      	b.n	8002700 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80026f0:	4b07      	ldr	r3, [pc, #28]	; (8002710 <HAL_PWREx_EnableOverDrive+0x98>)
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80026fc:	d1ee      	bne.n	80026dc <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80026fe:	2300      	movs	r3, #0
}
 8002700:	4618      	mov	r0, r3
 8002702:	3708      	adds	r7, #8
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}
 8002708:	40023800 	.word	0x40023800
 800270c:	420e0040 	.word	0x420e0040
 8002710:	40007000 	.word	0x40007000
 8002714:	420e0044 	.word	0x420e0044

08002718 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b086      	sub	sp, #24
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d101      	bne.n	800272a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e267      	b.n	8002bfa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0301 	and.w	r3, r3, #1
 8002732:	2b00      	cmp	r3, #0
 8002734:	d075      	beq.n	8002822 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002736:	4b88      	ldr	r3, [pc, #544]	; (8002958 <HAL_RCC_OscConfig+0x240>)
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	f003 030c 	and.w	r3, r3, #12
 800273e:	2b04      	cmp	r3, #4
 8002740:	d00c      	beq.n	800275c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002742:	4b85      	ldr	r3, [pc, #532]	; (8002958 <HAL_RCC_OscConfig+0x240>)
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800274a:	2b08      	cmp	r3, #8
 800274c:	d112      	bne.n	8002774 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800274e:	4b82      	ldr	r3, [pc, #520]	; (8002958 <HAL_RCC_OscConfig+0x240>)
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002756:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800275a:	d10b      	bne.n	8002774 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800275c:	4b7e      	ldr	r3, [pc, #504]	; (8002958 <HAL_RCC_OscConfig+0x240>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d05b      	beq.n	8002820 <HAL_RCC_OscConfig+0x108>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d157      	bne.n	8002820 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e242      	b.n	8002bfa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800277c:	d106      	bne.n	800278c <HAL_RCC_OscConfig+0x74>
 800277e:	4b76      	ldr	r3, [pc, #472]	; (8002958 <HAL_RCC_OscConfig+0x240>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a75      	ldr	r2, [pc, #468]	; (8002958 <HAL_RCC_OscConfig+0x240>)
 8002784:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002788:	6013      	str	r3, [r2, #0]
 800278a:	e01d      	b.n	80027c8 <HAL_RCC_OscConfig+0xb0>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002794:	d10c      	bne.n	80027b0 <HAL_RCC_OscConfig+0x98>
 8002796:	4b70      	ldr	r3, [pc, #448]	; (8002958 <HAL_RCC_OscConfig+0x240>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a6f      	ldr	r2, [pc, #444]	; (8002958 <HAL_RCC_OscConfig+0x240>)
 800279c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027a0:	6013      	str	r3, [r2, #0]
 80027a2:	4b6d      	ldr	r3, [pc, #436]	; (8002958 <HAL_RCC_OscConfig+0x240>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a6c      	ldr	r2, [pc, #432]	; (8002958 <HAL_RCC_OscConfig+0x240>)
 80027a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027ac:	6013      	str	r3, [r2, #0]
 80027ae:	e00b      	b.n	80027c8 <HAL_RCC_OscConfig+0xb0>
 80027b0:	4b69      	ldr	r3, [pc, #420]	; (8002958 <HAL_RCC_OscConfig+0x240>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a68      	ldr	r2, [pc, #416]	; (8002958 <HAL_RCC_OscConfig+0x240>)
 80027b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027ba:	6013      	str	r3, [r2, #0]
 80027bc:	4b66      	ldr	r3, [pc, #408]	; (8002958 <HAL_RCC_OscConfig+0x240>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a65      	ldr	r2, [pc, #404]	; (8002958 <HAL_RCC_OscConfig+0x240>)
 80027c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d013      	beq.n	80027f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027d0:	f7fe fbd2 	bl	8000f78 <HAL_GetTick>
 80027d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027d6:	e008      	b.n	80027ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027d8:	f7fe fbce 	bl	8000f78 <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	2b64      	cmp	r3, #100	; 0x64
 80027e4:	d901      	bls.n	80027ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e207      	b.n	8002bfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ea:	4b5b      	ldr	r3, [pc, #364]	; (8002958 <HAL_RCC_OscConfig+0x240>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d0f0      	beq.n	80027d8 <HAL_RCC_OscConfig+0xc0>
 80027f6:	e014      	b.n	8002822 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f8:	f7fe fbbe 	bl	8000f78 <HAL_GetTick>
 80027fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027fe:	e008      	b.n	8002812 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002800:	f7fe fbba 	bl	8000f78 <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	2b64      	cmp	r3, #100	; 0x64
 800280c:	d901      	bls.n	8002812 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e1f3      	b.n	8002bfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002812:	4b51      	ldr	r3, [pc, #324]	; (8002958 <HAL_RCC_OscConfig+0x240>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d1f0      	bne.n	8002800 <HAL_RCC_OscConfig+0xe8>
 800281e:	e000      	b.n	8002822 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002820:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 0302 	and.w	r3, r3, #2
 800282a:	2b00      	cmp	r3, #0
 800282c:	d063      	beq.n	80028f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800282e:	4b4a      	ldr	r3, [pc, #296]	; (8002958 <HAL_RCC_OscConfig+0x240>)
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	f003 030c 	and.w	r3, r3, #12
 8002836:	2b00      	cmp	r3, #0
 8002838:	d00b      	beq.n	8002852 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800283a:	4b47      	ldr	r3, [pc, #284]	; (8002958 <HAL_RCC_OscConfig+0x240>)
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002842:	2b08      	cmp	r3, #8
 8002844:	d11c      	bne.n	8002880 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002846:	4b44      	ldr	r3, [pc, #272]	; (8002958 <HAL_RCC_OscConfig+0x240>)
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d116      	bne.n	8002880 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002852:	4b41      	ldr	r3, [pc, #260]	; (8002958 <HAL_RCC_OscConfig+0x240>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0302 	and.w	r3, r3, #2
 800285a:	2b00      	cmp	r3, #0
 800285c:	d005      	beq.n	800286a <HAL_RCC_OscConfig+0x152>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	68db      	ldr	r3, [r3, #12]
 8002862:	2b01      	cmp	r3, #1
 8002864:	d001      	beq.n	800286a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e1c7      	b.n	8002bfa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800286a:	4b3b      	ldr	r3, [pc, #236]	; (8002958 <HAL_RCC_OscConfig+0x240>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	691b      	ldr	r3, [r3, #16]
 8002876:	00db      	lsls	r3, r3, #3
 8002878:	4937      	ldr	r1, [pc, #220]	; (8002958 <HAL_RCC_OscConfig+0x240>)
 800287a:	4313      	orrs	r3, r2
 800287c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800287e:	e03a      	b.n	80028f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d020      	beq.n	80028ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002888:	4b34      	ldr	r3, [pc, #208]	; (800295c <HAL_RCC_OscConfig+0x244>)
 800288a:	2201      	movs	r2, #1
 800288c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800288e:	f7fe fb73 	bl	8000f78 <HAL_GetTick>
 8002892:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002894:	e008      	b.n	80028a8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002896:	f7fe fb6f 	bl	8000f78 <HAL_GetTick>
 800289a:	4602      	mov	r2, r0
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	2b02      	cmp	r3, #2
 80028a2:	d901      	bls.n	80028a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80028a4:	2303      	movs	r3, #3
 80028a6:	e1a8      	b.n	8002bfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028a8:	4b2b      	ldr	r3, [pc, #172]	; (8002958 <HAL_RCC_OscConfig+0x240>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0302 	and.w	r3, r3, #2
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d0f0      	beq.n	8002896 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028b4:	4b28      	ldr	r3, [pc, #160]	; (8002958 <HAL_RCC_OscConfig+0x240>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	691b      	ldr	r3, [r3, #16]
 80028c0:	00db      	lsls	r3, r3, #3
 80028c2:	4925      	ldr	r1, [pc, #148]	; (8002958 <HAL_RCC_OscConfig+0x240>)
 80028c4:	4313      	orrs	r3, r2
 80028c6:	600b      	str	r3, [r1, #0]
 80028c8:	e015      	b.n	80028f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028ca:	4b24      	ldr	r3, [pc, #144]	; (800295c <HAL_RCC_OscConfig+0x244>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d0:	f7fe fb52 	bl	8000f78 <HAL_GetTick>
 80028d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028d6:	e008      	b.n	80028ea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028d8:	f7fe fb4e 	bl	8000f78 <HAL_GetTick>
 80028dc:	4602      	mov	r2, r0
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	2b02      	cmp	r3, #2
 80028e4:	d901      	bls.n	80028ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80028e6:	2303      	movs	r3, #3
 80028e8:	e187      	b.n	8002bfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028ea:	4b1b      	ldr	r3, [pc, #108]	; (8002958 <HAL_RCC_OscConfig+0x240>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0302 	and.w	r3, r3, #2
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d1f0      	bne.n	80028d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0308 	and.w	r3, r3, #8
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d036      	beq.n	8002970 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	695b      	ldr	r3, [r3, #20]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d016      	beq.n	8002938 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800290a:	4b15      	ldr	r3, [pc, #84]	; (8002960 <HAL_RCC_OscConfig+0x248>)
 800290c:	2201      	movs	r2, #1
 800290e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002910:	f7fe fb32 	bl	8000f78 <HAL_GetTick>
 8002914:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002916:	e008      	b.n	800292a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002918:	f7fe fb2e 	bl	8000f78 <HAL_GetTick>
 800291c:	4602      	mov	r2, r0
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	2b02      	cmp	r3, #2
 8002924:	d901      	bls.n	800292a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e167      	b.n	8002bfa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800292a:	4b0b      	ldr	r3, [pc, #44]	; (8002958 <HAL_RCC_OscConfig+0x240>)
 800292c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800292e:	f003 0302 	and.w	r3, r3, #2
 8002932:	2b00      	cmp	r3, #0
 8002934:	d0f0      	beq.n	8002918 <HAL_RCC_OscConfig+0x200>
 8002936:	e01b      	b.n	8002970 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002938:	4b09      	ldr	r3, [pc, #36]	; (8002960 <HAL_RCC_OscConfig+0x248>)
 800293a:	2200      	movs	r2, #0
 800293c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800293e:	f7fe fb1b 	bl	8000f78 <HAL_GetTick>
 8002942:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002944:	e00e      	b.n	8002964 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002946:	f7fe fb17 	bl	8000f78 <HAL_GetTick>
 800294a:	4602      	mov	r2, r0
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	2b02      	cmp	r3, #2
 8002952:	d907      	bls.n	8002964 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002954:	2303      	movs	r3, #3
 8002956:	e150      	b.n	8002bfa <HAL_RCC_OscConfig+0x4e2>
 8002958:	40023800 	.word	0x40023800
 800295c:	42470000 	.word	0x42470000
 8002960:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002964:	4b88      	ldr	r3, [pc, #544]	; (8002b88 <HAL_RCC_OscConfig+0x470>)
 8002966:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002968:	f003 0302 	and.w	r3, r3, #2
 800296c:	2b00      	cmp	r3, #0
 800296e:	d1ea      	bne.n	8002946 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0304 	and.w	r3, r3, #4
 8002978:	2b00      	cmp	r3, #0
 800297a:	f000 8097 	beq.w	8002aac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800297e:	2300      	movs	r3, #0
 8002980:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002982:	4b81      	ldr	r3, [pc, #516]	; (8002b88 <HAL_RCC_OscConfig+0x470>)
 8002984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002986:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d10f      	bne.n	80029ae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800298e:	2300      	movs	r3, #0
 8002990:	60bb      	str	r3, [r7, #8]
 8002992:	4b7d      	ldr	r3, [pc, #500]	; (8002b88 <HAL_RCC_OscConfig+0x470>)
 8002994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002996:	4a7c      	ldr	r2, [pc, #496]	; (8002b88 <HAL_RCC_OscConfig+0x470>)
 8002998:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800299c:	6413      	str	r3, [r2, #64]	; 0x40
 800299e:	4b7a      	ldr	r3, [pc, #488]	; (8002b88 <HAL_RCC_OscConfig+0x470>)
 80029a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029a6:	60bb      	str	r3, [r7, #8]
 80029a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029aa:	2301      	movs	r3, #1
 80029ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029ae:	4b77      	ldr	r3, [pc, #476]	; (8002b8c <HAL_RCC_OscConfig+0x474>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d118      	bne.n	80029ec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029ba:	4b74      	ldr	r3, [pc, #464]	; (8002b8c <HAL_RCC_OscConfig+0x474>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a73      	ldr	r2, [pc, #460]	; (8002b8c <HAL_RCC_OscConfig+0x474>)
 80029c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029c6:	f7fe fad7 	bl	8000f78 <HAL_GetTick>
 80029ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029cc:	e008      	b.n	80029e0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029ce:	f7fe fad3 	bl	8000f78 <HAL_GetTick>
 80029d2:	4602      	mov	r2, r0
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	1ad3      	subs	r3, r2, r3
 80029d8:	2b02      	cmp	r3, #2
 80029da:	d901      	bls.n	80029e0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80029dc:	2303      	movs	r3, #3
 80029de:	e10c      	b.n	8002bfa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029e0:	4b6a      	ldr	r3, [pc, #424]	; (8002b8c <HAL_RCC_OscConfig+0x474>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d0f0      	beq.n	80029ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d106      	bne.n	8002a02 <HAL_RCC_OscConfig+0x2ea>
 80029f4:	4b64      	ldr	r3, [pc, #400]	; (8002b88 <HAL_RCC_OscConfig+0x470>)
 80029f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029f8:	4a63      	ldr	r2, [pc, #396]	; (8002b88 <HAL_RCC_OscConfig+0x470>)
 80029fa:	f043 0301 	orr.w	r3, r3, #1
 80029fe:	6713      	str	r3, [r2, #112]	; 0x70
 8002a00:	e01c      	b.n	8002a3c <HAL_RCC_OscConfig+0x324>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	2b05      	cmp	r3, #5
 8002a08:	d10c      	bne.n	8002a24 <HAL_RCC_OscConfig+0x30c>
 8002a0a:	4b5f      	ldr	r3, [pc, #380]	; (8002b88 <HAL_RCC_OscConfig+0x470>)
 8002a0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a0e:	4a5e      	ldr	r2, [pc, #376]	; (8002b88 <HAL_RCC_OscConfig+0x470>)
 8002a10:	f043 0304 	orr.w	r3, r3, #4
 8002a14:	6713      	str	r3, [r2, #112]	; 0x70
 8002a16:	4b5c      	ldr	r3, [pc, #368]	; (8002b88 <HAL_RCC_OscConfig+0x470>)
 8002a18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a1a:	4a5b      	ldr	r2, [pc, #364]	; (8002b88 <HAL_RCC_OscConfig+0x470>)
 8002a1c:	f043 0301 	orr.w	r3, r3, #1
 8002a20:	6713      	str	r3, [r2, #112]	; 0x70
 8002a22:	e00b      	b.n	8002a3c <HAL_RCC_OscConfig+0x324>
 8002a24:	4b58      	ldr	r3, [pc, #352]	; (8002b88 <HAL_RCC_OscConfig+0x470>)
 8002a26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a28:	4a57      	ldr	r2, [pc, #348]	; (8002b88 <HAL_RCC_OscConfig+0x470>)
 8002a2a:	f023 0301 	bic.w	r3, r3, #1
 8002a2e:	6713      	str	r3, [r2, #112]	; 0x70
 8002a30:	4b55      	ldr	r3, [pc, #340]	; (8002b88 <HAL_RCC_OscConfig+0x470>)
 8002a32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a34:	4a54      	ldr	r2, [pc, #336]	; (8002b88 <HAL_RCC_OscConfig+0x470>)
 8002a36:	f023 0304 	bic.w	r3, r3, #4
 8002a3a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d015      	beq.n	8002a70 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a44:	f7fe fa98 	bl	8000f78 <HAL_GetTick>
 8002a48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a4a:	e00a      	b.n	8002a62 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a4c:	f7fe fa94 	bl	8000f78 <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d901      	bls.n	8002a62 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	e0cb      	b.n	8002bfa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a62:	4b49      	ldr	r3, [pc, #292]	; (8002b88 <HAL_RCC_OscConfig+0x470>)
 8002a64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a66:	f003 0302 	and.w	r3, r3, #2
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d0ee      	beq.n	8002a4c <HAL_RCC_OscConfig+0x334>
 8002a6e:	e014      	b.n	8002a9a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a70:	f7fe fa82 	bl	8000f78 <HAL_GetTick>
 8002a74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a76:	e00a      	b.n	8002a8e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a78:	f7fe fa7e 	bl	8000f78 <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d901      	bls.n	8002a8e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	e0b5      	b.n	8002bfa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a8e:	4b3e      	ldr	r3, [pc, #248]	; (8002b88 <HAL_RCC_OscConfig+0x470>)
 8002a90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a92:	f003 0302 	and.w	r3, r3, #2
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d1ee      	bne.n	8002a78 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a9a:	7dfb      	ldrb	r3, [r7, #23]
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d105      	bne.n	8002aac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002aa0:	4b39      	ldr	r3, [pc, #228]	; (8002b88 <HAL_RCC_OscConfig+0x470>)
 8002aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa4:	4a38      	ldr	r2, [pc, #224]	; (8002b88 <HAL_RCC_OscConfig+0x470>)
 8002aa6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002aaa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	699b      	ldr	r3, [r3, #24]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	f000 80a1 	beq.w	8002bf8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ab6:	4b34      	ldr	r3, [pc, #208]	; (8002b88 <HAL_RCC_OscConfig+0x470>)
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	f003 030c 	and.w	r3, r3, #12
 8002abe:	2b08      	cmp	r3, #8
 8002ac0:	d05c      	beq.n	8002b7c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	699b      	ldr	r3, [r3, #24]
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d141      	bne.n	8002b4e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aca:	4b31      	ldr	r3, [pc, #196]	; (8002b90 <HAL_RCC_OscConfig+0x478>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ad0:	f7fe fa52 	bl	8000f78 <HAL_GetTick>
 8002ad4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ad6:	e008      	b.n	8002aea <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ad8:	f7fe fa4e 	bl	8000f78 <HAL_GetTick>
 8002adc:	4602      	mov	r2, r0
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	d901      	bls.n	8002aea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	e087      	b.n	8002bfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002aea:	4b27      	ldr	r3, [pc, #156]	; (8002b88 <HAL_RCC_OscConfig+0x470>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d1f0      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	69da      	ldr	r2, [r3, #28]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6a1b      	ldr	r3, [r3, #32]
 8002afe:	431a      	orrs	r2, r3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b04:	019b      	lsls	r3, r3, #6
 8002b06:	431a      	orrs	r2, r3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b0c:	085b      	lsrs	r3, r3, #1
 8002b0e:	3b01      	subs	r3, #1
 8002b10:	041b      	lsls	r3, r3, #16
 8002b12:	431a      	orrs	r2, r3
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b18:	061b      	lsls	r3, r3, #24
 8002b1a:	491b      	ldr	r1, [pc, #108]	; (8002b88 <HAL_RCC_OscConfig+0x470>)
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b20:	4b1b      	ldr	r3, [pc, #108]	; (8002b90 <HAL_RCC_OscConfig+0x478>)
 8002b22:	2201      	movs	r2, #1
 8002b24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b26:	f7fe fa27 	bl	8000f78 <HAL_GetTick>
 8002b2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b2c:	e008      	b.n	8002b40 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b2e:	f7fe fa23 	bl	8000f78 <HAL_GetTick>
 8002b32:	4602      	mov	r2, r0
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	2b02      	cmp	r3, #2
 8002b3a:	d901      	bls.n	8002b40 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	e05c      	b.n	8002bfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b40:	4b11      	ldr	r3, [pc, #68]	; (8002b88 <HAL_RCC_OscConfig+0x470>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d0f0      	beq.n	8002b2e <HAL_RCC_OscConfig+0x416>
 8002b4c:	e054      	b.n	8002bf8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b4e:	4b10      	ldr	r3, [pc, #64]	; (8002b90 <HAL_RCC_OscConfig+0x478>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b54:	f7fe fa10 	bl	8000f78 <HAL_GetTick>
 8002b58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b5a:	e008      	b.n	8002b6e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b5c:	f7fe fa0c 	bl	8000f78 <HAL_GetTick>
 8002b60:	4602      	mov	r2, r0
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	2b02      	cmp	r3, #2
 8002b68:	d901      	bls.n	8002b6e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	e045      	b.n	8002bfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b6e:	4b06      	ldr	r3, [pc, #24]	; (8002b88 <HAL_RCC_OscConfig+0x470>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d1f0      	bne.n	8002b5c <HAL_RCC_OscConfig+0x444>
 8002b7a:	e03d      	b.n	8002bf8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	699b      	ldr	r3, [r3, #24]
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d107      	bne.n	8002b94 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e038      	b.n	8002bfa <HAL_RCC_OscConfig+0x4e2>
 8002b88:	40023800 	.word	0x40023800
 8002b8c:	40007000 	.word	0x40007000
 8002b90:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b94:	4b1b      	ldr	r3, [pc, #108]	; (8002c04 <HAL_RCC_OscConfig+0x4ec>)
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	699b      	ldr	r3, [r3, #24]
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d028      	beq.n	8002bf4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d121      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	d11a      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bbe:	68fa      	ldr	r2, [r7, #12]
 8002bc0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002bca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d111      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bda:	085b      	lsrs	r3, r3, #1
 8002bdc:	3b01      	subs	r3, #1
 8002bde:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d107      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d001      	beq.n	8002bf8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e000      	b.n	8002bfa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002bf8:	2300      	movs	r3, #0
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3718      	adds	r7, #24
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	40023800 	.word	0x40023800

08002c08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b084      	sub	sp, #16
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d101      	bne.n	8002c1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e0cc      	b.n	8002db6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c1c:	4b68      	ldr	r3, [pc, #416]	; (8002dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 030f 	and.w	r3, r3, #15
 8002c24:	683a      	ldr	r2, [r7, #0]
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d90c      	bls.n	8002c44 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c2a:	4b65      	ldr	r3, [pc, #404]	; (8002dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c2c:	683a      	ldr	r2, [r7, #0]
 8002c2e:	b2d2      	uxtb	r2, r2
 8002c30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c32:	4b63      	ldr	r3, [pc, #396]	; (8002dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 030f 	and.w	r3, r3, #15
 8002c3a:	683a      	ldr	r2, [r7, #0]
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d001      	beq.n	8002c44 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e0b8      	b.n	8002db6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 0302 	and.w	r3, r3, #2
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d020      	beq.n	8002c92 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0304 	and.w	r3, r3, #4
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d005      	beq.n	8002c68 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c5c:	4b59      	ldr	r3, [pc, #356]	; (8002dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	4a58      	ldr	r2, [pc, #352]	; (8002dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c62:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c66:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 0308 	and.w	r3, r3, #8
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d005      	beq.n	8002c80 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c74:	4b53      	ldr	r3, [pc, #332]	; (8002dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	4a52      	ldr	r2, [pc, #328]	; (8002dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c7a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c7e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c80:	4b50      	ldr	r3, [pc, #320]	; (8002dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	494d      	ldr	r1, [pc, #308]	; (8002dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0301 	and.w	r3, r3, #1
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d044      	beq.n	8002d28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d107      	bne.n	8002cb6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ca6:	4b47      	ldr	r3, [pc, #284]	; (8002dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d119      	bne.n	8002ce6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e07f      	b.n	8002db6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	d003      	beq.n	8002cc6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cc2:	2b03      	cmp	r3, #3
 8002cc4:	d107      	bne.n	8002cd6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cc6:	4b3f      	ldr	r3, [pc, #252]	; (8002dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d109      	bne.n	8002ce6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e06f      	b.n	8002db6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cd6:	4b3b      	ldr	r3, [pc, #236]	; (8002dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0302 	and.w	r3, r3, #2
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d101      	bne.n	8002ce6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e067      	b.n	8002db6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ce6:	4b37      	ldr	r3, [pc, #220]	; (8002dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	f023 0203 	bic.w	r2, r3, #3
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	4934      	ldr	r1, [pc, #208]	; (8002dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cf8:	f7fe f93e 	bl	8000f78 <HAL_GetTick>
 8002cfc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cfe:	e00a      	b.n	8002d16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d00:	f7fe f93a 	bl	8000f78 <HAL_GetTick>
 8002d04:	4602      	mov	r2, r0
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d901      	bls.n	8002d16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e04f      	b.n	8002db6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d16:	4b2b      	ldr	r3, [pc, #172]	; (8002dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	f003 020c 	and.w	r2, r3, #12
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d1eb      	bne.n	8002d00 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d28:	4b25      	ldr	r3, [pc, #148]	; (8002dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 030f 	and.w	r3, r3, #15
 8002d30:	683a      	ldr	r2, [r7, #0]
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d20c      	bcs.n	8002d50 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d36:	4b22      	ldr	r3, [pc, #136]	; (8002dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d38:	683a      	ldr	r2, [r7, #0]
 8002d3a:	b2d2      	uxtb	r2, r2
 8002d3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d3e:	4b20      	ldr	r3, [pc, #128]	; (8002dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 030f 	and.w	r3, r3, #15
 8002d46:	683a      	ldr	r2, [r7, #0]
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d001      	beq.n	8002d50 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e032      	b.n	8002db6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0304 	and.w	r3, r3, #4
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d008      	beq.n	8002d6e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d5c:	4b19      	ldr	r3, [pc, #100]	; (8002dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	4916      	ldr	r1, [pc, #88]	; (8002dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 0308 	and.w	r3, r3, #8
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d009      	beq.n	8002d8e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d7a:	4b12      	ldr	r3, [pc, #72]	; (8002dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	691b      	ldr	r3, [r3, #16]
 8002d86:	00db      	lsls	r3, r3, #3
 8002d88:	490e      	ldr	r1, [pc, #56]	; (8002dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d8e:	f000 f821 	bl	8002dd4 <HAL_RCC_GetSysClockFreq>
 8002d92:	4602      	mov	r2, r0
 8002d94:	4b0b      	ldr	r3, [pc, #44]	; (8002dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	091b      	lsrs	r3, r3, #4
 8002d9a:	f003 030f 	and.w	r3, r3, #15
 8002d9e:	490a      	ldr	r1, [pc, #40]	; (8002dc8 <HAL_RCC_ClockConfig+0x1c0>)
 8002da0:	5ccb      	ldrb	r3, [r1, r3]
 8002da2:	fa22 f303 	lsr.w	r3, r2, r3
 8002da6:	4a09      	ldr	r2, [pc, #36]	; (8002dcc <HAL_RCC_ClockConfig+0x1c4>)
 8002da8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002daa:	4b09      	ldr	r3, [pc, #36]	; (8002dd0 <HAL_RCC_ClockConfig+0x1c8>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4618      	mov	r0, r3
 8002db0:	f7fe f89e 	bl	8000ef0 <HAL_InitTick>

  return HAL_OK;
 8002db4:	2300      	movs	r3, #0
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3710      	adds	r7, #16
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	40023c00 	.word	0x40023c00
 8002dc4:	40023800 	.word	0x40023800
 8002dc8:	08014668 	.word	0x08014668
 8002dcc:	20000000 	.word	0x20000000
 8002dd0:	20000004 	.word	0x20000004

08002dd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002dd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002dd8:	b094      	sub	sp, #80	; 0x50
 8002dda:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	647b      	str	r3, [r7, #68]	; 0x44
 8002de0:	2300      	movs	r3, #0
 8002de2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002de4:	2300      	movs	r3, #0
 8002de6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002de8:	2300      	movs	r3, #0
 8002dea:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002dec:	4b79      	ldr	r3, [pc, #484]	; (8002fd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	f003 030c 	and.w	r3, r3, #12
 8002df4:	2b08      	cmp	r3, #8
 8002df6:	d00d      	beq.n	8002e14 <HAL_RCC_GetSysClockFreq+0x40>
 8002df8:	2b08      	cmp	r3, #8
 8002dfa:	f200 80e1 	bhi.w	8002fc0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d002      	beq.n	8002e08 <HAL_RCC_GetSysClockFreq+0x34>
 8002e02:	2b04      	cmp	r3, #4
 8002e04:	d003      	beq.n	8002e0e <HAL_RCC_GetSysClockFreq+0x3a>
 8002e06:	e0db      	b.n	8002fc0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e08:	4b73      	ldr	r3, [pc, #460]	; (8002fd8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002e0a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002e0c:	e0db      	b.n	8002fc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e0e:	4b73      	ldr	r3, [pc, #460]	; (8002fdc <HAL_RCC_GetSysClockFreq+0x208>)
 8002e10:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e12:	e0d8      	b.n	8002fc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e14:	4b6f      	ldr	r3, [pc, #444]	; (8002fd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e1c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e1e:	4b6d      	ldr	r3, [pc, #436]	; (8002fd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d063      	beq.n	8002ef2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e2a:	4b6a      	ldr	r3, [pc, #424]	; (8002fd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	099b      	lsrs	r3, r3, #6
 8002e30:	2200      	movs	r2, #0
 8002e32:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e34:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e3c:	633b      	str	r3, [r7, #48]	; 0x30
 8002e3e:	2300      	movs	r3, #0
 8002e40:	637b      	str	r3, [r7, #52]	; 0x34
 8002e42:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002e46:	4622      	mov	r2, r4
 8002e48:	462b      	mov	r3, r5
 8002e4a:	f04f 0000 	mov.w	r0, #0
 8002e4e:	f04f 0100 	mov.w	r1, #0
 8002e52:	0159      	lsls	r1, r3, #5
 8002e54:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e58:	0150      	lsls	r0, r2, #5
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	460b      	mov	r3, r1
 8002e5e:	4621      	mov	r1, r4
 8002e60:	1a51      	subs	r1, r2, r1
 8002e62:	6139      	str	r1, [r7, #16]
 8002e64:	4629      	mov	r1, r5
 8002e66:	eb63 0301 	sbc.w	r3, r3, r1
 8002e6a:	617b      	str	r3, [r7, #20]
 8002e6c:	f04f 0200 	mov.w	r2, #0
 8002e70:	f04f 0300 	mov.w	r3, #0
 8002e74:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e78:	4659      	mov	r1, fp
 8002e7a:	018b      	lsls	r3, r1, #6
 8002e7c:	4651      	mov	r1, sl
 8002e7e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e82:	4651      	mov	r1, sl
 8002e84:	018a      	lsls	r2, r1, #6
 8002e86:	4651      	mov	r1, sl
 8002e88:	ebb2 0801 	subs.w	r8, r2, r1
 8002e8c:	4659      	mov	r1, fp
 8002e8e:	eb63 0901 	sbc.w	r9, r3, r1
 8002e92:	f04f 0200 	mov.w	r2, #0
 8002e96:	f04f 0300 	mov.w	r3, #0
 8002e9a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e9e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ea2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ea6:	4690      	mov	r8, r2
 8002ea8:	4699      	mov	r9, r3
 8002eaa:	4623      	mov	r3, r4
 8002eac:	eb18 0303 	adds.w	r3, r8, r3
 8002eb0:	60bb      	str	r3, [r7, #8]
 8002eb2:	462b      	mov	r3, r5
 8002eb4:	eb49 0303 	adc.w	r3, r9, r3
 8002eb8:	60fb      	str	r3, [r7, #12]
 8002eba:	f04f 0200 	mov.w	r2, #0
 8002ebe:	f04f 0300 	mov.w	r3, #0
 8002ec2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002ec6:	4629      	mov	r1, r5
 8002ec8:	024b      	lsls	r3, r1, #9
 8002eca:	4621      	mov	r1, r4
 8002ecc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002ed0:	4621      	mov	r1, r4
 8002ed2:	024a      	lsls	r2, r1, #9
 8002ed4:	4610      	mov	r0, r2
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002eda:	2200      	movs	r2, #0
 8002edc:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ede:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002ee0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002ee4:	f7fd f9d4 	bl	8000290 <__aeabi_uldivmod>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	460b      	mov	r3, r1
 8002eec:	4613      	mov	r3, r2
 8002eee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ef0:	e058      	b.n	8002fa4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ef2:	4b38      	ldr	r3, [pc, #224]	; (8002fd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	099b      	lsrs	r3, r3, #6
 8002ef8:	2200      	movs	r2, #0
 8002efa:	4618      	mov	r0, r3
 8002efc:	4611      	mov	r1, r2
 8002efe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002f02:	623b      	str	r3, [r7, #32]
 8002f04:	2300      	movs	r3, #0
 8002f06:	627b      	str	r3, [r7, #36]	; 0x24
 8002f08:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002f0c:	4642      	mov	r2, r8
 8002f0e:	464b      	mov	r3, r9
 8002f10:	f04f 0000 	mov.w	r0, #0
 8002f14:	f04f 0100 	mov.w	r1, #0
 8002f18:	0159      	lsls	r1, r3, #5
 8002f1a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f1e:	0150      	lsls	r0, r2, #5
 8002f20:	4602      	mov	r2, r0
 8002f22:	460b      	mov	r3, r1
 8002f24:	4641      	mov	r1, r8
 8002f26:	ebb2 0a01 	subs.w	sl, r2, r1
 8002f2a:	4649      	mov	r1, r9
 8002f2c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002f30:	f04f 0200 	mov.w	r2, #0
 8002f34:	f04f 0300 	mov.w	r3, #0
 8002f38:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002f3c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002f40:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002f44:	ebb2 040a 	subs.w	r4, r2, sl
 8002f48:	eb63 050b 	sbc.w	r5, r3, fp
 8002f4c:	f04f 0200 	mov.w	r2, #0
 8002f50:	f04f 0300 	mov.w	r3, #0
 8002f54:	00eb      	lsls	r3, r5, #3
 8002f56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f5a:	00e2      	lsls	r2, r4, #3
 8002f5c:	4614      	mov	r4, r2
 8002f5e:	461d      	mov	r5, r3
 8002f60:	4643      	mov	r3, r8
 8002f62:	18e3      	adds	r3, r4, r3
 8002f64:	603b      	str	r3, [r7, #0]
 8002f66:	464b      	mov	r3, r9
 8002f68:	eb45 0303 	adc.w	r3, r5, r3
 8002f6c:	607b      	str	r3, [r7, #4]
 8002f6e:	f04f 0200 	mov.w	r2, #0
 8002f72:	f04f 0300 	mov.w	r3, #0
 8002f76:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f7a:	4629      	mov	r1, r5
 8002f7c:	028b      	lsls	r3, r1, #10
 8002f7e:	4621      	mov	r1, r4
 8002f80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f84:	4621      	mov	r1, r4
 8002f86:	028a      	lsls	r2, r1, #10
 8002f88:	4610      	mov	r0, r2
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f8e:	2200      	movs	r2, #0
 8002f90:	61bb      	str	r3, [r7, #24]
 8002f92:	61fa      	str	r2, [r7, #28]
 8002f94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f98:	f7fd f97a 	bl	8000290 <__aeabi_uldivmod>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	460b      	mov	r3, r1
 8002fa0:	4613      	mov	r3, r2
 8002fa2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002fa4:	4b0b      	ldr	r3, [pc, #44]	; (8002fd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	0c1b      	lsrs	r3, r3, #16
 8002faa:	f003 0303 	and.w	r3, r3, #3
 8002fae:	3301      	adds	r3, #1
 8002fb0:	005b      	lsls	r3, r3, #1
 8002fb2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002fb4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002fb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fbc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002fbe:	e002      	b.n	8002fc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002fc0:	4b05      	ldr	r3, [pc, #20]	; (8002fd8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002fc2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002fc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002fc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3750      	adds	r7, #80	; 0x50
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002fd2:	bf00      	nop
 8002fd4:	40023800 	.word	0x40023800
 8002fd8:	00f42400 	.word	0x00f42400
 8002fdc:	007a1200 	.word	0x007a1200

08002fe0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fe4:	4b03      	ldr	r3, [pc, #12]	; (8002ff4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr
 8002ff2:	bf00      	nop
 8002ff4:	20000000 	.word	0x20000000

08002ff8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ffc:	f7ff fff0 	bl	8002fe0 <HAL_RCC_GetHCLKFreq>
 8003000:	4602      	mov	r2, r0
 8003002:	4b05      	ldr	r3, [pc, #20]	; (8003018 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	0a9b      	lsrs	r3, r3, #10
 8003008:	f003 0307 	and.w	r3, r3, #7
 800300c:	4903      	ldr	r1, [pc, #12]	; (800301c <HAL_RCC_GetPCLK1Freq+0x24>)
 800300e:	5ccb      	ldrb	r3, [r1, r3]
 8003010:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003014:	4618      	mov	r0, r3
 8003016:	bd80      	pop	{r7, pc}
 8003018:	40023800 	.word	0x40023800
 800301c:	08014678 	.word	0x08014678

08003020 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003024:	f7ff ffdc 	bl	8002fe0 <HAL_RCC_GetHCLKFreq>
 8003028:	4602      	mov	r2, r0
 800302a:	4b05      	ldr	r3, [pc, #20]	; (8003040 <HAL_RCC_GetPCLK2Freq+0x20>)
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	0b5b      	lsrs	r3, r3, #13
 8003030:	f003 0307 	and.w	r3, r3, #7
 8003034:	4903      	ldr	r1, [pc, #12]	; (8003044 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003036:	5ccb      	ldrb	r3, [r1, r3]
 8003038:	fa22 f303 	lsr.w	r3, r2, r3
}
 800303c:	4618      	mov	r0, r3
 800303e:	bd80      	pop	{r7, pc}
 8003040:	40023800 	.word	0x40023800
 8003044:	08014678 	.word	0x08014678

08003048 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d101      	bne.n	800305a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e03f      	b.n	80030da <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003060:	b2db      	uxtb	r3, r3
 8003062:	2b00      	cmp	r3, #0
 8003064:	d106      	bne.n	8003074 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2200      	movs	r2, #0
 800306a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f7fd fd42 	bl	8000af8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2224      	movs	r2, #36	; 0x24
 8003078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	68da      	ldr	r2, [r3, #12]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800308a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f000 fd7b 	bl	8003b88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	691a      	ldr	r2, [r3, #16]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80030a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	695a      	ldr	r2, [r3, #20]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80030b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	68da      	ldr	r2, [r3, #12]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80030c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2220      	movs	r2, #32
 80030cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2220      	movs	r2, #32
 80030d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80030d8:	2300      	movs	r3, #0
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3708      	adds	r7, #8
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}

080030e2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030e2:	b580      	push	{r7, lr}
 80030e4:	b08a      	sub	sp, #40	; 0x28
 80030e6:	af02      	add	r7, sp, #8
 80030e8:	60f8      	str	r0, [r7, #12]
 80030ea:	60b9      	str	r1, [r7, #8]
 80030ec:	603b      	str	r3, [r7, #0]
 80030ee:	4613      	mov	r3, r2
 80030f0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80030f2:	2300      	movs	r3, #0
 80030f4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	2b20      	cmp	r3, #32
 8003100:	d17c      	bne.n	80031fc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d002      	beq.n	800310e <HAL_UART_Transmit+0x2c>
 8003108:	88fb      	ldrh	r3, [r7, #6]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d101      	bne.n	8003112 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e075      	b.n	80031fe <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003118:	2b01      	cmp	r3, #1
 800311a:	d101      	bne.n	8003120 <HAL_UART_Transmit+0x3e>
 800311c:	2302      	movs	r3, #2
 800311e:	e06e      	b.n	80031fe <HAL_UART_Transmit+0x11c>
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2201      	movs	r2, #1
 8003124:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2200      	movs	r2, #0
 800312c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2221      	movs	r2, #33	; 0x21
 8003132:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003136:	f7fd ff1f 	bl	8000f78 <HAL_GetTick>
 800313a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	88fa      	ldrh	r2, [r7, #6]
 8003140:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	88fa      	ldrh	r2, [r7, #6]
 8003146:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003150:	d108      	bne.n	8003164 <HAL_UART_Transmit+0x82>
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	691b      	ldr	r3, [r3, #16]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d104      	bne.n	8003164 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800315a:	2300      	movs	r3, #0
 800315c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	61bb      	str	r3, [r7, #24]
 8003162:	e003      	b.n	800316c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003168:	2300      	movs	r3, #0
 800316a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2200      	movs	r2, #0
 8003170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003174:	e02a      	b.n	80031cc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	9300      	str	r3, [sp, #0]
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	2200      	movs	r2, #0
 800317e:	2180      	movs	r1, #128	; 0x80
 8003180:	68f8      	ldr	r0, [r7, #12]
 8003182:	f000 faf9 	bl	8003778 <UART_WaitOnFlagUntilTimeout>
 8003186:	4603      	mov	r3, r0
 8003188:	2b00      	cmp	r3, #0
 800318a:	d001      	beq.n	8003190 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800318c:	2303      	movs	r3, #3
 800318e:	e036      	b.n	80031fe <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d10b      	bne.n	80031ae <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003196:	69bb      	ldr	r3, [r7, #24]
 8003198:	881b      	ldrh	r3, [r3, #0]
 800319a:	461a      	mov	r2, r3
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031a4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80031a6:	69bb      	ldr	r3, [r7, #24]
 80031a8:	3302      	adds	r3, #2
 80031aa:	61bb      	str	r3, [r7, #24]
 80031ac:	e007      	b.n	80031be <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80031ae:	69fb      	ldr	r3, [r7, #28]
 80031b0:	781a      	ldrb	r2, [r3, #0]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	3301      	adds	r3, #1
 80031bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	3b01      	subs	r3, #1
 80031c6:	b29a      	uxth	r2, r3
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d1cf      	bne.n	8003176 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	9300      	str	r3, [sp, #0]
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	2200      	movs	r2, #0
 80031de:	2140      	movs	r1, #64	; 0x40
 80031e0:	68f8      	ldr	r0, [r7, #12]
 80031e2:	f000 fac9 	bl	8003778 <UART_WaitOnFlagUntilTimeout>
 80031e6:	4603      	mov	r3, r0
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d001      	beq.n	80031f0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80031ec:	2303      	movs	r3, #3
 80031ee:	e006      	b.n	80031fe <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2220      	movs	r2, #32
 80031f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80031f8:	2300      	movs	r3, #0
 80031fa:	e000      	b.n	80031fe <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80031fc:	2302      	movs	r3, #2
  }
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3720      	adds	r7, #32
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
	...

08003208 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b0ba      	sub	sp, #232	; 0xe8
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	68db      	ldr	r3, [r3, #12]
 8003220:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	695b      	ldr	r3, [r3, #20]
 800322a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800322e:	2300      	movs	r3, #0
 8003230:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003234:	2300      	movs	r3, #0
 8003236:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800323a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800323e:	f003 030f 	and.w	r3, r3, #15
 8003242:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003246:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800324a:	2b00      	cmp	r3, #0
 800324c:	d10f      	bne.n	800326e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800324e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003252:	f003 0320 	and.w	r3, r3, #32
 8003256:	2b00      	cmp	r3, #0
 8003258:	d009      	beq.n	800326e <HAL_UART_IRQHandler+0x66>
 800325a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800325e:	f003 0320 	and.w	r3, r3, #32
 8003262:	2b00      	cmp	r3, #0
 8003264:	d003      	beq.n	800326e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f000 fbd3 	bl	8003a12 <UART_Receive_IT>
      return;
 800326c:	e256      	b.n	800371c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800326e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003272:	2b00      	cmp	r3, #0
 8003274:	f000 80de 	beq.w	8003434 <HAL_UART_IRQHandler+0x22c>
 8003278:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800327c:	f003 0301 	and.w	r3, r3, #1
 8003280:	2b00      	cmp	r3, #0
 8003282:	d106      	bne.n	8003292 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003284:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003288:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800328c:	2b00      	cmp	r3, #0
 800328e:	f000 80d1 	beq.w	8003434 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003292:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003296:	f003 0301 	and.w	r3, r3, #1
 800329a:	2b00      	cmp	r3, #0
 800329c:	d00b      	beq.n	80032b6 <HAL_UART_IRQHandler+0xae>
 800329e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d005      	beq.n	80032b6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ae:	f043 0201 	orr.w	r2, r3, #1
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80032b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032ba:	f003 0304 	and.w	r3, r3, #4
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d00b      	beq.n	80032da <HAL_UART_IRQHandler+0xd2>
 80032c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80032c6:	f003 0301 	and.w	r3, r3, #1
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d005      	beq.n	80032da <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d2:	f043 0202 	orr.w	r2, r3, #2
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80032da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032de:	f003 0302 	and.w	r3, r3, #2
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d00b      	beq.n	80032fe <HAL_UART_IRQHandler+0xf6>
 80032e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80032ea:	f003 0301 	and.w	r3, r3, #1
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d005      	beq.n	80032fe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f6:	f043 0204 	orr.w	r2, r3, #4
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80032fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003302:	f003 0308 	and.w	r3, r3, #8
 8003306:	2b00      	cmp	r3, #0
 8003308:	d011      	beq.n	800332e <HAL_UART_IRQHandler+0x126>
 800330a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800330e:	f003 0320 	and.w	r3, r3, #32
 8003312:	2b00      	cmp	r3, #0
 8003314:	d105      	bne.n	8003322 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003316:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800331a:	f003 0301 	and.w	r3, r3, #1
 800331e:	2b00      	cmp	r3, #0
 8003320:	d005      	beq.n	800332e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003326:	f043 0208 	orr.w	r2, r3, #8
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003332:	2b00      	cmp	r3, #0
 8003334:	f000 81ed 	beq.w	8003712 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003338:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800333c:	f003 0320 	and.w	r3, r3, #32
 8003340:	2b00      	cmp	r3, #0
 8003342:	d008      	beq.n	8003356 <HAL_UART_IRQHandler+0x14e>
 8003344:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003348:	f003 0320 	and.w	r3, r3, #32
 800334c:	2b00      	cmp	r3, #0
 800334e:	d002      	beq.n	8003356 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003350:	6878      	ldr	r0, [r7, #4]
 8003352:	f000 fb5e 	bl	8003a12 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	695b      	ldr	r3, [r3, #20]
 800335c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003360:	2b40      	cmp	r3, #64	; 0x40
 8003362:	bf0c      	ite	eq
 8003364:	2301      	moveq	r3, #1
 8003366:	2300      	movne	r3, #0
 8003368:	b2db      	uxtb	r3, r3
 800336a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003372:	f003 0308 	and.w	r3, r3, #8
 8003376:	2b00      	cmp	r3, #0
 8003378:	d103      	bne.n	8003382 <HAL_UART_IRQHandler+0x17a>
 800337a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800337e:	2b00      	cmp	r3, #0
 8003380:	d04f      	beq.n	8003422 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f000 fa66 	bl	8003854 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	695b      	ldr	r3, [r3, #20]
 800338e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003392:	2b40      	cmp	r3, #64	; 0x40
 8003394:	d141      	bne.n	800341a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	3314      	adds	r3, #20
 800339c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80033a4:	e853 3f00 	ldrex	r3, [r3]
 80033a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80033ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80033b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	3314      	adds	r3, #20
 80033be:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80033c2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80033c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033ca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80033ce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80033d2:	e841 2300 	strex	r3, r2, [r1]
 80033d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80033da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d1d9      	bne.n	8003396 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d013      	beq.n	8003412 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ee:	4a7d      	ldr	r2, [pc, #500]	; (80035e4 <HAL_UART_IRQHandler+0x3dc>)
 80033f0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033f6:	4618      	mov	r0, r3
 80033f8:	f7fd ff6f 	bl	80012da <HAL_DMA_Abort_IT>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d016      	beq.n	8003430 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003406:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003408:	687a      	ldr	r2, [r7, #4]
 800340a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800340c:	4610      	mov	r0, r2
 800340e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003410:	e00e      	b.n	8003430 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f000 f99a 	bl	800374c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003418:	e00a      	b.n	8003430 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f000 f996 	bl	800374c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003420:	e006      	b.n	8003430 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f000 f992 	bl	800374c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2200      	movs	r2, #0
 800342c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800342e:	e170      	b.n	8003712 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003430:	bf00      	nop
    return;
 8003432:	e16e      	b.n	8003712 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003438:	2b01      	cmp	r3, #1
 800343a:	f040 814a 	bne.w	80036d2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800343e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003442:	f003 0310 	and.w	r3, r3, #16
 8003446:	2b00      	cmp	r3, #0
 8003448:	f000 8143 	beq.w	80036d2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800344c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003450:	f003 0310 	and.w	r3, r3, #16
 8003454:	2b00      	cmp	r3, #0
 8003456:	f000 813c 	beq.w	80036d2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800345a:	2300      	movs	r3, #0
 800345c:	60bb      	str	r3, [r7, #8]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	60bb      	str	r3, [r7, #8]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	60bb      	str	r3, [r7, #8]
 800346e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	695b      	ldr	r3, [r3, #20]
 8003476:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800347a:	2b40      	cmp	r3, #64	; 0x40
 800347c:	f040 80b4 	bne.w	80035e8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800348c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003490:	2b00      	cmp	r3, #0
 8003492:	f000 8140 	beq.w	8003716 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800349a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800349e:	429a      	cmp	r2, r3
 80034a0:	f080 8139 	bcs.w	8003716 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80034aa:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034b0:	69db      	ldr	r3, [r3, #28]
 80034b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034b6:	f000 8088 	beq.w	80035ca <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	330c      	adds	r3, #12
 80034c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80034c8:	e853 3f00 	ldrex	r3, [r3]
 80034cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80034d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80034d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	330c      	adds	r3, #12
 80034e2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80034e6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80034ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034ee:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80034f2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80034f6:	e841 2300 	strex	r3, r2, [r1]
 80034fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80034fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003502:	2b00      	cmp	r3, #0
 8003504:	d1d9      	bne.n	80034ba <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	3314      	adds	r3, #20
 800350c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800350e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003510:	e853 3f00 	ldrex	r3, [r3]
 8003514:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003516:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003518:	f023 0301 	bic.w	r3, r3, #1
 800351c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	3314      	adds	r3, #20
 8003526:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800352a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800352e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003530:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003532:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003536:	e841 2300 	strex	r3, r2, [r1]
 800353a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800353c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800353e:	2b00      	cmp	r3, #0
 8003540:	d1e1      	bne.n	8003506 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	3314      	adds	r3, #20
 8003548:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800354a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800354c:	e853 3f00 	ldrex	r3, [r3]
 8003550:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003552:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003554:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003558:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	3314      	adds	r3, #20
 8003562:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003566:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003568:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800356a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800356c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800356e:	e841 2300 	strex	r3, r2, [r1]
 8003572:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003574:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003576:	2b00      	cmp	r3, #0
 8003578:	d1e3      	bne.n	8003542 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2220      	movs	r2, #32
 800357e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	330c      	adds	r3, #12
 800358e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003590:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003592:	e853 3f00 	ldrex	r3, [r3]
 8003596:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003598:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800359a:	f023 0310 	bic.w	r3, r3, #16
 800359e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	330c      	adds	r3, #12
 80035a8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80035ac:	65ba      	str	r2, [r7, #88]	; 0x58
 80035ae:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035b0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80035b2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80035b4:	e841 2300 	strex	r3, r2, [r1]
 80035b8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80035ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d1e3      	bne.n	8003588 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035c4:	4618      	mov	r0, r3
 80035c6:	f7fd fe18 	bl	80011fa <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80035d2:	b29b      	uxth	r3, r3
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	4619      	mov	r1, r3
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f000 f8c0 	bl	8003760 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80035e0:	e099      	b.n	8003716 <HAL_UART_IRQHandler+0x50e>
 80035e2:	bf00      	nop
 80035e4:	0800391b 	.word	0x0800391b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	1ad3      	subs	r3, r2, r3
 80035f4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80035fc:	b29b      	uxth	r3, r3
 80035fe:	2b00      	cmp	r3, #0
 8003600:	f000 808b 	beq.w	800371a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003604:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003608:	2b00      	cmp	r3, #0
 800360a:	f000 8086 	beq.w	800371a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	330c      	adds	r3, #12
 8003614:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003618:	e853 3f00 	ldrex	r3, [r3]
 800361c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800361e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003620:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003624:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	330c      	adds	r3, #12
 800362e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003632:	647a      	str	r2, [r7, #68]	; 0x44
 8003634:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003636:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003638:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800363a:	e841 2300 	strex	r3, r2, [r1]
 800363e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003640:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003642:	2b00      	cmp	r3, #0
 8003644:	d1e3      	bne.n	800360e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	3314      	adds	r3, #20
 800364c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800364e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003650:	e853 3f00 	ldrex	r3, [r3]
 8003654:	623b      	str	r3, [r7, #32]
   return(result);
 8003656:	6a3b      	ldr	r3, [r7, #32]
 8003658:	f023 0301 	bic.w	r3, r3, #1
 800365c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	3314      	adds	r3, #20
 8003666:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800366a:	633a      	str	r2, [r7, #48]	; 0x30
 800366c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800366e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003670:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003672:	e841 2300 	strex	r3, r2, [r1]
 8003676:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800367a:	2b00      	cmp	r3, #0
 800367c:	d1e3      	bne.n	8003646 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2220      	movs	r2, #32
 8003682:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2200      	movs	r2, #0
 800368a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	330c      	adds	r3, #12
 8003692:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	e853 3f00 	ldrex	r3, [r3]
 800369a:	60fb      	str	r3, [r7, #12]
   return(result);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	f023 0310 	bic.w	r3, r3, #16
 80036a2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	330c      	adds	r3, #12
 80036ac:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80036b0:	61fa      	str	r2, [r7, #28]
 80036b2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036b4:	69b9      	ldr	r1, [r7, #24]
 80036b6:	69fa      	ldr	r2, [r7, #28]
 80036b8:	e841 2300 	strex	r3, r2, [r1]
 80036bc:	617b      	str	r3, [r7, #20]
   return(result);
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d1e3      	bne.n	800368c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80036c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80036c8:	4619      	mov	r1, r3
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f000 f848 	bl	8003760 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80036d0:	e023      	b.n	800371a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80036d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d009      	beq.n	80036f2 <HAL_UART_IRQHandler+0x4ea>
 80036de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d003      	beq.n	80036f2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f000 f929 	bl	8003942 <UART_Transmit_IT>
    return;
 80036f0:	e014      	b.n	800371c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80036f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d00e      	beq.n	800371c <HAL_UART_IRQHandler+0x514>
 80036fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003706:	2b00      	cmp	r3, #0
 8003708:	d008      	beq.n	800371c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f000 f969 	bl	80039e2 <UART_EndTransmit_IT>
    return;
 8003710:	e004      	b.n	800371c <HAL_UART_IRQHandler+0x514>
    return;
 8003712:	bf00      	nop
 8003714:	e002      	b.n	800371c <HAL_UART_IRQHandler+0x514>
      return;
 8003716:	bf00      	nop
 8003718:	e000      	b.n	800371c <HAL_UART_IRQHandler+0x514>
      return;
 800371a:	bf00      	nop
  }
}
 800371c:	37e8      	adds	r7, #232	; 0xe8
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
 8003722:	bf00      	nop

08003724 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003724:	b480      	push	{r7}
 8003726:	b083      	sub	sp, #12
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800372c:	bf00      	nop
 800372e:	370c      	adds	r7, #12
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr

08003738 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003738:	b480      	push	{r7}
 800373a:	b083      	sub	sp, #12
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003740:	bf00      	nop
 8003742:	370c      	adds	r7, #12
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr

0800374c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800374c:	b480      	push	{r7}
 800374e:	b083      	sub	sp, #12
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003754:	bf00      	nop
 8003756:	370c      	adds	r7, #12
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr

08003760 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003760:	b480      	push	{r7}
 8003762:	b083      	sub	sp, #12
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	460b      	mov	r3, r1
 800376a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800376c:	bf00      	nop
 800376e:	370c      	adds	r7, #12
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr

08003778 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b090      	sub	sp, #64	; 0x40
 800377c:	af00      	add	r7, sp, #0
 800377e:	60f8      	str	r0, [r7, #12]
 8003780:	60b9      	str	r1, [r7, #8]
 8003782:	603b      	str	r3, [r7, #0]
 8003784:	4613      	mov	r3, r2
 8003786:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003788:	e050      	b.n	800382c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800378a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800378c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003790:	d04c      	beq.n	800382c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003792:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003794:	2b00      	cmp	r3, #0
 8003796:	d007      	beq.n	80037a8 <UART_WaitOnFlagUntilTimeout+0x30>
 8003798:	f7fd fbee 	bl	8000f78 <HAL_GetTick>
 800379c:	4602      	mov	r2, r0
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d241      	bcs.n	800382c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	330c      	adds	r3, #12
 80037ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037b2:	e853 3f00 	ldrex	r3, [r3]
 80037b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80037b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ba:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80037be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	330c      	adds	r3, #12
 80037c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80037c8:	637a      	str	r2, [r7, #52]	; 0x34
 80037ca:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80037ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80037d0:	e841 2300 	strex	r3, r2, [r1]
 80037d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80037d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d1e5      	bne.n	80037a8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	3314      	adds	r3, #20
 80037e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	e853 3f00 	ldrex	r3, [r3]
 80037ea:	613b      	str	r3, [r7, #16]
   return(result);
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	f023 0301 	bic.w	r3, r3, #1
 80037f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	3314      	adds	r3, #20
 80037fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80037fc:	623a      	str	r2, [r7, #32]
 80037fe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003800:	69f9      	ldr	r1, [r7, #28]
 8003802:	6a3a      	ldr	r2, [r7, #32]
 8003804:	e841 2300 	strex	r3, r2, [r1]
 8003808:	61bb      	str	r3, [r7, #24]
   return(result);
 800380a:	69bb      	ldr	r3, [r7, #24]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d1e5      	bne.n	80037dc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2220      	movs	r2, #32
 8003814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2220      	movs	r2, #32
 800381c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2200      	movs	r2, #0
 8003824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003828:	2303      	movs	r3, #3
 800382a:	e00f      	b.n	800384c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	4013      	ands	r3, r2
 8003836:	68ba      	ldr	r2, [r7, #8]
 8003838:	429a      	cmp	r2, r3
 800383a:	bf0c      	ite	eq
 800383c:	2301      	moveq	r3, #1
 800383e:	2300      	movne	r3, #0
 8003840:	b2db      	uxtb	r3, r3
 8003842:	461a      	mov	r2, r3
 8003844:	79fb      	ldrb	r3, [r7, #7]
 8003846:	429a      	cmp	r2, r3
 8003848:	d09f      	beq.n	800378a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800384a:	2300      	movs	r3, #0
}
 800384c:	4618      	mov	r0, r3
 800384e:	3740      	adds	r7, #64	; 0x40
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}

08003854 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003854:	b480      	push	{r7}
 8003856:	b095      	sub	sp, #84	; 0x54
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	330c      	adds	r3, #12
 8003862:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003864:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003866:	e853 3f00 	ldrex	r3, [r3]
 800386a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800386c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800386e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003872:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	330c      	adds	r3, #12
 800387a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800387c:	643a      	str	r2, [r7, #64]	; 0x40
 800387e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003880:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003882:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003884:	e841 2300 	strex	r3, r2, [r1]
 8003888:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800388a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800388c:	2b00      	cmp	r3, #0
 800388e:	d1e5      	bne.n	800385c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	3314      	adds	r3, #20
 8003896:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003898:	6a3b      	ldr	r3, [r7, #32]
 800389a:	e853 3f00 	ldrex	r3, [r3]
 800389e:	61fb      	str	r3, [r7, #28]
   return(result);
 80038a0:	69fb      	ldr	r3, [r7, #28]
 80038a2:	f023 0301 	bic.w	r3, r3, #1
 80038a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	3314      	adds	r3, #20
 80038ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80038b0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80038b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80038b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038b8:	e841 2300 	strex	r3, r2, [r1]
 80038bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80038be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d1e5      	bne.n	8003890 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d119      	bne.n	8003900 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	330c      	adds	r3, #12
 80038d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	e853 3f00 	ldrex	r3, [r3]
 80038da:	60bb      	str	r3, [r7, #8]
   return(result);
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	f023 0310 	bic.w	r3, r3, #16
 80038e2:	647b      	str	r3, [r7, #68]	; 0x44
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	330c      	adds	r3, #12
 80038ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80038ec:	61ba      	str	r2, [r7, #24]
 80038ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038f0:	6979      	ldr	r1, [r7, #20]
 80038f2:	69ba      	ldr	r2, [r7, #24]
 80038f4:	e841 2300 	strex	r3, r2, [r1]
 80038f8:	613b      	str	r3, [r7, #16]
   return(result);
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d1e5      	bne.n	80038cc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2220      	movs	r2, #32
 8003904:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2200      	movs	r2, #0
 800390c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800390e:	bf00      	nop
 8003910:	3754      	adds	r7, #84	; 0x54
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr

0800391a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800391a:	b580      	push	{r7, lr}
 800391c:	b084      	sub	sp, #16
 800391e:	af00      	add	r7, sp, #0
 8003920:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003926:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2200      	movs	r2, #0
 800392c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2200      	movs	r2, #0
 8003932:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003934:	68f8      	ldr	r0, [r7, #12]
 8003936:	f7ff ff09 	bl	800374c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800393a:	bf00      	nop
 800393c:	3710      	adds	r7, #16
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}

08003942 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003942:	b480      	push	{r7}
 8003944:	b085      	sub	sp, #20
 8003946:	af00      	add	r7, sp, #0
 8003948:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003950:	b2db      	uxtb	r3, r3
 8003952:	2b21      	cmp	r3, #33	; 0x21
 8003954:	d13e      	bne.n	80039d4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800395e:	d114      	bne.n	800398a <UART_Transmit_IT+0x48>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	691b      	ldr	r3, [r3, #16]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d110      	bne.n	800398a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6a1b      	ldr	r3, [r3, #32]
 800396c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	881b      	ldrh	r3, [r3, #0]
 8003972:	461a      	mov	r2, r3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800397c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6a1b      	ldr	r3, [r3, #32]
 8003982:	1c9a      	adds	r2, r3, #2
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	621a      	str	r2, [r3, #32]
 8003988:	e008      	b.n	800399c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6a1b      	ldr	r3, [r3, #32]
 800398e:	1c59      	adds	r1, r3, #1
 8003990:	687a      	ldr	r2, [r7, #4]
 8003992:	6211      	str	r1, [r2, #32]
 8003994:	781a      	ldrb	r2, [r3, #0]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039a0:	b29b      	uxth	r3, r3
 80039a2:	3b01      	subs	r3, #1
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	4619      	mov	r1, r3
 80039aa:	84d1      	strh	r1, [r2, #38]	; 0x26
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d10f      	bne.n	80039d0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	68da      	ldr	r2, [r3, #12]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80039be:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	68da      	ldr	r2, [r3, #12]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039ce:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80039d0:	2300      	movs	r3, #0
 80039d2:	e000      	b.n	80039d6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80039d4:	2302      	movs	r3, #2
  }
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3714      	adds	r7, #20
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr

080039e2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80039e2:	b580      	push	{r7, lr}
 80039e4:	b082      	sub	sp, #8
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	68da      	ldr	r2, [r3, #12]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039f8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2220      	movs	r2, #32
 80039fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f7ff fe8e 	bl	8003724 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003a08:	2300      	movs	r3, #0
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3708      	adds	r7, #8
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}

08003a12 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003a12:	b580      	push	{r7, lr}
 8003a14:	b08c      	sub	sp, #48	; 0x30
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	2b22      	cmp	r3, #34	; 0x22
 8003a24:	f040 80ab 	bne.w	8003b7e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a30:	d117      	bne.n	8003a62 <UART_Receive_IT+0x50>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	691b      	ldr	r3, [r3, #16]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d113      	bne.n	8003a62 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a42:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	b29b      	uxth	r3, r3
 8003a4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a50:	b29a      	uxth	r2, r3
 8003a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a54:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a5a:	1c9a      	adds	r2, r3, #2
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	629a      	str	r2, [r3, #40]	; 0x28
 8003a60:	e026      	b.n	8003ab0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a66:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a74:	d007      	beq.n	8003a86 <UART_Receive_IT+0x74>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d10a      	bne.n	8003a94 <UART_Receive_IT+0x82>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	691b      	ldr	r3, [r3, #16]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d106      	bne.n	8003a94 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	b2da      	uxtb	r2, r3
 8003a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a90:	701a      	strb	r2, [r3, #0]
 8003a92:	e008      	b.n	8003aa6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	b2db      	uxtb	r3, r3
 8003a9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003aa0:	b2da      	uxtb	r2, r3
 8003aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aa4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aaa:	1c5a      	adds	r2, r3, #1
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	3b01      	subs	r3, #1
 8003ab8:	b29b      	uxth	r3, r3
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	4619      	mov	r1, r3
 8003abe:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d15a      	bne.n	8003b7a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	68da      	ldr	r2, [r3, #12]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f022 0220 	bic.w	r2, r2, #32
 8003ad2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	68da      	ldr	r2, [r3, #12]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ae2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	695a      	ldr	r2, [r3, #20]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f022 0201 	bic.w	r2, r2, #1
 8003af2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2220      	movs	r2, #32
 8003af8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d135      	bne.n	8003b70 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2200      	movs	r2, #0
 8003b08:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	330c      	adds	r3, #12
 8003b10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	e853 3f00 	ldrex	r3, [r3]
 8003b18:	613b      	str	r3, [r7, #16]
   return(result);
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	f023 0310 	bic.w	r3, r3, #16
 8003b20:	627b      	str	r3, [r7, #36]	; 0x24
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	330c      	adds	r3, #12
 8003b28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b2a:	623a      	str	r2, [r7, #32]
 8003b2c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b2e:	69f9      	ldr	r1, [r7, #28]
 8003b30:	6a3a      	ldr	r2, [r7, #32]
 8003b32:	e841 2300 	strex	r3, r2, [r1]
 8003b36:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b38:	69bb      	ldr	r3, [r7, #24]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d1e5      	bne.n	8003b0a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 0310 	and.w	r3, r3, #16
 8003b48:	2b10      	cmp	r3, #16
 8003b4a:	d10a      	bne.n	8003b62 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	60fb      	str	r3, [r7, #12]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	60fb      	str	r3, [r7, #12]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	60fb      	str	r3, [r7, #12]
 8003b60:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003b66:	4619      	mov	r1, r3
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f7ff fdf9 	bl	8003760 <HAL_UARTEx_RxEventCallback>
 8003b6e:	e002      	b.n	8003b76 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	f7ff fde1 	bl	8003738 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003b76:	2300      	movs	r3, #0
 8003b78:	e002      	b.n	8003b80 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	e000      	b.n	8003b80 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003b7e:	2302      	movs	r3, #2
  }
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	3730      	adds	r7, #48	; 0x30
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}

08003b88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b8c:	b0c0      	sub	sp, #256	; 0x100
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	691b      	ldr	r3, [r3, #16]
 8003b9c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ba4:	68d9      	ldr	r1, [r3, #12]
 8003ba6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	ea40 0301 	orr.w	r3, r0, r1
 8003bb0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003bb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bb6:	689a      	ldr	r2, [r3, #8]
 8003bb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bbc:	691b      	ldr	r3, [r3, #16]
 8003bbe:	431a      	orrs	r2, r3
 8003bc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bc4:	695b      	ldr	r3, [r3, #20]
 8003bc6:	431a      	orrs	r2, r3
 8003bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bcc:	69db      	ldr	r3, [r3, #28]
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003be0:	f021 010c 	bic.w	r1, r1, #12
 8003be4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003bee:	430b      	orrs	r3, r1
 8003bf0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003bf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	695b      	ldr	r3, [r3, #20]
 8003bfa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003bfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c02:	6999      	ldr	r1, [r3, #24]
 8003c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	ea40 0301 	orr.w	r3, r0, r1
 8003c0e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003c10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	4b8f      	ldr	r3, [pc, #572]	; (8003e54 <UART_SetConfig+0x2cc>)
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d005      	beq.n	8003c28 <UART_SetConfig+0xa0>
 8003c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	4b8d      	ldr	r3, [pc, #564]	; (8003e58 <UART_SetConfig+0x2d0>)
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d104      	bne.n	8003c32 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003c28:	f7ff f9fa 	bl	8003020 <HAL_RCC_GetPCLK2Freq>
 8003c2c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003c30:	e003      	b.n	8003c3a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003c32:	f7ff f9e1 	bl	8002ff8 <HAL_RCC_GetPCLK1Freq>
 8003c36:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c3e:	69db      	ldr	r3, [r3, #28]
 8003c40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c44:	f040 810c 	bne.w	8003e60 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003c48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003c52:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003c56:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003c5a:	4622      	mov	r2, r4
 8003c5c:	462b      	mov	r3, r5
 8003c5e:	1891      	adds	r1, r2, r2
 8003c60:	65b9      	str	r1, [r7, #88]	; 0x58
 8003c62:	415b      	adcs	r3, r3
 8003c64:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c66:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003c6a:	4621      	mov	r1, r4
 8003c6c:	eb12 0801 	adds.w	r8, r2, r1
 8003c70:	4629      	mov	r1, r5
 8003c72:	eb43 0901 	adc.w	r9, r3, r1
 8003c76:	f04f 0200 	mov.w	r2, #0
 8003c7a:	f04f 0300 	mov.w	r3, #0
 8003c7e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c82:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c86:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c8a:	4690      	mov	r8, r2
 8003c8c:	4699      	mov	r9, r3
 8003c8e:	4623      	mov	r3, r4
 8003c90:	eb18 0303 	adds.w	r3, r8, r3
 8003c94:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003c98:	462b      	mov	r3, r5
 8003c9a:	eb49 0303 	adc.w	r3, r9, r3
 8003c9e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003ca2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003cae:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003cb2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003cb6:	460b      	mov	r3, r1
 8003cb8:	18db      	adds	r3, r3, r3
 8003cba:	653b      	str	r3, [r7, #80]	; 0x50
 8003cbc:	4613      	mov	r3, r2
 8003cbe:	eb42 0303 	adc.w	r3, r2, r3
 8003cc2:	657b      	str	r3, [r7, #84]	; 0x54
 8003cc4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003cc8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003ccc:	f7fc fae0 	bl	8000290 <__aeabi_uldivmod>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	460b      	mov	r3, r1
 8003cd4:	4b61      	ldr	r3, [pc, #388]	; (8003e5c <UART_SetConfig+0x2d4>)
 8003cd6:	fba3 2302 	umull	r2, r3, r3, r2
 8003cda:	095b      	lsrs	r3, r3, #5
 8003cdc:	011c      	lsls	r4, r3, #4
 8003cde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003ce8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003cec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003cf0:	4642      	mov	r2, r8
 8003cf2:	464b      	mov	r3, r9
 8003cf4:	1891      	adds	r1, r2, r2
 8003cf6:	64b9      	str	r1, [r7, #72]	; 0x48
 8003cf8:	415b      	adcs	r3, r3
 8003cfa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003cfc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003d00:	4641      	mov	r1, r8
 8003d02:	eb12 0a01 	adds.w	sl, r2, r1
 8003d06:	4649      	mov	r1, r9
 8003d08:	eb43 0b01 	adc.w	fp, r3, r1
 8003d0c:	f04f 0200 	mov.w	r2, #0
 8003d10:	f04f 0300 	mov.w	r3, #0
 8003d14:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003d18:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003d1c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d20:	4692      	mov	sl, r2
 8003d22:	469b      	mov	fp, r3
 8003d24:	4643      	mov	r3, r8
 8003d26:	eb1a 0303 	adds.w	r3, sl, r3
 8003d2a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003d2e:	464b      	mov	r3, r9
 8003d30:	eb4b 0303 	adc.w	r3, fp, r3
 8003d34:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003d44:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003d48:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003d4c:	460b      	mov	r3, r1
 8003d4e:	18db      	adds	r3, r3, r3
 8003d50:	643b      	str	r3, [r7, #64]	; 0x40
 8003d52:	4613      	mov	r3, r2
 8003d54:	eb42 0303 	adc.w	r3, r2, r3
 8003d58:	647b      	str	r3, [r7, #68]	; 0x44
 8003d5a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003d5e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003d62:	f7fc fa95 	bl	8000290 <__aeabi_uldivmod>
 8003d66:	4602      	mov	r2, r0
 8003d68:	460b      	mov	r3, r1
 8003d6a:	4611      	mov	r1, r2
 8003d6c:	4b3b      	ldr	r3, [pc, #236]	; (8003e5c <UART_SetConfig+0x2d4>)
 8003d6e:	fba3 2301 	umull	r2, r3, r3, r1
 8003d72:	095b      	lsrs	r3, r3, #5
 8003d74:	2264      	movs	r2, #100	; 0x64
 8003d76:	fb02 f303 	mul.w	r3, r2, r3
 8003d7a:	1acb      	subs	r3, r1, r3
 8003d7c:	00db      	lsls	r3, r3, #3
 8003d7e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003d82:	4b36      	ldr	r3, [pc, #216]	; (8003e5c <UART_SetConfig+0x2d4>)
 8003d84:	fba3 2302 	umull	r2, r3, r3, r2
 8003d88:	095b      	lsrs	r3, r3, #5
 8003d8a:	005b      	lsls	r3, r3, #1
 8003d8c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003d90:	441c      	add	r4, r3
 8003d92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d96:	2200      	movs	r2, #0
 8003d98:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003d9c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003da0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003da4:	4642      	mov	r2, r8
 8003da6:	464b      	mov	r3, r9
 8003da8:	1891      	adds	r1, r2, r2
 8003daa:	63b9      	str	r1, [r7, #56]	; 0x38
 8003dac:	415b      	adcs	r3, r3
 8003dae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003db0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003db4:	4641      	mov	r1, r8
 8003db6:	1851      	adds	r1, r2, r1
 8003db8:	6339      	str	r1, [r7, #48]	; 0x30
 8003dba:	4649      	mov	r1, r9
 8003dbc:	414b      	adcs	r3, r1
 8003dbe:	637b      	str	r3, [r7, #52]	; 0x34
 8003dc0:	f04f 0200 	mov.w	r2, #0
 8003dc4:	f04f 0300 	mov.w	r3, #0
 8003dc8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003dcc:	4659      	mov	r1, fp
 8003dce:	00cb      	lsls	r3, r1, #3
 8003dd0:	4651      	mov	r1, sl
 8003dd2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003dd6:	4651      	mov	r1, sl
 8003dd8:	00ca      	lsls	r2, r1, #3
 8003dda:	4610      	mov	r0, r2
 8003ddc:	4619      	mov	r1, r3
 8003dde:	4603      	mov	r3, r0
 8003de0:	4642      	mov	r2, r8
 8003de2:	189b      	adds	r3, r3, r2
 8003de4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003de8:	464b      	mov	r3, r9
 8003dea:	460a      	mov	r2, r1
 8003dec:	eb42 0303 	adc.w	r3, r2, r3
 8003df0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003df4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003e00:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003e04:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003e08:	460b      	mov	r3, r1
 8003e0a:	18db      	adds	r3, r3, r3
 8003e0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e0e:	4613      	mov	r3, r2
 8003e10:	eb42 0303 	adc.w	r3, r2, r3
 8003e14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e16:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003e1a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003e1e:	f7fc fa37 	bl	8000290 <__aeabi_uldivmod>
 8003e22:	4602      	mov	r2, r0
 8003e24:	460b      	mov	r3, r1
 8003e26:	4b0d      	ldr	r3, [pc, #52]	; (8003e5c <UART_SetConfig+0x2d4>)
 8003e28:	fba3 1302 	umull	r1, r3, r3, r2
 8003e2c:	095b      	lsrs	r3, r3, #5
 8003e2e:	2164      	movs	r1, #100	; 0x64
 8003e30:	fb01 f303 	mul.w	r3, r1, r3
 8003e34:	1ad3      	subs	r3, r2, r3
 8003e36:	00db      	lsls	r3, r3, #3
 8003e38:	3332      	adds	r3, #50	; 0x32
 8003e3a:	4a08      	ldr	r2, [pc, #32]	; (8003e5c <UART_SetConfig+0x2d4>)
 8003e3c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e40:	095b      	lsrs	r3, r3, #5
 8003e42:	f003 0207 	and.w	r2, r3, #7
 8003e46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4422      	add	r2, r4
 8003e4e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003e50:	e105      	b.n	800405e <UART_SetConfig+0x4d6>
 8003e52:	bf00      	nop
 8003e54:	40011000 	.word	0x40011000
 8003e58:	40011400 	.word	0x40011400
 8003e5c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e64:	2200      	movs	r2, #0
 8003e66:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003e6a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003e6e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003e72:	4642      	mov	r2, r8
 8003e74:	464b      	mov	r3, r9
 8003e76:	1891      	adds	r1, r2, r2
 8003e78:	6239      	str	r1, [r7, #32]
 8003e7a:	415b      	adcs	r3, r3
 8003e7c:	627b      	str	r3, [r7, #36]	; 0x24
 8003e7e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003e82:	4641      	mov	r1, r8
 8003e84:	1854      	adds	r4, r2, r1
 8003e86:	4649      	mov	r1, r9
 8003e88:	eb43 0501 	adc.w	r5, r3, r1
 8003e8c:	f04f 0200 	mov.w	r2, #0
 8003e90:	f04f 0300 	mov.w	r3, #0
 8003e94:	00eb      	lsls	r3, r5, #3
 8003e96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e9a:	00e2      	lsls	r2, r4, #3
 8003e9c:	4614      	mov	r4, r2
 8003e9e:	461d      	mov	r5, r3
 8003ea0:	4643      	mov	r3, r8
 8003ea2:	18e3      	adds	r3, r4, r3
 8003ea4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003ea8:	464b      	mov	r3, r9
 8003eaa:	eb45 0303 	adc.w	r3, r5, r3
 8003eae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003eb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003ebe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003ec2:	f04f 0200 	mov.w	r2, #0
 8003ec6:	f04f 0300 	mov.w	r3, #0
 8003eca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003ece:	4629      	mov	r1, r5
 8003ed0:	008b      	lsls	r3, r1, #2
 8003ed2:	4621      	mov	r1, r4
 8003ed4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ed8:	4621      	mov	r1, r4
 8003eda:	008a      	lsls	r2, r1, #2
 8003edc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003ee0:	f7fc f9d6 	bl	8000290 <__aeabi_uldivmod>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	460b      	mov	r3, r1
 8003ee8:	4b60      	ldr	r3, [pc, #384]	; (800406c <UART_SetConfig+0x4e4>)
 8003eea:	fba3 2302 	umull	r2, r3, r3, r2
 8003eee:	095b      	lsrs	r3, r3, #5
 8003ef0:	011c      	lsls	r4, r3, #4
 8003ef2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003efc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003f00:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003f04:	4642      	mov	r2, r8
 8003f06:	464b      	mov	r3, r9
 8003f08:	1891      	adds	r1, r2, r2
 8003f0a:	61b9      	str	r1, [r7, #24]
 8003f0c:	415b      	adcs	r3, r3
 8003f0e:	61fb      	str	r3, [r7, #28]
 8003f10:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f14:	4641      	mov	r1, r8
 8003f16:	1851      	adds	r1, r2, r1
 8003f18:	6139      	str	r1, [r7, #16]
 8003f1a:	4649      	mov	r1, r9
 8003f1c:	414b      	adcs	r3, r1
 8003f1e:	617b      	str	r3, [r7, #20]
 8003f20:	f04f 0200 	mov.w	r2, #0
 8003f24:	f04f 0300 	mov.w	r3, #0
 8003f28:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003f2c:	4659      	mov	r1, fp
 8003f2e:	00cb      	lsls	r3, r1, #3
 8003f30:	4651      	mov	r1, sl
 8003f32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f36:	4651      	mov	r1, sl
 8003f38:	00ca      	lsls	r2, r1, #3
 8003f3a:	4610      	mov	r0, r2
 8003f3c:	4619      	mov	r1, r3
 8003f3e:	4603      	mov	r3, r0
 8003f40:	4642      	mov	r2, r8
 8003f42:	189b      	adds	r3, r3, r2
 8003f44:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003f48:	464b      	mov	r3, r9
 8003f4a:	460a      	mov	r2, r1
 8003f4c:	eb42 0303 	adc.w	r3, r2, r3
 8003f50:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	67bb      	str	r3, [r7, #120]	; 0x78
 8003f5e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003f60:	f04f 0200 	mov.w	r2, #0
 8003f64:	f04f 0300 	mov.w	r3, #0
 8003f68:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003f6c:	4649      	mov	r1, r9
 8003f6e:	008b      	lsls	r3, r1, #2
 8003f70:	4641      	mov	r1, r8
 8003f72:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f76:	4641      	mov	r1, r8
 8003f78:	008a      	lsls	r2, r1, #2
 8003f7a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003f7e:	f7fc f987 	bl	8000290 <__aeabi_uldivmod>
 8003f82:	4602      	mov	r2, r0
 8003f84:	460b      	mov	r3, r1
 8003f86:	4b39      	ldr	r3, [pc, #228]	; (800406c <UART_SetConfig+0x4e4>)
 8003f88:	fba3 1302 	umull	r1, r3, r3, r2
 8003f8c:	095b      	lsrs	r3, r3, #5
 8003f8e:	2164      	movs	r1, #100	; 0x64
 8003f90:	fb01 f303 	mul.w	r3, r1, r3
 8003f94:	1ad3      	subs	r3, r2, r3
 8003f96:	011b      	lsls	r3, r3, #4
 8003f98:	3332      	adds	r3, #50	; 0x32
 8003f9a:	4a34      	ldr	r2, [pc, #208]	; (800406c <UART_SetConfig+0x4e4>)
 8003f9c:	fba2 2303 	umull	r2, r3, r2, r3
 8003fa0:	095b      	lsrs	r3, r3, #5
 8003fa2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fa6:	441c      	add	r4, r3
 8003fa8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003fac:	2200      	movs	r2, #0
 8003fae:	673b      	str	r3, [r7, #112]	; 0x70
 8003fb0:	677a      	str	r2, [r7, #116]	; 0x74
 8003fb2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003fb6:	4642      	mov	r2, r8
 8003fb8:	464b      	mov	r3, r9
 8003fba:	1891      	adds	r1, r2, r2
 8003fbc:	60b9      	str	r1, [r7, #8]
 8003fbe:	415b      	adcs	r3, r3
 8003fc0:	60fb      	str	r3, [r7, #12]
 8003fc2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003fc6:	4641      	mov	r1, r8
 8003fc8:	1851      	adds	r1, r2, r1
 8003fca:	6039      	str	r1, [r7, #0]
 8003fcc:	4649      	mov	r1, r9
 8003fce:	414b      	adcs	r3, r1
 8003fd0:	607b      	str	r3, [r7, #4]
 8003fd2:	f04f 0200 	mov.w	r2, #0
 8003fd6:	f04f 0300 	mov.w	r3, #0
 8003fda:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003fde:	4659      	mov	r1, fp
 8003fe0:	00cb      	lsls	r3, r1, #3
 8003fe2:	4651      	mov	r1, sl
 8003fe4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003fe8:	4651      	mov	r1, sl
 8003fea:	00ca      	lsls	r2, r1, #3
 8003fec:	4610      	mov	r0, r2
 8003fee:	4619      	mov	r1, r3
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	4642      	mov	r2, r8
 8003ff4:	189b      	adds	r3, r3, r2
 8003ff6:	66bb      	str	r3, [r7, #104]	; 0x68
 8003ff8:	464b      	mov	r3, r9
 8003ffa:	460a      	mov	r2, r1
 8003ffc:	eb42 0303 	adc.w	r3, r2, r3
 8004000:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004002:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	2200      	movs	r2, #0
 800400a:	663b      	str	r3, [r7, #96]	; 0x60
 800400c:	667a      	str	r2, [r7, #100]	; 0x64
 800400e:	f04f 0200 	mov.w	r2, #0
 8004012:	f04f 0300 	mov.w	r3, #0
 8004016:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800401a:	4649      	mov	r1, r9
 800401c:	008b      	lsls	r3, r1, #2
 800401e:	4641      	mov	r1, r8
 8004020:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004024:	4641      	mov	r1, r8
 8004026:	008a      	lsls	r2, r1, #2
 8004028:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800402c:	f7fc f930 	bl	8000290 <__aeabi_uldivmod>
 8004030:	4602      	mov	r2, r0
 8004032:	460b      	mov	r3, r1
 8004034:	4b0d      	ldr	r3, [pc, #52]	; (800406c <UART_SetConfig+0x4e4>)
 8004036:	fba3 1302 	umull	r1, r3, r3, r2
 800403a:	095b      	lsrs	r3, r3, #5
 800403c:	2164      	movs	r1, #100	; 0x64
 800403e:	fb01 f303 	mul.w	r3, r1, r3
 8004042:	1ad3      	subs	r3, r2, r3
 8004044:	011b      	lsls	r3, r3, #4
 8004046:	3332      	adds	r3, #50	; 0x32
 8004048:	4a08      	ldr	r2, [pc, #32]	; (800406c <UART_SetConfig+0x4e4>)
 800404a:	fba2 2303 	umull	r2, r3, r2, r3
 800404e:	095b      	lsrs	r3, r3, #5
 8004050:	f003 020f 	and.w	r2, r3, #15
 8004054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4422      	add	r2, r4
 800405c:	609a      	str	r2, [r3, #8]
}
 800405e:	bf00      	nop
 8004060:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004064:	46bd      	mov	sp, r7
 8004066:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800406a:	bf00      	nop
 800406c:	51eb851f 	.word	0x51eb851f

08004070 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b084      	sub	sp, #16
 8004074:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8004076:	f000 fc97 	bl	80049a8 <lwip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 800407a:	4b19      	ldr	r3, [pc, #100]	; (80040e0 <MX_LWIP_Init+0x70>)
 800407c:	2200      	movs	r2, #0
 800407e:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 8004080:	4b18      	ldr	r3, [pc, #96]	; (80040e4 <MX_LWIP_Init+0x74>)
 8004082:	2200      	movs	r2, #0
 8004084:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 8004086:	4b18      	ldr	r3, [pc, #96]	; (80040e8 <MX_LWIP_Init+0x78>)
 8004088:	2200      	movs	r2, #0
 800408a:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800408c:	4b17      	ldr	r3, [pc, #92]	; (80040ec <MX_LWIP_Init+0x7c>)
 800408e:	9302      	str	r3, [sp, #8]
 8004090:	4b17      	ldr	r3, [pc, #92]	; (80040f0 <MX_LWIP_Init+0x80>)
 8004092:	9301      	str	r3, [sp, #4]
 8004094:	2300      	movs	r3, #0
 8004096:	9300      	str	r3, [sp, #0]
 8004098:	4b13      	ldr	r3, [pc, #76]	; (80040e8 <MX_LWIP_Init+0x78>)
 800409a:	4a12      	ldr	r2, [pc, #72]	; (80040e4 <MX_LWIP_Init+0x74>)
 800409c:	4910      	ldr	r1, [pc, #64]	; (80040e0 <MX_LWIP_Init+0x70>)
 800409e:	4815      	ldr	r0, [pc, #84]	; (80040f4 <MX_LWIP_Init+0x84>)
 80040a0:	f001 f96a 	bl	8005378 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80040a4:	4813      	ldr	r0, [pc, #76]	; (80040f4 <MX_LWIP_Init+0x84>)
 80040a6:	f001 fb21 	bl	80056ec <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80040aa:	4b12      	ldr	r3, [pc, #72]	; (80040f4 <MX_LWIP_Init+0x84>)
 80040ac:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80040b0:	089b      	lsrs	r3, r3, #2
 80040b2:	f003 0301 	and.w	r3, r3, #1
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d003      	beq.n	80040c4 <MX_LWIP_Init+0x54>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80040bc:	480d      	ldr	r0, [pc, #52]	; (80040f4 <MX_LWIP_Init+0x84>)
 80040be:	f001 fb25 	bl	800570c <netif_set_up>
 80040c2:	e002      	b.n	80040ca <MX_LWIP_Init+0x5a>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 80040c4:	480b      	ldr	r0, [pc, #44]	; (80040f4 <MX_LWIP_Init+0x84>)
 80040c6:	f001 fb8d 	bl	80057e4 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 80040ca:	490b      	ldr	r1, [pc, #44]	; (80040f8 <MX_LWIP_Init+0x88>)
 80040cc:	4809      	ldr	r0, [pc, #36]	; (80040f4 <MX_LWIP_Init+0x84>)
 80040ce:	f001 fc23 	bl	8005918 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 80040d2:	4808      	ldr	r0, [pc, #32]	; (80040f4 <MX_LWIP_Init+0x84>)
 80040d4:	f008 fcba 	bl	800ca4c <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80040d8:	bf00      	nop
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}
 80040de:	bf00      	nop
 80040e0:	20000134 	.word	0x20000134
 80040e4:	20000138 	.word	0x20000138
 80040e8:	2000013c 	.word	0x2000013c
 80040ec:	080104e9 	.word	0x080104e9
 80040f0:	0800438d 	.word	0x0800438d
 80040f4:	200000fc 	.word	0x200000fc
 80040f8:	080040fd 	.word	0x080040fd

080040fc <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b082      	sub	sp, #8
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  if (netif_is_up(netif))
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800410a:	f003 0301 	and.w	r3, r3, #1
 800410e:	b2db      	uxtb	r3, r3
 8004110:	2b00      	cmp	r3, #0
 8004112:	d00f      	beq.n	8004134 <ethernet_link_status_updated+0x38>
  {
/* USER CODE BEGIN 5 */
//	netif_set_up(netif);
	printf("Connected\r\n");
 8004114:	4811      	ldr	r0, [pc, #68]	; (800415c <ethernet_link_status_updated+0x60>)
 8004116:	f00c fb8d 	bl	8010834 <puts>
	GPIOB->ODR |=  (1 << 0);
 800411a:	4b11      	ldr	r3, [pc, #68]	; (8004160 <ethernet_link_status_updated+0x64>)
 800411c:	695b      	ldr	r3, [r3, #20]
 800411e:	4a10      	ldr	r2, [pc, #64]	; (8004160 <ethernet_link_status_updated+0x64>)
 8004120:	f043 0301 	orr.w	r3, r3, #1
 8004124:	6153      	str	r3, [r2, #20]
	GPIOB->ODR &= ~(1 << 14);
 8004126:	4b0e      	ldr	r3, [pc, #56]	; (8004160 <ethernet_link_status_updated+0x64>)
 8004128:	695b      	ldr	r3, [r3, #20]
 800412a:	4a0d      	ldr	r2, [pc, #52]	; (8004160 <ethernet_link_status_updated+0x64>)
 800412c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004130:	6153      	str	r3, [r2, #20]
	printf("Not Connected\r\n");
	GPIOB->ODR &= ~(1 << 0);
	GPIOB->ODR |=  (1 << 14);
/* USER CODE END 6 */
  }
}
 8004132:	e00e      	b.n	8004152 <ethernet_link_status_updated+0x56>
	printf("Not Connected\r\n");
 8004134:	480b      	ldr	r0, [pc, #44]	; (8004164 <ethernet_link_status_updated+0x68>)
 8004136:	f00c fb7d 	bl	8010834 <puts>
	GPIOB->ODR &= ~(1 << 0);
 800413a:	4b09      	ldr	r3, [pc, #36]	; (8004160 <ethernet_link_status_updated+0x64>)
 800413c:	695b      	ldr	r3, [r3, #20]
 800413e:	4a08      	ldr	r2, [pc, #32]	; (8004160 <ethernet_link_status_updated+0x64>)
 8004140:	f023 0301 	bic.w	r3, r3, #1
 8004144:	6153      	str	r3, [r2, #20]
	GPIOB->ODR |=  (1 << 14);
 8004146:	4b06      	ldr	r3, [pc, #24]	; (8004160 <ethernet_link_status_updated+0x64>)
 8004148:	695b      	ldr	r3, [r3, #20]
 800414a:	4a05      	ldr	r2, [pc, #20]	; (8004160 <ethernet_link_status_updated+0x64>)
 800414c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004150:	6153      	str	r3, [r2, #20]
}
 8004152:	bf00      	nop
 8004154:	3708      	adds	r7, #8
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}
 800415a:	bf00      	nop
 800415c:	080118cc 	.word	0x080118cc
 8004160:	40020400 	.word	0x40020400
 8004164:	080118d8 	.word	0x080118d8

08004168 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b084      	sub	sp, #16
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8004170:	2300      	movs	r3, #0
 8004172:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8004174:	4b40      	ldr	r3, [pc, #256]	; (8004278 <low_level_init+0x110>)
 8004176:	4a41      	ldr	r2, [pc, #260]	; (800427c <low_level_init+0x114>)
 8004178:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800417a:	2300      	movs	r3, #0
 800417c:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800417e:	2380      	movs	r3, #128	; 0x80
 8004180:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8004182:	23e1      	movs	r3, #225	; 0xe1
 8004184:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8004186:	2300      	movs	r3, #0
 8004188:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800418a:	2300      	movs	r3, #0
 800418c:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800418e:	2300      	movs	r3, #0
 8004190:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8004192:	4a39      	ldr	r2, [pc, #228]	; (8004278 <low_level_init+0x110>)
 8004194:	f107 0308 	add.w	r3, r7, #8
 8004198:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800419a:	4b37      	ldr	r3, [pc, #220]	; (8004278 <low_level_init+0x110>)
 800419c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80041a0:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80041a2:	4b35      	ldr	r3, [pc, #212]	; (8004278 <low_level_init+0x110>)
 80041a4:	4a36      	ldr	r2, [pc, #216]	; (8004280 <low_level_init+0x118>)
 80041a6:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80041a8:	4b33      	ldr	r3, [pc, #204]	; (8004278 <low_level_init+0x110>)
 80041aa:	4a36      	ldr	r2, [pc, #216]	; (8004284 <low_level_init+0x11c>)
 80041ac:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 80041ae:	4b32      	ldr	r3, [pc, #200]	; (8004278 <low_level_init+0x110>)
 80041b0:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80041b4:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80041b6:	4830      	ldr	r0, [pc, #192]	; (8004278 <low_level_init+0x110>)
 80041b8:	f7fd f8b2 	bl	8001320 <HAL_ETH_Init>
 80041bc:	4603      	mov	r3, r0
 80041be:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80041c0:	2238      	movs	r2, #56	; 0x38
 80041c2:	2100      	movs	r1, #0
 80041c4:	4830      	ldr	r0, [pc, #192]	; (8004288 <low_level_init+0x120>)
 80041c6:	f00c faa7 	bl	8010718 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80041ca:	4b2f      	ldr	r3, [pc, #188]	; (8004288 <low_level_init+0x120>)
 80041cc:	2221      	movs	r2, #33	; 0x21
 80041ce:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80041d0:	4b2d      	ldr	r3, [pc, #180]	; (8004288 <low_level_init+0x120>)
 80041d2:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80041d6:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80041d8:	4b2b      	ldr	r3, [pc, #172]	; (8004288 <low_level_init+0x120>)
 80041da:	2200      	movs	r2, #0
 80041dc:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 80041de:	482b      	ldr	r0, [pc, #172]	; (800428c <low_level_init+0x124>)
 80041e0:	f000 ff92 	bl	8005108 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2206      	movs	r2, #6
 80041e8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80041ec:	4b22      	ldr	r3, [pc, #136]	; (8004278 <low_level_init+0x110>)
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	781a      	ldrb	r2, [r3, #0]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80041f8:	4b1f      	ldr	r3, [pc, #124]	; (8004278 <low_level_init+0x110>)
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	785a      	ldrb	r2, [r3, #1]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8004204:	4b1c      	ldr	r3, [pc, #112]	; (8004278 <low_level_init+0x110>)
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	789a      	ldrb	r2, [r3, #2]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8004210:	4b19      	ldr	r3, [pc, #100]	; (8004278 <low_level_init+0x110>)
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	78da      	ldrb	r2, [r3, #3]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800421c:	4b16      	ldr	r3, [pc, #88]	; (8004278 <low_level_init+0x110>)
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	791a      	ldrb	r2, [r3, #4]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8004228:	4b13      	ldr	r3, [pc, #76]	; (8004278 <low_level_init+0x110>)
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	795a      	ldrb	r2, [r3, #5]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800423a:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004242:	f043 030a 	orr.w	r3, r3, #10
 8004246:	b2da      	uxtb	r2, r3
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800424e:	4910      	ldr	r1, [pc, #64]	; (8004290 <low_level_init+0x128>)
 8004250:	4810      	ldr	r0, [pc, #64]	; (8004294 <low_level_init+0x12c>)
 8004252:	f7fc fcca 	bl	8000bea <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8004256:	480f      	ldr	r0, [pc, #60]	; (8004294 <low_level_init+0x12c>)
 8004258:	f7fc fcf9 	bl	8000c4e <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 800425c:	7bfb      	ldrb	r3, [r7, #15]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d103      	bne.n	800426a <low_level_init+0x102>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f000 f9fa 	bl	800465c <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8004268:	e001      	b.n	800426e <low_level_init+0x106>
    Error_Handler();
 800426a:	f7fc faf9 	bl	8000860 <Error_Handler>
}
 800426e:	bf00      	nop
 8004270:	3710      	adds	r7, #16
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}
 8004276:	bf00      	nop
 8004278:	20004c10 	.word	0x20004c10
 800427c:	40028000 	.word	0x40028000
 8004280:	20004b70 	.word	0x20004b70
 8004284:	20004ad0 	.word	0x20004ad0
 8004288:	20004cc0 	.word	0x20004cc0
 800428c:	08014680 	.word	0x08014680
 8004290:	2000000c 	.word	0x2000000c
 8004294:	20004cf8 	.word	0x20004cf8

08004298 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b092      	sub	sp, #72	; 0x48
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
 80042a0:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 80042a2:	2300      	movs	r3, #0
 80042a4:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 80042a6:	2300      	movs	r3, #0
 80042a8:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 80042aa:	2300      	movs	r3, #0
 80042ac:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT];

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 80042b0:	f107 030c 	add.w	r3, r7, #12
 80042b4:	2230      	movs	r2, #48	; 0x30
 80042b6:	2100      	movs	r1, #0
 80042b8:	4618      	mov	r0, r3
 80042ba:	f00c fa2d 	bl	8010718 <memset>

  for(q = p; q != NULL; q = q->next)
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	643b      	str	r3, [r7, #64]	; 0x40
 80042c2:	e045      	b.n	8004350 <low_level_output+0xb8>
  {
    if(i >= ETH_TX_DESC_CNT)
 80042c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042c6:	2b03      	cmp	r3, #3
 80042c8:	d902      	bls.n	80042d0 <low_level_output+0x38>
      return ERR_IF;
 80042ca:	f06f 030b 	mvn.w	r3, #11
 80042ce:	e055      	b.n	800437c <low_level_output+0xe4>

    Txbuffer[i].buffer = q->payload;
 80042d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042d2:	6859      	ldr	r1, [r3, #4]
 80042d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80042d6:	4613      	mov	r3, r2
 80042d8:	005b      	lsls	r3, r3, #1
 80042da:	4413      	add	r3, r2
 80042dc:	009b      	lsls	r3, r3, #2
 80042de:	3348      	adds	r3, #72	; 0x48
 80042e0:	443b      	add	r3, r7
 80042e2:	3b3c      	subs	r3, #60	; 0x3c
 80042e4:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 80042e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042e8:	895b      	ldrh	r3, [r3, #10]
 80042ea:	4619      	mov	r1, r3
 80042ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80042ee:	4613      	mov	r3, r2
 80042f0:	005b      	lsls	r3, r3, #1
 80042f2:	4413      	add	r3, r2
 80042f4:	009b      	lsls	r3, r3, #2
 80042f6:	3348      	adds	r3, #72	; 0x48
 80042f8:	443b      	add	r3, r7
 80042fa:	3b38      	subs	r3, #56	; 0x38
 80042fc:	6019      	str	r1, [r3, #0]

    if(i>0)
 80042fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004300:	2b00      	cmp	r3, #0
 8004302:	d011      	beq.n	8004328 <low_level_output+0x90>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8004304:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004306:	1e5a      	subs	r2, r3, #1
 8004308:	f107 000c 	add.w	r0, r7, #12
 800430c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800430e:	460b      	mov	r3, r1
 8004310:	005b      	lsls	r3, r3, #1
 8004312:	440b      	add	r3, r1
 8004314:	009b      	lsls	r3, r3, #2
 8004316:	18c1      	adds	r1, r0, r3
 8004318:	4613      	mov	r3, r2
 800431a:	005b      	lsls	r3, r3, #1
 800431c:	4413      	add	r3, r2
 800431e:	009b      	lsls	r3, r3, #2
 8004320:	3348      	adds	r3, #72	; 0x48
 8004322:	443b      	add	r3, r7
 8004324:	3b34      	subs	r3, #52	; 0x34
 8004326:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8004328:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d109      	bne.n	8004344 <low_level_output+0xac>
    {
      Txbuffer[i].next = NULL;
 8004330:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004332:	4613      	mov	r3, r2
 8004334:	005b      	lsls	r3, r3, #1
 8004336:	4413      	add	r3, r2
 8004338:	009b      	lsls	r3, r3, #2
 800433a:	3348      	adds	r3, #72	; 0x48
 800433c:	443b      	add	r3, r7
 800433e:	3b34      	subs	r3, #52	; 0x34
 8004340:	2200      	movs	r2, #0
 8004342:	601a      	str	r2, [r3, #0]
    }

    i++;
 8004344:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004346:	3301      	adds	r3, #1
 8004348:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 800434a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	643b      	str	r3, [r7, #64]	; 0x40
 8004350:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004352:	2b00      	cmp	r3, #0
 8004354:	d1b6      	bne.n	80042c4 <low_level_output+0x2c>
  }

  TxConfig.Length = p->tot_len;
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	891b      	ldrh	r3, [r3, #8]
 800435a:	461a      	mov	r2, r3
 800435c:	4b09      	ldr	r3, [pc, #36]	; (8004384 <low_level_output+0xec>)
 800435e:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8004360:	4a08      	ldr	r2, [pc, #32]	; (8004384 <low_level_output+0xec>)
 8004362:	f107 030c 	add.w	r3, r7, #12
 8004366:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8004368:	4a06      	ldr	r2, [pc, #24]	; (8004384 <low_level_output+0xec>)
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 800436e:	2214      	movs	r2, #20
 8004370:	4904      	ldr	r1, [pc, #16]	; (8004384 <low_level_output+0xec>)
 8004372:	4805      	ldr	r0, [pc, #20]	; (8004388 <low_level_output+0xf0>)
 8004374:	f7fd f8da 	bl	800152c <HAL_ETH_Transmit>

  return errval;
 8004378:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800437c:	4618      	mov	r0, r3
 800437e:	3748      	adds	r7, #72	; 0x48
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}
 8004384:	20004cc0 	.word	0x20004cc0
 8004388:	20004c10 	.word	0x20004c10

0800438c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b082      	sub	sp, #8
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d106      	bne.n	80043a8 <ethernetif_init+0x1c>
 800439a:	4b0e      	ldr	r3, [pc, #56]	; (80043d4 <ethernetif_init+0x48>)
 800439c:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 80043a0:	490d      	ldr	r1, [pc, #52]	; (80043d8 <ethernetif_init+0x4c>)
 80043a2:	480e      	ldr	r0, [pc, #56]	; (80043dc <ethernetif_init+0x50>)
 80043a4:	f00c f9c0 	bl	8010728 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2273      	movs	r2, #115	; 0x73
 80043ac:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2274      	movs	r2, #116	; 0x74
 80043b4:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	4a09      	ldr	r2, [pc, #36]	; (80043e0 <ethernetif_init+0x54>)
 80043bc:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	4a08      	ldr	r2, [pc, #32]	; (80043e4 <ethernetif_init+0x58>)
 80043c2:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	f7ff fecf 	bl	8004168 <low_level_init>

  return ERR_OK;
 80043ca:	2300      	movs	r3, #0
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	3708      	adds	r7, #8
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}
 80043d4:	080118e8 	.word	0x080118e8
 80043d8:	08011904 	.word	0x08011904
 80043dc:	08011914 	.word	0x08011914
 80043e0:	0800e919 	.word	0x0800e919
 80043e4:	08004299 	.word	0x08004299

080043e8 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b084      	sub	sp, #16
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 80043f4:	68f9      	ldr	r1, [r7, #12]
 80043f6:	4808      	ldr	r0, [pc, #32]	; (8004418 <pbuf_free_custom+0x30>)
 80043f8:	f000 ff68 	bl	80052cc <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 80043fc:	4b07      	ldr	r3, [pc, #28]	; (800441c <pbuf_free_custom+0x34>)
 80043fe:	781b      	ldrb	r3, [r3, #0]
 8004400:	2b01      	cmp	r3, #1
 8004402:	d105      	bne.n	8004410 <pbuf_free_custom+0x28>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8004404:	4b05      	ldr	r3, [pc, #20]	; (800441c <pbuf_free_custom+0x34>)
 8004406:	2200      	movs	r2, #0
 8004408:	701a      	strb	r2, [r3, #0]
    RxPkt = 1 ;
 800440a:	4b05      	ldr	r3, [pc, #20]	; (8004420 <pbuf_free_custom+0x38>)
 800440c:	2201      	movs	r2, #1
 800440e:	601a      	str	r2, [r3, #0]
  }
}
 8004410:	bf00      	nop
 8004412:	3710      	adds	r7, #16
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}
 8004418:	08014680 	.word	0x08014680
 800441c:	20004ac8 	.word	0x20004ac8
 8004420:	20004acc 	.word	0x20004acc

08004424 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004428:	f7fc fda6 	bl	8000f78 <HAL_GetTick>
 800442c:	4603      	mov	r3, r0
}
 800442e:	4618      	mov	r0, r3
 8004430:	bd80      	pop	{r7, pc}
	...

08004434 <HAL_ETH_MspInit>:

/* USER CODE END 6 */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b08e      	sub	sp, #56	; 0x38
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800443c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004440:	2200      	movs	r2, #0
 8004442:	601a      	str	r2, [r3, #0]
 8004444:	605a      	str	r2, [r3, #4]
 8004446:	609a      	str	r2, [r3, #8]
 8004448:	60da      	str	r2, [r3, #12]
 800444a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a55      	ldr	r2, [pc, #340]	; (80045a8 <HAL_ETH_MspInit+0x174>)
 8004452:	4293      	cmp	r3, r2
 8004454:	f040 80a4 	bne.w	80045a0 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8004458:	2300      	movs	r3, #0
 800445a:	623b      	str	r3, [r7, #32]
 800445c:	4b53      	ldr	r3, [pc, #332]	; (80045ac <HAL_ETH_MspInit+0x178>)
 800445e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004460:	4a52      	ldr	r2, [pc, #328]	; (80045ac <HAL_ETH_MspInit+0x178>)
 8004462:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004466:	6313      	str	r3, [r2, #48]	; 0x30
 8004468:	4b50      	ldr	r3, [pc, #320]	; (80045ac <HAL_ETH_MspInit+0x178>)
 800446a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800446c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004470:	623b      	str	r3, [r7, #32]
 8004472:	6a3b      	ldr	r3, [r7, #32]
 8004474:	2300      	movs	r3, #0
 8004476:	61fb      	str	r3, [r7, #28]
 8004478:	4b4c      	ldr	r3, [pc, #304]	; (80045ac <HAL_ETH_MspInit+0x178>)
 800447a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800447c:	4a4b      	ldr	r2, [pc, #300]	; (80045ac <HAL_ETH_MspInit+0x178>)
 800447e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004482:	6313      	str	r3, [r2, #48]	; 0x30
 8004484:	4b49      	ldr	r3, [pc, #292]	; (80045ac <HAL_ETH_MspInit+0x178>)
 8004486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004488:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800448c:	61fb      	str	r3, [r7, #28]
 800448e:	69fb      	ldr	r3, [r7, #28]
 8004490:	2300      	movs	r3, #0
 8004492:	61bb      	str	r3, [r7, #24]
 8004494:	4b45      	ldr	r3, [pc, #276]	; (80045ac <HAL_ETH_MspInit+0x178>)
 8004496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004498:	4a44      	ldr	r2, [pc, #272]	; (80045ac <HAL_ETH_MspInit+0x178>)
 800449a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800449e:	6313      	str	r3, [r2, #48]	; 0x30
 80044a0:	4b42      	ldr	r3, [pc, #264]	; (80045ac <HAL_ETH_MspInit+0x178>)
 80044a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044a8:	61bb      	str	r3, [r7, #24]
 80044aa:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80044ac:	2300      	movs	r3, #0
 80044ae:	617b      	str	r3, [r7, #20]
 80044b0:	4b3e      	ldr	r3, [pc, #248]	; (80045ac <HAL_ETH_MspInit+0x178>)
 80044b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044b4:	4a3d      	ldr	r2, [pc, #244]	; (80045ac <HAL_ETH_MspInit+0x178>)
 80044b6:	f043 0304 	orr.w	r3, r3, #4
 80044ba:	6313      	str	r3, [r2, #48]	; 0x30
 80044bc:	4b3b      	ldr	r3, [pc, #236]	; (80045ac <HAL_ETH_MspInit+0x178>)
 80044be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c0:	f003 0304 	and.w	r3, r3, #4
 80044c4:	617b      	str	r3, [r7, #20]
 80044c6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80044c8:	2300      	movs	r3, #0
 80044ca:	613b      	str	r3, [r7, #16]
 80044cc:	4b37      	ldr	r3, [pc, #220]	; (80045ac <HAL_ETH_MspInit+0x178>)
 80044ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044d0:	4a36      	ldr	r2, [pc, #216]	; (80045ac <HAL_ETH_MspInit+0x178>)
 80044d2:	f043 0301 	orr.w	r3, r3, #1
 80044d6:	6313      	str	r3, [r2, #48]	; 0x30
 80044d8:	4b34      	ldr	r3, [pc, #208]	; (80045ac <HAL_ETH_MspInit+0x178>)
 80044da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044dc:	f003 0301 	and.w	r3, r3, #1
 80044e0:	613b      	str	r3, [r7, #16]
 80044e2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80044e4:	2300      	movs	r3, #0
 80044e6:	60fb      	str	r3, [r7, #12]
 80044e8:	4b30      	ldr	r3, [pc, #192]	; (80045ac <HAL_ETH_MspInit+0x178>)
 80044ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ec:	4a2f      	ldr	r2, [pc, #188]	; (80045ac <HAL_ETH_MspInit+0x178>)
 80044ee:	f043 0302 	orr.w	r3, r3, #2
 80044f2:	6313      	str	r3, [r2, #48]	; 0x30
 80044f4:	4b2d      	ldr	r3, [pc, #180]	; (80045ac <HAL_ETH_MspInit+0x178>)
 80044f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f8:	f003 0302 	and.w	r3, r3, #2
 80044fc:	60fb      	str	r3, [r7, #12]
 80044fe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004500:	2300      	movs	r3, #0
 8004502:	60bb      	str	r3, [r7, #8]
 8004504:	4b29      	ldr	r3, [pc, #164]	; (80045ac <HAL_ETH_MspInit+0x178>)
 8004506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004508:	4a28      	ldr	r2, [pc, #160]	; (80045ac <HAL_ETH_MspInit+0x178>)
 800450a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800450e:	6313      	str	r3, [r2, #48]	; 0x30
 8004510:	4b26      	ldr	r3, [pc, #152]	; (80045ac <HAL_ETH_MspInit+0x178>)
 8004512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004514:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004518:	60bb      	str	r3, [r7, #8]
 800451a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800451c:	2332      	movs	r3, #50	; 0x32
 800451e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004520:	2302      	movs	r3, #2
 8004522:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004524:	2300      	movs	r3, #0
 8004526:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004528:	2303      	movs	r3, #3
 800452a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800452c:	230b      	movs	r3, #11
 800452e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004530:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004534:	4619      	mov	r1, r3
 8004536:	481e      	ldr	r0, [pc, #120]	; (80045b0 <HAL_ETH_MspInit+0x17c>)
 8004538:	f7fd fed8 	bl	80022ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800453c:	2386      	movs	r3, #134	; 0x86
 800453e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004540:	2302      	movs	r3, #2
 8004542:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004544:	2300      	movs	r3, #0
 8004546:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004548:	2303      	movs	r3, #3
 800454a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800454c:	230b      	movs	r3, #11
 800454e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004550:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004554:	4619      	mov	r1, r3
 8004556:	4817      	ldr	r0, [pc, #92]	; (80045b4 <HAL_ETH_MspInit+0x180>)
 8004558:	f7fd fec8 	bl	80022ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800455c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004560:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004562:	2302      	movs	r3, #2
 8004564:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004566:	2300      	movs	r3, #0
 8004568:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800456a:	2303      	movs	r3, #3
 800456c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800456e:	230b      	movs	r3, #11
 8004570:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8004572:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004576:	4619      	mov	r1, r3
 8004578:	480f      	ldr	r0, [pc, #60]	; (80045b8 <HAL_ETH_MspInit+0x184>)
 800457a:	f7fd feb7 	bl	80022ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800457e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8004582:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004584:	2302      	movs	r3, #2
 8004586:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004588:	2300      	movs	r3, #0
 800458a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800458c:	2303      	movs	r3, #3
 800458e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004590:	230b      	movs	r3, #11
 8004592:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004594:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004598:	4619      	mov	r1, r3
 800459a:	4808      	ldr	r0, [pc, #32]	; (80045bc <HAL_ETH_MspInit+0x188>)
 800459c:	f7fd fea6 	bl	80022ec <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80045a0:	bf00      	nop
 80045a2:	3738      	adds	r7, #56	; 0x38
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}
 80045a8:	40028000 	.word	0x40028000
 80045ac:	40023800 	.word	0x40023800
 80045b0:	40020800 	.word	0x40020800
 80045b4:	40020000 	.word	0x40020000
 80045b8:	40020400 	.word	0x40020400
 80045bc:	40021800 	.word	0x40021800

080045c0 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 80045c4:	4802      	ldr	r0, [pc, #8]	; (80045d0 <ETH_PHY_IO_Init+0x10>)
 80045c6:	f7fd fa49 	bl	8001a5c <HAL_ETH_SetMDIOClockRange>

  return 0;
 80045ca:	2300      	movs	r3, #0
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	bd80      	pop	{r7, pc}
 80045d0:	20004c10 	.word	0x20004c10

080045d4 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 80045d4:	b480      	push	{r7}
 80045d6:	af00      	add	r7, sp, #0
  return 0;
 80045d8:	2300      	movs	r3, #0
}
 80045da:	4618      	mov	r0, r3
 80045dc:	46bd      	mov	sp, r7
 80045de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e2:	4770      	bx	lr

080045e4 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b084      	sub	sp, #16
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	60f8      	str	r0, [r7, #12]
 80045ec:	60b9      	str	r1, [r7, #8]
 80045ee:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	68ba      	ldr	r2, [r7, #8]
 80045f4:	68f9      	ldr	r1, [r7, #12]
 80045f6:	4807      	ldr	r0, [pc, #28]	; (8004614 <ETH_PHY_IO_ReadReg+0x30>)
 80045f8:	f7fd f89e 	bl	8001738 <HAL_ETH_ReadPHYRegister>
 80045fc:	4603      	mov	r3, r0
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d002      	beq.n	8004608 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8004602:	f04f 33ff 	mov.w	r3, #4294967295
 8004606:	e000      	b.n	800460a <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8004608:	2300      	movs	r3, #0
}
 800460a:	4618      	mov	r0, r3
 800460c:	3710      	adds	r7, #16
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}
 8004612:	bf00      	nop
 8004614:	20004c10 	.word	0x20004c10

08004618 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b084      	sub	sp, #16
 800461c:	af00      	add	r7, sp, #0
 800461e:	60f8      	str	r0, [r7, #12]
 8004620:	60b9      	str	r1, [r7, #8]
 8004622:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	68ba      	ldr	r2, [r7, #8]
 8004628:	68f9      	ldr	r1, [r7, #12]
 800462a:	4807      	ldr	r0, [pc, #28]	; (8004648 <ETH_PHY_IO_WriteReg+0x30>)
 800462c:	f7fd f8cf 	bl	80017ce <HAL_ETH_WritePHYRegister>
 8004630:	4603      	mov	r3, r0
 8004632:	2b00      	cmp	r3, #0
 8004634:	d002      	beq.n	800463c <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8004636:	f04f 33ff 	mov.w	r3, #4294967295
 800463a:	e000      	b.n	800463e <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800463c:	2300      	movs	r3, #0
}
 800463e:	4618      	mov	r0, r3
 8004640:	3710      	adds	r7, #16
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}
 8004646:	bf00      	nop
 8004648:	20004c10 	.word	0x20004c10

0800464c <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004650:	f7fc fc92 	bl	8000f78 <HAL_GetTick>
 8004654:	4603      	mov	r3, r0
}
 8004656:	4618      	mov	r0, r3
 8004658:	bd80      	pop	{r7, pc}
	...

0800465c <ethernet_link_check_state>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @param  argument: netif
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b0a0      	sub	sp, #128	; 0x80
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8004664:	f107 030c 	add.w	r3, r7, #12
 8004668:	2264      	movs	r2, #100	; 0x64
 800466a:	2100      	movs	r1, #0
 800466c:	4618      	mov	r0, r3
 800466e:	f00c f853 	bl	8010718 <memset>
  int32_t PHYLinkState = 0;
 8004672:	2300      	movs	r3, #0
 8004674:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8004676:	2300      	movs	r3, #0
 8004678:	67fb      	str	r3, [r7, #124]	; 0x7c
 800467a:	2300      	movs	r3, #0
 800467c:	67bb      	str	r3, [r7, #120]	; 0x78
 800467e:	2300      	movs	r3, #0
 8004680:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8004682:	483a      	ldr	r0, [pc, #232]	; (800476c <ethernet_link_check_state+0x110>)
 8004684:	f7fc fb8b 	bl	8000d9e <LAN8742_GetLinkState>
 8004688:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004690:	089b      	lsrs	r3, r3, #2
 8004692:	f003 0301 	and.w	r3, r3, #1
 8004696:	b2db      	uxtb	r3, r3
 8004698:	2b00      	cmp	r3, #0
 800469a:	d00c      	beq.n	80046b6 <ethernet_link_check_state+0x5a>
 800469c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800469e:	2b01      	cmp	r3, #1
 80046a0:	dc09      	bgt.n	80046b6 <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 80046a2:	4833      	ldr	r0, [pc, #204]	; (8004770 <ethernet_link_check_state+0x114>)
 80046a4:	f7fc ff03 	bl	80014ae <HAL_ETH_Stop>
    netif_set_down(netif);
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	f001 f89b 	bl	80057e4 <netif_set_down>
    netif_set_link_down(netif);
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f001 f902 	bl	80058b8 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 80046b4:	e055      	b.n	8004762 <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80046bc:	f003 0304 	and.w	r3, r3, #4
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d14e      	bne.n	8004762 <ethernet_link_check_state+0x106>
 80046c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	dd4b      	ble.n	8004762 <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 80046ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80046cc:	3b02      	subs	r3, #2
 80046ce:	2b03      	cmp	r3, #3
 80046d0:	d82a      	bhi.n	8004728 <ethernet_link_check_state+0xcc>
 80046d2:	a201      	add	r2, pc, #4	; (adr r2, 80046d8 <ethernet_link_check_state+0x7c>)
 80046d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046d8:	080046e9 	.word	0x080046e9
 80046dc:	080046fb 	.word	0x080046fb
 80046e0:	0800470b 	.word	0x0800470b
 80046e4:	0800471b 	.word	0x0800471b
      duplex = ETH_FULLDUPLEX_MODE;
 80046e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80046ec:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80046ee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80046f2:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80046f4:	2301      	movs	r3, #1
 80046f6:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80046f8:	e017      	b.n	800472a <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 80046fa:	2300      	movs	r3, #0
 80046fc:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80046fe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004702:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8004704:	2301      	movs	r3, #1
 8004706:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004708:	e00f      	b.n	800472a <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 800470a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800470e:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8004710:	2300      	movs	r3, #0
 8004712:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8004714:	2301      	movs	r3, #1
 8004716:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004718:	e007      	b.n	800472a <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800471a:	2300      	movs	r3, #0
 800471c:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800471e:	2300      	movs	r3, #0
 8004720:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8004722:	2301      	movs	r3, #1
 8004724:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004726:	e000      	b.n	800472a <ethernet_link_check_state+0xce>
      break;
 8004728:	bf00      	nop
    if(linkchanged)
 800472a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800472c:	2b00      	cmp	r3, #0
 800472e:	d018      	beq.n	8004762 <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8004730:	f107 030c 	add.w	r3, r7, #12
 8004734:	4619      	mov	r1, r3
 8004736:	480e      	ldr	r0, [pc, #56]	; (8004770 <ethernet_link_check_state+0x114>)
 8004738:	f7fd f892 	bl	8001860 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800473c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800473e:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 8004740:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004742:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8004744:	f107 030c 	add.w	r3, r7, #12
 8004748:	4619      	mov	r1, r3
 800474a:	4809      	ldr	r0, [pc, #36]	; (8004770 <ethernet_link_check_state+0x114>)
 800474c:	f7fd f96b 	bl	8001a26 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8004750:	4807      	ldr	r0, [pc, #28]	; (8004770 <ethernet_link_check_state+0x114>)
 8004752:	f7fc fe63 	bl	800141c <HAL_ETH_Start>
      netif_set_up(netif);
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f000 ffd8 	bl	800570c <netif_set_up>
      netif_set_link_up(netif);
 800475c:	6878      	ldr	r0, [r7, #4]
 800475e:	f001 f873 	bl	8005848 <netif_set_link_up>
}
 8004762:	bf00      	nop
 8004764:	3780      	adds	r7, #128	; 0x80
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}
 800476a:	bf00      	nop
 800476c:	20004cf8 	.word	0x20004cf8
 8004770:	20004c10 	.word	0x20004c10

08004774 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b086      	sub	sp, #24
 8004778:	af02      	add	r7, sp, #8
 800477a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */

  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800477c:	4812      	ldr	r0, [pc, #72]	; (80047c8 <HAL_ETH_RxAllocateCallback+0x54>)
 800477e:	f000 fd37 	bl	80051f0 <memp_malloc_pool>
 8004782:	60f8      	str	r0, [r7, #12]
  if (p)
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d014      	beq.n	80047b4 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	f103 0220 	add.w	r2, r3, #32
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	4a0d      	ldr	r2, [pc, #52]	; (80047cc <HAL_ETH_RxAllocateCallback+0x58>)
 8004798:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80047a2:	9201      	str	r2, [sp, #4]
 80047a4:	9300      	str	r3, [sp, #0]
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2241      	movs	r2, #65	; 0x41
 80047aa:	2100      	movs	r1, #0
 80047ac:	2000      	movs	r0, #0
 80047ae:	f001 fa59 	bl	8005c64 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 80047b2:	e005      	b.n	80047c0 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 80047b4:	4b06      	ldr	r3, [pc, #24]	; (80047d0 <HAL_ETH_RxAllocateCallback+0x5c>)
 80047b6:	2201      	movs	r2, #1
 80047b8:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2200      	movs	r2, #0
 80047be:	601a      	str	r2, [r3, #0]
}
 80047c0:	bf00      	nop
 80047c2:	3710      	adds	r7, #16
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}
 80047c8:	08014680 	.word	0x08014680
 80047cc:	080043e9 	.word	0x080043e9
 80047d0:	20004ac8 	.word	0x20004ac8

080047d4 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b083      	sub	sp, #12
 80047d8:	af00      	add	r7, sp, #0
 80047da:	4603      	mov	r3, r0
 80047dc:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80047de:	88fb      	ldrh	r3, [r7, #6]
 80047e0:	021b      	lsls	r3, r3, #8
 80047e2:	b21a      	sxth	r2, r3
 80047e4:	88fb      	ldrh	r3, [r7, #6]
 80047e6:	0a1b      	lsrs	r3, r3, #8
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	b21b      	sxth	r3, r3
 80047ec:	4313      	orrs	r3, r2
 80047ee:	b21b      	sxth	r3, r3
 80047f0:	b29b      	uxth	r3, r3
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	370c      	adds	r7, #12
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr

080047fe <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80047fe:	b480      	push	{r7}
 8004800:	b083      	sub	sp, #12
 8004802:	af00      	add	r7, sp, #0
 8004804:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	061a      	lsls	r2, r3, #24
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	021b      	lsls	r3, r3, #8
 800480e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004812:	431a      	orrs	r2, r3
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	0a1b      	lsrs	r3, r3, #8
 8004818:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800481c:	431a      	orrs	r2, r3
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	0e1b      	lsrs	r3, r3, #24
 8004822:	4313      	orrs	r3, r2
}
 8004824:	4618      	mov	r0, r3
 8004826:	370c      	adds	r7, #12
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr

08004830 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 8004830:	b480      	push	{r7}
 8004832:	b089      	sub	sp, #36	; 0x24
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
 8004838:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800483e:	2300      	movs	r3, #0
 8004840:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 8004842:	2300      	movs	r3, #0
 8004844:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 8004846:	69fb      	ldr	r3, [r7, #28]
 8004848:	f003 0301 	and.w	r3, r3, #1
 800484c:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d00d      	beq.n	8004870 <lwip_standard_chksum+0x40>
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	2b00      	cmp	r3, #0
 8004858:	dd0a      	ble.n	8004870 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800485a:	69fa      	ldr	r2, [r7, #28]
 800485c:	1c53      	adds	r3, r2, #1
 800485e:	61fb      	str	r3, [r7, #28]
 8004860:	f107 030e 	add.w	r3, r7, #14
 8004864:	3301      	adds	r3, #1
 8004866:	7812      	ldrb	r2, [r2, #0]
 8004868:	701a      	strb	r2, [r3, #0]
    len--;
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	3b01      	subs	r3, #1
 800486e:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 8004870:	69fb      	ldr	r3, [r7, #28]
 8004872:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 8004874:	e00a      	b.n	800488c <lwip_standard_chksum+0x5c>
    sum += *ps++;
 8004876:	69bb      	ldr	r3, [r7, #24]
 8004878:	1c9a      	adds	r2, r3, #2
 800487a:	61ba      	str	r2, [r7, #24]
 800487c:	881b      	ldrh	r3, [r3, #0]
 800487e:	461a      	mov	r2, r3
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	4413      	add	r3, r2
 8004884:	617b      	str	r3, [r7, #20]
    len -= 2;
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	3b02      	subs	r3, #2
 800488a:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	2b01      	cmp	r3, #1
 8004890:	dcf1      	bgt.n	8004876 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	2b00      	cmp	r3, #0
 8004896:	dd04      	ble.n	80048a2 <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 8004898:	f107 030e 	add.w	r3, r7, #14
 800489c:	69ba      	ldr	r2, [r7, #24]
 800489e:	7812      	ldrb	r2, [r2, #0]
 80048a0:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 80048a2:	89fb      	ldrh	r3, [r7, #14]
 80048a4:	461a      	mov	r2, r3
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	4413      	add	r3, r2
 80048aa:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	0c1a      	lsrs	r2, r3, #16
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	4413      	add	r3, r2
 80048b6:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	0c1a      	lsrs	r2, r3, #16
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	b29b      	uxth	r3, r3
 80048c0:	4413      	add	r3, r2
 80048c2:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d007      	beq.n	80048da <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	021b      	lsls	r3, r3, #8
 80048ce:	b29a      	uxth	r2, r3
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	0a1b      	lsrs	r3, r3, #8
 80048d4:	b2db      	uxtb	r3, r3
 80048d6:	4313      	orrs	r3, r2
 80048d8:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	b29b      	uxth	r3, r3
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3724      	adds	r7, #36	; 0x24
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	4770      	bx	lr

080048ea <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 80048ea:	b580      	push	{r7, lr}
 80048ec:	b082      	sub	sp, #8
 80048ee:	af00      	add	r7, sp, #0
 80048f0:	6078      	str	r0, [r7, #4]
 80048f2:	460b      	mov	r3, r1
 80048f4:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 80048f6:	887b      	ldrh	r3, [r7, #2]
 80048f8:	4619      	mov	r1, r3
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f7ff ff98 	bl	8004830 <lwip_standard_chksum>
 8004900:	4603      	mov	r3, r0
 8004902:	43db      	mvns	r3, r3
 8004904:	b29b      	uxth	r3, r3
}
 8004906:	4618      	mov	r0, r3
 8004908:	3708      	adds	r7, #8
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}

0800490e <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 800490e:	b580      	push	{r7, lr}
 8004910:	b086      	sub	sp, #24
 8004912:	af00      	add	r7, sp, #0
 8004914:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 8004916:	2300      	movs	r3, #0
 8004918:	60fb      	str	r3, [r7, #12]

  acc = 0;
 800491a:	2300      	movs	r3, #0
 800491c:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	613b      	str	r3, [r7, #16]
 8004922:	e02b      	b.n	800497c <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	685a      	ldr	r2, [r3, #4]
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	895b      	ldrh	r3, [r3, #10]
 800492c:	4619      	mov	r1, r3
 800492e:	4610      	mov	r0, r2
 8004930:	f7ff ff7e 	bl	8004830 <lwip_standard_chksum>
 8004934:	4603      	mov	r3, r0
 8004936:	461a      	mov	r2, r3
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	4413      	add	r3, r2
 800493c:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	0c1a      	lsrs	r2, r3, #16
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	b29b      	uxth	r3, r3
 8004946:	4413      	add	r3, r2
 8004948:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	895b      	ldrh	r3, [r3, #10]
 800494e:	f003 0301 	and.w	r3, r3, #1
 8004952:	b29b      	uxth	r3, r3
 8004954:	2b00      	cmp	r3, #0
 8004956:	d00e      	beq.n	8004976 <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2b00      	cmp	r3, #0
 800495c:	bf0c      	ite	eq
 800495e:	2301      	moveq	r3, #1
 8004960:	2300      	movne	r3, #0
 8004962:	b2db      	uxtb	r3, r3
 8004964:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	021b      	lsls	r3, r3, #8
 800496a:	b29a      	uxth	r2, r3
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	0a1b      	lsrs	r3, r3, #8
 8004970:	b2db      	uxtb	r3, r3
 8004972:	4313      	orrs	r3, r2
 8004974:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	613b      	str	r3, [r7, #16]
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d1d0      	bne.n	8004924 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d007      	beq.n	8004998 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	021b      	lsls	r3, r3, #8
 800498c:	b29a      	uxth	r2, r3
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	0a1b      	lsrs	r3, r3, #8
 8004992:	b2db      	uxtb	r3, r3
 8004994:	4313      	orrs	r3, r2
 8004996:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	b29b      	uxth	r3, r3
 800499c:	43db      	mvns	r3, r3
 800499e:	b29b      	uxth	r3, r3
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3718      	adds	r7, #24
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}

080049a8 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b082      	sub	sp, #8
 80049ac:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80049ae:	2300      	movs	r3, #0
 80049b0:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 80049b2:	f000 f8d5 	bl	8004b60 <mem_init>
  memp_init();
 80049b6:	f000 fbd7 	bl	8005168 <memp_init>
  pbuf_init();
  netif_init();
 80049ba:	f000 fcd5 	bl	8005368 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80049be:	f007 f80d 	bl	800b9dc <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80049c2:	f001 fda7 	bl	8006514 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 80049c6:	f006 ffc1 	bl	800b94c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80049ca:	bf00      	nop
 80049cc:	3708      	adds	r7, #8
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}
	...

080049d4 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b083      	sub	sp, #12
 80049d8:	af00      	add	r7, sp, #0
 80049da:	4603      	mov	r3, r0
 80049dc:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 80049de:	4b05      	ldr	r3, [pc, #20]	; (80049f4 <ptr_to_mem+0x20>)
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	88fb      	ldrh	r3, [r7, #6]
 80049e4:	4413      	add	r3, r2
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	370c      	adds	r7, #12
 80049ea:	46bd      	mov	sp, r7
 80049ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f0:	4770      	bx	lr
 80049f2:	bf00      	nop
 80049f4:	20004d30 	.word	0x20004d30

080049f8 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b083      	sub	sp, #12
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8004a00:	4b05      	ldr	r3, [pc, #20]	; (8004a18 <mem_to_ptr+0x20>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	687a      	ldr	r2, [r7, #4]
 8004a06:	1ad3      	subs	r3, r2, r3
 8004a08:	b29b      	uxth	r3, r3
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	370c      	adds	r7, #12
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr
 8004a16:	bf00      	nop
 8004a18:	20004d30 	.word	0x20004d30

08004a1c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8004a1c:	b590      	push	{r4, r7, lr}
 8004a1e:	b085      	sub	sp, #20
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8004a24:	4b45      	ldr	r3, [pc, #276]	; (8004b3c <plug_holes+0x120>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	687a      	ldr	r2, [r7, #4]
 8004a2a:	429a      	cmp	r2, r3
 8004a2c:	d206      	bcs.n	8004a3c <plug_holes+0x20>
 8004a2e:	4b44      	ldr	r3, [pc, #272]	; (8004b40 <plug_holes+0x124>)
 8004a30:	f240 12df 	movw	r2, #479	; 0x1df
 8004a34:	4943      	ldr	r1, [pc, #268]	; (8004b44 <plug_holes+0x128>)
 8004a36:	4844      	ldr	r0, [pc, #272]	; (8004b48 <plug_holes+0x12c>)
 8004a38:	f00b fe76 	bl	8010728 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8004a3c:	4b43      	ldr	r3, [pc, #268]	; (8004b4c <plug_holes+0x130>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	687a      	ldr	r2, [r7, #4]
 8004a42:	429a      	cmp	r2, r3
 8004a44:	d306      	bcc.n	8004a54 <plug_holes+0x38>
 8004a46:	4b3e      	ldr	r3, [pc, #248]	; (8004b40 <plug_holes+0x124>)
 8004a48:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004a4c:	4940      	ldr	r1, [pc, #256]	; (8004b50 <plug_holes+0x134>)
 8004a4e:	483e      	ldr	r0, [pc, #248]	; (8004b48 <plug_holes+0x12c>)
 8004a50:	f00b fe6a 	bl	8010728 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	791b      	ldrb	r3, [r3, #4]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d006      	beq.n	8004a6a <plug_holes+0x4e>
 8004a5c:	4b38      	ldr	r3, [pc, #224]	; (8004b40 <plug_holes+0x124>)
 8004a5e:	f240 12e1 	movw	r2, #481	; 0x1e1
 8004a62:	493c      	ldr	r1, [pc, #240]	; (8004b54 <plug_holes+0x138>)
 8004a64:	4838      	ldr	r0, [pc, #224]	; (8004b48 <plug_holes+0x12c>)
 8004a66:	f00b fe5f 	bl	8010728 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	881b      	ldrh	r3, [r3, #0]
 8004a6e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004a72:	d906      	bls.n	8004a82 <plug_holes+0x66>
 8004a74:	4b32      	ldr	r3, [pc, #200]	; (8004b40 <plug_holes+0x124>)
 8004a76:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8004a7a:	4937      	ldr	r1, [pc, #220]	; (8004b58 <plug_holes+0x13c>)
 8004a7c:	4832      	ldr	r0, [pc, #200]	; (8004b48 <plug_holes+0x12c>)
 8004a7e:	f00b fe53 	bl	8010728 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	881b      	ldrh	r3, [r3, #0]
 8004a86:	4618      	mov	r0, r3
 8004a88:	f7ff ffa4 	bl	80049d4 <ptr_to_mem>
 8004a8c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8004a8e:	687a      	ldr	r2, [r7, #4]
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	429a      	cmp	r2, r3
 8004a94:	d024      	beq.n	8004ae0 <plug_holes+0xc4>
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	791b      	ldrb	r3, [r3, #4]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d120      	bne.n	8004ae0 <plug_holes+0xc4>
 8004a9e:	4b2b      	ldr	r3, [pc, #172]	; (8004b4c <plug_holes+0x130>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	68fa      	ldr	r2, [r7, #12]
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d01b      	beq.n	8004ae0 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8004aa8:	4b2c      	ldr	r3, [pc, #176]	; (8004b5c <plug_holes+0x140>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	68fa      	ldr	r2, [r7, #12]
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d102      	bne.n	8004ab8 <plug_holes+0x9c>
      lfree = mem;
 8004ab2:	4a2a      	ldr	r2, [pc, #168]	; (8004b5c <plug_holes+0x140>)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	881a      	ldrh	r2, [r3, #0]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	881b      	ldrh	r3, [r3, #0]
 8004ac4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004ac8:	d00a      	beq.n	8004ae0 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	881b      	ldrh	r3, [r3, #0]
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f7ff ff80 	bl	80049d4 <ptr_to_mem>
 8004ad4:	4604      	mov	r4, r0
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f7ff ff8e 	bl	80049f8 <mem_to_ptr>
 8004adc:	4603      	mov	r3, r0
 8004ade:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	885b      	ldrh	r3, [r3, #2]
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	f7ff ff75 	bl	80049d4 <ptr_to_mem>
 8004aea:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8004aec:	68ba      	ldr	r2, [r7, #8]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d01f      	beq.n	8004b34 <plug_holes+0x118>
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	791b      	ldrb	r3, [r3, #4]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d11b      	bne.n	8004b34 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8004afc:	4b17      	ldr	r3, [pc, #92]	; (8004b5c <plug_holes+0x140>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	687a      	ldr	r2, [r7, #4]
 8004b02:	429a      	cmp	r2, r3
 8004b04:	d102      	bne.n	8004b0c <plug_holes+0xf0>
      lfree = pmem;
 8004b06:	4a15      	ldr	r2, [pc, #84]	; (8004b5c <plug_holes+0x140>)
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	881a      	ldrh	r2, [r3, #0]
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	881b      	ldrh	r3, [r3, #0]
 8004b18:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004b1c:	d00a      	beq.n	8004b34 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	881b      	ldrh	r3, [r3, #0]
 8004b22:	4618      	mov	r0, r3
 8004b24:	f7ff ff56 	bl	80049d4 <ptr_to_mem>
 8004b28:	4604      	mov	r4, r0
 8004b2a:	68b8      	ldr	r0, [r7, #8]
 8004b2c:	f7ff ff64 	bl	80049f8 <mem_to_ptr>
 8004b30:	4603      	mov	r3, r0
 8004b32:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8004b34:	bf00      	nop
 8004b36:	3714      	adds	r7, #20
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd90      	pop	{r4, r7, pc}
 8004b3c:	20004d30 	.word	0x20004d30
 8004b40:	0801193c 	.word	0x0801193c
 8004b44:	0801196c 	.word	0x0801196c
 8004b48:	08011984 	.word	0x08011984
 8004b4c:	20004d34 	.word	0x20004d34
 8004b50:	080119ac 	.word	0x080119ac
 8004b54:	080119c8 	.word	0x080119c8
 8004b58:	080119e4 	.word	0x080119e4
 8004b5c:	20004d38 	.word	0x20004d38

08004b60 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b082      	sub	sp, #8
 8004b64:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8004b66:	4b16      	ldr	r3, [pc, #88]	; (8004bc0 <mem_init+0x60>)
 8004b68:	4a16      	ldr	r2, [pc, #88]	; (8004bc4 <mem_init+0x64>)
 8004b6a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8004b6c:	4b14      	ldr	r3, [pc, #80]	; (8004bc0 <mem_init+0x60>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8004b78:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2200      	movs	r2, #0
 8004b84:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8004b86:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8004b8a:	f7ff ff23 	bl	80049d4 <ptr_to_mem>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	4a0d      	ldr	r2, [pc, #52]	; (8004bc8 <mem_init+0x68>)
 8004b92:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8004b94:	4b0c      	ldr	r3, [pc, #48]	; (8004bc8 <mem_init+0x68>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	2201      	movs	r2, #1
 8004b9a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8004b9c:	4b0a      	ldr	r3, [pc, #40]	; (8004bc8 <mem_init+0x68>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8004ba4:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8004ba6:	4b08      	ldr	r3, [pc, #32]	; (8004bc8 <mem_init+0x68>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8004bae:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8004bb0:	4b03      	ldr	r3, [pc, #12]	; (8004bc0 <mem_init+0x60>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a05      	ldr	r2, [pc, #20]	; (8004bcc <mem_init+0x6c>)
 8004bb6:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8004bb8:	bf00      	nop
 8004bba:	3708      	adds	r7, #8
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}
 8004bc0:	20004d30 	.word	0x20004d30
 8004bc4:	30044000 	.word	0x30044000
 8004bc8:	20004d34 	.word	0x20004d34
 8004bcc:	20004d38 	.word	0x20004d38

08004bd0 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b086      	sub	sp, #24
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f7ff ff0d 	bl	80049f8 <mem_to_ptr>
 8004bde:	4603      	mov	r3, r0
 8004be0:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	881b      	ldrh	r3, [r3, #0]
 8004be6:	4618      	mov	r0, r3
 8004be8:	f7ff fef4 	bl	80049d4 <ptr_to_mem>
 8004bec:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	885b      	ldrh	r3, [r3, #2]
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f7ff feee 	bl	80049d4 <ptr_to_mem>
 8004bf8:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	881b      	ldrh	r3, [r3, #0]
 8004bfe:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004c02:	d818      	bhi.n	8004c36 <mem_link_valid+0x66>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	885b      	ldrh	r3, [r3, #2]
 8004c08:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004c0c:	d813      	bhi.n	8004c36 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8004c12:	8afa      	ldrh	r2, [r7, #22]
 8004c14:	429a      	cmp	r2, r3
 8004c16:	d004      	beq.n	8004c22 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	881b      	ldrh	r3, [r3, #0]
 8004c1c:	8afa      	ldrh	r2, [r7, #22]
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d109      	bne.n	8004c36 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8004c22:	4b08      	ldr	r3, [pc, #32]	; (8004c44 <mem_link_valid+0x74>)
 8004c24:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8004c26:	693a      	ldr	r2, [r7, #16]
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d006      	beq.n	8004c3a <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	885b      	ldrh	r3, [r3, #2]
 8004c30:	8afa      	ldrh	r2, [r7, #22]
 8004c32:	429a      	cmp	r2, r3
 8004c34:	d001      	beq.n	8004c3a <mem_link_valid+0x6a>
    return 0;
 8004c36:	2300      	movs	r3, #0
 8004c38:	e000      	b.n	8004c3c <mem_link_valid+0x6c>
  }
  return 1;
 8004c3a:	2301      	movs	r3, #1
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3718      	adds	r7, #24
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}
 8004c44:	20004d34 	.word	0x20004d34

08004c48 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b084      	sub	sp, #16
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d04c      	beq.n	8004cf0 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	f003 0303 	and.w	r3, r3, #3
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d007      	beq.n	8004c70 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8004c60:	4b25      	ldr	r3, [pc, #148]	; (8004cf8 <mem_free+0xb0>)
 8004c62:	f240 2273 	movw	r2, #627	; 0x273
 8004c66:	4925      	ldr	r1, [pc, #148]	; (8004cfc <mem_free+0xb4>)
 8004c68:	4825      	ldr	r0, [pc, #148]	; (8004d00 <mem_free+0xb8>)
 8004c6a:	f00b fd5d 	bl	8010728 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004c6e:	e040      	b.n	8004cf2 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	3b08      	subs	r3, #8
 8004c74:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8004c76:	4b23      	ldr	r3, [pc, #140]	; (8004d04 <mem_free+0xbc>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	68fa      	ldr	r2, [r7, #12]
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d306      	bcc.n	8004c8e <mem_free+0x46>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	f103 020c 	add.w	r2, r3, #12
 8004c86:	4b20      	ldr	r3, [pc, #128]	; (8004d08 <mem_free+0xc0>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	429a      	cmp	r2, r3
 8004c8c:	d907      	bls.n	8004c9e <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8004c8e:	4b1a      	ldr	r3, [pc, #104]	; (8004cf8 <mem_free+0xb0>)
 8004c90:	f240 227f 	movw	r2, #639	; 0x27f
 8004c94:	491d      	ldr	r1, [pc, #116]	; (8004d0c <mem_free+0xc4>)
 8004c96:	481a      	ldr	r0, [pc, #104]	; (8004d00 <mem_free+0xb8>)
 8004c98:	f00b fd46 	bl	8010728 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004c9c:	e029      	b.n	8004cf2 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	791b      	ldrb	r3, [r3, #4]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d107      	bne.n	8004cb6 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8004ca6:	4b14      	ldr	r3, [pc, #80]	; (8004cf8 <mem_free+0xb0>)
 8004ca8:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8004cac:	4918      	ldr	r1, [pc, #96]	; (8004d10 <mem_free+0xc8>)
 8004cae:	4814      	ldr	r0, [pc, #80]	; (8004d00 <mem_free+0xb8>)
 8004cb0:	f00b fd3a 	bl	8010728 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004cb4:	e01d      	b.n	8004cf2 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8004cb6:	68f8      	ldr	r0, [r7, #12]
 8004cb8:	f7ff ff8a 	bl	8004bd0 <mem_link_valid>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d107      	bne.n	8004cd2 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8004cc2:	4b0d      	ldr	r3, [pc, #52]	; (8004cf8 <mem_free+0xb0>)
 8004cc4:	f240 2295 	movw	r2, #661	; 0x295
 8004cc8:	4912      	ldr	r1, [pc, #72]	; (8004d14 <mem_free+0xcc>)
 8004cca:	480d      	ldr	r0, [pc, #52]	; (8004d00 <mem_free+0xb8>)
 8004ccc:	f00b fd2c 	bl	8010728 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004cd0:	e00f      	b.n	8004cf2 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8004cd8:	4b0f      	ldr	r3, [pc, #60]	; (8004d18 <mem_free+0xd0>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	68fa      	ldr	r2, [r7, #12]
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d202      	bcs.n	8004ce8 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8004ce2:	4a0d      	ldr	r2, [pc, #52]	; (8004d18 <mem_free+0xd0>)
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8004ce8:	68f8      	ldr	r0, [r7, #12]
 8004cea:	f7ff fe97 	bl	8004a1c <plug_holes>
 8004cee:	e000      	b.n	8004cf2 <mem_free+0xaa>
    return;
 8004cf0:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8004cf2:	3710      	adds	r7, #16
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}
 8004cf8:	0801193c 	.word	0x0801193c
 8004cfc:	08011a10 	.word	0x08011a10
 8004d00:	08011984 	.word	0x08011984
 8004d04:	20004d30 	.word	0x20004d30
 8004d08:	20004d34 	.word	0x20004d34
 8004d0c:	08011a34 	.word	0x08011a34
 8004d10:	08011a50 	.word	0x08011a50
 8004d14:	08011a78 	.word	0x08011a78
 8004d18:	20004d38 	.word	0x20004d38

08004d1c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b088      	sub	sp, #32
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
 8004d24:	460b      	mov	r3, r1
 8004d26:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8004d28:	887b      	ldrh	r3, [r7, #2]
 8004d2a:	3303      	adds	r3, #3
 8004d2c:	b29b      	uxth	r3, r3
 8004d2e:	f023 0303 	bic.w	r3, r3, #3
 8004d32:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8004d34:	8bfb      	ldrh	r3, [r7, #30]
 8004d36:	2b0b      	cmp	r3, #11
 8004d38:	d801      	bhi.n	8004d3e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8004d3a:	230c      	movs	r3, #12
 8004d3c:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8004d3e:	8bfb      	ldrh	r3, [r7, #30]
 8004d40:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004d44:	d803      	bhi.n	8004d4e <mem_trim+0x32>
 8004d46:	8bfa      	ldrh	r2, [r7, #30]
 8004d48:	887b      	ldrh	r3, [r7, #2]
 8004d4a:	429a      	cmp	r2, r3
 8004d4c:	d201      	bcs.n	8004d52 <mem_trim+0x36>
    return NULL;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	e0cc      	b.n	8004eec <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8004d52:	4b68      	ldr	r3, [pc, #416]	; (8004ef4 <mem_trim+0x1d8>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	429a      	cmp	r2, r3
 8004d5a:	d304      	bcc.n	8004d66 <mem_trim+0x4a>
 8004d5c:	4b66      	ldr	r3, [pc, #408]	; (8004ef8 <mem_trim+0x1dc>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	687a      	ldr	r2, [r7, #4]
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d306      	bcc.n	8004d74 <mem_trim+0x58>
 8004d66:	4b65      	ldr	r3, [pc, #404]	; (8004efc <mem_trim+0x1e0>)
 8004d68:	f240 22d1 	movw	r2, #721	; 0x2d1
 8004d6c:	4964      	ldr	r1, [pc, #400]	; (8004f00 <mem_trim+0x1e4>)
 8004d6e:	4865      	ldr	r0, [pc, #404]	; (8004f04 <mem_trim+0x1e8>)
 8004d70:	f00b fcda 	bl	8010728 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8004d74:	4b5f      	ldr	r3, [pc, #380]	; (8004ef4 <mem_trim+0x1d8>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	687a      	ldr	r2, [r7, #4]
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	d304      	bcc.n	8004d88 <mem_trim+0x6c>
 8004d7e:	4b5e      	ldr	r3, [pc, #376]	; (8004ef8 <mem_trim+0x1dc>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d301      	bcc.n	8004d8c <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	e0af      	b.n	8004eec <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	3b08      	subs	r3, #8
 8004d90:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8004d92:	69b8      	ldr	r0, [r7, #24]
 8004d94:	f7ff fe30 	bl	80049f8 <mem_to_ptr>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8004d9c:	69bb      	ldr	r3, [r7, #24]
 8004d9e:	881a      	ldrh	r2, [r3, #0]
 8004da0:	8afb      	ldrh	r3, [r7, #22]
 8004da2:	1ad3      	subs	r3, r2, r3
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	3b08      	subs	r3, #8
 8004da8:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8004daa:	8bfa      	ldrh	r2, [r7, #30]
 8004dac:	8abb      	ldrh	r3, [r7, #20]
 8004dae:	429a      	cmp	r2, r3
 8004db0:	d906      	bls.n	8004dc0 <mem_trim+0xa4>
 8004db2:	4b52      	ldr	r3, [pc, #328]	; (8004efc <mem_trim+0x1e0>)
 8004db4:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8004db8:	4953      	ldr	r1, [pc, #332]	; (8004f08 <mem_trim+0x1ec>)
 8004dba:	4852      	ldr	r0, [pc, #328]	; (8004f04 <mem_trim+0x1e8>)
 8004dbc:	f00b fcb4 	bl	8010728 <iprintf>
  if (newsize > size) {
 8004dc0:	8bfa      	ldrh	r2, [r7, #30]
 8004dc2:	8abb      	ldrh	r3, [r7, #20]
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	d901      	bls.n	8004dcc <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	e08f      	b.n	8004eec <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8004dcc:	8bfa      	ldrh	r2, [r7, #30]
 8004dce:	8abb      	ldrh	r3, [r7, #20]
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d101      	bne.n	8004dd8 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	e089      	b.n	8004eec <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8004dd8:	69bb      	ldr	r3, [r7, #24]
 8004dda:	881b      	ldrh	r3, [r3, #0]
 8004ddc:	4618      	mov	r0, r3
 8004dde:	f7ff fdf9 	bl	80049d4 <ptr_to_mem>
 8004de2:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	791b      	ldrb	r3, [r3, #4]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d13f      	bne.n	8004e6c <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8004dec:	69bb      	ldr	r3, [r7, #24]
 8004dee:	881b      	ldrh	r3, [r3, #0]
 8004df0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004df4:	d106      	bne.n	8004e04 <mem_trim+0xe8>
 8004df6:	4b41      	ldr	r3, [pc, #260]	; (8004efc <mem_trim+0x1e0>)
 8004df8:	f240 22f5 	movw	r2, #757	; 0x2f5
 8004dfc:	4943      	ldr	r1, [pc, #268]	; (8004f0c <mem_trim+0x1f0>)
 8004dfe:	4841      	ldr	r0, [pc, #260]	; (8004f04 <mem_trim+0x1e8>)
 8004e00:	f00b fc92 	bl	8010728 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	881b      	ldrh	r3, [r3, #0]
 8004e08:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8004e0a:	8afa      	ldrh	r2, [r7, #22]
 8004e0c:	8bfb      	ldrh	r3, [r7, #30]
 8004e0e:	4413      	add	r3, r2
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	3308      	adds	r3, #8
 8004e14:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8004e16:	4b3e      	ldr	r3, [pc, #248]	; (8004f10 <mem_trim+0x1f4>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	693a      	ldr	r2, [r7, #16]
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d106      	bne.n	8004e2e <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8004e20:	89fb      	ldrh	r3, [r7, #14]
 8004e22:	4618      	mov	r0, r3
 8004e24:	f7ff fdd6 	bl	80049d4 <ptr_to_mem>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	4a39      	ldr	r2, [pc, #228]	; (8004f10 <mem_trim+0x1f4>)
 8004e2c:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8004e2e:	89fb      	ldrh	r3, [r7, #14]
 8004e30:	4618      	mov	r0, r3
 8004e32:	f7ff fdcf 	bl	80049d4 <ptr_to_mem>
 8004e36:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	89ba      	ldrh	r2, [r7, #12]
 8004e42:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	8afa      	ldrh	r2, [r7, #22]
 8004e48:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8004e4a:	69bb      	ldr	r3, [r7, #24]
 8004e4c:	89fa      	ldrh	r2, [r7, #14]
 8004e4e:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	881b      	ldrh	r3, [r3, #0]
 8004e54:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004e58:	d047      	beq.n	8004eea <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	881b      	ldrh	r3, [r3, #0]
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f7ff fdb8 	bl	80049d4 <ptr_to_mem>
 8004e64:	4602      	mov	r2, r0
 8004e66:	89fb      	ldrh	r3, [r7, #14]
 8004e68:	8053      	strh	r3, [r2, #2]
 8004e6a:	e03e      	b.n	8004eea <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8004e6c:	8bfb      	ldrh	r3, [r7, #30]
 8004e6e:	f103 0214 	add.w	r2, r3, #20
 8004e72:	8abb      	ldrh	r3, [r7, #20]
 8004e74:	429a      	cmp	r2, r3
 8004e76:	d838      	bhi.n	8004eea <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8004e78:	8afa      	ldrh	r2, [r7, #22]
 8004e7a:	8bfb      	ldrh	r3, [r7, #30]
 8004e7c:	4413      	add	r3, r2
 8004e7e:	b29b      	uxth	r3, r3
 8004e80:	3308      	adds	r3, #8
 8004e82:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8004e84:	69bb      	ldr	r3, [r7, #24]
 8004e86:	881b      	ldrh	r3, [r3, #0]
 8004e88:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004e8c:	d106      	bne.n	8004e9c <mem_trim+0x180>
 8004e8e:	4b1b      	ldr	r3, [pc, #108]	; (8004efc <mem_trim+0x1e0>)
 8004e90:	f240 3216 	movw	r2, #790	; 0x316
 8004e94:	491d      	ldr	r1, [pc, #116]	; (8004f0c <mem_trim+0x1f0>)
 8004e96:	481b      	ldr	r0, [pc, #108]	; (8004f04 <mem_trim+0x1e8>)
 8004e98:	f00b fc46 	bl	8010728 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8004e9c:	89fb      	ldrh	r3, [r7, #14]
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f7ff fd98 	bl	80049d4 <ptr_to_mem>
 8004ea4:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8004ea6:	4b1a      	ldr	r3, [pc, #104]	; (8004f10 <mem_trim+0x1f4>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	693a      	ldr	r2, [r7, #16]
 8004eac:	429a      	cmp	r2, r3
 8004eae:	d202      	bcs.n	8004eb6 <mem_trim+0x19a>
      lfree = mem2;
 8004eb0:	4a17      	ldr	r2, [pc, #92]	; (8004f10 <mem_trim+0x1f4>)
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8004ebc:	69bb      	ldr	r3, [r7, #24]
 8004ebe:	881a      	ldrh	r2, [r3, #0]
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	8afa      	ldrh	r2, [r7, #22]
 8004ec8:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8004eca:	69bb      	ldr	r3, [r7, #24]
 8004ecc:	89fa      	ldrh	r2, [r7, #14]
 8004ece:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	881b      	ldrh	r3, [r3, #0]
 8004ed4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004ed8:	d007      	beq.n	8004eea <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	881b      	ldrh	r3, [r3, #0]
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f7ff fd78 	bl	80049d4 <ptr_to_mem>
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	89fb      	ldrh	r3, [r7, #14]
 8004ee8:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8004eea:	687b      	ldr	r3, [r7, #4]
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	3720      	adds	r7, #32
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}
 8004ef4:	20004d30 	.word	0x20004d30
 8004ef8:	20004d34 	.word	0x20004d34
 8004efc:	0801193c 	.word	0x0801193c
 8004f00:	08011aac 	.word	0x08011aac
 8004f04:	08011984 	.word	0x08011984
 8004f08:	08011ac4 	.word	0x08011ac4
 8004f0c:	08011ae4 	.word	0x08011ae4
 8004f10:	20004d38 	.word	0x20004d38

08004f14 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b088      	sub	sp, #32
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8004f1e:	88fb      	ldrh	r3, [r7, #6]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d101      	bne.n	8004f28 <mem_malloc+0x14>
    return NULL;
 8004f24:	2300      	movs	r3, #0
 8004f26:	e0d9      	b.n	80050dc <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8004f28:	88fb      	ldrh	r3, [r7, #6]
 8004f2a:	3303      	adds	r3, #3
 8004f2c:	b29b      	uxth	r3, r3
 8004f2e:	f023 0303 	bic.w	r3, r3, #3
 8004f32:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8004f34:	8bbb      	ldrh	r3, [r7, #28]
 8004f36:	2b0b      	cmp	r3, #11
 8004f38:	d801      	bhi.n	8004f3e <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8004f3a:	230c      	movs	r3, #12
 8004f3c:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8004f3e:	8bbb      	ldrh	r3, [r7, #28]
 8004f40:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004f44:	d803      	bhi.n	8004f4e <mem_malloc+0x3a>
 8004f46:	8bba      	ldrh	r2, [r7, #28]
 8004f48:	88fb      	ldrh	r3, [r7, #6]
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	d201      	bcs.n	8004f52 <mem_malloc+0x3e>
    return NULL;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	e0c4      	b.n	80050dc <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8004f52:	4b64      	ldr	r3, [pc, #400]	; (80050e4 <mem_malloc+0x1d0>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4618      	mov	r0, r3
 8004f58:	f7ff fd4e 	bl	80049f8 <mem_to_ptr>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	83fb      	strh	r3, [r7, #30]
 8004f60:	e0b4      	b.n	80050cc <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8004f62:	8bfb      	ldrh	r3, [r7, #30]
 8004f64:	4618      	mov	r0, r3
 8004f66:	f7ff fd35 	bl	80049d4 <ptr_to_mem>
 8004f6a:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	791b      	ldrb	r3, [r3, #4]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	f040 80a4 	bne.w	80050be <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	881b      	ldrh	r3, [r3, #0]
 8004f7a:	461a      	mov	r2, r3
 8004f7c:	8bfb      	ldrh	r3, [r7, #30]
 8004f7e:	1ad3      	subs	r3, r2, r3
 8004f80:	f1a3 0208 	sub.w	r2, r3, #8
 8004f84:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8004f86:	429a      	cmp	r2, r3
 8004f88:	f0c0 8099 	bcc.w	80050be <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	881b      	ldrh	r3, [r3, #0]
 8004f90:	461a      	mov	r2, r3
 8004f92:	8bfb      	ldrh	r3, [r7, #30]
 8004f94:	1ad3      	subs	r3, r2, r3
 8004f96:	f1a3 0208 	sub.w	r2, r3, #8
 8004f9a:	8bbb      	ldrh	r3, [r7, #28]
 8004f9c:	3314      	adds	r3, #20
 8004f9e:	429a      	cmp	r2, r3
 8004fa0:	d333      	bcc.n	800500a <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8004fa2:	8bfa      	ldrh	r2, [r7, #30]
 8004fa4:	8bbb      	ldrh	r3, [r7, #28]
 8004fa6:	4413      	add	r3, r2
 8004fa8:	b29b      	uxth	r3, r3
 8004faa:	3308      	adds	r3, #8
 8004fac:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8004fae:	8a7b      	ldrh	r3, [r7, #18]
 8004fb0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004fb4:	d106      	bne.n	8004fc4 <mem_malloc+0xb0>
 8004fb6:	4b4c      	ldr	r3, [pc, #304]	; (80050e8 <mem_malloc+0x1d4>)
 8004fb8:	f240 3287 	movw	r2, #903	; 0x387
 8004fbc:	494b      	ldr	r1, [pc, #300]	; (80050ec <mem_malloc+0x1d8>)
 8004fbe:	484c      	ldr	r0, [pc, #304]	; (80050f0 <mem_malloc+0x1dc>)
 8004fc0:	f00b fbb2 	bl	8010728 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8004fc4:	8a7b      	ldrh	r3, [r7, #18]
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f7ff fd04 	bl	80049d4 <ptr_to_mem>
 8004fcc:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	881a      	ldrh	r2, [r3, #0]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	8bfa      	ldrh	r2, [r7, #30]
 8004fe0:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	8a7a      	ldrh	r2, [r7, #18]
 8004fe6:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	2201      	movs	r2, #1
 8004fec:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	881b      	ldrh	r3, [r3, #0]
 8004ff2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004ff6:	d00b      	beq.n	8005010 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	881b      	ldrh	r3, [r3, #0]
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	f7ff fce9 	bl	80049d4 <ptr_to_mem>
 8005002:	4602      	mov	r2, r0
 8005004:	8a7b      	ldrh	r3, [r7, #18]
 8005006:	8053      	strh	r3, [r2, #2]
 8005008:	e002      	b.n	8005010 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	2201      	movs	r2, #1
 800500e:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8005010:	4b34      	ldr	r3, [pc, #208]	; (80050e4 <mem_malloc+0x1d0>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	697a      	ldr	r2, [r7, #20]
 8005016:	429a      	cmp	r2, r3
 8005018:	d127      	bne.n	800506a <mem_malloc+0x156>
          struct mem *cur = lfree;
 800501a:	4b32      	ldr	r3, [pc, #200]	; (80050e4 <mem_malloc+0x1d0>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8005020:	e005      	b.n	800502e <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8005022:	69bb      	ldr	r3, [r7, #24]
 8005024:	881b      	ldrh	r3, [r3, #0]
 8005026:	4618      	mov	r0, r3
 8005028:	f7ff fcd4 	bl	80049d4 <ptr_to_mem>
 800502c:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800502e:	69bb      	ldr	r3, [r7, #24]
 8005030:	791b      	ldrb	r3, [r3, #4]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d004      	beq.n	8005040 <mem_malloc+0x12c>
 8005036:	4b2f      	ldr	r3, [pc, #188]	; (80050f4 <mem_malloc+0x1e0>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	69ba      	ldr	r2, [r7, #24]
 800503c:	429a      	cmp	r2, r3
 800503e:	d1f0      	bne.n	8005022 <mem_malloc+0x10e>
          }
          lfree = cur;
 8005040:	4a28      	ldr	r2, [pc, #160]	; (80050e4 <mem_malloc+0x1d0>)
 8005042:	69bb      	ldr	r3, [r7, #24]
 8005044:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8005046:	4b27      	ldr	r3, [pc, #156]	; (80050e4 <mem_malloc+0x1d0>)
 8005048:	681a      	ldr	r2, [r3, #0]
 800504a:	4b2a      	ldr	r3, [pc, #168]	; (80050f4 <mem_malloc+0x1e0>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	429a      	cmp	r2, r3
 8005050:	d00b      	beq.n	800506a <mem_malloc+0x156>
 8005052:	4b24      	ldr	r3, [pc, #144]	; (80050e4 <mem_malloc+0x1d0>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	791b      	ldrb	r3, [r3, #4]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d006      	beq.n	800506a <mem_malloc+0x156>
 800505c:	4b22      	ldr	r3, [pc, #136]	; (80050e8 <mem_malloc+0x1d4>)
 800505e:	f240 32b5 	movw	r2, #949	; 0x3b5
 8005062:	4925      	ldr	r1, [pc, #148]	; (80050f8 <mem_malloc+0x1e4>)
 8005064:	4822      	ldr	r0, [pc, #136]	; (80050f0 <mem_malloc+0x1dc>)
 8005066:	f00b fb5f 	bl	8010728 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800506a:	8bba      	ldrh	r2, [r7, #28]
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	4413      	add	r3, r2
 8005070:	3308      	adds	r3, #8
 8005072:	4a20      	ldr	r2, [pc, #128]	; (80050f4 <mem_malloc+0x1e0>)
 8005074:	6812      	ldr	r2, [r2, #0]
 8005076:	4293      	cmp	r3, r2
 8005078:	d906      	bls.n	8005088 <mem_malloc+0x174>
 800507a:	4b1b      	ldr	r3, [pc, #108]	; (80050e8 <mem_malloc+0x1d4>)
 800507c:	f240 32b9 	movw	r2, #953	; 0x3b9
 8005080:	491e      	ldr	r1, [pc, #120]	; (80050fc <mem_malloc+0x1e8>)
 8005082:	481b      	ldr	r0, [pc, #108]	; (80050f0 <mem_malloc+0x1dc>)
 8005084:	f00b fb50 	bl	8010728 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	f003 0303 	and.w	r3, r3, #3
 800508e:	2b00      	cmp	r3, #0
 8005090:	d006      	beq.n	80050a0 <mem_malloc+0x18c>
 8005092:	4b15      	ldr	r3, [pc, #84]	; (80050e8 <mem_malloc+0x1d4>)
 8005094:	f240 32bb 	movw	r2, #955	; 0x3bb
 8005098:	4919      	ldr	r1, [pc, #100]	; (8005100 <mem_malloc+0x1ec>)
 800509a:	4815      	ldr	r0, [pc, #84]	; (80050f0 <mem_malloc+0x1dc>)
 800509c:	f00b fb44 	bl	8010728 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	f003 0303 	and.w	r3, r3, #3
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d006      	beq.n	80050b8 <mem_malloc+0x1a4>
 80050aa:	4b0f      	ldr	r3, [pc, #60]	; (80050e8 <mem_malloc+0x1d4>)
 80050ac:	f240 32bd 	movw	r2, #957	; 0x3bd
 80050b0:	4914      	ldr	r1, [pc, #80]	; (8005104 <mem_malloc+0x1f0>)
 80050b2:	480f      	ldr	r0, [pc, #60]	; (80050f0 <mem_malloc+0x1dc>)
 80050b4:	f00b fb38 	bl	8010728 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	3308      	adds	r3, #8
 80050bc:	e00e      	b.n	80050dc <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 80050be:	8bfb      	ldrh	r3, [r7, #30]
 80050c0:	4618      	mov	r0, r3
 80050c2:	f7ff fc87 	bl	80049d4 <ptr_to_mem>
 80050c6:	4603      	mov	r3, r0
 80050c8:	881b      	ldrh	r3, [r3, #0]
 80050ca:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80050cc:	8bfa      	ldrh	r2, [r7, #30]
 80050ce:	8bbb      	ldrh	r3, [r7, #28]
 80050d0:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 80050d4:	429a      	cmp	r2, r3
 80050d6:	f4ff af44 	bcc.w	8004f62 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 80050da:	2300      	movs	r3, #0
}
 80050dc:	4618      	mov	r0, r3
 80050de:	3720      	adds	r7, #32
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}
 80050e4:	20004d38 	.word	0x20004d38
 80050e8:	0801193c 	.word	0x0801193c
 80050ec:	08011ae4 	.word	0x08011ae4
 80050f0:	08011984 	.word	0x08011984
 80050f4:	20004d34 	.word	0x20004d34
 80050f8:	08011af8 	.word	0x08011af8
 80050fc:	08011b14 	.word	0x08011b14
 8005100:	08011b44 	.word	0x08011b44
 8005104:	08011b74 	.word	0x08011b74

08005108 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8005108:	b480      	push	{r7}
 800510a:	b085      	sub	sp, #20
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	2200      	movs	r2, #0
 8005116:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	3303      	adds	r3, #3
 800511e:	f023 0303 	bic.w	r3, r3, #3
 8005122:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8005124:	2300      	movs	r3, #0
 8005126:	60fb      	str	r3, [r7, #12]
 8005128:	e011      	b.n	800514e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	689b      	ldr	r3, [r3, #8]
 8005138:	68ba      	ldr	r2, [r7, #8]
 800513a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	881b      	ldrh	r3, [r3, #0]
 8005140:	461a      	mov	r2, r3
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	4413      	add	r3, r2
 8005146:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	3301      	adds	r3, #1
 800514c:	60fb      	str	r3, [r7, #12]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	885b      	ldrh	r3, [r3, #2]
 8005152:	461a      	mov	r2, r3
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	4293      	cmp	r3, r2
 8005158:	dbe7      	blt.n	800512a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800515a:	bf00      	nop
 800515c:	bf00      	nop
 800515e:	3714      	adds	r7, #20
 8005160:	46bd      	mov	sp, r7
 8005162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005166:	4770      	bx	lr

08005168 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b082      	sub	sp, #8
 800516c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800516e:	2300      	movs	r3, #0
 8005170:	80fb      	strh	r3, [r7, #6]
 8005172:	e009      	b.n	8005188 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8005174:	88fb      	ldrh	r3, [r7, #6]
 8005176:	4a08      	ldr	r2, [pc, #32]	; (8005198 <memp_init+0x30>)
 8005178:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800517c:	4618      	mov	r0, r3
 800517e:	f7ff ffc3 	bl	8005108 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8005182:	88fb      	ldrh	r3, [r7, #6]
 8005184:	3301      	adds	r3, #1
 8005186:	80fb      	strh	r3, [r7, #6]
 8005188:	88fb      	ldrh	r3, [r7, #6]
 800518a:	2b08      	cmp	r3, #8
 800518c:	d9f2      	bls.n	8005174 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800518e:	bf00      	nop
 8005190:	bf00      	nop
 8005192:	3708      	adds	r7, #8
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}
 8005198:	080146f8 	.word	0x080146f8

0800519c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b084      	sub	sp, #16
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d012      	beq.n	80051d8 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	68fa      	ldr	r2, [r7, #12]
 80051b8:	6812      	ldr	r2, [r2, #0]
 80051ba:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f003 0303 	and.w	r3, r3, #3
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d006      	beq.n	80051d4 <do_memp_malloc_pool+0x38>
 80051c6:	4b07      	ldr	r3, [pc, #28]	; (80051e4 <do_memp_malloc_pool+0x48>)
 80051c8:	f44f 728c 	mov.w	r2, #280	; 0x118
 80051cc:	4906      	ldr	r1, [pc, #24]	; (80051e8 <do_memp_malloc_pool+0x4c>)
 80051ce:	4807      	ldr	r0, [pc, #28]	; (80051ec <do_memp_malloc_pool+0x50>)
 80051d0:	f00b faaa 	bl	8010728 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	e000      	b.n	80051da <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 80051d8:	2300      	movs	r3, #0
}
 80051da:	4618      	mov	r0, r3
 80051dc:	3710      	adds	r7, #16
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}
 80051e2:	bf00      	nop
 80051e4:	08011b98 	.word	0x08011b98
 80051e8:	08011bc8 	.word	0x08011bc8
 80051ec:	08011bec 	.word	0x08011bec

080051f0 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b082      	sub	sp, #8
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d106      	bne.n	800520c <memp_malloc_pool+0x1c>
 80051fe:	4b0a      	ldr	r3, [pc, #40]	; (8005228 <memp_malloc_pool+0x38>)
 8005200:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8005204:	4909      	ldr	r1, [pc, #36]	; (800522c <memp_malloc_pool+0x3c>)
 8005206:	480a      	ldr	r0, [pc, #40]	; (8005230 <memp_malloc_pool+0x40>)
 8005208:	f00b fa8e 	bl	8010728 <iprintf>
  if (desc == NULL) {
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d101      	bne.n	8005216 <memp_malloc_pool+0x26>
    return NULL;
 8005212:	2300      	movs	r3, #0
 8005214:	e003      	b.n	800521e <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f7ff ffc0 	bl	800519c <do_memp_malloc_pool>
 800521c:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800521e:	4618      	mov	r0, r3
 8005220:	3708      	adds	r7, #8
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}
 8005226:	bf00      	nop
 8005228:	08011b98 	.word	0x08011b98
 800522c:	08011c14 	.word	0x08011c14
 8005230:	08011bec 	.word	0x08011bec

08005234 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b084      	sub	sp, #16
 8005238:	af00      	add	r7, sp, #0
 800523a:	4603      	mov	r3, r0
 800523c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800523e:	79fb      	ldrb	r3, [r7, #7]
 8005240:	2b08      	cmp	r3, #8
 8005242:	d908      	bls.n	8005256 <memp_malloc+0x22>
 8005244:	4b0a      	ldr	r3, [pc, #40]	; (8005270 <memp_malloc+0x3c>)
 8005246:	f240 1257 	movw	r2, #343	; 0x157
 800524a:	490a      	ldr	r1, [pc, #40]	; (8005274 <memp_malloc+0x40>)
 800524c:	480a      	ldr	r0, [pc, #40]	; (8005278 <memp_malloc+0x44>)
 800524e:	f00b fa6b 	bl	8010728 <iprintf>
 8005252:	2300      	movs	r3, #0
 8005254:	e008      	b.n	8005268 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8005256:	79fb      	ldrb	r3, [r7, #7]
 8005258:	4a08      	ldr	r2, [pc, #32]	; (800527c <memp_malloc+0x48>)
 800525a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800525e:	4618      	mov	r0, r3
 8005260:	f7ff ff9c 	bl	800519c <do_memp_malloc_pool>
 8005264:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8005266:	68fb      	ldr	r3, [r7, #12]
}
 8005268:	4618      	mov	r0, r3
 800526a:	3710      	adds	r7, #16
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}
 8005270:	08011b98 	.word	0x08011b98
 8005274:	08011c28 	.word	0x08011c28
 8005278:	08011bec 	.word	0x08011bec
 800527c:	080146f8 	.word	0x080146f8

08005280 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b084      	sub	sp, #16
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
 8005288:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	f003 0303 	and.w	r3, r3, #3
 8005290:	2b00      	cmp	r3, #0
 8005292:	d006      	beq.n	80052a2 <do_memp_free_pool+0x22>
 8005294:	4b0a      	ldr	r3, [pc, #40]	; (80052c0 <do_memp_free_pool+0x40>)
 8005296:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800529a:	490a      	ldr	r1, [pc, #40]	; (80052c4 <do_memp_free_pool+0x44>)
 800529c:	480a      	ldr	r0, [pc, #40]	; (80052c8 <do_memp_free_pool+0x48>)
 800529e:	f00b fa43 	bl	8010728 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	681a      	ldr	r2, [r3, #0]
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	689b      	ldr	r3, [r3, #8]
 80052b4:	68fa      	ldr	r2, [r7, #12]
 80052b6:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 80052b8:	bf00      	nop
 80052ba:	3710      	adds	r7, #16
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}
 80052c0:	08011b98 	.word	0x08011b98
 80052c4:	08011c48 	.word	0x08011c48
 80052c8:	08011bec 	.word	0x08011bec

080052cc <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b082      	sub	sp, #8
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
 80052d4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d106      	bne.n	80052ea <memp_free_pool+0x1e>
 80052dc:	4b0a      	ldr	r3, [pc, #40]	; (8005308 <memp_free_pool+0x3c>)
 80052de:	f240 1295 	movw	r2, #405	; 0x195
 80052e2:	490a      	ldr	r1, [pc, #40]	; (800530c <memp_free_pool+0x40>)
 80052e4:	480a      	ldr	r0, [pc, #40]	; (8005310 <memp_free_pool+0x44>)
 80052e6:	f00b fa1f 	bl	8010728 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d007      	beq.n	8005300 <memp_free_pool+0x34>
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d004      	beq.n	8005300 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 80052f6:	6839      	ldr	r1, [r7, #0]
 80052f8:	6878      	ldr	r0, [r7, #4]
 80052fa:	f7ff ffc1 	bl	8005280 <do_memp_free_pool>
 80052fe:	e000      	b.n	8005302 <memp_free_pool+0x36>
    return;
 8005300:	bf00      	nop
}
 8005302:	3708      	adds	r7, #8
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}
 8005308:	08011b98 	.word	0x08011b98
 800530c:	08011c14 	.word	0x08011c14
 8005310:	08011bec 	.word	0x08011bec

08005314 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b082      	sub	sp, #8
 8005318:	af00      	add	r7, sp, #0
 800531a:	4603      	mov	r3, r0
 800531c:	6039      	str	r1, [r7, #0]
 800531e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8005320:	79fb      	ldrb	r3, [r7, #7]
 8005322:	2b08      	cmp	r3, #8
 8005324:	d907      	bls.n	8005336 <memp_free+0x22>
 8005326:	4b0c      	ldr	r3, [pc, #48]	; (8005358 <memp_free+0x44>)
 8005328:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800532c:	490b      	ldr	r1, [pc, #44]	; (800535c <memp_free+0x48>)
 800532e:	480c      	ldr	r0, [pc, #48]	; (8005360 <memp_free+0x4c>)
 8005330:	f00b f9fa 	bl	8010728 <iprintf>
 8005334:	e00c      	b.n	8005350 <memp_free+0x3c>

  if (mem == NULL) {
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d008      	beq.n	800534e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800533c:	79fb      	ldrb	r3, [r7, #7]
 800533e:	4a09      	ldr	r2, [pc, #36]	; (8005364 <memp_free+0x50>)
 8005340:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005344:	6839      	ldr	r1, [r7, #0]
 8005346:	4618      	mov	r0, r3
 8005348:	f7ff ff9a 	bl	8005280 <do_memp_free_pool>
 800534c:	e000      	b.n	8005350 <memp_free+0x3c>
    return;
 800534e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8005350:	3708      	adds	r7, #8
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}
 8005356:	bf00      	nop
 8005358:	08011b98 	.word	0x08011b98
 800535c:	08011c68 	.word	0x08011c68
 8005360:	08011bec 	.word	0x08011bec
 8005364:	080146f8 	.word	0x080146f8

08005368 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8005368:	b480      	push	{r7}
 800536a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800536c:	bf00      	nop
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr
	...

08005378 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b086      	sub	sp, #24
 800537c:	af00      	add	r7, sp, #0
 800537e:	60f8      	str	r0, [r7, #12]
 8005380:	60b9      	str	r1, [r7, #8]
 8005382:	607a      	str	r2, [r7, #4]
 8005384:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d108      	bne.n	800539e <netif_add+0x26>
 800538c:	4b5b      	ldr	r3, [pc, #364]	; (80054fc <netif_add+0x184>)
 800538e:	f240 1227 	movw	r2, #295	; 0x127
 8005392:	495b      	ldr	r1, [pc, #364]	; (8005500 <netif_add+0x188>)
 8005394:	485b      	ldr	r0, [pc, #364]	; (8005504 <netif_add+0x18c>)
 8005396:	f00b f9c7 	bl	8010728 <iprintf>
 800539a:	2300      	movs	r3, #0
 800539c:	e0a9      	b.n	80054f2 <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800539e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d108      	bne.n	80053b6 <netif_add+0x3e>
 80053a4:	4b55      	ldr	r3, [pc, #340]	; (80054fc <netif_add+0x184>)
 80053a6:	f44f 7294 	mov.w	r2, #296	; 0x128
 80053aa:	4957      	ldr	r1, [pc, #348]	; (8005508 <netif_add+0x190>)
 80053ac:	4855      	ldr	r0, [pc, #340]	; (8005504 <netif_add+0x18c>)
 80053ae:	f00b f9bb 	bl	8010728 <iprintf>
 80053b2:	2300      	movs	r3, #0
 80053b4:	e09d      	b.n	80054f2 <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d101      	bne.n	80053c0 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80053bc:	4b53      	ldr	r3, [pc, #332]	; (800550c <netif_add+0x194>)
 80053be:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d101      	bne.n	80053ca <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80053c6:	4b51      	ldr	r3, [pc, #324]	; (800550c <netif_add+0x194>)
 80053c8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d101      	bne.n	80053d4 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80053d0:	4b4e      	ldr	r3, [pc, #312]	; (800550c <netif_add+0x194>)
 80053d2:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	2200      	movs	r2, #0
 80053d8:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2200      	movs	r2, #0
 80053de:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	2200      	movs	r2, #0
 80053e4:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	4a49      	ldr	r2, [pc, #292]	; (8005510 <netif_add+0x198>)
 80053ea:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	2200      	movs	r2, #0
 80053f0:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2200      	movs	r2, #0
 80053f6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	3324      	adds	r3, #36	; 0x24
 80053fe:	2204      	movs	r2, #4
 8005400:	2100      	movs	r1, #0
 8005402:	4618      	mov	r0, r3
 8005404:	f00b f988 	bl	8010718 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2200      	movs	r2, #0
 800540c:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	6a3a      	ldr	r2, [r7, #32]
 8005412:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8005414:	4b3f      	ldr	r3, [pc, #252]	; (8005514 <netif_add+0x19c>)
 8005416:	781a      	ldrb	r2, [r3, #0]
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005422:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	687a      	ldr	r2, [r7, #4]
 8005428:	68b9      	ldr	r1, [r7, #8]
 800542a:	68f8      	ldr	r0, [r7, #12]
 800542c:	f000 f914 	bl	8005658 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8005430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005432:	68f8      	ldr	r0, [r7, #12]
 8005434:	4798      	blx	r3
 8005436:	4603      	mov	r3, r0
 8005438:	2b00      	cmp	r3, #0
 800543a:	d001      	beq.n	8005440 <netif_add+0xc8>
    return NULL;
 800543c:	2300      	movs	r3, #0
 800543e:	e058      	b.n	80054f2 <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005446:	2bff      	cmp	r3, #255	; 0xff
 8005448:	d103      	bne.n	8005452 <netif_add+0xda>
        netif->num = 0;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2200      	movs	r2, #0
 800544e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 8005452:	2300      	movs	r3, #0
 8005454:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8005456:	4b30      	ldr	r3, [pc, #192]	; (8005518 <netif_add+0x1a0>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	617b      	str	r3, [r7, #20]
 800545c:	e02b      	b.n	80054b6 <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800545e:	697a      	ldr	r2, [r7, #20]
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	429a      	cmp	r2, r3
 8005464:	d106      	bne.n	8005474 <netif_add+0xfc>
 8005466:	4b25      	ldr	r3, [pc, #148]	; (80054fc <netif_add+0x184>)
 8005468:	f240 128b 	movw	r2, #395	; 0x18b
 800546c:	492b      	ldr	r1, [pc, #172]	; (800551c <netif_add+0x1a4>)
 800546e:	4825      	ldr	r0, [pc, #148]	; (8005504 <netif_add+0x18c>)
 8005470:	f00b f95a 	bl	8010728 <iprintf>
        num_netifs++;
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	3301      	adds	r3, #1
 8005478:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	2bff      	cmp	r3, #255	; 0xff
 800547e:	dd06      	ble.n	800548e <netif_add+0x116>
 8005480:	4b1e      	ldr	r3, [pc, #120]	; (80054fc <netif_add+0x184>)
 8005482:	f240 128d 	movw	r2, #397	; 0x18d
 8005486:	4926      	ldr	r1, [pc, #152]	; (8005520 <netif_add+0x1a8>)
 8005488:	481e      	ldr	r0, [pc, #120]	; (8005504 <netif_add+0x18c>)
 800548a:	f00b f94d 	bl	8010728 <iprintf>
        if (netif2->num == netif->num) {
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800549a:	429a      	cmp	r2, r3
 800549c:	d108      	bne.n	80054b0 <netif_add+0x138>
          netif->num++;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80054a4:	3301      	adds	r3, #1
 80054a6:	b2da      	uxtb	r2, r3
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 80054ae:	e005      	b.n	80054bc <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	617b      	str	r3, [r7, #20]
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d1d0      	bne.n	800545e <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d1be      	bne.n	8005440 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80054c8:	2bfe      	cmp	r3, #254	; 0xfe
 80054ca:	d103      	bne.n	80054d4 <netif_add+0x15c>
    netif_num = 0;
 80054cc:	4b11      	ldr	r3, [pc, #68]	; (8005514 <netif_add+0x19c>)
 80054ce:	2200      	movs	r2, #0
 80054d0:	701a      	strb	r2, [r3, #0]
 80054d2:	e006      	b.n	80054e2 <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80054da:	3301      	adds	r3, #1
 80054dc:	b2da      	uxtb	r2, r3
 80054de:	4b0d      	ldr	r3, [pc, #52]	; (8005514 <netif_add+0x19c>)
 80054e0:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80054e2:	4b0d      	ldr	r3, [pc, #52]	; (8005518 <netif_add+0x1a0>)
 80054e4:	681a      	ldr	r2, [r3, #0]
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80054ea:	4a0b      	ldr	r2, [pc, #44]	; (8005518 <netif_add+0x1a0>)
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 80054f0:	68fb      	ldr	r3, [r7, #12]
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3718      	adds	r7, #24
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}
 80054fa:	bf00      	nop
 80054fc:	08011c84 	.word	0x08011c84
 8005500:	08011d18 	.word	0x08011d18
 8005504:	08011cd4 	.word	0x08011cd4
 8005508:	08011d34 	.word	0x08011d34
 800550c:	0801476c 	.word	0x0801476c
 8005510:	0800593b 	.word	0x0800593b
 8005514:	20007c50 	.word	0x20007c50
 8005518:	20007c48 	.word	0x20007c48
 800551c:	08011d58 	.word	0x08011d58
 8005520:	08011d6c 	.word	0x08011d6c

08005524 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b082      	sub	sp, #8
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
 800552c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800552e:	6839      	ldr	r1, [r7, #0]
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	f002 fb37 	bl	8007ba4 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8005536:	6839      	ldr	r1, [r7, #0]
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	f006 fedb 	bl	800c2f4 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800553e:	bf00      	nop
 8005540:	3708      	adds	r7, #8
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}
	...

08005548 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b086      	sub	sp, #24
 800554c:	af00      	add	r7, sp, #0
 800554e:	60f8      	str	r0, [r7, #12]
 8005550:	60b9      	str	r1, [r7, #8]
 8005552:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d106      	bne.n	8005568 <netif_do_set_ipaddr+0x20>
 800555a:	4b1d      	ldr	r3, [pc, #116]	; (80055d0 <netif_do_set_ipaddr+0x88>)
 800555c:	f240 12cb 	movw	r2, #459	; 0x1cb
 8005560:	491c      	ldr	r1, [pc, #112]	; (80055d4 <netif_do_set_ipaddr+0x8c>)
 8005562:	481d      	ldr	r0, [pc, #116]	; (80055d8 <netif_do_set_ipaddr+0x90>)
 8005564:	f00b f8e0 	bl	8010728 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d106      	bne.n	800557c <netif_do_set_ipaddr+0x34>
 800556e:	4b18      	ldr	r3, [pc, #96]	; (80055d0 <netif_do_set_ipaddr+0x88>)
 8005570:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8005574:	4917      	ldr	r1, [pc, #92]	; (80055d4 <netif_do_set_ipaddr+0x8c>)
 8005576:	4818      	ldr	r0, [pc, #96]	; (80055d8 <netif_do_set_ipaddr+0x90>)
 8005578:	f00b f8d6 	bl	8010728 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	681a      	ldr	r2, [r3, #0]
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	3304      	adds	r3, #4
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	429a      	cmp	r2, r3
 8005588:	d01c      	beq.n	80055c4 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	3304      	adds	r3, #4
 8005594:	681a      	ldr	r2, [r3, #0]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800559a:	f107 0314 	add.w	r3, r7, #20
 800559e:	4619      	mov	r1, r3
 80055a0:	6878      	ldr	r0, [r7, #4]
 80055a2:	f7ff ffbf 	bl	8005524 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d002      	beq.n	80055b2 <netif_do_set_ipaddr+0x6a>
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	e000      	b.n	80055b4 <netif_do_set_ipaddr+0x6c>
 80055b2:	2300      	movs	r3, #0
 80055b4:	68fa      	ldr	r2, [r7, #12]
 80055b6:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80055b8:	2101      	movs	r1, #1
 80055ba:	68f8      	ldr	r0, [r7, #12]
 80055bc:	f000 f8d2 	bl	8005764 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 80055c0:	2301      	movs	r3, #1
 80055c2:	e000      	b.n	80055c6 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 80055c4:	2300      	movs	r3, #0
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	3718      	adds	r7, #24
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}
 80055ce:	bf00      	nop
 80055d0:	08011c84 	.word	0x08011c84
 80055d4:	08011d9c 	.word	0x08011d9c
 80055d8:	08011cd4 	.word	0x08011cd4

080055dc <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 80055dc:	b480      	push	{r7}
 80055de:	b085      	sub	sp, #20
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	60f8      	str	r0, [r7, #12]
 80055e4:	60b9      	str	r1, [r7, #8]
 80055e6:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	3308      	adds	r3, #8
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	429a      	cmp	r2, r3
 80055f4:	d00a      	beq.n	800560c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d002      	beq.n	8005602 <netif_do_set_netmask+0x26>
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	e000      	b.n	8005604 <netif_do_set_netmask+0x28>
 8005602:	2300      	movs	r3, #0
 8005604:	68fa      	ldr	r2, [r7, #12]
 8005606:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8005608:	2301      	movs	r3, #1
 800560a:	e000      	b.n	800560e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800560c:	2300      	movs	r3, #0
}
 800560e:	4618      	mov	r0, r3
 8005610:	3714      	adds	r7, #20
 8005612:	46bd      	mov	sp, r7
 8005614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005618:	4770      	bx	lr

0800561a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800561a:	b480      	push	{r7}
 800561c:	b085      	sub	sp, #20
 800561e:	af00      	add	r7, sp, #0
 8005620:	60f8      	str	r0, [r7, #12]
 8005622:	60b9      	str	r1, [r7, #8]
 8005624:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	681a      	ldr	r2, [r3, #0]
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	330c      	adds	r3, #12
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	429a      	cmp	r2, r3
 8005632:	d00a      	beq.n	800564a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d002      	beq.n	8005640 <netif_do_set_gw+0x26>
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	e000      	b.n	8005642 <netif_do_set_gw+0x28>
 8005640:	2300      	movs	r3, #0
 8005642:	68fa      	ldr	r2, [r7, #12]
 8005644:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8005646:	2301      	movs	r3, #1
 8005648:	e000      	b.n	800564c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800564a:	2300      	movs	r3, #0
}
 800564c:	4618      	mov	r0, r3
 800564e:	3714      	adds	r7, #20
 8005650:	46bd      	mov	sp, r7
 8005652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005656:	4770      	bx	lr

08005658 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b088      	sub	sp, #32
 800565c:	af00      	add	r7, sp, #0
 800565e:	60f8      	str	r0, [r7, #12]
 8005660:	60b9      	str	r1, [r7, #8]
 8005662:	607a      	str	r2, [r7, #4]
 8005664:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8005666:	2300      	movs	r3, #0
 8005668:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800566a:	2300      	movs	r3, #0
 800566c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d101      	bne.n	8005678 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8005674:	4b1c      	ldr	r3, [pc, #112]	; (80056e8 <netif_set_addr+0x90>)
 8005676:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d101      	bne.n	8005682 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800567e:	4b1a      	ldr	r3, [pc, #104]	; (80056e8 <netif_set_addr+0x90>)
 8005680:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d101      	bne.n	800568c <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8005688:	4b17      	ldr	r3, [pc, #92]	; (80056e8 <netif_set_addr+0x90>)
 800568a:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d003      	beq.n	800569a <netif_set_addr+0x42>
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d101      	bne.n	800569e <netif_set_addr+0x46>
 800569a:	2301      	movs	r3, #1
 800569c:	e000      	b.n	80056a0 <netif_set_addr+0x48>
 800569e:	2300      	movs	r3, #0
 80056a0:	617b      	str	r3, [r7, #20]
  if (remove) {
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d006      	beq.n	80056b6 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80056a8:	f107 0310 	add.w	r3, r7, #16
 80056ac:	461a      	mov	r2, r3
 80056ae:	68b9      	ldr	r1, [r7, #8]
 80056b0:	68f8      	ldr	r0, [r7, #12]
 80056b2:	f7ff ff49 	bl	8005548 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 80056b6:	69fa      	ldr	r2, [r7, #28]
 80056b8:	6879      	ldr	r1, [r7, #4]
 80056ba:	68f8      	ldr	r0, [r7, #12]
 80056bc:	f7ff ff8e 	bl	80055dc <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80056c0:	69ba      	ldr	r2, [r7, #24]
 80056c2:	6839      	ldr	r1, [r7, #0]
 80056c4:	68f8      	ldr	r0, [r7, #12]
 80056c6:	f7ff ffa8 	bl	800561a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d106      	bne.n	80056de <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80056d0:	f107 0310 	add.w	r3, r7, #16
 80056d4:	461a      	mov	r2, r3
 80056d6:	68b9      	ldr	r1, [r7, #8]
 80056d8:	68f8      	ldr	r0, [r7, #12]
 80056da:	f7ff ff35 	bl	8005548 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 80056de:	bf00      	nop
 80056e0:	3720      	adds	r7, #32
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}
 80056e6:	bf00      	nop
 80056e8:	0801476c 	.word	0x0801476c

080056ec <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b083      	sub	sp, #12
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 80056f4:	4a04      	ldr	r2, [pc, #16]	; (8005708 <netif_set_default+0x1c>)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 80056fa:	bf00      	nop
 80056fc:	370c      	adds	r7, #12
 80056fe:	46bd      	mov	sp, r7
 8005700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005704:	4770      	bx	lr
 8005706:	bf00      	nop
 8005708:	20007c4c 	.word	0x20007c4c

0800570c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b082      	sub	sp, #8
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d107      	bne.n	800572a <netif_set_up+0x1e>
 800571a:	4b0f      	ldr	r3, [pc, #60]	; (8005758 <netif_set_up+0x4c>)
 800571c:	f44f 7254 	mov.w	r2, #848	; 0x350
 8005720:	490e      	ldr	r1, [pc, #56]	; (800575c <netif_set_up+0x50>)
 8005722:	480f      	ldr	r0, [pc, #60]	; (8005760 <netif_set_up+0x54>)
 8005724:	f00b f800 	bl	8010728 <iprintf>
 8005728:	e013      	b.n	8005752 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005730:	f003 0301 	and.w	r3, r3, #1
 8005734:	2b00      	cmp	r3, #0
 8005736:	d10c      	bne.n	8005752 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800573e:	f043 0301 	orr.w	r3, r3, #1
 8005742:	b2da      	uxtb	r2, r3
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800574a:	2103      	movs	r1, #3
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f000 f809 	bl	8005764 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8005752:	3708      	adds	r7, #8
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}
 8005758:	08011c84 	.word	0x08011c84
 800575c:	08011e0c 	.word	0x08011e0c
 8005760:	08011cd4 	.word	0x08011cd4

08005764 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b082      	sub	sp, #8
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
 800576c:	460b      	mov	r3, r1
 800576e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d106      	bne.n	8005784 <netif_issue_reports+0x20>
 8005776:	4b18      	ldr	r3, [pc, #96]	; (80057d8 <netif_issue_reports+0x74>)
 8005778:	f240 326d 	movw	r2, #877	; 0x36d
 800577c:	4917      	ldr	r1, [pc, #92]	; (80057dc <netif_issue_reports+0x78>)
 800577e:	4818      	ldr	r0, [pc, #96]	; (80057e0 <netif_issue_reports+0x7c>)
 8005780:	f00a ffd2 	bl	8010728 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800578a:	f003 0304 	and.w	r3, r3, #4
 800578e:	2b00      	cmp	r3, #0
 8005790:	d01e      	beq.n	80057d0 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005798:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800579c:	2b00      	cmp	r3, #0
 800579e:	d017      	beq.n	80057d0 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80057a0:	78fb      	ldrb	r3, [r7, #3]
 80057a2:	f003 0301 	and.w	r3, r3, #1
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d013      	beq.n	80057d2 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	3304      	adds	r3, #4
 80057ae:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d00e      	beq.n	80057d2 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80057ba:	f003 0308 	and.w	r3, r3, #8
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d007      	beq.n	80057d2 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	3304      	adds	r3, #4
 80057c6:	4619      	mov	r1, r3
 80057c8:	6878      	ldr	r0, [r7, #4]
 80057ca:	f009 fb93 	bl	800eef4 <etharp_request>
 80057ce:	e000      	b.n	80057d2 <netif_issue_reports+0x6e>
    return;
 80057d0:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 80057d2:	3708      	adds	r7, #8
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bd80      	pop	{r7, pc}
 80057d8:	08011c84 	.word	0x08011c84
 80057dc:	08011e28 	.word	0x08011e28
 80057e0:	08011cd4 	.word	0x08011cd4

080057e4 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b082      	sub	sp, #8
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d107      	bne.n	8005802 <netif_set_down+0x1e>
 80057f2:	4b12      	ldr	r3, [pc, #72]	; (800583c <netif_set_down+0x58>)
 80057f4:	f240 329b 	movw	r2, #923	; 0x39b
 80057f8:	4911      	ldr	r1, [pc, #68]	; (8005840 <netif_set_down+0x5c>)
 80057fa:	4812      	ldr	r0, [pc, #72]	; (8005844 <netif_set_down+0x60>)
 80057fc:	f00a ff94 	bl	8010728 <iprintf>
 8005800:	e019      	b.n	8005836 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005808:	f003 0301 	and.w	r3, r3, #1
 800580c:	2b00      	cmp	r3, #0
 800580e:	d012      	beq.n	8005836 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005816:	f023 0301 	bic.w	r3, r3, #1
 800581a:	b2da      	uxtb	r2, r3
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005828:	f003 0308 	and.w	r3, r3, #8
 800582c:	2b00      	cmp	r3, #0
 800582e:	d002      	beq.n	8005836 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f008 ff19 	bl	800e668 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8005836:	3708      	adds	r7, #8
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}
 800583c:	08011c84 	.word	0x08011c84
 8005840:	08011e4c 	.word	0x08011e4c
 8005844:	08011cd4 	.word	0x08011cd4

08005848 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b082      	sub	sp, #8
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d107      	bne.n	8005866 <netif_set_link_up+0x1e>
 8005856:	4b15      	ldr	r3, [pc, #84]	; (80058ac <netif_set_link_up+0x64>)
 8005858:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800585c:	4914      	ldr	r1, [pc, #80]	; (80058b0 <netif_set_link_up+0x68>)
 800585e:	4815      	ldr	r0, [pc, #84]	; (80058b4 <netif_set_link_up+0x6c>)
 8005860:	f00a ff62 	bl	8010728 <iprintf>
 8005864:	e01e      	b.n	80058a4 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800586c:	f003 0304 	and.w	r3, r3, #4
 8005870:	2b00      	cmp	r3, #0
 8005872:	d117      	bne.n	80058a4 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800587a:	f043 0304 	orr.w	r3, r3, #4
 800587e:	b2da      	uxtb	r2, r3
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f007 f95e 	bl	800cb48 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800588c:	2103      	movs	r1, #3
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f7ff ff68 	bl	8005764 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	69db      	ldr	r3, [r3, #28]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d003      	beq.n	80058a4 <netif_set_link_up+0x5c>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	69db      	ldr	r3, [r3, #28]
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80058a4:	3708      	adds	r7, #8
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}
 80058aa:	bf00      	nop
 80058ac:	08011c84 	.word	0x08011c84
 80058b0:	08011e6c 	.word	0x08011e6c
 80058b4:	08011cd4 	.word	0x08011cd4

080058b8 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b082      	sub	sp, #8
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d107      	bne.n	80058d6 <netif_set_link_down+0x1e>
 80058c6:	4b11      	ldr	r3, [pc, #68]	; (800590c <netif_set_link_down+0x54>)
 80058c8:	f240 4206 	movw	r2, #1030	; 0x406
 80058cc:	4910      	ldr	r1, [pc, #64]	; (8005910 <netif_set_link_down+0x58>)
 80058ce:	4811      	ldr	r0, [pc, #68]	; (8005914 <netif_set_link_down+0x5c>)
 80058d0:	f00a ff2a 	bl	8010728 <iprintf>
 80058d4:	e017      	b.n	8005906 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80058dc:	f003 0304 	and.w	r3, r3, #4
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d010      	beq.n	8005906 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80058ea:	f023 0304 	bic.w	r3, r3, #4
 80058ee:	b2da      	uxtb	r2, r3
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	69db      	ldr	r3, [r3, #28]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d003      	beq.n	8005906 <netif_set_link_down+0x4e>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	69db      	ldr	r3, [r3, #28]
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8005906:	3708      	adds	r7, #8
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}
 800590c:	08011c84 	.word	0x08011c84
 8005910:	08011e90 	.word	0x08011e90
 8005914:	08011cd4 	.word	0x08011cd4

08005918 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8005918:	b480      	push	{r7}
 800591a:	b083      	sub	sp, #12
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
 8005920:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d002      	beq.n	800592e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	683a      	ldr	r2, [r7, #0]
 800592c:	61da      	str	r2, [r3, #28]
  }
}
 800592e:	bf00      	nop
 8005930:	370c      	adds	r7, #12
 8005932:	46bd      	mov	sp, r7
 8005934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005938:	4770      	bx	lr

0800593a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800593a:	b480      	push	{r7}
 800593c:	b085      	sub	sp, #20
 800593e:	af00      	add	r7, sp, #0
 8005940:	60f8      	str	r0, [r7, #12]
 8005942:	60b9      	str	r1, [r7, #8]
 8005944:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8005946:	f06f 030b 	mvn.w	r3, #11
}
 800594a:	4618      	mov	r0, r3
 800594c:	3714      	adds	r7, #20
 800594e:	46bd      	mov	sp, r7
 8005950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005954:	4770      	bx	lr
	...

08005958 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8005958:	b480      	push	{r7}
 800595a:	b085      	sub	sp, #20
 800595c:	af00      	add	r7, sp, #0
 800595e:	4603      	mov	r3, r0
 8005960:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8005962:	79fb      	ldrb	r3, [r7, #7]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d013      	beq.n	8005990 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8005968:	4b0d      	ldr	r3, [pc, #52]	; (80059a0 <netif_get_by_index+0x48>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	60fb      	str	r3, [r7, #12]
 800596e:	e00c      	b.n	800598a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005976:	3301      	adds	r3, #1
 8005978:	b2db      	uxtb	r3, r3
 800597a:	79fa      	ldrb	r2, [r7, #7]
 800597c:	429a      	cmp	r2, r3
 800597e:	d101      	bne.n	8005984 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	e006      	b.n	8005992 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	60fb      	str	r3, [r7, #12]
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d1ef      	bne.n	8005970 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8005990:	2300      	movs	r3, #0
}
 8005992:	4618      	mov	r0, r3
 8005994:	3714      	adds	r7, #20
 8005996:	46bd      	mov	sp, r7
 8005998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599c:	4770      	bx	lr
 800599e:	bf00      	nop
 80059a0:	20007c48 	.word	0x20007c48

080059a4 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 80059a4:	b480      	push	{r7}
 80059a6:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 80059a8:	4b03      	ldr	r3, [pc, #12]	; (80059b8 <pbuf_pool_is_empty+0x14>)
 80059aa:	2201      	movs	r2, #1
 80059ac:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 80059ae:	bf00      	nop
 80059b0:	46bd      	mov	sp, r7
 80059b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b6:	4770      	bx	lr
 80059b8:	20007c51 	.word	0x20007c51

080059bc <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 80059bc:	b480      	push	{r7}
 80059be:	b085      	sub	sp, #20
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	60f8      	str	r0, [r7, #12]
 80059c4:	60b9      	str	r1, [r7, #8]
 80059c6:	4611      	mov	r1, r2
 80059c8:	461a      	mov	r2, r3
 80059ca:	460b      	mov	r3, r1
 80059cc:	80fb      	strh	r3, [r7, #6]
 80059ce:	4613      	mov	r3, r2
 80059d0:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2200      	movs	r2, #0
 80059d6:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	68ba      	ldr	r2, [r7, #8]
 80059dc:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	88fa      	ldrh	r2, [r7, #6]
 80059e2:	811a      	strh	r2, [r3, #8]
  p->len = len;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	88ba      	ldrh	r2, [r7, #4]
 80059e8:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 80059ea:	8b3b      	ldrh	r3, [r7, #24]
 80059ec:	b2da      	uxtb	r2, r3
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	7f3a      	ldrb	r2, [r7, #28]
 80059f6:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2201      	movs	r2, #1
 80059fc:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2200      	movs	r2, #0
 8005a02:	73da      	strb	r2, [r3, #15]
}
 8005a04:	bf00      	nop
 8005a06:	3714      	adds	r7, #20
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0e:	4770      	bx	lr

08005a10 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b08c      	sub	sp, #48	; 0x30
 8005a14:	af02      	add	r7, sp, #8
 8005a16:	4603      	mov	r3, r0
 8005a18:	71fb      	strb	r3, [r7, #7]
 8005a1a:	460b      	mov	r3, r1
 8005a1c:	80bb      	strh	r3, [r7, #4]
 8005a1e:	4613      	mov	r3, r2
 8005a20:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8005a22:	79fb      	ldrb	r3, [r7, #7]
 8005a24:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8005a26:	887b      	ldrh	r3, [r7, #2]
 8005a28:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8005a2c:	d07f      	beq.n	8005b2e <pbuf_alloc+0x11e>
 8005a2e:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8005a32:	f300 80c8 	bgt.w	8005bc6 <pbuf_alloc+0x1b6>
 8005a36:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8005a3a:	d010      	beq.n	8005a5e <pbuf_alloc+0x4e>
 8005a3c:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8005a40:	f300 80c1 	bgt.w	8005bc6 <pbuf_alloc+0x1b6>
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d002      	beq.n	8005a4e <pbuf_alloc+0x3e>
 8005a48:	2b41      	cmp	r3, #65	; 0x41
 8005a4a:	f040 80bc 	bne.w	8005bc6 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8005a4e:	887a      	ldrh	r2, [r7, #2]
 8005a50:	88bb      	ldrh	r3, [r7, #4]
 8005a52:	4619      	mov	r1, r3
 8005a54:	2000      	movs	r0, #0
 8005a56:	f000 f8d1 	bl	8005bfc <pbuf_alloc_reference>
 8005a5a:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8005a5c:	e0bd      	b.n	8005bda <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8005a62:	2300      	movs	r3, #0
 8005a64:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8005a66:	88bb      	ldrh	r3, [r7, #4]
 8005a68:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8005a6a:	2008      	movs	r0, #8
 8005a6c:	f7ff fbe2 	bl	8005234 <memp_malloc>
 8005a70:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d109      	bne.n	8005a8c <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8005a78:	f7ff ff94 	bl	80059a4 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8005a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d002      	beq.n	8005a88 <pbuf_alloc+0x78>
            pbuf_free(p);
 8005a82:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005a84:	f000 faa8 	bl	8005fd8 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8005a88:	2300      	movs	r3, #0
 8005a8a:	e0a7      	b.n	8005bdc <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8005a8c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005a8e:	3303      	adds	r3, #3
 8005a90:	b29b      	uxth	r3, r3
 8005a92:	f023 0303 	bic.w	r3, r3, #3
 8005a96:	b29b      	uxth	r3, r3
 8005a98:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8005a9c:	b29b      	uxth	r3, r3
 8005a9e:	8b7a      	ldrh	r2, [r7, #26]
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	bf28      	it	cs
 8005aa4:	4613      	movcs	r3, r2
 8005aa6:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8005aa8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005aaa:	3310      	adds	r3, #16
 8005aac:	693a      	ldr	r2, [r7, #16]
 8005aae:	4413      	add	r3, r2
 8005ab0:	3303      	adds	r3, #3
 8005ab2:	f023 0303 	bic.w	r3, r3, #3
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	89f9      	ldrh	r1, [r7, #14]
 8005aba:	8b7a      	ldrh	r2, [r7, #26]
 8005abc:	2300      	movs	r3, #0
 8005abe:	9301      	str	r3, [sp, #4]
 8005ac0:	887b      	ldrh	r3, [r7, #2]
 8005ac2:	9300      	str	r3, [sp, #0]
 8005ac4:	460b      	mov	r3, r1
 8005ac6:	4601      	mov	r1, r0
 8005ac8:	6938      	ldr	r0, [r7, #16]
 8005aca:	f7ff ff77 	bl	80059bc <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	f003 0303 	and.w	r3, r3, #3
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d006      	beq.n	8005ae8 <pbuf_alloc+0xd8>
 8005ada:	4b42      	ldr	r3, [pc, #264]	; (8005be4 <pbuf_alloc+0x1d4>)
 8005adc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005ae0:	4941      	ldr	r1, [pc, #260]	; (8005be8 <pbuf_alloc+0x1d8>)
 8005ae2:	4842      	ldr	r0, [pc, #264]	; (8005bec <pbuf_alloc+0x1dc>)
 8005ae4:	f00a fe20 	bl	8010728 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8005ae8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005aea:	3303      	adds	r3, #3
 8005aec:	f023 0303 	bic.w	r3, r3, #3
 8005af0:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8005af4:	d106      	bne.n	8005b04 <pbuf_alloc+0xf4>
 8005af6:	4b3b      	ldr	r3, [pc, #236]	; (8005be4 <pbuf_alloc+0x1d4>)
 8005af8:	f44f 7281 	mov.w	r2, #258	; 0x102
 8005afc:	493c      	ldr	r1, [pc, #240]	; (8005bf0 <pbuf_alloc+0x1e0>)
 8005afe:	483b      	ldr	r0, [pc, #236]	; (8005bec <pbuf_alloc+0x1dc>)
 8005b00:	f00a fe12 	bl	8010728 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8005b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d102      	bne.n	8005b10 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	627b      	str	r3, [r7, #36]	; 0x24
 8005b0e:	e002      	b.n	8005b16 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8005b10:	69fb      	ldr	r3, [r7, #28]
 8005b12:	693a      	ldr	r2, [r7, #16]
 8005b14:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8005b1a:	8b7a      	ldrh	r2, [r7, #26]
 8005b1c:	89fb      	ldrh	r3, [r7, #14]
 8005b1e:	1ad3      	subs	r3, r2, r3
 8005b20:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8005b22:	2300      	movs	r3, #0
 8005b24:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8005b26:	8b7b      	ldrh	r3, [r7, #26]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d19e      	bne.n	8005a6a <pbuf_alloc+0x5a>
      break;
 8005b2c:	e055      	b.n	8005bda <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8005b2e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005b30:	3303      	adds	r3, #3
 8005b32:	b29b      	uxth	r3, r3
 8005b34:	f023 0303 	bic.w	r3, r3, #3
 8005b38:	b29a      	uxth	r2, r3
 8005b3a:	88bb      	ldrh	r3, [r7, #4]
 8005b3c:	3303      	adds	r3, #3
 8005b3e:	b29b      	uxth	r3, r3
 8005b40:	f023 0303 	bic.w	r3, r3, #3
 8005b44:	b29b      	uxth	r3, r3
 8005b46:	4413      	add	r3, r2
 8005b48:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8005b4a:	8b3b      	ldrh	r3, [r7, #24]
 8005b4c:	3310      	adds	r3, #16
 8005b4e:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8005b50:	8b3a      	ldrh	r2, [r7, #24]
 8005b52:	88bb      	ldrh	r3, [r7, #4]
 8005b54:	3303      	adds	r3, #3
 8005b56:	f023 0303 	bic.w	r3, r3, #3
 8005b5a:	429a      	cmp	r2, r3
 8005b5c:	d306      	bcc.n	8005b6c <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8005b5e:	8afa      	ldrh	r2, [r7, #22]
 8005b60:	88bb      	ldrh	r3, [r7, #4]
 8005b62:	3303      	adds	r3, #3
 8005b64:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8005b68:	429a      	cmp	r2, r3
 8005b6a:	d201      	bcs.n	8005b70 <pbuf_alloc+0x160>
        return NULL;
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	e035      	b.n	8005bdc <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8005b70:	8afb      	ldrh	r3, [r7, #22]
 8005b72:	4618      	mov	r0, r3
 8005b74:	f7ff f9ce 	bl	8004f14 <mem_malloc>
 8005b78:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8005b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d101      	bne.n	8005b84 <pbuf_alloc+0x174>
        return NULL;
 8005b80:	2300      	movs	r3, #0
 8005b82:	e02b      	b.n	8005bdc <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8005b84:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005b86:	3310      	adds	r3, #16
 8005b88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b8a:	4413      	add	r3, r2
 8005b8c:	3303      	adds	r3, #3
 8005b8e:	f023 0303 	bic.w	r3, r3, #3
 8005b92:	4618      	mov	r0, r3
 8005b94:	88b9      	ldrh	r1, [r7, #4]
 8005b96:	88ba      	ldrh	r2, [r7, #4]
 8005b98:	2300      	movs	r3, #0
 8005b9a:	9301      	str	r3, [sp, #4]
 8005b9c:	887b      	ldrh	r3, [r7, #2]
 8005b9e:	9300      	str	r3, [sp, #0]
 8005ba0:	460b      	mov	r3, r1
 8005ba2:	4601      	mov	r1, r0
 8005ba4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005ba6:	f7ff ff09 	bl	80059bc <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8005baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	f003 0303 	and.w	r3, r3, #3
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d010      	beq.n	8005bd8 <pbuf_alloc+0x1c8>
 8005bb6:	4b0b      	ldr	r3, [pc, #44]	; (8005be4 <pbuf_alloc+0x1d4>)
 8005bb8:	f44f 7291 	mov.w	r2, #290	; 0x122
 8005bbc:	490d      	ldr	r1, [pc, #52]	; (8005bf4 <pbuf_alloc+0x1e4>)
 8005bbe:	480b      	ldr	r0, [pc, #44]	; (8005bec <pbuf_alloc+0x1dc>)
 8005bc0:	f00a fdb2 	bl	8010728 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8005bc4:	e008      	b.n	8005bd8 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8005bc6:	4b07      	ldr	r3, [pc, #28]	; (8005be4 <pbuf_alloc+0x1d4>)
 8005bc8:	f240 1227 	movw	r2, #295	; 0x127
 8005bcc:	490a      	ldr	r1, [pc, #40]	; (8005bf8 <pbuf_alloc+0x1e8>)
 8005bce:	4807      	ldr	r0, [pc, #28]	; (8005bec <pbuf_alloc+0x1dc>)
 8005bd0:	f00a fdaa 	bl	8010728 <iprintf>
      return NULL;
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	e001      	b.n	8005bdc <pbuf_alloc+0x1cc>
      break;
 8005bd8:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8005bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3728      	adds	r7, #40	; 0x28
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}
 8005be4:	08011eb4 	.word	0x08011eb4
 8005be8:	08011ee4 	.word	0x08011ee4
 8005bec:	08011f14 	.word	0x08011f14
 8005bf0:	08011f3c 	.word	0x08011f3c
 8005bf4:	08011f70 	.word	0x08011f70
 8005bf8:	08011f9c 	.word	0x08011f9c

08005bfc <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b086      	sub	sp, #24
 8005c00:	af02      	add	r7, sp, #8
 8005c02:	6078      	str	r0, [r7, #4]
 8005c04:	460b      	mov	r3, r1
 8005c06:	807b      	strh	r3, [r7, #2]
 8005c08:	4613      	mov	r3, r2
 8005c0a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8005c0c:	883b      	ldrh	r3, [r7, #0]
 8005c0e:	2b41      	cmp	r3, #65	; 0x41
 8005c10:	d009      	beq.n	8005c26 <pbuf_alloc_reference+0x2a>
 8005c12:	883b      	ldrh	r3, [r7, #0]
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d006      	beq.n	8005c26 <pbuf_alloc_reference+0x2a>
 8005c18:	4b0f      	ldr	r3, [pc, #60]	; (8005c58 <pbuf_alloc_reference+0x5c>)
 8005c1a:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8005c1e:	490f      	ldr	r1, [pc, #60]	; (8005c5c <pbuf_alloc_reference+0x60>)
 8005c20:	480f      	ldr	r0, [pc, #60]	; (8005c60 <pbuf_alloc_reference+0x64>)
 8005c22:	f00a fd81 	bl	8010728 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8005c26:	2007      	movs	r0, #7
 8005c28:	f7ff fb04 	bl	8005234 <memp_malloc>
 8005c2c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d101      	bne.n	8005c38 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8005c34:	2300      	movs	r3, #0
 8005c36:	e00b      	b.n	8005c50 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8005c38:	8879      	ldrh	r1, [r7, #2]
 8005c3a:	887a      	ldrh	r2, [r7, #2]
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	9301      	str	r3, [sp, #4]
 8005c40:	883b      	ldrh	r3, [r7, #0]
 8005c42:	9300      	str	r3, [sp, #0]
 8005c44:	460b      	mov	r3, r1
 8005c46:	6879      	ldr	r1, [r7, #4]
 8005c48:	68f8      	ldr	r0, [r7, #12]
 8005c4a:	f7ff feb7 	bl	80059bc <pbuf_init_alloced_pbuf>
  return p;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	3710      	adds	r7, #16
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}
 8005c58:	08011eb4 	.word	0x08011eb4
 8005c5c:	08011fb8 	.word	0x08011fb8
 8005c60:	08011f14 	.word	0x08011f14

08005c64 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b088      	sub	sp, #32
 8005c68:	af02      	add	r7, sp, #8
 8005c6a:	607b      	str	r3, [r7, #4]
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	73fb      	strb	r3, [r7, #15]
 8005c70:	460b      	mov	r3, r1
 8005c72:	81bb      	strh	r3, [r7, #12]
 8005c74:	4613      	mov	r3, r2
 8005c76:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8005c78:	7bfb      	ldrb	r3, [r7, #15]
 8005c7a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8005c7c:	8a7b      	ldrh	r3, [r7, #18]
 8005c7e:	3303      	adds	r3, #3
 8005c80:	f023 0203 	bic.w	r2, r3, #3
 8005c84:	89bb      	ldrh	r3, [r7, #12]
 8005c86:	441a      	add	r2, r3
 8005c88:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005c8a:	429a      	cmp	r2, r3
 8005c8c:	d901      	bls.n	8005c92 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	e018      	b.n	8005cc4 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8005c92:	6a3b      	ldr	r3, [r7, #32]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d007      	beq.n	8005ca8 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8005c98:	8a7b      	ldrh	r3, [r7, #18]
 8005c9a:	3303      	adds	r3, #3
 8005c9c:	f023 0303 	bic.w	r3, r3, #3
 8005ca0:	6a3a      	ldr	r2, [r7, #32]
 8005ca2:	4413      	add	r3, r2
 8005ca4:	617b      	str	r3, [r7, #20]
 8005ca6:	e001      	b.n	8005cac <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8005ca8:	2300      	movs	r3, #0
 8005caa:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8005cac:	6878      	ldr	r0, [r7, #4]
 8005cae:	89b9      	ldrh	r1, [r7, #12]
 8005cb0:	89ba      	ldrh	r2, [r7, #12]
 8005cb2:	2302      	movs	r3, #2
 8005cb4:	9301      	str	r3, [sp, #4]
 8005cb6:	897b      	ldrh	r3, [r7, #10]
 8005cb8:	9300      	str	r3, [sp, #0]
 8005cba:	460b      	mov	r3, r1
 8005cbc:	6979      	ldr	r1, [r7, #20]
 8005cbe:	f7ff fe7d 	bl	80059bc <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8005cc2:	687b      	ldr	r3, [r7, #4]
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	3718      	adds	r7, #24
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}

08005ccc <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b084      	sub	sp, #16
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
 8005cd4:	460b      	mov	r3, r1
 8005cd6:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d106      	bne.n	8005cec <pbuf_realloc+0x20>
 8005cde:	4b3a      	ldr	r3, [pc, #232]	; (8005dc8 <pbuf_realloc+0xfc>)
 8005ce0:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8005ce4:	4939      	ldr	r1, [pc, #228]	; (8005dcc <pbuf_realloc+0x100>)
 8005ce6:	483a      	ldr	r0, [pc, #232]	; (8005dd0 <pbuf_realloc+0x104>)
 8005ce8:	f00a fd1e 	bl	8010728 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	891b      	ldrh	r3, [r3, #8]
 8005cf0:	887a      	ldrh	r2, [r7, #2]
 8005cf2:	429a      	cmp	r2, r3
 8005cf4:	d263      	bcs.n	8005dbe <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	891a      	ldrh	r2, [r3, #8]
 8005cfa:	887b      	ldrh	r3, [r7, #2]
 8005cfc:	1ad3      	subs	r3, r2, r3
 8005cfe:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8005d00:	887b      	ldrh	r3, [r7, #2]
 8005d02:	817b      	strh	r3, [r7, #10]
  q = p;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8005d08:	e018      	b.n	8005d3c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	895b      	ldrh	r3, [r3, #10]
 8005d0e:	897a      	ldrh	r2, [r7, #10]
 8005d10:	1ad3      	subs	r3, r2, r3
 8005d12:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	891a      	ldrh	r2, [r3, #8]
 8005d18:	893b      	ldrh	r3, [r7, #8]
 8005d1a:	1ad3      	subs	r3, r2, r3
 8005d1c:	b29a      	uxth	r2, r3
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d106      	bne.n	8005d3c <pbuf_realloc+0x70>
 8005d2e:	4b26      	ldr	r3, [pc, #152]	; (8005dc8 <pbuf_realloc+0xfc>)
 8005d30:	f240 12af 	movw	r2, #431	; 0x1af
 8005d34:	4927      	ldr	r1, [pc, #156]	; (8005dd4 <pbuf_realloc+0x108>)
 8005d36:	4826      	ldr	r0, [pc, #152]	; (8005dd0 <pbuf_realloc+0x104>)
 8005d38:	f00a fcf6 	bl	8010728 <iprintf>
  while (rem_len > q->len) {
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	895b      	ldrh	r3, [r3, #10]
 8005d40:	897a      	ldrh	r2, [r7, #10]
 8005d42:	429a      	cmp	r2, r3
 8005d44:	d8e1      	bhi.n	8005d0a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	7b1b      	ldrb	r3, [r3, #12]
 8005d4a:	f003 030f 	and.w	r3, r3, #15
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d121      	bne.n	8005d96 <pbuf_realloc+0xca>
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	895b      	ldrh	r3, [r3, #10]
 8005d56:	897a      	ldrh	r2, [r7, #10]
 8005d58:	429a      	cmp	r2, r3
 8005d5a:	d01c      	beq.n	8005d96 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	7b5b      	ldrb	r3, [r3, #13]
 8005d60:	f003 0302 	and.w	r3, r3, #2
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d116      	bne.n	8005d96 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	685a      	ldr	r2, [r3, #4]
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	1ad3      	subs	r3, r2, r3
 8005d70:	b29a      	uxth	r2, r3
 8005d72:	897b      	ldrh	r3, [r7, #10]
 8005d74:	4413      	add	r3, r2
 8005d76:	b29b      	uxth	r3, r3
 8005d78:	4619      	mov	r1, r3
 8005d7a:	68f8      	ldr	r0, [r7, #12]
 8005d7c:	f7fe ffce 	bl	8004d1c <mem_trim>
 8005d80:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d106      	bne.n	8005d96 <pbuf_realloc+0xca>
 8005d88:	4b0f      	ldr	r3, [pc, #60]	; (8005dc8 <pbuf_realloc+0xfc>)
 8005d8a:	f240 12bd 	movw	r2, #445	; 0x1bd
 8005d8e:	4912      	ldr	r1, [pc, #72]	; (8005dd8 <pbuf_realloc+0x10c>)
 8005d90:	480f      	ldr	r0, [pc, #60]	; (8005dd0 <pbuf_realloc+0x104>)
 8005d92:	f00a fcc9 	bl	8010728 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	897a      	ldrh	r2, [r7, #10]
 8005d9a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	895a      	ldrh	r2, [r3, #10]
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d004      	beq.n	8005db6 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4618      	mov	r0, r3
 8005db2:	f000 f911 	bl	8005fd8 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	2200      	movs	r2, #0
 8005dba:	601a      	str	r2, [r3, #0]
 8005dbc:	e000      	b.n	8005dc0 <pbuf_realloc+0xf4>
    return;
 8005dbe:	bf00      	nop

}
 8005dc0:	3710      	adds	r7, #16
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}
 8005dc6:	bf00      	nop
 8005dc8:	08011eb4 	.word	0x08011eb4
 8005dcc:	08011fcc 	.word	0x08011fcc
 8005dd0:	08011f14 	.word	0x08011f14
 8005dd4:	08011fe4 	.word	0x08011fe4
 8005dd8:	08011ffc 	.word	0x08011ffc

08005ddc <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b086      	sub	sp, #24
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	60f8      	str	r0, [r7, #12]
 8005de4:	60b9      	str	r1, [r7, #8]
 8005de6:	4613      	mov	r3, r2
 8005de8:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d106      	bne.n	8005dfe <pbuf_add_header_impl+0x22>
 8005df0:	4b2b      	ldr	r3, [pc, #172]	; (8005ea0 <pbuf_add_header_impl+0xc4>)
 8005df2:	f240 12df 	movw	r2, #479	; 0x1df
 8005df6:	492b      	ldr	r1, [pc, #172]	; (8005ea4 <pbuf_add_header_impl+0xc8>)
 8005df8:	482b      	ldr	r0, [pc, #172]	; (8005ea8 <pbuf_add_header_impl+0xcc>)
 8005dfa:	f00a fc95 	bl	8010728 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d003      	beq.n	8005e0c <pbuf_add_header_impl+0x30>
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e0a:	d301      	bcc.n	8005e10 <pbuf_add_header_impl+0x34>
    return 1;
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	e043      	b.n	8005e98 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d101      	bne.n	8005e1a <pbuf_add_header_impl+0x3e>
    return 0;
 8005e16:	2300      	movs	r3, #0
 8005e18:	e03e      	b.n	8005e98 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	891a      	ldrh	r2, [r3, #8]
 8005e22:	8a7b      	ldrh	r3, [r7, #18]
 8005e24:	4413      	add	r3, r2
 8005e26:	b29b      	uxth	r3, r3
 8005e28:	8a7a      	ldrh	r2, [r7, #18]
 8005e2a:	429a      	cmp	r2, r3
 8005e2c:	d901      	bls.n	8005e32 <pbuf_add_header_impl+0x56>
    return 1;
 8005e2e:	2301      	movs	r3, #1
 8005e30:	e032      	b.n	8005e98 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	7b1b      	ldrb	r3, [r3, #12]
 8005e36:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8005e38:	8a3b      	ldrh	r3, [r7, #16]
 8005e3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d00c      	beq.n	8005e5c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	685a      	ldr	r2, [r3, #4]
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	425b      	negs	r3, r3
 8005e4a:	4413      	add	r3, r2
 8005e4c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	3310      	adds	r3, #16
 8005e52:	697a      	ldr	r2, [r7, #20]
 8005e54:	429a      	cmp	r2, r3
 8005e56:	d20d      	bcs.n	8005e74 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8005e58:	2301      	movs	r3, #1
 8005e5a:	e01d      	b.n	8005e98 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8005e5c:	79fb      	ldrb	r3, [r7, #7]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d006      	beq.n	8005e70 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	685a      	ldr	r2, [r3, #4]
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	425b      	negs	r3, r3
 8005e6a:	4413      	add	r3, r2
 8005e6c:	617b      	str	r3, [r7, #20]
 8005e6e:	e001      	b.n	8005e74 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8005e70:	2301      	movs	r3, #1
 8005e72:	e011      	b.n	8005e98 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	697a      	ldr	r2, [r7, #20]
 8005e78:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	895a      	ldrh	r2, [r3, #10]
 8005e7e:	8a7b      	ldrh	r3, [r7, #18]
 8005e80:	4413      	add	r3, r2
 8005e82:	b29a      	uxth	r2, r3
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	891a      	ldrh	r2, [r3, #8]
 8005e8c:	8a7b      	ldrh	r3, [r7, #18]
 8005e8e:	4413      	add	r3, r2
 8005e90:	b29a      	uxth	r2, r3
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	811a      	strh	r2, [r3, #8]


  return 0;
 8005e96:	2300      	movs	r3, #0
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	3718      	adds	r7, #24
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}
 8005ea0:	08011eb4 	.word	0x08011eb4
 8005ea4:	08012018 	.word	0x08012018
 8005ea8:	08011f14 	.word	0x08011f14

08005eac <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b082      	sub	sp, #8
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
 8005eb4:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	6839      	ldr	r1, [r7, #0]
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f7ff ff8e 	bl	8005ddc <pbuf_add_header_impl>
 8005ec0:	4603      	mov	r3, r0
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	3708      	adds	r7, #8
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}
	...

08005ecc <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b084      	sub	sp, #16
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
 8005ed4:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d106      	bne.n	8005eea <pbuf_remove_header+0x1e>
 8005edc:	4b20      	ldr	r3, [pc, #128]	; (8005f60 <pbuf_remove_header+0x94>)
 8005ede:	f240 224b 	movw	r2, #587	; 0x24b
 8005ee2:	4920      	ldr	r1, [pc, #128]	; (8005f64 <pbuf_remove_header+0x98>)
 8005ee4:	4820      	ldr	r0, [pc, #128]	; (8005f68 <pbuf_remove_header+0x9c>)
 8005ee6:	f00a fc1f 	bl	8010728 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d003      	beq.n	8005ef8 <pbuf_remove_header+0x2c>
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ef6:	d301      	bcc.n	8005efc <pbuf_remove_header+0x30>
    return 1;
 8005ef8:	2301      	movs	r3, #1
 8005efa:	e02c      	b.n	8005f56 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d101      	bne.n	8005f06 <pbuf_remove_header+0x3a>
    return 0;
 8005f02:	2300      	movs	r3, #0
 8005f04:	e027      	b.n	8005f56 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	895b      	ldrh	r3, [r3, #10]
 8005f0e:	89fa      	ldrh	r2, [r7, #14]
 8005f10:	429a      	cmp	r2, r3
 8005f12:	d908      	bls.n	8005f26 <pbuf_remove_header+0x5a>
 8005f14:	4b12      	ldr	r3, [pc, #72]	; (8005f60 <pbuf_remove_header+0x94>)
 8005f16:	f240 2255 	movw	r2, #597	; 0x255
 8005f1a:	4914      	ldr	r1, [pc, #80]	; (8005f6c <pbuf_remove_header+0xa0>)
 8005f1c:	4812      	ldr	r0, [pc, #72]	; (8005f68 <pbuf_remove_header+0x9c>)
 8005f1e:	f00a fc03 	bl	8010728 <iprintf>
 8005f22:	2301      	movs	r3, #1
 8005f24:	e017      	b.n	8005f56 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	685a      	ldr	r2, [r3, #4]
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	441a      	add	r2, r3
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	895a      	ldrh	r2, [r3, #10]
 8005f3c:	89fb      	ldrh	r3, [r7, #14]
 8005f3e:	1ad3      	subs	r3, r2, r3
 8005f40:	b29a      	uxth	r2, r3
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	891a      	ldrh	r2, [r3, #8]
 8005f4a:	89fb      	ldrh	r3, [r7, #14]
 8005f4c:	1ad3      	subs	r3, r2, r3
 8005f4e:	b29a      	uxth	r2, r3
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8005f54:	2300      	movs	r3, #0
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	3710      	adds	r7, #16
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd80      	pop	{r7, pc}
 8005f5e:	bf00      	nop
 8005f60:	08011eb4 	.word	0x08011eb4
 8005f64:	08012018 	.word	0x08012018
 8005f68:	08011f14 	.word	0x08011f14
 8005f6c:	08012024 	.word	0x08012024

08005f70 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b082      	sub	sp, #8
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
 8005f78:	460b      	mov	r3, r1
 8005f7a:	807b      	strh	r3, [r7, #2]
 8005f7c:	4613      	mov	r3, r2
 8005f7e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8005f80:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	da08      	bge.n	8005f9a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8005f88:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005f8c:	425b      	negs	r3, r3
 8005f8e:	4619      	mov	r1, r3
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f7ff ff9b 	bl	8005ecc <pbuf_remove_header>
 8005f96:	4603      	mov	r3, r0
 8005f98:	e007      	b.n	8005faa <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8005f9a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005f9e:	787a      	ldrb	r2, [r7, #1]
 8005fa0:	4619      	mov	r1, r3
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f7ff ff1a 	bl	8005ddc <pbuf_add_header_impl>
 8005fa8:	4603      	mov	r3, r0
  }
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	3708      	adds	r7, #8
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}

08005fb2 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8005fb2:	b580      	push	{r7, lr}
 8005fb4:	b082      	sub	sp, #8
 8005fb6:	af00      	add	r7, sp, #0
 8005fb8:	6078      	str	r0, [r7, #4]
 8005fba:	460b      	mov	r3, r1
 8005fbc:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8005fbe:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	4619      	mov	r1, r3
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f7ff ffd2 	bl	8005f70 <pbuf_header_impl>
 8005fcc:	4603      	mov	r3, r0
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3708      	adds	r7, #8
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}
	...

08005fd8 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b086      	sub	sp, #24
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d10b      	bne.n	8005ffe <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d106      	bne.n	8005ffa <pbuf_free+0x22>
 8005fec:	4b38      	ldr	r3, [pc, #224]	; (80060d0 <pbuf_free+0xf8>)
 8005fee:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8005ff2:	4938      	ldr	r1, [pc, #224]	; (80060d4 <pbuf_free+0xfc>)
 8005ff4:	4838      	ldr	r0, [pc, #224]	; (80060d8 <pbuf_free+0x100>)
 8005ff6:	f00a fb97 	bl	8010728 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	e063      	b.n	80060c6 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8005ffe:	2300      	movs	r3, #0
 8006000:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8006002:	e05c      	b.n	80060be <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	7b9b      	ldrb	r3, [r3, #14]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d106      	bne.n	800601a <pbuf_free+0x42>
 800600c:	4b30      	ldr	r3, [pc, #192]	; (80060d0 <pbuf_free+0xf8>)
 800600e:	f240 22f1 	movw	r2, #753	; 0x2f1
 8006012:	4932      	ldr	r1, [pc, #200]	; (80060dc <pbuf_free+0x104>)
 8006014:	4830      	ldr	r0, [pc, #192]	; (80060d8 <pbuf_free+0x100>)
 8006016:	f00a fb87 	bl	8010728 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	7b9b      	ldrb	r3, [r3, #14]
 800601e:	3b01      	subs	r3, #1
 8006020:	b2da      	uxtb	r2, r3
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	739a      	strb	r2, [r3, #14]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	7b9b      	ldrb	r3, [r3, #14]
 800602a:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800602c:	7dbb      	ldrb	r3, [r7, #22]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d143      	bne.n	80060ba <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	7b1b      	ldrb	r3, [r3, #12]
 800603c:	f003 030f 	and.w	r3, r3, #15
 8006040:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	7b5b      	ldrb	r3, [r3, #13]
 8006046:	f003 0302 	and.w	r3, r3, #2
 800604a:	2b00      	cmp	r3, #0
 800604c:	d011      	beq.n	8006072 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	691b      	ldr	r3, [r3, #16]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d106      	bne.n	8006068 <pbuf_free+0x90>
 800605a:	4b1d      	ldr	r3, [pc, #116]	; (80060d0 <pbuf_free+0xf8>)
 800605c:	f240 22ff 	movw	r2, #767	; 0x2ff
 8006060:	491f      	ldr	r1, [pc, #124]	; (80060e0 <pbuf_free+0x108>)
 8006062:	481d      	ldr	r0, [pc, #116]	; (80060d8 <pbuf_free+0x100>)
 8006064:	f00a fb60 	bl	8010728 <iprintf>
        pc->custom_free_function(p);
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	691b      	ldr	r3, [r3, #16]
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	4798      	blx	r3
 8006070:	e01d      	b.n	80060ae <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8006072:	7bfb      	ldrb	r3, [r7, #15]
 8006074:	2b02      	cmp	r3, #2
 8006076:	d104      	bne.n	8006082 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8006078:	6879      	ldr	r1, [r7, #4]
 800607a:	2008      	movs	r0, #8
 800607c:	f7ff f94a 	bl	8005314 <memp_free>
 8006080:	e015      	b.n	80060ae <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8006082:	7bfb      	ldrb	r3, [r7, #15]
 8006084:	2b01      	cmp	r3, #1
 8006086:	d104      	bne.n	8006092 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8006088:	6879      	ldr	r1, [r7, #4]
 800608a:	2007      	movs	r0, #7
 800608c:	f7ff f942 	bl	8005314 <memp_free>
 8006090:	e00d      	b.n	80060ae <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8006092:	7bfb      	ldrb	r3, [r7, #15]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d103      	bne.n	80060a0 <pbuf_free+0xc8>
          mem_free(p);
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	f7fe fdd5 	bl	8004c48 <mem_free>
 800609e:	e006      	b.n	80060ae <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 80060a0:	4b0b      	ldr	r3, [pc, #44]	; (80060d0 <pbuf_free+0xf8>)
 80060a2:	f240 320f 	movw	r2, #783	; 0x30f
 80060a6:	490f      	ldr	r1, [pc, #60]	; (80060e4 <pbuf_free+0x10c>)
 80060a8:	480b      	ldr	r0, [pc, #44]	; (80060d8 <pbuf_free+0x100>)
 80060aa:	f00a fb3d 	bl	8010728 <iprintf>
        }
      }
      count++;
 80060ae:	7dfb      	ldrb	r3, [r7, #23]
 80060b0:	3301      	adds	r3, #1
 80060b2:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	607b      	str	r3, [r7, #4]
 80060b8:	e001      	b.n	80060be <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 80060ba:	2300      	movs	r3, #0
 80060bc:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d19f      	bne.n	8006004 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 80060c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80060c6:	4618      	mov	r0, r3
 80060c8:	3718      	adds	r7, #24
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}
 80060ce:	bf00      	nop
 80060d0:	08011eb4 	.word	0x08011eb4
 80060d4:	08012018 	.word	0x08012018
 80060d8:	08011f14 	.word	0x08011f14
 80060dc:	08012044 	.word	0x08012044
 80060e0:	0801205c 	.word	0x0801205c
 80060e4:	08012080 	.word	0x08012080

080060e8 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b085      	sub	sp, #20
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80060f0:	2300      	movs	r3, #0
 80060f2:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80060f4:	e005      	b.n	8006102 <pbuf_clen+0x1a>
    ++len;
 80060f6:	89fb      	ldrh	r3, [r7, #14]
 80060f8:	3301      	adds	r3, #1
 80060fa:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d1f6      	bne.n	80060f6 <pbuf_clen+0xe>
  }
  return len;
 8006108:	89fb      	ldrh	r3, [r7, #14]
}
 800610a:	4618      	mov	r0, r3
 800610c:	3714      	adds	r7, #20
 800610e:	46bd      	mov	sp, r7
 8006110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006114:	4770      	bx	lr
	...

08006118 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b082      	sub	sp, #8
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d010      	beq.n	8006148 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	7b9b      	ldrb	r3, [r3, #14]
 800612a:	3301      	adds	r3, #1
 800612c:	b2da      	uxtb	r2, r3
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	7b9b      	ldrb	r3, [r3, #14]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d106      	bne.n	8006148 <pbuf_ref+0x30>
 800613a:	4b05      	ldr	r3, [pc, #20]	; (8006150 <pbuf_ref+0x38>)
 800613c:	f240 3242 	movw	r2, #834	; 0x342
 8006140:	4904      	ldr	r1, [pc, #16]	; (8006154 <pbuf_ref+0x3c>)
 8006142:	4805      	ldr	r0, [pc, #20]	; (8006158 <pbuf_ref+0x40>)
 8006144:	f00a faf0 	bl	8010728 <iprintf>
  }
}
 8006148:	bf00      	nop
 800614a:	3708      	adds	r7, #8
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}
 8006150:	08011eb4 	.word	0x08011eb4
 8006154:	08012094 	.word	0x08012094
 8006158:	08011f14 	.word	0x08011f14

0800615c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b084      	sub	sp, #16
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
 8006164:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d002      	beq.n	8006172 <pbuf_cat+0x16>
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d107      	bne.n	8006182 <pbuf_cat+0x26>
 8006172:	4b20      	ldr	r3, [pc, #128]	; (80061f4 <pbuf_cat+0x98>)
 8006174:	f240 3259 	movw	r2, #857	; 0x359
 8006178:	491f      	ldr	r1, [pc, #124]	; (80061f8 <pbuf_cat+0x9c>)
 800617a:	4820      	ldr	r0, [pc, #128]	; (80061fc <pbuf_cat+0xa0>)
 800617c:	f00a fad4 	bl	8010728 <iprintf>
 8006180:	e034      	b.n	80061ec <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	60fb      	str	r3, [r7, #12]
 8006186:	e00a      	b.n	800619e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	891a      	ldrh	r2, [r3, #8]
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	891b      	ldrh	r3, [r3, #8]
 8006190:	4413      	add	r3, r2
 8006192:	b29a      	uxth	r2, r3
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	60fb      	str	r3, [r7, #12]
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d1f0      	bne.n	8006188 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	891a      	ldrh	r2, [r3, #8]
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	895b      	ldrh	r3, [r3, #10]
 80061ae:	429a      	cmp	r2, r3
 80061b0:	d006      	beq.n	80061c0 <pbuf_cat+0x64>
 80061b2:	4b10      	ldr	r3, [pc, #64]	; (80061f4 <pbuf_cat+0x98>)
 80061b4:	f240 3262 	movw	r2, #866	; 0x362
 80061b8:	4911      	ldr	r1, [pc, #68]	; (8006200 <pbuf_cat+0xa4>)
 80061ba:	4810      	ldr	r0, [pc, #64]	; (80061fc <pbuf_cat+0xa0>)
 80061bc:	f00a fab4 	bl	8010728 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d006      	beq.n	80061d6 <pbuf_cat+0x7a>
 80061c8:	4b0a      	ldr	r3, [pc, #40]	; (80061f4 <pbuf_cat+0x98>)
 80061ca:	f240 3263 	movw	r2, #867	; 0x363
 80061ce:	490d      	ldr	r1, [pc, #52]	; (8006204 <pbuf_cat+0xa8>)
 80061d0:	480a      	ldr	r0, [pc, #40]	; (80061fc <pbuf_cat+0xa0>)
 80061d2:	f00a faa9 	bl	8010728 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	891a      	ldrh	r2, [r3, #8]
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	891b      	ldrh	r3, [r3, #8]
 80061de:	4413      	add	r3, r2
 80061e0:	b29a      	uxth	r2, r3
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	683a      	ldr	r2, [r7, #0]
 80061ea:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80061ec:	3710      	adds	r7, #16
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}
 80061f2:	bf00      	nop
 80061f4:	08011eb4 	.word	0x08011eb4
 80061f8:	080120a8 	.word	0x080120a8
 80061fc:	08011f14 	.word	0x08011f14
 8006200:	080120e0 	.word	0x080120e0
 8006204:	08012110 	.word	0x08012110

08006208 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b082      	sub	sp, #8
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
 8006210:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8006212:	6839      	ldr	r1, [r7, #0]
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f7ff ffa1 	bl	800615c <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800621a:	6838      	ldr	r0, [r7, #0]
 800621c:	f7ff ff7c 	bl	8006118 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8006220:	bf00      	nop
 8006222:	3708      	adds	r7, #8
 8006224:	46bd      	mov	sp, r7
 8006226:	bd80      	pop	{r7, pc}

08006228 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b086      	sub	sp, #24
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
 8006230:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8006232:	2300      	movs	r3, #0
 8006234:	617b      	str	r3, [r7, #20]
 8006236:	2300      	movs	r3, #0
 8006238:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d008      	beq.n	8006252 <pbuf_copy+0x2a>
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d005      	beq.n	8006252 <pbuf_copy+0x2a>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	891a      	ldrh	r2, [r3, #8]
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	891b      	ldrh	r3, [r3, #8]
 800624e:	429a      	cmp	r2, r3
 8006250:	d209      	bcs.n	8006266 <pbuf_copy+0x3e>
 8006252:	4b57      	ldr	r3, [pc, #348]	; (80063b0 <pbuf_copy+0x188>)
 8006254:	f240 32c9 	movw	r2, #969	; 0x3c9
 8006258:	4956      	ldr	r1, [pc, #344]	; (80063b4 <pbuf_copy+0x18c>)
 800625a:	4857      	ldr	r0, [pc, #348]	; (80063b8 <pbuf_copy+0x190>)
 800625c:	f00a fa64 	bl	8010728 <iprintf>
 8006260:	f06f 030f 	mvn.w	r3, #15
 8006264:	e09f      	b.n	80063a6 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	895b      	ldrh	r3, [r3, #10]
 800626a:	461a      	mov	r2, r3
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	1ad2      	subs	r2, r2, r3
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	895b      	ldrh	r3, [r3, #10]
 8006274:	4619      	mov	r1, r3
 8006276:	693b      	ldr	r3, [r7, #16]
 8006278:	1acb      	subs	r3, r1, r3
 800627a:	429a      	cmp	r2, r3
 800627c:	d306      	bcc.n	800628c <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	895b      	ldrh	r3, [r3, #10]
 8006282:	461a      	mov	r2, r3
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	1ad3      	subs	r3, r2, r3
 8006288:	60fb      	str	r3, [r7, #12]
 800628a:	e005      	b.n	8006298 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	895b      	ldrh	r3, [r3, #10]
 8006290:	461a      	mov	r2, r3
 8006292:	697b      	ldr	r3, [r7, #20]
 8006294:	1ad3      	subs	r3, r2, r3
 8006296:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	685a      	ldr	r2, [r3, #4]
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	18d0      	adds	r0, r2, r3
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	685a      	ldr	r2, [r3, #4]
 80062a4:	693b      	ldr	r3, [r7, #16]
 80062a6:	4413      	add	r3, r2
 80062a8:	68fa      	ldr	r2, [r7, #12]
 80062aa:	4619      	mov	r1, r3
 80062ac:	f00a fa26 	bl	80106fc <memcpy>
    offset_to += len;
 80062b0:	697a      	ldr	r2, [r7, #20]
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	4413      	add	r3, r2
 80062b6:	617b      	str	r3, [r7, #20]
    offset_from += len;
 80062b8:	693a      	ldr	r2, [r7, #16]
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	4413      	add	r3, r2
 80062be:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	895b      	ldrh	r3, [r3, #10]
 80062c4:	461a      	mov	r2, r3
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d906      	bls.n	80062da <pbuf_copy+0xb2>
 80062cc:	4b38      	ldr	r3, [pc, #224]	; (80063b0 <pbuf_copy+0x188>)
 80062ce:	f240 32d9 	movw	r2, #985	; 0x3d9
 80062d2:	493a      	ldr	r1, [pc, #232]	; (80063bc <pbuf_copy+0x194>)
 80062d4:	4838      	ldr	r0, [pc, #224]	; (80063b8 <pbuf_copy+0x190>)
 80062d6:	f00a fa27 	bl	8010728 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	895b      	ldrh	r3, [r3, #10]
 80062de:	461a      	mov	r2, r3
 80062e0:	693b      	ldr	r3, [r7, #16]
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d906      	bls.n	80062f4 <pbuf_copy+0xcc>
 80062e6:	4b32      	ldr	r3, [pc, #200]	; (80063b0 <pbuf_copy+0x188>)
 80062e8:	f240 32da 	movw	r2, #986	; 0x3da
 80062ec:	4934      	ldr	r1, [pc, #208]	; (80063c0 <pbuf_copy+0x198>)
 80062ee:	4832      	ldr	r0, [pc, #200]	; (80063b8 <pbuf_copy+0x190>)
 80062f0:	f00a fa1a 	bl	8010728 <iprintf>
    if (offset_from >= p_from->len) {
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	895b      	ldrh	r3, [r3, #10]
 80062f8:	461a      	mov	r2, r3
 80062fa:	693b      	ldr	r3, [r7, #16]
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d304      	bcc.n	800630a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8006300:	2300      	movs	r3, #0
 8006302:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	895b      	ldrh	r3, [r3, #10]
 800630e:	461a      	mov	r2, r3
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	4293      	cmp	r3, r2
 8006314:	d114      	bne.n	8006340 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8006316:	2300      	movs	r3, #0
 8006318:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d10c      	bne.n	8006340 <pbuf_copy+0x118>
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d009      	beq.n	8006340 <pbuf_copy+0x118>
 800632c:	4b20      	ldr	r3, [pc, #128]	; (80063b0 <pbuf_copy+0x188>)
 800632e:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8006332:	4924      	ldr	r1, [pc, #144]	; (80063c4 <pbuf_copy+0x19c>)
 8006334:	4820      	ldr	r0, [pc, #128]	; (80063b8 <pbuf_copy+0x190>)
 8006336:	f00a f9f7 	bl	8010728 <iprintf>
 800633a:	f06f 030f 	mvn.w	r3, #15
 800633e:	e032      	b.n	80063a6 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d013      	beq.n	800636e <pbuf_copy+0x146>
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	895a      	ldrh	r2, [r3, #10]
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	891b      	ldrh	r3, [r3, #8]
 800634e:	429a      	cmp	r2, r3
 8006350:	d10d      	bne.n	800636e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d009      	beq.n	800636e <pbuf_copy+0x146>
 800635a:	4b15      	ldr	r3, [pc, #84]	; (80063b0 <pbuf_copy+0x188>)
 800635c:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8006360:	4919      	ldr	r1, [pc, #100]	; (80063c8 <pbuf_copy+0x1a0>)
 8006362:	4815      	ldr	r0, [pc, #84]	; (80063b8 <pbuf_copy+0x190>)
 8006364:	f00a f9e0 	bl	8010728 <iprintf>
 8006368:	f06f 0305 	mvn.w	r3, #5
 800636c:	e01b      	b.n	80063a6 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d013      	beq.n	800639c <pbuf_copy+0x174>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	895a      	ldrh	r2, [r3, #10]
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	891b      	ldrh	r3, [r3, #8]
 800637c:	429a      	cmp	r2, r3
 800637e:	d10d      	bne.n	800639c <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d009      	beq.n	800639c <pbuf_copy+0x174>
 8006388:	4b09      	ldr	r3, [pc, #36]	; (80063b0 <pbuf_copy+0x188>)
 800638a:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800638e:	490e      	ldr	r1, [pc, #56]	; (80063c8 <pbuf_copy+0x1a0>)
 8006390:	4809      	ldr	r0, [pc, #36]	; (80063b8 <pbuf_copy+0x190>)
 8006392:	f00a f9c9 	bl	8010728 <iprintf>
 8006396:	f06f 0305 	mvn.w	r3, #5
 800639a:	e004      	b.n	80063a6 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	f47f af61 	bne.w	8006266 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80063a4:	2300      	movs	r3, #0
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	3718      	adds	r7, #24
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bd80      	pop	{r7, pc}
 80063ae:	bf00      	nop
 80063b0:	08011eb4 	.word	0x08011eb4
 80063b4:	0801215c 	.word	0x0801215c
 80063b8:	08011f14 	.word	0x08011f14
 80063bc:	0801218c 	.word	0x0801218c
 80063c0:	080121a4 	.word	0x080121a4
 80063c4:	080121c0 	.word	0x080121c0
 80063c8:	080121d0 	.word	0x080121d0

080063cc <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b088      	sub	sp, #32
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	60f8      	str	r0, [r7, #12]
 80063d4:	60b9      	str	r1, [r7, #8]
 80063d6:	4611      	mov	r1, r2
 80063d8:	461a      	mov	r2, r3
 80063da:	460b      	mov	r3, r1
 80063dc:	80fb      	strh	r3, [r7, #6]
 80063de:	4613      	mov	r3, r2
 80063e0:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 80063e2:	2300      	movs	r3, #0
 80063e4:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80063e6:	2300      	movs	r3, #0
 80063e8:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d108      	bne.n	8006402 <pbuf_copy_partial+0x36>
 80063f0:	4b2b      	ldr	r3, [pc, #172]	; (80064a0 <pbuf_copy_partial+0xd4>)
 80063f2:	f240 420a 	movw	r2, #1034	; 0x40a
 80063f6:	492b      	ldr	r1, [pc, #172]	; (80064a4 <pbuf_copy_partial+0xd8>)
 80063f8:	482b      	ldr	r0, [pc, #172]	; (80064a8 <pbuf_copy_partial+0xdc>)
 80063fa:	f00a f995 	bl	8010728 <iprintf>
 80063fe:	2300      	movs	r3, #0
 8006400:	e04a      	b.n	8006498 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d108      	bne.n	800641a <pbuf_copy_partial+0x4e>
 8006408:	4b25      	ldr	r3, [pc, #148]	; (80064a0 <pbuf_copy_partial+0xd4>)
 800640a:	f240 420b 	movw	r2, #1035	; 0x40b
 800640e:	4927      	ldr	r1, [pc, #156]	; (80064ac <pbuf_copy_partial+0xe0>)
 8006410:	4825      	ldr	r0, [pc, #148]	; (80064a8 <pbuf_copy_partial+0xdc>)
 8006412:	f00a f989 	bl	8010728 <iprintf>
 8006416:	2300      	movs	r3, #0
 8006418:	e03e      	b.n	8006498 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	61fb      	str	r3, [r7, #28]
 800641e:	e034      	b.n	800648a <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8006420:	88bb      	ldrh	r3, [r7, #4]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d00a      	beq.n	800643c <pbuf_copy_partial+0x70>
 8006426:	69fb      	ldr	r3, [r7, #28]
 8006428:	895b      	ldrh	r3, [r3, #10]
 800642a:	88ba      	ldrh	r2, [r7, #4]
 800642c:	429a      	cmp	r2, r3
 800642e:	d305      	bcc.n	800643c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8006430:	69fb      	ldr	r3, [r7, #28]
 8006432:	895b      	ldrh	r3, [r3, #10]
 8006434:	88ba      	ldrh	r2, [r7, #4]
 8006436:	1ad3      	subs	r3, r2, r3
 8006438:	80bb      	strh	r3, [r7, #4]
 800643a:	e023      	b.n	8006484 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800643c:	69fb      	ldr	r3, [r7, #28]
 800643e:	895a      	ldrh	r2, [r3, #10]
 8006440:	88bb      	ldrh	r3, [r7, #4]
 8006442:	1ad3      	subs	r3, r2, r3
 8006444:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8006446:	8b3a      	ldrh	r2, [r7, #24]
 8006448:	88fb      	ldrh	r3, [r7, #6]
 800644a:	429a      	cmp	r2, r3
 800644c:	d901      	bls.n	8006452 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800644e:	88fb      	ldrh	r3, [r7, #6]
 8006450:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8006452:	8b7b      	ldrh	r3, [r7, #26]
 8006454:	68ba      	ldr	r2, [r7, #8]
 8006456:	18d0      	adds	r0, r2, r3
 8006458:	69fb      	ldr	r3, [r7, #28]
 800645a:	685a      	ldr	r2, [r3, #4]
 800645c:	88bb      	ldrh	r3, [r7, #4]
 800645e:	4413      	add	r3, r2
 8006460:	8b3a      	ldrh	r2, [r7, #24]
 8006462:	4619      	mov	r1, r3
 8006464:	f00a f94a 	bl	80106fc <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8006468:	8afa      	ldrh	r2, [r7, #22]
 800646a:	8b3b      	ldrh	r3, [r7, #24]
 800646c:	4413      	add	r3, r2
 800646e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8006470:	8b7a      	ldrh	r2, [r7, #26]
 8006472:	8b3b      	ldrh	r3, [r7, #24]
 8006474:	4413      	add	r3, r2
 8006476:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8006478:	88fa      	ldrh	r2, [r7, #6]
 800647a:	8b3b      	ldrh	r3, [r7, #24]
 800647c:	1ad3      	subs	r3, r2, r3
 800647e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8006480:	2300      	movs	r3, #0
 8006482:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8006484:	69fb      	ldr	r3, [r7, #28]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	61fb      	str	r3, [r7, #28]
 800648a:	88fb      	ldrh	r3, [r7, #6]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d002      	beq.n	8006496 <pbuf_copy_partial+0xca>
 8006490:	69fb      	ldr	r3, [r7, #28]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d1c4      	bne.n	8006420 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8006496:	8afb      	ldrh	r3, [r7, #22]
}
 8006498:	4618      	mov	r0, r3
 800649a:	3720      	adds	r7, #32
 800649c:	46bd      	mov	sp, r7
 800649e:	bd80      	pop	{r7, pc}
 80064a0:	08011eb4 	.word	0x08011eb4
 80064a4:	080121fc 	.word	0x080121fc
 80064a8:	08011f14 	.word	0x08011f14
 80064ac:	0801221c 	.word	0x0801221c

080064b0 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b084      	sub	sp, #16
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	4603      	mov	r3, r0
 80064b8:	603a      	str	r2, [r7, #0]
 80064ba:	71fb      	strb	r3, [r7, #7]
 80064bc:	460b      	mov	r3, r1
 80064be:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	8919      	ldrh	r1, [r3, #8]
 80064c4:	88ba      	ldrh	r2, [r7, #4]
 80064c6:	79fb      	ldrb	r3, [r7, #7]
 80064c8:	4618      	mov	r0, r3
 80064ca:	f7ff faa1 	bl	8005a10 <pbuf_alloc>
 80064ce:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d101      	bne.n	80064da <pbuf_clone+0x2a>
    return NULL;
 80064d6:	2300      	movs	r3, #0
 80064d8:	e011      	b.n	80064fe <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 80064da:	6839      	ldr	r1, [r7, #0]
 80064dc:	68f8      	ldr	r0, [r7, #12]
 80064de:	f7ff fea3 	bl	8006228 <pbuf_copy>
 80064e2:	4603      	mov	r3, r0
 80064e4:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80064e6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d006      	beq.n	80064fc <pbuf_clone+0x4c>
 80064ee:	4b06      	ldr	r3, [pc, #24]	; (8006508 <pbuf_clone+0x58>)
 80064f0:	f240 5224 	movw	r2, #1316	; 0x524
 80064f4:	4905      	ldr	r1, [pc, #20]	; (800650c <pbuf_clone+0x5c>)
 80064f6:	4806      	ldr	r0, [pc, #24]	; (8006510 <pbuf_clone+0x60>)
 80064f8:	f00a f916 	bl	8010728 <iprintf>
  return q;
 80064fc:	68fb      	ldr	r3, [r7, #12]
}
 80064fe:	4618      	mov	r0, r3
 8006500:	3710      	adds	r7, #16
 8006502:	46bd      	mov	sp, r7
 8006504:	bd80      	pop	{r7, pc}
 8006506:	bf00      	nop
 8006508:	08011eb4 	.word	0x08011eb4
 800650c:	08012328 	.word	0x08012328
 8006510:	08011f14 	.word	0x08011f14

08006514 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8006518:	f00a f994 	bl	8010844 <rand>
 800651c:	4603      	mov	r3, r0
 800651e:	b29b      	uxth	r3, r3
 8006520:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8006524:	b29b      	uxth	r3, r3
 8006526:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800652a:	b29a      	uxth	r2, r3
 800652c:	4b01      	ldr	r3, [pc, #4]	; (8006534 <tcp_init+0x20>)
 800652e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8006530:	bf00      	nop
 8006532:	bd80      	pop	{r7, pc}
 8006534:	20000020 	.word	0x20000020

08006538 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b082      	sub	sp, #8
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	7d1b      	ldrb	r3, [r3, #20]
 8006544:	2b01      	cmp	r3, #1
 8006546:	d105      	bne.n	8006554 <tcp_free+0x1c>
 8006548:	4b06      	ldr	r3, [pc, #24]	; (8006564 <tcp_free+0x2c>)
 800654a:	22d4      	movs	r2, #212	; 0xd4
 800654c:	4906      	ldr	r1, [pc, #24]	; (8006568 <tcp_free+0x30>)
 800654e:	4807      	ldr	r0, [pc, #28]	; (800656c <tcp_free+0x34>)
 8006550:	f00a f8ea 	bl	8010728 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8006554:	6879      	ldr	r1, [r7, #4]
 8006556:	2001      	movs	r0, #1
 8006558:	f7fe fedc 	bl	8005314 <memp_free>
}
 800655c:	bf00      	nop
 800655e:	3708      	adds	r7, #8
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}
 8006564:	080123b4 	.word	0x080123b4
 8006568:	080123e4 	.word	0x080123e4
 800656c:	080123f8 	.word	0x080123f8

08006570 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b082      	sub	sp, #8
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	7d1b      	ldrb	r3, [r3, #20]
 800657c:	2b01      	cmp	r3, #1
 800657e:	d105      	bne.n	800658c <tcp_free_listen+0x1c>
 8006580:	4b06      	ldr	r3, [pc, #24]	; (800659c <tcp_free_listen+0x2c>)
 8006582:	22df      	movs	r2, #223	; 0xdf
 8006584:	4906      	ldr	r1, [pc, #24]	; (80065a0 <tcp_free_listen+0x30>)
 8006586:	4807      	ldr	r0, [pc, #28]	; (80065a4 <tcp_free_listen+0x34>)
 8006588:	f00a f8ce 	bl	8010728 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800658c:	6879      	ldr	r1, [r7, #4]
 800658e:	2002      	movs	r0, #2
 8006590:	f7fe fec0 	bl	8005314 <memp_free>
}
 8006594:	bf00      	nop
 8006596:	3708      	adds	r7, #8
 8006598:	46bd      	mov	sp, r7
 800659a:	bd80      	pop	{r7, pc}
 800659c:	080123b4 	.word	0x080123b4
 80065a0:	08012420 	.word	0x08012420
 80065a4:	080123f8 	.word	0x080123f8

080065a8 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 80065ac:	f000 fea2 	bl	80072f4 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 80065b0:	4b07      	ldr	r3, [pc, #28]	; (80065d0 <tcp_tmr+0x28>)
 80065b2:	781b      	ldrb	r3, [r3, #0]
 80065b4:	3301      	adds	r3, #1
 80065b6:	b2da      	uxtb	r2, r3
 80065b8:	4b05      	ldr	r3, [pc, #20]	; (80065d0 <tcp_tmr+0x28>)
 80065ba:	701a      	strb	r2, [r3, #0]
 80065bc:	4b04      	ldr	r3, [pc, #16]	; (80065d0 <tcp_tmr+0x28>)
 80065be:	781b      	ldrb	r3, [r3, #0]
 80065c0:	f003 0301 	and.w	r3, r3, #1
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d001      	beq.n	80065cc <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 80065c8:	f000 fb54 	bl	8006c74 <tcp_slowtmr>
  }
}
 80065cc:	bf00      	nop
 80065ce:	bd80      	pop	{r7, pc}
 80065d0:	20007c69 	.word	0x20007c69

080065d4 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b084      	sub	sp, #16
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
 80065dc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d105      	bne.n	80065f0 <tcp_remove_listener+0x1c>
 80065e4:	4b0d      	ldr	r3, [pc, #52]	; (800661c <tcp_remove_listener+0x48>)
 80065e6:	22ff      	movs	r2, #255	; 0xff
 80065e8:	490d      	ldr	r1, [pc, #52]	; (8006620 <tcp_remove_listener+0x4c>)
 80065ea:	480e      	ldr	r0, [pc, #56]	; (8006624 <tcp_remove_listener+0x50>)
 80065ec:	f00a f89c 	bl	8010728 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	60fb      	str	r3, [r7, #12]
 80065f4:	e00a      	b.n	800660c <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80065fa:	683a      	ldr	r2, [r7, #0]
 80065fc:	429a      	cmp	r2, r3
 80065fe:	d102      	bne.n	8006606 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	2200      	movs	r2, #0
 8006604:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	68db      	ldr	r3, [r3, #12]
 800660a:	60fb      	str	r3, [r7, #12]
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d1f1      	bne.n	80065f6 <tcp_remove_listener+0x22>
    }
  }
}
 8006612:	bf00      	nop
 8006614:	bf00      	nop
 8006616:	3710      	adds	r7, #16
 8006618:	46bd      	mov	sp, r7
 800661a:	bd80      	pop	{r7, pc}
 800661c:	080123b4 	.word	0x080123b4
 8006620:	0801243c 	.word	0x0801243c
 8006624:	080123f8 	.word	0x080123f8

08006628 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b084      	sub	sp, #16
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d106      	bne.n	8006644 <tcp_listen_closed+0x1c>
 8006636:	4b14      	ldr	r3, [pc, #80]	; (8006688 <tcp_listen_closed+0x60>)
 8006638:	f240 1211 	movw	r2, #273	; 0x111
 800663c:	4913      	ldr	r1, [pc, #76]	; (800668c <tcp_listen_closed+0x64>)
 800663e:	4814      	ldr	r0, [pc, #80]	; (8006690 <tcp_listen_closed+0x68>)
 8006640:	f00a f872 	bl	8010728 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	7d1b      	ldrb	r3, [r3, #20]
 8006648:	2b01      	cmp	r3, #1
 800664a:	d006      	beq.n	800665a <tcp_listen_closed+0x32>
 800664c:	4b0e      	ldr	r3, [pc, #56]	; (8006688 <tcp_listen_closed+0x60>)
 800664e:	f44f 7289 	mov.w	r2, #274	; 0x112
 8006652:	4910      	ldr	r1, [pc, #64]	; (8006694 <tcp_listen_closed+0x6c>)
 8006654:	480e      	ldr	r0, [pc, #56]	; (8006690 <tcp_listen_closed+0x68>)
 8006656:	f00a f867 	bl	8010728 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800665a:	2301      	movs	r3, #1
 800665c:	60fb      	str	r3, [r7, #12]
 800665e:	e00b      	b.n	8006678 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8006660:	4a0d      	ldr	r2, [pc, #52]	; (8006698 <tcp_listen_closed+0x70>)
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	6879      	ldr	r1, [r7, #4]
 800666c:	4618      	mov	r0, r3
 800666e:	f7ff ffb1 	bl	80065d4 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	3301      	adds	r3, #1
 8006676:	60fb      	str	r3, [r7, #12]
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	2b03      	cmp	r3, #3
 800667c:	d9f0      	bls.n	8006660 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800667e:	bf00      	nop
 8006680:	bf00      	nop
 8006682:	3710      	adds	r7, #16
 8006684:	46bd      	mov	sp, r7
 8006686:	bd80      	pop	{r7, pc}
 8006688:	080123b4 	.word	0x080123b4
 800668c:	08012464 	.word	0x08012464
 8006690:	080123f8 	.word	0x080123f8
 8006694:	08012470 	.word	0x08012470
 8006698:	08014734 	.word	0x08014734

0800669c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800669c:	b5b0      	push	{r4, r5, r7, lr}
 800669e:	b088      	sub	sp, #32
 80066a0:	af04      	add	r7, sp, #16
 80066a2:	6078      	str	r0, [r7, #4]
 80066a4:	460b      	mov	r3, r1
 80066a6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d106      	bne.n	80066bc <tcp_close_shutdown+0x20>
 80066ae:	4b63      	ldr	r3, [pc, #396]	; (800683c <tcp_close_shutdown+0x1a0>)
 80066b0:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80066b4:	4962      	ldr	r1, [pc, #392]	; (8006840 <tcp_close_shutdown+0x1a4>)
 80066b6:	4863      	ldr	r0, [pc, #396]	; (8006844 <tcp_close_shutdown+0x1a8>)
 80066b8:	f00a f836 	bl	8010728 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80066bc:	78fb      	ldrb	r3, [r7, #3]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d066      	beq.n	8006790 <tcp_close_shutdown+0xf4>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	7d1b      	ldrb	r3, [r3, #20]
 80066c6:	2b04      	cmp	r3, #4
 80066c8:	d003      	beq.n	80066d2 <tcp_close_shutdown+0x36>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	7d1b      	ldrb	r3, [r3, #20]
 80066ce:	2b07      	cmp	r3, #7
 80066d0:	d15e      	bne.n	8006790 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d104      	bne.n	80066e4 <tcp_close_shutdown+0x48>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066de:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80066e2:	d055      	beq.n	8006790 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	8b5b      	ldrh	r3, [r3, #26]
 80066e8:	f003 0310 	and.w	r3, r3, #16
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d106      	bne.n	80066fe <tcp_close_shutdown+0x62>
 80066f0:	4b52      	ldr	r3, [pc, #328]	; (800683c <tcp_close_shutdown+0x1a0>)
 80066f2:	f44f 72b2 	mov.w	r2, #356	; 0x164
 80066f6:	4954      	ldr	r1, [pc, #336]	; (8006848 <tcp_close_shutdown+0x1ac>)
 80066f8:	4852      	ldr	r0, [pc, #328]	; (8006844 <tcp_close_shutdown+0x1a8>)
 80066fa:	f00a f815 	bl	8010728 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8006706:	687d      	ldr	r5, [r7, #4]
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	3304      	adds	r3, #4
 800670c:	687a      	ldr	r2, [r7, #4]
 800670e:	8ad2      	ldrh	r2, [r2, #22]
 8006710:	6879      	ldr	r1, [r7, #4]
 8006712:	8b09      	ldrh	r1, [r1, #24]
 8006714:	9102      	str	r1, [sp, #8]
 8006716:	9201      	str	r2, [sp, #4]
 8006718:	9300      	str	r3, [sp, #0]
 800671a:	462b      	mov	r3, r5
 800671c:	4622      	mov	r2, r4
 800671e:	4601      	mov	r1, r0
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	f004 fe91 	bl	800b448 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f001 f8c6 	bl	80078b8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800672c:	4b47      	ldr	r3, [pc, #284]	; (800684c <tcp_close_shutdown+0x1b0>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	687a      	ldr	r2, [r7, #4]
 8006732:	429a      	cmp	r2, r3
 8006734:	d105      	bne.n	8006742 <tcp_close_shutdown+0xa6>
 8006736:	4b45      	ldr	r3, [pc, #276]	; (800684c <tcp_close_shutdown+0x1b0>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	68db      	ldr	r3, [r3, #12]
 800673c:	4a43      	ldr	r2, [pc, #268]	; (800684c <tcp_close_shutdown+0x1b0>)
 800673e:	6013      	str	r3, [r2, #0]
 8006740:	e013      	b.n	800676a <tcp_close_shutdown+0xce>
 8006742:	4b42      	ldr	r3, [pc, #264]	; (800684c <tcp_close_shutdown+0x1b0>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	60fb      	str	r3, [r7, #12]
 8006748:	e00c      	b.n	8006764 <tcp_close_shutdown+0xc8>
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	68db      	ldr	r3, [r3, #12]
 800674e:	687a      	ldr	r2, [r7, #4]
 8006750:	429a      	cmp	r2, r3
 8006752:	d104      	bne.n	800675e <tcp_close_shutdown+0xc2>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	68da      	ldr	r2, [r3, #12]
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	60da      	str	r2, [r3, #12]
 800675c:	e005      	b.n	800676a <tcp_close_shutdown+0xce>
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	68db      	ldr	r3, [r3, #12]
 8006762:	60fb      	str	r3, [r7, #12]
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d1ef      	bne.n	800674a <tcp_close_shutdown+0xae>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2200      	movs	r2, #0
 800676e:	60da      	str	r2, [r3, #12]
 8006770:	4b37      	ldr	r3, [pc, #220]	; (8006850 <tcp_close_shutdown+0x1b4>)
 8006772:	2201      	movs	r2, #1
 8006774:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8006776:	4b37      	ldr	r3, [pc, #220]	; (8006854 <tcp_close_shutdown+0x1b8>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	687a      	ldr	r2, [r7, #4]
 800677c:	429a      	cmp	r2, r3
 800677e:	d102      	bne.n	8006786 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8006780:	f003 fd5e 	bl	800a240 <tcp_trigger_input_pcb_close>
 8006784:	e002      	b.n	800678c <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f7ff fed6 	bl	8006538 <tcp_free>
      }
      return ERR_OK;
 800678c:	2300      	movs	r3, #0
 800678e:	e050      	b.n	8006832 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	7d1b      	ldrb	r3, [r3, #20]
 8006794:	2b02      	cmp	r3, #2
 8006796:	d03b      	beq.n	8006810 <tcp_close_shutdown+0x174>
 8006798:	2b02      	cmp	r3, #2
 800679a:	dc44      	bgt.n	8006826 <tcp_close_shutdown+0x18a>
 800679c:	2b00      	cmp	r3, #0
 800679e:	d002      	beq.n	80067a6 <tcp_close_shutdown+0x10a>
 80067a0:	2b01      	cmp	r3, #1
 80067a2:	d02a      	beq.n	80067fa <tcp_close_shutdown+0x15e>
 80067a4:	e03f      	b.n	8006826 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	8adb      	ldrh	r3, [r3, #22]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d021      	beq.n	80067f2 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80067ae:	4b2a      	ldr	r3, [pc, #168]	; (8006858 <tcp_close_shutdown+0x1bc>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	687a      	ldr	r2, [r7, #4]
 80067b4:	429a      	cmp	r2, r3
 80067b6:	d105      	bne.n	80067c4 <tcp_close_shutdown+0x128>
 80067b8:	4b27      	ldr	r3, [pc, #156]	; (8006858 <tcp_close_shutdown+0x1bc>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	68db      	ldr	r3, [r3, #12]
 80067be:	4a26      	ldr	r2, [pc, #152]	; (8006858 <tcp_close_shutdown+0x1bc>)
 80067c0:	6013      	str	r3, [r2, #0]
 80067c2:	e013      	b.n	80067ec <tcp_close_shutdown+0x150>
 80067c4:	4b24      	ldr	r3, [pc, #144]	; (8006858 <tcp_close_shutdown+0x1bc>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	60bb      	str	r3, [r7, #8]
 80067ca:	e00c      	b.n	80067e6 <tcp_close_shutdown+0x14a>
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	68db      	ldr	r3, [r3, #12]
 80067d0:	687a      	ldr	r2, [r7, #4]
 80067d2:	429a      	cmp	r2, r3
 80067d4:	d104      	bne.n	80067e0 <tcp_close_shutdown+0x144>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	68da      	ldr	r2, [r3, #12]
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	60da      	str	r2, [r3, #12]
 80067de:	e005      	b.n	80067ec <tcp_close_shutdown+0x150>
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	68db      	ldr	r3, [r3, #12]
 80067e4:	60bb      	str	r3, [r7, #8]
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d1ef      	bne.n	80067cc <tcp_close_shutdown+0x130>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2200      	movs	r2, #0
 80067f0:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	f7ff fea0 	bl	8006538 <tcp_free>
      break;
 80067f8:	e01a      	b.n	8006830 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f7ff ff14 	bl	8006628 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8006800:	6879      	ldr	r1, [r7, #4]
 8006802:	4816      	ldr	r0, [pc, #88]	; (800685c <tcp_close_shutdown+0x1c0>)
 8006804:	f001 f8a8 	bl	8007958 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	f7ff feb1 	bl	8006570 <tcp_free_listen>
      break;
 800680e:	e00f      	b.n	8006830 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8006810:	6879      	ldr	r1, [r7, #4]
 8006812:	480e      	ldr	r0, [pc, #56]	; (800684c <tcp_close_shutdown+0x1b0>)
 8006814:	f001 f8a0 	bl	8007958 <tcp_pcb_remove>
 8006818:	4b0d      	ldr	r3, [pc, #52]	; (8006850 <tcp_close_shutdown+0x1b4>)
 800681a:	2201      	movs	r2, #1
 800681c:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f7ff fe8a 	bl	8006538 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8006824:	e004      	b.n	8006830 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f000 f81a 	bl	8006860 <tcp_close_shutdown_fin>
 800682c:	4603      	mov	r3, r0
 800682e:	e000      	b.n	8006832 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8006830:	2300      	movs	r3, #0
}
 8006832:	4618      	mov	r0, r3
 8006834:	3710      	adds	r7, #16
 8006836:	46bd      	mov	sp, r7
 8006838:	bdb0      	pop	{r4, r5, r7, pc}
 800683a:	bf00      	nop
 800683c:	080123b4 	.word	0x080123b4
 8006840:	08012488 	.word	0x08012488
 8006844:	080123f8 	.word	0x080123f8
 8006848:	080124a8 	.word	0x080124a8
 800684c:	20007c60 	.word	0x20007c60
 8006850:	20007c68 	.word	0x20007c68
 8006854:	20007ca0 	.word	0x20007ca0
 8006858:	20007c58 	.word	0x20007c58
 800685c:	20007c5c 	.word	0x20007c5c

08006860 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b084      	sub	sp, #16
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d106      	bne.n	800687c <tcp_close_shutdown_fin+0x1c>
 800686e:	4b2e      	ldr	r3, [pc, #184]	; (8006928 <tcp_close_shutdown_fin+0xc8>)
 8006870:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8006874:	492d      	ldr	r1, [pc, #180]	; (800692c <tcp_close_shutdown_fin+0xcc>)
 8006876:	482e      	ldr	r0, [pc, #184]	; (8006930 <tcp_close_shutdown_fin+0xd0>)
 8006878:	f009 ff56 	bl	8010728 <iprintf>

  switch (pcb->state) {
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	7d1b      	ldrb	r3, [r3, #20]
 8006880:	2b07      	cmp	r3, #7
 8006882:	d020      	beq.n	80068c6 <tcp_close_shutdown_fin+0x66>
 8006884:	2b07      	cmp	r3, #7
 8006886:	dc2b      	bgt.n	80068e0 <tcp_close_shutdown_fin+0x80>
 8006888:	2b03      	cmp	r3, #3
 800688a:	d002      	beq.n	8006892 <tcp_close_shutdown_fin+0x32>
 800688c:	2b04      	cmp	r3, #4
 800688e:	d00d      	beq.n	80068ac <tcp_close_shutdown_fin+0x4c>
 8006890:	e026      	b.n	80068e0 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f003 fee6 	bl	800a664 <tcp_send_fin>
 8006898:	4603      	mov	r3, r0
 800689a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800689c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d11f      	bne.n	80068e4 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2205      	movs	r2, #5
 80068a8:	751a      	strb	r2, [r3, #20]
      }
      break;
 80068aa:	e01b      	b.n	80068e4 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f003 fed9 	bl	800a664 <tcp_send_fin>
 80068b2:	4603      	mov	r3, r0
 80068b4:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80068b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d114      	bne.n	80068e8 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2205      	movs	r2, #5
 80068c2:	751a      	strb	r2, [r3, #20]
      }
      break;
 80068c4:	e010      	b.n	80068e8 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f003 fecc 	bl	800a664 <tcp_send_fin>
 80068cc:	4603      	mov	r3, r0
 80068ce:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80068d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d109      	bne.n	80068ec <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2209      	movs	r2, #9
 80068dc:	751a      	strb	r2, [r3, #20]
      }
      break;
 80068de:	e005      	b.n	80068ec <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 80068e0:	2300      	movs	r3, #0
 80068e2:	e01c      	b.n	800691e <tcp_close_shutdown_fin+0xbe>
      break;
 80068e4:	bf00      	nop
 80068e6:	e002      	b.n	80068ee <tcp_close_shutdown_fin+0x8e>
      break;
 80068e8:	bf00      	nop
 80068ea:	e000      	b.n	80068ee <tcp_close_shutdown_fin+0x8e>
      break;
 80068ec:	bf00      	nop
  }

  if (err == ERR_OK) {
 80068ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d103      	bne.n	80068fe <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f003 fff2 	bl	800a8e0 <tcp_output>
 80068fc:	e00d      	b.n	800691a <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 80068fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006902:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006906:	d108      	bne.n	800691a <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	8b5b      	ldrh	r3, [r3, #26]
 800690c:	f043 0308 	orr.w	r3, r3, #8
 8006910:	b29a      	uxth	r2, r3
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8006916:	2300      	movs	r3, #0
 8006918:	e001      	b.n	800691e <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800691a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800691e:	4618      	mov	r0, r3
 8006920:	3710      	adds	r7, #16
 8006922:	46bd      	mov	sp, r7
 8006924:	bd80      	pop	{r7, pc}
 8006926:	bf00      	nop
 8006928:	080123b4 	.word	0x080123b4
 800692c:	08012464 	.word	0x08012464
 8006930:	080123f8 	.word	0x080123f8

08006934 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b082      	sub	sp, #8
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d109      	bne.n	8006956 <tcp_close+0x22>
 8006942:	4b0f      	ldr	r3, [pc, #60]	; (8006980 <tcp_close+0x4c>)
 8006944:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8006948:	490e      	ldr	r1, [pc, #56]	; (8006984 <tcp_close+0x50>)
 800694a:	480f      	ldr	r0, [pc, #60]	; (8006988 <tcp_close+0x54>)
 800694c:	f009 feec 	bl	8010728 <iprintf>
 8006950:	f06f 030f 	mvn.w	r3, #15
 8006954:	e00f      	b.n	8006976 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	7d1b      	ldrb	r3, [r3, #20]
 800695a:	2b01      	cmp	r3, #1
 800695c:	d006      	beq.n	800696c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	8b5b      	ldrh	r3, [r3, #26]
 8006962:	f043 0310 	orr.w	r3, r3, #16
 8006966:	b29a      	uxth	r2, r3
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800696c:	2101      	movs	r1, #1
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f7ff fe94 	bl	800669c <tcp_close_shutdown>
 8006974:	4603      	mov	r3, r0
}
 8006976:	4618      	mov	r0, r3
 8006978:	3708      	adds	r7, #8
 800697a:	46bd      	mov	sp, r7
 800697c:	bd80      	pop	{r7, pc}
 800697e:	bf00      	nop
 8006980:	080123b4 	.word	0x080123b4
 8006984:	080124c4 	.word	0x080124c4
 8006988:	080123f8 	.word	0x080123f8

0800698c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b08e      	sub	sp, #56	; 0x38
 8006990:	af04      	add	r7, sp, #16
 8006992:	6078      	str	r0, [r7, #4]
 8006994:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d107      	bne.n	80069ac <tcp_abandon+0x20>
 800699c:	4b52      	ldr	r3, [pc, #328]	; (8006ae8 <tcp_abandon+0x15c>)
 800699e:	f240 223d 	movw	r2, #573	; 0x23d
 80069a2:	4952      	ldr	r1, [pc, #328]	; (8006aec <tcp_abandon+0x160>)
 80069a4:	4852      	ldr	r0, [pc, #328]	; (8006af0 <tcp_abandon+0x164>)
 80069a6:	f009 febf 	bl	8010728 <iprintf>
 80069aa:	e099      	b.n	8006ae0 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	7d1b      	ldrb	r3, [r3, #20]
 80069b0:	2b01      	cmp	r3, #1
 80069b2:	d106      	bne.n	80069c2 <tcp_abandon+0x36>
 80069b4:	4b4c      	ldr	r3, [pc, #304]	; (8006ae8 <tcp_abandon+0x15c>)
 80069b6:	f44f 7210 	mov.w	r2, #576	; 0x240
 80069ba:	494e      	ldr	r1, [pc, #312]	; (8006af4 <tcp_abandon+0x168>)
 80069bc:	484c      	ldr	r0, [pc, #304]	; (8006af0 <tcp_abandon+0x164>)
 80069be:	f009 feb3 	bl	8010728 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	7d1b      	ldrb	r3, [r3, #20]
 80069c6:	2b0a      	cmp	r3, #10
 80069c8:	d107      	bne.n	80069da <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80069ca:	6879      	ldr	r1, [r7, #4]
 80069cc:	484a      	ldr	r0, [pc, #296]	; (8006af8 <tcp_abandon+0x16c>)
 80069ce:	f000 ffc3 	bl	8007958 <tcp_pcb_remove>
    tcp_free(pcb);
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f7ff fdb0 	bl	8006538 <tcp_free>
 80069d8:	e082      	b.n	8006ae0 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 80069da:	2300      	movs	r3, #0
 80069dc:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 80069de:	2300      	movs	r3, #0
 80069e0:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069e6:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ec:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069f4:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	691b      	ldr	r3, [r3, #16]
 80069fa:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	7d1b      	ldrb	r3, [r3, #20]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d126      	bne.n	8006a52 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	8adb      	ldrh	r3, [r3, #22]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d02e      	beq.n	8006a6a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8006a0c:	4b3b      	ldr	r3, [pc, #236]	; (8006afc <tcp_abandon+0x170>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	687a      	ldr	r2, [r7, #4]
 8006a12:	429a      	cmp	r2, r3
 8006a14:	d105      	bne.n	8006a22 <tcp_abandon+0x96>
 8006a16:	4b39      	ldr	r3, [pc, #228]	; (8006afc <tcp_abandon+0x170>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	68db      	ldr	r3, [r3, #12]
 8006a1c:	4a37      	ldr	r2, [pc, #220]	; (8006afc <tcp_abandon+0x170>)
 8006a1e:	6013      	str	r3, [r2, #0]
 8006a20:	e013      	b.n	8006a4a <tcp_abandon+0xbe>
 8006a22:	4b36      	ldr	r3, [pc, #216]	; (8006afc <tcp_abandon+0x170>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	61fb      	str	r3, [r7, #28]
 8006a28:	e00c      	b.n	8006a44 <tcp_abandon+0xb8>
 8006a2a:	69fb      	ldr	r3, [r7, #28]
 8006a2c:	68db      	ldr	r3, [r3, #12]
 8006a2e:	687a      	ldr	r2, [r7, #4]
 8006a30:	429a      	cmp	r2, r3
 8006a32:	d104      	bne.n	8006a3e <tcp_abandon+0xb2>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	68da      	ldr	r2, [r3, #12]
 8006a38:	69fb      	ldr	r3, [r7, #28]
 8006a3a:	60da      	str	r2, [r3, #12]
 8006a3c:	e005      	b.n	8006a4a <tcp_abandon+0xbe>
 8006a3e:	69fb      	ldr	r3, [r7, #28]
 8006a40:	68db      	ldr	r3, [r3, #12]
 8006a42:	61fb      	str	r3, [r7, #28]
 8006a44:	69fb      	ldr	r3, [r7, #28]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d1ef      	bne.n	8006a2a <tcp_abandon+0x9e>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	60da      	str	r2, [r3, #12]
 8006a50:	e00b      	b.n	8006a6a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	8adb      	ldrh	r3, [r3, #22]
 8006a5a:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8006a5c:	6879      	ldr	r1, [r7, #4]
 8006a5e:	4828      	ldr	r0, [pc, #160]	; (8006b00 <tcp_abandon+0x174>)
 8006a60:	f000 ff7a 	bl	8007958 <tcp_pcb_remove>
 8006a64:	4b27      	ldr	r3, [pc, #156]	; (8006b04 <tcp_abandon+0x178>)
 8006a66:	2201      	movs	r2, #1
 8006a68:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d004      	beq.n	8006a7c <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a76:	4618      	mov	r0, r3
 8006a78:	f000 fd1c 	bl	80074b4 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d004      	beq.n	8006a8e <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a88:	4618      	mov	r0, r3
 8006a8a:	f000 fd13 	bl	80074b4 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d004      	beq.n	8006aa0 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f000 fd0a 	bl	80074b4 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8006aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d00e      	beq.n	8006ac4 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8006aa6:	6879      	ldr	r1, [r7, #4]
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	3304      	adds	r3, #4
 8006aac:	687a      	ldr	r2, [r7, #4]
 8006aae:	8b12      	ldrh	r2, [r2, #24]
 8006ab0:	9202      	str	r2, [sp, #8]
 8006ab2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006ab4:	9201      	str	r2, [sp, #4]
 8006ab6:	9300      	str	r3, [sp, #0]
 8006ab8:	460b      	mov	r3, r1
 8006aba:	697a      	ldr	r2, [r7, #20]
 8006abc:	69b9      	ldr	r1, [r7, #24]
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f004 fcc2 	bl	800b448 <tcp_rst>
    }
    last_state = pcb->state;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	7d1b      	ldrb	r3, [r3, #20]
 8006ac8:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f7ff fd34 	bl	8006538 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8006ad0:	693b      	ldr	r3, [r7, #16]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d004      	beq.n	8006ae0 <tcp_abandon+0x154>
 8006ad6:	693b      	ldr	r3, [r7, #16]
 8006ad8:	f06f 010c 	mvn.w	r1, #12
 8006adc:	68f8      	ldr	r0, [r7, #12]
 8006ade:	4798      	blx	r3
  }
}
 8006ae0:	3728      	adds	r7, #40	; 0x28
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bd80      	pop	{r7, pc}
 8006ae6:	bf00      	nop
 8006ae8:	080123b4 	.word	0x080123b4
 8006aec:	080124f8 	.word	0x080124f8
 8006af0:	080123f8 	.word	0x080123f8
 8006af4:	08012514 	.word	0x08012514
 8006af8:	20007c64 	.word	0x20007c64
 8006afc:	20007c58 	.word	0x20007c58
 8006b00:	20007c60 	.word	0x20007c60
 8006b04:	20007c68 	.word	0x20007c68

08006b08 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b082      	sub	sp, #8
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8006b10:	2101      	movs	r1, #1
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f7ff ff3a 	bl	800698c <tcp_abandon>
}
 8006b18:	bf00      	nop
 8006b1a:	3708      	adds	r7, #8
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}

08006b20 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b084      	sub	sp, #16
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d106      	bne.n	8006b3c <tcp_update_rcv_ann_wnd+0x1c>
 8006b2e:	4b25      	ldr	r3, [pc, #148]	; (8006bc4 <tcp_update_rcv_ann_wnd+0xa4>)
 8006b30:	f240 32a6 	movw	r2, #934	; 0x3a6
 8006b34:	4924      	ldr	r1, [pc, #144]	; (8006bc8 <tcp_update_rcv_ann_wnd+0xa8>)
 8006b36:	4825      	ldr	r0, [pc, #148]	; (8006bcc <tcp_update_rcv_ann_wnd+0xac>)
 8006b38:	f009 fdf6 	bl	8010728 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b40:	687a      	ldr	r2, [r7, #4]
 8006b42:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8006b44:	4413      	add	r3, r2
 8006b46:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b4c:	687a      	ldr	r2, [r7, #4]
 8006b4e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8006b50:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8006b54:	bf28      	it	cs
 8006b56:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8006b5a:	b292      	uxth	r2, r2
 8006b5c:	4413      	add	r3, r2
 8006b5e:	68fa      	ldr	r2, [r7, #12]
 8006b60:	1ad3      	subs	r3, r2, r3
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	db08      	blt.n	8006b78 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b72:	68fa      	ldr	r2, [r7, #12]
 8006b74:	1ad3      	subs	r3, r2, r3
 8006b76:	e020      	b.n	8006bba <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b80:	1ad3      	subs	r3, r2, r3
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	dd03      	ble.n	8006b8e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006b8c:	e014      	b.n	8006bb8 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b96:	1ad3      	subs	r3, r2, r3
 8006b98:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ba0:	d306      	bcc.n	8006bb0 <tcp_update_rcv_ann_wnd+0x90>
 8006ba2:	4b08      	ldr	r3, [pc, #32]	; (8006bc4 <tcp_update_rcv_ann_wnd+0xa4>)
 8006ba4:	f240 32b6 	movw	r2, #950	; 0x3b6
 8006ba8:	4909      	ldr	r1, [pc, #36]	; (8006bd0 <tcp_update_rcv_ann_wnd+0xb0>)
 8006baa:	4808      	ldr	r0, [pc, #32]	; (8006bcc <tcp_update_rcv_ann_wnd+0xac>)
 8006bac:	f009 fdbc 	bl	8010728 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	b29a      	uxth	r2, r3
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8006bb8:	2300      	movs	r3, #0
  }
}
 8006bba:	4618      	mov	r0, r3
 8006bbc:	3710      	adds	r7, #16
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bd80      	pop	{r7, pc}
 8006bc2:	bf00      	nop
 8006bc4:	080123b4 	.word	0x080123b4
 8006bc8:	08012610 	.word	0x08012610
 8006bcc:	080123f8 	.word	0x080123f8
 8006bd0:	08012634 	.word	0x08012634

08006bd4 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b084      	sub	sp, #16
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
 8006bdc:	460b      	mov	r3, r1
 8006bde:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d107      	bne.n	8006bf6 <tcp_recved+0x22>
 8006be6:	4b1f      	ldr	r3, [pc, #124]	; (8006c64 <tcp_recved+0x90>)
 8006be8:	f240 32cf 	movw	r2, #975	; 0x3cf
 8006bec:	491e      	ldr	r1, [pc, #120]	; (8006c68 <tcp_recved+0x94>)
 8006bee:	481f      	ldr	r0, [pc, #124]	; (8006c6c <tcp_recved+0x98>)
 8006bf0:	f009 fd9a 	bl	8010728 <iprintf>
 8006bf4:	e032      	b.n	8006c5c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	7d1b      	ldrb	r3, [r3, #20]
 8006bfa:	2b01      	cmp	r3, #1
 8006bfc:	d106      	bne.n	8006c0c <tcp_recved+0x38>
 8006bfe:	4b19      	ldr	r3, [pc, #100]	; (8006c64 <tcp_recved+0x90>)
 8006c00:	f240 32d2 	movw	r2, #978	; 0x3d2
 8006c04:	491a      	ldr	r1, [pc, #104]	; (8006c70 <tcp_recved+0x9c>)
 8006c06:	4819      	ldr	r0, [pc, #100]	; (8006c6c <tcp_recved+0x98>)
 8006c08:	f009 fd8e 	bl	8010728 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8006c10:	887b      	ldrh	r3, [r7, #2]
 8006c12:	4413      	add	r3, r2
 8006c14:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8006c16:	89fb      	ldrh	r3, [r7, #14]
 8006c18:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8006c1c:	d804      	bhi.n	8006c28 <tcp_recved+0x54>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c22:	89fa      	ldrh	r2, [r7, #14]
 8006c24:	429a      	cmp	r2, r3
 8006c26:	d204      	bcs.n	8006c32 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8006c2e:	851a      	strh	r2, [r3, #40]	; 0x28
 8006c30:	e002      	b.n	8006c38 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	89fa      	ldrh	r2, [r7, #14]
 8006c36:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	f7ff ff71 	bl	8006b20 <tcp_update_rcv_ann_wnd>
 8006c3e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8006c46:	d309      	bcc.n	8006c5c <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	8b5b      	ldrh	r3, [r3, #26]
 8006c4c:	f043 0302 	orr.w	r3, r3, #2
 8006c50:	b29a      	uxth	r2, r3
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f003 fe42 	bl	800a8e0 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8006c5c:	3710      	adds	r7, #16
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bd80      	pop	{r7, pc}
 8006c62:	bf00      	nop
 8006c64:	080123b4 	.word	0x080123b4
 8006c68:	08012650 	.word	0x08012650
 8006c6c:	080123f8 	.word	0x080123f8
 8006c70:	08012668 	.word	0x08012668

08006c74 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8006c74:	b5b0      	push	{r4, r5, r7, lr}
 8006c76:	b090      	sub	sp, #64	; 0x40
 8006c78:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8006c80:	4b94      	ldr	r3, [pc, #592]	; (8006ed4 <tcp_slowtmr+0x260>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	3301      	adds	r3, #1
 8006c86:	4a93      	ldr	r2, [pc, #588]	; (8006ed4 <tcp_slowtmr+0x260>)
 8006c88:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8006c8a:	4b93      	ldr	r3, [pc, #588]	; (8006ed8 <tcp_slowtmr+0x264>)
 8006c8c:	781b      	ldrb	r3, [r3, #0]
 8006c8e:	3301      	adds	r3, #1
 8006c90:	b2da      	uxtb	r2, r3
 8006c92:	4b91      	ldr	r3, [pc, #580]	; (8006ed8 <tcp_slowtmr+0x264>)
 8006c94:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8006c96:	2300      	movs	r3, #0
 8006c98:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8006c9a:	4b90      	ldr	r3, [pc, #576]	; (8006edc <tcp_slowtmr+0x268>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8006ca0:	e29f      	b.n	80071e2 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8006ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ca4:	7d1b      	ldrb	r3, [r3, #20]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d106      	bne.n	8006cb8 <tcp_slowtmr+0x44>
 8006caa:	4b8d      	ldr	r3, [pc, #564]	; (8006ee0 <tcp_slowtmr+0x26c>)
 8006cac:	f240 42be 	movw	r2, #1214	; 0x4be
 8006cb0:	498c      	ldr	r1, [pc, #560]	; (8006ee4 <tcp_slowtmr+0x270>)
 8006cb2:	488d      	ldr	r0, [pc, #564]	; (8006ee8 <tcp_slowtmr+0x274>)
 8006cb4:	f009 fd38 	bl	8010728 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8006cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cba:	7d1b      	ldrb	r3, [r3, #20]
 8006cbc:	2b01      	cmp	r3, #1
 8006cbe:	d106      	bne.n	8006cce <tcp_slowtmr+0x5a>
 8006cc0:	4b87      	ldr	r3, [pc, #540]	; (8006ee0 <tcp_slowtmr+0x26c>)
 8006cc2:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8006cc6:	4989      	ldr	r1, [pc, #548]	; (8006eec <tcp_slowtmr+0x278>)
 8006cc8:	4887      	ldr	r0, [pc, #540]	; (8006ee8 <tcp_slowtmr+0x274>)
 8006cca:	f009 fd2d 	bl	8010728 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8006cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cd0:	7d1b      	ldrb	r3, [r3, #20]
 8006cd2:	2b0a      	cmp	r3, #10
 8006cd4:	d106      	bne.n	8006ce4 <tcp_slowtmr+0x70>
 8006cd6:	4b82      	ldr	r3, [pc, #520]	; (8006ee0 <tcp_slowtmr+0x26c>)
 8006cd8:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8006cdc:	4984      	ldr	r1, [pc, #528]	; (8006ef0 <tcp_slowtmr+0x27c>)
 8006cde:	4882      	ldr	r0, [pc, #520]	; (8006ee8 <tcp_slowtmr+0x274>)
 8006ce0:	f009 fd22 	bl	8010728 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8006ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ce6:	7f9a      	ldrb	r2, [r3, #30]
 8006ce8:	4b7b      	ldr	r3, [pc, #492]	; (8006ed8 <tcp_slowtmr+0x264>)
 8006cea:	781b      	ldrb	r3, [r3, #0]
 8006cec:	429a      	cmp	r2, r3
 8006cee:	d105      	bne.n	8006cfc <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8006cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cf2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8006cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cf6:	68db      	ldr	r3, [r3, #12]
 8006cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8006cfa:	e272      	b.n	80071e2 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 8006cfc:	4b76      	ldr	r3, [pc, #472]	; (8006ed8 <tcp_slowtmr+0x264>)
 8006cfe:	781a      	ldrb	r2, [r3, #0]
 8006d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d02:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8006d04:	2300      	movs	r3, #0
 8006d06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8006d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d12:	7d1b      	ldrb	r3, [r3, #20]
 8006d14:	2b02      	cmp	r3, #2
 8006d16:	d10a      	bne.n	8006d2e <tcp_slowtmr+0xba>
 8006d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d1a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006d1e:	2b05      	cmp	r3, #5
 8006d20:	d905      	bls.n	8006d2e <tcp_slowtmr+0xba>
      ++pcb_remove;
 8006d22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d26:	3301      	adds	r3, #1
 8006d28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006d2c:	e11e      	b.n	8006f6c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8006d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d30:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006d34:	2b0b      	cmp	r3, #11
 8006d36:	d905      	bls.n	8006d44 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8006d38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d3c:	3301      	adds	r3, #1
 8006d3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006d42:	e113      	b.n	8006f6c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8006d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d46:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d075      	beq.n	8006e3a <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8006d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d006      	beq.n	8006d64 <tcp_slowtmr+0xf0>
 8006d56:	4b62      	ldr	r3, [pc, #392]	; (8006ee0 <tcp_slowtmr+0x26c>)
 8006d58:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8006d5c:	4965      	ldr	r1, [pc, #404]	; (8006ef4 <tcp_slowtmr+0x280>)
 8006d5e:	4862      	ldr	r0, [pc, #392]	; (8006ee8 <tcp_slowtmr+0x274>)
 8006d60:	f009 fce2 	bl	8010728 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8006d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d106      	bne.n	8006d7a <tcp_slowtmr+0x106>
 8006d6c:	4b5c      	ldr	r3, [pc, #368]	; (8006ee0 <tcp_slowtmr+0x26c>)
 8006d6e:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8006d72:	4961      	ldr	r1, [pc, #388]	; (8006ef8 <tcp_slowtmr+0x284>)
 8006d74:	485c      	ldr	r0, [pc, #368]	; (8006ee8 <tcp_slowtmr+0x274>)
 8006d76:	f009 fcd7 	bl	8010728 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8006d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d7c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8006d80:	2b0b      	cmp	r3, #11
 8006d82:	d905      	bls.n	8006d90 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8006d84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d88:	3301      	adds	r3, #1
 8006d8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006d8e:	e0ed      	b.n	8006f6c <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8006d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d92:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8006d96:	3b01      	subs	r3, #1
 8006d98:	4a58      	ldr	r2, [pc, #352]	; (8006efc <tcp_slowtmr+0x288>)
 8006d9a:	5cd3      	ldrb	r3, [r2, r3]
 8006d9c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8006d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006da0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006da4:	7c7a      	ldrb	r2, [r7, #17]
 8006da6:	429a      	cmp	r2, r3
 8006da8:	d907      	bls.n	8006dba <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8006daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dac:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006db0:	3301      	adds	r3, #1
 8006db2:	b2da      	uxtb	r2, r3
 8006db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006db6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8006dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dbc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006dc0:	7c7a      	ldrb	r2, [r7, #17]
 8006dc2:	429a      	cmp	r2, r3
 8006dc4:	f200 80d2 	bhi.w	8006f6c <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8006dc8:	2301      	movs	r3, #1
 8006dca:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8006dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d108      	bne.n	8006de8 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8006dd6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006dd8:	f004 fc2a 	bl	800b630 <tcp_zero_window_probe>
 8006ddc:	4603      	mov	r3, r0
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d014      	beq.n	8006e0c <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8006de2:	2300      	movs	r3, #0
 8006de4:	623b      	str	r3, [r7, #32]
 8006de6:	e011      	b.n	8006e0c <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8006de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006dee:	4619      	mov	r1, r3
 8006df0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006df2:	f003 faef 	bl	800a3d4 <tcp_split_unsent_seg>
 8006df6:	4603      	mov	r3, r0
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d107      	bne.n	8006e0c <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8006dfc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006dfe:	f003 fd6f 	bl	800a8e0 <tcp_output>
 8006e02:	4603      	mov	r3, r0
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d101      	bne.n	8006e0c <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8006e08:	2300      	movs	r3, #0
 8006e0a:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8006e0c:	6a3b      	ldr	r3, [r7, #32]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	f000 80ac 	beq.w	8006f6c <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8006e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e16:	2200      	movs	r2, #0
 8006e18:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8006e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e1e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8006e22:	2b06      	cmp	r3, #6
 8006e24:	f200 80a2 	bhi.w	8006f6c <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8006e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e2a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8006e2e:	3301      	adds	r3, #1
 8006e30:	b2da      	uxtb	r2, r3
 8006e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e34:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8006e38:	e098      	b.n	8006f6c <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8006e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e3c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	db0f      	blt.n	8006e64 <tcp_slowtmr+0x1f0>
 8006e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e46:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8006e4a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d008      	beq.n	8006e64 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8006e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e54:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8006e58:	b29b      	uxth	r3, r3
 8006e5a:	3301      	adds	r3, #1
 8006e5c:	b29b      	uxth	r3, r3
 8006e5e:	b21a      	sxth	r2, r3
 8006e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e62:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8006e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e66:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8006e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e6c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8006e70:	429a      	cmp	r2, r3
 8006e72:	db7b      	blt.n	8006f6c <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8006e74:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006e76:	f004 f825 	bl	800aec4 <tcp_rexmit_rto_prepare>
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d007      	beq.n	8006e90 <tcp_slowtmr+0x21c>
 8006e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d171      	bne.n	8006f6c <tcp_slowtmr+0x2f8>
 8006e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d06d      	beq.n	8006f6c <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8006e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e92:	7d1b      	ldrb	r3, [r3, #20]
 8006e94:	2b02      	cmp	r3, #2
 8006e96:	d03a      	beq.n	8006f0e <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8006e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e9a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006e9e:	2b0c      	cmp	r3, #12
 8006ea0:	bf28      	it	cs
 8006ea2:	230c      	movcs	r3, #12
 8006ea4:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8006ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ea8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8006eac:	10db      	asrs	r3, r3, #3
 8006eae:	b21b      	sxth	r3, r3
 8006eb0:	461a      	mov	r2, r3
 8006eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eb4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8006eb8:	4413      	add	r3, r2
 8006eba:	7efa      	ldrb	r2, [r7, #27]
 8006ebc:	4910      	ldr	r1, [pc, #64]	; (8006f00 <tcp_slowtmr+0x28c>)
 8006ebe:	5c8a      	ldrb	r2, [r1, r2]
 8006ec0:	4093      	lsls	r3, r2
 8006ec2:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	dc1a      	bgt.n	8006f04 <tcp_slowtmr+0x290>
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	b21a      	sxth	r2, r3
 8006ed2:	e019      	b.n	8006f08 <tcp_slowtmr+0x294>
 8006ed4:	20007c54 	.word	0x20007c54
 8006ed8:	20007c6a 	.word	0x20007c6a
 8006edc:	20007c60 	.word	0x20007c60
 8006ee0:	080123b4 	.word	0x080123b4
 8006ee4:	080126f8 	.word	0x080126f8
 8006ee8:	080123f8 	.word	0x080123f8
 8006eec:	08012724 	.word	0x08012724
 8006ef0:	08012750 	.word	0x08012750
 8006ef4:	08012780 	.word	0x08012780
 8006ef8:	080127b4 	.word	0x080127b4
 8006efc:	0801472c 	.word	0x0801472c
 8006f00:	0801471c 	.word	0x0801471c
 8006f04:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8006f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f0a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8006f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f10:	2200      	movs	r2, #0
 8006f12:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8006f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f16:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8006f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f1c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8006f20:	4293      	cmp	r3, r2
 8006f22:	bf28      	it	cs
 8006f24:	4613      	movcs	r3, r2
 8006f26:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8006f28:	8a7b      	ldrh	r3, [r7, #18]
 8006f2a:	085b      	lsrs	r3, r3, #1
 8006f2c:	b29a      	uxth	r2, r3
 8006f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f30:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8006f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f36:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8006f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f3c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006f3e:	005b      	lsls	r3, r3, #1
 8006f40:	b29b      	uxth	r3, r3
 8006f42:	429a      	cmp	r2, r3
 8006f44:	d206      	bcs.n	8006f54 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8006f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f48:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006f4a:	005b      	lsls	r3, r3, #1
 8006f4c:	b29a      	uxth	r2, r3
 8006f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f50:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8006f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f56:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8006f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f5a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8006f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f60:	2200      	movs	r2, #0
 8006f62:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8006f66:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006f68:	f004 f81c 	bl	800afa4 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8006f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f6e:	7d1b      	ldrb	r3, [r3, #20]
 8006f70:	2b06      	cmp	r3, #6
 8006f72:	d111      	bne.n	8006f98 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8006f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f76:	8b5b      	ldrh	r3, [r3, #26]
 8006f78:	f003 0310 	and.w	r3, r3, #16
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d00b      	beq.n	8006f98 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006f80:	4b9d      	ldr	r3, [pc, #628]	; (80071f8 <tcp_slowtmr+0x584>)
 8006f82:	681a      	ldr	r2, [r3, #0]
 8006f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f86:	6a1b      	ldr	r3, [r3, #32]
 8006f88:	1ad3      	subs	r3, r2, r3
 8006f8a:	2b28      	cmp	r3, #40	; 0x28
 8006f8c:	d904      	bls.n	8006f98 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8006f8e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f92:	3301      	adds	r3, #1
 8006f94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8006f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f9a:	7a5b      	ldrb	r3, [r3, #9]
 8006f9c:	f003 0308 	and.w	r3, r3, #8
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d04c      	beq.n	800703e <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8006fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fa6:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8006fa8:	2b04      	cmp	r3, #4
 8006faa:	d003      	beq.n	8006fb4 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8006fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fae:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8006fb0:	2b07      	cmp	r3, #7
 8006fb2:	d144      	bne.n	800703e <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006fb4:	4b90      	ldr	r3, [pc, #576]	; (80071f8 <tcp_slowtmr+0x584>)
 8006fb6:	681a      	ldr	r2, [r3, #0]
 8006fb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fba:	6a1b      	ldr	r3, [r3, #32]
 8006fbc:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8006fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006fc4:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 8006fc8:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8006fcc:	498b      	ldr	r1, [pc, #556]	; (80071fc <tcp_slowtmr+0x588>)
 8006fce:	fba1 1303 	umull	r1, r3, r1, r3
 8006fd2:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006fd4:	429a      	cmp	r2, r3
 8006fd6:	d90a      	bls.n	8006fee <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8006fd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006fdc:	3301      	adds	r3, #1
 8006fde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8006fe2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006fe6:	3301      	adds	r3, #1
 8006fe8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006fec:	e027      	b.n	800703e <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006fee:	4b82      	ldr	r3, [pc, #520]	; (80071f8 <tcp_slowtmr+0x584>)
 8006ff0:	681a      	ldr	r2, [r3, #0]
 8006ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ff4:	6a1b      	ldr	r3, [r3, #32]
 8006ff6:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8006ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ffa:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8006ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007000:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8007004:	4618      	mov	r0, r3
 8007006:	4b7e      	ldr	r3, [pc, #504]	; (8007200 <tcp_slowtmr+0x58c>)
 8007008:	fb00 f303 	mul.w	r3, r0, r3
 800700c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800700e:	497b      	ldr	r1, [pc, #492]	; (80071fc <tcp_slowtmr+0x588>)
 8007010:	fba1 1303 	umull	r1, r3, r1, r3
 8007014:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007016:	429a      	cmp	r2, r3
 8007018:	d911      	bls.n	800703e <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800701a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800701c:	f004 fac8 	bl	800b5b0 <tcp_keepalive>
 8007020:	4603      	mov	r3, r0
 8007022:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8007026:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800702a:	2b00      	cmp	r3, #0
 800702c:	d107      	bne.n	800703e <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800702e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007030:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8007034:	3301      	adds	r3, #1
 8007036:	b2da      	uxtb	r2, r3
 8007038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800703a:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800703e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007040:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007042:	2b00      	cmp	r3, #0
 8007044:	d011      	beq.n	800706a <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8007046:	4b6c      	ldr	r3, [pc, #432]	; (80071f8 <tcp_slowtmr+0x584>)
 8007048:	681a      	ldr	r2, [r3, #0]
 800704a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800704c:	6a1b      	ldr	r3, [r3, #32]
 800704e:	1ad2      	subs	r2, r2, r3
 8007050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007052:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8007056:	4619      	mov	r1, r3
 8007058:	460b      	mov	r3, r1
 800705a:	005b      	lsls	r3, r3, #1
 800705c:	440b      	add	r3, r1
 800705e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8007060:	429a      	cmp	r2, r3
 8007062:	d302      	bcc.n	800706a <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8007064:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007066:	f000 fddb 	bl	8007c20 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800706a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800706c:	7d1b      	ldrb	r3, [r3, #20]
 800706e:	2b03      	cmp	r3, #3
 8007070:	d10b      	bne.n	800708a <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007072:	4b61      	ldr	r3, [pc, #388]	; (80071f8 <tcp_slowtmr+0x584>)
 8007074:	681a      	ldr	r2, [r3, #0]
 8007076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007078:	6a1b      	ldr	r3, [r3, #32]
 800707a:	1ad3      	subs	r3, r2, r3
 800707c:	2b28      	cmp	r3, #40	; 0x28
 800707e:	d904      	bls.n	800708a <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8007080:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007084:	3301      	adds	r3, #1
 8007086:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800708a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800708c:	7d1b      	ldrb	r3, [r3, #20]
 800708e:	2b09      	cmp	r3, #9
 8007090:	d10b      	bne.n	80070aa <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8007092:	4b59      	ldr	r3, [pc, #356]	; (80071f8 <tcp_slowtmr+0x584>)
 8007094:	681a      	ldr	r2, [r3, #0]
 8007096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007098:	6a1b      	ldr	r3, [r3, #32]
 800709a:	1ad3      	subs	r3, r2, r3
 800709c:	2bf0      	cmp	r3, #240	; 0xf0
 800709e:	d904      	bls.n	80070aa <tcp_slowtmr+0x436>
        ++pcb_remove;
 80070a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80070a4:	3301      	adds	r3, #1
 80070a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80070aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d060      	beq.n	8007174 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 80070b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070b8:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 80070ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80070bc:	f000 fbfc 	bl	80078b8 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 80070c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d010      	beq.n	80070e8 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80070c6:	4b4f      	ldr	r3, [pc, #316]	; (8007204 <tcp_slowtmr+0x590>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80070cc:	429a      	cmp	r2, r3
 80070ce:	d106      	bne.n	80070de <tcp_slowtmr+0x46a>
 80070d0:	4b4d      	ldr	r3, [pc, #308]	; (8007208 <tcp_slowtmr+0x594>)
 80070d2:	f240 526d 	movw	r2, #1389	; 0x56d
 80070d6:	494d      	ldr	r1, [pc, #308]	; (800720c <tcp_slowtmr+0x598>)
 80070d8:	484d      	ldr	r0, [pc, #308]	; (8007210 <tcp_slowtmr+0x59c>)
 80070da:	f009 fb25 	bl	8010728 <iprintf>
        prev->next = pcb->next;
 80070de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070e0:	68da      	ldr	r2, [r3, #12]
 80070e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070e4:	60da      	str	r2, [r3, #12]
 80070e6:	e00f      	b.n	8007108 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80070e8:	4b46      	ldr	r3, [pc, #280]	; (8007204 <tcp_slowtmr+0x590>)
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80070ee:	429a      	cmp	r2, r3
 80070f0:	d006      	beq.n	8007100 <tcp_slowtmr+0x48c>
 80070f2:	4b45      	ldr	r3, [pc, #276]	; (8007208 <tcp_slowtmr+0x594>)
 80070f4:	f240 5271 	movw	r2, #1393	; 0x571
 80070f8:	4946      	ldr	r1, [pc, #280]	; (8007214 <tcp_slowtmr+0x5a0>)
 80070fa:	4845      	ldr	r0, [pc, #276]	; (8007210 <tcp_slowtmr+0x59c>)
 80070fc:	f009 fb14 	bl	8010728 <iprintf>
        tcp_active_pcbs = pcb->next;
 8007100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007102:	68db      	ldr	r3, [r3, #12]
 8007104:	4a3f      	ldr	r2, [pc, #252]	; (8007204 <tcp_slowtmr+0x590>)
 8007106:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8007108:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800710c:	2b00      	cmp	r3, #0
 800710e:	d013      	beq.n	8007138 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8007110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007112:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8007114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007116:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8007118:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800711a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800711c:	3304      	adds	r3, #4
 800711e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007120:	8ad2      	ldrh	r2, [r2, #22]
 8007122:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007124:	8b09      	ldrh	r1, [r1, #24]
 8007126:	9102      	str	r1, [sp, #8]
 8007128:	9201      	str	r2, [sp, #4]
 800712a:	9300      	str	r3, [sp, #0]
 800712c:	462b      	mov	r3, r5
 800712e:	4622      	mov	r2, r4
 8007130:	4601      	mov	r1, r0
 8007132:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007134:	f004 f988 	bl	800b448 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8007138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800713a:	691b      	ldr	r3, [r3, #16]
 800713c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800713e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007140:	7d1b      	ldrb	r3, [r3, #20]
 8007142:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8007144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007146:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8007148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800714a:	68db      	ldr	r3, [r3, #12]
 800714c:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800714e:	6838      	ldr	r0, [r7, #0]
 8007150:	f7ff f9f2 	bl	8006538 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8007154:	4b30      	ldr	r3, [pc, #192]	; (8007218 <tcp_slowtmr+0x5a4>)
 8007156:	2200      	movs	r2, #0
 8007158:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d004      	beq.n	800716a <tcp_slowtmr+0x4f6>
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	f06f 010c 	mvn.w	r1, #12
 8007166:	68b8      	ldr	r0, [r7, #8]
 8007168:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800716a:	4b2b      	ldr	r3, [pc, #172]	; (8007218 <tcp_slowtmr+0x5a4>)
 800716c:	781b      	ldrb	r3, [r3, #0]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d037      	beq.n	80071e2 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 8007172:	e590      	b.n	8006c96 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8007174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007176:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8007178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800717a:	68db      	ldr	r3, [r3, #12]
 800717c:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800717e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007180:	7f1b      	ldrb	r3, [r3, #28]
 8007182:	3301      	adds	r3, #1
 8007184:	b2da      	uxtb	r2, r3
 8007186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007188:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800718a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800718c:	7f1a      	ldrb	r2, [r3, #28]
 800718e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007190:	7f5b      	ldrb	r3, [r3, #29]
 8007192:	429a      	cmp	r2, r3
 8007194:	d325      	bcc.n	80071e2 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8007196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007198:	2200      	movs	r2, #0
 800719a:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800719c:	4b1e      	ldr	r3, [pc, #120]	; (8007218 <tcp_slowtmr+0x5a4>)
 800719e:	2200      	movs	r2, #0
 80071a0:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80071a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d00b      	beq.n	80071c4 <tcp_slowtmr+0x550>
 80071ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80071b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80071b4:	6912      	ldr	r2, [r2, #16]
 80071b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80071b8:	4610      	mov	r0, r2
 80071ba:	4798      	blx	r3
 80071bc:	4603      	mov	r3, r0
 80071be:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80071c2:	e002      	b.n	80071ca <tcp_slowtmr+0x556>
 80071c4:	2300      	movs	r3, #0
 80071c6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 80071ca:	4b13      	ldr	r3, [pc, #76]	; (8007218 <tcp_slowtmr+0x5a4>)
 80071cc:	781b      	ldrb	r3, [r3, #0]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d000      	beq.n	80071d4 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 80071d2:	e560      	b.n	8006c96 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 80071d4:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d102      	bne.n	80071e2 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 80071dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071de:	f003 fb7f 	bl	800a8e0 <tcp_output>
  while (pcb != NULL) {
 80071e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	f47f ad5c 	bne.w	8006ca2 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80071ea:	2300      	movs	r3, #0
 80071ec:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 80071ee:	4b0b      	ldr	r3, [pc, #44]	; (800721c <tcp_slowtmr+0x5a8>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80071f4:	e067      	b.n	80072c6 <tcp_slowtmr+0x652>
 80071f6:	bf00      	nop
 80071f8:	20007c54 	.word	0x20007c54
 80071fc:	10624dd3 	.word	0x10624dd3
 8007200:	000124f8 	.word	0x000124f8
 8007204:	20007c60 	.word	0x20007c60
 8007208:	080123b4 	.word	0x080123b4
 800720c:	080127ec 	.word	0x080127ec
 8007210:	080123f8 	.word	0x080123f8
 8007214:	08012818 	.word	0x08012818
 8007218:	20007c68 	.word	0x20007c68
 800721c:	20007c64 	.word	0x20007c64
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8007220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007222:	7d1b      	ldrb	r3, [r3, #20]
 8007224:	2b0a      	cmp	r3, #10
 8007226:	d006      	beq.n	8007236 <tcp_slowtmr+0x5c2>
 8007228:	4b2b      	ldr	r3, [pc, #172]	; (80072d8 <tcp_slowtmr+0x664>)
 800722a:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800722e:	492b      	ldr	r1, [pc, #172]	; (80072dc <tcp_slowtmr+0x668>)
 8007230:	482b      	ldr	r0, [pc, #172]	; (80072e0 <tcp_slowtmr+0x66c>)
 8007232:	f009 fa79 	bl	8010728 <iprintf>
    pcb_remove = 0;
 8007236:	2300      	movs	r3, #0
 8007238:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800723c:	4b29      	ldr	r3, [pc, #164]	; (80072e4 <tcp_slowtmr+0x670>)
 800723e:	681a      	ldr	r2, [r3, #0]
 8007240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007242:	6a1b      	ldr	r3, [r3, #32]
 8007244:	1ad3      	subs	r3, r2, r3
 8007246:	2bf0      	cmp	r3, #240	; 0xf0
 8007248:	d904      	bls.n	8007254 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800724a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800724e:	3301      	adds	r3, #1
 8007250:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8007254:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007258:	2b00      	cmp	r3, #0
 800725a:	d02f      	beq.n	80072bc <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800725c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800725e:	f000 fb2b 	bl	80078b8 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8007262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007264:	2b00      	cmp	r3, #0
 8007266:	d010      	beq.n	800728a <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8007268:	4b1f      	ldr	r3, [pc, #124]	; (80072e8 <tcp_slowtmr+0x674>)
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800726e:	429a      	cmp	r2, r3
 8007270:	d106      	bne.n	8007280 <tcp_slowtmr+0x60c>
 8007272:	4b19      	ldr	r3, [pc, #100]	; (80072d8 <tcp_slowtmr+0x664>)
 8007274:	f240 52af 	movw	r2, #1455	; 0x5af
 8007278:	491c      	ldr	r1, [pc, #112]	; (80072ec <tcp_slowtmr+0x678>)
 800727a:	4819      	ldr	r0, [pc, #100]	; (80072e0 <tcp_slowtmr+0x66c>)
 800727c:	f009 fa54 	bl	8010728 <iprintf>
        prev->next = pcb->next;
 8007280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007282:	68da      	ldr	r2, [r3, #12]
 8007284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007286:	60da      	str	r2, [r3, #12]
 8007288:	e00f      	b.n	80072aa <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800728a:	4b17      	ldr	r3, [pc, #92]	; (80072e8 <tcp_slowtmr+0x674>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007290:	429a      	cmp	r2, r3
 8007292:	d006      	beq.n	80072a2 <tcp_slowtmr+0x62e>
 8007294:	4b10      	ldr	r3, [pc, #64]	; (80072d8 <tcp_slowtmr+0x664>)
 8007296:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800729a:	4915      	ldr	r1, [pc, #84]	; (80072f0 <tcp_slowtmr+0x67c>)
 800729c:	4810      	ldr	r0, [pc, #64]	; (80072e0 <tcp_slowtmr+0x66c>)
 800729e:	f009 fa43 	bl	8010728 <iprintf>
        tcp_tw_pcbs = pcb->next;
 80072a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072a4:	68db      	ldr	r3, [r3, #12]
 80072a6:	4a10      	ldr	r2, [pc, #64]	; (80072e8 <tcp_slowtmr+0x674>)
 80072a8:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80072aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072ac:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 80072ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072b0:	68db      	ldr	r3, [r3, #12]
 80072b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80072b4:	69f8      	ldr	r0, [r7, #28]
 80072b6:	f7ff f93f 	bl	8006538 <tcp_free>
 80072ba:	e004      	b.n	80072c6 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 80072bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072be:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80072c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072c2:	68db      	ldr	r3, [r3, #12]
 80072c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80072c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d1a9      	bne.n	8007220 <tcp_slowtmr+0x5ac>
    }
  }
}
 80072cc:	bf00      	nop
 80072ce:	bf00      	nop
 80072d0:	3730      	adds	r7, #48	; 0x30
 80072d2:	46bd      	mov	sp, r7
 80072d4:	bdb0      	pop	{r4, r5, r7, pc}
 80072d6:	bf00      	nop
 80072d8:	080123b4 	.word	0x080123b4
 80072dc:	08012844 	.word	0x08012844
 80072e0:	080123f8 	.word	0x080123f8
 80072e4:	20007c54 	.word	0x20007c54
 80072e8:	20007c64 	.word	0x20007c64
 80072ec:	08012874 	.word	0x08012874
 80072f0:	0801289c 	.word	0x0801289c

080072f4 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b082      	sub	sp, #8
 80072f8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 80072fa:	4b2d      	ldr	r3, [pc, #180]	; (80073b0 <tcp_fasttmr+0xbc>)
 80072fc:	781b      	ldrb	r3, [r3, #0]
 80072fe:	3301      	adds	r3, #1
 8007300:	b2da      	uxtb	r2, r3
 8007302:	4b2b      	ldr	r3, [pc, #172]	; (80073b0 <tcp_fasttmr+0xbc>)
 8007304:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8007306:	4b2b      	ldr	r3, [pc, #172]	; (80073b4 <tcp_fasttmr+0xc0>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800730c:	e048      	b.n	80073a0 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	7f9a      	ldrb	r2, [r3, #30]
 8007312:	4b27      	ldr	r3, [pc, #156]	; (80073b0 <tcp_fasttmr+0xbc>)
 8007314:	781b      	ldrb	r3, [r3, #0]
 8007316:	429a      	cmp	r2, r3
 8007318:	d03f      	beq.n	800739a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800731a:	4b25      	ldr	r3, [pc, #148]	; (80073b0 <tcp_fasttmr+0xbc>)
 800731c:	781a      	ldrb	r2, [r3, #0]
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	8b5b      	ldrh	r3, [r3, #26]
 8007326:	f003 0301 	and.w	r3, r3, #1
 800732a:	2b00      	cmp	r3, #0
 800732c:	d010      	beq.n	8007350 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	8b5b      	ldrh	r3, [r3, #26]
 8007332:	f043 0302 	orr.w	r3, r3, #2
 8007336:	b29a      	uxth	r2, r3
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800733c:	6878      	ldr	r0, [r7, #4]
 800733e:	f003 facf 	bl	800a8e0 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	8b5b      	ldrh	r3, [r3, #26]
 8007346:	f023 0303 	bic.w	r3, r3, #3
 800734a:	b29a      	uxth	r2, r3
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	8b5b      	ldrh	r3, [r3, #26]
 8007354:	f003 0308 	and.w	r3, r3, #8
 8007358:	2b00      	cmp	r3, #0
 800735a:	d009      	beq.n	8007370 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	8b5b      	ldrh	r3, [r3, #26]
 8007360:	f023 0308 	bic.w	r3, r3, #8
 8007364:	b29a      	uxth	r2, r3
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f7ff fa78 	bl	8006860 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	68db      	ldr	r3, [r3, #12]
 8007374:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800737a:	2b00      	cmp	r3, #0
 800737c:	d00a      	beq.n	8007394 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800737e:	4b0e      	ldr	r3, [pc, #56]	; (80073b8 <tcp_fasttmr+0xc4>)
 8007380:	2200      	movs	r2, #0
 8007382:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f000 f819 	bl	80073bc <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800738a:	4b0b      	ldr	r3, [pc, #44]	; (80073b8 <tcp_fasttmr+0xc4>)
 800738c:	781b      	ldrb	r3, [r3, #0]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d000      	beq.n	8007394 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8007392:	e7b8      	b.n	8007306 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	607b      	str	r3, [r7, #4]
 8007398:	e002      	b.n	80073a0 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	68db      	ldr	r3, [r3, #12]
 800739e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d1b3      	bne.n	800730e <tcp_fasttmr+0x1a>
    }
  }
}
 80073a6:	bf00      	nop
 80073a8:	bf00      	nop
 80073aa:	3708      	adds	r7, #8
 80073ac:	46bd      	mov	sp, r7
 80073ae:	bd80      	pop	{r7, pc}
 80073b0:	20007c6a 	.word	0x20007c6a
 80073b4:	20007c60 	.word	0x20007c60
 80073b8:	20007c68 	.word	0x20007c68

080073bc <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80073bc:	b590      	push	{r4, r7, lr}
 80073be:	b085      	sub	sp, #20
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d109      	bne.n	80073de <tcp_process_refused_data+0x22>
 80073ca:	4b37      	ldr	r3, [pc, #220]	; (80074a8 <tcp_process_refused_data+0xec>)
 80073cc:	f240 6209 	movw	r2, #1545	; 0x609
 80073d0:	4936      	ldr	r1, [pc, #216]	; (80074ac <tcp_process_refused_data+0xf0>)
 80073d2:	4837      	ldr	r0, [pc, #220]	; (80074b0 <tcp_process_refused_data+0xf4>)
 80073d4:	f009 f9a8 	bl	8010728 <iprintf>
 80073d8:	f06f 030f 	mvn.w	r3, #15
 80073dc:	e060      	b.n	80074a0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80073e2:	7b5b      	ldrb	r3, [r3, #13]
 80073e4:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80073ea:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2200      	movs	r2, #0
 80073f0:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d00b      	beq.n	8007414 <tcp_process_refused_data+0x58>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6918      	ldr	r0, [r3, #16]
 8007406:	2300      	movs	r3, #0
 8007408:	68ba      	ldr	r2, [r7, #8]
 800740a:	6879      	ldr	r1, [r7, #4]
 800740c:	47a0      	blx	r4
 800740e:	4603      	mov	r3, r0
 8007410:	73fb      	strb	r3, [r7, #15]
 8007412:	e007      	b.n	8007424 <tcp_process_refused_data+0x68>
 8007414:	2300      	movs	r3, #0
 8007416:	68ba      	ldr	r2, [r7, #8]
 8007418:	6879      	ldr	r1, [r7, #4]
 800741a:	2000      	movs	r0, #0
 800741c:	f000 f8a4 	bl	8007568 <tcp_recv_null>
 8007420:	4603      	mov	r3, r0
 8007422:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8007424:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d12a      	bne.n	8007482 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800742c:	7bbb      	ldrb	r3, [r7, #14]
 800742e:	f003 0320 	and.w	r3, r3, #32
 8007432:	2b00      	cmp	r3, #0
 8007434:	d033      	beq.n	800749e <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800743a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800743e:	d005      	beq.n	800744c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007444:	3301      	adds	r3, #1
 8007446:	b29a      	uxth	r2, r3
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007452:	2b00      	cmp	r3, #0
 8007454:	d00b      	beq.n	800746e <tcp_process_refused_data+0xb2>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6918      	ldr	r0, [r3, #16]
 8007460:	2300      	movs	r3, #0
 8007462:	2200      	movs	r2, #0
 8007464:	6879      	ldr	r1, [r7, #4]
 8007466:	47a0      	blx	r4
 8007468:	4603      	mov	r3, r0
 800746a:	73fb      	strb	r3, [r7, #15]
 800746c:	e001      	b.n	8007472 <tcp_process_refused_data+0xb6>
 800746e:	2300      	movs	r3, #0
 8007470:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8007472:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007476:	f113 0f0d 	cmn.w	r3, #13
 800747a:	d110      	bne.n	800749e <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800747c:	f06f 030c 	mvn.w	r3, #12
 8007480:	e00e      	b.n	80074a0 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8007482:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007486:	f113 0f0d 	cmn.w	r3, #13
 800748a:	d102      	bne.n	8007492 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800748c:	f06f 030c 	mvn.w	r3, #12
 8007490:	e006      	b.n	80074a0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	68ba      	ldr	r2, [r7, #8]
 8007496:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8007498:	f06f 0304 	mvn.w	r3, #4
 800749c:	e000      	b.n	80074a0 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800749e:	2300      	movs	r3, #0
}
 80074a0:	4618      	mov	r0, r3
 80074a2:	3714      	adds	r7, #20
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bd90      	pop	{r4, r7, pc}
 80074a8:	080123b4 	.word	0x080123b4
 80074ac:	080128c4 	.word	0x080128c4
 80074b0:	080123f8 	.word	0x080123f8

080074b4 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b084      	sub	sp, #16
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80074bc:	e007      	b.n	80074ce <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f000 f80a 	bl	80074de <tcp_seg_free>
    seg = next;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d1f4      	bne.n	80074be <tcp_segs_free+0xa>
  }
}
 80074d4:	bf00      	nop
 80074d6:	bf00      	nop
 80074d8:	3710      	adds	r7, #16
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}

080074de <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80074de:	b580      	push	{r7, lr}
 80074e0:	b082      	sub	sp, #8
 80074e2:	af00      	add	r7, sp, #0
 80074e4:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d00c      	beq.n	8007506 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	685b      	ldr	r3, [r3, #4]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d004      	beq.n	80074fe <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	685b      	ldr	r3, [r3, #4]
 80074f8:	4618      	mov	r0, r3
 80074fa:	f7fe fd6d 	bl	8005fd8 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80074fe:	6879      	ldr	r1, [r7, #4]
 8007500:	2003      	movs	r0, #3
 8007502:	f7fd ff07 	bl	8005314 <memp_free>
  }
}
 8007506:	bf00      	nop
 8007508:	3708      	adds	r7, #8
 800750a:	46bd      	mov	sp, r7
 800750c:	bd80      	pop	{r7, pc}
	...

08007510 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b084      	sub	sp, #16
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d106      	bne.n	800752c <tcp_seg_copy+0x1c>
 800751e:	4b0f      	ldr	r3, [pc, #60]	; (800755c <tcp_seg_copy+0x4c>)
 8007520:	f240 6282 	movw	r2, #1666	; 0x682
 8007524:	490e      	ldr	r1, [pc, #56]	; (8007560 <tcp_seg_copy+0x50>)
 8007526:	480f      	ldr	r0, [pc, #60]	; (8007564 <tcp_seg_copy+0x54>)
 8007528:	f009 f8fe 	bl	8010728 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800752c:	2003      	movs	r0, #3
 800752e:	f7fd fe81 	bl	8005234 <memp_malloc>
 8007532:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d101      	bne.n	800753e <tcp_seg_copy+0x2e>
    return NULL;
 800753a:	2300      	movs	r3, #0
 800753c:	e00a      	b.n	8007554 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800753e:	2210      	movs	r2, #16
 8007540:	6879      	ldr	r1, [r7, #4]
 8007542:	68f8      	ldr	r0, [r7, #12]
 8007544:	f009 f8da 	bl	80106fc <memcpy>
  pbuf_ref(cseg->p);
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	685b      	ldr	r3, [r3, #4]
 800754c:	4618      	mov	r0, r3
 800754e:	f7fe fde3 	bl	8006118 <pbuf_ref>
  return cseg;
 8007552:	68fb      	ldr	r3, [r7, #12]
}
 8007554:	4618      	mov	r0, r3
 8007556:	3710      	adds	r7, #16
 8007558:	46bd      	mov	sp, r7
 800755a:	bd80      	pop	{r7, pc}
 800755c:	080123b4 	.word	0x080123b4
 8007560:	08012908 	.word	0x08012908
 8007564:	080123f8 	.word	0x080123f8

08007568 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b084      	sub	sp, #16
 800756c:	af00      	add	r7, sp, #0
 800756e:	60f8      	str	r0, [r7, #12]
 8007570:	60b9      	str	r1, [r7, #8]
 8007572:	607a      	str	r2, [r7, #4]
 8007574:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d109      	bne.n	8007590 <tcp_recv_null+0x28>
 800757c:	4b12      	ldr	r3, [pc, #72]	; (80075c8 <tcp_recv_null+0x60>)
 800757e:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8007582:	4912      	ldr	r1, [pc, #72]	; (80075cc <tcp_recv_null+0x64>)
 8007584:	4812      	ldr	r0, [pc, #72]	; (80075d0 <tcp_recv_null+0x68>)
 8007586:	f009 f8cf 	bl	8010728 <iprintf>
 800758a:	f06f 030f 	mvn.w	r3, #15
 800758e:	e016      	b.n	80075be <tcp_recv_null+0x56>

  if (p != NULL) {
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d009      	beq.n	80075aa <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	891b      	ldrh	r3, [r3, #8]
 800759a:	4619      	mov	r1, r3
 800759c:	68b8      	ldr	r0, [r7, #8]
 800759e:	f7ff fb19 	bl	8006bd4 <tcp_recved>
    pbuf_free(p);
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f7fe fd18 	bl	8005fd8 <pbuf_free>
 80075a8:	e008      	b.n	80075bc <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 80075aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d104      	bne.n	80075bc <tcp_recv_null+0x54>
    return tcp_close(pcb);
 80075b2:	68b8      	ldr	r0, [r7, #8]
 80075b4:	f7ff f9be 	bl	8006934 <tcp_close>
 80075b8:	4603      	mov	r3, r0
 80075ba:	e000      	b.n	80075be <tcp_recv_null+0x56>
  }
  return ERR_OK;
 80075bc:	2300      	movs	r3, #0
}
 80075be:	4618      	mov	r0, r3
 80075c0:	3710      	adds	r7, #16
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}
 80075c6:	bf00      	nop
 80075c8:	080123b4 	.word	0x080123b4
 80075cc:	08012924 	.word	0x08012924
 80075d0:	080123f8 	.word	0x080123f8

080075d4 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b086      	sub	sp, #24
 80075d8:	af00      	add	r7, sp, #0
 80075da:	4603      	mov	r3, r0
 80075dc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80075de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	db01      	blt.n	80075ea <tcp_kill_prio+0x16>
 80075e6:	79fb      	ldrb	r3, [r7, #7]
 80075e8:	e000      	b.n	80075ec <tcp_kill_prio+0x18>
 80075ea:	237f      	movs	r3, #127	; 0x7f
 80075ec:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 80075ee:	7afb      	ldrb	r3, [r7, #11]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d034      	beq.n	800765e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 80075f4:	7afb      	ldrb	r3, [r7, #11]
 80075f6:	3b01      	subs	r3, #1
 80075f8:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 80075fa:	2300      	movs	r3, #0
 80075fc:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80075fe:	2300      	movs	r3, #0
 8007600:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007602:	4b19      	ldr	r3, [pc, #100]	; (8007668 <tcp_kill_prio+0x94>)
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	617b      	str	r3, [r7, #20]
 8007608:	e01f      	b.n	800764a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	7d5b      	ldrb	r3, [r3, #21]
 800760e:	7afa      	ldrb	r2, [r7, #11]
 8007610:	429a      	cmp	r2, r3
 8007612:	d80c      	bhi.n	800762e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8007614:	697b      	ldr	r3, [r7, #20]
 8007616:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8007618:	7afa      	ldrb	r2, [r7, #11]
 800761a:	429a      	cmp	r2, r3
 800761c:	d112      	bne.n	8007644 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800761e:	4b13      	ldr	r3, [pc, #76]	; (800766c <tcp_kill_prio+0x98>)
 8007620:	681a      	ldr	r2, [r3, #0]
 8007622:	697b      	ldr	r3, [r7, #20]
 8007624:	6a1b      	ldr	r3, [r3, #32]
 8007626:	1ad3      	subs	r3, r2, r3
 8007628:	68fa      	ldr	r2, [r7, #12]
 800762a:	429a      	cmp	r2, r3
 800762c:	d80a      	bhi.n	8007644 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800762e:	4b0f      	ldr	r3, [pc, #60]	; (800766c <tcp_kill_prio+0x98>)
 8007630:	681a      	ldr	r2, [r3, #0]
 8007632:	697b      	ldr	r3, [r7, #20]
 8007634:	6a1b      	ldr	r3, [r3, #32]
 8007636:	1ad3      	subs	r3, r2, r3
 8007638:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800763a:	697b      	ldr	r3, [r7, #20]
 800763c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800763e:	697b      	ldr	r3, [r7, #20]
 8007640:	7d5b      	ldrb	r3, [r3, #21]
 8007642:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007644:	697b      	ldr	r3, [r7, #20]
 8007646:	68db      	ldr	r3, [r3, #12]
 8007648:	617b      	str	r3, [r7, #20]
 800764a:	697b      	ldr	r3, [r7, #20]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d1dc      	bne.n	800760a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8007650:	693b      	ldr	r3, [r7, #16]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d004      	beq.n	8007660 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8007656:	6938      	ldr	r0, [r7, #16]
 8007658:	f7ff fa56 	bl	8006b08 <tcp_abort>
 800765c:	e000      	b.n	8007660 <tcp_kill_prio+0x8c>
    return;
 800765e:	bf00      	nop
  }
}
 8007660:	3718      	adds	r7, #24
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}
 8007666:	bf00      	nop
 8007668:	20007c60 	.word	0x20007c60
 800766c:	20007c54 	.word	0x20007c54

08007670 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b086      	sub	sp, #24
 8007674:	af00      	add	r7, sp, #0
 8007676:	4603      	mov	r3, r0
 8007678:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800767a:	79fb      	ldrb	r3, [r7, #7]
 800767c:	2b08      	cmp	r3, #8
 800767e:	d009      	beq.n	8007694 <tcp_kill_state+0x24>
 8007680:	79fb      	ldrb	r3, [r7, #7]
 8007682:	2b09      	cmp	r3, #9
 8007684:	d006      	beq.n	8007694 <tcp_kill_state+0x24>
 8007686:	4b1a      	ldr	r3, [pc, #104]	; (80076f0 <tcp_kill_state+0x80>)
 8007688:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800768c:	4919      	ldr	r1, [pc, #100]	; (80076f4 <tcp_kill_state+0x84>)
 800768e:	481a      	ldr	r0, [pc, #104]	; (80076f8 <tcp_kill_state+0x88>)
 8007690:	f009 f84a 	bl	8010728 <iprintf>

  inactivity = 0;
 8007694:	2300      	movs	r3, #0
 8007696:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8007698:	2300      	movs	r3, #0
 800769a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800769c:	4b17      	ldr	r3, [pc, #92]	; (80076fc <tcp_kill_state+0x8c>)
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	617b      	str	r3, [r7, #20]
 80076a2:	e017      	b.n	80076d4 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80076a4:	697b      	ldr	r3, [r7, #20]
 80076a6:	7d1b      	ldrb	r3, [r3, #20]
 80076a8:	79fa      	ldrb	r2, [r7, #7]
 80076aa:	429a      	cmp	r2, r3
 80076ac:	d10f      	bne.n	80076ce <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80076ae:	4b14      	ldr	r3, [pc, #80]	; (8007700 <tcp_kill_state+0x90>)
 80076b0:	681a      	ldr	r2, [r3, #0]
 80076b2:	697b      	ldr	r3, [r7, #20]
 80076b4:	6a1b      	ldr	r3, [r3, #32]
 80076b6:	1ad3      	subs	r3, r2, r3
 80076b8:	68fa      	ldr	r2, [r7, #12]
 80076ba:	429a      	cmp	r2, r3
 80076bc:	d807      	bhi.n	80076ce <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 80076be:	4b10      	ldr	r3, [pc, #64]	; (8007700 <tcp_kill_state+0x90>)
 80076c0:	681a      	ldr	r2, [r3, #0]
 80076c2:	697b      	ldr	r3, [r7, #20]
 80076c4:	6a1b      	ldr	r3, [r3, #32]
 80076c6:	1ad3      	subs	r3, r2, r3
 80076c8:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 80076ca:	697b      	ldr	r3, [r7, #20]
 80076cc:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80076ce:	697b      	ldr	r3, [r7, #20]
 80076d0:	68db      	ldr	r3, [r3, #12]
 80076d2:	617b      	str	r3, [r7, #20]
 80076d4:	697b      	ldr	r3, [r7, #20]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d1e4      	bne.n	80076a4 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 80076da:	693b      	ldr	r3, [r7, #16]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d003      	beq.n	80076e8 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 80076e0:	2100      	movs	r1, #0
 80076e2:	6938      	ldr	r0, [r7, #16]
 80076e4:	f7ff f952 	bl	800698c <tcp_abandon>
  }
}
 80076e8:	bf00      	nop
 80076ea:	3718      	adds	r7, #24
 80076ec:	46bd      	mov	sp, r7
 80076ee:	bd80      	pop	{r7, pc}
 80076f0:	080123b4 	.word	0x080123b4
 80076f4:	08012940 	.word	0x08012940
 80076f8:	080123f8 	.word	0x080123f8
 80076fc:	20007c60 	.word	0x20007c60
 8007700:	20007c54 	.word	0x20007c54

08007704 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b084      	sub	sp, #16
 8007708:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800770a:	2300      	movs	r3, #0
 800770c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800770e:	2300      	movs	r3, #0
 8007710:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007712:	4b12      	ldr	r3, [pc, #72]	; (800775c <tcp_kill_timewait+0x58>)
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	60fb      	str	r3, [r7, #12]
 8007718:	e012      	b.n	8007740 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800771a:	4b11      	ldr	r3, [pc, #68]	; (8007760 <tcp_kill_timewait+0x5c>)
 800771c:	681a      	ldr	r2, [r3, #0]
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	6a1b      	ldr	r3, [r3, #32]
 8007722:	1ad3      	subs	r3, r2, r3
 8007724:	687a      	ldr	r2, [r7, #4]
 8007726:	429a      	cmp	r2, r3
 8007728:	d807      	bhi.n	800773a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800772a:	4b0d      	ldr	r3, [pc, #52]	; (8007760 <tcp_kill_timewait+0x5c>)
 800772c:	681a      	ldr	r2, [r3, #0]
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	6a1b      	ldr	r3, [r3, #32]
 8007732:	1ad3      	subs	r3, r2, r3
 8007734:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	68db      	ldr	r3, [r3, #12]
 800773e:	60fb      	str	r3, [r7, #12]
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d1e9      	bne.n	800771a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d002      	beq.n	8007752 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800774c:	68b8      	ldr	r0, [r7, #8]
 800774e:	f7ff f9db 	bl	8006b08 <tcp_abort>
  }
}
 8007752:	bf00      	nop
 8007754:	3710      	adds	r7, #16
 8007756:	46bd      	mov	sp, r7
 8007758:	bd80      	pop	{r7, pc}
 800775a:	bf00      	nop
 800775c:	20007c64 	.word	0x20007c64
 8007760:	20007c54 	.word	0x20007c54

08007764 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b082      	sub	sp, #8
 8007768:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800776a:	4b10      	ldr	r3, [pc, #64]	; (80077ac <tcp_handle_closepend+0x48>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8007770:	e014      	b.n	800779c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	68db      	ldr	r3, [r3, #12]
 8007776:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	8b5b      	ldrh	r3, [r3, #26]
 800777c:	f003 0308 	and.w	r3, r3, #8
 8007780:	2b00      	cmp	r3, #0
 8007782:	d009      	beq.n	8007798 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	8b5b      	ldrh	r3, [r3, #26]
 8007788:	f023 0308 	bic.w	r3, r3, #8
 800778c:	b29a      	uxth	r2, r3
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f7ff f864 	bl	8006860 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d1e7      	bne.n	8007772 <tcp_handle_closepend+0xe>
  }
}
 80077a2:	bf00      	nop
 80077a4:	bf00      	nop
 80077a6:	3708      	adds	r7, #8
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}
 80077ac:	20007c60 	.word	0x20007c60

080077b0 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b084      	sub	sp, #16
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	4603      	mov	r3, r0
 80077b8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80077ba:	2001      	movs	r0, #1
 80077bc:	f7fd fd3a 	bl	8005234 <memp_malloc>
 80077c0:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d126      	bne.n	8007816 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 80077c8:	f7ff ffcc 	bl	8007764 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 80077cc:	f7ff ff9a 	bl	8007704 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80077d0:	2001      	movs	r0, #1
 80077d2:	f7fd fd2f 	bl	8005234 <memp_malloc>
 80077d6:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d11b      	bne.n	8007816 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 80077de:	2009      	movs	r0, #9
 80077e0:	f7ff ff46 	bl	8007670 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80077e4:	2001      	movs	r0, #1
 80077e6:	f7fd fd25 	bl	8005234 <memp_malloc>
 80077ea:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d111      	bne.n	8007816 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 80077f2:	2008      	movs	r0, #8
 80077f4:	f7ff ff3c 	bl	8007670 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80077f8:	2001      	movs	r0, #1
 80077fa:	f7fd fd1b 	bl	8005234 <memp_malloc>
 80077fe:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d107      	bne.n	8007816 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8007806:	79fb      	ldrb	r3, [r7, #7]
 8007808:	4618      	mov	r0, r3
 800780a:	f7ff fee3 	bl	80075d4 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800780e:	2001      	movs	r0, #1
 8007810:	f7fd fd10 	bl	8005234 <memp_malloc>
 8007814:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d03f      	beq.n	800789c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800781c:	229c      	movs	r2, #156	; 0x9c
 800781e:	2100      	movs	r1, #0
 8007820:	68f8      	ldr	r0, [r7, #12]
 8007822:	f008 ff79 	bl	8010718 <memset>
    pcb->prio = prio;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	79fa      	ldrb	r2, [r7, #7]
 800782a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8007832:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800783c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	22ff      	movs	r2, #255	; 0xff
 800784a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	f44f 7206 	mov.w	r2, #536	; 0x218
 8007852:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	2206      	movs	r2, #6
 8007858:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	2206      	movs	r2, #6
 8007860:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007868:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	2201      	movs	r2, #1
 800786e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8007872:	4b0d      	ldr	r3, [pc, #52]	; (80078a8 <tcp_alloc+0xf8>)
 8007874:	681a      	ldr	r2, [r3, #0]
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800787a:	4b0c      	ldr	r3, [pc, #48]	; (80078ac <tcp_alloc+0xfc>)
 800787c:	781a      	ldrb	r2, [r3, #0]
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8007888:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	4a08      	ldr	r2, [pc, #32]	; (80078b0 <tcp_alloc+0x100>)
 8007890:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	4a07      	ldr	r2, [pc, #28]	; (80078b4 <tcp_alloc+0x104>)
 8007898:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800789c:	68fb      	ldr	r3, [r7, #12]
}
 800789e:	4618      	mov	r0, r3
 80078a0:	3710      	adds	r7, #16
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bd80      	pop	{r7, pc}
 80078a6:	bf00      	nop
 80078a8:	20007c54 	.word	0x20007c54
 80078ac:	20007c6a 	.word	0x20007c6a
 80078b0:	08007569 	.word	0x08007569
 80078b4:	006ddd00 	.word	0x006ddd00

080078b8 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b082      	sub	sp, #8
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d107      	bne.n	80078d6 <tcp_pcb_purge+0x1e>
 80078c6:	4b21      	ldr	r3, [pc, #132]	; (800794c <tcp_pcb_purge+0x94>)
 80078c8:	f640 0251 	movw	r2, #2129	; 0x851
 80078cc:	4920      	ldr	r1, [pc, #128]	; (8007950 <tcp_pcb_purge+0x98>)
 80078ce:	4821      	ldr	r0, [pc, #132]	; (8007954 <tcp_pcb_purge+0x9c>)
 80078d0:	f008 ff2a 	bl	8010728 <iprintf>
 80078d4:	e037      	b.n	8007946 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	7d1b      	ldrb	r3, [r3, #20]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d033      	beq.n	8007946 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80078e2:	2b0a      	cmp	r3, #10
 80078e4:	d02f      	beq.n	8007946 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 80078ea:	2b01      	cmp	r3, #1
 80078ec:	d02b      	beq.n	8007946 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d007      	beq.n	8007906 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80078fa:	4618      	mov	r0, r3
 80078fc:	f7fe fb6c 	bl	8005fd8 <pbuf_free>
      pcb->refused_data = NULL;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2200      	movs	r2, #0
 8007904:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800790a:	2b00      	cmp	r3, #0
 800790c:	d002      	beq.n	8007914 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f000 f986 	bl	8007c20 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800791a:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007920:	4618      	mov	r0, r3
 8007922:	f7ff fdc7 	bl	80074b4 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800792a:	4618      	mov	r0, r3
 800792c:	f7ff fdc2 	bl	80074b4 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2200      	movs	r2, #0
 8007934:	66da      	str	r2, [r3, #108]	; 0x6c
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2200      	movs	r2, #0
 8007942:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8007946:	3708      	adds	r7, #8
 8007948:	46bd      	mov	sp, r7
 800794a:	bd80      	pop	{r7, pc}
 800794c:	080123b4 	.word	0x080123b4
 8007950:	08012a00 	.word	0x08012a00
 8007954:	080123f8 	.word	0x080123f8

08007958 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b084      	sub	sp, #16
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
 8007960:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d106      	bne.n	8007976 <tcp_pcb_remove+0x1e>
 8007968:	4b3e      	ldr	r3, [pc, #248]	; (8007a64 <tcp_pcb_remove+0x10c>)
 800796a:	f640 0283 	movw	r2, #2179	; 0x883
 800796e:	493e      	ldr	r1, [pc, #248]	; (8007a68 <tcp_pcb_remove+0x110>)
 8007970:	483e      	ldr	r0, [pc, #248]	; (8007a6c <tcp_pcb_remove+0x114>)
 8007972:	f008 fed9 	bl	8010728 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d106      	bne.n	800798a <tcp_pcb_remove+0x32>
 800797c:	4b39      	ldr	r3, [pc, #228]	; (8007a64 <tcp_pcb_remove+0x10c>)
 800797e:	f640 0284 	movw	r2, #2180	; 0x884
 8007982:	493b      	ldr	r1, [pc, #236]	; (8007a70 <tcp_pcb_remove+0x118>)
 8007984:	4839      	ldr	r0, [pc, #228]	; (8007a6c <tcp_pcb_remove+0x114>)
 8007986:	f008 fecf 	bl	8010728 <iprintf>

  TCP_RMV(pcblist, pcb);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	683a      	ldr	r2, [r7, #0]
 8007990:	429a      	cmp	r2, r3
 8007992:	d105      	bne.n	80079a0 <tcp_pcb_remove+0x48>
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	68da      	ldr	r2, [r3, #12]
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	601a      	str	r2, [r3, #0]
 800799e:	e013      	b.n	80079c8 <tcp_pcb_remove+0x70>
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	60fb      	str	r3, [r7, #12]
 80079a6:	e00c      	b.n	80079c2 <tcp_pcb_remove+0x6a>
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	68db      	ldr	r3, [r3, #12]
 80079ac:	683a      	ldr	r2, [r7, #0]
 80079ae:	429a      	cmp	r2, r3
 80079b0:	d104      	bne.n	80079bc <tcp_pcb_remove+0x64>
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	68da      	ldr	r2, [r3, #12]
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	60da      	str	r2, [r3, #12]
 80079ba:	e005      	b.n	80079c8 <tcp_pcb_remove+0x70>
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	68db      	ldr	r3, [r3, #12]
 80079c0:	60fb      	str	r3, [r7, #12]
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d1ef      	bne.n	80079a8 <tcp_pcb_remove+0x50>
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	2200      	movs	r2, #0
 80079cc:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80079ce:	6838      	ldr	r0, [r7, #0]
 80079d0:	f7ff ff72 	bl	80078b8 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	7d1b      	ldrb	r3, [r3, #20]
 80079d8:	2b0a      	cmp	r3, #10
 80079da:	d013      	beq.n	8007a04 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 80079e0:	2b01      	cmp	r3, #1
 80079e2:	d00f      	beq.n	8007a04 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	8b5b      	ldrh	r3, [r3, #26]
 80079e8:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d009      	beq.n	8007a04 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	8b5b      	ldrh	r3, [r3, #26]
 80079f4:	f043 0302 	orr.w	r3, r3, #2
 80079f8:	b29a      	uxth	r2, r3
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80079fe:	6838      	ldr	r0, [r7, #0]
 8007a00:	f002 ff6e 	bl	800a8e0 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	7d1b      	ldrb	r3, [r3, #20]
 8007a08:	2b01      	cmp	r3, #1
 8007a0a:	d020      	beq.n	8007a4e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d006      	beq.n	8007a22 <tcp_pcb_remove+0xca>
 8007a14:	4b13      	ldr	r3, [pc, #76]	; (8007a64 <tcp_pcb_remove+0x10c>)
 8007a16:	f640 0293 	movw	r2, #2195	; 0x893
 8007a1a:	4916      	ldr	r1, [pc, #88]	; (8007a74 <tcp_pcb_remove+0x11c>)
 8007a1c:	4813      	ldr	r0, [pc, #76]	; (8007a6c <tcp_pcb_remove+0x114>)
 8007a1e:	f008 fe83 	bl	8010728 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d006      	beq.n	8007a38 <tcp_pcb_remove+0xe0>
 8007a2a:	4b0e      	ldr	r3, [pc, #56]	; (8007a64 <tcp_pcb_remove+0x10c>)
 8007a2c:	f640 0294 	movw	r2, #2196	; 0x894
 8007a30:	4911      	ldr	r1, [pc, #68]	; (8007a78 <tcp_pcb_remove+0x120>)
 8007a32:	480e      	ldr	r0, [pc, #56]	; (8007a6c <tcp_pcb_remove+0x114>)
 8007a34:	f008 fe78 	bl	8010728 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d006      	beq.n	8007a4e <tcp_pcb_remove+0xf6>
 8007a40:	4b08      	ldr	r3, [pc, #32]	; (8007a64 <tcp_pcb_remove+0x10c>)
 8007a42:	f640 0296 	movw	r2, #2198	; 0x896
 8007a46:	490d      	ldr	r1, [pc, #52]	; (8007a7c <tcp_pcb_remove+0x124>)
 8007a48:	4808      	ldr	r0, [pc, #32]	; (8007a6c <tcp_pcb_remove+0x114>)
 8007a4a:	f008 fe6d 	bl	8010728 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	2200      	movs	r2, #0
 8007a52:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	2200      	movs	r2, #0
 8007a58:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8007a5a:	bf00      	nop
 8007a5c:	3710      	adds	r7, #16
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	bd80      	pop	{r7, pc}
 8007a62:	bf00      	nop
 8007a64:	080123b4 	.word	0x080123b4
 8007a68:	08012a1c 	.word	0x08012a1c
 8007a6c:	080123f8 	.word	0x080123f8
 8007a70:	08012a38 	.word	0x08012a38
 8007a74:	08012a58 	.word	0x08012a58
 8007a78:	08012a70 	.word	0x08012a70
 8007a7c:	08012a8c 	.word	0x08012a8c

08007a80 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b082      	sub	sp, #8
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d106      	bne.n	8007a9c <tcp_next_iss+0x1c>
 8007a8e:	4b0a      	ldr	r3, [pc, #40]	; (8007ab8 <tcp_next_iss+0x38>)
 8007a90:	f640 02af 	movw	r2, #2223	; 0x8af
 8007a94:	4909      	ldr	r1, [pc, #36]	; (8007abc <tcp_next_iss+0x3c>)
 8007a96:	480a      	ldr	r0, [pc, #40]	; (8007ac0 <tcp_next_iss+0x40>)
 8007a98:	f008 fe46 	bl	8010728 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8007a9c:	4b09      	ldr	r3, [pc, #36]	; (8007ac4 <tcp_next_iss+0x44>)
 8007a9e:	681a      	ldr	r2, [r3, #0]
 8007aa0:	4b09      	ldr	r3, [pc, #36]	; (8007ac8 <tcp_next_iss+0x48>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	4413      	add	r3, r2
 8007aa6:	4a07      	ldr	r2, [pc, #28]	; (8007ac4 <tcp_next_iss+0x44>)
 8007aa8:	6013      	str	r3, [r2, #0]
  return iss;
 8007aaa:	4b06      	ldr	r3, [pc, #24]	; (8007ac4 <tcp_next_iss+0x44>)
 8007aac:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8007aae:	4618      	mov	r0, r3
 8007ab0:	3708      	adds	r7, #8
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}
 8007ab6:	bf00      	nop
 8007ab8:	080123b4 	.word	0x080123b4
 8007abc:	08012aa4 	.word	0x08012aa4
 8007ac0:	080123f8 	.word	0x080123f8
 8007ac4:	20000024 	.word	0x20000024
 8007ac8:	20007c54 	.word	0x20007c54

08007acc <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b086      	sub	sp, #24
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	60b9      	str	r1, [r7, #8]
 8007ad6:	607a      	str	r2, [r7, #4]
 8007ad8:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d106      	bne.n	8007aee <tcp_eff_send_mss_netif+0x22>
 8007ae0:	4b14      	ldr	r3, [pc, #80]	; (8007b34 <tcp_eff_send_mss_netif+0x68>)
 8007ae2:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8007ae6:	4914      	ldr	r1, [pc, #80]	; (8007b38 <tcp_eff_send_mss_netif+0x6c>)
 8007ae8:	4814      	ldr	r0, [pc, #80]	; (8007b3c <tcp_eff_send_mss_netif+0x70>)
 8007aea:	f008 fe1d 	bl	8010728 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d101      	bne.n	8007af8 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8007af4:	89fb      	ldrh	r3, [r7, #14]
 8007af6:	e019      	b.n	8007b2c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8007af8:	68bb      	ldr	r3, [r7, #8]
 8007afa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007afc:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8007afe:	8afb      	ldrh	r3, [r7, #22]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d012      	beq.n	8007b2a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8007b04:	2328      	movs	r3, #40	; 0x28
 8007b06:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8007b08:	8afa      	ldrh	r2, [r7, #22]
 8007b0a:	8abb      	ldrh	r3, [r7, #20]
 8007b0c:	429a      	cmp	r2, r3
 8007b0e:	d904      	bls.n	8007b1a <tcp_eff_send_mss_netif+0x4e>
 8007b10:	8afa      	ldrh	r2, [r7, #22]
 8007b12:	8abb      	ldrh	r3, [r7, #20]
 8007b14:	1ad3      	subs	r3, r2, r3
 8007b16:	b29b      	uxth	r3, r3
 8007b18:	e000      	b.n	8007b1c <tcp_eff_send_mss_netif+0x50>
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8007b1e:	8a7a      	ldrh	r2, [r7, #18]
 8007b20:	89fb      	ldrh	r3, [r7, #14]
 8007b22:	4293      	cmp	r3, r2
 8007b24:	bf28      	it	cs
 8007b26:	4613      	movcs	r3, r2
 8007b28:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8007b2a:	89fb      	ldrh	r3, [r7, #14]
}
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	3718      	adds	r7, #24
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bd80      	pop	{r7, pc}
 8007b34:	080123b4 	.word	0x080123b4
 8007b38:	08012ac0 	.word	0x08012ac0
 8007b3c:	080123f8 	.word	0x080123f8

08007b40 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b084      	sub	sp, #16
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
 8007b48:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d119      	bne.n	8007b88 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8007b54:	4b10      	ldr	r3, [pc, #64]	; (8007b98 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8007b56:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8007b5a:	4910      	ldr	r1, [pc, #64]	; (8007b9c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8007b5c:	4810      	ldr	r0, [pc, #64]	; (8007ba0 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8007b5e:	f008 fde3 	bl	8010728 <iprintf>

  while (pcb != NULL) {
 8007b62:	e011      	b.n	8007b88 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	681a      	ldr	r2, [r3, #0]
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	429a      	cmp	r2, r3
 8007b6e:	d108      	bne.n	8007b82 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	68db      	ldr	r3, [r3, #12]
 8007b74:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8007b76:	68f8      	ldr	r0, [r7, #12]
 8007b78:	f7fe ffc6 	bl	8006b08 <tcp_abort>
      pcb = next;
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	60fb      	str	r3, [r7, #12]
 8007b80:	e002      	b.n	8007b88 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	68db      	ldr	r3, [r3, #12]
 8007b86:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d1ea      	bne.n	8007b64 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8007b8e:	bf00      	nop
 8007b90:	bf00      	nop
 8007b92:	3710      	adds	r7, #16
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bd80      	pop	{r7, pc}
 8007b98:	080123b4 	.word	0x080123b4
 8007b9c:	08012ae8 	.word	0x08012ae8
 8007ba0:	080123f8 	.word	0x080123f8

08007ba4 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b084      	sub	sp, #16
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
 8007bac:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d02a      	beq.n	8007c0a <tcp_netif_ip_addr_changed+0x66>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d026      	beq.n	8007c0a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8007bbc:	4b15      	ldr	r3, [pc, #84]	; (8007c14 <tcp_netif_ip_addr_changed+0x70>)
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	4619      	mov	r1, r3
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f7ff ffbc 	bl	8007b40 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8007bc8:	4b13      	ldr	r3, [pc, #76]	; (8007c18 <tcp_netif_ip_addr_changed+0x74>)
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	4619      	mov	r1, r3
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	f7ff ffb6 	bl	8007b40 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d017      	beq.n	8007c0a <tcp_netif_ip_addr_changed+0x66>
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d013      	beq.n	8007c0a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007be2:	4b0e      	ldr	r3, [pc, #56]	; (8007c1c <tcp_netif_ip_addr_changed+0x78>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	60fb      	str	r3, [r7, #12]
 8007be8:	e00c      	b.n	8007c04 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681a      	ldr	r2, [r3, #0]
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	429a      	cmp	r2, r3
 8007bf4:	d103      	bne.n	8007bfe <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	681a      	ldr	r2, [r3, #0]
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	68db      	ldr	r3, [r3, #12]
 8007c02:	60fb      	str	r3, [r7, #12]
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d1ef      	bne.n	8007bea <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8007c0a:	bf00      	nop
 8007c0c:	3710      	adds	r7, #16
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	bd80      	pop	{r7, pc}
 8007c12:	bf00      	nop
 8007c14:	20007c60 	.word	0x20007c60
 8007c18:	20007c58 	.word	0x20007c58
 8007c1c:	20007c5c 	.word	0x20007c5c

08007c20 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b082      	sub	sp, #8
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d007      	beq.n	8007c40 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c34:	4618      	mov	r0, r3
 8007c36:	f7ff fc3d 	bl	80074b4 <tcp_segs_free>
    pcb->ooseq = NULL;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8007c40:	bf00      	nop
 8007c42:	3708      	adds	r7, #8
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bd80      	pop	{r7, pc}

08007c48 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8007c48:	b590      	push	{r4, r7, lr}
 8007c4a:	b08d      	sub	sp, #52	; 0x34
 8007c4c:	af04      	add	r7, sp, #16
 8007c4e:	6078      	str	r0, [r7, #4]
 8007c50:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d105      	bne.n	8007c64 <tcp_input+0x1c>
 8007c58:	4b9b      	ldr	r3, [pc, #620]	; (8007ec8 <tcp_input+0x280>)
 8007c5a:	2283      	movs	r2, #131	; 0x83
 8007c5c:	499b      	ldr	r1, [pc, #620]	; (8007ecc <tcp_input+0x284>)
 8007c5e:	489c      	ldr	r0, [pc, #624]	; (8007ed0 <tcp_input+0x288>)
 8007c60:	f008 fd62 	bl	8010728 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	685b      	ldr	r3, [r3, #4]
 8007c68:	4a9a      	ldr	r2, [pc, #616]	; (8007ed4 <tcp_input+0x28c>)
 8007c6a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	895b      	ldrh	r3, [r3, #10]
 8007c70:	2b13      	cmp	r3, #19
 8007c72:	f240 83d1 	bls.w	8008418 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8007c76:	4b98      	ldr	r3, [pc, #608]	; (8007ed8 <tcp_input+0x290>)
 8007c78:	695b      	ldr	r3, [r3, #20]
 8007c7a:	4a97      	ldr	r2, [pc, #604]	; (8007ed8 <tcp_input+0x290>)
 8007c7c:	6812      	ldr	r2, [r2, #0]
 8007c7e:	4611      	mov	r1, r2
 8007c80:	4618      	mov	r0, r3
 8007c82:	f007 fdb1 	bl	800f7e8 <ip4_addr_isbroadcast_u32>
 8007c86:	4603      	mov	r3, r0
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	f040 83c7 	bne.w	800841c <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8007c8e:	4b92      	ldr	r3, [pc, #584]	; (8007ed8 <tcp_input+0x290>)
 8007c90:	695b      	ldr	r3, [r3, #20]
 8007c92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8007c96:	2be0      	cmp	r3, #224	; 0xe0
 8007c98:	f000 83c0 	beq.w	800841c <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8007c9c:	4b8d      	ldr	r3, [pc, #564]	; (8007ed4 <tcp_input+0x28c>)
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	899b      	ldrh	r3, [r3, #12]
 8007ca2:	b29b      	uxth	r3, r3
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	f7fc fd95 	bl	80047d4 <lwip_htons>
 8007caa:	4603      	mov	r3, r0
 8007cac:	0b1b      	lsrs	r3, r3, #12
 8007cae:	b29b      	uxth	r3, r3
 8007cb0:	b2db      	uxtb	r3, r3
 8007cb2:	009b      	lsls	r3, r3, #2
 8007cb4:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8007cb6:	7cbb      	ldrb	r3, [r7, #18]
 8007cb8:	2b13      	cmp	r3, #19
 8007cba:	f240 83b1 	bls.w	8008420 <tcp_input+0x7d8>
 8007cbe:	7cbb      	ldrb	r3, [r7, #18]
 8007cc0:	b29a      	uxth	r2, r3
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	891b      	ldrh	r3, [r3, #8]
 8007cc6:	429a      	cmp	r2, r3
 8007cc8:	f200 83aa 	bhi.w	8008420 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8007ccc:	7cbb      	ldrb	r3, [r7, #18]
 8007cce:	b29b      	uxth	r3, r3
 8007cd0:	3b14      	subs	r3, #20
 8007cd2:	b29a      	uxth	r2, r3
 8007cd4:	4b81      	ldr	r3, [pc, #516]	; (8007edc <tcp_input+0x294>)
 8007cd6:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8007cd8:	4b81      	ldr	r3, [pc, #516]	; (8007ee0 <tcp_input+0x298>)
 8007cda:	2200      	movs	r2, #0
 8007cdc:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	895a      	ldrh	r2, [r3, #10]
 8007ce2:	7cbb      	ldrb	r3, [r7, #18]
 8007ce4:	b29b      	uxth	r3, r3
 8007ce6:	429a      	cmp	r2, r3
 8007ce8:	d309      	bcc.n	8007cfe <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8007cea:	4b7c      	ldr	r3, [pc, #496]	; (8007edc <tcp_input+0x294>)
 8007cec:	881a      	ldrh	r2, [r3, #0]
 8007cee:	4b7d      	ldr	r3, [pc, #500]	; (8007ee4 <tcp_input+0x29c>)
 8007cf0:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8007cf2:	7cbb      	ldrb	r3, [r7, #18]
 8007cf4:	4619      	mov	r1, r3
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f7fe f8e8 	bl	8005ecc <pbuf_remove_header>
 8007cfc:	e04e      	b.n	8007d9c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d105      	bne.n	8007d12 <tcp_input+0xca>
 8007d06:	4b70      	ldr	r3, [pc, #448]	; (8007ec8 <tcp_input+0x280>)
 8007d08:	22c2      	movs	r2, #194	; 0xc2
 8007d0a:	4977      	ldr	r1, [pc, #476]	; (8007ee8 <tcp_input+0x2a0>)
 8007d0c:	4870      	ldr	r0, [pc, #448]	; (8007ed0 <tcp_input+0x288>)
 8007d0e:	f008 fd0b 	bl	8010728 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8007d12:	2114      	movs	r1, #20
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	f7fe f8d9 	bl	8005ecc <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	895a      	ldrh	r2, [r3, #10]
 8007d1e:	4b71      	ldr	r3, [pc, #452]	; (8007ee4 <tcp_input+0x29c>)
 8007d20:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8007d22:	4b6e      	ldr	r3, [pc, #440]	; (8007edc <tcp_input+0x294>)
 8007d24:	881a      	ldrh	r2, [r3, #0]
 8007d26:	4b6f      	ldr	r3, [pc, #444]	; (8007ee4 <tcp_input+0x29c>)
 8007d28:	881b      	ldrh	r3, [r3, #0]
 8007d2a:	1ad3      	subs	r3, r2, r3
 8007d2c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8007d2e:	4b6d      	ldr	r3, [pc, #436]	; (8007ee4 <tcp_input+0x29c>)
 8007d30:	881b      	ldrh	r3, [r3, #0]
 8007d32:	4619      	mov	r1, r3
 8007d34:	6878      	ldr	r0, [r7, #4]
 8007d36:	f7fe f8c9 	bl	8005ecc <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	895b      	ldrh	r3, [r3, #10]
 8007d40:	8a3a      	ldrh	r2, [r7, #16]
 8007d42:	429a      	cmp	r2, r3
 8007d44:	f200 836e 	bhi.w	8008424 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	685b      	ldr	r3, [r3, #4]
 8007d4e:	4a64      	ldr	r2, [pc, #400]	; (8007ee0 <tcp_input+0x298>)
 8007d50:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	8a3a      	ldrh	r2, [r7, #16]
 8007d58:	4611      	mov	r1, r2
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	f7fe f8b6 	bl	8005ecc <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	891a      	ldrh	r2, [r3, #8]
 8007d64:	8a3b      	ldrh	r3, [r7, #16]
 8007d66:	1ad3      	subs	r3, r2, r3
 8007d68:	b29a      	uxth	r2, r3
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	895b      	ldrh	r3, [r3, #10]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d005      	beq.n	8007d82 <tcp_input+0x13a>
 8007d76:	4b54      	ldr	r3, [pc, #336]	; (8007ec8 <tcp_input+0x280>)
 8007d78:	22df      	movs	r2, #223	; 0xdf
 8007d7a:	495c      	ldr	r1, [pc, #368]	; (8007eec <tcp_input+0x2a4>)
 8007d7c:	4854      	ldr	r0, [pc, #336]	; (8007ed0 <tcp_input+0x288>)
 8007d7e:	f008 fcd3 	bl	8010728 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	891a      	ldrh	r2, [r3, #8]
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	891b      	ldrh	r3, [r3, #8]
 8007d8c:	429a      	cmp	r2, r3
 8007d8e:	d005      	beq.n	8007d9c <tcp_input+0x154>
 8007d90:	4b4d      	ldr	r3, [pc, #308]	; (8007ec8 <tcp_input+0x280>)
 8007d92:	22e0      	movs	r2, #224	; 0xe0
 8007d94:	4956      	ldr	r1, [pc, #344]	; (8007ef0 <tcp_input+0x2a8>)
 8007d96:	484e      	ldr	r0, [pc, #312]	; (8007ed0 <tcp_input+0x288>)
 8007d98:	f008 fcc6 	bl	8010728 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8007d9c:	4b4d      	ldr	r3, [pc, #308]	; (8007ed4 <tcp_input+0x28c>)
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	881b      	ldrh	r3, [r3, #0]
 8007da2:	b29b      	uxth	r3, r3
 8007da4:	4a4b      	ldr	r2, [pc, #300]	; (8007ed4 <tcp_input+0x28c>)
 8007da6:	6814      	ldr	r4, [r2, #0]
 8007da8:	4618      	mov	r0, r3
 8007daa:	f7fc fd13 	bl	80047d4 <lwip_htons>
 8007dae:	4603      	mov	r3, r0
 8007db0:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8007db2:	4b48      	ldr	r3, [pc, #288]	; (8007ed4 <tcp_input+0x28c>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	885b      	ldrh	r3, [r3, #2]
 8007db8:	b29b      	uxth	r3, r3
 8007dba:	4a46      	ldr	r2, [pc, #280]	; (8007ed4 <tcp_input+0x28c>)
 8007dbc:	6814      	ldr	r4, [r2, #0]
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	f7fc fd08 	bl	80047d4 <lwip_htons>
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8007dc8:	4b42      	ldr	r3, [pc, #264]	; (8007ed4 <tcp_input+0x28c>)
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	685b      	ldr	r3, [r3, #4]
 8007dce:	4a41      	ldr	r2, [pc, #260]	; (8007ed4 <tcp_input+0x28c>)
 8007dd0:	6814      	ldr	r4, [r2, #0]
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	f7fc fd13 	bl	80047fe <lwip_htonl>
 8007dd8:	4603      	mov	r3, r0
 8007dda:	6063      	str	r3, [r4, #4]
 8007ddc:	6863      	ldr	r3, [r4, #4]
 8007dde:	4a45      	ldr	r2, [pc, #276]	; (8007ef4 <tcp_input+0x2ac>)
 8007de0:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8007de2:	4b3c      	ldr	r3, [pc, #240]	; (8007ed4 <tcp_input+0x28c>)
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	689b      	ldr	r3, [r3, #8]
 8007de8:	4a3a      	ldr	r2, [pc, #232]	; (8007ed4 <tcp_input+0x28c>)
 8007dea:	6814      	ldr	r4, [r2, #0]
 8007dec:	4618      	mov	r0, r3
 8007dee:	f7fc fd06 	bl	80047fe <lwip_htonl>
 8007df2:	4603      	mov	r3, r0
 8007df4:	60a3      	str	r3, [r4, #8]
 8007df6:	68a3      	ldr	r3, [r4, #8]
 8007df8:	4a3f      	ldr	r2, [pc, #252]	; (8007ef8 <tcp_input+0x2b0>)
 8007dfa:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8007dfc:	4b35      	ldr	r3, [pc, #212]	; (8007ed4 <tcp_input+0x28c>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	89db      	ldrh	r3, [r3, #14]
 8007e02:	b29b      	uxth	r3, r3
 8007e04:	4a33      	ldr	r2, [pc, #204]	; (8007ed4 <tcp_input+0x28c>)
 8007e06:	6814      	ldr	r4, [r2, #0]
 8007e08:	4618      	mov	r0, r3
 8007e0a:	f7fc fce3 	bl	80047d4 <lwip_htons>
 8007e0e:	4603      	mov	r3, r0
 8007e10:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8007e12:	4b30      	ldr	r3, [pc, #192]	; (8007ed4 <tcp_input+0x28c>)
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	899b      	ldrh	r3, [r3, #12]
 8007e18:	b29b      	uxth	r3, r3
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	f7fc fcda 	bl	80047d4 <lwip_htons>
 8007e20:	4603      	mov	r3, r0
 8007e22:	b2db      	uxtb	r3, r3
 8007e24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007e28:	b2da      	uxtb	r2, r3
 8007e2a:	4b34      	ldr	r3, [pc, #208]	; (8007efc <tcp_input+0x2b4>)
 8007e2c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	891a      	ldrh	r2, [r3, #8]
 8007e32:	4b33      	ldr	r3, [pc, #204]	; (8007f00 <tcp_input+0x2b8>)
 8007e34:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8007e36:	4b31      	ldr	r3, [pc, #196]	; (8007efc <tcp_input+0x2b4>)
 8007e38:	781b      	ldrb	r3, [r3, #0]
 8007e3a:	f003 0303 	and.w	r3, r3, #3
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d00c      	beq.n	8007e5c <tcp_input+0x214>
    tcplen++;
 8007e42:	4b2f      	ldr	r3, [pc, #188]	; (8007f00 <tcp_input+0x2b8>)
 8007e44:	881b      	ldrh	r3, [r3, #0]
 8007e46:	3301      	adds	r3, #1
 8007e48:	b29a      	uxth	r2, r3
 8007e4a:	4b2d      	ldr	r3, [pc, #180]	; (8007f00 <tcp_input+0x2b8>)
 8007e4c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	891a      	ldrh	r2, [r3, #8]
 8007e52:	4b2b      	ldr	r3, [pc, #172]	; (8007f00 <tcp_input+0x2b8>)
 8007e54:	881b      	ldrh	r3, [r3, #0]
 8007e56:	429a      	cmp	r2, r3
 8007e58:	f200 82e6 	bhi.w	8008428 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007e60:	4b28      	ldr	r3, [pc, #160]	; (8007f04 <tcp_input+0x2bc>)
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	61fb      	str	r3, [r7, #28]
 8007e66:	e09d      	b.n	8007fa4 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8007e68:	69fb      	ldr	r3, [r7, #28]
 8007e6a:	7d1b      	ldrb	r3, [r3, #20]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d105      	bne.n	8007e7c <tcp_input+0x234>
 8007e70:	4b15      	ldr	r3, [pc, #84]	; (8007ec8 <tcp_input+0x280>)
 8007e72:	22fb      	movs	r2, #251	; 0xfb
 8007e74:	4924      	ldr	r1, [pc, #144]	; (8007f08 <tcp_input+0x2c0>)
 8007e76:	4816      	ldr	r0, [pc, #88]	; (8007ed0 <tcp_input+0x288>)
 8007e78:	f008 fc56 	bl	8010728 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8007e7c:	69fb      	ldr	r3, [r7, #28]
 8007e7e:	7d1b      	ldrb	r3, [r3, #20]
 8007e80:	2b0a      	cmp	r3, #10
 8007e82:	d105      	bne.n	8007e90 <tcp_input+0x248>
 8007e84:	4b10      	ldr	r3, [pc, #64]	; (8007ec8 <tcp_input+0x280>)
 8007e86:	22fc      	movs	r2, #252	; 0xfc
 8007e88:	4920      	ldr	r1, [pc, #128]	; (8007f0c <tcp_input+0x2c4>)
 8007e8a:	4811      	ldr	r0, [pc, #68]	; (8007ed0 <tcp_input+0x288>)
 8007e8c:	f008 fc4c 	bl	8010728 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8007e90:	69fb      	ldr	r3, [r7, #28]
 8007e92:	7d1b      	ldrb	r3, [r3, #20]
 8007e94:	2b01      	cmp	r3, #1
 8007e96:	d105      	bne.n	8007ea4 <tcp_input+0x25c>
 8007e98:	4b0b      	ldr	r3, [pc, #44]	; (8007ec8 <tcp_input+0x280>)
 8007e9a:	22fd      	movs	r2, #253	; 0xfd
 8007e9c:	491c      	ldr	r1, [pc, #112]	; (8007f10 <tcp_input+0x2c8>)
 8007e9e:	480c      	ldr	r0, [pc, #48]	; (8007ed0 <tcp_input+0x288>)
 8007ea0:	f008 fc42 	bl	8010728 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007ea4:	69fb      	ldr	r3, [r7, #28]
 8007ea6:	7a1b      	ldrb	r3, [r3, #8]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d033      	beq.n	8007f14 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8007eac:	69fb      	ldr	r3, [r7, #28]
 8007eae:	7a1a      	ldrb	r2, [r3, #8]
 8007eb0:	4b09      	ldr	r3, [pc, #36]	; (8007ed8 <tcp_input+0x290>)
 8007eb2:	685b      	ldr	r3, [r3, #4]
 8007eb4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007eb8:	3301      	adds	r3, #1
 8007eba:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007ebc:	429a      	cmp	r2, r3
 8007ebe:	d029      	beq.n	8007f14 <tcp_input+0x2cc>
      prev = pcb;
 8007ec0:	69fb      	ldr	r3, [r7, #28]
 8007ec2:	61bb      	str	r3, [r7, #24]
      continue;
 8007ec4:	e06b      	b.n	8007f9e <tcp_input+0x356>
 8007ec6:	bf00      	nop
 8007ec8:	08012b1c 	.word	0x08012b1c
 8007ecc:	08012b50 	.word	0x08012b50
 8007ed0:	08012b68 	.word	0x08012b68
 8007ed4:	20007c7c 	.word	0x20007c7c
 8007ed8:	20004d18 	.word	0x20004d18
 8007edc:	20007c80 	.word	0x20007c80
 8007ee0:	20007c84 	.word	0x20007c84
 8007ee4:	20007c82 	.word	0x20007c82
 8007ee8:	08012b90 	.word	0x08012b90
 8007eec:	08012ba0 	.word	0x08012ba0
 8007ef0:	08012bac 	.word	0x08012bac
 8007ef4:	20007c8c 	.word	0x20007c8c
 8007ef8:	20007c90 	.word	0x20007c90
 8007efc:	20007c98 	.word	0x20007c98
 8007f00:	20007c96 	.word	0x20007c96
 8007f04:	20007c60 	.word	0x20007c60
 8007f08:	08012bcc 	.word	0x08012bcc
 8007f0c:	08012bf4 	.word	0x08012bf4
 8007f10:	08012c20 	.word	0x08012c20
    }

    if (pcb->remote_port == tcphdr->src &&
 8007f14:	69fb      	ldr	r3, [r7, #28]
 8007f16:	8b1a      	ldrh	r2, [r3, #24]
 8007f18:	4b72      	ldr	r3, [pc, #456]	; (80080e4 <tcp_input+0x49c>)
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	881b      	ldrh	r3, [r3, #0]
 8007f1e:	b29b      	uxth	r3, r3
 8007f20:	429a      	cmp	r2, r3
 8007f22:	d13a      	bne.n	8007f9a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8007f24:	69fb      	ldr	r3, [r7, #28]
 8007f26:	8ada      	ldrh	r2, [r3, #22]
 8007f28:	4b6e      	ldr	r3, [pc, #440]	; (80080e4 <tcp_input+0x49c>)
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	885b      	ldrh	r3, [r3, #2]
 8007f2e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8007f30:	429a      	cmp	r2, r3
 8007f32:	d132      	bne.n	8007f9a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007f34:	69fb      	ldr	r3, [r7, #28]
 8007f36:	685a      	ldr	r2, [r3, #4]
 8007f38:	4b6b      	ldr	r3, [pc, #428]	; (80080e8 <tcp_input+0x4a0>)
 8007f3a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8007f3c:	429a      	cmp	r2, r3
 8007f3e:	d12c      	bne.n	8007f9a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8007f40:	69fb      	ldr	r3, [r7, #28]
 8007f42:	681a      	ldr	r2, [r3, #0]
 8007f44:	4b68      	ldr	r3, [pc, #416]	; (80080e8 <tcp_input+0x4a0>)
 8007f46:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007f48:	429a      	cmp	r2, r3
 8007f4a:	d126      	bne.n	8007f9a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8007f4c:	69fb      	ldr	r3, [r7, #28]
 8007f4e:	68db      	ldr	r3, [r3, #12]
 8007f50:	69fa      	ldr	r2, [r7, #28]
 8007f52:	429a      	cmp	r2, r3
 8007f54:	d106      	bne.n	8007f64 <tcp_input+0x31c>
 8007f56:	4b65      	ldr	r3, [pc, #404]	; (80080ec <tcp_input+0x4a4>)
 8007f58:	f240 120d 	movw	r2, #269	; 0x10d
 8007f5c:	4964      	ldr	r1, [pc, #400]	; (80080f0 <tcp_input+0x4a8>)
 8007f5e:	4865      	ldr	r0, [pc, #404]	; (80080f4 <tcp_input+0x4ac>)
 8007f60:	f008 fbe2 	bl	8010728 <iprintf>
      if (prev != NULL) {
 8007f64:	69bb      	ldr	r3, [r7, #24]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d00a      	beq.n	8007f80 <tcp_input+0x338>
        prev->next = pcb->next;
 8007f6a:	69fb      	ldr	r3, [r7, #28]
 8007f6c:	68da      	ldr	r2, [r3, #12]
 8007f6e:	69bb      	ldr	r3, [r7, #24]
 8007f70:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8007f72:	4b61      	ldr	r3, [pc, #388]	; (80080f8 <tcp_input+0x4b0>)
 8007f74:	681a      	ldr	r2, [r3, #0]
 8007f76:	69fb      	ldr	r3, [r7, #28]
 8007f78:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8007f7a:	4a5f      	ldr	r2, [pc, #380]	; (80080f8 <tcp_input+0x4b0>)
 8007f7c:	69fb      	ldr	r3, [r7, #28]
 8007f7e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8007f80:	69fb      	ldr	r3, [r7, #28]
 8007f82:	68db      	ldr	r3, [r3, #12]
 8007f84:	69fa      	ldr	r2, [r7, #28]
 8007f86:	429a      	cmp	r2, r3
 8007f88:	d111      	bne.n	8007fae <tcp_input+0x366>
 8007f8a:	4b58      	ldr	r3, [pc, #352]	; (80080ec <tcp_input+0x4a4>)
 8007f8c:	f240 1215 	movw	r2, #277	; 0x115
 8007f90:	495a      	ldr	r1, [pc, #360]	; (80080fc <tcp_input+0x4b4>)
 8007f92:	4858      	ldr	r0, [pc, #352]	; (80080f4 <tcp_input+0x4ac>)
 8007f94:	f008 fbc8 	bl	8010728 <iprintf>
      break;
 8007f98:	e009      	b.n	8007fae <tcp_input+0x366>
    }
    prev = pcb;
 8007f9a:	69fb      	ldr	r3, [r7, #28]
 8007f9c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007f9e:	69fb      	ldr	r3, [r7, #28]
 8007fa0:	68db      	ldr	r3, [r3, #12]
 8007fa2:	61fb      	str	r3, [r7, #28]
 8007fa4:	69fb      	ldr	r3, [r7, #28]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	f47f af5e 	bne.w	8007e68 <tcp_input+0x220>
 8007fac:	e000      	b.n	8007fb0 <tcp_input+0x368>
      break;
 8007fae:	bf00      	nop
  }

  if (pcb == NULL) {
 8007fb0:	69fb      	ldr	r3, [r7, #28]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	f040 80aa 	bne.w	800810c <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007fb8:	4b51      	ldr	r3, [pc, #324]	; (8008100 <tcp_input+0x4b8>)
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	61fb      	str	r3, [r7, #28]
 8007fbe:	e03f      	b.n	8008040 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8007fc0:	69fb      	ldr	r3, [r7, #28]
 8007fc2:	7d1b      	ldrb	r3, [r3, #20]
 8007fc4:	2b0a      	cmp	r3, #10
 8007fc6:	d006      	beq.n	8007fd6 <tcp_input+0x38e>
 8007fc8:	4b48      	ldr	r3, [pc, #288]	; (80080ec <tcp_input+0x4a4>)
 8007fca:	f240 121f 	movw	r2, #287	; 0x11f
 8007fce:	494d      	ldr	r1, [pc, #308]	; (8008104 <tcp_input+0x4bc>)
 8007fd0:	4848      	ldr	r0, [pc, #288]	; (80080f4 <tcp_input+0x4ac>)
 8007fd2:	f008 fba9 	bl	8010728 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007fd6:	69fb      	ldr	r3, [r7, #28]
 8007fd8:	7a1b      	ldrb	r3, [r3, #8]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d009      	beq.n	8007ff2 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8007fde:	69fb      	ldr	r3, [r7, #28]
 8007fe0:	7a1a      	ldrb	r2, [r3, #8]
 8007fe2:	4b41      	ldr	r3, [pc, #260]	; (80080e8 <tcp_input+0x4a0>)
 8007fe4:	685b      	ldr	r3, [r3, #4]
 8007fe6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007fea:	3301      	adds	r3, #1
 8007fec:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007fee:	429a      	cmp	r2, r3
 8007ff0:	d122      	bne.n	8008038 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8007ff2:	69fb      	ldr	r3, [r7, #28]
 8007ff4:	8b1a      	ldrh	r2, [r3, #24]
 8007ff6:	4b3b      	ldr	r3, [pc, #236]	; (80080e4 <tcp_input+0x49c>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	881b      	ldrh	r3, [r3, #0]
 8007ffc:	b29b      	uxth	r3, r3
 8007ffe:	429a      	cmp	r2, r3
 8008000:	d11b      	bne.n	800803a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8008002:	69fb      	ldr	r3, [r7, #28]
 8008004:	8ada      	ldrh	r2, [r3, #22]
 8008006:	4b37      	ldr	r3, [pc, #220]	; (80080e4 <tcp_input+0x49c>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	885b      	ldrh	r3, [r3, #2]
 800800c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800800e:	429a      	cmp	r2, r3
 8008010:	d113      	bne.n	800803a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008012:	69fb      	ldr	r3, [r7, #28]
 8008014:	685a      	ldr	r2, [r3, #4]
 8008016:	4b34      	ldr	r3, [pc, #208]	; (80080e8 <tcp_input+0x4a0>)
 8008018:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800801a:	429a      	cmp	r2, r3
 800801c:	d10d      	bne.n	800803a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800801e:	69fb      	ldr	r3, [r7, #28]
 8008020:	681a      	ldr	r2, [r3, #0]
 8008022:	4b31      	ldr	r3, [pc, #196]	; (80080e8 <tcp_input+0x4a0>)
 8008024:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008026:	429a      	cmp	r2, r3
 8008028:	d107      	bne.n	800803a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800802a:	69f8      	ldr	r0, [r7, #28]
 800802c:	f000 fb56 	bl	80086dc <tcp_timewait_input>
        }
        pbuf_free(p);
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	f7fd ffd1 	bl	8005fd8 <pbuf_free>
        return;
 8008036:	e1fd      	b.n	8008434 <tcp_input+0x7ec>
        continue;
 8008038:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800803a:	69fb      	ldr	r3, [r7, #28]
 800803c:	68db      	ldr	r3, [r3, #12]
 800803e:	61fb      	str	r3, [r7, #28]
 8008040:	69fb      	ldr	r3, [r7, #28]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d1bc      	bne.n	8007fc0 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8008046:	2300      	movs	r3, #0
 8008048:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800804a:	4b2f      	ldr	r3, [pc, #188]	; (8008108 <tcp_input+0x4c0>)
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	617b      	str	r3, [r7, #20]
 8008050:	e02a      	b.n	80080a8 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8008052:	697b      	ldr	r3, [r7, #20]
 8008054:	7a1b      	ldrb	r3, [r3, #8]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d00c      	beq.n	8008074 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800805a:	697b      	ldr	r3, [r7, #20]
 800805c:	7a1a      	ldrb	r2, [r3, #8]
 800805e:	4b22      	ldr	r3, [pc, #136]	; (80080e8 <tcp_input+0x4a0>)
 8008060:	685b      	ldr	r3, [r3, #4]
 8008062:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008066:	3301      	adds	r3, #1
 8008068:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800806a:	429a      	cmp	r2, r3
 800806c:	d002      	beq.n	8008074 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800806e:	697b      	ldr	r3, [r7, #20]
 8008070:	61bb      	str	r3, [r7, #24]
        continue;
 8008072:	e016      	b.n	80080a2 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8008074:	697b      	ldr	r3, [r7, #20]
 8008076:	8ada      	ldrh	r2, [r3, #22]
 8008078:	4b1a      	ldr	r3, [pc, #104]	; (80080e4 <tcp_input+0x49c>)
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	885b      	ldrh	r3, [r3, #2]
 800807e:	b29b      	uxth	r3, r3
 8008080:	429a      	cmp	r2, r3
 8008082:	d10c      	bne.n	800809e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8008084:	697b      	ldr	r3, [r7, #20]
 8008086:	681a      	ldr	r2, [r3, #0]
 8008088:	4b17      	ldr	r3, [pc, #92]	; (80080e8 <tcp_input+0x4a0>)
 800808a:	695b      	ldr	r3, [r3, #20]
 800808c:	429a      	cmp	r2, r3
 800808e:	d00f      	beq.n	80080b0 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8008090:	697b      	ldr	r3, [r7, #20]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d00d      	beq.n	80080b2 <tcp_input+0x46a>
 8008096:	697b      	ldr	r3, [r7, #20]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d009      	beq.n	80080b2 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800809e:	697b      	ldr	r3, [r7, #20]
 80080a0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80080a2:	697b      	ldr	r3, [r7, #20]
 80080a4:	68db      	ldr	r3, [r3, #12]
 80080a6:	617b      	str	r3, [r7, #20]
 80080a8:	697b      	ldr	r3, [r7, #20]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d1d1      	bne.n	8008052 <tcp_input+0x40a>
 80080ae:	e000      	b.n	80080b2 <tcp_input+0x46a>
            break;
 80080b0:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 80080b2:	697b      	ldr	r3, [r7, #20]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d029      	beq.n	800810c <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80080b8:	69bb      	ldr	r3, [r7, #24]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d00a      	beq.n	80080d4 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80080be:	697b      	ldr	r3, [r7, #20]
 80080c0:	68da      	ldr	r2, [r3, #12]
 80080c2:	69bb      	ldr	r3, [r7, #24]
 80080c4:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80080c6:	4b10      	ldr	r3, [pc, #64]	; (8008108 <tcp_input+0x4c0>)
 80080c8:	681a      	ldr	r2, [r3, #0]
 80080ca:	697b      	ldr	r3, [r7, #20]
 80080cc:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80080ce:	4a0e      	ldr	r2, [pc, #56]	; (8008108 <tcp_input+0x4c0>)
 80080d0:	697b      	ldr	r3, [r7, #20]
 80080d2:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 80080d4:	6978      	ldr	r0, [r7, #20]
 80080d6:	f000 fa03 	bl	80084e0 <tcp_listen_input>
      }
      pbuf_free(p);
 80080da:	6878      	ldr	r0, [r7, #4]
 80080dc:	f7fd ff7c 	bl	8005fd8 <pbuf_free>
      return;
 80080e0:	e1a8      	b.n	8008434 <tcp_input+0x7ec>
 80080e2:	bf00      	nop
 80080e4:	20007c7c 	.word	0x20007c7c
 80080e8:	20004d18 	.word	0x20004d18
 80080ec:	08012b1c 	.word	0x08012b1c
 80080f0:	08012c48 	.word	0x08012c48
 80080f4:	08012b68 	.word	0x08012b68
 80080f8:	20007c60 	.word	0x20007c60
 80080fc:	08012c74 	.word	0x08012c74
 8008100:	20007c64 	.word	0x20007c64
 8008104:	08012ca0 	.word	0x08012ca0
 8008108:	20007c5c 	.word	0x20007c5c
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800810c:	69fb      	ldr	r3, [r7, #28]
 800810e:	2b00      	cmp	r3, #0
 8008110:	f000 8158 	beq.w	80083c4 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8008114:	4b95      	ldr	r3, [pc, #596]	; (800836c <tcp_input+0x724>)
 8008116:	2200      	movs	r2, #0
 8008118:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	891a      	ldrh	r2, [r3, #8]
 800811e:	4b93      	ldr	r3, [pc, #588]	; (800836c <tcp_input+0x724>)
 8008120:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8008122:	4a92      	ldr	r2, [pc, #584]	; (800836c <tcp_input+0x724>)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8008128:	4b91      	ldr	r3, [pc, #580]	; (8008370 <tcp_input+0x728>)
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	4a8f      	ldr	r2, [pc, #572]	; (800836c <tcp_input+0x724>)
 800812e:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8008130:	4b90      	ldr	r3, [pc, #576]	; (8008374 <tcp_input+0x72c>)
 8008132:	2200      	movs	r2, #0
 8008134:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8008136:	4b90      	ldr	r3, [pc, #576]	; (8008378 <tcp_input+0x730>)
 8008138:	2200      	movs	r2, #0
 800813a:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800813c:	4b8f      	ldr	r3, [pc, #572]	; (800837c <tcp_input+0x734>)
 800813e:	2200      	movs	r2, #0
 8008140:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8008142:	4b8f      	ldr	r3, [pc, #572]	; (8008380 <tcp_input+0x738>)
 8008144:	781b      	ldrb	r3, [r3, #0]
 8008146:	f003 0308 	and.w	r3, r3, #8
 800814a:	2b00      	cmp	r3, #0
 800814c:	d006      	beq.n	800815c <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	7b5b      	ldrb	r3, [r3, #13]
 8008152:	f043 0301 	orr.w	r3, r3, #1
 8008156:	b2da      	uxtb	r2, r3
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800815c:	69fb      	ldr	r3, [r7, #28]
 800815e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008160:	2b00      	cmp	r3, #0
 8008162:	d017      	beq.n	8008194 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8008164:	69f8      	ldr	r0, [r7, #28]
 8008166:	f7ff f929 	bl	80073bc <tcp_process_refused_data>
 800816a:	4603      	mov	r3, r0
 800816c:	f113 0f0d 	cmn.w	r3, #13
 8008170:	d007      	beq.n	8008182 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8008172:	69fb      	ldr	r3, [r7, #28]
 8008174:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8008176:	2b00      	cmp	r3, #0
 8008178:	d00c      	beq.n	8008194 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800817a:	4b82      	ldr	r3, [pc, #520]	; (8008384 <tcp_input+0x73c>)
 800817c:	881b      	ldrh	r3, [r3, #0]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d008      	beq.n	8008194 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8008182:	69fb      	ldr	r3, [r7, #28]
 8008184:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008186:	2b00      	cmp	r3, #0
 8008188:	f040 80e3 	bne.w	8008352 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800818c:	69f8      	ldr	r0, [r7, #28]
 800818e:	f003 f9ad 	bl	800b4ec <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8008192:	e0de      	b.n	8008352 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8008194:	4a7c      	ldr	r2, [pc, #496]	; (8008388 <tcp_input+0x740>)
 8008196:	69fb      	ldr	r3, [r7, #28]
 8008198:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800819a:	69f8      	ldr	r0, [r7, #28]
 800819c:	f000 fb18 	bl	80087d0 <tcp_process>
 80081a0:	4603      	mov	r3, r0
 80081a2:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80081a4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80081a8:	f113 0f0d 	cmn.w	r3, #13
 80081ac:	f000 80d3 	beq.w	8008356 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 80081b0:	4b71      	ldr	r3, [pc, #452]	; (8008378 <tcp_input+0x730>)
 80081b2:	781b      	ldrb	r3, [r3, #0]
 80081b4:	f003 0308 	and.w	r3, r3, #8
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d015      	beq.n	80081e8 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80081bc:	69fb      	ldr	r3, [r7, #28]
 80081be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d008      	beq.n	80081d8 <tcp_input+0x590>
 80081c6:	69fb      	ldr	r3, [r7, #28]
 80081c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081cc:	69fa      	ldr	r2, [r7, #28]
 80081ce:	6912      	ldr	r2, [r2, #16]
 80081d0:	f06f 010d 	mvn.w	r1, #13
 80081d4:	4610      	mov	r0, r2
 80081d6:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80081d8:	69f9      	ldr	r1, [r7, #28]
 80081da:	486c      	ldr	r0, [pc, #432]	; (800838c <tcp_input+0x744>)
 80081dc:	f7ff fbbc 	bl	8007958 <tcp_pcb_remove>
        tcp_free(pcb);
 80081e0:	69f8      	ldr	r0, [r7, #28]
 80081e2:	f7fe f9a9 	bl	8006538 <tcp_free>
 80081e6:	e0da      	b.n	800839e <tcp_input+0x756>
      } else {
        err = ERR_OK;
 80081e8:	2300      	movs	r3, #0
 80081ea:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80081ec:	4b63      	ldr	r3, [pc, #396]	; (800837c <tcp_input+0x734>)
 80081ee:	881b      	ldrh	r3, [r3, #0]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d01d      	beq.n	8008230 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80081f4:	4b61      	ldr	r3, [pc, #388]	; (800837c <tcp_input+0x734>)
 80081f6:	881b      	ldrh	r3, [r3, #0]
 80081f8:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80081fa:	69fb      	ldr	r3, [r7, #28]
 80081fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008200:	2b00      	cmp	r3, #0
 8008202:	d00a      	beq.n	800821a <tcp_input+0x5d2>
 8008204:	69fb      	ldr	r3, [r7, #28]
 8008206:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800820a:	69fa      	ldr	r2, [r7, #28]
 800820c:	6910      	ldr	r0, [r2, #16]
 800820e:	89fa      	ldrh	r2, [r7, #14]
 8008210:	69f9      	ldr	r1, [r7, #28]
 8008212:	4798      	blx	r3
 8008214:	4603      	mov	r3, r0
 8008216:	74fb      	strb	r3, [r7, #19]
 8008218:	e001      	b.n	800821e <tcp_input+0x5d6>
 800821a:	2300      	movs	r3, #0
 800821c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800821e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008222:	f113 0f0d 	cmn.w	r3, #13
 8008226:	f000 8098 	beq.w	800835a <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800822a:	4b54      	ldr	r3, [pc, #336]	; (800837c <tcp_input+0x734>)
 800822c:	2200      	movs	r2, #0
 800822e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8008230:	69f8      	ldr	r0, [r7, #28]
 8008232:	f000 f915 	bl	8008460 <tcp_input_delayed_close>
 8008236:	4603      	mov	r3, r0
 8008238:	2b00      	cmp	r3, #0
 800823a:	f040 8090 	bne.w	800835e <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800823e:	4b4d      	ldr	r3, [pc, #308]	; (8008374 <tcp_input+0x72c>)
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d041      	beq.n	80082ca <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8008246:	69fb      	ldr	r3, [r7, #28]
 8008248:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800824a:	2b00      	cmp	r3, #0
 800824c:	d006      	beq.n	800825c <tcp_input+0x614>
 800824e:	4b50      	ldr	r3, [pc, #320]	; (8008390 <tcp_input+0x748>)
 8008250:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8008254:	494f      	ldr	r1, [pc, #316]	; (8008394 <tcp_input+0x74c>)
 8008256:	4850      	ldr	r0, [pc, #320]	; (8008398 <tcp_input+0x750>)
 8008258:	f008 fa66 	bl	8010728 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800825c:	69fb      	ldr	r3, [r7, #28]
 800825e:	8b5b      	ldrh	r3, [r3, #26]
 8008260:	f003 0310 	and.w	r3, r3, #16
 8008264:	2b00      	cmp	r3, #0
 8008266:	d008      	beq.n	800827a <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8008268:	4b42      	ldr	r3, [pc, #264]	; (8008374 <tcp_input+0x72c>)
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	4618      	mov	r0, r3
 800826e:	f7fd feb3 	bl	8005fd8 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8008272:	69f8      	ldr	r0, [r7, #28]
 8008274:	f7fe fc48 	bl	8006b08 <tcp_abort>
            goto aborted;
 8008278:	e091      	b.n	800839e <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800827a:	69fb      	ldr	r3, [r7, #28]
 800827c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008280:	2b00      	cmp	r3, #0
 8008282:	d00c      	beq.n	800829e <tcp_input+0x656>
 8008284:	69fb      	ldr	r3, [r7, #28]
 8008286:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800828a:	69fb      	ldr	r3, [r7, #28]
 800828c:	6918      	ldr	r0, [r3, #16]
 800828e:	4b39      	ldr	r3, [pc, #228]	; (8008374 <tcp_input+0x72c>)
 8008290:	681a      	ldr	r2, [r3, #0]
 8008292:	2300      	movs	r3, #0
 8008294:	69f9      	ldr	r1, [r7, #28]
 8008296:	47a0      	blx	r4
 8008298:	4603      	mov	r3, r0
 800829a:	74fb      	strb	r3, [r7, #19]
 800829c:	e008      	b.n	80082b0 <tcp_input+0x668>
 800829e:	4b35      	ldr	r3, [pc, #212]	; (8008374 <tcp_input+0x72c>)
 80082a0:	681a      	ldr	r2, [r3, #0]
 80082a2:	2300      	movs	r3, #0
 80082a4:	69f9      	ldr	r1, [r7, #28]
 80082a6:	2000      	movs	r0, #0
 80082a8:	f7ff f95e 	bl	8007568 <tcp_recv_null>
 80082ac:	4603      	mov	r3, r0
 80082ae:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80082b0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80082b4:	f113 0f0d 	cmn.w	r3, #13
 80082b8:	d053      	beq.n	8008362 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80082ba:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d003      	beq.n	80082ca <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80082c2:	4b2c      	ldr	r3, [pc, #176]	; (8008374 <tcp_input+0x72c>)
 80082c4:	681a      	ldr	r2, [r3, #0]
 80082c6:	69fb      	ldr	r3, [r7, #28]
 80082c8:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80082ca:	4b2b      	ldr	r3, [pc, #172]	; (8008378 <tcp_input+0x730>)
 80082cc:	781b      	ldrb	r3, [r3, #0]
 80082ce:	f003 0320 	and.w	r3, r3, #32
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d030      	beq.n	8008338 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 80082d6:	69fb      	ldr	r3, [r7, #28]
 80082d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d009      	beq.n	80082f2 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80082de:	69fb      	ldr	r3, [r7, #28]
 80082e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80082e2:	7b5a      	ldrb	r2, [r3, #13]
 80082e4:	69fb      	ldr	r3, [r7, #28]
 80082e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80082e8:	f042 0220 	orr.w	r2, r2, #32
 80082ec:	b2d2      	uxtb	r2, r2
 80082ee:	735a      	strb	r2, [r3, #13]
 80082f0:	e022      	b.n	8008338 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80082f2:	69fb      	ldr	r3, [r7, #28]
 80082f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082f6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80082fa:	d005      	beq.n	8008308 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 80082fc:	69fb      	ldr	r3, [r7, #28]
 80082fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008300:	3301      	adds	r3, #1
 8008302:	b29a      	uxth	r2, r3
 8008304:	69fb      	ldr	r3, [r7, #28]
 8008306:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8008308:	69fb      	ldr	r3, [r7, #28]
 800830a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800830e:	2b00      	cmp	r3, #0
 8008310:	d00b      	beq.n	800832a <tcp_input+0x6e2>
 8008312:	69fb      	ldr	r3, [r7, #28]
 8008314:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8008318:	69fb      	ldr	r3, [r7, #28]
 800831a:	6918      	ldr	r0, [r3, #16]
 800831c:	2300      	movs	r3, #0
 800831e:	2200      	movs	r2, #0
 8008320:	69f9      	ldr	r1, [r7, #28]
 8008322:	47a0      	blx	r4
 8008324:	4603      	mov	r3, r0
 8008326:	74fb      	strb	r3, [r7, #19]
 8008328:	e001      	b.n	800832e <tcp_input+0x6e6>
 800832a:	2300      	movs	r3, #0
 800832c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800832e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008332:	f113 0f0d 	cmn.w	r3, #13
 8008336:	d016      	beq.n	8008366 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8008338:	4b13      	ldr	r3, [pc, #76]	; (8008388 <tcp_input+0x740>)
 800833a:	2200      	movs	r2, #0
 800833c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800833e:	69f8      	ldr	r0, [r7, #28]
 8008340:	f000 f88e 	bl	8008460 <tcp_input_delayed_close>
 8008344:	4603      	mov	r3, r0
 8008346:	2b00      	cmp	r3, #0
 8008348:	d128      	bne.n	800839c <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800834a:	69f8      	ldr	r0, [r7, #28]
 800834c:	f002 fac8 	bl	800a8e0 <tcp_output>
 8008350:	e025      	b.n	800839e <tcp_input+0x756>
        goto aborted;
 8008352:	bf00      	nop
 8008354:	e023      	b.n	800839e <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8008356:	bf00      	nop
 8008358:	e021      	b.n	800839e <tcp_input+0x756>
              goto aborted;
 800835a:	bf00      	nop
 800835c:	e01f      	b.n	800839e <tcp_input+0x756>
          goto aborted;
 800835e:	bf00      	nop
 8008360:	e01d      	b.n	800839e <tcp_input+0x756>
            goto aborted;
 8008362:	bf00      	nop
 8008364:	e01b      	b.n	800839e <tcp_input+0x756>
              goto aborted;
 8008366:	bf00      	nop
 8008368:	e019      	b.n	800839e <tcp_input+0x756>
 800836a:	bf00      	nop
 800836c:	20007c6c 	.word	0x20007c6c
 8008370:	20007c7c 	.word	0x20007c7c
 8008374:	20007c9c 	.word	0x20007c9c
 8008378:	20007c99 	.word	0x20007c99
 800837c:	20007c94 	.word	0x20007c94
 8008380:	20007c98 	.word	0x20007c98
 8008384:	20007c96 	.word	0x20007c96
 8008388:	20007ca0 	.word	0x20007ca0
 800838c:	20007c60 	.word	0x20007c60
 8008390:	08012b1c 	.word	0x08012b1c
 8008394:	08012cd0 	.word	0x08012cd0
 8008398:	08012b68 	.word	0x08012b68
          goto aborted;
 800839c:	bf00      	nop
    tcp_input_pcb = NULL;
 800839e:	4b27      	ldr	r3, [pc, #156]	; (800843c <tcp_input+0x7f4>)
 80083a0:	2200      	movs	r2, #0
 80083a2:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80083a4:	4b26      	ldr	r3, [pc, #152]	; (8008440 <tcp_input+0x7f8>)
 80083a6:	2200      	movs	r2, #0
 80083a8:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 80083aa:	4b26      	ldr	r3, [pc, #152]	; (8008444 <tcp_input+0x7fc>)
 80083ac:	685b      	ldr	r3, [r3, #4]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d03f      	beq.n	8008432 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 80083b2:	4b24      	ldr	r3, [pc, #144]	; (8008444 <tcp_input+0x7fc>)
 80083b4:	685b      	ldr	r3, [r3, #4]
 80083b6:	4618      	mov	r0, r3
 80083b8:	f7fd fe0e 	bl	8005fd8 <pbuf_free>
      inseg.p = NULL;
 80083bc:	4b21      	ldr	r3, [pc, #132]	; (8008444 <tcp_input+0x7fc>)
 80083be:	2200      	movs	r2, #0
 80083c0:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80083c2:	e036      	b.n	8008432 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80083c4:	4b20      	ldr	r3, [pc, #128]	; (8008448 <tcp_input+0x800>)
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	899b      	ldrh	r3, [r3, #12]
 80083ca:	b29b      	uxth	r3, r3
 80083cc:	4618      	mov	r0, r3
 80083ce:	f7fc fa01 	bl	80047d4 <lwip_htons>
 80083d2:	4603      	mov	r3, r0
 80083d4:	b2db      	uxtb	r3, r3
 80083d6:	f003 0304 	and.w	r3, r3, #4
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d118      	bne.n	8008410 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80083de:	4b1b      	ldr	r3, [pc, #108]	; (800844c <tcp_input+0x804>)
 80083e0:	6819      	ldr	r1, [r3, #0]
 80083e2:	4b1b      	ldr	r3, [pc, #108]	; (8008450 <tcp_input+0x808>)
 80083e4:	881b      	ldrh	r3, [r3, #0]
 80083e6:	461a      	mov	r2, r3
 80083e8:	4b1a      	ldr	r3, [pc, #104]	; (8008454 <tcp_input+0x80c>)
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80083ee:	4b16      	ldr	r3, [pc, #88]	; (8008448 <tcp_input+0x800>)
 80083f0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80083f2:	885b      	ldrh	r3, [r3, #2]
 80083f4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80083f6:	4a14      	ldr	r2, [pc, #80]	; (8008448 <tcp_input+0x800>)
 80083f8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80083fa:	8812      	ldrh	r2, [r2, #0]
 80083fc:	b292      	uxth	r2, r2
 80083fe:	9202      	str	r2, [sp, #8]
 8008400:	9301      	str	r3, [sp, #4]
 8008402:	4b15      	ldr	r3, [pc, #84]	; (8008458 <tcp_input+0x810>)
 8008404:	9300      	str	r3, [sp, #0]
 8008406:	4b15      	ldr	r3, [pc, #84]	; (800845c <tcp_input+0x814>)
 8008408:	4602      	mov	r2, r0
 800840a:	2000      	movs	r0, #0
 800840c:	f003 f81c 	bl	800b448 <tcp_rst>
    pbuf_free(p);
 8008410:	6878      	ldr	r0, [r7, #4]
 8008412:	f7fd fde1 	bl	8005fd8 <pbuf_free>
  return;
 8008416:	e00c      	b.n	8008432 <tcp_input+0x7ea>
    goto dropped;
 8008418:	bf00      	nop
 800841a:	e006      	b.n	800842a <tcp_input+0x7e2>
    goto dropped;
 800841c:	bf00      	nop
 800841e:	e004      	b.n	800842a <tcp_input+0x7e2>
    goto dropped;
 8008420:	bf00      	nop
 8008422:	e002      	b.n	800842a <tcp_input+0x7e2>
      goto dropped;
 8008424:	bf00      	nop
 8008426:	e000      	b.n	800842a <tcp_input+0x7e2>
      goto dropped;
 8008428:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	f7fd fdd4 	bl	8005fd8 <pbuf_free>
 8008430:	e000      	b.n	8008434 <tcp_input+0x7ec>
  return;
 8008432:	bf00      	nop
}
 8008434:	3724      	adds	r7, #36	; 0x24
 8008436:	46bd      	mov	sp, r7
 8008438:	bd90      	pop	{r4, r7, pc}
 800843a:	bf00      	nop
 800843c:	20007ca0 	.word	0x20007ca0
 8008440:	20007c9c 	.word	0x20007c9c
 8008444:	20007c6c 	.word	0x20007c6c
 8008448:	20007c7c 	.word	0x20007c7c
 800844c:	20007c90 	.word	0x20007c90
 8008450:	20007c96 	.word	0x20007c96
 8008454:	20007c8c 	.word	0x20007c8c
 8008458:	20004d28 	.word	0x20004d28
 800845c:	20004d2c 	.word	0x20004d2c

08008460 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b082      	sub	sp, #8
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d106      	bne.n	800847c <tcp_input_delayed_close+0x1c>
 800846e:	4b17      	ldr	r3, [pc, #92]	; (80084cc <tcp_input_delayed_close+0x6c>)
 8008470:	f240 225a 	movw	r2, #602	; 0x25a
 8008474:	4916      	ldr	r1, [pc, #88]	; (80084d0 <tcp_input_delayed_close+0x70>)
 8008476:	4817      	ldr	r0, [pc, #92]	; (80084d4 <tcp_input_delayed_close+0x74>)
 8008478:	f008 f956 	bl	8010728 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800847c:	4b16      	ldr	r3, [pc, #88]	; (80084d8 <tcp_input_delayed_close+0x78>)
 800847e:	781b      	ldrb	r3, [r3, #0]
 8008480:	f003 0310 	and.w	r3, r3, #16
 8008484:	2b00      	cmp	r3, #0
 8008486:	d01c      	beq.n	80084c2 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	8b5b      	ldrh	r3, [r3, #26]
 800848c:	f003 0310 	and.w	r3, r3, #16
 8008490:	2b00      	cmp	r3, #0
 8008492:	d10d      	bne.n	80084b0 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800849a:	2b00      	cmp	r3, #0
 800849c:	d008      	beq.n	80084b0 <tcp_input_delayed_close+0x50>
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084a4:	687a      	ldr	r2, [r7, #4]
 80084a6:	6912      	ldr	r2, [r2, #16]
 80084a8:	f06f 010e 	mvn.w	r1, #14
 80084ac:	4610      	mov	r0, r2
 80084ae:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80084b0:	6879      	ldr	r1, [r7, #4]
 80084b2:	480a      	ldr	r0, [pc, #40]	; (80084dc <tcp_input_delayed_close+0x7c>)
 80084b4:	f7ff fa50 	bl	8007958 <tcp_pcb_remove>
    tcp_free(pcb);
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	f7fe f83d 	bl	8006538 <tcp_free>
    return 1;
 80084be:	2301      	movs	r3, #1
 80084c0:	e000      	b.n	80084c4 <tcp_input_delayed_close+0x64>
  }
  return 0;
 80084c2:	2300      	movs	r3, #0
}
 80084c4:	4618      	mov	r0, r3
 80084c6:	3708      	adds	r7, #8
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bd80      	pop	{r7, pc}
 80084cc:	08012b1c 	.word	0x08012b1c
 80084d0:	08012cec 	.word	0x08012cec
 80084d4:	08012b68 	.word	0x08012b68
 80084d8:	20007c99 	.word	0x20007c99
 80084dc:	20007c60 	.word	0x20007c60

080084e0 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80084e0:	b590      	push	{r4, r7, lr}
 80084e2:	b08b      	sub	sp, #44	; 0x2c
 80084e4:	af04      	add	r7, sp, #16
 80084e6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80084e8:	4b6f      	ldr	r3, [pc, #444]	; (80086a8 <tcp_listen_input+0x1c8>)
 80084ea:	781b      	ldrb	r3, [r3, #0]
 80084ec:	f003 0304 	and.w	r3, r3, #4
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	f040 80d2 	bne.w	800869a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d106      	bne.n	800850a <tcp_listen_input+0x2a>
 80084fc:	4b6b      	ldr	r3, [pc, #428]	; (80086ac <tcp_listen_input+0x1cc>)
 80084fe:	f240 2281 	movw	r2, #641	; 0x281
 8008502:	496b      	ldr	r1, [pc, #428]	; (80086b0 <tcp_listen_input+0x1d0>)
 8008504:	486b      	ldr	r0, [pc, #428]	; (80086b4 <tcp_listen_input+0x1d4>)
 8008506:	f008 f90f 	bl	8010728 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800850a:	4b67      	ldr	r3, [pc, #412]	; (80086a8 <tcp_listen_input+0x1c8>)
 800850c:	781b      	ldrb	r3, [r3, #0]
 800850e:	f003 0310 	and.w	r3, r3, #16
 8008512:	2b00      	cmp	r3, #0
 8008514:	d019      	beq.n	800854a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008516:	4b68      	ldr	r3, [pc, #416]	; (80086b8 <tcp_listen_input+0x1d8>)
 8008518:	6819      	ldr	r1, [r3, #0]
 800851a:	4b68      	ldr	r3, [pc, #416]	; (80086bc <tcp_listen_input+0x1dc>)
 800851c:	881b      	ldrh	r3, [r3, #0]
 800851e:	461a      	mov	r2, r3
 8008520:	4b67      	ldr	r3, [pc, #412]	; (80086c0 <tcp_listen_input+0x1e0>)
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008526:	4b67      	ldr	r3, [pc, #412]	; (80086c4 <tcp_listen_input+0x1e4>)
 8008528:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800852a:	885b      	ldrh	r3, [r3, #2]
 800852c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800852e:	4a65      	ldr	r2, [pc, #404]	; (80086c4 <tcp_listen_input+0x1e4>)
 8008530:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008532:	8812      	ldrh	r2, [r2, #0]
 8008534:	b292      	uxth	r2, r2
 8008536:	9202      	str	r2, [sp, #8]
 8008538:	9301      	str	r3, [sp, #4]
 800853a:	4b63      	ldr	r3, [pc, #396]	; (80086c8 <tcp_listen_input+0x1e8>)
 800853c:	9300      	str	r3, [sp, #0]
 800853e:	4b63      	ldr	r3, [pc, #396]	; (80086cc <tcp_listen_input+0x1ec>)
 8008540:	4602      	mov	r2, r0
 8008542:	6878      	ldr	r0, [r7, #4]
 8008544:	f002 ff80 	bl	800b448 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8008548:	e0a9      	b.n	800869e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800854a:	4b57      	ldr	r3, [pc, #348]	; (80086a8 <tcp_listen_input+0x1c8>)
 800854c:	781b      	ldrb	r3, [r3, #0]
 800854e:	f003 0302 	and.w	r3, r3, #2
 8008552:	2b00      	cmp	r3, #0
 8008554:	f000 80a3 	beq.w	800869e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	7d5b      	ldrb	r3, [r3, #21]
 800855c:	4618      	mov	r0, r3
 800855e:	f7ff f927 	bl	80077b0 <tcp_alloc>
 8008562:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8008564:	697b      	ldr	r3, [r7, #20]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d111      	bne.n	800858e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	699b      	ldr	r3, [r3, #24]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d00a      	beq.n	8008588 <tcp_listen_input+0xa8>
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	699b      	ldr	r3, [r3, #24]
 8008576:	687a      	ldr	r2, [r7, #4]
 8008578:	6910      	ldr	r0, [r2, #16]
 800857a:	f04f 32ff 	mov.w	r2, #4294967295
 800857e:	2100      	movs	r1, #0
 8008580:	4798      	blx	r3
 8008582:	4603      	mov	r3, r0
 8008584:	73bb      	strb	r3, [r7, #14]
      return;
 8008586:	e08b      	b.n	80086a0 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8008588:	23f0      	movs	r3, #240	; 0xf0
 800858a:	73bb      	strb	r3, [r7, #14]
      return;
 800858c:	e088      	b.n	80086a0 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800858e:	4b50      	ldr	r3, [pc, #320]	; (80086d0 <tcp_listen_input+0x1f0>)
 8008590:	695a      	ldr	r2, [r3, #20]
 8008592:	697b      	ldr	r3, [r7, #20]
 8008594:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8008596:	4b4e      	ldr	r3, [pc, #312]	; (80086d0 <tcp_listen_input+0x1f0>)
 8008598:	691a      	ldr	r2, [r3, #16]
 800859a:	697b      	ldr	r3, [r7, #20]
 800859c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	8ada      	ldrh	r2, [r3, #22]
 80085a2:	697b      	ldr	r3, [r7, #20]
 80085a4:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80085a6:	4b47      	ldr	r3, [pc, #284]	; (80086c4 <tcp_listen_input+0x1e4>)
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	881b      	ldrh	r3, [r3, #0]
 80085ac:	b29a      	uxth	r2, r3
 80085ae:	697b      	ldr	r3, [r7, #20]
 80085b0:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80085b2:	697b      	ldr	r3, [r7, #20]
 80085b4:	2203      	movs	r2, #3
 80085b6:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80085b8:	4b41      	ldr	r3, [pc, #260]	; (80086c0 <tcp_listen_input+0x1e0>)
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	1c5a      	adds	r2, r3, #1
 80085be:	697b      	ldr	r3, [r7, #20]
 80085c0:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80085c2:	697b      	ldr	r3, [r7, #20]
 80085c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80085c6:	697b      	ldr	r3, [r7, #20]
 80085c8:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 80085ca:	6978      	ldr	r0, [r7, #20]
 80085cc:	f7ff fa58 	bl	8007a80 <tcp_next_iss>
 80085d0:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80085d2:	697b      	ldr	r3, [r7, #20]
 80085d4:	693a      	ldr	r2, [r7, #16]
 80085d6:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 80085d8:	697b      	ldr	r3, [r7, #20]
 80085da:	693a      	ldr	r2, [r7, #16]
 80085dc:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 80085de:	697b      	ldr	r3, [r7, #20]
 80085e0:	693a      	ldr	r2, [r7, #16]
 80085e2:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 80085e4:	697b      	ldr	r3, [r7, #20]
 80085e6:	693a      	ldr	r2, [r7, #16]
 80085e8:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80085ea:	4b35      	ldr	r3, [pc, #212]	; (80086c0 <tcp_listen_input+0x1e0>)
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	1e5a      	subs	r2, r3, #1
 80085f0:	697b      	ldr	r3, [r7, #20]
 80085f2:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	691a      	ldr	r2, [r3, #16]
 80085f8:	697b      	ldr	r3, [r7, #20]
 80085fa:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80085fc:	697b      	ldr	r3, [r7, #20]
 80085fe:	687a      	ldr	r2, [r7, #4]
 8008600:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	7a5b      	ldrb	r3, [r3, #9]
 8008606:	f003 030c 	and.w	r3, r3, #12
 800860a:	b2da      	uxtb	r2, r3
 800860c:	697b      	ldr	r3, [r7, #20]
 800860e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	7a1a      	ldrb	r2, [r3, #8]
 8008614:	697b      	ldr	r3, [r7, #20]
 8008616:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8008618:	4b2e      	ldr	r3, [pc, #184]	; (80086d4 <tcp_listen_input+0x1f4>)
 800861a:	681a      	ldr	r2, [r3, #0]
 800861c:	697b      	ldr	r3, [r7, #20]
 800861e:	60da      	str	r2, [r3, #12]
 8008620:	4a2c      	ldr	r2, [pc, #176]	; (80086d4 <tcp_listen_input+0x1f4>)
 8008622:	697b      	ldr	r3, [r7, #20]
 8008624:	6013      	str	r3, [r2, #0]
 8008626:	f003 f8d1 	bl	800b7cc <tcp_timer_needed>
 800862a:	4b2b      	ldr	r3, [pc, #172]	; (80086d8 <tcp_listen_input+0x1f8>)
 800862c:	2201      	movs	r2, #1
 800862e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8008630:	6978      	ldr	r0, [r7, #20]
 8008632:	f001 fd8f 	bl	800a154 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8008636:	4b23      	ldr	r3, [pc, #140]	; (80086c4 <tcp_listen_input+0x1e4>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	89db      	ldrh	r3, [r3, #14]
 800863c:	b29a      	uxth	r2, r3
 800863e:	697b      	ldr	r3, [r7, #20]
 8008640:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8008644:	697b      	ldr	r3, [r7, #20]
 8008646:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800864a:	697b      	ldr	r3, [r7, #20]
 800864c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8008650:	697b      	ldr	r3, [r7, #20]
 8008652:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8008654:	697b      	ldr	r3, [r7, #20]
 8008656:	3304      	adds	r3, #4
 8008658:	4618      	mov	r0, r3
 800865a:	f006 fe11 	bl	800f280 <ip4_route>
 800865e:	4601      	mov	r1, r0
 8008660:	697b      	ldr	r3, [r7, #20]
 8008662:	3304      	adds	r3, #4
 8008664:	461a      	mov	r2, r3
 8008666:	4620      	mov	r0, r4
 8008668:	f7ff fa30 	bl	8007acc <tcp_eff_send_mss_netif>
 800866c:	4603      	mov	r3, r0
 800866e:	461a      	mov	r2, r3
 8008670:	697b      	ldr	r3, [r7, #20]
 8008672:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8008674:	2112      	movs	r1, #18
 8008676:	6978      	ldr	r0, [r7, #20]
 8008678:	f002 f844 	bl	800a704 <tcp_enqueue_flags>
 800867c:	4603      	mov	r3, r0
 800867e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8008680:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d004      	beq.n	8008692 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8008688:	2100      	movs	r1, #0
 800868a:	6978      	ldr	r0, [r7, #20]
 800868c:	f7fe f97e 	bl	800698c <tcp_abandon>
      return;
 8008690:	e006      	b.n	80086a0 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8008692:	6978      	ldr	r0, [r7, #20]
 8008694:	f002 f924 	bl	800a8e0 <tcp_output>
  return;
 8008698:	e001      	b.n	800869e <tcp_listen_input+0x1be>
    return;
 800869a:	bf00      	nop
 800869c:	e000      	b.n	80086a0 <tcp_listen_input+0x1c0>
  return;
 800869e:	bf00      	nop
}
 80086a0:	371c      	adds	r7, #28
 80086a2:	46bd      	mov	sp, r7
 80086a4:	bd90      	pop	{r4, r7, pc}
 80086a6:	bf00      	nop
 80086a8:	20007c98 	.word	0x20007c98
 80086ac:	08012b1c 	.word	0x08012b1c
 80086b0:	08012d14 	.word	0x08012d14
 80086b4:	08012b68 	.word	0x08012b68
 80086b8:	20007c90 	.word	0x20007c90
 80086bc:	20007c96 	.word	0x20007c96
 80086c0:	20007c8c 	.word	0x20007c8c
 80086c4:	20007c7c 	.word	0x20007c7c
 80086c8:	20004d28 	.word	0x20004d28
 80086cc:	20004d2c 	.word	0x20004d2c
 80086d0:	20004d18 	.word	0x20004d18
 80086d4:	20007c60 	.word	0x20007c60
 80086d8:	20007c68 	.word	0x20007c68

080086dc <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b086      	sub	sp, #24
 80086e0:	af04      	add	r7, sp, #16
 80086e2:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80086e4:	4b2f      	ldr	r3, [pc, #188]	; (80087a4 <tcp_timewait_input+0xc8>)
 80086e6:	781b      	ldrb	r3, [r3, #0]
 80086e8:	f003 0304 	and.w	r3, r3, #4
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d153      	bne.n	8008798 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d106      	bne.n	8008704 <tcp_timewait_input+0x28>
 80086f6:	4b2c      	ldr	r3, [pc, #176]	; (80087a8 <tcp_timewait_input+0xcc>)
 80086f8:	f240 22ee 	movw	r2, #750	; 0x2ee
 80086fc:	492b      	ldr	r1, [pc, #172]	; (80087ac <tcp_timewait_input+0xd0>)
 80086fe:	482c      	ldr	r0, [pc, #176]	; (80087b0 <tcp_timewait_input+0xd4>)
 8008700:	f008 f812 	bl	8010728 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8008704:	4b27      	ldr	r3, [pc, #156]	; (80087a4 <tcp_timewait_input+0xc8>)
 8008706:	781b      	ldrb	r3, [r3, #0]
 8008708:	f003 0302 	and.w	r3, r3, #2
 800870c:	2b00      	cmp	r3, #0
 800870e:	d02a      	beq.n	8008766 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8008710:	4b28      	ldr	r3, [pc, #160]	; (80087b4 <tcp_timewait_input+0xd8>)
 8008712:	681a      	ldr	r2, [r3, #0]
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008718:	1ad3      	subs	r3, r2, r3
 800871a:	2b00      	cmp	r3, #0
 800871c:	db2d      	blt.n	800877a <tcp_timewait_input+0x9e>
 800871e:	4b25      	ldr	r3, [pc, #148]	; (80087b4 <tcp_timewait_input+0xd8>)
 8008720:	681a      	ldr	r2, [r3, #0]
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008726:	6879      	ldr	r1, [r7, #4]
 8008728:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800872a:	440b      	add	r3, r1
 800872c:	1ad3      	subs	r3, r2, r3
 800872e:	2b00      	cmp	r3, #0
 8008730:	dc23      	bgt.n	800877a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008732:	4b21      	ldr	r3, [pc, #132]	; (80087b8 <tcp_timewait_input+0xdc>)
 8008734:	6819      	ldr	r1, [r3, #0]
 8008736:	4b21      	ldr	r3, [pc, #132]	; (80087bc <tcp_timewait_input+0xe0>)
 8008738:	881b      	ldrh	r3, [r3, #0]
 800873a:	461a      	mov	r2, r3
 800873c:	4b1d      	ldr	r3, [pc, #116]	; (80087b4 <tcp_timewait_input+0xd8>)
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008742:	4b1f      	ldr	r3, [pc, #124]	; (80087c0 <tcp_timewait_input+0xe4>)
 8008744:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008746:	885b      	ldrh	r3, [r3, #2]
 8008748:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800874a:	4a1d      	ldr	r2, [pc, #116]	; (80087c0 <tcp_timewait_input+0xe4>)
 800874c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800874e:	8812      	ldrh	r2, [r2, #0]
 8008750:	b292      	uxth	r2, r2
 8008752:	9202      	str	r2, [sp, #8]
 8008754:	9301      	str	r3, [sp, #4]
 8008756:	4b1b      	ldr	r3, [pc, #108]	; (80087c4 <tcp_timewait_input+0xe8>)
 8008758:	9300      	str	r3, [sp, #0]
 800875a:	4b1b      	ldr	r3, [pc, #108]	; (80087c8 <tcp_timewait_input+0xec>)
 800875c:	4602      	mov	r2, r0
 800875e:	6878      	ldr	r0, [r7, #4]
 8008760:	f002 fe72 	bl	800b448 <tcp_rst>
      return;
 8008764:	e01b      	b.n	800879e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8008766:	4b0f      	ldr	r3, [pc, #60]	; (80087a4 <tcp_timewait_input+0xc8>)
 8008768:	781b      	ldrb	r3, [r3, #0]
 800876a:	f003 0301 	and.w	r3, r3, #1
 800876e:	2b00      	cmp	r3, #0
 8008770:	d003      	beq.n	800877a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8008772:	4b16      	ldr	r3, [pc, #88]	; (80087cc <tcp_timewait_input+0xf0>)
 8008774:	681a      	ldr	r2, [r3, #0]
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800877a:	4b10      	ldr	r3, [pc, #64]	; (80087bc <tcp_timewait_input+0xe0>)
 800877c:	881b      	ldrh	r3, [r3, #0]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d00c      	beq.n	800879c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	8b5b      	ldrh	r3, [r3, #26]
 8008786:	f043 0302 	orr.w	r3, r3, #2
 800878a:	b29a      	uxth	r2, r3
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8008790:	6878      	ldr	r0, [r7, #4]
 8008792:	f002 f8a5 	bl	800a8e0 <tcp_output>
  }
  return;
 8008796:	e001      	b.n	800879c <tcp_timewait_input+0xc0>
    return;
 8008798:	bf00      	nop
 800879a:	e000      	b.n	800879e <tcp_timewait_input+0xc2>
  return;
 800879c:	bf00      	nop
}
 800879e:	3708      	adds	r7, #8
 80087a0:	46bd      	mov	sp, r7
 80087a2:	bd80      	pop	{r7, pc}
 80087a4:	20007c98 	.word	0x20007c98
 80087a8:	08012b1c 	.word	0x08012b1c
 80087ac:	08012d34 	.word	0x08012d34
 80087b0:	08012b68 	.word	0x08012b68
 80087b4:	20007c8c 	.word	0x20007c8c
 80087b8:	20007c90 	.word	0x20007c90
 80087bc:	20007c96 	.word	0x20007c96
 80087c0:	20007c7c 	.word	0x20007c7c
 80087c4:	20004d28 	.word	0x20004d28
 80087c8:	20004d2c 	.word	0x20004d2c
 80087cc:	20007c54 	.word	0x20007c54

080087d0 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80087d0:	b590      	push	{r4, r7, lr}
 80087d2:	b08d      	sub	sp, #52	; 0x34
 80087d4:	af04      	add	r7, sp, #16
 80087d6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80087d8:	2300      	movs	r3, #0
 80087da:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80087dc:	2300      	movs	r3, #0
 80087de:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d106      	bne.n	80087f4 <tcp_process+0x24>
 80087e6:	4b9d      	ldr	r3, [pc, #628]	; (8008a5c <tcp_process+0x28c>)
 80087e8:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80087ec:	499c      	ldr	r1, [pc, #624]	; (8008a60 <tcp_process+0x290>)
 80087ee:	489d      	ldr	r0, [pc, #628]	; (8008a64 <tcp_process+0x294>)
 80087f0:	f007 ff9a 	bl	8010728 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80087f4:	4b9c      	ldr	r3, [pc, #624]	; (8008a68 <tcp_process+0x298>)
 80087f6:	781b      	ldrb	r3, [r3, #0]
 80087f8:	f003 0304 	and.w	r3, r3, #4
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d04e      	beq.n	800889e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	7d1b      	ldrb	r3, [r3, #20]
 8008804:	2b02      	cmp	r3, #2
 8008806:	d108      	bne.n	800881a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800880c:	4b97      	ldr	r3, [pc, #604]	; (8008a6c <tcp_process+0x29c>)
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	429a      	cmp	r2, r3
 8008812:	d123      	bne.n	800885c <tcp_process+0x8c>
        acceptable = 1;
 8008814:	2301      	movs	r3, #1
 8008816:	76fb      	strb	r3, [r7, #27]
 8008818:	e020      	b.n	800885c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800881e:	4b94      	ldr	r3, [pc, #592]	; (8008a70 <tcp_process+0x2a0>)
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	429a      	cmp	r2, r3
 8008824:	d102      	bne.n	800882c <tcp_process+0x5c>
        acceptable = 1;
 8008826:	2301      	movs	r3, #1
 8008828:	76fb      	strb	r3, [r7, #27]
 800882a:	e017      	b.n	800885c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800882c:	4b90      	ldr	r3, [pc, #576]	; (8008a70 <tcp_process+0x2a0>)
 800882e:	681a      	ldr	r2, [r3, #0]
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008834:	1ad3      	subs	r3, r2, r3
 8008836:	2b00      	cmp	r3, #0
 8008838:	db10      	blt.n	800885c <tcp_process+0x8c>
 800883a:	4b8d      	ldr	r3, [pc, #564]	; (8008a70 <tcp_process+0x2a0>)
 800883c:	681a      	ldr	r2, [r3, #0]
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008842:	6879      	ldr	r1, [r7, #4]
 8008844:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008846:	440b      	add	r3, r1
 8008848:	1ad3      	subs	r3, r2, r3
 800884a:	2b00      	cmp	r3, #0
 800884c:	dc06      	bgt.n	800885c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	8b5b      	ldrh	r3, [r3, #26]
 8008852:	f043 0302 	orr.w	r3, r3, #2
 8008856:	b29a      	uxth	r2, r3
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800885c:	7efb      	ldrb	r3, [r7, #27]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d01b      	beq.n	800889a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	7d1b      	ldrb	r3, [r3, #20]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d106      	bne.n	8008878 <tcp_process+0xa8>
 800886a:	4b7c      	ldr	r3, [pc, #496]	; (8008a5c <tcp_process+0x28c>)
 800886c:	f44f 724e 	mov.w	r2, #824	; 0x338
 8008870:	4980      	ldr	r1, [pc, #512]	; (8008a74 <tcp_process+0x2a4>)
 8008872:	487c      	ldr	r0, [pc, #496]	; (8008a64 <tcp_process+0x294>)
 8008874:	f007 ff58 	bl	8010728 <iprintf>
      recv_flags |= TF_RESET;
 8008878:	4b7f      	ldr	r3, [pc, #508]	; (8008a78 <tcp_process+0x2a8>)
 800887a:	781b      	ldrb	r3, [r3, #0]
 800887c:	f043 0308 	orr.w	r3, r3, #8
 8008880:	b2da      	uxtb	r2, r3
 8008882:	4b7d      	ldr	r3, [pc, #500]	; (8008a78 <tcp_process+0x2a8>)
 8008884:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	8b5b      	ldrh	r3, [r3, #26]
 800888a:	f023 0301 	bic.w	r3, r3, #1
 800888e:	b29a      	uxth	r2, r3
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8008894:	f06f 030d 	mvn.w	r3, #13
 8008898:	e37a      	b.n	8008f90 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800889a:	2300      	movs	r3, #0
 800889c:	e378      	b.n	8008f90 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800889e:	4b72      	ldr	r3, [pc, #456]	; (8008a68 <tcp_process+0x298>)
 80088a0:	781b      	ldrb	r3, [r3, #0]
 80088a2:	f003 0302 	and.w	r3, r3, #2
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d010      	beq.n	80088cc <tcp_process+0xfc>
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	7d1b      	ldrb	r3, [r3, #20]
 80088ae:	2b02      	cmp	r3, #2
 80088b0:	d00c      	beq.n	80088cc <tcp_process+0xfc>
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	7d1b      	ldrb	r3, [r3, #20]
 80088b6:	2b03      	cmp	r3, #3
 80088b8:	d008      	beq.n	80088cc <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	8b5b      	ldrh	r3, [r3, #26]
 80088be:	f043 0302 	orr.w	r3, r3, #2
 80088c2:	b29a      	uxth	r2, r3
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80088c8:	2300      	movs	r3, #0
 80088ca:	e361      	b.n	8008f90 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	8b5b      	ldrh	r3, [r3, #26]
 80088d0:	f003 0310 	and.w	r3, r3, #16
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d103      	bne.n	80088e0 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80088d8:	4b68      	ldr	r3, [pc, #416]	; (8008a7c <tcp_process+0x2ac>)
 80088da:	681a      	ldr	r2, [r3, #0]
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2200      	movs	r2, #0
 80088e4:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	2200      	movs	r2, #0
 80088ec:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 80088f0:	6878      	ldr	r0, [r7, #4]
 80088f2:	f001 fc2f 	bl	800a154 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	7d1b      	ldrb	r3, [r3, #20]
 80088fa:	3b02      	subs	r3, #2
 80088fc:	2b07      	cmp	r3, #7
 80088fe:	f200 8337 	bhi.w	8008f70 <tcp_process+0x7a0>
 8008902:	a201      	add	r2, pc, #4	; (adr r2, 8008908 <tcp_process+0x138>)
 8008904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008908:	08008929 	.word	0x08008929
 800890c:	08008b59 	.word	0x08008b59
 8008910:	08008cd1 	.word	0x08008cd1
 8008914:	08008cfb 	.word	0x08008cfb
 8008918:	08008e1f 	.word	0x08008e1f
 800891c:	08008cd1 	.word	0x08008cd1
 8008920:	08008eab 	.word	0x08008eab
 8008924:	08008f3b 	.word	0x08008f3b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8008928:	4b4f      	ldr	r3, [pc, #316]	; (8008a68 <tcp_process+0x298>)
 800892a:	781b      	ldrb	r3, [r3, #0]
 800892c:	f003 0310 	and.w	r3, r3, #16
 8008930:	2b00      	cmp	r3, #0
 8008932:	f000 80e4 	beq.w	8008afe <tcp_process+0x32e>
 8008936:	4b4c      	ldr	r3, [pc, #304]	; (8008a68 <tcp_process+0x298>)
 8008938:	781b      	ldrb	r3, [r3, #0]
 800893a:	f003 0302 	and.w	r3, r3, #2
 800893e:	2b00      	cmp	r3, #0
 8008940:	f000 80dd 	beq.w	8008afe <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008948:	1c5a      	adds	r2, r3, #1
 800894a:	4b48      	ldr	r3, [pc, #288]	; (8008a6c <tcp_process+0x29c>)
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	429a      	cmp	r2, r3
 8008950:	f040 80d5 	bne.w	8008afe <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8008954:	4b46      	ldr	r3, [pc, #280]	; (8008a70 <tcp_process+0x2a0>)
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	1c5a      	adds	r2, r3, #1
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8008966:	4b41      	ldr	r3, [pc, #260]	; (8008a6c <tcp_process+0x29c>)
 8008968:	681a      	ldr	r2, [r3, #0]
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800896e:	4b44      	ldr	r3, [pc, #272]	; (8008a80 <tcp_process+0x2b0>)
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	89db      	ldrh	r3, [r3, #14]
 8008974:	b29a      	uxth	r2, r3
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8008988:	4b39      	ldr	r3, [pc, #228]	; (8008a70 <tcp_process+0x2a0>)
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	1e5a      	subs	r2, r3, #1
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2204      	movs	r2, #4
 8008996:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	3304      	adds	r3, #4
 80089a0:	4618      	mov	r0, r3
 80089a2:	f006 fc6d 	bl	800f280 <ip4_route>
 80089a6:	4601      	mov	r1, r0
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	3304      	adds	r3, #4
 80089ac:	461a      	mov	r2, r3
 80089ae:	4620      	mov	r0, r4
 80089b0:	f7ff f88c 	bl	8007acc <tcp_eff_send_mss_netif>
 80089b4:	4603      	mov	r3, r0
 80089b6:	461a      	mov	r2, r3
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80089c0:	009a      	lsls	r2, r3, #2
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80089c6:	005b      	lsls	r3, r3, #1
 80089c8:	f241 111c 	movw	r1, #4380	; 0x111c
 80089cc:	428b      	cmp	r3, r1
 80089ce:	bf38      	it	cc
 80089d0:	460b      	movcc	r3, r1
 80089d2:	429a      	cmp	r2, r3
 80089d4:	d204      	bcs.n	80089e0 <tcp_process+0x210>
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80089da:	009b      	lsls	r3, r3, #2
 80089dc:	b29b      	uxth	r3, r3
 80089de:	e00d      	b.n	80089fc <tcp_process+0x22c>
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80089e4:	005b      	lsls	r3, r3, #1
 80089e6:	f241 121c 	movw	r2, #4380	; 0x111c
 80089ea:	4293      	cmp	r3, r2
 80089ec:	d904      	bls.n	80089f8 <tcp_process+0x228>
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80089f2:	005b      	lsls	r3, r3, #1
 80089f4:	b29b      	uxth	r3, r3
 80089f6:	e001      	b.n	80089fc <tcp_process+0x22c>
 80089f8:	f241 131c 	movw	r3, #4380	; 0x111c
 80089fc:	687a      	ldr	r2, [r7, #4]
 80089fe:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d106      	bne.n	8008a1a <tcp_process+0x24a>
 8008a0c:	4b13      	ldr	r3, [pc, #76]	; (8008a5c <tcp_process+0x28c>)
 8008a0e:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8008a12:	491c      	ldr	r1, [pc, #112]	; (8008a84 <tcp_process+0x2b4>)
 8008a14:	4813      	ldr	r0, [pc, #76]	; (8008a64 <tcp_process+0x294>)
 8008a16:	f007 fe87 	bl	8010728 <iprintf>
        --pcb->snd_queuelen;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8008a20:	3b01      	subs	r3, #1
 8008a22:	b29a      	uxth	r2, r3
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a2e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8008a30:	69fb      	ldr	r3, [r7, #28]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d12a      	bne.n	8008a8c <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a3a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8008a3c:	69fb      	ldr	r3, [r7, #28]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d106      	bne.n	8008a50 <tcp_process+0x280>
 8008a42:	4b06      	ldr	r3, [pc, #24]	; (8008a5c <tcp_process+0x28c>)
 8008a44:	f44f 725d 	mov.w	r2, #884	; 0x374
 8008a48:	490f      	ldr	r1, [pc, #60]	; (8008a88 <tcp_process+0x2b8>)
 8008a4a:	4806      	ldr	r0, [pc, #24]	; (8008a64 <tcp_process+0x294>)
 8008a4c:	f007 fe6c 	bl	8010728 <iprintf>
          pcb->unsent = rseg->next;
 8008a50:	69fb      	ldr	r3, [r7, #28]
 8008a52:	681a      	ldr	r2, [r3, #0]
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	66da      	str	r2, [r3, #108]	; 0x6c
 8008a58:	e01c      	b.n	8008a94 <tcp_process+0x2c4>
 8008a5a:	bf00      	nop
 8008a5c:	08012b1c 	.word	0x08012b1c
 8008a60:	08012d54 	.word	0x08012d54
 8008a64:	08012b68 	.word	0x08012b68
 8008a68:	20007c98 	.word	0x20007c98
 8008a6c:	20007c90 	.word	0x20007c90
 8008a70:	20007c8c 	.word	0x20007c8c
 8008a74:	08012d70 	.word	0x08012d70
 8008a78:	20007c99 	.word	0x20007c99
 8008a7c:	20007c54 	.word	0x20007c54
 8008a80:	20007c7c 	.word	0x20007c7c
 8008a84:	08012d90 	.word	0x08012d90
 8008a88:	08012da8 	.word	0x08012da8
        } else {
          pcb->unacked = rseg->next;
 8008a8c:	69fb      	ldr	r3, [r7, #28]
 8008a8e:	681a      	ldr	r2, [r3, #0]
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8008a94:	69f8      	ldr	r0, [r7, #28]
 8008a96:	f7fe fd22 	bl	80074de <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d104      	bne.n	8008aac <tcp_process+0x2dc>
          pcb->rtime = -1;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008aa8:	861a      	strh	r2, [r3, #48]	; 0x30
 8008aaa:	e006      	b.n	8008aba <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2200      	movs	r2, #0
 8008ab0:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d00a      	beq.n	8008ada <tcp_process+0x30a>
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008aca:	687a      	ldr	r2, [r7, #4]
 8008acc:	6910      	ldr	r0, [r2, #16]
 8008ace:	2200      	movs	r2, #0
 8008ad0:	6879      	ldr	r1, [r7, #4]
 8008ad2:	4798      	blx	r3
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	76bb      	strb	r3, [r7, #26]
 8008ad8:	e001      	b.n	8008ade <tcp_process+0x30e>
 8008ada:	2300      	movs	r3, #0
 8008adc:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8008ade:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8008ae2:	f113 0f0d 	cmn.w	r3, #13
 8008ae6:	d102      	bne.n	8008aee <tcp_process+0x31e>
          return ERR_ABRT;
 8008ae8:	f06f 030c 	mvn.w	r3, #12
 8008aec:	e250      	b.n	8008f90 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	8b5b      	ldrh	r3, [r3, #26]
 8008af2:	f043 0302 	orr.w	r3, r3, #2
 8008af6:	b29a      	uxth	r2, r3
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8008afc:	e23a      	b.n	8008f74 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8008afe:	4b98      	ldr	r3, [pc, #608]	; (8008d60 <tcp_process+0x590>)
 8008b00:	781b      	ldrb	r3, [r3, #0]
 8008b02:	f003 0310 	and.w	r3, r3, #16
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	f000 8234 	beq.w	8008f74 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008b0c:	4b95      	ldr	r3, [pc, #596]	; (8008d64 <tcp_process+0x594>)
 8008b0e:	6819      	ldr	r1, [r3, #0]
 8008b10:	4b95      	ldr	r3, [pc, #596]	; (8008d68 <tcp_process+0x598>)
 8008b12:	881b      	ldrh	r3, [r3, #0]
 8008b14:	461a      	mov	r2, r3
 8008b16:	4b95      	ldr	r3, [pc, #596]	; (8008d6c <tcp_process+0x59c>)
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008b1c:	4b94      	ldr	r3, [pc, #592]	; (8008d70 <tcp_process+0x5a0>)
 8008b1e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008b20:	885b      	ldrh	r3, [r3, #2]
 8008b22:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008b24:	4a92      	ldr	r2, [pc, #584]	; (8008d70 <tcp_process+0x5a0>)
 8008b26:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008b28:	8812      	ldrh	r2, [r2, #0]
 8008b2a:	b292      	uxth	r2, r2
 8008b2c:	9202      	str	r2, [sp, #8]
 8008b2e:	9301      	str	r3, [sp, #4]
 8008b30:	4b90      	ldr	r3, [pc, #576]	; (8008d74 <tcp_process+0x5a4>)
 8008b32:	9300      	str	r3, [sp, #0]
 8008b34:	4b90      	ldr	r3, [pc, #576]	; (8008d78 <tcp_process+0x5a8>)
 8008b36:	4602      	mov	r2, r0
 8008b38:	6878      	ldr	r0, [r7, #4]
 8008b3a:	f002 fc85 	bl	800b448 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008b44:	2b05      	cmp	r3, #5
 8008b46:	f200 8215 	bhi.w	8008f74 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8008b50:	6878      	ldr	r0, [r7, #4]
 8008b52:	f002 fa4f 	bl	800aff4 <tcp_rexmit_rto>
      break;
 8008b56:	e20d      	b.n	8008f74 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8008b58:	4b81      	ldr	r3, [pc, #516]	; (8008d60 <tcp_process+0x590>)
 8008b5a:	781b      	ldrb	r3, [r3, #0]
 8008b5c:	f003 0310 	and.w	r3, r3, #16
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	f000 80a1 	beq.w	8008ca8 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008b66:	4b7f      	ldr	r3, [pc, #508]	; (8008d64 <tcp_process+0x594>)
 8008b68:	681a      	ldr	r2, [r3, #0]
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b6e:	1ad3      	subs	r3, r2, r3
 8008b70:	3b01      	subs	r3, #1
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	db7e      	blt.n	8008c74 <tcp_process+0x4a4>
 8008b76:	4b7b      	ldr	r3, [pc, #492]	; (8008d64 <tcp_process+0x594>)
 8008b78:	681a      	ldr	r2, [r3, #0]
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b7e:	1ad3      	subs	r3, r2, r3
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	dc77      	bgt.n	8008c74 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2204      	movs	r2, #4
 8008b88:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d102      	bne.n	8008b98 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8008b92:	23fa      	movs	r3, #250	; 0xfa
 8008b94:	76bb      	strb	r3, [r7, #26]
 8008b96:	e01d      	b.n	8008bd4 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008b9c:	699b      	ldr	r3, [r3, #24]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d106      	bne.n	8008bb0 <tcp_process+0x3e0>
 8008ba2:	4b76      	ldr	r3, [pc, #472]	; (8008d7c <tcp_process+0x5ac>)
 8008ba4:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8008ba8:	4975      	ldr	r1, [pc, #468]	; (8008d80 <tcp_process+0x5b0>)
 8008baa:	4876      	ldr	r0, [pc, #472]	; (8008d84 <tcp_process+0x5b4>)
 8008bac:	f007 fdbc 	bl	8010728 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008bb4:	699b      	ldr	r3, [r3, #24]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d00a      	beq.n	8008bd0 <tcp_process+0x400>
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008bbe:	699b      	ldr	r3, [r3, #24]
 8008bc0:	687a      	ldr	r2, [r7, #4]
 8008bc2:	6910      	ldr	r0, [r2, #16]
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	6879      	ldr	r1, [r7, #4]
 8008bc8:	4798      	blx	r3
 8008bca:	4603      	mov	r3, r0
 8008bcc:	76bb      	strb	r3, [r7, #26]
 8008bce:	e001      	b.n	8008bd4 <tcp_process+0x404>
 8008bd0:	23f0      	movs	r3, #240	; 0xf0
 8008bd2:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8008bd4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d00a      	beq.n	8008bf2 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8008bdc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8008be0:	f113 0f0d 	cmn.w	r3, #13
 8008be4:	d002      	beq.n	8008bec <tcp_process+0x41c>
              tcp_abort(pcb);
 8008be6:	6878      	ldr	r0, [r7, #4]
 8008be8:	f7fd ff8e 	bl	8006b08 <tcp_abort>
            }
            return ERR_ABRT;
 8008bec:	f06f 030c 	mvn.w	r3, #12
 8008bf0:	e1ce      	b.n	8008f90 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8008bf2:	6878      	ldr	r0, [r7, #4]
 8008bf4:	f000 fae0 	bl	80091b8 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8008bf8:	4b63      	ldr	r3, [pc, #396]	; (8008d88 <tcp_process+0x5b8>)
 8008bfa:	881b      	ldrh	r3, [r3, #0]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d005      	beq.n	8008c0c <tcp_process+0x43c>
            recv_acked--;
 8008c00:	4b61      	ldr	r3, [pc, #388]	; (8008d88 <tcp_process+0x5b8>)
 8008c02:	881b      	ldrh	r3, [r3, #0]
 8008c04:	3b01      	subs	r3, #1
 8008c06:	b29a      	uxth	r2, r3
 8008c08:	4b5f      	ldr	r3, [pc, #380]	; (8008d88 <tcp_process+0x5b8>)
 8008c0a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008c10:	009a      	lsls	r2, r3, #2
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008c16:	005b      	lsls	r3, r3, #1
 8008c18:	f241 111c 	movw	r1, #4380	; 0x111c
 8008c1c:	428b      	cmp	r3, r1
 8008c1e:	bf38      	it	cc
 8008c20:	460b      	movcc	r3, r1
 8008c22:	429a      	cmp	r2, r3
 8008c24:	d204      	bcs.n	8008c30 <tcp_process+0x460>
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008c2a:	009b      	lsls	r3, r3, #2
 8008c2c:	b29b      	uxth	r3, r3
 8008c2e:	e00d      	b.n	8008c4c <tcp_process+0x47c>
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008c34:	005b      	lsls	r3, r3, #1
 8008c36:	f241 121c 	movw	r2, #4380	; 0x111c
 8008c3a:	4293      	cmp	r3, r2
 8008c3c:	d904      	bls.n	8008c48 <tcp_process+0x478>
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008c42:	005b      	lsls	r3, r3, #1
 8008c44:	b29b      	uxth	r3, r3
 8008c46:	e001      	b.n	8008c4c <tcp_process+0x47c>
 8008c48:	f241 131c 	movw	r3, #4380	; 0x111c
 8008c4c:	687a      	ldr	r2, [r7, #4]
 8008c4e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8008c52:	4b4e      	ldr	r3, [pc, #312]	; (8008d8c <tcp_process+0x5bc>)
 8008c54:	781b      	ldrb	r3, [r3, #0]
 8008c56:	f003 0320 	and.w	r3, r3, #32
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d037      	beq.n	8008cce <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	8b5b      	ldrh	r3, [r3, #26]
 8008c62:	f043 0302 	orr.w	r3, r3, #2
 8008c66:	b29a      	uxth	r2, r3
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2207      	movs	r2, #7
 8008c70:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8008c72:	e02c      	b.n	8008cce <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008c74:	4b3b      	ldr	r3, [pc, #236]	; (8008d64 <tcp_process+0x594>)
 8008c76:	6819      	ldr	r1, [r3, #0]
 8008c78:	4b3b      	ldr	r3, [pc, #236]	; (8008d68 <tcp_process+0x598>)
 8008c7a:	881b      	ldrh	r3, [r3, #0]
 8008c7c:	461a      	mov	r2, r3
 8008c7e:	4b3b      	ldr	r3, [pc, #236]	; (8008d6c <tcp_process+0x59c>)
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008c84:	4b3a      	ldr	r3, [pc, #232]	; (8008d70 <tcp_process+0x5a0>)
 8008c86:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008c88:	885b      	ldrh	r3, [r3, #2]
 8008c8a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008c8c:	4a38      	ldr	r2, [pc, #224]	; (8008d70 <tcp_process+0x5a0>)
 8008c8e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008c90:	8812      	ldrh	r2, [r2, #0]
 8008c92:	b292      	uxth	r2, r2
 8008c94:	9202      	str	r2, [sp, #8]
 8008c96:	9301      	str	r3, [sp, #4]
 8008c98:	4b36      	ldr	r3, [pc, #216]	; (8008d74 <tcp_process+0x5a4>)
 8008c9a:	9300      	str	r3, [sp, #0]
 8008c9c:	4b36      	ldr	r3, [pc, #216]	; (8008d78 <tcp_process+0x5a8>)
 8008c9e:	4602      	mov	r2, r0
 8008ca0:	6878      	ldr	r0, [r7, #4]
 8008ca2:	f002 fbd1 	bl	800b448 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8008ca6:	e167      	b.n	8008f78 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8008ca8:	4b2d      	ldr	r3, [pc, #180]	; (8008d60 <tcp_process+0x590>)
 8008caa:	781b      	ldrb	r3, [r3, #0]
 8008cac:	f003 0302 	and.w	r3, r3, #2
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	f000 8161 	beq.w	8008f78 <tcp_process+0x7a8>
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cba:	1e5a      	subs	r2, r3, #1
 8008cbc:	4b2b      	ldr	r3, [pc, #172]	; (8008d6c <tcp_process+0x59c>)
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	429a      	cmp	r2, r3
 8008cc2:	f040 8159 	bne.w	8008f78 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8008cc6:	6878      	ldr	r0, [r7, #4]
 8008cc8:	f002 f9b6 	bl	800b038 <tcp_rexmit>
      break;
 8008ccc:	e154      	b.n	8008f78 <tcp_process+0x7a8>
 8008cce:	e153      	b.n	8008f78 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8008cd0:	6878      	ldr	r0, [r7, #4]
 8008cd2:	f000 fa71 	bl	80091b8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8008cd6:	4b2d      	ldr	r3, [pc, #180]	; (8008d8c <tcp_process+0x5bc>)
 8008cd8:	781b      	ldrb	r3, [r3, #0]
 8008cda:	f003 0320 	and.w	r3, r3, #32
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	f000 814c 	beq.w	8008f7c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	8b5b      	ldrh	r3, [r3, #26]
 8008ce8:	f043 0302 	orr.w	r3, r3, #2
 8008cec:	b29a      	uxth	r2, r3
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	2207      	movs	r2, #7
 8008cf6:	751a      	strb	r2, [r3, #20]
      }
      break;
 8008cf8:	e140      	b.n	8008f7c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	f000 fa5c 	bl	80091b8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8008d00:	4b22      	ldr	r3, [pc, #136]	; (8008d8c <tcp_process+0x5bc>)
 8008d02:	781b      	ldrb	r3, [r3, #0]
 8008d04:	f003 0320 	and.w	r3, r3, #32
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d071      	beq.n	8008df0 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008d0c:	4b14      	ldr	r3, [pc, #80]	; (8008d60 <tcp_process+0x590>)
 8008d0e:	781b      	ldrb	r3, [r3, #0]
 8008d10:	f003 0310 	and.w	r3, r3, #16
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d060      	beq.n	8008dda <tcp_process+0x60a>
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008d1c:	4b11      	ldr	r3, [pc, #68]	; (8008d64 <tcp_process+0x594>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	429a      	cmp	r2, r3
 8008d22:	d15a      	bne.n	8008dda <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d156      	bne.n	8008dda <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	8b5b      	ldrh	r3, [r3, #26]
 8008d30:	f043 0302 	orr.w	r3, r3, #2
 8008d34:	b29a      	uxth	r2, r3
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8008d3a:	6878      	ldr	r0, [r7, #4]
 8008d3c:	f7fe fdbc 	bl	80078b8 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8008d40:	4b13      	ldr	r3, [pc, #76]	; (8008d90 <tcp_process+0x5c0>)
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	687a      	ldr	r2, [r7, #4]
 8008d46:	429a      	cmp	r2, r3
 8008d48:	d105      	bne.n	8008d56 <tcp_process+0x586>
 8008d4a:	4b11      	ldr	r3, [pc, #68]	; (8008d90 <tcp_process+0x5c0>)
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	68db      	ldr	r3, [r3, #12]
 8008d50:	4a0f      	ldr	r2, [pc, #60]	; (8008d90 <tcp_process+0x5c0>)
 8008d52:	6013      	str	r3, [r2, #0]
 8008d54:	e02e      	b.n	8008db4 <tcp_process+0x5e4>
 8008d56:	4b0e      	ldr	r3, [pc, #56]	; (8008d90 <tcp_process+0x5c0>)
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	617b      	str	r3, [r7, #20]
 8008d5c:	e027      	b.n	8008dae <tcp_process+0x5de>
 8008d5e:	bf00      	nop
 8008d60:	20007c98 	.word	0x20007c98
 8008d64:	20007c90 	.word	0x20007c90
 8008d68:	20007c96 	.word	0x20007c96
 8008d6c:	20007c8c 	.word	0x20007c8c
 8008d70:	20007c7c 	.word	0x20007c7c
 8008d74:	20004d28 	.word	0x20004d28
 8008d78:	20004d2c 	.word	0x20004d2c
 8008d7c:	08012b1c 	.word	0x08012b1c
 8008d80:	08012dbc 	.word	0x08012dbc
 8008d84:	08012b68 	.word	0x08012b68
 8008d88:	20007c94 	.word	0x20007c94
 8008d8c:	20007c99 	.word	0x20007c99
 8008d90:	20007c60 	.word	0x20007c60
 8008d94:	697b      	ldr	r3, [r7, #20]
 8008d96:	68db      	ldr	r3, [r3, #12]
 8008d98:	687a      	ldr	r2, [r7, #4]
 8008d9a:	429a      	cmp	r2, r3
 8008d9c:	d104      	bne.n	8008da8 <tcp_process+0x5d8>
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	68da      	ldr	r2, [r3, #12]
 8008da2:	697b      	ldr	r3, [r7, #20]
 8008da4:	60da      	str	r2, [r3, #12]
 8008da6:	e005      	b.n	8008db4 <tcp_process+0x5e4>
 8008da8:	697b      	ldr	r3, [r7, #20]
 8008daa:	68db      	ldr	r3, [r3, #12]
 8008dac:	617b      	str	r3, [r7, #20]
 8008dae:	697b      	ldr	r3, [r7, #20]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d1ef      	bne.n	8008d94 <tcp_process+0x5c4>
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2200      	movs	r2, #0
 8008db8:	60da      	str	r2, [r3, #12]
 8008dba:	4b77      	ldr	r3, [pc, #476]	; (8008f98 <tcp_process+0x7c8>)
 8008dbc:	2201      	movs	r2, #1
 8008dbe:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	220a      	movs	r2, #10
 8008dc4:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8008dc6:	4b75      	ldr	r3, [pc, #468]	; (8008f9c <tcp_process+0x7cc>)
 8008dc8:	681a      	ldr	r2, [r3, #0]
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	60da      	str	r2, [r3, #12]
 8008dce:	4a73      	ldr	r2, [pc, #460]	; (8008f9c <tcp_process+0x7cc>)
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	6013      	str	r3, [r2, #0]
 8008dd4:	f002 fcfa 	bl	800b7cc <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8008dd8:	e0d2      	b.n	8008f80 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	8b5b      	ldrh	r3, [r3, #26]
 8008dde:	f043 0302 	orr.w	r3, r3, #2
 8008de2:	b29a      	uxth	r2, r3
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2208      	movs	r2, #8
 8008dec:	751a      	strb	r2, [r3, #20]
      break;
 8008dee:	e0c7      	b.n	8008f80 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008df0:	4b6b      	ldr	r3, [pc, #428]	; (8008fa0 <tcp_process+0x7d0>)
 8008df2:	781b      	ldrb	r3, [r3, #0]
 8008df4:	f003 0310 	and.w	r3, r3, #16
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	f000 80c1 	beq.w	8008f80 <tcp_process+0x7b0>
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008e02:	4b68      	ldr	r3, [pc, #416]	; (8008fa4 <tcp_process+0x7d4>)
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	429a      	cmp	r2, r3
 8008e08:	f040 80ba 	bne.w	8008f80 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	f040 80b5 	bne.w	8008f80 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	2206      	movs	r2, #6
 8008e1a:	751a      	strb	r2, [r3, #20]
      break;
 8008e1c:	e0b0      	b.n	8008f80 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8008e1e:	6878      	ldr	r0, [r7, #4]
 8008e20:	f000 f9ca 	bl	80091b8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8008e24:	4b60      	ldr	r3, [pc, #384]	; (8008fa8 <tcp_process+0x7d8>)
 8008e26:	781b      	ldrb	r3, [r3, #0]
 8008e28:	f003 0320 	and.w	r3, r3, #32
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	f000 80a9 	beq.w	8008f84 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	8b5b      	ldrh	r3, [r3, #26]
 8008e36:	f043 0302 	orr.w	r3, r3, #2
 8008e3a:	b29a      	uxth	r2, r3
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8008e40:	6878      	ldr	r0, [r7, #4]
 8008e42:	f7fe fd39 	bl	80078b8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8008e46:	4b59      	ldr	r3, [pc, #356]	; (8008fac <tcp_process+0x7dc>)
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	687a      	ldr	r2, [r7, #4]
 8008e4c:	429a      	cmp	r2, r3
 8008e4e:	d105      	bne.n	8008e5c <tcp_process+0x68c>
 8008e50:	4b56      	ldr	r3, [pc, #344]	; (8008fac <tcp_process+0x7dc>)
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	68db      	ldr	r3, [r3, #12]
 8008e56:	4a55      	ldr	r2, [pc, #340]	; (8008fac <tcp_process+0x7dc>)
 8008e58:	6013      	str	r3, [r2, #0]
 8008e5a:	e013      	b.n	8008e84 <tcp_process+0x6b4>
 8008e5c:	4b53      	ldr	r3, [pc, #332]	; (8008fac <tcp_process+0x7dc>)
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	613b      	str	r3, [r7, #16]
 8008e62:	e00c      	b.n	8008e7e <tcp_process+0x6ae>
 8008e64:	693b      	ldr	r3, [r7, #16]
 8008e66:	68db      	ldr	r3, [r3, #12]
 8008e68:	687a      	ldr	r2, [r7, #4]
 8008e6a:	429a      	cmp	r2, r3
 8008e6c:	d104      	bne.n	8008e78 <tcp_process+0x6a8>
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	68da      	ldr	r2, [r3, #12]
 8008e72:	693b      	ldr	r3, [r7, #16]
 8008e74:	60da      	str	r2, [r3, #12]
 8008e76:	e005      	b.n	8008e84 <tcp_process+0x6b4>
 8008e78:	693b      	ldr	r3, [r7, #16]
 8008e7a:	68db      	ldr	r3, [r3, #12]
 8008e7c:	613b      	str	r3, [r7, #16]
 8008e7e:	693b      	ldr	r3, [r7, #16]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d1ef      	bne.n	8008e64 <tcp_process+0x694>
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2200      	movs	r2, #0
 8008e88:	60da      	str	r2, [r3, #12]
 8008e8a:	4b43      	ldr	r3, [pc, #268]	; (8008f98 <tcp_process+0x7c8>)
 8008e8c:	2201      	movs	r2, #1
 8008e8e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	220a      	movs	r2, #10
 8008e94:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8008e96:	4b41      	ldr	r3, [pc, #260]	; (8008f9c <tcp_process+0x7cc>)
 8008e98:	681a      	ldr	r2, [r3, #0]
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	60da      	str	r2, [r3, #12]
 8008e9e:	4a3f      	ldr	r2, [pc, #252]	; (8008f9c <tcp_process+0x7cc>)
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	6013      	str	r3, [r2, #0]
 8008ea4:	f002 fc92 	bl	800b7cc <tcp_timer_needed>
      }
      break;
 8008ea8:	e06c      	b.n	8008f84 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8008eaa:	6878      	ldr	r0, [r7, #4]
 8008eac:	f000 f984 	bl	80091b8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8008eb0:	4b3b      	ldr	r3, [pc, #236]	; (8008fa0 <tcp_process+0x7d0>)
 8008eb2:	781b      	ldrb	r3, [r3, #0]
 8008eb4:	f003 0310 	and.w	r3, r3, #16
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d065      	beq.n	8008f88 <tcp_process+0x7b8>
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008ec0:	4b38      	ldr	r3, [pc, #224]	; (8008fa4 <tcp_process+0x7d4>)
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	429a      	cmp	r2, r3
 8008ec6:	d15f      	bne.n	8008f88 <tcp_process+0x7b8>
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d15b      	bne.n	8008f88 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8008ed0:	6878      	ldr	r0, [r7, #4]
 8008ed2:	f7fe fcf1 	bl	80078b8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8008ed6:	4b35      	ldr	r3, [pc, #212]	; (8008fac <tcp_process+0x7dc>)
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	687a      	ldr	r2, [r7, #4]
 8008edc:	429a      	cmp	r2, r3
 8008ede:	d105      	bne.n	8008eec <tcp_process+0x71c>
 8008ee0:	4b32      	ldr	r3, [pc, #200]	; (8008fac <tcp_process+0x7dc>)
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	68db      	ldr	r3, [r3, #12]
 8008ee6:	4a31      	ldr	r2, [pc, #196]	; (8008fac <tcp_process+0x7dc>)
 8008ee8:	6013      	str	r3, [r2, #0]
 8008eea:	e013      	b.n	8008f14 <tcp_process+0x744>
 8008eec:	4b2f      	ldr	r3, [pc, #188]	; (8008fac <tcp_process+0x7dc>)
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	60fb      	str	r3, [r7, #12]
 8008ef2:	e00c      	b.n	8008f0e <tcp_process+0x73e>
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	68db      	ldr	r3, [r3, #12]
 8008ef8:	687a      	ldr	r2, [r7, #4]
 8008efa:	429a      	cmp	r2, r3
 8008efc:	d104      	bne.n	8008f08 <tcp_process+0x738>
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	68da      	ldr	r2, [r3, #12]
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	60da      	str	r2, [r3, #12]
 8008f06:	e005      	b.n	8008f14 <tcp_process+0x744>
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	68db      	ldr	r3, [r3, #12]
 8008f0c:	60fb      	str	r3, [r7, #12]
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d1ef      	bne.n	8008ef4 <tcp_process+0x724>
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2200      	movs	r2, #0
 8008f18:	60da      	str	r2, [r3, #12]
 8008f1a:	4b1f      	ldr	r3, [pc, #124]	; (8008f98 <tcp_process+0x7c8>)
 8008f1c:	2201      	movs	r2, #1
 8008f1e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	220a      	movs	r2, #10
 8008f24:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8008f26:	4b1d      	ldr	r3, [pc, #116]	; (8008f9c <tcp_process+0x7cc>)
 8008f28:	681a      	ldr	r2, [r3, #0]
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	60da      	str	r2, [r3, #12]
 8008f2e:	4a1b      	ldr	r2, [pc, #108]	; (8008f9c <tcp_process+0x7cc>)
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	6013      	str	r3, [r2, #0]
 8008f34:	f002 fc4a 	bl	800b7cc <tcp_timer_needed>
      }
      break;
 8008f38:	e026      	b.n	8008f88 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8008f3a:	6878      	ldr	r0, [r7, #4]
 8008f3c:	f000 f93c 	bl	80091b8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8008f40:	4b17      	ldr	r3, [pc, #92]	; (8008fa0 <tcp_process+0x7d0>)
 8008f42:	781b      	ldrb	r3, [r3, #0]
 8008f44:	f003 0310 	and.w	r3, r3, #16
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d01f      	beq.n	8008f8c <tcp_process+0x7bc>
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008f50:	4b14      	ldr	r3, [pc, #80]	; (8008fa4 <tcp_process+0x7d4>)
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	429a      	cmp	r2, r3
 8008f56:	d119      	bne.n	8008f8c <tcp_process+0x7bc>
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d115      	bne.n	8008f8c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8008f60:	4b11      	ldr	r3, [pc, #68]	; (8008fa8 <tcp_process+0x7d8>)
 8008f62:	781b      	ldrb	r3, [r3, #0]
 8008f64:	f043 0310 	orr.w	r3, r3, #16
 8008f68:	b2da      	uxtb	r2, r3
 8008f6a:	4b0f      	ldr	r3, [pc, #60]	; (8008fa8 <tcp_process+0x7d8>)
 8008f6c:	701a      	strb	r2, [r3, #0]
      }
      break;
 8008f6e:	e00d      	b.n	8008f8c <tcp_process+0x7bc>
    default:
      break;
 8008f70:	bf00      	nop
 8008f72:	e00c      	b.n	8008f8e <tcp_process+0x7be>
      break;
 8008f74:	bf00      	nop
 8008f76:	e00a      	b.n	8008f8e <tcp_process+0x7be>
      break;
 8008f78:	bf00      	nop
 8008f7a:	e008      	b.n	8008f8e <tcp_process+0x7be>
      break;
 8008f7c:	bf00      	nop
 8008f7e:	e006      	b.n	8008f8e <tcp_process+0x7be>
      break;
 8008f80:	bf00      	nop
 8008f82:	e004      	b.n	8008f8e <tcp_process+0x7be>
      break;
 8008f84:	bf00      	nop
 8008f86:	e002      	b.n	8008f8e <tcp_process+0x7be>
      break;
 8008f88:	bf00      	nop
 8008f8a:	e000      	b.n	8008f8e <tcp_process+0x7be>
      break;
 8008f8c:	bf00      	nop
  }
  return ERR_OK;
 8008f8e:	2300      	movs	r3, #0
}
 8008f90:	4618      	mov	r0, r3
 8008f92:	3724      	adds	r7, #36	; 0x24
 8008f94:	46bd      	mov	sp, r7
 8008f96:	bd90      	pop	{r4, r7, pc}
 8008f98:	20007c68 	.word	0x20007c68
 8008f9c:	20007c64 	.word	0x20007c64
 8008fa0:	20007c98 	.word	0x20007c98
 8008fa4:	20007c90 	.word	0x20007c90
 8008fa8:	20007c99 	.word	0x20007c99
 8008fac:	20007c60 	.word	0x20007c60

08008fb0 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8008fb0:	b590      	push	{r4, r7, lr}
 8008fb2:	b085      	sub	sp, #20
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
 8008fb8:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d106      	bne.n	8008fce <tcp_oos_insert_segment+0x1e>
 8008fc0:	4b3b      	ldr	r3, [pc, #236]	; (80090b0 <tcp_oos_insert_segment+0x100>)
 8008fc2:	f240 421f 	movw	r2, #1055	; 0x41f
 8008fc6:	493b      	ldr	r1, [pc, #236]	; (80090b4 <tcp_oos_insert_segment+0x104>)
 8008fc8:	483b      	ldr	r0, [pc, #236]	; (80090b8 <tcp_oos_insert_segment+0x108>)
 8008fca:	f007 fbad 	bl	8010728 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	68db      	ldr	r3, [r3, #12]
 8008fd2:	899b      	ldrh	r3, [r3, #12]
 8008fd4:	b29b      	uxth	r3, r3
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	f7fb fbfc 	bl	80047d4 <lwip_htons>
 8008fdc:	4603      	mov	r3, r0
 8008fde:	b2db      	uxtb	r3, r3
 8008fe0:	f003 0301 	and.w	r3, r3, #1
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d028      	beq.n	800903a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8008fe8:	6838      	ldr	r0, [r7, #0]
 8008fea:	f7fe fa63 	bl	80074b4 <tcp_segs_free>
    next = NULL;
 8008fee:	2300      	movs	r3, #0
 8008ff0:	603b      	str	r3, [r7, #0]
 8008ff2:	e056      	b.n	80090a2 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	68db      	ldr	r3, [r3, #12]
 8008ff8:	899b      	ldrh	r3, [r3, #12]
 8008ffa:	b29b      	uxth	r3, r3
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	f7fb fbe9 	bl	80047d4 <lwip_htons>
 8009002:	4603      	mov	r3, r0
 8009004:	b2db      	uxtb	r3, r3
 8009006:	f003 0301 	and.w	r3, r3, #1
 800900a:	2b00      	cmp	r3, #0
 800900c:	d00d      	beq.n	800902a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	68db      	ldr	r3, [r3, #12]
 8009012:	899b      	ldrh	r3, [r3, #12]
 8009014:	b29c      	uxth	r4, r3
 8009016:	2001      	movs	r0, #1
 8009018:	f7fb fbdc 	bl	80047d4 <lwip_htons>
 800901c:	4603      	mov	r3, r0
 800901e:	461a      	mov	r2, r3
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	68db      	ldr	r3, [r3, #12]
 8009024:	4322      	orrs	r2, r4
 8009026:	b292      	uxth	r2, r2
 8009028:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800902a:	683b      	ldr	r3, [r7, #0]
 800902c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800902e:	683b      	ldr	r3, [r7, #0]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8009034:	68f8      	ldr	r0, [r7, #12]
 8009036:	f7fe fa52 	bl	80074de <tcp_seg_free>
    while (next &&
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d00e      	beq.n	800905e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	891b      	ldrh	r3, [r3, #8]
 8009044:	461a      	mov	r2, r3
 8009046:	4b1d      	ldr	r3, [pc, #116]	; (80090bc <tcp_oos_insert_segment+0x10c>)
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	441a      	add	r2, r3
 800904c:	683b      	ldr	r3, [r7, #0]
 800904e:	68db      	ldr	r3, [r3, #12]
 8009050:	685b      	ldr	r3, [r3, #4]
 8009052:	6839      	ldr	r1, [r7, #0]
 8009054:	8909      	ldrh	r1, [r1, #8]
 8009056:	440b      	add	r3, r1
 8009058:	1ad3      	subs	r3, r2, r3
    while (next &&
 800905a:	2b00      	cmp	r3, #0
 800905c:	daca      	bge.n	8008ff4 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d01e      	beq.n	80090a2 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	891b      	ldrh	r3, [r3, #8]
 8009068:	461a      	mov	r2, r3
 800906a:	4b14      	ldr	r3, [pc, #80]	; (80090bc <tcp_oos_insert_segment+0x10c>)
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	441a      	add	r2, r3
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	68db      	ldr	r3, [r3, #12]
 8009074:	685b      	ldr	r3, [r3, #4]
 8009076:	1ad3      	subs	r3, r2, r3
    if (next &&
 8009078:	2b00      	cmp	r3, #0
 800907a:	dd12      	ble.n	80090a2 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	68db      	ldr	r3, [r3, #12]
 8009080:	685b      	ldr	r3, [r3, #4]
 8009082:	b29a      	uxth	r2, r3
 8009084:	4b0d      	ldr	r3, [pc, #52]	; (80090bc <tcp_oos_insert_segment+0x10c>)
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	b29b      	uxth	r3, r3
 800908a:	1ad3      	subs	r3, r2, r3
 800908c:	b29a      	uxth	r2, r3
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	685a      	ldr	r2, [r3, #4]
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	891b      	ldrh	r3, [r3, #8]
 800909a:	4619      	mov	r1, r3
 800909c:	4610      	mov	r0, r2
 800909e:	f7fc fe15 	bl	8005ccc <pbuf_realloc>
    }
  }
  cseg->next = next;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	683a      	ldr	r2, [r7, #0]
 80090a6:	601a      	str	r2, [r3, #0]
}
 80090a8:	bf00      	nop
 80090aa:	3714      	adds	r7, #20
 80090ac:	46bd      	mov	sp, r7
 80090ae:	bd90      	pop	{r4, r7, pc}
 80090b0:	08012b1c 	.word	0x08012b1c
 80090b4:	08012ddc 	.word	0x08012ddc
 80090b8:	08012b68 	.word	0x08012b68
 80090bc:	20007c8c 	.word	0x20007c8c

080090c0 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80090c0:	b5b0      	push	{r4, r5, r7, lr}
 80090c2:	b086      	sub	sp, #24
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	60f8      	str	r0, [r7, #12]
 80090c8:	60b9      	str	r1, [r7, #8]
 80090ca:	607a      	str	r2, [r7, #4]
 80090cc:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80090ce:	e03e      	b.n	800914e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80090d0:	68bb      	ldr	r3, [r7, #8]
 80090d2:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80090d4:	68bb      	ldr	r3, [r7, #8]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80090da:	697b      	ldr	r3, [r7, #20]
 80090dc:	685b      	ldr	r3, [r3, #4]
 80090de:	4618      	mov	r0, r3
 80090e0:	f7fd f802 	bl	80060e8 <pbuf_clen>
 80090e4:	4603      	mov	r3, r0
 80090e6:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80090ee:	8a7a      	ldrh	r2, [r7, #18]
 80090f0:	429a      	cmp	r2, r3
 80090f2:	d906      	bls.n	8009102 <tcp_free_acked_segments+0x42>
 80090f4:	4b2a      	ldr	r3, [pc, #168]	; (80091a0 <tcp_free_acked_segments+0xe0>)
 80090f6:	f240 4257 	movw	r2, #1111	; 0x457
 80090fa:	492a      	ldr	r1, [pc, #168]	; (80091a4 <tcp_free_acked_segments+0xe4>)
 80090fc:	482a      	ldr	r0, [pc, #168]	; (80091a8 <tcp_free_acked_segments+0xe8>)
 80090fe:	f007 fb13 	bl	8010728 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8009108:	8a7b      	ldrh	r3, [r7, #18]
 800910a:	1ad3      	subs	r3, r2, r3
 800910c:	b29a      	uxth	r2, r3
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8009114:	697b      	ldr	r3, [r7, #20]
 8009116:	891a      	ldrh	r2, [r3, #8]
 8009118:	4b24      	ldr	r3, [pc, #144]	; (80091ac <tcp_free_acked_segments+0xec>)
 800911a:	881b      	ldrh	r3, [r3, #0]
 800911c:	4413      	add	r3, r2
 800911e:	b29a      	uxth	r2, r3
 8009120:	4b22      	ldr	r3, [pc, #136]	; (80091ac <tcp_free_acked_segments+0xec>)
 8009122:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8009124:	6978      	ldr	r0, [r7, #20]
 8009126:	f7fe f9da 	bl	80074de <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009130:	2b00      	cmp	r3, #0
 8009132:	d00c      	beq.n	800914e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d109      	bne.n	800914e <tcp_free_acked_segments+0x8e>
 800913a:	683b      	ldr	r3, [r7, #0]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d106      	bne.n	800914e <tcp_free_acked_segments+0x8e>
 8009140:	4b17      	ldr	r3, [pc, #92]	; (80091a0 <tcp_free_acked_segments+0xe0>)
 8009142:	f240 4261 	movw	r2, #1121	; 0x461
 8009146:	491a      	ldr	r1, [pc, #104]	; (80091b0 <tcp_free_acked_segments+0xf0>)
 8009148:	4817      	ldr	r0, [pc, #92]	; (80091a8 <tcp_free_acked_segments+0xe8>)
 800914a:	f007 faed 	bl	8010728 <iprintf>
  while (seg_list != NULL &&
 800914e:	68bb      	ldr	r3, [r7, #8]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d020      	beq.n	8009196 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8009154:	68bb      	ldr	r3, [r7, #8]
 8009156:	68db      	ldr	r3, [r3, #12]
 8009158:	685b      	ldr	r3, [r3, #4]
 800915a:	4618      	mov	r0, r3
 800915c:	f7fb fb4f 	bl	80047fe <lwip_htonl>
 8009160:	4604      	mov	r4, r0
 8009162:	68bb      	ldr	r3, [r7, #8]
 8009164:	891b      	ldrh	r3, [r3, #8]
 8009166:	461d      	mov	r5, r3
 8009168:	68bb      	ldr	r3, [r7, #8]
 800916a:	68db      	ldr	r3, [r3, #12]
 800916c:	899b      	ldrh	r3, [r3, #12]
 800916e:	b29b      	uxth	r3, r3
 8009170:	4618      	mov	r0, r3
 8009172:	f7fb fb2f 	bl	80047d4 <lwip_htons>
 8009176:	4603      	mov	r3, r0
 8009178:	b2db      	uxtb	r3, r3
 800917a:	f003 0303 	and.w	r3, r3, #3
 800917e:	2b00      	cmp	r3, #0
 8009180:	d001      	beq.n	8009186 <tcp_free_acked_segments+0xc6>
 8009182:	2301      	movs	r3, #1
 8009184:	e000      	b.n	8009188 <tcp_free_acked_segments+0xc8>
 8009186:	2300      	movs	r3, #0
 8009188:	442b      	add	r3, r5
 800918a:	18e2      	adds	r2, r4, r3
 800918c:	4b09      	ldr	r3, [pc, #36]	; (80091b4 <tcp_free_acked_segments+0xf4>)
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8009192:	2b00      	cmp	r3, #0
 8009194:	dd9c      	ble.n	80090d0 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8009196:	68bb      	ldr	r3, [r7, #8]
}
 8009198:	4618      	mov	r0, r3
 800919a:	3718      	adds	r7, #24
 800919c:	46bd      	mov	sp, r7
 800919e:	bdb0      	pop	{r4, r5, r7, pc}
 80091a0:	08012b1c 	.word	0x08012b1c
 80091a4:	08012e04 	.word	0x08012e04
 80091a8:	08012b68 	.word	0x08012b68
 80091ac:	20007c94 	.word	0x20007c94
 80091b0:	08012e2c 	.word	0x08012e2c
 80091b4:	20007c90 	.word	0x20007c90

080091b8 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80091b8:	b5b0      	push	{r4, r5, r7, lr}
 80091ba:	b094      	sub	sp, #80	; 0x50
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 80091c0:	2300      	movs	r3, #0
 80091c2:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d106      	bne.n	80091d8 <tcp_receive+0x20>
 80091ca:	4b91      	ldr	r3, [pc, #580]	; (8009410 <tcp_receive+0x258>)
 80091cc:	f240 427b 	movw	r2, #1147	; 0x47b
 80091d0:	4990      	ldr	r1, [pc, #576]	; (8009414 <tcp_receive+0x25c>)
 80091d2:	4891      	ldr	r0, [pc, #580]	; (8009418 <tcp_receive+0x260>)
 80091d4:	f007 faa8 	bl	8010728 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	7d1b      	ldrb	r3, [r3, #20]
 80091dc:	2b03      	cmp	r3, #3
 80091de:	d806      	bhi.n	80091ee <tcp_receive+0x36>
 80091e0:	4b8b      	ldr	r3, [pc, #556]	; (8009410 <tcp_receive+0x258>)
 80091e2:	f240 427c 	movw	r2, #1148	; 0x47c
 80091e6:	498d      	ldr	r1, [pc, #564]	; (800941c <tcp_receive+0x264>)
 80091e8:	488b      	ldr	r0, [pc, #556]	; (8009418 <tcp_receive+0x260>)
 80091ea:	f007 fa9d 	bl	8010728 <iprintf>

  if (flags & TCP_ACK) {
 80091ee:	4b8c      	ldr	r3, [pc, #560]	; (8009420 <tcp_receive+0x268>)
 80091f0:	781b      	ldrb	r3, [r3, #0]
 80091f2:	f003 0310 	and.w	r3, r3, #16
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	f000 8264 	beq.w	80096c4 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009202:	461a      	mov	r2, r3
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009208:	4413      	add	r3, r2
 800920a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009210:	4b84      	ldr	r3, [pc, #528]	; (8009424 <tcp_receive+0x26c>)
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	1ad3      	subs	r3, r2, r3
 8009216:	2b00      	cmp	r3, #0
 8009218:	db1b      	blt.n	8009252 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800921e:	4b81      	ldr	r3, [pc, #516]	; (8009424 <tcp_receive+0x26c>)
 8009220:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8009222:	429a      	cmp	r2, r3
 8009224:	d106      	bne.n	8009234 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800922a:	4b7f      	ldr	r3, [pc, #508]	; (8009428 <tcp_receive+0x270>)
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	1ad3      	subs	r3, r2, r3
 8009230:	2b00      	cmp	r3, #0
 8009232:	db0e      	blt.n	8009252 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009238:	4b7b      	ldr	r3, [pc, #492]	; (8009428 <tcp_receive+0x270>)
 800923a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800923c:	429a      	cmp	r2, r3
 800923e:	d125      	bne.n	800928c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8009240:	4b7a      	ldr	r3, [pc, #488]	; (800942c <tcp_receive+0x274>)
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	89db      	ldrh	r3, [r3, #14]
 8009246:	b29a      	uxth	r2, r3
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800924e:	429a      	cmp	r2, r3
 8009250:	d91c      	bls.n	800928c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8009252:	4b76      	ldr	r3, [pc, #472]	; (800942c <tcp_receive+0x274>)
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	89db      	ldrh	r3, [r3, #14]
 8009258:	b29a      	uxth	r2, r3
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800926c:	429a      	cmp	r2, r3
 800926e:	d205      	bcs.n	800927c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800927c:	4b69      	ldr	r3, [pc, #420]	; (8009424 <tcp_receive+0x26c>)
 800927e:	681a      	ldr	r2, [r3, #0]
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8009284:	4b68      	ldr	r3, [pc, #416]	; (8009428 <tcp_receive+0x270>)
 8009286:	681a      	ldr	r2, [r3, #0]
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800928c:	4b66      	ldr	r3, [pc, #408]	; (8009428 <tcp_receive+0x270>)
 800928e:	681a      	ldr	r2, [r3, #0]
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009294:	1ad3      	subs	r3, r2, r3
 8009296:	2b00      	cmp	r3, #0
 8009298:	dc58      	bgt.n	800934c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800929a:	4b65      	ldr	r3, [pc, #404]	; (8009430 <tcp_receive+0x278>)
 800929c:	881b      	ldrh	r3, [r3, #0]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d14b      	bne.n	800933a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092a6:	687a      	ldr	r2, [r7, #4]
 80092a8:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 80092ac:	4413      	add	r3, r2
 80092ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80092b0:	429a      	cmp	r2, r3
 80092b2:	d142      	bne.n	800933a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	db3d      	blt.n	800933a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80092c2:	4b59      	ldr	r3, [pc, #356]	; (8009428 <tcp_receive+0x270>)
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	429a      	cmp	r2, r3
 80092c8:	d137      	bne.n	800933a <tcp_receive+0x182>
              found_dupack = 1;
 80092ca:	2301      	movs	r3, #1
 80092cc:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80092d4:	2bff      	cmp	r3, #255	; 0xff
 80092d6:	d007      	beq.n	80092e8 <tcp_receive+0x130>
                ++pcb->dupacks;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80092de:	3301      	adds	r3, #1
 80092e0:	b2da      	uxtb	r2, r3
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80092ee:	2b03      	cmp	r3, #3
 80092f0:	d91b      	bls.n	800932a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80092fc:	4413      	add	r3, r2
 80092fe:	b29a      	uxth	r2, r3
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009306:	429a      	cmp	r2, r3
 8009308:	d30a      	bcc.n	8009320 <tcp_receive+0x168>
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009314:	4413      	add	r3, r2
 8009316:	b29a      	uxth	r2, r3
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800931e:	e004      	b.n	800932a <tcp_receive+0x172>
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009326:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009330:	2b02      	cmp	r3, #2
 8009332:	d902      	bls.n	800933a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8009334:	6878      	ldr	r0, [r7, #4]
 8009336:	f001 feeb 	bl	800b110 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800933a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800933c:	2b00      	cmp	r3, #0
 800933e:	f040 8161 	bne.w	8009604 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	2200      	movs	r2, #0
 8009346:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800934a:	e15b      	b.n	8009604 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800934c:	4b36      	ldr	r3, [pc, #216]	; (8009428 <tcp_receive+0x270>)
 800934e:	681a      	ldr	r2, [r3, #0]
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009354:	1ad3      	subs	r3, r2, r3
 8009356:	3b01      	subs	r3, #1
 8009358:	2b00      	cmp	r3, #0
 800935a:	f2c0 814e 	blt.w	80095fa <tcp_receive+0x442>
 800935e:	4b32      	ldr	r3, [pc, #200]	; (8009428 <tcp_receive+0x270>)
 8009360:	681a      	ldr	r2, [r3, #0]
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009366:	1ad3      	subs	r3, r2, r3
 8009368:	2b00      	cmp	r3, #0
 800936a:	f300 8146 	bgt.w	80095fa <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	8b5b      	ldrh	r3, [r3, #26]
 8009372:	f003 0304 	and.w	r3, r3, #4
 8009376:	2b00      	cmp	r3, #0
 8009378:	d010      	beq.n	800939c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	8b5b      	ldrh	r3, [r3, #26]
 800937e:	f023 0304 	bic.w	r3, r3, #4
 8009382:	b29a      	uxth	r2, r3
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2200      	movs	r2, #0
 8009398:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	2200      	movs	r2, #0
 80093a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80093aa:	10db      	asrs	r3, r3, #3
 80093ac:	b21b      	sxth	r3, r3
 80093ae:	b29a      	uxth	r2, r3
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80093b6:	b29b      	uxth	r3, r3
 80093b8:	4413      	add	r3, r2
 80093ba:	b29b      	uxth	r3, r3
 80093bc:	b21a      	sxth	r2, r3
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80093c4:	4b18      	ldr	r3, [pc, #96]	; (8009428 <tcp_receive+0x270>)
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	b29a      	uxth	r2, r3
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093ce:	b29b      	uxth	r3, r3
 80093d0:	1ad3      	subs	r3, r2, r3
 80093d2:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	2200      	movs	r2, #0
 80093d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 80093dc:	4b12      	ldr	r3, [pc, #72]	; (8009428 <tcp_receive+0x270>)
 80093de:	681a      	ldr	r2, [r3, #0]
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	7d1b      	ldrb	r3, [r3, #20]
 80093e8:	2b03      	cmp	r3, #3
 80093ea:	f240 8097 	bls.w	800951c <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80093fa:	429a      	cmp	r2, r3
 80093fc:	d245      	bcs.n	800948a <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	8b5b      	ldrh	r3, [r3, #26]
 8009402:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009406:	2b00      	cmp	r3, #0
 8009408:	d014      	beq.n	8009434 <tcp_receive+0x27c>
 800940a:	2301      	movs	r3, #1
 800940c:	e013      	b.n	8009436 <tcp_receive+0x27e>
 800940e:	bf00      	nop
 8009410:	08012b1c 	.word	0x08012b1c
 8009414:	08012e4c 	.word	0x08012e4c
 8009418:	08012b68 	.word	0x08012b68
 800941c:	08012e68 	.word	0x08012e68
 8009420:	20007c98 	.word	0x20007c98
 8009424:	20007c8c 	.word	0x20007c8c
 8009428:	20007c90 	.word	0x20007c90
 800942c:	20007c7c 	.word	0x20007c7c
 8009430:	20007c96 	.word	0x20007c96
 8009434:	2302      	movs	r3, #2
 8009436:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800943a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800943e:	b29a      	uxth	r2, r3
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009444:	fb12 f303 	smulbb	r3, r2, r3
 8009448:	b29b      	uxth	r3, r3
 800944a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800944c:	4293      	cmp	r3, r2
 800944e:	bf28      	it	cs
 8009450:	4613      	movcs	r3, r2
 8009452:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800945a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800945c:	4413      	add	r3, r2
 800945e:	b29a      	uxth	r2, r3
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009466:	429a      	cmp	r2, r3
 8009468:	d309      	bcc.n	800947e <tcp_receive+0x2c6>
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009470:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009472:	4413      	add	r3, r2
 8009474:	b29a      	uxth	r2, r3
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800947c:	e04e      	b.n	800951c <tcp_receive+0x364>
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009484:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8009488:	e048      	b.n	800951c <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8009490:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009492:	4413      	add	r3, r2
 8009494:	b29a      	uxth	r2, r3
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800949c:	429a      	cmp	r2, r3
 800949e:	d309      	bcc.n	80094b4 <tcp_receive+0x2fc>
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80094a6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80094a8:	4413      	add	r3, r2
 80094aa:	b29a      	uxth	r2, r3
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80094b2:	e004      	b.n	80094be <tcp_receive+0x306>
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80094ba:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80094ca:	429a      	cmp	r2, r3
 80094cc:	d326      	bcc.n	800951c <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80094da:	1ad3      	subs	r3, r2, r3
 80094dc:	b29a      	uxth	r2, r3
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80094ee:	4413      	add	r3, r2
 80094f0:	b29a      	uxth	r2, r3
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80094f8:	429a      	cmp	r2, r3
 80094fa:	d30a      	bcc.n	8009512 <tcp_receive+0x35a>
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009506:	4413      	add	r3, r2
 8009508:	b29a      	uxth	r2, r3
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8009510:	e004      	b.n	800951c <tcp_receive+0x364>
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009518:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009524:	4a98      	ldr	r2, [pc, #608]	; (8009788 <tcp_receive+0x5d0>)
 8009526:	6878      	ldr	r0, [r7, #4]
 8009528:	f7ff fdca 	bl	80090c0 <tcp_free_acked_segments>
 800952c:	4602      	mov	r2, r0
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800953a:	4a94      	ldr	r2, [pc, #592]	; (800978c <tcp_receive+0x5d4>)
 800953c:	6878      	ldr	r0, [r7, #4]
 800953e:	f7ff fdbf 	bl	80090c0 <tcp_free_acked_segments>
 8009542:	4602      	mov	r2, r0
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800954c:	2b00      	cmp	r3, #0
 800954e:	d104      	bne.n	800955a <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009556:	861a      	strh	r2, [r3, #48]	; 0x30
 8009558:	e002      	b.n	8009560 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	2200      	movs	r2, #0
 800955e:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2200      	movs	r2, #0
 8009564:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800956a:	2b00      	cmp	r3, #0
 800956c:	d103      	bne.n	8009576 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	2200      	movs	r2, #0
 8009572:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800957c:	4b84      	ldr	r3, [pc, #528]	; (8009790 <tcp_receive+0x5d8>)
 800957e:	881b      	ldrh	r3, [r3, #0]
 8009580:	4413      	add	r3, r2
 8009582:	b29a      	uxth	r2, r3
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	8b5b      	ldrh	r3, [r3, #26]
 800958e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009592:	2b00      	cmp	r3, #0
 8009594:	d035      	beq.n	8009602 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800959a:	2b00      	cmp	r3, #0
 800959c:	d118      	bne.n	80095d0 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d00c      	beq.n	80095c0 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80095ae:	68db      	ldr	r3, [r3, #12]
 80095b0:	685b      	ldr	r3, [r3, #4]
 80095b2:	4618      	mov	r0, r3
 80095b4:	f7fb f923 	bl	80047fe <lwip_htonl>
 80095b8:	4603      	mov	r3, r0
 80095ba:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80095bc:	2b00      	cmp	r3, #0
 80095be:	dc20      	bgt.n	8009602 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	8b5b      	ldrh	r3, [r3, #26]
 80095c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80095c8:	b29a      	uxth	r2, r3
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80095ce:	e018      	b.n	8009602 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095d8:	68db      	ldr	r3, [r3, #12]
 80095da:	685b      	ldr	r3, [r3, #4]
 80095dc:	4618      	mov	r0, r3
 80095de:	f7fb f90e 	bl	80047fe <lwip_htonl>
 80095e2:	4603      	mov	r3, r0
 80095e4:	1ae3      	subs	r3, r4, r3
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	dc0b      	bgt.n	8009602 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	8b5b      	ldrh	r3, [r3, #26]
 80095ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80095f2:	b29a      	uxth	r2, r3
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80095f8:	e003      	b.n	8009602 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80095fa:	6878      	ldr	r0, [r7, #4]
 80095fc:	f001 ff76 	bl	800b4ec <tcp_send_empty_ack>
 8009600:	e000      	b.n	8009604 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009602:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009608:	2b00      	cmp	r3, #0
 800960a:	d05b      	beq.n	80096c4 <tcp_receive+0x50c>
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009610:	4b60      	ldr	r3, [pc, #384]	; (8009794 <tcp_receive+0x5dc>)
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	1ad3      	subs	r3, r2, r3
 8009616:	2b00      	cmp	r3, #0
 8009618:	da54      	bge.n	80096c4 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800961a:	4b5f      	ldr	r3, [pc, #380]	; (8009798 <tcp_receive+0x5e0>)
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	b29a      	uxth	r2, r3
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009624:	b29b      	uxth	r3, r3
 8009626:	1ad3      	subs	r3, r2, r3
 8009628:	b29b      	uxth	r3, r3
 800962a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800962e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009638:	10db      	asrs	r3, r3, #3
 800963a:	b21b      	sxth	r3, r3
 800963c:	b29b      	uxth	r3, r3
 800963e:	1ad3      	subs	r3, r2, r3
 8009640:	b29b      	uxth	r3, r3
 8009642:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800964c:	b29a      	uxth	r2, r3
 800964e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009652:	4413      	add	r3, r2
 8009654:	b29b      	uxth	r3, r3
 8009656:	b21a      	sxth	r2, r3
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800965c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8009660:	2b00      	cmp	r3, #0
 8009662:	da05      	bge.n	8009670 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8009664:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009668:	425b      	negs	r3, r3
 800966a:	b29b      	uxth	r3, r3
 800966c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8009670:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800967a:	109b      	asrs	r3, r3, #2
 800967c:	b21b      	sxth	r3, r3
 800967e:	b29b      	uxth	r3, r3
 8009680:	1ad3      	subs	r3, r2, r3
 8009682:	b29b      	uxth	r3, r3
 8009684:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800968e:	b29a      	uxth	r2, r3
 8009690:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009694:	4413      	add	r3, r2
 8009696:	b29b      	uxth	r3, r3
 8009698:	b21a      	sxth	r2, r3
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80096a4:	10db      	asrs	r3, r3, #3
 80096a6:	b21b      	sxth	r3, r3
 80096a8:	b29a      	uxth	r2, r3
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80096b0:	b29b      	uxth	r3, r3
 80096b2:	4413      	add	r3, r2
 80096b4:	b29b      	uxth	r3, r3
 80096b6:	b21a      	sxth	r2, r3
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	2200      	movs	r2, #0
 80096c2:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80096c4:	4b35      	ldr	r3, [pc, #212]	; (800979c <tcp_receive+0x5e4>)
 80096c6:	881b      	ldrh	r3, [r3, #0]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	f000 84e2 	beq.w	800a092 <tcp_receive+0xeda>
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	7d1b      	ldrb	r3, [r3, #20]
 80096d2:	2b06      	cmp	r3, #6
 80096d4:	f200 84dd 	bhi.w	800a092 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80096dc:	4b30      	ldr	r3, [pc, #192]	; (80097a0 <tcp_receive+0x5e8>)
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	1ad3      	subs	r3, r2, r3
 80096e2:	3b01      	subs	r3, #1
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	f2c0 808f 	blt.w	8009808 <tcp_receive+0x650>
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80096ee:	4b2b      	ldr	r3, [pc, #172]	; (800979c <tcp_receive+0x5e4>)
 80096f0:	881b      	ldrh	r3, [r3, #0]
 80096f2:	4619      	mov	r1, r3
 80096f4:	4b2a      	ldr	r3, [pc, #168]	; (80097a0 <tcp_receive+0x5e8>)
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	440b      	add	r3, r1
 80096fa:	1ad3      	subs	r3, r2, r3
 80096fc:	3301      	adds	r3, #1
 80096fe:	2b00      	cmp	r3, #0
 8009700:	f300 8082 	bgt.w	8009808 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8009704:	4b27      	ldr	r3, [pc, #156]	; (80097a4 <tcp_receive+0x5ec>)
 8009706:	685b      	ldr	r3, [r3, #4]
 8009708:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800970e:	4b24      	ldr	r3, [pc, #144]	; (80097a0 <tcp_receive+0x5e8>)
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	1ad3      	subs	r3, r2, r3
 8009714:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8009716:	4b23      	ldr	r3, [pc, #140]	; (80097a4 <tcp_receive+0x5ec>)
 8009718:	685b      	ldr	r3, [r3, #4]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d106      	bne.n	800972c <tcp_receive+0x574>
 800971e:	4b22      	ldr	r3, [pc, #136]	; (80097a8 <tcp_receive+0x5f0>)
 8009720:	f240 5294 	movw	r2, #1428	; 0x594
 8009724:	4921      	ldr	r1, [pc, #132]	; (80097ac <tcp_receive+0x5f4>)
 8009726:	4822      	ldr	r0, [pc, #136]	; (80097b0 <tcp_receive+0x5f8>)
 8009728:	f006 fffe 	bl	8010728 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800972c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800972e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009732:	4293      	cmp	r3, r2
 8009734:	d906      	bls.n	8009744 <tcp_receive+0x58c>
 8009736:	4b1c      	ldr	r3, [pc, #112]	; (80097a8 <tcp_receive+0x5f0>)
 8009738:	f240 5295 	movw	r2, #1429	; 0x595
 800973c:	491d      	ldr	r1, [pc, #116]	; (80097b4 <tcp_receive+0x5fc>)
 800973e:	481c      	ldr	r0, [pc, #112]	; (80097b0 <tcp_receive+0x5f8>)
 8009740:	f006 fff2 	bl	8010728 <iprintf>
      off = (u16_t)off32;
 8009744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009746:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800974a:	4b16      	ldr	r3, [pc, #88]	; (80097a4 <tcp_receive+0x5ec>)
 800974c:	685b      	ldr	r3, [r3, #4]
 800974e:	891b      	ldrh	r3, [r3, #8]
 8009750:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8009754:	429a      	cmp	r2, r3
 8009756:	d906      	bls.n	8009766 <tcp_receive+0x5ae>
 8009758:	4b13      	ldr	r3, [pc, #76]	; (80097a8 <tcp_receive+0x5f0>)
 800975a:	f240 5297 	movw	r2, #1431	; 0x597
 800975e:	4916      	ldr	r1, [pc, #88]	; (80097b8 <tcp_receive+0x600>)
 8009760:	4813      	ldr	r0, [pc, #76]	; (80097b0 <tcp_receive+0x5f8>)
 8009762:	f006 ffe1 	bl	8010728 <iprintf>
      inseg.len -= off;
 8009766:	4b0f      	ldr	r3, [pc, #60]	; (80097a4 <tcp_receive+0x5ec>)
 8009768:	891a      	ldrh	r2, [r3, #8]
 800976a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800976e:	1ad3      	subs	r3, r2, r3
 8009770:	b29a      	uxth	r2, r3
 8009772:	4b0c      	ldr	r3, [pc, #48]	; (80097a4 <tcp_receive+0x5ec>)
 8009774:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8009776:	4b0b      	ldr	r3, [pc, #44]	; (80097a4 <tcp_receive+0x5ec>)
 8009778:	685b      	ldr	r3, [r3, #4]
 800977a:	891a      	ldrh	r2, [r3, #8]
 800977c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009780:	1ad3      	subs	r3, r2, r3
 8009782:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8009784:	e02a      	b.n	80097dc <tcp_receive+0x624>
 8009786:	bf00      	nop
 8009788:	08012e84 	.word	0x08012e84
 800978c:	08012e8c 	.word	0x08012e8c
 8009790:	20007c94 	.word	0x20007c94
 8009794:	20007c90 	.word	0x20007c90
 8009798:	20007c54 	.word	0x20007c54
 800979c:	20007c96 	.word	0x20007c96
 80097a0:	20007c8c 	.word	0x20007c8c
 80097a4:	20007c6c 	.word	0x20007c6c
 80097a8:	08012b1c 	.word	0x08012b1c
 80097ac:	08012e94 	.word	0x08012e94
 80097b0:	08012b68 	.word	0x08012b68
 80097b4:	08012ea4 	.word	0x08012ea4
 80097b8:	08012eb4 	.word	0x08012eb4
        off -= p->len;
 80097bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097be:	895b      	ldrh	r3, [r3, #10]
 80097c0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80097c4:	1ad3      	subs	r3, r2, r3
 80097c6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80097ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097cc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80097ce:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80097d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097d2:	2200      	movs	r2, #0
 80097d4:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80097d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 80097dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097de:	895b      	ldrh	r3, [r3, #10]
 80097e0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80097e4:	429a      	cmp	r2, r3
 80097e6:	d8e9      	bhi.n	80097bc <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 80097e8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80097ec:	4619      	mov	r1, r3
 80097ee:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80097f0:	f7fc fb6c 	bl	8005ecc <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097f8:	4a91      	ldr	r2, [pc, #580]	; (8009a40 <tcp_receive+0x888>)
 80097fa:	6013      	str	r3, [r2, #0]
 80097fc:	4b91      	ldr	r3, [pc, #580]	; (8009a44 <tcp_receive+0x88c>)
 80097fe:	68db      	ldr	r3, [r3, #12]
 8009800:	4a8f      	ldr	r2, [pc, #572]	; (8009a40 <tcp_receive+0x888>)
 8009802:	6812      	ldr	r2, [r2, #0]
 8009804:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8009806:	e00d      	b.n	8009824 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8009808:	4b8d      	ldr	r3, [pc, #564]	; (8009a40 <tcp_receive+0x888>)
 800980a:	681a      	ldr	r2, [r3, #0]
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009810:	1ad3      	subs	r3, r2, r3
 8009812:	2b00      	cmp	r3, #0
 8009814:	da06      	bge.n	8009824 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	8b5b      	ldrh	r3, [r3, #26]
 800981a:	f043 0302 	orr.w	r3, r3, #2
 800981e:	b29a      	uxth	r2, r3
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009824:	4b86      	ldr	r3, [pc, #536]	; (8009a40 <tcp_receive+0x888>)
 8009826:	681a      	ldr	r2, [r3, #0]
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800982c:	1ad3      	subs	r3, r2, r3
 800982e:	2b00      	cmp	r3, #0
 8009830:	f2c0 842a 	blt.w	800a088 <tcp_receive+0xed0>
 8009834:	4b82      	ldr	r3, [pc, #520]	; (8009a40 <tcp_receive+0x888>)
 8009836:	681a      	ldr	r2, [r3, #0]
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800983c:	6879      	ldr	r1, [r7, #4]
 800983e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009840:	440b      	add	r3, r1
 8009842:	1ad3      	subs	r3, r2, r3
 8009844:	3301      	adds	r3, #1
 8009846:	2b00      	cmp	r3, #0
 8009848:	f300 841e 	bgt.w	800a088 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009850:	4b7b      	ldr	r3, [pc, #492]	; (8009a40 <tcp_receive+0x888>)
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	429a      	cmp	r2, r3
 8009856:	f040 829a 	bne.w	8009d8e <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800985a:	4b7a      	ldr	r3, [pc, #488]	; (8009a44 <tcp_receive+0x88c>)
 800985c:	891c      	ldrh	r4, [r3, #8]
 800985e:	4b79      	ldr	r3, [pc, #484]	; (8009a44 <tcp_receive+0x88c>)
 8009860:	68db      	ldr	r3, [r3, #12]
 8009862:	899b      	ldrh	r3, [r3, #12]
 8009864:	b29b      	uxth	r3, r3
 8009866:	4618      	mov	r0, r3
 8009868:	f7fa ffb4 	bl	80047d4 <lwip_htons>
 800986c:	4603      	mov	r3, r0
 800986e:	b2db      	uxtb	r3, r3
 8009870:	f003 0303 	and.w	r3, r3, #3
 8009874:	2b00      	cmp	r3, #0
 8009876:	d001      	beq.n	800987c <tcp_receive+0x6c4>
 8009878:	2301      	movs	r3, #1
 800987a:	e000      	b.n	800987e <tcp_receive+0x6c6>
 800987c:	2300      	movs	r3, #0
 800987e:	4423      	add	r3, r4
 8009880:	b29a      	uxth	r2, r3
 8009882:	4b71      	ldr	r3, [pc, #452]	; (8009a48 <tcp_receive+0x890>)
 8009884:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800988a:	4b6f      	ldr	r3, [pc, #444]	; (8009a48 <tcp_receive+0x890>)
 800988c:	881b      	ldrh	r3, [r3, #0]
 800988e:	429a      	cmp	r2, r3
 8009890:	d275      	bcs.n	800997e <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009892:	4b6c      	ldr	r3, [pc, #432]	; (8009a44 <tcp_receive+0x88c>)
 8009894:	68db      	ldr	r3, [r3, #12]
 8009896:	899b      	ldrh	r3, [r3, #12]
 8009898:	b29b      	uxth	r3, r3
 800989a:	4618      	mov	r0, r3
 800989c:	f7fa ff9a 	bl	80047d4 <lwip_htons>
 80098a0:	4603      	mov	r3, r0
 80098a2:	b2db      	uxtb	r3, r3
 80098a4:	f003 0301 	and.w	r3, r3, #1
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d01f      	beq.n	80098ec <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80098ac:	4b65      	ldr	r3, [pc, #404]	; (8009a44 <tcp_receive+0x88c>)
 80098ae:	68db      	ldr	r3, [r3, #12]
 80098b0:	899b      	ldrh	r3, [r3, #12]
 80098b2:	b29b      	uxth	r3, r3
 80098b4:	b21b      	sxth	r3, r3
 80098b6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80098ba:	b21c      	sxth	r4, r3
 80098bc:	4b61      	ldr	r3, [pc, #388]	; (8009a44 <tcp_receive+0x88c>)
 80098be:	68db      	ldr	r3, [r3, #12]
 80098c0:	899b      	ldrh	r3, [r3, #12]
 80098c2:	b29b      	uxth	r3, r3
 80098c4:	4618      	mov	r0, r3
 80098c6:	f7fa ff85 	bl	80047d4 <lwip_htons>
 80098ca:	4603      	mov	r3, r0
 80098cc:	b2db      	uxtb	r3, r3
 80098ce:	b29b      	uxth	r3, r3
 80098d0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80098d4:	b29b      	uxth	r3, r3
 80098d6:	4618      	mov	r0, r3
 80098d8:	f7fa ff7c 	bl	80047d4 <lwip_htons>
 80098dc:	4603      	mov	r3, r0
 80098de:	b21b      	sxth	r3, r3
 80098e0:	4323      	orrs	r3, r4
 80098e2:	b21a      	sxth	r2, r3
 80098e4:	4b57      	ldr	r3, [pc, #348]	; (8009a44 <tcp_receive+0x88c>)
 80098e6:	68db      	ldr	r3, [r3, #12]
 80098e8:	b292      	uxth	r2, r2
 80098ea:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80098f0:	4b54      	ldr	r3, [pc, #336]	; (8009a44 <tcp_receive+0x88c>)
 80098f2:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80098f4:	4b53      	ldr	r3, [pc, #332]	; (8009a44 <tcp_receive+0x88c>)
 80098f6:	68db      	ldr	r3, [r3, #12]
 80098f8:	899b      	ldrh	r3, [r3, #12]
 80098fa:	b29b      	uxth	r3, r3
 80098fc:	4618      	mov	r0, r3
 80098fe:	f7fa ff69 	bl	80047d4 <lwip_htons>
 8009902:	4603      	mov	r3, r0
 8009904:	b2db      	uxtb	r3, r3
 8009906:	f003 0302 	and.w	r3, r3, #2
 800990a:	2b00      	cmp	r3, #0
 800990c:	d005      	beq.n	800991a <tcp_receive+0x762>
            inseg.len -= 1;
 800990e:	4b4d      	ldr	r3, [pc, #308]	; (8009a44 <tcp_receive+0x88c>)
 8009910:	891b      	ldrh	r3, [r3, #8]
 8009912:	3b01      	subs	r3, #1
 8009914:	b29a      	uxth	r2, r3
 8009916:	4b4b      	ldr	r3, [pc, #300]	; (8009a44 <tcp_receive+0x88c>)
 8009918:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800991a:	4b4a      	ldr	r3, [pc, #296]	; (8009a44 <tcp_receive+0x88c>)
 800991c:	685b      	ldr	r3, [r3, #4]
 800991e:	4a49      	ldr	r2, [pc, #292]	; (8009a44 <tcp_receive+0x88c>)
 8009920:	8912      	ldrh	r2, [r2, #8]
 8009922:	4611      	mov	r1, r2
 8009924:	4618      	mov	r0, r3
 8009926:	f7fc f9d1 	bl	8005ccc <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800992a:	4b46      	ldr	r3, [pc, #280]	; (8009a44 <tcp_receive+0x88c>)
 800992c:	891c      	ldrh	r4, [r3, #8]
 800992e:	4b45      	ldr	r3, [pc, #276]	; (8009a44 <tcp_receive+0x88c>)
 8009930:	68db      	ldr	r3, [r3, #12]
 8009932:	899b      	ldrh	r3, [r3, #12]
 8009934:	b29b      	uxth	r3, r3
 8009936:	4618      	mov	r0, r3
 8009938:	f7fa ff4c 	bl	80047d4 <lwip_htons>
 800993c:	4603      	mov	r3, r0
 800993e:	b2db      	uxtb	r3, r3
 8009940:	f003 0303 	and.w	r3, r3, #3
 8009944:	2b00      	cmp	r3, #0
 8009946:	d001      	beq.n	800994c <tcp_receive+0x794>
 8009948:	2301      	movs	r3, #1
 800994a:	e000      	b.n	800994e <tcp_receive+0x796>
 800994c:	2300      	movs	r3, #0
 800994e:	4423      	add	r3, r4
 8009950:	b29a      	uxth	r2, r3
 8009952:	4b3d      	ldr	r3, [pc, #244]	; (8009a48 <tcp_receive+0x890>)
 8009954:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8009956:	4b3c      	ldr	r3, [pc, #240]	; (8009a48 <tcp_receive+0x890>)
 8009958:	881b      	ldrh	r3, [r3, #0]
 800995a:	461a      	mov	r2, r3
 800995c:	4b38      	ldr	r3, [pc, #224]	; (8009a40 <tcp_receive+0x888>)
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	441a      	add	r2, r3
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009966:	6879      	ldr	r1, [r7, #4]
 8009968:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800996a:	440b      	add	r3, r1
 800996c:	429a      	cmp	r2, r3
 800996e:	d006      	beq.n	800997e <tcp_receive+0x7c6>
 8009970:	4b36      	ldr	r3, [pc, #216]	; (8009a4c <tcp_receive+0x894>)
 8009972:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8009976:	4936      	ldr	r1, [pc, #216]	; (8009a50 <tcp_receive+0x898>)
 8009978:	4836      	ldr	r0, [pc, #216]	; (8009a54 <tcp_receive+0x89c>)
 800997a:	f006 fed5 	bl	8010728 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009982:	2b00      	cmp	r3, #0
 8009984:	f000 80e7 	beq.w	8009b56 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009988:	4b2e      	ldr	r3, [pc, #184]	; (8009a44 <tcp_receive+0x88c>)
 800998a:	68db      	ldr	r3, [r3, #12]
 800998c:	899b      	ldrh	r3, [r3, #12]
 800998e:	b29b      	uxth	r3, r3
 8009990:	4618      	mov	r0, r3
 8009992:	f7fa ff1f 	bl	80047d4 <lwip_htons>
 8009996:	4603      	mov	r3, r0
 8009998:	b2db      	uxtb	r3, r3
 800999a:	f003 0301 	and.w	r3, r3, #1
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d010      	beq.n	80099c4 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80099a2:	e00a      	b.n	80099ba <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80099a8:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80099ae:	681a      	ldr	r2, [r3, #0]
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 80099b4:	68f8      	ldr	r0, [r7, #12]
 80099b6:	f7fd fd92 	bl	80074de <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d1f0      	bne.n	80099a4 <tcp_receive+0x7ec>
 80099c2:	e0c8      	b.n	8009b56 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80099c8:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80099ca:	e052      	b.n	8009a72 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80099cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099ce:	68db      	ldr	r3, [r3, #12]
 80099d0:	899b      	ldrh	r3, [r3, #12]
 80099d2:	b29b      	uxth	r3, r3
 80099d4:	4618      	mov	r0, r3
 80099d6:	f7fa fefd 	bl	80047d4 <lwip_htons>
 80099da:	4603      	mov	r3, r0
 80099dc:	b2db      	uxtb	r3, r3
 80099de:	f003 0301 	and.w	r3, r3, #1
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d03d      	beq.n	8009a62 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80099e6:	4b17      	ldr	r3, [pc, #92]	; (8009a44 <tcp_receive+0x88c>)
 80099e8:	68db      	ldr	r3, [r3, #12]
 80099ea:	899b      	ldrh	r3, [r3, #12]
 80099ec:	b29b      	uxth	r3, r3
 80099ee:	4618      	mov	r0, r3
 80099f0:	f7fa fef0 	bl	80047d4 <lwip_htons>
 80099f4:	4603      	mov	r3, r0
 80099f6:	b2db      	uxtb	r3, r3
 80099f8:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d130      	bne.n	8009a62 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8009a00:	4b10      	ldr	r3, [pc, #64]	; (8009a44 <tcp_receive+0x88c>)
 8009a02:	68db      	ldr	r3, [r3, #12]
 8009a04:	899b      	ldrh	r3, [r3, #12]
 8009a06:	b29c      	uxth	r4, r3
 8009a08:	2001      	movs	r0, #1
 8009a0a:	f7fa fee3 	bl	80047d4 <lwip_htons>
 8009a0e:	4603      	mov	r3, r0
 8009a10:	461a      	mov	r2, r3
 8009a12:	4b0c      	ldr	r3, [pc, #48]	; (8009a44 <tcp_receive+0x88c>)
 8009a14:	68db      	ldr	r3, [r3, #12]
 8009a16:	4322      	orrs	r2, r4
 8009a18:	b292      	uxth	r2, r2
 8009a1a:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8009a1c:	4b09      	ldr	r3, [pc, #36]	; (8009a44 <tcp_receive+0x88c>)
 8009a1e:	891c      	ldrh	r4, [r3, #8]
 8009a20:	4b08      	ldr	r3, [pc, #32]	; (8009a44 <tcp_receive+0x88c>)
 8009a22:	68db      	ldr	r3, [r3, #12]
 8009a24:	899b      	ldrh	r3, [r3, #12]
 8009a26:	b29b      	uxth	r3, r3
 8009a28:	4618      	mov	r0, r3
 8009a2a:	f7fa fed3 	bl	80047d4 <lwip_htons>
 8009a2e:	4603      	mov	r3, r0
 8009a30:	b2db      	uxtb	r3, r3
 8009a32:	f003 0303 	and.w	r3, r3, #3
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d00e      	beq.n	8009a58 <tcp_receive+0x8a0>
 8009a3a:	2301      	movs	r3, #1
 8009a3c:	e00d      	b.n	8009a5a <tcp_receive+0x8a2>
 8009a3e:	bf00      	nop
 8009a40:	20007c8c 	.word	0x20007c8c
 8009a44:	20007c6c 	.word	0x20007c6c
 8009a48:	20007c96 	.word	0x20007c96
 8009a4c:	08012b1c 	.word	0x08012b1c
 8009a50:	08012ec4 	.word	0x08012ec4
 8009a54:	08012b68 	.word	0x08012b68
 8009a58:	2300      	movs	r3, #0
 8009a5a:	4423      	add	r3, r4
 8009a5c:	b29a      	uxth	r2, r3
 8009a5e:	4b98      	ldr	r3, [pc, #608]	; (8009cc0 <tcp_receive+0xb08>)
 8009a60:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8009a62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a64:	613b      	str	r3, [r7, #16]
              next = next->next;
 8009a66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8009a6c:	6938      	ldr	r0, [r7, #16]
 8009a6e:	f7fd fd36 	bl	80074de <tcp_seg_free>
            while (next &&
 8009a72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d00e      	beq.n	8009a96 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8009a78:	4b91      	ldr	r3, [pc, #580]	; (8009cc0 <tcp_receive+0xb08>)
 8009a7a:	881b      	ldrh	r3, [r3, #0]
 8009a7c:	461a      	mov	r2, r3
 8009a7e:	4b91      	ldr	r3, [pc, #580]	; (8009cc4 <tcp_receive+0xb0c>)
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	441a      	add	r2, r3
 8009a84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a86:	68db      	ldr	r3, [r3, #12]
 8009a88:	685b      	ldr	r3, [r3, #4]
 8009a8a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009a8c:	8909      	ldrh	r1, [r1, #8]
 8009a8e:	440b      	add	r3, r1
 8009a90:	1ad3      	subs	r3, r2, r3
            while (next &&
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	da9a      	bge.n	80099cc <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8009a96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d059      	beq.n	8009b50 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 8009a9c:	4b88      	ldr	r3, [pc, #544]	; (8009cc0 <tcp_receive+0xb08>)
 8009a9e:	881b      	ldrh	r3, [r3, #0]
 8009aa0:	461a      	mov	r2, r3
 8009aa2:	4b88      	ldr	r3, [pc, #544]	; (8009cc4 <tcp_receive+0xb0c>)
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	441a      	add	r2, r3
 8009aa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009aaa:	68db      	ldr	r3, [r3, #12]
 8009aac:	685b      	ldr	r3, [r3, #4]
 8009aae:	1ad3      	subs	r3, r2, r3
            if (next &&
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	dd4d      	ble.n	8009b50 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8009ab4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ab6:	68db      	ldr	r3, [r3, #12]
 8009ab8:	685b      	ldr	r3, [r3, #4]
 8009aba:	b29a      	uxth	r2, r3
 8009abc:	4b81      	ldr	r3, [pc, #516]	; (8009cc4 <tcp_receive+0xb0c>)
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	b29b      	uxth	r3, r3
 8009ac2:	1ad3      	subs	r3, r2, r3
 8009ac4:	b29a      	uxth	r2, r3
 8009ac6:	4b80      	ldr	r3, [pc, #512]	; (8009cc8 <tcp_receive+0xb10>)
 8009ac8:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8009aca:	4b7f      	ldr	r3, [pc, #508]	; (8009cc8 <tcp_receive+0xb10>)
 8009acc:	68db      	ldr	r3, [r3, #12]
 8009ace:	899b      	ldrh	r3, [r3, #12]
 8009ad0:	b29b      	uxth	r3, r3
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	f7fa fe7e 	bl	80047d4 <lwip_htons>
 8009ad8:	4603      	mov	r3, r0
 8009ada:	b2db      	uxtb	r3, r3
 8009adc:	f003 0302 	and.w	r3, r3, #2
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d005      	beq.n	8009af0 <tcp_receive+0x938>
                inseg.len -= 1;
 8009ae4:	4b78      	ldr	r3, [pc, #480]	; (8009cc8 <tcp_receive+0xb10>)
 8009ae6:	891b      	ldrh	r3, [r3, #8]
 8009ae8:	3b01      	subs	r3, #1
 8009aea:	b29a      	uxth	r2, r3
 8009aec:	4b76      	ldr	r3, [pc, #472]	; (8009cc8 <tcp_receive+0xb10>)
 8009aee:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8009af0:	4b75      	ldr	r3, [pc, #468]	; (8009cc8 <tcp_receive+0xb10>)
 8009af2:	685b      	ldr	r3, [r3, #4]
 8009af4:	4a74      	ldr	r2, [pc, #464]	; (8009cc8 <tcp_receive+0xb10>)
 8009af6:	8912      	ldrh	r2, [r2, #8]
 8009af8:	4611      	mov	r1, r2
 8009afa:	4618      	mov	r0, r3
 8009afc:	f7fc f8e6 	bl	8005ccc <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8009b00:	4b71      	ldr	r3, [pc, #452]	; (8009cc8 <tcp_receive+0xb10>)
 8009b02:	891c      	ldrh	r4, [r3, #8]
 8009b04:	4b70      	ldr	r3, [pc, #448]	; (8009cc8 <tcp_receive+0xb10>)
 8009b06:	68db      	ldr	r3, [r3, #12]
 8009b08:	899b      	ldrh	r3, [r3, #12]
 8009b0a:	b29b      	uxth	r3, r3
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	f7fa fe61 	bl	80047d4 <lwip_htons>
 8009b12:	4603      	mov	r3, r0
 8009b14:	b2db      	uxtb	r3, r3
 8009b16:	f003 0303 	and.w	r3, r3, #3
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d001      	beq.n	8009b22 <tcp_receive+0x96a>
 8009b1e:	2301      	movs	r3, #1
 8009b20:	e000      	b.n	8009b24 <tcp_receive+0x96c>
 8009b22:	2300      	movs	r3, #0
 8009b24:	4423      	add	r3, r4
 8009b26:	b29a      	uxth	r2, r3
 8009b28:	4b65      	ldr	r3, [pc, #404]	; (8009cc0 <tcp_receive+0xb08>)
 8009b2a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8009b2c:	4b64      	ldr	r3, [pc, #400]	; (8009cc0 <tcp_receive+0xb08>)
 8009b2e:	881b      	ldrh	r3, [r3, #0]
 8009b30:	461a      	mov	r2, r3
 8009b32:	4b64      	ldr	r3, [pc, #400]	; (8009cc4 <tcp_receive+0xb0c>)
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	441a      	add	r2, r3
 8009b38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b3a:	68db      	ldr	r3, [r3, #12]
 8009b3c:	685b      	ldr	r3, [r3, #4]
 8009b3e:	429a      	cmp	r2, r3
 8009b40:	d006      	beq.n	8009b50 <tcp_receive+0x998>
 8009b42:	4b62      	ldr	r3, [pc, #392]	; (8009ccc <tcp_receive+0xb14>)
 8009b44:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8009b48:	4961      	ldr	r1, [pc, #388]	; (8009cd0 <tcp_receive+0xb18>)
 8009b4a:	4862      	ldr	r0, [pc, #392]	; (8009cd4 <tcp_receive+0xb1c>)
 8009b4c:	f006 fdec 	bl	8010728 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009b54:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8009b56:	4b5a      	ldr	r3, [pc, #360]	; (8009cc0 <tcp_receive+0xb08>)
 8009b58:	881b      	ldrh	r3, [r3, #0]
 8009b5a:	461a      	mov	r2, r3
 8009b5c:	4b59      	ldr	r3, [pc, #356]	; (8009cc4 <tcp_receive+0xb0c>)
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	441a      	add	r2, r3
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009b6a:	4b55      	ldr	r3, [pc, #340]	; (8009cc0 <tcp_receive+0xb08>)
 8009b6c:	881b      	ldrh	r3, [r3, #0]
 8009b6e:	429a      	cmp	r2, r3
 8009b70:	d206      	bcs.n	8009b80 <tcp_receive+0x9c8>
 8009b72:	4b56      	ldr	r3, [pc, #344]	; (8009ccc <tcp_receive+0xb14>)
 8009b74:	f240 6207 	movw	r2, #1543	; 0x607
 8009b78:	4957      	ldr	r1, [pc, #348]	; (8009cd8 <tcp_receive+0xb20>)
 8009b7a:	4856      	ldr	r0, [pc, #344]	; (8009cd4 <tcp_receive+0xb1c>)
 8009b7c:	f006 fdd4 	bl	8010728 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009b84:	4b4e      	ldr	r3, [pc, #312]	; (8009cc0 <tcp_receive+0xb08>)
 8009b86:	881b      	ldrh	r3, [r3, #0]
 8009b88:	1ad3      	subs	r3, r2, r3
 8009b8a:	b29a      	uxth	r2, r3
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8009b90:	6878      	ldr	r0, [r7, #4]
 8009b92:	f7fc ffc5 	bl	8006b20 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8009b96:	4b4c      	ldr	r3, [pc, #304]	; (8009cc8 <tcp_receive+0xb10>)
 8009b98:	685b      	ldr	r3, [r3, #4]
 8009b9a:	891b      	ldrh	r3, [r3, #8]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d006      	beq.n	8009bae <tcp_receive+0x9f6>
          recv_data = inseg.p;
 8009ba0:	4b49      	ldr	r3, [pc, #292]	; (8009cc8 <tcp_receive+0xb10>)
 8009ba2:	685b      	ldr	r3, [r3, #4]
 8009ba4:	4a4d      	ldr	r2, [pc, #308]	; (8009cdc <tcp_receive+0xb24>)
 8009ba6:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8009ba8:	4b47      	ldr	r3, [pc, #284]	; (8009cc8 <tcp_receive+0xb10>)
 8009baa:	2200      	movs	r2, #0
 8009bac:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009bae:	4b46      	ldr	r3, [pc, #280]	; (8009cc8 <tcp_receive+0xb10>)
 8009bb0:	68db      	ldr	r3, [r3, #12]
 8009bb2:	899b      	ldrh	r3, [r3, #12]
 8009bb4:	b29b      	uxth	r3, r3
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	f7fa fe0c 	bl	80047d4 <lwip_htons>
 8009bbc:	4603      	mov	r3, r0
 8009bbe:	b2db      	uxtb	r3, r3
 8009bc0:	f003 0301 	and.w	r3, r3, #1
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	f000 80b8 	beq.w	8009d3a <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8009bca:	4b45      	ldr	r3, [pc, #276]	; (8009ce0 <tcp_receive+0xb28>)
 8009bcc:	781b      	ldrb	r3, [r3, #0]
 8009bce:	f043 0320 	orr.w	r3, r3, #32
 8009bd2:	b2da      	uxtb	r2, r3
 8009bd4:	4b42      	ldr	r3, [pc, #264]	; (8009ce0 <tcp_receive+0xb28>)
 8009bd6:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8009bd8:	e0af      	b.n	8009d3a <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009bde:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009be4:	68db      	ldr	r3, [r3, #12]
 8009be6:	685b      	ldr	r3, [r3, #4]
 8009be8:	4a36      	ldr	r2, [pc, #216]	; (8009cc4 <tcp_receive+0xb0c>)
 8009bea:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8009bec:	68bb      	ldr	r3, [r7, #8]
 8009bee:	891b      	ldrh	r3, [r3, #8]
 8009bf0:	461c      	mov	r4, r3
 8009bf2:	68bb      	ldr	r3, [r7, #8]
 8009bf4:	68db      	ldr	r3, [r3, #12]
 8009bf6:	899b      	ldrh	r3, [r3, #12]
 8009bf8:	b29b      	uxth	r3, r3
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	f7fa fdea 	bl	80047d4 <lwip_htons>
 8009c00:	4603      	mov	r3, r0
 8009c02:	b2db      	uxtb	r3, r3
 8009c04:	f003 0303 	and.w	r3, r3, #3
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d001      	beq.n	8009c10 <tcp_receive+0xa58>
 8009c0c:	2301      	movs	r3, #1
 8009c0e:	e000      	b.n	8009c12 <tcp_receive+0xa5a>
 8009c10:	2300      	movs	r3, #0
 8009c12:	191a      	adds	r2, r3, r4
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c18:	441a      	add	r2, r3
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c22:	461c      	mov	r4, r3
 8009c24:	68bb      	ldr	r3, [r7, #8]
 8009c26:	891b      	ldrh	r3, [r3, #8]
 8009c28:	461d      	mov	r5, r3
 8009c2a:	68bb      	ldr	r3, [r7, #8]
 8009c2c:	68db      	ldr	r3, [r3, #12]
 8009c2e:	899b      	ldrh	r3, [r3, #12]
 8009c30:	b29b      	uxth	r3, r3
 8009c32:	4618      	mov	r0, r3
 8009c34:	f7fa fdce 	bl	80047d4 <lwip_htons>
 8009c38:	4603      	mov	r3, r0
 8009c3a:	b2db      	uxtb	r3, r3
 8009c3c:	f003 0303 	and.w	r3, r3, #3
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d001      	beq.n	8009c48 <tcp_receive+0xa90>
 8009c44:	2301      	movs	r3, #1
 8009c46:	e000      	b.n	8009c4a <tcp_receive+0xa92>
 8009c48:	2300      	movs	r3, #0
 8009c4a:	442b      	add	r3, r5
 8009c4c:	429c      	cmp	r4, r3
 8009c4e:	d206      	bcs.n	8009c5e <tcp_receive+0xaa6>
 8009c50:	4b1e      	ldr	r3, [pc, #120]	; (8009ccc <tcp_receive+0xb14>)
 8009c52:	f240 622b 	movw	r2, #1579	; 0x62b
 8009c56:	4923      	ldr	r1, [pc, #140]	; (8009ce4 <tcp_receive+0xb2c>)
 8009c58:	481e      	ldr	r0, [pc, #120]	; (8009cd4 <tcp_receive+0xb1c>)
 8009c5a:	f006 fd65 	bl	8010728 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8009c5e:	68bb      	ldr	r3, [r7, #8]
 8009c60:	891b      	ldrh	r3, [r3, #8]
 8009c62:	461c      	mov	r4, r3
 8009c64:	68bb      	ldr	r3, [r7, #8]
 8009c66:	68db      	ldr	r3, [r3, #12]
 8009c68:	899b      	ldrh	r3, [r3, #12]
 8009c6a:	b29b      	uxth	r3, r3
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	f7fa fdb1 	bl	80047d4 <lwip_htons>
 8009c72:	4603      	mov	r3, r0
 8009c74:	b2db      	uxtb	r3, r3
 8009c76:	f003 0303 	and.w	r3, r3, #3
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d001      	beq.n	8009c82 <tcp_receive+0xaca>
 8009c7e:	2301      	movs	r3, #1
 8009c80:	e000      	b.n	8009c84 <tcp_receive+0xacc>
 8009c82:	2300      	movs	r3, #0
 8009c84:	1919      	adds	r1, r3, r4
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009c8a:	b28b      	uxth	r3, r1
 8009c8c:	1ad3      	subs	r3, r2, r3
 8009c8e:	b29a      	uxth	r2, r3
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8009c94:	6878      	ldr	r0, [r7, #4]
 8009c96:	f7fc ff43 	bl	8006b20 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8009c9a:	68bb      	ldr	r3, [r7, #8]
 8009c9c:	685b      	ldr	r3, [r3, #4]
 8009c9e:	891b      	ldrh	r3, [r3, #8]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d028      	beq.n	8009cf6 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8009ca4:	4b0d      	ldr	r3, [pc, #52]	; (8009cdc <tcp_receive+0xb24>)
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d01d      	beq.n	8009ce8 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8009cac:	4b0b      	ldr	r3, [pc, #44]	; (8009cdc <tcp_receive+0xb24>)
 8009cae:	681a      	ldr	r2, [r3, #0]
 8009cb0:	68bb      	ldr	r3, [r7, #8]
 8009cb2:	685b      	ldr	r3, [r3, #4]
 8009cb4:	4619      	mov	r1, r3
 8009cb6:	4610      	mov	r0, r2
 8009cb8:	f7fc fa50 	bl	800615c <pbuf_cat>
 8009cbc:	e018      	b.n	8009cf0 <tcp_receive+0xb38>
 8009cbe:	bf00      	nop
 8009cc0:	20007c96 	.word	0x20007c96
 8009cc4:	20007c8c 	.word	0x20007c8c
 8009cc8:	20007c6c 	.word	0x20007c6c
 8009ccc:	08012b1c 	.word	0x08012b1c
 8009cd0:	08012efc 	.word	0x08012efc
 8009cd4:	08012b68 	.word	0x08012b68
 8009cd8:	08012f38 	.word	0x08012f38
 8009cdc:	20007c9c 	.word	0x20007c9c
 8009ce0:	20007c99 	.word	0x20007c99
 8009ce4:	08012f58 	.word	0x08012f58
            } else {
              recv_data = cseg->p;
 8009ce8:	68bb      	ldr	r3, [r7, #8]
 8009cea:	685b      	ldr	r3, [r3, #4]
 8009cec:	4a70      	ldr	r2, [pc, #448]	; (8009eb0 <tcp_receive+0xcf8>)
 8009cee:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8009cf0:	68bb      	ldr	r3, [r7, #8]
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8009cf6:	68bb      	ldr	r3, [r7, #8]
 8009cf8:	68db      	ldr	r3, [r3, #12]
 8009cfa:	899b      	ldrh	r3, [r3, #12]
 8009cfc:	b29b      	uxth	r3, r3
 8009cfe:	4618      	mov	r0, r3
 8009d00:	f7fa fd68 	bl	80047d4 <lwip_htons>
 8009d04:	4603      	mov	r3, r0
 8009d06:	b2db      	uxtb	r3, r3
 8009d08:	f003 0301 	and.w	r3, r3, #1
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d00d      	beq.n	8009d2c <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8009d10:	4b68      	ldr	r3, [pc, #416]	; (8009eb4 <tcp_receive+0xcfc>)
 8009d12:	781b      	ldrb	r3, [r3, #0]
 8009d14:	f043 0320 	orr.w	r3, r3, #32
 8009d18:	b2da      	uxtb	r2, r3
 8009d1a:	4b66      	ldr	r3, [pc, #408]	; (8009eb4 <tcp_receive+0xcfc>)
 8009d1c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	7d1b      	ldrb	r3, [r3, #20]
 8009d22:	2b04      	cmp	r3, #4
 8009d24:	d102      	bne.n	8009d2c <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	2207      	movs	r2, #7
 8009d2a:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8009d2c:	68bb      	ldr	r3, [r7, #8]
 8009d2e:	681a      	ldr	r2, [r3, #0]
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8009d34:	68b8      	ldr	r0, [r7, #8]
 8009d36:	f7fd fbd2 	bl	80074de <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d008      	beq.n	8009d54 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d46:	68db      	ldr	r3, [r3, #12]
 8009d48:	685a      	ldr	r2, [r3, #4]
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8009d4e:	429a      	cmp	r2, r3
 8009d50:	f43f af43 	beq.w	8009bda <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	8b5b      	ldrh	r3, [r3, #26]
 8009d58:	f003 0301 	and.w	r3, r3, #1
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d00e      	beq.n	8009d7e <tcp_receive+0xbc6>
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	8b5b      	ldrh	r3, [r3, #26]
 8009d64:	f023 0301 	bic.w	r3, r3, #1
 8009d68:	b29a      	uxth	r2, r3
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	835a      	strh	r2, [r3, #26]
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	8b5b      	ldrh	r3, [r3, #26]
 8009d72:	f043 0302 	orr.w	r3, r3, #2
 8009d76:	b29a      	uxth	r2, r3
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8009d7c:	e188      	b.n	800a090 <tcp_receive+0xed8>
        tcp_ack(pcb);
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	8b5b      	ldrh	r3, [r3, #26]
 8009d82:	f043 0301 	orr.w	r3, r3, #1
 8009d86:	b29a      	uxth	r2, r3
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8009d8c:	e180      	b.n	800a090 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d106      	bne.n	8009da4 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8009d96:	4848      	ldr	r0, [pc, #288]	; (8009eb8 <tcp_receive+0xd00>)
 8009d98:	f7fd fbba 	bl	8007510 <tcp_seg_copy>
 8009d9c:	4602      	mov	r2, r0
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	675a      	str	r2, [r3, #116]	; 0x74
 8009da2:	e16d      	b.n	800a080 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8009da4:	2300      	movs	r3, #0
 8009da6:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009dac:	63bb      	str	r3, [r7, #56]	; 0x38
 8009dae:	e157      	b.n	800a060 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 8009db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009db2:	68db      	ldr	r3, [r3, #12]
 8009db4:	685a      	ldr	r2, [r3, #4]
 8009db6:	4b41      	ldr	r3, [pc, #260]	; (8009ebc <tcp_receive+0xd04>)
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	429a      	cmp	r2, r3
 8009dbc:	d11d      	bne.n	8009dfa <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8009dbe:	4b3e      	ldr	r3, [pc, #248]	; (8009eb8 <tcp_receive+0xd00>)
 8009dc0:	891a      	ldrh	r2, [r3, #8]
 8009dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dc4:	891b      	ldrh	r3, [r3, #8]
 8009dc6:	429a      	cmp	r2, r3
 8009dc8:	f240 814f 	bls.w	800a06a <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8009dcc:	483a      	ldr	r0, [pc, #232]	; (8009eb8 <tcp_receive+0xd00>)
 8009dce:	f7fd fb9f 	bl	8007510 <tcp_seg_copy>
 8009dd2:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8009dd4:	697b      	ldr	r3, [r7, #20]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	f000 8149 	beq.w	800a06e <tcp_receive+0xeb6>
                  if (prev != NULL) {
 8009ddc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d003      	beq.n	8009dea <tcp_receive+0xc32>
                    prev->next = cseg;
 8009de2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009de4:	697a      	ldr	r2, [r7, #20]
 8009de6:	601a      	str	r2, [r3, #0]
 8009de8:	e002      	b.n	8009df0 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	697a      	ldr	r2, [r7, #20]
 8009dee:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8009df0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009df2:	6978      	ldr	r0, [r7, #20]
 8009df4:	f7ff f8dc 	bl	8008fb0 <tcp_oos_insert_segment>
                }
                break;
 8009df8:	e139      	b.n	800a06e <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8009dfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d117      	bne.n	8009e30 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8009e00:	4b2e      	ldr	r3, [pc, #184]	; (8009ebc <tcp_receive+0xd04>)
 8009e02:	681a      	ldr	r2, [r3, #0]
 8009e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e06:	68db      	ldr	r3, [r3, #12]
 8009e08:	685b      	ldr	r3, [r3, #4]
 8009e0a:	1ad3      	subs	r3, r2, r3
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	da57      	bge.n	8009ec0 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8009e10:	4829      	ldr	r0, [pc, #164]	; (8009eb8 <tcp_receive+0xd00>)
 8009e12:	f7fd fb7d 	bl	8007510 <tcp_seg_copy>
 8009e16:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8009e18:	69bb      	ldr	r3, [r7, #24]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	f000 8129 	beq.w	800a072 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	69ba      	ldr	r2, [r7, #24]
 8009e24:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8009e26:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009e28:	69b8      	ldr	r0, [r7, #24]
 8009e2a:	f7ff f8c1 	bl	8008fb0 <tcp_oos_insert_segment>
                  }
                  break;
 8009e2e:	e120      	b.n	800a072 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8009e30:	4b22      	ldr	r3, [pc, #136]	; (8009ebc <tcp_receive+0xd04>)
 8009e32:	681a      	ldr	r2, [r3, #0]
 8009e34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e36:	68db      	ldr	r3, [r3, #12]
 8009e38:	685b      	ldr	r3, [r3, #4]
 8009e3a:	1ad3      	subs	r3, r2, r3
 8009e3c:	3b01      	subs	r3, #1
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	db3e      	blt.n	8009ec0 <tcp_receive+0xd08>
 8009e42:	4b1e      	ldr	r3, [pc, #120]	; (8009ebc <tcp_receive+0xd04>)
 8009e44:	681a      	ldr	r2, [r3, #0]
 8009e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e48:	68db      	ldr	r3, [r3, #12]
 8009e4a:	685b      	ldr	r3, [r3, #4]
 8009e4c:	1ad3      	subs	r3, r2, r3
 8009e4e:	3301      	adds	r3, #1
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	dc35      	bgt.n	8009ec0 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8009e54:	4818      	ldr	r0, [pc, #96]	; (8009eb8 <tcp_receive+0xd00>)
 8009e56:	f7fd fb5b 	bl	8007510 <tcp_seg_copy>
 8009e5a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8009e5c:	69fb      	ldr	r3, [r7, #28]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	f000 8109 	beq.w	800a076 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8009e64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e66:	68db      	ldr	r3, [r3, #12]
 8009e68:	685b      	ldr	r3, [r3, #4]
 8009e6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009e6c:	8912      	ldrh	r2, [r2, #8]
 8009e6e:	441a      	add	r2, r3
 8009e70:	4b12      	ldr	r3, [pc, #72]	; (8009ebc <tcp_receive+0xd04>)
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	1ad3      	subs	r3, r2, r3
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	dd12      	ble.n	8009ea0 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8009e7a:	4b10      	ldr	r3, [pc, #64]	; (8009ebc <tcp_receive+0xd04>)
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	b29a      	uxth	r2, r3
 8009e80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e82:	68db      	ldr	r3, [r3, #12]
 8009e84:	685b      	ldr	r3, [r3, #4]
 8009e86:	b29b      	uxth	r3, r3
 8009e88:	1ad3      	subs	r3, r2, r3
 8009e8a:	b29a      	uxth	r2, r3
 8009e8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e8e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8009e90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e92:	685a      	ldr	r2, [r3, #4]
 8009e94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e96:	891b      	ldrh	r3, [r3, #8]
 8009e98:	4619      	mov	r1, r3
 8009e9a:	4610      	mov	r0, r2
 8009e9c:	f7fb ff16 	bl	8005ccc <pbuf_realloc>
                    }
                    prev->next = cseg;
 8009ea0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ea2:	69fa      	ldr	r2, [r7, #28]
 8009ea4:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8009ea6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009ea8:	69f8      	ldr	r0, [r7, #28]
 8009eaa:	f7ff f881 	bl	8008fb0 <tcp_oos_insert_segment>
                  }
                  break;
 8009eae:	e0e2      	b.n	800a076 <tcp_receive+0xebe>
 8009eb0:	20007c9c 	.word	0x20007c9c
 8009eb4:	20007c99 	.word	0x20007c99
 8009eb8:	20007c6c 	.word	0x20007c6c
 8009ebc:	20007c8c 	.word	0x20007c8c
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8009ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ec2:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8009ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	f040 80c6 	bne.w	800a05a <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8009ece:	4b80      	ldr	r3, [pc, #512]	; (800a0d0 <tcp_receive+0xf18>)
 8009ed0:	681a      	ldr	r2, [r3, #0]
 8009ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ed4:	68db      	ldr	r3, [r3, #12]
 8009ed6:	685b      	ldr	r3, [r3, #4]
 8009ed8:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	f340 80bd 	ble.w	800a05a <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8009ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ee2:	68db      	ldr	r3, [r3, #12]
 8009ee4:	899b      	ldrh	r3, [r3, #12]
 8009ee6:	b29b      	uxth	r3, r3
 8009ee8:	4618      	mov	r0, r3
 8009eea:	f7fa fc73 	bl	80047d4 <lwip_htons>
 8009eee:	4603      	mov	r3, r0
 8009ef0:	b2db      	uxtb	r3, r3
 8009ef2:	f003 0301 	and.w	r3, r3, #1
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	f040 80bf 	bne.w	800a07a <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8009efc:	4875      	ldr	r0, [pc, #468]	; (800a0d4 <tcp_receive+0xf1c>)
 8009efe:	f7fd fb07 	bl	8007510 <tcp_seg_copy>
 8009f02:	4602      	mov	r2, r0
 8009f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f06:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8009f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	f000 80b6 	beq.w	800a07e <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8009f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f14:	68db      	ldr	r3, [r3, #12]
 8009f16:	685b      	ldr	r3, [r3, #4]
 8009f18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009f1a:	8912      	ldrh	r2, [r2, #8]
 8009f1c:	441a      	add	r2, r3
 8009f1e:	4b6c      	ldr	r3, [pc, #432]	; (800a0d0 <tcp_receive+0xf18>)
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	1ad3      	subs	r3, r2, r3
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	dd12      	ble.n	8009f4e <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8009f28:	4b69      	ldr	r3, [pc, #420]	; (800a0d0 <tcp_receive+0xf18>)
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	b29a      	uxth	r2, r3
 8009f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f30:	68db      	ldr	r3, [r3, #12]
 8009f32:	685b      	ldr	r3, [r3, #4]
 8009f34:	b29b      	uxth	r3, r3
 8009f36:	1ad3      	subs	r3, r2, r3
 8009f38:	b29a      	uxth	r2, r3
 8009f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f3c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8009f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f40:	685a      	ldr	r2, [r3, #4]
 8009f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f44:	891b      	ldrh	r3, [r3, #8]
 8009f46:	4619      	mov	r1, r3
 8009f48:	4610      	mov	r0, r2
 8009f4a:	f7fb febf 	bl	8005ccc <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8009f4e:	4b62      	ldr	r3, [pc, #392]	; (800a0d8 <tcp_receive+0xf20>)
 8009f50:	881b      	ldrh	r3, [r3, #0]
 8009f52:	461a      	mov	r2, r3
 8009f54:	4b5e      	ldr	r3, [pc, #376]	; (800a0d0 <tcp_receive+0xf18>)
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	441a      	add	r2, r3
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f5e:	6879      	ldr	r1, [r7, #4]
 8009f60:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009f62:	440b      	add	r3, r1
 8009f64:	1ad3      	subs	r3, r2, r3
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	f340 8089 	ble.w	800a07e <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8009f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	68db      	ldr	r3, [r3, #12]
 8009f72:	899b      	ldrh	r3, [r3, #12]
 8009f74:	b29b      	uxth	r3, r3
 8009f76:	4618      	mov	r0, r3
 8009f78:	f7fa fc2c 	bl	80047d4 <lwip_htons>
 8009f7c:	4603      	mov	r3, r0
 8009f7e:	b2db      	uxtb	r3, r3
 8009f80:	f003 0301 	and.w	r3, r3, #1
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d022      	beq.n	8009fce <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8009f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	68db      	ldr	r3, [r3, #12]
 8009f8e:	899b      	ldrh	r3, [r3, #12]
 8009f90:	b29b      	uxth	r3, r3
 8009f92:	b21b      	sxth	r3, r3
 8009f94:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009f98:	b21c      	sxth	r4, r3
 8009f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	68db      	ldr	r3, [r3, #12]
 8009fa0:	899b      	ldrh	r3, [r3, #12]
 8009fa2:	b29b      	uxth	r3, r3
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	f7fa fc15 	bl	80047d4 <lwip_htons>
 8009faa:	4603      	mov	r3, r0
 8009fac:	b2db      	uxtb	r3, r3
 8009fae:	b29b      	uxth	r3, r3
 8009fb0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8009fb4:	b29b      	uxth	r3, r3
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	f7fa fc0c 	bl	80047d4 <lwip_htons>
 8009fbc:	4603      	mov	r3, r0
 8009fbe:	b21b      	sxth	r3, r3
 8009fc0:	4323      	orrs	r3, r4
 8009fc2:	b21a      	sxth	r2, r3
 8009fc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	68db      	ldr	r3, [r3, #12]
 8009fca:	b292      	uxth	r2, r2
 8009fcc:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fd2:	b29a      	uxth	r2, r3
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009fd8:	4413      	add	r3, r2
 8009fda:	b299      	uxth	r1, r3
 8009fdc:	4b3c      	ldr	r3, [pc, #240]	; (800a0d0 <tcp_receive+0xf18>)
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	b29a      	uxth	r2, r3
 8009fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	1a8a      	subs	r2, r1, r2
 8009fe8:	b292      	uxth	r2, r2
 8009fea:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8009fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	685a      	ldr	r2, [r3, #4]
 8009ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	891b      	ldrh	r3, [r3, #8]
 8009ff8:	4619      	mov	r1, r3
 8009ffa:	4610      	mov	r0, r2
 8009ffc:	f7fb fe66 	bl	8005ccc <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800a000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	891c      	ldrh	r4, [r3, #8]
 800a006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	68db      	ldr	r3, [r3, #12]
 800a00c:	899b      	ldrh	r3, [r3, #12]
 800a00e:	b29b      	uxth	r3, r3
 800a010:	4618      	mov	r0, r3
 800a012:	f7fa fbdf 	bl	80047d4 <lwip_htons>
 800a016:	4603      	mov	r3, r0
 800a018:	b2db      	uxtb	r3, r3
 800a01a:	f003 0303 	and.w	r3, r3, #3
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d001      	beq.n	800a026 <tcp_receive+0xe6e>
 800a022:	2301      	movs	r3, #1
 800a024:	e000      	b.n	800a028 <tcp_receive+0xe70>
 800a026:	2300      	movs	r3, #0
 800a028:	4423      	add	r3, r4
 800a02a:	b29a      	uxth	r2, r3
 800a02c:	4b2a      	ldr	r3, [pc, #168]	; (800a0d8 <tcp_receive+0xf20>)
 800a02e:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800a030:	4b29      	ldr	r3, [pc, #164]	; (800a0d8 <tcp_receive+0xf20>)
 800a032:	881b      	ldrh	r3, [r3, #0]
 800a034:	461a      	mov	r2, r3
 800a036:	4b26      	ldr	r3, [pc, #152]	; (800a0d0 <tcp_receive+0xf18>)
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	441a      	add	r2, r3
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a040:	6879      	ldr	r1, [r7, #4]
 800a042:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a044:	440b      	add	r3, r1
 800a046:	429a      	cmp	r2, r3
 800a048:	d019      	beq.n	800a07e <tcp_receive+0xec6>
 800a04a:	4b24      	ldr	r3, [pc, #144]	; (800a0dc <tcp_receive+0xf24>)
 800a04c:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800a050:	4923      	ldr	r1, [pc, #140]	; (800a0e0 <tcp_receive+0xf28>)
 800a052:	4824      	ldr	r0, [pc, #144]	; (800a0e4 <tcp_receive+0xf2c>)
 800a054:	f006 fb68 	bl	8010728 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800a058:	e011      	b.n	800a07e <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800a05a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	63bb      	str	r3, [r7, #56]	; 0x38
 800a060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a062:	2b00      	cmp	r3, #0
 800a064:	f47f aea4 	bne.w	8009db0 <tcp_receive+0xbf8>
 800a068:	e00a      	b.n	800a080 <tcp_receive+0xec8>
                break;
 800a06a:	bf00      	nop
 800a06c:	e008      	b.n	800a080 <tcp_receive+0xec8>
                break;
 800a06e:	bf00      	nop
 800a070:	e006      	b.n	800a080 <tcp_receive+0xec8>
                  break;
 800a072:	bf00      	nop
 800a074:	e004      	b.n	800a080 <tcp_receive+0xec8>
                  break;
 800a076:	bf00      	nop
 800a078:	e002      	b.n	800a080 <tcp_receive+0xec8>
                  break;
 800a07a:	bf00      	nop
 800a07c:	e000      	b.n	800a080 <tcp_receive+0xec8>
                break;
 800a07e:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800a080:	6878      	ldr	r0, [r7, #4]
 800a082:	f001 fa33 	bl	800b4ec <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800a086:	e003      	b.n	800a090 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800a088:	6878      	ldr	r0, [r7, #4]
 800a08a:	f001 fa2f 	bl	800b4ec <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a08e:	e01a      	b.n	800a0c6 <tcp_receive+0xf0e>
 800a090:	e019      	b.n	800a0c6 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800a092:	4b0f      	ldr	r3, [pc, #60]	; (800a0d0 <tcp_receive+0xf18>)
 800a094:	681a      	ldr	r2, [r3, #0]
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a09a:	1ad3      	subs	r3, r2, r3
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	db0a      	blt.n	800a0b6 <tcp_receive+0xefe>
 800a0a0:	4b0b      	ldr	r3, [pc, #44]	; (800a0d0 <tcp_receive+0xf18>)
 800a0a2:	681a      	ldr	r2, [r3, #0]
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0a8:	6879      	ldr	r1, [r7, #4]
 800a0aa:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a0ac:	440b      	add	r3, r1
 800a0ae:	1ad3      	subs	r3, r2, r3
 800a0b0:	3301      	adds	r3, #1
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	dd07      	ble.n	800a0c6 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	8b5b      	ldrh	r3, [r3, #26]
 800a0ba:	f043 0302 	orr.w	r3, r3, #2
 800a0be:	b29a      	uxth	r2, r3
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800a0c4:	e7ff      	b.n	800a0c6 <tcp_receive+0xf0e>
 800a0c6:	bf00      	nop
 800a0c8:	3750      	adds	r7, #80	; 0x50
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	bdb0      	pop	{r4, r5, r7, pc}
 800a0ce:	bf00      	nop
 800a0d0:	20007c8c 	.word	0x20007c8c
 800a0d4:	20007c6c 	.word	0x20007c6c
 800a0d8:	20007c96 	.word	0x20007c96
 800a0dc:	08012b1c 	.word	0x08012b1c
 800a0e0:	08012ec4 	.word	0x08012ec4
 800a0e4:	08012b68 	.word	0x08012b68

0800a0e8 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800a0e8:	b480      	push	{r7}
 800a0ea:	b083      	sub	sp, #12
 800a0ec:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800a0ee:	4b15      	ldr	r3, [pc, #84]	; (800a144 <tcp_get_next_optbyte+0x5c>)
 800a0f0:	881b      	ldrh	r3, [r3, #0]
 800a0f2:	1c5a      	adds	r2, r3, #1
 800a0f4:	b291      	uxth	r1, r2
 800a0f6:	4a13      	ldr	r2, [pc, #76]	; (800a144 <tcp_get_next_optbyte+0x5c>)
 800a0f8:	8011      	strh	r1, [r2, #0]
 800a0fa:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800a0fc:	4b12      	ldr	r3, [pc, #72]	; (800a148 <tcp_get_next_optbyte+0x60>)
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d004      	beq.n	800a10e <tcp_get_next_optbyte+0x26>
 800a104:	4b11      	ldr	r3, [pc, #68]	; (800a14c <tcp_get_next_optbyte+0x64>)
 800a106:	881b      	ldrh	r3, [r3, #0]
 800a108:	88fa      	ldrh	r2, [r7, #6]
 800a10a:	429a      	cmp	r2, r3
 800a10c:	d208      	bcs.n	800a120 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800a10e:	4b10      	ldr	r3, [pc, #64]	; (800a150 <tcp_get_next_optbyte+0x68>)
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	3314      	adds	r3, #20
 800a114:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800a116:	88fb      	ldrh	r3, [r7, #6]
 800a118:	683a      	ldr	r2, [r7, #0]
 800a11a:	4413      	add	r3, r2
 800a11c:	781b      	ldrb	r3, [r3, #0]
 800a11e:	e00b      	b.n	800a138 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800a120:	88fb      	ldrh	r3, [r7, #6]
 800a122:	b2da      	uxtb	r2, r3
 800a124:	4b09      	ldr	r3, [pc, #36]	; (800a14c <tcp_get_next_optbyte+0x64>)
 800a126:	881b      	ldrh	r3, [r3, #0]
 800a128:	b2db      	uxtb	r3, r3
 800a12a:	1ad3      	subs	r3, r2, r3
 800a12c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800a12e:	4b06      	ldr	r3, [pc, #24]	; (800a148 <tcp_get_next_optbyte+0x60>)
 800a130:	681a      	ldr	r2, [r3, #0]
 800a132:	797b      	ldrb	r3, [r7, #5]
 800a134:	4413      	add	r3, r2
 800a136:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a138:	4618      	mov	r0, r3
 800a13a:	370c      	adds	r7, #12
 800a13c:	46bd      	mov	sp, r7
 800a13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a142:	4770      	bx	lr
 800a144:	20007c88 	.word	0x20007c88
 800a148:	20007c84 	.word	0x20007c84
 800a14c:	20007c82 	.word	0x20007c82
 800a150:	20007c7c 	.word	0x20007c7c

0800a154 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800a154:	b580      	push	{r7, lr}
 800a156:	b084      	sub	sp, #16
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d106      	bne.n	800a170 <tcp_parseopt+0x1c>
 800a162:	4b32      	ldr	r3, [pc, #200]	; (800a22c <tcp_parseopt+0xd8>)
 800a164:	f240 727d 	movw	r2, #1917	; 0x77d
 800a168:	4931      	ldr	r1, [pc, #196]	; (800a230 <tcp_parseopt+0xdc>)
 800a16a:	4832      	ldr	r0, [pc, #200]	; (800a234 <tcp_parseopt+0xe0>)
 800a16c:	f006 fadc 	bl	8010728 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800a170:	4b31      	ldr	r3, [pc, #196]	; (800a238 <tcp_parseopt+0xe4>)
 800a172:	881b      	ldrh	r3, [r3, #0]
 800a174:	2b00      	cmp	r3, #0
 800a176:	d055      	beq.n	800a224 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800a178:	4b30      	ldr	r3, [pc, #192]	; (800a23c <tcp_parseopt+0xe8>)
 800a17a:	2200      	movs	r2, #0
 800a17c:	801a      	strh	r2, [r3, #0]
 800a17e:	e045      	b.n	800a20c <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800a180:	f7ff ffb2 	bl	800a0e8 <tcp_get_next_optbyte>
 800a184:	4603      	mov	r3, r0
 800a186:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800a188:	7bfb      	ldrb	r3, [r7, #15]
 800a18a:	2b02      	cmp	r3, #2
 800a18c:	d006      	beq.n	800a19c <tcp_parseopt+0x48>
 800a18e:	2b02      	cmp	r3, #2
 800a190:	dc2b      	bgt.n	800a1ea <tcp_parseopt+0x96>
 800a192:	2b00      	cmp	r3, #0
 800a194:	d041      	beq.n	800a21a <tcp_parseopt+0xc6>
 800a196:	2b01      	cmp	r3, #1
 800a198:	d127      	bne.n	800a1ea <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800a19a:	e037      	b.n	800a20c <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800a19c:	f7ff ffa4 	bl	800a0e8 <tcp_get_next_optbyte>
 800a1a0:	4603      	mov	r3, r0
 800a1a2:	2b04      	cmp	r3, #4
 800a1a4:	d13b      	bne.n	800a21e <tcp_parseopt+0xca>
 800a1a6:	4b25      	ldr	r3, [pc, #148]	; (800a23c <tcp_parseopt+0xe8>)
 800a1a8:	881b      	ldrh	r3, [r3, #0]
 800a1aa:	3301      	adds	r3, #1
 800a1ac:	4a22      	ldr	r2, [pc, #136]	; (800a238 <tcp_parseopt+0xe4>)
 800a1ae:	8812      	ldrh	r2, [r2, #0]
 800a1b0:	4293      	cmp	r3, r2
 800a1b2:	da34      	bge.n	800a21e <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800a1b4:	f7ff ff98 	bl	800a0e8 <tcp_get_next_optbyte>
 800a1b8:	4603      	mov	r3, r0
 800a1ba:	b29b      	uxth	r3, r3
 800a1bc:	021b      	lsls	r3, r3, #8
 800a1be:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800a1c0:	f7ff ff92 	bl	800a0e8 <tcp_get_next_optbyte>
 800a1c4:	4603      	mov	r3, r0
 800a1c6:	b29a      	uxth	r2, r3
 800a1c8:	89bb      	ldrh	r3, [r7, #12]
 800a1ca:	4313      	orrs	r3, r2
 800a1cc:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800a1ce:	89bb      	ldrh	r3, [r7, #12]
 800a1d0:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800a1d4:	d804      	bhi.n	800a1e0 <tcp_parseopt+0x8c>
 800a1d6:	89bb      	ldrh	r3, [r7, #12]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d001      	beq.n	800a1e0 <tcp_parseopt+0x8c>
 800a1dc:	89ba      	ldrh	r2, [r7, #12]
 800a1de:	e001      	b.n	800a1e4 <tcp_parseopt+0x90>
 800a1e0:	f44f 7206 	mov.w	r2, #536	; 0x218
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800a1e8:	e010      	b.n	800a20c <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800a1ea:	f7ff ff7d 	bl	800a0e8 <tcp_get_next_optbyte>
 800a1ee:	4603      	mov	r3, r0
 800a1f0:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800a1f2:	7afb      	ldrb	r3, [r7, #11]
 800a1f4:	2b01      	cmp	r3, #1
 800a1f6:	d914      	bls.n	800a222 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800a1f8:	7afb      	ldrb	r3, [r7, #11]
 800a1fa:	b29a      	uxth	r2, r3
 800a1fc:	4b0f      	ldr	r3, [pc, #60]	; (800a23c <tcp_parseopt+0xe8>)
 800a1fe:	881b      	ldrh	r3, [r3, #0]
 800a200:	4413      	add	r3, r2
 800a202:	b29b      	uxth	r3, r3
 800a204:	3b02      	subs	r3, #2
 800a206:	b29a      	uxth	r2, r3
 800a208:	4b0c      	ldr	r3, [pc, #48]	; (800a23c <tcp_parseopt+0xe8>)
 800a20a:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800a20c:	4b0b      	ldr	r3, [pc, #44]	; (800a23c <tcp_parseopt+0xe8>)
 800a20e:	881a      	ldrh	r2, [r3, #0]
 800a210:	4b09      	ldr	r3, [pc, #36]	; (800a238 <tcp_parseopt+0xe4>)
 800a212:	881b      	ldrh	r3, [r3, #0]
 800a214:	429a      	cmp	r2, r3
 800a216:	d3b3      	bcc.n	800a180 <tcp_parseopt+0x2c>
 800a218:	e004      	b.n	800a224 <tcp_parseopt+0xd0>
          return;
 800a21a:	bf00      	nop
 800a21c:	e002      	b.n	800a224 <tcp_parseopt+0xd0>
            return;
 800a21e:	bf00      	nop
 800a220:	e000      	b.n	800a224 <tcp_parseopt+0xd0>
            return;
 800a222:	bf00      	nop
      }
    }
  }
}
 800a224:	3710      	adds	r7, #16
 800a226:	46bd      	mov	sp, r7
 800a228:	bd80      	pop	{r7, pc}
 800a22a:	bf00      	nop
 800a22c:	08012b1c 	.word	0x08012b1c
 800a230:	08012f80 	.word	0x08012f80
 800a234:	08012b68 	.word	0x08012b68
 800a238:	20007c80 	.word	0x20007c80
 800a23c:	20007c88 	.word	0x20007c88

0800a240 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800a240:	b480      	push	{r7}
 800a242:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800a244:	4b05      	ldr	r3, [pc, #20]	; (800a25c <tcp_trigger_input_pcb_close+0x1c>)
 800a246:	781b      	ldrb	r3, [r3, #0]
 800a248:	f043 0310 	orr.w	r3, r3, #16
 800a24c:	b2da      	uxtb	r2, r3
 800a24e:	4b03      	ldr	r3, [pc, #12]	; (800a25c <tcp_trigger_input_pcb_close+0x1c>)
 800a250:	701a      	strb	r2, [r3, #0]
}
 800a252:	bf00      	nop
 800a254:	46bd      	mov	sp, r7
 800a256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25a:	4770      	bx	lr
 800a25c:	20007c99 	.word	0x20007c99

0800a260 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800a260:	b580      	push	{r7, lr}
 800a262:	b084      	sub	sp, #16
 800a264:	af00      	add	r7, sp, #0
 800a266:	60f8      	str	r0, [r7, #12]
 800a268:	60b9      	str	r1, [r7, #8]
 800a26a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d00a      	beq.n	800a288 <tcp_route+0x28>
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	7a1b      	ldrb	r3, [r3, #8]
 800a276:	2b00      	cmp	r3, #0
 800a278:	d006      	beq.n	800a288 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	7a1b      	ldrb	r3, [r3, #8]
 800a27e:	4618      	mov	r0, r3
 800a280:	f7fb fb6a 	bl	8005958 <netif_get_by_index>
 800a284:	4603      	mov	r3, r0
 800a286:	e003      	b.n	800a290 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800a288:	6878      	ldr	r0, [r7, #4]
 800a28a:	f004 fff9 	bl	800f280 <ip4_route>
 800a28e:	4603      	mov	r3, r0
  }
}
 800a290:	4618      	mov	r0, r3
 800a292:	3710      	adds	r7, #16
 800a294:	46bd      	mov	sp, r7
 800a296:	bd80      	pop	{r7, pc}

0800a298 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800a298:	b590      	push	{r4, r7, lr}
 800a29a:	b087      	sub	sp, #28
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	60f8      	str	r0, [r7, #12]
 800a2a0:	60b9      	str	r1, [r7, #8]
 800a2a2:	603b      	str	r3, [r7, #0]
 800a2a4:	4613      	mov	r3, r2
 800a2a6:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d105      	bne.n	800a2ba <tcp_create_segment+0x22>
 800a2ae:	4b44      	ldr	r3, [pc, #272]	; (800a3c0 <tcp_create_segment+0x128>)
 800a2b0:	22a3      	movs	r2, #163	; 0xa3
 800a2b2:	4944      	ldr	r1, [pc, #272]	; (800a3c4 <tcp_create_segment+0x12c>)
 800a2b4:	4844      	ldr	r0, [pc, #272]	; (800a3c8 <tcp_create_segment+0x130>)
 800a2b6:	f006 fa37 	bl	8010728 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800a2ba:	68bb      	ldr	r3, [r7, #8]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d105      	bne.n	800a2cc <tcp_create_segment+0x34>
 800a2c0:	4b3f      	ldr	r3, [pc, #252]	; (800a3c0 <tcp_create_segment+0x128>)
 800a2c2:	22a4      	movs	r2, #164	; 0xa4
 800a2c4:	4941      	ldr	r1, [pc, #260]	; (800a3cc <tcp_create_segment+0x134>)
 800a2c6:	4840      	ldr	r0, [pc, #256]	; (800a3c8 <tcp_create_segment+0x130>)
 800a2c8:	f006 fa2e 	bl	8010728 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800a2cc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a2d0:	009b      	lsls	r3, r3, #2
 800a2d2:	b2db      	uxtb	r3, r3
 800a2d4:	f003 0304 	and.w	r3, r3, #4
 800a2d8:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800a2da:	2003      	movs	r0, #3
 800a2dc:	f7fa ffaa 	bl	8005234 <memp_malloc>
 800a2e0:	6138      	str	r0, [r7, #16]
 800a2e2:	693b      	ldr	r3, [r7, #16]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d104      	bne.n	800a2f2 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800a2e8:	68b8      	ldr	r0, [r7, #8]
 800a2ea:	f7fb fe75 	bl	8005fd8 <pbuf_free>
    return NULL;
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	e061      	b.n	800a3b6 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800a2f2:	693b      	ldr	r3, [r7, #16]
 800a2f4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800a2f8:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800a2fa:	693b      	ldr	r3, [r7, #16]
 800a2fc:	2200      	movs	r2, #0
 800a2fe:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800a300:	693b      	ldr	r3, [r7, #16]
 800a302:	68ba      	ldr	r2, [r7, #8]
 800a304:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800a306:	68bb      	ldr	r3, [r7, #8]
 800a308:	891a      	ldrh	r2, [r3, #8]
 800a30a:	7dfb      	ldrb	r3, [r7, #23]
 800a30c:	b29b      	uxth	r3, r3
 800a30e:	429a      	cmp	r2, r3
 800a310:	d205      	bcs.n	800a31e <tcp_create_segment+0x86>
 800a312:	4b2b      	ldr	r3, [pc, #172]	; (800a3c0 <tcp_create_segment+0x128>)
 800a314:	22b0      	movs	r2, #176	; 0xb0
 800a316:	492e      	ldr	r1, [pc, #184]	; (800a3d0 <tcp_create_segment+0x138>)
 800a318:	482b      	ldr	r0, [pc, #172]	; (800a3c8 <tcp_create_segment+0x130>)
 800a31a:	f006 fa05 	bl	8010728 <iprintf>
  seg->len = p->tot_len - optlen;
 800a31e:	68bb      	ldr	r3, [r7, #8]
 800a320:	891a      	ldrh	r2, [r3, #8]
 800a322:	7dfb      	ldrb	r3, [r7, #23]
 800a324:	b29b      	uxth	r3, r3
 800a326:	1ad3      	subs	r3, r2, r3
 800a328:	b29a      	uxth	r2, r3
 800a32a:	693b      	ldr	r3, [r7, #16]
 800a32c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800a32e:	2114      	movs	r1, #20
 800a330:	68b8      	ldr	r0, [r7, #8]
 800a332:	f7fb fdbb 	bl	8005eac <pbuf_add_header>
 800a336:	4603      	mov	r3, r0
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d004      	beq.n	800a346 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800a33c:	6938      	ldr	r0, [r7, #16]
 800a33e:	f7fd f8ce 	bl	80074de <tcp_seg_free>
    return NULL;
 800a342:	2300      	movs	r3, #0
 800a344:	e037      	b.n	800a3b6 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800a346:	693b      	ldr	r3, [r7, #16]
 800a348:	685b      	ldr	r3, [r3, #4]
 800a34a:	685a      	ldr	r2, [r3, #4]
 800a34c:	693b      	ldr	r3, [r7, #16]
 800a34e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	8ada      	ldrh	r2, [r3, #22]
 800a354:	693b      	ldr	r3, [r7, #16]
 800a356:	68dc      	ldr	r4, [r3, #12]
 800a358:	4610      	mov	r0, r2
 800a35a:	f7fa fa3b 	bl	80047d4 <lwip_htons>
 800a35e:	4603      	mov	r3, r0
 800a360:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	8b1a      	ldrh	r2, [r3, #24]
 800a366:	693b      	ldr	r3, [r7, #16]
 800a368:	68dc      	ldr	r4, [r3, #12]
 800a36a:	4610      	mov	r0, r2
 800a36c:	f7fa fa32 	bl	80047d4 <lwip_htons>
 800a370:	4603      	mov	r3, r0
 800a372:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800a374:	693b      	ldr	r3, [r7, #16]
 800a376:	68dc      	ldr	r4, [r3, #12]
 800a378:	6838      	ldr	r0, [r7, #0]
 800a37a:	f7fa fa40 	bl	80047fe <lwip_htonl>
 800a37e:	4603      	mov	r3, r0
 800a380:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800a382:	7dfb      	ldrb	r3, [r7, #23]
 800a384:	089b      	lsrs	r3, r3, #2
 800a386:	b2db      	uxtb	r3, r3
 800a388:	b29b      	uxth	r3, r3
 800a38a:	3305      	adds	r3, #5
 800a38c:	b29b      	uxth	r3, r3
 800a38e:	031b      	lsls	r3, r3, #12
 800a390:	b29a      	uxth	r2, r3
 800a392:	79fb      	ldrb	r3, [r7, #7]
 800a394:	b29b      	uxth	r3, r3
 800a396:	4313      	orrs	r3, r2
 800a398:	b29a      	uxth	r2, r3
 800a39a:	693b      	ldr	r3, [r7, #16]
 800a39c:	68dc      	ldr	r4, [r3, #12]
 800a39e:	4610      	mov	r0, r2
 800a3a0:	f7fa fa18 	bl	80047d4 <lwip_htons>
 800a3a4:	4603      	mov	r3, r0
 800a3a6:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800a3a8:	693b      	ldr	r3, [r7, #16]
 800a3aa:	68db      	ldr	r3, [r3, #12]
 800a3ac:	2200      	movs	r2, #0
 800a3ae:	749a      	strb	r2, [r3, #18]
 800a3b0:	2200      	movs	r2, #0
 800a3b2:	74da      	strb	r2, [r3, #19]
  return seg;
 800a3b4:	693b      	ldr	r3, [r7, #16]
}
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	371c      	adds	r7, #28
 800a3ba:	46bd      	mov	sp, r7
 800a3bc:	bd90      	pop	{r4, r7, pc}
 800a3be:	bf00      	nop
 800a3c0:	08012f9c 	.word	0x08012f9c
 800a3c4:	08012fd0 	.word	0x08012fd0
 800a3c8:	08012ff0 	.word	0x08012ff0
 800a3cc:	08013018 	.word	0x08013018
 800a3d0:	0801303c 	.word	0x0801303c

0800a3d4 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800a3d4:	b590      	push	{r4, r7, lr}
 800a3d6:	b08b      	sub	sp, #44	; 0x2c
 800a3d8:	af02      	add	r7, sp, #8
 800a3da:	6078      	str	r0, [r7, #4]
 800a3dc:	460b      	mov	r3, r1
 800a3de:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	61fb      	str	r3, [r7, #28]
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d106      	bne.n	800a400 <tcp_split_unsent_seg+0x2c>
 800a3f2:	4b95      	ldr	r3, [pc, #596]	; (800a648 <tcp_split_unsent_seg+0x274>)
 800a3f4:	f240 324b 	movw	r2, #843	; 0x34b
 800a3f8:	4994      	ldr	r1, [pc, #592]	; (800a64c <tcp_split_unsent_seg+0x278>)
 800a3fa:	4895      	ldr	r0, [pc, #596]	; (800a650 <tcp_split_unsent_seg+0x27c>)
 800a3fc:	f006 f994 	bl	8010728 <iprintf>

  useg = pcb->unsent;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a404:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800a406:	697b      	ldr	r3, [r7, #20]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d102      	bne.n	800a412 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800a40c:	f04f 33ff 	mov.w	r3, #4294967295
 800a410:	e116      	b.n	800a640 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800a412:	887b      	ldrh	r3, [r7, #2]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d109      	bne.n	800a42c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800a418:	4b8b      	ldr	r3, [pc, #556]	; (800a648 <tcp_split_unsent_seg+0x274>)
 800a41a:	f240 3253 	movw	r2, #851	; 0x353
 800a41e:	498d      	ldr	r1, [pc, #564]	; (800a654 <tcp_split_unsent_seg+0x280>)
 800a420:	488b      	ldr	r0, [pc, #556]	; (800a650 <tcp_split_unsent_seg+0x27c>)
 800a422:	f006 f981 	bl	8010728 <iprintf>
    return ERR_VAL;
 800a426:	f06f 0305 	mvn.w	r3, #5
 800a42a:	e109      	b.n	800a640 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800a42c:	697b      	ldr	r3, [r7, #20]
 800a42e:	891b      	ldrh	r3, [r3, #8]
 800a430:	887a      	ldrh	r2, [r7, #2]
 800a432:	429a      	cmp	r2, r3
 800a434:	d301      	bcc.n	800a43a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800a436:	2300      	movs	r3, #0
 800a438:	e102      	b.n	800a640 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a43e:	887a      	ldrh	r2, [r7, #2]
 800a440:	429a      	cmp	r2, r3
 800a442:	d906      	bls.n	800a452 <tcp_split_unsent_seg+0x7e>
 800a444:	4b80      	ldr	r3, [pc, #512]	; (800a648 <tcp_split_unsent_seg+0x274>)
 800a446:	f240 325b 	movw	r2, #859	; 0x35b
 800a44a:	4983      	ldr	r1, [pc, #524]	; (800a658 <tcp_split_unsent_seg+0x284>)
 800a44c:	4880      	ldr	r0, [pc, #512]	; (800a650 <tcp_split_unsent_seg+0x27c>)
 800a44e:	f006 f96b 	bl	8010728 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800a452:	697b      	ldr	r3, [r7, #20]
 800a454:	891b      	ldrh	r3, [r3, #8]
 800a456:	2b00      	cmp	r3, #0
 800a458:	d106      	bne.n	800a468 <tcp_split_unsent_seg+0x94>
 800a45a:	4b7b      	ldr	r3, [pc, #492]	; (800a648 <tcp_split_unsent_seg+0x274>)
 800a45c:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800a460:	497e      	ldr	r1, [pc, #504]	; (800a65c <tcp_split_unsent_seg+0x288>)
 800a462:	487b      	ldr	r0, [pc, #492]	; (800a650 <tcp_split_unsent_seg+0x27c>)
 800a464:	f006 f960 	bl	8010728 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800a468:	697b      	ldr	r3, [r7, #20]
 800a46a:	7a9b      	ldrb	r3, [r3, #10]
 800a46c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800a46e:	7bfb      	ldrb	r3, [r7, #15]
 800a470:	009b      	lsls	r3, r3, #2
 800a472:	b2db      	uxtb	r3, r3
 800a474:	f003 0304 	and.w	r3, r3, #4
 800a478:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800a47a:	697b      	ldr	r3, [r7, #20]
 800a47c:	891a      	ldrh	r2, [r3, #8]
 800a47e:	887b      	ldrh	r3, [r7, #2]
 800a480:	1ad3      	subs	r3, r2, r3
 800a482:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800a484:	7bbb      	ldrb	r3, [r7, #14]
 800a486:	b29a      	uxth	r2, r3
 800a488:	89bb      	ldrh	r3, [r7, #12]
 800a48a:	4413      	add	r3, r2
 800a48c:	b29b      	uxth	r3, r3
 800a48e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800a492:	4619      	mov	r1, r3
 800a494:	2036      	movs	r0, #54	; 0x36
 800a496:	f7fb fabb 	bl	8005a10 <pbuf_alloc>
 800a49a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800a49c:	693b      	ldr	r3, [r7, #16]
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	f000 80b7 	beq.w	800a612 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800a4a4:	697b      	ldr	r3, [r7, #20]
 800a4a6:	685b      	ldr	r3, [r3, #4]
 800a4a8:	891a      	ldrh	r2, [r3, #8]
 800a4aa:	697b      	ldr	r3, [r7, #20]
 800a4ac:	891b      	ldrh	r3, [r3, #8]
 800a4ae:	1ad3      	subs	r3, r2, r3
 800a4b0:	b29a      	uxth	r2, r3
 800a4b2:	887b      	ldrh	r3, [r7, #2]
 800a4b4:	4413      	add	r3, r2
 800a4b6:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800a4b8:	697b      	ldr	r3, [r7, #20]
 800a4ba:	6858      	ldr	r0, [r3, #4]
 800a4bc:	693b      	ldr	r3, [r7, #16]
 800a4be:	685a      	ldr	r2, [r3, #4]
 800a4c0:	7bbb      	ldrb	r3, [r7, #14]
 800a4c2:	18d1      	adds	r1, r2, r3
 800a4c4:	897b      	ldrh	r3, [r7, #10]
 800a4c6:	89ba      	ldrh	r2, [r7, #12]
 800a4c8:	f7fb ff80 	bl	80063cc <pbuf_copy_partial>
 800a4cc:	4603      	mov	r3, r0
 800a4ce:	461a      	mov	r2, r3
 800a4d0:	89bb      	ldrh	r3, [r7, #12]
 800a4d2:	4293      	cmp	r3, r2
 800a4d4:	f040 809f 	bne.w	800a616 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800a4d8:	697b      	ldr	r3, [r7, #20]
 800a4da:	68db      	ldr	r3, [r3, #12]
 800a4dc:	899b      	ldrh	r3, [r3, #12]
 800a4de:	b29b      	uxth	r3, r3
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	f7fa f977 	bl	80047d4 <lwip_htons>
 800a4e6:	4603      	mov	r3, r0
 800a4e8:	b2db      	uxtb	r3, r3
 800a4ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a4ee:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800a4f4:	7efb      	ldrb	r3, [r7, #27]
 800a4f6:	f003 0308 	and.w	r3, r3, #8
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d007      	beq.n	800a50e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800a4fe:	7efb      	ldrb	r3, [r7, #27]
 800a500:	f023 0308 	bic.w	r3, r3, #8
 800a504:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800a506:	7ebb      	ldrb	r3, [r7, #26]
 800a508:	f043 0308 	orr.w	r3, r3, #8
 800a50c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800a50e:	7efb      	ldrb	r3, [r7, #27]
 800a510:	f003 0301 	and.w	r3, r3, #1
 800a514:	2b00      	cmp	r3, #0
 800a516:	d007      	beq.n	800a528 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800a518:	7efb      	ldrb	r3, [r7, #27]
 800a51a:	f023 0301 	bic.w	r3, r3, #1
 800a51e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800a520:	7ebb      	ldrb	r3, [r7, #26]
 800a522:	f043 0301 	orr.w	r3, r3, #1
 800a526:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800a528:	697b      	ldr	r3, [r7, #20]
 800a52a:	68db      	ldr	r3, [r3, #12]
 800a52c:	685b      	ldr	r3, [r3, #4]
 800a52e:	4618      	mov	r0, r3
 800a530:	f7fa f965 	bl	80047fe <lwip_htonl>
 800a534:	4602      	mov	r2, r0
 800a536:	887b      	ldrh	r3, [r7, #2]
 800a538:	18d1      	adds	r1, r2, r3
 800a53a:	7eba      	ldrb	r2, [r7, #26]
 800a53c:	7bfb      	ldrb	r3, [r7, #15]
 800a53e:	9300      	str	r3, [sp, #0]
 800a540:	460b      	mov	r3, r1
 800a542:	6939      	ldr	r1, [r7, #16]
 800a544:	6878      	ldr	r0, [r7, #4]
 800a546:	f7ff fea7 	bl	800a298 <tcp_create_segment>
 800a54a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800a54c:	69fb      	ldr	r3, [r7, #28]
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d063      	beq.n	800a61a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800a552:	697b      	ldr	r3, [r7, #20]
 800a554:	685b      	ldr	r3, [r3, #4]
 800a556:	4618      	mov	r0, r3
 800a558:	f7fb fdc6 	bl	80060e8 <pbuf_clen>
 800a55c:	4603      	mov	r3, r0
 800a55e:	461a      	mov	r2, r3
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a566:	1a9b      	subs	r3, r3, r2
 800a568:	b29a      	uxth	r2, r3
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800a570:	697b      	ldr	r3, [r7, #20]
 800a572:	6858      	ldr	r0, [r3, #4]
 800a574:	697b      	ldr	r3, [r7, #20]
 800a576:	685b      	ldr	r3, [r3, #4]
 800a578:	891a      	ldrh	r2, [r3, #8]
 800a57a:	89bb      	ldrh	r3, [r7, #12]
 800a57c:	1ad3      	subs	r3, r2, r3
 800a57e:	b29b      	uxth	r3, r3
 800a580:	4619      	mov	r1, r3
 800a582:	f7fb fba3 	bl	8005ccc <pbuf_realloc>
  useg->len -= remainder;
 800a586:	697b      	ldr	r3, [r7, #20]
 800a588:	891a      	ldrh	r2, [r3, #8]
 800a58a:	89bb      	ldrh	r3, [r7, #12]
 800a58c:	1ad3      	subs	r3, r2, r3
 800a58e:	b29a      	uxth	r2, r3
 800a590:	697b      	ldr	r3, [r7, #20]
 800a592:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800a594:	697b      	ldr	r3, [r7, #20]
 800a596:	68db      	ldr	r3, [r3, #12]
 800a598:	899b      	ldrh	r3, [r3, #12]
 800a59a:	b29c      	uxth	r4, r3
 800a59c:	7efb      	ldrb	r3, [r7, #27]
 800a59e:	b29b      	uxth	r3, r3
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	f7fa f917 	bl	80047d4 <lwip_htons>
 800a5a6:	4603      	mov	r3, r0
 800a5a8:	461a      	mov	r2, r3
 800a5aa:	697b      	ldr	r3, [r7, #20]
 800a5ac:	68db      	ldr	r3, [r3, #12]
 800a5ae:	4322      	orrs	r2, r4
 800a5b0:	b292      	uxth	r2, r2
 800a5b2:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800a5b4:	697b      	ldr	r3, [r7, #20]
 800a5b6:	685b      	ldr	r3, [r3, #4]
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	f7fb fd95 	bl	80060e8 <pbuf_clen>
 800a5be:	4603      	mov	r3, r0
 800a5c0:	461a      	mov	r2, r3
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a5c8:	4413      	add	r3, r2
 800a5ca:	b29a      	uxth	r2, r3
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800a5d2:	69fb      	ldr	r3, [r7, #28]
 800a5d4:	685b      	ldr	r3, [r3, #4]
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	f7fb fd86 	bl	80060e8 <pbuf_clen>
 800a5dc:	4603      	mov	r3, r0
 800a5de:	461a      	mov	r2, r3
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a5e6:	4413      	add	r3, r2
 800a5e8:	b29a      	uxth	r2, r3
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800a5f0:	697b      	ldr	r3, [r7, #20]
 800a5f2:	681a      	ldr	r2, [r3, #0]
 800a5f4:	69fb      	ldr	r3, [r7, #28]
 800a5f6:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800a5f8:	697b      	ldr	r3, [r7, #20]
 800a5fa:	69fa      	ldr	r2, [r7, #28]
 800a5fc:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800a5fe:	69fb      	ldr	r3, [r7, #28]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	2b00      	cmp	r3, #0
 800a604:	d103      	bne.n	800a60e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	2200      	movs	r2, #0
 800a60a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800a60e:	2300      	movs	r3, #0
 800a610:	e016      	b.n	800a640 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800a612:	bf00      	nop
 800a614:	e002      	b.n	800a61c <tcp_split_unsent_seg+0x248>
    goto memerr;
 800a616:	bf00      	nop
 800a618:	e000      	b.n	800a61c <tcp_split_unsent_seg+0x248>
    goto memerr;
 800a61a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800a61c:	69fb      	ldr	r3, [r7, #28]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d006      	beq.n	800a630 <tcp_split_unsent_seg+0x25c>
 800a622:	4b09      	ldr	r3, [pc, #36]	; (800a648 <tcp_split_unsent_seg+0x274>)
 800a624:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800a628:	490d      	ldr	r1, [pc, #52]	; (800a660 <tcp_split_unsent_seg+0x28c>)
 800a62a:	4809      	ldr	r0, [pc, #36]	; (800a650 <tcp_split_unsent_seg+0x27c>)
 800a62c:	f006 f87c 	bl	8010728 <iprintf>
  if (p != NULL) {
 800a630:	693b      	ldr	r3, [r7, #16]
 800a632:	2b00      	cmp	r3, #0
 800a634:	d002      	beq.n	800a63c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800a636:	6938      	ldr	r0, [r7, #16]
 800a638:	f7fb fcce 	bl	8005fd8 <pbuf_free>
  }

  return ERR_MEM;
 800a63c:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a640:	4618      	mov	r0, r3
 800a642:	3724      	adds	r7, #36	; 0x24
 800a644:	46bd      	mov	sp, r7
 800a646:	bd90      	pop	{r4, r7, pc}
 800a648:	08012f9c 	.word	0x08012f9c
 800a64c:	08013330 	.word	0x08013330
 800a650:	08012ff0 	.word	0x08012ff0
 800a654:	08013354 	.word	0x08013354
 800a658:	08013378 	.word	0x08013378
 800a65c:	08013388 	.word	0x08013388
 800a660:	08013398 	.word	0x08013398

0800a664 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800a664:	b590      	push	{r4, r7, lr}
 800a666:	b085      	sub	sp, #20
 800a668:	af00      	add	r7, sp, #0
 800a66a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d106      	bne.n	800a680 <tcp_send_fin+0x1c>
 800a672:	4b21      	ldr	r3, [pc, #132]	; (800a6f8 <tcp_send_fin+0x94>)
 800a674:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800a678:	4920      	ldr	r1, [pc, #128]	; (800a6fc <tcp_send_fin+0x98>)
 800a67a:	4821      	ldr	r0, [pc, #132]	; (800a700 <tcp_send_fin+0x9c>)
 800a67c:	f006 f854 	bl	8010728 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a684:	2b00      	cmp	r3, #0
 800a686:	d02e      	beq.n	800a6e6 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a68c:	60fb      	str	r3, [r7, #12]
 800a68e:	e002      	b.n	800a696 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d1f8      	bne.n	800a690 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	68db      	ldr	r3, [r3, #12]
 800a6a2:	899b      	ldrh	r3, [r3, #12]
 800a6a4:	b29b      	uxth	r3, r3
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	f7fa f894 	bl	80047d4 <lwip_htons>
 800a6ac:	4603      	mov	r3, r0
 800a6ae:	b2db      	uxtb	r3, r3
 800a6b0:	f003 0307 	and.w	r3, r3, #7
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d116      	bne.n	800a6e6 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	68db      	ldr	r3, [r3, #12]
 800a6bc:	899b      	ldrh	r3, [r3, #12]
 800a6be:	b29c      	uxth	r4, r3
 800a6c0:	2001      	movs	r0, #1
 800a6c2:	f7fa f887 	bl	80047d4 <lwip_htons>
 800a6c6:	4603      	mov	r3, r0
 800a6c8:	461a      	mov	r2, r3
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	68db      	ldr	r3, [r3, #12]
 800a6ce:	4322      	orrs	r2, r4
 800a6d0:	b292      	uxth	r2, r2
 800a6d2:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	8b5b      	ldrh	r3, [r3, #26]
 800a6d8:	f043 0320 	orr.w	r3, r3, #32
 800a6dc:	b29a      	uxth	r2, r3
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	e004      	b.n	800a6f0 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800a6e6:	2101      	movs	r1, #1
 800a6e8:	6878      	ldr	r0, [r7, #4]
 800a6ea:	f000 f80b 	bl	800a704 <tcp_enqueue_flags>
 800a6ee:	4603      	mov	r3, r0
}
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	3714      	adds	r7, #20
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	bd90      	pop	{r4, r7, pc}
 800a6f8:	08012f9c 	.word	0x08012f9c
 800a6fc:	080133a4 	.word	0x080133a4
 800a700:	08012ff0 	.word	0x08012ff0

0800a704 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800a704:	b580      	push	{r7, lr}
 800a706:	b08a      	sub	sp, #40	; 0x28
 800a708:	af02      	add	r7, sp, #8
 800a70a:	6078      	str	r0, [r7, #4]
 800a70c:	460b      	mov	r3, r1
 800a70e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800a710:	2300      	movs	r3, #0
 800a712:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800a714:	2300      	movs	r3, #0
 800a716:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800a718:	78fb      	ldrb	r3, [r7, #3]
 800a71a:	f003 0303 	and.w	r3, r3, #3
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d106      	bne.n	800a730 <tcp_enqueue_flags+0x2c>
 800a722:	4b67      	ldr	r3, [pc, #412]	; (800a8c0 <tcp_enqueue_flags+0x1bc>)
 800a724:	f240 4211 	movw	r2, #1041	; 0x411
 800a728:	4966      	ldr	r1, [pc, #408]	; (800a8c4 <tcp_enqueue_flags+0x1c0>)
 800a72a:	4867      	ldr	r0, [pc, #412]	; (800a8c8 <tcp_enqueue_flags+0x1c4>)
 800a72c:	f005 fffc 	bl	8010728 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	2b00      	cmp	r3, #0
 800a734:	d106      	bne.n	800a744 <tcp_enqueue_flags+0x40>
 800a736:	4b62      	ldr	r3, [pc, #392]	; (800a8c0 <tcp_enqueue_flags+0x1bc>)
 800a738:	f240 4213 	movw	r2, #1043	; 0x413
 800a73c:	4963      	ldr	r1, [pc, #396]	; (800a8cc <tcp_enqueue_flags+0x1c8>)
 800a73e:	4862      	ldr	r0, [pc, #392]	; (800a8c8 <tcp_enqueue_flags+0x1c4>)
 800a740:	f005 fff2 	bl	8010728 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800a744:	78fb      	ldrb	r3, [r7, #3]
 800a746:	f003 0302 	and.w	r3, r3, #2
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d001      	beq.n	800a752 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800a74e:	2301      	movs	r3, #1
 800a750:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800a752:	7ffb      	ldrb	r3, [r7, #31]
 800a754:	009b      	lsls	r3, r3, #2
 800a756:	b2db      	uxtb	r3, r3
 800a758:	f003 0304 	and.w	r3, r3, #4
 800a75c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800a75e:	7dfb      	ldrb	r3, [r7, #23]
 800a760:	b29b      	uxth	r3, r3
 800a762:	f44f 7220 	mov.w	r2, #640	; 0x280
 800a766:	4619      	mov	r1, r3
 800a768:	2036      	movs	r0, #54	; 0x36
 800a76a:	f7fb f951 	bl	8005a10 <pbuf_alloc>
 800a76e:	6138      	str	r0, [r7, #16]
 800a770:	693b      	ldr	r3, [r7, #16]
 800a772:	2b00      	cmp	r3, #0
 800a774:	d109      	bne.n	800a78a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	8b5b      	ldrh	r3, [r3, #26]
 800a77a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a77e:	b29a      	uxth	r2, r3
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800a784:	f04f 33ff 	mov.w	r3, #4294967295
 800a788:	e095      	b.n	800a8b6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800a78a:	693b      	ldr	r3, [r7, #16]
 800a78c:	895a      	ldrh	r2, [r3, #10]
 800a78e:	7dfb      	ldrb	r3, [r7, #23]
 800a790:	b29b      	uxth	r3, r3
 800a792:	429a      	cmp	r2, r3
 800a794:	d206      	bcs.n	800a7a4 <tcp_enqueue_flags+0xa0>
 800a796:	4b4a      	ldr	r3, [pc, #296]	; (800a8c0 <tcp_enqueue_flags+0x1bc>)
 800a798:	f240 4239 	movw	r2, #1081	; 0x439
 800a79c:	494c      	ldr	r1, [pc, #304]	; (800a8d0 <tcp_enqueue_flags+0x1cc>)
 800a79e:	484a      	ldr	r0, [pc, #296]	; (800a8c8 <tcp_enqueue_flags+0x1c4>)
 800a7a0:	f005 ffc2 	bl	8010728 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800a7a8:	78fa      	ldrb	r2, [r7, #3]
 800a7aa:	7ffb      	ldrb	r3, [r7, #31]
 800a7ac:	9300      	str	r3, [sp, #0]
 800a7ae:	460b      	mov	r3, r1
 800a7b0:	6939      	ldr	r1, [r7, #16]
 800a7b2:	6878      	ldr	r0, [r7, #4]
 800a7b4:	f7ff fd70 	bl	800a298 <tcp_create_segment>
 800a7b8:	60f8      	str	r0, [r7, #12]
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d109      	bne.n	800a7d4 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	8b5b      	ldrh	r3, [r3, #26]
 800a7c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a7c8:	b29a      	uxth	r2, r3
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800a7ce:	f04f 33ff 	mov.w	r3, #4294967295
 800a7d2:	e070      	b.n	800a8b6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	68db      	ldr	r3, [r3, #12]
 800a7d8:	f003 0303 	and.w	r3, r3, #3
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d006      	beq.n	800a7ee <tcp_enqueue_flags+0xea>
 800a7e0:	4b37      	ldr	r3, [pc, #220]	; (800a8c0 <tcp_enqueue_flags+0x1bc>)
 800a7e2:	f240 4242 	movw	r2, #1090	; 0x442
 800a7e6:	493b      	ldr	r1, [pc, #236]	; (800a8d4 <tcp_enqueue_flags+0x1d0>)
 800a7e8:	4837      	ldr	r0, [pc, #220]	; (800a8c8 <tcp_enqueue_flags+0x1c4>)
 800a7ea:	f005 ff9d 	bl	8010728 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	891b      	ldrh	r3, [r3, #8]
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d006      	beq.n	800a804 <tcp_enqueue_flags+0x100>
 800a7f6:	4b32      	ldr	r3, [pc, #200]	; (800a8c0 <tcp_enqueue_flags+0x1bc>)
 800a7f8:	f240 4243 	movw	r2, #1091	; 0x443
 800a7fc:	4936      	ldr	r1, [pc, #216]	; (800a8d8 <tcp_enqueue_flags+0x1d4>)
 800a7fe:	4832      	ldr	r0, [pc, #200]	; (800a8c8 <tcp_enqueue_flags+0x1c4>)
 800a800:	f005 ff92 	bl	8010728 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d103      	bne.n	800a814 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	68fa      	ldr	r2, [r7, #12]
 800a810:	66da      	str	r2, [r3, #108]	; 0x6c
 800a812:	e00d      	b.n	800a830 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a818:	61bb      	str	r3, [r7, #24]
 800a81a:	e002      	b.n	800a822 <tcp_enqueue_flags+0x11e>
 800a81c:	69bb      	ldr	r3, [r7, #24]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	61bb      	str	r3, [r7, #24]
 800a822:	69bb      	ldr	r3, [r7, #24]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	2b00      	cmp	r3, #0
 800a828:	d1f8      	bne.n	800a81c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800a82a:	69bb      	ldr	r3, [r7, #24]
 800a82c:	68fa      	ldr	r2, [r7, #12]
 800a82e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	2200      	movs	r2, #0
 800a834:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800a838:	78fb      	ldrb	r3, [r7, #3]
 800a83a:	f003 0302 	and.w	r3, r3, #2
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d104      	bne.n	800a84c <tcp_enqueue_flags+0x148>
 800a842:	78fb      	ldrb	r3, [r7, #3]
 800a844:	f003 0301 	and.w	r3, r3, #1
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d004      	beq.n	800a856 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a850:	1c5a      	adds	r2, r3, #1
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800a856:	78fb      	ldrb	r3, [r7, #3]
 800a858:	f003 0301 	and.w	r3, r3, #1
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d006      	beq.n	800a86e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	8b5b      	ldrh	r3, [r3, #26]
 800a864:	f043 0320 	orr.w	r3, r3, #32
 800a868:	b29a      	uxth	r2, r3
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	685b      	ldr	r3, [r3, #4]
 800a872:	4618      	mov	r0, r3
 800a874:	f7fb fc38 	bl	80060e8 <pbuf_clen>
 800a878:	4603      	mov	r3, r0
 800a87a:	461a      	mov	r2, r3
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a882:	4413      	add	r3, r2
 800a884:	b29a      	uxth	r2, r3
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a892:	2b00      	cmp	r3, #0
 800a894:	d00e      	beq.n	800a8b4 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d10a      	bne.n	800a8b4 <tcp_enqueue_flags+0x1b0>
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d106      	bne.n	800a8b4 <tcp_enqueue_flags+0x1b0>
 800a8a6:	4b06      	ldr	r3, [pc, #24]	; (800a8c0 <tcp_enqueue_flags+0x1bc>)
 800a8a8:	f240 4265 	movw	r2, #1125	; 0x465
 800a8ac:	490b      	ldr	r1, [pc, #44]	; (800a8dc <tcp_enqueue_flags+0x1d8>)
 800a8ae:	4806      	ldr	r0, [pc, #24]	; (800a8c8 <tcp_enqueue_flags+0x1c4>)
 800a8b0:	f005 ff3a 	bl	8010728 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800a8b4:	2300      	movs	r3, #0
}
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	3720      	adds	r7, #32
 800a8ba:	46bd      	mov	sp, r7
 800a8bc:	bd80      	pop	{r7, pc}
 800a8be:	bf00      	nop
 800a8c0:	08012f9c 	.word	0x08012f9c
 800a8c4:	080133c0 	.word	0x080133c0
 800a8c8:	08012ff0 	.word	0x08012ff0
 800a8cc:	08013418 	.word	0x08013418
 800a8d0:	08013438 	.word	0x08013438
 800a8d4:	08013474 	.word	0x08013474
 800a8d8:	0801348c 	.word	0x0801348c
 800a8dc:	080134b8 	.word	0x080134b8

0800a8e0 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800a8e0:	b5b0      	push	{r4, r5, r7, lr}
 800a8e2:	b08a      	sub	sp, #40	; 0x28
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d106      	bne.n	800a8fc <tcp_output+0x1c>
 800a8ee:	4b8a      	ldr	r3, [pc, #552]	; (800ab18 <tcp_output+0x238>)
 800a8f0:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800a8f4:	4989      	ldr	r1, [pc, #548]	; (800ab1c <tcp_output+0x23c>)
 800a8f6:	488a      	ldr	r0, [pc, #552]	; (800ab20 <tcp_output+0x240>)
 800a8f8:	f005 ff16 	bl	8010728 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	7d1b      	ldrb	r3, [r3, #20]
 800a900:	2b01      	cmp	r3, #1
 800a902:	d106      	bne.n	800a912 <tcp_output+0x32>
 800a904:	4b84      	ldr	r3, [pc, #528]	; (800ab18 <tcp_output+0x238>)
 800a906:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800a90a:	4986      	ldr	r1, [pc, #536]	; (800ab24 <tcp_output+0x244>)
 800a90c:	4884      	ldr	r0, [pc, #528]	; (800ab20 <tcp_output+0x240>)
 800a90e:	f005 ff0b 	bl	8010728 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800a912:	4b85      	ldr	r3, [pc, #532]	; (800ab28 <tcp_output+0x248>)
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	687a      	ldr	r2, [r7, #4]
 800a918:	429a      	cmp	r2, r3
 800a91a:	d101      	bne.n	800a920 <tcp_output+0x40>
    return ERR_OK;
 800a91c:	2300      	movs	r3, #0
 800a91e:	e1ce      	b.n	800acbe <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a92c:	4293      	cmp	r3, r2
 800a92e:	bf28      	it	cs
 800a930:	4613      	movcs	r3, r2
 800a932:	b29b      	uxth	r3, r3
 800a934:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a93a:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800a93c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d10b      	bne.n	800a95a <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	8b5b      	ldrh	r3, [r3, #26]
 800a946:	f003 0302 	and.w	r3, r3, #2
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	f000 81aa 	beq.w	800aca4 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800a950:	6878      	ldr	r0, [r7, #4]
 800a952:	f000 fdcb 	bl	800b4ec <tcp_send_empty_ack>
 800a956:	4603      	mov	r3, r0
 800a958:	e1b1      	b.n	800acbe <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800a95a:	6879      	ldr	r1, [r7, #4]
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	3304      	adds	r3, #4
 800a960:	461a      	mov	r2, r3
 800a962:	6878      	ldr	r0, [r7, #4]
 800a964:	f7ff fc7c 	bl	800a260 <tcp_route>
 800a968:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800a96a:	697b      	ldr	r3, [r7, #20]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d102      	bne.n	800a976 <tcp_output+0x96>
    return ERR_RTE;
 800a970:	f06f 0303 	mvn.w	r3, #3
 800a974:	e1a3      	b.n	800acbe <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d003      	beq.n	800a984 <tcp_output+0xa4>
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	2b00      	cmp	r3, #0
 800a982:	d111      	bne.n	800a9a8 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800a984:	697b      	ldr	r3, [r7, #20]
 800a986:	2b00      	cmp	r3, #0
 800a988:	d002      	beq.n	800a990 <tcp_output+0xb0>
 800a98a:	697b      	ldr	r3, [r7, #20]
 800a98c:	3304      	adds	r3, #4
 800a98e:	e000      	b.n	800a992 <tcp_output+0xb2>
 800a990:	2300      	movs	r3, #0
 800a992:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800a994:	693b      	ldr	r3, [r7, #16]
 800a996:	2b00      	cmp	r3, #0
 800a998:	d102      	bne.n	800a9a0 <tcp_output+0xc0>
      return ERR_RTE;
 800a99a:	f06f 0303 	mvn.w	r3, #3
 800a99e:	e18e      	b.n	800acbe <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800a9a0:	693b      	ldr	r3, [r7, #16]
 800a9a2:	681a      	ldr	r2, [r3, #0]
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800a9a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9aa:	68db      	ldr	r3, [r3, #12]
 800a9ac:	685b      	ldr	r3, [r3, #4]
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	f7f9 ff25 	bl	80047fe <lwip_htonl>
 800a9b4:	4602      	mov	r2, r0
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a9ba:	1ad3      	subs	r3, r2, r3
 800a9bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a9be:	8912      	ldrh	r2, [r2, #8]
 800a9c0:	4413      	add	r3, r2
 800a9c2:	69ba      	ldr	r2, [r7, #24]
 800a9c4:	429a      	cmp	r2, r3
 800a9c6:	d227      	bcs.n	800aa18 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a9ce:	461a      	mov	r2, r3
 800a9d0:	69bb      	ldr	r3, [r7, #24]
 800a9d2:	4293      	cmp	r3, r2
 800a9d4:	d114      	bne.n	800aa00 <tcp_output+0x120>
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d110      	bne.n	800aa00 <tcp_output+0x120>
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d10b      	bne.n	800aa00 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	2201      	movs	r2, #1
 800a9f4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	2200      	movs	r2, #0
 800a9fc:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	8b5b      	ldrh	r3, [r3, #26]
 800aa04:	f003 0302 	and.w	r3, r3, #2
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	f000 814d 	beq.w	800aca8 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800aa0e:	6878      	ldr	r0, [r7, #4]
 800aa10:	f000 fd6c 	bl	800b4ec <tcp_send_empty_ack>
 800aa14:	4603      	mov	r3, r0
 800aa16:	e152      	b.n	800acbe <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	2200      	movs	r2, #0
 800aa1c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa24:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800aa26:	6a3b      	ldr	r3, [r7, #32]
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	f000 811c 	beq.w	800ac66 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800aa2e:	e002      	b.n	800aa36 <tcp_output+0x156>
 800aa30:	6a3b      	ldr	r3, [r7, #32]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	623b      	str	r3, [r7, #32]
 800aa36:	6a3b      	ldr	r3, [r7, #32]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d1f8      	bne.n	800aa30 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800aa3e:	e112      	b.n	800ac66 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800aa40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa42:	68db      	ldr	r3, [r3, #12]
 800aa44:	899b      	ldrh	r3, [r3, #12]
 800aa46:	b29b      	uxth	r3, r3
 800aa48:	4618      	mov	r0, r3
 800aa4a:	f7f9 fec3 	bl	80047d4 <lwip_htons>
 800aa4e:	4603      	mov	r3, r0
 800aa50:	b2db      	uxtb	r3, r3
 800aa52:	f003 0304 	and.w	r3, r3, #4
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d006      	beq.n	800aa68 <tcp_output+0x188>
 800aa5a:	4b2f      	ldr	r3, [pc, #188]	; (800ab18 <tcp_output+0x238>)
 800aa5c:	f240 5236 	movw	r2, #1334	; 0x536
 800aa60:	4932      	ldr	r1, [pc, #200]	; (800ab2c <tcp_output+0x24c>)
 800aa62:	482f      	ldr	r0, [pc, #188]	; (800ab20 <tcp_output+0x240>)
 800aa64:	f005 fe60 	bl	8010728 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d01f      	beq.n	800aab0 <tcp_output+0x1d0>
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	8b5b      	ldrh	r3, [r3, #26]
 800aa74:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d119      	bne.n	800aab0 <tcp_output+0x1d0>
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d00b      	beq.n	800aa9c <tcp_output+0x1bc>
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d110      	bne.n	800aab0 <tcp_output+0x1d0>
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa92:	891a      	ldrh	r2, [r3, #8]
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800aa98:	429a      	cmp	r2, r3
 800aa9a:	d209      	bcs.n	800aab0 <tcp_output+0x1d0>
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d004      	beq.n	800aab0 <tcp_output+0x1d0>
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800aaac:	2b08      	cmp	r3, #8
 800aaae:	d901      	bls.n	800aab4 <tcp_output+0x1d4>
 800aab0:	2301      	movs	r3, #1
 800aab2:	e000      	b.n	800aab6 <tcp_output+0x1d6>
 800aab4:	2300      	movs	r3, #0
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d106      	bne.n	800aac8 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	8b5b      	ldrh	r3, [r3, #26]
 800aabe:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	f000 80e4 	beq.w	800ac90 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	7d1b      	ldrb	r3, [r3, #20]
 800aacc:	2b02      	cmp	r3, #2
 800aace:	d00d      	beq.n	800aaec <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800aad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aad2:	68db      	ldr	r3, [r3, #12]
 800aad4:	899b      	ldrh	r3, [r3, #12]
 800aad6:	b29c      	uxth	r4, r3
 800aad8:	2010      	movs	r0, #16
 800aada:	f7f9 fe7b 	bl	80047d4 <lwip_htons>
 800aade:	4603      	mov	r3, r0
 800aae0:	461a      	mov	r2, r3
 800aae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aae4:	68db      	ldr	r3, [r3, #12]
 800aae6:	4322      	orrs	r2, r4
 800aae8:	b292      	uxth	r2, r2
 800aaea:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800aaec:	697a      	ldr	r2, [r7, #20]
 800aaee:	6879      	ldr	r1, [r7, #4]
 800aaf0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aaf2:	f000 f909 	bl	800ad08 <tcp_output_segment>
 800aaf6:	4603      	mov	r3, r0
 800aaf8:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800aafa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d016      	beq.n	800ab30 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	8b5b      	ldrh	r3, [r3, #26]
 800ab06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab0a:	b29a      	uxth	r2, r3
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	835a      	strh	r2, [r3, #26]
      return err;
 800ab10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ab14:	e0d3      	b.n	800acbe <tcp_output+0x3de>
 800ab16:	bf00      	nop
 800ab18:	08012f9c 	.word	0x08012f9c
 800ab1c:	080134e0 	.word	0x080134e0
 800ab20:	08012ff0 	.word	0x08012ff0
 800ab24:	080134f8 	.word	0x080134f8
 800ab28:	20007ca0 	.word	0x20007ca0
 800ab2c:	08013520 	.word	0x08013520
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800ab30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab32:	681a      	ldr	r2, [r3, #0]
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	7d1b      	ldrb	r3, [r3, #20]
 800ab3c:	2b02      	cmp	r3, #2
 800ab3e:	d006      	beq.n	800ab4e <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	8b5b      	ldrh	r3, [r3, #26]
 800ab44:	f023 0303 	bic.w	r3, r3, #3
 800ab48:	b29a      	uxth	r2, r3
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800ab4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab50:	68db      	ldr	r3, [r3, #12]
 800ab52:	685b      	ldr	r3, [r3, #4]
 800ab54:	4618      	mov	r0, r3
 800ab56:	f7f9 fe52 	bl	80047fe <lwip_htonl>
 800ab5a:	4604      	mov	r4, r0
 800ab5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab5e:	891b      	ldrh	r3, [r3, #8]
 800ab60:	461d      	mov	r5, r3
 800ab62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab64:	68db      	ldr	r3, [r3, #12]
 800ab66:	899b      	ldrh	r3, [r3, #12]
 800ab68:	b29b      	uxth	r3, r3
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	f7f9 fe32 	bl	80047d4 <lwip_htons>
 800ab70:	4603      	mov	r3, r0
 800ab72:	b2db      	uxtb	r3, r3
 800ab74:	f003 0303 	and.w	r3, r3, #3
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d001      	beq.n	800ab80 <tcp_output+0x2a0>
 800ab7c:	2301      	movs	r3, #1
 800ab7e:	e000      	b.n	800ab82 <tcp_output+0x2a2>
 800ab80:	2300      	movs	r3, #0
 800ab82:	442b      	add	r3, r5
 800ab84:	4423      	add	r3, r4
 800ab86:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ab8c:	68bb      	ldr	r3, [r7, #8]
 800ab8e:	1ad3      	subs	r3, r2, r3
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	da02      	bge.n	800ab9a <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	68ba      	ldr	r2, [r7, #8]
 800ab98:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800ab9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab9c:	891b      	ldrh	r3, [r3, #8]
 800ab9e:	461c      	mov	r4, r3
 800aba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aba2:	68db      	ldr	r3, [r3, #12]
 800aba4:	899b      	ldrh	r3, [r3, #12]
 800aba6:	b29b      	uxth	r3, r3
 800aba8:	4618      	mov	r0, r3
 800abaa:	f7f9 fe13 	bl	80047d4 <lwip_htons>
 800abae:	4603      	mov	r3, r0
 800abb0:	b2db      	uxtb	r3, r3
 800abb2:	f003 0303 	and.w	r3, r3, #3
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d001      	beq.n	800abbe <tcp_output+0x2de>
 800abba:	2301      	movs	r3, #1
 800abbc:	e000      	b.n	800abc0 <tcp_output+0x2e0>
 800abbe:	2300      	movs	r3, #0
 800abc0:	4423      	add	r3, r4
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d049      	beq.n	800ac5a <tcp_output+0x37a>
      seg->next = NULL;
 800abc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abc8:	2200      	movs	r2, #0
 800abca:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d105      	bne.n	800abe0 <tcp_output+0x300>
        pcb->unacked = seg;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800abd8:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800abda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abdc:	623b      	str	r3, [r7, #32]
 800abde:	e03f      	b.n	800ac60 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800abe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abe2:	68db      	ldr	r3, [r3, #12]
 800abe4:	685b      	ldr	r3, [r3, #4]
 800abe6:	4618      	mov	r0, r3
 800abe8:	f7f9 fe09 	bl	80047fe <lwip_htonl>
 800abec:	4604      	mov	r4, r0
 800abee:	6a3b      	ldr	r3, [r7, #32]
 800abf0:	68db      	ldr	r3, [r3, #12]
 800abf2:	685b      	ldr	r3, [r3, #4]
 800abf4:	4618      	mov	r0, r3
 800abf6:	f7f9 fe02 	bl	80047fe <lwip_htonl>
 800abfa:	4603      	mov	r3, r0
 800abfc:	1ae3      	subs	r3, r4, r3
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	da24      	bge.n	800ac4c <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	3370      	adds	r3, #112	; 0x70
 800ac06:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800ac08:	e002      	b.n	800ac10 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800ac0a:	69fb      	ldr	r3, [r7, #28]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800ac10:	69fb      	ldr	r3, [r7, #28]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d011      	beq.n	800ac3c <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800ac18:	69fb      	ldr	r3, [r7, #28]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	68db      	ldr	r3, [r3, #12]
 800ac1e:	685b      	ldr	r3, [r3, #4]
 800ac20:	4618      	mov	r0, r3
 800ac22:	f7f9 fdec 	bl	80047fe <lwip_htonl>
 800ac26:	4604      	mov	r4, r0
 800ac28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac2a:	68db      	ldr	r3, [r3, #12]
 800ac2c:	685b      	ldr	r3, [r3, #4]
 800ac2e:	4618      	mov	r0, r3
 800ac30:	f7f9 fde5 	bl	80047fe <lwip_htonl>
 800ac34:	4603      	mov	r3, r0
 800ac36:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	dbe6      	blt.n	800ac0a <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800ac3c:	69fb      	ldr	r3, [r7, #28]
 800ac3e:	681a      	ldr	r2, [r3, #0]
 800ac40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac42:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800ac44:	69fb      	ldr	r3, [r7, #28]
 800ac46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac48:	601a      	str	r2, [r3, #0]
 800ac4a:	e009      	b.n	800ac60 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800ac4c:	6a3b      	ldr	r3, [r7, #32]
 800ac4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac50:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800ac52:	6a3b      	ldr	r3, [r7, #32]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	623b      	str	r3, [r7, #32]
 800ac58:	e002      	b.n	800ac60 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800ac5a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ac5c:	f7fc fc3f 	bl	80074de <tcp_seg_free>
    }
    seg = pcb->unsent;
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac64:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800ac66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d012      	beq.n	800ac92 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800ac6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac6e:	68db      	ldr	r3, [r3, #12]
 800ac70:	685b      	ldr	r3, [r3, #4]
 800ac72:	4618      	mov	r0, r3
 800ac74:	f7f9 fdc3 	bl	80047fe <lwip_htonl>
 800ac78:	4602      	mov	r2, r0
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac7e:	1ad3      	subs	r3, r2, r3
 800ac80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac82:	8912      	ldrh	r2, [r2, #8]
 800ac84:	4413      	add	r3, r2
  while (seg != NULL &&
 800ac86:	69ba      	ldr	r2, [r7, #24]
 800ac88:	429a      	cmp	r2, r3
 800ac8a:	f4bf aed9 	bcs.w	800aa40 <tcp_output+0x160>
 800ac8e:	e000      	b.n	800ac92 <tcp_output+0x3b2>
      break;
 800ac90:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d108      	bne.n	800acac <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	2200      	movs	r2, #0
 800ac9e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800aca2:	e004      	b.n	800acae <tcp_output+0x3ce>
    goto output_done;
 800aca4:	bf00      	nop
 800aca6:	e002      	b.n	800acae <tcp_output+0x3ce>
    goto output_done;
 800aca8:	bf00      	nop
 800acaa:	e000      	b.n	800acae <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800acac:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	8b5b      	ldrh	r3, [r3, #26]
 800acb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800acb6:	b29a      	uxth	r2, r3
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800acbc:	2300      	movs	r3, #0
}
 800acbe:	4618      	mov	r0, r3
 800acc0:	3728      	adds	r7, #40	; 0x28
 800acc2:	46bd      	mov	sp, r7
 800acc4:	bdb0      	pop	{r4, r5, r7, pc}
 800acc6:	bf00      	nop

0800acc8 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800acc8:	b580      	push	{r7, lr}
 800acca:	b082      	sub	sp, #8
 800accc:	af00      	add	r7, sp, #0
 800acce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d106      	bne.n	800ace4 <tcp_output_segment_busy+0x1c>
 800acd6:	4b09      	ldr	r3, [pc, #36]	; (800acfc <tcp_output_segment_busy+0x34>)
 800acd8:	f240 529a 	movw	r2, #1434	; 0x59a
 800acdc:	4908      	ldr	r1, [pc, #32]	; (800ad00 <tcp_output_segment_busy+0x38>)
 800acde:	4809      	ldr	r0, [pc, #36]	; (800ad04 <tcp_output_segment_busy+0x3c>)
 800ace0:	f005 fd22 	bl	8010728 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	685b      	ldr	r3, [r3, #4]
 800ace8:	7b9b      	ldrb	r3, [r3, #14]
 800acea:	2b01      	cmp	r3, #1
 800acec:	d001      	beq.n	800acf2 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800acee:	2301      	movs	r3, #1
 800acf0:	e000      	b.n	800acf4 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800acf2:	2300      	movs	r3, #0
}
 800acf4:	4618      	mov	r0, r3
 800acf6:	3708      	adds	r7, #8
 800acf8:	46bd      	mov	sp, r7
 800acfa:	bd80      	pop	{r7, pc}
 800acfc:	08012f9c 	.word	0x08012f9c
 800ad00:	08013538 	.word	0x08013538
 800ad04:	08012ff0 	.word	0x08012ff0

0800ad08 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800ad08:	b5b0      	push	{r4, r5, r7, lr}
 800ad0a:	b08c      	sub	sp, #48	; 0x30
 800ad0c:	af04      	add	r7, sp, #16
 800ad0e:	60f8      	str	r0, [r7, #12]
 800ad10:	60b9      	str	r1, [r7, #8]
 800ad12:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d106      	bne.n	800ad28 <tcp_output_segment+0x20>
 800ad1a:	4b63      	ldr	r3, [pc, #396]	; (800aea8 <tcp_output_segment+0x1a0>)
 800ad1c:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800ad20:	4962      	ldr	r1, [pc, #392]	; (800aeac <tcp_output_segment+0x1a4>)
 800ad22:	4863      	ldr	r0, [pc, #396]	; (800aeb0 <tcp_output_segment+0x1a8>)
 800ad24:	f005 fd00 	bl	8010728 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800ad28:	68bb      	ldr	r3, [r7, #8]
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d106      	bne.n	800ad3c <tcp_output_segment+0x34>
 800ad2e:	4b5e      	ldr	r3, [pc, #376]	; (800aea8 <tcp_output_segment+0x1a0>)
 800ad30:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800ad34:	495f      	ldr	r1, [pc, #380]	; (800aeb4 <tcp_output_segment+0x1ac>)
 800ad36:	485e      	ldr	r0, [pc, #376]	; (800aeb0 <tcp_output_segment+0x1a8>)
 800ad38:	f005 fcf6 	bl	8010728 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d106      	bne.n	800ad50 <tcp_output_segment+0x48>
 800ad42:	4b59      	ldr	r3, [pc, #356]	; (800aea8 <tcp_output_segment+0x1a0>)
 800ad44:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800ad48:	495b      	ldr	r1, [pc, #364]	; (800aeb8 <tcp_output_segment+0x1b0>)
 800ad4a:	4859      	ldr	r0, [pc, #356]	; (800aeb0 <tcp_output_segment+0x1a8>)
 800ad4c:	f005 fcec 	bl	8010728 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800ad50:	68f8      	ldr	r0, [r7, #12]
 800ad52:	f7ff ffb9 	bl	800acc8 <tcp_output_segment_busy>
 800ad56:	4603      	mov	r3, r0
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d001      	beq.n	800ad60 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	e09f      	b.n	800aea0 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800ad60:	68bb      	ldr	r3, [r7, #8]
 800ad62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	68dc      	ldr	r4, [r3, #12]
 800ad68:	4610      	mov	r0, r2
 800ad6a:	f7f9 fd48 	bl	80047fe <lwip_htonl>
 800ad6e:	4603      	mov	r3, r0
 800ad70:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800ad72:	68bb      	ldr	r3, [r7, #8]
 800ad74:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	68dc      	ldr	r4, [r3, #12]
 800ad7a:	4610      	mov	r0, r2
 800ad7c:	f7f9 fd2a 	bl	80047d4 <lwip_htons>
 800ad80:	4603      	mov	r3, r0
 800ad82:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800ad84:	68bb      	ldr	r3, [r7, #8]
 800ad86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad88:	68ba      	ldr	r2, [r7, #8]
 800ad8a:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800ad8c:	441a      	add	r2, r3
 800ad8e:	68bb      	ldr	r3, [r7, #8]
 800ad90:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	68db      	ldr	r3, [r3, #12]
 800ad96:	3314      	adds	r3, #20
 800ad98:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	7a9b      	ldrb	r3, [r3, #10]
 800ad9e:	f003 0301 	and.w	r3, r3, #1
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d015      	beq.n	800add2 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800ada6:	68bb      	ldr	r3, [r7, #8]
 800ada8:	3304      	adds	r3, #4
 800adaa:	461a      	mov	r2, r3
 800adac:	6879      	ldr	r1, [r7, #4]
 800adae:	f44f 7006 	mov.w	r0, #536	; 0x218
 800adb2:	f7fc fe8b 	bl	8007acc <tcp_eff_send_mss_netif>
 800adb6:	4603      	mov	r3, r0
 800adb8:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800adba:	8b7b      	ldrh	r3, [r7, #26]
 800adbc:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800adc0:	4618      	mov	r0, r3
 800adc2:	f7f9 fd1c 	bl	80047fe <lwip_htonl>
 800adc6:	4602      	mov	r2, r0
 800adc8:	69fb      	ldr	r3, [r7, #28]
 800adca:	601a      	str	r2, [r3, #0]
    opts += 1;
 800adcc:	69fb      	ldr	r3, [r7, #28]
 800adce:	3304      	adds	r3, #4
 800add0:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800add2:	68bb      	ldr	r3, [r7, #8]
 800add4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800add8:	2b00      	cmp	r3, #0
 800adda:	da02      	bge.n	800ade2 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800addc:	68bb      	ldr	r3, [r7, #8]
 800adde:	2200      	movs	r2, #0
 800ade0:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800ade2:	68bb      	ldr	r3, [r7, #8]
 800ade4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d10c      	bne.n	800ae04 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800adea:	4b34      	ldr	r3, [pc, #208]	; (800aebc <tcp_output_segment+0x1b4>)
 800adec:	681a      	ldr	r2, [r3, #0]
 800adee:	68bb      	ldr	r3, [r7, #8]
 800adf0:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	68db      	ldr	r3, [r3, #12]
 800adf6:	685b      	ldr	r3, [r3, #4]
 800adf8:	4618      	mov	r0, r3
 800adfa:	f7f9 fd00 	bl	80047fe <lwip_htonl>
 800adfe:	4602      	mov	r2, r0
 800ae00:	68bb      	ldr	r3, [r7, #8]
 800ae02:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	68da      	ldr	r2, [r3, #12]
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	685b      	ldr	r3, [r3, #4]
 800ae0c:	685b      	ldr	r3, [r3, #4]
 800ae0e:	1ad3      	subs	r3, r2, r3
 800ae10:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	685b      	ldr	r3, [r3, #4]
 800ae16:	8959      	ldrh	r1, [r3, #10]
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	685b      	ldr	r3, [r3, #4]
 800ae1c:	8b3a      	ldrh	r2, [r7, #24]
 800ae1e:	1a8a      	subs	r2, r1, r2
 800ae20:	b292      	uxth	r2, r2
 800ae22:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	685b      	ldr	r3, [r3, #4]
 800ae28:	8919      	ldrh	r1, [r3, #8]
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	685b      	ldr	r3, [r3, #4]
 800ae2e:	8b3a      	ldrh	r2, [r7, #24]
 800ae30:	1a8a      	subs	r2, r1, r2
 800ae32:	b292      	uxth	r2, r2
 800ae34:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	685b      	ldr	r3, [r3, #4]
 800ae3a:	68fa      	ldr	r2, [r7, #12]
 800ae3c:	68d2      	ldr	r2, [r2, #12]
 800ae3e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	68db      	ldr	r3, [r3, #12]
 800ae44:	2200      	movs	r2, #0
 800ae46:	741a      	strb	r2, [r3, #16]
 800ae48:	2200      	movs	r2, #0
 800ae4a:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	68db      	ldr	r3, [r3, #12]
 800ae50:	f103 0214 	add.w	r2, r3, #20
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	7a9b      	ldrb	r3, [r3, #10]
 800ae58:	009b      	lsls	r3, r3, #2
 800ae5a:	f003 0304 	and.w	r3, r3, #4
 800ae5e:	4413      	add	r3, r2
 800ae60:	69fa      	ldr	r2, [r7, #28]
 800ae62:	429a      	cmp	r2, r3
 800ae64:	d006      	beq.n	800ae74 <tcp_output_segment+0x16c>
 800ae66:	4b10      	ldr	r3, [pc, #64]	; (800aea8 <tcp_output_segment+0x1a0>)
 800ae68:	f240 621c 	movw	r2, #1564	; 0x61c
 800ae6c:	4914      	ldr	r1, [pc, #80]	; (800aec0 <tcp_output_segment+0x1b8>)
 800ae6e:	4810      	ldr	r0, [pc, #64]	; (800aeb0 <tcp_output_segment+0x1a8>)
 800ae70:	f005 fc5a 	bl	8010728 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	6858      	ldr	r0, [r3, #4]
 800ae78:	68b9      	ldr	r1, [r7, #8]
 800ae7a:	68bb      	ldr	r3, [r7, #8]
 800ae7c:	1d1c      	adds	r4, r3, #4
 800ae7e:	68bb      	ldr	r3, [r7, #8]
 800ae80:	7add      	ldrb	r5, [r3, #11]
 800ae82:	68bb      	ldr	r3, [r7, #8]
 800ae84:	7a9b      	ldrb	r3, [r3, #10]
 800ae86:	687a      	ldr	r2, [r7, #4]
 800ae88:	9202      	str	r2, [sp, #8]
 800ae8a:	2206      	movs	r2, #6
 800ae8c:	9201      	str	r2, [sp, #4]
 800ae8e:	9300      	str	r3, [sp, #0]
 800ae90:	462b      	mov	r3, r5
 800ae92:	4622      	mov	r2, r4
 800ae94:	f004 fbd0 	bl	800f638 <ip4_output_if>
 800ae98:	4603      	mov	r3, r0
 800ae9a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800ae9c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800aea0:	4618      	mov	r0, r3
 800aea2:	3720      	adds	r7, #32
 800aea4:	46bd      	mov	sp, r7
 800aea6:	bdb0      	pop	{r4, r5, r7, pc}
 800aea8:	08012f9c 	.word	0x08012f9c
 800aeac:	08013560 	.word	0x08013560
 800aeb0:	08012ff0 	.word	0x08012ff0
 800aeb4:	08013580 	.word	0x08013580
 800aeb8:	080135a0 	.word	0x080135a0
 800aebc:	20007c54 	.word	0x20007c54
 800aec0:	080135c4 	.word	0x080135c4

0800aec4 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800aec4:	b5b0      	push	{r4, r5, r7, lr}
 800aec6:	b084      	sub	sp, #16
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d106      	bne.n	800aee0 <tcp_rexmit_rto_prepare+0x1c>
 800aed2:	4b31      	ldr	r3, [pc, #196]	; (800af98 <tcp_rexmit_rto_prepare+0xd4>)
 800aed4:	f240 6263 	movw	r2, #1635	; 0x663
 800aed8:	4930      	ldr	r1, [pc, #192]	; (800af9c <tcp_rexmit_rto_prepare+0xd8>)
 800aeda:	4831      	ldr	r0, [pc, #196]	; (800afa0 <tcp_rexmit_rto_prepare+0xdc>)
 800aedc:	f005 fc24 	bl	8010728 <iprintf>

  if (pcb->unacked == NULL) {
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d102      	bne.n	800aeee <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800aee8:	f06f 0305 	mvn.w	r3, #5
 800aeec:	e050      	b.n	800af90 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aef2:	60fb      	str	r3, [r7, #12]
 800aef4:	e00b      	b.n	800af0e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800aef6:	68f8      	ldr	r0, [r7, #12]
 800aef8:	f7ff fee6 	bl	800acc8 <tcp_output_segment_busy>
 800aefc:	4603      	mov	r3, r0
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d002      	beq.n	800af08 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800af02:	f06f 0305 	mvn.w	r3, #5
 800af06:	e043      	b.n	800af90 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	60fb      	str	r3, [r7, #12]
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	2b00      	cmp	r3, #0
 800af14:	d1ef      	bne.n	800aef6 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800af16:	68f8      	ldr	r0, [r7, #12]
 800af18:	f7ff fed6 	bl	800acc8 <tcp_output_segment_busy>
 800af1c:	4603      	mov	r3, r0
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d002      	beq.n	800af28 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800af22:	f06f 0305 	mvn.w	r3, #5
 800af26:	e033      	b.n	800af90 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	2200      	movs	r2, #0
 800af3c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	8b5b      	ldrh	r3, [r3, #26]
 800af42:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800af46:	b29a      	uxth	r2, r3
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	68db      	ldr	r3, [r3, #12]
 800af50:	685b      	ldr	r3, [r3, #4]
 800af52:	4618      	mov	r0, r3
 800af54:	f7f9 fc53 	bl	80047fe <lwip_htonl>
 800af58:	4604      	mov	r4, r0
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	891b      	ldrh	r3, [r3, #8]
 800af5e:	461d      	mov	r5, r3
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	68db      	ldr	r3, [r3, #12]
 800af64:	899b      	ldrh	r3, [r3, #12]
 800af66:	b29b      	uxth	r3, r3
 800af68:	4618      	mov	r0, r3
 800af6a:	f7f9 fc33 	bl	80047d4 <lwip_htons>
 800af6e:	4603      	mov	r3, r0
 800af70:	b2db      	uxtb	r3, r3
 800af72:	f003 0303 	and.w	r3, r3, #3
 800af76:	2b00      	cmp	r3, #0
 800af78:	d001      	beq.n	800af7e <tcp_rexmit_rto_prepare+0xba>
 800af7a:	2301      	movs	r3, #1
 800af7c:	e000      	b.n	800af80 <tcp_rexmit_rto_prepare+0xbc>
 800af7e:	2300      	movs	r3, #0
 800af80:	442b      	add	r3, r5
 800af82:	18e2      	adds	r2, r4, r3
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	2200      	movs	r2, #0
 800af8c:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800af8e:	2300      	movs	r3, #0
}
 800af90:	4618      	mov	r0, r3
 800af92:	3710      	adds	r7, #16
 800af94:	46bd      	mov	sp, r7
 800af96:	bdb0      	pop	{r4, r5, r7, pc}
 800af98:	08012f9c 	.word	0x08012f9c
 800af9c:	080135d8 	.word	0x080135d8
 800afa0:	08012ff0 	.word	0x08012ff0

0800afa4 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800afa4:	b580      	push	{r7, lr}
 800afa6:	b082      	sub	sp, #8
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d106      	bne.n	800afc0 <tcp_rexmit_rto_commit+0x1c>
 800afb2:	4b0d      	ldr	r3, [pc, #52]	; (800afe8 <tcp_rexmit_rto_commit+0x44>)
 800afb4:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800afb8:	490c      	ldr	r1, [pc, #48]	; (800afec <tcp_rexmit_rto_commit+0x48>)
 800afba:	480d      	ldr	r0, [pc, #52]	; (800aff0 <tcp_rexmit_rto_commit+0x4c>)
 800afbc:	f005 fbb4 	bl	8010728 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800afc6:	2bff      	cmp	r3, #255	; 0xff
 800afc8:	d007      	beq.n	800afda <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800afd0:	3301      	adds	r3, #1
 800afd2:	b2da      	uxtb	r2, r3
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800afda:	6878      	ldr	r0, [r7, #4]
 800afdc:	f7ff fc80 	bl	800a8e0 <tcp_output>
}
 800afe0:	bf00      	nop
 800afe2:	3708      	adds	r7, #8
 800afe4:	46bd      	mov	sp, r7
 800afe6:	bd80      	pop	{r7, pc}
 800afe8:	08012f9c 	.word	0x08012f9c
 800afec:	080135fc 	.word	0x080135fc
 800aff0:	08012ff0 	.word	0x08012ff0

0800aff4 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800aff4:	b580      	push	{r7, lr}
 800aff6:	b082      	sub	sp, #8
 800aff8:	af00      	add	r7, sp, #0
 800affa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	2b00      	cmp	r3, #0
 800b000:	d106      	bne.n	800b010 <tcp_rexmit_rto+0x1c>
 800b002:	4b0a      	ldr	r3, [pc, #40]	; (800b02c <tcp_rexmit_rto+0x38>)
 800b004:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800b008:	4909      	ldr	r1, [pc, #36]	; (800b030 <tcp_rexmit_rto+0x3c>)
 800b00a:	480a      	ldr	r0, [pc, #40]	; (800b034 <tcp_rexmit_rto+0x40>)
 800b00c:	f005 fb8c 	bl	8010728 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800b010:	6878      	ldr	r0, [r7, #4]
 800b012:	f7ff ff57 	bl	800aec4 <tcp_rexmit_rto_prepare>
 800b016:	4603      	mov	r3, r0
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d102      	bne.n	800b022 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800b01c:	6878      	ldr	r0, [r7, #4]
 800b01e:	f7ff ffc1 	bl	800afa4 <tcp_rexmit_rto_commit>
  }
}
 800b022:	bf00      	nop
 800b024:	3708      	adds	r7, #8
 800b026:	46bd      	mov	sp, r7
 800b028:	bd80      	pop	{r7, pc}
 800b02a:	bf00      	nop
 800b02c:	08012f9c 	.word	0x08012f9c
 800b030:	08013620 	.word	0x08013620
 800b034:	08012ff0 	.word	0x08012ff0

0800b038 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800b038:	b590      	push	{r4, r7, lr}
 800b03a:	b085      	sub	sp, #20
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	2b00      	cmp	r3, #0
 800b044:	d106      	bne.n	800b054 <tcp_rexmit+0x1c>
 800b046:	4b2f      	ldr	r3, [pc, #188]	; (800b104 <tcp_rexmit+0xcc>)
 800b048:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800b04c:	492e      	ldr	r1, [pc, #184]	; (800b108 <tcp_rexmit+0xd0>)
 800b04e:	482f      	ldr	r0, [pc, #188]	; (800b10c <tcp_rexmit+0xd4>)
 800b050:	f005 fb6a 	bl	8010728 <iprintf>

  if (pcb->unacked == NULL) {
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d102      	bne.n	800b062 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800b05c:	f06f 0305 	mvn.w	r3, #5
 800b060:	e04c      	b.n	800b0fc <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b066:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800b068:	68b8      	ldr	r0, [r7, #8]
 800b06a:	f7ff fe2d 	bl	800acc8 <tcp_output_segment_busy>
 800b06e:	4603      	mov	r3, r0
 800b070:	2b00      	cmp	r3, #0
 800b072:	d002      	beq.n	800b07a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800b074:	f06f 0305 	mvn.w	r3, #5
 800b078:	e040      	b.n	800b0fc <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800b07a:	68bb      	ldr	r3, [r7, #8]
 800b07c:	681a      	ldr	r2, [r3, #0]
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	336c      	adds	r3, #108	; 0x6c
 800b086:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800b088:	e002      	b.n	800b090 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	2b00      	cmp	r3, #0
 800b096:	d011      	beq.n	800b0bc <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	68db      	ldr	r3, [r3, #12]
 800b09e:	685b      	ldr	r3, [r3, #4]
 800b0a0:	4618      	mov	r0, r3
 800b0a2:	f7f9 fbac 	bl	80047fe <lwip_htonl>
 800b0a6:	4604      	mov	r4, r0
 800b0a8:	68bb      	ldr	r3, [r7, #8]
 800b0aa:	68db      	ldr	r3, [r3, #12]
 800b0ac:	685b      	ldr	r3, [r3, #4]
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	f7f9 fba5 	bl	80047fe <lwip_htonl>
 800b0b4:	4603      	mov	r3, r0
 800b0b6:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	dbe6      	blt.n	800b08a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	681a      	ldr	r2, [r3, #0]
 800b0c0:	68bb      	ldr	r3, [r7, #8]
 800b0c2:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	68ba      	ldr	r2, [r7, #8]
 800b0c8:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800b0ca:	68bb      	ldr	r3, [r7, #8]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d103      	bne.n	800b0da <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	2200      	movs	r2, #0
 800b0d6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b0e0:	2bff      	cmp	r3, #255	; 0xff
 800b0e2:	d007      	beq.n	800b0f4 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b0ea:	3301      	adds	r3, #1
 800b0ec:	b2da      	uxtb	r2, r3
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	2200      	movs	r2, #0
 800b0f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800b0fa:	2300      	movs	r3, #0
}
 800b0fc:	4618      	mov	r0, r3
 800b0fe:	3714      	adds	r7, #20
 800b100:	46bd      	mov	sp, r7
 800b102:	bd90      	pop	{r4, r7, pc}
 800b104:	08012f9c 	.word	0x08012f9c
 800b108:	0801363c 	.word	0x0801363c
 800b10c:	08012ff0 	.word	0x08012ff0

0800b110 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800b110:	b580      	push	{r7, lr}
 800b112:	b082      	sub	sp, #8
 800b114:	af00      	add	r7, sp, #0
 800b116:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d106      	bne.n	800b12c <tcp_rexmit_fast+0x1c>
 800b11e:	4b2a      	ldr	r3, [pc, #168]	; (800b1c8 <tcp_rexmit_fast+0xb8>)
 800b120:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800b124:	4929      	ldr	r1, [pc, #164]	; (800b1cc <tcp_rexmit_fast+0xbc>)
 800b126:	482a      	ldr	r0, [pc, #168]	; (800b1d0 <tcp_rexmit_fast+0xc0>)
 800b128:	f005 fafe 	bl	8010728 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b130:	2b00      	cmp	r3, #0
 800b132:	d044      	beq.n	800b1be <tcp_rexmit_fast+0xae>
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	8b5b      	ldrh	r3, [r3, #26]
 800b138:	f003 0304 	and.w	r3, r3, #4
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d13e      	bne.n	800b1be <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800b140:	6878      	ldr	r0, [r7, #4]
 800b142:	f7ff ff79 	bl	800b038 <tcp_rexmit>
 800b146:	4603      	mov	r3, r0
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d138      	bne.n	800b1be <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b158:	4293      	cmp	r3, r2
 800b15a:	bf28      	it	cs
 800b15c:	4613      	movcs	r3, r2
 800b15e:	b29b      	uxth	r3, r3
 800b160:	0fda      	lsrs	r2, r3, #31
 800b162:	4413      	add	r3, r2
 800b164:	105b      	asrs	r3, r3, #1
 800b166:	b29a      	uxth	r2, r3
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800b174:	461a      	mov	r2, r3
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b17a:	005b      	lsls	r3, r3, #1
 800b17c:	429a      	cmp	r2, r3
 800b17e:	d206      	bcs.n	800b18e <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b184:	005b      	lsls	r3, r3, #1
 800b186:	b29a      	uxth	r2, r3
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b198:	4619      	mov	r1, r3
 800b19a:	0049      	lsls	r1, r1, #1
 800b19c:	440b      	add	r3, r1
 800b19e:	b29b      	uxth	r3, r3
 800b1a0:	4413      	add	r3, r2
 800b1a2:	b29a      	uxth	r2, r3
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	8b5b      	ldrh	r3, [r3, #26]
 800b1ae:	f043 0304 	orr.w	r3, r3, #4
 800b1b2:	b29a      	uxth	r2, r3
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	2200      	movs	r2, #0
 800b1bc:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800b1be:	bf00      	nop
 800b1c0:	3708      	adds	r7, #8
 800b1c2:	46bd      	mov	sp, r7
 800b1c4:	bd80      	pop	{r7, pc}
 800b1c6:	bf00      	nop
 800b1c8:	08012f9c 	.word	0x08012f9c
 800b1cc:	08013654 	.word	0x08013654
 800b1d0:	08012ff0 	.word	0x08012ff0

0800b1d4 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800b1d4:	b580      	push	{r7, lr}
 800b1d6:	b086      	sub	sp, #24
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	60f8      	str	r0, [r7, #12]
 800b1dc:	607b      	str	r3, [r7, #4]
 800b1de:	460b      	mov	r3, r1
 800b1e0:	817b      	strh	r3, [r7, #10]
 800b1e2:	4613      	mov	r3, r2
 800b1e4:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800b1e6:	897a      	ldrh	r2, [r7, #10]
 800b1e8:	893b      	ldrh	r3, [r7, #8]
 800b1ea:	4413      	add	r3, r2
 800b1ec:	b29b      	uxth	r3, r3
 800b1ee:	3314      	adds	r3, #20
 800b1f0:	b29b      	uxth	r3, r3
 800b1f2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b1f6:	4619      	mov	r1, r3
 800b1f8:	2022      	movs	r0, #34	; 0x22
 800b1fa:	f7fa fc09 	bl	8005a10 <pbuf_alloc>
 800b1fe:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800b200:	697b      	ldr	r3, [r7, #20]
 800b202:	2b00      	cmp	r3, #0
 800b204:	d04d      	beq.n	800b2a2 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800b206:	897b      	ldrh	r3, [r7, #10]
 800b208:	3313      	adds	r3, #19
 800b20a:	697a      	ldr	r2, [r7, #20]
 800b20c:	8952      	ldrh	r2, [r2, #10]
 800b20e:	4293      	cmp	r3, r2
 800b210:	db06      	blt.n	800b220 <tcp_output_alloc_header_common+0x4c>
 800b212:	4b26      	ldr	r3, [pc, #152]	; (800b2ac <tcp_output_alloc_header_common+0xd8>)
 800b214:	f240 7223 	movw	r2, #1827	; 0x723
 800b218:	4925      	ldr	r1, [pc, #148]	; (800b2b0 <tcp_output_alloc_header_common+0xdc>)
 800b21a:	4826      	ldr	r0, [pc, #152]	; (800b2b4 <tcp_output_alloc_header_common+0xe0>)
 800b21c:	f005 fa84 	bl	8010728 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800b220:	697b      	ldr	r3, [r7, #20]
 800b222:	685b      	ldr	r3, [r3, #4]
 800b224:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800b226:	8c3b      	ldrh	r3, [r7, #32]
 800b228:	4618      	mov	r0, r3
 800b22a:	f7f9 fad3 	bl	80047d4 <lwip_htons>
 800b22e:	4603      	mov	r3, r0
 800b230:	461a      	mov	r2, r3
 800b232:	693b      	ldr	r3, [r7, #16]
 800b234:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800b236:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b238:	4618      	mov	r0, r3
 800b23a:	f7f9 facb 	bl	80047d4 <lwip_htons>
 800b23e:	4603      	mov	r3, r0
 800b240:	461a      	mov	r2, r3
 800b242:	693b      	ldr	r3, [r7, #16]
 800b244:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800b246:	693b      	ldr	r3, [r7, #16]
 800b248:	687a      	ldr	r2, [r7, #4]
 800b24a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800b24c:	68f8      	ldr	r0, [r7, #12]
 800b24e:	f7f9 fad6 	bl	80047fe <lwip_htonl>
 800b252:	4602      	mov	r2, r0
 800b254:	693b      	ldr	r3, [r7, #16]
 800b256:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800b258:	897b      	ldrh	r3, [r7, #10]
 800b25a:	089b      	lsrs	r3, r3, #2
 800b25c:	b29b      	uxth	r3, r3
 800b25e:	3305      	adds	r3, #5
 800b260:	b29b      	uxth	r3, r3
 800b262:	031b      	lsls	r3, r3, #12
 800b264:	b29a      	uxth	r2, r3
 800b266:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b26a:	b29b      	uxth	r3, r3
 800b26c:	4313      	orrs	r3, r2
 800b26e:	b29b      	uxth	r3, r3
 800b270:	4618      	mov	r0, r3
 800b272:	f7f9 faaf 	bl	80047d4 <lwip_htons>
 800b276:	4603      	mov	r3, r0
 800b278:	461a      	mov	r2, r3
 800b27a:	693b      	ldr	r3, [r7, #16]
 800b27c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800b27e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b280:	4618      	mov	r0, r3
 800b282:	f7f9 faa7 	bl	80047d4 <lwip_htons>
 800b286:	4603      	mov	r3, r0
 800b288:	461a      	mov	r2, r3
 800b28a:	693b      	ldr	r3, [r7, #16]
 800b28c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800b28e:	693b      	ldr	r3, [r7, #16]
 800b290:	2200      	movs	r2, #0
 800b292:	741a      	strb	r2, [r3, #16]
 800b294:	2200      	movs	r2, #0
 800b296:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800b298:	693b      	ldr	r3, [r7, #16]
 800b29a:	2200      	movs	r2, #0
 800b29c:	749a      	strb	r2, [r3, #18]
 800b29e:	2200      	movs	r2, #0
 800b2a0:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800b2a2:	697b      	ldr	r3, [r7, #20]
}
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	3718      	adds	r7, #24
 800b2a8:	46bd      	mov	sp, r7
 800b2aa:	bd80      	pop	{r7, pc}
 800b2ac:	08012f9c 	.word	0x08012f9c
 800b2b0:	08013674 	.word	0x08013674
 800b2b4:	08012ff0 	.word	0x08012ff0

0800b2b8 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800b2b8:	b5b0      	push	{r4, r5, r7, lr}
 800b2ba:	b08a      	sub	sp, #40	; 0x28
 800b2bc:	af04      	add	r7, sp, #16
 800b2be:	60f8      	str	r0, [r7, #12]
 800b2c0:	607b      	str	r3, [r7, #4]
 800b2c2:	460b      	mov	r3, r1
 800b2c4:	817b      	strh	r3, [r7, #10]
 800b2c6:	4613      	mov	r3, r2
 800b2c8:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d106      	bne.n	800b2de <tcp_output_alloc_header+0x26>
 800b2d0:	4b15      	ldr	r3, [pc, #84]	; (800b328 <tcp_output_alloc_header+0x70>)
 800b2d2:	f240 7242 	movw	r2, #1858	; 0x742
 800b2d6:	4915      	ldr	r1, [pc, #84]	; (800b32c <tcp_output_alloc_header+0x74>)
 800b2d8:	4815      	ldr	r0, [pc, #84]	; (800b330 <tcp_output_alloc_header+0x78>)
 800b2da:	f005 fa25 	bl	8010728 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	8adb      	ldrh	r3, [r3, #22]
 800b2e6:	68fa      	ldr	r2, [r7, #12]
 800b2e8:	8b12      	ldrh	r2, [r2, #24]
 800b2ea:	68f9      	ldr	r1, [r7, #12]
 800b2ec:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800b2ee:	893d      	ldrh	r5, [r7, #8]
 800b2f0:	897c      	ldrh	r4, [r7, #10]
 800b2f2:	9103      	str	r1, [sp, #12]
 800b2f4:	2110      	movs	r1, #16
 800b2f6:	9102      	str	r1, [sp, #8]
 800b2f8:	9201      	str	r2, [sp, #4]
 800b2fa:	9300      	str	r3, [sp, #0]
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	462a      	mov	r2, r5
 800b300:	4621      	mov	r1, r4
 800b302:	f7ff ff67 	bl	800b1d4 <tcp_output_alloc_header_common>
 800b306:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800b308:	697b      	ldr	r3, [r7, #20]
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d006      	beq.n	800b31c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b312:	68fa      	ldr	r2, [r7, #12]
 800b314:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800b316:	441a      	add	r2, r3
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800b31c:	697b      	ldr	r3, [r7, #20]
}
 800b31e:	4618      	mov	r0, r3
 800b320:	3718      	adds	r7, #24
 800b322:	46bd      	mov	sp, r7
 800b324:	bdb0      	pop	{r4, r5, r7, pc}
 800b326:	bf00      	nop
 800b328:	08012f9c 	.word	0x08012f9c
 800b32c:	080136a4 	.word	0x080136a4
 800b330:	08012ff0 	.word	0x08012ff0

0800b334 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800b334:	b580      	push	{r7, lr}
 800b336:	b088      	sub	sp, #32
 800b338:	af00      	add	r7, sp, #0
 800b33a:	60f8      	str	r0, [r7, #12]
 800b33c:	60b9      	str	r1, [r7, #8]
 800b33e:	4611      	mov	r1, r2
 800b340:	461a      	mov	r2, r3
 800b342:	460b      	mov	r3, r1
 800b344:	71fb      	strb	r3, [r7, #7]
 800b346:	4613      	mov	r3, r2
 800b348:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800b34a:	2300      	movs	r3, #0
 800b34c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800b34e:	68bb      	ldr	r3, [r7, #8]
 800b350:	2b00      	cmp	r3, #0
 800b352:	d106      	bne.n	800b362 <tcp_output_fill_options+0x2e>
 800b354:	4b13      	ldr	r3, [pc, #76]	; (800b3a4 <tcp_output_fill_options+0x70>)
 800b356:	f240 7256 	movw	r2, #1878	; 0x756
 800b35a:	4913      	ldr	r1, [pc, #76]	; (800b3a8 <tcp_output_fill_options+0x74>)
 800b35c:	4813      	ldr	r0, [pc, #76]	; (800b3ac <tcp_output_fill_options+0x78>)
 800b35e:	f005 f9e3 	bl	8010728 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800b362:	68bb      	ldr	r3, [r7, #8]
 800b364:	685b      	ldr	r3, [r3, #4]
 800b366:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800b368:	69bb      	ldr	r3, [r7, #24]
 800b36a:	3314      	adds	r3, #20
 800b36c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800b36e:	69bb      	ldr	r3, [r7, #24]
 800b370:	f103 0214 	add.w	r2, r3, #20
 800b374:	8bfb      	ldrh	r3, [r7, #30]
 800b376:	009b      	lsls	r3, r3, #2
 800b378:	4619      	mov	r1, r3
 800b37a:	79fb      	ldrb	r3, [r7, #7]
 800b37c:	009b      	lsls	r3, r3, #2
 800b37e:	f003 0304 	and.w	r3, r3, #4
 800b382:	440b      	add	r3, r1
 800b384:	4413      	add	r3, r2
 800b386:	697a      	ldr	r2, [r7, #20]
 800b388:	429a      	cmp	r2, r3
 800b38a:	d006      	beq.n	800b39a <tcp_output_fill_options+0x66>
 800b38c:	4b05      	ldr	r3, [pc, #20]	; (800b3a4 <tcp_output_fill_options+0x70>)
 800b38e:	f240 7275 	movw	r2, #1909	; 0x775
 800b392:	4907      	ldr	r1, [pc, #28]	; (800b3b0 <tcp_output_fill_options+0x7c>)
 800b394:	4805      	ldr	r0, [pc, #20]	; (800b3ac <tcp_output_fill_options+0x78>)
 800b396:	f005 f9c7 	bl	8010728 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800b39a:	bf00      	nop
 800b39c:	3720      	adds	r7, #32
 800b39e:	46bd      	mov	sp, r7
 800b3a0:	bd80      	pop	{r7, pc}
 800b3a2:	bf00      	nop
 800b3a4:	08012f9c 	.word	0x08012f9c
 800b3a8:	080136cc 	.word	0x080136cc
 800b3ac:	08012ff0 	.word	0x08012ff0
 800b3b0:	080135c4 	.word	0x080135c4

0800b3b4 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800b3b4:	b580      	push	{r7, lr}
 800b3b6:	b08a      	sub	sp, #40	; 0x28
 800b3b8:	af04      	add	r7, sp, #16
 800b3ba:	60f8      	str	r0, [r7, #12]
 800b3bc:	60b9      	str	r1, [r7, #8]
 800b3be:	607a      	str	r2, [r7, #4]
 800b3c0:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800b3c2:	68bb      	ldr	r3, [r7, #8]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d106      	bne.n	800b3d6 <tcp_output_control_segment+0x22>
 800b3c8:	4b1c      	ldr	r3, [pc, #112]	; (800b43c <tcp_output_control_segment+0x88>)
 800b3ca:	f240 7287 	movw	r2, #1927	; 0x787
 800b3ce:	491c      	ldr	r1, [pc, #112]	; (800b440 <tcp_output_control_segment+0x8c>)
 800b3d0:	481c      	ldr	r0, [pc, #112]	; (800b444 <tcp_output_control_segment+0x90>)
 800b3d2:	f005 f9a9 	bl	8010728 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800b3d6:	683a      	ldr	r2, [r7, #0]
 800b3d8:	6879      	ldr	r1, [r7, #4]
 800b3da:	68f8      	ldr	r0, [r7, #12]
 800b3dc:	f7fe ff40 	bl	800a260 <tcp_route>
 800b3e0:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800b3e2:	693b      	ldr	r3, [r7, #16]
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d102      	bne.n	800b3ee <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800b3e8:	23fc      	movs	r3, #252	; 0xfc
 800b3ea:	75fb      	strb	r3, [r7, #23]
 800b3ec:	e01c      	b.n	800b428 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d006      	beq.n	800b402 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	7adb      	ldrb	r3, [r3, #11]
 800b3f8:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	7a9b      	ldrb	r3, [r3, #10]
 800b3fe:	757b      	strb	r3, [r7, #21]
 800b400:	e003      	b.n	800b40a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800b402:	23ff      	movs	r3, #255	; 0xff
 800b404:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800b406:	2300      	movs	r3, #0
 800b408:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800b40a:	7dba      	ldrb	r2, [r7, #22]
 800b40c:	693b      	ldr	r3, [r7, #16]
 800b40e:	9302      	str	r3, [sp, #8]
 800b410:	2306      	movs	r3, #6
 800b412:	9301      	str	r3, [sp, #4]
 800b414:	7d7b      	ldrb	r3, [r7, #21]
 800b416:	9300      	str	r3, [sp, #0]
 800b418:	4613      	mov	r3, r2
 800b41a:	683a      	ldr	r2, [r7, #0]
 800b41c:	6879      	ldr	r1, [r7, #4]
 800b41e:	68b8      	ldr	r0, [r7, #8]
 800b420:	f004 f90a 	bl	800f638 <ip4_output_if>
 800b424:	4603      	mov	r3, r0
 800b426:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800b428:	68b8      	ldr	r0, [r7, #8]
 800b42a:	f7fa fdd5 	bl	8005fd8 <pbuf_free>
  return err;
 800b42e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b432:	4618      	mov	r0, r3
 800b434:	3718      	adds	r7, #24
 800b436:	46bd      	mov	sp, r7
 800b438:	bd80      	pop	{r7, pc}
 800b43a:	bf00      	nop
 800b43c:	08012f9c 	.word	0x08012f9c
 800b440:	080136f4 	.word	0x080136f4
 800b444:	08012ff0 	.word	0x08012ff0

0800b448 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800b448:	b590      	push	{r4, r7, lr}
 800b44a:	b08b      	sub	sp, #44	; 0x2c
 800b44c:	af04      	add	r7, sp, #16
 800b44e:	60f8      	str	r0, [r7, #12]
 800b450:	60b9      	str	r1, [r7, #8]
 800b452:	607a      	str	r2, [r7, #4]
 800b454:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800b456:	683b      	ldr	r3, [r7, #0]
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d106      	bne.n	800b46a <tcp_rst+0x22>
 800b45c:	4b1f      	ldr	r3, [pc, #124]	; (800b4dc <tcp_rst+0x94>)
 800b45e:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800b462:	491f      	ldr	r1, [pc, #124]	; (800b4e0 <tcp_rst+0x98>)
 800b464:	481f      	ldr	r0, [pc, #124]	; (800b4e4 <tcp_rst+0x9c>)
 800b466:	f005 f95f 	bl	8010728 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800b46a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d106      	bne.n	800b47e <tcp_rst+0x36>
 800b470:	4b1a      	ldr	r3, [pc, #104]	; (800b4dc <tcp_rst+0x94>)
 800b472:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800b476:	491c      	ldr	r1, [pc, #112]	; (800b4e8 <tcp_rst+0xa0>)
 800b478:	481a      	ldr	r0, [pc, #104]	; (800b4e4 <tcp_rst+0x9c>)
 800b47a:	f005 f955 	bl	8010728 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800b47e:	2300      	movs	r3, #0
 800b480:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800b482:	f246 0308 	movw	r3, #24584	; 0x6008
 800b486:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800b488:	7dfb      	ldrb	r3, [r7, #23]
 800b48a:	b29c      	uxth	r4, r3
 800b48c:	68b8      	ldr	r0, [r7, #8]
 800b48e:	f7f9 f9b6 	bl	80047fe <lwip_htonl>
 800b492:	4602      	mov	r2, r0
 800b494:	8abb      	ldrh	r3, [r7, #20]
 800b496:	9303      	str	r3, [sp, #12]
 800b498:	2314      	movs	r3, #20
 800b49a:	9302      	str	r3, [sp, #8]
 800b49c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800b49e:	9301      	str	r3, [sp, #4]
 800b4a0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b4a2:	9300      	str	r3, [sp, #0]
 800b4a4:	4613      	mov	r3, r2
 800b4a6:	2200      	movs	r2, #0
 800b4a8:	4621      	mov	r1, r4
 800b4aa:	6878      	ldr	r0, [r7, #4]
 800b4ac:	f7ff fe92 	bl	800b1d4 <tcp_output_alloc_header_common>
 800b4b0:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800b4b2:	693b      	ldr	r3, [r7, #16]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d00c      	beq.n	800b4d2 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800b4b8:	7dfb      	ldrb	r3, [r7, #23]
 800b4ba:	2200      	movs	r2, #0
 800b4bc:	6939      	ldr	r1, [r7, #16]
 800b4be:	68f8      	ldr	r0, [r7, #12]
 800b4c0:	f7ff ff38 	bl	800b334 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800b4c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4c6:	683a      	ldr	r2, [r7, #0]
 800b4c8:	6939      	ldr	r1, [r7, #16]
 800b4ca:	68f8      	ldr	r0, [r7, #12]
 800b4cc:	f7ff ff72 	bl	800b3b4 <tcp_output_control_segment>
 800b4d0:	e000      	b.n	800b4d4 <tcp_rst+0x8c>
    return;
 800b4d2:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800b4d4:	371c      	adds	r7, #28
 800b4d6:	46bd      	mov	sp, r7
 800b4d8:	bd90      	pop	{r4, r7, pc}
 800b4da:	bf00      	nop
 800b4dc:	08012f9c 	.word	0x08012f9c
 800b4e0:	08013720 	.word	0x08013720
 800b4e4:	08012ff0 	.word	0x08012ff0
 800b4e8:	0801373c 	.word	0x0801373c

0800b4ec <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800b4ec:	b590      	push	{r4, r7, lr}
 800b4ee:	b087      	sub	sp, #28
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800b4f4:	2300      	movs	r3, #0
 800b4f6:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800b4f8:	2300      	movs	r3, #0
 800b4fa:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d106      	bne.n	800b510 <tcp_send_empty_ack+0x24>
 800b502:	4b28      	ldr	r3, [pc, #160]	; (800b5a4 <tcp_send_empty_ack+0xb8>)
 800b504:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800b508:	4927      	ldr	r1, [pc, #156]	; (800b5a8 <tcp_send_empty_ack+0xbc>)
 800b50a:	4828      	ldr	r0, [pc, #160]	; (800b5ac <tcp_send_empty_ack+0xc0>)
 800b50c:	f005 f90c 	bl	8010728 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800b510:	7dfb      	ldrb	r3, [r7, #23]
 800b512:	009b      	lsls	r3, r3, #2
 800b514:	b2db      	uxtb	r3, r3
 800b516:	f003 0304 	and.w	r3, r3, #4
 800b51a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800b51c:	7d7b      	ldrb	r3, [r7, #21]
 800b51e:	b29c      	uxth	r4, r3
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b524:	4618      	mov	r0, r3
 800b526:	f7f9 f96a 	bl	80047fe <lwip_htonl>
 800b52a:	4603      	mov	r3, r0
 800b52c:	2200      	movs	r2, #0
 800b52e:	4621      	mov	r1, r4
 800b530:	6878      	ldr	r0, [r7, #4]
 800b532:	f7ff fec1 	bl	800b2b8 <tcp_output_alloc_header>
 800b536:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800b538:	693b      	ldr	r3, [r7, #16]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d109      	bne.n	800b552 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	8b5b      	ldrh	r3, [r3, #26]
 800b542:	f043 0303 	orr.w	r3, r3, #3
 800b546:	b29a      	uxth	r2, r3
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800b54c:	f06f 0301 	mvn.w	r3, #1
 800b550:	e023      	b.n	800b59a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800b552:	7dbb      	ldrb	r3, [r7, #22]
 800b554:	7dfa      	ldrb	r2, [r7, #23]
 800b556:	6939      	ldr	r1, [r7, #16]
 800b558:	6878      	ldr	r0, [r7, #4]
 800b55a:	f7ff feeb 	bl	800b334 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800b55e:	687a      	ldr	r2, [r7, #4]
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	3304      	adds	r3, #4
 800b564:	6939      	ldr	r1, [r7, #16]
 800b566:	6878      	ldr	r0, [r7, #4]
 800b568:	f7ff ff24 	bl	800b3b4 <tcp_output_control_segment>
 800b56c:	4603      	mov	r3, r0
 800b56e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800b570:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b574:	2b00      	cmp	r3, #0
 800b576:	d007      	beq.n	800b588 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	8b5b      	ldrh	r3, [r3, #26]
 800b57c:	f043 0303 	orr.w	r3, r3, #3
 800b580:	b29a      	uxth	r2, r3
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	835a      	strh	r2, [r3, #26]
 800b586:	e006      	b.n	800b596 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	8b5b      	ldrh	r3, [r3, #26]
 800b58c:	f023 0303 	bic.w	r3, r3, #3
 800b590:	b29a      	uxth	r2, r3
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800b596:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b59a:	4618      	mov	r0, r3
 800b59c:	371c      	adds	r7, #28
 800b59e:	46bd      	mov	sp, r7
 800b5a0:	bd90      	pop	{r4, r7, pc}
 800b5a2:	bf00      	nop
 800b5a4:	08012f9c 	.word	0x08012f9c
 800b5a8:	08013758 	.word	0x08013758
 800b5ac:	08012ff0 	.word	0x08012ff0

0800b5b0 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800b5b0:	b590      	push	{r4, r7, lr}
 800b5b2:	b087      	sub	sp, #28
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800b5b8:	2300      	movs	r3, #0
 800b5ba:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d106      	bne.n	800b5d0 <tcp_keepalive+0x20>
 800b5c2:	4b18      	ldr	r3, [pc, #96]	; (800b624 <tcp_keepalive+0x74>)
 800b5c4:	f640 0224 	movw	r2, #2084	; 0x824
 800b5c8:	4917      	ldr	r1, [pc, #92]	; (800b628 <tcp_keepalive+0x78>)
 800b5ca:	4818      	ldr	r0, [pc, #96]	; (800b62c <tcp_keepalive+0x7c>)
 800b5cc:	f005 f8ac 	bl	8010728 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800b5d0:	7dfb      	ldrb	r3, [r7, #23]
 800b5d2:	b29c      	uxth	r4, r3
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b5d8:	3b01      	subs	r3, #1
 800b5da:	4618      	mov	r0, r3
 800b5dc:	f7f9 f90f 	bl	80047fe <lwip_htonl>
 800b5e0:	4603      	mov	r3, r0
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	4621      	mov	r1, r4
 800b5e6:	6878      	ldr	r0, [r7, #4]
 800b5e8:	f7ff fe66 	bl	800b2b8 <tcp_output_alloc_header>
 800b5ec:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800b5ee:	693b      	ldr	r3, [r7, #16]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d102      	bne.n	800b5fa <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800b5f4:	f04f 33ff 	mov.w	r3, #4294967295
 800b5f8:	e010      	b.n	800b61c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800b5fa:	7dfb      	ldrb	r3, [r7, #23]
 800b5fc:	2200      	movs	r2, #0
 800b5fe:	6939      	ldr	r1, [r7, #16]
 800b600:	6878      	ldr	r0, [r7, #4]
 800b602:	f7ff fe97 	bl	800b334 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800b606:	687a      	ldr	r2, [r7, #4]
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	3304      	adds	r3, #4
 800b60c:	6939      	ldr	r1, [r7, #16]
 800b60e:	6878      	ldr	r0, [r7, #4]
 800b610:	f7ff fed0 	bl	800b3b4 <tcp_output_control_segment>
 800b614:	4603      	mov	r3, r0
 800b616:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800b618:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b61c:	4618      	mov	r0, r3
 800b61e:	371c      	adds	r7, #28
 800b620:	46bd      	mov	sp, r7
 800b622:	bd90      	pop	{r4, r7, pc}
 800b624:	08012f9c 	.word	0x08012f9c
 800b628:	08013778 	.word	0x08013778
 800b62c:	08012ff0 	.word	0x08012ff0

0800b630 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800b630:	b590      	push	{r4, r7, lr}
 800b632:	b08b      	sub	sp, #44	; 0x2c
 800b634:	af00      	add	r7, sp, #0
 800b636:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800b638:	2300      	movs	r3, #0
 800b63a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	2b00      	cmp	r3, #0
 800b642:	d106      	bne.n	800b652 <tcp_zero_window_probe+0x22>
 800b644:	4b4c      	ldr	r3, [pc, #304]	; (800b778 <tcp_zero_window_probe+0x148>)
 800b646:	f640 024f 	movw	r2, #2127	; 0x84f
 800b64a:	494c      	ldr	r1, [pc, #304]	; (800b77c <tcp_zero_window_probe+0x14c>)
 800b64c:	484c      	ldr	r0, [pc, #304]	; (800b780 <tcp_zero_window_probe+0x150>)
 800b64e:	f005 f86b 	bl	8010728 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b656:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800b658:	6a3b      	ldr	r3, [r7, #32]
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d101      	bne.n	800b662 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800b65e:	2300      	movs	r3, #0
 800b660:	e086      	b.n	800b770 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800b668:	2bff      	cmp	r3, #255	; 0xff
 800b66a:	d007      	beq.n	800b67c <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800b672:	3301      	adds	r3, #1
 800b674:	b2da      	uxtb	r2, r3
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800b67c:	6a3b      	ldr	r3, [r7, #32]
 800b67e:	68db      	ldr	r3, [r3, #12]
 800b680:	899b      	ldrh	r3, [r3, #12]
 800b682:	b29b      	uxth	r3, r3
 800b684:	4618      	mov	r0, r3
 800b686:	f7f9 f8a5 	bl	80047d4 <lwip_htons>
 800b68a:	4603      	mov	r3, r0
 800b68c:	b2db      	uxtb	r3, r3
 800b68e:	f003 0301 	and.w	r3, r3, #1
 800b692:	2b00      	cmp	r3, #0
 800b694:	d005      	beq.n	800b6a2 <tcp_zero_window_probe+0x72>
 800b696:	6a3b      	ldr	r3, [r7, #32]
 800b698:	891b      	ldrh	r3, [r3, #8]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d101      	bne.n	800b6a2 <tcp_zero_window_probe+0x72>
 800b69e:	2301      	movs	r3, #1
 800b6a0:	e000      	b.n	800b6a4 <tcp_zero_window_probe+0x74>
 800b6a2:	2300      	movs	r3, #0
 800b6a4:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800b6a6:	7ffb      	ldrb	r3, [r7, #31]
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	bf0c      	ite	eq
 800b6ac:	2301      	moveq	r3, #1
 800b6ae:	2300      	movne	r3, #0
 800b6b0:	b2db      	uxtb	r3, r3
 800b6b2:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800b6b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b6b8:	b299      	uxth	r1, r3
 800b6ba:	6a3b      	ldr	r3, [r7, #32]
 800b6bc:	68db      	ldr	r3, [r3, #12]
 800b6be:	685b      	ldr	r3, [r3, #4]
 800b6c0:	8bba      	ldrh	r2, [r7, #28]
 800b6c2:	6878      	ldr	r0, [r7, #4]
 800b6c4:	f7ff fdf8 	bl	800b2b8 <tcp_output_alloc_header>
 800b6c8:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800b6ca:	69bb      	ldr	r3, [r7, #24]
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d102      	bne.n	800b6d6 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800b6d0:	f04f 33ff 	mov.w	r3, #4294967295
 800b6d4:	e04c      	b.n	800b770 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800b6d6:	69bb      	ldr	r3, [r7, #24]
 800b6d8:	685b      	ldr	r3, [r3, #4]
 800b6da:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800b6dc:	7ffb      	ldrb	r3, [r7, #31]
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d011      	beq.n	800b706 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800b6e2:	697b      	ldr	r3, [r7, #20]
 800b6e4:	899b      	ldrh	r3, [r3, #12]
 800b6e6:	b29b      	uxth	r3, r3
 800b6e8:	b21b      	sxth	r3, r3
 800b6ea:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b6ee:	b21c      	sxth	r4, r3
 800b6f0:	2011      	movs	r0, #17
 800b6f2:	f7f9 f86f 	bl	80047d4 <lwip_htons>
 800b6f6:	4603      	mov	r3, r0
 800b6f8:	b21b      	sxth	r3, r3
 800b6fa:	4323      	orrs	r3, r4
 800b6fc:	b21b      	sxth	r3, r3
 800b6fe:	b29a      	uxth	r2, r3
 800b700:	697b      	ldr	r3, [r7, #20]
 800b702:	819a      	strh	r2, [r3, #12]
 800b704:	e010      	b.n	800b728 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800b706:	69bb      	ldr	r3, [r7, #24]
 800b708:	685b      	ldr	r3, [r3, #4]
 800b70a:	3314      	adds	r3, #20
 800b70c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800b70e:	6a3b      	ldr	r3, [r7, #32]
 800b710:	6858      	ldr	r0, [r3, #4]
 800b712:	6a3b      	ldr	r3, [r7, #32]
 800b714:	685b      	ldr	r3, [r3, #4]
 800b716:	891a      	ldrh	r2, [r3, #8]
 800b718:	6a3b      	ldr	r3, [r7, #32]
 800b71a:	891b      	ldrh	r3, [r3, #8]
 800b71c:	1ad3      	subs	r3, r2, r3
 800b71e:	b29b      	uxth	r3, r3
 800b720:	2201      	movs	r2, #1
 800b722:	6939      	ldr	r1, [r7, #16]
 800b724:	f7fa fe52 	bl	80063cc <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800b728:	6a3b      	ldr	r3, [r7, #32]
 800b72a:	68db      	ldr	r3, [r3, #12]
 800b72c:	685b      	ldr	r3, [r3, #4]
 800b72e:	4618      	mov	r0, r3
 800b730:	f7f9 f865 	bl	80047fe <lwip_htonl>
 800b734:	4603      	mov	r3, r0
 800b736:	3301      	adds	r3, #1
 800b738:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	1ad3      	subs	r3, r2, r3
 800b742:	2b00      	cmp	r3, #0
 800b744:	da02      	bge.n	800b74c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	68fa      	ldr	r2, [r7, #12]
 800b74a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800b74c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b750:	2200      	movs	r2, #0
 800b752:	69b9      	ldr	r1, [r7, #24]
 800b754:	6878      	ldr	r0, [r7, #4]
 800b756:	f7ff fded 	bl	800b334 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800b75a:	687a      	ldr	r2, [r7, #4]
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	3304      	adds	r3, #4
 800b760:	69b9      	ldr	r1, [r7, #24]
 800b762:	6878      	ldr	r0, [r7, #4]
 800b764:	f7ff fe26 	bl	800b3b4 <tcp_output_control_segment>
 800b768:	4603      	mov	r3, r0
 800b76a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800b76c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800b770:	4618      	mov	r0, r3
 800b772:	372c      	adds	r7, #44	; 0x2c
 800b774:	46bd      	mov	sp, r7
 800b776:	bd90      	pop	{r4, r7, pc}
 800b778:	08012f9c 	.word	0x08012f9c
 800b77c:	08013794 	.word	0x08013794
 800b780:	08012ff0 	.word	0x08012ff0

0800b784 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800b784:	b580      	push	{r7, lr}
 800b786:	b082      	sub	sp, #8
 800b788:	af00      	add	r7, sp, #0
 800b78a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800b78c:	f7fa ff0c 	bl	80065a8 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800b790:	4b0a      	ldr	r3, [pc, #40]	; (800b7bc <tcpip_tcp_timer+0x38>)
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	2b00      	cmp	r3, #0
 800b796:	d103      	bne.n	800b7a0 <tcpip_tcp_timer+0x1c>
 800b798:	4b09      	ldr	r3, [pc, #36]	; (800b7c0 <tcpip_tcp_timer+0x3c>)
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d005      	beq.n	800b7ac <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800b7a0:	2200      	movs	r2, #0
 800b7a2:	4908      	ldr	r1, [pc, #32]	; (800b7c4 <tcpip_tcp_timer+0x40>)
 800b7a4:	20fa      	movs	r0, #250	; 0xfa
 800b7a6:	f000 f8f3 	bl	800b990 <sys_timeout>
 800b7aa:	e003      	b.n	800b7b4 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800b7ac:	4b06      	ldr	r3, [pc, #24]	; (800b7c8 <tcpip_tcp_timer+0x44>)
 800b7ae:	2200      	movs	r2, #0
 800b7b0:	601a      	str	r2, [r3, #0]
  }
}
 800b7b2:	bf00      	nop
 800b7b4:	bf00      	nop
 800b7b6:	3708      	adds	r7, #8
 800b7b8:	46bd      	mov	sp, r7
 800b7ba:	bd80      	pop	{r7, pc}
 800b7bc:	20007c60 	.word	0x20007c60
 800b7c0:	20007c64 	.word	0x20007c64
 800b7c4:	0800b785 	.word	0x0800b785
 800b7c8:	20007cac 	.word	0x20007cac

0800b7cc <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800b7cc:	b580      	push	{r7, lr}
 800b7ce:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800b7d0:	4b0a      	ldr	r3, [pc, #40]	; (800b7fc <tcp_timer_needed+0x30>)
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d10f      	bne.n	800b7f8 <tcp_timer_needed+0x2c>
 800b7d8:	4b09      	ldr	r3, [pc, #36]	; (800b800 <tcp_timer_needed+0x34>)
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d103      	bne.n	800b7e8 <tcp_timer_needed+0x1c>
 800b7e0:	4b08      	ldr	r3, [pc, #32]	; (800b804 <tcp_timer_needed+0x38>)
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d007      	beq.n	800b7f8 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800b7e8:	4b04      	ldr	r3, [pc, #16]	; (800b7fc <tcp_timer_needed+0x30>)
 800b7ea:	2201      	movs	r2, #1
 800b7ec:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800b7ee:	2200      	movs	r2, #0
 800b7f0:	4905      	ldr	r1, [pc, #20]	; (800b808 <tcp_timer_needed+0x3c>)
 800b7f2:	20fa      	movs	r0, #250	; 0xfa
 800b7f4:	f000 f8cc 	bl	800b990 <sys_timeout>
  }
}
 800b7f8:	bf00      	nop
 800b7fa:	bd80      	pop	{r7, pc}
 800b7fc:	20007cac 	.word	0x20007cac
 800b800:	20007c60 	.word	0x20007c60
 800b804:	20007c64 	.word	0x20007c64
 800b808:	0800b785 	.word	0x0800b785

0800b80c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800b80c:	b580      	push	{r7, lr}
 800b80e:	b086      	sub	sp, #24
 800b810:	af00      	add	r7, sp, #0
 800b812:	60f8      	str	r0, [r7, #12]
 800b814:	60b9      	str	r1, [r7, #8]
 800b816:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800b818:	2006      	movs	r0, #6
 800b81a:	f7f9 fd0b 	bl	8005234 <memp_malloc>
 800b81e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800b820:	693b      	ldr	r3, [r7, #16]
 800b822:	2b00      	cmp	r3, #0
 800b824:	d109      	bne.n	800b83a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800b826:	693b      	ldr	r3, [r7, #16]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d151      	bne.n	800b8d0 <sys_timeout_abs+0xc4>
 800b82c:	4b2a      	ldr	r3, [pc, #168]	; (800b8d8 <sys_timeout_abs+0xcc>)
 800b82e:	22be      	movs	r2, #190	; 0xbe
 800b830:	492a      	ldr	r1, [pc, #168]	; (800b8dc <sys_timeout_abs+0xd0>)
 800b832:	482b      	ldr	r0, [pc, #172]	; (800b8e0 <sys_timeout_abs+0xd4>)
 800b834:	f004 ff78 	bl	8010728 <iprintf>
    return;
 800b838:	e04a      	b.n	800b8d0 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800b83a:	693b      	ldr	r3, [r7, #16]
 800b83c:	2200      	movs	r2, #0
 800b83e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800b840:	693b      	ldr	r3, [r7, #16]
 800b842:	68ba      	ldr	r2, [r7, #8]
 800b844:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800b846:	693b      	ldr	r3, [r7, #16]
 800b848:	687a      	ldr	r2, [r7, #4]
 800b84a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800b84c:	693b      	ldr	r3, [r7, #16]
 800b84e:	68fa      	ldr	r2, [r7, #12]
 800b850:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800b852:	4b24      	ldr	r3, [pc, #144]	; (800b8e4 <sys_timeout_abs+0xd8>)
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	2b00      	cmp	r3, #0
 800b858:	d103      	bne.n	800b862 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800b85a:	4a22      	ldr	r2, [pc, #136]	; (800b8e4 <sys_timeout_abs+0xd8>)
 800b85c:	693b      	ldr	r3, [r7, #16]
 800b85e:	6013      	str	r3, [r2, #0]
    return;
 800b860:	e037      	b.n	800b8d2 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800b862:	693b      	ldr	r3, [r7, #16]
 800b864:	685a      	ldr	r2, [r3, #4]
 800b866:	4b1f      	ldr	r3, [pc, #124]	; (800b8e4 <sys_timeout_abs+0xd8>)
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	685b      	ldr	r3, [r3, #4]
 800b86c:	1ad3      	subs	r3, r2, r3
 800b86e:	0fdb      	lsrs	r3, r3, #31
 800b870:	f003 0301 	and.w	r3, r3, #1
 800b874:	b2db      	uxtb	r3, r3
 800b876:	2b00      	cmp	r3, #0
 800b878:	d007      	beq.n	800b88a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800b87a:	4b1a      	ldr	r3, [pc, #104]	; (800b8e4 <sys_timeout_abs+0xd8>)
 800b87c:	681a      	ldr	r2, [r3, #0]
 800b87e:	693b      	ldr	r3, [r7, #16]
 800b880:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800b882:	4a18      	ldr	r2, [pc, #96]	; (800b8e4 <sys_timeout_abs+0xd8>)
 800b884:	693b      	ldr	r3, [r7, #16]
 800b886:	6013      	str	r3, [r2, #0]
 800b888:	e023      	b.n	800b8d2 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800b88a:	4b16      	ldr	r3, [pc, #88]	; (800b8e4 <sys_timeout_abs+0xd8>)
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	617b      	str	r3, [r7, #20]
 800b890:	e01a      	b.n	800b8c8 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800b892:	697b      	ldr	r3, [r7, #20]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	2b00      	cmp	r3, #0
 800b898:	d00b      	beq.n	800b8b2 <sys_timeout_abs+0xa6>
 800b89a:	693b      	ldr	r3, [r7, #16]
 800b89c:	685a      	ldr	r2, [r3, #4]
 800b89e:	697b      	ldr	r3, [r7, #20]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	685b      	ldr	r3, [r3, #4]
 800b8a4:	1ad3      	subs	r3, r2, r3
 800b8a6:	0fdb      	lsrs	r3, r3, #31
 800b8a8:	f003 0301 	and.w	r3, r3, #1
 800b8ac:	b2db      	uxtb	r3, r3
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d007      	beq.n	800b8c2 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800b8b2:	697b      	ldr	r3, [r7, #20]
 800b8b4:	681a      	ldr	r2, [r3, #0]
 800b8b6:	693b      	ldr	r3, [r7, #16]
 800b8b8:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800b8ba:	697b      	ldr	r3, [r7, #20]
 800b8bc:	693a      	ldr	r2, [r7, #16]
 800b8be:	601a      	str	r2, [r3, #0]
        break;
 800b8c0:	e007      	b.n	800b8d2 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800b8c2:	697b      	ldr	r3, [r7, #20]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	617b      	str	r3, [r7, #20]
 800b8c8:	697b      	ldr	r3, [r7, #20]
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d1e1      	bne.n	800b892 <sys_timeout_abs+0x86>
 800b8ce:	e000      	b.n	800b8d2 <sys_timeout_abs+0xc6>
    return;
 800b8d0:	bf00      	nop
      }
    }
  }
}
 800b8d2:	3718      	adds	r7, #24
 800b8d4:	46bd      	mov	sp, r7
 800b8d6:	bd80      	pop	{r7, pc}
 800b8d8:	080137b8 	.word	0x080137b8
 800b8dc:	080137ec 	.word	0x080137ec
 800b8e0:	0801382c 	.word	0x0801382c
 800b8e4:	20007ca4 	.word	0x20007ca4

0800b8e8 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800b8e8:	b580      	push	{r7, lr}
 800b8ea:	b086      	sub	sp, #24
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800b8f4:	697b      	ldr	r3, [r7, #20]
 800b8f6:	685b      	ldr	r3, [r3, #4]
 800b8f8:	4798      	blx	r3

  now = sys_now();
 800b8fa:	f7f8 fd93 	bl	8004424 <sys_now>
 800b8fe:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800b900:	697b      	ldr	r3, [r7, #20]
 800b902:	681a      	ldr	r2, [r3, #0]
 800b904:	4b0f      	ldr	r3, [pc, #60]	; (800b944 <lwip_cyclic_timer+0x5c>)
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	4413      	add	r3, r2
 800b90a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800b90c:	68fa      	ldr	r2, [r7, #12]
 800b90e:	693b      	ldr	r3, [r7, #16]
 800b910:	1ad3      	subs	r3, r2, r3
 800b912:	0fdb      	lsrs	r3, r3, #31
 800b914:	f003 0301 	and.w	r3, r3, #1
 800b918:	b2db      	uxtb	r3, r3
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d009      	beq.n	800b932 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800b91e:	697b      	ldr	r3, [r7, #20]
 800b920:	681a      	ldr	r2, [r3, #0]
 800b922:	693b      	ldr	r3, [r7, #16]
 800b924:	4413      	add	r3, r2
 800b926:	687a      	ldr	r2, [r7, #4]
 800b928:	4907      	ldr	r1, [pc, #28]	; (800b948 <lwip_cyclic_timer+0x60>)
 800b92a:	4618      	mov	r0, r3
 800b92c:	f7ff ff6e 	bl	800b80c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800b930:	e004      	b.n	800b93c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800b932:	687a      	ldr	r2, [r7, #4]
 800b934:	4904      	ldr	r1, [pc, #16]	; (800b948 <lwip_cyclic_timer+0x60>)
 800b936:	68f8      	ldr	r0, [r7, #12]
 800b938:	f7ff ff68 	bl	800b80c <sys_timeout_abs>
}
 800b93c:	bf00      	nop
 800b93e:	3718      	adds	r7, #24
 800b940:	46bd      	mov	sp, r7
 800b942:	bd80      	pop	{r7, pc}
 800b944:	20007ca8 	.word	0x20007ca8
 800b948:	0800b8e9 	.word	0x0800b8e9

0800b94c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800b94c:	b580      	push	{r7, lr}
 800b94e:	b082      	sub	sp, #8
 800b950:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800b952:	2301      	movs	r3, #1
 800b954:	607b      	str	r3, [r7, #4]
 800b956:	e00e      	b.n	800b976 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800b958:	4a0b      	ldr	r2, [pc, #44]	; (800b988 <sys_timeouts_init+0x3c>)
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	00db      	lsls	r3, r3, #3
 800b964:	4a08      	ldr	r2, [pc, #32]	; (800b988 <sys_timeouts_init+0x3c>)
 800b966:	4413      	add	r3, r2
 800b968:	461a      	mov	r2, r3
 800b96a:	4908      	ldr	r1, [pc, #32]	; (800b98c <sys_timeouts_init+0x40>)
 800b96c:	f000 f810 	bl	800b990 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	3301      	adds	r3, #1
 800b974:	607b      	str	r3, [r7, #4]
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	2b04      	cmp	r3, #4
 800b97a:	d9ed      	bls.n	800b958 <sys_timeouts_init+0xc>
  }
}
 800b97c:	bf00      	nop
 800b97e:	bf00      	nop
 800b980:	3708      	adds	r7, #8
 800b982:	46bd      	mov	sp, r7
 800b984:	bd80      	pop	{r7, pc}
 800b986:	bf00      	nop
 800b988:	08014744 	.word	0x08014744
 800b98c:	0800b8e9 	.word	0x0800b8e9

0800b990 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800b990:	b580      	push	{r7, lr}
 800b992:	b086      	sub	sp, #24
 800b994:	af00      	add	r7, sp, #0
 800b996:	60f8      	str	r0, [r7, #12]
 800b998:	60b9      	str	r1, [r7, #8]
 800b99a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b9a2:	d306      	bcc.n	800b9b2 <sys_timeout+0x22>
 800b9a4:	4b0a      	ldr	r3, [pc, #40]	; (800b9d0 <sys_timeout+0x40>)
 800b9a6:	f240 1229 	movw	r2, #297	; 0x129
 800b9aa:	490a      	ldr	r1, [pc, #40]	; (800b9d4 <sys_timeout+0x44>)
 800b9ac:	480a      	ldr	r0, [pc, #40]	; (800b9d8 <sys_timeout+0x48>)
 800b9ae:	f004 febb 	bl	8010728 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800b9b2:	f7f8 fd37 	bl	8004424 <sys_now>
 800b9b6:	4602      	mov	r2, r0
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	4413      	add	r3, r2
 800b9bc:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800b9be:	687a      	ldr	r2, [r7, #4]
 800b9c0:	68b9      	ldr	r1, [r7, #8]
 800b9c2:	6978      	ldr	r0, [r7, #20]
 800b9c4:	f7ff ff22 	bl	800b80c <sys_timeout_abs>
#endif
}
 800b9c8:	bf00      	nop
 800b9ca:	3718      	adds	r7, #24
 800b9cc:	46bd      	mov	sp, r7
 800b9ce:	bd80      	pop	{r7, pc}
 800b9d0:	080137b8 	.word	0x080137b8
 800b9d4:	08013854 	.word	0x08013854
 800b9d8:	0801382c 	.word	0x0801382c

0800b9dc <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800b9dc:	b580      	push	{r7, lr}
 800b9de:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800b9e0:	f004 ff30 	bl	8010844 <rand>
 800b9e4:	4603      	mov	r3, r0
 800b9e6:	b29b      	uxth	r3, r3
 800b9e8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800b9ec:	b29b      	uxth	r3, r3
 800b9ee:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800b9f2:	b29a      	uxth	r2, r3
 800b9f4:	4b01      	ldr	r3, [pc, #4]	; (800b9fc <udp_init+0x20>)
 800b9f6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800b9f8:	bf00      	nop
 800b9fa:	bd80      	pop	{r7, pc}
 800b9fc:	20000028 	.word	0x20000028

0800ba00 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800ba00:	b480      	push	{r7}
 800ba02:	b083      	sub	sp, #12
 800ba04:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800ba06:	2300      	movs	r3, #0
 800ba08:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800ba0a:	4b17      	ldr	r3, [pc, #92]	; (800ba68 <udp_new_port+0x68>)
 800ba0c:	881b      	ldrh	r3, [r3, #0]
 800ba0e:	1c5a      	adds	r2, r3, #1
 800ba10:	b291      	uxth	r1, r2
 800ba12:	4a15      	ldr	r2, [pc, #84]	; (800ba68 <udp_new_port+0x68>)
 800ba14:	8011      	strh	r1, [r2, #0]
 800ba16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ba1a:	4293      	cmp	r3, r2
 800ba1c:	d103      	bne.n	800ba26 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800ba1e:	4b12      	ldr	r3, [pc, #72]	; (800ba68 <udp_new_port+0x68>)
 800ba20:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800ba24:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ba26:	4b11      	ldr	r3, [pc, #68]	; (800ba6c <udp_new_port+0x6c>)
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	603b      	str	r3, [r7, #0]
 800ba2c:	e011      	b.n	800ba52 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800ba2e:	683b      	ldr	r3, [r7, #0]
 800ba30:	8a5a      	ldrh	r2, [r3, #18]
 800ba32:	4b0d      	ldr	r3, [pc, #52]	; (800ba68 <udp_new_port+0x68>)
 800ba34:	881b      	ldrh	r3, [r3, #0]
 800ba36:	429a      	cmp	r2, r3
 800ba38:	d108      	bne.n	800ba4c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800ba3a:	88fb      	ldrh	r3, [r7, #6]
 800ba3c:	3301      	adds	r3, #1
 800ba3e:	80fb      	strh	r3, [r7, #6]
 800ba40:	88fb      	ldrh	r3, [r7, #6]
 800ba42:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ba46:	d3e0      	bcc.n	800ba0a <udp_new_port+0xa>
        return 0;
 800ba48:	2300      	movs	r3, #0
 800ba4a:	e007      	b.n	800ba5c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ba4c:	683b      	ldr	r3, [r7, #0]
 800ba4e:	68db      	ldr	r3, [r3, #12]
 800ba50:	603b      	str	r3, [r7, #0]
 800ba52:	683b      	ldr	r3, [r7, #0]
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d1ea      	bne.n	800ba2e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800ba58:	4b03      	ldr	r3, [pc, #12]	; (800ba68 <udp_new_port+0x68>)
 800ba5a:	881b      	ldrh	r3, [r3, #0]
}
 800ba5c:	4618      	mov	r0, r3
 800ba5e:	370c      	adds	r7, #12
 800ba60:	46bd      	mov	sp, r7
 800ba62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba66:	4770      	bx	lr
 800ba68:	20000028 	.word	0x20000028
 800ba6c:	20007cb0 	.word	0x20007cb0

0800ba70 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800ba70:	b580      	push	{r7, lr}
 800ba72:	b084      	sub	sp, #16
 800ba74:	af00      	add	r7, sp, #0
 800ba76:	60f8      	str	r0, [r7, #12]
 800ba78:	60b9      	str	r1, [r7, #8]
 800ba7a:	4613      	mov	r3, r2
 800ba7c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d105      	bne.n	800ba90 <udp_input_local_match+0x20>
 800ba84:	4b27      	ldr	r3, [pc, #156]	; (800bb24 <udp_input_local_match+0xb4>)
 800ba86:	2287      	movs	r2, #135	; 0x87
 800ba88:	4927      	ldr	r1, [pc, #156]	; (800bb28 <udp_input_local_match+0xb8>)
 800ba8a:	4828      	ldr	r0, [pc, #160]	; (800bb2c <udp_input_local_match+0xbc>)
 800ba8c:	f004 fe4c 	bl	8010728 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800ba90:	68bb      	ldr	r3, [r7, #8]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d105      	bne.n	800baa2 <udp_input_local_match+0x32>
 800ba96:	4b23      	ldr	r3, [pc, #140]	; (800bb24 <udp_input_local_match+0xb4>)
 800ba98:	2288      	movs	r2, #136	; 0x88
 800ba9a:	4925      	ldr	r1, [pc, #148]	; (800bb30 <udp_input_local_match+0xc0>)
 800ba9c:	4823      	ldr	r0, [pc, #140]	; (800bb2c <udp_input_local_match+0xbc>)
 800ba9e:	f004 fe43 	bl	8010728 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	7a1b      	ldrb	r3, [r3, #8]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d00b      	beq.n	800bac2 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	7a1a      	ldrb	r2, [r3, #8]
 800baae:	4b21      	ldr	r3, [pc, #132]	; (800bb34 <udp_input_local_match+0xc4>)
 800bab0:	685b      	ldr	r3, [r3, #4]
 800bab2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bab6:	3301      	adds	r3, #1
 800bab8:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800baba:	429a      	cmp	r2, r3
 800babc:	d001      	beq.n	800bac2 <udp_input_local_match+0x52>
    return 0;
 800babe:	2300      	movs	r3, #0
 800bac0:	e02b      	b.n	800bb1a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800bac2:	79fb      	ldrb	r3, [r7, #7]
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d018      	beq.n	800bafa <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d013      	beq.n	800baf6 <udp_input_local_match+0x86>
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d00f      	beq.n	800baf6 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800bad6:	4b17      	ldr	r3, [pc, #92]	; (800bb34 <udp_input_local_match+0xc4>)
 800bad8:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800bada:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bade:	d00a      	beq.n	800baf6 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	681a      	ldr	r2, [r3, #0]
 800bae4:	4b13      	ldr	r3, [pc, #76]	; (800bb34 <udp_input_local_match+0xc4>)
 800bae6:	695b      	ldr	r3, [r3, #20]
 800bae8:	405a      	eors	r2, r3
 800baea:	68bb      	ldr	r3, [r7, #8]
 800baec:	3308      	adds	r3, #8
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d110      	bne.n	800bb18 <udp_input_local_match+0xa8>
          return 1;
 800baf6:	2301      	movs	r3, #1
 800baf8:	e00f      	b.n	800bb1a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d009      	beq.n	800bb14 <udp_input_local_match+0xa4>
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d005      	beq.n	800bb14 <udp_input_local_match+0xa4>
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	681a      	ldr	r2, [r3, #0]
 800bb0c:	4b09      	ldr	r3, [pc, #36]	; (800bb34 <udp_input_local_match+0xc4>)
 800bb0e:	695b      	ldr	r3, [r3, #20]
 800bb10:	429a      	cmp	r2, r3
 800bb12:	d101      	bne.n	800bb18 <udp_input_local_match+0xa8>
        return 1;
 800bb14:	2301      	movs	r3, #1
 800bb16:	e000      	b.n	800bb1a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800bb18:	2300      	movs	r3, #0
}
 800bb1a:	4618      	mov	r0, r3
 800bb1c:	3710      	adds	r7, #16
 800bb1e:	46bd      	mov	sp, r7
 800bb20:	bd80      	pop	{r7, pc}
 800bb22:	bf00      	nop
 800bb24:	080138a0 	.word	0x080138a0
 800bb28:	080138d0 	.word	0x080138d0
 800bb2c:	080138f4 	.word	0x080138f4
 800bb30:	0801391c 	.word	0x0801391c
 800bb34:	20004d18 	.word	0x20004d18

0800bb38 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800bb38:	b590      	push	{r4, r7, lr}
 800bb3a:	b08d      	sub	sp, #52	; 0x34
 800bb3c:	af02      	add	r7, sp, #8
 800bb3e:	6078      	str	r0, [r7, #4]
 800bb40:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800bb42:	2300      	movs	r3, #0
 800bb44:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d105      	bne.n	800bb58 <udp_input+0x20>
 800bb4c:	4b7c      	ldr	r3, [pc, #496]	; (800bd40 <udp_input+0x208>)
 800bb4e:	22cf      	movs	r2, #207	; 0xcf
 800bb50:	497c      	ldr	r1, [pc, #496]	; (800bd44 <udp_input+0x20c>)
 800bb52:	487d      	ldr	r0, [pc, #500]	; (800bd48 <udp_input+0x210>)
 800bb54:	f004 fde8 	bl	8010728 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800bb58:	683b      	ldr	r3, [r7, #0]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d105      	bne.n	800bb6a <udp_input+0x32>
 800bb5e:	4b78      	ldr	r3, [pc, #480]	; (800bd40 <udp_input+0x208>)
 800bb60:	22d0      	movs	r2, #208	; 0xd0
 800bb62:	497a      	ldr	r1, [pc, #488]	; (800bd4c <udp_input+0x214>)
 800bb64:	4878      	ldr	r0, [pc, #480]	; (800bd48 <udp_input+0x210>)
 800bb66:	f004 fddf 	bl	8010728 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	895b      	ldrh	r3, [r3, #10]
 800bb6e:	2b07      	cmp	r3, #7
 800bb70:	d803      	bhi.n	800bb7a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800bb72:	6878      	ldr	r0, [r7, #4]
 800bb74:	f7fa fa30 	bl	8005fd8 <pbuf_free>
    goto end;
 800bb78:	e0de      	b.n	800bd38 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	685b      	ldr	r3, [r3, #4]
 800bb7e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800bb80:	4b73      	ldr	r3, [pc, #460]	; (800bd50 <udp_input+0x218>)
 800bb82:	695b      	ldr	r3, [r3, #20]
 800bb84:	4a72      	ldr	r2, [pc, #456]	; (800bd50 <udp_input+0x218>)
 800bb86:	6812      	ldr	r2, [r2, #0]
 800bb88:	4611      	mov	r1, r2
 800bb8a:	4618      	mov	r0, r3
 800bb8c:	f003 fe2c 	bl	800f7e8 <ip4_addr_isbroadcast_u32>
 800bb90:	4603      	mov	r3, r0
 800bb92:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800bb94:	697b      	ldr	r3, [r7, #20]
 800bb96:	881b      	ldrh	r3, [r3, #0]
 800bb98:	b29b      	uxth	r3, r3
 800bb9a:	4618      	mov	r0, r3
 800bb9c:	f7f8 fe1a 	bl	80047d4 <lwip_htons>
 800bba0:	4603      	mov	r3, r0
 800bba2:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800bba4:	697b      	ldr	r3, [r7, #20]
 800bba6:	885b      	ldrh	r3, [r3, #2]
 800bba8:	b29b      	uxth	r3, r3
 800bbaa:	4618      	mov	r0, r3
 800bbac:	f7f8 fe12 	bl	80047d4 <lwip_htons>
 800bbb0:	4603      	mov	r3, r0
 800bbb2:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800bbb4:	2300      	movs	r3, #0
 800bbb6:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800bbb8:	2300      	movs	r3, #0
 800bbba:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800bbbc:	2300      	movs	r3, #0
 800bbbe:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800bbc0:	4b64      	ldr	r3, [pc, #400]	; (800bd54 <udp_input+0x21c>)
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	627b      	str	r3, [r7, #36]	; 0x24
 800bbc6:	e054      	b.n	800bc72 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800bbc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbca:	8a5b      	ldrh	r3, [r3, #18]
 800bbcc:	89fa      	ldrh	r2, [r7, #14]
 800bbce:	429a      	cmp	r2, r3
 800bbd0:	d14a      	bne.n	800bc68 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800bbd2:	7cfb      	ldrb	r3, [r7, #19]
 800bbd4:	461a      	mov	r2, r3
 800bbd6:	6839      	ldr	r1, [r7, #0]
 800bbd8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bbda:	f7ff ff49 	bl	800ba70 <udp_input_local_match>
 800bbde:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d041      	beq.n	800bc68 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800bbe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbe6:	7c1b      	ldrb	r3, [r3, #16]
 800bbe8:	f003 0304 	and.w	r3, r3, #4
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d11d      	bne.n	800bc2c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800bbf0:	69fb      	ldr	r3, [r7, #28]
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d102      	bne.n	800bbfc <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800bbf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbf8:	61fb      	str	r3, [r7, #28]
 800bbfa:	e017      	b.n	800bc2c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800bbfc:	7cfb      	ldrb	r3, [r7, #19]
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d014      	beq.n	800bc2c <udp_input+0xf4>
 800bc02:	4b53      	ldr	r3, [pc, #332]	; (800bd50 <udp_input+0x218>)
 800bc04:	695b      	ldr	r3, [r3, #20]
 800bc06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc0a:	d10f      	bne.n	800bc2c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800bc0c:	69fb      	ldr	r3, [r7, #28]
 800bc0e:	681a      	ldr	r2, [r3, #0]
 800bc10:	683b      	ldr	r3, [r7, #0]
 800bc12:	3304      	adds	r3, #4
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	429a      	cmp	r2, r3
 800bc18:	d008      	beq.n	800bc2c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800bc1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc1c:	681a      	ldr	r2, [r3, #0]
 800bc1e:	683b      	ldr	r3, [r7, #0]
 800bc20:	3304      	adds	r3, #4
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	429a      	cmp	r2, r3
 800bc26:	d101      	bne.n	800bc2c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800bc28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc2a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800bc2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc2e:	8a9b      	ldrh	r3, [r3, #20]
 800bc30:	8a3a      	ldrh	r2, [r7, #16]
 800bc32:	429a      	cmp	r2, r3
 800bc34:	d118      	bne.n	800bc68 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800bc36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc38:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d005      	beq.n	800bc4a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800bc3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc40:	685a      	ldr	r2, [r3, #4]
 800bc42:	4b43      	ldr	r3, [pc, #268]	; (800bd50 <udp_input+0x218>)
 800bc44:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800bc46:	429a      	cmp	r2, r3
 800bc48:	d10e      	bne.n	800bc68 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800bc4a:	6a3b      	ldr	r3, [r7, #32]
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d014      	beq.n	800bc7a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800bc50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc52:	68da      	ldr	r2, [r3, #12]
 800bc54:	6a3b      	ldr	r3, [r7, #32]
 800bc56:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800bc58:	4b3e      	ldr	r3, [pc, #248]	; (800bd54 <udp_input+0x21c>)
 800bc5a:	681a      	ldr	r2, [r3, #0]
 800bc5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc5e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800bc60:	4a3c      	ldr	r2, [pc, #240]	; (800bd54 <udp_input+0x21c>)
 800bc62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc64:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800bc66:	e008      	b.n	800bc7a <udp_input+0x142>
      }
    }

    prev = pcb;
 800bc68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc6a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800bc6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc6e:	68db      	ldr	r3, [r3, #12]
 800bc70:	627b      	str	r3, [r7, #36]	; 0x24
 800bc72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d1a7      	bne.n	800bbc8 <udp_input+0x90>
 800bc78:	e000      	b.n	800bc7c <udp_input+0x144>
        break;
 800bc7a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800bc7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d101      	bne.n	800bc86 <udp_input+0x14e>
    pcb = uncon_pcb;
 800bc82:	69fb      	ldr	r3, [r7, #28]
 800bc84:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800bc86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d002      	beq.n	800bc92 <udp_input+0x15a>
    for_us = 1;
 800bc8c:	2301      	movs	r3, #1
 800bc8e:	76fb      	strb	r3, [r7, #27]
 800bc90:	e00a      	b.n	800bca8 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800bc92:	683b      	ldr	r3, [r7, #0]
 800bc94:	3304      	adds	r3, #4
 800bc96:	681a      	ldr	r2, [r3, #0]
 800bc98:	4b2d      	ldr	r3, [pc, #180]	; (800bd50 <udp_input+0x218>)
 800bc9a:	695b      	ldr	r3, [r3, #20]
 800bc9c:	429a      	cmp	r2, r3
 800bc9e:	bf0c      	ite	eq
 800bca0:	2301      	moveq	r3, #1
 800bca2:	2300      	movne	r3, #0
 800bca4:	b2db      	uxtb	r3, r3
 800bca6:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800bca8:	7efb      	ldrb	r3, [r7, #27]
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d041      	beq.n	800bd32 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800bcae:	2108      	movs	r1, #8
 800bcb0:	6878      	ldr	r0, [r7, #4]
 800bcb2:	f7fa f90b 	bl	8005ecc <pbuf_remove_header>
 800bcb6:	4603      	mov	r3, r0
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d00a      	beq.n	800bcd2 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800bcbc:	4b20      	ldr	r3, [pc, #128]	; (800bd40 <udp_input+0x208>)
 800bcbe:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800bcc2:	4925      	ldr	r1, [pc, #148]	; (800bd58 <udp_input+0x220>)
 800bcc4:	4820      	ldr	r0, [pc, #128]	; (800bd48 <udp_input+0x210>)
 800bcc6:	f004 fd2f 	bl	8010728 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800bcca:	6878      	ldr	r0, [r7, #4]
 800bccc:	f7fa f984 	bl	8005fd8 <pbuf_free>
      goto end;
 800bcd0:	e032      	b.n	800bd38 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800bcd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d012      	beq.n	800bcfe <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800bcd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcda:	699b      	ldr	r3, [r3, #24]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d00a      	beq.n	800bcf6 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800bce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bce2:	699c      	ldr	r4, [r3, #24]
 800bce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bce6:	69d8      	ldr	r0, [r3, #28]
 800bce8:	8a3b      	ldrh	r3, [r7, #16]
 800bcea:	9300      	str	r3, [sp, #0]
 800bcec:	4b1b      	ldr	r3, [pc, #108]	; (800bd5c <udp_input+0x224>)
 800bcee:	687a      	ldr	r2, [r7, #4]
 800bcf0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bcf2:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800bcf4:	e021      	b.n	800bd3a <udp_input+0x202>
        pbuf_free(p);
 800bcf6:	6878      	ldr	r0, [r7, #4]
 800bcf8:	f7fa f96e 	bl	8005fd8 <pbuf_free>
        goto end;
 800bcfc:	e01c      	b.n	800bd38 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800bcfe:	7cfb      	ldrb	r3, [r7, #19]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d112      	bne.n	800bd2a <udp_input+0x1f2>
 800bd04:	4b12      	ldr	r3, [pc, #72]	; (800bd50 <udp_input+0x218>)
 800bd06:	695b      	ldr	r3, [r3, #20]
 800bd08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bd0c:	2be0      	cmp	r3, #224	; 0xe0
 800bd0e:	d00c      	beq.n	800bd2a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800bd10:	4b0f      	ldr	r3, [pc, #60]	; (800bd50 <udp_input+0x218>)
 800bd12:	899b      	ldrh	r3, [r3, #12]
 800bd14:	3308      	adds	r3, #8
 800bd16:	b29b      	uxth	r3, r3
 800bd18:	b21b      	sxth	r3, r3
 800bd1a:	4619      	mov	r1, r3
 800bd1c:	6878      	ldr	r0, [r7, #4]
 800bd1e:	f7fa f948 	bl	8005fb2 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800bd22:	2103      	movs	r1, #3
 800bd24:	6878      	ldr	r0, [r7, #4]
 800bd26:	f003 fa17 	bl	800f158 <icmp_dest_unreach>
      pbuf_free(p);
 800bd2a:	6878      	ldr	r0, [r7, #4]
 800bd2c:	f7fa f954 	bl	8005fd8 <pbuf_free>
  return;
 800bd30:	e003      	b.n	800bd3a <udp_input+0x202>
    pbuf_free(p);
 800bd32:	6878      	ldr	r0, [r7, #4]
 800bd34:	f7fa f950 	bl	8005fd8 <pbuf_free>
  return;
 800bd38:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800bd3a:	372c      	adds	r7, #44	; 0x2c
 800bd3c:	46bd      	mov	sp, r7
 800bd3e:	bd90      	pop	{r4, r7, pc}
 800bd40:	080138a0 	.word	0x080138a0
 800bd44:	08013944 	.word	0x08013944
 800bd48:	080138f4 	.word	0x080138f4
 800bd4c:	0801395c 	.word	0x0801395c
 800bd50:	20004d18 	.word	0x20004d18
 800bd54:	20007cb0 	.word	0x20007cb0
 800bd58:	08013978 	.word	0x08013978
 800bd5c:	20004d28 	.word	0x20004d28

0800bd60 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800bd60:	b580      	push	{r7, lr}
 800bd62:	b088      	sub	sp, #32
 800bd64:	af02      	add	r7, sp, #8
 800bd66:	60f8      	str	r0, [r7, #12]
 800bd68:	60b9      	str	r1, [r7, #8]
 800bd6a:	607a      	str	r2, [r7, #4]
 800bd6c:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d109      	bne.n	800bd88 <udp_sendto_if+0x28>
 800bd74:	4b2e      	ldr	r3, [pc, #184]	; (800be30 <udp_sendto_if+0xd0>)
 800bd76:	f44f 7220 	mov.w	r2, #640	; 0x280
 800bd7a:	492e      	ldr	r1, [pc, #184]	; (800be34 <udp_sendto_if+0xd4>)
 800bd7c:	482e      	ldr	r0, [pc, #184]	; (800be38 <udp_sendto_if+0xd8>)
 800bd7e:	f004 fcd3 	bl	8010728 <iprintf>
 800bd82:	f06f 030f 	mvn.w	r3, #15
 800bd86:	e04f      	b.n	800be28 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800bd88:	68bb      	ldr	r3, [r7, #8]
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d109      	bne.n	800bda2 <udp_sendto_if+0x42>
 800bd8e:	4b28      	ldr	r3, [pc, #160]	; (800be30 <udp_sendto_if+0xd0>)
 800bd90:	f240 2281 	movw	r2, #641	; 0x281
 800bd94:	4929      	ldr	r1, [pc, #164]	; (800be3c <udp_sendto_if+0xdc>)
 800bd96:	4828      	ldr	r0, [pc, #160]	; (800be38 <udp_sendto_if+0xd8>)
 800bd98:	f004 fcc6 	bl	8010728 <iprintf>
 800bd9c:	f06f 030f 	mvn.w	r3, #15
 800bda0:	e042      	b.n	800be28 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d109      	bne.n	800bdbc <udp_sendto_if+0x5c>
 800bda8:	4b21      	ldr	r3, [pc, #132]	; (800be30 <udp_sendto_if+0xd0>)
 800bdaa:	f240 2282 	movw	r2, #642	; 0x282
 800bdae:	4924      	ldr	r1, [pc, #144]	; (800be40 <udp_sendto_if+0xe0>)
 800bdb0:	4821      	ldr	r0, [pc, #132]	; (800be38 <udp_sendto_if+0xd8>)
 800bdb2:	f004 fcb9 	bl	8010728 <iprintf>
 800bdb6:	f06f 030f 	mvn.w	r3, #15
 800bdba:	e035      	b.n	800be28 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800bdbc:	6a3b      	ldr	r3, [r7, #32]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d109      	bne.n	800bdd6 <udp_sendto_if+0x76>
 800bdc2:	4b1b      	ldr	r3, [pc, #108]	; (800be30 <udp_sendto_if+0xd0>)
 800bdc4:	f240 2283 	movw	r2, #643	; 0x283
 800bdc8:	491e      	ldr	r1, [pc, #120]	; (800be44 <udp_sendto_if+0xe4>)
 800bdca:	481b      	ldr	r0, [pc, #108]	; (800be38 <udp_sendto_if+0xd8>)
 800bdcc:	f004 fcac 	bl	8010728 <iprintf>
 800bdd0:	f06f 030f 	mvn.w	r3, #15
 800bdd4:	e028      	b.n	800be28 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d009      	beq.n	800bdf0 <udp_sendto_if+0x90>
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d005      	beq.n	800bdf0 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800bdec:	2be0      	cmp	r3, #224	; 0xe0
 800bdee:	d103      	bne.n	800bdf8 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800bdf0:	6a3b      	ldr	r3, [r7, #32]
 800bdf2:	3304      	adds	r3, #4
 800bdf4:	617b      	str	r3, [r7, #20]
 800bdf6:	e00b      	b.n	800be10 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	681a      	ldr	r2, [r3, #0]
 800bdfc:	6a3b      	ldr	r3, [r7, #32]
 800bdfe:	3304      	adds	r3, #4
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	429a      	cmp	r2, r3
 800be04:	d002      	beq.n	800be0c <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800be06:	f06f 0303 	mvn.w	r3, #3
 800be0a:	e00d      	b.n	800be28 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800be10:	887a      	ldrh	r2, [r7, #2]
 800be12:	697b      	ldr	r3, [r7, #20]
 800be14:	9301      	str	r3, [sp, #4]
 800be16:	6a3b      	ldr	r3, [r7, #32]
 800be18:	9300      	str	r3, [sp, #0]
 800be1a:	4613      	mov	r3, r2
 800be1c:	687a      	ldr	r2, [r7, #4]
 800be1e:	68b9      	ldr	r1, [r7, #8]
 800be20:	68f8      	ldr	r0, [r7, #12]
 800be22:	f000 f811 	bl	800be48 <udp_sendto_if_src>
 800be26:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800be28:	4618      	mov	r0, r3
 800be2a:	3718      	adds	r7, #24
 800be2c:	46bd      	mov	sp, r7
 800be2e:	bd80      	pop	{r7, pc}
 800be30:	080138a0 	.word	0x080138a0
 800be34:	08013a14 	.word	0x08013a14
 800be38:	080138f4 	.word	0x080138f4
 800be3c:	08013a30 	.word	0x08013a30
 800be40:	08013a4c 	.word	0x08013a4c
 800be44:	08013a6c 	.word	0x08013a6c

0800be48 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800be48:	b580      	push	{r7, lr}
 800be4a:	b08c      	sub	sp, #48	; 0x30
 800be4c:	af04      	add	r7, sp, #16
 800be4e:	60f8      	str	r0, [r7, #12]
 800be50:	60b9      	str	r1, [r7, #8]
 800be52:	607a      	str	r2, [r7, #4]
 800be54:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d109      	bne.n	800be70 <udp_sendto_if_src+0x28>
 800be5c:	4b65      	ldr	r3, [pc, #404]	; (800bff4 <udp_sendto_if_src+0x1ac>)
 800be5e:	f240 22d1 	movw	r2, #721	; 0x2d1
 800be62:	4965      	ldr	r1, [pc, #404]	; (800bff8 <udp_sendto_if_src+0x1b0>)
 800be64:	4865      	ldr	r0, [pc, #404]	; (800bffc <udp_sendto_if_src+0x1b4>)
 800be66:	f004 fc5f 	bl	8010728 <iprintf>
 800be6a:	f06f 030f 	mvn.w	r3, #15
 800be6e:	e0bc      	b.n	800bfea <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800be70:	68bb      	ldr	r3, [r7, #8]
 800be72:	2b00      	cmp	r3, #0
 800be74:	d109      	bne.n	800be8a <udp_sendto_if_src+0x42>
 800be76:	4b5f      	ldr	r3, [pc, #380]	; (800bff4 <udp_sendto_if_src+0x1ac>)
 800be78:	f240 22d2 	movw	r2, #722	; 0x2d2
 800be7c:	4960      	ldr	r1, [pc, #384]	; (800c000 <udp_sendto_if_src+0x1b8>)
 800be7e:	485f      	ldr	r0, [pc, #380]	; (800bffc <udp_sendto_if_src+0x1b4>)
 800be80:	f004 fc52 	bl	8010728 <iprintf>
 800be84:	f06f 030f 	mvn.w	r3, #15
 800be88:	e0af      	b.n	800bfea <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d109      	bne.n	800bea4 <udp_sendto_if_src+0x5c>
 800be90:	4b58      	ldr	r3, [pc, #352]	; (800bff4 <udp_sendto_if_src+0x1ac>)
 800be92:	f240 22d3 	movw	r2, #723	; 0x2d3
 800be96:	495b      	ldr	r1, [pc, #364]	; (800c004 <udp_sendto_if_src+0x1bc>)
 800be98:	4858      	ldr	r0, [pc, #352]	; (800bffc <udp_sendto_if_src+0x1b4>)
 800be9a:	f004 fc45 	bl	8010728 <iprintf>
 800be9e:	f06f 030f 	mvn.w	r3, #15
 800bea2:	e0a2      	b.n	800bfea <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800bea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d109      	bne.n	800bebe <udp_sendto_if_src+0x76>
 800beaa:	4b52      	ldr	r3, [pc, #328]	; (800bff4 <udp_sendto_if_src+0x1ac>)
 800beac:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800beb0:	4955      	ldr	r1, [pc, #340]	; (800c008 <udp_sendto_if_src+0x1c0>)
 800beb2:	4852      	ldr	r0, [pc, #328]	; (800bffc <udp_sendto_if_src+0x1b4>)
 800beb4:	f004 fc38 	bl	8010728 <iprintf>
 800beb8:	f06f 030f 	mvn.w	r3, #15
 800bebc:	e095      	b.n	800bfea <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800bebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d109      	bne.n	800bed8 <udp_sendto_if_src+0x90>
 800bec4:	4b4b      	ldr	r3, [pc, #300]	; (800bff4 <udp_sendto_if_src+0x1ac>)
 800bec6:	f240 22d5 	movw	r2, #725	; 0x2d5
 800beca:	4950      	ldr	r1, [pc, #320]	; (800c00c <udp_sendto_if_src+0x1c4>)
 800becc:	484b      	ldr	r0, [pc, #300]	; (800bffc <udp_sendto_if_src+0x1b4>)
 800bece:	f004 fc2b 	bl	8010728 <iprintf>
 800bed2:	f06f 030f 	mvn.w	r3, #15
 800bed6:	e088      	b.n	800bfea <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	8a5b      	ldrh	r3, [r3, #18]
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d10f      	bne.n	800bf00 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800bee0:	68f9      	ldr	r1, [r7, #12]
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	8a5b      	ldrh	r3, [r3, #18]
 800bee6:	461a      	mov	r2, r3
 800bee8:	68f8      	ldr	r0, [r7, #12]
 800beea:	f000 f893 	bl	800c014 <udp_bind>
 800beee:	4603      	mov	r3, r0
 800bef0:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800bef2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d002      	beq.n	800bf00 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800befa:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800befe:	e074      	b.n	800bfea <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800bf00:	68bb      	ldr	r3, [r7, #8]
 800bf02:	891b      	ldrh	r3, [r3, #8]
 800bf04:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800bf08:	4293      	cmp	r3, r2
 800bf0a:	d902      	bls.n	800bf12 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 800bf0c:	f04f 33ff 	mov.w	r3, #4294967295
 800bf10:	e06b      	b.n	800bfea <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800bf12:	2108      	movs	r1, #8
 800bf14:	68b8      	ldr	r0, [r7, #8]
 800bf16:	f7f9 ffc9 	bl	8005eac <pbuf_add_header>
 800bf1a:	4603      	mov	r3, r0
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d015      	beq.n	800bf4c <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800bf20:	f44f 7220 	mov.w	r2, #640	; 0x280
 800bf24:	2108      	movs	r1, #8
 800bf26:	2022      	movs	r0, #34	; 0x22
 800bf28:	f7f9 fd72 	bl	8005a10 <pbuf_alloc>
 800bf2c:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800bf2e:	69fb      	ldr	r3, [r7, #28]
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d102      	bne.n	800bf3a <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800bf34:	f04f 33ff 	mov.w	r3, #4294967295
 800bf38:	e057      	b.n	800bfea <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 800bf3a:	68bb      	ldr	r3, [r7, #8]
 800bf3c:	891b      	ldrh	r3, [r3, #8]
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d006      	beq.n	800bf50 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800bf42:	68b9      	ldr	r1, [r7, #8]
 800bf44:	69f8      	ldr	r0, [r7, #28]
 800bf46:	f7fa f95f 	bl	8006208 <pbuf_chain>
 800bf4a:	e001      	b.n	800bf50 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800bf4c:	68bb      	ldr	r3, [r7, #8]
 800bf4e:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800bf50:	69fb      	ldr	r3, [r7, #28]
 800bf52:	895b      	ldrh	r3, [r3, #10]
 800bf54:	2b07      	cmp	r3, #7
 800bf56:	d806      	bhi.n	800bf66 <udp_sendto_if_src+0x11e>
 800bf58:	4b26      	ldr	r3, [pc, #152]	; (800bff4 <udp_sendto_if_src+0x1ac>)
 800bf5a:	f240 320d 	movw	r2, #781	; 0x30d
 800bf5e:	492c      	ldr	r1, [pc, #176]	; (800c010 <udp_sendto_if_src+0x1c8>)
 800bf60:	4826      	ldr	r0, [pc, #152]	; (800bffc <udp_sendto_if_src+0x1b4>)
 800bf62:	f004 fbe1 	bl	8010728 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800bf66:	69fb      	ldr	r3, [r7, #28]
 800bf68:	685b      	ldr	r3, [r3, #4]
 800bf6a:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	8a5b      	ldrh	r3, [r3, #18]
 800bf70:	4618      	mov	r0, r3
 800bf72:	f7f8 fc2f 	bl	80047d4 <lwip_htons>
 800bf76:	4603      	mov	r3, r0
 800bf78:	461a      	mov	r2, r3
 800bf7a:	697b      	ldr	r3, [r7, #20]
 800bf7c:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800bf7e:	887b      	ldrh	r3, [r7, #2]
 800bf80:	4618      	mov	r0, r3
 800bf82:	f7f8 fc27 	bl	80047d4 <lwip_htons>
 800bf86:	4603      	mov	r3, r0
 800bf88:	461a      	mov	r2, r3
 800bf8a:	697b      	ldr	r3, [r7, #20]
 800bf8c:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800bf8e:	697b      	ldr	r3, [r7, #20]
 800bf90:	2200      	movs	r2, #0
 800bf92:	719a      	strb	r2, [r3, #6]
 800bf94:	2200      	movs	r2, #0
 800bf96:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800bf98:	69fb      	ldr	r3, [r7, #28]
 800bf9a:	891b      	ldrh	r3, [r3, #8]
 800bf9c:	4618      	mov	r0, r3
 800bf9e:	f7f8 fc19 	bl	80047d4 <lwip_htons>
 800bfa2:	4603      	mov	r3, r0
 800bfa4:	461a      	mov	r2, r3
 800bfa6:	697b      	ldr	r3, [r7, #20]
 800bfa8:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800bfaa:	2311      	movs	r3, #17
 800bfac:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	7adb      	ldrb	r3, [r3, #11]
 800bfb2:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	7a9b      	ldrb	r3, [r3, #10]
 800bfb8:	7cb9      	ldrb	r1, [r7, #18]
 800bfba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bfbc:	9202      	str	r2, [sp, #8]
 800bfbe:	7cfa      	ldrb	r2, [r7, #19]
 800bfc0:	9201      	str	r2, [sp, #4]
 800bfc2:	9300      	str	r3, [sp, #0]
 800bfc4:	460b      	mov	r3, r1
 800bfc6:	687a      	ldr	r2, [r7, #4]
 800bfc8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bfca:	69f8      	ldr	r0, [r7, #28]
 800bfcc:	f003 fb5e 	bl	800f68c <ip4_output_if_src>
 800bfd0:	4603      	mov	r3, r0
 800bfd2:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800bfd4:	69fa      	ldr	r2, [r7, #28]
 800bfd6:	68bb      	ldr	r3, [r7, #8]
 800bfd8:	429a      	cmp	r2, r3
 800bfda:	d004      	beq.n	800bfe6 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 800bfdc:	69f8      	ldr	r0, [r7, #28]
 800bfde:	f7f9 fffb 	bl	8005fd8 <pbuf_free>
    q = NULL;
 800bfe2:	2300      	movs	r3, #0
 800bfe4:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800bfe6:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800bfea:	4618      	mov	r0, r3
 800bfec:	3720      	adds	r7, #32
 800bfee:	46bd      	mov	sp, r7
 800bff0:	bd80      	pop	{r7, pc}
 800bff2:	bf00      	nop
 800bff4:	080138a0 	.word	0x080138a0
 800bff8:	08013a8c 	.word	0x08013a8c
 800bffc:	080138f4 	.word	0x080138f4
 800c000:	08013aac 	.word	0x08013aac
 800c004:	08013acc 	.word	0x08013acc
 800c008:	08013af0 	.word	0x08013af0
 800c00c:	08013b14 	.word	0x08013b14
 800c010:	08013b38 	.word	0x08013b38

0800c014 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800c014:	b580      	push	{r7, lr}
 800c016:	b086      	sub	sp, #24
 800c018:	af00      	add	r7, sp, #0
 800c01a:	60f8      	str	r0, [r7, #12]
 800c01c:	60b9      	str	r1, [r7, #8]
 800c01e:	4613      	mov	r3, r2
 800c020:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800c022:	68bb      	ldr	r3, [r7, #8]
 800c024:	2b00      	cmp	r3, #0
 800c026:	d101      	bne.n	800c02c <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800c028:	4b39      	ldr	r3, [pc, #228]	; (800c110 <udp_bind+0xfc>)
 800c02a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d109      	bne.n	800c046 <udp_bind+0x32>
 800c032:	4b38      	ldr	r3, [pc, #224]	; (800c114 <udp_bind+0x100>)
 800c034:	f240 32b7 	movw	r2, #951	; 0x3b7
 800c038:	4937      	ldr	r1, [pc, #220]	; (800c118 <udp_bind+0x104>)
 800c03a:	4838      	ldr	r0, [pc, #224]	; (800c11c <udp_bind+0x108>)
 800c03c:	f004 fb74 	bl	8010728 <iprintf>
 800c040:	f06f 030f 	mvn.w	r3, #15
 800c044:	e060      	b.n	800c108 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800c046:	2300      	movs	r3, #0
 800c048:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c04a:	4b35      	ldr	r3, [pc, #212]	; (800c120 <udp_bind+0x10c>)
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	617b      	str	r3, [r7, #20]
 800c050:	e009      	b.n	800c066 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800c052:	68fa      	ldr	r2, [r7, #12]
 800c054:	697b      	ldr	r3, [r7, #20]
 800c056:	429a      	cmp	r2, r3
 800c058:	d102      	bne.n	800c060 <udp_bind+0x4c>
      rebind = 1;
 800c05a:	2301      	movs	r3, #1
 800c05c:	74fb      	strb	r3, [r7, #19]
      break;
 800c05e:	e005      	b.n	800c06c <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c060:	697b      	ldr	r3, [r7, #20]
 800c062:	68db      	ldr	r3, [r3, #12]
 800c064:	617b      	str	r3, [r7, #20]
 800c066:	697b      	ldr	r3, [r7, #20]
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d1f2      	bne.n	800c052 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800c06c:	88fb      	ldrh	r3, [r7, #6]
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d109      	bne.n	800c086 <udp_bind+0x72>
    port = udp_new_port();
 800c072:	f7ff fcc5 	bl	800ba00 <udp_new_port>
 800c076:	4603      	mov	r3, r0
 800c078:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800c07a:	88fb      	ldrh	r3, [r7, #6]
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d12c      	bne.n	800c0da <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800c080:	f06f 0307 	mvn.w	r3, #7
 800c084:	e040      	b.n	800c108 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c086:	4b26      	ldr	r3, [pc, #152]	; (800c120 <udp_bind+0x10c>)
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	617b      	str	r3, [r7, #20]
 800c08c:	e022      	b.n	800c0d4 <udp_bind+0xc0>
      if (pcb != ipcb) {
 800c08e:	68fa      	ldr	r2, [r7, #12]
 800c090:	697b      	ldr	r3, [r7, #20]
 800c092:	429a      	cmp	r2, r3
 800c094:	d01b      	beq.n	800c0ce <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800c096:	697b      	ldr	r3, [r7, #20]
 800c098:	8a5b      	ldrh	r3, [r3, #18]
 800c09a:	88fa      	ldrh	r2, [r7, #6]
 800c09c:	429a      	cmp	r2, r3
 800c09e:	d116      	bne.n	800c0ce <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800c0a0:	697b      	ldr	r3, [r7, #20]
 800c0a2:	681a      	ldr	r2, [r3, #0]
 800c0a4:	68bb      	ldr	r3, [r7, #8]
 800c0a6:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800c0a8:	429a      	cmp	r2, r3
 800c0aa:	d00d      	beq.n	800c0c8 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800c0ac:	68bb      	ldr	r3, [r7, #8]
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d00a      	beq.n	800c0c8 <udp_bind+0xb4>
 800c0b2:	68bb      	ldr	r3, [r7, #8]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d006      	beq.n	800c0c8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800c0ba:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d003      	beq.n	800c0c8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800c0c0:	697b      	ldr	r3, [r7, #20]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d102      	bne.n	800c0ce <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800c0c8:	f06f 0307 	mvn.w	r3, #7
 800c0cc:	e01c      	b.n	800c108 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c0ce:	697b      	ldr	r3, [r7, #20]
 800c0d0:	68db      	ldr	r3, [r3, #12]
 800c0d2:	617b      	str	r3, [r7, #20]
 800c0d4:	697b      	ldr	r3, [r7, #20]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d1d9      	bne.n	800c08e <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800c0da:	68bb      	ldr	r3, [r7, #8]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d002      	beq.n	800c0e6 <udp_bind+0xd2>
 800c0e0:	68bb      	ldr	r3, [r7, #8]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	e000      	b.n	800c0e8 <udp_bind+0xd4>
 800c0e6:	2300      	movs	r3, #0
 800c0e8:	68fa      	ldr	r2, [r7, #12]
 800c0ea:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	88fa      	ldrh	r2, [r7, #6]
 800c0f0:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800c0f2:	7cfb      	ldrb	r3, [r7, #19]
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d106      	bne.n	800c106 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800c0f8:	4b09      	ldr	r3, [pc, #36]	; (800c120 <udp_bind+0x10c>)
 800c0fa:	681a      	ldr	r2, [r3, #0]
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800c100:	4a07      	ldr	r2, [pc, #28]	; (800c120 <udp_bind+0x10c>)
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800c106:	2300      	movs	r3, #0
}
 800c108:	4618      	mov	r0, r3
 800c10a:	3718      	adds	r7, #24
 800c10c:	46bd      	mov	sp, r7
 800c10e:	bd80      	pop	{r7, pc}
 800c110:	0801476c 	.word	0x0801476c
 800c114:	080138a0 	.word	0x080138a0
 800c118:	08013b68 	.word	0x08013b68
 800c11c:	080138f4 	.word	0x080138f4
 800c120:	20007cb0 	.word	0x20007cb0

0800c124 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800c124:	b580      	push	{r7, lr}
 800c126:	b086      	sub	sp, #24
 800c128:	af00      	add	r7, sp, #0
 800c12a:	60f8      	str	r0, [r7, #12]
 800c12c:	60b9      	str	r1, [r7, #8]
 800c12e:	4613      	mov	r3, r2
 800c130:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	2b00      	cmp	r3, #0
 800c136:	d109      	bne.n	800c14c <udp_connect+0x28>
 800c138:	4b2c      	ldr	r3, [pc, #176]	; (800c1ec <udp_connect+0xc8>)
 800c13a:	f240 4235 	movw	r2, #1077	; 0x435
 800c13e:	492c      	ldr	r1, [pc, #176]	; (800c1f0 <udp_connect+0xcc>)
 800c140:	482c      	ldr	r0, [pc, #176]	; (800c1f4 <udp_connect+0xd0>)
 800c142:	f004 faf1 	bl	8010728 <iprintf>
 800c146:	f06f 030f 	mvn.w	r3, #15
 800c14a:	e04b      	b.n	800c1e4 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800c14c:	68bb      	ldr	r3, [r7, #8]
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d109      	bne.n	800c166 <udp_connect+0x42>
 800c152:	4b26      	ldr	r3, [pc, #152]	; (800c1ec <udp_connect+0xc8>)
 800c154:	f240 4236 	movw	r2, #1078	; 0x436
 800c158:	4927      	ldr	r1, [pc, #156]	; (800c1f8 <udp_connect+0xd4>)
 800c15a:	4826      	ldr	r0, [pc, #152]	; (800c1f4 <udp_connect+0xd0>)
 800c15c:	f004 fae4 	bl	8010728 <iprintf>
 800c160:	f06f 030f 	mvn.w	r3, #15
 800c164:	e03e      	b.n	800c1e4 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	8a5b      	ldrh	r3, [r3, #18]
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d10f      	bne.n	800c18e <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800c16e:	68f9      	ldr	r1, [r7, #12]
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	8a5b      	ldrh	r3, [r3, #18]
 800c174:	461a      	mov	r2, r3
 800c176:	68f8      	ldr	r0, [r7, #12]
 800c178:	f7ff ff4c 	bl	800c014 <udp_bind>
 800c17c:	4603      	mov	r3, r0
 800c17e:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800c180:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c184:	2b00      	cmp	r3, #0
 800c186:	d002      	beq.n	800c18e <udp_connect+0x6a>
      return err;
 800c188:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c18c:	e02a      	b.n	800c1e4 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800c18e:	68bb      	ldr	r3, [r7, #8]
 800c190:	2b00      	cmp	r3, #0
 800c192:	d002      	beq.n	800c19a <udp_connect+0x76>
 800c194:	68bb      	ldr	r3, [r7, #8]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	e000      	b.n	800c19c <udp_connect+0x78>
 800c19a:	2300      	movs	r3, #0
 800c19c:	68fa      	ldr	r2, [r7, #12]
 800c19e:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	88fa      	ldrh	r2, [r7, #6]
 800c1a4:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	7c1b      	ldrb	r3, [r3, #16]
 800c1aa:	f043 0304 	orr.w	r3, r3, #4
 800c1ae:	b2da      	uxtb	r2, r3
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c1b4:	4b11      	ldr	r3, [pc, #68]	; (800c1fc <udp_connect+0xd8>)
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	617b      	str	r3, [r7, #20]
 800c1ba:	e008      	b.n	800c1ce <udp_connect+0xaa>
    if (pcb == ipcb) {
 800c1bc:	68fa      	ldr	r2, [r7, #12]
 800c1be:	697b      	ldr	r3, [r7, #20]
 800c1c0:	429a      	cmp	r2, r3
 800c1c2:	d101      	bne.n	800c1c8 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 800c1c4:	2300      	movs	r3, #0
 800c1c6:	e00d      	b.n	800c1e4 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c1c8:	697b      	ldr	r3, [r7, #20]
 800c1ca:	68db      	ldr	r3, [r3, #12]
 800c1cc:	617b      	str	r3, [r7, #20]
 800c1ce:	697b      	ldr	r3, [r7, #20]
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d1f3      	bne.n	800c1bc <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800c1d4:	4b09      	ldr	r3, [pc, #36]	; (800c1fc <udp_connect+0xd8>)
 800c1d6:	681a      	ldr	r2, [r3, #0]
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 800c1dc:	4a07      	ldr	r2, [pc, #28]	; (800c1fc <udp_connect+0xd8>)
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 800c1e2:	2300      	movs	r3, #0
}
 800c1e4:	4618      	mov	r0, r3
 800c1e6:	3718      	adds	r7, #24
 800c1e8:	46bd      	mov	sp, r7
 800c1ea:	bd80      	pop	{r7, pc}
 800c1ec:	080138a0 	.word	0x080138a0
 800c1f0:	08013b80 	.word	0x08013b80
 800c1f4:	080138f4 	.word	0x080138f4
 800c1f8:	08013b9c 	.word	0x08013b9c
 800c1fc:	20007cb0 	.word	0x20007cb0

0800c200 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800c200:	b580      	push	{r7, lr}
 800c202:	b084      	sub	sp, #16
 800c204:	af00      	add	r7, sp, #0
 800c206:	60f8      	str	r0, [r7, #12]
 800c208:	60b9      	str	r1, [r7, #8]
 800c20a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d107      	bne.n	800c222 <udp_recv+0x22>
 800c212:	4b08      	ldr	r3, [pc, #32]	; (800c234 <udp_recv+0x34>)
 800c214:	f240 428a 	movw	r2, #1162	; 0x48a
 800c218:	4907      	ldr	r1, [pc, #28]	; (800c238 <udp_recv+0x38>)
 800c21a:	4808      	ldr	r0, [pc, #32]	; (800c23c <udp_recv+0x3c>)
 800c21c:	f004 fa84 	bl	8010728 <iprintf>
 800c220:	e005      	b.n	800c22e <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	68ba      	ldr	r2, [r7, #8]
 800c226:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	687a      	ldr	r2, [r7, #4]
 800c22c:	61da      	str	r2, [r3, #28]
}
 800c22e:	3710      	adds	r7, #16
 800c230:	46bd      	mov	sp, r7
 800c232:	bd80      	pop	{r7, pc}
 800c234:	080138a0 	.word	0x080138a0
 800c238:	08013bd4 	.word	0x08013bd4
 800c23c:	080138f4 	.word	0x080138f4

0800c240 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800c240:	b580      	push	{r7, lr}
 800c242:	b084      	sub	sp, #16
 800c244:	af00      	add	r7, sp, #0
 800c246:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d107      	bne.n	800c25e <udp_remove+0x1e>
 800c24e:	4b19      	ldr	r3, [pc, #100]	; (800c2b4 <udp_remove+0x74>)
 800c250:	f240 42a1 	movw	r2, #1185	; 0x4a1
 800c254:	4918      	ldr	r1, [pc, #96]	; (800c2b8 <udp_remove+0x78>)
 800c256:	4819      	ldr	r0, [pc, #100]	; (800c2bc <udp_remove+0x7c>)
 800c258:	f004 fa66 	bl	8010728 <iprintf>
 800c25c:	e026      	b.n	800c2ac <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800c25e:	4b18      	ldr	r3, [pc, #96]	; (800c2c0 <udp_remove+0x80>)
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	687a      	ldr	r2, [r7, #4]
 800c264:	429a      	cmp	r2, r3
 800c266:	d105      	bne.n	800c274 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800c268:	4b15      	ldr	r3, [pc, #84]	; (800c2c0 <udp_remove+0x80>)
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	68db      	ldr	r3, [r3, #12]
 800c26e:	4a14      	ldr	r2, [pc, #80]	; (800c2c0 <udp_remove+0x80>)
 800c270:	6013      	str	r3, [r2, #0]
 800c272:	e017      	b.n	800c2a4 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800c274:	4b12      	ldr	r3, [pc, #72]	; (800c2c0 <udp_remove+0x80>)
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	60fb      	str	r3, [r7, #12]
 800c27a:	e010      	b.n	800c29e <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	68db      	ldr	r3, [r3, #12]
 800c280:	2b00      	cmp	r3, #0
 800c282:	d009      	beq.n	800c298 <udp_remove+0x58>
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	68db      	ldr	r3, [r3, #12]
 800c288:	687a      	ldr	r2, [r7, #4]
 800c28a:	429a      	cmp	r2, r3
 800c28c:	d104      	bne.n	800c298 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	68da      	ldr	r2, [r3, #12]
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	60da      	str	r2, [r3, #12]
        break;
 800c296:	e005      	b.n	800c2a4 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	68db      	ldr	r3, [r3, #12]
 800c29c:	60fb      	str	r3, [r7, #12]
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d1eb      	bne.n	800c27c <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800c2a4:	6879      	ldr	r1, [r7, #4]
 800c2a6:	2000      	movs	r0, #0
 800c2a8:	f7f9 f834 	bl	8005314 <memp_free>
}
 800c2ac:	3710      	adds	r7, #16
 800c2ae:	46bd      	mov	sp, r7
 800c2b0:	bd80      	pop	{r7, pc}
 800c2b2:	bf00      	nop
 800c2b4:	080138a0 	.word	0x080138a0
 800c2b8:	08013bec 	.word	0x08013bec
 800c2bc:	080138f4 	.word	0x080138f4
 800c2c0:	20007cb0 	.word	0x20007cb0

0800c2c4 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800c2c4:	b580      	push	{r7, lr}
 800c2c6:	b082      	sub	sp, #8
 800c2c8:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800c2ca:	2000      	movs	r0, #0
 800c2cc:	f7f8 ffb2 	bl	8005234 <memp_malloc>
 800c2d0:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d007      	beq.n	800c2e8 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800c2d8:	2220      	movs	r2, #32
 800c2da:	2100      	movs	r1, #0
 800c2dc:	6878      	ldr	r0, [r7, #4]
 800c2de:	f004 fa1b 	bl	8010718 <memset>
    pcb->ttl = UDP_TTL;
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	22ff      	movs	r2, #255	; 0xff
 800c2e6:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800c2e8:	687b      	ldr	r3, [r7, #4]
}
 800c2ea:	4618      	mov	r0, r3
 800c2ec:	3708      	adds	r7, #8
 800c2ee:	46bd      	mov	sp, r7
 800c2f0:	bd80      	pop	{r7, pc}
	...

0800c2f4 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c2f4:	b480      	push	{r7}
 800c2f6:	b085      	sub	sp, #20
 800c2f8:	af00      	add	r7, sp, #0
 800c2fa:	6078      	str	r0, [r7, #4]
 800c2fc:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	2b00      	cmp	r3, #0
 800c302:	d01e      	beq.n	800c342 <udp_netif_ip_addr_changed+0x4e>
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d01a      	beq.n	800c342 <udp_netif_ip_addr_changed+0x4e>
 800c30c:	683b      	ldr	r3, [r7, #0]
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d017      	beq.n	800c342 <udp_netif_ip_addr_changed+0x4e>
 800c312:	683b      	ldr	r3, [r7, #0]
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	2b00      	cmp	r3, #0
 800c318:	d013      	beq.n	800c342 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800c31a:	4b0d      	ldr	r3, [pc, #52]	; (800c350 <udp_netif_ip_addr_changed+0x5c>)
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	60fb      	str	r3, [r7, #12]
 800c320:	e00c      	b.n	800c33c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	681a      	ldr	r2, [r3, #0]
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	429a      	cmp	r2, r3
 800c32c:	d103      	bne.n	800c336 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800c32e:	683b      	ldr	r3, [r7, #0]
 800c330:	681a      	ldr	r2, [r3, #0]
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	68db      	ldr	r3, [r3, #12]
 800c33a:	60fb      	str	r3, [r7, #12]
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d1ef      	bne.n	800c322 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800c342:	bf00      	nop
 800c344:	3714      	adds	r7, #20
 800c346:	46bd      	mov	sp, r7
 800c348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c34c:	4770      	bx	lr
 800c34e:	bf00      	nop
 800c350:	20007cb0 	.word	0x20007cb0

0800c354 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 800c354:	b580      	push	{r7, lr}
 800c356:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 800c358:	4b20      	ldr	r3, [pc, #128]	; (800c3dc <dhcp_inc_pcb_refcount+0x88>)
 800c35a:	781b      	ldrb	r3, [r3, #0]
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d133      	bne.n	800c3c8 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 800c360:	4b1f      	ldr	r3, [pc, #124]	; (800c3e0 <dhcp_inc_pcb_refcount+0x8c>)
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	2b00      	cmp	r3, #0
 800c366:	d005      	beq.n	800c374 <dhcp_inc_pcb_refcount+0x20>
 800c368:	4b1e      	ldr	r3, [pc, #120]	; (800c3e4 <dhcp_inc_pcb_refcount+0x90>)
 800c36a:	22e5      	movs	r2, #229	; 0xe5
 800c36c:	491e      	ldr	r1, [pc, #120]	; (800c3e8 <dhcp_inc_pcb_refcount+0x94>)
 800c36e:	481f      	ldr	r0, [pc, #124]	; (800c3ec <dhcp_inc_pcb_refcount+0x98>)
 800c370:	f004 f9da 	bl	8010728 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 800c374:	f7ff ffa6 	bl	800c2c4 <udp_new>
 800c378:	4603      	mov	r3, r0
 800c37a:	4a19      	ldr	r2, [pc, #100]	; (800c3e0 <dhcp_inc_pcb_refcount+0x8c>)
 800c37c:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 800c37e:	4b18      	ldr	r3, [pc, #96]	; (800c3e0 <dhcp_inc_pcb_refcount+0x8c>)
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	2b00      	cmp	r3, #0
 800c384:	d102      	bne.n	800c38c <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 800c386:	f04f 33ff 	mov.w	r3, #4294967295
 800c38a:	e024      	b.n	800c3d6 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 800c38c:	4b14      	ldr	r3, [pc, #80]	; (800c3e0 <dhcp_inc_pcb_refcount+0x8c>)
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	7a5a      	ldrb	r2, [r3, #9]
 800c392:	4b13      	ldr	r3, [pc, #76]	; (800c3e0 <dhcp_inc_pcb_refcount+0x8c>)
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	f042 0220 	orr.w	r2, r2, #32
 800c39a:	b2d2      	uxtb	r2, r2
 800c39c:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 800c39e:	4b10      	ldr	r3, [pc, #64]	; (800c3e0 <dhcp_inc_pcb_refcount+0x8c>)
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	2244      	movs	r2, #68	; 0x44
 800c3a4:	4912      	ldr	r1, [pc, #72]	; (800c3f0 <dhcp_inc_pcb_refcount+0x9c>)
 800c3a6:	4618      	mov	r0, r3
 800c3a8:	f7ff fe34 	bl	800c014 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 800c3ac:	4b0c      	ldr	r3, [pc, #48]	; (800c3e0 <dhcp_inc_pcb_refcount+0x8c>)
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	2243      	movs	r2, #67	; 0x43
 800c3b2:	490f      	ldr	r1, [pc, #60]	; (800c3f0 <dhcp_inc_pcb_refcount+0x9c>)
 800c3b4:	4618      	mov	r0, r3
 800c3b6:	f7ff feb5 	bl	800c124 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 800c3ba:	4b09      	ldr	r3, [pc, #36]	; (800c3e0 <dhcp_inc_pcb_refcount+0x8c>)
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	2200      	movs	r2, #0
 800c3c0:	490c      	ldr	r1, [pc, #48]	; (800c3f4 <dhcp_inc_pcb_refcount+0xa0>)
 800c3c2:	4618      	mov	r0, r3
 800c3c4:	f7ff ff1c 	bl	800c200 <udp_recv>
  }

  dhcp_pcb_refcount++;
 800c3c8:	4b04      	ldr	r3, [pc, #16]	; (800c3dc <dhcp_inc_pcb_refcount+0x88>)
 800c3ca:	781b      	ldrb	r3, [r3, #0]
 800c3cc:	3301      	adds	r3, #1
 800c3ce:	b2da      	uxtb	r2, r3
 800c3d0:	4b02      	ldr	r3, [pc, #8]	; (800c3dc <dhcp_inc_pcb_refcount+0x88>)
 800c3d2:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 800c3d4:	2300      	movs	r3, #0
}
 800c3d6:	4618      	mov	r0, r3
 800c3d8:	bd80      	pop	{r7, pc}
 800c3da:	bf00      	nop
 800c3dc:	20007ce0 	.word	0x20007ce0
 800c3e0:	20007cdc 	.word	0x20007cdc
 800c3e4:	08013c04 	.word	0x08013c04
 800c3e8:	08013c3c 	.word	0x08013c3c
 800c3ec:	08013c64 	.word	0x08013c64
 800c3f0:	0801476c 	.word	0x0801476c
 800c3f4:	0800dc89 	.word	0x0800dc89

0800c3f8 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 800c3f8:	b580      	push	{r7, lr}
 800c3fa:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 800c3fc:	4b0e      	ldr	r3, [pc, #56]	; (800c438 <dhcp_dec_pcb_refcount+0x40>)
 800c3fe:	781b      	ldrb	r3, [r3, #0]
 800c400:	2b00      	cmp	r3, #0
 800c402:	d105      	bne.n	800c410 <dhcp_dec_pcb_refcount+0x18>
 800c404:	4b0d      	ldr	r3, [pc, #52]	; (800c43c <dhcp_dec_pcb_refcount+0x44>)
 800c406:	22ff      	movs	r2, #255	; 0xff
 800c408:	490d      	ldr	r1, [pc, #52]	; (800c440 <dhcp_dec_pcb_refcount+0x48>)
 800c40a:	480e      	ldr	r0, [pc, #56]	; (800c444 <dhcp_dec_pcb_refcount+0x4c>)
 800c40c:	f004 f98c 	bl	8010728 <iprintf>
  dhcp_pcb_refcount--;
 800c410:	4b09      	ldr	r3, [pc, #36]	; (800c438 <dhcp_dec_pcb_refcount+0x40>)
 800c412:	781b      	ldrb	r3, [r3, #0]
 800c414:	3b01      	subs	r3, #1
 800c416:	b2da      	uxtb	r2, r3
 800c418:	4b07      	ldr	r3, [pc, #28]	; (800c438 <dhcp_dec_pcb_refcount+0x40>)
 800c41a:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 800c41c:	4b06      	ldr	r3, [pc, #24]	; (800c438 <dhcp_dec_pcb_refcount+0x40>)
 800c41e:	781b      	ldrb	r3, [r3, #0]
 800c420:	2b00      	cmp	r3, #0
 800c422:	d107      	bne.n	800c434 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 800c424:	4b08      	ldr	r3, [pc, #32]	; (800c448 <dhcp_dec_pcb_refcount+0x50>)
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	4618      	mov	r0, r3
 800c42a:	f7ff ff09 	bl	800c240 <udp_remove>
    dhcp_pcb = NULL;
 800c42e:	4b06      	ldr	r3, [pc, #24]	; (800c448 <dhcp_dec_pcb_refcount+0x50>)
 800c430:	2200      	movs	r2, #0
 800c432:	601a      	str	r2, [r3, #0]
  }
}
 800c434:	bf00      	nop
 800c436:	bd80      	pop	{r7, pc}
 800c438:	20007ce0 	.word	0x20007ce0
 800c43c:	08013c04 	.word	0x08013c04
 800c440:	08013c8c 	.word	0x08013c8c
 800c444:	08013c64 	.word	0x08013c64
 800c448:	20007cdc 	.word	0x20007cdc

0800c44c <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 800c44c:	b580      	push	{r7, lr}
 800c44e:	b084      	sub	sp, #16
 800c450:	af00      	add	r7, sp, #0
 800c452:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c458:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800c45a:	210c      	movs	r1, #12
 800c45c:	68f8      	ldr	r0, [r7, #12]
 800c45e:	f001 f855 	bl	800d50c <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800c462:	4b06      	ldr	r3, [pc, #24]	; (800c47c <dhcp_handle_nak+0x30>)
 800c464:	4a05      	ldr	r2, [pc, #20]	; (800c47c <dhcp_handle_nak+0x30>)
 800c466:	4905      	ldr	r1, [pc, #20]	; (800c47c <dhcp_handle_nak+0x30>)
 800c468:	6878      	ldr	r0, [r7, #4]
 800c46a:	f7f9 f8f5 	bl	8005658 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 800c46e:	6878      	ldr	r0, [r7, #4]
 800c470:	f000 fc48 	bl	800cd04 <dhcp_discover>
}
 800c474:	bf00      	nop
 800c476:	3710      	adds	r7, #16
 800c478:	46bd      	mov	sp, r7
 800c47a:	bd80      	pop	{r7, pc}
 800c47c:	0801476c 	.word	0x0801476c

0800c480 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 800c480:	b580      	push	{r7, lr}
 800c482:	b084      	sub	sp, #16
 800c484:	af00      	add	r7, sp, #0
 800c486:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c48c:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 800c48e:	2108      	movs	r1, #8
 800c490:	68f8      	ldr	r0, [r7, #12]
 800c492:	f001 f83b 	bl	800d50c <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	331c      	adds	r3, #28
 800c49a:	2200      	movs	r2, #0
 800c49c:	4619      	mov	r1, r3
 800c49e:	6878      	ldr	r0, [r7, #4]
 800c4a0:	f002 fb3c 	bl	800eb1c <etharp_query>
 800c4a4:	4603      	mov	r3, r0
 800c4a6:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	799b      	ldrb	r3, [r3, #6]
 800c4ac:	2bff      	cmp	r3, #255	; 0xff
 800c4ae:	d005      	beq.n	800c4bc <dhcp_check+0x3c>
    dhcp->tries++;
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	799b      	ldrb	r3, [r3, #6]
 800c4b4:	3301      	adds	r3, #1
 800c4b6:	b2da      	uxtb	r2, r3
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 800c4bc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800c4c0:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800c4c2:	893b      	ldrh	r3, [r7, #8]
 800c4c4:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800c4c8:	4a06      	ldr	r2, [pc, #24]	; (800c4e4 <dhcp_check+0x64>)
 800c4ca:	fb82 1203 	smull	r1, r2, r2, r3
 800c4ce:	1152      	asrs	r2, r2, #5
 800c4d0:	17db      	asrs	r3, r3, #31
 800c4d2:	1ad3      	subs	r3, r2, r3
 800c4d4:	b29a      	uxth	r2, r3
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 800c4da:	bf00      	nop
 800c4dc:	3710      	adds	r7, #16
 800c4de:	46bd      	mov	sp, r7
 800c4e0:	bd80      	pop	{r7, pc}
 800c4e2:	bf00      	nop
 800c4e4:	10624dd3 	.word	0x10624dd3

0800c4e8 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 800c4e8:	b580      	push	{r7, lr}
 800c4ea:	b084      	sub	sp, #16
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	6078      	str	r0, [r7, #4]
 800c4f0:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4f6:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 800c4f8:	4b0c      	ldr	r3, [pc, #48]	; (800c52c <dhcp_handle_offer+0x44>)
 800c4fa:	789b      	ldrb	r3, [r3, #2]
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d011      	beq.n	800c524 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	2200      	movs	r2, #0
 800c504:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 800c506:	4b0a      	ldr	r3, [pc, #40]	; (800c530 <dhcp_handle_offer+0x48>)
 800c508:	689b      	ldr	r3, [r3, #8]
 800c50a:	4618      	mov	r0, r3
 800c50c:	f7f8 f977 	bl	80047fe <lwip_htonl>
 800c510:	4602      	mov	r2, r0
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 800c516:	683b      	ldr	r3, [r7, #0]
 800c518:	691a      	ldr	r2, [r3, #16]
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 800c51e:	6878      	ldr	r0, [r7, #4]
 800c520:	f000 f808 	bl	800c534 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 800c524:	bf00      	nop
 800c526:	3710      	adds	r7, #16
 800c528:	46bd      	mov	sp, r7
 800c52a:	bd80      	pop	{r7, pc}
 800c52c:	20007cd4 	.word	0x20007cd4
 800c530:	20007cb4 	.word	0x20007cb4

0800c534 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 800c534:	b5b0      	push	{r4, r5, r7, lr}
 800c536:	b08a      	sub	sp, #40	; 0x28
 800c538:	af02      	add	r7, sp, #8
 800c53a:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d109      	bne.n	800c556 <dhcp_select+0x22>
 800c542:	4b71      	ldr	r3, [pc, #452]	; (800c708 <dhcp_select+0x1d4>)
 800c544:	f240 1277 	movw	r2, #375	; 0x177
 800c548:	4970      	ldr	r1, [pc, #448]	; (800c70c <dhcp_select+0x1d8>)
 800c54a:	4871      	ldr	r0, [pc, #452]	; (800c710 <dhcp_select+0x1dc>)
 800c54c:	f004 f8ec 	bl	8010728 <iprintf>
 800c550:	f06f 030f 	mvn.w	r3, #15
 800c554:	e0d3      	b.n	800c6fe <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c55a:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 800c55c:	69bb      	ldr	r3, [r7, #24]
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d109      	bne.n	800c576 <dhcp_select+0x42>
 800c562:	4b69      	ldr	r3, [pc, #420]	; (800c708 <dhcp_select+0x1d4>)
 800c564:	f240 1279 	movw	r2, #377	; 0x179
 800c568:	496a      	ldr	r1, [pc, #424]	; (800c714 <dhcp_select+0x1e0>)
 800c56a:	4869      	ldr	r0, [pc, #420]	; (800c710 <dhcp_select+0x1dc>)
 800c56c:	f004 f8dc 	bl	8010728 <iprintf>
 800c570:	f06f 0305 	mvn.w	r3, #5
 800c574:	e0c3      	b.n	800c6fe <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 800c576:	2101      	movs	r1, #1
 800c578:	69b8      	ldr	r0, [r7, #24]
 800c57a:	f000 ffc7 	bl	800d50c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800c57e:	f107 030c 	add.w	r3, r7, #12
 800c582:	2203      	movs	r2, #3
 800c584:	69b9      	ldr	r1, [r7, #24]
 800c586:	6878      	ldr	r0, [r7, #4]
 800c588:	f001 fc4c 	bl	800de24 <dhcp_create_msg>
 800c58c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800c58e:	697b      	ldr	r3, [r7, #20]
 800c590:	2b00      	cmp	r3, #0
 800c592:	f000 8085 	beq.w	800c6a0 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800c596:	697b      	ldr	r3, [r7, #20]
 800c598:	685b      	ldr	r3, [r3, #4]
 800c59a:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800c59c:	89b8      	ldrh	r0, [r7, #12]
 800c59e:	693b      	ldr	r3, [r7, #16]
 800c5a0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800c5a4:	2302      	movs	r3, #2
 800c5a6:	2239      	movs	r2, #57	; 0x39
 800c5a8:	f000 ffca 	bl	800d540 <dhcp_option>
 800c5ac:	4603      	mov	r3, r0
 800c5ae:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800c5b0:	89b8      	ldrh	r0, [r7, #12]
 800c5b2:	693b      	ldr	r3, [r7, #16]
 800c5b4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c5bc:	461a      	mov	r2, r3
 800c5be:	f001 f819 	bl	800d5f4 <dhcp_option_short>
 800c5c2:	4603      	mov	r3, r0
 800c5c4:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800c5c6:	89b8      	ldrh	r0, [r7, #12]
 800c5c8:	693b      	ldr	r3, [r7, #16]
 800c5ca:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800c5ce:	2304      	movs	r3, #4
 800c5d0:	2232      	movs	r2, #50	; 0x32
 800c5d2:	f000 ffb5 	bl	800d540 <dhcp_option>
 800c5d6:	4603      	mov	r3, r0
 800c5d8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800c5da:	89bc      	ldrh	r4, [r7, #12]
 800c5dc:	693b      	ldr	r3, [r7, #16]
 800c5de:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800c5e2:	69bb      	ldr	r3, [r7, #24]
 800c5e4:	69db      	ldr	r3, [r3, #28]
 800c5e6:	4618      	mov	r0, r3
 800c5e8:	f7f8 f909 	bl	80047fe <lwip_htonl>
 800c5ec:	4603      	mov	r3, r0
 800c5ee:	461a      	mov	r2, r3
 800c5f0:	4629      	mov	r1, r5
 800c5f2:	4620      	mov	r0, r4
 800c5f4:	f001 f830 	bl	800d658 <dhcp_option_long>
 800c5f8:	4603      	mov	r3, r0
 800c5fa:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 800c5fc:	89b8      	ldrh	r0, [r7, #12]
 800c5fe:	693b      	ldr	r3, [r7, #16]
 800c600:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800c604:	2304      	movs	r3, #4
 800c606:	2236      	movs	r2, #54	; 0x36
 800c608:	f000 ff9a 	bl	800d540 <dhcp_option>
 800c60c:	4603      	mov	r3, r0
 800c60e:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 800c610:	89bc      	ldrh	r4, [r7, #12]
 800c612:	693b      	ldr	r3, [r7, #16]
 800c614:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800c618:	69bb      	ldr	r3, [r7, #24]
 800c61a:	699b      	ldr	r3, [r3, #24]
 800c61c:	4618      	mov	r0, r3
 800c61e:	f7f8 f8ee 	bl	80047fe <lwip_htonl>
 800c622:	4603      	mov	r3, r0
 800c624:	461a      	mov	r2, r3
 800c626:	4629      	mov	r1, r5
 800c628:	4620      	mov	r0, r4
 800c62a:	f001 f815 	bl	800d658 <dhcp_option_long>
 800c62e:	4603      	mov	r3, r0
 800c630:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800c632:	89b8      	ldrh	r0, [r7, #12]
 800c634:	693b      	ldr	r3, [r7, #16]
 800c636:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800c63a:	2303      	movs	r3, #3
 800c63c:	2237      	movs	r2, #55	; 0x37
 800c63e:	f000 ff7f 	bl	800d540 <dhcp_option>
 800c642:	4603      	mov	r3, r0
 800c644:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800c646:	2300      	movs	r3, #0
 800c648:	77bb      	strb	r3, [r7, #30]
 800c64a:	e00e      	b.n	800c66a <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800c64c:	89b8      	ldrh	r0, [r7, #12]
 800c64e:	693b      	ldr	r3, [r7, #16]
 800c650:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800c654:	7fbb      	ldrb	r3, [r7, #30]
 800c656:	4a30      	ldr	r2, [pc, #192]	; (800c718 <dhcp_select+0x1e4>)
 800c658:	5cd3      	ldrb	r3, [r2, r3]
 800c65a:	461a      	mov	r2, r3
 800c65c:	f000 ffa4 	bl	800d5a8 <dhcp_option_byte>
 800c660:	4603      	mov	r3, r0
 800c662:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800c664:	7fbb      	ldrb	r3, [r7, #30]
 800c666:	3301      	adds	r3, #1
 800c668:	77bb      	strb	r3, [r7, #30]
 800c66a:	7fbb      	ldrb	r3, [r7, #30]
 800c66c:	2b02      	cmp	r3, #2
 800c66e:	d9ed      	bls.n	800c64c <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800c670:	89b8      	ldrh	r0, [r7, #12]
 800c672:	693b      	ldr	r3, [r7, #16]
 800c674:	33f0      	adds	r3, #240	; 0xf0
 800c676:	697a      	ldr	r2, [r7, #20]
 800c678:	4619      	mov	r1, r3
 800c67a:	f001 fca9 	bl	800dfd0 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800c67e:	4b27      	ldr	r3, [pc, #156]	; (800c71c <dhcp_select+0x1e8>)
 800c680:	6818      	ldr	r0, [r3, #0]
 800c682:	4b27      	ldr	r3, [pc, #156]	; (800c720 <dhcp_select+0x1ec>)
 800c684:	9301      	str	r3, [sp, #4]
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	9300      	str	r3, [sp, #0]
 800c68a:	2343      	movs	r3, #67	; 0x43
 800c68c:	4a25      	ldr	r2, [pc, #148]	; (800c724 <dhcp_select+0x1f0>)
 800c68e:	6979      	ldr	r1, [r7, #20]
 800c690:	f7ff fbda 	bl	800be48 <udp_sendto_if_src>
 800c694:	4603      	mov	r3, r0
 800c696:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800c698:	6978      	ldr	r0, [r7, #20]
 800c69a:	f7f9 fc9d 	bl	8005fd8 <pbuf_free>
 800c69e:	e001      	b.n	800c6a4 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800c6a0:	23ff      	movs	r3, #255	; 0xff
 800c6a2:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800c6a4:	69bb      	ldr	r3, [r7, #24]
 800c6a6:	799b      	ldrb	r3, [r3, #6]
 800c6a8:	2bff      	cmp	r3, #255	; 0xff
 800c6aa:	d005      	beq.n	800c6b8 <dhcp_select+0x184>
    dhcp->tries++;
 800c6ac:	69bb      	ldr	r3, [r7, #24]
 800c6ae:	799b      	ldrb	r3, [r3, #6]
 800c6b0:	3301      	adds	r3, #1
 800c6b2:	b2da      	uxtb	r2, r3
 800c6b4:	69bb      	ldr	r3, [r7, #24]
 800c6b6:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800c6b8:	69bb      	ldr	r3, [r7, #24]
 800c6ba:	799b      	ldrb	r3, [r3, #6]
 800c6bc:	2b05      	cmp	r3, #5
 800c6be:	d80d      	bhi.n	800c6dc <dhcp_select+0x1a8>
 800c6c0:	69bb      	ldr	r3, [r7, #24]
 800c6c2:	799b      	ldrb	r3, [r3, #6]
 800c6c4:	461a      	mov	r2, r3
 800c6c6:	2301      	movs	r3, #1
 800c6c8:	4093      	lsls	r3, r2
 800c6ca:	b29b      	uxth	r3, r3
 800c6cc:	461a      	mov	r2, r3
 800c6ce:	0152      	lsls	r2, r2, #5
 800c6d0:	1ad2      	subs	r2, r2, r3
 800c6d2:	0092      	lsls	r2, r2, #2
 800c6d4:	4413      	add	r3, r2
 800c6d6:	00db      	lsls	r3, r3, #3
 800c6d8:	b29b      	uxth	r3, r3
 800c6da:	e001      	b.n	800c6e0 <dhcp_select+0x1ac>
 800c6dc:	f64e 2360 	movw	r3, #60000	; 0xea60
 800c6e0:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800c6e2:	89fb      	ldrh	r3, [r7, #14]
 800c6e4:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800c6e8:	4a0f      	ldr	r2, [pc, #60]	; (800c728 <dhcp_select+0x1f4>)
 800c6ea:	fb82 1203 	smull	r1, r2, r2, r3
 800c6ee:	1152      	asrs	r2, r2, #5
 800c6f0:	17db      	asrs	r3, r3, #31
 800c6f2:	1ad3      	subs	r3, r2, r3
 800c6f4:	b29a      	uxth	r2, r3
 800c6f6:	69bb      	ldr	r3, [r7, #24]
 800c6f8:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800c6fa:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800c6fe:	4618      	mov	r0, r3
 800c700:	3720      	adds	r7, #32
 800c702:	46bd      	mov	sp, r7
 800c704:	bdb0      	pop	{r4, r5, r7, pc}
 800c706:	bf00      	nop
 800c708:	08013c04 	.word	0x08013c04
 800c70c:	08013cb0 	.word	0x08013cb0
 800c710:	08013c64 	.word	0x08013c64
 800c714:	08013ccc 	.word	0x08013ccc
 800c718:	2000002c 	.word	0x2000002c
 800c71c:	20007cdc 	.word	0x20007cdc
 800c720:	0801476c 	.word	0x0801476c
 800c724:	08014770 	.word	0x08014770
 800c728:	10624dd3 	.word	0x10624dd3

0800c72c <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 800c72c:	b580      	push	{r7, lr}
 800c72e:	b082      	sub	sp, #8
 800c730:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 800c732:	4b27      	ldr	r3, [pc, #156]	; (800c7d0 <dhcp_coarse_tmr+0xa4>)
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	607b      	str	r3, [r7, #4]
 800c738:	e042      	b.n	800c7c0 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c73e:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 800c740:	683b      	ldr	r3, [r7, #0]
 800c742:	2b00      	cmp	r3, #0
 800c744:	d039      	beq.n	800c7ba <dhcp_coarse_tmr+0x8e>
 800c746:	683b      	ldr	r3, [r7, #0]
 800c748:	795b      	ldrb	r3, [r3, #5]
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d035      	beq.n	800c7ba <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 800c74e:	683b      	ldr	r3, [r7, #0]
 800c750:	8a9b      	ldrh	r3, [r3, #20]
 800c752:	2b00      	cmp	r3, #0
 800c754:	d012      	beq.n	800c77c <dhcp_coarse_tmr+0x50>
 800c756:	683b      	ldr	r3, [r7, #0]
 800c758:	8a5b      	ldrh	r3, [r3, #18]
 800c75a:	3301      	adds	r3, #1
 800c75c:	b29a      	uxth	r2, r3
 800c75e:	683b      	ldr	r3, [r7, #0]
 800c760:	825a      	strh	r2, [r3, #18]
 800c762:	683b      	ldr	r3, [r7, #0]
 800c764:	8a5a      	ldrh	r2, [r3, #18]
 800c766:	683b      	ldr	r3, [r7, #0]
 800c768:	8a9b      	ldrh	r3, [r3, #20]
 800c76a:	429a      	cmp	r2, r3
 800c76c:	d106      	bne.n	800c77c <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 800c76e:	6878      	ldr	r0, [r7, #4]
 800c770:	f000 fe32 	bl	800d3d8 <dhcp_release_and_stop>
        dhcp_start(netif);
 800c774:	6878      	ldr	r0, [r7, #4]
 800c776:	f000 f969 	bl	800ca4c <dhcp_start>
 800c77a:	e01e      	b.n	800c7ba <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 800c77c:	683b      	ldr	r3, [r7, #0]
 800c77e:	8a1b      	ldrh	r3, [r3, #16]
 800c780:	2b00      	cmp	r3, #0
 800c782:	d00b      	beq.n	800c79c <dhcp_coarse_tmr+0x70>
 800c784:	683b      	ldr	r3, [r7, #0]
 800c786:	8a1b      	ldrh	r3, [r3, #16]
 800c788:	1e5a      	subs	r2, r3, #1
 800c78a:	b291      	uxth	r1, r2
 800c78c:	683a      	ldr	r2, [r7, #0]
 800c78e:	8211      	strh	r1, [r2, #16]
 800c790:	2b01      	cmp	r3, #1
 800c792:	d103      	bne.n	800c79c <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 800c794:	6878      	ldr	r0, [r7, #4]
 800c796:	f000 f8c6 	bl	800c926 <dhcp_t2_timeout>
 800c79a:	e00e      	b.n	800c7ba <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 800c79c:	683b      	ldr	r3, [r7, #0]
 800c79e:	89db      	ldrh	r3, [r3, #14]
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d00a      	beq.n	800c7ba <dhcp_coarse_tmr+0x8e>
 800c7a4:	683b      	ldr	r3, [r7, #0]
 800c7a6:	89db      	ldrh	r3, [r3, #14]
 800c7a8:	1e5a      	subs	r2, r3, #1
 800c7aa:	b291      	uxth	r1, r2
 800c7ac:	683a      	ldr	r2, [r7, #0]
 800c7ae:	81d1      	strh	r1, [r2, #14]
 800c7b0:	2b01      	cmp	r3, #1
 800c7b2:	d102      	bne.n	800c7ba <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 800c7b4:	6878      	ldr	r0, [r7, #4]
 800c7b6:	f000 f888 	bl	800c8ca <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	607b      	str	r3, [r7, #4]
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d1b9      	bne.n	800c73a <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 800c7c6:	bf00      	nop
 800c7c8:	bf00      	nop
 800c7ca:	3708      	adds	r7, #8
 800c7cc:	46bd      	mov	sp, r7
 800c7ce:	bd80      	pop	{r7, pc}
 800c7d0:	20007c48 	.word	0x20007c48

0800c7d4 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 800c7d4:	b580      	push	{r7, lr}
 800c7d6:	b082      	sub	sp, #8
 800c7d8:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 800c7da:	4b16      	ldr	r3, [pc, #88]	; (800c834 <dhcp_fine_tmr+0x60>)
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	607b      	str	r3, [r7, #4]
 800c7e0:	e020      	b.n	800c824 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7e6:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 800c7e8:	683b      	ldr	r3, [r7, #0]
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d017      	beq.n	800c81e <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 800c7ee:	683b      	ldr	r3, [r7, #0]
 800c7f0:	891b      	ldrh	r3, [r3, #8]
 800c7f2:	2b01      	cmp	r3, #1
 800c7f4:	d906      	bls.n	800c804 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 800c7f6:	683b      	ldr	r3, [r7, #0]
 800c7f8:	891b      	ldrh	r3, [r3, #8]
 800c7fa:	3b01      	subs	r3, #1
 800c7fc:	b29a      	uxth	r2, r3
 800c7fe:	683b      	ldr	r3, [r7, #0]
 800c800:	811a      	strh	r2, [r3, #8]
 800c802:	e00c      	b.n	800c81e <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 800c804:	683b      	ldr	r3, [r7, #0]
 800c806:	891b      	ldrh	r3, [r3, #8]
 800c808:	2b01      	cmp	r3, #1
 800c80a:	d108      	bne.n	800c81e <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 800c80c:	683b      	ldr	r3, [r7, #0]
 800c80e:	891b      	ldrh	r3, [r3, #8]
 800c810:	3b01      	subs	r3, #1
 800c812:	b29a      	uxth	r2, r3
 800c814:	683b      	ldr	r3, [r7, #0]
 800c816:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 800c818:	6878      	ldr	r0, [r7, #4]
 800c81a:	f000 f80d 	bl	800c838 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	607b      	str	r3, [r7, #4]
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	2b00      	cmp	r3, #0
 800c828:	d1db      	bne.n	800c7e2 <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 800c82a:	bf00      	nop
 800c82c:	bf00      	nop
 800c82e:	3708      	adds	r7, #8
 800c830:	46bd      	mov	sp, r7
 800c832:	bd80      	pop	{r7, pc}
 800c834:	20007c48 	.word	0x20007c48

0800c838 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 800c838:	b580      	push	{r7, lr}
 800c83a:	b084      	sub	sp, #16
 800c83c:	af00      	add	r7, sp, #0
 800c83e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c844:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	795b      	ldrb	r3, [r3, #5]
 800c84a:	2b0c      	cmp	r3, #12
 800c84c:	d003      	beq.n	800c856 <dhcp_timeout+0x1e>
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	795b      	ldrb	r3, [r3, #5]
 800c852:	2b06      	cmp	r3, #6
 800c854:	d103      	bne.n	800c85e <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 800c856:	6878      	ldr	r0, [r7, #4]
 800c858:	f000 fa54 	bl	800cd04 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 800c85c:	e031      	b.n	800c8c2 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	795b      	ldrb	r3, [r3, #5]
 800c862:	2b01      	cmp	r3, #1
 800c864:	d10e      	bne.n	800c884 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	799b      	ldrb	r3, [r3, #6]
 800c86a:	2b05      	cmp	r3, #5
 800c86c:	d803      	bhi.n	800c876 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 800c86e:	6878      	ldr	r0, [r7, #4]
 800c870:	f7ff fe60 	bl	800c534 <dhcp_select>
}
 800c874:	e025      	b.n	800c8c2 <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 800c876:	6878      	ldr	r0, [r7, #4]
 800c878:	f000 fdae 	bl	800d3d8 <dhcp_release_and_stop>
      dhcp_start(netif);
 800c87c:	6878      	ldr	r0, [r7, #4]
 800c87e:	f000 f8e5 	bl	800ca4c <dhcp_start>
}
 800c882:	e01e      	b.n	800c8c2 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	795b      	ldrb	r3, [r3, #5]
 800c888:	2b08      	cmp	r3, #8
 800c88a:	d10b      	bne.n	800c8a4 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	799b      	ldrb	r3, [r3, #6]
 800c890:	2b01      	cmp	r3, #1
 800c892:	d803      	bhi.n	800c89c <dhcp_timeout+0x64>
      dhcp_check(netif);
 800c894:	6878      	ldr	r0, [r7, #4]
 800c896:	f7ff fdf3 	bl	800c480 <dhcp_check>
}
 800c89a:	e012      	b.n	800c8c2 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 800c89c:	6878      	ldr	r0, [r7, #4]
 800c89e:	f000 fad3 	bl	800ce48 <dhcp_bind>
}
 800c8a2:	e00e      	b.n	800c8c2 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	795b      	ldrb	r3, [r3, #5]
 800c8a8:	2b03      	cmp	r3, #3
 800c8aa:	d10a      	bne.n	800c8c2 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	799b      	ldrb	r3, [r3, #6]
 800c8b0:	2b01      	cmp	r3, #1
 800c8b2:	d803      	bhi.n	800c8bc <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 800c8b4:	6878      	ldr	r0, [r7, #4]
 800c8b6:	f000 fcd9 	bl	800d26c <dhcp_reboot>
}
 800c8ba:	e002      	b.n	800c8c2 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 800c8bc:	6878      	ldr	r0, [r7, #4]
 800c8be:	f000 fa21 	bl	800cd04 <dhcp_discover>
}
 800c8c2:	bf00      	nop
 800c8c4:	3710      	adds	r7, #16
 800c8c6:	46bd      	mov	sp, r7
 800c8c8:	bd80      	pop	{r7, pc}

0800c8ca <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 800c8ca:	b580      	push	{r7, lr}
 800c8cc:	b084      	sub	sp, #16
 800c8ce:	af00      	add	r7, sp, #0
 800c8d0:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8d6:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	795b      	ldrb	r3, [r3, #5]
 800c8dc:	2b01      	cmp	r3, #1
 800c8de:	d007      	beq.n	800c8f0 <dhcp_t1_timeout+0x26>
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	795b      	ldrb	r3, [r3, #5]
 800c8e4:	2b0a      	cmp	r3, #10
 800c8e6:	d003      	beq.n	800c8f0 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800c8ec:	2b05      	cmp	r3, #5
 800c8ee:	d116      	bne.n	800c91e <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 800c8f0:	6878      	ldr	r0, [r7, #4]
 800c8f2:	f000 fb83 	bl	800cffc <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	899b      	ldrh	r3, [r3, #12]
 800c8fa:	461a      	mov	r2, r3
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	8a5b      	ldrh	r3, [r3, #18]
 800c900:	1ad3      	subs	r3, r2, r3
 800c902:	2b01      	cmp	r3, #1
 800c904:	dd0b      	ble.n	800c91e <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	899b      	ldrh	r3, [r3, #12]
 800c90a:	461a      	mov	r2, r3
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	8a5b      	ldrh	r3, [r3, #18]
 800c910:	1ad3      	subs	r3, r2, r3
 800c912:	0fda      	lsrs	r2, r3, #31
 800c914:	4413      	add	r3, r2
 800c916:	105b      	asrs	r3, r3, #1
 800c918:	b29a      	uxth	r2, r3
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	81da      	strh	r2, [r3, #14]
    }
  }
}
 800c91e:	bf00      	nop
 800c920:	3710      	adds	r7, #16
 800c922:	46bd      	mov	sp, r7
 800c924:	bd80      	pop	{r7, pc}

0800c926 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 800c926:	b580      	push	{r7, lr}
 800c928:	b084      	sub	sp, #16
 800c92a:	af00      	add	r7, sp, #0
 800c92c:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c932:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	795b      	ldrb	r3, [r3, #5]
 800c938:	2b01      	cmp	r3, #1
 800c93a:	d00b      	beq.n	800c954 <dhcp_t2_timeout+0x2e>
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	795b      	ldrb	r3, [r3, #5]
 800c940:	2b0a      	cmp	r3, #10
 800c942:	d007      	beq.n	800c954 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800c948:	2b05      	cmp	r3, #5
 800c94a:	d003      	beq.n	800c954 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	795b      	ldrb	r3, [r3, #5]
 800c950:	2b04      	cmp	r3, #4
 800c952:	d116      	bne.n	800c982 <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 800c954:	6878      	ldr	r0, [r7, #4]
 800c956:	f000 fbed 	bl	800d134 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	8a9b      	ldrh	r3, [r3, #20]
 800c95e:	461a      	mov	r2, r3
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	8a5b      	ldrh	r3, [r3, #18]
 800c964:	1ad3      	subs	r3, r2, r3
 800c966:	2b01      	cmp	r3, #1
 800c968:	dd0b      	ble.n	800c982 <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	8a9b      	ldrh	r3, [r3, #20]
 800c96e:	461a      	mov	r2, r3
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	8a5b      	ldrh	r3, [r3, #18]
 800c974:	1ad3      	subs	r3, r2, r3
 800c976:	0fda      	lsrs	r2, r3, #31
 800c978:	4413      	add	r3, r2
 800c97a:	105b      	asrs	r3, r3, #1
 800c97c:	b29a      	uxth	r2, r3
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	821a      	strh	r2, [r3, #16]
    }
  }
}
 800c982:	bf00      	nop
 800c984:	3710      	adds	r7, #16
 800c986:	46bd      	mov	sp, r7
 800c988:	bd80      	pop	{r7, pc}
	...

0800c98c <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 800c98c:	b580      	push	{r7, lr}
 800c98e:	b084      	sub	sp, #16
 800c990:	af00      	add	r7, sp, #0
 800c992:	6078      	str	r0, [r7, #4]
 800c994:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c99a:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	2200      	movs	r2, #0
 800c9a0:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	2200      	movs	r2, #0
 800c9a6:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 800c9a8:	4b26      	ldr	r3, [pc, #152]	; (800ca44 <dhcp_handle_ack+0xb8>)
 800c9aa:	78db      	ldrb	r3, [r3, #3]
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d003      	beq.n	800c9b8 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 800c9b0:	4b25      	ldr	r3, [pc, #148]	; (800ca48 <dhcp_handle_ack+0xbc>)
 800c9b2:	68da      	ldr	r2, [r3, #12]
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 800c9b8:	4b22      	ldr	r3, [pc, #136]	; (800ca44 <dhcp_handle_ack+0xb8>)
 800c9ba:	791b      	ldrb	r3, [r3, #4]
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d004      	beq.n	800c9ca <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 800c9c0:	4b21      	ldr	r3, [pc, #132]	; (800ca48 <dhcp_handle_ack+0xbc>)
 800c9c2:	691a      	ldr	r2, [r3, #16]
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	62da      	str	r2, [r3, #44]	; 0x2c
 800c9c8:	e004      	b.n	800c9d4 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9ce:	085a      	lsrs	r2, r3, #1
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 800c9d4:	4b1b      	ldr	r3, [pc, #108]	; (800ca44 <dhcp_handle_ack+0xb8>)
 800c9d6:	795b      	ldrb	r3, [r3, #5]
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d004      	beq.n	800c9e6 <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 800c9dc:	4b1a      	ldr	r3, [pc, #104]	; (800ca48 <dhcp_handle_ack+0xbc>)
 800c9de:	695a      	ldr	r2, [r3, #20]
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	631a      	str	r2, [r3, #48]	; 0x30
 800c9e4:	e007      	b.n	800c9f6 <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c9ea:	4613      	mov	r3, r2
 800c9ec:	00db      	lsls	r3, r3, #3
 800c9ee:	1a9b      	subs	r3, r3, r2
 800c9f0:	08da      	lsrs	r2, r3, #3
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 800c9f6:	683b      	ldr	r3, [r7, #0]
 800c9f8:	691a      	ldr	r2, [r3, #16]
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 800c9fe:	4b11      	ldr	r3, [pc, #68]	; (800ca44 <dhcp_handle_ack+0xb8>)
 800ca00:	799b      	ldrb	r3, [r3, #6]
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d00b      	beq.n	800ca1e <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 800ca06:	4b10      	ldr	r3, [pc, #64]	; (800ca48 <dhcp_handle_ack+0xbc>)
 800ca08:	699b      	ldr	r3, [r3, #24]
 800ca0a:	4618      	mov	r0, r3
 800ca0c:	f7f7 fef7 	bl	80047fe <lwip_htonl>
 800ca10:	4602      	mov	r2, r0
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	2201      	movs	r2, #1
 800ca1a:	71da      	strb	r2, [r3, #7]
 800ca1c:	e002      	b.n	800ca24 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	2200      	movs	r2, #0
 800ca22:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 800ca24:	4b07      	ldr	r3, [pc, #28]	; (800ca44 <dhcp_handle_ack+0xb8>)
 800ca26:	79db      	ldrb	r3, [r3, #7]
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d007      	beq.n	800ca3c <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 800ca2c:	4b06      	ldr	r3, [pc, #24]	; (800ca48 <dhcp_handle_ack+0xbc>)
 800ca2e:	69db      	ldr	r3, [r3, #28]
 800ca30:	4618      	mov	r0, r3
 800ca32:	f7f7 fee4 	bl	80047fe <lwip_htonl>
 800ca36:	4602      	mov	r2, r0
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 800ca3c:	bf00      	nop
 800ca3e:	3710      	adds	r7, #16
 800ca40:	46bd      	mov	sp, r7
 800ca42:	bd80      	pop	{r7, pc}
 800ca44:	20007cd4 	.word	0x20007cd4
 800ca48:	20007cb4 	.word	0x20007cb4

0800ca4c <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 800ca4c:	b580      	push	{r7, lr}
 800ca4e:	b084      	sub	sp, #16
 800ca50:	af00      	add	r7, sp, #0
 800ca52:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d109      	bne.n	800ca6e <dhcp_start+0x22>
 800ca5a:	4b37      	ldr	r3, [pc, #220]	; (800cb38 <dhcp_start+0xec>)
 800ca5c:	f240 22e7 	movw	r2, #743	; 0x2e7
 800ca60:	4936      	ldr	r1, [pc, #216]	; (800cb3c <dhcp_start+0xf0>)
 800ca62:	4837      	ldr	r0, [pc, #220]	; (800cb40 <dhcp_start+0xf4>)
 800ca64:	f003 fe60 	bl	8010728 <iprintf>
 800ca68:	f06f 030f 	mvn.w	r3, #15
 800ca6c:	e060      	b.n	800cb30 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ca74:	f003 0301 	and.w	r3, r3, #1
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d109      	bne.n	800ca90 <dhcp_start+0x44>
 800ca7c:	4b2e      	ldr	r3, [pc, #184]	; (800cb38 <dhcp_start+0xec>)
 800ca7e:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 800ca82:	4930      	ldr	r1, [pc, #192]	; (800cb44 <dhcp_start+0xf8>)
 800ca84:	482e      	ldr	r0, [pc, #184]	; (800cb40 <dhcp_start+0xf4>)
 800ca86:	f003 fe4f 	bl	8010728 <iprintf>
 800ca8a:	f06f 030f 	mvn.w	r3, #15
 800ca8e:	e04f      	b.n	800cb30 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca94:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ca9a:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 800ca9e:	d202      	bcs.n	800caa6 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 800caa0:	f04f 33ff 	mov.w	r3, #4294967295
 800caa4:	e044      	b.n	800cb30 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d10d      	bne.n	800cac8 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 800caac:	2034      	movs	r0, #52	; 0x34
 800caae:	f7f8 fa31 	bl	8004f14 <mem_malloc>
 800cab2:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d102      	bne.n	800cac0 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 800caba:	f04f 33ff 	mov.w	r3, #4294967295
 800cabe:	e037      	b.n	800cb30 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	68fa      	ldr	r2, [r7, #12]
 800cac4:	625a      	str	r2, [r3, #36]	; 0x24
 800cac6:	e005      	b.n	800cad4 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	791b      	ldrb	r3, [r3, #4]
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d001      	beq.n	800cad4 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800cad0:	f7ff fc92 	bl	800c3f8 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 800cad4:	2234      	movs	r2, #52	; 0x34
 800cad6:	2100      	movs	r1, #0
 800cad8:	68f8      	ldr	r0, [r7, #12]
 800cada:	f003 fe1d 	bl	8010718 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 800cade:	f7ff fc39 	bl	800c354 <dhcp_inc_pcb_refcount>
 800cae2:	4603      	mov	r3, r0
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d002      	beq.n	800caee <dhcp_start+0xa2>
    return ERR_MEM;
 800cae8:	f04f 33ff 	mov.w	r3, #4294967295
 800caec:	e020      	b.n	800cb30 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	2201      	movs	r2, #1
 800caf2:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800cafa:	f003 0304 	and.w	r3, r3, #4
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d105      	bne.n	800cb0e <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 800cb02:	2102      	movs	r1, #2
 800cb04:	68f8      	ldr	r0, [r7, #12]
 800cb06:	f000 fd01 	bl	800d50c <dhcp_set_state>
    return ERR_OK;
 800cb0a:	2300      	movs	r3, #0
 800cb0c:	e010      	b.n	800cb30 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 800cb0e:	6878      	ldr	r0, [r7, #4]
 800cb10:	f000 f8f8 	bl	800cd04 <dhcp_discover>
 800cb14:	4603      	mov	r3, r0
 800cb16:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 800cb18:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d005      	beq.n	800cb2c <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 800cb20:	6878      	ldr	r0, [r7, #4]
 800cb22:	f000 fc59 	bl	800d3d8 <dhcp_release_and_stop>
    return ERR_MEM;
 800cb26:	f04f 33ff 	mov.w	r3, #4294967295
 800cb2a:	e001      	b.n	800cb30 <dhcp_start+0xe4>
  }
  return result;
 800cb2c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800cb30:	4618      	mov	r0, r3
 800cb32:	3710      	adds	r7, #16
 800cb34:	46bd      	mov	sp, r7
 800cb36:	bd80      	pop	{r7, pc}
 800cb38:	08013c04 	.word	0x08013c04
 800cb3c:	08013ce8 	.word	0x08013ce8
 800cb40:	08013c64 	.word	0x08013c64
 800cb44:	08013d2c 	.word	0x08013d2c

0800cb48 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 800cb48:	b580      	push	{r7, lr}
 800cb4a:	b084      	sub	sp, #16
 800cb4c:	af00      	add	r7, sp, #0
 800cb4e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb54:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d025      	beq.n	800cba8 <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	795b      	ldrb	r3, [r3, #5]
 800cb60:	2b0a      	cmp	r3, #10
 800cb62:	d008      	beq.n	800cb76 <dhcp_network_changed+0x2e>
 800cb64:	2b0a      	cmp	r3, #10
 800cb66:	dc0d      	bgt.n	800cb84 <dhcp_network_changed+0x3c>
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d01f      	beq.n	800cbac <dhcp_network_changed+0x64>
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	db09      	blt.n	800cb84 <dhcp_network_changed+0x3c>
 800cb70:	3b03      	subs	r3, #3
 800cb72:	2b02      	cmp	r3, #2
 800cb74:	d806      	bhi.n	800cb84 <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	2200      	movs	r2, #0
 800cb7a:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 800cb7c:	6878      	ldr	r0, [r7, #4]
 800cb7e:	f000 fb75 	bl	800d26c <dhcp_reboot>
      break;
 800cb82:	e014      	b.n	800cbae <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	795b      	ldrb	r3, [r3, #5]
 800cb88:	2b0c      	cmp	r3, #12
 800cb8a:	d906      	bls.n	800cb9a <dhcp_network_changed+0x52>
 800cb8c:	4b09      	ldr	r3, [pc, #36]	; (800cbb4 <dhcp_network_changed+0x6c>)
 800cb8e:	f240 326d 	movw	r2, #877	; 0x36d
 800cb92:	4909      	ldr	r1, [pc, #36]	; (800cbb8 <dhcp_network_changed+0x70>)
 800cb94:	4809      	ldr	r0, [pc, #36]	; (800cbbc <dhcp_network_changed+0x74>)
 800cb96:	f003 fdc7 	bl	8010728 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	2200      	movs	r2, #0
 800cb9e:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 800cba0:	6878      	ldr	r0, [r7, #4]
 800cba2:	f000 f8af 	bl	800cd04 <dhcp_discover>
      break;
 800cba6:	e002      	b.n	800cbae <dhcp_network_changed+0x66>
    return;
 800cba8:	bf00      	nop
 800cbaa:	e000      	b.n	800cbae <dhcp_network_changed+0x66>
      break;
 800cbac:	bf00      	nop
  }
}
 800cbae:	3710      	adds	r7, #16
 800cbb0:	46bd      	mov	sp, r7
 800cbb2:	bd80      	pop	{r7, pc}
 800cbb4:	08013c04 	.word	0x08013c04
 800cbb8:	08013d50 	.word	0x08013d50
 800cbbc:	08013c64 	.word	0x08013c64

0800cbc0 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 800cbc0:	b580      	push	{r7, lr}
 800cbc2:	b084      	sub	sp, #16
 800cbc4:	af00      	add	r7, sp, #0
 800cbc6:	6078      	str	r0, [r7, #4]
 800cbc8:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d107      	bne.n	800cbe0 <dhcp_arp_reply+0x20>
 800cbd0:	4b0e      	ldr	r3, [pc, #56]	; (800cc0c <dhcp_arp_reply+0x4c>)
 800cbd2:	f240 328b 	movw	r2, #907	; 0x38b
 800cbd6:	490e      	ldr	r1, [pc, #56]	; (800cc10 <dhcp_arp_reply+0x50>)
 800cbd8:	480e      	ldr	r0, [pc, #56]	; (800cc14 <dhcp_arp_reply+0x54>)
 800cbda:	f003 fda5 	bl	8010728 <iprintf>
 800cbde:	e012      	b.n	800cc06 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbe4:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d00c      	beq.n	800cc06 <dhcp_arp_reply+0x46>
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	795b      	ldrb	r3, [r3, #5]
 800cbf0:	2b08      	cmp	r3, #8
 800cbf2:	d108      	bne.n	800cc06 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 800cbf4:	683b      	ldr	r3, [r7, #0]
 800cbf6:	681a      	ldr	r2, [r3, #0]
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	69db      	ldr	r3, [r3, #28]
 800cbfc:	429a      	cmp	r2, r3
 800cbfe:	d102      	bne.n	800cc06 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 800cc00:	6878      	ldr	r0, [r7, #4]
 800cc02:	f000 f809 	bl	800cc18 <dhcp_decline>
    }
  }
}
 800cc06:	3710      	adds	r7, #16
 800cc08:	46bd      	mov	sp, r7
 800cc0a:	bd80      	pop	{r7, pc}
 800cc0c:	08013c04 	.word	0x08013c04
 800cc10:	08013ce8 	.word	0x08013ce8
 800cc14:	08013c64 	.word	0x08013c64

0800cc18 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 800cc18:	b5b0      	push	{r4, r5, r7, lr}
 800cc1a:	b08a      	sub	sp, #40	; 0x28
 800cc1c:	af02      	add	r7, sp, #8
 800cc1e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc24:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800cc26:	210c      	movs	r1, #12
 800cc28:	69b8      	ldr	r0, [r7, #24]
 800cc2a:	f000 fc6f 	bl	800d50c <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 800cc2e:	f107 030c 	add.w	r3, r7, #12
 800cc32:	2204      	movs	r2, #4
 800cc34:	69b9      	ldr	r1, [r7, #24]
 800cc36:	6878      	ldr	r0, [r7, #4]
 800cc38:	f001 f8f4 	bl	800de24 <dhcp_create_msg>
 800cc3c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800cc3e:	697b      	ldr	r3, [r7, #20]
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d035      	beq.n	800ccb0 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800cc44:	697b      	ldr	r3, [r7, #20]
 800cc46:	685b      	ldr	r3, [r3, #4]
 800cc48:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800cc4a:	89b8      	ldrh	r0, [r7, #12]
 800cc4c:	693b      	ldr	r3, [r7, #16]
 800cc4e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800cc52:	2304      	movs	r3, #4
 800cc54:	2232      	movs	r2, #50	; 0x32
 800cc56:	f000 fc73 	bl	800d540 <dhcp_option>
 800cc5a:	4603      	mov	r3, r0
 800cc5c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800cc5e:	89bc      	ldrh	r4, [r7, #12]
 800cc60:	693b      	ldr	r3, [r7, #16]
 800cc62:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800cc66:	69bb      	ldr	r3, [r7, #24]
 800cc68:	69db      	ldr	r3, [r3, #28]
 800cc6a:	4618      	mov	r0, r3
 800cc6c:	f7f7 fdc7 	bl	80047fe <lwip_htonl>
 800cc70:	4603      	mov	r3, r0
 800cc72:	461a      	mov	r2, r3
 800cc74:	4629      	mov	r1, r5
 800cc76:	4620      	mov	r0, r4
 800cc78:	f000 fcee 	bl	800d658 <dhcp_option_long>
 800cc7c:	4603      	mov	r3, r0
 800cc7e:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800cc80:	89b8      	ldrh	r0, [r7, #12]
 800cc82:	693b      	ldr	r3, [r7, #16]
 800cc84:	33f0      	adds	r3, #240	; 0xf0
 800cc86:	697a      	ldr	r2, [r7, #20]
 800cc88:	4619      	mov	r1, r3
 800cc8a:	f001 f9a1 	bl	800dfd0 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800cc8e:	4b19      	ldr	r3, [pc, #100]	; (800ccf4 <dhcp_decline+0xdc>)
 800cc90:	6818      	ldr	r0, [r3, #0]
 800cc92:	4b19      	ldr	r3, [pc, #100]	; (800ccf8 <dhcp_decline+0xe0>)
 800cc94:	9301      	str	r3, [sp, #4]
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	9300      	str	r3, [sp, #0]
 800cc9a:	2343      	movs	r3, #67	; 0x43
 800cc9c:	4a17      	ldr	r2, [pc, #92]	; (800ccfc <dhcp_decline+0xe4>)
 800cc9e:	6979      	ldr	r1, [r7, #20]
 800cca0:	f7ff f8d2 	bl	800be48 <udp_sendto_if_src>
 800cca4:	4603      	mov	r3, r0
 800cca6:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800cca8:	6978      	ldr	r0, [r7, #20]
 800ccaa:	f7f9 f995 	bl	8005fd8 <pbuf_free>
 800ccae:	e001      	b.n	800ccb4 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800ccb0:	23ff      	movs	r3, #255	; 0xff
 800ccb2:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800ccb4:	69bb      	ldr	r3, [r7, #24]
 800ccb6:	799b      	ldrb	r3, [r3, #6]
 800ccb8:	2bff      	cmp	r3, #255	; 0xff
 800ccba:	d005      	beq.n	800ccc8 <dhcp_decline+0xb0>
    dhcp->tries++;
 800ccbc:	69bb      	ldr	r3, [r7, #24]
 800ccbe:	799b      	ldrb	r3, [r3, #6]
 800ccc0:	3301      	adds	r3, #1
 800ccc2:	b2da      	uxtb	r2, r3
 800ccc4:	69bb      	ldr	r3, [r7, #24]
 800ccc6:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 800ccc8:	f242 7310 	movw	r3, #10000	; 0x2710
 800cccc:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800ccce:	89fb      	ldrh	r3, [r7, #14]
 800ccd0:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800ccd4:	4a0a      	ldr	r2, [pc, #40]	; (800cd00 <dhcp_decline+0xe8>)
 800ccd6:	fb82 1203 	smull	r1, r2, r2, r3
 800ccda:	1152      	asrs	r2, r2, #5
 800ccdc:	17db      	asrs	r3, r3, #31
 800ccde:	1ad3      	subs	r3, r2, r3
 800cce0:	b29a      	uxth	r2, r3
 800cce2:	69bb      	ldr	r3, [r7, #24]
 800cce4:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800cce6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800ccea:	4618      	mov	r0, r3
 800ccec:	3720      	adds	r7, #32
 800ccee:	46bd      	mov	sp, r7
 800ccf0:	bdb0      	pop	{r4, r5, r7, pc}
 800ccf2:	bf00      	nop
 800ccf4:	20007cdc 	.word	0x20007cdc
 800ccf8:	0801476c 	.word	0x0801476c
 800ccfc:	08014770 	.word	0x08014770
 800cd00:	10624dd3 	.word	0x10624dd3

0800cd04 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 800cd04:	b580      	push	{r7, lr}
 800cd06:	b08a      	sub	sp, #40	; 0x28
 800cd08:	af02      	add	r7, sp, #8
 800cd0a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd10:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 800cd12:	2300      	movs	r3, #0
 800cd14:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 800cd16:	69bb      	ldr	r3, [r7, #24]
 800cd18:	2200      	movs	r2, #0
 800cd1a:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 800cd1c:	2106      	movs	r1, #6
 800cd1e:	69b8      	ldr	r0, [r7, #24]
 800cd20:	f000 fbf4 	bl	800d50c <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 800cd24:	f107 0308 	add.w	r3, r7, #8
 800cd28:	2201      	movs	r2, #1
 800cd2a:	69b9      	ldr	r1, [r7, #24]
 800cd2c:	6878      	ldr	r0, [r7, #4]
 800cd2e:	f001 f879 	bl	800de24 <dhcp_create_msg>
 800cd32:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 800cd34:	693b      	ldr	r3, [r7, #16]
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d04b      	beq.n	800cdd2 <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800cd3a:	693b      	ldr	r3, [r7, #16]
 800cd3c:	685b      	ldr	r3, [r3, #4]
 800cd3e:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800cd40:	8938      	ldrh	r0, [r7, #8]
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800cd48:	2302      	movs	r3, #2
 800cd4a:	2239      	movs	r2, #57	; 0x39
 800cd4c:	f000 fbf8 	bl	800d540 <dhcp_option>
 800cd50:	4603      	mov	r3, r0
 800cd52:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800cd54:	8938      	ldrh	r0, [r7, #8]
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cd60:	461a      	mov	r2, r3
 800cd62:	f000 fc47 	bl	800d5f4 <dhcp_option_short>
 800cd66:	4603      	mov	r3, r0
 800cd68:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800cd6a:	8938      	ldrh	r0, [r7, #8]
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800cd72:	2303      	movs	r3, #3
 800cd74:	2237      	movs	r2, #55	; 0x37
 800cd76:	f000 fbe3 	bl	800d540 <dhcp_option>
 800cd7a:	4603      	mov	r3, r0
 800cd7c:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800cd7e:	2300      	movs	r3, #0
 800cd80:	77fb      	strb	r3, [r7, #31]
 800cd82:	e00e      	b.n	800cda2 <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800cd84:	8938      	ldrh	r0, [r7, #8]
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800cd8c:	7ffb      	ldrb	r3, [r7, #31]
 800cd8e:	4a29      	ldr	r2, [pc, #164]	; (800ce34 <dhcp_discover+0x130>)
 800cd90:	5cd3      	ldrb	r3, [r2, r3]
 800cd92:	461a      	mov	r2, r3
 800cd94:	f000 fc08 	bl	800d5a8 <dhcp_option_byte>
 800cd98:	4603      	mov	r3, r0
 800cd9a:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800cd9c:	7ffb      	ldrb	r3, [r7, #31]
 800cd9e:	3301      	adds	r3, #1
 800cda0:	77fb      	strb	r3, [r7, #31]
 800cda2:	7ffb      	ldrb	r3, [r7, #31]
 800cda4:	2b02      	cmp	r3, #2
 800cda6:	d9ed      	bls.n	800cd84 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800cda8:	8938      	ldrh	r0, [r7, #8]
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	33f0      	adds	r3, #240	; 0xf0
 800cdae:	693a      	ldr	r2, [r7, #16]
 800cdb0:	4619      	mov	r1, r3
 800cdb2:	f001 f90d 	bl	800dfd0 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800cdb6:	4b20      	ldr	r3, [pc, #128]	; (800ce38 <dhcp_discover+0x134>)
 800cdb8:	6818      	ldr	r0, [r3, #0]
 800cdba:	4b20      	ldr	r3, [pc, #128]	; (800ce3c <dhcp_discover+0x138>)
 800cdbc:	9301      	str	r3, [sp, #4]
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	9300      	str	r3, [sp, #0]
 800cdc2:	2343      	movs	r3, #67	; 0x43
 800cdc4:	4a1e      	ldr	r2, [pc, #120]	; (800ce40 <dhcp_discover+0x13c>)
 800cdc6:	6939      	ldr	r1, [r7, #16]
 800cdc8:	f7ff f83e 	bl	800be48 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 800cdcc:	6938      	ldr	r0, [r7, #16]
 800cdce:	f7f9 f903 	bl	8005fd8 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800cdd2:	69bb      	ldr	r3, [r7, #24]
 800cdd4:	799b      	ldrb	r3, [r3, #6]
 800cdd6:	2bff      	cmp	r3, #255	; 0xff
 800cdd8:	d005      	beq.n	800cde6 <dhcp_discover+0xe2>
    dhcp->tries++;
 800cdda:	69bb      	ldr	r3, [r7, #24]
 800cddc:	799b      	ldrb	r3, [r3, #6]
 800cdde:	3301      	adds	r3, #1
 800cde0:	b2da      	uxtb	r2, r3
 800cde2:	69bb      	ldr	r3, [r7, #24]
 800cde4:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800cde6:	69bb      	ldr	r3, [r7, #24]
 800cde8:	799b      	ldrb	r3, [r3, #6]
 800cdea:	2b05      	cmp	r3, #5
 800cdec:	d80d      	bhi.n	800ce0a <dhcp_discover+0x106>
 800cdee:	69bb      	ldr	r3, [r7, #24]
 800cdf0:	799b      	ldrb	r3, [r3, #6]
 800cdf2:	461a      	mov	r2, r3
 800cdf4:	2301      	movs	r3, #1
 800cdf6:	4093      	lsls	r3, r2
 800cdf8:	b29b      	uxth	r3, r3
 800cdfa:	461a      	mov	r2, r3
 800cdfc:	0152      	lsls	r2, r2, #5
 800cdfe:	1ad2      	subs	r2, r2, r3
 800ce00:	0092      	lsls	r2, r2, #2
 800ce02:	4413      	add	r3, r2
 800ce04:	00db      	lsls	r3, r3, #3
 800ce06:	b29b      	uxth	r3, r3
 800ce08:	e001      	b.n	800ce0e <dhcp_discover+0x10a>
 800ce0a:	f64e 2360 	movw	r3, #60000	; 0xea60
 800ce0e:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800ce10:	897b      	ldrh	r3, [r7, #10]
 800ce12:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800ce16:	4a0b      	ldr	r2, [pc, #44]	; (800ce44 <dhcp_discover+0x140>)
 800ce18:	fb82 1203 	smull	r1, r2, r2, r3
 800ce1c:	1152      	asrs	r2, r2, #5
 800ce1e:	17db      	asrs	r3, r3, #31
 800ce20:	1ad3      	subs	r3, r2, r3
 800ce22:	b29a      	uxth	r2, r3
 800ce24:	69bb      	ldr	r3, [r7, #24]
 800ce26:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800ce28:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ce2c:	4618      	mov	r0, r3
 800ce2e:	3720      	adds	r7, #32
 800ce30:	46bd      	mov	sp, r7
 800ce32:	bd80      	pop	{r7, pc}
 800ce34:	2000002c 	.word	0x2000002c
 800ce38:	20007cdc 	.word	0x20007cdc
 800ce3c:	0801476c 	.word	0x0801476c
 800ce40:	08014770 	.word	0x08014770
 800ce44:	10624dd3 	.word	0x10624dd3

0800ce48 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 800ce48:	b580      	push	{r7, lr}
 800ce4a:	b088      	sub	sp, #32
 800ce4c:	af00      	add	r7, sp, #0
 800ce4e:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d107      	bne.n	800ce66 <dhcp_bind+0x1e>
 800ce56:	4b64      	ldr	r3, [pc, #400]	; (800cfe8 <dhcp_bind+0x1a0>)
 800ce58:	f240 4215 	movw	r2, #1045	; 0x415
 800ce5c:	4963      	ldr	r1, [pc, #396]	; (800cfec <dhcp_bind+0x1a4>)
 800ce5e:	4864      	ldr	r0, [pc, #400]	; (800cff0 <dhcp_bind+0x1a8>)
 800ce60:	f003 fc62 	bl	8010728 <iprintf>
 800ce64:	e0bc      	b.n	800cfe0 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce6a:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 800ce6c:	69bb      	ldr	r3, [r7, #24]
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d107      	bne.n	800ce82 <dhcp_bind+0x3a>
 800ce72:	4b5d      	ldr	r3, [pc, #372]	; (800cfe8 <dhcp_bind+0x1a0>)
 800ce74:	f240 4217 	movw	r2, #1047	; 0x417
 800ce78:	495e      	ldr	r1, [pc, #376]	; (800cff4 <dhcp_bind+0x1ac>)
 800ce7a:	485d      	ldr	r0, [pc, #372]	; (800cff0 <dhcp_bind+0x1a8>)
 800ce7c:	f003 fc54 	bl	8010728 <iprintf>
 800ce80:	e0ae      	b.n	800cfe0 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 800ce82:	69bb      	ldr	r3, [r7, #24]
 800ce84:	2200      	movs	r2, #0
 800ce86:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 800ce88:	69bb      	ldr	r3, [r7, #24]
 800ce8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce90:	d019      	beq.n	800cec6 <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800ce92:	69bb      	ldr	r3, [r7, #24]
 800ce94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce96:	331e      	adds	r3, #30
 800ce98:	4a57      	ldr	r2, [pc, #348]	; (800cff8 <dhcp_bind+0x1b0>)
 800ce9a:	fba2 2303 	umull	r2, r3, r2, r3
 800ce9e:	095b      	lsrs	r3, r3, #5
 800cea0:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800cea2:	69fb      	ldr	r3, [r7, #28]
 800cea4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cea8:	d302      	bcc.n	800ceb0 <dhcp_bind+0x68>
      timeout = 0xffff;
 800ceaa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ceae:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 800ceb0:	69fb      	ldr	r3, [r7, #28]
 800ceb2:	b29a      	uxth	r2, r3
 800ceb4:	69bb      	ldr	r3, [r7, #24]
 800ceb6:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 800ceb8:	69bb      	ldr	r3, [r7, #24]
 800ceba:	8a9b      	ldrh	r3, [r3, #20]
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d102      	bne.n	800cec6 <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 800cec0:	69bb      	ldr	r3, [r7, #24]
 800cec2:	2201      	movs	r2, #1
 800cec4:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 800cec6:	69bb      	ldr	r3, [r7, #24]
 800cec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ceca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cece:	d01d      	beq.n	800cf0c <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800ced0:	69bb      	ldr	r3, [r7, #24]
 800ced2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ced4:	331e      	adds	r3, #30
 800ced6:	4a48      	ldr	r2, [pc, #288]	; (800cff8 <dhcp_bind+0x1b0>)
 800ced8:	fba2 2303 	umull	r2, r3, r2, r3
 800cedc:	095b      	lsrs	r3, r3, #5
 800cede:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800cee0:	69fb      	ldr	r3, [r7, #28]
 800cee2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cee6:	d302      	bcc.n	800ceee <dhcp_bind+0xa6>
      timeout = 0xffff;
 800cee8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ceec:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 800ceee:	69fb      	ldr	r3, [r7, #28]
 800cef0:	b29a      	uxth	r2, r3
 800cef2:	69bb      	ldr	r3, [r7, #24]
 800cef4:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 800cef6:	69bb      	ldr	r3, [r7, #24]
 800cef8:	895b      	ldrh	r3, [r3, #10]
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d102      	bne.n	800cf04 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 800cefe:	69bb      	ldr	r3, [r7, #24]
 800cf00:	2201      	movs	r2, #1
 800cf02:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 800cf04:	69bb      	ldr	r3, [r7, #24]
 800cf06:	895a      	ldrh	r2, [r3, #10]
 800cf08:	69bb      	ldr	r3, [r7, #24]
 800cf0a:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 800cf0c:	69bb      	ldr	r3, [r7, #24]
 800cf0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf14:	d01d      	beq.n	800cf52 <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800cf16:	69bb      	ldr	r3, [r7, #24]
 800cf18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf1a:	331e      	adds	r3, #30
 800cf1c:	4a36      	ldr	r2, [pc, #216]	; (800cff8 <dhcp_bind+0x1b0>)
 800cf1e:	fba2 2303 	umull	r2, r3, r2, r3
 800cf22:	095b      	lsrs	r3, r3, #5
 800cf24:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800cf26:	69fb      	ldr	r3, [r7, #28]
 800cf28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cf2c:	d302      	bcc.n	800cf34 <dhcp_bind+0xec>
      timeout = 0xffff;
 800cf2e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cf32:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 800cf34:	69fb      	ldr	r3, [r7, #28]
 800cf36:	b29a      	uxth	r2, r3
 800cf38:	69bb      	ldr	r3, [r7, #24]
 800cf3a:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 800cf3c:	69bb      	ldr	r3, [r7, #24]
 800cf3e:	899b      	ldrh	r3, [r3, #12]
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d102      	bne.n	800cf4a <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 800cf44:	69bb      	ldr	r3, [r7, #24]
 800cf46:	2201      	movs	r2, #1
 800cf48:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 800cf4a:	69bb      	ldr	r3, [r7, #24]
 800cf4c:	899a      	ldrh	r2, [r3, #12]
 800cf4e:	69bb      	ldr	r3, [r7, #24]
 800cf50:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 800cf52:	69bb      	ldr	r3, [r7, #24]
 800cf54:	895a      	ldrh	r2, [r3, #10]
 800cf56:	69bb      	ldr	r3, [r7, #24]
 800cf58:	899b      	ldrh	r3, [r3, #12]
 800cf5a:	429a      	cmp	r2, r3
 800cf5c:	d306      	bcc.n	800cf6c <dhcp_bind+0x124>
 800cf5e:	69bb      	ldr	r3, [r7, #24]
 800cf60:	899b      	ldrh	r3, [r3, #12]
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d002      	beq.n	800cf6c <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 800cf66:	69bb      	ldr	r3, [r7, #24]
 800cf68:	2200      	movs	r2, #0
 800cf6a:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 800cf6c:	69bb      	ldr	r3, [r7, #24]
 800cf6e:	79db      	ldrb	r3, [r3, #7]
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d003      	beq.n	800cf7c <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 800cf74:	69bb      	ldr	r3, [r7, #24]
 800cf76:	6a1b      	ldr	r3, [r3, #32]
 800cf78:	613b      	str	r3, [r7, #16]
 800cf7a:	e014      	b.n	800cfa6 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 800cf7c:	69bb      	ldr	r3, [r7, #24]
 800cf7e:	331c      	adds	r3, #28
 800cf80:	781b      	ldrb	r3, [r3, #0]
 800cf82:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 800cf84:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	db02      	blt.n	800cf92 <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 800cf8c:	23ff      	movs	r3, #255	; 0xff
 800cf8e:	613b      	str	r3, [r7, #16]
 800cf90:	e009      	b.n	800cfa6 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 800cf92:	7dfb      	ldrb	r3, [r7, #23]
 800cf94:	2bbf      	cmp	r3, #191	; 0xbf
 800cf96:	d903      	bls.n	800cfa0 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 800cf98:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800cf9c:	613b      	str	r3, [r7, #16]
 800cf9e:	e002      	b.n	800cfa6 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 800cfa0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cfa4:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 800cfa6:	69bb      	ldr	r3, [r7, #24]
 800cfa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfaa:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d108      	bne.n	800cfc4 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 800cfb2:	69bb      	ldr	r3, [r7, #24]
 800cfb4:	69da      	ldr	r2, [r3, #28]
 800cfb6:	693b      	ldr	r3, [r7, #16]
 800cfb8:	4013      	ands	r3, r2
 800cfba:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800cfc2:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 800cfc4:	210a      	movs	r1, #10
 800cfc6:	69b8      	ldr	r0, [r7, #24]
 800cfc8:	f000 faa0 	bl	800d50c <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 800cfcc:	69bb      	ldr	r3, [r7, #24]
 800cfce:	f103 011c 	add.w	r1, r3, #28
 800cfd2:	f107 030c 	add.w	r3, r7, #12
 800cfd6:	f107 0210 	add.w	r2, r7, #16
 800cfda:	6878      	ldr	r0, [r7, #4]
 800cfdc:	f7f8 fb3c 	bl	8005658 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 800cfe0:	3720      	adds	r7, #32
 800cfe2:	46bd      	mov	sp, r7
 800cfe4:	bd80      	pop	{r7, pc}
 800cfe6:	bf00      	nop
 800cfe8:	08013c04 	.word	0x08013c04
 800cfec:	08013d64 	.word	0x08013d64
 800cff0:	08013c64 	.word	0x08013c64
 800cff4:	08013d80 	.word	0x08013d80
 800cff8:	88888889 	.word	0x88888889

0800cffc <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 800cffc:	b580      	push	{r7, lr}
 800cffe:	b08a      	sub	sp, #40	; 0x28
 800d000:	af02      	add	r7, sp, #8
 800d002:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d008:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 800d00a:	2105      	movs	r1, #5
 800d00c:	69b8      	ldr	r0, [r7, #24]
 800d00e:	f000 fa7d 	bl	800d50c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800d012:	f107 030c 	add.w	r3, r7, #12
 800d016:	2203      	movs	r2, #3
 800d018:	69b9      	ldr	r1, [r7, #24]
 800d01a:	6878      	ldr	r0, [r7, #4]
 800d01c:	f000 ff02 	bl	800de24 <dhcp_create_msg>
 800d020:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800d022:	697b      	ldr	r3, [r7, #20]
 800d024:	2b00      	cmp	r3, #0
 800d026:	d04e      	beq.n	800d0c6 <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800d028:	697b      	ldr	r3, [r7, #20]
 800d02a:	685b      	ldr	r3, [r3, #4]
 800d02c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800d02e:	89b8      	ldrh	r0, [r7, #12]
 800d030:	693b      	ldr	r3, [r7, #16]
 800d032:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800d036:	2302      	movs	r3, #2
 800d038:	2239      	movs	r2, #57	; 0x39
 800d03a:	f000 fa81 	bl	800d540 <dhcp_option>
 800d03e:	4603      	mov	r3, r0
 800d040:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800d042:	89b8      	ldrh	r0, [r7, #12]
 800d044:	693b      	ldr	r3, [r7, #16]
 800d046:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d04e:	461a      	mov	r2, r3
 800d050:	f000 fad0 	bl	800d5f4 <dhcp_option_short>
 800d054:	4603      	mov	r3, r0
 800d056:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800d058:	89b8      	ldrh	r0, [r7, #12]
 800d05a:	693b      	ldr	r3, [r7, #16]
 800d05c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800d060:	2303      	movs	r3, #3
 800d062:	2237      	movs	r2, #55	; 0x37
 800d064:	f000 fa6c 	bl	800d540 <dhcp_option>
 800d068:	4603      	mov	r3, r0
 800d06a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800d06c:	2300      	movs	r3, #0
 800d06e:	77bb      	strb	r3, [r7, #30]
 800d070:	e00e      	b.n	800d090 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800d072:	89b8      	ldrh	r0, [r7, #12]
 800d074:	693b      	ldr	r3, [r7, #16]
 800d076:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800d07a:	7fbb      	ldrb	r3, [r7, #30]
 800d07c:	4a2a      	ldr	r2, [pc, #168]	; (800d128 <dhcp_renew+0x12c>)
 800d07e:	5cd3      	ldrb	r3, [r2, r3]
 800d080:	461a      	mov	r2, r3
 800d082:	f000 fa91 	bl	800d5a8 <dhcp_option_byte>
 800d086:	4603      	mov	r3, r0
 800d088:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800d08a:	7fbb      	ldrb	r3, [r7, #30]
 800d08c:	3301      	adds	r3, #1
 800d08e:	77bb      	strb	r3, [r7, #30]
 800d090:	7fbb      	ldrb	r3, [r7, #30]
 800d092:	2b02      	cmp	r3, #2
 800d094:	d9ed      	bls.n	800d072 <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800d096:	89b8      	ldrh	r0, [r7, #12]
 800d098:	693b      	ldr	r3, [r7, #16]
 800d09a:	33f0      	adds	r3, #240	; 0xf0
 800d09c:	697a      	ldr	r2, [r7, #20]
 800d09e:	4619      	mov	r1, r3
 800d0a0:	f000 ff96 	bl	800dfd0 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800d0a4:	4b21      	ldr	r3, [pc, #132]	; (800d12c <dhcp_renew+0x130>)
 800d0a6:	6818      	ldr	r0, [r3, #0]
 800d0a8:	69bb      	ldr	r3, [r7, #24]
 800d0aa:	f103 0218 	add.w	r2, r3, #24
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	9300      	str	r3, [sp, #0]
 800d0b2:	2343      	movs	r3, #67	; 0x43
 800d0b4:	6979      	ldr	r1, [r7, #20]
 800d0b6:	f7fe fe53 	bl	800bd60 <udp_sendto_if>
 800d0ba:	4603      	mov	r3, r0
 800d0bc:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800d0be:	6978      	ldr	r0, [r7, #20]
 800d0c0:	f7f8 ff8a 	bl	8005fd8 <pbuf_free>
 800d0c4:	e001      	b.n	800d0ca <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800d0c6:	23ff      	movs	r3, #255	; 0xff
 800d0c8:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800d0ca:	69bb      	ldr	r3, [r7, #24]
 800d0cc:	799b      	ldrb	r3, [r3, #6]
 800d0ce:	2bff      	cmp	r3, #255	; 0xff
 800d0d0:	d005      	beq.n	800d0de <dhcp_renew+0xe2>
    dhcp->tries++;
 800d0d2:	69bb      	ldr	r3, [r7, #24]
 800d0d4:	799b      	ldrb	r3, [r3, #6]
 800d0d6:	3301      	adds	r3, #1
 800d0d8:	b2da      	uxtb	r2, r3
 800d0da:	69bb      	ldr	r3, [r7, #24]
 800d0dc:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 800d0de:	69bb      	ldr	r3, [r7, #24]
 800d0e0:	799b      	ldrb	r3, [r3, #6]
 800d0e2:	2b09      	cmp	r3, #9
 800d0e4:	d80a      	bhi.n	800d0fc <dhcp_renew+0x100>
 800d0e6:	69bb      	ldr	r3, [r7, #24]
 800d0e8:	799b      	ldrb	r3, [r3, #6]
 800d0ea:	b29b      	uxth	r3, r3
 800d0ec:	461a      	mov	r2, r3
 800d0ee:	0152      	lsls	r2, r2, #5
 800d0f0:	1ad2      	subs	r2, r2, r3
 800d0f2:	0092      	lsls	r2, r2, #2
 800d0f4:	4413      	add	r3, r2
 800d0f6:	011b      	lsls	r3, r3, #4
 800d0f8:	b29b      	uxth	r3, r3
 800d0fa:	e001      	b.n	800d100 <dhcp_renew+0x104>
 800d0fc:	f644 6320 	movw	r3, #20000	; 0x4e20
 800d100:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800d102:	89fb      	ldrh	r3, [r7, #14]
 800d104:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800d108:	4a09      	ldr	r2, [pc, #36]	; (800d130 <dhcp_renew+0x134>)
 800d10a:	fb82 1203 	smull	r1, r2, r2, r3
 800d10e:	1152      	asrs	r2, r2, #5
 800d110:	17db      	asrs	r3, r3, #31
 800d112:	1ad3      	subs	r3, r2, r3
 800d114:	b29a      	uxth	r2, r3
 800d116:	69bb      	ldr	r3, [r7, #24]
 800d118:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800d11a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d11e:	4618      	mov	r0, r3
 800d120:	3720      	adds	r7, #32
 800d122:	46bd      	mov	sp, r7
 800d124:	bd80      	pop	{r7, pc}
 800d126:	bf00      	nop
 800d128:	2000002c 	.word	0x2000002c
 800d12c:	20007cdc 	.word	0x20007cdc
 800d130:	10624dd3 	.word	0x10624dd3

0800d134 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 800d134:	b580      	push	{r7, lr}
 800d136:	b08a      	sub	sp, #40	; 0x28
 800d138:	af02      	add	r7, sp, #8
 800d13a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d140:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 800d142:	2104      	movs	r1, #4
 800d144:	69b8      	ldr	r0, [r7, #24]
 800d146:	f000 f9e1 	bl	800d50c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800d14a:	f107 030c 	add.w	r3, r7, #12
 800d14e:	2203      	movs	r2, #3
 800d150:	69b9      	ldr	r1, [r7, #24]
 800d152:	6878      	ldr	r0, [r7, #4]
 800d154:	f000 fe66 	bl	800de24 <dhcp_create_msg>
 800d158:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800d15a:	697b      	ldr	r3, [r7, #20]
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d04c      	beq.n	800d1fa <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800d160:	697b      	ldr	r3, [r7, #20]
 800d162:	685b      	ldr	r3, [r3, #4]
 800d164:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800d166:	89b8      	ldrh	r0, [r7, #12]
 800d168:	693b      	ldr	r3, [r7, #16]
 800d16a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800d16e:	2302      	movs	r3, #2
 800d170:	2239      	movs	r2, #57	; 0x39
 800d172:	f000 f9e5 	bl	800d540 <dhcp_option>
 800d176:	4603      	mov	r3, r0
 800d178:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800d17a:	89b8      	ldrh	r0, [r7, #12]
 800d17c:	693b      	ldr	r3, [r7, #16]
 800d17e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d186:	461a      	mov	r2, r3
 800d188:	f000 fa34 	bl	800d5f4 <dhcp_option_short>
 800d18c:	4603      	mov	r3, r0
 800d18e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800d190:	89b8      	ldrh	r0, [r7, #12]
 800d192:	693b      	ldr	r3, [r7, #16]
 800d194:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800d198:	2303      	movs	r3, #3
 800d19a:	2237      	movs	r2, #55	; 0x37
 800d19c:	f000 f9d0 	bl	800d540 <dhcp_option>
 800d1a0:	4603      	mov	r3, r0
 800d1a2:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800d1a4:	2300      	movs	r3, #0
 800d1a6:	77bb      	strb	r3, [r7, #30]
 800d1a8:	e00e      	b.n	800d1c8 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800d1aa:	89b8      	ldrh	r0, [r7, #12]
 800d1ac:	693b      	ldr	r3, [r7, #16]
 800d1ae:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800d1b2:	7fbb      	ldrb	r3, [r7, #30]
 800d1b4:	4a29      	ldr	r2, [pc, #164]	; (800d25c <dhcp_rebind+0x128>)
 800d1b6:	5cd3      	ldrb	r3, [r2, r3]
 800d1b8:	461a      	mov	r2, r3
 800d1ba:	f000 f9f5 	bl	800d5a8 <dhcp_option_byte>
 800d1be:	4603      	mov	r3, r0
 800d1c0:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800d1c2:	7fbb      	ldrb	r3, [r7, #30]
 800d1c4:	3301      	adds	r3, #1
 800d1c6:	77bb      	strb	r3, [r7, #30]
 800d1c8:	7fbb      	ldrb	r3, [r7, #30]
 800d1ca:	2b02      	cmp	r3, #2
 800d1cc:	d9ed      	bls.n	800d1aa <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800d1ce:	89b8      	ldrh	r0, [r7, #12]
 800d1d0:	693b      	ldr	r3, [r7, #16]
 800d1d2:	33f0      	adds	r3, #240	; 0xf0
 800d1d4:	697a      	ldr	r2, [r7, #20]
 800d1d6:	4619      	mov	r1, r3
 800d1d8:	f000 fefa 	bl	800dfd0 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800d1dc:	4b20      	ldr	r3, [pc, #128]	; (800d260 <dhcp_rebind+0x12c>)
 800d1de:	6818      	ldr	r0, [r3, #0]
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	9300      	str	r3, [sp, #0]
 800d1e4:	2343      	movs	r3, #67	; 0x43
 800d1e6:	4a1f      	ldr	r2, [pc, #124]	; (800d264 <dhcp_rebind+0x130>)
 800d1e8:	6979      	ldr	r1, [r7, #20]
 800d1ea:	f7fe fdb9 	bl	800bd60 <udp_sendto_if>
 800d1ee:	4603      	mov	r3, r0
 800d1f0:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800d1f2:	6978      	ldr	r0, [r7, #20]
 800d1f4:	f7f8 fef0 	bl	8005fd8 <pbuf_free>
 800d1f8:	e001      	b.n	800d1fe <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800d1fa:	23ff      	movs	r3, #255	; 0xff
 800d1fc:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800d1fe:	69bb      	ldr	r3, [r7, #24]
 800d200:	799b      	ldrb	r3, [r3, #6]
 800d202:	2bff      	cmp	r3, #255	; 0xff
 800d204:	d005      	beq.n	800d212 <dhcp_rebind+0xde>
    dhcp->tries++;
 800d206:	69bb      	ldr	r3, [r7, #24]
 800d208:	799b      	ldrb	r3, [r3, #6]
 800d20a:	3301      	adds	r3, #1
 800d20c:	b2da      	uxtb	r2, r3
 800d20e:	69bb      	ldr	r3, [r7, #24]
 800d210:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 800d212:	69bb      	ldr	r3, [r7, #24]
 800d214:	799b      	ldrb	r3, [r3, #6]
 800d216:	2b09      	cmp	r3, #9
 800d218:	d80a      	bhi.n	800d230 <dhcp_rebind+0xfc>
 800d21a:	69bb      	ldr	r3, [r7, #24]
 800d21c:	799b      	ldrb	r3, [r3, #6]
 800d21e:	b29b      	uxth	r3, r3
 800d220:	461a      	mov	r2, r3
 800d222:	0152      	lsls	r2, r2, #5
 800d224:	1ad2      	subs	r2, r2, r3
 800d226:	0092      	lsls	r2, r2, #2
 800d228:	4413      	add	r3, r2
 800d22a:	00db      	lsls	r3, r3, #3
 800d22c:	b29b      	uxth	r3, r3
 800d22e:	e001      	b.n	800d234 <dhcp_rebind+0x100>
 800d230:	f242 7310 	movw	r3, #10000	; 0x2710
 800d234:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800d236:	89fb      	ldrh	r3, [r7, #14]
 800d238:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800d23c:	4a0a      	ldr	r2, [pc, #40]	; (800d268 <dhcp_rebind+0x134>)
 800d23e:	fb82 1203 	smull	r1, r2, r2, r3
 800d242:	1152      	asrs	r2, r2, #5
 800d244:	17db      	asrs	r3, r3, #31
 800d246:	1ad3      	subs	r3, r2, r3
 800d248:	b29a      	uxth	r2, r3
 800d24a:	69bb      	ldr	r3, [r7, #24]
 800d24c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800d24e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d252:	4618      	mov	r0, r3
 800d254:	3720      	adds	r7, #32
 800d256:	46bd      	mov	sp, r7
 800d258:	bd80      	pop	{r7, pc}
 800d25a:	bf00      	nop
 800d25c:	2000002c 	.word	0x2000002c
 800d260:	20007cdc 	.word	0x20007cdc
 800d264:	08014770 	.word	0x08014770
 800d268:	10624dd3 	.word	0x10624dd3

0800d26c <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 800d26c:	b5b0      	push	{r4, r5, r7, lr}
 800d26e:	b08a      	sub	sp, #40	; 0x28
 800d270:	af02      	add	r7, sp, #8
 800d272:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d278:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 800d27a:	2103      	movs	r1, #3
 800d27c:	69b8      	ldr	r0, [r7, #24]
 800d27e:	f000 f945 	bl	800d50c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800d282:	f107 030c 	add.w	r3, r7, #12
 800d286:	2203      	movs	r2, #3
 800d288:	69b9      	ldr	r1, [r7, #24]
 800d28a:	6878      	ldr	r0, [r7, #4]
 800d28c:	f000 fdca 	bl	800de24 <dhcp_create_msg>
 800d290:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800d292:	697b      	ldr	r3, [r7, #20]
 800d294:	2b00      	cmp	r3, #0
 800d296:	d066      	beq.n	800d366 <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800d298:	697b      	ldr	r3, [r7, #20]
 800d29a:	685b      	ldr	r3, [r3, #4]
 800d29c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800d29e:	89b8      	ldrh	r0, [r7, #12]
 800d2a0:	693b      	ldr	r3, [r7, #16]
 800d2a2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800d2a6:	2302      	movs	r3, #2
 800d2a8:	2239      	movs	r2, #57	; 0x39
 800d2aa:	f000 f949 	bl	800d540 <dhcp_option>
 800d2ae:	4603      	mov	r3, r0
 800d2b0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 800d2b2:	89b8      	ldrh	r0, [r7, #12]
 800d2b4:	693b      	ldr	r3, [r7, #16]
 800d2b6:	33f0      	adds	r3, #240	; 0xf0
 800d2b8:	f44f 7210 	mov.w	r2, #576	; 0x240
 800d2bc:	4619      	mov	r1, r3
 800d2be:	f000 f999 	bl	800d5f4 <dhcp_option_short>
 800d2c2:	4603      	mov	r3, r0
 800d2c4:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800d2c6:	89b8      	ldrh	r0, [r7, #12]
 800d2c8:	693b      	ldr	r3, [r7, #16]
 800d2ca:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800d2ce:	2304      	movs	r3, #4
 800d2d0:	2232      	movs	r2, #50	; 0x32
 800d2d2:	f000 f935 	bl	800d540 <dhcp_option>
 800d2d6:	4603      	mov	r3, r0
 800d2d8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800d2da:	89bc      	ldrh	r4, [r7, #12]
 800d2dc:	693b      	ldr	r3, [r7, #16]
 800d2de:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800d2e2:	69bb      	ldr	r3, [r7, #24]
 800d2e4:	69db      	ldr	r3, [r3, #28]
 800d2e6:	4618      	mov	r0, r3
 800d2e8:	f7f7 fa89 	bl	80047fe <lwip_htonl>
 800d2ec:	4603      	mov	r3, r0
 800d2ee:	461a      	mov	r2, r3
 800d2f0:	4629      	mov	r1, r5
 800d2f2:	4620      	mov	r0, r4
 800d2f4:	f000 f9b0 	bl	800d658 <dhcp_option_long>
 800d2f8:	4603      	mov	r3, r0
 800d2fa:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800d2fc:	89b8      	ldrh	r0, [r7, #12]
 800d2fe:	693b      	ldr	r3, [r7, #16]
 800d300:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800d304:	2303      	movs	r3, #3
 800d306:	2237      	movs	r2, #55	; 0x37
 800d308:	f000 f91a 	bl	800d540 <dhcp_option>
 800d30c:	4603      	mov	r3, r0
 800d30e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800d310:	2300      	movs	r3, #0
 800d312:	77bb      	strb	r3, [r7, #30]
 800d314:	e00e      	b.n	800d334 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800d316:	89b8      	ldrh	r0, [r7, #12]
 800d318:	693b      	ldr	r3, [r7, #16]
 800d31a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800d31e:	7fbb      	ldrb	r3, [r7, #30]
 800d320:	4a29      	ldr	r2, [pc, #164]	; (800d3c8 <dhcp_reboot+0x15c>)
 800d322:	5cd3      	ldrb	r3, [r2, r3]
 800d324:	461a      	mov	r2, r3
 800d326:	f000 f93f 	bl	800d5a8 <dhcp_option_byte>
 800d32a:	4603      	mov	r3, r0
 800d32c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800d32e:	7fbb      	ldrb	r3, [r7, #30]
 800d330:	3301      	adds	r3, #1
 800d332:	77bb      	strb	r3, [r7, #30]
 800d334:	7fbb      	ldrb	r3, [r7, #30]
 800d336:	2b02      	cmp	r3, #2
 800d338:	d9ed      	bls.n	800d316 <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800d33a:	89b8      	ldrh	r0, [r7, #12]
 800d33c:	693b      	ldr	r3, [r7, #16]
 800d33e:	33f0      	adds	r3, #240	; 0xf0
 800d340:	697a      	ldr	r2, [r7, #20]
 800d342:	4619      	mov	r1, r3
 800d344:	f000 fe44 	bl	800dfd0 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800d348:	4b20      	ldr	r3, [pc, #128]	; (800d3cc <dhcp_reboot+0x160>)
 800d34a:	6818      	ldr	r0, [r3, #0]
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	9300      	str	r3, [sp, #0]
 800d350:	2343      	movs	r3, #67	; 0x43
 800d352:	4a1f      	ldr	r2, [pc, #124]	; (800d3d0 <dhcp_reboot+0x164>)
 800d354:	6979      	ldr	r1, [r7, #20]
 800d356:	f7fe fd03 	bl	800bd60 <udp_sendto_if>
 800d35a:	4603      	mov	r3, r0
 800d35c:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800d35e:	6978      	ldr	r0, [r7, #20]
 800d360:	f7f8 fe3a 	bl	8005fd8 <pbuf_free>
 800d364:	e001      	b.n	800d36a <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800d366:	23ff      	movs	r3, #255	; 0xff
 800d368:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800d36a:	69bb      	ldr	r3, [r7, #24]
 800d36c:	799b      	ldrb	r3, [r3, #6]
 800d36e:	2bff      	cmp	r3, #255	; 0xff
 800d370:	d005      	beq.n	800d37e <dhcp_reboot+0x112>
    dhcp->tries++;
 800d372:	69bb      	ldr	r3, [r7, #24]
 800d374:	799b      	ldrb	r3, [r3, #6]
 800d376:	3301      	adds	r3, #1
 800d378:	b2da      	uxtb	r2, r3
 800d37a:	69bb      	ldr	r3, [r7, #24]
 800d37c:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 800d37e:	69bb      	ldr	r3, [r7, #24]
 800d380:	799b      	ldrb	r3, [r3, #6]
 800d382:	2b09      	cmp	r3, #9
 800d384:	d80a      	bhi.n	800d39c <dhcp_reboot+0x130>
 800d386:	69bb      	ldr	r3, [r7, #24]
 800d388:	799b      	ldrb	r3, [r3, #6]
 800d38a:	b29b      	uxth	r3, r3
 800d38c:	461a      	mov	r2, r3
 800d38e:	0152      	lsls	r2, r2, #5
 800d390:	1ad2      	subs	r2, r2, r3
 800d392:	0092      	lsls	r2, r2, #2
 800d394:	4413      	add	r3, r2
 800d396:	00db      	lsls	r3, r3, #3
 800d398:	b29b      	uxth	r3, r3
 800d39a:	e001      	b.n	800d3a0 <dhcp_reboot+0x134>
 800d39c:	f242 7310 	movw	r3, #10000	; 0x2710
 800d3a0:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800d3a2:	89fb      	ldrh	r3, [r7, #14]
 800d3a4:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800d3a8:	4a0a      	ldr	r2, [pc, #40]	; (800d3d4 <dhcp_reboot+0x168>)
 800d3aa:	fb82 1203 	smull	r1, r2, r2, r3
 800d3ae:	1152      	asrs	r2, r2, #5
 800d3b0:	17db      	asrs	r3, r3, #31
 800d3b2:	1ad3      	subs	r3, r2, r3
 800d3b4:	b29a      	uxth	r2, r3
 800d3b6:	69bb      	ldr	r3, [r7, #24]
 800d3b8:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800d3ba:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d3be:	4618      	mov	r0, r3
 800d3c0:	3720      	adds	r7, #32
 800d3c2:	46bd      	mov	sp, r7
 800d3c4:	bdb0      	pop	{r4, r5, r7, pc}
 800d3c6:	bf00      	nop
 800d3c8:	2000002c 	.word	0x2000002c
 800d3cc:	20007cdc 	.word	0x20007cdc
 800d3d0:	08014770 	.word	0x08014770
 800d3d4:	10624dd3 	.word	0x10624dd3

0800d3d8 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 800d3d8:	b5b0      	push	{r4, r5, r7, lr}
 800d3da:	b08a      	sub	sp, #40	; 0x28
 800d3dc:	af02      	add	r7, sp, #8
 800d3de:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3e4:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 800d3e6:	69fb      	ldr	r3, [r7, #28]
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	f000 8084 	beq.w	800d4f6 <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 800d3ee:	69fb      	ldr	r3, [r7, #28]
 800d3f0:	795b      	ldrb	r3, [r3, #5]
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	f000 8081 	beq.w	800d4fa <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 800d3f8:	69fb      	ldr	r3, [r7, #28]
 800d3fa:	699b      	ldr	r3, [r3, #24]
 800d3fc:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 800d3fe:	69fb      	ldr	r3, [r7, #28]
 800d400:	2200      	movs	r2, #0
 800d402:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 800d404:	69fb      	ldr	r3, [r7, #28]
 800d406:	2200      	movs	r2, #0
 800d408:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800d40a:	69fb      	ldr	r3, [r7, #28]
 800d40c:	2200      	movs	r2, #0
 800d40e:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800d410:	69fb      	ldr	r3, [r7, #28]
 800d412:	2200      	movs	r2, #0
 800d414:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 800d416:	69fb      	ldr	r3, [r7, #28]
 800d418:	2200      	movs	r2, #0
 800d41a:	631a      	str	r2, [r3, #48]	; 0x30
 800d41c:	69fb      	ldr	r3, [r7, #28]
 800d41e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d420:	69fb      	ldr	r3, [r7, #28]
 800d422:	62da      	str	r2, [r3, #44]	; 0x2c
 800d424:	69fb      	ldr	r3, [r7, #28]
 800d426:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d428:	69fb      	ldr	r3, [r7, #28]
 800d42a:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 800d42c:	69fb      	ldr	r3, [r7, #28]
 800d42e:	2200      	movs	r2, #0
 800d430:	829a      	strh	r2, [r3, #20]
 800d432:	69fb      	ldr	r3, [r7, #28]
 800d434:	8a9a      	ldrh	r2, [r3, #20]
 800d436:	69fb      	ldr	r3, [r7, #28]
 800d438:	825a      	strh	r2, [r3, #18]
 800d43a:	69fb      	ldr	r3, [r7, #28]
 800d43c:	8a5a      	ldrh	r2, [r3, #18]
 800d43e:	69fb      	ldr	r3, [r7, #28]
 800d440:	821a      	strh	r2, [r3, #16]
 800d442:	69fb      	ldr	r3, [r7, #28]
 800d444:	8a1a      	ldrh	r2, [r3, #16]
 800d446:	69fb      	ldr	r3, [r7, #28]
 800d448:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 800d44a:	6878      	ldr	r0, [r7, #4]
 800d44c:	f000 fdee 	bl	800e02c <dhcp_supplied_address>
 800d450:	4603      	mov	r3, r0
 800d452:	2b00      	cmp	r3, #0
 800d454:	d03b      	beq.n	800d4ce <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 800d456:	f107 030e 	add.w	r3, r7, #14
 800d45a:	2207      	movs	r2, #7
 800d45c:	69f9      	ldr	r1, [r7, #28]
 800d45e:	6878      	ldr	r0, [r7, #4]
 800d460:	f000 fce0 	bl	800de24 <dhcp_create_msg>
 800d464:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 800d466:	69bb      	ldr	r3, [r7, #24]
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d030      	beq.n	800d4ce <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800d46c:	69bb      	ldr	r3, [r7, #24]
 800d46e:	685b      	ldr	r3, [r3, #4]
 800d470:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 800d472:	89f8      	ldrh	r0, [r7, #14]
 800d474:	697b      	ldr	r3, [r7, #20]
 800d476:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800d47a:	2304      	movs	r3, #4
 800d47c:	2236      	movs	r2, #54	; 0x36
 800d47e:	f000 f85f 	bl	800d540 <dhcp_option>
 800d482:	4603      	mov	r3, r0
 800d484:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 800d486:	89fc      	ldrh	r4, [r7, #14]
 800d488:	697b      	ldr	r3, [r7, #20]
 800d48a:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800d48e:	693b      	ldr	r3, [r7, #16]
 800d490:	4618      	mov	r0, r3
 800d492:	f7f7 f9b4 	bl	80047fe <lwip_htonl>
 800d496:	4603      	mov	r3, r0
 800d498:	461a      	mov	r2, r3
 800d49a:	4629      	mov	r1, r5
 800d49c:	4620      	mov	r0, r4
 800d49e:	f000 f8db 	bl	800d658 <dhcp_option_long>
 800d4a2:	4603      	mov	r3, r0
 800d4a4:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800d4a6:	89f8      	ldrh	r0, [r7, #14]
 800d4a8:	697b      	ldr	r3, [r7, #20]
 800d4aa:	33f0      	adds	r3, #240	; 0xf0
 800d4ac:	69ba      	ldr	r2, [r7, #24]
 800d4ae:	4619      	mov	r1, r3
 800d4b0:	f000 fd8e 	bl	800dfd0 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800d4b4:	4b13      	ldr	r3, [pc, #76]	; (800d504 <dhcp_release_and_stop+0x12c>)
 800d4b6:	6818      	ldr	r0, [r3, #0]
 800d4b8:	f107 0210 	add.w	r2, r7, #16
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	9300      	str	r3, [sp, #0]
 800d4c0:	2343      	movs	r3, #67	; 0x43
 800d4c2:	69b9      	ldr	r1, [r7, #24]
 800d4c4:	f7fe fc4c 	bl	800bd60 <udp_sendto_if>
      pbuf_free(p_out);
 800d4c8:	69b8      	ldr	r0, [r7, #24]
 800d4ca:	f7f8 fd85 	bl	8005fd8 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800d4ce:	4b0e      	ldr	r3, [pc, #56]	; (800d508 <dhcp_release_and_stop+0x130>)
 800d4d0:	4a0d      	ldr	r2, [pc, #52]	; (800d508 <dhcp_release_and_stop+0x130>)
 800d4d2:	490d      	ldr	r1, [pc, #52]	; (800d508 <dhcp_release_and_stop+0x130>)
 800d4d4:	6878      	ldr	r0, [r7, #4]
 800d4d6:	f7f8 f8bf 	bl	8005658 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 800d4da:	2100      	movs	r1, #0
 800d4dc:	69f8      	ldr	r0, [r7, #28]
 800d4de:	f000 f815 	bl	800d50c <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 800d4e2:	69fb      	ldr	r3, [r7, #28]
 800d4e4:	791b      	ldrb	r3, [r3, #4]
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d008      	beq.n	800d4fc <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800d4ea:	f7fe ff85 	bl	800c3f8 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 800d4ee:	69fb      	ldr	r3, [r7, #28]
 800d4f0:	2200      	movs	r2, #0
 800d4f2:	711a      	strb	r2, [r3, #4]
 800d4f4:	e002      	b.n	800d4fc <dhcp_release_and_stop+0x124>
    return;
 800d4f6:	bf00      	nop
 800d4f8:	e000      	b.n	800d4fc <dhcp_release_and_stop+0x124>
    return;
 800d4fa:	bf00      	nop
  }
}
 800d4fc:	3720      	adds	r7, #32
 800d4fe:	46bd      	mov	sp, r7
 800d500:	bdb0      	pop	{r4, r5, r7, pc}
 800d502:	bf00      	nop
 800d504:	20007cdc 	.word	0x20007cdc
 800d508:	0801476c 	.word	0x0801476c

0800d50c <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 800d50c:	b480      	push	{r7}
 800d50e:	b083      	sub	sp, #12
 800d510:	af00      	add	r7, sp, #0
 800d512:	6078      	str	r0, [r7, #4]
 800d514:	460b      	mov	r3, r1
 800d516:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	795b      	ldrb	r3, [r3, #5]
 800d51c:	78fa      	ldrb	r2, [r7, #3]
 800d51e:	429a      	cmp	r2, r3
 800d520:	d008      	beq.n	800d534 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	78fa      	ldrb	r2, [r7, #3]
 800d526:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	2200      	movs	r2, #0
 800d52c:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	2200      	movs	r2, #0
 800d532:	811a      	strh	r2, [r3, #8]
  }
}
 800d534:	bf00      	nop
 800d536:	370c      	adds	r7, #12
 800d538:	46bd      	mov	sp, r7
 800d53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d53e:	4770      	bx	lr

0800d540 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 800d540:	b580      	push	{r7, lr}
 800d542:	b082      	sub	sp, #8
 800d544:	af00      	add	r7, sp, #0
 800d546:	6039      	str	r1, [r7, #0]
 800d548:	4611      	mov	r1, r2
 800d54a:	461a      	mov	r2, r3
 800d54c:	4603      	mov	r3, r0
 800d54e:	80fb      	strh	r3, [r7, #6]
 800d550:	460b      	mov	r3, r1
 800d552:	717b      	strb	r3, [r7, #5]
 800d554:	4613      	mov	r3, r2
 800d556:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 800d558:	88fa      	ldrh	r2, [r7, #6]
 800d55a:	793b      	ldrb	r3, [r7, #4]
 800d55c:	4413      	add	r3, r2
 800d55e:	3302      	adds	r3, #2
 800d560:	2b44      	cmp	r3, #68	; 0x44
 800d562:	d906      	bls.n	800d572 <dhcp_option+0x32>
 800d564:	4b0d      	ldr	r3, [pc, #52]	; (800d59c <dhcp_option+0x5c>)
 800d566:	f240 529a 	movw	r2, #1434	; 0x59a
 800d56a:	490d      	ldr	r1, [pc, #52]	; (800d5a0 <dhcp_option+0x60>)
 800d56c:	480d      	ldr	r0, [pc, #52]	; (800d5a4 <dhcp_option+0x64>)
 800d56e:	f003 f8db 	bl	8010728 <iprintf>
  options[options_out_len++] = option_type;
 800d572:	88fb      	ldrh	r3, [r7, #6]
 800d574:	1c5a      	adds	r2, r3, #1
 800d576:	80fa      	strh	r2, [r7, #6]
 800d578:	461a      	mov	r2, r3
 800d57a:	683b      	ldr	r3, [r7, #0]
 800d57c:	4413      	add	r3, r2
 800d57e:	797a      	ldrb	r2, [r7, #5]
 800d580:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 800d582:	88fb      	ldrh	r3, [r7, #6]
 800d584:	1c5a      	adds	r2, r3, #1
 800d586:	80fa      	strh	r2, [r7, #6]
 800d588:	461a      	mov	r2, r3
 800d58a:	683b      	ldr	r3, [r7, #0]
 800d58c:	4413      	add	r3, r2
 800d58e:	793a      	ldrb	r2, [r7, #4]
 800d590:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800d592:	88fb      	ldrh	r3, [r7, #6]
}
 800d594:	4618      	mov	r0, r3
 800d596:	3708      	adds	r7, #8
 800d598:	46bd      	mov	sp, r7
 800d59a:	bd80      	pop	{r7, pc}
 800d59c:	08013c04 	.word	0x08013c04
 800d5a0:	08013d98 	.word	0x08013d98
 800d5a4:	08013c64 	.word	0x08013c64

0800d5a8 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 800d5a8:	b580      	push	{r7, lr}
 800d5aa:	b082      	sub	sp, #8
 800d5ac:	af00      	add	r7, sp, #0
 800d5ae:	4603      	mov	r3, r0
 800d5b0:	6039      	str	r1, [r7, #0]
 800d5b2:	80fb      	strh	r3, [r7, #6]
 800d5b4:	4613      	mov	r3, r2
 800d5b6:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 800d5b8:	88fb      	ldrh	r3, [r7, #6]
 800d5ba:	2b43      	cmp	r3, #67	; 0x43
 800d5bc:	d906      	bls.n	800d5cc <dhcp_option_byte+0x24>
 800d5be:	4b0a      	ldr	r3, [pc, #40]	; (800d5e8 <dhcp_option_byte+0x40>)
 800d5c0:	f240 52a6 	movw	r2, #1446	; 0x5a6
 800d5c4:	4909      	ldr	r1, [pc, #36]	; (800d5ec <dhcp_option_byte+0x44>)
 800d5c6:	480a      	ldr	r0, [pc, #40]	; (800d5f0 <dhcp_option_byte+0x48>)
 800d5c8:	f003 f8ae 	bl	8010728 <iprintf>
  options[options_out_len++] = value;
 800d5cc:	88fb      	ldrh	r3, [r7, #6]
 800d5ce:	1c5a      	adds	r2, r3, #1
 800d5d0:	80fa      	strh	r2, [r7, #6]
 800d5d2:	461a      	mov	r2, r3
 800d5d4:	683b      	ldr	r3, [r7, #0]
 800d5d6:	4413      	add	r3, r2
 800d5d8:	797a      	ldrb	r2, [r7, #5]
 800d5da:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800d5dc:	88fb      	ldrh	r3, [r7, #6]
}
 800d5de:	4618      	mov	r0, r3
 800d5e0:	3708      	adds	r7, #8
 800d5e2:	46bd      	mov	sp, r7
 800d5e4:	bd80      	pop	{r7, pc}
 800d5e6:	bf00      	nop
 800d5e8:	08013c04 	.word	0x08013c04
 800d5ec:	08013ddc 	.word	0x08013ddc
 800d5f0:	08013c64 	.word	0x08013c64

0800d5f4 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 800d5f4:	b580      	push	{r7, lr}
 800d5f6:	b082      	sub	sp, #8
 800d5f8:	af00      	add	r7, sp, #0
 800d5fa:	4603      	mov	r3, r0
 800d5fc:	6039      	str	r1, [r7, #0]
 800d5fe:	80fb      	strh	r3, [r7, #6]
 800d600:	4613      	mov	r3, r2
 800d602:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 800d604:	88fb      	ldrh	r3, [r7, #6]
 800d606:	3302      	adds	r3, #2
 800d608:	2b44      	cmp	r3, #68	; 0x44
 800d60a:	d906      	bls.n	800d61a <dhcp_option_short+0x26>
 800d60c:	4b0f      	ldr	r3, [pc, #60]	; (800d64c <dhcp_option_short+0x58>)
 800d60e:	f240 52ae 	movw	r2, #1454	; 0x5ae
 800d612:	490f      	ldr	r1, [pc, #60]	; (800d650 <dhcp_option_short+0x5c>)
 800d614:	480f      	ldr	r0, [pc, #60]	; (800d654 <dhcp_option_short+0x60>)
 800d616:	f003 f887 	bl	8010728 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 800d61a:	88bb      	ldrh	r3, [r7, #4]
 800d61c:	0a1b      	lsrs	r3, r3, #8
 800d61e:	b29a      	uxth	r2, r3
 800d620:	88fb      	ldrh	r3, [r7, #6]
 800d622:	1c59      	adds	r1, r3, #1
 800d624:	80f9      	strh	r1, [r7, #6]
 800d626:	4619      	mov	r1, r3
 800d628:	683b      	ldr	r3, [r7, #0]
 800d62a:	440b      	add	r3, r1
 800d62c:	b2d2      	uxtb	r2, r2
 800d62e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 800d630:	88fb      	ldrh	r3, [r7, #6]
 800d632:	1c5a      	adds	r2, r3, #1
 800d634:	80fa      	strh	r2, [r7, #6]
 800d636:	461a      	mov	r2, r3
 800d638:	683b      	ldr	r3, [r7, #0]
 800d63a:	4413      	add	r3, r2
 800d63c:	88ba      	ldrh	r2, [r7, #4]
 800d63e:	b2d2      	uxtb	r2, r2
 800d640:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800d642:	88fb      	ldrh	r3, [r7, #6]
}
 800d644:	4618      	mov	r0, r3
 800d646:	3708      	adds	r7, #8
 800d648:	46bd      	mov	sp, r7
 800d64a:	bd80      	pop	{r7, pc}
 800d64c:	08013c04 	.word	0x08013c04
 800d650:	08013e14 	.word	0x08013e14
 800d654:	08013c64 	.word	0x08013c64

0800d658 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 800d658:	b580      	push	{r7, lr}
 800d65a:	b084      	sub	sp, #16
 800d65c:	af00      	add	r7, sp, #0
 800d65e:	4603      	mov	r3, r0
 800d660:	60b9      	str	r1, [r7, #8]
 800d662:	607a      	str	r2, [r7, #4]
 800d664:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 800d666:	89fb      	ldrh	r3, [r7, #14]
 800d668:	3304      	adds	r3, #4
 800d66a:	2b44      	cmp	r3, #68	; 0x44
 800d66c:	d906      	bls.n	800d67c <dhcp_option_long+0x24>
 800d66e:	4b19      	ldr	r3, [pc, #100]	; (800d6d4 <dhcp_option_long+0x7c>)
 800d670:	f240 52b7 	movw	r2, #1463	; 0x5b7
 800d674:	4918      	ldr	r1, [pc, #96]	; (800d6d8 <dhcp_option_long+0x80>)
 800d676:	4819      	ldr	r0, [pc, #100]	; (800d6dc <dhcp_option_long+0x84>)
 800d678:	f003 f856 	bl	8010728 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	0e1a      	lsrs	r2, r3, #24
 800d680:	89fb      	ldrh	r3, [r7, #14]
 800d682:	1c59      	adds	r1, r3, #1
 800d684:	81f9      	strh	r1, [r7, #14]
 800d686:	4619      	mov	r1, r3
 800d688:	68bb      	ldr	r3, [r7, #8]
 800d68a:	440b      	add	r3, r1
 800d68c:	b2d2      	uxtb	r2, r2
 800d68e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	0c1a      	lsrs	r2, r3, #16
 800d694:	89fb      	ldrh	r3, [r7, #14]
 800d696:	1c59      	adds	r1, r3, #1
 800d698:	81f9      	strh	r1, [r7, #14]
 800d69a:	4619      	mov	r1, r3
 800d69c:	68bb      	ldr	r3, [r7, #8]
 800d69e:	440b      	add	r3, r1
 800d6a0:	b2d2      	uxtb	r2, r2
 800d6a2:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	0a1a      	lsrs	r2, r3, #8
 800d6a8:	89fb      	ldrh	r3, [r7, #14]
 800d6aa:	1c59      	adds	r1, r3, #1
 800d6ac:	81f9      	strh	r1, [r7, #14]
 800d6ae:	4619      	mov	r1, r3
 800d6b0:	68bb      	ldr	r3, [r7, #8]
 800d6b2:	440b      	add	r3, r1
 800d6b4:	b2d2      	uxtb	r2, r2
 800d6b6:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 800d6b8:	89fb      	ldrh	r3, [r7, #14]
 800d6ba:	1c5a      	adds	r2, r3, #1
 800d6bc:	81fa      	strh	r2, [r7, #14]
 800d6be:	461a      	mov	r2, r3
 800d6c0:	68bb      	ldr	r3, [r7, #8]
 800d6c2:	4413      	add	r3, r2
 800d6c4:	687a      	ldr	r2, [r7, #4]
 800d6c6:	b2d2      	uxtb	r2, r2
 800d6c8:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800d6ca:	89fb      	ldrh	r3, [r7, #14]
}
 800d6cc:	4618      	mov	r0, r3
 800d6ce:	3710      	adds	r7, #16
 800d6d0:	46bd      	mov	sp, r7
 800d6d2:	bd80      	pop	{r7, pc}
 800d6d4:	08013c04 	.word	0x08013c04
 800d6d8:	08013e50 	.word	0x08013e50
 800d6dc:	08013c64 	.word	0x08013c64

0800d6e0 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 800d6e0:	b580      	push	{r7, lr}
 800d6e2:	b090      	sub	sp, #64	; 0x40
 800d6e4:	af00      	add	r7, sp, #0
 800d6e6:	6078      	str	r0, [r7, #4]
 800d6e8:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 800d6ea:	2300      	movs	r3, #0
 800d6ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 800d6ee:	2300      	movs	r3, #0
 800d6f0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 800d6f2:	2208      	movs	r2, #8
 800d6f4:	2100      	movs	r1, #0
 800d6f6:	48b5      	ldr	r0, [pc, #724]	; (800d9cc <dhcp_parse_reply+0x2ec>)
 800d6f8:	f003 f80e 	bl	8010718 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	895b      	ldrh	r3, [r3, #10]
 800d700:	2b2b      	cmp	r3, #43	; 0x2b
 800d702:	d802      	bhi.n	800d70a <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 800d704:	f06f 0301 	mvn.w	r3, #1
 800d708:	e2a7      	b.n	800dc5a <dhcp_parse_reply+0x57a>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	685b      	ldr	r3, [r3, #4]
 800d70e:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 800d710:	23f0      	movs	r3, #240	; 0xf0
 800d712:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	891b      	ldrh	r3, [r3, #8]
 800d718:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 800d71e:	e00c      	b.n	800d73a <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 800d720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d722:	895b      	ldrh	r3, [r3, #10]
 800d724:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800d726:	1ad3      	subs	r3, r2, r3
 800d728:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 800d72a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d72c:	895b      	ldrh	r3, [r3, #10]
 800d72e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800d730:	1ad3      	subs	r3, r2, r3
 800d732:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 800d734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 800d73a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d004      	beq.n	800d74a <dhcp_parse_reply+0x6a>
 800d740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d742:	895b      	ldrh	r3, [r3, #10]
 800d744:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800d746:	429a      	cmp	r2, r3
 800d748:	d2ea      	bcs.n	800d720 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 800d74a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d102      	bne.n	800d756 <dhcp_parse_reply+0x76>
    return ERR_BUF;
 800d750:	f06f 0301 	mvn.w	r3, #1
 800d754:	e281      	b.n	800dc5a <dhcp_parse_reply+0x57a>
  }
  offset = options_idx;
 800d756:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d758:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 800d75a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800d75c:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 800d75e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d760:	685b      	ldr	r3, [r3, #4]
 800d762:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 800d764:	e239      	b.n	800dbda <dhcp_parse_reply+0x4fa>
    u8_t op = options[offset];
 800d766:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800d768:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d76a:	4413      	add	r3, r2
 800d76c:	781b      	ldrb	r3, [r3, #0]
 800d76e:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 800d770:	2300      	movs	r3, #0
 800d772:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 800d776:	f04f 33ff 	mov.w	r3, #4294967295
 800d77a:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 800d77c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800d77e:	3302      	adds	r3, #2
 800d780:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 800d782:	8bfa      	ldrh	r2, [r7, #30]
 800d784:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800d786:	429a      	cmp	r2, r3
 800d788:	d202      	bcs.n	800d790 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 800d78a:	f06f 0301 	mvn.w	r3, #1
 800d78e:	e264      	b.n	800dc5a <dhcp_parse_reply+0x57a>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 800d790:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800d792:	3301      	adds	r3, #1
 800d794:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d796:	8952      	ldrh	r2, [r2, #10]
 800d798:	4293      	cmp	r3, r2
 800d79a:	da07      	bge.n	800d7ac <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 800d79c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800d79e:	3301      	adds	r3, #1
 800d7a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d7a2:	4413      	add	r3, r2
 800d7a4:	781b      	ldrb	r3, [r3, #0]
 800d7a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d7aa:	e00b      	b.n	800d7c4 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 800d7ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d004      	beq.n	800d7be <dhcp_parse_reply+0xde>
 800d7b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	685b      	ldr	r3, [r3, #4]
 800d7ba:	781b      	ldrb	r3, [r3, #0]
 800d7bc:	e000      	b.n	800d7c0 <dhcp_parse_reply+0xe0>
 800d7be:	2300      	movs	r3, #0
 800d7c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 800d7c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d7c8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 800d7cc:	7dfb      	ldrb	r3, [r7, #23]
 800d7ce:	2b3b      	cmp	r3, #59	; 0x3b
 800d7d0:	f200 812c 	bhi.w	800da2c <dhcp_parse_reply+0x34c>
 800d7d4:	a201      	add	r2, pc, #4	; (adr r2, 800d7dc <dhcp_parse_reply+0xfc>)
 800d7d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7da:	bf00      	nop
 800d7dc:	0800d8cd 	.word	0x0800d8cd
 800d7e0:	0800d8dd 	.word	0x0800d8dd
 800d7e4:	0800da2d 	.word	0x0800da2d
 800d7e8:	0800d8ff 	.word	0x0800d8ff
 800d7ec:	0800da2d 	.word	0x0800da2d
 800d7f0:	0800da2d 	.word	0x0800da2d
 800d7f4:	0800da2d 	.word	0x0800da2d
 800d7f8:	0800da2d 	.word	0x0800da2d
 800d7fc:	0800da2d 	.word	0x0800da2d
 800d800:	0800da2d 	.word	0x0800da2d
 800d804:	0800da2d 	.word	0x0800da2d
 800d808:	0800da2d 	.word	0x0800da2d
 800d80c:	0800da2d 	.word	0x0800da2d
 800d810:	0800da2d 	.word	0x0800da2d
 800d814:	0800da2d 	.word	0x0800da2d
 800d818:	0800da2d 	.word	0x0800da2d
 800d81c:	0800da2d 	.word	0x0800da2d
 800d820:	0800da2d 	.word	0x0800da2d
 800d824:	0800da2d 	.word	0x0800da2d
 800d828:	0800da2d 	.word	0x0800da2d
 800d82c:	0800da2d 	.word	0x0800da2d
 800d830:	0800da2d 	.word	0x0800da2d
 800d834:	0800da2d 	.word	0x0800da2d
 800d838:	0800da2d 	.word	0x0800da2d
 800d83c:	0800da2d 	.word	0x0800da2d
 800d840:	0800da2d 	.word	0x0800da2d
 800d844:	0800da2d 	.word	0x0800da2d
 800d848:	0800da2d 	.word	0x0800da2d
 800d84c:	0800da2d 	.word	0x0800da2d
 800d850:	0800da2d 	.word	0x0800da2d
 800d854:	0800da2d 	.word	0x0800da2d
 800d858:	0800da2d 	.word	0x0800da2d
 800d85c:	0800da2d 	.word	0x0800da2d
 800d860:	0800da2d 	.word	0x0800da2d
 800d864:	0800da2d 	.word	0x0800da2d
 800d868:	0800da2d 	.word	0x0800da2d
 800d86c:	0800da2d 	.word	0x0800da2d
 800d870:	0800da2d 	.word	0x0800da2d
 800d874:	0800da2d 	.word	0x0800da2d
 800d878:	0800da2d 	.word	0x0800da2d
 800d87c:	0800da2d 	.word	0x0800da2d
 800d880:	0800da2d 	.word	0x0800da2d
 800d884:	0800da2d 	.word	0x0800da2d
 800d888:	0800da2d 	.word	0x0800da2d
 800d88c:	0800da2d 	.word	0x0800da2d
 800d890:	0800da2d 	.word	0x0800da2d
 800d894:	0800da2d 	.word	0x0800da2d
 800d898:	0800da2d 	.word	0x0800da2d
 800d89c:	0800da2d 	.word	0x0800da2d
 800d8a0:	0800da2d 	.word	0x0800da2d
 800d8a4:	0800da2d 	.word	0x0800da2d
 800d8a8:	0800d92b 	.word	0x0800d92b
 800d8ac:	0800d94d 	.word	0x0800d94d
 800d8b0:	0800d989 	.word	0x0800d989
 800d8b4:	0800d9ab 	.word	0x0800d9ab
 800d8b8:	0800da2d 	.word	0x0800da2d
 800d8bc:	0800da2d 	.word	0x0800da2d
 800d8c0:	0800da2d 	.word	0x0800da2d
 800d8c4:	0800d9e9 	.word	0x0800d9e9
 800d8c8:	0800da0b 	.word	0x0800da0b
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 800d8cc:	2300      	movs	r3, #0
 800d8ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d8d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d8d6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 800d8da:	e0ab      	b.n	800da34 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800d8dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d8e0:	2b04      	cmp	r3, #4
 800d8e2:	d009      	beq.n	800d8f8 <dhcp_parse_reply+0x218>
 800d8e4:	4b3a      	ldr	r3, [pc, #232]	; (800d9d0 <dhcp_parse_reply+0x2f0>)
 800d8e6:	f240 622e 	movw	r2, #1582	; 0x62e
 800d8ea:	493a      	ldr	r1, [pc, #232]	; (800d9d4 <dhcp_parse_reply+0x2f4>)
 800d8ec:	483a      	ldr	r0, [pc, #232]	; (800d9d8 <dhcp_parse_reply+0x2f8>)
 800d8ee:	f002 ff1b 	bl	8010728 <iprintf>
 800d8f2:	f06f 0305 	mvn.w	r3, #5
 800d8f6:	e1b0      	b.n	800dc5a <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 800d8f8:	2306      	movs	r3, #6
 800d8fa:	623b      	str	r3, [r7, #32]
        break;
 800d8fc:	e09a      	b.n	800da34 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 800d8fe:	2304      	movs	r3, #4
 800d900:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 800d904:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800d908:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d90c:	429a      	cmp	r2, r3
 800d90e:	d209      	bcs.n	800d924 <dhcp_parse_reply+0x244>
 800d910:	4b2f      	ldr	r3, [pc, #188]	; (800d9d0 <dhcp_parse_reply+0x2f0>)
 800d912:	f240 6233 	movw	r2, #1587	; 0x633
 800d916:	4931      	ldr	r1, [pc, #196]	; (800d9dc <dhcp_parse_reply+0x2fc>)
 800d918:	482f      	ldr	r0, [pc, #188]	; (800d9d8 <dhcp_parse_reply+0x2f8>)
 800d91a:	f002 ff05 	bl	8010728 <iprintf>
 800d91e:	f06f 0305 	mvn.w	r3, #5
 800d922:	e19a      	b.n	800dc5a <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 800d924:	2307      	movs	r3, #7
 800d926:	623b      	str	r3, [r7, #32]
        break;
 800d928:	e084      	b.n	800da34 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800d92a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d92e:	2b04      	cmp	r3, #4
 800d930:	d009      	beq.n	800d946 <dhcp_parse_reply+0x266>
 800d932:	4b27      	ldr	r3, [pc, #156]	; (800d9d0 <dhcp_parse_reply+0x2f0>)
 800d934:	f240 6241 	movw	r2, #1601	; 0x641
 800d938:	4926      	ldr	r1, [pc, #152]	; (800d9d4 <dhcp_parse_reply+0x2f4>)
 800d93a:	4827      	ldr	r0, [pc, #156]	; (800d9d8 <dhcp_parse_reply+0x2f8>)
 800d93c:	f002 fef4 	bl	8010728 <iprintf>
 800d940:	f06f 0305 	mvn.w	r3, #5
 800d944:	e189      	b.n	800dc5a <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 800d946:	2303      	movs	r3, #3
 800d948:	623b      	str	r3, [r7, #32]
        break;
 800d94a:	e073      	b.n	800da34 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800d94c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d950:	2b01      	cmp	r3, #1
 800d952:	d009      	beq.n	800d968 <dhcp_parse_reply+0x288>
 800d954:	4b1e      	ldr	r3, [pc, #120]	; (800d9d0 <dhcp_parse_reply+0x2f0>)
 800d956:	f240 624f 	movw	r2, #1615	; 0x64f
 800d95a:	4921      	ldr	r1, [pc, #132]	; (800d9e0 <dhcp_parse_reply+0x300>)
 800d95c:	481e      	ldr	r0, [pc, #120]	; (800d9d8 <dhcp_parse_reply+0x2f8>)
 800d95e:	f002 fee3 	bl	8010728 <iprintf>
 800d962:	f06f 0305 	mvn.w	r3, #5
 800d966:	e178      	b.n	800dc5a <dhcp_parse_reply+0x57a>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 800d968:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d96a:	2bf0      	cmp	r3, #240	; 0xf0
 800d96c:	d009      	beq.n	800d982 <dhcp_parse_reply+0x2a2>
 800d96e:	4b18      	ldr	r3, [pc, #96]	; (800d9d0 <dhcp_parse_reply+0x2f0>)
 800d970:	f240 6251 	movw	r2, #1617	; 0x651
 800d974:	491b      	ldr	r1, [pc, #108]	; (800d9e4 <dhcp_parse_reply+0x304>)
 800d976:	4818      	ldr	r0, [pc, #96]	; (800d9d8 <dhcp_parse_reply+0x2f8>)
 800d978:	f002 fed6 	bl	8010728 <iprintf>
 800d97c:	f06f 0305 	mvn.w	r3, #5
 800d980:	e16b      	b.n	800dc5a <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 800d982:	2300      	movs	r3, #0
 800d984:	623b      	str	r3, [r7, #32]
        break;
 800d986:	e055      	b.n	800da34 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800d988:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d98c:	2b01      	cmp	r3, #1
 800d98e:	d009      	beq.n	800d9a4 <dhcp_parse_reply+0x2c4>
 800d990:	4b0f      	ldr	r3, [pc, #60]	; (800d9d0 <dhcp_parse_reply+0x2f0>)
 800d992:	f240 6255 	movw	r2, #1621	; 0x655
 800d996:	4912      	ldr	r1, [pc, #72]	; (800d9e0 <dhcp_parse_reply+0x300>)
 800d998:	480f      	ldr	r0, [pc, #60]	; (800d9d8 <dhcp_parse_reply+0x2f8>)
 800d99a:	f002 fec5 	bl	8010728 <iprintf>
 800d99e:	f06f 0305 	mvn.w	r3, #5
 800d9a2:	e15a      	b.n	800dc5a <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 800d9a4:	2301      	movs	r3, #1
 800d9a6:	623b      	str	r3, [r7, #32]
        break;
 800d9a8:	e044      	b.n	800da34 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800d9aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d9ae:	2b04      	cmp	r3, #4
 800d9b0:	d009      	beq.n	800d9c6 <dhcp_parse_reply+0x2e6>
 800d9b2:	4b07      	ldr	r3, [pc, #28]	; (800d9d0 <dhcp_parse_reply+0x2f0>)
 800d9b4:	f240 6259 	movw	r2, #1625	; 0x659
 800d9b8:	4906      	ldr	r1, [pc, #24]	; (800d9d4 <dhcp_parse_reply+0x2f4>)
 800d9ba:	4807      	ldr	r0, [pc, #28]	; (800d9d8 <dhcp_parse_reply+0x2f8>)
 800d9bc:	f002 feb4 	bl	8010728 <iprintf>
 800d9c0:	f06f 0305 	mvn.w	r3, #5
 800d9c4:	e149      	b.n	800dc5a <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 800d9c6:	2302      	movs	r3, #2
 800d9c8:	623b      	str	r3, [r7, #32]
        break;
 800d9ca:	e033      	b.n	800da34 <dhcp_parse_reply+0x354>
 800d9cc:	20007cd4 	.word	0x20007cd4
 800d9d0:	08013c04 	.word	0x08013c04
 800d9d4:	08013e8c 	.word	0x08013e8c
 800d9d8:	08013c64 	.word	0x08013c64
 800d9dc:	08013e98 	.word	0x08013e98
 800d9e0:	08013eac 	.word	0x08013eac
 800d9e4:	08013eb8 	.word	0x08013eb8
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800d9e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d9ec:	2b04      	cmp	r3, #4
 800d9ee:	d009      	beq.n	800da04 <dhcp_parse_reply+0x324>
 800d9f0:	4b9c      	ldr	r3, [pc, #624]	; (800dc64 <dhcp_parse_reply+0x584>)
 800d9f2:	f240 625d 	movw	r2, #1629	; 0x65d
 800d9f6:	499c      	ldr	r1, [pc, #624]	; (800dc68 <dhcp_parse_reply+0x588>)
 800d9f8:	489c      	ldr	r0, [pc, #624]	; (800dc6c <dhcp_parse_reply+0x58c>)
 800d9fa:	f002 fe95 	bl	8010728 <iprintf>
 800d9fe:	f06f 0305 	mvn.w	r3, #5
 800da02:	e12a      	b.n	800dc5a <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T1;
 800da04:	2304      	movs	r3, #4
 800da06:	623b      	str	r3, [r7, #32]
        break;
 800da08:	e014      	b.n	800da34 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800da0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800da0e:	2b04      	cmp	r3, #4
 800da10:	d009      	beq.n	800da26 <dhcp_parse_reply+0x346>
 800da12:	4b94      	ldr	r3, [pc, #592]	; (800dc64 <dhcp_parse_reply+0x584>)
 800da14:	f240 6261 	movw	r2, #1633	; 0x661
 800da18:	4993      	ldr	r1, [pc, #588]	; (800dc68 <dhcp_parse_reply+0x588>)
 800da1a:	4894      	ldr	r0, [pc, #592]	; (800dc6c <dhcp_parse_reply+0x58c>)
 800da1c:	f002 fe84 	bl	8010728 <iprintf>
 800da20:	f06f 0305 	mvn.w	r3, #5
 800da24:	e119      	b.n	800dc5a <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T2;
 800da26:	2305      	movs	r3, #5
 800da28:	623b      	str	r3, [r7, #32]
        break;
 800da2a:	e003      	b.n	800da34 <dhcp_parse_reply+0x354>
      default:
        decode_len = 0;
 800da2c:	2300      	movs	r3, #0
 800da2e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 800da32:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 800da34:	7dfb      	ldrb	r3, [r7, #23]
 800da36:	2b00      	cmp	r3, #0
 800da38:	d103      	bne.n	800da42 <dhcp_parse_reply+0x362>
      offset++;
 800da3a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800da3c:	3301      	adds	r3, #1
 800da3e:	877b      	strh	r3, [r7, #58]	; 0x3a
 800da40:	e0a1      	b.n	800db86 <dhcp_parse_reply+0x4a6>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 800da42:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800da44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800da48:	4413      	add	r3, r2
 800da4a:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 800da4e:	4293      	cmp	r3, r2
 800da50:	dd02      	ble.n	800da58 <dhcp_parse_reply+0x378>
        /* overflow */
        return ERR_BUF;
 800da52:	f06f 0301 	mvn.w	r3, #1
 800da56:	e100      	b.n	800dc5a <dhcp_parse_reply+0x57a>
      }
      offset = (u16_t)(offset + len + 2);
 800da58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800da5c:	b29a      	uxth	r2, r3
 800da5e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800da60:	4413      	add	r3, r2
 800da62:	b29b      	uxth	r3, r3
 800da64:	3302      	adds	r3, #2
 800da66:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 800da68:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	f000 808a 	beq.w	800db86 <dhcp_parse_reply+0x4a6>
        u32_t value = 0;
 800da72:	2300      	movs	r3, #0
 800da74:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 800da76:	6a3b      	ldr	r3, [r7, #32]
 800da78:	2b00      	cmp	r3, #0
 800da7a:	db02      	blt.n	800da82 <dhcp_parse_reply+0x3a2>
 800da7c:	6a3b      	ldr	r3, [r7, #32]
 800da7e:	2b07      	cmp	r3, #7
 800da80:	dd06      	ble.n	800da90 <dhcp_parse_reply+0x3b0>
 800da82:	4b78      	ldr	r3, [pc, #480]	; (800dc64 <dhcp_parse_reply+0x584>)
 800da84:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 800da88:	4979      	ldr	r1, [pc, #484]	; (800dc70 <dhcp_parse_reply+0x590>)
 800da8a:	4878      	ldr	r0, [pc, #480]	; (800dc6c <dhcp_parse_reply+0x58c>)
 800da8c:	f002 fe4c 	bl	8010728 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 800da90:	4a78      	ldr	r2, [pc, #480]	; (800dc74 <dhcp_parse_reply+0x594>)
 800da92:	6a3b      	ldr	r3, [r7, #32]
 800da94:	4413      	add	r3, r2
 800da96:	781b      	ldrb	r3, [r3, #0]
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d174      	bne.n	800db86 <dhcp_parse_reply+0x4a6>
          copy_len = LWIP_MIN(decode_len, 4);
 800da9c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800daa0:	2b04      	cmp	r3, #4
 800daa2:	bf28      	it	cs
 800daa4:	2304      	movcs	r3, #4
 800daa6:	b2db      	uxtb	r3, r3
 800daa8:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 800daaa:	8bfb      	ldrh	r3, [r7, #30]
 800daac:	8aba      	ldrh	r2, [r7, #20]
 800daae:	f107 0108 	add.w	r1, r7, #8
 800dab2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dab4:	f7f8 fc8a 	bl	80063cc <pbuf_copy_partial>
 800dab8:	4603      	mov	r3, r0
 800daba:	461a      	mov	r2, r3
 800dabc:	8abb      	ldrh	r3, [r7, #20]
 800dabe:	4293      	cmp	r3, r2
 800dac0:	d002      	beq.n	800dac8 <dhcp_parse_reply+0x3e8>
            return ERR_BUF;
 800dac2:	f06f 0301 	mvn.w	r3, #1
 800dac6:	e0c8      	b.n	800dc5a <dhcp_parse_reply+0x57a>
          }
          if (decode_len > 4) {
 800dac8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dacc:	2b04      	cmp	r3, #4
 800dace:	d933      	bls.n	800db38 <dhcp_parse_reply+0x458>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 800dad0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dad4:	f003 0303 	and.w	r3, r3, #3
 800dad8:	b2db      	uxtb	r3, r3
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d009      	beq.n	800daf2 <dhcp_parse_reply+0x412>
 800dade:	4b61      	ldr	r3, [pc, #388]	; (800dc64 <dhcp_parse_reply+0x584>)
 800dae0:	f240 6281 	movw	r2, #1665	; 0x681
 800dae4:	4964      	ldr	r1, [pc, #400]	; (800dc78 <dhcp_parse_reply+0x598>)
 800dae6:	4861      	ldr	r0, [pc, #388]	; (800dc6c <dhcp_parse_reply+0x58c>)
 800dae8:	f002 fe1e 	bl	8010728 <iprintf>
 800daec:	f06f 0305 	mvn.w	r3, #5
 800daf0:	e0b3      	b.n	800dc5a <dhcp_parse_reply+0x57a>
            dhcp_got_option(dhcp, decode_idx);
 800daf2:	4a60      	ldr	r2, [pc, #384]	; (800dc74 <dhcp_parse_reply+0x594>)
 800daf4:	6a3b      	ldr	r3, [r7, #32]
 800daf6:	4413      	add	r3, r2
 800daf8:	2201      	movs	r2, #1
 800dafa:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 800dafc:	68bb      	ldr	r3, [r7, #8]
 800dafe:	4618      	mov	r0, r3
 800db00:	f7f6 fe7d 	bl	80047fe <lwip_htonl>
 800db04:	4602      	mov	r2, r0
 800db06:	495d      	ldr	r1, [pc, #372]	; (800dc7c <dhcp_parse_reply+0x59c>)
 800db08:	6a3b      	ldr	r3, [r7, #32]
 800db0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 800db0e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800db12:	3b04      	subs	r3, #4
 800db14:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 800db18:	8bfb      	ldrh	r3, [r7, #30]
 800db1a:	3304      	adds	r3, #4
 800db1c:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 800db1e:	8a7a      	ldrh	r2, [r7, #18]
 800db20:	8bfb      	ldrh	r3, [r7, #30]
 800db22:	429a      	cmp	r2, r3
 800db24:	d202      	bcs.n	800db2c <dhcp_parse_reply+0x44c>
              /* overflow */
              return ERR_BUF;
 800db26:	f06f 0301 	mvn.w	r3, #1
 800db2a:	e096      	b.n	800dc5a <dhcp_parse_reply+0x57a>
            }
            val_offset = next_val_offset;
 800db2c:	8a7b      	ldrh	r3, [r7, #18]
 800db2e:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 800db30:	6a3b      	ldr	r3, [r7, #32]
 800db32:	3301      	adds	r3, #1
 800db34:	623b      	str	r3, [r7, #32]
            goto decode_next;
 800db36:	e79e      	b.n	800da76 <dhcp_parse_reply+0x396>
          } else if (decode_len == 4) {
 800db38:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800db3c:	2b04      	cmp	r3, #4
 800db3e:	d106      	bne.n	800db4e <dhcp_parse_reply+0x46e>
            value = lwip_ntohl(value);
 800db40:	68bb      	ldr	r3, [r7, #8]
 800db42:	4618      	mov	r0, r3
 800db44:	f7f6 fe5b 	bl	80047fe <lwip_htonl>
 800db48:	4603      	mov	r3, r0
 800db4a:	60bb      	str	r3, [r7, #8]
 800db4c:	e011      	b.n	800db72 <dhcp_parse_reply+0x492>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 800db4e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800db52:	2b01      	cmp	r3, #1
 800db54:	d009      	beq.n	800db6a <dhcp_parse_reply+0x48a>
 800db56:	4b43      	ldr	r3, [pc, #268]	; (800dc64 <dhcp_parse_reply+0x584>)
 800db58:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 800db5c:	4948      	ldr	r1, [pc, #288]	; (800dc80 <dhcp_parse_reply+0x5a0>)
 800db5e:	4843      	ldr	r0, [pc, #268]	; (800dc6c <dhcp_parse_reply+0x58c>)
 800db60:	f002 fde2 	bl	8010728 <iprintf>
 800db64:	f06f 0305 	mvn.w	r3, #5
 800db68:	e077      	b.n	800dc5a <dhcp_parse_reply+0x57a>
            value = ((u8_t *)&value)[0];
 800db6a:	f107 0308 	add.w	r3, r7, #8
 800db6e:	781b      	ldrb	r3, [r3, #0]
 800db70:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 800db72:	4a40      	ldr	r2, [pc, #256]	; (800dc74 <dhcp_parse_reply+0x594>)
 800db74:	6a3b      	ldr	r3, [r7, #32]
 800db76:	4413      	add	r3, r2
 800db78:	2201      	movs	r2, #1
 800db7a:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 800db7c:	68ba      	ldr	r2, [r7, #8]
 800db7e:	493f      	ldr	r1, [pc, #252]	; (800dc7c <dhcp_parse_reply+0x59c>)
 800db80:	6a3b      	ldr	r3, [r7, #32]
 800db82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 800db86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db88:	895b      	ldrh	r3, [r3, #10]
 800db8a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800db8c:	429a      	cmp	r2, r3
 800db8e:	d324      	bcc.n	800dbda <dhcp_parse_reply+0x4fa>
      offset = (u16_t)(offset - q->len);
 800db90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db92:	895b      	ldrh	r3, [r3, #10]
 800db94:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800db96:	1ad3      	subs	r3, r2, r3
 800db98:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 800db9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db9c:	895b      	ldrh	r3, [r3, #10]
 800db9e:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800dba0:	1ad3      	subs	r3, r2, r3
 800dba2:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 800dba4:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800dba6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800dba8:	429a      	cmp	r2, r3
 800dbaa:	d213      	bcs.n	800dbd4 <dhcp_parse_reply+0x4f4>
        q = q->next;
 800dbac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 800dbb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d109      	bne.n	800dbcc <dhcp_parse_reply+0x4ec>
 800dbb8:	4b2a      	ldr	r3, [pc, #168]	; (800dc64 <dhcp_parse_reply+0x584>)
 800dbba:	f240 629d 	movw	r2, #1693	; 0x69d
 800dbbe:	4931      	ldr	r1, [pc, #196]	; (800dc84 <dhcp_parse_reply+0x5a4>)
 800dbc0:	482a      	ldr	r0, [pc, #168]	; (800dc6c <dhcp_parse_reply+0x58c>)
 800dbc2:	f002 fdb1 	bl	8010728 <iprintf>
 800dbc6:	f06f 0305 	mvn.w	r3, #5
 800dbca:	e046      	b.n	800dc5a <dhcp_parse_reply+0x57a>
        options = (u8_t *)q->payload;
 800dbcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbce:	685b      	ldr	r3, [r3, #4]
 800dbd0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dbd2:	e002      	b.n	800dbda <dhcp_parse_reply+0x4fa>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 800dbd4:	f06f 0301 	mvn.w	r3, #1
 800dbd8:	e03f      	b.n	800dc5a <dhcp_parse_reply+0x57a>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 800dbda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d00a      	beq.n	800dbf6 <dhcp_parse_reply+0x516>
 800dbe0:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800dbe2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800dbe4:	429a      	cmp	r2, r3
 800dbe6:	d206      	bcs.n	800dbf6 <dhcp_parse_reply+0x516>
 800dbe8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800dbea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800dbec:	4413      	add	r3, r2
 800dbee:	781b      	ldrb	r3, [r3, #0]
 800dbf0:	2bff      	cmp	r3, #255	; 0xff
 800dbf2:	f47f adb8 	bne.w	800d766 <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 800dbf6:	4b1f      	ldr	r3, [pc, #124]	; (800dc74 <dhcp_parse_reply+0x594>)
 800dbf8:	781b      	ldrb	r3, [r3, #0]
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d018      	beq.n	800dc30 <dhcp_parse_reply+0x550>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 800dbfe:	4b1f      	ldr	r3, [pc, #124]	; (800dc7c <dhcp_parse_reply+0x59c>)
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 800dc04:	4b1b      	ldr	r3, [pc, #108]	; (800dc74 <dhcp_parse_reply+0x594>)
 800dc06:	2200      	movs	r2, #0
 800dc08:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	2b01      	cmp	r3, #1
 800dc0e:	d102      	bne.n	800dc16 <dhcp_parse_reply+0x536>
      parse_file_as_options = 1;
 800dc10:	2301      	movs	r3, #1
 800dc12:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dc14:	e00c      	b.n	800dc30 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	2b02      	cmp	r3, #2
 800dc1a:	d102      	bne.n	800dc22 <dhcp_parse_reply+0x542>
      parse_sname_as_options = 1;
 800dc1c:	2301      	movs	r3, #1
 800dc1e:	62bb      	str	r3, [r7, #40]	; 0x28
 800dc20:	e006      	b.n	800dc30 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	2b03      	cmp	r3, #3
 800dc26:	d103      	bne.n	800dc30 <dhcp_parse_reply+0x550>
      parse_sname_as_options = 1;
 800dc28:	2301      	movs	r3, #1
 800dc2a:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 800dc2c:	2301      	movs	r3, #1
 800dc2e:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 800dc30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d006      	beq.n	800dc44 <dhcp_parse_reply+0x564>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 800dc36:	2300      	movs	r3, #0
 800dc38:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 800dc3a:	236c      	movs	r3, #108	; 0x6c
 800dc3c:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 800dc3e:	23ec      	movs	r3, #236	; 0xec
 800dc40:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 800dc42:	e56a      	b.n	800d71a <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 800dc44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d006      	beq.n	800dc58 <dhcp_parse_reply+0x578>
    parse_sname_as_options = 0;
 800dc4a:	2300      	movs	r3, #0
 800dc4c:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 800dc4e:	232c      	movs	r3, #44	; 0x2c
 800dc50:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 800dc52:	236c      	movs	r3, #108	; 0x6c
 800dc54:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 800dc56:	e560      	b.n	800d71a <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 800dc58:	2300      	movs	r3, #0
}
 800dc5a:	4618      	mov	r0, r3
 800dc5c:	3740      	adds	r7, #64	; 0x40
 800dc5e:	46bd      	mov	sp, r7
 800dc60:	bd80      	pop	{r7, pc}
 800dc62:	bf00      	nop
 800dc64:	08013c04 	.word	0x08013c04
 800dc68:	08013e8c 	.word	0x08013e8c
 800dc6c:	08013c64 	.word	0x08013c64
 800dc70:	08013ed0 	.word	0x08013ed0
 800dc74:	20007cd4 	.word	0x20007cd4
 800dc78:	08013ee4 	.word	0x08013ee4
 800dc7c:	20007cb4 	.word	0x20007cb4
 800dc80:	08013efc 	.word	0x08013efc
 800dc84:	08013f10 	.word	0x08013f10

0800dc88 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 800dc88:	b580      	push	{r7, lr}
 800dc8a:	b08a      	sub	sp, #40	; 0x28
 800dc8c:	af00      	add	r7, sp, #0
 800dc8e:	60f8      	str	r0, [r7, #12]
 800dc90:	60b9      	str	r1, [r7, #8]
 800dc92:	607a      	str	r2, [r7, #4]
 800dc94:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 800dc96:	4b60      	ldr	r3, [pc, #384]	; (800de18 <dhcp_recv+0x190>)
 800dc98:	685b      	ldr	r3, [r3, #4]
 800dc9a:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800dc9c:	6a3b      	ldr	r3, [r7, #32]
 800dc9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dca0:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	685b      	ldr	r3, [r3, #4]
 800dca6:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 800dca8:	69fb      	ldr	r3, [r7, #28]
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	f000 809d 	beq.w	800ddea <dhcp_recv+0x162>
 800dcb0:	69fb      	ldr	r3, [r7, #28]
 800dcb2:	791b      	ldrb	r3, [r3, #4]
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	f000 8098 	beq.w	800ddea <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	895b      	ldrh	r3, [r3, #10]
 800dcbe:	2b2b      	cmp	r3, #43	; 0x2b
 800dcc0:	f240 8095 	bls.w	800ddee <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 800dcc4:	69bb      	ldr	r3, [r7, #24]
 800dcc6:	781b      	ldrb	r3, [r3, #0]
 800dcc8:	2b02      	cmp	r3, #2
 800dcca:	f040 8092 	bne.w	800ddf2 <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800dcce:	2300      	movs	r3, #0
 800dcd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800dcd4:	e012      	b.n	800dcfc <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 800dcd6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dcda:	6a3a      	ldr	r2, [r7, #32]
 800dcdc:	4413      	add	r3, r2
 800dcde:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 800dce2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dce6:	69b9      	ldr	r1, [r7, #24]
 800dce8:	440b      	add	r3, r1
 800dcea:	7f1b      	ldrb	r3, [r3, #28]
 800dcec:	429a      	cmp	r2, r3
 800dcee:	f040 8082 	bne.w	800ddf6 <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800dcf2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dcf6:	3301      	adds	r3, #1
 800dcf8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800dcfc:	6a3b      	ldr	r3, [r7, #32]
 800dcfe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dd02:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800dd06:	429a      	cmp	r2, r3
 800dd08:	d203      	bcs.n	800dd12 <dhcp_recv+0x8a>
 800dd0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dd0e:	2b05      	cmp	r3, #5
 800dd10:	d9e1      	bls.n	800dcd6 <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 800dd12:	69bb      	ldr	r3, [r7, #24]
 800dd14:	685b      	ldr	r3, [r3, #4]
 800dd16:	4618      	mov	r0, r3
 800dd18:	f7f6 fd71 	bl	80047fe <lwip_htonl>
 800dd1c:	4602      	mov	r2, r0
 800dd1e:	69fb      	ldr	r3, [r7, #28]
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	429a      	cmp	r2, r3
 800dd24:	d169      	bne.n	800ddfa <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 800dd26:	69f9      	ldr	r1, [r7, #28]
 800dd28:	6878      	ldr	r0, [r7, #4]
 800dd2a:	f7ff fcd9 	bl	800d6e0 <dhcp_parse_reply>
 800dd2e:	4603      	mov	r3, r0
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d164      	bne.n	800ddfe <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 800dd34:	4b39      	ldr	r3, [pc, #228]	; (800de1c <dhcp_recv+0x194>)
 800dd36:	785b      	ldrb	r3, [r3, #1]
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d062      	beq.n	800de02 <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	685b      	ldr	r3, [r3, #4]
 800dd40:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 800dd42:	4b37      	ldr	r3, [pc, #220]	; (800de20 <dhcp_recv+0x198>)
 800dd44:	685b      	ldr	r3, [r3, #4]
 800dd46:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 800dd48:	7cfb      	ldrb	r3, [r7, #19]
 800dd4a:	2b05      	cmp	r3, #5
 800dd4c:	d12a      	bne.n	800dda4 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 800dd4e:	69fb      	ldr	r3, [r7, #28]
 800dd50:	795b      	ldrb	r3, [r3, #5]
 800dd52:	2b01      	cmp	r3, #1
 800dd54:	d112      	bne.n	800dd7c <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 800dd56:	6979      	ldr	r1, [r7, #20]
 800dd58:	6a38      	ldr	r0, [r7, #32]
 800dd5a:	f7fe fe17 	bl	800c98c <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 800dd5e:	6a3b      	ldr	r3, [r7, #32]
 800dd60:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800dd64:	f003 0308 	and.w	r3, r3, #8
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d003      	beq.n	800dd74 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 800dd6c:	6a38      	ldr	r0, [r7, #32]
 800dd6e:	f7fe fb87 	bl	800c480 <dhcp_check>
 800dd72:	e049      	b.n	800de08 <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 800dd74:	6a38      	ldr	r0, [r7, #32]
 800dd76:	f7ff f867 	bl	800ce48 <dhcp_bind>
 800dd7a:	e045      	b.n	800de08 <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 800dd7c:	69fb      	ldr	r3, [r7, #28]
 800dd7e:	795b      	ldrb	r3, [r3, #5]
 800dd80:	2b03      	cmp	r3, #3
 800dd82:	d007      	beq.n	800dd94 <dhcp_recv+0x10c>
 800dd84:	69fb      	ldr	r3, [r7, #28]
 800dd86:	795b      	ldrb	r3, [r3, #5]
 800dd88:	2b04      	cmp	r3, #4
 800dd8a:	d003      	beq.n	800dd94 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 800dd8c:	69fb      	ldr	r3, [r7, #28]
 800dd8e:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 800dd90:	2b05      	cmp	r3, #5
 800dd92:	d139      	bne.n	800de08 <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 800dd94:	6979      	ldr	r1, [r7, #20]
 800dd96:	6a38      	ldr	r0, [r7, #32]
 800dd98:	f7fe fdf8 	bl	800c98c <dhcp_handle_ack>
      dhcp_bind(netif);
 800dd9c:	6a38      	ldr	r0, [r7, #32]
 800dd9e:	f7ff f853 	bl	800ce48 <dhcp_bind>
 800dda2:	e031      	b.n	800de08 <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 800dda4:	7cfb      	ldrb	r3, [r7, #19]
 800dda6:	2b06      	cmp	r3, #6
 800dda8:	d113      	bne.n	800ddd2 <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800ddaa:	69fb      	ldr	r3, [r7, #28]
 800ddac:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 800ddae:	2b03      	cmp	r3, #3
 800ddb0:	d00b      	beq.n	800ddca <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800ddb2:	69fb      	ldr	r3, [r7, #28]
 800ddb4:	795b      	ldrb	r3, [r3, #5]
 800ddb6:	2b01      	cmp	r3, #1
 800ddb8:	d007      	beq.n	800ddca <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 800ddba:	69fb      	ldr	r3, [r7, #28]
 800ddbc:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800ddbe:	2b04      	cmp	r3, #4
 800ddc0:	d003      	beq.n	800ddca <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 800ddc2:	69fb      	ldr	r3, [r7, #28]
 800ddc4:	795b      	ldrb	r3, [r3, #5]
 800ddc6:	2b05      	cmp	r3, #5
 800ddc8:	d103      	bne.n	800ddd2 <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 800ddca:	6a38      	ldr	r0, [r7, #32]
 800ddcc:	f7fe fb3e 	bl	800c44c <dhcp_handle_nak>
 800ddd0:	e01a      	b.n	800de08 <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 800ddd2:	7cfb      	ldrb	r3, [r7, #19]
 800ddd4:	2b02      	cmp	r3, #2
 800ddd6:	d116      	bne.n	800de06 <dhcp_recv+0x17e>
 800ddd8:	69fb      	ldr	r3, [r7, #28]
 800ddda:	795b      	ldrb	r3, [r3, #5]
 800dddc:	2b06      	cmp	r3, #6
 800ddde:	d112      	bne.n	800de06 <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 800dde0:	6979      	ldr	r1, [r7, #20]
 800dde2:	6a38      	ldr	r0, [r7, #32]
 800dde4:	f7fe fb80 	bl	800c4e8 <dhcp_handle_offer>
 800dde8:	e00e      	b.n	800de08 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 800ddea:	bf00      	nop
 800ddec:	e00c      	b.n	800de08 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 800ddee:	bf00      	nop
 800ddf0:	e00a      	b.n	800de08 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 800ddf2:	bf00      	nop
 800ddf4:	e008      	b.n	800de08 <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 800ddf6:	bf00      	nop
 800ddf8:	e006      	b.n	800de08 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 800ddfa:	bf00      	nop
 800ddfc:	e004      	b.n	800de08 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 800ddfe:	bf00      	nop
 800de00:	e002      	b.n	800de08 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 800de02:	bf00      	nop
 800de04:	e000      	b.n	800de08 <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 800de06:	bf00      	nop
  pbuf_free(p);
 800de08:	6878      	ldr	r0, [r7, #4]
 800de0a:	f7f8 f8e5 	bl	8005fd8 <pbuf_free>
}
 800de0e:	bf00      	nop
 800de10:	3728      	adds	r7, #40	; 0x28
 800de12:	46bd      	mov	sp, r7
 800de14:	bd80      	pop	{r7, pc}
 800de16:	bf00      	nop
 800de18:	20004d18 	.word	0x20004d18
 800de1c:	20007cd4 	.word	0x20007cd4
 800de20:	20007cb4 	.word	0x20007cb4

0800de24 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 800de24:	b580      	push	{r7, lr}
 800de26:	b088      	sub	sp, #32
 800de28:	af00      	add	r7, sp, #0
 800de2a:	60f8      	str	r0, [r7, #12]
 800de2c:	60b9      	str	r1, [r7, #8]
 800de2e:	603b      	str	r3, [r7, #0]
 800de30:	4613      	mov	r3, r2
 800de32:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	2b00      	cmp	r3, #0
 800de38:	d108      	bne.n	800de4c <dhcp_create_msg+0x28>
 800de3a:	4b5f      	ldr	r3, [pc, #380]	; (800dfb8 <dhcp_create_msg+0x194>)
 800de3c:	f240 7269 	movw	r2, #1897	; 0x769
 800de40:	495e      	ldr	r1, [pc, #376]	; (800dfbc <dhcp_create_msg+0x198>)
 800de42:	485f      	ldr	r0, [pc, #380]	; (800dfc0 <dhcp_create_msg+0x19c>)
 800de44:	f002 fc70 	bl	8010728 <iprintf>
 800de48:	2300      	movs	r3, #0
 800de4a:	e0b1      	b.n	800dfb0 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 800de4c:	68bb      	ldr	r3, [r7, #8]
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d108      	bne.n	800de64 <dhcp_create_msg+0x40>
 800de52:	4b59      	ldr	r3, [pc, #356]	; (800dfb8 <dhcp_create_msg+0x194>)
 800de54:	f240 726a 	movw	r2, #1898	; 0x76a
 800de58:	495a      	ldr	r1, [pc, #360]	; (800dfc4 <dhcp_create_msg+0x1a0>)
 800de5a:	4859      	ldr	r0, [pc, #356]	; (800dfc0 <dhcp_create_msg+0x19c>)
 800de5c:	f002 fc64 	bl	8010728 <iprintf>
 800de60:	2300      	movs	r3, #0
 800de62:	e0a5      	b.n	800dfb0 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 800de64:	f44f 7220 	mov.w	r2, #640	; 0x280
 800de68:	f44f 719a 	mov.w	r1, #308	; 0x134
 800de6c:	2036      	movs	r0, #54	; 0x36
 800de6e:	f7f7 fdcf 	bl	8005a10 <pbuf_alloc>
 800de72:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 800de74:	69bb      	ldr	r3, [r7, #24]
 800de76:	2b00      	cmp	r3, #0
 800de78:	d101      	bne.n	800de7e <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 800de7a:	2300      	movs	r3, #0
 800de7c:	e098      	b.n	800dfb0 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 800de7e:	69bb      	ldr	r3, [r7, #24]
 800de80:	895b      	ldrh	r3, [r3, #10]
 800de82:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 800de86:	d206      	bcs.n	800de96 <dhcp_create_msg+0x72>
 800de88:	4b4b      	ldr	r3, [pc, #300]	; (800dfb8 <dhcp_create_msg+0x194>)
 800de8a:	f240 7271 	movw	r2, #1905	; 0x771
 800de8e:	494e      	ldr	r1, [pc, #312]	; (800dfc8 <dhcp_create_msg+0x1a4>)
 800de90:	484b      	ldr	r0, [pc, #300]	; (800dfc0 <dhcp_create_msg+0x19c>)
 800de92:	f002 fc49 	bl	8010728 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 800de96:	79fb      	ldrb	r3, [r7, #7]
 800de98:	2b03      	cmp	r3, #3
 800de9a:	d103      	bne.n	800dea4 <dhcp_create_msg+0x80>
 800de9c:	68bb      	ldr	r3, [r7, #8]
 800de9e:	795b      	ldrb	r3, [r3, #5]
 800dea0:	2b03      	cmp	r3, #3
 800dea2:	d10d      	bne.n	800dec0 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 800dea4:	68bb      	ldr	r3, [r7, #8]
 800dea6:	799b      	ldrb	r3, [r3, #6]
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d105      	bne.n	800deb8 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 800deac:	f002 fcca 	bl	8010844 <rand>
 800deb0:	4603      	mov	r3, r0
 800deb2:	461a      	mov	r2, r3
 800deb4:	4b45      	ldr	r3, [pc, #276]	; (800dfcc <dhcp_create_msg+0x1a8>)
 800deb6:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 800deb8:	4b44      	ldr	r3, [pc, #272]	; (800dfcc <dhcp_create_msg+0x1a8>)
 800deba:	681a      	ldr	r2, [r3, #0]
 800debc:	68bb      	ldr	r3, [r7, #8]
 800debe:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 800dec0:	69bb      	ldr	r3, [r7, #24]
 800dec2:	685b      	ldr	r3, [r3, #4]
 800dec4:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 800dec6:	f44f 729a 	mov.w	r2, #308	; 0x134
 800deca:	2100      	movs	r1, #0
 800decc:	6978      	ldr	r0, [r7, #20]
 800dece:	f002 fc23 	bl	8010718 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 800ded2:	697b      	ldr	r3, [r7, #20]
 800ded4:	2201      	movs	r2, #1
 800ded6:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 800ded8:	697b      	ldr	r3, [r7, #20]
 800deda:	2201      	movs	r2, #1
 800dedc:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800dee4:	697b      	ldr	r3, [r7, #20]
 800dee6:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 800dee8:	68bb      	ldr	r3, [r7, #8]
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	4618      	mov	r0, r3
 800deee:	f7f6 fc86 	bl	80047fe <lwip_htonl>
 800def2:	4602      	mov	r2, r0
 800def4:	697b      	ldr	r3, [r7, #20]
 800def6:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 800def8:	79fb      	ldrb	r3, [r7, #7]
 800defa:	2b08      	cmp	r3, #8
 800defc:	d010      	beq.n	800df20 <dhcp_create_msg+0xfc>
 800defe:	79fb      	ldrb	r3, [r7, #7]
 800df00:	2b04      	cmp	r3, #4
 800df02:	d00d      	beq.n	800df20 <dhcp_create_msg+0xfc>
 800df04:	79fb      	ldrb	r3, [r7, #7]
 800df06:	2b07      	cmp	r3, #7
 800df08:	d00a      	beq.n	800df20 <dhcp_create_msg+0xfc>
 800df0a:	79fb      	ldrb	r3, [r7, #7]
 800df0c:	2b03      	cmp	r3, #3
 800df0e:	d10c      	bne.n	800df2a <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 800df10:	68bb      	ldr	r3, [r7, #8]
 800df12:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 800df14:	2b05      	cmp	r3, #5
 800df16:	d003      	beq.n	800df20 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 800df18:	68bb      	ldr	r3, [r7, #8]
 800df1a:	795b      	ldrb	r3, [r3, #5]
 800df1c:	2b04      	cmp	r3, #4
 800df1e:	d104      	bne.n	800df2a <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	3304      	adds	r3, #4
 800df24:	681a      	ldr	r2, [r3, #0]
 800df26:	697b      	ldr	r3, [r7, #20]
 800df28:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800df2a:	2300      	movs	r3, #0
 800df2c:	83fb      	strh	r3, [r7, #30]
 800df2e:	e00c      	b.n	800df4a <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 800df30:	8bfa      	ldrh	r2, [r7, #30]
 800df32:	8bfb      	ldrh	r3, [r7, #30]
 800df34:	68f9      	ldr	r1, [r7, #12]
 800df36:	440a      	add	r2, r1
 800df38:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 800df3c:	697a      	ldr	r2, [r7, #20]
 800df3e:	4413      	add	r3, r2
 800df40:	460a      	mov	r2, r1
 800df42:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800df44:	8bfb      	ldrh	r3, [r7, #30]
 800df46:	3301      	adds	r3, #1
 800df48:	83fb      	strh	r3, [r7, #30]
 800df4a:	8bfb      	ldrh	r3, [r7, #30]
 800df4c:	2b05      	cmp	r3, #5
 800df4e:	d9ef      	bls.n	800df30 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 800df50:	697b      	ldr	r3, [r7, #20]
 800df52:	2200      	movs	r2, #0
 800df54:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 800df58:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 800df5c:	2200      	movs	r2, #0
 800df5e:	f062 027d 	orn	r2, r2, #125	; 0x7d
 800df62:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 800df66:	2200      	movs	r2, #0
 800df68:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 800df6c:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 800df70:	2200      	movs	r2, #0
 800df72:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 800df76:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 800df7a:	697b      	ldr	r3, [r7, #20]
 800df7c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800df80:	2301      	movs	r3, #1
 800df82:	2235      	movs	r2, #53	; 0x35
 800df84:	2000      	movs	r0, #0
 800df86:	f7ff fadb 	bl	800d540 <dhcp_option>
 800df8a:	4603      	mov	r3, r0
 800df8c:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 800df8e:	697b      	ldr	r3, [r7, #20]
 800df90:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800df94:	79fa      	ldrb	r2, [r7, #7]
 800df96:	8a7b      	ldrh	r3, [r7, #18]
 800df98:	4618      	mov	r0, r3
 800df9a:	f7ff fb05 	bl	800d5a8 <dhcp_option_byte>
 800df9e:	4603      	mov	r3, r0
 800dfa0:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 800dfa2:	683b      	ldr	r3, [r7, #0]
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d002      	beq.n	800dfae <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 800dfa8:	683b      	ldr	r3, [r7, #0]
 800dfaa:	8a7a      	ldrh	r2, [r7, #18]
 800dfac:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 800dfae:	69bb      	ldr	r3, [r7, #24]
}
 800dfb0:	4618      	mov	r0, r3
 800dfb2:	3720      	adds	r7, #32
 800dfb4:	46bd      	mov	sp, r7
 800dfb6:	bd80      	pop	{r7, pc}
 800dfb8:	08013c04 	.word	0x08013c04
 800dfbc:	08013f24 	.word	0x08013f24
 800dfc0:	08013c64 	.word	0x08013c64
 800dfc4:	08013f44 	.word	0x08013f44
 800dfc8:	08013f64 	.word	0x08013f64
 800dfcc:	20007ce4 	.word	0x20007ce4

0800dfd0 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 800dfd0:	b580      	push	{r7, lr}
 800dfd2:	b084      	sub	sp, #16
 800dfd4:	af00      	add	r7, sp, #0
 800dfd6:	4603      	mov	r3, r0
 800dfd8:	60b9      	str	r1, [r7, #8]
 800dfda:	607a      	str	r2, [r7, #4]
 800dfdc:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 800dfde:	89fb      	ldrh	r3, [r7, #14]
 800dfe0:	1c5a      	adds	r2, r3, #1
 800dfe2:	81fa      	strh	r2, [r7, #14]
 800dfe4:	461a      	mov	r2, r3
 800dfe6:	68bb      	ldr	r3, [r7, #8]
 800dfe8:	4413      	add	r3, r2
 800dfea:	22ff      	movs	r2, #255	; 0xff
 800dfec:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 800dfee:	e007      	b.n	800e000 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 800dff0:	89fb      	ldrh	r3, [r7, #14]
 800dff2:	1c5a      	adds	r2, r3, #1
 800dff4:	81fa      	strh	r2, [r7, #14]
 800dff6:	461a      	mov	r2, r3
 800dff8:	68bb      	ldr	r3, [r7, #8]
 800dffa:	4413      	add	r3, r2
 800dffc:	2200      	movs	r2, #0
 800dffe:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 800e000:	89fb      	ldrh	r3, [r7, #14]
 800e002:	2b43      	cmp	r3, #67	; 0x43
 800e004:	d904      	bls.n	800e010 <dhcp_option_trailer+0x40>
 800e006:	89fb      	ldrh	r3, [r7, #14]
 800e008:	f003 0303 	and.w	r3, r3, #3
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d002      	beq.n	800e016 <dhcp_option_trailer+0x46>
 800e010:	89fb      	ldrh	r3, [r7, #14]
 800e012:	2b43      	cmp	r3, #67	; 0x43
 800e014:	d9ec      	bls.n	800dff0 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 800e016:	89fb      	ldrh	r3, [r7, #14]
 800e018:	33f0      	adds	r3, #240	; 0xf0
 800e01a:	b29b      	uxth	r3, r3
 800e01c:	4619      	mov	r1, r3
 800e01e:	6878      	ldr	r0, [r7, #4]
 800e020:	f7f7 fe54 	bl	8005ccc <pbuf_realloc>
}
 800e024:	bf00      	nop
 800e026:	3710      	adds	r7, #16
 800e028:	46bd      	mov	sp, r7
 800e02a:	bd80      	pop	{r7, pc}

0800e02c <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 800e02c:	b480      	push	{r7}
 800e02e:	b085      	sub	sp, #20
 800e030:	af00      	add	r7, sp, #0
 800e032:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	2b00      	cmp	r3, #0
 800e038:	d017      	beq.n	800e06a <dhcp_supplied_address+0x3e>
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d013      	beq.n	800e06a <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e046:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 800e048:	68fb      	ldr	r3, [r7, #12]
 800e04a:	795b      	ldrb	r3, [r3, #5]
 800e04c:	2b0a      	cmp	r3, #10
 800e04e:	d007      	beq.n	800e060 <dhcp_supplied_address+0x34>
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	795b      	ldrb	r3, [r3, #5]
 800e054:	2b05      	cmp	r3, #5
 800e056:	d003      	beq.n	800e060 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 800e05c:	2b04      	cmp	r3, #4
 800e05e:	d101      	bne.n	800e064 <dhcp_supplied_address+0x38>
 800e060:	2301      	movs	r3, #1
 800e062:	e000      	b.n	800e066 <dhcp_supplied_address+0x3a>
 800e064:	2300      	movs	r3, #0
 800e066:	b2db      	uxtb	r3, r3
 800e068:	e000      	b.n	800e06c <dhcp_supplied_address+0x40>
  }
  return 0;
 800e06a:	2300      	movs	r3, #0
}
 800e06c:	4618      	mov	r0, r3
 800e06e:	3714      	adds	r7, #20
 800e070:	46bd      	mov	sp, r7
 800e072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e076:	4770      	bx	lr

0800e078 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800e078:	b580      	push	{r7, lr}
 800e07a:	b082      	sub	sp, #8
 800e07c:	af00      	add	r7, sp, #0
 800e07e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800e080:	4915      	ldr	r1, [pc, #84]	; (800e0d8 <etharp_free_entry+0x60>)
 800e082:	687a      	ldr	r2, [r7, #4]
 800e084:	4613      	mov	r3, r2
 800e086:	005b      	lsls	r3, r3, #1
 800e088:	4413      	add	r3, r2
 800e08a:	00db      	lsls	r3, r3, #3
 800e08c:	440b      	add	r3, r1
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	2b00      	cmp	r3, #0
 800e092:	d013      	beq.n	800e0bc <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800e094:	4910      	ldr	r1, [pc, #64]	; (800e0d8 <etharp_free_entry+0x60>)
 800e096:	687a      	ldr	r2, [r7, #4]
 800e098:	4613      	mov	r3, r2
 800e09a:	005b      	lsls	r3, r3, #1
 800e09c:	4413      	add	r3, r2
 800e09e:	00db      	lsls	r3, r3, #3
 800e0a0:	440b      	add	r3, r1
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	4618      	mov	r0, r3
 800e0a6:	f7f7 ff97 	bl	8005fd8 <pbuf_free>
    arp_table[i].q = NULL;
 800e0aa:	490b      	ldr	r1, [pc, #44]	; (800e0d8 <etharp_free_entry+0x60>)
 800e0ac:	687a      	ldr	r2, [r7, #4]
 800e0ae:	4613      	mov	r3, r2
 800e0b0:	005b      	lsls	r3, r3, #1
 800e0b2:	4413      	add	r3, r2
 800e0b4:	00db      	lsls	r3, r3, #3
 800e0b6:	440b      	add	r3, r1
 800e0b8:	2200      	movs	r2, #0
 800e0ba:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800e0bc:	4906      	ldr	r1, [pc, #24]	; (800e0d8 <etharp_free_entry+0x60>)
 800e0be:	687a      	ldr	r2, [r7, #4]
 800e0c0:	4613      	mov	r3, r2
 800e0c2:	005b      	lsls	r3, r3, #1
 800e0c4:	4413      	add	r3, r2
 800e0c6:	00db      	lsls	r3, r3, #3
 800e0c8:	440b      	add	r3, r1
 800e0ca:	3314      	adds	r3, #20
 800e0cc:	2200      	movs	r2, #0
 800e0ce:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800e0d0:	bf00      	nop
 800e0d2:	3708      	adds	r7, #8
 800e0d4:	46bd      	mov	sp, r7
 800e0d6:	bd80      	pop	{r7, pc}
 800e0d8:	20007ce8 	.word	0x20007ce8

0800e0dc <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800e0dc:	b580      	push	{r7, lr}
 800e0de:	b082      	sub	sp, #8
 800e0e0:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e0e2:	2300      	movs	r3, #0
 800e0e4:	607b      	str	r3, [r7, #4]
 800e0e6:	e096      	b.n	800e216 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800e0e8:	494f      	ldr	r1, [pc, #316]	; (800e228 <etharp_tmr+0x14c>)
 800e0ea:	687a      	ldr	r2, [r7, #4]
 800e0ec:	4613      	mov	r3, r2
 800e0ee:	005b      	lsls	r3, r3, #1
 800e0f0:	4413      	add	r3, r2
 800e0f2:	00db      	lsls	r3, r3, #3
 800e0f4:	440b      	add	r3, r1
 800e0f6:	3314      	adds	r3, #20
 800e0f8:	781b      	ldrb	r3, [r3, #0]
 800e0fa:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800e0fc:	78fb      	ldrb	r3, [r7, #3]
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	f000 8086 	beq.w	800e210 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800e104:	4948      	ldr	r1, [pc, #288]	; (800e228 <etharp_tmr+0x14c>)
 800e106:	687a      	ldr	r2, [r7, #4]
 800e108:	4613      	mov	r3, r2
 800e10a:	005b      	lsls	r3, r3, #1
 800e10c:	4413      	add	r3, r2
 800e10e:	00db      	lsls	r3, r3, #3
 800e110:	440b      	add	r3, r1
 800e112:	3312      	adds	r3, #18
 800e114:	881b      	ldrh	r3, [r3, #0]
 800e116:	3301      	adds	r3, #1
 800e118:	b298      	uxth	r0, r3
 800e11a:	4943      	ldr	r1, [pc, #268]	; (800e228 <etharp_tmr+0x14c>)
 800e11c:	687a      	ldr	r2, [r7, #4]
 800e11e:	4613      	mov	r3, r2
 800e120:	005b      	lsls	r3, r3, #1
 800e122:	4413      	add	r3, r2
 800e124:	00db      	lsls	r3, r3, #3
 800e126:	440b      	add	r3, r1
 800e128:	3312      	adds	r3, #18
 800e12a:	4602      	mov	r2, r0
 800e12c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800e12e:	493e      	ldr	r1, [pc, #248]	; (800e228 <etharp_tmr+0x14c>)
 800e130:	687a      	ldr	r2, [r7, #4]
 800e132:	4613      	mov	r3, r2
 800e134:	005b      	lsls	r3, r3, #1
 800e136:	4413      	add	r3, r2
 800e138:	00db      	lsls	r3, r3, #3
 800e13a:	440b      	add	r3, r1
 800e13c:	3312      	adds	r3, #18
 800e13e:	881b      	ldrh	r3, [r3, #0]
 800e140:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800e144:	d215      	bcs.n	800e172 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800e146:	4938      	ldr	r1, [pc, #224]	; (800e228 <etharp_tmr+0x14c>)
 800e148:	687a      	ldr	r2, [r7, #4]
 800e14a:	4613      	mov	r3, r2
 800e14c:	005b      	lsls	r3, r3, #1
 800e14e:	4413      	add	r3, r2
 800e150:	00db      	lsls	r3, r3, #3
 800e152:	440b      	add	r3, r1
 800e154:	3314      	adds	r3, #20
 800e156:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800e158:	2b01      	cmp	r3, #1
 800e15a:	d10e      	bne.n	800e17a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800e15c:	4932      	ldr	r1, [pc, #200]	; (800e228 <etharp_tmr+0x14c>)
 800e15e:	687a      	ldr	r2, [r7, #4]
 800e160:	4613      	mov	r3, r2
 800e162:	005b      	lsls	r3, r3, #1
 800e164:	4413      	add	r3, r2
 800e166:	00db      	lsls	r3, r3, #3
 800e168:	440b      	add	r3, r1
 800e16a:	3312      	adds	r3, #18
 800e16c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800e16e:	2b04      	cmp	r3, #4
 800e170:	d903      	bls.n	800e17a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800e172:	6878      	ldr	r0, [r7, #4]
 800e174:	f7ff ff80 	bl	800e078 <etharp_free_entry>
 800e178:	e04a      	b.n	800e210 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800e17a:	492b      	ldr	r1, [pc, #172]	; (800e228 <etharp_tmr+0x14c>)
 800e17c:	687a      	ldr	r2, [r7, #4]
 800e17e:	4613      	mov	r3, r2
 800e180:	005b      	lsls	r3, r3, #1
 800e182:	4413      	add	r3, r2
 800e184:	00db      	lsls	r3, r3, #3
 800e186:	440b      	add	r3, r1
 800e188:	3314      	adds	r3, #20
 800e18a:	781b      	ldrb	r3, [r3, #0]
 800e18c:	2b03      	cmp	r3, #3
 800e18e:	d10a      	bne.n	800e1a6 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800e190:	4925      	ldr	r1, [pc, #148]	; (800e228 <etharp_tmr+0x14c>)
 800e192:	687a      	ldr	r2, [r7, #4]
 800e194:	4613      	mov	r3, r2
 800e196:	005b      	lsls	r3, r3, #1
 800e198:	4413      	add	r3, r2
 800e19a:	00db      	lsls	r3, r3, #3
 800e19c:	440b      	add	r3, r1
 800e19e:	3314      	adds	r3, #20
 800e1a0:	2204      	movs	r2, #4
 800e1a2:	701a      	strb	r2, [r3, #0]
 800e1a4:	e034      	b.n	800e210 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800e1a6:	4920      	ldr	r1, [pc, #128]	; (800e228 <etharp_tmr+0x14c>)
 800e1a8:	687a      	ldr	r2, [r7, #4]
 800e1aa:	4613      	mov	r3, r2
 800e1ac:	005b      	lsls	r3, r3, #1
 800e1ae:	4413      	add	r3, r2
 800e1b0:	00db      	lsls	r3, r3, #3
 800e1b2:	440b      	add	r3, r1
 800e1b4:	3314      	adds	r3, #20
 800e1b6:	781b      	ldrb	r3, [r3, #0]
 800e1b8:	2b04      	cmp	r3, #4
 800e1ba:	d10a      	bne.n	800e1d2 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800e1bc:	491a      	ldr	r1, [pc, #104]	; (800e228 <etharp_tmr+0x14c>)
 800e1be:	687a      	ldr	r2, [r7, #4]
 800e1c0:	4613      	mov	r3, r2
 800e1c2:	005b      	lsls	r3, r3, #1
 800e1c4:	4413      	add	r3, r2
 800e1c6:	00db      	lsls	r3, r3, #3
 800e1c8:	440b      	add	r3, r1
 800e1ca:	3314      	adds	r3, #20
 800e1cc:	2202      	movs	r2, #2
 800e1ce:	701a      	strb	r2, [r3, #0]
 800e1d0:	e01e      	b.n	800e210 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800e1d2:	4915      	ldr	r1, [pc, #84]	; (800e228 <etharp_tmr+0x14c>)
 800e1d4:	687a      	ldr	r2, [r7, #4]
 800e1d6:	4613      	mov	r3, r2
 800e1d8:	005b      	lsls	r3, r3, #1
 800e1da:	4413      	add	r3, r2
 800e1dc:	00db      	lsls	r3, r3, #3
 800e1de:	440b      	add	r3, r1
 800e1e0:	3314      	adds	r3, #20
 800e1e2:	781b      	ldrb	r3, [r3, #0]
 800e1e4:	2b01      	cmp	r3, #1
 800e1e6:	d113      	bne.n	800e210 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800e1e8:	490f      	ldr	r1, [pc, #60]	; (800e228 <etharp_tmr+0x14c>)
 800e1ea:	687a      	ldr	r2, [r7, #4]
 800e1ec:	4613      	mov	r3, r2
 800e1ee:	005b      	lsls	r3, r3, #1
 800e1f0:	4413      	add	r3, r2
 800e1f2:	00db      	lsls	r3, r3, #3
 800e1f4:	440b      	add	r3, r1
 800e1f6:	3308      	adds	r3, #8
 800e1f8:	6818      	ldr	r0, [r3, #0]
 800e1fa:	687a      	ldr	r2, [r7, #4]
 800e1fc:	4613      	mov	r3, r2
 800e1fe:	005b      	lsls	r3, r3, #1
 800e200:	4413      	add	r3, r2
 800e202:	00db      	lsls	r3, r3, #3
 800e204:	4a08      	ldr	r2, [pc, #32]	; (800e228 <etharp_tmr+0x14c>)
 800e206:	4413      	add	r3, r2
 800e208:	3304      	adds	r3, #4
 800e20a:	4619      	mov	r1, r3
 800e20c:	f000 fe72 	bl	800eef4 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	3301      	adds	r3, #1
 800e214:	607b      	str	r3, [r7, #4]
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	2b09      	cmp	r3, #9
 800e21a:	f77f af65 	ble.w	800e0e8 <etharp_tmr+0xc>
      }
    }
  }
}
 800e21e:	bf00      	nop
 800e220:	bf00      	nop
 800e222:	3708      	adds	r7, #8
 800e224:	46bd      	mov	sp, r7
 800e226:	bd80      	pop	{r7, pc}
 800e228:	20007ce8 	.word	0x20007ce8

0800e22c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800e22c:	b580      	push	{r7, lr}
 800e22e:	b08a      	sub	sp, #40	; 0x28
 800e230:	af00      	add	r7, sp, #0
 800e232:	60f8      	str	r0, [r7, #12]
 800e234:	460b      	mov	r3, r1
 800e236:	607a      	str	r2, [r7, #4]
 800e238:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800e23a:	230a      	movs	r3, #10
 800e23c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800e23e:	230a      	movs	r3, #10
 800e240:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800e242:	230a      	movs	r3, #10
 800e244:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800e246:	2300      	movs	r3, #0
 800e248:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800e24a:	230a      	movs	r3, #10
 800e24c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800e24e:	2300      	movs	r3, #0
 800e250:	83bb      	strh	r3, [r7, #28]
 800e252:	2300      	movs	r3, #0
 800e254:	837b      	strh	r3, [r7, #26]
 800e256:	2300      	movs	r3, #0
 800e258:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e25a:	2300      	movs	r3, #0
 800e25c:	843b      	strh	r3, [r7, #32]
 800e25e:	e0ae      	b.n	800e3be <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800e260:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e264:	49a6      	ldr	r1, [pc, #664]	; (800e500 <etharp_find_entry+0x2d4>)
 800e266:	4613      	mov	r3, r2
 800e268:	005b      	lsls	r3, r3, #1
 800e26a:	4413      	add	r3, r2
 800e26c:	00db      	lsls	r3, r3, #3
 800e26e:	440b      	add	r3, r1
 800e270:	3314      	adds	r3, #20
 800e272:	781b      	ldrb	r3, [r3, #0]
 800e274:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800e276:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800e27a:	2b0a      	cmp	r3, #10
 800e27c:	d105      	bne.n	800e28a <etharp_find_entry+0x5e>
 800e27e:	7dfb      	ldrb	r3, [r7, #23]
 800e280:	2b00      	cmp	r3, #0
 800e282:	d102      	bne.n	800e28a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800e284:	8c3b      	ldrh	r3, [r7, #32]
 800e286:	847b      	strh	r3, [r7, #34]	; 0x22
 800e288:	e095      	b.n	800e3b6 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800e28a:	7dfb      	ldrb	r3, [r7, #23]
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	f000 8092 	beq.w	800e3b6 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800e292:	7dfb      	ldrb	r3, [r7, #23]
 800e294:	2b01      	cmp	r3, #1
 800e296:	d009      	beq.n	800e2ac <etharp_find_entry+0x80>
 800e298:	7dfb      	ldrb	r3, [r7, #23]
 800e29a:	2b01      	cmp	r3, #1
 800e29c:	d806      	bhi.n	800e2ac <etharp_find_entry+0x80>
 800e29e:	4b99      	ldr	r3, [pc, #612]	; (800e504 <etharp_find_entry+0x2d8>)
 800e2a0:	f240 1223 	movw	r2, #291	; 0x123
 800e2a4:	4998      	ldr	r1, [pc, #608]	; (800e508 <etharp_find_entry+0x2dc>)
 800e2a6:	4899      	ldr	r0, [pc, #612]	; (800e50c <etharp_find_entry+0x2e0>)
 800e2a8:	f002 fa3e 	bl	8010728 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d020      	beq.n	800e2f4 <etharp_find_entry+0xc8>
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	6819      	ldr	r1, [r3, #0]
 800e2b6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e2ba:	4891      	ldr	r0, [pc, #580]	; (800e500 <etharp_find_entry+0x2d4>)
 800e2bc:	4613      	mov	r3, r2
 800e2be:	005b      	lsls	r3, r3, #1
 800e2c0:	4413      	add	r3, r2
 800e2c2:	00db      	lsls	r3, r3, #3
 800e2c4:	4403      	add	r3, r0
 800e2c6:	3304      	adds	r3, #4
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	4299      	cmp	r1, r3
 800e2cc:	d112      	bne.n	800e2f4 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d00c      	beq.n	800e2ee <etharp_find_entry+0xc2>
 800e2d4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e2d8:	4989      	ldr	r1, [pc, #548]	; (800e500 <etharp_find_entry+0x2d4>)
 800e2da:	4613      	mov	r3, r2
 800e2dc:	005b      	lsls	r3, r3, #1
 800e2de:	4413      	add	r3, r2
 800e2e0:	00db      	lsls	r3, r3, #3
 800e2e2:	440b      	add	r3, r1
 800e2e4:	3308      	adds	r3, #8
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	687a      	ldr	r2, [r7, #4]
 800e2ea:	429a      	cmp	r2, r3
 800e2ec:	d102      	bne.n	800e2f4 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800e2ee:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e2f2:	e100      	b.n	800e4f6 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800e2f4:	7dfb      	ldrb	r3, [r7, #23]
 800e2f6:	2b01      	cmp	r3, #1
 800e2f8:	d140      	bne.n	800e37c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800e2fa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e2fe:	4980      	ldr	r1, [pc, #512]	; (800e500 <etharp_find_entry+0x2d4>)
 800e300:	4613      	mov	r3, r2
 800e302:	005b      	lsls	r3, r3, #1
 800e304:	4413      	add	r3, r2
 800e306:	00db      	lsls	r3, r3, #3
 800e308:	440b      	add	r3, r1
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d01a      	beq.n	800e346 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800e310:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e314:	497a      	ldr	r1, [pc, #488]	; (800e500 <etharp_find_entry+0x2d4>)
 800e316:	4613      	mov	r3, r2
 800e318:	005b      	lsls	r3, r3, #1
 800e31a:	4413      	add	r3, r2
 800e31c:	00db      	lsls	r3, r3, #3
 800e31e:	440b      	add	r3, r1
 800e320:	3312      	adds	r3, #18
 800e322:	881b      	ldrh	r3, [r3, #0]
 800e324:	8bba      	ldrh	r2, [r7, #28]
 800e326:	429a      	cmp	r2, r3
 800e328:	d845      	bhi.n	800e3b6 <etharp_find_entry+0x18a>
            old_queue = i;
 800e32a:	8c3b      	ldrh	r3, [r7, #32]
 800e32c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800e32e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e332:	4973      	ldr	r1, [pc, #460]	; (800e500 <etharp_find_entry+0x2d4>)
 800e334:	4613      	mov	r3, r2
 800e336:	005b      	lsls	r3, r3, #1
 800e338:	4413      	add	r3, r2
 800e33a:	00db      	lsls	r3, r3, #3
 800e33c:	440b      	add	r3, r1
 800e33e:	3312      	adds	r3, #18
 800e340:	881b      	ldrh	r3, [r3, #0]
 800e342:	83bb      	strh	r3, [r7, #28]
 800e344:	e037      	b.n	800e3b6 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800e346:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e34a:	496d      	ldr	r1, [pc, #436]	; (800e500 <etharp_find_entry+0x2d4>)
 800e34c:	4613      	mov	r3, r2
 800e34e:	005b      	lsls	r3, r3, #1
 800e350:	4413      	add	r3, r2
 800e352:	00db      	lsls	r3, r3, #3
 800e354:	440b      	add	r3, r1
 800e356:	3312      	adds	r3, #18
 800e358:	881b      	ldrh	r3, [r3, #0]
 800e35a:	8b7a      	ldrh	r2, [r7, #26]
 800e35c:	429a      	cmp	r2, r3
 800e35e:	d82a      	bhi.n	800e3b6 <etharp_find_entry+0x18a>
            old_pending = i;
 800e360:	8c3b      	ldrh	r3, [r7, #32]
 800e362:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800e364:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e368:	4965      	ldr	r1, [pc, #404]	; (800e500 <etharp_find_entry+0x2d4>)
 800e36a:	4613      	mov	r3, r2
 800e36c:	005b      	lsls	r3, r3, #1
 800e36e:	4413      	add	r3, r2
 800e370:	00db      	lsls	r3, r3, #3
 800e372:	440b      	add	r3, r1
 800e374:	3312      	adds	r3, #18
 800e376:	881b      	ldrh	r3, [r3, #0]
 800e378:	837b      	strh	r3, [r7, #26]
 800e37a:	e01c      	b.n	800e3b6 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800e37c:	7dfb      	ldrb	r3, [r7, #23]
 800e37e:	2b01      	cmp	r3, #1
 800e380:	d919      	bls.n	800e3b6 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800e382:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e386:	495e      	ldr	r1, [pc, #376]	; (800e500 <etharp_find_entry+0x2d4>)
 800e388:	4613      	mov	r3, r2
 800e38a:	005b      	lsls	r3, r3, #1
 800e38c:	4413      	add	r3, r2
 800e38e:	00db      	lsls	r3, r3, #3
 800e390:	440b      	add	r3, r1
 800e392:	3312      	adds	r3, #18
 800e394:	881b      	ldrh	r3, [r3, #0]
 800e396:	8b3a      	ldrh	r2, [r7, #24]
 800e398:	429a      	cmp	r2, r3
 800e39a:	d80c      	bhi.n	800e3b6 <etharp_find_entry+0x18a>
            old_stable = i;
 800e39c:	8c3b      	ldrh	r3, [r7, #32]
 800e39e:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800e3a0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e3a4:	4956      	ldr	r1, [pc, #344]	; (800e500 <etharp_find_entry+0x2d4>)
 800e3a6:	4613      	mov	r3, r2
 800e3a8:	005b      	lsls	r3, r3, #1
 800e3aa:	4413      	add	r3, r2
 800e3ac:	00db      	lsls	r3, r3, #3
 800e3ae:	440b      	add	r3, r1
 800e3b0:	3312      	adds	r3, #18
 800e3b2:	881b      	ldrh	r3, [r3, #0]
 800e3b4:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e3b6:	8c3b      	ldrh	r3, [r7, #32]
 800e3b8:	3301      	adds	r3, #1
 800e3ba:	b29b      	uxth	r3, r3
 800e3bc:	843b      	strh	r3, [r7, #32]
 800e3be:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e3c2:	2b09      	cmp	r3, #9
 800e3c4:	f77f af4c 	ble.w	800e260 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800e3c8:	7afb      	ldrb	r3, [r7, #11]
 800e3ca:	f003 0302 	and.w	r3, r3, #2
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d108      	bne.n	800e3e4 <etharp_find_entry+0x1b8>
 800e3d2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800e3d6:	2b0a      	cmp	r3, #10
 800e3d8:	d107      	bne.n	800e3ea <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800e3da:	7afb      	ldrb	r3, [r7, #11]
 800e3dc:	f003 0301 	and.w	r3, r3, #1
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d102      	bne.n	800e3ea <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800e3e4:	f04f 33ff 	mov.w	r3, #4294967295
 800e3e8:	e085      	b.n	800e4f6 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800e3ea:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800e3ee:	2b09      	cmp	r3, #9
 800e3f0:	dc02      	bgt.n	800e3f8 <etharp_find_entry+0x1cc>
    i = empty;
 800e3f2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e3f4:	843b      	strh	r3, [r7, #32]
 800e3f6:	e039      	b.n	800e46c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800e3f8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800e3fc:	2b09      	cmp	r3, #9
 800e3fe:	dc14      	bgt.n	800e42a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800e400:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e402:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800e404:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e408:	493d      	ldr	r1, [pc, #244]	; (800e500 <etharp_find_entry+0x2d4>)
 800e40a:	4613      	mov	r3, r2
 800e40c:	005b      	lsls	r3, r3, #1
 800e40e:	4413      	add	r3, r2
 800e410:	00db      	lsls	r3, r3, #3
 800e412:	440b      	add	r3, r1
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	2b00      	cmp	r3, #0
 800e418:	d018      	beq.n	800e44c <etharp_find_entry+0x220>
 800e41a:	4b3a      	ldr	r3, [pc, #232]	; (800e504 <etharp_find_entry+0x2d8>)
 800e41c:	f240 126d 	movw	r2, #365	; 0x16d
 800e420:	493b      	ldr	r1, [pc, #236]	; (800e510 <etharp_find_entry+0x2e4>)
 800e422:	483a      	ldr	r0, [pc, #232]	; (800e50c <etharp_find_entry+0x2e0>)
 800e424:	f002 f980 	bl	8010728 <iprintf>
 800e428:	e010      	b.n	800e44c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800e42a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800e42e:	2b09      	cmp	r3, #9
 800e430:	dc02      	bgt.n	800e438 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800e432:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e434:	843b      	strh	r3, [r7, #32]
 800e436:	e009      	b.n	800e44c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800e438:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800e43c:	2b09      	cmp	r3, #9
 800e43e:	dc02      	bgt.n	800e446 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800e440:	8bfb      	ldrh	r3, [r7, #30]
 800e442:	843b      	strh	r3, [r7, #32]
 800e444:	e002      	b.n	800e44c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800e446:	f04f 33ff 	mov.w	r3, #4294967295
 800e44a:	e054      	b.n	800e4f6 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800e44c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e450:	2b09      	cmp	r3, #9
 800e452:	dd06      	ble.n	800e462 <etharp_find_entry+0x236>
 800e454:	4b2b      	ldr	r3, [pc, #172]	; (800e504 <etharp_find_entry+0x2d8>)
 800e456:	f240 127f 	movw	r2, #383	; 0x17f
 800e45a:	492e      	ldr	r1, [pc, #184]	; (800e514 <etharp_find_entry+0x2e8>)
 800e45c:	482b      	ldr	r0, [pc, #172]	; (800e50c <etharp_find_entry+0x2e0>)
 800e45e:	f002 f963 	bl	8010728 <iprintf>
    etharp_free_entry(i);
 800e462:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e466:	4618      	mov	r0, r3
 800e468:	f7ff fe06 	bl	800e078 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800e46c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e470:	2b09      	cmp	r3, #9
 800e472:	dd06      	ble.n	800e482 <etharp_find_entry+0x256>
 800e474:	4b23      	ldr	r3, [pc, #140]	; (800e504 <etharp_find_entry+0x2d8>)
 800e476:	f240 1283 	movw	r2, #387	; 0x183
 800e47a:	4926      	ldr	r1, [pc, #152]	; (800e514 <etharp_find_entry+0x2e8>)
 800e47c:	4823      	ldr	r0, [pc, #140]	; (800e50c <etharp_find_entry+0x2e0>)
 800e47e:	f002 f953 	bl	8010728 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800e482:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e486:	491e      	ldr	r1, [pc, #120]	; (800e500 <etharp_find_entry+0x2d4>)
 800e488:	4613      	mov	r3, r2
 800e48a:	005b      	lsls	r3, r3, #1
 800e48c:	4413      	add	r3, r2
 800e48e:	00db      	lsls	r3, r3, #3
 800e490:	440b      	add	r3, r1
 800e492:	3314      	adds	r3, #20
 800e494:	781b      	ldrb	r3, [r3, #0]
 800e496:	2b00      	cmp	r3, #0
 800e498:	d006      	beq.n	800e4a8 <etharp_find_entry+0x27c>
 800e49a:	4b1a      	ldr	r3, [pc, #104]	; (800e504 <etharp_find_entry+0x2d8>)
 800e49c:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800e4a0:	491d      	ldr	r1, [pc, #116]	; (800e518 <etharp_find_entry+0x2ec>)
 800e4a2:	481a      	ldr	r0, [pc, #104]	; (800e50c <etharp_find_entry+0x2e0>)
 800e4a4:	f002 f940 	bl	8010728 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d00b      	beq.n	800e4c6 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800e4ae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	6819      	ldr	r1, [r3, #0]
 800e4b6:	4812      	ldr	r0, [pc, #72]	; (800e500 <etharp_find_entry+0x2d4>)
 800e4b8:	4613      	mov	r3, r2
 800e4ba:	005b      	lsls	r3, r3, #1
 800e4bc:	4413      	add	r3, r2
 800e4be:	00db      	lsls	r3, r3, #3
 800e4c0:	4403      	add	r3, r0
 800e4c2:	3304      	adds	r3, #4
 800e4c4:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800e4c6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e4ca:	490d      	ldr	r1, [pc, #52]	; (800e500 <etharp_find_entry+0x2d4>)
 800e4cc:	4613      	mov	r3, r2
 800e4ce:	005b      	lsls	r3, r3, #1
 800e4d0:	4413      	add	r3, r2
 800e4d2:	00db      	lsls	r3, r3, #3
 800e4d4:	440b      	add	r3, r1
 800e4d6:	3312      	adds	r3, #18
 800e4d8:	2200      	movs	r2, #0
 800e4da:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800e4dc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e4e0:	4907      	ldr	r1, [pc, #28]	; (800e500 <etharp_find_entry+0x2d4>)
 800e4e2:	4613      	mov	r3, r2
 800e4e4:	005b      	lsls	r3, r3, #1
 800e4e6:	4413      	add	r3, r2
 800e4e8:	00db      	lsls	r3, r3, #3
 800e4ea:	440b      	add	r3, r1
 800e4ec:	3308      	adds	r3, #8
 800e4ee:	687a      	ldr	r2, [r7, #4]
 800e4f0:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800e4f2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800e4f6:	4618      	mov	r0, r3
 800e4f8:	3728      	adds	r7, #40	; 0x28
 800e4fa:	46bd      	mov	sp, r7
 800e4fc:	bd80      	pop	{r7, pc}
 800e4fe:	bf00      	nop
 800e500:	20007ce8 	.word	0x20007ce8
 800e504:	08013fa4 	.word	0x08013fa4
 800e508:	08013fdc 	.word	0x08013fdc
 800e50c:	0801401c 	.word	0x0801401c
 800e510:	08014044 	.word	0x08014044
 800e514:	0801405c 	.word	0x0801405c
 800e518:	08014070 	.word	0x08014070

0800e51c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800e51c:	b580      	push	{r7, lr}
 800e51e:	b088      	sub	sp, #32
 800e520:	af02      	add	r7, sp, #8
 800e522:	60f8      	str	r0, [r7, #12]
 800e524:	60b9      	str	r1, [r7, #8]
 800e526:	607a      	str	r2, [r7, #4]
 800e528:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e530:	2b06      	cmp	r3, #6
 800e532:	d006      	beq.n	800e542 <etharp_update_arp_entry+0x26>
 800e534:	4b48      	ldr	r3, [pc, #288]	; (800e658 <etharp_update_arp_entry+0x13c>)
 800e536:	f240 12a9 	movw	r2, #425	; 0x1a9
 800e53a:	4948      	ldr	r1, [pc, #288]	; (800e65c <etharp_update_arp_entry+0x140>)
 800e53c:	4848      	ldr	r0, [pc, #288]	; (800e660 <etharp_update_arp_entry+0x144>)
 800e53e:	f002 f8f3 	bl	8010728 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800e542:	68bb      	ldr	r3, [r7, #8]
 800e544:	2b00      	cmp	r3, #0
 800e546:	d012      	beq.n	800e56e <etharp_update_arp_entry+0x52>
 800e548:	68bb      	ldr	r3, [r7, #8]
 800e54a:	681b      	ldr	r3, [r3, #0]
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d00e      	beq.n	800e56e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800e550:	68bb      	ldr	r3, [r7, #8]
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	68f9      	ldr	r1, [r7, #12]
 800e556:	4618      	mov	r0, r3
 800e558:	f001 f946 	bl	800f7e8 <ip4_addr_isbroadcast_u32>
 800e55c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d105      	bne.n	800e56e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800e562:	68bb      	ldr	r3, [r7, #8]
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800e56a:	2be0      	cmp	r3, #224	; 0xe0
 800e56c:	d102      	bne.n	800e574 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800e56e:	f06f 030f 	mvn.w	r3, #15
 800e572:	e06c      	b.n	800e64e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800e574:	78fb      	ldrb	r3, [r7, #3]
 800e576:	68fa      	ldr	r2, [r7, #12]
 800e578:	4619      	mov	r1, r3
 800e57a:	68b8      	ldr	r0, [r7, #8]
 800e57c:	f7ff fe56 	bl	800e22c <etharp_find_entry>
 800e580:	4603      	mov	r3, r0
 800e582:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800e584:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800e588:	2b00      	cmp	r3, #0
 800e58a:	da02      	bge.n	800e592 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800e58c:	8afb      	ldrh	r3, [r7, #22]
 800e58e:	b25b      	sxtb	r3, r3
 800e590:	e05d      	b.n	800e64e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800e592:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e596:	4933      	ldr	r1, [pc, #204]	; (800e664 <etharp_update_arp_entry+0x148>)
 800e598:	4613      	mov	r3, r2
 800e59a:	005b      	lsls	r3, r3, #1
 800e59c:	4413      	add	r3, r2
 800e59e:	00db      	lsls	r3, r3, #3
 800e5a0:	440b      	add	r3, r1
 800e5a2:	3314      	adds	r3, #20
 800e5a4:	2202      	movs	r2, #2
 800e5a6:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800e5a8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e5ac:	492d      	ldr	r1, [pc, #180]	; (800e664 <etharp_update_arp_entry+0x148>)
 800e5ae:	4613      	mov	r3, r2
 800e5b0:	005b      	lsls	r3, r3, #1
 800e5b2:	4413      	add	r3, r2
 800e5b4:	00db      	lsls	r3, r3, #3
 800e5b6:	440b      	add	r3, r1
 800e5b8:	3308      	adds	r3, #8
 800e5ba:	68fa      	ldr	r2, [r7, #12]
 800e5bc:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800e5be:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e5c2:	4613      	mov	r3, r2
 800e5c4:	005b      	lsls	r3, r3, #1
 800e5c6:	4413      	add	r3, r2
 800e5c8:	00db      	lsls	r3, r3, #3
 800e5ca:	3308      	adds	r3, #8
 800e5cc:	4a25      	ldr	r2, [pc, #148]	; (800e664 <etharp_update_arp_entry+0x148>)
 800e5ce:	4413      	add	r3, r2
 800e5d0:	3304      	adds	r3, #4
 800e5d2:	2206      	movs	r2, #6
 800e5d4:	6879      	ldr	r1, [r7, #4]
 800e5d6:	4618      	mov	r0, r3
 800e5d8:	f002 f890 	bl	80106fc <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800e5dc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e5e0:	4920      	ldr	r1, [pc, #128]	; (800e664 <etharp_update_arp_entry+0x148>)
 800e5e2:	4613      	mov	r3, r2
 800e5e4:	005b      	lsls	r3, r3, #1
 800e5e6:	4413      	add	r3, r2
 800e5e8:	00db      	lsls	r3, r3, #3
 800e5ea:	440b      	add	r3, r1
 800e5ec:	3312      	adds	r3, #18
 800e5ee:	2200      	movs	r2, #0
 800e5f0:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800e5f2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e5f6:	491b      	ldr	r1, [pc, #108]	; (800e664 <etharp_update_arp_entry+0x148>)
 800e5f8:	4613      	mov	r3, r2
 800e5fa:	005b      	lsls	r3, r3, #1
 800e5fc:	4413      	add	r3, r2
 800e5fe:	00db      	lsls	r3, r3, #3
 800e600:	440b      	add	r3, r1
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	2b00      	cmp	r3, #0
 800e606:	d021      	beq.n	800e64c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800e608:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e60c:	4915      	ldr	r1, [pc, #84]	; (800e664 <etharp_update_arp_entry+0x148>)
 800e60e:	4613      	mov	r3, r2
 800e610:	005b      	lsls	r3, r3, #1
 800e612:	4413      	add	r3, r2
 800e614:	00db      	lsls	r3, r3, #3
 800e616:	440b      	add	r3, r1
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800e61c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e620:	4910      	ldr	r1, [pc, #64]	; (800e664 <etharp_update_arp_entry+0x148>)
 800e622:	4613      	mov	r3, r2
 800e624:	005b      	lsls	r3, r3, #1
 800e626:	4413      	add	r3, r2
 800e628:	00db      	lsls	r3, r3, #3
 800e62a:	440b      	add	r3, r1
 800e62c:	2200      	movs	r2, #0
 800e62e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 800e636:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e63a:	9300      	str	r3, [sp, #0]
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	6939      	ldr	r1, [r7, #16]
 800e640:	68f8      	ldr	r0, [r7, #12]
 800e642:	f001 ffdf 	bl	8010604 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800e646:	6938      	ldr	r0, [r7, #16]
 800e648:	f7f7 fcc6 	bl	8005fd8 <pbuf_free>
  }
  return ERR_OK;
 800e64c:	2300      	movs	r3, #0
}
 800e64e:	4618      	mov	r0, r3
 800e650:	3718      	adds	r7, #24
 800e652:	46bd      	mov	sp, r7
 800e654:	bd80      	pop	{r7, pc}
 800e656:	bf00      	nop
 800e658:	08013fa4 	.word	0x08013fa4
 800e65c:	0801409c 	.word	0x0801409c
 800e660:	0801401c 	.word	0x0801401c
 800e664:	20007ce8 	.word	0x20007ce8

0800e668 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800e668:	b580      	push	{r7, lr}
 800e66a:	b084      	sub	sp, #16
 800e66c:	af00      	add	r7, sp, #0
 800e66e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e670:	2300      	movs	r3, #0
 800e672:	60fb      	str	r3, [r7, #12]
 800e674:	e01e      	b.n	800e6b4 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800e676:	4913      	ldr	r1, [pc, #76]	; (800e6c4 <etharp_cleanup_netif+0x5c>)
 800e678:	68fa      	ldr	r2, [r7, #12]
 800e67a:	4613      	mov	r3, r2
 800e67c:	005b      	lsls	r3, r3, #1
 800e67e:	4413      	add	r3, r2
 800e680:	00db      	lsls	r3, r3, #3
 800e682:	440b      	add	r3, r1
 800e684:	3314      	adds	r3, #20
 800e686:	781b      	ldrb	r3, [r3, #0]
 800e688:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800e68a:	7afb      	ldrb	r3, [r7, #11]
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	d00e      	beq.n	800e6ae <etharp_cleanup_netif+0x46>
 800e690:	490c      	ldr	r1, [pc, #48]	; (800e6c4 <etharp_cleanup_netif+0x5c>)
 800e692:	68fa      	ldr	r2, [r7, #12]
 800e694:	4613      	mov	r3, r2
 800e696:	005b      	lsls	r3, r3, #1
 800e698:	4413      	add	r3, r2
 800e69a:	00db      	lsls	r3, r3, #3
 800e69c:	440b      	add	r3, r1
 800e69e:	3308      	adds	r3, #8
 800e6a0:	681b      	ldr	r3, [r3, #0]
 800e6a2:	687a      	ldr	r2, [r7, #4]
 800e6a4:	429a      	cmp	r2, r3
 800e6a6:	d102      	bne.n	800e6ae <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800e6a8:	68f8      	ldr	r0, [r7, #12]
 800e6aa:	f7ff fce5 	bl	800e078 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e6ae:	68fb      	ldr	r3, [r7, #12]
 800e6b0:	3301      	adds	r3, #1
 800e6b2:	60fb      	str	r3, [r7, #12]
 800e6b4:	68fb      	ldr	r3, [r7, #12]
 800e6b6:	2b09      	cmp	r3, #9
 800e6b8:	dddd      	ble.n	800e676 <etharp_cleanup_netif+0xe>
    }
  }
}
 800e6ba:	bf00      	nop
 800e6bc:	bf00      	nop
 800e6be:	3710      	adds	r7, #16
 800e6c0:	46bd      	mov	sp, r7
 800e6c2:	bd80      	pop	{r7, pc}
 800e6c4:	20007ce8 	.word	0x20007ce8

0800e6c8 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800e6c8:	b5b0      	push	{r4, r5, r7, lr}
 800e6ca:	b08a      	sub	sp, #40	; 0x28
 800e6cc:	af04      	add	r7, sp, #16
 800e6ce:	6078      	str	r0, [r7, #4]
 800e6d0:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800e6d2:	683b      	ldr	r3, [r7, #0]
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d107      	bne.n	800e6e8 <etharp_input+0x20>
 800e6d8:	4b3f      	ldr	r3, [pc, #252]	; (800e7d8 <etharp_input+0x110>)
 800e6da:	f240 228a 	movw	r2, #650	; 0x28a
 800e6de:	493f      	ldr	r1, [pc, #252]	; (800e7dc <etharp_input+0x114>)
 800e6e0:	483f      	ldr	r0, [pc, #252]	; (800e7e0 <etharp_input+0x118>)
 800e6e2:	f002 f821 	bl	8010728 <iprintf>
 800e6e6:	e074      	b.n	800e7d2 <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	685b      	ldr	r3, [r3, #4]
 800e6ec:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800e6ee:	693b      	ldr	r3, [r7, #16]
 800e6f0:	881b      	ldrh	r3, [r3, #0]
 800e6f2:	b29b      	uxth	r3, r3
 800e6f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e6f8:	d10c      	bne.n	800e714 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800e6fa:	693b      	ldr	r3, [r7, #16]
 800e6fc:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800e6fe:	2b06      	cmp	r3, #6
 800e700:	d108      	bne.n	800e714 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800e702:	693b      	ldr	r3, [r7, #16]
 800e704:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800e706:	2b04      	cmp	r3, #4
 800e708:	d104      	bne.n	800e714 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800e70a:	693b      	ldr	r3, [r7, #16]
 800e70c:	885b      	ldrh	r3, [r3, #2]
 800e70e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800e710:	2b08      	cmp	r3, #8
 800e712:	d003      	beq.n	800e71c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800e714:	6878      	ldr	r0, [r7, #4]
 800e716:	f7f7 fc5f 	bl	8005fd8 <pbuf_free>
    return;
 800e71a:	e05a      	b.n	800e7d2 <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800e71c:	693b      	ldr	r3, [r7, #16]
 800e71e:	330e      	adds	r3, #14
 800e720:	681b      	ldr	r3, [r3, #0]
 800e722:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800e724:	693b      	ldr	r3, [r7, #16]
 800e726:	3318      	adds	r3, #24
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800e72c:	683b      	ldr	r3, [r7, #0]
 800e72e:	3304      	adds	r3, #4
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	2b00      	cmp	r3, #0
 800e734:	d102      	bne.n	800e73c <etharp_input+0x74>
    for_us = 0;
 800e736:	2300      	movs	r3, #0
 800e738:	75fb      	strb	r3, [r7, #23]
 800e73a:	e009      	b.n	800e750 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800e73c:	68ba      	ldr	r2, [r7, #8]
 800e73e:	683b      	ldr	r3, [r7, #0]
 800e740:	3304      	adds	r3, #4
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	429a      	cmp	r2, r3
 800e746:	bf0c      	ite	eq
 800e748:	2301      	moveq	r3, #1
 800e74a:	2300      	movne	r3, #0
 800e74c:	b2db      	uxtb	r3, r3
 800e74e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800e750:	693b      	ldr	r3, [r7, #16]
 800e752:	f103 0208 	add.w	r2, r3, #8
 800e756:	7dfb      	ldrb	r3, [r7, #23]
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d001      	beq.n	800e760 <etharp_input+0x98>
 800e75c:	2301      	movs	r3, #1
 800e75e:	e000      	b.n	800e762 <etharp_input+0x9a>
 800e760:	2302      	movs	r3, #2
 800e762:	f107 010c 	add.w	r1, r7, #12
 800e766:	6838      	ldr	r0, [r7, #0]
 800e768:	f7ff fed8 	bl	800e51c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800e76c:	693b      	ldr	r3, [r7, #16]
 800e76e:	88db      	ldrh	r3, [r3, #6]
 800e770:	b29b      	uxth	r3, r3
 800e772:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e776:	d003      	beq.n	800e780 <etharp_input+0xb8>
 800e778:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e77c:	d01e      	beq.n	800e7bc <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800e77e:	e025      	b.n	800e7cc <etharp_input+0x104>
      if (for_us) {
 800e780:	7dfb      	ldrb	r3, [r7, #23]
 800e782:	2b00      	cmp	r3, #0
 800e784:	d021      	beq.n	800e7ca <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800e786:	683b      	ldr	r3, [r7, #0]
 800e788:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 800e78c:	693b      	ldr	r3, [r7, #16]
 800e78e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800e792:	683b      	ldr	r3, [r7, #0]
 800e794:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 800e798:	683b      	ldr	r3, [r7, #0]
 800e79a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800e79c:	693a      	ldr	r2, [r7, #16]
 800e79e:	3208      	adds	r2, #8
        etharp_raw(netif,
 800e7a0:	2102      	movs	r1, #2
 800e7a2:	9103      	str	r1, [sp, #12]
 800e7a4:	f107 010c 	add.w	r1, r7, #12
 800e7a8:	9102      	str	r1, [sp, #8]
 800e7aa:	9201      	str	r2, [sp, #4]
 800e7ac:	9300      	str	r3, [sp, #0]
 800e7ae:	462b      	mov	r3, r5
 800e7b0:	4622      	mov	r2, r4
 800e7b2:	4601      	mov	r1, r0
 800e7b4:	6838      	ldr	r0, [r7, #0]
 800e7b6:	f000 faef 	bl	800ed98 <etharp_raw>
      break;
 800e7ba:	e006      	b.n	800e7ca <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 800e7bc:	f107 030c 	add.w	r3, r7, #12
 800e7c0:	4619      	mov	r1, r3
 800e7c2:	6838      	ldr	r0, [r7, #0]
 800e7c4:	f7fe f9fc 	bl	800cbc0 <dhcp_arp_reply>
      break;
 800e7c8:	e000      	b.n	800e7cc <etharp_input+0x104>
      break;
 800e7ca:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800e7cc:	6878      	ldr	r0, [r7, #4]
 800e7ce:	f7f7 fc03 	bl	8005fd8 <pbuf_free>
}
 800e7d2:	3718      	adds	r7, #24
 800e7d4:	46bd      	mov	sp, r7
 800e7d6:	bdb0      	pop	{r4, r5, r7, pc}
 800e7d8:	08013fa4 	.word	0x08013fa4
 800e7dc:	080140f4 	.word	0x080140f4
 800e7e0:	0801401c 	.word	0x0801401c

0800e7e4 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800e7e4:	b580      	push	{r7, lr}
 800e7e6:	b086      	sub	sp, #24
 800e7e8:	af02      	add	r7, sp, #8
 800e7ea:	60f8      	str	r0, [r7, #12]
 800e7ec:	60b9      	str	r1, [r7, #8]
 800e7ee:	4613      	mov	r3, r2
 800e7f0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800e7f2:	79fa      	ldrb	r2, [r7, #7]
 800e7f4:	4944      	ldr	r1, [pc, #272]	; (800e908 <etharp_output_to_arp_index+0x124>)
 800e7f6:	4613      	mov	r3, r2
 800e7f8:	005b      	lsls	r3, r3, #1
 800e7fa:	4413      	add	r3, r2
 800e7fc:	00db      	lsls	r3, r3, #3
 800e7fe:	440b      	add	r3, r1
 800e800:	3314      	adds	r3, #20
 800e802:	781b      	ldrb	r3, [r3, #0]
 800e804:	2b01      	cmp	r3, #1
 800e806:	d806      	bhi.n	800e816 <etharp_output_to_arp_index+0x32>
 800e808:	4b40      	ldr	r3, [pc, #256]	; (800e90c <etharp_output_to_arp_index+0x128>)
 800e80a:	f240 22ee 	movw	r2, #750	; 0x2ee
 800e80e:	4940      	ldr	r1, [pc, #256]	; (800e910 <etharp_output_to_arp_index+0x12c>)
 800e810:	4840      	ldr	r0, [pc, #256]	; (800e914 <etharp_output_to_arp_index+0x130>)
 800e812:	f001 ff89 	bl	8010728 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800e816:	79fa      	ldrb	r2, [r7, #7]
 800e818:	493b      	ldr	r1, [pc, #236]	; (800e908 <etharp_output_to_arp_index+0x124>)
 800e81a:	4613      	mov	r3, r2
 800e81c:	005b      	lsls	r3, r3, #1
 800e81e:	4413      	add	r3, r2
 800e820:	00db      	lsls	r3, r3, #3
 800e822:	440b      	add	r3, r1
 800e824:	3314      	adds	r3, #20
 800e826:	781b      	ldrb	r3, [r3, #0]
 800e828:	2b02      	cmp	r3, #2
 800e82a:	d153      	bne.n	800e8d4 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800e82c:	79fa      	ldrb	r2, [r7, #7]
 800e82e:	4936      	ldr	r1, [pc, #216]	; (800e908 <etharp_output_to_arp_index+0x124>)
 800e830:	4613      	mov	r3, r2
 800e832:	005b      	lsls	r3, r3, #1
 800e834:	4413      	add	r3, r2
 800e836:	00db      	lsls	r3, r3, #3
 800e838:	440b      	add	r3, r1
 800e83a:	3312      	adds	r3, #18
 800e83c:	881b      	ldrh	r3, [r3, #0]
 800e83e:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800e842:	d919      	bls.n	800e878 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800e844:	79fa      	ldrb	r2, [r7, #7]
 800e846:	4613      	mov	r3, r2
 800e848:	005b      	lsls	r3, r3, #1
 800e84a:	4413      	add	r3, r2
 800e84c:	00db      	lsls	r3, r3, #3
 800e84e:	4a2e      	ldr	r2, [pc, #184]	; (800e908 <etharp_output_to_arp_index+0x124>)
 800e850:	4413      	add	r3, r2
 800e852:	3304      	adds	r3, #4
 800e854:	4619      	mov	r1, r3
 800e856:	68f8      	ldr	r0, [r7, #12]
 800e858:	f000 fb4c 	bl	800eef4 <etharp_request>
 800e85c:	4603      	mov	r3, r0
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d138      	bne.n	800e8d4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800e862:	79fa      	ldrb	r2, [r7, #7]
 800e864:	4928      	ldr	r1, [pc, #160]	; (800e908 <etharp_output_to_arp_index+0x124>)
 800e866:	4613      	mov	r3, r2
 800e868:	005b      	lsls	r3, r3, #1
 800e86a:	4413      	add	r3, r2
 800e86c:	00db      	lsls	r3, r3, #3
 800e86e:	440b      	add	r3, r1
 800e870:	3314      	adds	r3, #20
 800e872:	2203      	movs	r2, #3
 800e874:	701a      	strb	r2, [r3, #0]
 800e876:	e02d      	b.n	800e8d4 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800e878:	79fa      	ldrb	r2, [r7, #7]
 800e87a:	4923      	ldr	r1, [pc, #140]	; (800e908 <etharp_output_to_arp_index+0x124>)
 800e87c:	4613      	mov	r3, r2
 800e87e:	005b      	lsls	r3, r3, #1
 800e880:	4413      	add	r3, r2
 800e882:	00db      	lsls	r3, r3, #3
 800e884:	440b      	add	r3, r1
 800e886:	3312      	adds	r3, #18
 800e888:	881b      	ldrh	r3, [r3, #0]
 800e88a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800e88e:	d321      	bcc.n	800e8d4 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800e890:	79fa      	ldrb	r2, [r7, #7]
 800e892:	4613      	mov	r3, r2
 800e894:	005b      	lsls	r3, r3, #1
 800e896:	4413      	add	r3, r2
 800e898:	00db      	lsls	r3, r3, #3
 800e89a:	4a1b      	ldr	r2, [pc, #108]	; (800e908 <etharp_output_to_arp_index+0x124>)
 800e89c:	4413      	add	r3, r2
 800e89e:	1d19      	adds	r1, r3, #4
 800e8a0:	79fa      	ldrb	r2, [r7, #7]
 800e8a2:	4613      	mov	r3, r2
 800e8a4:	005b      	lsls	r3, r3, #1
 800e8a6:	4413      	add	r3, r2
 800e8a8:	00db      	lsls	r3, r3, #3
 800e8aa:	3308      	adds	r3, #8
 800e8ac:	4a16      	ldr	r2, [pc, #88]	; (800e908 <etharp_output_to_arp_index+0x124>)
 800e8ae:	4413      	add	r3, r2
 800e8b0:	3304      	adds	r3, #4
 800e8b2:	461a      	mov	r2, r3
 800e8b4:	68f8      	ldr	r0, [r7, #12]
 800e8b6:	f000 fafb 	bl	800eeb0 <etharp_request_dst>
 800e8ba:	4603      	mov	r3, r0
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d109      	bne.n	800e8d4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800e8c0:	79fa      	ldrb	r2, [r7, #7]
 800e8c2:	4911      	ldr	r1, [pc, #68]	; (800e908 <etharp_output_to_arp_index+0x124>)
 800e8c4:	4613      	mov	r3, r2
 800e8c6:	005b      	lsls	r3, r3, #1
 800e8c8:	4413      	add	r3, r2
 800e8ca:	00db      	lsls	r3, r3, #3
 800e8cc:	440b      	add	r3, r1
 800e8ce:	3314      	adds	r3, #20
 800e8d0:	2203      	movs	r2, #3
 800e8d2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800e8d4:	68fb      	ldr	r3, [r7, #12]
 800e8d6:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 800e8da:	79fa      	ldrb	r2, [r7, #7]
 800e8dc:	4613      	mov	r3, r2
 800e8de:	005b      	lsls	r3, r3, #1
 800e8e0:	4413      	add	r3, r2
 800e8e2:	00db      	lsls	r3, r3, #3
 800e8e4:	3308      	adds	r3, #8
 800e8e6:	4a08      	ldr	r2, [pc, #32]	; (800e908 <etharp_output_to_arp_index+0x124>)
 800e8e8:	4413      	add	r3, r2
 800e8ea:	3304      	adds	r3, #4
 800e8ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e8f0:	9200      	str	r2, [sp, #0]
 800e8f2:	460a      	mov	r2, r1
 800e8f4:	68b9      	ldr	r1, [r7, #8]
 800e8f6:	68f8      	ldr	r0, [r7, #12]
 800e8f8:	f001 fe84 	bl	8010604 <ethernet_output>
 800e8fc:	4603      	mov	r3, r0
}
 800e8fe:	4618      	mov	r0, r3
 800e900:	3710      	adds	r7, #16
 800e902:	46bd      	mov	sp, r7
 800e904:	bd80      	pop	{r7, pc}
 800e906:	bf00      	nop
 800e908:	20007ce8 	.word	0x20007ce8
 800e90c:	08013fa4 	.word	0x08013fa4
 800e910:	08014114 	.word	0x08014114
 800e914:	0801401c 	.word	0x0801401c

0800e918 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800e918:	b580      	push	{r7, lr}
 800e91a:	b08a      	sub	sp, #40	; 0x28
 800e91c:	af02      	add	r7, sp, #8
 800e91e:	60f8      	str	r0, [r7, #12]
 800e920:	60b9      	str	r1, [r7, #8]
 800e922:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800e928:	68fb      	ldr	r3, [r7, #12]
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d106      	bne.n	800e93c <etharp_output+0x24>
 800e92e:	4b73      	ldr	r3, [pc, #460]	; (800eafc <etharp_output+0x1e4>)
 800e930:	f240 321e 	movw	r2, #798	; 0x31e
 800e934:	4972      	ldr	r1, [pc, #456]	; (800eb00 <etharp_output+0x1e8>)
 800e936:	4873      	ldr	r0, [pc, #460]	; (800eb04 <etharp_output+0x1ec>)
 800e938:	f001 fef6 	bl	8010728 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800e93c:	68bb      	ldr	r3, [r7, #8]
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d106      	bne.n	800e950 <etharp_output+0x38>
 800e942:	4b6e      	ldr	r3, [pc, #440]	; (800eafc <etharp_output+0x1e4>)
 800e944:	f240 321f 	movw	r2, #799	; 0x31f
 800e948:	496f      	ldr	r1, [pc, #444]	; (800eb08 <etharp_output+0x1f0>)
 800e94a:	486e      	ldr	r0, [pc, #440]	; (800eb04 <etharp_output+0x1ec>)
 800e94c:	f001 feec 	bl	8010728 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	2b00      	cmp	r3, #0
 800e954:	d106      	bne.n	800e964 <etharp_output+0x4c>
 800e956:	4b69      	ldr	r3, [pc, #420]	; (800eafc <etharp_output+0x1e4>)
 800e958:	f44f 7248 	mov.w	r2, #800	; 0x320
 800e95c:	496b      	ldr	r1, [pc, #428]	; (800eb0c <etharp_output+0x1f4>)
 800e95e:	4869      	ldr	r0, [pc, #420]	; (800eb04 <etharp_output+0x1ec>)
 800e960:	f001 fee2 	bl	8010728 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	68f9      	ldr	r1, [r7, #12]
 800e96a:	4618      	mov	r0, r3
 800e96c:	f000 ff3c 	bl	800f7e8 <ip4_addr_isbroadcast_u32>
 800e970:	4603      	mov	r3, r0
 800e972:	2b00      	cmp	r3, #0
 800e974:	d002      	beq.n	800e97c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800e976:	4b66      	ldr	r3, [pc, #408]	; (800eb10 <etharp_output+0x1f8>)
 800e978:	61fb      	str	r3, [r7, #28]
 800e97a:	e0af      	b.n	800eadc <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	681b      	ldr	r3, [r3, #0]
 800e980:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e984:	2be0      	cmp	r3, #224	; 0xe0
 800e986:	d118      	bne.n	800e9ba <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800e988:	2301      	movs	r3, #1
 800e98a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800e98c:	2300      	movs	r3, #0
 800e98e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800e990:	235e      	movs	r3, #94	; 0x5e
 800e992:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	3301      	adds	r3, #1
 800e998:	781b      	ldrb	r3, [r3, #0]
 800e99a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e99e:	b2db      	uxtb	r3, r3
 800e9a0:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	3302      	adds	r3, #2
 800e9a6:	781b      	ldrb	r3, [r3, #0]
 800e9a8:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	3303      	adds	r3, #3
 800e9ae:	781b      	ldrb	r3, [r3, #0]
 800e9b0:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800e9b2:	f107 0310 	add.w	r3, r7, #16
 800e9b6:	61fb      	str	r3, [r7, #28]
 800e9b8:	e090      	b.n	800eadc <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	681a      	ldr	r2, [r3, #0]
 800e9be:	68fb      	ldr	r3, [r7, #12]
 800e9c0:	3304      	adds	r3, #4
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	405a      	eors	r2, r3
 800e9c6:	68fb      	ldr	r3, [r7, #12]
 800e9c8:	3308      	adds	r3, #8
 800e9ca:	681b      	ldr	r3, [r3, #0]
 800e9cc:	4013      	ands	r3, r2
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	d012      	beq.n	800e9f8 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	681b      	ldr	r3, [r3, #0]
 800e9d6:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800e9d8:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800e9dc:	4293      	cmp	r3, r2
 800e9de:	d00b      	beq.n	800e9f8 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800e9e0:	68fb      	ldr	r3, [r7, #12]
 800e9e2:	330c      	adds	r3, #12
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d003      	beq.n	800e9f2 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800e9ea:	68fb      	ldr	r3, [r7, #12]
 800e9ec:	330c      	adds	r3, #12
 800e9ee:	61bb      	str	r3, [r7, #24]
 800e9f0:	e002      	b.n	800e9f8 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800e9f2:	f06f 0303 	mvn.w	r3, #3
 800e9f6:	e07d      	b.n	800eaf4 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800e9f8:	4b46      	ldr	r3, [pc, #280]	; (800eb14 <etharp_output+0x1fc>)
 800e9fa:	781b      	ldrb	r3, [r3, #0]
 800e9fc:	4619      	mov	r1, r3
 800e9fe:	4a46      	ldr	r2, [pc, #280]	; (800eb18 <etharp_output+0x200>)
 800ea00:	460b      	mov	r3, r1
 800ea02:	005b      	lsls	r3, r3, #1
 800ea04:	440b      	add	r3, r1
 800ea06:	00db      	lsls	r3, r3, #3
 800ea08:	4413      	add	r3, r2
 800ea0a:	3314      	adds	r3, #20
 800ea0c:	781b      	ldrb	r3, [r3, #0]
 800ea0e:	2b01      	cmp	r3, #1
 800ea10:	d925      	bls.n	800ea5e <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800ea12:	4b40      	ldr	r3, [pc, #256]	; (800eb14 <etharp_output+0x1fc>)
 800ea14:	781b      	ldrb	r3, [r3, #0]
 800ea16:	4619      	mov	r1, r3
 800ea18:	4a3f      	ldr	r2, [pc, #252]	; (800eb18 <etharp_output+0x200>)
 800ea1a:	460b      	mov	r3, r1
 800ea1c:	005b      	lsls	r3, r3, #1
 800ea1e:	440b      	add	r3, r1
 800ea20:	00db      	lsls	r3, r3, #3
 800ea22:	4413      	add	r3, r2
 800ea24:	3308      	adds	r3, #8
 800ea26:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800ea28:	68fa      	ldr	r2, [r7, #12]
 800ea2a:	429a      	cmp	r2, r3
 800ea2c:	d117      	bne.n	800ea5e <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800ea2e:	69bb      	ldr	r3, [r7, #24]
 800ea30:	681a      	ldr	r2, [r3, #0]
 800ea32:	4b38      	ldr	r3, [pc, #224]	; (800eb14 <etharp_output+0x1fc>)
 800ea34:	781b      	ldrb	r3, [r3, #0]
 800ea36:	4618      	mov	r0, r3
 800ea38:	4937      	ldr	r1, [pc, #220]	; (800eb18 <etharp_output+0x200>)
 800ea3a:	4603      	mov	r3, r0
 800ea3c:	005b      	lsls	r3, r3, #1
 800ea3e:	4403      	add	r3, r0
 800ea40:	00db      	lsls	r3, r3, #3
 800ea42:	440b      	add	r3, r1
 800ea44:	3304      	adds	r3, #4
 800ea46:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800ea48:	429a      	cmp	r2, r3
 800ea4a:	d108      	bne.n	800ea5e <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800ea4c:	4b31      	ldr	r3, [pc, #196]	; (800eb14 <etharp_output+0x1fc>)
 800ea4e:	781b      	ldrb	r3, [r3, #0]
 800ea50:	461a      	mov	r2, r3
 800ea52:	68b9      	ldr	r1, [r7, #8]
 800ea54:	68f8      	ldr	r0, [r7, #12]
 800ea56:	f7ff fec5 	bl	800e7e4 <etharp_output_to_arp_index>
 800ea5a:	4603      	mov	r3, r0
 800ea5c:	e04a      	b.n	800eaf4 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800ea5e:	2300      	movs	r3, #0
 800ea60:	75fb      	strb	r3, [r7, #23]
 800ea62:	e031      	b.n	800eac8 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800ea64:	7dfa      	ldrb	r2, [r7, #23]
 800ea66:	492c      	ldr	r1, [pc, #176]	; (800eb18 <etharp_output+0x200>)
 800ea68:	4613      	mov	r3, r2
 800ea6a:	005b      	lsls	r3, r3, #1
 800ea6c:	4413      	add	r3, r2
 800ea6e:	00db      	lsls	r3, r3, #3
 800ea70:	440b      	add	r3, r1
 800ea72:	3314      	adds	r3, #20
 800ea74:	781b      	ldrb	r3, [r3, #0]
 800ea76:	2b01      	cmp	r3, #1
 800ea78:	d923      	bls.n	800eac2 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800ea7a:	7dfa      	ldrb	r2, [r7, #23]
 800ea7c:	4926      	ldr	r1, [pc, #152]	; (800eb18 <etharp_output+0x200>)
 800ea7e:	4613      	mov	r3, r2
 800ea80:	005b      	lsls	r3, r3, #1
 800ea82:	4413      	add	r3, r2
 800ea84:	00db      	lsls	r3, r3, #3
 800ea86:	440b      	add	r3, r1
 800ea88:	3308      	adds	r3, #8
 800ea8a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800ea8c:	68fa      	ldr	r2, [r7, #12]
 800ea8e:	429a      	cmp	r2, r3
 800ea90:	d117      	bne.n	800eac2 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800ea92:	69bb      	ldr	r3, [r7, #24]
 800ea94:	6819      	ldr	r1, [r3, #0]
 800ea96:	7dfa      	ldrb	r2, [r7, #23]
 800ea98:	481f      	ldr	r0, [pc, #124]	; (800eb18 <etharp_output+0x200>)
 800ea9a:	4613      	mov	r3, r2
 800ea9c:	005b      	lsls	r3, r3, #1
 800ea9e:	4413      	add	r3, r2
 800eaa0:	00db      	lsls	r3, r3, #3
 800eaa2:	4403      	add	r3, r0
 800eaa4:	3304      	adds	r3, #4
 800eaa6:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800eaa8:	4299      	cmp	r1, r3
 800eaaa:	d10a      	bne.n	800eac2 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800eaac:	4a19      	ldr	r2, [pc, #100]	; (800eb14 <etharp_output+0x1fc>)
 800eaae:	7dfb      	ldrb	r3, [r7, #23]
 800eab0:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800eab2:	7dfb      	ldrb	r3, [r7, #23]
 800eab4:	461a      	mov	r2, r3
 800eab6:	68b9      	ldr	r1, [r7, #8]
 800eab8:	68f8      	ldr	r0, [r7, #12]
 800eaba:	f7ff fe93 	bl	800e7e4 <etharp_output_to_arp_index>
 800eabe:	4603      	mov	r3, r0
 800eac0:	e018      	b.n	800eaf4 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800eac2:	7dfb      	ldrb	r3, [r7, #23]
 800eac4:	3301      	adds	r3, #1
 800eac6:	75fb      	strb	r3, [r7, #23]
 800eac8:	7dfb      	ldrb	r3, [r7, #23]
 800eaca:	2b09      	cmp	r3, #9
 800eacc:	d9ca      	bls.n	800ea64 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800eace:	68ba      	ldr	r2, [r7, #8]
 800ead0:	69b9      	ldr	r1, [r7, #24]
 800ead2:	68f8      	ldr	r0, [r7, #12]
 800ead4:	f000 f822 	bl	800eb1c <etharp_query>
 800ead8:	4603      	mov	r3, r0
 800eada:	e00b      	b.n	800eaf4 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800eadc:	68fb      	ldr	r3, [r7, #12]
 800eade:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 800eae2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800eae6:	9300      	str	r3, [sp, #0]
 800eae8:	69fb      	ldr	r3, [r7, #28]
 800eaea:	68b9      	ldr	r1, [r7, #8]
 800eaec:	68f8      	ldr	r0, [r7, #12]
 800eaee:	f001 fd89 	bl	8010604 <ethernet_output>
 800eaf2:	4603      	mov	r3, r0
}
 800eaf4:	4618      	mov	r0, r3
 800eaf6:	3720      	adds	r7, #32
 800eaf8:	46bd      	mov	sp, r7
 800eafa:	bd80      	pop	{r7, pc}
 800eafc:	08013fa4 	.word	0x08013fa4
 800eb00:	080140f4 	.word	0x080140f4
 800eb04:	0801401c 	.word	0x0801401c
 800eb08:	08014144 	.word	0x08014144
 800eb0c:	080140e4 	.word	0x080140e4
 800eb10:	08014774 	.word	0x08014774
 800eb14:	20007dd8 	.word	0x20007dd8
 800eb18:	20007ce8 	.word	0x20007ce8

0800eb1c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800eb1c:	b580      	push	{r7, lr}
 800eb1e:	b08c      	sub	sp, #48	; 0x30
 800eb20:	af02      	add	r7, sp, #8
 800eb22:	60f8      	str	r0, [r7, #12]
 800eb24:	60b9      	str	r1, [r7, #8]
 800eb26:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800eb28:	68fb      	ldr	r3, [r7, #12]
 800eb2a:	332a      	adds	r3, #42	; 0x2a
 800eb2c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800eb2e:	23ff      	movs	r3, #255	; 0xff
 800eb30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800eb34:	2300      	movs	r3, #0
 800eb36:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800eb38:	68bb      	ldr	r3, [r7, #8]
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	68f9      	ldr	r1, [r7, #12]
 800eb3e:	4618      	mov	r0, r3
 800eb40:	f000 fe52 	bl	800f7e8 <ip4_addr_isbroadcast_u32>
 800eb44:	4603      	mov	r3, r0
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d10c      	bne.n	800eb64 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800eb4a:	68bb      	ldr	r3, [r7, #8]
 800eb4c:	681b      	ldr	r3, [r3, #0]
 800eb4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800eb52:	2be0      	cmp	r3, #224	; 0xe0
 800eb54:	d006      	beq.n	800eb64 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800eb56:	68bb      	ldr	r3, [r7, #8]
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d003      	beq.n	800eb64 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800eb5c:	68bb      	ldr	r3, [r7, #8]
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d102      	bne.n	800eb6a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800eb64:	f06f 030f 	mvn.w	r3, #15
 800eb68:	e101      	b.n	800ed6e <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800eb6a:	68fa      	ldr	r2, [r7, #12]
 800eb6c:	2101      	movs	r1, #1
 800eb6e:	68b8      	ldr	r0, [r7, #8]
 800eb70:	f7ff fb5c 	bl	800e22c <etharp_find_entry>
 800eb74:	4603      	mov	r3, r0
 800eb76:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800eb78:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	da02      	bge.n	800eb86 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800eb80:	8a7b      	ldrh	r3, [r7, #18]
 800eb82:	b25b      	sxtb	r3, r3
 800eb84:	e0f3      	b.n	800ed6e <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800eb86:	8a7b      	ldrh	r3, [r7, #18]
 800eb88:	2b7e      	cmp	r3, #126	; 0x7e
 800eb8a:	d906      	bls.n	800eb9a <etharp_query+0x7e>
 800eb8c:	4b7a      	ldr	r3, [pc, #488]	; (800ed78 <etharp_query+0x25c>)
 800eb8e:	f240 32c1 	movw	r2, #961	; 0x3c1
 800eb92:	497a      	ldr	r1, [pc, #488]	; (800ed7c <etharp_query+0x260>)
 800eb94:	487a      	ldr	r0, [pc, #488]	; (800ed80 <etharp_query+0x264>)
 800eb96:	f001 fdc7 	bl	8010728 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800eb9a:	8a7b      	ldrh	r3, [r7, #18]
 800eb9c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800eb9e:	7c7a      	ldrb	r2, [r7, #17]
 800eba0:	4978      	ldr	r1, [pc, #480]	; (800ed84 <etharp_query+0x268>)
 800eba2:	4613      	mov	r3, r2
 800eba4:	005b      	lsls	r3, r3, #1
 800eba6:	4413      	add	r3, r2
 800eba8:	00db      	lsls	r3, r3, #3
 800ebaa:	440b      	add	r3, r1
 800ebac:	3314      	adds	r3, #20
 800ebae:	781b      	ldrb	r3, [r3, #0]
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d115      	bne.n	800ebe0 <etharp_query+0xc4>
    is_new_entry = 1;
 800ebb4:	2301      	movs	r3, #1
 800ebb6:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800ebb8:	7c7a      	ldrb	r2, [r7, #17]
 800ebba:	4972      	ldr	r1, [pc, #456]	; (800ed84 <etharp_query+0x268>)
 800ebbc:	4613      	mov	r3, r2
 800ebbe:	005b      	lsls	r3, r3, #1
 800ebc0:	4413      	add	r3, r2
 800ebc2:	00db      	lsls	r3, r3, #3
 800ebc4:	440b      	add	r3, r1
 800ebc6:	3314      	adds	r3, #20
 800ebc8:	2201      	movs	r2, #1
 800ebca:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800ebcc:	7c7a      	ldrb	r2, [r7, #17]
 800ebce:	496d      	ldr	r1, [pc, #436]	; (800ed84 <etharp_query+0x268>)
 800ebd0:	4613      	mov	r3, r2
 800ebd2:	005b      	lsls	r3, r3, #1
 800ebd4:	4413      	add	r3, r2
 800ebd6:	00db      	lsls	r3, r3, #3
 800ebd8:	440b      	add	r3, r1
 800ebda:	3308      	adds	r3, #8
 800ebdc:	68fa      	ldr	r2, [r7, #12]
 800ebde:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800ebe0:	7c7a      	ldrb	r2, [r7, #17]
 800ebe2:	4968      	ldr	r1, [pc, #416]	; (800ed84 <etharp_query+0x268>)
 800ebe4:	4613      	mov	r3, r2
 800ebe6:	005b      	lsls	r3, r3, #1
 800ebe8:	4413      	add	r3, r2
 800ebea:	00db      	lsls	r3, r3, #3
 800ebec:	440b      	add	r3, r1
 800ebee:	3314      	adds	r3, #20
 800ebf0:	781b      	ldrb	r3, [r3, #0]
 800ebf2:	2b01      	cmp	r3, #1
 800ebf4:	d011      	beq.n	800ec1a <etharp_query+0xfe>
 800ebf6:	7c7a      	ldrb	r2, [r7, #17]
 800ebf8:	4962      	ldr	r1, [pc, #392]	; (800ed84 <etharp_query+0x268>)
 800ebfa:	4613      	mov	r3, r2
 800ebfc:	005b      	lsls	r3, r3, #1
 800ebfe:	4413      	add	r3, r2
 800ec00:	00db      	lsls	r3, r3, #3
 800ec02:	440b      	add	r3, r1
 800ec04:	3314      	adds	r3, #20
 800ec06:	781b      	ldrb	r3, [r3, #0]
 800ec08:	2b01      	cmp	r3, #1
 800ec0a:	d806      	bhi.n	800ec1a <etharp_query+0xfe>
 800ec0c:	4b5a      	ldr	r3, [pc, #360]	; (800ed78 <etharp_query+0x25c>)
 800ec0e:	f240 32cd 	movw	r2, #973	; 0x3cd
 800ec12:	495d      	ldr	r1, [pc, #372]	; (800ed88 <etharp_query+0x26c>)
 800ec14:	485a      	ldr	r0, [pc, #360]	; (800ed80 <etharp_query+0x264>)
 800ec16:	f001 fd87 	bl	8010728 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800ec1a:	6a3b      	ldr	r3, [r7, #32]
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d102      	bne.n	800ec26 <etharp_query+0x10a>
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d10c      	bne.n	800ec40 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800ec26:	68b9      	ldr	r1, [r7, #8]
 800ec28:	68f8      	ldr	r0, [r7, #12]
 800ec2a:	f000 f963 	bl	800eef4 <etharp_request>
 800ec2e:	4603      	mov	r3, r0
 800ec30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d102      	bne.n	800ec40 <etharp_query+0x124>
      return result;
 800ec3a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ec3e:	e096      	b.n	800ed6e <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d106      	bne.n	800ec54 <etharp_query+0x138>
 800ec46:	4b4c      	ldr	r3, [pc, #304]	; (800ed78 <etharp_query+0x25c>)
 800ec48:	f240 32e1 	movw	r2, #993	; 0x3e1
 800ec4c:	494f      	ldr	r1, [pc, #316]	; (800ed8c <etharp_query+0x270>)
 800ec4e:	484c      	ldr	r0, [pc, #304]	; (800ed80 <etharp_query+0x264>)
 800ec50:	f001 fd6a 	bl	8010728 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800ec54:	7c7a      	ldrb	r2, [r7, #17]
 800ec56:	494b      	ldr	r1, [pc, #300]	; (800ed84 <etharp_query+0x268>)
 800ec58:	4613      	mov	r3, r2
 800ec5a:	005b      	lsls	r3, r3, #1
 800ec5c:	4413      	add	r3, r2
 800ec5e:	00db      	lsls	r3, r3, #3
 800ec60:	440b      	add	r3, r1
 800ec62:	3314      	adds	r3, #20
 800ec64:	781b      	ldrb	r3, [r3, #0]
 800ec66:	2b01      	cmp	r3, #1
 800ec68:	d917      	bls.n	800ec9a <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800ec6a:	4a49      	ldr	r2, [pc, #292]	; (800ed90 <etharp_query+0x274>)
 800ec6c:	7c7b      	ldrb	r3, [r7, #17]
 800ec6e:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800ec70:	7c7a      	ldrb	r2, [r7, #17]
 800ec72:	4613      	mov	r3, r2
 800ec74:	005b      	lsls	r3, r3, #1
 800ec76:	4413      	add	r3, r2
 800ec78:	00db      	lsls	r3, r3, #3
 800ec7a:	3308      	adds	r3, #8
 800ec7c:	4a41      	ldr	r2, [pc, #260]	; (800ed84 <etharp_query+0x268>)
 800ec7e:	4413      	add	r3, r2
 800ec80:	3304      	adds	r3, #4
 800ec82:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ec86:	9200      	str	r2, [sp, #0]
 800ec88:	697a      	ldr	r2, [r7, #20]
 800ec8a:	6879      	ldr	r1, [r7, #4]
 800ec8c:	68f8      	ldr	r0, [r7, #12]
 800ec8e:	f001 fcb9 	bl	8010604 <ethernet_output>
 800ec92:	4603      	mov	r3, r0
 800ec94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ec98:	e067      	b.n	800ed6a <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800ec9a:	7c7a      	ldrb	r2, [r7, #17]
 800ec9c:	4939      	ldr	r1, [pc, #228]	; (800ed84 <etharp_query+0x268>)
 800ec9e:	4613      	mov	r3, r2
 800eca0:	005b      	lsls	r3, r3, #1
 800eca2:	4413      	add	r3, r2
 800eca4:	00db      	lsls	r3, r3, #3
 800eca6:	440b      	add	r3, r1
 800eca8:	3314      	adds	r3, #20
 800ecaa:	781b      	ldrb	r3, [r3, #0]
 800ecac:	2b01      	cmp	r3, #1
 800ecae:	d15c      	bne.n	800ed6a <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800ecb0:	2300      	movs	r3, #0
 800ecb2:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	61fb      	str	r3, [r7, #28]
    while (p) {
 800ecb8:	e01c      	b.n	800ecf4 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800ecba:	69fb      	ldr	r3, [r7, #28]
 800ecbc:	895a      	ldrh	r2, [r3, #10]
 800ecbe:	69fb      	ldr	r3, [r7, #28]
 800ecc0:	891b      	ldrh	r3, [r3, #8]
 800ecc2:	429a      	cmp	r2, r3
 800ecc4:	d10a      	bne.n	800ecdc <etharp_query+0x1c0>
 800ecc6:	69fb      	ldr	r3, [r7, #28]
 800ecc8:	681b      	ldr	r3, [r3, #0]
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d006      	beq.n	800ecdc <etharp_query+0x1c0>
 800ecce:	4b2a      	ldr	r3, [pc, #168]	; (800ed78 <etharp_query+0x25c>)
 800ecd0:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800ecd4:	492f      	ldr	r1, [pc, #188]	; (800ed94 <etharp_query+0x278>)
 800ecd6:	482a      	ldr	r0, [pc, #168]	; (800ed80 <etharp_query+0x264>)
 800ecd8:	f001 fd26 	bl	8010728 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800ecdc:	69fb      	ldr	r3, [r7, #28]
 800ecde:	7b1b      	ldrb	r3, [r3, #12]
 800ece0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	d002      	beq.n	800ecee <etharp_query+0x1d2>
        copy_needed = 1;
 800ece8:	2301      	movs	r3, #1
 800ecea:	61bb      	str	r3, [r7, #24]
        break;
 800ecec:	e005      	b.n	800ecfa <etharp_query+0x1de>
      }
      p = p->next;
 800ecee:	69fb      	ldr	r3, [r7, #28]
 800ecf0:	681b      	ldr	r3, [r3, #0]
 800ecf2:	61fb      	str	r3, [r7, #28]
    while (p) {
 800ecf4:	69fb      	ldr	r3, [r7, #28]
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	d1df      	bne.n	800ecba <etharp_query+0x19e>
    }
    if (copy_needed) {
 800ecfa:	69bb      	ldr	r3, [r7, #24]
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d007      	beq.n	800ed10 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800ed00:	687a      	ldr	r2, [r7, #4]
 800ed02:	f44f 7120 	mov.w	r1, #640	; 0x280
 800ed06:	200e      	movs	r0, #14
 800ed08:	f7f7 fbd2 	bl	80064b0 <pbuf_clone>
 800ed0c:	61f8      	str	r0, [r7, #28]
 800ed0e:	e004      	b.n	800ed1a <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800ed14:	69f8      	ldr	r0, [r7, #28]
 800ed16:	f7f7 f9ff 	bl	8006118 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800ed1a:	69fb      	ldr	r3, [r7, #28]
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	d021      	beq.n	800ed64 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800ed20:	7c7a      	ldrb	r2, [r7, #17]
 800ed22:	4918      	ldr	r1, [pc, #96]	; (800ed84 <etharp_query+0x268>)
 800ed24:	4613      	mov	r3, r2
 800ed26:	005b      	lsls	r3, r3, #1
 800ed28:	4413      	add	r3, r2
 800ed2a:	00db      	lsls	r3, r3, #3
 800ed2c:	440b      	add	r3, r1
 800ed2e:	681b      	ldr	r3, [r3, #0]
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	d00a      	beq.n	800ed4a <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800ed34:	7c7a      	ldrb	r2, [r7, #17]
 800ed36:	4913      	ldr	r1, [pc, #76]	; (800ed84 <etharp_query+0x268>)
 800ed38:	4613      	mov	r3, r2
 800ed3a:	005b      	lsls	r3, r3, #1
 800ed3c:	4413      	add	r3, r2
 800ed3e:	00db      	lsls	r3, r3, #3
 800ed40:	440b      	add	r3, r1
 800ed42:	681b      	ldr	r3, [r3, #0]
 800ed44:	4618      	mov	r0, r3
 800ed46:	f7f7 f947 	bl	8005fd8 <pbuf_free>
      }
      arp_table[i].q = p;
 800ed4a:	7c7a      	ldrb	r2, [r7, #17]
 800ed4c:	490d      	ldr	r1, [pc, #52]	; (800ed84 <etharp_query+0x268>)
 800ed4e:	4613      	mov	r3, r2
 800ed50:	005b      	lsls	r3, r3, #1
 800ed52:	4413      	add	r3, r2
 800ed54:	00db      	lsls	r3, r3, #3
 800ed56:	440b      	add	r3, r1
 800ed58:	69fa      	ldr	r2, [r7, #28]
 800ed5a:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800ed5c:	2300      	movs	r3, #0
 800ed5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ed62:	e002      	b.n	800ed6a <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800ed64:	23ff      	movs	r3, #255	; 0xff
 800ed66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800ed6a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800ed6e:	4618      	mov	r0, r3
 800ed70:	3728      	adds	r7, #40	; 0x28
 800ed72:	46bd      	mov	sp, r7
 800ed74:	bd80      	pop	{r7, pc}
 800ed76:	bf00      	nop
 800ed78:	08013fa4 	.word	0x08013fa4
 800ed7c:	08014150 	.word	0x08014150
 800ed80:	0801401c 	.word	0x0801401c
 800ed84:	20007ce8 	.word	0x20007ce8
 800ed88:	08014160 	.word	0x08014160
 800ed8c:	08014144 	.word	0x08014144
 800ed90:	20007dd8 	.word	0x20007dd8
 800ed94:	08014188 	.word	0x08014188

0800ed98 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800ed98:	b580      	push	{r7, lr}
 800ed9a:	b08a      	sub	sp, #40	; 0x28
 800ed9c:	af02      	add	r7, sp, #8
 800ed9e:	60f8      	str	r0, [r7, #12]
 800eda0:	60b9      	str	r1, [r7, #8]
 800eda2:	607a      	str	r2, [r7, #4]
 800eda4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800eda6:	2300      	movs	r3, #0
 800eda8:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800edaa:	68fb      	ldr	r3, [r7, #12]
 800edac:	2b00      	cmp	r3, #0
 800edae:	d106      	bne.n	800edbe <etharp_raw+0x26>
 800edb0:	4b3a      	ldr	r3, [pc, #232]	; (800ee9c <etharp_raw+0x104>)
 800edb2:	f240 4257 	movw	r2, #1111	; 0x457
 800edb6:	493a      	ldr	r1, [pc, #232]	; (800eea0 <etharp_raw+0x108>)
 800edb8:	483a      	ldr	r0, [pc, #232]	; (800eea4 <etharp_raw+0x10c>)
 800edba:	f001 fcb5 	bl	8010728 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800edbe:	f44f 7220 	mov.w	r2, #640	; 0x280
 800edc2:	211c      	movs	r1, #28
 800edc4:	200e      	movs	r0, #14
 800edc6:	f7f6 fe23 	bl	8005a10 <pbuf_alloc>
 800edca:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800edcc:	69bb      	ldr	r3, [r7, #24]
 800edce:	2b00      	cmp	r3, #0
 800edd0:	d102      	bne.n	800edd8 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800edd2:	f04f 33ff 	mov.w	r3, #4294967295
 800edd6:	e05d      	b.n	800ee94 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800edd8:	69bb      	ldr	r3, [r7, #24]
 800edda:	895b      	ldrh	r3, [r3, #10]
 800eddc:	2b1b      	cmp	r3, #27
 800edde:	d806      	bhi.n	800edee <etharp_raw+0x56>
 800ede0:	4b2e      	ldr	r3, [pc, #184]	; (800ee9c <etharp_raw+0x104>)
 800ede2:	f240 4262 	movw	r2, #1122	; 0x462
 800ede6:	4930      	ldr	r1, [pc, #192]	; (800eea8 <etharp_raw+0x110>)
 800ede8:	482e      	ldr	r0, [pc, #184]	; (800eea4 <etharp_raw+0x10c>)
 800edea:	f001 fc9d 	bl	8010728 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800edee:	69bb      	ldr	r3, [r7, #24]
 800edf0:	685b      	ldr	r3, [r3, #4]
 800edf2:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800edf4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800edf6:	4618      	mov	r0, r3
 800edf8:	f7f5 fcec 	bl	80047d4 <lwip_htons>
 800edfc:	4603      	mov	r3, r0
 800edfe:	461a      	mov	r2, r3
 800ee00:	697b      	ldr	r3, [r7, #20]
 800ee02:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ee0a:	2b06      	cmp	r3, #6
 800ee0c:	d006      	beq.n	800ee1c <etharp_raw+0x84>
 800ee0e:	4b23      	ldr	r3, [pc, #140]	; (800ee9c <etharp_raw+0x104>)
 800ee10:	f240 4269 	movw	r2, #1129	; 0x469
 800ee14:	4925      	ldr	r1, [pc, #148]	; (800eeac <etharp_raw+0x114>)
 800ee16:	4823      	ldr	r0, [pc, #140]	; (800eea4 <etharp_raw+0x10c>)
 800ee18:	f001 fc86 	bl	8010728 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800ee1c:	697b      	ldr	r3, [r7, #20]
 800ee1e:	3308      	adds	r3, #8
 800ee20:	2206      	movs	r2, #6
 800ee22:	6839      	ldr	r1, [r7, #0]
 800ee24:	4618      	mov	r0, r3
 800ee26:	f001 fc69 	bl	80106fc <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800ee2a:	697b      	ldr	r3, [r7, #20]
 800ee2c:	3312      	adds	r3, #18
 800ee2e:	2206      	movs	r2, #6
 800ee30:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ee32:	4618      	mov	r0, r3
 800ee34:	f001 fc62 	bl	80106fc <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800ee38:	697b      	ldr	r3, [r7, #20]
 800ee3a:	330e      	adds	r3, #14
 800ee3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ee3e:	6812      	ldr	r2, [r2, #0]
 800ee40:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800ee42:	697b      	ldr	r3, [r7, #20]
 800ee44:	3318      	adds	r3, #24
 800ee46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ee48:	6812      	ldr	r2, [r2, #0]
 800ee4a:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800ee4c:	697b      	ldr	r3, [r7, #20]
 800ee4e:	2200      	movs	r2, #0
 800ee50:	701a      	strb	r2, [r3, #0]
 800ee52:	2200      	movs	r2, #0
 800ee54:	f042 0201 	orr.w	r2, r2, #1
 800ee58:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800ee5a:	697b      	ldr	r3, [r7, #20]
 800ee5c:	2200      	movs	r2, #0
 800ee5e:	f042 0208 	orr.w	r2, r2, #8
 800ee62:	709a      	strb	r2, [r3, #2]
 800ee64:	2200      	movs	r2, #0
 800ee66:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800ee68:	697b      	ldr	r3, [r7, #20]
 800ee6a:	2206      	movs	r2, #6
 800ee6c:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800ee6e:	697b      	ldr	r3, [r7, #20]
 800ee70:	2204      	movs	r2, #4
 800ee72:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800ee74:	f640 0306 	movw	r3, #2054	; 0x806
 800ee78:	9300      	str	r3, [sp, #0]
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	68ba      	ldr	r2, [r7, #8]
 800ee7e:	69b9      	ldr	r1, [r7, #24]
 800ee80:	68f8      	ldr	r0, [r7, #12]
 800ee82:	f001 fbbf 	bl	8010604 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800ee86:	69b8      	ldr	r0, [r7, #24]
 800ee88:	f7f7 f8a6 	bl	8005fd8 <pbuf_free>
  p = NULL;
 800ee8c:	2300      	movs	r3, #0
 800ee8e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800ee90:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800ee94:	4618      	mov	r0, r3
 800ee96:	3720      	adds	r7, #32
 800ee98:	46bd      	mov	sp, r7
 800ee9a:	bd80      	pop	{r7, pc}
 800ee9c:	08013fa4 	.word	0x08013fa4
 800eea0:	080140f4 	.word	0x080140f4
 800eea4:	0801401c 	.word	0x0801401c
 800eea8:	080141a4 	.word	0x080141a4
 800eeac:	080141d8 	.word	0x080141d8

0800eeb0 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800eeb0:	b580      	push	{r7, lr}
 800eeb2:	b088      	sub	sp, #32
 800eeb4:	af04      	add	r7, sp, #16
 800eeb6:	60f8      	str	r0, [r7, #12]
 800eeb8:	60b9      	str	r1, [r7, #8]
 800eeba:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800eebc:	68fb      	ldr	r3, [r7, #12]
 800eebe:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800eec2:	68fb      	ldr	r3, [r7, #12]
 800eec4:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 800eec8:	68fb      	ldr	r3, [r7, #12]
 800eeca:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800eecc:	2201      	movs	r2, #1
 800eece:	9203      	str	r2, [sp, #12]
 800eed0:	68ba      	ldr	r2, [r7, #8]
 800eed2:	9202      	str	r2, [sp, #8]
 800eed4:	4a06      	ldr	r2, [pc, #24]	; (800eef0 <etharp_request_dst+0x40>)
 800eed6:	9201      	str	r2, [sp, #4]
 800eed8:	9300      	str	r3, [sp, #0]
 800eeda:	4603      	mov	r3, r0
 800eedc:	687a      	ldr	r2, [r7, #4]
 800eede:	68f8      	ldr	r0, [r7, #12]
 800eee0:	f7ff ff5a 	bl	800ed98 <etharp_raw>
 800eee4:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800eee6:	4618      	mov	r0, r3
 800eee8:	3710      	adds	r7, #16
 800eeea:	46bd      	mov	sp, r7
 800eeec:	bd80      	pop	{r7, pc}
 800eeee:	bf00      	nop
 800eef0:	0801477c 	.word	0x0801477c

0800eef4 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800eef4:	b580      	push	{r7, lr}
 800eef6:	b082      	sub	sp, #8
 800eef8:	af00      	add	r7, sp, #0
 800eefa:	6078      	str	r0, [r7, #4]
 800eefc:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800eefe:	4a05      	ldr	r2, [pc, #20]	; (800ef14 <etharp_request+0x20>)
 800ef00:	6839      	ldr	r1, [r7, #0]
 800ef02:	6878      	ldr	r0, [r7, #4]
 800ef04:	f7ff ffd4 	bl	800eeb0 <etharp_request_dst>
 800ef08:	4603      	mov	r3, r0
}
 800ef0a:	4618      	mov	r0, r3
 800ef0c:	3708      	adds	r7, #8
 800ef0e:	46bd      	mov	sp, r7
 800ef10:	bd80      	pop	{r7, pc}
 800ef12:	bf00      	nop
 800ef14:	08014774 	.word	0x08014774

0800ef18 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800ef18:	b580      	push	{r7, lr}
 800ef1a:	b08e      	sub	sp, #56	; 0x38
 800ef1c:	af04      	add	r7, sp, #16
 800ef1e:	6078      	str	r0, [r7, #4]
 800ef20:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800ef22:	4b87      	ldr	r3, [pc, #540]	; (800f140 <icmp_input+0x228>)
 800ef24:	689b      	ldr	r3, [r3, #8]
 800ef26:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800ef28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef2a:	781b      	ldrb	r3, [r3, #0]
 800ef2c:	f003 030f 	and.w	r3, r3, #15
 800ef30:	b2db      	uxtb	r3, r3
 800ef32:	009b      	lsls	r3, r3, #2
 800ef34:	b2db      	uxtb	r3, r3
 800ef36:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800ef38:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ef3a:	2b13      	cmp	r3, #19
 800ef3c:	f240 80e8 	bls.w	800f110 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	895b      	ldrh	r3, [r3, #10]
 800ef44:	2b03      	cmp	r3, #3
 800ef46:	f240 80e5 	bls.w	800f114 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	685b      	ldr	r3, [r3, #4]
 800ef4e:	781b      	ldrb	r3, [r3, #0]
 800ef50:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800ef54:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	f000 80d2 	beq.w	800f102 <icmp_input+0x1ea>
 800ef5e:	2b08      	cmp	r3, #8
 800ef60:	f040 80d2 	bne.w	800f108 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800ef64:	4b77      	ldr	r3, [pc, #476]	; (800f144 <icmp_input+0x22c>)
 800ef66:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800ef68:	4b75      	ldr	r3, [pc, #468]	; (800f140 <icmp_input+0x228>)
 800ef6a:	695b      	ldr	r3, [r3, #20]
 800ef6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ef70:	2be0      	cmp	r3, #224	; 0xe0
 800ef72:	f000 80d6 	beq.w	800f122 <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800ef76:	4b72      	ldr	r3, [pc, #456]	; (800f140 <icmp_input+0x228>)
 800ef78:	695b      	ldr	r3, [r3, #20]
 800ef7a:	4a71      	ldr	r2, [pc, #452]	; (800f140 <icmp_input+0x228>)
 800ef7c:	6812      	ldr	r2, [r2, #0]
 800ef7e:	4611      	mov	r1, r2
 800ef80:	4618      	mov	r0, r3
 800ef82:	f000 fc31 	bl	800f7e8 <ip4_addr_isbroadcast_u32>
 800ef86:	4603      	mov	r3, r0
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	f040 80cc 	bne.w	800f126 <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	891b      	ldrh	r3, [r3, #8]
 800ef92:	2b07      	cmp	r3, #7
 800ef94:	f240 80c0 	bls.w	800f118 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 800ef98:	6878      	ldr	r0, [r7, #4]
 800ef9a:	f7f5 fcb8 	bl	800490e <inet_chksum_pbuf>
 800ef9e:	4603      	mov	r3, r0
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d003      	beq.n	800efac <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 800efa4:	6878      	ldr	r0, [r7, #4]
 800efa6:	f7f7 f817 	bl	8005fd8 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 800efaa:	e0c5      	b.n	800f138 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800efac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800efae:	330e      	adds	r3, #14
 800efb0:	4619      	mov	r1, r3
 800efb2:	6878      	ldr	r0, [r7, #4]
 800efb4:	f7f6 ff7a 	bl	8005eac <pbuf_add_header>
 800efb8:	4603      	mov	r3, r0
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d04b      	beq.n	800f056 <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	891a      	ldrh	r2, [r3, #8]
 800efc2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800efc4:	4413      	add	r3, r2
 800efc6:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	891b      	ldrh	r3, [r3, #8]
 800efcc:	8b7a      	ldrh	r2, [r7, #26]
 800efce:	429a      	cmp	r2, r3
 800efd0:	f0c0 80ab 	bcc.w	800f12a <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800efd4:	8b7b      	ldrh	r3, [r7, #26]
 800efd6:	f44f 7220 	mov.w	r2, #640	; 0x280
 800efda:	4619      	mov	r1, r3
 800efdc:	200e      	movs	r0, #14
 800efde:	f7f6 fd17 	bl	8005a10 <pbuf_alloc>
 800efe2:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800efe4:	697b      	ldr	r3, [r7, #20]
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	f000 80a1 	beq.w	800f12e <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800efec:	697b      	ldr	r3, [r7, #20]
 800efee:	895b      	ldrh	r3, [r3, #10]
 800eff0:	461a      	mov	r2, r3
 800eff2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800eff4:	3308      	adds	r3, #8
 800eff6:	429a      	cmp	r2, r3
 800eff8:	d203      	bcs.n	800f002 <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800effa:	6978      	ldr	r0, [r7, #20]
 800effc:	f7f6 ffec 	bl	8005fd8 <pbuf_free>
          goto icmperr;
 800f000:	e096      	b.n	800f130 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800f002:	697b      	ldr	r3, [r7, #20]
 800f004:	685b      	ldr	r3, [r3, #4]
 800f006:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800f008:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f00a:	4618      	mov	r0, r3
 800f00c:	f001 fb76 	bl	80106fc <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800f010:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f012:	4619      	mov	r1, r3
 800f014:	6978      	ldr	r0, [r7, #20]
 800f016:	f7f6 ff59 	bl	8005ecc <pbuf_remove_header>
 800f01a:	4603      	mov	r3, r0
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d009      	beq.n	800f034 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800f020:	4b49      	ldr	r3, [pc, #292]	; (800f148 <icmp_input+0x230>)
 800f022:	22b6      	movs	r2, #182	; 0xb6
 800f024:	4949      	ldr	r1, [pc, #292]	; (800f14c <icmp_input+0x234>)
 800f026:	484a      	ldr	r0, [pc, #296]	; (800f150 <icmp_input+0x238>)
 800f028:	f001 fb7e 	bl	8010728 <iprintf>
          pbuf_free(r);
 800f02c:	6978      	ldr	r0, [r7, #20]
 800f02e:	f7f6 ffd3 	bl	8005fd8 <pbuf_free>
          goto icmperr;
 800f032:	e07d      	b.n	800f130 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800f034:	6879      	ldr	r1, [r7, #4]
 800f036:	6978      	ldr	r0, [r7, #20]
 800f038:	f7f7 f8f6 	bl	8006228 <pbuf_copy>
 800f03c:	4603      	mov	r3, r0
 800f03e:	2b00      	cmp	r3, #0
 800f040:	d003      	beq.n	800f04a <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800f042:	6978      	ldr	r0, [r7, #20]
 800f044:	f7f6 ffc8 	bl	8005fd8 <pbuf_free>
          goto icmperr;
 800f048:	e072      	b.n	800f130 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 800f04a:	6878      	ldr	r0, [r7, #4]
 800f04c:	f7f6 ffc4 	bl	8005fd8 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800f050:	697b      	ldr	r3, [r7, #20]
 800f052:	607b      	str	r3, [r7, #4]
 800f054:	e00f      	b.n	800f076 <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800f056:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f058:	330e      	adds	r3, #14
 800f05a:	4619      	mov	r1, r3
 800f05c:	6878      	ldr	r0, [r7, #4]
 800f05e:	f7f6 ff35 	bl	8005ecc <pbuf_remove_header>
 800f062:	4603      	mov	r3, r0
 800f064:	2b00      	cmp	r3, #0
 800f066:	d006      	beq.n	800f076 <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800f068:	4b37      	ldr	r3, [pc, #220]	; (800f148 <icmp_input+0x230>)
 800f06a:	22c7      	movs	r2, #199	; 0xc7
 800f06c:	4939      	ldr	r1, [pc, #228]	; (800f154 <icmp_input+0x23c>)
 800f06e:	4838      	ldr	r0, [pc, #224]	; (800f150 <icmp_input+0x238>)
 800f070:	f001 fb5a 	bl	8010728 <iprintf>
          goto icmperr;
 800f074:	e05c      	b.n	800f130 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	685b      	ldr	r3, [r3, #4]
 800f07a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800f07c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f07e:	4619      	mov	r1, r3
 800f080:	6878      	ldr	r0, [r7, #4]
 800f082:	f7f6 ff13 	bl	8005eac <pbuf_add_header>
 800f086:	4603      	mov	r3, r0
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d13c      	bne.n	800f106 <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	685b      	ldr	r3, [r3, #4]
 800f090:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800f092:	69fb      	ldr	r3, [r7, #28]
 800f094:	681a      	ldr	r2, [r3, #0]
 800f096:	68fb      	ldr	r3, [r7, #12]
 800f098:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800f09a:	4b29      	ldr	r3, [pc, #164]	; (800f140 <icmp_input+0x228>)
 800f09c:	691a      	ldr	r2, [r3, #16]
 800f09e:	68fb      	ldr	r3, [r7, #12]
 800f0a0:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800f0a2:	693b      	ldr	r3, [r7, #16]
 800f0a4:	2200      	movs	r2, #0
 800f0a6:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 800f0a8:	693b      	ldr	r3, [r7, #16]
 800f0aa:	885b      	ldrh	r3, [r3, #2]
 800f0ac:	b29b      	uxth	r3, r3
 800f0ae:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800f0b2:	4293      	cmp	r3, r2
 800f0b4:	d907      	bls.n	800f0c6 <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 800f0b6:	693b      	ldr	r3, [r7, #16]
 800f0b8:	885b      	ldrh	r3, [r3, #2]
 800f0ba:	b29b      	uxth	r3, r3
 800f0bc:	3309      	adds	r3, #9
 800f0be:	b29a      	uxth	r2, r3
 800f0c0:	693b      	ldr	r3, [r7, #16]
 800f0c2:	805a      	strh	r2, [r3, #2]
 800f0c4:	e006      	b.n	800f0d4 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 800f0c6:	693b      	ldr	r3, [r7, #16]
 800f0c8:	885b      	ldrh	r3, [r3, #2]
 800f0ca:	b29b      	uxth	r3, r3
 800f0cc:	3308      	adds	r3, #8
 800f0ce:	b29a      	uxth	r2, r3
 800f0d0:	693b      	ldr	r3, [r7, #16]
 800f0d2:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800f0d4:	68fb      	ldr	r3, [r7, #12]
 800f0d6:	22ff      	movs	r2, #255	; 0xff
 800f0d8:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800f0da:	68fb      	ldr	r3, [r7, #12]
 800f0dc:	2200      	movs	r2, #0
 800f0de:	729a      	strb	r2, [r3, #10]
 800f0e0:	2200      	movs	r2, #0
 800f0e2:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800f0e4:	683b      	ldr	r3, [r7, #0]
 800f0e6:	9302      	str	r3, [sp, #8]
 800f0e8:	2301      	movs	r3, #1
 800f0ea:	9301      	str	r3, [sp, #4]
 800f0ec:	2300      	movs	r3, #0
 800f0ee:	9300      	str	r3, [sp, #0]
 800f0f0:	23ff      	movs	r3, #255	; 0xff
 800f0f2:	2200      	movs	r2, #0
 800f0f4:	69f9      	ldr	r1, [r7, #28]
 800f0f6:	6878      	ldr	r0, [r7, #4]
 800f0f8:	f000 fa9e 	bl	800f638 <ip4_output_if>
 800f0fc:	4603      	mov	r3, r0
 800f0fe:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800f100:	e001      	b.n	800f106 <icmp_input+0x1ee>
      break;
 800f102:	bf00      	nop
 800f104:	e000      	b.n	800f108 <icmp_input+0x1f0>
      break;
 800f106:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800f108:	6878      	ldr	r0, [r7, #4]
 800f10a:	f7f6 ff65 	bl	8005fd8 <pbuf_free>
  return;
 800f10e:	e013      	b.n	800f138 <icmp_input+0x220>
    goto lenerr;
 800f110:	bf00      	nop
 800f112:	e002      	b.n	800f11a <icmp_input+0x202>
    goto lenerr;
 800f114:	bf00      	nop
 800f116:	e000      	b.n	800f11a <icmp_input+0x202>
        goto lenerr;
 800f118:	bf00      	nop
lenerr:
  pbuf_free(p);
 800f11a:	6878      	ldr	r0, [r7, #4]
 800f11c:	f7f6 ff5c 	bl	8005fd8 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800f120:	e00a      	b.n	800f138 <icmp_input+0x220>
        goto icmperr;
 800f122:	bf00      	nop
 800f124:	e004      	b.n	800f130 <icmp_input+0x218>
        goto icmperr;
 800f126:	bf00      	nop
 800f128:	e002      	b.n	800f130 <icmp_input+0x218>
          goto icmperr;
 800f12a:	bf00      	nop
 800f12c:	e000      	b.n	800f130 <icmp_input+0x218>
          goto icmperr;
 800f12e:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800f130:	6878      	ldr	r0, [r7, #4]
 800f132:	f7f6 ff51 	bl	8005fd8 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800f136:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800f138:	3728      	adds	r7, #40	; 0x28
 800f13a:	46bd      	mov	sp, r7
 800f13c:	bd80      	pop	{r7, pc}
 800f13e:	bf00      	nop
 800f140:	20004d18 	.word	0x20004d18
 800f144:	20004d2c 	.word	0x20004d2c
 800f148:	0801421c 	.word	0x0801421c
 800f14c:	08014254 	.word	0x08014254
 800f150:	0801428c 	.word	0x0801428c
 800f154:	080142b4 	.word	0x080142b4

0800f158 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800f158:	b580      	push	{r7, lr}
 800f15a:	b082      	sub	sp, #8
 800f15c:	af00      	add	r7, sp, #0
 800f15e:	6078      	str	r0, [r7, #4]
 800f160:	460b      	mov	r3, r1
 800f162:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800f164:	78fb      	ldrb	r3, [r7, #3]
 800f166:	461a      	mov	r2, r3
 800f168:	2103      	movs	r1, #3
 800f16a:	6878      	ldr	r0, [r7, #4]
 800f16c:	f000 f814 	bl	800f198 <icmp_send_response>
}
 800f170:	bf00      	nop
 800f172:	3708      	adds	r7, #8
 800f174:	46bd      	mov	sp, r7
 800f176:	bd80      	pop	{r7, pc}

0800f178 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800f178:	b580      	push	{r7, lr}
 800f17a:	b082      	sub	sp, #8
 800f17c:	af00      	add	r7, sp, #0
 800f17e:	6078      	str	r0, [r7, #4]
 800f180:	460b      	mov	r3, r1
 800f182:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800f184:	78fb      	ldrb	r3, [r7, #3]
 800f186:	461a      	mov	r2, r3
 800f188:	210b      	movs	r1, #11
 800f18a:	6878      	ldr	r0, [r7, #4]
 800f18c:	f000 f804 	bl	800f198 <icmp_send_response>
}
 800f190:	bf00      	nop
 800f192:	3708      	adds	r7, #8
 800f194:	46bd      	mov	sp, r7
 800f196:	bd80      	pop	{r7, pc}

0800f198 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800f198:	b580      	push	{r7, lr}
 800f19a:	b08c      	sub	sp, #48	; 0x30
 800f19c:	af04      	add	r7, sp, #16
 800f19e:	6078      	str	r0, [r7, #4]
 800f1a0:	460b      	mov	r3, r1
 800f1a2:	70fb      	strb	r3, [r7, #3]
 800f1a4:	4613      	mov	r3, r2
 800f1a6:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800f1a8:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f1ac:	2124      	movs	r1, #36	; 0x24
 800f1ae:	2022      	movs	r0, #34	; 0x22
 800f1b0:	f7f6 fc2e 	bl	8005a10 <pbuf_alloc>
 800f1b4:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800f1b6:	69fb      	ldr	r3, [r7, #28]
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	d056      	beq.n	800f26a <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800f1bc:	69fb      	ldr	r3, [r7, #28]
 800f1be:	895b      	ldrh	r3, [r3, #10]
 800f1c0:	2b23      	cmp	r3, #35	; 0x23
 800f1c2:	d806      	bhi.n	800f1d2 <icmp_send_response+0x3a>
 800f1c4:	4b2b      	ldr	r3, [pc, #172]	; (800f274 <icmp_send_response+0xdc>)
 800f1c6:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800f1ca:	492b      	ldr	r1, [pc, #172]	; (800f278 <icmp_send_response+0xe0>)
 800f1cc:	482b      	ldr	r0, [pc, #172]	; (800f27c <icmp_send_response+0xe4>)
 800f1ce:	f001 faab 	bl	8010728 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	685b      	ldr	r3, [r3, #4]
 800f1d6:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800f1d8:	69fb      	ldr	r3, [r7, #28]
 800f1da:	685b      	ldr	r3, [r3, #4]
 800f1dc:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800f1de:	697b      	ldr	r3, [r7, #20]
 800f1e0:	78fa      	ldrb	r2, [r7, #3]
 800f1e2:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800f1e4:	697b      	ldr	r3, [r7, #20]
 800f1e6:	78ba      	ldrb	r2, [r7, #2]
 800f1e8:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800f1ea:	697b      	ldr	r3, [r7, #20]
 800f1ec:	2200      	movs	r2, #0
 800f1ee:	711a      	strb	r2, [r3, #4]
 800f1f0:	2200      	movs	r2, #0
 800f1f2:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800f1f4:	697b      	ldr	r3, [r7, #20]
 800f1f6:	2200      	movs	r2, #0
 800f1f8:	719a      	strb	r2, [r3, #6]
 800f1fa:	2200      	movs	r2, #0
 800f1fc:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800f1fe:	69fb      	ldr	r3, [r7, #28]
 800f200:	685b      	ldr	r3, [r3, #4]
 800f202:	f103 0008 	add.w	r0, r3, #8
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	685b      	ldr	r3, [r3, #4]
 800f20a:	221c      	movs	r2, #28
 800f20c:	4619      	mov	r1, r3
 800f20e:	f001 fa75 	bl	80106fc <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800f212:	69bb      	ldr	r3, [r7, #24]
 800f214:	68db      	ldr	r3, [r3, #12]
 800f216:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800f218:	f107 030c 	add.w	r3, r7, #12
 800f21c:	4618      	mov	r0, r3
 800f21e:	f000 f82f 	bl	800f280 <ip4_route>
 800f222:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800f224:	693b      	ldr	r3, [r7, #16]
 800f226:	2b00      	cmp	r3, #0
 800f228:	d01b      	beq.n	800f262 <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800f22a:	697b      	ldr	r3, [r7, #20]
 800f22c:	2200      	movs	r2, #0
 800f22e:	709a      	strb	r2, [r3, #2]
 800f230:	2200      	movs	r2, #0
 800f232:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 800f234:	69fb      	ldr	r3, [r7, #28]
 800f236:	895b      	ldrh	r3, [r3, #10]
 800f238:	4619      	mov	r1, r3
 800f23a:	6978      	ldr	r0, [r7, #20]
 800f23c:	f7f5 fb55 	bl	80048ea <inet_chksum>
 800f240:	4603      	mov	r3, r0
 800f242:	461a      	mov	r2, r3
 800f244:	697b      	ldr	r3, [r7, #20]
 800f246:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800f248:	f107 020c 	add.w	r2, r7, #12
 800f24c:	693b      	ldr	r3, [r7, #16]
 800f24e:	9302      	str	r3, [sp, #8]
 800f250:	2301      	movs	r3, #1
 800f252:	9301      	str	r3, [sp, #4]
 800f254:	2300      	movs	r3, #0
 800f256:	9300      	str	r3, [sp, #0]
 800f258:	23ff      	movs	r3, #255	; 0xff
 800f25a:	2100      	movs	r1, #0
 800f25c:	69f8      	ldr	r0, [r7, #28]
 800f25e:	f000 f9eb 	bl	800f638 <ip4_output_if>
  }
  pbuf_free(q);
 800f262:	69f8      	ldr	r0, [r7, #28]
 800f264:	f7f6 feb8 	bl	8005fd8 <pbuf_free>
 800f268:	e000      	b.n	800f26c <icmp_send_response+0xd4>
    return;
 800f26a:	bf00      	nop
}
 800f26c:	3720      	adds	r7, #32
 800f26e:	46bd      	mov	sp, r7
 800f270:	bd80      	pop	{r7, pc}
 800f272:	bf00      	nop
 800f274:	0801421c 	.word	0x0801421c
 800f278:	080142e8 	.word	0x080142e8
 800f27c:	0801428c 	.word	0x0801428c

0800f280 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800f280:	b480      	push	{r7}
 800f282:	b085      	sub	sp, #20
 800f284:	af00      	add	r7, sp, #0
 800f286:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800f288:	4b33      	ldr	r3, [pc, #204]	; (800f358 <ip4_route+0xd8>)
 800f28a:	681b      	ldr	r3, [r3, #0]
 800f28c:	60fb      	str	r3, [r7, #12]
 800f28e:	e036      	b.n	800f2fe <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f296:	f003 0301 	and.w	r3, r3, #1
 800f29a:	b2db      	uxtb	r3, r3
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	d02b      	beq.n	800f2f8 <ip4_route+0x78>
 800f2a0:	68fb      	ldr	r3, [r7, #12]
 800f2a2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f2a6:	089b      	lsrs	r3, r3, #2
 800f2a8:	f003 0301 	and.w	r3, r3, #1
 800f2ac:	b2db      	uxtb	r3, r3
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	d022      	beq.n	800f2f8 <ip4_route+0x78>
 800f2b2:	68fb      	ldr	r3, [r7, #12]
 800f2b4:	3304      	adds	r3, #4
 800f2b6:	681b      	ldr	r3, [r3, #0]
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	d01d      	beq.n	800f2f8 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	681a      	ldr	r2, [r3, #0]
 800f2c0:	68fb      	ldr	r3, [r7, #12]
 800f2c2:	3304      	adds	r3, #4
 800f2c4:	681b      	ldr	r3, [r3, #0]
 800f2c6:	405a      	eors	r2, r3
 800f2c8:	68fb      	ldr	r3, [r7, #12]
 800f2ca:	3308      	adds	r3, #8
 800f2cc:	681b      	ldr	r3, [r3, #0]
 800f2ce:	4013      	ands	r3, r2
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	d101      	bne.n	800f2d8 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800f2d4:	68fb      	ldr	r3, [r7, #12]
 800f2d6:	e038      	b.n	800f34a <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800f2d8:	68fb      	ldr	r3, [r7, #12]
 800f2da:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f2de:	f003 0302 	and.w	r3, r3, #2
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	d108      	bne.n	800f2f8 <ip4_route+0x78>
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	681a      	ldr	r2, [r3, #0]
 800f2ea:	68fb      	ldr	r3, [r7, #12]
 800f2ec:	330c      	adds	r3, #12
 800f2ee:	681b      	ldr	r3, [r3, #0]
 800f2f0:	429a      	cmp	r2, r3
 800f2f2:	d101      	bne.n	800f2f8 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800f2f4:	68fb      	ldr	r3, [r7, #12]
 800f2f6:	e028      	b.n	800f34a <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800f2f8:	68fb      	ldr	r3, [r7, #12]
 800f2fa:	681b      	ldr	r3, [r3, #0]
 800f2fc:	60fb      	str	r3, [r7, #12]
 800f2fe:	68fb      	ldr	r3, [r7, #12]
 800f300:	2b00      	cmp	r3, #0
 800f302:	d1c5      	bne.n	800f290 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800f304:	4b15      	ldr	r3, [pc, #84]	; (800f35c <ip4_route+0xdc>)
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d01a      	beq.n	800f342 <ip4_route+0xc2>
 800f30c:	4b13      	ldr	r3, [pc, #76]	; (800f35c <ip4_route+0xdc>)
 800f30e:	681b      	ldr	r3, [r3, #0]
 800f310:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f314:	f003 0301 	and.w	r3, r3, #1
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d012      	beq.n	800f342 <ip4_route+0xc2>
 800f31c:	4b0f      	ldr	r3, [pc, #60]	; (800f35c <ip4_route+0xdc>)
 800f31e:	681b      	ldr	r3, [r3, #0]
 800f320:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f324:	f003 0304 	and.w	r3, r3, #4
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d00a      	beq.n	800f342 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800f32c:	4b0b      	ldr	r3, [pc, #44]	; (800f35c <ip4_route+0xdc>)
 800f32e:	681b      	ldr	r3, [r3, #0]
 800f330:	3304      	adds	r3, #4
 800f332:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800f334:	2b00      	cmp	r3, #0
 800f336:	d004      	beq.n	800f342 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	681b      	ldr	r3, [r3, #0]
 800f33c:	b2db      	uxtb	r3, r3
 800f33e:	2b7f      	cmp	r3, #127	; 0x7f
 800f340:	d101      	bne.n	800f346 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800f342:	2300      	movs	r3, #0
 800f344:	e001      	b.n	800f34a <ip4_route+0xca>
  }

  return netif_default;
 800f346:	4b05      	ldr	r3, [pc, #20]	; (800f35c <ip4_route+0xdc>)
 800f348:	681b      	ldr	r3, [r3, #0]
}
 800f34a:	4618      	mov	r0, r3
 800f34c:	3714      	adds	r7, #20
 800f34e:	46bd      	mov	sp, r7
 800f350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f354:	4770      	bx	lr
 800f356:	bf00      	nop
 800f358:	20007c48 	.word	0x20007c48
 800f35c:	20007c4c 	.word	0x20007c4c

0800f360 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800f360:	b580      	push	{r7, lr}
 800f362:	b082      	sub	sp, #8
 800f364:	af00      	add	r7, sp, #0
 800f366:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f36e:	f003 0301 	and.w	r3, r3, #1
 800f372:	b2db      	uxtb	r3, r3
 800f374:	2b00      	cmp	r3, #0
 800f376:	d016      	beq.n	800f3a6 <ip4_input_accept+0x46>
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	3304      	adds	r3, #4
 800f37c:	681b      	ldr	r3, [r3, #0]
 800f37e:	2b00      	cmp	r3, #0
 800f380:	d011      	beq.n	800f3a6 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800f382:	4b0b      	ldr	r3, [pc, #44]	; (800f3b0 <ip4_input_accept+0x50>)
 800f384:	695a      	ldr	r2, [r3, #20]
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	3304      	adds	r3, #4
 800f38a:	681b      	ldr	r3, [r3, #0]
 800f38c:	429a      	cmp	r2, r3
 800f38e:	d008      	beq.n	800f3a2 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800f390:	4b07      	ldr	r3, [pc, #28]	; (800f3b0 <ip4_input_accept+0x50>)
 800f392:	695b      	ldr	r3, [r3, #20]
 800f394:	6879      	ldr	r1, [r7, #4]
 800f396:	4618      	mov	r0, r3
 800f398:	f000 fa26 	bl	800f7e8 <ip4_addr_isbroadcast_u32>
 800f39c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	d001      	beq.n	800f3a6 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800f3a2:	2301      	movs	r3, #1
 800f3a4:	e000      	b.n	800f3a8 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800f3a6:	2300      	movs	r3, #0
}
 800f3a8:	4618      	mov	r0, r3
 800f3aa:	3708      	adds	r7, #8
 800f3ac:	46bd      	mov	sp, r7
 800f3ae:	bd80      	pop	{r7, pc}
 800f3b0:	20004d18 	.word	0x20004d18

0800f3b4 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800f3b4:	b580      	push	{r7, lr}
 800f3b6:	b088      	sub	sp, #32
 800f3b8:	af00      	add	r7, sp, #0
 800f3ba:	6078      	str	r0, [r7, #4]
 800f3bc:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 800f3be:	2301      	movs	r3, #1
 800f3c0:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	685b      	ldr	r3, [r3, #4]
 800f3c6:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 800f3c8:	69fb      	ldr	r3, [r7, #28]
 800f3ca:	781b      	ldrb	r3, [r3, #0]
 800f3cc:	091b      	lsrs	r3, r3, #4
 800f3ce:	b2db      	uxtb	r3, r3
 800f3d0:	2b04      	cmp	r3, #4
 800f3d2:	d004      	beq.n	800f3de <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800f3d4:	6878      	ldr	r0, [r7, #4]
 800f3d6:	f7f6 fdff 	bl	8005fd8 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800f3da:	2300      	movs	r3, #0
 800f3dc:	e123      	b.n	800f626 <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800f3de:	69fb      	ldr	r3, [r7, #28]
 800f3e0:	781b      	ldrb	r3, [r3, #0]
 800f3e2:	f003 030f 	and.w	r3, r3, #15
 800f3e6:	b2db      	uxtb	r3, r3
 800f3e8:	009b      	lsls	r3, r3, #2
 800f3ea:	b2db      	uxtb	r3, r3
 800f3ec:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800f3ee:	69fb      	ldr	r3, [r7, #28]
 800f3f0:	885b      	ldrh	r3, [r3, #2]
 800f3f2:	b29b      	uxth	r3, r3
 800f3f4:	4618      	mov	r0, r3
 800f3f6:	f7f5 f9ed 	bl	80047d4 <lwip_htons>
 800f3fa:	4603      	mov	r3, r0
 800f3fc:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	891b      	ldrh	r3, [r3, #8]
 800f402:	8a3a      	ldrh	r2, [r7, #16]
 800f404:	429a      	cmp	r2, r3
 800f406:	d204      	bcs.n	800f412 <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 800f408:	8a3b      	ldrh	r3, [r7, #16]
 800f40a:	4619      	mov	r1, r3
 800f40c:	6878      	ldr	r0, [r7, #4]
 800f40e:	f7f6 fc5d 	bl	8005ccc <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	895b      	ldrh	r3, [r3, #10]
 800f416:	8a7a      	ldrh	r2, [r7, #18]
 800f418:	429a      	cmp	r2, r3
 800f41a:	d807      	bhi.n	800f42c <ip4_input+0x78>
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	891b      	ldrh	r3, [r3, #8]
 800f420:	8a3a      	ldrh	r2, [r7, #16]
 800f422:	429a      	cmp	r2, r3
 800f424:	d802      	bhi.n	800f42c <ip4_input+0x78>
 800f426:	8a7b      	ldrh	r3, [r7, #18]
 800f428:	2b13      	cmp	r3, #19
 800f42a:	d804      	bhi.n	800f436 <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800f42c:	6878      	ldr	r0, [r7, #4]
 800f42e:	f7f6 fdd3 	bl	8005fd8 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800f432:	2300      	movs	r3, #0
 800f434:	e0f7      	b.n	800f626 <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800f436:	69fb      	ldr	r3, [r7, #28]
 800f438:	691b      	ldr	r3, [r3, #16]
 800f43a:	4a7d      	ldr	r2, [pc, #500]	; (800f630 <ip4_input+0x27c>)
 800f43c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800f43e:	69fb      	ldr	r3, [r7, #28]
 800f440:	68db      	ldr	r3, [r3, #12]
 800f442:	4a7b      	ldr	r2, [pc, #492]	; (800f630 <ip4_input+0x27c>)
 800f444:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800f446:	4b7a      	ldr	r3, [pc, #488]	; (800f630 <ip4_input+0x27c>)
 800f448:	695b      	ldr	r3, [r3, #20]
 800f44a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f44e:	2be0      	cmp	r3, #224	; 0xe0
 800f450:	d112      	bne.n	800f478 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800f452:	683b      	ldr	r3, [r7, #0]
 800f454:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f458:	f003 0301 	and.w	r3, r3, #1
 800f45c:	b2db      	uxtb	r3, r3
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d007      	beq.n	800f472 <ip4_input+0xbe>
 800f462:	683b      	ldr	r3, [r7, #0]
 800f464:	3304      	adds	r3, #4
 800f466:	681b      	ldr	r3, [r3, #0]
 800f468:	2b00      	cmp	r3, #0
 800f46a:	d002      	beq.n	800f472 <ip4_input+0xbe>
      netif = inp;
 800f46c:	683b      	ldr	r3, [r7, #0]
 800f46e:	61bb      	str	r3, [r7, #24]
 800f470:	e02a      	b.n	800f4c8 <ip4_input+0x114>
    } else {
      netif = NULL;
 800f472:	2300      	movs	r3, #0
 800f474:	61bb      	str	r3, [r7, #24]
 800f476:	e027      	b.n	800f4c8 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800f478:	6838      	ldr	r0, [r7, #0]
 800f47a:	f7ff ff71 	bl	800f360 <ip4_input_accept>
 800f47e:	4603      	mov	r3, r0
 800f480:	2b00      	cmp	r3, #0
 800f482:	d002      	beq.n	800f48a <ip4_input+0xd6>
      netif = inp;
 800f484:	683b      	ldr	r3, [r7, #0]
 800f486:	61bb      	str	r3, [r7, #24]
 800f488:	e01e      	b.n	800f4c8 <ip4_input+0x114>
    } else {
      netif = NULL;
 800f48a:	2300      	movs	r3, #0
 800f48c:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800f48e:	4b68      	ldr	r3, [pc, #416]	; (800f630 <ip4_input+0x27c>)
 800f490:	695b      	ldr	r3, [r3, #20]
 800f492:	b2db      	uxtb	r3, r3
 800f494:	2b7f      	cmp	r3, #127	; 0x7f
 800f496:	d017      	beq.n	800f4c8 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800f498:	4b66      	ldr	r3, [pc, #408]	; (800f634 <ip4_input+0x280>)
 800f49a:	681b      	ldr	r3, [r3, #0]
 800f49c:	61bb      	str	r3, [r7, #24]
 800f49e:	e00e      	b.n	800f4be <ip4_input+0x10a>
          if (netif == inp) {
 800f4a0:	69ba      	ldr	r2, [r7, #24]
 800f4a2:	683b      	ldr	r3, [r7, #0]
 800f4a4:	429a      	cmp	r2, r3
 800f4a6:	d006      	beq.n	800f4b6 <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800f4a8:	69b8      	ldr	r0, [r7, #24]
 800f4aa:	f7ff ff59 	bl	800f360 <ip4_input_accept>
 800f4ae:	4603      	mov	r3, r0
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d108      	bne.n	800f4c6 <ip4_input+0x112>
 800f4b4:	e000      	b.n	800f4b8 <ip4_input+0x104>
            continue;
 800f4b6:	bf00      	nop
        NETIF_FOREACH(netif) {
 800f4b8:	69bb      	ldr	r3, [r7, #24]
 800f4ba:	681b      	ldr	r3, [r3, #0]
 800f4bc:	61bb      	str	r3, [r7, #24]
 800f4be:	69bb      	ldr	r3, [r7, #24]
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	d1ed      	bne.n	800f4a0 <ip4_input+0xec>
 800f4c4:	e000      	b.n	800f4c8 <ip4_input+0x114>
            break;
 800f4c6:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 800f4c8:	69bb      	ldr	r3, [r7, #24]
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d111      	bne.n	800f4f2 <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 800f4ce:	69fb      	ldr	r3, [r7, #28]
 800f4d0:	7a5b      	ldrb	r3, [r3, #9]
 800f4d2:	2b11      	cmp	r3, #17
 800f4d4:	d10d      	bne.n	800f4f2 <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 800f4d6:	8a7b      	ldrh	r3, [r7, #18]
 800f4d8:	69fa      	ldr	r2, [r7, #28]
 800f4da:	4413      	add	r3, r2
 800f4dc:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 800f4de:	68fb      	ldr	r3, [r7, #12]
 800f4e0:	885b      	ldrh	r3, [r3, #2]
 800f4e2:	b29b      	uxth	r3, r3
 800f4e4:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 800f4e8:	d103      	bne.n	800f4f2 <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 800f4ea:	683b      	ldr	r3, [r7, #0]
 800f4ec:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 800f4ee:	2300      	movs	r3, #0
 800f4f0:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 800f4f2:	697b      	ldr	r3, [r7, #20]
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d017      	beq.n	800f528 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 800f4f8:	4b4d      	ldr	r3, [pc, #308]	; (800f630 <ip4_input+0x27c>)
 800f4fa:	691b      	ldr	r3, [r3, #16]
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	d013      	beq.n	800f528 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800f500:	4b4b      	ldr	r3, [pc, #300]	; (800f630 <ip4_input+0x27c>)
 800f502:	691b      	ldr	r3, [r3, #16]
 800f504:	6839      	ldr	r1, [r7, #0]
 800f506:	4618      	mov	r0, r3
 800f508:	f000 f96e 	bl	800f7e8 <ip4_addr_isbroadcast_u32>
 800f50c:	4603      	mov	r3, r0
 800f50e:	2b00      	cmp	r3, #0
 800f510:	d105      	bne.n	800f51e <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800f512:	4b47      	ldr	r3, [pc, #284]	; (800f630 <ip4_input+0x27c>)
 800f514:	691b      	ldr	r3, [r3, #16]
 800f516:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800f51a:	2be0      	cmp	r3, #224	; 0xe0
 800f51c:	d104      	bne.n	800f528 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800f51e:	6878      	ldr	r0, [r7, #4]
 800f520:	f7f6 fd5a 	bl	8005fd8 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800f524:	2300      	movs	r3, #0
 800f526:	e07e      	b.n	800f626 <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800f528:	69bb      	ldr	r3, [r7, #24]
 800f52a:	2b00      	cmp	r3, #0
 800f52c:	d104      	bne.n	800f538 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800f52e:	6878      	ldr	r0, [r7, #4]
 800f530:	f7f6 fd52 	bl	8005fd8 <pbuf_free>
    return ERR_OK;
 800f534:	2300      	movs	r3, #0
 800f536:	e076      	b.n	800f626 <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800f538:	69fb      	ldr	r3, [r7, #28]
 800f53a:	88db      	ldrh	r3, [r3, #6]
 800f53c:	b29b      	uxth	r3, r3
 800f53e:	461a      	mov	r2, r3
 800f540:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800f544:	4013      	ands	r3, r2
 800f546:	2b00      	cmp	r3, #0
 800f548:	d00b      	beq.n	800f562 <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800f54a:	6878      	ldr	r0, [r7, #4]
 800f54c:	f000 fc92 	bl	800fe74 <ip4_reass>
 800f550:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	2b00      	cmp	r3, #0
 800f556:	d101      	bne.n	800f55c <ip4_input+0x1a8>
      return ERR_OK;
 800f558:	2300      	movs	r3, #0
 800f55a:	e064      	b.n	800f626 <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	685b      	ldr	r3, [r3, #4]
 800f560:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800f562:	4a33      	ldr	r2, [pc, #204]	; (800f630 <ip4_input+0x27c>)
 800f564:	69bb      	ldr	r3, [r7, #24]
 800f566:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800f568:	4a31      	ldr	r2, [pc, #196]	; (800f630 <ip4_input+0x27c>)
 800f56a:	683b      	ldr	r3, [r7, #0]
 800f56c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800f56e:	4a30      	ldr	r2, [pc, #192]	; (800f630 <ip4_input+0x27c>)
 800f570:	69fb      	ldr	r3, [r7, #28]
 800f572:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800f574:	69fb      	ldr	r3, [r7, #28]
 800f576:	781b      	ldrb	r3, [r3, #0]
 800f578:	f003 030f 	and.w	r3, r3, #15
 800f57c:	b2db      	uxtb	r3, r3
 800f57e:	009b      	lsls	r3, r3, #2
 800f580:	b2db      	uxtb	r3, r3
 800f582:	b29a      	uxth	r2, r3
 800f584:	4b2a      	ldr	r3, [pc, #168]	; (800f630 <ip4_input+0x27c>)
 800f586:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800f588:	8a7b      	ldrh	r3, [r7, #18]
 800f58a:	4619      	mov	r1, r3
 800f58c:	6878      	ldr	r0, [r7, #4]
 800f58e:	f7f6 fc9d 	bl	8005ecc <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800f592:	69fb      	ldr	r3, [r7, #28]
 800f594:	7a5b      	ldrb	r3, [r3, #9]
 800f596:	2b11      	cmp	r3, #17
 800f598:	d006      	beq.n	800f5a8 <ip4_input+0x1f4>
 800f59a:	2b11      	cmp	r3, #17
 800f59c:	dc13      	bgt.n	800f5c6 <ip4_input+0x212>
 800f59e:	2b01      	cmp	r3, #1
 800f5a0:	d00c      	beq.n	800f5bc <ip4_input+0x208>
 800f5a2:	2b06      	cmp	r3, #6
 800f5a4:	d005      	beq.n	800f5b2 <ip4_input+0x1fe>
 800f5a6:	e00e      	b.n	800f5c6 <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800f5a8:	6839      	ldr	r1, [r7, #0]
 800f5aa:	6878      	ldr	r0, [r7, #4]
 800f5ac:	f7fc fac4 	bl	800bb38 <udp_input>
        break;
 800f5b0:	e026      	b.n	800f600 <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800f5b2:	6839      	ldr	r1, [r7, #0]
 800f5b4:	6878      	ldr	r0, [r7, #4]
 800f5b6:	f7f8 fb47 	bl	8007c48 <tcp_input>
        break;
 800f5ba:	e021      	b.n	800f600 <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800f5bc:	6839      	ldr	r1, [r7, #0]
 800f5be:	6878      	ldr	r0, [r7, #4]
 800f5c0:	f7ff fcaa 	bl	800ef18 <icmp_input>
        break;
 800f5c4:	e01c      	b.n	800f600 <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800f5c6:	4b1a      	ldr	r3, [pc, #104]	; (800f630 <ip4_input+0x27c>)
 800f5c8:	695b      	ldr	r3, [r3, #20]
 800f5ca:	69b9      	ldr	r1, [r7, #24]
 800f5cc:	4618      	mov	r0, r3
 800f5ce:	f000 f90b 	bl	800f7e8 <ip4_addr_isbroadcast_u32>
 800f5d2:	4603      	mov	r3, r0
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	d10f      	bne.n	800f5f8 <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800f5d8:	4b15      	ldr	r3, [pc, #84]	; (800f630 <ip4_input+0x27c>)
 800f5da:	695b      	ldr	r3, [r3, #20]
 800f5dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800f5e0:	2be0      	cmp	r3, #224	; 0xe0
 800f5e2:	d009      	beq.n	800f5f8 <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800f5e4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f5e8:	4619      	mov	r1, r3
 800f5ea:	6878      	ldr	r0, [r7, #4]
 800f5ec:	f7f6 fce1 	bl	8005fb2 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800f5f0:	2102      	movs	r1, #2
 800f5f2:	6878      	ldr	r0, [r7, #4]
 800f5f4:	f7ff fdb0 	bl	800f158 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800f5f8:	6878      	ldr	r0, [r7, #4]
 800f5fa:	f7f6 fced 	bl	8005fd8 <pbuf_free>
        break;
 800f5fe:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800f600:	4b0b      	ldr	r3, [pc, #44]	; (800f630 <ip4_input+0x27c>)
 800f602:	2200      	movs	r2, #0
 800f604:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800f606:	4b0a      	ldr	r3, [pc, #40]	; (800f630 <ip4_input+0x27c>)
 800f608:	2200      	movs	r2, #0
 800f60a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800f60c:	4b08      	ldr	r3, [pc, #32]	; (800f630 <ip4_input+0x27c>)
 800f60e:	2200      	movs	r2, #0
 800f610:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800f612:	4b07      	ldr	r3, [pc, #28]	; (800f630 <ip4_input+0x27c>)
 800f614:	2200      	movs	r2, #0
 800f616:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800f618:	4b05      	ldr	r3, [pc, #20]	; (800f630 <ip4_input+0x27c>)
 800f61a:	2200      	movs	r2, #0
 800f61c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800f61e:	4b04      	ldr	r3, [pc, #16]	; (800f630 <ip4_input+0x27c>)
 800f620:	2200      	movs	r2, #0
 800f622:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800f624:	2300      	movs	r3, #0
}
 800f626:	4618      	mov	r0, r3
 800f628:	3720      	adds	r7, #32
 800f62a:	46bd      	mov	sp, r7
 800f62c:	bd80      	pop	{r7, pc}
 800f62e:	bf00      	nop
 800f630:	20004d18 	.word	0x20004d18
 800f634:	20007c48 	.word	0x20007c48

0800f638 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800f638:	b580      	push	{r7, lr}
 800f63a:	b08a      	sub	sp, #40	; 0x28
 800f63c:	af04      	add	r7, sp, #16
 800f63e:	60f8      	str	r0, [r7, #12]
 800f640:	60b9      	str	r1, [r7, #8]
 800f642:	607a      	str	r2, [r7, #4]
 800f644:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800f646:	68bb      	ldr	r3, [r7, #8]
 800f648:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	d009      	beq.n	800f664 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800f650:	68bb      	ldr	r3, [r7, #8]
 800f652:	2b00      	cmp	r3, #0
 800f654:	d003      	beq.n	800f65e <ip4_output_if+0x26>
 800f656:	68bb      	ldr	r3, [r7, #8]
 800f658:	681b      	ldr	r3, [r3, #0]
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d102      	bne.n	800f664 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800f65e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f660:	3304      	adds	r3, #4
 800f662:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800f664:	78fa      	ldrb	r2, [r7, #3]
 800f666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f668:	9302      	str	r3, [sp, #8]
 800f66a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800f66e:	9301      	str	r3, [sp, #4]
 800f670:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f674:	9300      	str	r3, [sp, #0]
 800f676:	4613      	mov	r3, r2
 800f678:	687a      	ldr	r2, [r7, #4]
 800f67a:	6979      	ldr	r1, [r7, #20]
 800f67c:	68f8      	ldr	r0, [r7, #12]
 800f67e:	f000 f805 	bl	800f68c <ip4_output_if_src>
 800f682:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800f684:	4618      	mov	r0, r3
 800f686:	3718      	adds	r7, #24
 800f688:	46bd      	mov	sp, r7
 800f68a:	bd80      	pop	{r7, pc}

0800f68c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800f68c:	b580      	push	{r7, lr}
 800f68e:	b088      	sub	sp, #32
 800f690:	af00      	add	r7, sp, #0
 800f692:	60f8      	str	r0, [r7, #12]
 800f694:	60b9      	str	r1, [r7, #8]
 800f696:	607a      	str	r2, [r7, #4]
 800f698:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800f69a:	68fb      	ldr	r3, [r7, #12]
 800f69c:	7b9b      	ldrb	r3, [r3, #14]
 800f69e:	2b01      	cmp	r3, #1
 800f6a0:	d006      	beq.n	800f6b0 <ip4_output_if_src+0x24>
 800f6a2:	4b4b      	ldr	r3, [pc, #300]	; (800f7d0 <ip4_output_if_src+0x144>)
 800f6a4:	f44f 7255 	mov.w	r2, #852	; 0x354
 800f6a8:	494a      	ldr	r1, [pc, #296]	; (800f7d4 <ip4_output_if_src+0x148>)
 800f6aa:	484b      	ldr	r0, [pc, #300]	; (800f7d8 <ip4_output_if_src+0x14c>)
 800f6ac:	f001 f83c 	bl	8010728 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	d060      	beq.n	800f778 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800f6b6:	2314      	movs	r3, #20
 800f6b8:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800f6ba:	2114      	movs	r1, #20
 800f6bc:	68f8      	ldr	r0, [r7, #12]
 800f6be:	f7f6 fbf5 	bl	8005eac <pbuf_add_header>
 800f6c2:	4603      	mov	r3, r0
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	d002      	beq.n	800f6ce <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800f6c8:	f06f 0301 	mvn.w	r3, #1
 800f6cc:	e07c      	b.n	800f7c8 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800f6ce:	68fb      	ldr	r3, [r7, #12]
 800f6d0:	685b      	ldr	r3, [r3, #4]
 800f6d2:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800f6d4:	68fb      	ldr	r3, [r7, #12]
 800f6d6:	895b      	ldrh	r3, [r3, #10]
 800f6d8:	2b13      	cmp	r3, #19
 800f6da:	d806      	bhi.n	800f6ea <ip4_output_if_src+0x5e>
 800f6dc:	4b3c      	ldr	r3, [pc, #240]	; (800f7d0 <ip4_output_if_src+0x144>)
 800f6de:	f44f 7262 	mov.w	r2, #904	; 0x388
 800f6e2:	493e      	ldr	r1, [pc, #248]	; (800f7dc <ip4_output_if_src+0x150>)
 800f6e4:	483c      	ldr	r0, [pc, #240]	; (800f7d8 <ip4_output_if_src+0x14c>)
 800f6e6:	f001 f81f 	bl	8010728 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800f6ea:	69fb      	ldr	r3, [r7, #28]
 800f6ec:	78fa      	ldrb	r2, [r7, #3]
 800f6ee:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800f6f0:	69fb      	ldr	r3, [r7, #28]
 800f6f2:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800f6f6:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	681a      	ldr	r2, [r3, #0]
 800f6fc:	69fb      	ldr	r3, [r7, #28]
 800f6fe:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800f700:	8b7b      	ldrh	r3, [r7, #26]
 800f702:	089b      	lsrs	r3, r3, #2
 800f704:	b29b      	uxth	r3, r3
 800f706:	b2db      	uxtb	r3, r3
 800f708:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f70c:	b2da      	uxtb	r2, r3
 800f70e:	69fb      	ldr	r3, [r7, #28]
 800f710:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800f712:	69fb      	ldr	r3, [r7, #28]
 800f714:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800f718:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800f71a:	68fb      	ldr	r3, [r7, #12]
 800f71c:	891b      	ldrh	r3, [r3, #8]
 800f71e:	4618      	mov	r0, r3
 800f720:	f7f5 f858 	bl	80047d4 <lwip_htons>
 800f724:	4603      	mov	r3, r0
 800f726:	461a      	mov	r2, r3
 800f728:	69fb      	ldr	r3, [r7, #28]
 800f72a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800f72c:	69fb      	ldr	r3, [r7, #28]
 800f72e:	2200      	movs	r2, #0
 800f730:	719a      	strb	r2, [r3, #6]
 800f732:	2200      	movs	r2, #0
 800f734:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800f736:	4b2a      	ldr	r3, [pc, #168]	; (800f7e0 <ip4_output_if_src+0x154>)
 800f738:	881b      	ldrh	r3, [r3, #0]
 800f73a:	4618      	mov	r0, r3
 800f73c:	f7f5 f84a 	bl	80047d4 <lwip_htons>
 800f740:	4603      	mov	r3, r0
 800f742:	461a      	mov	r2, r3
 800f744:	69fb      	ldr	r3, [r7, #28]
 800f746:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800f748:	4b25      	ldr	r3, [pc, #148]	; (800f7e0 <ip4_output_if_src+0x154>)
 800f74a:	881b      	ldrh	r3, [r3, #0]
 800f74c:	3301      	adds	r3, #1
 800f74e:	b29a      	uxth	r2, r3
 800f750:	4b23      	ldr	r3, [pc, #140]	; (800f7e0 <ip4_output_if_src+0x154>)
 800f752:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800f754:	68bb      	ldr	r3, [r7, #8]
 800f756:	2b00      	cmp	r3, #0
 800f758:	d104      	bne.n	800f764 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800f75a:	4b22      	ldr	r3, [pc, #136]	; (800f7e4 <ip4_output_if_src+0x158>)
 800f75c:	681a      	ldr	r2, [r3, #0]
 800f75e:	69fb      	ldr	r3, [r7, #28]
 800f760:	60da      	str	r2, [r3, #12]
 800f762:	e003      	b.n	800f76c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800f764:	68bb      	ldr	r3, [r7, #8]
 800f766:	681a      	ldr	r2, [r3, #0]
 800f768:	69fb      	ldr	r3, [r7, #28]
 800f76a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800f76c:	69fb      	ldr	r3, [r7, #28]
 800f76e:	2200      	movs	r2, #0
 800f770:	729a      	strb	r2, [r3, #10]
 800f772:	2200      	movs	r2, #0
 800f774:	72da      	strb	r2, [r3, #11]
 800f776:	e00f      	b.n	800f798 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800f778:	68fb      	ldr	r3, [r7, #12]
 800f77a:	895b      	ldrh	r3, [r3, #10]
 800f77c:	2b13      	cmp	r3, #19
 800f77e:	d802      	bhi.n	800f786 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800f780:	f06f 0301 	mvn.w	r3, #1
 800f784:	e020      	b.n	800f7c8 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800f786:	68fb      	ldr	r3, [r7, #12]
 800f788:	685b      	ldr	r3, [r3, #4]
 800f78a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800f78c:	69fb      	ldr	r3, [r7, #28]
 800f78e:	691b      	ldr	r3, [r3, #16]
 800f790:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800f792:	f107 0314 	add.w	r3, r7, #20
 800f796:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800f798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f79a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	d00c      	beq.n	800f7ba <ip4_output_if_src+0x12e>
 800f7a0:	68fb      	ldr	r3, [r7, #12]
 800f7a2:	891a      	ldrh	r2, [r3, #8]
 800f7a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f7a8:	429a      	cmp	r2, r3
 800f7aa:	d906      	bls.n	800f7ba <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800f7ac:	687a      	ldr	r2, [r7, #4]
 800f7ae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f7b0:	68f8      	ldr	r0, [r7, #12]
 800f7b2:	f000 fd53 	bl	801025c <ip4_frag>
 800f7b6:	4603      	mov	r3, r0
 800f7b8:	e006      	b.n	800f7c8 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800f7ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7bc:	695b      	ldr	r3, [r3, #20]
 800f7be:	687a      	ldr	r2, [r7, #4]
 800f7c0:	68f9      	ldr	r1, [r7, #12]
 800f7c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f7c4:	4798      	blx	r3
 800f7c6:	4603      	mov	r3, r0
}
 800f7c8:	4618      	mov	r0, r3
 800f7ca:	3720      	adds	r7, #32
 800f7cc:	46bd      	mov	sp, r7
 800f7ce:	bd80      	pop	{r7, pc}
 800f7d0:	08014314 	.word	0x08014314
 800f7d4:	08014348 	.word	0x08014348
 800f7d8:	08014354 	.word	0x08014354
 800f7dc:	0801437c 	.word	0x0801437c
 800f7e0:	20007dda 	.word	0x20007dda
 800f7e4:	0801476c 	.word	0x0801476c

0800f7e8 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800f7e8:	b480      	push	{r7}
 800f7ea:	b085      	sub	sp, #20
 800f7ec:	af00      	add	r7, sp, #0
 800f7ee:	6078      	str	r0, [r7, #4]
 800f7f0:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7fc:	d002      	beq.n	800f804 <ip4_addr_isbroadcast_u32+0x1c>
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	2b00      	cmp	r3, #0
 800f802:	d101      	bne.n	800f808 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800f804:	2301      	movs	r3, #1
 800f806:	e02a      	b.n	800f85e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800f808:	683b      	ldr	r3, [r7, #0]
 800f80a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f80e:	f003 0302 	and.w	r3, r3, #2
 800f812:	2b00      	cmp	r3, #0
 800f814:	d101      	bne.n	800f81a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800f816:	2300      	movs	r3, #0
 800f818:	e021      	b.n	800f85e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800f81a:	683b      	ldr	r3, [r7, #0]
 800f81c:	3304      	adds	r3, #4
 800f81e:	681b      	ldr	r3, [r3, #0]
 800f820:	687a      	ldr	r2, [r7, #4]
 800f822:	429a      	cmp	r2, r3
 800f824:	d101      	bne.n	800f82a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800f826:	2300      	movs	r3, #0
 800f828:	e019      	b.n	800f85e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800f82a:	68fa      	ldr	r2, [r7, #12]
 800f82c:	683b      	ldr	r3, [r7, #0]
 800f82e:	3304      	adds	r3, #4
 800f830:	681b      	ldr	r3, [r3, #0]
 800f832:	405a      	eors	r2, r3
 800f834:	683b      	ldr	r3, [r7, #0]
 800f836:	3308      	adds	r3, #8
 800f838:	681b      	ldr	r3, [r3, #0]
 800f83a:	4013      	ands	r3, r2
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d10d      	bne.n	800f85c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800f840:	683b      	ldr	r3, [r7, #0]
 800f842:	3308      	adds	r3, #8
 800f844:	681b      	ldr	r3, [r3, #0]
 800f846:	43da      	mvns	r2, r3
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800f84c:	683b      	ldr	r3, [r7, #0]
 800f84e:	3308      	adds	r3, #8
 800f850:	681b      	ldr	r3, [r3, #0]
 800f852:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800f854:	429a      	cmp	r2, r3
 800f856:	d101      	bne.n	800f85c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800f858:	2301      	movs	r3, #1
 800f85a:	e000      	b.n	800f85e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800f85c:	2300      	movs	r3, #0
  }
}
 800f85e:	4618      	mov	r0, r3
 800f860:	3714      	adds	r7, #20
 800f862:	46bd      	mov	sp, r7
 800f864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f868:	4770      	bx	lr
	...

0800f86c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800f86c:	b580      	push	{r7, lr}
 800f86e:	b084      	sub	sp, #16
 800f870:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800f872:	2300      	movs	r3, #0
 800f874:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800f876:	4b12      	ldr	r3, [pc, #72]	; (800f8c0 <ip_reass_tmr+0x54>)
 800f878:	681b      	ldr	r3, [r3, #0]
 800f87a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800f87c:	e018      	b.n	800f8b0 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800f87e:	68fb      	ldr	r3, [r7, #12]
 800f880:	7fdb      	ldrb	r3, [r3, #31]
 800f882:	2b00      	cmp	r3, #0
 800f884:	d00b      	beq.n	800f89e <ip_reass_tmr+0x32>
      r->timer--;
 800f886:	68fb      	ldr	r3, [r7, #12]
 800f888:	7fdb      	ldrb	r3, [r3, #31]
 800f88a:	3b01      	subs	r3, #1
 800f88c:	b2da      	uxtb	r2, r3
 800f88e:	68fb      	ldr	r3, [r7, #12]
 800f890:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800f892:	68fb      	ldr	r3, [r7, #12]
 800f894:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800f896:	68fb      	ldr	r3, [r7, #12]
 800f898:	681b      	ldr	r3, [r3, #0]
 800f89a:	60fb      	str	r3, [r7, #12]
 800f89c:	e008      	b.n	800f8b0 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800f89e:	68fb      	ldr	r3, [r7, #12]
 800f8a0:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800f8a2:	68fb      	ldr	r3, [r7, #12]
 800f8a4:	681b      	ldr	r3, [r3, #0]
 800f8a6:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800f8a8:	68b9      	ldr	r1, [r7, #8]
 800f8aa:	6878      	ldr	r0, [r7, #4]
 800f8ac:	f000 f80a 	bl	800f8c4 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800f8b0:	68fb      	ldr	r3, [r7, #12]
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d1e3      	bne.n	800f87e <ip_reass_tmr+0x12>
    }
  }
}
 800f8b6:	bf00      	nop
 800f8b8:	bf00      	nop
 800f8ba:	3710      	adds	r7, #16
 800f8bc:	46bd      	mov	sp, r7
 800f8be:	bd80      	pop	{r7, pc}
 800f8c0:	20007ddc 	.word	0x20007ddc

0800f8c4 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800f8c4:	b580      	push	{r7, lr}
 800f8c6:	b088      	sub	sp, #32
 800f8c8:	af00      	add	r7, sp, #0
 800f8ca:	6078      	str	r0, [r7, #4]
 800f8cc:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800f8ce:	2300      	movs	r3, #0
 800f8d0:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800f8d2:	683a      	ldr	r2, [r7, #0]
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	429a      	cmp	r2, r3
 800f8d8:	d105      	bne.n	800f8e6 <ip_reass_free_complete_datagram+0x22>
 800f8da:	4b45      	ldr	r3, [pc, #276]	; (800f9f0 <ip_reass_free_complete_datagram+0x12c>)
 800f8dc:	22ab      	movs	r2, #171	; 0xab
 800f8de:	4945      	ldr	r1, [pc, #276]	; (800f9f4 <ip_reass_free_complete_datagram+0x130>)
 800f8e0:	4845      	ldr	r0, [pc, #276]	; (800f9f8 <ip_reass_free_complete_datagram+0x134>)
 800f8e2:	f000 ff21 	bl	8010728 <iprintf>
  if (prev != NULL) {
 800f8e6:	683b      	ldr	r3, [r7, #0]
 800f8e8:	2b00      	cmp	r3, #0
 800f8ea:	d00a      	beq.n	800f902 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800f8ec:	683b      	ldr	r3, [r7, #0]
 800f8ee:	681b      	ldr	r3, [r3, #0]
 800f8f0:	687a      	ldr	r2, [r7, #4]
 800f8f2:	429a      	cmp	r2, r3
 800f8f4:	d005      	beq.n	800f902 <ip_reass_free_complete_datagram+0x3e>
 800f8f6:	4b3e      	ldr	r3, [pc, #248]	; (800f9f0 <ip_reass_free_complete_datagram+0x12c>)
 800f8f8:	22ad      	movs	r2, #173	; 0xad
 800f8fa:	4940      	ldr	r1, [pc, #256]	; (800f9fc <ip_reass_free_complete_datagram+0x138>)
 800f8fc:	483e      	ldr	r0, [pc, #248]	; (800f9f8 <ip_reass_free_complete_datagram+0x134>)
 800f8fe:	f000 ff13 	bl	8010728 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	685b      	ldr	r3, [r3, #4]
 800f906:	685b      	ldr	r3, [r3, #4]
 800f908:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800f90a:	697b      	ldr	r3, [r7, #20]
 800f90c:	889b      	ldrh	r3, [r3, #4]
 800f90e:	b29b      	uxth	r3, r3
 800f910:	2b00      	cmp	r3, #0
 800f912:	d12a      	bne.n	800f96a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	685b      	ldr	r3, [r3, #4]
 800f918:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800f91a:	697b      	ldr	r3, [r7, #20]
 800f91c:	681a      	ldr	r2, [r3, #0]
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800f922:	69bb      	ldr	r3, [r7, #24]
 800f924:	6858      	ldr	r0, [r3, #4]
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	3308      	adds	r3, #8
 800f92a:	2214      	movs	r2, #20
 800f92c:	4619      	mov	r1, r3
 800f92e:	f000 fee5 	bl	80106fc <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800f932:	2101      	movs	r1, #1
 800f934:	69b8      	ldr	r0, [r7, #24]
 800f936:	f7ff fc1f 	bl	800f178 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800f93a:	69b8      	ldr	r0, [r7, #24]
 800f93c:	f7f6 fbd4 	bl	80060e8 <pbuf_clen>
 800f940:	4603      	mov	r3, r0
 800f942:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800f944:	8bfa      	ldrh	r2, [r7, #30]
 800f946:	8a7b      	ldrh	r3, [r7, #18]
 800f948:	4413      	add	r3, r2
 800f94a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f94e:	db05      	blt.n	800f95c <ip_reass_free_complete_datagram+0x98>
 800f950:	4b27      	ldr	r3, [pc, #156]	; (800f9f0 <ip_reass_free_complete_datagram+0x12c>)
 800f952:	22bc      	movs	r2, #188	; 0xbc
 800f954:	492a      	ldr	r1, [pc, #168]	; (800fa00 <ip_reass_free_complete_datagram+0x13c>)
 800f956:	4828      	ldr	r0, [pc, #160]	; (800f9f8 <ip_reass_free_complete_datagram+0x134>)
 800f958:	f000 fee6 	bl	8010728 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800f95c:	8bfa      	ldrh	r2, [r7, #30]
 800f95e:	8a7b      	ldrh	r3, [r7, #18]
 800f960:	4413      	add	r3, r2
 800f962:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800f964:	69b8      	ldr	r0, [r7, #24]
 800f966:	f7f6 fb37 	bl	8005fd8 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	685b      	ldr	r3, [r3, #4]
 800f96e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800f970:	e01f      	b.n	800f9b2 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800f972:	69bb      	ldr	r3, [r7, #24]
 800f974:	685b      	ldr	r3, [r3, #4]
 800f976:	617b      	str	r3, [r7, #20]
    pcur = p;
 800f978:	69bb      	ldr	r3, [r7, #24]
 800f97a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800f97c:	697b      	ldr	r3, [r7, #20]
 800f97e:	681b      	ldr	r3, [r3, #0]
 800f980:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800f982:	68f8      	ldr	r0, [r7, #12]
 800f984:	f7f6 fbb0 	bl	80060e8 <pbuf_clen>
 800f988:	4603      	mov	r3, r0
 800f98a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800f98c:	8bfa      	ldrh	r2, [r7, #30]
 800f98e:	8a7b      	ldrh	r3, [r7, #18]
 800f990:	4413      	add	r3, r2
 800f992:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f996:	db05      	blt.n	800f9a4 <ip_reass_free_complete_datagram+0xe0>
 800f998:	4b15      	ldr	r3, [pc, #84]	; (800f9f0 <ip_reass_free_complete_datagram+0x12c>)
 800f99a:	22cc      	movs	r2, #204	; 0xcc
 800f99c:	4918      	ldr	r1, [pc, #96]	; (800fa00 <ip_reass_free_complete_datagram+0x13c>)
 800f99e:	4816      	ldr	r0, [pc, #88]	; (800f9f8 <ip_reass_free_complete_datagram+0x134>)
 800f9a0:	f000 fec2 	bl	8010728 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800f9a4:	8bfa      	ldrh	r2, [r7, #30]
 800f9a6:	8a7b      	ldrh	r3, [r7, #18]
 800f9a8:	4413      	add	r3, r2
 800f9aa:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800f9ac:	68f8      	ldr	r0, [r7, #12]
 800f9ae:	f7f6 fb13 	bl	8005fd8 <pbuf_free>
  while (p != NULL) {
 800f9b2:	69bb      	ldr	r3, [r7, #24]
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	d1dc      	bne.n	800f972 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800f9b8:	6839      	ldr	r1, [r7, #0]
 800f9ba:	6878      	ldr	r0, [r7, #4]
 800f9bc:	f000 f8c2 	bl	800fb44 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800f9c0:	4b10      	ldr	r3, [pc, #64]	; (800fa04 <ip_reass_free_complete_datagram+0x140>)
 800f9c2:	881b      	ldrh	r3, [r3, #0]
 800f9c4:	8bfa      	ldrh	r2, [r7, #30]
 800f9c6:	429a      	cmp	r2, r3
 800f9c8:	d905      	bls.n	800f9d6 <ip_reass_free_complete_datagram+0x112>
 800f9ca:	4b09      	ldr	r3, [pc, #36]	; (800f9f0 <ip_reass_free_complete_datagram+0x12c>)
 800f9cc:	22d2      	movs	r2, #210	; 0xd2
 800f9ce:	490e      	ldr	r1, [pc, #56]	; (800fa08 <ip_reass_free_complete_datagram+0x144>)
 800f9d0:	4809      	ldr	r0, [pc, #36]	; (800f9f8 <ip_reass_free_complete_datagram+0x134>)
 800f9d2:	f000 fea9 	bl	8010728 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800f9d6:	4b0b      	ldr	r3, [pc, #44]	; (800fa04 <ip_reass_free_complete_datagram+0x140>)
 800f9d8:	881a      	ldrh	r2, [r3, #0]
 800f9da:	8bfb      	ldrh	r3, [r7, #30]
 800f9dc:	1ad3      	subs	r3, r2, r3
 800f9de:	b29a      	uxth	r2, r3
 800f9e0:	4b08      	ldr	r3, [pc, #32]	; (800fa04 <ip_reass_free_complete_datagram+0x140>)
 800f9e2:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800f9e4:	8bfb      	ldrh	r3, [r7, #30]
}
 800f9e6:	4618      	mov	r0, r3
 800f9e8:	3720      	adds	r7, #32
 800f9ea:	46bd      	mov	sp, r7
 800f9ec:	bd80      	pop	{r7, pc}
 800f9ee:	bf00      	nop
 800f9f0:	080143ac 	.word	0x080143ac
 800f9f4:	080143e8 	.word	0x080143e8
 800f9f8:	080143f4 	.word	0x080143f4
 800f9fc:	0801441c 	.word	0x0801441c
 800fa00:	08014430 	.word	0x08014430
 800fa04:	20007de0 	.word	0x20007de0
 800fa08:	08014450 	.word	0x08014450

0800fa0c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800fa0c:	b580      	push	{r7, lr}
 800fa0e:	b08a      	sub	sp, #40	; 0x28
 800fa10:	af00      	add	r7, sp, #0
 800fa12:	6078      	str	r0, [r7, #4]
 800fa14:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800fa16:	2300      	movs	r3, #0
 800fa18:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800fa1a:	2300      	movs	r3, #0
 800fa1c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800fa1e:	2300      	movs	r3, #0
 800fa20:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800fa22:	2300      	movs	r3, #0
 800fa24:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800fa26:	2300      	movs	r3, #0
 800fa28:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800fa2a:	4b28      	ldr	r3, [pc, #160]	; (800facc <ip_reass_remove_oldest_datagram+0xc0>)
 800fa2c:	681b      	ldr	r3, [r3, #0]
 800fa2e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800fa30:	e030      	b.n	800fa94 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800fa32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa34:	695a      	ldr	r2, [r3, #20]
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	68db      	ldr	r3, [r3, #12]
 800fa3a:	429a      	cmp	r2, r3
 800fa3c:	d10c      	bne.n	800fa58 <ip_reass_remove_oldest_datagram+0x4c>
 800fa3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa40:	699a      	ldr	r2, [r3, #24]
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	691b      	ldr	r3, [r3, #16]
 800fa46:	429a      	cmp	r2, r3
 800fa48:	d106      	bne.n	800fa58 <ip_reass_remove_oldest_datagram+0x4c>
 800fa4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa4c:	899a      	ldrh	r2, [r3, #12]
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	889b      	ldrh	r3, [r3, #4]
 800fa52:	b29b      	uxth	r3, r3
 800fa54:	429a      	cmp	r2, r3
 800fa56:	d014      	beq.n	800fa82 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800fa58:	693b      	ldr	r3, [r7, #16]
 800fa5a:	3301      	adds	r3, #1
 800fa5c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800fa5e:	6a3b      	ldr	r3, [r7, #32]
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	d104      	bne.n	800fa6e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800fa64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa66:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800fa68:	69fb      	ldr	r3, [r7, #28]
 800fa6a:	61bb      	str	r3, [r7, #24]
 800fa6c:	e009      	b.n	800fa82 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800fa6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa70:	7fda      	ldrb	r2, [r3, #31]
 800fa72:	6a3b      	ldr	r3, [r7, #32]
 800fa74:	7fdb      	ldrb	r3, [r3, #31]
 800fa76:	429a      	cmp	r2, r3
 800fa78:	d803      	bhi.n	800fa82 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800fa7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa7c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800fa7e:	69fb      	ldr	r3, [r7, #28]
 800fa80:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800fa82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa84:	681b      	ldr	r3, [r3, #0]
 800fa86:	2b00      	cmp	r3, #0
 800fa88:	d001      	beq.n	800fa8e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800fa8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa8c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800fa8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa90:	681b      	ldr	r3, [r3, #0]
 800fa92:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800fa94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	d1cb      	bne.n	800fa32 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800fa9a:	6a3b      	ldr	r3, [r7, #32]
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d008      	beq.n	800fab2 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800faa0:	69b9      	ldr	r1, [r7, #24]
 800faa2:	6a38      	ldr	r0, [r7, #32]
 800faa4:	f7ff ff0e 	bl	800f8c4 <ip_reass_free_complete_datagram>
 800faa8:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800faaa:	697a      	ldr	r2, [r7, #20]
 800faac:	68fb      	ldr	r3, [r7, #12]
 800faae:	4413      	add	r3, r2
 800fab0:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800fab2:	697a      	ldr	r2, [r7, #20]
 800fab4:	683b      	ldr	r3, [r7, #0]
 800fab6:	429a      	cmp	r2, r3
 800fab8:	da02      	bge.n	800fac0 <ip_reass_remove_oldest_datagram+0xb4>
 800faba:	693b      	ldr	r3, [r7, #16]
 800fabc:	2b01      	cmp	r3, #1
 800fabe:	dcac      	bgt.n	800fa1a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800fac0:	697b      	ldr	r3, [r7, #20]
}
 800fac2:	4618      	mov	r0, r3
 800fac4:	3728      	adds	r7, #40	; 0x28
 800fac6:	46bd      	mov	sp, r7
 800fac8:	bd80      	pop	{r7, pc}
 800faca:	bf00      	nop
 800facc:	20007ddc 	.word	0x20007ddc

0800fad0 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800fad0:	b580      	push	{r7, lr}
 800fad2:	b084      	sub	sp, #16
 800fad4:	af00      	add	r7, sp, #0
 800fad6:	6078      	str	r0, [r7, #4]
 800fad8:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800fada:	2004      	movs	r0, #4
 800fadc:	f7f5 fbaa 	bl	8005234 <memp_malloc>
 800fae0:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800fae2:	68fb      	ldr	r3, [r7, #12]
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	d110      	bne.n	800fb0a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800fae8:	6839      	ldr	r1, [r7, #0]
 800faea:	6878      	ldr	r0, [r7, #4]
 800faec:	f7ff ff8e 	bl	800fa0c <ip_reass_remove_oldest_datagram>
 800faf0:	4602      	mov	r2, r0
 800faf2:	683b      	ldr	r3, [r7, #0]
 800faf4:	4293      	cmp	r3, r2
 800faf6:	dc03      	bgt.n	800fb00 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800faf8:	2004      	movs	r0, #4
 800fafa:	f7f5 fb9b 	bl	8005234 <memp_malloc>
 800fafe:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800fb00:	68fb      	ldr	r3, [r7, #12]
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	d101      	bne.n	800fb0a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800fb06:	2300      	movs	r3, #0
 800fb08:	e016      	b.n	800fb38 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800fb0a:	2220      	movs	r2, #32
 800fb0c:	2100      	movs	r1, #0
 800fb0e:	68f8      	ldr	r0, [r7, #12]
 800fb10:	f000 fe02 	bl	8010718 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800fb14:	68fb      	ldr	r3, [r7, #12]
 800fb16:	220f      	movs	r2, #15
 800fb18:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800fb1a:	4b09      	ldr	r3, [pc, #36]	; (800fb40 <ip_reass_enqueue_new_datagram+0x70>)
 800fb1c:	681a      	ldr	r2, [r3, #0]
 800fb1e:	68fb      	ldr	r3, [r7, #12]
 800fb20:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800fb22:	4a07      	ldr	r2, [pc, #28]	; (800fb40 <ip_reass_enqueue_new_datagram+0x70>)
 800fb24:	68fb      	ldr	r3, [r7, #12]
 800fb26:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800fb28:	68fb      	ldr	r3, [r7, #12]
 800fb2a:	3308      	adds	r3, #8
 800fb2c:	2214      	movs	r2, #20
 800fb2e:	6879      	ldr	r1, [r7, #4]
 800fb30:	4618      	mov	r0, r3
 800fb32:	f000 fde3 	bl	80106fc <memcpy>
  return ipr;
 800fb36:	68fb      	ldr	r3, [r7, #12]
}
 800fb38:	4618      	mov	r0, r3
 800fb3a:	3710      	adds	r7, #16
 800fb3c:	46bd      	mov	sp, r7
 800fb3e:	bd80      	pop	{r7, pc}
 800fb40:	20007ddc 	.word	0x20007ddc

0800fb44 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800fb44:	b580      	push	{r7, lr}
 800fb46:	b082      	sub	sp, #8
 800fb48:	af00      	add	r7, sp, #0
 800fb4a:	6078      	str	r0, [r7, #4]
 800fb4c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800fb4e:	4b10      	ldr	r3, [pc, #64]	; (800fb90 <ip_reass_dequeue_datagram+0x4c>)
 800fb50:	681b      	ldr	r3, [r3, #0]
 800fb52:	687a      	ldr	r2, [r7, #4]
 800fb54:	429a      	cmp	r2, r3
 800fb56:	d104      	bne.n	800fb62 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	681b      	ldr	r3, [r3, #0]
 800fb5c:	4a0c      	ldr	r2, [pc, #48]	; (800fb90 <ip_reass_dequeue_datagram+0x4c>)
 800fb5e:	6013      	str	r3, [r2, #0]
 800fb60:	e00d      	b.n	800fb7e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800fb62:	683b      	ldr	r3, [r7, #0]
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d106      	bne.n	800fb76 <ip_reass_dequeue_datagram+0x32>
 800fb68:	4b0a      	ldr	r3, [pc, #40]	; (800fb94 <ip_reass_dequeue_datagram+0x50>)
 800fb6a:	f240 1245 	movw	r2, #325	; 0x145
 800fb6e:	490a      	ldr	r1, [pc, #40]	; (800fb98 <ip_reass_dequeue_datagram+0x54>)
 800fb70:	480a      	ldr	r0, [pc, #40]	; (800fb9c <ip_reass_dequeue_datagram+0x58>)
 800fb72:	f000 fdd9 	bl	8010728 <iprintf>
    prev->next = ipr->next;
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	681a      	ldr	r2, [r3, #0]
 800fb7a:	683b      	ldr	r3, [r7, #0]
 800fb7c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800fb7e:	6879      	ldr	r1, [r7, #4]
 800fb80:	2004      	movs	r0, #4
 800fb82:	f7f5 fbc7 	bl	8005314 <memp_free>
}
 800fb86:	bf00      	nop
 800fb88:	3708      	adds	r7, #8
 800fb8a:	46bd      	mov	sp, r7
 800fb8c:	bd80      	pop	{r7, pc}
 800fb8e:	bf00      	nop
 800fb90:	20007ddc 	.word	0x20007ddc
 800fb94:	080143ac 	.word	0x080143ac
 800fb98:	08014474 	.word	0x08014474
 800fb9c:	080143f4 	.word	0x080143f4

0800fba0 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800fba0:	b580      	push	{r7, lr}
 800fba2:	b08c      	sub	sp, #48	; 0x30
 800fba4:	af00      	add	r7, sp, #0
 800fba6:	60f8      	str	r0, [r7, #12]
 800fba8:	60b9      	str	r1, [r7, #8]
 800fbaa:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800fbac:	2300      	movs	r3, #0
 800fbae:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800fbb0:	2301      	movs	r3, #1
 800fbb2:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800fbb4:	68bb      	ldr	r3, [r7, #8]
 800fbb6:	685b      	ldr	r3, [r3, #4]
 800fbb8:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800fbba:	69fb      	ldr	r3, [r7, #28]
 800fbbc:	885b      	ldrh	r3, [r3, #2]
 800fbbe:	b29b      	uxth	r3, r3
 800fbc0:	4618      	mov	r0, r3
 800fbc2:	f7f4 fe07 	bl	80047d4 <lwip_htons>
 800fbc6:	4603      	mov	r3, r0
 800fbc8:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800fbca:	69fb      	ldr	r3, [r7, #28]
 800fbcc:	781b      	ldrb	r3, [r3, #0]
 800fbce:	f003 030f 	and.w	r3, r3, #15
 800fbd2:	b2db      	uxtb	r3, r3
 800fbd4:	009b      	lsls	r3, r3, #2
 800fbd6:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800fbd8:	7e7b      	ldrb	r3, [r7, #25]
 800fbda:	b29b      	uxth	r3, r3
 800fbdc:	8b7a      	ldrh	r2, [r7, #26]
 800fbde:	429a      	cmp	r2, r3
 800fbe0:	d202      	bcs.n	800fbe8 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800fbe2:	f04f 33ff 	mov.w	r3, #4294967295
 800fbe6:	e135      	b.n	800fe54 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800fbe8:	7e7b      	ldrb	r3, [r7, #25]
 800fbea:	b29b      	uxth	r3, r3
 800fbec:	8b7a      	ldrh	r2, [r7, #26]
 800fbee:	1ad3      	subs	r3, r2, r3
 800fbf0:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800fbf2:	69fb      	ldr	r3, [r7, #28]
 800fbf4:	88db      	ldrh	r3, [r3, #6]
 800fbf6:	b29b      	uxth	r3, r3
 800fbf8:	4618      	mov	r0, r3
 800fbfa:	f7f4 fdeb 	bl	80047d4 <lwip_htons>
 800fbfe:	4603      	mov	r3, r0
 800fc00:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fc04:	b29b      	uxth	r3, r3
 800fc06:	00db      	lsls	r3, r3, #3
 800fc08:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800fc0a:	68bb      	ldr	r3, [r7, #8]
 800fc0c:	685b      	ldr	r3, [r3, #4]
 800fc0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800fc10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc12:	2200      	movs	r2, #0
 800fc14:	701a      	strb	r2, [r3, #0]
 800fc16:	2200      	movs	r2, #0
 800fc18:	705a      	strb	r2, [r3, #1]
 800fc1a:	2200      	movs	r2, #0
 800fc1c:	709a      	strb	r2, [r3, #2]
 800fc1e:	2200      	movs	r2, #0
 800fc20:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800fc22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc24:	8afa      	ldrh	r2, [r7, #22]
 800fc26:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800fc28:	8afa      	ldrh	r2, [r7, #22]
 800fc2a:	8b7b      	ldrh	r3, [r7, #26]
 800fc2c:	4413      	add	r3, r2
 800fc2e:	b29a      	uxth	r2, r3
 800fc30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc32:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800fc34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc36:	88db      	ldrh	r3, [r3, #6]
 800fc38:	b29b      	uxth	r3, r3
 800fc3a:	8afa      	ldrh	r2, [r7, #22]
 800fc3c:	429a      	cmp	r2, r3
 800fc3e:	d902      	bls.n	800fc46 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800fc40:	f04f 33ff 	mov.w	r3, #4294967295
 800fc44:	e106      	b.n	800fe54 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800fc46:	68fb      	ldr	r3, [r7, #12]
 800fc48:	685b      	ldr	r3, [r3, #4]
 800fc4a:	627b      	str	r3, [r7, #36]	; 0x24
 800fc4c:	e068      	b.n	800fd20 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800fc4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc50:	685b      	ldr	r3, [r3, #4]
 800fc52:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800fc54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc56:	889b      	ldrh	r3, [r3, #4]
 800fc58:	b29a      	uxth	r2, r3
 800fc5a:	693b      	ldr	r3, [r7, #16]
 800fc5c:	889b      	ldrh	r3, [r3, #4]
 800fc5e:	b29b      	uxth	r3, r3
 800fc60:	429a      	cmp	r2, r3
 800fc62:	d235      	bcs.n	800fcd0 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800fc64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fc68:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800fc6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d020      	beq.n	800fcb2 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800fc70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc72:	889b      	ldrh	r3, [r3, #4]
 800fc74:	b29a      	uxth	r2, r3
 800fc76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc78:	88db      	ldrh	r3, [r3, #6]
 800fc7a:	b29b      	uxth	r3, r3
 800fc7c:	429a      	cmp	r2, r3
 800fc7e:	d307      	bcc.n	800fc90 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800fc80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc82:	88db      	ldrh	r3, [r3, #6]
 800fc84:	b29a      	uxth	r2, r3
 800fc86:	693b      	ldr	r3, [r7, #16]
 800fc88:	889b      	ldrh	r3, [r3, #4]
 800fc8a:	b29b      	uxth	r3, r3
 800fc8c:	429a      	cmp	r2, r3
 800fc8e:	d902      	bls.n	800fc96 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800fc90:	f04f 33ff 	mov.w	r3, #4294967295
 800fc94:	e0de      	b.n	800fe54 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800fc96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc98:	68ba      	ldr	r2, [r7, #8]
 800fc9a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800fc9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc9e:	88db      	ldrh	r3, [r3, #6]
 800fca0:	b29a      	uxth	r2, r3
 800fca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fca4:	889b      	ldrh	r3, [r3, #4]
 800fca6:	b29b      	uxth	r3, r3
 800fca8:	429a      	cmp	r2, r3
 800fcaa:	d03d      	beq.n	800fd28 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800fcac:	2300      	movs	r3, #0
 800fcae:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800fcb0:	e03a      	b.n	800fd28 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800fcb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcb4:	88db      	ldrh	r3, [r3, #6]
 800fcb6:	b29a      	uxth	r2, r3
 800fcb8:	693b      	ldr	r3, [r7, #16]
 800fcba:	889b      	ldrh	r3, [r3, #4]
 800fcbc:	b29b      	uxth	r3, r3
 800fcbe:	429a      	cmp	r2, r3
 800fcc0:	d902      	bls.n	800fcc8 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800fcc2:	f04f 33ff 	mov.w	r3, #4294967295
 800fcc6:	e0c5      	b.n	800fe54 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800fcc8:	68fb      	ldr	r3, [r7, #12]
 800fcca:	68ba      	ldr	r2, [r7, #8]
 800fccc:	605a      	str	r2, [r3, #4]
      break;
 800fcce:	e02b      	b.n	800fd28 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800fcd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcd2:	889b      	ldrh	r3, [r3, #4]
 800fcd4:	b29a      	uxth	r2, r3
 800fcd6:	693b      	ldr	r3, [r7, #16]
 800fcd8:	889b      	ldrh	r3, [r3, #4]
 800fcda:	b29b      	uxth	r3, r3
 800fcdc:	429a      	cmp	r2, r3
 800fcde:	d102      	bne.n	800fce6 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800fce0:	f04f 33ff 	mov.w	r3, #4294967295
 800fce4:	e0b6      	b.n	800fe54 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800fce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fce8:	889b      	ldrh	r3, [r3, #4]
 800fcea:	b29a      	uxth	r2, r3
 800fcec:	693b      	ldr	r3, [r7, #16]
 800fcee:	88db      	ldrh	r3, [r3, #6]
 800fcf0:	b29b      	uxth	r3, r3
 800fcf2:	429a      	cmp	r2, r3
 800fcf4:	d202      	bcs.n	800fcfc <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800fcf6:	f04f 33ff 	mov.w	r3, #4294967295
 800fcfa:	e0ab      	b.n	800fe54 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800fcfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	d009      	beq.n	800fd16 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800fd02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd04:	88db      	ldrh	r3, [r3, #6]
 800fd06:	b29a      	uxth	r2, r3
 800fd08:	693b      	ldr	r3, [r7, #16]
 800fd0a:	889b      	ldrh	r3, [r3, #4]
 800fd0c:	b29b      	uxth	r3, r3
 800fd0e:	429a      	cmp	r2, r3
 800fd10:	d001      	beq.n	800fd16 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800fd12:	2300      	movs	r3, #0
 800fd14:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800fd16:	693b      	ldr	r3, [r7, #16]
 800fd18:	681b      	ldr	r3, [r3, #0]
 800fd1a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800fd1c:	693b      	ldr	r3, [r7, #16]
 800fd1e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800fd20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	d193      	bne.n	800fc4e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800fd26:	e000      	b.n	800fd2a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800fd28:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800fd2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d12d      	bne.n	800fd8c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800fd30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	d01c      	beq.n	800fd70 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800fd36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd38:	88db      	ldrh	r3, [r3, #6]
 800fd3a:	b29a      	uxth	r2, r3
 800fd3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd3e:	889b      	ldrh	r3, [r3, #4]
 800fd40:	b29b      	uxth	r3, r3
 800fd42:	429a      	cmp	r2, r3
 800fd44:	d906      	bls.n	800fd54 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800fd46:	4b45      	ldr	r3, [pc, #276]	; (800fe5c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800fd48:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800fd4c:	4944      	ldr	r1, [pc, #272]	; (800fe60 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800fd4e:	4845      	ldr	r0, [pc, #276]	; (800fe64 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800fd50:	f000 fcea 	bl	8010728 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800fd54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd56:	68ba      	ldr	r2, [r7, #8]
 800fd58:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800fd5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd5c:	88db      	ldrh	r3, [r3, #6]
 800fd5e:	b29a      	uxth	r2, r3
 800fd60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd62:	889b      	ldrh	r3, [r3, #4]
 800fd64:	b29b      	uxth	r3, r3
 800fd66:	429a      	cmp	r2, r3
 800fd68:	d010      	beq.n	800fd8c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800fd6a:	2300      	movs	r3, #0
 800fd6c:	623b      	str	r3, [r7, #32]
 800fd6e:	e00d      	b.n	800fd8c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800fd70:	68fb      	ldr	r3, [r7, #12]
 800fd72:	685b      	ldr	r3, [r3, #4]
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	d006      	beq.n	800fd86 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800fd78:	4b38      	ldr	r3, [pc, #224]	; (800fe5c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800fd7a:	f44f 72df 	mov.w	r2, #446	; 0x1be
 800fd7e:	493a      	ldr	r1, [pc, #232]	; (800fe68 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800fd80:	4838      	ldr	r0, [pc, #224]	; (800fe64 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800fd82:	f000 fcd1 	bl	8010728 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800fd86:	68fb      	ldr	r3, [r7, #12]
 800fd88:	68ba      	ldr	r2, [r7, #8]
 800fd8a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	d105      	bne.n	800fd9e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800fd92:	68fb      	ldr	r3, [r7, #12]
 800fd94:	7f9b      	ldrb	r3, [r3, #30]
 800fd96:	f003 0301 	and.w	r3, r3, #1
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	d059      	beq.n	800fe52 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800fd9e:	6a3b      	ldr	r3, [r7, #32]
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	d04f      	beq.n	800fe44 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800fda4:	68fb      	ldr	r3, [r7, #12]
 800fda6:	685b      	ldr	r3, [r3, #4]
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	d006      	beq.n	800fdba <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800fdac:	68fb      	ldr	r3, [r7, #12]
 800fdae:	685b      	ldr	r3, [r3, #4]
 800fdb0:	685b      	ldr	r3, [r3, #4]
 800fdb2:	889b      	ldrh	r3, [r3, #4]
 800fdb4:	b29b      	uxth	r3, r3
 800fdb6:	2b00      	cmp	r3, #0
 800fdb8:	d002      	beq.n	800fdc0 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800fdba:	2300      	movs	r3, #0
 800fdbc:	623b      	str	r3, [r7, #32]
 800fdbe:	e041      	b.n	800fe44 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800fdc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdc2:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800fdc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdc6:	681b      	ldr	r3, [r3, #0]
 800fdc8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800fdca:	e012      	b.n	800fdf2 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800fdcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdce:	685b      	ldr	r3, [r3, #4]
 800fdd0:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800fdd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdd4:	88db      	ldrh	r3, [r3, #6]
 800fdd6:	b29a      	uxth	r2, r3
 800fdd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdda:	889b      	ldrh	r3, [r3, #4]
 800fddc:	b29b      	uxth	r3, r3
 800fdde:	429a      	cmp	r2, r3
 800fde0:	d002      	beq.n	800fde8 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800fde2:	2300      	movs	r3, #0
 800fde4:	623b      	str	r3, [r7, #32]
            break;
 800fde6:	e007      	b.n	800fdf8 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800fde8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdea:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800fdec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdee:	681b      	ldr	r3, [r3, #0]
 800fdf0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800fdf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	d1e9      	bne.n	800fdcc <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800fdf8:	6a3b      	ldr	r3, [r7, #32]
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d022      	beq.n	800fe44 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800fdfe:	68fb      	ldr	r3, [r7, #12]
 800fe00:	685b      	ldr	r3, [r3, #4]
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	d106      	bne.n	800fe14 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800fe06:	4b15      	ldr	r3, [pc, #84]	; (800fe5c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800fe08:	f240 12df 	movw	r2, #479	; 0x1df
 800fe0c:	4917      	ldr	r1, [pc, #92]	; (800fe6c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800fe0e:	4815      	ldr	r0, [pc, #84]	; (800fe64 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800fe10:	f000 fc8a 	bl	8010728 <iprintf>
          LWIP_ASSERT("sanity check",
 800fe14:	68fb      	ldr	r3, [r7, #12]
 800fe16:	685b      	ldr	r3, [r3, #4]
 800fe18:	685b      	ldr	r3, [r3, #4]
 800fe1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fe1c:	429a      	cmp	r2, r3
 800fe1e:	d106      	bne.n	800fe2e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800fe20:	4b0e      	ldr	r3, [pc, #56]	; (800fe5c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800fe22:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800fe26:	4911      	ldr	r1, [pc, #68]	; (800fe6c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800fe28:	480e      	ldr	r0, [pc, #56]	; (800fe64 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800fe2a:	f000 fc7d 	bl	8010728 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800fe2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe30:	681b      	ldr	r3, [r3, #0]
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	d006      	beq.n	800fe44 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800fe36:	4b09      	ldr	r3, [pc, #36]	; (800fe5c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800fe38:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800fe3c:	490c      	ldr	r1, [pc, #48]	; (800fe70 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800fe3e:	4809      	ldr	r0, [pc, #36]	; (800fe64 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800fe40:	f000 fc72 	bl	8010728 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800fe44:	6a3b      	ldr	r3, [r7, #32]
 800fe46:	2b00      	cmp	r3, #0
 800fe48:	bf14      	ite	ne
 800fe4a:	2301      	movne	r3, #1
 800fe4c:	2300      	moveq	r3, #0
 800fe4e:	b2db      	uxtb	r3, r3
 800fe50:	e000      	b.n	800fe54 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800fe52:	2300      	movs	r3, #0
}
 800fe54:	4618      	mov	r0, r3
 800fe56:	3730      	adds	r7, #48	; 0x30
 800fe58:	46bd      	mov	sp, r7
 800fe5a:	bd80      	pop	{r7, pc}
 800fe5c:	080143ac 	.word	0x080143ac
 800fe60:	08014490 	.word	0x08014490
 800fe64:	080143f4 	.word	0x080143f4
 800fe68:	080144b0 	.word	0x080144b0
 800fe6c:	080144e8 	.word	0x080144e8
 800fe70:	080144f8 	.word	0x080144f8

0800fe74 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800fe74:	b580      	push	{r7, lr}
 800fe76:	b08e      	sub	sp, #56	; 0x38
 800fe78:	af00      	add	r7, sp, #0
 800fe7a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	685b      	ldr	r3, [r3, #4]
 800fe80:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800fe82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe84:	781b      	ldrb	r3, [r3, #0]
 800fe86:	f003 030f 	and.w	r3, r3, #15
 800fe8a:	b2db      	uxtb	r3, r3
 800fe8c:	009b      	lsls	r3, r3, #2
 800fe8e:	b2db      	uxtb	r3, r3
 800fe90:	2b14      	cmp	r3, #20
 800fe92:	f040 8171 	bne.w	8010178 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800fe96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe98:	88db      	ldrh	r3, [r3, #6]
 800fe9a:	b29b      	uxth	r3, r3
 800fe9c:	4618      	mov	r0, r3
 800fe9e:	f7f4 fc99 	bl	80047d4 <lwip_htons>
 800fea2:	4603      	mov	r3, r0
 800fea4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fea8:	b29b      	uxth	r3, r3
 800feaa:	00db      	lsls	r3, r3, #3
 800feac:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800feae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800feb0:	885b      	ldrh	r3, [r3, #2]
 800feb2:	b29b      	uxth	r3, r3
 800feb4:	4618      	mov	r0, r3
 800feb6:	f7f4 fc8d 	bl	80047d4 <lwip_htons>
 800feba:	4603      	mov	r3, r0
 800febc:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800febe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fec0:	781b      	ldrb	r3, [r3, #0]
 800fec2:	f003 030f 	and.w	r3, r3, #15
 800fec6:	b2db      	uxtb	r3, r3
 800fec8:	009b      	lsls	r3, r3, #2
 800feca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800fece:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800fed2:	b29b      	uxth	r3, r3
 800fed4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800fed6:	429a      	cmp	r2, r3
 800fed8:	f0c0 8150 	bcc.w	801017c <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800fedc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800fee0:	b29b      	uxth	r3, r3
 800fee2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800fee4:	1ad3      	subs	r3, r2, r3
 800fee6:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800fee8:	6878      	ldr	r0, [r7, #4]
 800feea:	f7f6 f8fd 	bl	80060e8 <pbuf_clen>
 800feee:	4603      	mov	r3, r0
 800fef0:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800fef2:	4b8c      	ldr	r3, [pc, #560]	; (8010124 <ip4_reass+0x2b0>)
 800fef4:	881b      	ldrh	r3, [r3, #0]
 800fef6:	461a      	mov	r2, r3
 800fef8:	8c3b      	ldrh	r3, [r7, #32]
 800fefa:	4413      	add	r3, r2
 800fefc:	2b0a      	cmp	r3, #10
 800fefe:	dd10      	ble.n	800ff22 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800ff00:	8c3b      	ldrh	r3, [r7, #32]
 800ff02:	4619      	mov	r1, r3
 800ff04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ff06:	f7ff fd81 	bl	800fa0c <ip_reass_remove_oldest_datagram>
 800ff0a:	4603      	mov	r3, r0
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	f000 8137 	beq.w	8010180 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800ff12:	4b84      	ldr	r3, [pc, #528]	; (8010124 <ip4_reass+0x2b0>)
 800ff14:	881b      	ldrh	r3, [r3, #0]
 800ff16:	461a      	mov	r2, r3
 800ff18:	8c3b      	ldrh	r3, [r7, #32]
 800ff1a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800ff1c:	2b0a      	cmp	r3, #10
 800ff1e:	f300 812f 	bgt.w	8010180 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800ff22:	4b81      	ldr	r3, [pc, #516]	; (8010128 <ip4_reass+0x2b4>)
 800ff24:	681b      	ldr	r3, [r3, #0]
 800ff26:	633b      	str	r3, [r7, #48]	; 0x30
 800ff28:	e015      	b.n	800ff56 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800ff2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff2c:	695a      	ldr	r2, [r3, #20]
 800ff2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff30:	68db      	ldr	r3, [r3, #12]
 800ff32:	429a      	cmp	r2, r3
 800ff34:	d10c      	bne.n	800ff50 <ip4_reass+0xdc>
 800ff36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff38:	699a      	ldr	r2, [r3, #24]
 800ff3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff3c:	691b      	ldr	r3, [r3, #16]
 800ff3e:	429a      	cmp	r2, r3
 800ff40:	d106      	bne.n	800ff50 <ip4_reass+0xdc>
 800ff42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff44:	899a      	ldrh	r2, [r3, #12]
 800ff46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff48:	889b      	ldrh	r3, [r3, #4]
 800ff4a:	b29b      	uxth	r3, r3
 800ff4c:	429a      	cmp	r2, r3
 800ff4e:	d006      	beq.n	800ff5e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800ff50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff52:	681b      	ldr	r3, [r3, #0]
 800ff54:	633b      	str	r3, [r7, #48]	; 0x30
 800ff56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff58:	2b00      	cmp	r3, #0
 800ff5a:	d1e6      	bne.n	800ff2a <ip4_reass+0xb6>
 800ff5c:	e000      	b.n	800ff60 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800ff5e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800ff60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff62:	2b00      	cmp	r3, #0
 800ff64:	d109      	bne.n	800ff7a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800ff66:	8c3b      	ldrh	r3, [r7, #32]
 800ff68:	4619      	mov	r1, r3
 800ff6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ff6c:	f7ff fdb0 	bl	800fad0 <ip_reass_enqueue_new_datagram>
 800ff70:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800ff72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff74:	2b00      	cmp	r3, #0
 800ff76:	d11c      	bne.n	800ffb2 <ip4_reass+0x13e>
      goto nullreturn;
 800ff78:	e105      	b.n	8010186 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800ff7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff7c:	88db      	ldrh	r3, [r3, #6]
 800ff7e:	b29b      	uxth	r3, r3
 800ff80:	4618      	mov	r0, r3
 800ff82:	f7f4 fc27 	bl	80047d4 <lwip_htons>
 800ff86:	4603      	mov	r3, r0
 800ff88:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	d110      	bne.n	800ffb2 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800ff90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff92:	89db      	ldrh	r3, [r3, #14]
 800ff94:	4618      	mov	r0, r3
 800ff96:	f7f4 fc1d 	bl	80047d4 <lwip_htons>
 800ff9a:	4603      	mov	r3, r0
 800ff9c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800ffa0:	2b00      	cmp	r3, #0
 800ffa2:	d006      	beq.n	800ffb2 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800ffa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffa6:	3308      	adds	r3, #8
 800ffa8:	2214      	movs	r2, #20
 800ffaa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ffac:	4618      	mov	r0, r3
 800ffae:	f000 fba5 	bl	80106fc <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800ffb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffb4:	88db      	ldrh	r3, [r3, #6]
 800ffb6:	b29b      	uxth	r3, r3
 800ffb8:	f003 0320 	and.w	r3, r3, #32
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	bf0c      	ite	eq
 800ffc0:	2301      	moveq	r3, #1
 800ffc2:	2300      	movne	r3, #0
 800ffc4:	b2db      	uxtb	r3, r3
 800ffc6:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800ffc8:	69fb      	ldr	r3, [r7, #28]
 800ffca:	2b00      	cmp	r3, #0
 800ffcc:	d00e      	beq.n	800ffec <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800ffce:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ffd0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ffd2:	4413      	add	r3, r2
 800ffd4:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800ffd6:	8b7a      	ldrh	r2, [r7, #26]
 800ffd8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ffda:	429a      	cmp	r2, r3
 800ffdc:	f0c0 80a0 	bcc.w	8010120 <ip4_reass+0x2ac>
 800ffe0:	8b7b      	ldrh	r3, [r7, #26]
 800ffe2:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800ffe6:	4293      	cmp	r3, r2
 800ffe8:	f200 809a 	bhi.w	8010120 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800ffec:	69fa      	ldr	r2, [r7, #28]
 800ffee:	6879      	ldr	r1, [r7, #4]
 800fff0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fff2:	f7ff fdd5 	bl	800fba0 <ip_reass_chain_frag_into_datagram_and_validate>
 800fff6:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800fff8:	697b      	ldr	r3, [r7, #20]
 800fffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fffe:	f000 809b 	beq.w	8010138 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8010002:	4b48      	ldr	r3, [pc, #288]	; (8010124 <ip4_reass+0x2b0>)
 8010004:	881a      	ldrh	r2, [r3, #0]
 8010006:	8c3b      	ldrh	r3, [r7, #32]
 8010008:	4413      	add	r3, r2
 801000a:	b29a      	uxth	r2, r3
 801000c:	4b45      	ldr	r3, [pc, #276]	; (8010124 <ip4_reass+0x2b0>)
 801000e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8010010:	69fb      	ldr	r3, [r7, #28]
 8010012:	2b00      	cmp	r3, #0
 8010014:	d00d      	beq.n	8010032 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8010016:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8010018:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801001a:	4413      	add	r3, r2
 801001c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801001e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010020:	8a7a      	ldrh	r2, [r7, #18]
 8010022:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8010024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010026:	7f9b      	ldrb	r3, [r3, #30]
 8010028:	f043 0301 	orr.w	r3, r3, #1
 801002c:	b2da      	uxtb	r2, r3
 801002e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010030:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8010032:	697b      	ldr	r3, [r7, #20]
 8010034:	2b01      	cmp	r3, #1
 8010036:	d171      	bne.n	801011c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8010038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801003a:	8b9b      	ldrh	r3, [r3, #28]
 801003c:	3314      	adds	r3, #20
 801003e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8010040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010042:	685b      	ldr	r3, [r3, #4]
 8010044:	685b      	ldr	r3, [r3, #4]
 8010046:	681b      	ldr	r3, [r3, #0]
 8010048:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801004a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801004c:	685b      	ldr	r3, [r3, #4]
 801004e:	685b      	ldr	r3, [r3, #4]
 8010050:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8010052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010054:	3308      	adds	r3, #8
 8010056:	2214      	movs	r2, #20
 8010058:	4619      	mov	r1, r3
 801005a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801005c:	f000 fb4e 	bl	80106fc <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8010060:	8a3b      	ldrh	r3, [r7, #16]
 8010062:	4618      	mov	r0, r3
 8010064:	f7f4 fbb6 	bl	80047d4 <lwip_htons>
 8010068:	4603      	mov	r3, r0
 801006a:	461a      	mov	r2, r3
 801006c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801006e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8010070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010072:	2200      	movs	r2, #0
 8010074:	719a      	strb	r2, [r3, #6]
 8010076:	2200      	movs	r2, #0
 8010078:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801007a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801007c:	2200      	movs	r2, #0
 801007e:	729a      	strb	r2, [r3, #10]
 8010080:	2200      	movs	r2, #0
 8010082:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8010084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010086:	685b      	ldr	r3, [r3, #4]
 8010088:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801008a:	e00d      	b.n	80100a8 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801008c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801008e:	685b      	ldr	r3, [r3, #4]
 8010090:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8010092:	2114      	movs	r1, #20
 8010094:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010096:	f7f5 ff19 	bl	8005ecc <pbuf_remove_header>
      pbuf_cat(p, r);
 801009a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801009c:	6878      	ldr	r0, [r7, #4]
 801009e:	f7f6 f85d 	bl	800615c <pbuf_cat>
      r = iprh->next_pbuf;
 80100a2:	68fb      	ldr	r3, [r7, #12]
 80100a4:	681b      	ldr	r3, [r3, #0]
 80100a6:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 80100a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	d1ee      	bne.n	801008c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80100ae:	4b1e      	ldr	r3, [pc, #120]	; (8010128 <ip4_reass+0x2b4>)
 80100b0:	681b      	ldr	r3, [r3, #0]
 80100b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80100b4:	429a      	cmp	r2, r3
 80100b6:	d102      	bne.n	80100be <ip4_reass+0x24a>
      ipr_prev = NULL;
 80100b8:	2300      	movs	r3, #0
 80100ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80100bc:	e010      	b.n	80100e0 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80100be:	4b1a      	ldr	r3, [pc, #104]	; (8010128 <ip4_reass+0x2b4>)
 80100c0:	681b      	ldr	r3, [r3, #0]
 80100c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80100c4:	e007      	b.n	80100d6 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80100c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100c8:	681b      	ldr	r3, [r3, #0]
 80100ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80100cc:	429a      	cmp	r2, r3
 80100ce:	d006      	beq.n	80100de <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80100d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100d2:	681b      	ldr	r3, [r3, #0]
 80100d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80100d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100d8:	2b00      	cmp	r3, #0
 80100da:	d1f4      	bne.n	80100c6 <ip4_reass+0x252>
 80100dc:	e000      	b.n	80100e0 <ip4_reass+0x26c>
          break;
 80100de:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80100e0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80100e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80100e4:	f7ff fd2e 	bl	800fb44 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80100e8:	6878      	ldr	r0, [r7, #4]
 80100ea:	f7f5 fffd 	bl	80060e8 <pbuf_clen>
 80100ee:	4603      	mov	r3, r0
 80100f0:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80100f2:	4b0c      	ldr	r3, [pc, #48]	; (8010124 <ip4_reass+0x2b0>)
 80100f4:	881b      	ldrh	r3, [r3, #0]
 80100f6:	8c3a      	ldrh	r2, [r7, #32]
 80100f8:	429a      	cmp	r2, r3
 80100fa:	d906      	bls.n	801010a <ip4_reass+0x296>
 80100fc:	4b0b      	ldr	r3, [pc, #44]	; (801012c <ip4_reass+0x2b8>)
 80100fe:	f240 229b 	movw	r2, #667	; 0x29b
 8010102:	490b      	ldr	r1, [pc, #44]	; (8010130 <ip4_reass+0x2bc>)
 8010104:	480b      	ldr	r0, [pc, #44]	; (8010134 <ip4_reass+0x2c0>)
 8010106:	f000 fb0f 	bl	8010728 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801010a:	4b06      	ldr	r3, [pc, #24]	; (8010124 <ip4_reass+0x2b0>)
 801010c:	881a      	ldrh	r2, [r3, #0]
 801010e:	8c3b      	ldrh	r3, [r7, #32]
 8010110:	1ad3      	subs	r3, r2, r3
 8010112:	b29a      	uxth	r2, r3
 8010114:	4b03      	ldr	r3, [pc, #12]	; (8010124 <ip4_reass+0x2b0>)
 8010116:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	e038      	b.n	801018e <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801011c:	2300      	movs	r3, #0
 801011e:	e036      	b.n	801018e <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8010120:	bf00      	nop
 8010122:	e00a      	b.n	801013a <ip4_reass+0x2c6>
 8010124:	20007de0 	.word	0x20007de0
 8010128:	20007ddc 	.word	0x20007ddc
 801012c:	080143ac 	.word	0x080143ac
 8010130:	0801451c 	.word	0x0801451c
 8010134:	080143f4 	.word	0x080143f4
    goto nullreturn_ipr;
 8010138:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801013a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801013c:	2b00      	cmp	r3, #0
 801013e:	d106      	bne.n	801014e <ip4_reass+0x2da>
 8010140:	4b15      	ldr	r3, [pc, #84]	; (8010198 <ip4_reass+0x324>)
 8010142:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8010146:	4915      	ldr	r1, [pc, #84]	; (801019c <ip4_reass+0x328>)
 8010148:	4815      	ldr	r0, [pc, #84]	; (80101a0 <ip4_reass+0x32c>)
 801014a:	f000 faed 	bl	8010728 <iprintf>
  if (ipr->p == NULL) {
 801014e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010150:	685b      	ldr	r3, [r3, #4]
 8010152:	2b00      	cmp	r3, #0
 8010154:	d116      	bne.n	8010184 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8010156:	4b13      	ldr	r3, [pc, #76]	; (80101a4 <ip4_reass+0x330>)
 8010158:	681b      	ldr	r3, [r3, #0]
 801015a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801015c:	429a      	cmp	r2, r3
 801015e:	d006      	beq.n	801016e <ip4_reass+0x2fa>
 8010160:	4b0d      	ldr	r3, [pc, #52]	; (8010198 <ip4_reass+0x324>)
 8010162:	f240 22ab 	movw	r2, #683	; 0x2ab
 8010166:	4910      	ldr	r1, [pc, #64]	; (80101a8 <ip4_reass+0x334>)
 8010168:	480d      	ldr	r0, [pc, #52]	; (80101a0 <ip4_reass+0x32c>)
 801016a:	f000 fadd 	bl	8010728 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801016e:	2100      	movs	r1, #0
 8010170:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010172:	f7ff fce7 	bl	800fb44 <ip_reass_dequeue_datagram>
 8010176:	e006      	b.n	8010186 <ip4_reass+0x312>
    goto nullreturn;
 8010178:	bf00      	nop
 801017a:	e004      	b.n	8010186 <ip4_reass+0x312>
    goto nullreturn;
 801017c:	bf00      	nop
 801017e:	e002      	b.n	8010186 <ip4_reass+0x312>
      goto nullreturn;
 8010180:	bf00      	nop
 8010182:	e000      	b.n	8010186 <ip4_reass+0x312>
  }

nullreturn:
 8010184:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8010186:	6878      	ldr	r0, [r7, #4]
 8010188:	f7f5 ff26 	bl	8005fd8 <pbuf_free>
  return NULL;
 801018c:	2300      	movs	r3, #0
}
 801018e:	4618      	mov	r0, r3
 8010190:	3738      	adds	r7, #56	; 0x38
 8010192:	46bd      	mov	sp, r7
 8010194:	bd80      	pop	{r7, pc}
 8010196:	bf00      	nop
 8010198:	080143ac 	.word	0x080143ac
 801019c:	08014538 	.word	0x08014538
 80101a0:	080143f4 	.word	0x080143f4
 80101a4:	20007ddc 	.word	0x20007ddc
 80101a8:	08014544 	.word	0x08014544

080101ac <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80101ac:	b580      	push	{r7, lr}
 80101ae:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80101b0:	2005      	movs	r0, #5
 80101b2:	f7f5 f83f 	bl	8005234 <memp_malloc>
 80101b6:	4603      	mov	r3, r0
}
 80101b8:	4618      	mov	r0, r3
 80101ba:	bd80      	pop	{r7, pc}

080101bc <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80101bc:	b580      	push	{r7, lr}
 80101be:	b082      	sub	sp, #8
 80101c0:	af00      	add	r7, sp, #0
 80101c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	2b00      	cmp	r3, #0
 80101c8:	d106      	bne.n	80101d8 <ip_frag_free_pbuf_custom_ref+0x1c>
 80101ca:	4b07      	ldr	r3, [pc, #28]	; (80101e8 <ip_frag_free_pbuf_custom_ref+0x2c>)
 80101cc:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 80101d0:	4906      	ldr	r1, [pc, #24]	; (80101ec <ip_frag_free_pbuf_custom_ref+0x30>)
 80101d2:	4807      	ldr	r0, [pc, #28]	; (80101f0 <ip_frag_free_pbuf_custom_ref+0x34>)
 80101d4:	f000 faa8 	bl	8010728 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80101d8:	6879      	ldr	r1, [r7, #4]
 80101da:	2005      	movs	r0, #5
 80101dc:	f7f5 f89a 	bl	8005314 <memp_free>
}
 80101e0:	bf00      	nop
 80101e2:	3708      	adds	r7, #8
 80101e4:	46bd      	mov	sp, r7
 80101e6:	bd80      	pop	{r7, pc}
 80101e8:	080143ac 	.word	0x080143ac
 80101ec:	08014564 	.word	0x08014564
 80101f0:	080143f4 	.word	0x080143f4

080101f4 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80101f4:	b580      	push	{r7, lr}
 80101f6:	b084      	sub	sp, #16
 80101f8:	af00      	add	r7, sp, #0
 80101fa:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8010200:	68fb      	ldr	r3, [r7, #12]
 8010202:	2b00      	cmp	r3, #0
 8010204:	d106      	bne.n	8010214 <ipfrag_free_pbuf_custom+0x20>
 8010206:	4b11      	ldr	r3, [pc, #68]	; (801024c <ipfrag_free_pbuf_custom+0x58>)
 8010208:	f240 22ce 	movw	r2, #718	; 0x2ce
 801020c:	4910      	ldr	r1, [pc, #64]	; (8010250 <ipfrag_free_pbuf_custom+0x5c>)
 801020e:	4811      	ldr	r0, [pc, #68]	; (8010254 <ipfrag_free_pbuf_custom+0x60>)
 8010210:	f000 fa8a 	bl	8010728 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8010214:	68fa      	ldr	r2, [r7, #12]
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	429a      	cmp	r2, r3
 801021a:	d006      	beq.n	801022a <ipfrag_free_pbuf_custom+0x36>
 801021c:	4b0b      	ldr	r3, [pc, #44]	; (801024c <ipfrag_free_pbuf_custom+0x58>)
 801021e:	f240 22cf 	movw	r2, #719	; 0x2cf
 8010222:	490d      	ldr	r1, [pc, #52]	; (8010258 <ipfrag_free_pbuf_custom+0x64>)
 8010224:	480b      	ldr	r0, [pc, #44]	; (8010254 <ipfrag_free_pbuf_custom+0x60>)
 8010226:	f000 fa7f 	bl	8010728 <iprintf>
  if (pcr->original != NULL) {
 801022a:	68fb      	ldr	r3, [r7, #12]
 801022c:	695b      	ldr	r3, [r3, #20]
 801022e:	2b00      	cmp	r3, #0
 8010230:	d004      	beq.n	801023c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8010232:	68fb      	ldr	r3, [r7, #12]
 8010234:	695b      	ldr	r3, [r3, #20]
 8010236:	4618      	mov	r0, r3
 8010238:	f7f5 fece 	bl	8005fd8 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801023c:	68f8      	ldr	r0, [r7, #12]
 801023e:	f7ff ffbd 	bl	80101bc <ip_frag_free_pbuf_custom_ref>
}
 8010242:	bf00      	nop
 8010244:	3710      	adds	r7, #16
 8010246:	46bd      	mov	sp, r7
 8010248:	bd80      	pop	{r7, pc}
 801024a:	bf00      	nop
 801024c:	080143ac 	.word	0x080143ac
 8010250:	08014570 	.word	0x08014570
 8010254:	080143f4 	.word	0x080143f4
 8010258:	0801457c 	.word	0x0801457c

0801025c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801025c:	b580      	push	{r7, lr}
 801025e:	b094      	sub	sp, #80	; 0x50
 8010260:	af02      	add	r7, sp, #8
 8010262:	60f8      	str	r0, [r7, #12]
 8010264:	60b9      	str	r1, [r7, #8]
 8010266:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8010268:	2300      	movs	r3, #0
 801026a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801026e:	68bb      	ldr	r3, [r7, #8]
 8010270:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010272:	3b14      	subs	r3, #20
 8010274:	2b00      	cmp	r3, #0
 8010276:	da00      	bge.n	801027a <ip4_frag+0x1e>
 8010278:	3307      	adds	r3, #7
 801027a:	10db      	asrs	r3, r3, #3
 801027c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801027e:	2314      	movs	r3, #20
 8010280:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8010282:	68fb      	ldr	r3, [r7, #12]
 8010284:	685b      	ldr	r3, [r3, #4]
 8010286:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8010288:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801028a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801028c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801028e:	781b      	ldrb	r3, [r3, #0]
 8010290:	f003 030f 	and.w	r3, r3, #15
 8010294:	b2db      	uxtb	r3, r3
 8010296:	009b      	lsls	r3, r3, #2
 8010298:	b2db      	uxtb	r3, r3
 801029a:	2b14      	cmp	r3, #20
 801029c:	d002      	beq.n	80102a4 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801029e:	f06f 0305 	mvn.w	r3, #5
 80102a2:	e110      	b.n	80104c6 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80102a4:	68fb      	ldr	r3, [r7, #12]
 80102a6:	895b      	ldrh	r3, [r3, #10]
 80102a8:	2b13      	cmp	r3, #19
 80102aa:	d809      	bhi.n	80102c0 <ip4_frag+0x64>
 80102ac:	4b88      	ldr	r3, [pc, #544]	; (80104d0 <ip4_frag+0x274>)
 80102ae:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80102b2:	4988      	ldr	r1, [pc, #544]	; (80104d4 <ip4_frag+0x278>)
 80102b4:	4888      	ldr	r0, [pc, #544]	; (80104d8 <ip4_frag+0x27c>)
 80102b6:	f000 fa37 	bl	8010728 <iprintf>
 80102ba:	f06f 0305 	mvn.w	r3, #5
 80102be:	e102      	b.n	80104c6 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80102c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102c2:	88db      	ldrh	r3, [r3, #6]
 80102c4:	b29b      	uxth	r3, r3
 80102c6:	4618      	mov	r0, r3
 80102c8:	f7f4 fa84 	bl	80047d4 <lwip_htons>
 80102cc:	4603      	mov	r3, r0
 80102ce:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 80102d0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80102d2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80102d6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80102da:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80102dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80102e0:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 80102e2:	68fb      	ldr	r3, [r7, #12]
 80102e4:	891b      	ldrh	r3, [r3, #8]
 80102e6:	3b14      	subs	r3, #20
 80102e8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 80102ec:	e0e1      	b.n	80104b2 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80102ee:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80102f0:	00db      	lsls	r3, r3, #3
 80102f2:	b29b      	uxth	r3, r3
 80102f4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80102f8:	4293      	cmp	r3, r2
 80102fa:	bf28      	it	cs
 80102fc:	4613      	movcs	r3, r2
 80102fe:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8010300:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010304:	2114      	movs	r1, #20
 8010306:	200e      	movs	r0, #14
 8010308:	f7f5 fb82 	bl	8005a10 <pbuf_alloc>
 801030c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801030e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010310:	2b00      	cmp	r3, #0
 8010312:	f000 80d5 	beq.w	80104c0 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8010316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010318:	895b      	ldrh	r3, [r3, #10]
 801031a:	2b13      	cmp	r3, #19
 801031c:	d806      	bhi.n	801032c <ip4_frag+0xd0>
 801031e:	4b6c      	ldr	r3, [pc, #432]	; (80104d0 <ip4_frag+0x274>)
 8010320:	f44f 7249 	mov.w	r2, #804	; 0x324
 8010324:	496d      	ldr	r1, [pc, #436]	; (80104dc <ip4_frag+0x280>)
 8010326:	486c      	ldr	r0, [pc, #432]	; (80104d8 <ip4_frag+0x27c>)
 8010328:	f000 f9fe 	bl	8010728 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801032c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801032e:	685b      	ldr	r3, [r3, #4]
 8010330:	2214      	movs	r2, #20
 8010332:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010334:	4618      	mov	r0, r3
 8010336:	f000 f9e1 	bl	80106fc <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801033a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801033c:	685b      	ldr	r3, [r3, #4]
 801033e:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8010340:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010342:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8010346:	e064      	b.n	8010412 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8010348:	68fb      	ldr	r3, [r7, #12]
 801034a:	895a      	ldrh	r2, [r3, #10]
 801034c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801034e:	1ad3      	subs	r3, r2, r3
 8010350:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8010352:	68fb      	ldr	r3, [r7, #12]
 8010354:	895b      	ldrh	r3, [r3, #10]
 8010356:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8010358:	429a      	cmp	r2, r3
 801035a:	d906      	bls.n	801036a <ip4_frag+0x10e>
 801035c:	4b5c      	ldr	r3, [pc, #368]	; (80104d0 <ip4_frag+0x274>)
 801035e:	f240 322d 	movw	r2, #813	; 0x32d
 8010362:	495f      	ldr	r1, [pc, #380]	; (80104e0 <ip4_frag+0x284>)
 8010364:	485c      	ldr	r0, [pc, #368]	; (80104d8 <ip4_frag+0x27c>)
 8010366:	f000 f9df 	bl	8010728 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801036a:	8bfa      	ldrh	r2, [r7, #30]
 801036c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8010370:	4293      	cmp	r3, r2
 8010372:	bf28      	it	cs
 8010374:	4613      	movcs	r3, r2
 8010376:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801037a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801037e:	2b00      	cmp	r3, #0
 8010380:	d105      	bne.n	801038e <ip4_frag+0x132>
        poff = 0;
 8010382:	2300      	movs	r3, #0
 8010384:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8010386:	68fb      	ldr	r3, [r7, #12]
 8010388:	681b      	ldr	r3, [r3, #0]
 801038a:	60fb      	str	r3, [r7, #12]
        continue;
 801038c:	e041      	b.n	8010412 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801038e:	f7ff ff0d 	bl	80101ac <ip_frag_alloc_pbuf_custom_ref>
 8010392:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8010394:	69bb      	ldr	r3, [r7, #24]
 8010396:	2b00      	cmp	r3, #0
 8010398:	d103      	bne.n	80103a2 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801039a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801039c:	f7f5 fe1c 	bl	8005fd8 <pbuf_free>
        goto memerr;
 80103a0:	e08f      	b.n	80104c2 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80103a2:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80103a4:	68fb      	ldr	r3, [r7, #12]
 80103a6:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80103a8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80103aa:	4413      	add	r3, r2
 80103ac:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80103b0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80103b4:	9201      	str	r2, [sp, #4]
 80103b6:	9300      	str	r3, [sp, #0]
 80103b8:	4603      	mov	r3, r0
 80103ba:	2241      	movs	r2, #65	; 0x41
 80103bc:	2000      	movs	r0, #0
 80103be:	f7f5 fc51 	bl	8005c64 <pbuf_alloced_custom>
 80103c2:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80103c4:	697b      	ldr	r3, [r7, #20]
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	d106      	bne.n	80103d8 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80103ca:	69b8      	ldr	r0, [r7, #24]
 80103cc:	f7ff fef6 	bl	80101bc <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80103d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80103d2:	f7f5 fe01 	bl	8005fd8 <pbuf_free>
        goto memerr;
 80103d6:	e074      	b.n	80104c2 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 80103d8:	68f8      	ldr	r0, [r7, #12]
 80103da:	f7f5 fe9d 	bl	8006118 <pbuf_ref>
      pcr->original = p;
 80103de:	69bb      	ldr	r3, [r7, #24]
 80103e0:	68fa      	ldr	r2, [r7, #12]
 80103e2:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80103e4:	69bb      	ldr	r3, [r7, #24]
 80103e6:	4a3f      	ldr	r2, [pc, #252]	; (80104e4 <ip4_frag+0x288>)
 80103e8:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80103ea:	6979      	ldr	r1, [r7, #20]
 80103ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80103ee:	f7f5 feb5 	bl	800615c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80103f2:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80103f6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80103fa:	1ad3      	subs	r3, r2, r3
 80103fc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8010400:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8010404:	2b00      	cmp	r3, #0
 8010406:	d004      	beq.n	8010412 <ip4_frag+0x1b6>
        poff = 0;
 8010408:	2300      	movs	r3, #0
 801040a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801040c:	68fb      	ldr	r3, [r7, #12]
 801040e:	681b      	ldr	r3, [r3, #0]
 8010410:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8010412:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8010416:	2b00      	cmp	r3, #0
 8010418:	d196      	bne.n	8010348 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801041a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801041c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8010420:	4413      	add	r3, r2
 8010422:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8010424:	68bb      	ldr	r3, [r7, #8]
 8010426:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010428:	f1a3 0213 	sub.w	r2, r3, #19
 801042c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010430:	429a      	cmp	r2, r3
 8010432:	bfcc      	ite	gt
 8010434:	2301      	movgt	r3, #1
 8010436:	2300      	movle	r3, #0
 8010438:	b2db      	uxtb	r3, r3
 801043a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801043c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010440:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010444:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8010446:	6a3b      	ldr	r3, [r7, #32]
 8010448:	2b00      	cmp	r3, #0
 801044a:	d002      	beq.n	8010452 <ip4_frag+0x1f6>
 801044c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801044e:	2b00      	cmp	r3, #0
 8010450:	d003      	beq.n	801045a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8010452:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010454:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8010458:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801045a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801045c:	4618      	mov	r0, r3
 801045e:	f7f4 f9b9 	bl	80047d4 <lwip_htons>
 8010462:	4603      	mov	r3, r0
 8010464:	461a      	mov	r2, r3
 8010466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010468:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801046a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801046c:	3314      	adds	r3, #20
 801046e:	b29b      	uxth	r3, r3
 8010470:	4618      	mov	r0, r3
 8010472:	f7f4 f9af 	bl	80047d4 <lwip_htons>
 8010476:	4603      	mov	r3, r0
 8010478:	461a      	mov	r2, r3
 801047a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801047c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801047e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010480:	2200      	movs	r2, #0
 8010482:	729a      	strb	r2, [r3, #10]
 8010484:	2200      	movs	r2, #0
 8010486:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8010488:	68bb      	ldr	r3, [r7, #8]
 801048a:	695b      	ldr	r3, [r3, #20]
 801048c:	687a      	ldr	r2, [r7, #4]
 801048e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010490:	68b8      	ldr	r0, [r7, #8]
 8010492:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8010494:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010496:	f7f5 fd9f 	bl	8005fd8 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801049a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801049e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80104a0:	1ad3      	subs	r3, r2, r3
 80104a2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 80104a6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80104aa:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80104ac:	4413      	add	r3, r2
 80104ae:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 80104b2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80104b6:	2b00      	cmp	r3, #0
 80104b8:	f47f af19 	bne.w	80102ee <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80104bc:	2300      	movs	r3, #0
 80104be:	e002      	b.n	80104c6 <ip4_frag+0x26a>
      goto memerr;
 80104c0:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80104c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80104c6:	4618      	mov	r0, r3
 80104c8:	3748      	adds	r7, #72	; 0x48
 80104ca:	46bd      	mov	sp, r7
 80104cc:	bd80      	pop	{r7, pc}
 80104ce:	bf00      	nop
 80104d0:	080143ac 	.word	0x080143ac
 80104d4:	08014588 	.word	0x08014588
 80104d8:	080143f4 	.word	0x080143f4
 80104dc:	080145a4 	.word	0x080145a4
 80104e0:	080145c4 	.word	0x080145c4
 80104e4:	080101f5 	.word	0x080101f5

080104e8 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80104e8:	b580      	push	{r7, lr}
 80104ea:	b086      	sub	sp, #24
 80104ec:	af00      	add	r7, sp, #0
 80104ee:	6078      	str	r0, [r7, #4]
 80104f0:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 80104f2:	230e      	movs	r3, #14
 80104f4:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	895b      	ldrh	r3, [r3, #10]
 80104fa:	2b0e      	cmp	r3, #14
 80104fc:	d96e      	bls.n	80105dc <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	7bdb      	ldrb	r3, [r3, #15]
 8010502:	2b00      	cmp	r3, #0
 8010504:	d106      	bne.n	8010514 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8010506:	683b      	ldr	r3, [r7, #0]
 8010508:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801050c:	3301      	adds	r3, #1
 801050e:	b2da      	uxtb	r2, r3
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	685b      	ldr	r3, [r3, #4]
 8010518:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801051a:	693b      	ldr	r3, [r7, #16]
 801051c:	7b1a      	ldrb	r2, [r3, #12]
 801051e:	7b5b      	ldrb	r3, [r3, #13]
 8010520:	021b      	lsls	r3, r3, #8
 8010522:	4313      	orrs	r3, r2
 8010524:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8010526:	693b      	ldr	r3, [r7, #16]
 8010528:	781b      	ldrb	r3, [r3, #0]
 801052a:	f003 0301 	and.w	r3, r3, #1
 801052e:	2b00      	cmp	r3, #0
 8010530:	d023      	beq.n	801057a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8010532:	693b      	ldr	r3, [r7, #16]
 8010534:	781b      	ldrb	r3, [r3, #0]
 8010536:	2b01      	cmp	r3, #1
 8010538:	d10f      	bne.n	801055a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801053a:	693b      	ldr	r3, [r7, #16]
 801053c:	785b      	ldrb	r3, [r3, #1]
 801053e:	2b00      	cmp	r3, #0
 8010540:	d11b      	bne.n	801057a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8010542:	693b      	ldr	r3, [r7, #16]
 8010544:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8010546:	2b5e      	cmp	r3, #94	; 0x5e
 8010548:	d117      	bne.n	801057a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	7b5b      	ldrb	r3, [r3, #13]
 801054e:	f043 0310 	orr.w	r3, r3, #16
 8010552:	b2da      	uxtb	r2, r3
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	735a      	strb	r2, [r3, #13]
 8010558:	e00f      	b.n	801057a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801055a:	693b      	ldr	r3, [r7, #16]
 801055c:	2206      	movs	r2, #6
 801055e:	4928      	ldr	r1, [pc, #160]	; (8010600 <ethernet_input+0x118>)
 8010560:	4618      	mov	r0, r3
 8010562:	f000 f8bb 	bl	80106dc <memcmp>
 8010566:	4603      	mov	r3, r0
 8010568:	2b00      	cmp	r3, #0
 801056a:	d106      	bne.n	801057a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	7b5b      	ldrb	r3, [r3, #13]
 8010570:	f043 0308 	orr.w	r3, r3, #8
 8010574:	b2da      	uxtb	r2, r3
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801057a:	89fb      	ldrh	r3, [r7, #14]
 801057c:	2b08      	cmp	r3, #8
 801057e:	d003      	beq.n	8010588 <ethernet_input+0xa0>
 8010580:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8010584:	d014      	beq.n	80105b0 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8010586:	e032      	b.n	80105ee <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8010588:	683b      	ldr	r3, [r7, #0]
 801058a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801058e:	f003 0308 	and.w	r3, r3, #8
 8010592:	2b00      	cmp	r3, #0
 8010594:	d024      	beq.n	80105e0 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8010596:	8afb      	ldrh	r3, [r7, #22]
 8010598:	4619      	mov	r1, r3
 801059a:	6878      	ldr	r0, [r7, #4]
 801059c:	f7f5 fc96 	bl	8005ecc <pbuf_remove_header>
 80105a0:	4603      	mov	r3, r0
 80105a2:	2b00      	cmp	r3, #0
 80105a4:	d11e      	bne.n	80105e4 <ethernet_input+0xfc>
        ip4_input(p, netif);
 80105a6:	6839      	ldr	r1, [r7, #0]
 80105a8:	6878      	ldr	r0, [r7, #4]
 80105aa:	f7fe ff03 	bl	800f3b4 <ip4_input>
      break;
 80105ae:	e013      	b.n	80105d8 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80105b0:	683b      	ldr	r3, [r7, #0]
 80105b2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80105b6:	f003 0308 	and.w	r3, r3, #8
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	d014      	beq.n	80105e8 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80105be:	8afb      	ldrh	r3, [r7, #22]
 80105c0:	4619      	mov	r1, r3
 80105c2:	6878      	ldr	r0, [r7, #4]
 80105c4:	f7f5 fc82 	bl	8005ecc <pbuf_remove_header>
 80105c8:	4603      	mov	r3, r0
 80105ca:	2b00      	cmp	r3, #0
 80105cc:	d10e      	bne.n	80105ec <ethernet_input+0x104>
        etharp_input(p, netif);
 80105ce:	6839      	ldr	r1, [r7, #0]
 80105d0:	6878      	ldr	r0, [r7, #4]
 80105d2:	f7fe f879 	bl	800e6c8 <etharp_input>
      break;
 80105d6:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80105d8:	2300      	movs	r3, #0
 80105da:	e00c      	b.n	80105f6 <ethernet_input+0x10e>
    goto free_and_return;
 80105dc:	bf00      	nop
 80105de:	e006      	b.n	80105ee <ethernet_input+0x106>
        goto free_and_return;
 80105e0:	bf00      	nop
 80105e2:	e004      	b.n	80105ee <ethernet_input+0x106>
        goto free_and_return;
 80105e4:	bf00      	nop
 80105e6:	e002      	b.n	80105ee <ethernet_input+0x106>
        goto free_and_return;
 80105e8:	bf00      	nop
 80105ea:	e000      	b.n	80105ee <ethernet_input+0x106>
        goto free_and_return;
 80105ec:	bf00      	nop

free_and_return:
  pbuf_free(p);
 80105ee:	6878      	ldr	r0, [r7, #4]
 80105f0:	f7f5 fcf2 	bl	8005fd8 <pbuf_free>
  return ERR_OK;
 80105f4:	2300      	movs	r3, #0
}
 80105f6:	4618      	mov	r0, r3
 80105f8:	3718      	adds	r7, #24
 80105fa:	46bd      	mov	sp, r7
 80105fc:	bd80      	pop	{r7, pc}
 80105fe:	bf00      	nop
 8010600:	08014774 	.word	0x08014774

08010604 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8010604:	b580      	push	{r7, lr}
 8010606:	b086      	sub	sp, #24
 8010608:	af00      	add	r7, sp, #0
 801060a:	60f8      	str	r0, [r7, #12]
 801060c:	60b9      	str	r1, [r7, #8]
 801060e:	607a      	str	r2, [r7, #4]
 8010610:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8010612:	8c3b      	ldrh	r3, [r7, #32]
 8010614:	4618      	mov	r0, r3
 8010616:	f7f4 f8dd 	bl	80047d4 <lwip_htons>
 801061a:	4603      	mov	r3, r0
 801061c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801061e:	210e      	movs	r1, #14
 8010620:	68b8      	ldr	r0, [r7, #8]
 8010622:	f7f5 fc43 	bl	8005eac <pbuf_add_header>
 8010626:	4603      	mov	r3, r0
 8010628:	2b00      	cmp	r3, #0
 801062a:	d125      	bne.n	8010678 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801062c:	68bb      	ldr	r3, [r7, #8]
 801062e:	685b      	ldr	r3, [r3, #4]
 8010630:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8010632:	693b      	ldr	r3, [r7, #16]
 8010634:	8afa      	ldrh	r2, [r7, #22]
 8010636:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8010638:	693b      	ldr	r3, [r7, #16]
 801063a:	2206      	movs	r2, #6
 801063c:	6839      	ldr	r1, [r7, #0]
 801063e:	4618      	mov	r0, r3
 8010640:	f000 f85c 	bl	80106fc <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8010644:	693b      	ldr	r3, [r7, #16]
 8010646:	3306      	adds	r3, #6
 8010648:	2206      	movs	r2, #6
 801064a:	6879      	ldr	r1, [r7, #4]
 801064c:	4618      	mov	r0, r3
 801064e:	f000 f855 	bl	80106fc <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8010652:	68fb      	ldr	r3, [r7, #12]
 8010654:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010658:	2b06      	cmp	r3, #6
 801065a:	d006      	beq.n	801066a <ethernet_output+0x66>
 801065c:	4b0a      	ldr	r3, [pc, #40]	; (8010688 <ethernet_output+0x84>)
 801065e:	f44f 7299 	mov.w	r2, #306	; 0x132
 8010662:	490a      	ldr	r1, [pc, #40]	; (801068c <ethernet_output+0x88>)
 8010664:	480a      	ldr	r0, [pc, #40]	; (8010690 <ethernet_output+0x8c>)
 8010666:	f000 f85f 	bl	8010728 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801066a:	68fb      	ldr	r3, [r7, #12]
 801066c:	699b      	ldr	r3, [r3, #24]
 801066e:	68b9      	ldr	r1, [r7, #8]
 8010670:	68f8      	ldr	r0, [r7, #12]
 8010672:	4798      	blx	r3
 8010674:	4603      	mov	r3, r0
 8010676:	e002      	b.n	801067e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8010678:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801067a:	f06f 0301 	mvn.w	r3, #1
}
 801067e:	4618      	mov	r0, r3
 8010680:	3718      	adds	r7, #24
 8010682:	46bd      	mov	sp, r7
 8010684:	bd80      	pop	{r7, pc}
 8010686:	bf00      	nop
 8010688:	080145d4 	.word	0x080145d4
 801068c:	0801460c 	.word	0x0801460c
 8010690:	08014640 	.word	0x08014640

08010694 <__libc_init_array>:
 8010694:	b570      	push	{r4, r5, r6, lr}
 8010696:	4d0d      	ldr	r5, [pc, #52]	; (80106cc <__libc_init_array+0x38>)
 8010698:	4c0d      	ldr	r4, [pc, #52]	; (80106d0 <__libc_init_array+0x3c>)
 801069a:	1b64      	subs	r4, r4, r5
 801069c:	10a4      	asrs	r4, r4, #2
 801069e:	2600      	movs	r6, #0
 80106a0:	42a6      	cmp	r6, r4
 80106a2:	d109      	bne.n	80106b8 <__libc_init_array+0x24>
 80106a4:	4d0b      	ldr	r5, [pc, #44]	; (80106d4 <__libc_init_array+0x40>)
 80106a6:	4c0c      	ldr	r4, [pc, #48]	; (80106d8 <__libc_init_array+0x44>)
 80106a8:	f001 f904 	bl	80118b4 <_init>
 80106ac:	1b64      	subs	r4, r4, r5
 80106ae:	10a4      	asrs	r4, r4, #2
 80106b0:	2600      	movs	r6, #0
 80106b2:	42a6      	cmp	r6, r4
 80106b4:	d105      	bne.n	80106c2 <__libc_init_array+0x2e>
 80106b6:	bd70      	pop	{r4, r5, r6, pc}
 80106b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80106bc:	4798      	blx	r3
 80106be:	3601      	adds	r6, #1
 80106c0:	e7ee      	b.n	80106a0 <__libc_init_array+0xc>
 80106c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80106c6:	4798      	blx	r3
 80106c8:	3601      	adds	r6, #1
 80106ca:	e7f2      	b.n	80106b2 <__libc_init_array+0x1e>
 80106cc:	080148d4 	.word	0x080148d4
 80106d0:	080148d4 	.word	0x080148d4
 80106d4:	080148d4 	.word	0x080148d4
 80106d8:	080148d8 	.word	0x080148d8

080106dc <memcmp>:
 80106dc:	b510      	push	{r4, lr}
 80106de:	3901      	subs	r1, #1
 80106e0:	4402      	add	r2, r0
 80106e2:	4290      	cmp	r0, r2
 80106e4:	d101      	bne.n	80106ea <memcmp+0xe>
 80106e6:	2000      	movs	r0, #0
 80106e8:	e005      	b.n	80106f6 <memcmp+0x1a>
 80106ea:	7803      	ldrb	r3, [r0, #0]
 80106ec:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80106f0:	42a3      	cmp	r3, r4
 80106f2:	d001      	beq.n	80106f8 <memcmp+0x1c>
 80106f4:	1b18      	subs	r0, r3, r4
 80106f6:	bd10      	pop	{r4, pc}
 80106f8:	3001      	adds	r0, #1
 80106fa:	e7f2      	b.n	80106e2 <memcmp+0x6>

080106fc <memcpy>:
 80106fc:	440a      	add	r2, r1
 80106fe:	4291      	cmp	r1, r2
 8010700:	f100 33ff 	add.w	r3, r0, #4294967295
 8010704:	d100      	bne.n	8010708 <memcpy+0xc>
 8010706:	4770      	bx	lr
 8010708:	b510      	push	{r4, lr}
 801070a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801070e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010712:	4291      	cmp	r1, r2
 8010714:	d1f9      	bne.n	801070a <memcpy+0xe>
 8010716:	bd10      	pop	{r4, pc}

08010718 <memset>:
 8010718:	4402      	add	r2, r0
 801071a:	4603      	mov	r3, r0
 801071c:	4293      	cmp	r3, r2
 801071e:	d100      	bne.n	8010722 <memset+0xa>
 8010720:	4770      	bx	lr
 8010722:	f803 1b01 	strb.w	r1, [r3], #1
 8010726:	e7f9      	b.n	801071c <memset+0x4>

08010728 <iprintf>:
 8010728:	b40f      	push	{r0, r1, r2, r3}
 801072a:	4b0a      	ldr	r3, [pc, #40]	; (8010754 <iprintf+0x2c>)
 801072c:	b513      	push	{r0, r1, r4, lr}
 801072e:	681c      	ldr	r4, [r3, #0]
 8010730:	b124      	cbz	r4, 801073c <iprintf+0x14>
 8010732:	69a3      	ldr	r3, [r4, #24]
 8010734:	b913      	cbnz	r3, 801073c <iprintf+0x14>
 8010736:	4620      	mov	r0, r4
 8010738:	f000 faba 	bl	8010cb0 <__sinit>
 801073c:	ab05      	add	r3, sp, #20
 801073e:	9a04      	ldr	r2, [sp, #16]
 8010740:	68a1      	ldr	r1, [r4, #8]
 8010742:	9301      	str	r3, [sp, #4]
 8010744:	4620      	mov	r0, r4
 8010746:	f000 fcdd 	bl	8011104 <_vfiprintf_r>
 801074a:	b002      	add	sp, #8
 801074c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010750:	b004      	add	sp, #16
 8010752:	4770      	bx	lr
 8010754:	20000030 	.word	0x20000030

08010758 <_puts_r>:
 8010758:	b570      	push	{r4, r5, r6, lr}
 801075a:	460e      	mov	r6, r1
 801075c:	4605      	mov	r5, r0
 801075e:	b118      	cbz	r0, 8010768 <_puts_r+0x10>
 8010760:	6983      	ldr	r3, [r0, #24]
 8010762:	b90b      	cbnz	r3, 8010768 <_puts_r+0x10>
 8010764:	f000 faa4 	bl	8010cb0 <__sinit>
 8010768:	69ab      	ldr	r3, [r5, #24]
 801076a:	68ac      	ldr	r4, [r5, #8]
 801076c:	b913      	cbnz	r3, 8010774 <_puts_r+0x1c>
 801076e:	4628      	mov	r0, r5
 8010770:	f000 fa9e 	bl	8010cb0 <__sinit>
 8010774:	4b2c      	ldr	r3, [pc, #176]	; (8010828 <_puts_r+0xd0>)
 8010776:	429c      	cmp	r4, r3
 8010778:	d120      	bne.n	80107bc <_puts_r+0x64>
 801077a:	686c      	ldr	r4, [r5, #4]
 801077c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801077e:	07db      	lsls	r3, r3, #31
 8010780:	d405      	bmi.n	801078e <_puts_r+0x36>
 8010782:	89a3      	ldrh	r3, [r4, #12]
 8010784:	0598      	lsls	r0, r3, #22
 8010786:	d402      	bmi.n	801078e <_puts_r+0x36>
 8010788:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801078a:	f000 fb41 	bl	8010e10 <__retarget_lock_acquire_recursive>
 801078e:	89a3      	ldrh	r3, [r4, #12]
 8010790:	0719      	lsls	r1, r3, #28
 8010792:	d51d      	bpl.n	80107d0 <_puts_r+0x78>
 8010794:	6923      	ldr	r3, [r4, #16]
 8010796:	b1db      	cbz	r3, 80107d0 <_puts_r+0x78>
 8010798:	3e01      	subs	r6, #1
 801079a:	68a3      	ldr	r3, [r4, #8]
 801079c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80107a0:	3b01      	subs	r3, #1
 80107a2:	60a3      	str	r3, [r4, #8]
 80107a4:	bb39      	cbnz	r1, 80107f6 <_puts_r+0x9e>
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	da38      	bge.n	801081c <_puts_r+0xc4>
 80107aa:	4622      	mov	r2, r4
 80107ac:	210a      	movs	r1, #10
 80107ae:	4628      	mov	r0, r5
 80107b0:	f000 f886 	bl	80108c0 <__swbuf_r>
 80107b4:	3001      	adds	r0, #1
 80107b6:	d011      	beq.n	80107dc <_puts_r+0x84>
 80107b8:	250a      	movs	r5, #10
 80107ba:	e011      	b.n	80107e0 <_puts_r+0x88>
 80107bc:	4b1b      	ldr	r3, [pc, #108]	; (801082c <_puts_r+0xd4>)
 80107be:	429c      	cmp	r4, r3
 80107c0:	d101      	bne.n	80107c6 <_puts_r+0x6e>
 80107c2:	68ac      	ldr	r4, [r5, #8]
 80107c4:	e7da      	b.n	801077c <_puts_r+0x24>
 80107c6:	4b1a      	ldr	r3, [pc, #104]	; (8010830 <_puts_r+0xd8>)
 80107c8:	429c      	cmp	r4, r3
 80107ca:	bf08      	it	eq
 80107cc:	68ec      	ldreq	r4, [r5, #12]
 80107ce:	e7d5      	b.n	801077c <_puts_r+0x24>
 80107d0:	4621      	mov	r1, r4
 80107d2:	4628      	mov	r0, r5
 80107d4:	f000 f8c6 	bl	8010964 <__swsetup_r>
 80107d8:	2800      	cmp	r0, #0
 80107da:	d0dd      	beq.n	8010798 <_puts_r+0x40>
 80107dc:	f04f 35ff 	mov.w	r5, #4294967295
 80107e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80107e2:	07da      	lsls	r2, r3, #31
 80107e4:	d405      	bmi.n	80107f2 <_puts_r+0x9a>
 80107e6:	89a3      	ldrh	r3, [r4, #12]
 80107e8:	059b      	lsls	r3, r3, #22
 80107ea:	d402      	bmi.n	80107f2 <_puts_r+0x9a>
 80107ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80107ee:	f000 fb10 	bl	8010e12 <__retarget_lock_release_recursive>
 80107f2:	4628      	mov	r0, r5
 80107f4:	bd70      	pop	{r4, r5, r6, pc}
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	da04      	bge.n	8010804 <_puts_r+0xac>
 80107fa:	69a2      	ldr	r2, [r4, #24]
 80107fc:	429a      	cmp	r2, r3
 80107fe:	dc06      	bgt.n	801080e <_puts_r+0xb6>
 8010800:	290a      	cmp	r1, #10
 8010802:	d004      	beq.n	801080e <_puts_r+0xb6>
 8010804:	6823      	ldr	r3, [r4, #0]
 8010806:	1c5a      	adds	r2, r3, #1
 8010808:	6022      	str	r2, [r4, #0]
 801080a:	7019      	strb	r1, [r3, #0]
 801080c:	e7c5      	b.n	801079a <_puts_r+0x42>
 801080e:	4622      	mov	r2, r4
 8010810:	4628      	mov	r0, r5
 8010812:	f000 f855 	bl	80108c0 <__swbuf_r>
 8010816:	3001      	adds	r0, #1
 8010818:	d1bf      	bne.n	801079a <_puts_r+0x42>
 801081a:	e7df      	b.n	80107dc <_puts_r+0x84>
 801081c:	6823      	ldr	r3, [r4, #0]
 801081e:	250a      	movs	r5, #10
 8010820:	1c5a      	adds	r2, r3, #1
 8010822:	6022      	str	r2, [r4, #0]
 8010824:	701d      	strb	r5, [r3, #0]
 8010826:	e7db      	b.n	80107e0 <_puts_r+0x88>
 8010828:	08014858 	.word	0x08014858
 801082c:	08014878 	.word	0x08014878
 8010830:	08014838 	.word	0x08014838

08010834 <puts>:
 8010834:	4b02      	ldr	r3, [pc, #8]	; (8010840 <puts+0xc>)
 8010836:	4601      	mov	r1, r0
 8010838:	6818      	ldr	r0, [r3, #0]
 801083a:	f7ff bf8d 	b.w	8010758 <_puts_r>
 801083e:	bf00      	nop
 8010840:	20000030 	.word	0x20000030

08010844 <rand>:
 8010844:	4b16      	ldr	r3, [pc, #88]	; (80108a0 <rand+0x5c>)
 8010846:	b510      	push	{r4, lr}
 8010848:	681c      	ldr	r4, [r3, #0]
 801084a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801084c:	b9b3      	cbnz	r3, 801087c <rand+0x38>
 801084e:	2018      	movs	r0, #24
 8010850:	f000 fb46 	bl	8010ee0 <malloc>
 8010854:	63a0      	str	r0, [r4, #56]	; 0x38
 8010856:	b928      	cbnz	r0, 8010864 <rand+0x20>
 8010858:	4602      	mov	r2, r0
 801085a:	4b12      	ldr	r3, [pc, #72]	; (80108a4 <rand+0x60>)
 801085c:	4812      	ldr	r0, [pc, #72]	; (80108a8 <rand+0x64>)
 801085e:	214e      	movs	r1, #78	; 0x4e
 8010860:	f000 f8ee 	bl	8010a40 <__assert_func>
 8010864:	4a11      	ldr	r2, [pc, #68]	; (80108ac <rand+0x68>)
 8010866:	4b12      	ldr	r3, [pc, #72]	; (80108b0 <rand+0x6c>)
 8010868:	e9c0 2300 	strd	r2, r3, [r0]
 801086c:	4b11      	ldr	r3, [pc, #68]	; (80108b4 <rand+0x70>)
 801086e:	6083      	str	r3, [r0, #8]
 8010870:	230b      	movs	r3, #11
 8010872:	8183      	strh	r3, [r0, #12]
 8010874:	2201      	movs	r2, #1
 8010876:	2300      	movs	r3, #0
 8010878:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801087c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 801087e:	4a0e      	ldr	r2, [pc, #56]	; (80108b8 <rand+0x74>)
 8010880:	6920      	ldr	r0, [r4, #16]
 8010882:	6963      	ldr	r3, [r4, #20]
 8010884:	490d      	ldr	r1, [pc, #52]	; (80108bc <rand+0x78>)
 8010886:	4342      	muls	r2, r0
 8010888:	fb01 2203 	mla	r2, r1, r3, r2
 801088c:	fba0 0101 	umull	r0, r1, r0, r1
 8010890:	1c43      	adds	r3, r0, #1
 8010892:	eb42 0001 	adc.w	r0, r2, r1
 8010896:	e9c4 3004 	strd	r3, r0, [r4, #16]
 801089a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801089e:	bd10      	pop	{r4, pc}
 80108a0:	20000030 	.word	0x20000030
 80108a4:	08014788 	.word	0x08014788
 80108a8:	0801479f 	.word	0x0801479f
 80108ac:	abcd330e 	.word	0xabcd330e
 80108b0:	e66d1234 	.word	0xe66d1234
 80108b4:	0005deec 	.word	0x0005deec
 80108b8:	5851f42d 	.word	0x5851f42d
 80108bc:	4c957f2d 	.word	0x4c957f2d

080108c0 <__swbuf_r>:
 80108c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80108c2:	460e      	mov	r6, r1
 80108c4:	4614      	mov	r4, r2
 80108c6:	4605      	mov	r5, r0
 80108c8:	b118      	cbz	r0, 80108d2 <__swbuf_r+0x12>
 80108ca:	6983      	ldr	r3, [r0, #24]
 80108cc:	b90b      	cbnz	r3, 80108d2 <__swbuf_r+0x12>
 80108ce:	f000 f9ef 	bl	8010cb0 <__sinit>
 80108d2:	4b21      	ldr	r3, [pc, #132]	; (8010958 <__swbuf_r+0x98>)
 80108d4:	429c      	cmp	r4, r3
 80108d6:	d12b      	bne.n	8010930 <__swbuf_r+0x70>
 80108d8:	686c      	ldr	r4, [r5, #4]
 80108da:	69a3      	ldr	r3, [r4, #24]
 80108dc:	60a3      	str	r3, [r4, #8]
 80108de:	89a3      	ldrh	r3, [r4, #12]
 80108e0:	071a      	lsls	r2, r3, #28
 80108e2:	d52f      	bpl.n	8010944 <__swbuf_r+0x84>
 80108e4:	6923      	ldr	r3, [r4, #16]
 80108e6:	b36b      	cbz	r3, 8010944 <__swbuf_r+0x84>
 80108e8:	6923      	ldr	r3, [r4, #16]
 80108ea:	6820      	ldr	r0, [r4, #0]
 80108ec:	1ac0      	subs	r0, r0, r3
 80108ee:	6963      	ldr	r3, [r4, #20]
 80108f0:	b2f6      	uxtb	r6, r6
 80108f2:	4283      	cmp	r3, r0
 80108f4:	4637      	mov	r7, r6
 80108f6:	dc04      	bgt.n	8010902 <__swbuf_r+0x42>
 80108f8:	4621      	mov	r1, r4
 80108fa:	4628      	mov	r0, r5
 80108fc:	f000 f944 	bl	8010b88 <_fflush_r>
 8010900:	bb30      	cbnz	r0, 8010950 <__swbuf_r+0x90>
 8010902:	68a3      	ldr	r3, [r4, #8]
 8010904:	3b01      	subs	r3, #1
 8010906:	60a3      	str	r3, [r4, #8]
 8010908:	6823      	ldr	r3, [r4, #0]
 801090a:	1c5a      	adds	r2, r3, #1
 801090c:	6022      	str	r2, [r4, #0]
 801090e:	701e      	strb	r6, [r3, #0]
 8010910:	6963      	ldr	r3, [r4, #20]
 8010912:	3001      	adds	r0, #1
 8010914:	4283      	cmp	r3, r0
 8010916:	d004      	beq.n	8010922 <__swbuf_r+0x62>
 8010918:	89a3      	ldrh	r3, [r4, #12]
 801091a:	07db      	lsls	r3, r3, #31
 801091c:	d506      	bpl.n	801092c <__swbuf_r+0x6c>
 801091e:	2e0a      	cmp	r6, #10
 8010920:	d104      	bne.n	801092c <__swbuf_r+0x6c>
 8010922:	4621      	mov	r1, r4
 8010924:	4628      	mov	r0, r5
 8010926:	f000 f92f 	bl	8010b88 <_fflush_r>
 801092a:	b988      	cbnz	r0, 8010950 <__swbuf_r+0x90>
 801092c:	4638      	mov	r0, r7
 801092e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010930:	4b0a      	ldr	r3, [pc, #40]	; (801095c <__swbuf_r+0x9c>)
 8010932:	429c      	cmp	r4, r3
 8010934:	d101      	bne.n	801093a <__swbuf_r+0x7a>
 8010936:	68ac      	ldr	r4, [r5, #8]
 8010938:	e7cf      	b.n	80108da <__swbuf_r+0x1a>
 801093a:	4b09      	ldr	r3, [pc, #36]	; (8010960 <__swbuf_r+0xa0>)
 801093c:	429c      	cmp	r4, r3
 801093e:	bf08      	it	eq
 8010940:	68ec      	ldreq	r4, [r5, #12]
 8010942:	e7ca      	b.n	80108da <__swbuf_r+0x1a>
 8010944:	4621      	mov	r1, r4
 8010946:	4628      	mov	r0, r5
 8010948:	f000 f80c 	bl	8010964 <__swsetup_r>
 801094c:	2800      	cmp	r0, #0
 801094e:	d0cb      	beq.n	80108e8 <__swbuf_r+0x28>
 8010950:	f04f 37ff 	mov.w	r7, #4294967295
 8010954:	e7ea      	b.n	801092c <__swbuf_r+0x6c>
 8010956:	bf00      	nop
 8010958:	08014858 	.word	0x08014858
 801095c:	08014878 	.word	0x08014878
 8010960:	08014838 	.word	0x08014838

08010964 <__swsetup_r>:
 8010964:	4b32      	ldr	r3, [pc, #200]	; (8010a30 <__swsetup_r+0xcc>)
 8010966:	b570      	push	{r4, r5, r6, lr}
 8010968:	681d      	ldr	r5, [r3, #0]
 801096a:	4606      	mov	r6, r0
 801096c:	460c      	mov	r4, r1
 801096e:	b125      	cbz	r5, 801097a <__swsetup_r+0x16>
 8010970:	69ab      	ldr	r3, [r5, #24]
 8010972:	b913      	cbnz	r3, 801097a <__swsetup_r+0x16>
 8010974:	4628      	mov	r0, r5
 8010976:	f000 f99b 	bl	8010cb0 <__sinit>
 801097a:	4b2e      	ldr	r3, [pc, #184]	; (8010a34 <__swsetup_r+0xd0>)
 801097c:	429c      	cmp	r4, r3
 801097e:	d10f      	bne.n	80109a0 <__swsetup_r+0x3c>
 8010980:	686c      	ldr	r4, [r5, #4]
 8010982:	89a3      	ldrh	r3, [r4, #12]
 8010984:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010988:	0719      	lsls	r1, r3, #28
 801098a:	d42c      	bmi.n	80109e6 <__swsetup_r+0x82>
 801098c:	06dd      	lsls	r5, r3, #27
 801098e:	d411      	bmi.n	80109b4 <__swsetup_r+0x50>
 8010990:	2309      	movs	r3, #9
 8010992:	6033      	str	r3, [r6, #0]
 8010994:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010998:	81a3      	strh	r3, [r4, #12]
 801099a:	f04f 30ff 	mov.w	r0, #4294967295
 801099e:	e03e      	b.n	8010a1e <__swsetup_r+0xba>
 80109a0:	4b25      	ldr	r3, [pc, #148]	; (8010a38 <__swsetup_r+0xd4>)
 80109a2:	429c      	cmp	r4, r3
 80109a4:	d101      	bne.n	80109aa <__swsetup_r+0x46>
 80109a6:	68ac      	ldr	r4, [r5, #8]
 80109a8:	e7eb      	b.n	8010982 <__swsetup_r+0x1e>
 80109aa:	4b24      	ldr	r3, [pc, #144]	; (8010a3c <__swsetup_r+0xd8>)
 80109ac:	429c      	cmp	r4, r3
 80109ae:	bf08      	it	eq
 80109b0:	68ec      	ldreq	r4, [r5, #12]
 80109b2:	e7e6      	b.n	8010982 <__swsetup_r+0x1e>
 80109b4:	0758      	lsls	r0, r3, #29
 80109b6:	d512      	bpl.n	80109de <__swsetup_r+0x7a>
 80109b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80109ba:	b141      	cbz	r1, 80109ce <__swsetup_r+0x6a>
 80109bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80109c0:	4299      	cmp	r1, r3
 80109c2:	d002      	beq.n	80109ca <__swsetup_r+0x66>
 80109c4:	4630      	mov	r0, r6
 80109c6:	f000 fa93 	bl	8010ef0 <_free_r>
 80109ca:	2300      	movs	r3, #0
 80109cc:	6363      	str	r3, [r4, #52]	; 0x34
 80109ce:	89a3      	ldrh	r3, [r4, #12]
 80109d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80109d4:	81a3      	strh	r3, [r4, #12]
 80109d6:	2300      	movs	r3, #0
 80109d8:	6063      	str	r3, [r4, #4]
 80109da:	6923      	ldr	r3, [r4, #16]
 80109dc:	6023      	str	r3, [r4, #0]
 80109de:	89a3      	ldrh	r3, [r4, #12]
 80109e0:	f043 0308 	orr.w	r3, r3, #8
 80109e4:	81a3      	strh	r3, [r4, #12]
 80109e6:	6923      	ldr	r3, [r4, #16]
 80109e8:	b94b      	cbnz	r3, 80109fe <__swsetup_r+0x9a>
 80109ea:	89a3      	ldrh	r3, [r4, #12]
 80109ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80109f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80109f4:	d003      	beq.n	80109fe <__swsetup_r+0x9a>
 80109f6:	4621      	mov	r1, r4
 80109f8:	4630      	mov	r0, r6
 80109fa:	f000 fa31 	bl	8010e60 <__smakebuf_r>
 80109fe:	89a0      	ldrh	r0, [r4, #12]
 8010a00:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010a04:	f010 0301 	ands.w	r3, r0, #1
 8010a08:	d00a      	beq.n	8010a20 <__swsetup_r+0xbc>
 8010a0a:	2300      	movs	r3, #0
 8010a0c:	60a3      	str	r3, [r4, #8]
 8010a0e:	6963      	ldr	r3, [r4, #20]
 8010a10:	425b      	negs	r3, r3
 8010a12:	61a3      	str	r3, [r4, #24]
 8010a14:	6923      	ldr	r3, [r4, #16]
 8010a16:	b943      	cbnz	r3, 8010a2a <__swsetup_r+0xc6>
 8010a18:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010a1c:	d1ba      	bne.n	8010994 <__swsetup_r+0x30>
 8010a1e:	bd70      	pop	{r4, r5, r6, pc}
 8010a20:	0781      	lsls	r1, r0, #30
 8010a22:	bf58      	it	pl
 8010a24:	6963      	ldrpl	r3, [r4, #20]
 8010a26:	60a3      	str	r3, [r4, #8]
 8010a28:	e7f4      	b.n	8010a14 <__swsetup_r+0xb0>
 8010a2a:	2000      	movs	r0, #0
 8010a2c:	e7f7      	b.n	8010a1e <__swsetup_r+0xba>
 8010a2e:	bf00      	nop
 8010a30:	20000030 	.word	0x20000030
 8010a34:	08014858 	.word	0x08014858
 8010a38:	08014878 	.word	0x08014878
 8010a3c:	08014838 	.word	0x08014838

08010a40 <__assert_func>:
 8010a40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010a42:	4614      	mov	r4, r2
 8010a44:	461a      	mov	r2, r3
 8010a46:	4b09      	ldr	r3, [pc, #36]	; (8010a6c <__assert_func+0x2c>)
 8010a48:	681b      	ldr	r3, [r3, #0]
 8010a4a:	4605      	mov	r5, r0
 8010a4c:	68d8      	ldr	r0, [r3, #12]
 8010a4e:	b14c      	cbz	r4, 8010a64 <__assert_func+0x24>
 8010a50:	4b07      	ldr	r3, [pc, #28]	; (8010a70 <__assert_func+0x30>)
 8010a52:	9100      	str	r1, [sp, #0]
 8010a54:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010a58:	4906      	ldr	r1, [pc, #24]	; (8010a74 <__assert_func+0x34>)
 8010a5a:	462b      	mov	r3, r5
 8010a5c:	f000 f9a6 	bl	8010dac <fiprintf>
 8010a60:	f000 fe7a 	bl	8011758 <abort>
 8010a64:	4b04      	ldr	r3, [pc, #16]	; (8010a78 <__assert_func+0x38>)
 8010a66:	461c      	mov	r4, r3
 8010a68:	e7f3      	b.n	8010a52 <__assert_func+0x12>
 8010a6a:	bf00      	nop
 8010a6c:	20000030 	.word	0x20000030
 8010a70:	080147fa 	.word	0x080147fa
 8010a74:	08014807 	.word	0x08014807
 8010a78:	08014835 	.word	0x08014835

08010a7c <__sflush_r>:
 8010a7c:	898a      	ldrh	r2, [r1, #12]
 8010a7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a82:	4605      	mov	r5, r0
 8010a84:	0710      	lsls	r0, r2, #28
 8010a86:	460c      	mov	r4, r1
 8010a88:	d458      	bmi.n	8010b3c <__sflush_r+0xc0>
 8010a8a:	684b      	ldr	r3, [r1, #4]
 8010a8c:	2b00      	cmp	r3, #0
 8010a8e:	dc05      	bgt.n	8010a9c <__sflush_r+0x20>
 8010a90:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010a92:	2b00      	cmp	r3, #0
 8010a94:	dc02      	bgt.n	8010a9c <__sflush_r+0x20>
 8010a96:	2000      	movs	r0, #0
 8010a98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010a9e:	2e00      	cmp	r6, #0
 8010aa0:	d0f9      	beq.n	8010a96 <__sflush_r+0x1a>
 8010aa2:	2300      	movs	r3, #0
 8010aa4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010aa8:	682f      	ldr	r7, [r5, #0]
 8010aaa:	602b      	str	r3, [r5, #0]
 8010aac:	d032      	beq.n	8010b14 <__sflush_r+0x98>
 8010aae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010ab0:	89a3      	ldrh	r3, [r4, #12]
 8010ab2:	075a      	lsls	r2, r3, #29
 8010ab4:	d505      	bpl.n	8010ac2 <__sflush_r+0x46>
 8010ab6:	6863      	ldr	r3, [r4, #4]
 8010ab8:	1ac0      	subs	r0, r0, r3
 8010aba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010abc:	b10b      	cbz	r3, 8010ac2 <__sflush_r+0x46>
 8010abe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010ac0:	1ac0      	subs	r0, r0, r3
 8010ac2:	2300      	movs	r3, #0
 8010ac4:	4602      	mov	r2, r0
 8010ac6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010ac8:	6a21      	ldr	r1, [r4, #32]
 8010aca:	4628      	mov	r0, r5
 8010acc:	47b0      	blx	r6
 8010ace:	1c43      	adds	r3, r0, #1
 8010ad0:	89a3      	ldrh	r3, [r4, #12]
 8010ad2:	d106      	bne.n	8010ae2 <__sflush_r+0x66>
 8010ad4:	6829      	ldr	r1, [r5, #0]
 8010ad6:	291d      	cmp	r1, #29
 8010ad8:	d82c      	bhi.n	8010b34 <__sflush_r+0xb8>
 8010ada:	4a2a      	ldr	r2, [pc, #168]	; (8010b84 <__sflush_r+0x108>)
 8010adc:	40ca      	lsrs	r2, r1
 8010ade:	07d6      	lsls	r6, r2, #31
 8010ae0:	d528      	bpl.n	8010b34 <__sflush_r+0xb8>
 8010ae2:	2200      	movs	r2, #0
 8010ae4:	6062      	str	r2, [r4, #4]
 8010ae6:	04d9      	lsls	r1, r3, #19
 8010ae8:	6922      	ldr	r2, [r4, #16]
 8010aea:	6022      	str	r2, [r4, #0]
 8010aec:	d504      	bpl.n	8010af8 <__sflush_r+0x7c>
 8010aee:	1c42      	adds	r2, r0, #1
 8010af0:	d101      	bne.n	8010af6 <__sflush_r+0x7a>
 8010af2:	682b      	ldr	r3, [r5, #0]
 8010af4:	b903      	cbnz	r3, 8010af8 <__sflush_r+0x7c>
 8010af6:	6560      	str	r0, [r4, #84]	; 0x54
 8010af8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010afa:	602f      	str	r7, [r5, #0]
 8010afc:	2900      	cmp	r1, #0
 8010afe:	d0ca      	beq.n	8010a96 <__sflush_r+0x1a>
 8010b00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010b04:	4299      	cmp	r1, r3
 8010b06:	d002      	beq.n	8010b0e <__sflush_r+0x92>
 8010b08:	4628      	mov	r0, r5
 8010b0a:	f000 f9f1 	bl	8010ef0 <_free_r>
 8010b0e:	2000      	movs	r0, #0
 8010b10:	6360      	str	r0, [r4, #52]	; 0x34
 8010b12:	e7c1      	b.n	8010a98 <__sflush_r+0x1c>
 8010b14:	6a21      	ldr	r1, [r4, #32]
 8010b16:	2301      	movs	r3, #1
 8010b18:	4628      	mov	r0, r5
 8010b1a:	47b0      	blx	r6
 8010b1c:	1c41      	adds	r1, r0, #1
 8010b1e:	d1c7      	bne.n	8010ab0 <__sflush_r+0x34>
 8010b20:	682b      	ldr	r3, [r5, #0]
 8010b22:	2b00      	cmp	r3, #0
 8010b24:	d0c4      	beq.n	8010ab0 <__sflush_r+0x34>
 8010b26:	2b1d      	cmp	r3, #29
 8010b28:	d001      	beq.n	8010b2e <__sflush_r+0xb2>
 8010b2a:	2b16      	cmp	r3, #22
 8010b2c:	d101      	bne.n	8010b32 <__sflush_r+0xb6>
 8010b2e:	602f      	str	r7, [r5, #0]
 8010b30:	e7b1      	b.n	8010a96 <__sflush_r+0x1a>
 8010b32:	89a3      	ldrh	r3, [r4, #12]
 8010b34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010b38:	81a3      	strh	r3, [r4, #12]
 8010b3a:	e7ad      	b.n	8010a98 <__sflush_r+0x1c>
 8010b3c:	690f      	ldr	r7, [r1, #16]
 8010b3e:	2f00      	cmp	r7, #0
 8010b40:	d0a9      	beq.n	8010a96 <__sflush_r+0x1a>
 8010b42:	0793      	lsls	r3, r2, #30
 8010b44:	680e      	ldr	r6, [r1, #0]
 8010b46:	bf08      	it	eq
 8010b48:	694b      	ldreq	r3, [r1, #20]
 8010b4a:	600f      	str	r7, [r1, #0]
 8010b4c:	bf18      	it	ne
 8010b4e:	2300      	movne	r3, #0
 8010b50:	eba6 0807 	sub.w	r8, r6, r7
 8010b54:	608b      	str	r3, [r1, #8]
 8010b56:	f1b8 0f00 	cmp.w	r8, #0
 8010b5a:	dd9c      	ble.n	8010a96 <__sflush_r+0x1a>
 8010b5c:	6a21      	ldr	r1, [r4, #32]
 8010b5e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010b60:	4643      	mov	r3, r8
 8010b62:	463a      	mov	r2, r7
 8010b64:	4628      	mov	r0, r5
 8010b66:	47b0      	blx	r6
 8010b68:	2800      	cmp	r0, #0
 8010b6a:	dc06      	bgt.n	8010b7a <__sflush_r+0xfe>
 8010b6c:	89a3      	ldrh	r3, [r4, #12]
 8010b6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010b72:	81a3      	strh	r3, [r4, #12]
 8010b74:	f04f 30ff 	mov.w	r0, #4294967295
 8010b78:	e78e      	b.n	8010a98 <__sflush_r+0x1c>
 8010b7a:	4407      	add	r7, r0
 8010b7c:	eba8 0800 	sub.w	r8, r8, r0
 8010b80:	e7e9      	b.n	8010b56 <__sflush_r+0xda>
 8010b82:	bf00      	nop
 8010b84:	20400001 	.word	0x20400001

08010b88 <_fflush_r>:
 8010b88:	b538      	push	{r3, r4, r5, lr}
 8010b8a:	690b      	ldr	r3, [r1, #16]
 8010b8c:	4605      	mov	r5, r0
 8010b8e:	460c      	mov	r4, r1
 8010b90:	b913      	cbnz	r3, 8010b98 <_fflush_r+0x10>
 8010b92:	2500      	movs	r5, #0
 8010b94:	4628      	mov	r0, r5
 8010b96:	bd38      	pop	{r3, r4, r5, pc}
 8010b98:	b118      	cbz	r0, 8010ba2 <_fflush_r+0x1a>
 8010b9a:	6983      	ldr	r3, [r0, #24]
 8010b9c:	b90b      	cbnz	r3, 8010ba2 <_fflush_r+0x1a>
 8010b9e:	f000 f887 	bl	8010cb0 <__sinit>
 8010ba2:	4b14      	ldr	r3, [pc, #80]	; (8010bf4 <_fflush_r+0x6c>)
 8010ba4:	429c      	cmp	r4, r3
 8010ba6:	d11b      	bne.n	8010be0 <_fflush_r+0x58>
 8010ba8:	686c      	ldr	r4, [r5, #4]
 8010baa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010bae:	2b00      	cmp	r3, #0
 8010bb0:	d0ef      	beq.n	8010b92 <_fflush_r+0xa>
 8010bb2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010bb4:	07d0      	lsls	r0, r2, #31
 8010bb6:	d404      	bmi.n	8010bc2 <_fflush_r+0x3a>
 8010bb8:	0599      	lsls	r1, r3, #22
 8010bba:	d402      	bmi.n	8010bc2 <_fflush_r+0x3a>
 8010bbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010bbe:	f000 f927 	bl	8010e10 <__retarget_lock_acquire_recursive>
 8010bc2:	4628      	mov	r0, r5
 8010bc4:	4621      	mov	r1, r4
 8010bc6:	f7ff ff59 	bl	8010a7c <__sflush_r>
 8010bca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010bcc:	07da      	lsls	r2, r3, #31
 8010bce:	4605      	mov	r5, r0
 8010bd0:	d4e0      	bmi.n	8010b94 <_fflush_r+0xc>
 8010bd2:	89a3      	ldrh	r3, [r4, #12]
 8010bd4:	059b      	lsls	r3, r3, #22
 8010bd6:	d4dd      	bmi.n	8010b94 <_fflush_r+0xc>
 8010bd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010bda:	f000 f91a 	bl	8010e12 <__retarget_lock_release_recursive>
 8010bde:	e7d9      	b.n	8010b94 <_fflush_r+0xc>
 8010be0:	4b05      	ldr	r3, [pc, #20]	; (8010bf8 <_fflush_r+0x70>)
 8010be2:	429c      	cmp	r4, r3
 8010be4:	d101      	bne.n	8010bea <_fflush_r+0x62>
 8010be6:	68ac      	ldr	r4, [r5, #8]
 8010be8:	e7df      	b.n	8010baa <_fflush_r+0x22>
 8010bea:	4b04      	ldr	r3, [pc, #16]	; (8010bfc <_fflush_r+0x74>)
 8010bec:	429c      	cmp	r4, r3
 8010bee:	bf08      	it	eq
 8010bf0:	68ec      	ldreq	r4, [r5, #12]
 8010bf2:	e7da      	b.n	8010baa <_fflush_r+0x22>
 8010bf4:	08014858 	.word	0x08014858
 8010bf8:	08014878 	.word	0x08014878
 8010bfc:	08014838 	.word	0x08014838

08010c00 <std>:
 8010c00:	2300      	movs	r3, #0
 8010c02:	b510      	push	{r4, lr}
 8010c04:	4604      	mov	r4, r0
 8010c06:	e9c0 3300 	strd	r3, r3, [r0]
 8010c0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010c0e:	6083      	str	r3, [r0, #8]
 8010c10:	8181      	strh	r1, [r0, #12]
 8010c12:	6643      	str	r3, [r0, #100]	; 0x64
 8010c14:	81c2      	strh	r2, [r0, #14]
 8010c16:	6183      	str	r3, [r0, #24]
 8010c18:	4619      	mov	r1, r3
 8010c1a:	2208      	movs	r2, #8
 8010c1c:	305c      	adds	r0, #92	; 0x5c
 8010c1e:	f7ff fd7b 	bl	8010718 <memset>
 8010c22:	4b05      	ldr	r3, [pc, #20]	; (8010c38 <std+0x38>)
 8010c24:	6263      	str	r3, [r4, #36]	; 0x24
 8010c26:	4b05      	ldr	r3, [pc, #20]	; (8010c3c <std+0x3c>)
 8010c28:	62a3      	str	r3, [r4, #40]	; 0x28
 8010c2a:	4b05      	ldr	r3, [pc, #20]	; (8010c40 <std+0x40>)
 8010c2c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010c2e:	4b05      	ldr	r3, [pc, #20]	; (8010c44 <std+0x44>)
 8010c30:	6224      	str	r4, [r4, #32]
 8010c32:	6323      	str	r3, [r4, #48]	; 0x30
 8010c34:	bd10      	pop	{r4, pc}
 8010c36:	bf00      	nop
 8010c38:	080116ad 	.word	0x080116ad
 8010c3c:	080116cf 	.word	0x080116cf
 8010c40:	08011707 	.word	0x08011707
 8010c44:	0801172b 	.word	0x0801172b

08010c48 <_cleanup_r>:
 8010c48:	4901      	ldr	r1, [pc, #4]	; (8010c50 <_cleanup_r+0x8>)
 8010c4a:	f000 b8c1 	b.w	8010dd0 <_fwalk_reent>
 8010c4e:	bf00      	nop
 8010c50:	08010b89 	.word	0x08010b89

08010c54 <__sfmoreglue>:
 8010c54:	b570      	push	{r4, r5, r6, lr}
 8010c56:	2268      	movs	r2, #104	; 0x68
 8010c58:	1e4d      	subs	r5, r1, #1
 8010c5a:	4355      	muls	r5, r2
 8010c5c:	460e      	mov	r6, r1
 8010c5e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010c62:	f000 f9b1 	bl	8010fc8 <_malloc_r>
 8010c66:	4604      	mov	r4, r0
 8010c68:	b140      	cbz	r0, 8010c7c <__sfmoreglue+0x28>
 8010c6a:	2100      	movs	r1, #0
 8010c6c:	e9c0 1600 	strd	r1, r6, [r0]
 8010c70:	300c      	adds	r0, #12
 8010c72:	60a0      	str	r0, [r4, #8]
 8010c74:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010c78:	f7ff fd4e 	bl	8010718 <memset>
 8010c7c:	4620      	mov	r0, r4
 8010c7e:	bd70      	pop	{r4, r5, r6, pc}

08010c80 <__sfp_lock_acquire>:
 8010c80:	4801      	ldr	r0, [pc, #4]	; (8010c88 <__sfp_lock_acquire+0x8>)
 8010c82:	f000 b8c5 	b.w	8010e10 <__retarget_lock_acquire_recursive>
 8010c86:	bf00      	nop
 8010c88:	20007de9 	.word	0x20007de9

08010c8c <__sfp_lock_release>:
 8010c8c:	4801      	ldr	r0, [pc, #4]	; (8010c94 <__sfp_lock_release+0x8>)
 8010c8e:	f000 b8c0 	b.w	8010e12 <__retarget_lock_release_recursive>
 8010c92:	bf00      	nop
 8010c94:	20007de9 	.word	0x20007de9

08010c98 <__sinit_lock_acquire>:
 8010c98:	4801      	ldr	r0, [pc, #4]	; (8010ca0 <__sinit_lock_acquire+0x8>)
 8010c9a:	f000 b8b9 	b.w	8010e10 <__retarget_lock_acquire_recursive>
 8010c9e:	bf00      	nop
 8010ca0:	20007dea 	.word	0x20007dea

08010ca4 <__sinit_lock_release>:
 8010ca4:	4801      	ldr	r0, [pc, #4]	; (8010cac <__sinit_lock_release+0x8>)
 8010ca6:	f000 b8b4 	b.w	8010e12 <__retarget_lock_release_recursive>
 8010caa:	bf00      	nop
 8010cac:	20007dea 	.word	0x20007dea

08010cb0 <__sinit>:
 8010cb0:	b510      	push	{r4, lr}
 8010cb2:	4604      	mov	r4, r0
 8010cb4:	f7ff fff0 	bl	8010c98 <__sinit_lock_acquire>
 8010cb8:	69a3      	ldr	r3, [r4, #24]
 8010cba:	b11b      	cbz	r3, 8010cc4 <__sinit+0x14>
 8010cbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010cc0:	f7ff bff0 	b.w	8010ca4 <__sinit_lock_release>
 8010cc4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010cc8:	6523      	str	r3, [r4, #80]	; 0x50
 8010cca:	4b13      	ldr	r3, [pc, #76]	; (8010d18 <__sinit+0x68>)
 8010ccc:	4a13      	ldr	r2, [pc, #76]	; (8010d1c <__sinit+0x6c>)
 8010cce:	681b      	ldr	r3, [r3, #0]
 8010cd0:	62a2      	str	r2, [r4, #40]	; 0x28
 8010cd2:	42a3      	cmp	r3, r4
 8010cd4:	bf04      	itt	eq
 8010cd6:	2301      	moveq	r3, #1
 8010cd8:	61a3      	streq	r3, [r4, #24]
 8010cda:	4620      	mov	r0, r4
 8010cdc:	f000 f820 	bl	8010d20 <__sfp>
 8010ce0:	6060      	str	r0, [r4, #4]
 8010ce2:	4620      	mov	r0, r4
 8010ce4:	f000 f81c 	bl	8010d20 <__sfp>
 8010ce8:	60a0      	str	r0, [r4, #8]
 8010cea:	4620      	mov	r0, r4
 8010cec:	f000 f818 	bl	8010d20 <__sfp>
 8010cf0:	2200      	movs	r2, #0
 8010cf2:	60e0      	str	r0, [r4, #12]
 8010cf4:	2104      	movs	r1, #4
 8010cf6:	6860      	ldr	r0, [r4, #4]
 8010cf8:	f7ff ff82 	bl	8010c00 <std>
 8010cfc:	68a0      	ldr	r0, [r4, #8]
 8010cfe:	2201      	movs	r2, #1
 8010d00:	2109      	movs	r1, #9
 8010d02:	f7ff ff7d 	bl	8010c00 <std>
 8010d06:	68e0      	ldr	r0, [r4, #12]
 8010d08:	2202      	movs	r2, #2
 8010d0a:	2112      	movs	r1, #18
 8010d0c:	f7ff ff78 	bl	8010c00 <std>
 8010d10:	2301      	movs	r3, #1
 8010d12:	61a3      	str	r3, [r4, #24]
 8010d14:	e7d2      	b.n	8010cbc <__sinit+0xc>
 8010d16:	bf00      	nop
 8010d18:	08014784 	.word	0x08014784
 8010d1c:	08010c49 	.word	0x08010c49

08010d20 <__sfp>:
 8010d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010d22:	4607      	mov	r7, r0
 8010d24:	f7ff ffac 	bl	8010c80 <__sfp_lock_acquire>
 8010d28:	4b1e      	ldr	r3, [pc, #120]	; (8010da4 <__sfp+0x84>)
 8010d2a:	681e      	ldr	r6, [r3, #0]
 8010d2c:	69b3      	ldr	r3, [r6, #24]
 8010d2e:	b913      	cbnz	r3, 8010d36 <__sfp+0x16>
 8010d30:	4630      	mov	r0, r6
 8010d32:	f7ff ffbd 	bl	8010cb0 <__sinit>
 8010d36:	3648      	adds	r6, #72	; 0x48
 8010d38:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010d3c:	3b01      	subs	r3, #1
 8010d3e:	d503      	bpl.n	8010d48 <__sfp+0x28>
 8010d40:	6833      	ldr	r3, [r6, #0]
 8010d42:	b30b      	cbz	r3, 8010d88 <__sfp+0x68>
 8010d44:	6836      	ldr	r6, [r6, #0]
 8010d46:	e7f7      	b.n	8010d38 <__sfp+0x18>
 8010d48:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010d4c:	b9d5      	cbnz	r5, 8010d84 <__sfp+0x64>
 8010d4e:	4b16      	ldr	r3, [pc, #88]	; (8010da8 <__sfp+0x88>)
 8010d50:	60e3      	str	r3, [r4, #12]
 8010d52:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010d56:	6665      	str	r5, [r4, #100]	; 0x64
 8010d58:	f000 f859 	bl	8010e0e <__retarget_lock_init_recursive>
 8010d5c:	f7ff ff96 	bl	8010c8c <__sfp_lock_release>
 8010d60:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010d64:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010d68:	6025      	str	r5, [r4, #0]
 8010d6a:	61a5      	str	r5, [r4, #24]
 8010d6c:	2208      	movs	r2, #8
 8010d6e:	4629      	mov	r1, r5
 8010d70:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010d74:	f7ff fcd0 	bl	8010718 <memset>
 8010d78:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010d7c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010d80:	4620      	mov	r0, r4
 8010d82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010d84:	3468      	adds	r4, #104	; 0x68
 8010d86:	e7d9      	b.n	8010d3c <__sfp+0x1c>
 8010d88:	2104      	movs	r1, #4
 8010d8a:	4638      	mov	r0, r7
 8010d8c:	f7ff ff62 	bl	8010c54 <__sfmoreglue>
 8010d90:	4604      	mov	r4, r0
 8010d92:	6030      	str	r0, [r6, #0]
 8010d94:	2800      	cmp	r0, #0
 8010d96:	d1d5      	bne.n	8010d44 <__sfp+0x24>
 8010d98:	f7ff ff78 	bl	8010c8c <__sfp_lock_release>
 8010d9c:	230c      	movs	r3, #12
 8010d9e:	603b      	str	r3, [r7, #0]
 8010da0:	e7ee      	b.n	8010d80 <__sfp+0x60>
 8010da2:	bf00      	nop
 8010da4:	08014784 	.word	0x08014784
 8010da8:	ffff0001 	.word	0xffff0001

08010dac <fiprintf>:
 8010dac:	b40e      	push	{r1, r2, r3}
 8010dae:	b503      	push	{r0, r1, lr}
 8010db0:	4601      	mov	r1, r0
 8010db2:	ab03      	add	r3, sp, #12
 8010db4:	4805      	ldr	r0, [pc, #20]	; (8010dcc <fiprintf+0x20>)
 8010db6:	f853 2b04 	ldr.w	r2, [r3], #4
 8010dba:	6800      	ldr	r0, [r0, #0]
 8010dbc:	9301      	str	r3, [sp, #4]
 8010dbe:	f000 f9a1 	bl	8011104 <_vfiprintf_r>
 8010dc2:	b002      	add	sp, #8
 8010dc4:	f85d eb04 	ldr.w	lr, [sp], #4
 8010dc8:	b003      	add	sp, #12
 8010dca:	4770      	bx	lr
 8010dcc:	20000030 	.word	0x20000030

08010dd0 <_fwalk_reent>:
 8010dd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010dd4:	4606      	mov	r6, r0
 8010dd6:	4688      	mov	r8, r1
 8010dd8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010ddc:	2700      	movs	r7, #0
 8010dde:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010de2:	f1b9 0901 	subs.w	r9, r9, #1
 8010de6:	d505      	bpl.n	8010df4 <_fwalk_reent+0x24>
 8010de8:	6824      	ldr	r4, [r4, #0]
 8010dea:	2c00      	cmp	r4, #0
 8010dec:	d1f7      	bne.n	8010dde <_fwalk_reent+0xe>
 8010dee:	4638      	mov	r0, r7
 8010df0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010df4:	89ab      	ldrh	r3, [r5, #12]
 8010df6:	2b01      	cmp	r3, #1
 8010df8:	d907      	bls.n	8010e0a <_fwalk_reent+0x3a>
 8010dfa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010dfe:	3301      	adds	r3, #1
 8010e00:	d003      	beq.n	8010e0a <_fwalk_reent+0x3a>
 8010e02:	4629      	mov	r1, r5
 8010e04:	4630      	mov	r0, r6
 8010e06:	47c0      	blx	r8
 8010e08:	4307      	orrs	r7, r0
 8010e0a:	3568      	adds	r5, #104	; 0x68
 8010e0c:	e7e9      	b.n	8010de2 <_fwalk_reent+0x12>

08010e0e <__retarget_lock_init_recursive>:
 8010e0e:	4770      	bx	lr

08010e10 <__retarget_lock_acquire_recursive>:
 8010e10:	4770      	bx	lr

08010e12 <__retarget_lock_release_recursive>:
 8010e12:	4770      	bx	lr

08010e14 <__swhatbuf_r>:
 8010e14:	b570      	push	{r4, r5, r6, lr}
 8010e16:	460e      	mov	r6, r1
 8010e18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010e1c:	2900      	cmp	r1, #0
 8010e1e:	b096      	sub	sp, #88	; 0x58
 8010e20:	4614      	mov	r4, r2
 8010e22:	461d      	mov	r5, r3
 8010e24:	da08      	bge.n	8010e38 <__swhatbuf_r+0x24>
 8010e26:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8010e2a:	2200      	movs	r2, #0
 8010e2c:	602a      	str	r2, [r5, #0]
 8010e2e:	061a      	lsls	r2, r3, #24
 8010e30:	d410      	bmi.n	8010e54 <__swhatbuf_r+0x40>
 8010e32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010e36:	e00e      	b.n	8010e56 <__swhatbuf_r+0x42>
 8010e38:	466a      	mov	r2, sp
 8010e3a:	f000 fca5 	bl	8011788 <_fstat_r>
 8010e3e:	2800      	cmp	r0, #0
 8010e40:	dbf1      	blt.n	8010e26 <__swhatbuf_r+0x12>
 8010e42:	9a01      	ldr	r2, [sp, #4]
 8010e44:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010e48:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010e4c:	425a      	negs	r2, r3
 8010e4e:	415a      	adcs	r2, r3
 8010e50:	602a      	str	r2, [r5, #0]
 8010e52:	e7ee      	b.n	8010e32 <__swhatbuf_r+0x1e>
 8010e54:	2340      	movs	r3, #64	; 0x40
 8010e56:	2000      	movs	r0, #0
 8010e58:	6023      	str	r3, [r4, #0]
 8010e5a:	b016      	add	sp, #88	; 0x58
 8010e5c:	bd70      	pop	{r4, r5, r6, pc}
	...

08010e60 <__smakebuf_r>:
 8010e60:	898b      	ldrh	r3, [r1, #12]
 8010e62:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010e64:	079d      	lsls	r5, r3, #30
 8010e66:	4606      	mov	r6, r0
 8010e68:	460c      	mov	r4, r1
 8010e6a:	d507      	bpl.n	8010e7c <__smakebuf_r+0x1c>
 8010e6c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010e70:	6023      	str	r3, [r4, #0]
 8010e72:	6123      	str	r3, [r4, #16]
 8010e74:	2301      	movs	r3, #1
 8010e76:	6163      	str	r3, [r4, #20]
 8010e78:	b002      	add	sp, #8
 8010e7a:	bd70      	pop	{r4, r5, r6, pc}
 8010e7c:	ab01      	add	r3, sp, #4
 8010e7e:	466a      	mov	r2, sp
 8010e80:	f7ff ffc8 	bl	8010e14 <__swhatbuf_r>
 8010e84:	9900      	ldr	r1, [sp, #0]
 8010e86:	4605      	mov	r5, r0
 8010e88:	4630      	mov	r0, r6
 8010e8a:	f000 f89d 	bl	8010fc8 <_malloc_r>
 8010e8e:	b948      	cbnz	r0, 8010ea4 <__smakebuf_r+0x44>
 8010e90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010e94:	059a      	lsls	r2, r3, #22
 8010e96:	d4ef      	bmi.n	8010e78 <__smakebuf_r+0x18>
 8010e98:	f023 0303 	bic.w	r3, r3, #3
 8010e9c:	f043 0302 	orr.w	r3, r3, #2
 8010ea0:	81a3      	strh	r3, [r4, #12]
 8010ea2:	e7e3      	b.n	8010e6c <__smakebuf_r+0xc>
 8010ea4:	4b0d      	ldr	r3, [pc, #52]	; (8010edc <__smakebuf_r+0x7c>)
 8010ea6:	62b3      	str	r3, [r6, #40]	; 0x28
 8010ea8:	89a3      	ldrh	r3, [r4, #12]
 8010eaa:	6020      	str	r0, [r4, #0]
 8010eac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010eb0:	81a3      	strh	r3, [r4, #12]
 8010eb2:	9b00      	ldr	r3, [sp, #0]
 8010eb4:	6163      	str	r3, [r4, #20]
 8010eb6:	9b01      	ldr	r3, [sp, #4]
 8010eb8:	6120      	str	r0, [r4, #16]
 8010eba:	b15b      	cbz	r3, 8010ed4 <__smakebuf_r+0x74>
 8010ebc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010ec0:	4630      	mov	r0, r6
 8010ec2:	f000 fc73 	bl	80117ac <_isatty_r>
 8010ec6:	b128      	cbz	r0, 8010ed4 <__smakebuf_r+0x74>
 8010ec8:	89a3      	ldrh	r3, [r4, #12]
 8010eca:	f023 0303 	bic.w	r3, r3, #3
 8010ece:	f043 0301 	orr.w	r3, r3, #1
 8010ed2:	81a3      	strh	r3, [r4, #12]
 8010ed4:	89a0      	ldrh	r0, [r4, #12]
 8010ed6:	4305      	orrs	r5, r0
 8010ed8:	81a5      	strh	r5, [r4, #12]
 8010eda:	e7cd      	b.n	8010e78 <__smakebuf_r+0x18>
 8010edc:	08010c49 	.word	0x08010c49

08010ee0 <malloc>:
 8010ee0:	4b02      	ldr	r3, [pc, #8]	; (8010eec <malloc+0xc>)
 8010ee2:	4601      	mov	r1, r0
 8010ee4:	6818      	ldr	r0, [r3, #0]
 8010ee6:	f000 b86f 	b.w	8010fc8 <_malloc_r>
 8010eea:	bf00      	nop
 8010eec:	20000030 	.word	0x20000030

08010ef0 <_free_r>:
 8010ef0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010ef2:	2900      	cmp	r1, #0
 8010ef4:	d044      	beq.n	8010f80 <_free_r+0x90>
 8010ef6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010efa:	9001      	str	r0, [sp, #4]
 8010efc:	2b00      	cmp	r3, #0
 8010efe:	f1a1 0404 	sub.w	r4, r1, #4
 8010f02:	bfb8      	it	lt
 8010f04:	18e4      	addlt	r4, r4, r3
 8010f06:	f000 fc73 	bl	80117f0 <__malloc_lock>
 8010f0a:	4a1e      	ldr	r2, [pc, #120]	; (8010f84 <_free_r+0x94>)
 8010f0c:	9801      	ldr	r0, [sp, #4]
 8010f0e:	6813      	ldr	r3, [r2, #0]
 8010f10:	b933      	cbnz	r3, 8010f20 <_free_r+0x30>
 8010f12:	6063      	str	r3, [r4, #4]
 8010f14:	6014      	str	r4, [r2, #0]
 8010f16:	b003      	add	sp, #12
 8010f18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010f1c:	f000 bc6e 	b.w	80117fc <__malloc_unlock>
 8010f20:	42a3      	cmp	r3, r4
 8010f22:	d908      	bls.n	8010f36 <_free_r+0x46>
 8010f24:	6825      	ldr	r5, [r4, #0]
 8010f26:	1961      	adds	r1, r4, r5
 8010f28:	428b      	cmp	r3, r1
 8010f2a:	bf01      	itttt	eq
 8010f2c:	6819      	ldreq	r1, [r3, #0]
 8010f2e:	685b      	ldreq	r3, [r3, #4]
 8010f30:	1949      	addeq	r1, r1, r5
 8010f32:	6021      	streq	r1, [r4, #0]
 8010f34:	e7ed      	b.n	8010f12 <_free_r+0x22>
 8010f36:	461a      	mov	r2, r3
 8010f38:	685b      	ldr	r3, [r3, #4]
 8010f3a:	b10b      	cbz	r3, 8010f40 <_free_r+0x50>
 8010f3c:	42a3      	cmp	r3, r4
 8010f3e:	d9fa      	bls.n	8010f36 <_free_r+0x46>
 8010f40:	6811      	ldr	r1, [r2, #0]
 8010f42:	1855      	adds	r5, r2, r1
 8010f44:	42a5      	cmp	r5, r4
 8010f46:	d10b      	bne.n	8010f60 <_free_r+0x70>
 8010f48:	6824      	ldr	r4, [r4, #0]
 8010f4a:	4421      	add	r1, r4
 8010f4c:	1854      	adds	r4, r2, r1
 8010f4e:	42a3      	cmp	r3, r4
 8010f50:	6011      	str	r1, [r2, #0]
 8010f52:	d1e0      	bne.n	8010f16 <_free_r+0x26>
 8010f54:	681c      	ldr	r4, [r3, #0]
 8010f56:	685b      	ldr	r3, [r3, #4]
 8010f58:	6053      	str	r3, [r2, #4]
 8010f5a:	4421      	add	r1, r4
 8010f5c:	6011      	str	r1, [r2, #0]
 8010f5e:	e7da      	b.n	8010f16 <_free_r+0x26>
 8010f60:	d902      	bls.n	8010f68 <_free_r+0x78>
 8010f62:	230c      	movs	r3, #12
 8010f64:	6003      	str	r3, [r0, #0]
 8010f66:	e7d6      	b.n	8010f16 <_free_r+0x26>
 8010f68:	6825      	ldr	r5, [r4, #0]
 8010f6a:	1961      	adds	r1, r4, r5
 8010f6c:	428b      	cmp	r3, r1
 8010f6e:	bf04      	itt	eq
 8010f70:	6819      	ldreq	r1, [r3, #0]
 8010f72:	685b      	ldreq	r3, [r3, #4]
 8010f74:	6063      	str	r3, [r4, #4]
 8010f76:	bf04      	itt	eq
 8010f78:	1949      	addeq	r1, r1, r5
 8010f7a:	6021      	streq	r1, [r4, #0]
 8010f7c:	6054      	str	r4, [r2, #4]
 8010f7e:	e7ca      	b.n	8010f16 <_free_r+0x26>
 8010f80:	b003      	add	sp, #12
 8010f82:	bd30      	pop	{r4, r5, pc}
 8010f84:	20007dec 	.word	0x20007dec

08010f88 <sbrk_aligned>:
 8010f88:	b570      	push	{r4, r5, r6, lr}
 8010f8a:	4e0e      	ldr	r6, [pc, #56]	; (8010fc4 <sbrk_aligned+0x3c>)
 8010f8c:	460c      	mov	r4, r1
 8010f8e:	6831      	ldr	r1, [r6, #0]
 8010f90:	4605      	mov	r5, r0
 8010f92:	b911      	cbnz	r1, 8010f9a <sbrk_aligned+0x12>
 8010f94:	f000 fb7a 	bl	801168c <_sbrk_r>
 8010f98:	6030      	str	r0, [r6, #0]
 8010f9a:	4621      	mov	r1, r4
 8010f9c:	4628      	mov	r0, r5
 8010f9e:	f000 fb75 	bl	801168c <_sbrk_r>
 8010fa2:	1c43      	adds	r3, r0, #1
 8010fa4:	d00a      	beq.n	8010fbc <sbrk_aligned+0x34>
 8010fa6:	1cc4      	adds	r4, r0, #3
 8010fa8:	f024 0403 	bic.w	r4, r4, #3
 8010fac:	42a0      	cmp	r0, r4
 8010fae:	d007      	beq.n	8010fc0 <sbrk_aligned+0x38>
 8010fb0:	1a21      	subs	r1, r4, r0
 8010fb2:	4628      	mov	r0, r5
 8010fb4:	f000 fb6a 	bl	801168c <_sbrk_r>
 8010fb8:	3001      	adds	r0, #1
 8010fba:	d101      	bne.n	8010fc0 <sbrk_aligned+0x38>
 8010fbc:	f04f 34ff 	mov.w	r4, #4294967295
 8010fc0:	4620      	mov	r0, r4
 8010fc2:	bd70      	pop	{r4, r5, r6, pc}
 8010fc4:	20007df0 	.word	0x20007df0

08010fc8 <_malloc_r>:
 8010fc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010fcc:	1ccd      	adds	r5, r1, #3
 8010fce:	f025 0503 	bic.w	r5, r5, #3
 8010fd2:	3508      	adds	r5, #8
 8010fd4:	2d0c      	cmp	r5, #12
 8010fd6:	bf38      	it	cc
 8010fd8:	250c      	movcc	r5, #12
 8010fda:	2d00      	cmp	r5, #0
 8010fdc:	4607      	mov	r7, r0
 8010fde:	db01      	blt.n	8010fe4 <_malloc_r+0x1c>
 8010fe0:	42a9      	cmp	r1, r5
 8010fe2:	d905      	bls.n	8010ff0 <_malloc_r+0x28>
 8010fe4:	230c      	movs	r3, #12
 8010fe6:	603b      	str	r3, [r7, #0]
 8010fe8:	2600      	movs	r6, #0
 8010fea:	4630      	mov	r0, r6
 8010fec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ff0:	4e2e      	ldr	r6, [pc, #184]	; (80110ac <_malloc_r+0xe4>)
 8010ff2:	f000 fbfd 	bl	80117f0 <__malloc_lock>
 8010ff6:	6833      	ldr	r3, [r6, #0]
 8010ff8:	461c      	mov	r4, r3
 8010ffa:	bb34      	cbnz	r4, 801104a <_malloc_r+0x82>
 8010ffc:	4629      	mov	r1, r5
 8010ffe:	4638      	mov	r0, r7
 8011000:	f7ff ffc2 	bl	8010f88 <sbrk_aligned>
 8011004:	1c43      	adds	r3, r0, #1
 8011006:	4604      	mov	r4, r0
 8011008:	d14d      	bne.n	80110a6 <_malloc_r+0xde>
 801100a:	6834      	ldr	r4, [r6, #0]
 801100c:	4626      	mov	r6, r4
 801100e:	2e00      	cmp	r6, #0
 8011010:	d140      	bne.n	8011094 <_malloc_r+0xcc>
 8011012:	6823      	ldr	r3, [r4, #0]
 8011014:	4631      	mov	r1, r6
 8011016:	4638      	mov	r0, r7
 8011018:	eb04 0803 	add.w	r8, r4, r3
 801101c:	f000 fb36 	bl	801168c <_sbrk_r>
 8011020:	4580      	cmp	r8, r0
 8011022:	d13a      	bne.n	801109a <_malloc_r+0xd2>
 8011024:	6821      	ldr	r1, [r4, #0]
 8011026:	3503      	adds	r5, #3
 8011028:	1a6d      	subs	r5, r5, r1
 801102a:	f025 0503 	bic.w	r5, r5, #3
 801102e:	3508      	adds	r5, #8
 8011030:	2d0c      	cmp	r5, #12
 8011032:	bf38      	it	cc
 8011034:	250c      	movcc	r5, #12
 8011036:	4629      	mov	r1, r5
 8011038:	4638      	mov	r0, r7
 801103a:	f7ff ffa5 	bl	8010f88 <sbrk_aligned>
 801103e:	3001      	adds	r0, #1
 8011040:	d02b      	beq.n	801109a <_malloc_r+0xd2>
 8011042:	6823      	ldr	r3, [r4, #0]
 8011044:	442b      	add	r3, r5
 8011046:	6023      	str	r3, [r4, #0]
 8011048:	e00e      	b.n	8011068 <_malloc_r+0xa0>
 801104a:	6822      	ldr	r2, [r4, #0]
 801104c:	1b52      	subs	r2, r2, r5
 801104e:	d41e      	bmi.n	801108e <_malloc_r+0xc6>
 8011050:	2a0b      	cmp	r2, #11
 8011052:	d916      	bls.n	8011082 <_malloc_r+0xba>
 8011054:	1961      	adds	r1, r4, r5
 8011056:	42a3      	cmp	r3, r4
 8011058:	6025      	str	r5, [r4, #0]
 801105a:	bf18      	it	ne
 801105c:	6059      	strne	r1, [r3, #4]
 801105e:	6863      	ldr	r3, [r4, #4]
 8011060:	bf08      	it	eq
 8011062:	6031      	streq	r1, [r6, #0]
 8011064:	5162      	str	r2, [r4, r5]
 8011066:	604b      	str	r3, [r1, #4]
 8011068:	4638      	mov	r0, r7
 801106a:	f104 060b 	add.w	r6, r4, #11
 801106e:	f000 fbc5 	bl	80117fc <__malloc_unlock>
 8011072:	f026 0607 	bic.w	r6, r6, #7
 8011076:	1d23      	adds	r3, r4, #4
 8011078:	1af2      	subs	r2, r6, r3
 801107a:	d0b6      	beq.n	8010fea <_malloc_r+0x22>
 801107c:	1b9b      	subs	r3, r3, r6
 801107e:	50a3      	str	r3, [r4, r2]
 8011080:	e7b3      	b.n	8010fea <_malloc_r+0x22>
 8011082:	6862      	ldr	r2, [r4, #4]
 8011084:	42a3      	cmp	r3, r4
 8011086:	bf0c      	ite	eq
 8011088:	6032      	streq	r2, [r6, #0]
 801108a:	605a      	strne	r2, [r3, #4]
 801108c:	e7ec      	b.n	8011068 <_malloc_r+0xa0>
 801108e:	4623      	mov	r3, r4
 8011090:	6864      	ldr	r4, [r4, #4]
 8011092:	e7b2      	b.n	8010ffa <_malloc_r+0x32>
 8011094:	4634      	mov	r4, r6
 8011096:	6876      	ldr	r6, [r6, #4]
 8011098:	e7b9      	b.n	801100e <_malloc_r+0x46>
 801109a:	230c      	movs	r3, #12
 801109c:	603b      	str	r3, [r7, #0]
 801109e:	4638      	mov	r0, r7
 80110a0:	f000 fbac 	bl	80117fc <__malloc_unlock>
 80110a4:	e7a1      	b.n	8010fea <_malloc_r+0x22>
 80110a6:	6025      	str	r5, [r4, #0]
 80110a8:	e7de      	b.n	8011068 <_malloc_r+0xa0>
 80110aa:	bf00      	nop
 80110ac:	20007dec 	.word	0x20007dec

080110b0 <__sfputc_r>:
 80110b0:	6893      	ldr	r3, [r2, #8]
 80110b2:	3b01      	subs	r3, #1
 80110b4:	2b00      	cmp	r3, #0
 80110b6:	b410      	push	{r4}
 80110b8:	6093      	str	r3, [r2, #8]
 80110ba:	da08      	bge.n	80110ce <__sfputc_r+0x1e>
 80110bc:	6994      	ldr	r4, [r2, #24]
 80110be:	42a3      	cmp	r3, r4
 80110c0:	db01      	blt.n	80110c6 <__sfputc_r+0x16>
 80110c2:	290a      	cmp	r1, #10
 80110c4:	d103      	bne.n	80110ce <__sfputc_r+0x1e>
 80110c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80110ca:	f7ff bbf9 	b.w	80108c0 <__swbuf_r>
 80110ce:	6813      	ldr	r3, [r2, #0]
 80110d0:	1c58      	adds	r0, r3, #1
 80110d2:	6010      	str	r0, [r2, #0]
 80110d4:	7019      	strb	r1, [r3, #0]
 80110d6:	4608      	mov	r0, r1
 80110d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80110dc:	4770      	bx	lr

080110de <__sfputs_r>:
 80110de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80110e0:	4606      	mov	r6, r0
 80110e2:	460f      	mov	r7, r1
 80110e4:	4614      	mov	r4, r2
 80110e6:	18d5      	adds	r5, r2, r3
 80110e8:	42ac      	cmp	r4, r5
 80110ea:	d101      	bne.n	80110f0 <__sfputs_r+0x12>
 80110ec:	2000      	movs	r0, #0
 80110ee:	e007      	b.n	8011100 <__sfputs_r+0x22>
 80110f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80110f4:	463a      	mov	r2, r7
 80110f6:	4630      	mov	r0, r6
 80110f8:	f7ff ffda 	bl	80110b0 <__sfputc_r>
 80110fc:	1c43      	adds	r3, r0, #1
 80110fe:	d1f3      	bne.n	80110e8 <__sfputs_r+0xa>
 8011100:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011104 <_vfiprintf_r>:
 8011104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011108:	460d      	mov	r5, r1
 801110a:	b09d      	sub	sp, #116	; 0x74
 801110c:	4614      	mov	r4, r2
 801110e:	4698      	mov	r8, r3
 8011110:	4606      	mov	r6, r0
 8011112:	b118      	cbz	r0, 801111c <_vfiprintf_r+0x18>
 8011114:	6983      	ldr	r3, [r0, #24]
 8011116:	b90b      	cbnz	r3, 801111c <_vfiprintf_r+0x18>
 8011118:	f7ff fdca 	bl	8010cb0 <__sinit>
 801111c:	4b89      	ldr	r3, [pc, #548]	; (8011344 <_vfiprintf_r+0x240>)
 801111e:	429d      	cmp	r5, r3
 8011120:	d11b      	bne.n	801115a <_vfiprintf_r+0x56>
 8011122:	6875      	ldr	r5, [r6, #4]
 8011124:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011126:	07d9      	lsls	r1, r3, #31
 8011128:	d405      	bmi.n	8011136 <_vfiprintf_r+0x32>
 801112a:	89ab      	ldrh	r3, [r5, #12]
 801112c:	059a      	lsls	r2, r3, #22
 801112e:	d402      	bmi.n	8011136 <_vfiprintf_r+0x32>
 8011130:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011132:	f7ff fe6d 	bl	8010e10 <__retarget_lock_acquire_recursive>
 8011136:	89ab      	ldrh	r3, [r5, #12]
 8011138:	071b      	lsls	r3, r3, #28
 801113a:	d501      	bpl.n	8011140 <_vfiprintf_r+0x3c>
 801113c:	692b      	ldr	r3, [r5, #16]
 801113e:	b9eb      	cbnz	r3, 801117c <_vfiprintf_r+0x78>
 8011140:	4629      	mov	r1, r5
 8011142:	4630      	mov	r0, r6
 8011144:	f7ff fc0e 	bl	8010964 <__swsetup_r>
 8011148:	b1c0      	cbz	r0, 801117c <_vfiprintf_r+0x78>
 801114a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801114c:	07dc      	lsls	r4, r3, #31
 801114e:	d50e      	bpl.n	801116e <_vfiprintf_r+0x6a>
 8011150:	f04f 30ff 	mov.w	r0, #4294967295
 8011154:	b01d      	add	sp, #116	; 0x74
 8011156:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801115a:	4b7b      	ldr	r3, [pc, #492]	; (8011348 <_vfiprintf_r+0x244>)
 801115c:	429d      	cmp	r5, r3
 801115e:	d101      	bne.n	8011164 <_vfiprintf_r+0x60>
 8011160:	68b5      	ldr	r5, [r6, #8]
 8011162:	e7df      	b.n	8011124 <_vfiprintf_r+0x20>
 8011164:	4b79      	ldr	r3, [pc, #484]	; (801134c <_vfiprintf_r+0x248>)
 8011166:	429d      	cmp	r5, r3
 8011168:	bf08      	it	eq
 801116a:	68f5      	ldreq	r5, [r6, #12]
 801116c:	e7da      	b.n	8011124 <_vfiprintf_r+0x20>
 801116e:	89ab      	ldrh	r3, [r5, #12]
 8011170:	0598      	lsls	r0, r3, #22
 8011172:	d4ed      	bmi.n	8011150 <_vfiprintf_r+0x4c>
 8011174:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011176:	f7ff fe4c 	bl	8010e12 <__retarget_lock_release_recursive>
 801117a:	e7e9      	b.n	8011150 <_vfiprintf_r+0x4c>
 801117c:	2300      	movs	r3, #0
 801117e:	9309      	str	r3, [sp, #36]	; 0x24
 8011180:	2320      	movs	r3, #32
 8011182:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011186:	f8cd 800c 	str.w	r8, [sp, #12]
 801118a:	2330      	movs	r3, #48	; 0x30
 801118c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8011350 <_vfiprintf_r+0x24c>
 8011190:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011194:	f04f 0901 	mov.w	r9, #1
 8011198:	4623      	mov	r3, r4
 801119a:	469a      	mov	sl, r3
 801119c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80111a0:	b10a      	cbz	r2, 80111a6 <_vfiprintf_r+0xa2>
 80111a2:	2a25      	cmp	r2, #37	; 0x25
 80111a4:	d1f9      	bne.n	801119a <_vfiprintf_r+0x96>
 80111a6:	ebba 0b04 	subs.w	fp, sl, r4
 80111aa:	d00b      	beq.n	80111c4 <_vfiprintf_r+0xc0>
 80111ac:	465b      	mov	r3, fp
 80111ae:	4622      	mov	r2, r4
 80111b0:	4629      	mov	r1, r5
 80111b2:	4630      	mov	r0, r6
 80111b4:	f7ff ff93 	bl	80110de <__sfputs_r>
 80111b8:	3001      	adds	r0, #1
 80111ba:	f000 80aa 	beq.w	8011312 <_vfiprintf_r+0x20e>
 80111be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80111c0:	445a      	add	r2, fp
 80111c2:	9209      	str	r2, [sp, #36]	; 0x24
 80111c4:	f89a 3000 	ldrb.w	r3, [sl]
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	f000 80a2 	beq.w	8011312 <_vfiprintf_r+0x20e>
 80111ce:	2300      	movs	r3, #0
 80111d0:	f04f 32ff 	mov.w	r2, #4294967295
 80111d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80111d8:	f10a 0a01 	add.w	sl, sl, #1
 80111dc:	9304      	str	r3, [sp, #16]
 80111de:	9307      	str	r3, [sp, #28]
 80111e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80111e4:	931a      	str	r3, [sp, #104]	; 0x68
 80111e6:	4654      	mov	r4, sl
 80111e8:	2205      	movs	r2, #5
 80111ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80111ee:	4858      	ldr	r0, [pc, #352]	; (8011350 <_vfiprintf_r+0x24c>)
 80111f0:	f7ee fffe 	bl	80001f0 <memchr>
 80111f4:	9a04      	ldr	r2, [sp, #16]
 80111f6:	b9d8      	cbnz	r0, 8011230 <_vfiprintf_r+0x12c>
 80111f8:	06d1      	lsls	r1, r2, #27
 80111fa:	bf44      	itt	mi
 80111fc:	2320      	movmi	r3, #32
 80111fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011202:	0713      	lsls	r3, r2, #28
 8011204:	bf44      	itt	mi
 8011206:	232b      	movmi	r3, #43	; 0x2b
 8011208:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801120c:	f89a 3000 	ldrb.w	r3, [sl]
 8011210:	2b2a      	cmp	r3, #42	; 0x2a
 8011212:	d015      	beq.n	8011240 <_vfiprintf_r+0x13c>
 8011214:	9a07      	ldr	r2, [sp, #28]
 8011216:	4654      	mov	r4, sl
 8011218:	2000      	movs	r0, #0
 801121a:	f04f 0c0a 	mov.w	ip, #10
 801121e:	4621      	mov	r1, r4
 8011220:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011224:	3b30      	subs	r3, #48	; 0x30
 8011226:	2b09      	cmp	r3, #9
 8011228:	d94e      	bls.n	80112c8 <_vfiprintf_r+0x1c4>
 801122a:	b1b0      	cbz	r0, 801125a <_vfiprintf_r+0x156>
 801122c:	9207      	str	r2, [sp, #28]
 801122e:	e014      	b.n	801125a <_vfiprintf_r+0x156>
 8011230:	eba0 0308 	sub.w	r3, r0, r8
 8011234:	fa09 f303 	lsl.w	r3, r9, r3
 8011238:	4313      	orrs	r3, r2
 801123a:	9304      	str	r3, [sp, #16]
 801123c:	46a2      	mov	sl, r4
 801123e:	e7d2      	b.n	80111e6 <_vfiprintf_r+0xe2>
 8011240:	9b03      	ldr	r3, [sp, #12]
 8011242:	1d19      	adds	r1, r3, #4
 8011244:	681b      	ldr	r3, [r3, #0]
 8011246:	9103      	str	r1, [sp, #12]
 8011248:	2b00      	cmp	r3, #0
 801124a:	bfbb      	ittet	lt
 801124c:	425b      	neglt	r3, r3
 801124e:	f042 0202 	orrlt.w	r2, r2, #2
 8011252:	9307      	strge	r3, [sp, #28]
 8011254:	9307      	strlt	r3, [sp, #28]
 8011256:	bfb8      	it	lt
 8011258:	9204      	strlt	r2, [sp, #16]
 801125a:	7823      	ldrb	r3, [r4, #0]
 801125c:	2b2e      	cmp	r3, #46	; 0x2e
 801125e:	d10c      	bne.n	801127a <_vfiprintf_r+0x176>
 8011260:	7863      	ldrb	r3, [r4, #1]
 8011262:	2b2a      	cmp	r3, #42	; 0x2a
 8011264:	d135      	bne.n	80112d2 <_vfiprintf_r+0x1ce>
 8011266:	9b03      	ldr	r3, [sp, #12]
 8011268:	1d1a      	adds	r2, r3, #4
 801126a:	681b      	ldr	r3, [r3, #0]
 801126c:	9203      	str	r2, [sp, #12]
 801126e:	2b00      	cmp	r3, #0
 8011270:	bfb8      	it	lt
 8011272:	f04f 33ff 	movlt.w	r3, #4294967295
 8011276:	3402      	adds	r4, #2
 8011278:	9305      	str	r3, [sp, #20]
 801127a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8011360 <_vfiprintf_r+0x25c>
 801127e:	7821      	ldrb	r1, [r4, #0]
 8011280:	2203      	movs	r2, #3
 8011282:	4650      	mov	r0, sl
 8011284:	f7ee ffb4 	bl	80001f0 <memchr>
 8011288:	b140      	cbz	r0, 801129c <_vfiprintf_r+0x198>
 801128a:	2340      	movs	r3, #64	; 0x40
 801128c:	eba0 000a 	sub.w	r0, r0, sl
 8011290:	fa03 f000 	lsl.w	r0, r3, r0
 8011294:	9b04      	ldr	r3, [sp, #16]
 8011296:	4303      	orrs	r3, r0
 8011298:	3401      	adds	r4, #1
 801129a:	9304      	str	r3, [sp, #16]
 801129c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80112a0:	482c      	ldr	r0, [pc, #176]	; (8011354 <_vfiprintf_r+0x250>)
 80112a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80112a6:	2206      	movs	r2, #6
 80112a8:	f7ee ffa2 	bl	80001f0 <memchr>
 80112ac:	2800      	cmp	r0, #0
 80112ae:	d03f      	beq.n	8011330 <_vfiprintf_r+0x22c>
 80112b0:	4b29      	ldr	r3, [pc, #164]	; (8011358 <_vfiprintf_r+0x254>)
 80112b2:	bb1b      	cbnz	r3, 80112fc <_vfiprintf_r+0x1f8>
 80112b4:	9b03      	ldr	r3, [sp, #12]
 80112b6:	3307      	adds	r3, #7
 80112b8:	f023 0307 	bic.w	r3, r3, #7
 80112bc:	3308      	adds	r3, #8
 80112be:	9303      	str	r3, [sp, #12]
 80112c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80112c2:	443b      	add	r3, r7
 80112c4:	9309      	str	r3, [sp, #36]	; 0x24
 80112c6:	e767      	b.n	8011198 <_vfiprintf_r+0x94>
 80112c8:	fb0c 3202 	mla	r2, ip, r2, r3
 80112cc:	460c      	mov	r4, r1
 80112ce:	2001      	movs	r0, #1
 80112d0:	e7a5      	b.n	801121e <_vfiprintf_r+0x11a>
 80112d2:	2300      	movs	r3, #0
 80112d4:	3401      	adds	r4, #1
 80112d6:	9305      	str	r3, [sp, #20]
 80112d8:	4619      	mov	r1, r3
 80112da:	f04f 0c0a 	mov.w	ip, #10
 80112de:	4620      	mov	r0, r4
 80112e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80112e4:	3a30      	subs	r2, #48	; 0x30
 80112e6:	2a09      	cmp	r2, #9
 80112e8:	d903      	bls.n	80112f2 <_vfiprintf_r+0x1ee>
 80112ea:	2b00      	cmp	r3, #0
 80112ec:	d0c5      	beq.n	801127a <_vfiprintf_r+0x176>
 80112ee:	9105      	str	r1, [sp, #20]
 80112f0:	e7c3      	b.n	801127a <_vfiprintf_r+0x176>
 80112f2:	fb0c 2101 	mla	r1, ip, r1, r2
 80112f6:	4604      	mov	r4, r0
 80112f8:	2301      	movs	r3, #1
 80112fa:	e7f0      	b.n	80112de <_vfiprintf_r+0x1da>
 80112fc:	ab03      	add	r3, sp, #12
 80112fe:	9300      	str	r3, [sp, #0]
 8011300:	462a      	mov	r2, r5
 8011302:	4b16      	ldr	r3, [pc, #88]	; (801135c <_vfiprintf_r+0x258>)
 8011304:	a904      	add	r1, sp, #16
 8011306:	4630      	mov	r0, r6
 8011308:	f3af 8000 	nop.w
 801130c:	4607      	mov	r7, r0
 801130e:	1c78      	adds	r0, r7, #1
 8011310:	d1d6      	bne.n	80112c0 <_vfiprintf_r+0x1bc>
 8011312:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011314:	07d9      	lsls	r1, r3, #31
 8011316:	d405      	bmi.n	8011324 <_vfiprintf_r+0x220>
 8011318:	89ab      	ldrh	r3, [r5, #12]
 801131a:	059a      	lsls	r2, r3, #22
 801131c:	d402      	bmi.n	8011324 <_vfiprintf_r+0x220>
 801131e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011320:	f7ff fd77 	bl	8010e12 <__retarget_lock_release_recursive>
 8011324:	89ab      	ldrh	r3, [r5, #12]
 8011326:	065b      	lsls	r3, r3, #25
 8011328:	f53f af12 	bmi.w	8011150 <_vfiprintf_r+0x4c>
 801132c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801132e:	e711      	b.n	8011154 <_vfiprintf_r+0x50>
 8011330:	ab03      	add	r3, sp, #12
 8011332:	9300      	str	r3, [sp, #0]
 8011334:	462a      	mov	r2, r5
 8011336:	4b09      	ldr	r3, [pc, #36]	; (801135c <_vfiprintf_r+0x258>)
 8011338:	a904      	add	r1, sp, #16
 801133a:	4630      	mov	r0, r6
 801133c:	f000 f880 	bl	8011440 <_printf_i>
 8011340:	e7e4      	b.n	801130c <_vfiprintf_r+0x208>
 8011342:	bf00      	nop
 8011344:	08014858 	.word	0x08014858
 8011348:	08014878 	.word	0x08014878
 801134c:	08014838 	.word	0x08014838
 8011350:	08014898 	.word	0x08014898
 8011354:	080148a2 	.word	0x080148a2
 8011358:	00000000 	.word	0x00000000
 801135c:	080110df 	.word	0x080110df
 8011360:	0801489e 	.word	0x0801489e

08011364 <_printf_common>:
 8011364:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011368:	4616      	mov	r6, r2
 801136a:	4699      	mov	r9, r3
 801136c:	688a      	ldr	r2, [r1, #8]
 801136e:	690b      	ldr	r3, [r1, #16]
 8011370:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011374:	4293      	cmp	r3, r2
 8011376:	bfb8      	it	lt
 8011378:	4613      	movlt	r3, r2
 801137a:	6033      	str	r3, [r6, #0]
 801137c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011380:	4607      	mov	r7, r0
 8011382:	460c      	mov	r4, r1
 8011384:	b10a      	cbz	r2, 801138a <_printf_common+0x26>
 8011386:	3301      	adds	r3, #1
 8011388:	6033      	str	r3, [r6, #0]
 801138a:	6823      	ldr	r3, [r4, #0]
 801138c:	0699      	lsls	r1, r3, #26
 801138e:	bf42      	ittt	mi
 8011390:	6833      	ldrmi	r3, [r6, #0]
 8011392:	3302      	addmi	r3, #2
 8011394:	6033      	strmi	r3, [r6, #0]
 8011396:	6825      	ldr	r5, [r4, #0]
 8011398:	f015 0506 	ands.w	r5, r5, #6
 801139c:	d106      	bne.n	80113ac <_printf_common+0x48>
 801139e:	f104 0a19 	add.w	sl, r4, #25
 80113a2:	68e3      	ldr	r3, [r4, #12]
 80113a4:	6832      	ldr	r2, [r6, #0]
 80113a6:	1a9b      	subs	r3, r3, r2
 80113a8:	42ab      	cmp	r3, r5
 80113aa:	dc26      	bgt.n	80113fa <_printf_common+0x96>
 80113ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80113b0:	1e13      	subs	r3, r2, #0
 80113b2:	6822      	ldr	r2, [r4, #0]
 80113b4:	bf18      	it	ne
 80113b6:	2301      	movne	r3, #1
 80113b8:	0692      	lsls	r2, r2, #26
 80113ba:	d42b      	bmi.n	8011414 <_printf_common+0xb0>
 80113bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80113c0:	4649      	mov	r1, r9
 80113c2:	4638      	mov	r0, r7
 80113c4:	47c0      	blx	r8
 80113c6:	3001      	adds	r0, #1
 80113c8:	d01e      	beq.n	8011408 <_printf_common+0xa4>
 80113ca:	6823      	ldr	r3, [r4, #0]
 80113cc:	68e5      	ldr	r5, [r4, #12]
 80113ce:	6832      	ldr	r2, [r6, #0]
 80113d0:	f003 0306 	and.w	r3, r3, #6
 80113d4:	2b04      	cmp	r3, #4
 80113d6:	bf08      	it	eq
 80113d8:	1aad      	subeq	r5, r5, r2
 80113da:	68a3      	ldr	r3, [r4, #8]
 80113dc:	6922      	ldr	r2, [r4, #16]
 80113de:	bf0c      	ite	eq
 80113e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80113e4:	2500      	movne	r5, #0
 80113e6:	4293      	cmp	r3, r2
 80113e8:	bfc4      	itt	gt
 80113ea:	1a9b      	subgt	r3, r3, r2
 80113ec:	18ed      	addgt	r5, r5, r3
 80113ee:	2600      	movs	r6, #0
 80113f0:	341a      	adds	r4, #26
 80113f2:	42b5      	cmp	r5, r6
 80113f4:	d11a      	bne.n	801142c <_printf_common+0xc8>
 80113f6:	2000      	movs	r0, #0
 80113f8:	e008      	b.n	801140c <_printf_common+0xa8>
 80113fa:	2301      	movs	r3, #1
 80113fc:	4652      	mov	r2, sl
 80113fe:	4649      	mov	r1, r9
 8011400:	4638      	mov	r0, r7
 8011402:	47c0      	blx	r8
 8011404:	3001      	adds	r0, #1
 8011406:	d103      	bne.n	8011410 <_printf_common+0xac>
 8011408:	f04f 30ff 	mov.w	r0, #4294967295
 801140c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011410:	3501      	adds	r5, #1
 8011412:	e7c6      	b.n	80113a2 <_printf_common+0x3e>
 8011414:	18e1      	adds	r1, r4, r3
 8011416:	1c5a      	adds	r2, r3, #1
 8011418:	2030      	movs	r0, #48	; 0x30
 801141a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801141e:	4422      	add	r2, r4
 8011420:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011424:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011428:	3302      	adds	r3, #2
 801142a:	e7c7      	b.n	80113bc <_printf_common+0x58>
 801142c:	2301      	movs	r3, #1
 801142e:	4622      	mov	r2, r4
 8011430:	4649      	mov	r1, r9
 8011432:	4638      	mov	r0, r7
 8011434:	47c0      	blx	r8
 8011436:	3001      	adds	r0, #1
 8011438:	d0e6      	beq.n	8011408 <_printf_common+0xa4>
 801143a:	3601      	adds	r6, #1
 801143c:	e7d9      	b.n	80113f2 <_printf_common+0x8e>
	...

08011440 <_printf_i>:
 8011440:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011444:	7e0f      	ldrb	r7, [r1, #24]
 8011446:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011448:	2f78      	cmp	r7, #120	; 0x78
 801144a:	4691      	mov	r9, r2
 801144c:	4680      	mov	r8, r0
 801144e:	460c      	mov	r4, r1
 8011450:	469a      	mov	sl, r3
 8011452:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8011456:	d807      	bhi.n	8011468 <_printf_i+0x28>
 8011458:	2f62      	cmp	r7, #98	; 0x62
 801145a:	d80a      	bhi.n	8011472 <_printf_i+0x32>
 801145c:	2f00      	cmp	r7, #0
 801145e:	f000 80d8 	beq.w	8011612 <_printf_i+0x1d2>
 8011462:	2f58      	cmp	r7, #88	; 0x58
 8011464:	f000 80a3 	beq.w	80115ae <_printf_i+0x16e>
 8011468:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801146c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011470:	e03a      	b.n	80114e8 <_printf_i+0xa8>
 8011472:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011476:	2b15      	cmp	r3, #21
 8011478:	d8f6      	bhi.n	8011468 <_printf_i+0x28>
 801147a:	a101      	add	r1, pc, #4	; (adr r1, 8011480 <_printf_i+0x40>)
 801147c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011480:	080114d9 	.word	0x080114d9
 8011484:	080114ed 	.word	0x080114ed
 8011488:	08011469 	.word	0x08011469
 801148c:	08011469 	.word	0x08011469
 8011490:	08011469 	.word	0x08011469
 8011494:	08011469 	.word	0x08011469
 8011498:	080114ed 	.word	0x080114ed
 801149c:	08011469 	.word	0x08011469
 80114a0:	08011469 	.word	0x08011469
 80114a4:	08011469 	.word	0x08011469
 80114a8:	08011469 	.word	0x08011469
 80114ac:	080115f9 	.word	0x080115f9
 80114b0:	0801151d 	.word	0x0801151d
 80114b4:	080115db 	.word	0x080115db
 80114b8:	08011469 	.word	0x08011469
 80114bc:	08011469 	.word	0x08011469
 80114c0:	0801161b 	.word	0x0801161b
 80114c4:	08011469 	.word	0x08011469
 80114c8:	0801151d 	.word	0x0801151d
 80114cc:	08011469 	.word	0x08011469
 80114d0:	08011469 	.word	0x08011469
 80114d4:	080115e3 	.word	0x080115e3
 80114d8:	682b      	ldr	r3, [r5, #0]
 80114da:	1d1a      	adds	r2, r3, #4
 80114dc:	681b      	ldr	r3, [r3, #0]
 80114de:	602a      	str	r2, [r5, #0]
 80114e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80114e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80114e8:	2301      	movs	r3, #1
 80114ea:	e0a3      	b.n	8011634 <_printf_i+0x1f4>
 80114ec:	6820      	ldr	r0, [r4, #0]
 80114ee:	6829      	ldr	r1, [r5, #0]
 80114f0:	0606      	lsls	r6, r0, #24
 80114f2:	f101 0304 	add.w	r3, r1, #4
 80114f6:	d50a      	bpl.n	801150e <_printf_i+0xce>
 80114f8:	680e      	ldr	r6, [r1, #0]
 80114fa:	602b      	str	r3, [r5, #0]
 80114fc:	2e00      	cmp	r6, #0
 80114fe:	da03      	bge.n	8011508 <_printf_i+0xc8>
 8011500:	232d      	movs	r3, #45	; 0x2d
 8011502:	4276      	negs	r6, r6
 8011504:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011508:	485e      	ldr	r0, [pc, #376]	; (8011684 <_printf_i+0x244>)
 801150a:	230a      	movs	r3, #10
 801150c:	e019      	b.n	8011542 <_printf_i+0x102>
 801150e:	680e      	ldr	r6, [r1, #0]
 8011510:	602b      	str	r3, [r5, #0]
 8011512:	f010 0f40 	tst.w	r0, #64	; 0x40
 8011516:	bf18      	it	ne
 8011518:	b236      	sxthne	r6, r6
 801151a:	e7ef      	b.n	80114fc <_printf_i+0xbc>
 801151c:	682b      	ldr	r3, [r5, #0]
 801151e:	6820      	ldr	r0, [r4, #0]
 8011520:	1d19      	adds	r1, r3, #4
 8011522:	6029      	str	r1, [r5, #0]
 8011524:	0601      	lsls	r1, r0, #24
 8011526:	d501      	bpl.n	801152c <_printf_i+0xec>
 8011528:	681e      	ldr	r6, [r3, #0]
 801152a:	e002      	b.n	8011532 <_printf_i+0xf2>
 801152c:	0646      	lsls	r6, r0, #25
 801152e:	d5fb      	bpl.n	8011528 <_printf_i+0xe8>
 8011530:	881e      	ldrh	r6, [r3, #0]
 8011532:	4854      	ldr	r0, [pc, #336]	; (8011684 <_printf_i+0x244>)
 8011534:	2f6f      	cmp	r7, #111	; 0x6f
 8011536:	bf0c      	ite	eq
 8011538:	2308      	moveq	r3, #8
 801153a:	230a      	movne	r3, #10
 801153c:	2100      	movs	r1, #0
 801153e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011542:	6865      	ldr	r5, [r4, #4]
 8011544:	60a5      	str	r5, [r4, #8]
 8011546:	2d00      	cmp	r5, #0
 8011548:	bfa2      	ittt	ge
 801154a:	6821      	ldrge	r1, [r4, #0]
 801154c:	f021 0104 	bicge.w	r1, r1, #4
 8011550:	6021      	strge	r1, [r4, #0]
 8011552:	b90e      	cbnz	r6, 8011558 <_printf_i+0x118>
 8011554:	2d00      	cmp	r5, #0
 8011556:	d04d      	beq.n	80115f4 <_printf_i+0x1b4>
 8011558:	4615      	mov	r5, r2
 801155a:	fbb6 f1f3 	udiv	r1, r6, r3
 801155e:	fb03 6711 	mls	r7, r3, r1, r6
 8011562:	5dc7      	ldrb	r7, [r0, r7]
 8011564:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8011568:	4637      	mov	r7, r6
 801156a:	42bb      	cmp	r3, r7
 801156c:	460e      	mov	r6, r1
 801156e:	d9f4      	bls.n	801155a <_printf_i+0x11a>
 8011570:	2b08      	cmp	r3, #8
 8011572:	d10b      	bne.n	801158c <_printf_i+0x14c>
 8011574:	6823      	ldr	r3, [r4, #0]
 8011576:	07de      	lsls	r6, r3, #31
 8011578:	d508      	bpl.n	801158c <_printf_i+0x14c>
 801157a:	6923      	ldr	r3, [r4, #16]
 801157c:	6861      	ldr	r1, [r4, #4]
 801157e:	4299      	cmp	r1, r3
 8011580:	bfde      	ittt	le
 8011582:	2330      	movle	r3, #48	; 0x30
 8011584:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011588:	f105 35ff 	addle.w	r5, r5, #4294967295
 801158c:	1b52      	subs	r2, r2, r5
 801158e:	6122      	str	r2, [r4, #16]
 8011590:	f8cd a000 	str.w	sl, [sp]
 8011594:	464b      	mov	r3, r9
 8011596:	aa03      	add	r2, sp, #12
 8011598:	4621      	mov	r1, r4
 801159a:	4640      	mov	r0, r8
 801159c:	f7ff fee2 	bl	8011364 <_printf_common>
 80115a0:	3001      	adds	r0, #1
 80115a2:	d14c      	bne.n	801163e <_printf_i+0x1fe>
 80115a4:	f04f 30ff 	mov.w	r0, #4294967295
 80115a8:	b004      	add	sp, #16
 80115aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80115ae:	4835      	ldr	r0, [pc, #212]	; (8011684 <_printf_i+0x244>)
 80115b0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80115b4:	6829      	ldr	r1, [r5, #0]
 80115b6:	6823      	ldr	r3, [r4, #0]
 80115b8:	f851 6b04 	ldr.w	r6, [r1], #4
 80115bc:	6029      	str	r1, [r5, #0]
 80115be:	061d      	lsls	r5, r3, #24
 80115c0:	d514      	bpl.n	80115ec <_printf_i+0x1ac>
 80115c2:	07df      	lsls	r7, r3, #31
 80115c4:	bf44      	itt	mi
 80115c6:	f043 0320 	orrmi.w	r3, r3, #32
 80115ca:	6023      	strmi	r3, [r4, #0]
 80115cc:	b91e      	cbnz	r6, 80115d6 <_printf_i+0x196>
 80115ce:	6823      	ldr	r3, [r4, #0]
 80115d0:	f023 0320 	bic.w	r3, r3, #32
 80115d4:	6023      	str	r3, [r4, #0]
 80115d6:	2310      	movs	r3, #16
 80115d8:	e7b0      	b.n	801153c <_printf_i+0xfc>
 80115da:	6823      	ldr	r3, [r4, #0]
 80115dc:	f043 0320 	orr.w	r3, r3, #32
 80115e0:	6023      	str	r3, [r4, #0]
 80115e2:	2378      	movs	r3, #120	; 0x78
 80115e4:	4828      	ldr	r0, [pc, #160]	; (8011688 <_printf_i+0x248>)
 80115e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80115ea:	e7e3      	b.n	80115b4 <_printf_i+0x174>
 80115ec:	0659      	lsls	r1, r3, #25
 80115ee:	bf48      	it	mi
 80115f0:	b2b6      	uxthmi	r6, r6
 80115f2:	e7e6      	b.n	80115c2 <_printf_i+0x182>
 80115f4:	4615      	mov	r5, r2
 80115f6:	e7bb      	b.n	8011570 <_printf_i+0x130>
 80115f8:	682b      	ldr	r3, [r5, #0]
 80115fa:	6826      	ldr	r6, [r4, #0]
 80115fc:	6961      	ldr	r1, [r4, #20]
 80115fe:	1d18      	adds	r0, r3, #4
 8011600:	6028      	str	r0, [r5, #0]
 8011602:	0635      	lsls	r5, r6, #24
 8011604:	681b      	ldr	r3, [r3, #0]
 8011606:	d501      	bpl.n	801160c <_printf_i+0x1cc>
 8011608:	6019      	str	r1, [r3, #0]
 801160a:	e002      	b.n	8011612 <_printf_i+0x1d2>
 801160c:	0670      	lsls	r0, r6, #25
 801160e:	d5fb      	bpl.n	8011608 <_printf_i+0x1c8>
 8011610:	8019      	strh	r1, [r3, #0]
 8011612:	2300      	movs	r3, #0
 8011614:	6123      	str	r3, [r4, #16]
 8011616:	4615      	mov	r5, r2
 8011618:	e7ba      	b.n	8011590 <_printf_i+0x150>
 801161a:	682b      	ldr	r3, [r5, #0]
 801161c:	1d1a      	adds	r2, r3, #4
 801161e:	602a      	str	r2, [r5, #0]
 8011620:	681d      	ldr	r5, [r3, #0]
 8011622:	6862      	ldr	r2, [r4, #4]
 8011624:	2100      	movs	r1, #0
 8011626:	4628      	mov	r0, r5
 8011628:	f7ee fde2 	bl	80001f0 <memchr>
 801162c:	b108      	cbz	r0, 8011632 <_printf_i+0x1f2>
 801162e:	1b40      	subs	r0, r0, r5
 8011630:	6060      	str	r0, [r4, #4]
 8011632:	6863      	ldr	r3, [r4, #4]
 8011634:	6123      	str	r3, [r4, #16]
 8011636:	2300      	movs	r3, #0
 8011638:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801163c:	e7a8      	b.n	8011590 <_printf_i+0x150>
 801163e:	6923      	ldr	r3, [r4, #16]
 8011640:	462a      	mov	r2, r5
 8011642:	4649      	mov	r1, r9
 8011644:	4640      	mov	r0, r8
 8011646:	47d0      	blx	sl
 8011648:	3001      	adds	r0, #1
 801164a:	d0ab      	beq.n	80115a4 <_printf_i+0x164>
 801164c:	6823      	ldr	r3, [r4, #0]
 801164e:	079b      	lsls	r3, r3, #30
 8011650:	d413      	bmi.n	801167a <_printf_i+0x23a>
 8011652:	68e0      	ldr	r0, [r4, #12]
 8011654:	9b03      	ldr	r3, [sp, #12]
 8011656:	4298      	cmp	r0, r3
 8011658:	bfb8      	it	lt
 801165a:	4618      	movlt	r0, r3
 801165c:	e7a4      	b.n	80115a8 <_printf_i+0x168>
 801165e:	2301      	movs	r3, #1
 8011660:	4632      	mov	r2, r6
 8011662:	4649      	mov	r1, r9
 8011664:	4640      	mov	r0, r8
 8011666:	47d0      	blx	sl
 8011668:	3001      	adds	r0, #1
 801166a:	d09b      	beq.n	80115a4 <_printf_i+0x164>
 801166c:	3501      	adds	r5, #1
 801166e:	68e3      	ldr	r3, [r4, #12]
 8011670:	9903      	ldr	r1, [sp, #12]
 8011672:	1a5b      	subs	r3, r3, r1
 8011674:	42ab      	cmp	r3, r5
 8011676:	dcf2      	bgt.n	801165e <_printf_i+0x21e>
 8011678:	e7eb      	b.n	8011652 <_printf_i+0x212>
 801167a:	2500      	movs	r5, #0
 801167c:	f104 0619 	add.w	r6, r4, #25
 8011680:	e7f5      	b.n	801166e <_printf_i+0x22e>
 8011682:	bf00      	nop
 8011684:	080148a9 	.word	0x080148a9
 8011688:	080148ba 	.word	0x080148ba

0801168c <_sbrk_r>:
 801168c:	b538      	push	{r3, r4, r5, lr}
 801168e:	4d06      	ldr	r5, [pc, #24]	; (80116a8 <_sbrk_r+0x1c>)
 8011690:	2300      	movs	r3, #0
 8011692:	4604      	mov	r4, r0
 8011694:	4608      	mov	r0, r1
 8011696:	602b      	str	r3, [r5, #0]
 8011698:	f7ef f9ba 	bl	8000a10 <_sbrk>
 801169c:	1c43      	adds	r3, r0, #1
 801169e:	d102      	bne.n	80116a6 <_sbrk_r+0x1a>
 80116a0:	682b      	ldr	r3, [r5, #0]
 80116a2:	b103      	cbz	r3, 80116a6 <_sbrk_r+0x1a>
 80116a4:	6023      	str	r3, [r4, #0]
 80116a6:	bd38      	pop	{r3, r4, r5, pc}
 80116a8:	20007de4 	.word	0x20007de4

080116ac <__sread>:
 80116ac:	b510      	push	{r4, lr}
 80116ae:	460c      	mov	r4, r1
 80116b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80116b4:	f000 f8a8 	bl	8011808 <_read_r>
 80116b8:	2800      	cmp	r0, #0
 80116ba:	bfab      	itete	ge
 80116bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80116be:	89a3      	ldrhlt	r3, [r4, #12]
 80116c0:	181b      	addge	r3, r3, r0
 80116c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80116c6:	bfac      	ite	ge
 80116c8:	6563      	strge	r3, [r4, #84]	; 0x54
 80116ca:	81a3      	strhlt	r3, [r4, #12]
 80116cc:	bd10      	pop	{r4, pc}

080116ce <__swrite>:
 80116ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80116d2:	461f      	mov	r7, r3
 80116d4:	898b      	ldrh	r3, [r1, #12]
 80116d6:	05db      	lsls	r3, r3, #23
 80116d8:	4605      	mov	r5, r0
 80116da:	460c      	mov	r4, r1
 80116dc:	4616      	mov	r6, r2
 80116de:	d505      	bpl.n	80116ec <__swrite+0x1e>
 80116e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80116e4:	2302      	movs	r3, #2
 80116e6:	2200      	movs	r2, #0
 80116e8:	f000 f870 	bl	80117cc <_lseek_r>
 80116ec:	89a3      	ldrh	r3, [r4, #12]
 80116ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80116f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80116f6:	81a3      	strh	r3, [r4, #12]
 80116f8:	4632      	mov	r2, r6
 80116fa:	463b      	mov	r3, r7
 80116fc:	4628      	mov	r0, r5
 80116fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011702:	f000 b817 	b.w	8011734 <_write_r>

08011706 <__sseek>:
 8011706:	b510      	push	{r4, lr}
 8011708:	460c      	mov	r4, r1
 801170a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801170e:	f000 f85d 	bl	80117cc <_lseek_r>
 8011712:	1c43      	adds	r3, r0, #1
 8011714:	89a3      	ldrh	r3, [r4, #12]
 8011716:	bf15      	itete	ne
 8011718:	6560      	strne	r0, [r4, #84]	; 0x54
 801171a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801171e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011722:	81a3      	strheq	r3, [r4, #12]
 8011724:	bf18      	it	ne
 8011726:	81a3      	strhne	r3, [r4, #12]
 8011728:	bd10      	pop	{r4, pc}

0801172a <__sclose>:
 801172a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801172e:	f000 b81b 	b.w	8011768 <_close_r>
	...

08011734 <_write_r>:
 8011734:	b538      	push	{r3, r4, r5, lr}
 8011736:	4d07      	ldr	r5, [pc, #28]	; (8011754 <_write_r+0x20>)
 8011738:	4604      	mov	r4, r0
 801173a:	4608      	mov	r0, r1
 801173c:	4611      	mov	r1, r2
 801173e:	2200      	movs	r2, #0
 8011740:	602a      	str	r2, [r5, #0]
 8011742:	461a      	mov	r2, r3
 8011744:	f7ef f872 	bl	800082c <_write>
 8011748:	1c43      	adds	r3, r0, #1
 801174a:	d102      	bne.n	8011752 <_write_r+0x1e>
 801174c:	682b      	ldr	r3, [r5, #0]
 801174e:	b103      	cbz	r3, 8011752 <_write_r+0x1e>
 8011750:	6023      	str	r3, [r4, #0]
 8011752:	bd38      	pop	{r3, r4, r5, pc}
 8011754:	20007de4 	.word	0x20007de4

08011758 <abort>:
 8011758:	b508      	push	{r3, lr}
 801175a:	2006      	movs	r0, #6
 801175c:	f000 f88e 	bl	801187c <raise>
 8011760:	2001      	movs	r0, #1
 8011762:	f7ef f8f9 	bl	8000958 <_exit>
	...

08011768 <_close_r>:
 8011768:	b538      	push	{r3, r4, r5, lr}
 801176a:	4d06      	ldr	r5, [pc, #24]	; (8011784 <_close_r+0x1c>)
 801176c:	2300      	movs	r3, #0
 801176e:	4604      	mov	r4, r0
 8011770:	4608      	mov	r0, r1
 8011772:	602b      	str	r3, [r5, #0]
 8011774:	f7ef f917 	bl	80009a6 <_close>
 8011778:	1c43      	adds	r3, r0, #1
 801177a:	d102      	bne.n	8011782 <_close_r+0x1a>
 801177c:	682b      	ldr	r3, [r5, #0]
 801177e:	b103      	cbz	r3, 8011782 <_close_r+0x1a>
 8011780:	6023      	str	r3, [r4, #0]
 8011782:	bd38      	pop	{r3, r4, r5, pc}
 8011784:	20007de4 	.word	0x20007de4

08011788 <_fstat_r>:
 8011788:	b538      	push	{r3, r4, r5, lr}
 801178a:	4d07      	ldr	r5, [pc, #28]	; (80117a8 <_fstat_r+0x20>)
 801178c:	2300      	movs	r3, #0
 801178e:	4604      	mov	r4, r0
 8011790:	4608      	mov	r0, r1
 8011792:	4611      	mov	r1, r2
 8011794:	602b      	str	r3, [r5, #0]
 8011796:	f7ef f912 	bl	80009be <_fstat>
 801179a:	1c43      	adds	r3, r0, #1
 801179c:	d102      	bne.n	80117a4 <_fstat_r+0x1c>
 801179e:	682b      	ldr	r3, [r5, #0]
 80117a0:	b103      	cbz	r3, 80117a4 <_fstat_r+0x1c>
 80117a2:	6023      	str	r3, [r4, #0]
 80117a4:	bd38      	pop	{r3, r4, r5, pc}
 80117a6:	bf00      	nop
 80117a8:	20007de4 	.word	0x20007de4

080117ac <_isatty_r>:
 80117ac:	b538      	push	{r3, r4, r5, lr}
 80117ae:	4d06      	ldr	r5, [pc, #24]	; (80117c8 <_isatty_r+0x1c>)
 80117b0:	2300      	movs	r3, #0
 80117b2:	4604      	mov	r4, r0
 80117b4:	4608      	mov	r0, r1
 80117b6:	602b      	str	r3, [r5, #0]
 80117b8:	f7ef f911 	bl	80009de <_isatty>
 80117bc:	1c43      	adds	r3, r0, #1
 80117be:	d102      	bne.n	80117c6 <_isatty_r+0x1a>
 80117c0:	682b      	ldr	r3, [r5, #0]
 80117c2:	b103      	cbz	r3, 80117c6 <_isatty_r+0x1a>
 80117c4:	6023      	str	r3, [r4, #0]
 80117c6:	bd38      	pop	{r3, r4, r5, pc}
 80117c8:	20007de4 	.word	0x20007de4

080117cc <_lseek_r>:
 80117cc:	b538      	push	{r3, r4, r5, lr}
 80117ce:	4d07      	ldr	r5, [pc, #28]	; (80117ec <_lseek_r+0x20>)
 80117d0:	4604      	mov	r4, r0
 80117d2:	4608      	mov	r0, r1
 80117d4:	4611      	mov	r1, r2
 80117d6:	2200      	movs	r2, #0
 80117d8:	602a      	str	r2, [r5, #0]
 80117da:	461a      	mov	r2, r3
 80117dc:	f7ef f90a 	bl	80009f4 <_lseek>
 80117e0:	1c43      	adds	r3, r0, #1
 80117e2:	d102      	bne.n	80117ea <_lseek_r+0x1e>
 80117e4:	682b      	ldr	r3, [r5, #0]
 80117e6:	b103      	cbz	r3, 80117ea <_lseek_r+0x1e>
 80117e8:	6023      	str	r3, [r4, #0]
 80117ea:	bd38      	pop	{r3, r4, r5, pc}
 80117ec:	20007de4 	.word	0x20007de4

080117f0 <__malloc_lock>:
 80117f0:	4801      	ldr	r0, [pc, #4]	; (80117f8 <__malloc_lock+0x8>)
 80117f2:	f7ff bb0d 	b.w	8010e10 <__retarget_lock_acquire_recursive>
 80117f6:	bf00      	nop
 80117f8:	20007de8 	.word	0x20007de8

080117fc <__malloc_unlock>:
 80117fc:	4801      	ldr	r0, [pc, #4]	; (8011804 <__malloc_unlock+0x8>)
 80117fe:	f7ff bb08 	b.w	8010e12 <__retarget_lock_release_recursive>
 8011802:	bf00      	nop
 8011804:	20007de8 	.word	0x20007de8

08011808 <_read_r>:
 8011808:	b538      	push	{r3, r4, r5, lr}
 801180a:	4d07      	ldr	r5, [pc, #28]	; (8011828 <_read_r+0x20>)
 801180c:	4604      	mov	r4, r0
 801180e:	4608      	mov	r0, r1
 8011810:	4611      	mov	r1, r2
 8011812:	2200      	movs	r2, #0
 8011814:	602a      	str	r2, [r5, #0]
 8011816:	461a      	mov	r2, r3
 8011818:	f7ef f8a8 	bl	800096c <_read>
 801181c:	1c43      	adds	r3, r0, #1
 801181e:	d102      	bne.n	8011826 <_read_r+0x1e>
 8011820:	682b      	ldr	r3, [r5, #0]
 8011822:	b103      	cbz	r3, 8011826 <_read_r+0x1e>
 8011824:	6023      	str	r3, [r4, #0]
 8011826:	bd38      	pop	{r3, r4, r5, pc}
 8011828:	20007de4 	.word	0x20007de4

0801182c <_raise_r>:
 801182c:	291f      	cmp	r1, #31
 801182e:	b538      	push	{r3, r4, r5, lr}
 8011830:	4604      	mov	r4, r0
 8011832:	460d      	mov	r5, r1
 8011834:	d904      	bls.n	8011840 <_raise_r+0x14>
 8011836:	2316      	movs	r3, #22
 8011838:	6003      	str	r3, [r0, #0]
 801183a:	f04f 30ff 	mov.w	r0, #4294967295
 801183e:	bd38      	pop	{r3, r4, r5, pc}
 8011840:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8011842:	b112      	cbz	r2, 801184a <_raise_r+0x1e>
 8011844:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011848:	b94b      	cbnz	r3, 801185e <_raise_r+0x32>
 801184a:	4620      	mov	r0, r4
 801184c:	f000 f830 	bl	80118b0 <_getpid_r>
 8011850:	462a      	mov	r2, r5
 8011852:	4601      	mov	r1, r0
 8011854:	4620      	mov	r0, r4
 8011856:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801185a:	f000 b817 	b.w	801188c <_kill_r>
 801185e:	2b01      	cmp	r3, #1
 8011860:	d00a      	beq.n	8011878 <_raise_r+0x4c>
 8011862:	1c59      	adds	r1, r3, #1
 8011864:	d103      	bne.n	801186e <_raise_r+0x42>
 8011866:	2316      	movs	r3, #22
 8011868:	6003      	str	r3, [r0, #0]
 801186a:	2001      	movs	r0, #1
 801186c:	e7e7      	b.n	801183e <_raise_r+0x12>
 801186e:	2400      	movs	r4, #0
 8011870:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011874:	4628      	mov	r0, r5
 8011876:	4798      	blx	r3
 8011878:	2000      	movs	r0, #0
 801187a:	e7e0      	b.n	801183e <_raise_r+0x12>

0801187c <raise>:
 801187c:	4b02      	ldr	r3, [pc, #8]	; (8011888 <raise+0xc>)
 801187e:	4601      	mov	r1, r0
 8011880:	6818      	ldr	r0, [r3, #0]
 8011882:	f7ff bfd3 	b.w	801182c <_raise_r>
 8011886:	bf00      	nop
 8011888:	20000030 	.word	0x20000030

0801188c <_kill_r>:
 801188c:	b538      	push	{r3, r4, r5, lr}
 801188e:	4d07      	ldr	r5, [pc, #28]	; (80118ac <_kill_r+0x20>)
 8011890:	2300      	movs	r3, #0
 8011892:	4604      	mov	r4, r0
 8011894:	4608      	mov	r0, r1
 8011896:	4611      	mov	r1, r2
 8011898:	602b      	str	r3, [r5, #0]
 801189a:	f7ef f84b 	bl	8000934 <_kill>
 801189e:	1c43      	adds	r3, r0, #1
 80118a0:	d102      	bne.n	80118a8 <_kill_r+0x1c>
 80118a2:	682b      	ldr	r3, [r5, #0]
 80118a4:	b103      	cbz	r3, 80118a8 <_kill_r+0x1c>
 80118a6:	6023      	str	r3, [r4, #0]
 80118a8:	bd38      	pop	{r3, r4, r5, pc}
 80118aa:	bf00      	nop
 80118ac:	20007de4 	.word	0x20007de4

080118b0 <_getpid_r>:
 80118b0:	f7ef b838 	b.w	8000924 <_getpid>

080118b4 <_init>:
 80118b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80118b6:	bf00      	nop
 80118b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80118ba:	bc08      	pop	{r3}
 80118bc:	469e      	mov	lr, r3
 80118be:	4770      	bx	lr

080118c0 <_fini>:
 80118c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80118c2:	bf00      	nop
 80118c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80118c6:	bc08      	pop	{r3}
 80118c8:	469e      	mov	lr, r3
 80118ca:	4770      	bx	lr
